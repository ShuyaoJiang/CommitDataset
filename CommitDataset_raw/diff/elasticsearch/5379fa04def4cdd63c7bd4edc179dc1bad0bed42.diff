[+++ b/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +                            holder = null;, +                            try {, +                            } catch (RepositoryException ex) {, +                                logger.warn("failed to change repository [{}]", ex, repositoryMetaData.name());, +                            }, +                        try {, +                        } catch (RepositoryException ex) {, +                            logger.warn("failed to create repository [{}]", ex, repositoryMetaData.name());, +                        }, +++ b/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +                            holder = null;, +                            try {, +                            } catch (RepositoryException ex) {, +                                logger.warn("failed to change repository [{}]", ex, repositoryMetaData.name());, +                            }, +                        try {, +                        } catch (RepositoryException ex) {, +                            logger.warn("failed to create repository [{}]", ex, repositoryMetaData.name());, +                        }, +++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java, +import org.elasticsearch.snapshots.mockstore.MockRepositoryPlugin;, +, +    @Test, +    public void registrationFailureTest() {, +        logger.info("--> start first node");, +        internalCluster().startNode(settingsBuilder().put("plugin.types", MockRepositoryPlugin.class.getName()));, +        logger.info("--> start second node");, +        // Make sure the first node is elected as master, +        internalCluster().startNode(settingsBuilder().put("node.master", false));, +        // Register mock repositories, +        for (int i = 0; i < 5; i++) {, +            client().admin().cluster().preparePutRepository("test-repo" + i), +                    .setType("mock").setSettings(ImmutableSettings.settingsBuilder(), +                    .put("location", newTempDir(LifecycleScope.SUITE))).setVerify(false).get();, +        }, +        logger.info("--> make sure that properly setup repository can be registered on all nodes");, +        client().admin().cluster().preparePutRepository("test-repo-0"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder(), +                .put("location", newTempDir(LifecycleScope.SUITE))).get();, +, +    }, +, +++ b/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +                            holder = null;, +                            try {, +                            } catch (RepositoryException ex) {, +                                logger.warn("failed to change repository [{}]", ex, repositoryMetaData.name());, +                            }, +                        try {, +                        } catch (RepositoryException ex) {, +                            logger.warn("failed to create repository [{}]", ex, repositoryMetaData.name());, +                        }, +++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java, +import org.elasticsearch.snapshots.mockstore.MockRepositoryPlugin;, +, +    @Test, +    public void registrationFailureTest() {, +        logger.info("--> start first node");, +        internalCluster().startNode(settingsBuilder().put("plugin.types", MockRepositoryPlugin.class.getName()));, +        logger.info("--> start second node");, +        // Make sure the first node is elected as master, +        internalCluster().startNode(settingsBuilder().put("node.master", false));, +        // Register mock repositories, +        for (int i = 0; i < 5; i++) {, +            client().admin().cluster().preparePutRepository("test-repo" + i), +                    .setType("mock").setSettings(ImmutableSettings.settingsBuilder(), +                    .put("location", newTempDir(LifecycleScope.SUITE))).setVerify(false).get();, +        }, +        logger.info("--> make sure that properly setup repository can be registered on all nodes");, +        client().admin().cluster().preparePutRepository("test-repo-0"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder(), +                .put("location", newTempDir(LifecycleScope.SUITE))).get();, +, +    }, +, +++ b/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepositoryPlugin.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.snapshots.mockstore;, +, +import org.elasticsearch.plugins.AbstractPlugin;, +import org.elasticsearch.repositories.RepositoriesModule;]