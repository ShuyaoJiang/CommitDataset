[+++ b/src/main/java/org/elasticsearch/indices/warmer/IndicesWarmer.java, +, +        @Override, +        public String toString() {, +            final String value;, +            if (newSearcher != null) {, +                value = newSearcher.reader().toString();, +            } else if (indexReader != null) {, +                value = indexReader.toString();, +            } else {, +                value = "null";, +            }, +            return "WarmerContext: " + value;, +        }, +++ b/src/main/java/org/elasticsearch/indices/warmer/IndicesWarmer.java, +, +        @Override, +        public String toString() {, +            final String value;, +            if (newSearcher != null) {, +                value = newSearcher.reader().toString();, +            } else if (indexReader != null) {, +                value = indexReader.toString();, +            } else {, +                value = "null";, +            }, +            return "WarmerContext: " + value;, +        }, +++ b/src/main/java/org/elasticsearch/indices/warmer/InternalIndicesWarmer.java, +                logger.trace("[{}][{}] top warming [{}]", context.shardId().index().name(), context.shardId().id(), context);, +                logger.trace("[{}][{}] warming [{}]", context.shardId().index().name(), context.shardId().id(), context);, +                } else {, +                    logger.warn("warming has been interrupted", e);, +++ b/src/main/java/org/elasticsearch/indices/warmer/IndicesWarmer.java, +, +        @Override, +        public String toString() {, +            final String value;, +            if (newSearcher != null) {, +                value = newSearcher.reader().toString();, +            } else if (indexReader != null) {, +                value = indexReader.toString();, +            } else {, +                value = "null";, +            }, +            return "WarmerContext: " + value;, +        }, +++ b/src/main/java/org/elasticsearch/indices/warmer/InternalIndicesWarmer.java, +                logger.trace("[{}][{}] top warming [{}]", context.shardId().index().name(), context.shardId().id(), context);, +                logger.trace("[{}][{}] warming [{}]", context.shardId().index().name(), context.shardId().id(), context);, +                } else {, +                    logger.warn("warming has been interrupted", e);, +++ b/src/test/java/org/elasticsearch/index/fielddata/FieldDataLoadingTests.java, +    @Test, +    public void testEagerGlobalOrdinalsFieldDataLoading() throws Exception {, +        assertAcked(prepareCreate("test"), +                .addMapping("type", jsonBuilder().startObject().startObject("type").startObject("properties"), +                        .startObject("name"), +                        .field("type", "string"), +                        .startObject("fielddata").field("loading", "eager_global_ordinals").endObject(), +                        .endObject(), +                        .endObject().endObject().endObject()));, +        ensureGreen();, +, +        client().prepareIndex("test", "type", "1").setSource("name", "name").get();, +        client().admin().indices().prepareRefresh("test").get();, +, +        ClusterStatsResponse response = client().admin().cluster().prepareClusterStats().get();, +        assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), greaterThan(0l));, +    }, +]