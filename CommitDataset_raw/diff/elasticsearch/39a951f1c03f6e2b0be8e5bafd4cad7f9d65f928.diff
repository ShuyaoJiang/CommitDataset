[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregatorFactory.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.search.aggregations.support.ValueType;, +import org.elasticsearch.search.aggregations.support.ValuesSourceType;, +import java.util.Objects;, +public final class CardinalityAggregatorFactory<VS extends ValuesSource> extends ValuesSourceAggregatorFactory.LeafOnly<VS> {, +    public static final ParseField PRECISION_THRESHOLD_FIELD = new ParseField("precision_threshold");, +    private Long precisionThreshold = null;, +, +    public CardinalityAggregatorFactory(String name, ValuesSourceType valuesSourceType, ValueType valueType) {, +        super(name, InternalCardinality.TYPE, valuesSourceType, valueType);, +    }, +, +    /**, +     * Set a precision threshold. Higher values improve accuracy but also, +     * increase memory usage., +     */, +    public void precisionThreshold(long precisionThreshold) {, +    /**, +     * Get the precision threshold. Higher values improve accuracy but also, +     * increase memory usage. Will return <code>null</code> if the, +     * precisionThreshold has not been set yet., +     */, +    public Long precisionThreshold() {, +        return precisionThreshold;, +    }, +, +    /**, +     * @deprecated no replacement - values will always be rehashed, +     */, +    @Deprecated, +    public void rehash(boolean rehash) {, +        // Deprecated all values are already rehashed so do nothing, +    }, +, +        return precisionThreshold == null ? defaultPrecision(parent) : HyperLogLogPlusPlus.precisionFromThreshold(precisionThreshold);, +    protected Aggregator doCreateInternal(VS valuesSource, AggregationContext context, Aggregator parent,, +    @Override, +    protected ValuesSourceAggregatorFactory<VS> innerReadFrom(String name, ValuesSourceType valuesSourceType,, +            ValueType targetValueType, StreamInput in) throws IOException {, +        CardinalityAggregatorFactory<VS> factory = new CardinalityAggregatorFactory<>(name, valuesSourceType, targetValueType);, +        if (in.readBoolean()) {, +            factory.precisionThreshold = in.readLong();, +        }, +        return factory;, +    }, +, +    @Override, +    protected void innerWriteTo(StreamOutput out) throws IOException {, +        boolean hasPrecisionThreshold = precisionThreshold != null;, +        out.writeBoolean(hasPrecisionThreshold);, +        if (hasPrecisionThreshold) {, +            out.writeLong(precisionThreshold);, +        }, +    }, +, +    @Override, +    public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {, +        if (precisionThreshold != null) {, +            builder.field(PRECISION_THRESHOLD_FIELD.getPreferredName(), precisionThreshold);, +        }, +        return builder;, +    }, +, +    @Override, +    protected int innerHashCode() {, +        return Objects.hash(precisionThreshold);, +    }, +, +    @Override, +    protected boolean innerEquals(Object obj) {, +        CardinalityAggregatorFactory<ValuesSource> other = (CardinalityAggregatorFactory<ValuesSource>) obj;, +        return Objects.equals(precisionThreshold, other.precisionThreshold);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregatorFactory.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.search.aggregations.support.ValueType;, +import org.elasticsearch.search.aggregations.support.ValuesSourceType;, +import java.util.Objects;, +public final class CardinalityAggregatorFactory<VS extends ValuesSource> extends ValuesSourceAggregatorFactory.LeafOnly<VS> {, +    public static final ParseField PRECISION_THRESHOLD_FIELD = new ParseField("precision_threshold");, +    private Long precisionThreshold = null;, +, +    public CardinalityAggregatorFactory(String name, ValuesSourceType valuesSourceType, ValueType valueType) {, +        super(name, InternalCardinality.TYPE, valuesSourceType, valueType);, +    }, +, +    /**, +     * Set a precision threshold. Higher values improve accuracy but also, +     * increase memory usage., +     */, +    public void precisionThreshold(long precisionThreshold) {, +    /**]