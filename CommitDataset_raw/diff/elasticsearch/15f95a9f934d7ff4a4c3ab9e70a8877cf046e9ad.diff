[+++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +        private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(ESLoggerFactory.getLogger(TypeFieldType.class));, +, +        @Override, +        public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, QueryShardContext context) {, +            DEPRECATION_LOGGER.deprecatedAndMaybeLog("range_single_type",, +                    "Running [range] query on [_type] field for an index with a single type. As types are deprecated, this functionality will be removed in future releases.");, +            Query result = new MatchAllDocsQuery();, +            String type = context.getMapperService().documentMapper().type();, +            if (type != null) {, +                BytesRef typeBytes = new BytesRef(type);, +                if (lowerTerm != null) {, +                    int comp = indexedValueForSearch(lowerTerm).compareTo(typeBytes);, +                    if (comp > 0 || (comp == 0 && includeLower == false)) {, +                        result = new MatchNoDocsQuery("[_type] was lexicographically smaller than lower bound of range");, +                    }, +                }, +                if (upperTerm != null) {, +                    int comp = indexedValueForSearch(upperTerm).compareTo(typeBytes);, +                    if (comp < 0 || (comp == 0 && includeUpper == false)) {, +                        result = new MatchNoDocsQuery("[_type] was lexicographically greater than upper bound of range");, +                    }, +                }, +            }, +            return result;, +        }, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeFieldMapper.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +        private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(ESLoggerFactory.getLogger(TypeFieldType.class));, +, +        @Override, +        public Query rangeQuery(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, QueryShardContext context) {, +            DEPRECATION_LOGGER.deprecatedAndMaybeLog("range_single_type",, +                    "Running [range] query on [_type] field for an index with a single type. As types are deprecated, this functionality will be removed in future releases.");, +            Query result = new MatchAllDocsQuery();, +            String type = context.getMapperService().documentMapper().type();, +            if (type != null) {, +                BytesRef typeBytes = new BytesRef(type);, +                if (lowerTerm != null) {, +                    int comp = indexedValueForSearch(lowerTerm).compareTo(typeBytes);, +                    if (comp > 0 || (comp == 0 && includeLower == false)) {, +                        result = new MatchNoDocsQuery("[_type] was lexicographically smaller than lower bound of range");, +                    }, +                }, +                if (upperTerm != null) {, +                    int comp = indexedValueForSearch(upperTerm).compareTo(typeBytes);, +                    if (comp < 0 || (comp == 0 && includeUpper == false)) {, +                        result = new MatchNoDocsQuery("[_type] was lexicographically greater than upper bound of range");, +                    }, +                }, +            }, +            return result;, +        }, +++ b/server/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java, +, +    public void testRangeQueryTypeField_31476() throws Exception {, +        assertAcked(prepareCreate("test").addMapping("foo", "field", "type=keyword"));, +, +        client().prepareIndex("test", "foo", "1").setSource("field", "value").get();, +        refresh();, +, +        RangeQueryBuilder range = new RangeQueryBuilder("_type").from("ape").to("zebra");, +        SearchResponse searchResponse = client().prepareSearch("test").setQuery(range).get();, +        assertHitCount(searchResponse, 1);, +, +        range = new RangeQueryBuilder("_type").from("monkey").to("zebra");, +        searchResponse = client().prepareSearch("test").setQuery(range).get();, +        assertHitCount(searchResponse, 0);, +, +        range = new RangeQueryBuilder("_type").from("ape").to("donkey");, +        searchResponse = client().prepareSearch("test").setQuery(range).get();, +        assertHitCount(searchResponse, 0);, +, +        range = new RangeQueryBuilder("_type").from("ape").to("foo").includeUpper(false);, +        searchResponse = client().prepareSearch("test").setQuery(range).get();, +        assertHitCount(searchResponse, 0);, +, +        range = new RangeQueryBuilder("_type").from("ape").to("foo").includeUpper(true);, +        searchResponse = client().prepareSearch("test").setQuery(range).get();, +        assertHitCount(searchResponse, 1);, +, +        range = new RangeQueryBuilder("_type").from("foo").to("zebra").includeLower(false);, +        searchResponse = client().prepareSearch("test").setQuery(range).get();, +        assertHitCount(searchResponse, 0);, +, +        range = new RangeQueryBuilder("_type").from("foo").to("zebra").includeLower(true);, +        searchResponse = client().prepareSearch("test").setQuery(range).get();, +        assertHitCount(searchResponse, 1);, +    }, +]