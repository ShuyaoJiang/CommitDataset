[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/path/PathTrie.java, +, +    public static interface Decoder {, +        String decode(String value);, +    }, +, +    public static final Decoder NO_DECODER = new Decoder() {, +        @Override public String decode(String value) {, +            return value;, +        }, +    };, +, +    private final Decoder decoder;, +        this("/", "*", NO_DECODER);, +    public PathTrie(Decoder decoder) {, +        this("/", "*", decoder);, +    }, +, +    public PathTrie(String separator, String wildcard, Decoder decoder) {, +        this.decoder = decoder;, +    public class TrieNode<T> {, +, +        private void put(Map<String, String> params, String key, String value) {, +            params.put(key, decoder.decode(value));, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/path/PathTrie.java, +, +    public static interface Decoder {, +        String decode(String value);, +    }, +, +    public static final Decoder NO_DECODER = new Decoder() {, +        @Override public String decode(String value) {, +            return value;, +        }, +    };, +, +    private final Decoder decoder;, +        this("/", "*", NO_DECODER);, +    public PathTrie(Decoder decoder) {, +        this("/", "*", decoder);, +    }, +, +    public PathTrie(String separator, String wildcard, Decoder decoder) {, +        this.decoder = decoder;, +    public class TrieNode<T> {, +, +        private void put(Map<String, String> params, String key, String value) {, +            params.put(key, decoder.decode(value));, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.support.RestUtils;, +    private final PathTrie<HttpServerHandler> getHandlers = new PathTrie<HttpServerHandler>(RestUtils.REST_DECODER);, +    private final PathTrie<HttpServerHandler> postHandlers = new PathTrie<HttpServerHandler>(RestUtils.REST_DECODER);, +    private final PathTrie<HttpServerHandler> putHandlers = new PathTrie<HttpServerHandler>(RestUtils.REST_DECODER);, +    private final PathTrie<HttpServerHandler> deleteHandlers = new PathTrie<HttpServerHandler>(RestUtils.REST_DECODER);, +    private final PathTrie<HttpServerHandler> headHandlers = new PathTrie<HttpServerHandler>(RestUtils.REST_DECODER);, +    private final PathTrie<HttpServerHandler> optionsHandlers = new PathTrie<HttpServerHandler>(RestUtils.REST_DECODER);, +        // we use rawPath since we don't want to decode it while processing the path resolution, +        // so we can handle things like:, +        // my_index/my_type/http%3A%2F%2Fwww.google.com, +        return request.rawPath();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/path/PathTrie.java, +, +    public static interface Decoder {, +        String decode(String value);, +    }, +, +    public static final Decoder NO_DECODER = new Decoder() {, +        @Override public String decode(String value) {, +            return value;, +        }, +    };, +, +    private final Decoder decoder;, +        this("/", "*", NO_DECODER);, +    public PathTrie(Decoder decoder) {, +        this("/", "*", decoder);, +    }, +, +    public PathTrie(String separator, String wildcard, Decoder decoder) {, +        this.decoder = decoder;, +    public class TrieNode<T> {, +, +        private void put(Map<String, String> params, String key, String value) {, +            params.put(key, decoder.decode(value));, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.rest.support.RestUtils;, +    private final PathTrie<HttpServerHandler> getHandlers = new PathTrie<HttpServerHandler>(RestUtils.REST_DECODER);, +    private final PathTrie<HttpServerHandler> postHandlers = new PathTrie<HttpServerHandler>(RestUtils.REST_DECODER);, +    private final PathTrie<HttpServerHandler> putHandlers = new PathTrie<HttpServerHandler>(RestUtils.REST_DECODER);, +    private final PathTrie<HttpServerHandler> deleteHandlers = new PathTrie<HttpServerHandler>(RestUtils.REST_DECODER);, +    private final PathTrie<HttpServerHandler> headHandlers = new PathTrie<HttpServerHandler>(RestUtils.REST_DECODER);, +    private final PathTrie<HttpServerHandler> optionsHandlers = new PathTrie<HttpServerHandler>(RestUtils.REST_DECODER);, +        // we use rawPath since we don't want to decode it while processing the path resolution, +        // so we can handle things like:, +        // my_index/my_type/http%3A%2F%2Fwww.google.com, +        return request.rawPath();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java]