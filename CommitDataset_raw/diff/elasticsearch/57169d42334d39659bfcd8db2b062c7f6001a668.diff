[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.env.NodeEnvironment;, +        NodeEnvironment nodeEnvironment = new NodeEnvironment(settings, environment);, +, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, nodeEnvironment));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, nodeEnvironment));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, nodeEnvironment));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.env.NodeEnvironment;, +        NodeEnvironment nodeEnvironment = new NodeEnvironment(settings, environment);, +, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, nodeEnvironment));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, nodeEnvironment));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, nodeEnvironment));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/Version.java, +        StringBuilder sb = new StringBuilder("elasticsearch/");, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.env.NodeEnvironment;, +        NodeEnvironment nodeEnvironment = new NodeEnvironment(settings, environment);, +, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, nodeEnvironment));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, nodeEnvironment));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, nodeEnvironment));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/Version.java, +        StringBuilder sb = new StringBuilder("elasticsearch/");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +                logger.info("creating Index [{}], cause [{}], shards [{}]/[{}], mappings {}", index, cause, indexMetaData.numberOfShards(), indexMetaData.numberOfReplicas(), fMappings.keySet());, +                logger.warn("failed to read mapping [" + fileNameNoSuffix + "] from location [" + mappingFile + "], ignoring...", e);, +        logger.info("deleting index [{}]", index);, +            logger.debug("index [" + index + "]: Update mapping [" + type + "] (dynamic) with source [" + updatedMappingSource + "]");, +            logger.info("index [" + index + "]: Update mapping [" + type + "] (dynamic)");, +                logger.debug("index [" + index + "]: Put mapping [" + mapping.v1() + "] with source [" + mapping.v2() + "]");, +                logger.info("index [" + index + "]: Put mapping [" + mapping.v1() + "]");, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.env.NodeEnvironment;, +        NodeEnvironment nodeEnvironment = new NodeEnvironment(settings, environment);, +, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, nodeEnvironment));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, nodeEnvironment));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, nodeEnvironment));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/Version.java, +        StringBuilder sb = new StringBuilder("elasticsearch/");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +                logger.info("creating Index [{}], cause [{}], shards [{}]/[{}], mappings {}", index, cause, indexMetaData.numberOfShards(), indexMetaData.numberOfReplicas(), fMappings.keySet());, +                logger.warn("failed to read mapping [" + fileNameNoSuffix + "] from location [" + mappingFile + "], ignoring...", e);, +        logger.info("deleting index [{}]", index);, +            logger.debug("index [" + index + "]: Update mapping [" + type + "] (dynamic) with source [" + updatedMappingSource + "]");, +            logger.info("index [" + index + "]: Update mapping [" + type + "] (dynamic)");, +                logger.debug("index [" + index + "]: Put mapping [" + mapping.v1() + "] with source [" + mapping.v2() + "]");, +                logger.info("index [" + index + "]: Put mapping [" + mapping.v1() + "]");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/transport/BoundTransportAddress.java, +        return "bound_address {" + boundAddress + "}, publish_address {" + publishAddress + "}";, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.env.NodeEnvironment;, +        NodeEnvironment nodeEnvironment = new NodeEnvironment(settings, environment);, +, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, nodeEnvironment));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, nodeEnvironment));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, nodeEnvironment));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/Version.java, +        StringBuilder sb = new StringBuilder("elasticsearch/");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +                logger.info("creating Index [{}], cause [{}], shards [{}]/[{}], mappings {}", index, cause, indexMetaData.numberOfShards(), indexMetaData.numberOfReplicas(), fMappings.keySet());, +                logger.warn("failed to read mapping [" + fileNameNoSuffix + "] from location [" + mappingFile + "], ignoring...", e);, +        logger.info("deleting index [{}]", index);, +            logger.debug("index [" + index + "]: Update mapping [" + type + "] (dynamic) with source [" + updatedMappingSource + "]");, +            logger.info("index [" + index + "]: Update mapping [" + type + "] (dynamic)");, +                logger.debug("index [" + index + "]: Put mapping [" + mapping.v1() + "] with source [" + mapping.v2() + "]");, +                logger.info("index [" + index + "]: Put mapping [" + mapping.v1() + "]");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/transport/BoundTransportAddress.java, +        return "bound_address {" + boundAddress + "}, publish_address {" + publishAddress + "}";, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/env/EnvironmentModule.java, + * @author kimchy (shay.banon), +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.env.NodeEnvironment;, +        NodeEnvironment nodeEnvironment = new NodeEnvironment(settings, environment);, +, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, nodeEnvironment));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, nodeEnvironment));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, nodeEnvironment));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/Version.java, +        StringBuilder sb = new StringBuilder("elasticsearch/");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +                logger.info("creating Index [{}], cause [{}], shards [{}]/[{}], mappings {}", index, cause, indexMetaData.numberOfShards(), indexMetaData.numberOfReplicas(), fMappings.keySet());, +                logger.warn("failed to read mapping [" + fileNameNoSuffix + "] from location [" + mappingFile + "], ignoring...", e);, +        logger.info("deleting index [{}]", index);, +            logger.debug("index [" + index + "]: Update mapping [" + type + "] (dynamic) with source [" + updatedMappingSource + "]");, +            logger.info("index [" + index + "]: Update mapping [" + type + "] (dynamic)");, +                logger.debug("index [" + index + "]: Put mapping [" + mapping.v1() + "] with source [" + mapping.v2() + "]");, +                logger.info("index [" + index + "]: Put mapping [" + mapping.v1() + "]");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/transport/BoundTransportAddress.java, +        return "bound_address {" + boundAddress + "}, publish_address {" + publishAddress + "}";, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/env/EnvironmentModule.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this]