[+++ b/plugin/src/test/java/org/elasticsearch/integration/DocumentLevelSecurityTests.java, +import org.elasticsearch.join.ParentJoinPlugin;, +import org.elasticsearch.join.aggregations.Children;, +import org.elasticsearch.join.aggregations.JoinAggregationBuilders;, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +    public void testParentChild_parentField() {, +        verifyParentChild();, +    }, +    public void testParentChild_joinField() {, +        assertAcked(prepareCreate("test"), +                .addMapping("doc", "join_field", "type=join,parent=child", "field1", "type=text", "field2", "type=text",, +                        "field3", "type=text"));, +        ensureGreen();, +, +        // index simple data, +        client().prepareIndex("test", "doc", "p1").setSource("join_field", "parent", "field1", "value1").get();, +, +        Map<String, Object> source = new HashMap<>();, +        source.put("field2", "value2");, +        Map<String, Object> joinField = new HashMap<>();, +        joinField.put("name", "child");, +        joinField.put("parent", "p1");, +        source.put("join_field", joinField);, +        client().prepareIndex("test", "doc", "c1").setSource(source).setRouting("p1").get();, +        client().prepareIndex("test", "doc", "c2").setSource(source).setRouting("p1").get();, +        source = new HashMap<>();, +        source.put("field3", "value3");, +        source.put("join_field", joinField);, +        client().prepareIndex("test", "doc", "c3").setSource(source).setRouting("p1").get();, +        refresh();, +        verifyParentChild();, +    }, +, +    private void verifyParentChild() {, +++ b/plugin/src/test/java/org/elasticsearch/integration/DocumentLevelSecurityTests.java, +import org.elasticsearch.join.ParentJoinPlugin;, +import org.elasticsearch.join.aggregations.Children;, +import org.elasticsearch.join.aggregations.JoinAggregationBuilders;, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +    public void testParentChild_parentField() {, +        verifyParentChild();, +    }, +    public void testParentChild_joinField() {, +        assertAcked(prepareCreate("test"), +                .addMapping("doc", "join_field", "type=join,parent=child", "field1", "type=text", "field2", "type=text",, +                        "field3", "type=text"));, +        ensureGreen();, +, +        // index simple data, +        client().prepareIndex("test", "doc", "p1").setSource("join_field", "parent", "field1", "value1").get();, +, +        Map<String, Object> source = new HashMap<>();, +        source.put("field2", "value2");, +        Map<String, Object> joinField = new HashMap<>();, +        joinField.put("name", "child");, +        joinField.put("parent", "p1");, +        source.put("join_field", joinField);, +        client().prepareIndex("test", "doc", "c1").setSource(source).setRouting("p1").get();, +        client().prepareIndex("test", "doc", "c2").setSource(source).setRouting("p1").get();, +        source = new HashMap<>();, +        source.put("field3", "value3");, +        source.put("join_field", joinField);, +        client().prepareIndex("test", "doc", "c3").setSource(source).setRouting("p1").get();, +        refresh();, +        verifyParentChild();, +    }, +, +    private void verifyParentChild() {, +++ b/plugin/src/test/java/org/elasticsearch/integration/FieldLevelSecurityTests.java, +import org.elasticsearch.join.ParentJoinPlugin;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.elasticsearch.test.SecurityIntegTestCase;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import static org.elasticsearch.xpack.security.authc.support.UsernamePasswordToken.BASIC_AUTH_HEADER;, +import static org.elasticsearch.xpack.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;, +                "           grant: [ field1, join_field* ]\n" +, +    public void testParentChild_parentField() {, +        verifyParentChild();, +    }, +    public void testParentChild_joinField() {, +        assertAcked(prepareCreate("test"), +                .addMapping("doc", "join_field", "type=join,parent=child"));, +        ensureGreen();, +, +        // index simple data, +        client().prepareIndex("test", "doc", "p1").setSource("join_field", "parent").get();, +        Map<String, Object> source = new HashMap<>();, +        source.put("field1", "red");, +        Map<String, Object> joinField = new HashMap<>();, +        joinField.put("name", "child");, +        joinField.put("parent", "p1");]