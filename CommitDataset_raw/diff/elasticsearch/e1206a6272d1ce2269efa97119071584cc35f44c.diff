[+++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +        httpClient = new HttpClient(settings, getSslService(), cryptoService);, +        emailAttachmentParsers.put(HttpEmailAttachementParser.TYPE, new HttpEmailAttachementParser(httpClient, templateEngine));, +        emailAttachmentParsers.put(ReportingAttachmentParser.TYPE, new ReportingAttachmentParser(settings, httpClient, templateEngine));, +        actionFactoryMap.put(WebhookAction.TYPE, new WebhookActionFactory(settings, httpClient, templateEngine));, +        inputFactories.put(HttpInput.TYPE, new HttpInputFactory(settings, httpClient, templateEngine));, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +        httpClient = new HttpClient(settings, getSslService(), cryptoService);, +        emailAttachmentParsers.put(HttpEmailAttachementParser.TYPE, new HttpEmailAttachementParser(httpClient, templateEngine));, +        emailAttachmentParsers.put(ReportingAttachmentParser.TYPE, new ReportingAttachmentParser(settings, httpClient, templateEngine));, +        actionFactoryMap.put(WebhookAction.TYPE, new WebhookActionFactory(settings, httpClient, templateEngine));, +        inputFactories.put(HttpInput.TYPE, new HttpInputFactory(settings, httpClient, templateEngine));, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/webhook/WebhookAction.java, +    public static WebhookAction parse(String watchId, String actionId, XContentParser parser) throws IOException {, +            HttpRequestTemplate request = HttpRequestTemplate.Parser.parse(parser);, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +        httpClient = new HttpClient(settings, getSslService(), cryptoService);, +        emailAttachmentParsers.put(HttpEmailAttachementParser.TYPE, new HttpEmailAttachementParser(httpClient, templateEngine));, +        emailAttachmentParsers.put(ReportingAttachmentParser.TYPE, new ReportingAttachmentParser(settings, httpClient, templateEngine));, +        actionFactoryMap.put(WebhookAction.TYPE, new WebhookActionFactory(settings, httpClient, templateEngine));, +        inputFactories.put(HttpInput.TYPE, new HttpInputFactory(settings, httpClient, templateEngine));, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/webhook/WebhookAction.java, +    public static WebhookAction parse(String watchId, String actionId, XContentParser parser) throws IOException {, +            HttpRequestTemplate request = HttpRequestTemplate.Parser.parse(parser);, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/webhook/WebhookActionFactory.java, +    public WebhookActionFactory(Settings settings, HttpClient httpClient, TextTemplateEngine templateEngine) {, +        return new ExecutableWebhookAction(WebhookAction.parse(watchId, actionId, parser),, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +        httpClient = new HttpClient(settings, getSslService(), cryptoService);, +        emailAttachmentParsers.put(HttpEmailAttachementParser.TYPE, new HttpEmailAttachementParser(httpClient, templateEngine));, +        emailAttachmentParsers.put(ReportingAttachmentParser.TYPE, new ReportingAttachmentParser(settings, httpClient, templateEngine));, +        actionFactoryMap.put(WebhookAction.TYPE, new WebhookActionFactory(settings, httpClient, templateEngine));, +        inputFactories.put(HttpInput.TYPE, new HttpInputFactory(settings, httpClient, templateEngine));, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/webhook/WebhookAction.java, +    public static WebhookAction parse(String watchId, String actionId, XContentParser parser) throws IOException {, +            HttpRequestTemplate request = HttpRequestTemplate.Parser.parse(parser);, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/webhook/WebhookActionFactory.java, +    public WebhookActionFactory(Settings settings, HttpClient httpClient, TextTemplateEngine templateEngine) {, +        return new ExecutableWebhookAction(WebhookAction.parse(watchId, actionId, parser),, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/BasicAuth.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.watcher.common.http;, +, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ToXContentObject;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.xpack.core.watcher.common.secret.Secret;, +import org.elasticsearch.xpack.core.watcher.crypto.CryptoService;, +import org.elasticsearch.xpack.core.watcher.support.xcontent.WatcherParams;, +import org.elasticsearch.xpack.core.watcher.support.xcontent.WatcherXContentParser;, +, +import java.io.IOException;, +import java.util.Objects;, +, +public class BasicAuth implements ToXContentObject {, +, +    public static final String TYPE = "basic";, +, +    final String username;, +    final Secret password;, +, +    public BasicAuth(String username, char[] password) {, +        this(username, new Secret(password));, +    }, +, +    public BasicAuth(String username, Secret password) {, +        this.username = username;, +        this.password = password;, +    }, +, +    public String getUsername() {, +        return username;, +    }, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        BasicAuth other = (BasicAuth) o;, +, +        return Objects.equals(username, other.username) && Objects.equals(password, other.password);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(username, password);, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        builder.field(Field.USERNAME.getPreferredName(), username);, +        // if the password is null, do not render it out, so we have the possibility to call toXContent when we want to update a watch]