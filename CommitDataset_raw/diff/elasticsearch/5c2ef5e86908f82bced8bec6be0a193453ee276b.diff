[+++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java, +                IndexFieldData.Builder builder = fieldType.fielddataBuilder(shardContext.getFullyQualifiedIndex().getName());, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java, +                IndexFieldData.Builder builder = fieldType.fielddataBuilder(shardContext.getFullyQualifiedIndex().getName());, +++ b/server/src/main/java/org/elasticsearch/index/mapper/IndexFieldMapper.java, +            if (isSameIndex(value, context.getFullyQualifiedIndex().getName())) {, +                if (isSameIndex(value, context.getFullyQualifiedIndex().getName())) {, +            return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.getFullyQualifiedIndex().getName(), +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java, +                IndexFieldData.Builder builder = fieldType.fielddataBuilder(shardContext.getFullyQualifiedIndex().getName());, +++ b/server/src/main/java/org/elasticsearch/index/mapper/IndexFieldMapper.java, +            if (isSameIndex(value, context.getFullyQualifiedIndex().getName())) {, +                if (isSameIndex(value, context.getFullyQualifiedIndex().getName())) {, +            return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.getFullyQualifiedIndex().getName(), +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    private final Index fullyQualifiedIndex;, +        this.fullyQualifiedIndex = new Index(RemoteClusterAware.buildRemoteIndexName(clusterAlias, indexSettings.getIndex().getName()),, +            indexSettings.getIndex().getUUID());, +        return (IFD) indexFieldDataService.apply(fieldType, fullyQualifiedIndex.getName());, +                mappedFieldType -> indexFieldDataService.apply(mappedFieldType, fullyQualifiedIndex.getName()), types);, +     * Returns the fully qualified index including a remote cluster alias if applicable, and the index uuid, +    public Index getFullyQualifiedIndex() {, +        return fullyQualifiedIndex;, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java, +                IndexFieldData.Builder builder = fieldType.fielddataBuilder(shardContext.getFullyQualifiedIndex().getName());, +++ b/server/src/main/java/org/elasticsearch/index/mapper/IndexFieldMapper.java, +            if (isSameIndex(value, context.getFullyQualifiedIndex().getName())) {, +                if (isSameIndex(value, context.getFullyQualifiedIndex().getName())) {, +            return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.getFullyQualifiedIndex().getName(), +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    private final Index fullyQualifiedIndex;, +        this.fullyQualifiedIndex = new Index(RemoteClusterAware.buildRemoteIndexName(clusterAlias, indexSettings.getIndex().getName()),, +            indexSettings.getIndex().getUUID());, +        return (IFD) indexFieldDataService.apply(fieldType, fullyQualifiedIndex.getName());, +                mappedFieldType -> indexFieldDataService.apply(mappedFieldType, fullyQualifiedIndex.getName()), types);, +     * Returns the fully qualified index including a remote cluster alias if applicable, and the index uuid, +    public Index getFullyQualifiedIndex() {, +        return fullyQualifiedIndex;, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardException.java, +        this(context.getFullyQualifiedIndex(), msg, cause, args);, +    public QueryShardException(Index index, String msg, Throwable cause, Object... args) {, +        super(msg, cause, args);, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java, +                IndexFieldData.Builder builder = fieldType.fielddataBuilder(shardContext.getFullyQualifiedIndex().getName());, +++ b/server/src/main/java/org/elasticsearch/index/mapper/IndexFieldMapper.java, +            if (isSameIndex(value, context.getFullyQualifiedIndex().getName())) {, +                if (isSameIndex(value, context.getFullyQualifiedIndex().getName())) {, +            return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.getFullyQualifiedIndex().getName(), +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    private final Index fullyQualifiedIndex;, +        this.fullyQualifiedIndex = new Index(RemoteClusterAware.buildRemoteIndexName(clusterAlias, indexSettings.getIndex().getName()),, +            indexSettings.getIndex().getUUID());, +        return (IFD) indexFieldDataService.apply(fieldType, fullyQualifiedIndex.getName());, +                mappedFieldType -> indexFieldDataService.apply(mappedFieldType, fullyQualifiedIndex.getName()), types);, +     * Returns the fully qualified index including a remote cluster alias if applicable, and the index uuid, +    public Index getFullyQualifiedIndex() {, +        return fullyQualifiedIndex;, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardException.java, +        this(context.getFullyQualifiedIndex(), msg, cause, args);, +    public QueryShardException(Index index, String msg, Throwable cause, Object... args) {, +        super(msg, cause, args);, +++ b/server/src/test/java/org/elasticsearch/index/query/QueryShardContextTests.java, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import java.util.Collections;, +        QueryShardContext context = createQueryShardContext(IndexMetaData.INDEX_UUID_NA_VALUE, null);, +        QueryShardContext context = createQueryShardContext(IndexMetaData.INDEX_UUID_NA_VALUE, clusterAlias);, +, +, +        Mapper.BuilderContext ctx = new Mapper.BuilderContext(context.getIndexSettings().getSettings(), new ContentPath());, +        IndexFieldMapper mapper = new IndexFieldMapper.Builder(null).build(ctx);, +        String expected = clusterAlias == null ? context.getIndexSettings().getIndexMetaData().getIndex().getName(), +            : clusterAlias + ":" + context.getIndexSettings().getIndex().getName();, +    public void testGetFullyQualifiedIndex() {, +        String clusterAlias = randomAlphaOfLengthBetween(5, 10);, +        String indexUuid = randomAlphaOfLengthBetween(3, 10);, +        QueryShardContext shardContext = createQueryShardContext(indexUuid, clusterAlias);, +        assertThat(shardContext.getFullyQualifiedIndex().getName(), equalTo(clusterAlias + ":index"));, +        assertThat(shardContext.getFullyQualifiedIndex().getUUID(), equalTo(indexUuid));, +    }, +, +    public static QueryShardContext createQueryShardContext(String indexUuid, String clusterAlias) {, +        IndexMetaData.Builder indexMetadataBuilder = new IndexMetaData.Builder("index");, +        indexMetadataBuilder.settings(Settings.builder().put("index.version.created", Version.CURRENT), +            .put("index.number_of_shards", 1), +            .put("index.number_of_replicas", 1), +            .put(IndexMetaData.SETTING_INDEX_UUID, indexUuid), +        );, +        IndexMetaData indexMetaData = indexMetadataBuilder.build();, +        IndexSettings indexSettings = new IndexSettings(indexMetaData, Settings.EMPTY);, +        MapperService mapperService = mock(MapperService.class);, +        when(mapperService.getIndexSettings()).thenReturn(indexSettings);, +        when(mapperService.index()).thenReturn(indexMetaData.getIndex());, +        final long nowInMillis = randomNonNegativeLong();, +, +        return new QueryShardContext(, +            0, indexSettings, null, (mappedFieldType, idxName) ->, +            mappedFieldType.fielddataBuilder(idxName).build(indexSettings, mappedFieldType, null, null, null), +            , mapperService, null, null, NamedXContentRegistry.EMPTY, new NamedWriteableRegistry(Collections.emptyList()), null, null,, +            () -> nowInMillis, clusterAlias);]