[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.AckWatchRequest;, +import org.elasticsearch.client.watcher.AckWatchResponse;, +, +    /**, +     * Acknowledges a watch., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html">, +     * the docs</a> for more information., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException if there is a problem sending the request or parsing back the response, +     */, +    public AckWatchResponse ackWatch(AckWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::ackWatch, options,, +            AckWatchResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously acknowledges a watch., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html">, +     * the docs</a> for more information., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon completion of the request, +     */, +    public void ackWatchAsync(AckWatchRequest request, RequestOptions options, ActionListener<AckWatchResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::ackWatch, options,, +            AckWatchResponse::fromXContent, listener, emptySet());, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.AckWatchRequest;, +import org.elasticsearch.client.watcher.AckWatchResponse;, +, +    /**, +     * Acknowledges a watch., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html">, +     * the docs</a> for more information., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException if there is a problem sending the request or parsing back the response, +     */, +    public AckWatchResponse ackWatch(AckWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::ackWatch, options,, +            AckWatchResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously acknowledges a watch., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html">, +     * the docs</a> for more information., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon completion of the request, +     */, +    public void ackWatchAsync(AckWatchRequest request, RequestOptions options, ActionListener<AckWatchResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::ackWatch, options,, +            AckWatchResponse::fromXContent, listener, emptySet());, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +import org.elasticsearch.client.watcher.AckWatchRequest;, +, +    public static Request ackWatch(AckWatchRequest ackWatchRequest) {, +        String endpoint = new RequestConverters.EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("watcher"), +            .addPathPartAsIs("watch"), +            .addPathPart(ackWatchRequest.getWatchId()), +            .addPathPartAsIs("_ack"), +            .addCommaSeparatedPathParts(ackWatchRequest.getActionIds()), +            .build();, +        Request request = new Request(HttpPut.METHOD_NAME, endpoint);, +        return request;, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.AckWatchRequest;, +import org.elasticsearch.client.watcher.AckWatchResponse;, +, +    /**, +     * Acknowledges a watch., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html">, +     * the docs</a> for more information., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException if there is a problem sending the request or parsing back the response, +     */, +    public AckWatchResponse ackWatch(AckWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::ackWatch, options,, +            AckWatchResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously acknowledges a watch., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html">, +     * the docs</a> for more information., +     * @param request the request]