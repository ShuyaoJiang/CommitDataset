[+++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    private IndexWriter createWriter(boolean create) throws IOException {, +            final IndexWriterConfig iwc = getIndexWriterConfig(create);, +            return createWriter(store.directory(), iwc);, +        } catch (LockObtainFailedException ex) {, +            logger.warn("could not lock IndexWriter", ex);, +            throw ex;, +        }, +    }, +, +    // pkg-private for testing, +    IndexWriter createWriter(Directory directory, IndexWriterConfig iwc) throws IOException {, +        return new IndexWriter(directory, iwc);, +    }, +, +    private IndexWriterConfig getIndexWriterConfig(boolean create) {, +        return iwc;, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    private IndexWriter createWriter(boolean create) throws IOException {, +            final IndexWriterConfig iwc = getIndexWriterConfig(create);, +            return createWriter(store.directory(), iwc);, +        } catch (LockObtainFailedException ex) {, +            logger.warn("could not lock IndexWriter", ex);, +            throw ex;, +        }, +    }, +, +    // pkg-private for testing, +    IndexWriter createWriter(Directory directory, IndexWriterConfig iwc) throws IOException {, +        return new IndexWriter(directory, iwc);, +    }, +, +    private IndexWriterConfig getIndexWriterConfig(boolean create) {, +        return iwc;, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +    protected InternalEngine createEngine(IndexSettings indexSettings, Store store, Path translogPath, MergePolicy mergePolicy,, +                                          @Nullable IndexWriterFactory indexWriterFactory) throws IOException {, +        return createEngine(indexSettings, store, translogPath, mergePolicy, indexWriterFactory, null);, +        @Nullable IndexWriterFactory indexWriterFactory,, +        @Nullable Supplier<SequenceNumbersService> sequenceNumbersServiceSupplier) throws IOException {, +        InternalEngine internalEngine = createInternalEngine(indexWriterFactory, sequenceNumbersServiceSupplier, config);, +        if (config.getOpenMode() == EngineConfig.OpenMode.OPEN_INDEX_AND_TRANSLOG) {, +            internalEngine.recoverFromTranslog();, +        }, +        return internalEngine;, +    }, +, +    @FunctionalInterface, +    public interface IndexWriterFactory {, +, +        IndexWriter createWriter(Directory directory, IndexWriterConfig iwc) throws IOException;, +    }, +, +    public static InternalEngine createInternalEngine(@Nullable final IndexWriterFactory indexWriterFactory,, +                                                      @Nullable final Supplier<SequenceNumbersService> sequenceNumbersServiceSupplier,, +                                                      final EngineConfig config) {, +        return new InternalEngine(config) {, +                IndexWriter createWriter(Directory directory, IndexWriterConfig iwc) throws IOException {, +                    return (indexWriterFactory != null) ?, +                        indexWriterFactory.createWriter(directory, iwc) :, +                        super.createWriter(directory, iwc);, +            AtomicReference<ThrowingIndexWriter> throwingIndexWriter = new AtomicReference<>();, +            try (Engine engine = createEngine(defaultSettings, store, createTempDir(), NoMergePolicy.INSTANCE,, +                (directory, iwc) -> {, +                  throwingIndexWriter.set(new ThrowingIndexWriter(directory, iwc));, +                  return throwingIndexWriter.get();, +                }), +            ) {, +                    throwingIndexWriter.get().setThrowFailure(() -> new IOException("simulated"));, +                    throwingIndexWriter.get().setThrowFailure(() -> new IllegalArgumentException("simulated max token length"));, +                throwingIndexWriter.get().clearFailure();, +                    throwingIndexWriter.get().setThrowFailure(() -> new IOException("simulated"));, +                    throwingIndexWriter.get().setThrowFailure(() -> new IllegalArgumentException("simulated max token length"));, +                    throwingIndexWriter.get().setThrowFailure(null);, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    private IndexWriter createWriter(boolean create) throws IOException {, +            final IndexWriterConfig iwc = getIndexWriterConfig(create);, +            return createWriter(store.directory(), iwc);, +        } catch (LockObtainFailedException ex) {, +            logger.warn("could not lock IndexWriter", ex);, +            throw ex;, +        }, +    }, +, +    // pkg-private for testing, +    IndexWriter createWriter(Directory directory, IndexWriterConfig iwc) throws IOException {, +        return new IndexWriter(directory, iwc);, +    }, +, +    private IndexWriterConfig getIndexWriterConfig(boolean create) {, +        return iwc;, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +    protected InternalEngine createEngine(IndexSettings indexSettings, Store store, Path translogPath, MergePolicy mergePolicy,, +                                          @Nullable IndexWriterFactory indexWriterFactory) throws IOException {, +        return createEngine(indexSettings, store, translogPath, mergePolicy, indexWriterFactory, null);, +        @Nullable IndexWriterFactory indexWriterFactory,, +        @Nullable Supplier<SequenceNumbersService> sequenceNumbersServiceSupplier) throws IOException {, +        InternalEngine internalEngine = createInternalEngine(indexWriterFactory, sequenceNumbersServiceSupplier, config);, +        if (config.getOpenMode() == EngineConfig.OpenMode.OPEN_INDEX_AND_TRANSLOG) {, +            internalEngine.recoverFromTranslog();]