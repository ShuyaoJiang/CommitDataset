[+++ b/server/src/main/java/org/elasticsearch/common/geo/parsers/GeoJsonParser.java, +        try {, +        } catch (Exception ex) {, +            // Skip all other fields until the end of the object, +            while (parser.currentToken() != XContentParser.Token.END_OBJECT && parser.currentToken() != null) {, +                parser.nextToken();, +                parser.skipChildren();, +            }, +            throw ex;, +        }, +        if (parser.currentToken() == XContentParser.Token.START_OBJECT) {, +            parser.skipChildren();, +            parser.nextToken();, +            throw new ElasticsearchParseException("coordinates cannot be specified as objects");, +        }, +, +        if (parser.currentToken() != XContentParser.Token.VALUE_NUMBER) {, +            throw new ElasticsearchParseException("geo coordinates must be numbers");, +        }, +        if (parser.nextToken() != XContentParser.Token.VALUE_NUMBER) {, +            throw new ElasticsearchParseException("geo coordinates must be numbers");, +        }, +++ b/server/src/main/java/org/elasticsearch/common/geo/parsers/GeoJsonParser.java, +        try {, +        } catch (Exception ex) {, +            // Skip all other fields until the end of the object, +            while (parser.currentToken() != XContentParser.Token.END_OBJECT && parser.currentToken() != null) {, +                parser.nextToken();, +                parser.skipChildren();, +            }, +            throw ex;, +        }, +        if (parser.currentToken() == XContentParser.Token.START_OBJECT) {, +            parser.skipChildren();, +            parser.nextToken();, +            throw new ElasticsearchParseException("coordinates cannot be specified as objects");, +        }, +, +        if (parser.currentToken() != XContentParser.Token.VALUE_NUMBER) {, +            throw new ElasticsearchParseException("geo coordinates must be numbers");, +        }, +        if (parser.nextToken() != XContentParser.Token.VALUE_NUMBER) {, +            throw new ElasticsearchParseException("geo coordinates must be numbers");, +        }, +++ b/server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java, +        assertNull(parser.nextToken());, +        assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +            assertNull(parser.nextToken());, +, +    public void testParseInvalidShapes() throws IOException {, +        // single dimensions point, +        XContentBuilder tooLittlePointGeoJson = XContentFactory.jsonBuilder(), +            .startObject(), +            .field("type", "Point"), +            .startArray("coordinates").value(10.0).endArray(), +            .endObject();, +, +        try (XContentParser parser = createParser(tooLittlePointGeoJson)) {, +            parser.nextToken();, +            ElasticsearchGeoAssertions.assertValidException(parser, ElasticsearchParseException.class);, +            assertNull(parser.nextToken());, +        }, +, +        // zero dimensions point, +        XContentBuilder emptyPointGeoJson = XContentFactory.jsonBuilder(), +            .startObject(), +            .field("type", "Point"), +            .startObject("coordinates").field("foo", "bar").endObject(), +            .endObject();, +, +        try (XContentParser parser = createParser(emptyPointGeoJson)) {, +            parser.nextToken();, +            ElasticsearchGeoAssertions.assertValidException(parser, ElasticsearchParseException.class);, +            assertNull(parser.nextToken());, +        }, +    }]