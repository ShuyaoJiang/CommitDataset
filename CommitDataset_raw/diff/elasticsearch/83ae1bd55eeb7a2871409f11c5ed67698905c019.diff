[+++ b/src/main/java/org/elasticsearch/cache/recycler/CacheRecycler.java, +++ b/src/main/java/org/elasticsearch/cache/recycler/CacheRecycler.java, +++ b/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +import org.elasticsearch.common.recycler.AbstractRecyclerC;, +++ b/src/main/java/org/elasticsearch/cache/recycler/CacheRecycler.java, +++ b/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +import org.elasticsearch.common.recycler.AbstractRecyclerC;, +++ b/src/main/java/org/elasticsearch/common/recycler/Recycler.java, + * A recycled object, note, implementations should support calling obtain and then recycle, + * on different threads., +++ b/src/main/java/org/elasticsearch/cache/recycler/CacheRecycler.java, +++ b/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +import org.elasticsearch.common.recycler.AbstractRecyclerC;, +++ b/src/main/java/org/elasticsearch/common/recycler/Recycler.java, + * A recycled object, note, implementations should support calling obtain and then recycle, + * on different threads., +++ b/src/main/java/org/elasticsearch/common/recycler/Recyclers.java, +    /**, +     * Return a {@link Recycler} that never recycles entries., +     */, +    /**, +     * Return a concurrent recycler based on a deque., +     */, +    /**, +     * Return a recycler based on a deque., +     */, +    /**, +     * Return a recycler based on a deque., +     */, +    /**, +     * Wrap two recyclers and forward to calls to <code>smallObjectRecycler</code> when <code>size &lt; minSize</code> and to, +     * <code>defaultRecycler</code> otherwise., +     */, +    /**, +     * Create a recycler that is wrapped inside a soft reference, so that it cannot cause {@link OutOfMemoryError}s., +     */, +    /**, +     * Create a recycler that wraps data in a SoftReference., +     *, +     * @see #soft(org.elasticsearch.common.recycler.Recycler.Factory), +     */, +    /**, +     * Wrap the provided recycler so that calls to {@link Recycler#obtain()} and {@link Recycler.V#release()} are protected by, +     * a lock., +     */, +    /**, +     * Create a concurrent implementation that can support concurrent access from <code>concurrencyLevel</code> threads with little contention., +     */, +, +++ b/src/main/java/org/elasticsearch/cache/recycler/CacheRecycler.java, +++ b/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +import org.elasticsearch.common.recycler.AbstractRecyclerC;, +++ b/src/main/java/org/elasticsearch/common/recycler/Recycler.java, + * A recycled object, note, implementations should support calling obtain and then recycle, + * on different threads., +++ b/src/main/java/org/elasticsearch/common/recycler/Recyclers.java, +    /**, +     * Return a {@link Recycler} that never recycles entries., +     */, +    /**, +     * Return a concurrent recycler based on a deque., +     */, +    /**, +     * Return a recycler based on a deque., +     */, +    /**, +     * Return a recycler based on a deque., +     */, +    /**, +     * Wrap two recyclers and forward to calls to <code>smallObjectRecycler</code> when <code>size &lt; minSize</code> and to, +     * <code>defaultRecycler</code> otherwise., +     */, +    /**, +     * Create a recycler that is wrapped inside a soft reference, so that it cannot cause {@link OutOfMemoryError}s., +     */, +    /**, +     * Create a recycler that wraps data in a SoftReference., +     *, +     * @see #soft(org.elasticsearch.common.recycler.Recycler.Factory), +     */, +    /**, +     * Wrap the provided recycler so that calls to {@link Recycler#obtain()} and {@link Recycler.V#release()} are protected by, +     * a lock., +     */, +    /**, +     * Create a concurrent implementation that can support concurrent access from <code>concurrencyLevel</code> threads with little contention., +     */, +, +++ b/src/test/java/org/elasticsearch/benchmark/common/recycler/RecyclerBenchmark.java, +import org.elasticsearch.common.recycler.AbstractRecyclerC;, +++ b/src/main/java/org/elasticsearch/cache/recycler/CacheRecycler.java, +++ b/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +import org.elasticsearch.common.recycler.AbstractRecyclerC;, +++ b/src/main/java/org/elasticsearch/common/recycler/Recycler.java, + * A recycled object, note, implementations should support calling obtain and then recycle, + * on different threads., +++ b/src/main/java/org/elasticsearch/common/recycler/Recyclers.java, +    /**, +     * Return a {@link Recycler} that never recycles entries., +     */]