[+++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +        final AtomicArray<BulkItemResponse> responses = new AtomicArray<BulkItemResponse>(bulkRequest.requests.size());, +, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), System.currentTimeMillis() - startTime));, +                        responses.set(bulkItemResponse.getItemId(), bulkItemResponse);, +                            responses.set(request.id(), new BulkItemResponse(request.id(), indexRequest.opType().toString().toLowerCase(Locale.ENGLISH),, +                                    new BulkItemResponse.Failure(indexRequest.index(), indexRequest.type(), indexRequest.id(), message)));, +                            responses.set(request.id(), new BulkItemResponse(request.id(), "delete",, +                                    new BulkItemResponse.Failure(deleteRequest.index(), deleteRequest.type(), deleteRequest.id(), message)));, +                            responses.set(request.id(), new BulkItemResponse(request.id(), "update",, +                                    new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), message)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), System.currentTimeMillis() - startTime));, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +        final AtomicArray<BulkItemResponse> responses = new AtomicArray<BulkItemResponse>(bulkRequest.requests.size());, +, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), System.currentTimeMillis() - startTime));, +                        responses.set(bulkItemResponse.getItemId(), bulkItemResponse);, +                            responses.set(request.id(), new BulkItemResponse(request.id(), indexRequest.opType().toString().toLowerCase(Locale.ENGLISH),, +                                    new BulkItemResponse.Failure(indexRequest.index(), indexRequest.type(), indexRequest.id(), message)));, +                            responses.set(request.id(), new BulkItemResponse(request.id(), "delete",, +                                    new BulkItemResponse.Failure(deleteRequest.index(), deleteRequest.type(), deleteRequest.id(), message)));, +                            responses.set(request.id(), new BulkItemResponse(request.id(), "update",, +                                    new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), message)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), System.currentTimeMillis() - startTime));, +++ b/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +        final AtomicArray<MultiGetItemResponse> responses = new AtomicArray<MultiGetItemResponse>(request.items.size());, +                responses.set(i, new MultiGetItemResponse(null, new MultiGetResponse.Failure(item.index(), item.type(), item.id(), "[" + item.index() + "] missing")));, +            listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()])));, +                        responses.set(response.locations.get(i), new MultiGetItemResponse(response.responses.get(i), response.failures.get(i)));, +                        responses.set(shardRequest.locations.get(i), new MultiGetItemResponse(null,, +                                new MultiGetResponse.Failure(shardRequest.index(), shardRequest.types.get(i), shardRequest.ids.get(i), message)));, +                    listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()])));, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +        final AtomicArray<BulkItemResponse> responses = new AtomicArray<BulkItemResponse>(bulkRequest.requests.size());, +, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), System.currentTimeMillis() - startTime));, +                        responses.set(bulkItemResponse.getItemId(), bulkItemResponse);, +                            responses.set(request.id(), new BulkItemResponse(request.id(), indexRequest.opType().toString().toLowerCase(Locale.ENGLISH),, +                                    new BulkItemResponse.Failure(indexRequest.index(), indexRequest.type(), indexRequest.id(), message)));, +                            responses.set(request.id(), new BulkItemResponse(request.id(), "delete",, +                                    new BulkItemResponse.Failure(deleteRequest.index(), deleteRequest.type(), deleteRequest.id(), message)));, +                            responses.set(request.id(), new BulkItemResponse(request.id(), "update",, +                                    new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), message)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), System.currentTimeMillis() - startTime));, +++ b/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +        final AtomicArray<MultiGetItemResponse> responses = new AtomicArray<MultiGetItemResponse>(request.items.size());, +                responses.set(i, new MultiGetItemResponse(null, new MultiGetResponse.Failure(item.index(), item.type(), item.id(), "[" + item.index() + "] missing")));, +            listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()])));, +                        responses.set(response.locations.get(i), new MultiGetItemResponse(response.responses.get(i), response.failures.get(i)));, +                        responses.set(shardRequest.locations.get(i), new MultiGetItemResponse(null,, +                                new MultiGetResponse.Failure(shardRequest.index(), shardRequest.types.get(i), shardRequest.ids.get(i), message)));, +                    listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()])));, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/AtomicArray.java, +import java.lang.reflect.Array;, +     * Copies the content of the underlying atomic array to a normal one. If the supplied array is too small a new one will be allocated., +     * If the supplied array's length is longer than needed, the element in the array immediately following the end of the collection is set to, +     * <tt>null</tt>. All in similar fashion to {@link ArrayList#toArray}, +     */, +    public E[] toArray(E[] a) {, +        if (a.length < array.length()) {, +            a = (E[]) Array.newInstance(a.getClass().getComponentType(), array.length());, +        } else if (a.length > array.length()) {, +            a[array.length()] = null;, +        }, +        for (int i = 0; i < array.length(); i++) {, +            a[i] = array.get(i);, +        }, +        return a;, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +        final AtomicArray<BulkItemResponse> responses = new AtomicArray<BulkItemResponse>(bulkRequest.requests.size());, +, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), System.currentTimeMillis() - startTime));, +                        responses.set(bulkItemResponse.getItemId(), bulkItemResponse);, +                            responses.set(request.id(), new BulkItemResponse(request.id(), indexRequest.opType().toString().toLowerCase(Locale.ENGLISH),, +                                    new BulkItemResponse.Failure(indexRequest.index(), indexRequest.type(), indexRequest.id(), message)));, +                            responses.set(request.id(), new BulkItemResponse(request.id(), "delete",, +                                    new BulkItemResponse.Failure(deleteRequest.index(), deleteRequest.type(), deleteRequest.id(), message)));, +                            responses.set(request.id(), new BulkItemResponse(request.id(), "update",, +                                    new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), message)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), System.currentTimeMillis() - startTime));, +++ b/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +import org.elasticsearch.common.util.concurrent.AtomicArray;, +        final AtomicArray<MultiGetItemResponse> responses = new AtomicArray<MultiGetItemResponse>(request.items.size());, +                responses.set(i, new MultiGetItemResponse(null, new MultiGetResponse.Failure(item.index(), item.type(), item.id(), "[" + item.index() + "] missing")));, +            listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()])));, +                        responses.set(response.locations.get(i), new MultiGetItemResponse(response.responses.get(i), response.failures.get(i)));, +                        responses.set(shardRequest.locations.get(i), new MultiGetItemResponse(null,, +                                new MultiGetResponse.Failure(shardRequest.index(), shardRequest.types.get(i), shardRequest.ids.get(i), message)));, +                    listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()])));, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/AtomicArray.java, +import java.lang.reflect.Array;]