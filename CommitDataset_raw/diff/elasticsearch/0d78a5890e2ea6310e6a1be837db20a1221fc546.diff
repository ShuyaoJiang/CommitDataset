[+++ b/docs/plugins/ingest-geoip.asciidoc, +and the `database_file` option should be used to specify the filename of the custom database. Custom database files must be stored, +uncompressed. The geoip config directory is located at `$ES_HOME/config/ingest-geoip` and holds the shipped databases too., +| `database_file`        | no        | GeoLite2-City.mmdb                                                                 | The database filename in the geoip config directory. The ingest-geoip plugin ships with the GeoLite2-City.mmdb, GeoLite2-Country.mmdb and GeoLite2-ASN.mmdb files., +        "database_file" : "GeoLite2-Country.mmdb", +++ b/docs/plugins/ingest-geoip.asciidoc, +and the `database_file` option should be used to specify the filename of the custom database. Custom database files must be stored, +uncompressed. The geoip config directory is located at `$ES_HOME/config/ingest-geoip` and holds the shipped databases too., +| `database_file`        | no        | GeoLite2-City.mmdb                                                                 | The database filename in the geoip config directory. The ingest-geoip plugin ships with the GeoLite2-City.mmdb, GeoLite2-Country.mmdb and GeoLite2-ASN.mmdb files., +        "database_file" : "GeoLite2-Country.mmdb", +++ b/plugins/ingest-geoip/build.gradle, +  testCompile 'org.elasticsearch:geolite2-databases:20180303', +  include "*.mmdb", +++ b/docs/plugins/ingest-geoip.asciidoc, +and the `database_file` option should be used to specify the filename of the custom database. Custom database files must be stored, +uncompressed. The geoip config directory is located at `$ES_HOME/config/ingest-geoip` and holds the shipped databases too., +| `database_file`        | no        | GeoLite2-City.mmdb                                                                 | The database filename in the geoip config directory. The ingest-geoip plugin ships with the GeoLite2-City.mmdb, GeoLite2-Country.mmdb and GeoLite2-ASN.mmdb files., +        "database_file" : "GeoLite2-Country.mmdb", +++ b/plugins/ingest-geoip/build.gradle, +  testCompile 'org.elasticsearch:geolite2-databases:20180303', +  include "*.mmdb", +++ b/plugins/ingest-geoip/src/main/java/org/elasticsearch/ingest/geoip/GeoIpProcessor.java, +    GeoIpProcessor(String tag, String field, DatabaseReader dbReader, String targetField, Set<Property> properties, boolean ignoreMissing) {, +            String databaseFile = readStringProperty(TYPE, processorTag, config, "database_file", "GeoLite2-City.mmdb");, +++ b/docs/plugins/ingest-geoip.asciidoc, +and the `database_file` option should be used to specify the filename of the custom database. Custom database files must be stored, +uncompressed. The geoip config directory is located at `$ES_HOME/config/ingest-geoip` and holds the shipped databases too., +| `database_file`        | no        | GeoLite2-City.mmdb                                                                 | The database filename in the geoip config directory. The ingest-geoip plugin ships with the GeoLite2-City.mmdb, GeoLite2-Country.mmdb and GeoLite2-ASN.mmdb files., +        "database_file" : "GeoLite2-Country.mmdb", +++ b/plugins/ingest-geoip/build.gradle, +  testCompile 'org.elasticsearch:geolite2-databases:20180303', +  include "*.mmdb", +++ b/plugins/ingest-geoip/src/main/java/org/elasticsearch/ingest/geoip/GeoIpProcessor.java, +    GeoIpProcessor(String tag, String field, DatabaseReader dbReader, String targetField, Set<Property> properties, boolean ignoreMissing) {, +            String databaseFile = readStringProperty(TYPE, processorTag, config, "database_file", "GeoLite2-City.mmdb");, +++ b/plugins/ingest-geoip/src/main/java/org/elasticsearch/ingest/geoip/IngestGeoIpPlugin.java, +import com.maxmind.db.Reader;, +import org.elasticsearch.common.Booleans;, +import org.elasticsearch.common.SuppressForbidden;, +        boolean loadDatabaseOnHeap = Booleans.parseBoolean(System.getProperty("es.geoip.load_db_on_heap", "false"));, +            PathMatcher pathMatcher = geoIpConfigDirectory.getFileSystem().getPathMatcher("glob:**.mmdb");, +                    DatabaseReaderLazyLoader holder = new DatabaseReaderLazyLoader(databaseFileName,, +                        () -> {, +                            DatabaseReader.Builder builder = createDatabaseBuilder(databasePath).withCache(cache);, +                            if (loadDatabaseOnHeap) {, +                                builder.fileMode(Reader.FileMode.MEMORY);, +                            } else {, +                                builder.fileMode(Reader.FileMode.MEMORY_MAPPED);, +                            return builder.build();, +    @SuppressForbidden(reason = "Maxmind API requires java.io.File"), +    private static DatabaseReader.Builder createDatabaseBuilder(Path databasePath) {, +        return new DatabaseReader.Builder(databasePath.toFile());, +    }, +, +++ b/docs/plugins/ingest-geoip.asciidoc, +and the `database_file` option should be used to specify the filename of the custom database. Custom database files must be stored, +uncompressed. The geoip config directory is located at `$ES_HOME/config/ingest-geoip` and holds the shipped databases too., +| `database_file`        | no        | GeoLite2-City.mmdb                                                                 | The database filename in the geoip config directory. The ingest-geoip plugin ships with the GeoLite2-City.mmdb, GeoLite2-Country.mmdb and GeoLite2-ASN.mmdb files., +        "database_file" : "GeoLite2-Country.mmdb", +++ b/plugins/ingest-geoip/build.gradle, +  testCompile 'org.elasticsearch:geolite2-databases:20180303', +  include "*.mmdb", +++ b/plugins/ingest-geoip/src/main/java/org/elasticsearch/ingest/geoip/GeoIpProcessor.java, +    GeoIpProcessor(String tag, String field, DatabaseReader dbReader, String targetField, Set<Property> properties, boolean ignoreMissing) {, +            String databaseFile = readStringProperty(TYPE, processorTag, config, "database_file", "GeoLite2-City.mmdb");, +++ b/plugins/ingest-geoip/src/main/java/org/elasticsearch/ingest/geoip/IngestGeoIpPlugin.java, +import com.maxmind.db.Reader;, +import org.elasticsearch.common.Booleans;, +import org.elasticsearch.common.SuppressForbidden;, +        boolean loadDatabaseOnHeap = Booleans.parseBoolean(System.getProperty("es.geoip.load_db_on_heap", "false"));, +            PathMatcher pathMatcher = geoIpConfigDirectory.getFileSystem().getPathMatcher("glob:**.mmdb");, +                    DatabaseReaderLazyLoader holder = new DatabaseReaderLazyLoader(databaseFileName,, +                        () -> {, +                            DatabaseReader.Builder builder = createDatabaseBuilder(databasePath).withCache(cache);, +                            if (loadDatabaseOnHeap) {, +                                builder.fileMode(Reader.FileMode.MEMORY);, +                            } else {, +                                builder.fileMode(Reader.FileMode.MEMORY_MAPPED);, +                            return builder.build();, +    @SuppressForbidden(reason = "Maxmind API requires java.io.File"), +    private static DatabaseReader.Builder createDatabaseBuilder(Path databasePath) {, +        return new DatabaseReader.Builder(databasePath.toFile());, +    }, +, +++ b/plugins/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java, +        Files.copy(new ByteArrayInputStream(StreamsUtils.copyToBytesFromClasspath("/GeoLite2-City.mmdb")),, +                geoIpConfigDir.resolve("GeoLite2-City.mmdb"));, +        Files.copy(new ByteArrayInputStream(StreamsUtils.copyToBytesFromClasspath("/GeoLite2-Country.mmdb")),, +                geoIpConfigDir.resolve("GeoLite2-Country.mmdb"));, +        Files.copy(new ByteArrayInputStream(StreamsUtils.copyToBytesFromClasspath("/GeoLite2-ASN.mmdb")),, +            geoIpConfigDir.resolve("GeoLite2-ASN.mmdb"));, +        config.put("database_file", "GeoLite2-Country.mmdb");, +        config.put("database_file", "GeoLite2-ASN.mmdb");, +        config.put("database_file", "GeoLite2-Country.mmdb");, +        config.put("database_file", "GeoLite2-Country.mmdb");, +        config.put("database_file", "GeoLite2-ASN.mmdb");, +        config.put("database_file", "does-not-exist.mmdb");, +        assertThat(e.getMessage(), equalTo("[database_file] database file [does-not-exist.mmdb] doesn't exist"));, +        Files.copy(new ByteArrayInputStream(StreamsUtils.copyToBytesFromClasspath("/GeoLite2-City.mmdb")),, +            geoIpConfigDir.resolve("GeoLite2-City.mmdb"));]