[+++ b/src/main/java/org/elasticsearch/common/lucene/index/FilterableTermsEnum.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.lucene.index;, +, +import com.google.common.collect.Lists;, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.DocIdSet;, +import org.apache.lucene.search.DocIdSetIterator;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.util.Bits;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.lucene.docset.DocIdSets;, +import org.elasticsearch.common.lucene.search.ApplyAcceptedDocsFilter;, +import org.elasticsearch.common.lucene.search.Queries;, +, +import java.io.IOException;, +import java.util.Comparator;, +import java.util.List;, +, +/**, + * A frequency TermsEnum that returns frequencies derived from a collection of, + * cached leaf termEnums. It also allows to provide a filter to explicitly, + * compute frequencies only for docs that match the filter (heavier!)., + */, +public class FilterableTermsEnum extends TermsEnum {, +, +    static class Holder {, +        final TermsEnum termsEnum;, +        @Nullable, +        DocsEnum docsEnum;, +        @Nullable, +        final Bits bits;, +, +        Holder(TermsEnum termsEnum, Bits bits) {, +            this.termsEnum = termsEnum;, +            this.bits = bits;, +        }, +    }, +, +    static final String UNSUPPORTED_MESSAGE = "This TermsEnum only supports #seekExact(BytesRef) as well as #docFreq() and #totalTermFreq()";, +    protected final static int NOT_FOUND = -1;, +    private final Holder[] enums;, +    protected int currentDocFreq = 0;, +    protected long currentTotalTermFreq = 0;, +    protected BytesRef current;, +    protected final int docsEnumFlag;, +    protected int numDocs;, +, +    public FilterableTermsEnum(IndexReader reader, String field, int docsEnumFlag, @Nullable Filter filter) throws IOException {, +        if ((docsEnumFlag != DocsEnum.FLAG_FREQS) && (docsEnumFlag != DocsEnum.FLAG_NONE)) {, +            throw new ElasticsearchIllegalArgumentException("invalid docsEnumFlag of " + docsEnumFlag);, +        }, +        this.docsEnumFlag = docsEnumFlag;, +        if (filter == null) {, +            numDocs = reader.numDocs();, +        }, +, +        List<AtomicReaderContext> leaves = reader.leaves();, +        List<Holder> enums = Lists.newArrayListWithExpectedSize(leaves.size());, +        for (AtomicReaderContext context : leaves) {, +            Terms terms = context.reader().terms(field);, +            if (terms == null) {, +                continue;, +            }, +            TermsEnum termsEnum = terms.iterator(null);, +            if (termsEnum == null) {, +                continue;, +            }, +            Bits bits = null;, +            if (filter != null) {, +                if (filter == Queries.MATCH_ALL_FILTER) {, +                    bits = context.reader().getLiveDocs();, +                } else {, +                    // we want to force apply deleted docs, +                    filter = new ApplyAcceptedDocsFilter(filter);, +                    DocIdSet docIdSet = filter.getDocIdSet(context, context.reader().getLiveDocs());, +                    if (DocIdSets.isEmpty(docIdSet)) {, +                        // fully filtered, none matching, no need to iterate on this, +                        continue;, +                    }]