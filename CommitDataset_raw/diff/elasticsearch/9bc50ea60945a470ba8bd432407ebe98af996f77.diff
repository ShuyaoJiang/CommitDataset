[+++ b/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java, +import org.apache.lucene.store.FSDirectory;, +import org.apache.lucene.store.RateLimitedFSDirectory;, +    protected long getUsableSpace(Directory directory) {, +        if (directory instanceof RateLimitedFSDirectory) {, +            return ((RateLimitedFSDirectory) directory).wrappedDirectory().getDirectory().getUsableSpace();, +        } else if (directory instanceof FSDirectory) {, +            return ((FSDirectory) directory).getDirectory().getUsableSpace();, +        } else {, +            return 0;, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java, +import org.apache.lucene.store.FSDirectory;, +import org.apache.lucene.store.RateLimitedFSDirectory;, +    protected long getUsableSpace(Directory directory) {, +        if (directory instanceof RateLimitedFSDirectory) {, +            return ((RateLimitedFSDirectory) directory).wrappedDirectory().getDirectory().getUsableSpace();, +        } else if (directory instanceof FSDirectory) {, +            return ((FSDirectory) directory).getDirectory().getUsableSpace();, +        } else {, +            return 0;, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/store/distributor/LeastUsedDistributor.java, +        int sameSize = 0;, +            long currentSize = getUsableSpace(delegate);, +                sameSize = 1;, +            } else if (currentSize == size) {, +                sameSize++;, +                // Ensure uniform distribution between all directories with the same size, +                if (ThreadLocalRandom.current().nextDouble() < 1.0 / sameSize) {, +        }, +, +++ b/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java, +import org.apache.lucene.store.FSDirectory;, +import org.apache.lucene.store.RateLimitedFSDirectory;, +    protected long getUsableSpace(Directory directory) {, +        if (directory instanceof RateLimitedFSDirectory) {, +            return ((RateLimitedFSDirectory) directory).wrappedDirectory().getDirectory().getUsableSpace();, +        } else if (directory instanceof FSDirectory) {, +            return ((FSDirectory) directory).getDirectory().getUsableSpace();, +        } else {, +            return 0;, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/store/distributor/LeastUsedDistributor.java, +        int sameSize = 0;, +            long currentSize = getUsableSpace(delegate);, +                sameSize = 1;, +            } else if (currentSize == size) {, +                sameSize++;, +                // Ensure uniform distribution between all directories with the same size, +                if (ThreadLocalRandom.current().nextDouble() < 1.0 / sameSize) {, +        }, +, +++ b/src/main/java/org/elasticsearch/index/store/distributor/RandomWeightedDistributor.java, +            size += getUsableSpace(delegates[i]);, +++ b/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java, +import org.apache.lucene.store.FSDirectory;, +import org.apache.lucene.store.RateLimitedFSDirectory;, +    protected long getUsableSpace(Directory directory) {, +        if (directory instanceof RateLimitedFSDirectory) {, +            return ((RateLimitedFSDirectory) directory).wrappedDirectory().getDirectory().getUsableSpace();, +        } else if (directory instanceof FSDirectory) {, +            return ((FSDirectory) directory).getDirectory().getUsableSpace();, +        } else {, +            return 0;, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/store/distributor/LeastUsedDistributor.java, +        int sameSize = 0;, +            long currentSize = getUsableSpace(delegate);, +                sameSize = 1;, +            } else if (currentSize == size) {, +                sameSize++;, +                // Ensure uniform distribution between all directories with the same size, +                if (ThreadLocalRandom.current().nextDouble() < 1.0 / sameSize) {, +        }, +, +++ b/src/main/java/org/elasticsearch/index/store/distributor/RandomWeightedDistributor.java, +            size += getUsableSpace(delegates[i]);, +++ b/src/test/java/org/elasticsearch/test/integration/indices/store/SimpleDistributorTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an]