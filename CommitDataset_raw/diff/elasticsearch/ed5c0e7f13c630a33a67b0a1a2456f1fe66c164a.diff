[+++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.support.*;, +import org.elasticsearch.transport.*;, +                logger.debug("[{}] failed to execute operation for shard [{}]", e, actionName, shardRouting.shortSummary());, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.support.*;, +import org.elasticsearch.transport.*;, +                logger.debug("[{}] failed to execute operation for shard [{}]", e, actionName, shardRouting.shortSummary());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica, action [{}], request [{}]", t, actionName, request);, +                        threadPool.executor(executor).execute(AsyncReplicaAction.this);, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.support.*;, +import org.elasticsearch.transport.*;, +                logger.debug("[{}] failed to execute operation for shard [{}]", e, actionName, shardRouting.shortSummary());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica, action [{}], request [{}]", t, actionName, request);, +                        threadPool.executor(executor).execute(AsyncReplicaAction.this);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.support.*;, +import org.elasticsearch.transport.*;, +                logger.debug("[{}] failed to execute operation for shard [{}]", e, actionName, shardRouting.shortSummary());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica, action [{}], request [{}]", t, actionName, request);, +                        threadPool.executor(executor).execute(AsyncReplicaAction.this);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.cluster.*;, +import org.elasticsearch.transport.*;, +/**, + *, + */, +, +    public void shardStarted(final ShardRouting shardRouting, String indexUUID, final String reason) {, +        DiscoveryNode masterNode = clusterService.state().nodes().masterNode();, +        if (masterNode == null) {, +            logger.warn("{} can't send shard started for {}, no master known.", shardRouting.shardId(), shardRouting);, +            return;, +        shardStarted(shardRouting, indexUUID, reason, masterNode);, +    }, +, +    public void shardStarted(final ShardRouting shardRouting, String indexUUID, final String reason, final DiscoveryNode masterNode) {, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, reason, null);, +        logger.debug("{} sending shard started for {}", shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +        transportService.sendRequest(masterNode,, +                SHARD_STARTED_ACTION_NAME, new ShardRoutingEntry(shardRouting, indexUUID, reason, null), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +                    @Override, +                    public void handleException(TransportException exp) {, +                        logger.warn("failed to send shard started to [{}]", exp, masterNode);, +                    }, +, +                });, +    }, +, +    private final ShardFailedClusterStateHandler shardFailedClusterStateHandler = new ShardFailedClusterStateHandler();, +, +    private void handleShardFailureOnMaster(final ShardRoutingEntry shardRoutingEntry) {, +        logger.warn("{} received shard failed for {}", shardRoutingEntry.failure, shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +        clusterService.submitStateUpdateTask(, +                "shard-failed (" + shardRoutingEntry.shardRouting + "), message [" + shardRoutingEntry.message + "]",, +                shardRoutingEntry,, +                ClusterStateTaskConfig.build(Priority.HIGH),, +                shardFailedClusterStateHandler,, +                shardFailedClusterStateHandler);, +    private final ShardStartedClusterStateHandler shardStartedClusterStateHandler =, +            new ShardStartedClusterStateHandler();, +    private void shardStartedOnMaster(final ShardRoutingEntry shardRoutingEntry) {, +        logger.debug("received shard started for {}", shardRoutingEntry);, +, +                "shard-started (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.message + "]",, +                ClusterStateTaskConfig.build(Priority.URGENT),, +                shardStartedClusterStateHandler,, +                shardStartedClusterStateHandler);, +    private class ShardFailedTransportHandler implements TransportRequestHandler<ShardRoutingEntry> {, +        @Override, +        public void messageReceived(ShardRoutingEntry request, TransportChannel channel) throws Exception {, +            handleShardFailureOnMaster(request);, +            channel.sendResponse(TransportResponse.Empty.INSTANCE);, +        }, +    }, +    class ShardStartedTransportHandler implements TransportRequestHandler<ShardRoutingEntry> {, +, +        @Override, +        public void messageReceived(ShardRoutingEntry request, TransportChannel channel) throws Exception {, +            shardStartedOnMaster(request);, +            channel.sendResponse(TransportResponse.Empty.INSTANCE);, +        }, +, +        default void onSuccess() {}, +        default void onShardFailedNoMaster() {}, +        default void onShardFailedFailure(final DiscoveryNode master, final TransportException e) {}, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.support.*;, +import org.elasticsearch.transport.*;]