[+++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +    : function* statement* EOF, +    | dstatement ( SEMICOLON | EOF ), +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +    : function* statement* EOF, +    | dstatement ( SEMICOLON | EOF ), +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessLexer.java, +import org.antlr.v4.runtime.CharStream;, +import org.antlr.v4.runtime.Token;, +import org.antlr.v4.runtime.TokenStream;, +import org.antlr.v4.runtime.*;, +import org.antlr.v4.runtime.atn.*;, +import org.antlr.v4.runtime.misc.*;, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +    : function* statement* EOF, +    | dstatement ( SEMICOLON | EOF ), +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessLexer.java, +import org.antlr.v4.runtime.CharStream;, +import org.antlr.v4.runtime.Token;, +import org.antlr.v4.runtime.TokenStream;, +import org.antlr.v4.runtime.*;, +import org.antlr.v4.runtime.atn.*;, +import org.antlr.v4.runtime.misc.*;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java, +import org.antlr.v4.runtime.atn.*;, +import org.antlr.v4.runtime.*;, +import org.antlr.v4.runtime.misc.*;, +import org.antlr.v4.runtime.tree.*;, +import java.util.Iterator;, +import java.util.ArrayList;, +      _la = _input.LA(1);, +      while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << IF) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << CONTINUE) | (1L << BREAK) | (1L << RETURN) | (1L << NEW) | (1L << TRY) | (1L << THROW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {, +      }, +      setState(80);, +      setState(81);, +      setState(82);, +      setState(83);, +      setState(85);, +      setState(97);, +        setState(86);, +        setState(87);, +        setState(94);, +          setState(88);, +          setState(89);, +          setState(90);, +          setState(96);, +      setState(99);, +    public TerminalNode EOF() { return getToken(PainlessParser.EOF, 0); }, +    int _la;, +      setState(105);, +        setState(101);, +        setState(102);, +        setState(103);, +        _la = _input.LA(1);, +        if ( !(_la==EOF || _la==SEMICOLON) ) {, +        _errHandler.recoverInline(this);, +        } else {, +          consume();, +        }, +      setState(167);, +      switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {, +        setState(107);, +        setState(108);, +        setState(109);, +        setState(110);, +        setState(111);, +        setState(115);, +        switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {, +          setState(112);, +          setState(113);, +          setState(114);, +        setState(117);, +        setState(118);, +        setState(119);, +        setState(120);, +        setState(123);, +          setState(121);, +          setState(122);, +        setState(125);, +        setState(126);, +        setState(128);, +          setState(127);, +        setState(130);, +        setState(132);, +          setState(131);, +        setState(134);, +        setState(136);, +          setState(135);, +        setState(138);, +        setState(141);, +          setState(139);, +          setState(140);, +        setState(143);, +        setState(144);, +        setState(145);, +        setState(146);, +        setState(147);, +        setState(148);, +        setState(149);, +        setState(150);]