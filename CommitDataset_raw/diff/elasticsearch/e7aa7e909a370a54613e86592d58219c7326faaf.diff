[+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java, +import java.io.UncheckedIOException;, +import java.nio.file.Path;, +import java.util.stream.Stream;, +    private final Path artifactsExtractDir;, +    private final Path workingDir;, +    private final Path confPathRepo;, +    private final Path configFile;, +    private final Path confPathData;, +    private final Path confPathLogs;, +    private final Path transportPortFile;, +    private final Path httpPortsFile;, +    private final Path esStdoutFile;, +    private final Path esStderrFile;, +, +        this.artifactsExtractDir = artifactsExtractDir.toPath();, +        this.workingDir = workingDirBase.toPath().resolve(safeName(name)).toAbsolutePath();, +        confPathRepo = workingDir.resolve("repo");, +        configFile = workingDir.resolve("config/elasticsearch.yml");, +        confPathData = workingDir.resolve("data");, +        confPathLogs = workingDir.resolve("logs");, +        transportPortFile = confPathLogs.resolve("transport.ports");, +        httpPortsFile = confPathLogs.resolve("http.ports");, +        esStdoutFile = confPathLogs.resolve("es.stdout.log");, +        esStderrFile = confPathLogs.resolve("es.stderr.log");, +        waitConditions.put("http ports file", node -> Files.exists(node.httpPortsFile));, +        waitConditions.put("transport ports file", node -> Files.exists(node.transportPortFile));, +        Path distroArtifact = artifactsExtractDir, +            .resolve(distribution.getFileExtension()), +            .resolve(distribution.getFileName() + "-" + getVersion());, +, +        if (Files.exists(distroArtifact) == false) {, +        if (Files.isDirectory(distroArtifact) == false) {, +            spec.from(distroArtifact.resolve("config").toFile());, +            spec.into(configFile.getParent());, +    private void startElasticsearchProcess(Path distroArtifact) {, +                distroArtifact.resolve("\\bin\\elasticsearch.bat").toAbsolutePath().toString(), +                distroArtifact.resolve("bin/elasticsearch").toAbsolutePath().toString(), +            processBuilder.directory(workingDir.toFile());, +            environment.put("ES_PATH_CONF", configFile.getParent().toAbsolutePath().toString());, +            processBuilder.redirectError(ProcessBuilder.Redirect.appendTo(esStderrFile.toFile()));, +            processBuilder.redirectOutput(ProcessBuilder.Redirect.appendTo(esStdoutFile.toFile()));, +            logFileContents("Standard output of node", esStdoutFile);, +            logFileContents("Standard error of node", esStderrFile);, +    private void logFileContents(String description, Path from) {, +        try(Stream<String> lines = Files.lines(from, StandardCharsets.UTF_8)) {, +            lines, +            throw new UncheckedIOException(e);, +        try {, +            Files.createDirectories(configFile.getParent());, +            Files.createDirectories(confPathRepo);, +            Files.createDirectories(confPathData);, +            Files.createDirectories(confPathLogs);, +        } catch (IOException e) {, +            throw new UncheckedIOException(e);, +        }, +, +, +        config.put("path.repo", confPathRepo.toAbsolutePath().toString());, +        config.put("path.data", confPathData.toAbsolutePath().toString());, +        config.put("path.logs", confPathLogs.toAbsolutePath().toString());, +        config.put("path.shared_data", workingDir.resolve("sharedData").toString());, +                configFile,, +            throw new UncheckedIOException("Could not write config file: " + configFile, e);, +        logger.info("Written config file:{} for {}", configFile, this);, +            return readPortsFile(transportPortFile);, +            throw new UncheckedIOException(, +            return readPortsFile(httpPortsFile);, +            throw new UncheckedIOException(, +    private List<String> readPortsFile(Path file) throws IOException {, +        try(Stream<String> lines = Files.lines(file, StandardCharsets.UTF_8)) {, +            return lines.map(String::trim).collect(Collectors.toList());]