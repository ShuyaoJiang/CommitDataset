[+++ b/rest-api-spec/api/indices.flush_synced.json, +  "indices.flush_synced": {, +++ b/rest-api-spec/api/indices.flush_synced.json, +  "indices.flush_synced": {, +++ b/rest-api-spec/test/indices.flush/10_basic.yaml, +       indices.flush_synced:, +++ b/rest-api-spec/api/indices.flush_synced.json, +  "indices.flush_synced": {, +++ b/rest-api-spec/test/indices.flush/10_basic.yaml, +       indices.flush_synced:, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        query = super.getFieldQuery(currentMapper.fieldType().names().indexName(), queryText, quoted);, +                    rangeQuery = dateFieldMapper.fieldType().rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    query = getPossiblyAnalyzedPrefixQuery(currentMapper.fieldType().names().indexName(), termStr);, +                indexedNameField = currentMapper.fieldType().names().indexName();, +++ b/rest-api-spec/api/indices.flush_synced.json, +  "indices.flush_synced": {, +++ b/rest-api-spec/test/indices.flush/10_basic.yaml, +       indices.flush_synced:, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        query = super.getFieldQuery(currentMapper.fieldType().names().indexName(), queryText, quoted);, +                    rangeQuery = dateFieldMapper.fieldType().rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    query = getPossiblyAnalyzedPrefixQuery(currentMapper.fieldType().names().indexName(), termStr);, +                indexedNameField = currentMapper.fieldType().names().indexName();, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                analyzer = fieldMapper.fieldType().indexAnalyzer();, +                field = fieldMapper.fieldType().names().indexName();, +++ b/rest-api-spec/api/indices.flush_synced.json, +  "indices.flush_synced": {, +++ b/rest-api-spec/test/indices.flush/10_basic.yaml, +       indices.flush_synced:, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        query = super.getFieldQuery(currentMapper.fieldType().names().indexName(), queryText, quoted);, +                    rangeQuery = dateFieldMapper.fieldType().rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    query = getPossiblyAnalyzedPrefixQuery(currentMapper.fieldType().names().indexName(), termStr);, +                indexedNameField = currentMapper.fieldType().names().indexName();, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                analyzer = fieldMapper.fieldType().indexAnalyzer();, +                field = fieldMapper.fieldType().names().indexName();, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    public CreateIndexRequest source(Map<String, ?> source) {, +        for (Map.Entry<String, ?> entry : source.entrySet()) {, +++ b/rest-api-spec/api/indices.flush_synced.json, +  "indices.flush_synced": {, +++ b/rest-api-spec/test/indices.flush/10_basic.yaml, +       indices.flush_synced:, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        query = super.getFieldQuery(currentMapper.fieldType().names().indexName(), queryText, quoted);, +                    rangeQuery = dateFieldMapper.fieldType().rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    query = getPossiblyAnalyzedPrefixQuery(currentMapper.fieldType().names().indexName(), termStr);, +                indexedNameField = currentMapper.fieldType().names().indexName();, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                analyzer = fieldMapper.fieldType().indexAnalyzer();, +                field = fieldMapper.fieldType().names().indexName();, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    public CreateIndexRequest source(Map<String, ?> source) {, +        for (Map.Entry<String, ?> entry : source.entrySet()) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilder.java, +    public CreateIndexRequestBuilder setSettings(Map<String, ?> source) {, +    public CreateIndexRequestBuilder setSource(Map<String, ?> source) {, +++ b/rest-api-spec/api/indices.flush_synced.json, +  "indices.flush_synced": {, +++ b/rest-api-spec/test/indices.flush/10_basic.yaml, +       indices.flush_synced:, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        query = super.getFieldQuery(currentMapper.fieldType().names().indexName(), queryText, quoted);, +                    rangeQuery = dateFieldMapper.fieldType().rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    query = getPossiblyAnalyzedPrefixQuery(currentMapper.fieldType().names().indexName(), termStr);, +                indexedNameField = currentMapper.fieldType().names().indexName();, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                analyzer = fieldMapper.fieldType().indexAnalyzer();, +                field = fieldMapper.fieldType().names().indexName();, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    public CreateIndexRequest source(Map<String, ?> source) {, +        for (Map.Entry<String, ?> entry : source.entrySet()) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilder.java, +    public CreateIndexRequestBuilder setSettings(Map<String, ?> source) {, +    public CreateIndexRequestBuilder setSource(Map<String, ?> source) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                    addFieldMapper(fieldMapper.fieldType().names().fullName(), fieldMapper, fieldMappings, request.includeDefaults());, +                    if (Regex.simpleMatch(field, fieldMapper.fieldType().names().fullName())) {, +                        addFieldMapper(fieldMapper.fieldType().names().fullName(), fieldMapper, fieldMappings, request.includeDefaults());, +                    if (Regex.simpleMatch(field, fieldMapper.fieldType().names().indexName())) {, +                        addFieldMapper(fieldMapper.fieldType().names().indexName(), fieldMapper, fieldMappings, request.includeDefaults());, +                    if (Regex.simpleMatch(field, fieldMapper.fieldType().names().shortName())) {, +                        addFieldMapper(fieldMapper.fieldType().names().shortName(), fieldMapper, fieldMappings, request.includeDefaults());, +            fieldMappings.put(field, new FieldMappingMetaData(fieldMapper.fieldType().names().fullName(), builder.bytes()));, +++ b/rest-api-spec/api/indices.flush_synced.json, +  "indices.flush_synced": {, +++ b/rest-api-spec/test/indices.flush/10_basic.yaml, +       indices.flush_synced:, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        query = super.getFieldQuery(currentMapper.fieldType().names().indexName(), queryText, quoted);, +                    rangeQuery = dateFieldMapper.fieldType().rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    query = getPossiblyAnalyzedPrefixQuery(currentMapper.fieldType().names().indexName(), termStr);, +                indexedNameField = currentMapper.fieldType().names().indexName();, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                analyzer = fieldMapper.fieldType().indexAnalyzer();, +                field = fieldMapper.fieldType().names().indexName();, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java]