[+++ b/pom.xml, +        <!-- Remove this when LocalDiscovery gets fixed in core -->, +        <dependency>, +            <groupId>com.google.guava</groupId>, +            <artifactId>guava</artifactId>, +            <version>18.0</version>, +            <scope>test</scope>, +        </dependency>, +, +++ b/pom.xml, +        <!-- Remove this when LocalDiscovery gets fixed in core -->, +        <dependency>, +            <groupId>com.google.guava</groupId>, +            <artifactId>guava</artifactId>, +            <version>18.0</version>, +            <scope>test</scope>, +        </dependency>, +, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +            synchronized (scheduler) {, +            }, +                    scheduler.start(alertsStore.getAlerts());, +++ b/pom.xml, +        <!-- Remove this when LocalDiscovery gets fixed in core -->, +        <dependency>, +            <groupId>com.google.guava</groupId>, +            <artifactId>guava</artifactId>, +            <version>18.0</version>, +            <scope>test</scope>, +        </dependency>, +, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +            synchronized (scheduler) {, +            }, +                    scheduler.start(alertsStore.getAlerts());, +++ b/src/main/java/org/elasticsearch/alerts/actions/AlertActionManager.java, +                } else {, +    }, +++ b/pom.xml, +        <!-- Remove this when LocalDiscovery gets fixed in core -->, +        <dependency>, +            <groupId>com.google.guava</groupId>, +            <artifactId>guava</artifactId>, +            <version>18.0</version>, +            <scope>test</scope>, +        </dependency>, +, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +            synchronized (scheduler) {, +            }, +                    scheduler.start(alertsStore.getAlerts());, +++ b/src/main/java/org/elasticsearch/alerts/actions/AlertActionManager.java, +                } else {, +    }, +++ b/src/main/java/org/elasticsearch/alerts/scheduler/AlertScheduler.java, +import java.util.Map;, +    /**, +     * Starts the scheduler and schedules the specified alerts before returning., +     *, +     * Both the start and stop are synchronized to avoid that scheduler gets stopped while previously stored alerts, +     * are being loaded., +     */, +    public synchronized void start(Map<String, Alert> alerts) {, +            for (Map.Entry<String, Alert> entry : alerts.entrySet()) {, +                add(entry.getKey(), entry.getValue());, +            }, +    /**, +     * Stops the scheduler., +     */, +    public synchronized void stop() {, +            scheduler.shutdown(true);, +++ b/pom.xml, +        <!-- Remove this when LocalDiscovery gets fixed in core -->, +        <dependency>, +            <groupId>com.google.guava</groupId>, +            <artifactId>guava</artifactId>, +            <version>18.0</version>, +            <scope>test</scope>, +        </dependency>, +, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +            synchronized (scheduler) {, +            }, +                    scheduler.start(alertsStore.getAlerts());, +++ b/src/main/java/org/elasticsearch/alerts/actions/AlertActionManager.java, +                } else {, +    }, +++ b/src/main/java/org/elasticsearch/alerts/scheduler/AlertScheduler.java, +import java.util.Map;, +    /**, +     * Starts the scheduler and schedules the specified alerts before returning., +     *, +     * Both the start and stop are synchronized to avoid that scheduler gets stopped while previously stored alerts, +     * are being loaded., +     */, +    public synchronized void start(Map<String, Alert> alerts) {, +            for (Map.Entry<String, Alert> entry : alerts.entrySet()) {, +                add(entry.getKey(), entry.getValue());, +            }, +    /**]