[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java, +        settingsByRealmType.forEach((realmType, typeSettings) -> {, +                final Optional<String> nonDottedSetting = typeSettings.keySet().stream().filter(k -> k.indexOf('.') == -1).findAny();, +                if (nonDottedSetting.isPresent()) {, +                    logger.warn("Skipping any SSL configuration from realm [{}{}] because the key [{}] is not in the correct format",, +                        prefix, realmType, nonDottedSetting.get());, +                } else {, +                    });, +                }, +            }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java, +        settingsByRealmType.forEach((realmType, typeSettings) -> {, +                final Optional<String> nonDottedSetting = typeSettings.keySet().stream().filter(k -> k.indexOf('.') == -1).findAny();, +                if (nonDottedSetting.isPresent()) {, +                    logger.warn("Skipping any SSL configuration from realm [{}{}] because the key [{}] is not in the correct format",, +                        prefix, realmType, nonDottedSetting.get());, +                } else {, +                    });, +                }, +            }, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.xpack.core.security.authc.RealmConfig;, +import org.elasticsearch.xpack.core.security.authc.RealmSettings;, +import java.util.stream.Collectors;, +            runStartupChecks(settings);, +, +    }, +, +    private static void runStartupChecks(Settings settings) {, +        validateAutoCreateIndex(settings);, +        validateRealmSettings(settings);, +    /**, +     * Realm settings were changed in 7.0. This method validates that the settings in use on this node match the new style of setting., +     * In 6.x a realm config would be, +     * <pre>, +     *   xpack.security.authc.realms.file1.type: file, +     *   xpack.security.authc.realms.file1.order: 0, +     * </pre>, +     * In 7.x this realm should be, +     * <pre>, +     *   xpack.security.authc.realms.file.file1.order: 0, +     * </pre>, +     * If confronted with an old style config, the ES Settings validation would simply fail with an error such as, +     * <em>unknown setting [xpack.security.authc.realms.file1.order]</em>. This validation method provides an error that is easier to, +     * understand and take action on., +     */, +     static void validateRealmSettings(Settings settings) {, +        final Set<String> badRealmSettings = settings.keySet().stream(), +            .filter(k -> k.startsWith(RealmSettings.PREFIX)), +            .filter(key -> {, +                final String suffix = key.substring(RealmSettings.PREFIX.length());, +                // suffix-part, only contains a single '.', +                return suffix.indexOf('.') == suffix.lastIndexOf('.');, +            }), +            .collect(Collectors.toSet());, +        if (badRealmSettings.isEmpty() == false) {, +            String sampleRealmSetting = RealmSettings.realmSettingPrefix(new RealmConfig.RealmIdentifier("file", "my_file")) + "order";, +            throw new IllegalArgumentException("Incorrect realm settings found. " +, +                "Realm settings have been changed to include the type as part of the setting key.\n" +, +                "For example '" + sampleRealmSetting + "'\n" +, +                "Found invalid config: " + Strings.collectionToDelimitedString(badRealmSettings, ", ") + "\n" +, +                "Please see the breaking changes documentation.", +            );, +        }, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java, +        settingsByRealmType.forEach((realmType, typeSettings) -> {, +                final Optional<String> nonDottedSetting = typeSettings.keySet().stream().filter(k -> k.indexOf('.') == -1).findAny();, +                if (nonDottedSetting.isPresent()) {, +                    logger.warn("Skipping any SSL configuration from realm [{}{}] because the key [{}] is not in the correct format",, +                        prefix, realmType, nonDottedSetting.get());, +                } else {, +                    });, +                }, +            }, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.xpack.core.security.authc.RealmConfig;, +import org.elasticsearch.xpack.core.security.authc.RealmSettings;, +import java.util.stream.Collectors;, +            runStartupChecks(settings);, +, +    }, +, +    private static void runStartupChecks(Settings settings) {, +        validateAutoCreateIndex(settings);, +        validateRealmSettings(settings);, +    /**, +     * Realm settings were changed in 7.0. This method validates that the settings in use on this node match the new style of setting., +     * In 6.x a realm config would be, +     * <pre>, +     *   xpack.security.authc.realms.file1.type: file, +     *   xpack.security.authc.realms.file1.order: 0, +     * </pre>, +     * In 7.x this realm should be, +     * <pre>, +     *   xpack.security.authc.realms.file.file1.order: 0, +     * </pre>, +     * If confronted with an old style config, the ES Settings validation would simply fail with an error such as, +     * <em>unknown setting [xpack.security.authc.realms.file1.order]</em>. This validation method provides an error that is easier to, +     * understand and take action on.]