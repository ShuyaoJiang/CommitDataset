[+++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/scheduler/SchedulerEngine.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.scheduler;, +, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +import org.elasticsearch.xpack.watcher.support.clock.Clock;, +, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.CopyOnWriteArrayList;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ScheduledExecutorService;, +import java.util.concurrent.ScheduledFuture;, +import java.util.concurrent.TimeUnit;, +import java.util.stream.Collectors;, +, +import static java.util.Collections.unmodifiableMap;, +, +/**, + *, + */, +public class SchedulerEngine {, +, +    public static class Job {, +        private final String id;, +        private final Schedule schedule;, +, +        public Job(String id, Schedule schedule) {, +            this.id = id;, +            this.schedule = schedule;, +        }, +, +        public String getId() {, +            return id;, +        }, +, +        public Schedule getSchedule() {, +            return schedule;, +        }, +    }, +, +    public static class Event {, +        private final String jobName;, +        private final long triggeredTime;, +        private final long scheduledTime;, +, +        public Event(String jobName, long triggeredTime, long scheduledTime) {, +            this.jobName = jobName;, +            this.triggeredTime = triggeredTime;, +            this.scheduledTime = scheduledTime;, +        }, +, +        public String getJobName() {, +            return jobName;, +        }, +, +        public long getTriggeredTime() {, +            return triggeredTime;, +        }, +, +        public long getScheduledTime() {, +            return scheduledTime;, +        }, +    }, +, +    public interface Listener {, +        void triggered(Event event);, +    }, +, +    public interface Schedule {, +, +        /**, +         * Returns the next scheduled time after the given time, according to this schedule. If the given schedule, +         * cannot resolve the next scheduled time, then {@code -1} is returned. It really depends on the type of, +         * schedule to determine when {@code -1} is returned. Some schedules (e.g. IntervalSchedule) will never return, +         * {@code -1} as they can always compute the next scheduled time. {@code Cron} based schedules are good example, +         * of schedules that may return {@code -1}, for example, when the schedule only points to times that are all, +         * before the given time (in which case, there is no next scheduled time for the given time)., +         *, +         * Example:, +         *, +         *      cron    0 0 0 * 1 ? 2013        (only points to days in January 2013), +         *, +         *      time    2015-01-01 12:00:00     (this time is in 2015), +         *, +         */, +        long nextScheduledTimeAfter(long startTime, long now);, +    }, +, +    private volatile Schedules schedules;, +    private ScheduledExecutorService scheduler;]