[+++ b/docs/reference/query-dsl/script-score-query.asciidoc, +===== saturation, +`saturation(value,k) = value/(k + value)`, +    "source" : "saturation(doc['likes'].value, 1)", +`randomNotReproducible` and `randomReproducible`., +`randomNotReproducible()` uses `java.util.Random` class, +`randomReproducible(String seedValue, int seed)` produces, +<1> Using `params` allows to compile the script only once, even if params change., +++ b/docs/reference/query-dsl/script-score-query.asciidoc, +===== saturation, +`saturation(value,k) = value/(k + value)`, +    "source" : "saturation(doc['likes'].value, 1)", +`randomNotReproducible` and `randomReproducible`., +`randomNotReproducible()` uses `java.util.Random` class, +`randomReproducible(String seedValue, int seed)` produces, +<1> Using `params` allows to compile the script only once, even if params change., +++ b/modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/org.elasticsearch.score.txt, +    double saturation(double, double) from_class org.elasticsearch.script.ScoreScriptUtils, +++ b/docs/reference/query-dsl/script-score-query.asciidoc, +===== saturation, +`saturation(value,k) = value/(k + value)`, +    "source" : "saturation(doc['likes'].value, 1)", +`randomNotReproducible` and `randomReproducible`., +`randomNotReproducible()` uses `java.util.Random` class, +`randomReproducible(String seedValue, int seed)` produces, +<1> Using `params` allows to compile the script only once, even if params change., +++ b/modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/org.elasticsearch.score.txt, +    double saturation(double, double) from_class org.elasticsearch.script.ScoreScriptUtils, +++ b/modules/lang-painless/src/test/resources/rest-api-spec/test/painless/80_script_score.yml, +"Math functions":, +    - do:, +        indices.create:, +            index: test, +            body:, +                settings:, +                    number_of_shards: 2, +                mappings:, +                    _doc:, +                        properties:, +                            dval:, +                                type: double, +    - do:, +        index:, +            index: test, +            type: _doc, +            id: d1, +            body: {"dval": 10}, +    - do:, +        index:, +            index: test, +            type: _doc, +            id: d2, +            body: {"dval": 100}, +    - do:, +        index:, +            index: test, +            type: _doc, +            id: d3, +            body: {"dval": 1000}, +, +    - do:, +        indices.refresh: {}, +, +    - do:, +        search:, +            rest_total_hits_as_int: true, +            index: test, +            body:, +                query:, +                    script_score:, +                        query: {match_all: {} }, +                        script:, +                            source: "saturation(doc['dval'].value, params.k)", +                            params:, +                                k : 100, +    - match: { hits.total: 3 }, +    - match: { hits.hits.0._id: d3 }, +    - match: { hits.hits.1._id: d2 }, +    - match: { hits.hits.2._id: d1 }, +, +, +    - do:, +        search:, +            rest_total_hits_as_int: true, +            index: test, +            body:, +                query:, +                    script_score:, +                        query: {match_all: {} }, +                        script:, +                            source: "sigmoid(doc['dval'].value, params.k, params.a)", +                            params:, +                                k: 100, +                                a: 2, +    - match: { hits.total: 3 }, +    - match: { hits.hits.0._id: d3 }, +    - match: { hits.hits.1._id: d2 }, +    - match: { hits.hits.2._id: d1 }, +, +---]