[+++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.ArrayList;, +        private List<Class<? extends Plugin>> pluginClasses = new ArrayList<>();, +         * Add the given plugin to the client when it is created., +         */, +        public Builder addPlugin(Class<? extends Plugin> pluginClass) {, +            pluginClasses.add(pluginClass);, +            return this;, +        }, +, +        /**, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.ArrayList;, +        private List<Class<? extends Plugin>> pluginClasses = new ArrayList<>();, +         * Add the given plugin to the client when it is created., +         */, +        public Builder addPlugin(Class<? extends Plugin> pluginClass) {, +            pluginClasses.add(pluginClass);, +            return this;, +        }, +, +        /**, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            int countDownTokens = 0;, +, +            if (!emptyDoc) {, +            for (int i = 0; i < countDownTokens; i++) {, +                parser.nextToken();, +                assert token == null; // double check, in tests, that we didn't end parsing early, +            for (MetadataFieldMapper metadataMapper : mapping.metadataMappers) {, +                metadataMapper.postParse(context);, +            }, +++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.ArrayList;, +        private List<Class<? extends Plugin>> pluginClasses = new ArrayList<>();, +         * Add the given plugin to the client when it is created., +         */, +        public Builder addPlugin(Class<? extends Plugin> pluginClass) {, +            pluginClasses.add(pluginClass);, +            return this;, +        }, +, +        /**, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            int countDownTokens = 0;, +, +            if (!emptyDoc) {, +            for (int i = 0; i < countDownTokens; i++) {, +                parser.nextToken();, +                assert token == null; // double check, in tests, that we didn't end parsing early, +            for (MetadataFieldMapper metadataMapper : mapping.metadataMappers) {, +                metadataMapper.postParse(context);, +            }, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collection;, +import java.util.Collections;, +    /**, +     * Constructs a node with the given settings., +     *, +     * @param preparedSettings Base settings to configure the node with, +     * @param loadConfigSettings true if settings should also be loaded and merged from configuration files, +     */, +    public Node(Settings preparedSettings, boolean loadConfigSettings) {, +        this(preparedSettings, loadConfigSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());, +    Node(Settings preparedSettings, boolean loadConfigSettings, Version version, Collection<Class<? extends Plugin>> classpathPlugins) {, +        this.pluginsService = new PluginsService(tuple.v1(), tuple.v2(), classpathPlugins);, +++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.ArrayList;, +        private List<Class<? extends Plugin>> pluginClasses = new ArrayList<>();, +         * Add the given plugin to the client when it is created., +         */, +        public Builder addPlugin(Class<? extends Plugin> pluginClass) {, +            pluginClasses.add(pluginClass);, +            return this;, +        }, +, +        /**, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            int countDownTokens = 0;, +, +            if (!emptyDoc) {]