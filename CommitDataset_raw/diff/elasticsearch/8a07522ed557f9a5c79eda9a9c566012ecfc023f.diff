[+++ b/modules/repository-url/src/main/java/org/elasticsearch/plugin/repository/url/URLRepositoryPlugin.java, +import org.elasticsearch.threadpool.ThreadPool;, +    public Map<String, Repository.Factory> getRepositories(Environment env, NamedXContentRegistry namedXContentRegistry,, +                                                           ThreadPool threadPool) {, +        return Collections.singletonMap(URLRepository.TYPE,, +            metadata -> new URLRepository(metadata, env, namedXContentRegistry, threadPool));, +++ b/modules/repository-url/src/main/java/org/elasticsearch/plugin/repository/url/URLRepositoryPlugin.java, +import org.elasticsearch.threadpool.ThreadPool;, +    public Map<String, Repository.Factory> getRepositories(Environment env, NamedXContentRegistry namedXContentRegistry,, +                                                           ThreadPool threadPool) {, +        return Collections.singletonMap(URLRepository.TYPE,, +            metadata -> new URLRepository(metadata, env, namedXContentRegistry, threadPool));, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +import org.elasticsearch.threadpool.ThreadPool;, +                         NamedXContentRegistry namedXContentRegistry, ThreadPool threadPool) {, +        super(metadata, environment.settings(), namedXContentRegistry, threadPool);, +++ b/modules/repository-url/src/main/java/org/elasticsearch/plugin/repository/url/URLRepositoryPlugin.java, +import org.elasticsearch.threadpool.ThreadPool;, +    public Map<String, Repository.Factory> getRepositories(Environment env, NamedXContentRegistry namedXContentRegistry,, +                                                           ThreadPool threadPool) {, +        return Collections.singletonMap(URLRepository.TYPE,, +            metadata -> new URLRepository(metadata, env, namedXContentRegistry, threadPool));, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +import org.elasticsearch.threadpool.ThreadPool;, +                         NamedXContentRegistry namedXContentRegistry, ThreadPool threadPool) {, +        super(metadata, environment.settings(), namedXContentRegistry, threadPool);, +++ b/modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLRepositoryTests.java, +import org.elasticsearch.threadpool.ThreadPool;, +import static org.mockito.Mockito.mock;, +            new NamedXContentRegistry(Collections.emptyList()), mock(ThreadPool.class)) {, +++ b/modules/repository-url/src/main/java/org/elasticsearch/plugin/repository/url/URLRepositoryPlugin.java, +import org.elasticsearch.threadpool.ThreadPool;, +    public Map<String, Repository.Factory> getRepositories(Environment env, NamedXContentRegistry namedXContentRegistry,, +                                                           ThreadPool threadPool) {, +        return Collections.singletonMap(URLRepository.TYPE,, +            metadata -> new URLRepository(metadata, env, namedXContentRegistry, threadPool));, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +import org.elasticsearch.threadpool.ThreadPool;, +                         NamedXContentRegistry namedXContentRegistry, ThreadPool threadPool) {, +        super(metadata, environment.settings(), namedXContentRegistry, threadPool);, +++ b/modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLRepositoryTests.java, +import org.elasticsearch.threadpool.ThreadPool;, +import static org.mockito.Mockito.mock;, +            new NamedXContentRegistry(Collections.emptyList()), mock(ThreadPool.class)) {, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +import org.elasticsearch.threadpool.ThreadPool;, +            AzureStorageService storageService, ThreadPool threadPool) {, +        super(metadata, environment.settings(), namedXContentRegistry, threadPool);, +++ b/modules/repository-url/src/main/java/org/elasticsearch/plugin/repository/url/URLRepositoryPlugin.java, +import org.elasticsearch.threadpool.ThreadPool;, +    public Map<String, Repository.Factory> getRepositories(Environment env, NamedXContentRegistry namedXContentRegistry,, +                                                           ThreadPool threadPool) {, +        return Collections.singletonMap(URLRepository.TYPE,, +            metadata -> new URLRepository(metadata, env, namedXContentRegistry, threadPool));, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +import org.elasticsearch.threadpool.ThreadPool;, +                         NamedXContentRegistry namedXContentRegistry, ThreadPool threadPool) {, +        super(metadata, environment.settings(), namedXContentRegistry, threadPool);, +++ b/modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLRepositoryTests.java, +import org.elasticsearch.threadpool.ThreadPool;, +import static org.mockito.Mockito.mock;, +            new NamedXContentRegistry(Collections.emptyList()), mock(ThreadPool.class)) {, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +import org.elasticsearch.threadpool.ThreadPool;, +            AzureStorageService storageService, ThreadPool threadPool) {, +        super(metadata, environment.settings(), namedXContentRegistry, threadPool);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepositoryPlugin.java, +import org.elasticsearch.threadpool.ThreadPool;, +, +    public Map<String, Repository.Factory> getRepositories(Environment env, NamedXContentRegistry namedXContentRegistry,, +                                                           ThreadPool threadPool) {, +                (metadata) -> new AzureRepository(metadata, env, namedXContentRegistry, azureStoreService, threadPool));, +++ b/modules/repository-url/src/main/java/org/elasticsearch/plugin/repository/url/URLRepositoryPlugin.java, +import org.elasticsearch.threadpool.ThreadPool;, +    public Map<String, Repository.Factory> getRepositories(Environment env, NamedXContentRegistry namedXContentRegistry,, +                                                           ThreadPool threadPool) {, +        return Collections.singletonMap(URLRepository.TYPE,, +            metadata -> new URLRepository(metadata, env, namedXContentRegistry, threadPool));, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +import org.elasticsearch.threadpool.ThreadPool;, +                         NamedXContentRegistry namedXContentRegistry, ThreadPool threadPool) {, +        super(metadata, environment.settings(), namedXContentRegistry, threadPool);, +++ b/modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLRepositoryTests.java, +import org.elasticsearch.threadpool.ThreadPool;, +import static org.mockito.Mockito.mock;, +            new NamedXContentRegistry(Collections.emptyList()), mock(ThreadPool.class)) {, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +import org.elasticsearch.threadpool.ThreadPool;, +            AzureStorageService storageService, ThreadPool threadPool) {, +        super(metadata, environment.settings(), namedXContentRegistry, threadPool);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepositoryPlugin.java, +import org.elasticsearch.threadpool.ThreadPool;, +, +    public Map<String, Repository.Factory> getRepositories(Environment env, NamedXContentRegistry namedXContentRegistry,, +                                                           ThreadPool threadPool) {, +                (metadata) -> new AzureRepository(metadata, env, namedXContentRegistry, azureStoreService, threadPool));, +++ b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureRepositorySettingsTests.java, +import org.elasticsearch.threadpool.ThreadPool;, +            TestEnvironment.newEnvironment(internalSettings), NamedXContentRegistry.EMPTY, mock(AzureStorageService.class),, +                                           mock(ThreadPool.class));]