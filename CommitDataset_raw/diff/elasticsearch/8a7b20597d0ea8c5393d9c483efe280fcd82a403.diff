[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +        public static final boolean VALIDATE_LAT = false;, +        public static final boolean VALIDATE_LON = false;, +        boolean validateLat = Defaults.VALIDATE_LAT;, +        boolean validateLon = Defaults.VALIDATE_LON;, +, +            return new GeoPointFieldMapper(name, pathType, enableLatLon, enableGeoHash, precisionStep, precision,, +                    latMapper, lonMapper, geohashMapper, geoStringMapper,, +                    validateLon, validateLat);, +                } else if (fieldName.equals("validate")) {, +                    builder.validateLat = XContentMapValues.nodeBooleanValue(fieldNode);, +                    builder.validateLon = XContentMapValues.nodeBooleanValue(fieldNode);, +                } else if (fieldName.equals("validate_lon")) {, +                    builder.validateLon = XContentMapValues.nodeBooleanValue(fieldNode);, +                } else if (fieldName.equals("validate_lat")) {, +                    builder.validateLat = XContentMapValues.nodeBooleanValue(fieldNode);, +    private final boolean validateLon;, +    private final boolean validateLat;, +, +                               NumberFieldMapper latMapper, NumberFieldMapper lonMapper, StringFieldMapper geohashMapper, StringFieldMapper geoStringMapper,, +                               boolean validateLon, boolean validateLat) {, +, +        this.validateLat = validateLat;, +        this.validateLon = validateLon;, +            if (validateLat) {, +                if (lat > 90.0 || lat < -90.0) {, +                    throw new ElasticSearchIllegalArgumentException("illegal latitude value [" + lat + "] for " + name);, +                }, +            }, +            if (validateLon) {, +                if (lon > 180.0 || lon < -180) {, +                    throw new ElasticSearchIllegalArgumentException("illegal longitude value [" + lon + "] for " + name);, +                }, +            }, +        double lat = values[0];, +        double lon = values[1];, +        context.externalValue(Double.toString(lat) + ',' + Double.toString(lon));, +            if (validateLat) {, +                if (lat > 90.0 || lat < -90.0) {, +                    throw new ElasticSearchIllegalArgumentException("illegal latitude value [" + lat + "] for " + name);, +                }, +            }, +            context.externalValue(lat);, +            if (validateLon) {, +                if (lon > 180.0 || lon < -180) {, +                    throw new ElasticSearchIllegalArgumentException("illegal longitude value [" + lon + "] for " + name);, +                }, +            }, +            context.externalValue(lon);, +        if (validateLat && validateLon) {, +            builder.field("validate", true);, +        } else {, +            if (validateLat != Defaults.VALIDATE_LAT) {, +                builder.field("validate_lat", validateLat);, +            }, +            if (validateLon != Defaults.VALIDATE_LON) {, +                builder.field("validate_lon", validateLon);, +            }, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +        public static final boolean VALIDATE_LAT = false;, +        public static final boolean VALIDATE_LON = false;, +        boolean validateLat = Defaults.VALIDATE_LAT;, +        boolean validateLon = Defaults.VALIDATE_LON;, +, +            return new GeoPointFieldMapper(name, pathType, enableLatLon, enableGeoHash, precisionStep, precision,, +                    latMapper, lonMapper, geohashMapper, geoStringMapper,, +                    validateLon, validateLat);, +                } else if (fieldName.equals("validate")) {, +                    builder.validateLat = XContentMapValues.nodeBooleanValue(fieldNode);, +                    builder.validateLon = XContentMapValues.nodeBooleanValue(fieldNode);, +                } else if (fieldName.equals("validate_lon")) {, +                    builder.validateLon = XContentMapValues.nodeBooleanValue(fieldNode);, +                } else if (fieldName.equals("validate_lat")) {, +                    builder.validateLat = XContentMapValues.nodeBooleanValue(fieldNode);, +    private final boolean validateLon;, +    private final boolean validateLat;, +, +                               NumberFieldMapper latMapper, NumberFieldMapper lonMapper, StringFieldMapper geohashMapper, StringFieldMapper geoStringMapper,, +                               boolean validateLon, boolean validateLat) {, +, +        this.validateLat = validateLat;, +        this.validateLon = validateLon;, +            if (validateLat) {, +                if (lat > 90.0 || lat < -90.0) {, +                    throw new ElasticSearchIllegalArgumentException("illegal latitude value [" + lat + "] for " + name);, +                }, +            }, +            if (validateLon) {, +                if (lon > 180.0 || lon < -180) {, +                    throw new ElasticSearchIllegalArgumentException("illegal longitude value [" + lon + "] for " + name);, +                }, +            }, +        double lat = values[0];, +        double lon = values[1];, +        context.externalValue(Double.toString(lat) + ',' + Double.toString(lon));, +            if (validateLat) {, +                if (lat > 90.0 || lat < -90.0) {]