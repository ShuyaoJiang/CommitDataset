[+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +    protected void shardOperationOnPrimary(final ShardRequest shardRequest, final IndexShard primary,, +            ActionListener<PrimaryResult<ShardRequest, ReplicationResponse>> listener) {, +        ActionListener.completeWith(listener, () -> {, +        });, +    protected ReplicaResult shardOperationOnReplica(final ShardRequest shardRequest, final IndexShard replica) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +    protected void shardOperationOnPrimary(final ShardRequest shardRequest, final IndexShard primary,, +            ActionListener<PrimaryResult<ShardRequest, ReplicationResponse>> listener) {, +        ActionListener.completeWith(listener, () -> {, +        });, +    protected ReplicaResult shardOperationOnReplica(final ShardRequest shardRequest, final IndexShard replica) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +import org.elasticsearch.action.ActionListener;, +    protected void shardOperationOnPrimary(ShardFlushRequest shardRequest, IndexShard primary,, +            ActionListener<PrimaryResult<ShardFlushRequest, ReplicationResponse>> listener) {, +        ActionListener.completeWith(listener, () -> {, +        });, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +    protected void shardOperationOnPrimary(final ShardRequest shardRequest, final IndexShard primary,, +            ActionListener<PrimaryResult<ShardRequest, ReplicationResponse>> listener) {, +        ActionListener.completeWith(listener, () -> {, +        });, +    protected ReplicaResult shardOperationOnReplica(final ShardRequest shardRequest, final IndexShard replica) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +import org.elasticsearch.action.ActionListener;, +    protected void shardOperationOnPrimary(ShardFlushRequest shardRequest, IndexShard primary,, +            ActionListener<PrimaryResult<ShardFlushRequest, ReplicationResponse>> listener) {, +        ActionListener.completeWith(listener, () -> {, +        });, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.ActionListener;, +    protected void shardOperationOnPrimary(BasicReplicationRequest shardRequest, IndexShard primary,, +            ActionListener<PrimaryResult<BasicReplicationRequest, ReplicationResponse>> listener) {, +        ActionListener.completeWith(listener, () -> {, +        });, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +    protected void shardOperationOnPrimary(final ShardRequest shardRequest, final IndexShard primary,, +            ActionListener<PrimaryResult<ShardRequest, ReplicationResponse>> listener) {, +        ActionListener.completeWith(listener, () -> {, +        });, +    protected ReplicaResult shardOperationOnReplica(final ShardRequest shardRequest, final IndexShard replica) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +import org.elasticsearch.action.ActionListener;, +    protected void shardOperationOnPrimary(ShardFlushRequest shardRequest, IndexShard primary,, +            ActionListener<PrimaryResult<ShardFlushRequest, ReplicationResponse>> listener) {, +        ActionListener.completeWith(listener, () -> {, +        });, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.ActionListener;, +    protected void shardOperationOnPrimary(BasicReplicationRequest shardRequest, IndexShard primary,, +            ActionListener<PrimaryResult<BasicReplicationRequest, ReplicationResponse>> listener) {, +        ActionListener.completeWith(listener, () -> {, +        });, +++ b/server/src/main/java/org/elasticsearch/action/bulk/MappingUpdatePerformer.java, +import org.elasticsearch.action.ActionListener;, +    void updateMappings(Mapping update, ShardId shardId, String type, ActionListener<Void> listener);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +    protected void shardOperationOnPrimary(final ShardRequest shardRequest, final IndexShard primary,, +            ActionListener<PrimaryResult<ShardRequest, ReplicationResponse>> listener) {, +        ActionListener.completeWith(listener, () -> {, +        });, +    protected ReplicaResult shardOperationOnReplica(final ShardRequest shardRequest, final IndexShard replica) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +import org.elasticsearch.action.ActionListener;, +    protected void shardOperationOnPrimary(ShardFlushRequest shardRequest, IndexShard primary,, +            ActionListener<PrimaryResult<ShardFlushRequest, ReplicationResponse>> listener) {, +        ActionListener.completeWith(listener, () -> {, +        });, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.ActionListener;, +    protected void shardOperationOnPrimary(BasicReplicationRequest shardRequest, IndexShard primary,, +            ActionListener<PrimaryResult<BasicReplicationRequest, ReplicationResponse>> listener) {, +        ActionListener.completeWith(listener, () -> {, +        });, +++ b/server/src/main/java/org/elasticsearch/action/bulk/MappingUpdatePerformer.java, +import org.elasticsearch.action.ActionListener;, +    void updateMappings(Mapping update, ShardId shardId, String type, ActionListener<Void> listener);, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.apache.logging.log4j.util.MessageSupplier;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionRunnable;, +import java.util.concurrent.Executor;, +    protected void shardOperationOnPrimary(BulkShardRequest request, IndexShard primary,, +            ActionListener<PrimaryResult<BulkShardRequest, BulkShardResponse>> listener) {, +        performOnPrimary(request, primary, updateHelper, threadPool::relativeTimeInMillis,, +            (update, shardId, type, mappingListener) -> {, +                assert update != null;, +                assert shardId != null;, +                mappingUpdatedAction.updateMappingOnMaster(shardId.getIndex(), type, update, mappingListener);, +            },, +            mappingUpdateListener -> observer.waitForNextChange(new ClusterStateObserver.Listener() {, +                    mappingUpdateListener.onResponse(null);, +                    mappingUpdateListener.onFailure(new NodeClosedException(clusterService.localNode()));, +                    mappingUpdateListener.onFailure(new MapperException("timed out while waiting for a dynamic mapping update"));, +            }), listener, threadPool, +        );, +    public static void performOnPrimary(, +        Consumer<ActionListener<Void>> waitForMappingUpdate,, +        ActionListener<PrimaryResult<BulkShardRequest, BulkShardResponse>> listener,]