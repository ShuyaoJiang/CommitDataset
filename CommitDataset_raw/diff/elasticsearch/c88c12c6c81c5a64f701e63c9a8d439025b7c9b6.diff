[+++ b/core/pom.xml, +                                <ant antfile="${elasticsearch.tools.directory}/ant/integration-tests.xml", +                                     target="start-external-cluster"/>, +                                <ant antfile="${elasticsearch.tools.directory}/ant/integration-tests.xml", +                                     target="stop-external-cluster"/>, +++ b/core/pom.xml, +                                <ant antfile="${elasticsearch.tools.directory}/ant/integration-tests.xml", +                                     target="start-external-cluster"/>, +                                <ant antfile="${elasticsearch.tools.directory}/ant/integration-tests.xml", +                                     target="stop-external-cluster"/>, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        return prepare(request, getResult);, +    }, +    /**, +     * Prepares an update request by converting it into an index or delete request or an update response (no action)., +     */, +    @SuppressWarnings("unchecked"), +    protected Result prepare(UpdateRequest request, final GetResult getResult) {, +        long getDateNS = System.nanoTime();, +                throw new DocumentMissingException(new ShardId(request.index(), request.shardId()), request.type(), request.id());, +            Long ttl = indexRequest.ttl();, +            if (request.scriptedUpsert() && request.script() != null) {, +                ctx = executeScript(request, ctx);, +                if (ttl < 0) {, +                }, +, +                    .ttl(ttl == null || ttl < 0 ? null : ttl), +            throw new DocumentSourceMissingException(new ShardId(request.index(), request.shardId()), request.type(), request.id());, +            ctx = executeScript(request, ctx);, +            update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap, updateSourceContentType, getResult.internalSourceRef()));, +    private Map<String, Object> executeScript(UpdateRequest request, Map<String, Object> ctx) {, +        try {, +            if (scriptService != null) {, +                ExecutableScript script = scriptService.executable(request.script, ScriptContext.Standard.UPDATE);, +                script.setNextVar("ctx", ctx);, +                script.run();, +                // we need to unwrap the ctx..., +                ctx = (Map<String, Object>) script.unwrap(ctx);, +            }, +        } catch (Exception e) {, +            throw new IllegalArgumentException("failed to execute script", e);, +        }, +        return ctx;, +    }, +, +++ b/core/pom.xml, +                                <ant antfile="${elasticsearch.tools.directory}/ant/integration-tests.xml", +                                     target="start-external-cluster"/>, +                                <ant antfile="${elasticsearch.tools.directory}/ant/integration-tests.xml", +                                     target="stop-external-cluster"/>, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        return prepare(request, getResult);, +    }, +    /**, +     * Prepares an update request by converting it into an index or delete request or an update response (no action)., +     */, +    @SuppressWarnings("unchecked"), +    protected Result prepare(UpdateRequest request, final GetResult getResult) {, +        long getDateNS = System.nanoTime();, +                throw new DocumentMissingException(new ShardId(request.index(), request.shardId()), request.type(), request.id());, +            Long ttl = indexRequest.ttl();, +            if (request.scriptedUpsert() && request.script() != null) {, +                ctx = executeScript(request, ctx);, +                if (ttl < 0) {, +                }, +, +                    .ttl(ttl == null || ttl < 0 ? null : ttl), +            throw new DocumentSourceMissingException(new ShardId(request.index(), request.shardId()), request.type(), request.id());, +            ctx = executeScript(request, ctx);, +            update.setGetResult(extractGetResult(request, request.index(), getResult.getVersion(), updatedSourceAsMap, updateSourceContentType, getResult.internalSourceRef()));, +    private Map<String, Object> executeScript(UpdateRequest request, Map<String, Object> ctx) {, +        try {, +            if (scriptService != null) {, +                ExecutableScript script = scriptService.executable(request.script, ScriptContext.Standard.UPDATE);, +                script.setNextVar("ctx", ctx);, +                script.run();, +                // we need to unwrap the ctx..., +                ctx = (Map<String, Object>) script.unwrap(ctx);, +            }, +        } catch (Exception e) {, +            throw new IllegalArgumentException("failed to execute script", e);, +        }, +        return ctx;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +    public UpdateRequest docAsUpsert(boolean shouldUpsertDoc) {, +        return this;, +    public UpdateRequest scriptedUpsert(boolean scriptedUpsert) {, +        return this;, +++ b/core/pom.xml, +                                <ant antfile="${elasticsearch.tools.directory}/ant/integration-tests.xml", +                                     target="start-external-cluster"/>, +                                <ant antfile="${elasticsearch.tools.directory}/ant/integration-tests.xml", +                                     target="stop-external-cluster"/>, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        return prepare(request, getResult);, +    }, +    /**, +     * Prepares an update request by converting it into an index or delete request or an update response (no action).]