[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +import org.elasticsearch.transport.ConnectTransportException;, +        // This is thrown when using a Client and its remote cluster alias went MIA, +        // This is thrown when creating a Client and the remote cluster does not exist:, +        String unknownClusterMessage = "unknown cluster alias [" + remoteCluster + "]";, +            actual instanceof ConnectTransportException ||, +            (actual instanceof IllegalArgumentException && (noSuchRemoteClusterMessage.equals(actual.getMessage()) ||, +                unknownClusterMessage.equals(actual.getMessage())));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +import org.elasticsearch.transport.ConnectTransportException;, +        // This is thrown when using a Client and its remote cluster alias went MIA, +        // This is thrown when creating a Client and the remote cluster does not exist:, +        String unknownClusterMessage = "unknown cluster alias [" + remoteCluster + "]";, +            actual instanceof ConnectTransportException ||, +            (actual instanceof IllegalArgumentException && (noSuchRemoteClusterMessage.equals(actual.getMessage()) ||, +                unknownClusterMessage.equals(actual.getMessage())));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java, +                CheckedConsumer<ClusterStateResponse, Exception> onResponse = clusterStateResponse -> {, +                };, +                try {, +                    remoteClient(params).admin().cluster().state(clusterStateRequest, ActionListener.wrap(onResponse, errorHandler));, +                } catch (Exception e) {, +                    errorHandler.accept(e);, +                }, +                try {, +                    remoteClient(params).admin().cluster().state(clusterStateRequest, ActionListener.wrap(onResponse, errorHandler));, +                } catch (Exception e) {, +                    errorHandler.accept(e);, +                }, +                    remoteClient(params).execute(ShardChangesAction.INSTANCE, request, ActionListener.wrap(handler::accept, errorHandler));, +    private Client remoteClient(ShardFollowTask params) {, +        return wrapClient(client.getRemoteClusterClient(params.getRemoteCluster()), params.getHeaders());, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +import org.elasticsearch.transport.ConnectTransportException;, +        // This is thrown when using a Client and its remote cluster alias went MIA, +        // This is thrown when creating a Client and the remote cluster does not exist:, +        String unknownClusterMessage = "unknown cluster alias [" + remoteCluster + "]";, +            actual instanceof ConnectTransportException ||, +            (actual instanceof IllegalArgumentException && (noSuchRemoteClusterMessage.equals(actual.getMessage()) ||, +                unknownClusterMessage.equals(actual.getMessage())));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java, +                CheckedConsumer<ClusterStateResponse, Exception> onResponse = clusterStateResponse -> {, +                };, +                try {, +                    remoteClient(params).admin().cluster().state(clusterStateRequest, ActionListener.wrap(onResponse, errorHandler));, +                } catch (Exception e) {, +                    errorHandler.accept(e);, +                }, +                try {, +                    remoteClient(params).admin().cluster().state(clusterStateRequest, ActionListener.wrap(onResponse, errorHandler));, +                } catch (Exception e) {, +                    errorHandler.accept(e);, +                }, +                    remoteClient(params).execute(ShardChangesAction.INSTANCE, request, ActionListener.wrap(handler::accept, errorHandler));, +    private Client remoteClient(ShardFollowTask params) {, +        return wrapClient(client.getRemoteClusterClient(params.getRemoteCluster()), params.getHeaders());, +    }, +, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrIntegTestCase.java, +        if (configureRemoteClusterViaNodeSettings() && leaderSeedAddress != null) {, +    protected boolean configureRemoteClusterViaNodeSettings() {, +        return true;, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +import org.elasticsearch.transport.ConnectTransportException;, +        // This is thrown when using a Client and its remote cluster alias went MIA, +        // This is thrown when creating a Client and the remote cluster does not exist:, +        String unknownClusterMessage = "unknown cluster alias [" + remoteCluster + "]";, +            actual instanceof ConnectTransportException ||, +            (actual instanceof IllegalArgumentException && (noSuchRemoteClusterMessage.equals(actual.getMessage()) ||, +                unknownClusterMessage.equals(actual.getMessage())));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java, +                CheckedConsumer<ClusterStateResponse, Exception> onResponse = clusterStateResponse -> {, +                };, +                try {, +                    remoteClient(params).admin().cluster().state(clusterStateRequest, ActionListener.wrap(onResponse, errorHandler));, +                } catch (Exception e) {, +                    errorHandler.accept(e);, +                }, +                try {, +                    remoteClient(params).admin().cluster().state(clusterStateRequest, ActionListener.wrap(onResponse, errorHandler));, +                } catch (Exception e) {, +                    errorHandler.accept(e);, +                }, +                    remoteClient(params).execute(ShardChangesAction.INSTANCE, request, ActionListener.wrap(handler::accept, errorHandler));, +    private Client remoteClient(ShardFollowTask params) {, +        return wrapClient(client.getRemoteClusterClient(params.getRemoteCluster()), params.getHeaders());, +    }, +, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrIntegTestCase.java, +        if (configureRemoteClusterViaNodeSettings() && leaderSeedAddress != null) {, +    protected boolean configureRemoteClusterViaNodeSettings() {, +        return true;, +    }, +, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/RestartIndexFollowingIT.java, +import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;]