[+++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.index.shard.ShardId;, +    protected boolean resolveIndex(AnalyzeRequest request) {, +        return request.index() != null;, +    }, +, +    @Override, +    protected ClusterBlockException checkRequestBlock(ClusterState state, InternalRequest request) {, +        if (request.concreteIndex() != null) {, +    protected ShardsIterator shards(ClusterState state, InternalRequest request) {, +        if (request.concreteIndex() == null) {, +        return state.routingTable().index(request.concreteIndex()).randomAllActiveShardsIt();, +    protected AnalyzeResponse shardOperation(AnalyzeRequest request, ShardId shardId) throws ElasticsearchException {, +        if (shardId != null) {, +            indexService = indicesService.indexServiceSafe(shardId.getIndex());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.index.shard.ShardId;, +    protected boolean resolveIndex(AnalyzeRequest request) {, +        return request.index() != null;, +    }, +, +    @Override, +    protected ClusterBlockException checkRequestBlock(ClusterState state, InternalRequest request) {, +        if (request.concreteIndex() != null) {, +    protected ShardsIterator shards(ClusterState state, InternalRequest request) {, +        if (request.concreteIndex() == null) {, +        return state.routingTable().index(request.concreteIndex()).randomAllActiveShardsIt();, +    protected AnalyzeResponse shardOperation(AnalyzeRequest request, ShardId shardId) throws ElasticsearchException {, +        if (shardId != null) {, +            indexService = indicesService.indexServiceSafe(shardId.getIndex());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +import org.elasticsearch.index.shard.ShardId;, +    protected boolean resolveIndex(GetFieldMappingsIndexRequest request) {, +        //internal action, index already resolved, +        return false;, +    protected ShardsIterator shards(ClusterState state, InternalRequest request) {, +        // Will balance requests between shards, +        return state.routingTable().index(request.concreteIndex()).randomAllActiveShardsIt();, +    }, +, +    @Override, +    protected GetFieldMappingsResponse shardOperation(final GetFieldMappingsIndexRequest request, ShardId shardId) throws ElasticsearchException {, +        assert shardId != null;, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +                throw new TypeMissingException(shardId.index(), request.types());, +        return new GetFieldMappingsResponse(ImmutableMap.of(shardId.getIndex(), typeMappings.immutableMap()));, +++ b/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.index.shard.ShardId;, +    protected boolean resolveIndex(AnalyzeRequest request) {, +        return request.index() != null;, +    }, +, +    @Override, +    protected ClusterBlockException checkRequestBlock(ClusterState state, InternalRequest request) {, +        if (request.concreteIndex() != null) {, +    protected ShardsIterator shards(ClusterState state, InternalRequest request) {, +        if (request.concreteIndex() == null) {, +        return state.routingTable().index(request.concreteIndex()).randomAllActiveShardsIt();, +    protected AnalyzeResponse shardOperation(AnalyzeRequest request, ShardId shardId) throws ElasticsearchException {, +        if (shardId != null) {, +            indexService = indicesService.indexServiceSafe(shardId.getIndex());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +import org.elasticsearch.index.shard.ShardId;, +    protected boolean resolveIndex(GetFieldMappingsIndexRequest request) {, +        //internal action, index already resolved, +        return false;, +    protected ShardsIterator shards(ClusterState state, InternalRequest request) {, +        // Will balance requests between shards, +        return state.routingTable().index(request.concreteIndex()).randomAllActiveShardsIt();, +    }, +, +    @Override, +    protected GetFieldMappingsResponse shardOperation(final GetFieldMappingsIndexRequest request, ShardId shardId) throws ElasticsearchException {, +        assert shardId != null;, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +                throw new TypeMissingException(shardId.index(), request.types());, +        return new GetFieldMappingsResponse(ImmutableMap.of(shardId.getIndex(), typeMappings.immutableMap()));, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.action.support.IndicesOptions;, +import java.util.*;, +        final ClusterState clusterState = clusterService.state();, +        final ConcreteIndices concreteIndices = new ConcreteIndices(clusterState.metaData());, +                String concreteIndex = concreteIndices.resolveIfAbsent(indexRequest.index(), indexRequest.indicesOptions());, +                if (metaData.hasIndex(concreteIndex)) {, +                    mappingMd = metaData.index(concreteIndex).mappingOrDefault(indexRequest.type());, +                    indexRequest.process(metaData, mappingMd, allowIdGeneration, concreteIndex);, +                    BulkItemResponse.Failure failure = new BulkItemResponse.Failure(concreteIndex, indexRequest.type(), indexRequest.id(), e);, +                concreteIndices.resolveIfAbsent(deleteRequest.index(), deleteRequest.indicesOptions());, +                concreteIndices.resolveIfAbsent(updateRequest.index(), updateRequest.indicesOptions());, +                String concreteIndex = concreteIndices.getConcreteIndex(indexRequest.index());, +                ShardId shardId = clusterService.operationRouting().indexShards(clusterState, concreteIndex, indexRequest.type(), indexRequest.id(), indexRequest.routing()).shardId();, +                String concreteIndex = concreteIndices.getConcreteIndex(deleteRequest.index());, +                MappingMetaData mappingMd = clusterState.metaData().index(concreteIndex).mappingOrDefault(deleteRequest.type());, +                    GroupShardsIterator groupShards = clusterService.operationRouting().broadcastDeleteShards(clusterState, concreteIndex);, +                    ShardId shardId = clusterService.operationRouting().deleteShards(clusterState, concreteIndex, deleteRequest.type(), deleteRequest.id(), deleteRequest.routing()).shardId();, +                String concreteIndex = concreteIndices.getConcreteIndex(updateRequest.index());, +                MappingMetaData mappingMd = clusterState.metaData().index(concreteIndex).mappingOrDefault(updateRequest.type());, +                ShardId shardId = clusterService.operationRouting().indexShards(clusterState, concreteIndex, updateRequest.type(), updateRequest.id(), updateRequest.routing()).shardId();, +                                    new BulkItemResponse.Failure(concreteIndices.getConcreteIndex(indexRequest.index()), indexRequest.type(), indexRequest.id(), message, status)));, +                                    new BulkItemResponse.Failure(concreteIndices.getConcreteIndex(deleteRequest.index()), deleteRequest.type(), deleteRequest.id(), message, status)));]