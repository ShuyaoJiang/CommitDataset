[+++ b/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +    public static int calculateMinShouldMatch(int optionalClauseCount, String spec) {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +    public static int calculateMinShouldMatch(int optionalClauseCount, String spec) {, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.query;, +, +import java.io.IOException;, +, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +/**, + * CommonTermsQuery query is a query that executes high-frequency terms in a, + * optional sub-query to prevent slow queries due to "common" terms like, + * stopwords. This query basically builds 2 queries off the {@link #add(Term), + * added} terms where low-frequency terms are added to a required boolean clause, + * and high-frequency terms are added to an optional boolean clause. The, + * optional clause is only executed if the required "low-frequency' clause, + * matches. Scores produced by this query will be slightly different to plain, + * {@link BooleanQuery} scorer mainly due to differences in the, + * {@link Similarity#coord(int,int) number of leave queries} in the required, + * boolean clause. In the most cases high-frequency terms are unlikely to, + * significantly contribute to the document score unless at least one of the, + * low-frequency terms are matched such that this query can improve query, + * execution times significantly if applicable., + * <p>, + */, +public class CommonTermsQueryBuilder extends BaseQueryBuilder implements BoostableQueryBuilder<CommonTermsQueryBuilder> {, +, +    public static enum Operator {, +        OR, AND, +    }, +, +    private final String name;, +, +    private final Object text;, +, +    private Operator highFreqOperator = null;, +, +    private Operator lowFreqOperator = null;, +, +    private String analyzer = null;, +, +    private Float boost = null;, +, +    private String minimumShouldMatch = null;, +, +    private Boolean disableCoords = null;, +, +    private Float cutoffFrequency = null;, +, +    /**, +     * Constructs a new common terms query., +     */, +    public CommonTermsQueryBuilder(String name, Object text) {, +        if (name == null) {, +            throw new ElasticSearchIllegalArgumentException("Field name must not be null");, +        }, +        if (text == null) {, +            throw new ElasticSearchIllegalArgumentException("Query must not be null");, +        }, +        this.text = text;, +        this.name = name;, +    }, +, +    /**, +     * Sets the operator to use for terms with a high document frequency, +     * (greater than or equal to {@link #cutoffFrequency(float)}. Defaults to, +     * <tt>AND</tt>., +     */, +    public CommonTermsQueryBuilder highFreqOperator(Operator operator) {, +        this.highFreqOperator = operator;, +        return this;, +    }, +, +    /**, +     * Sets the operator to use for terms with a low document frequency (less, +     * than {@link #cutoffFrequency(float)}. Defaults to <tt>AND</tt>., +     */, +    public CommonTermsQueryBuilder lowFreqOperator(Operator operator) {]