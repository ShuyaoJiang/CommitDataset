[+++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +            logger.debug("{} sending [{}] to [{}] for shard [{}]", shardRoutingEntry.getShardRouting().shardId(), actionName, masterNode.getId(), shardRoutingEntry);, +                logger.warn("{} node closed while execution action [{}] for shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().shardId(), actionName, shardRoutingEntry.getShardRouting());, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +            logger.debug("{} sending [{}] to [{}] for shard [{}]", shardRoutingEntry.getShardRouting().shardId(), actionName, masterNode.getId(), shardRoutingEntry);, +                logger.warn("{} node closed while execution action [{}] for shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().shardId(), actionName, shardRoutingEntry.getShardRouting());, +++ b/core/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java, +    public static final Setting<String> REPOSITORIES_LOCATION_SETTING = new Setting<>("repositories.fs.location", LOCATION_SETTING, Function.identity(), false, Setting.Scope.CLUSTER);, +        String location = REPOSITORIES_LOCATION_SETTING.get(repositorySettings.settings());, +        if (location.isEmpty()) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +            logger.debug("{} sending [{}] to [{}] for shard [{}]", shardRoutingEntry.getShardRouting().shardId(), actionName, masterNode.getId(), shardRoutingEntry);, +                logger.warn("{} node closed while execution action [{}] for shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().shardId(), actionName, shardRoutingEntry.getShardRouting());, +++ b/core/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java, +    public static final Setting<String> REPOSITORIES_LOCATION_SETTING = new Setting<>("repositories.fs.location", LOCATION_SETTING, Function.identity(), false, Setting.Scope.CLUSTER);, +        String location = REPOSITORIES_LOCATION_SETTING.get(repositorySettings.settings());, +        if (location.isEmpty()) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramOffsetIT.java, +                .put(AssertingLocalTransport.ASSERTING_TRANSPORT_MIN_VERSION_KEY.getKey(), Version.V_1_4_0_Beta1.toString()).build();, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +            logger.debug("{} sending [{}] to [{}] for shard [{}]", shardRoutingEntry.getShardRouting().shardId(), actionName, masterNode.getId(), shardRoutingEntry);, +                logger.warn("{} node closed while execution action [{}] for shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().shardId(), actionName, shardRoutingEntry.getShardRouting());, +++ b/core/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java, +    public static final Setting<String> REPOSITORIES_LOCATION_SETTING = new Setting<>("repositories.fs.location", LOCATION_SETTING, Function.identity(), false, Setting.Scope.CLUSTER);, +        String location = REPOSITORIES_LOCATION_SETTING.get(repositorySettings.settings());, +        if (location.isEmpty()) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramOffsetIT.java, +                .put(AssertingLocalTransport.ASSERTING_TRANSPORT_MIN_VERSION_KEY.getKey(), Version.V_1_4_0_Beta1.toString()).build();, +++ b/docs/plugins/discovery-ec2.asciidoc, +* `ap-northeast-2` (`ap-northeast-2`), +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +            logger.debug("{} sending [{}] to [{}] for shard [{}]", shardRoutingEntry.getShardRouting().shardId(), actionName, masterNode.getId(), shardRoutingEntry);, +                logger.warn("{} node closed while execution action [{}] for shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().shardId(), actionName, shardRoutingEntry.getShardRouting());, +++ b/core/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java, +    public static final Setting<String> REPOSITORIES_LOCATION_SETTING = new Setting<>("repositories.fs.location", LOCATION_SETTING, Function.identity(), false, Setting.Scope.CLUSTER);, +        String location = REPOSITORIES_LOCATION_SETTING.get(repositorySettings.settings());, +        if (location.isEmpty()) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramOffsetIT.java, +                .put(AssertingLocalTransport.ASSERTING_TRANSPORT_MIN_VERSION_KEY.getKey(), Version.V_1_4_0_Beta1.toString()).build();, +++ b/docs/plugins/discovery-ec2.asciidoc, +* `ap-northeast-2` (`ap-northeast-2`), +++ b/docs/plugins/repository-s3.asciidoc, +* `ap-northeast-2` (`ap-northeast-2`), +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +            logger.debug("{} sending [{}] to [{}] for shard [{}]", shardRoutingEntry.getShardRouting().shardId(), actionName, masterNode.getId(), shardRoutingEntry);, +                logger.warn("{} node closed while execution action [{}] for shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().shardId(), actionName, shardRoutingEntry.getShardRouting());, +++ b/core/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java, +    public static final Setting<String> REPOSITORIES_LOCATION_SETTING = new Setting<>("repositories.fs.location", LOCATION_SETTING, Function.identity(), false, Setting.Scope.CLUSTER);, +        String location = REPOSITORIES_LOCATION_SETTING.get(repositorySettings.settings());, +        if (location.isEmpty()) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramOffsetIT.java, +                .put(AssertingLocalTransport.ASSERTING_TRANSPORT_MIN_VERSION_KEY.getKey(), Version.V_1_4_0_Beta1.toString()).build();, +++ b/docs/plugins/discovery-ec2.asciidoc, +* `ap-northeast-2` (`ap-northeast-2`), +++ b/docs/plugins/repository-s3.asciidoc, +* `ap-northeast-2` (`ap-northeast-2`), +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/CustomReflectionObjectHandler.java, +            if ("size".equals(key)) {, +                return size();, +            } else if (key instanceof Number) {, +            if ("size".equals(key)) {, +                return col.size();, +            } else if (key instanceof Number) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +            logger.debug("{} sending [{}] to [{}] for shard [{}]", shardRoutingEntry.getShardRouting().shardId(), actionName, masterNode.getId(), shardRoutingEntry);, +                logger.warn("{} node closed while execution action [{}] for shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().shardId(), actionName, shardRoutingEntry.getShardRouting());, +++ b/core/src/main/java/org/elasticsearch/repositories/fs/FsRepository.java, +    public static final Setting<String> REPOSITORIES_LOCATION_SETTING = new Setting<>("repositories.fs.location", LOCATION_SETTING, Function.identity(), false, Setting.Scope.CLUSTER);, +        String location = REPOSITORIES_LOCATION_SETTING.get(repositorySettings.settings());, +        if (location.isEmpty()) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramOffsetIT.java, +                .put(AssertingLocalTransport.ASSERTING_TRANSPORT_MIN_VERSION_KEY.getKey(), Version.V_1_4_0_Beta1.toString()).build();, +++ b/docs/plugins/discovery-ec2.asciidoc, +* `ap-northeast-2` (`ap-northeast-2`), +++ b/docs/plugins/repository-s3.asciidoc, +* `ap-northeast-2` (`ap-northeast-2`), +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/CustomReflectionObjectHandler.java, +            if ("size".equals(key)) {, +                return size();, +            } else if (key instanceof Number) {, +            if ("size".equals(key)) {, +                return col.size();, +            } else if (key instanceof Number) {, +++ b/modules/lang-mustache/src/test/java/org/elasticsearch/script/mustache/MustacheTests.java, +import java.util.HashSet;, +import java.util.List;, +import java.util.Locale;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.notNullValue;, +    public void testSizeAccessForCollectionsAndArrays() throws Exception {, +        String[] randomArrayValues = generateRandomStringArray(10, 20, false);, +        List<String> randomList = Arrays.asList(generateRandomStringArray(10, 20, false));, +, +        String template = "{{data.array.size}} {{data.list.size}}";, +        CompiledScript mustache = new CompiledScript(ScriptService.ScriptType.INLINE, "inline", "mustache", engine.compile(template, Collections.emptyMap()));, +        Map<String, Object> data = new HashMap<>();, +        data.put("array", randomArrayValues);, +        data.put("list", randomList);, +        Map<String, Object> vars = new HashMap<>();]