[+++ b/core/src/main/java/org/elasticsearch/Build.java, +        final URL url = getElasticsearchCodebase();, +        if (url.toString().endsWith(".jar")) {, +            try (JarInputStream jar = new JarInputStream(url.openStream())) {, +    static URL getElasticsearchCodebase() {, +        return Build.class.getProtectionDomain().getCodeSource().getLocation();, +++ b/core/src/main/java/org/elasticsearch/Build.java, +        final URL url = getElasticsearchCodebase();, +        if (url.toString().endsWith(".jar")) {, +            try (JarInputStream jar = new JarInputStream(url.openStream())) {, +    static URL getElasticsearchCodebase() {, +        return Build.class.getProtectionDomain().getCodeSource().getLocation();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +    // pkg-private for testing, +    Boolean includeInAll() {, +        return includeInAll;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/Build.java, +        final URL url = getElasticsearchCodebase();, +        if (url.toString().endsWith(".jar")) {, +            try (JarInputStream jar = new JarInputStream(url.openStream())) {, +    static URL getElasticsearchCodebase() {, +        return Build.class.getProtectionDomain().getCodeSource().getLocation();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +    // pkg-private for testing, +    Boolean includeInAll() {, +        return includeInAll;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +            "fielddata", "include_in_all", "ignore_above"));, +            "fielddata", "include_in_all", "analyzer", "search_analyzer", "search_quote_analyzer"));, +++ b/core/src/main/java/org/elasticsearch/Build.java, +        final URL url = getElasticsearchCodebase();, +        if (url.toString().endsWith(".jar")) {, +            try (JarInputStream jar = new JarInputStream(url.openStream())) {, +    static URL getElasticsearchCodebase() {, +        return Build.class.getProtectionDomain().getCodeSource().getLocation();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +    // pkg-private for testing, +    Boolean includeInAll() {, +        return includeInAll;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +            "fielddata", "include_in_all", "ignore_above"));, +            "fielddata", "include_in_all", "analyzer", "search_analyzer", "search_quote_analyzer"));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TextFieldMapper.java, +    // pkg-private for testing, +    Boolean includeInAll() {, +        return includeInAll;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/Build.java, +        final URL url = getElasticsearchCodebase();, +        if (url.toString().endsWith(".jar")) {, +            try (JarInputStream jar = new JarInputStream(url.openStream())) {, +    static URL getElasticsearchCodebase() {, +        return Build.class.getProtectionDomain().getCodeSource().getLocation();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +    // pkg-private for testing, +    Boolean includeInAll() {, +        return includeInAll;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +            "fielddata", "include_in_all", "ignore_above"));, +            "fielddata", "include_in_all", "analyzer", "search_analyzer", "search_quote_analyzer"));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TextFieldMapper.java, +    // pkg-private for testing, +    Boolean includeInAll() {, +        return includeInAll;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_5_0_0_alpha4)) {, +                throw new IllegalArgumentException("[_ttl] is removed in 5.0. As a replacement, you should use time based indexes or cron a delete-by-query with a range query on a timestamp field.");, +            }, +        if (enabled.enabled && Version.indexCreated(indexSettings).onOrAfter(Version.V_5_0_0_alpha4)) {, +            throw new IllegalArgumentException("[_ttl] is removed in 5.0. As a replacement, you should use time based indexes or cron a delete-by-query with a range query on a timestamp field.");, +        }, +++ b/core/src/main/java/org/elasticsearch/Build.java, +        final URL url = getElasticsearchCodebase();, +        if (url.toString().endsWith(".jar")) {, +            try (JarInputStream jar = new JarInputStream(url.openStream())) {, +    static URL getElasticsearchCodebase() {, +        return Build.class.getProtectionDomain().getCodeSource().getLocation();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +    // pkg-private for testing, +    Boolean includeInAll() {, +        return includeInAll;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +            "fielddata", "include_in_all", "ignore_above"));, +            "fielddata", "include_in_all", "analyzer", "search_analyzer", "search_quote_analyzer"));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TextFieldMapper.java, +    // pkg-private for testing]