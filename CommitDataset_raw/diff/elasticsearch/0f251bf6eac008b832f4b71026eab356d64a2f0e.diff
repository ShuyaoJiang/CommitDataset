[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractWeightedFilterCache.java, +import java.util.concurrent.atomic.AtomicInteger;, +    final AtomicInteger seenReadersCount = new AtomicInteger();, +    final AtomicLong totalSizeInBytes = new AtomicLong();, +    final AtomicInteger totalCount = new AtomicInteger();, +, +            seenReadersCount.decrementAndGet();, +                    FilterCacheValue<DocSet> removed2 = cache.remove(key);, +                    if (removed2 != null) {, +                        totalCount.decrementAndGet();, +                        totalSizeInBytes.addAndGet(-removed2.value().sizeInBytes());, +                    }, +        seenReadersCount.decrementAndGet();, +                FilterCacheValue<DocSet> removed2 = cache.remove(key);, +                if (removed2 != null) {, +                    totalCount.decrementAndGet();, +                    totalSizeInBytes.addAndGet(-removed2.value().sizeInBytes());, +                }, +        int seenReadersCount = this.seenReadersCount.get();, +        return new EntriesStats(totalSizeInBytes.get(), seenReadersCount == 0 ? 0 : totalCount.get() / seenReadersCount);, +                    Boolean previous = cache.seenReaders.putIfAbsent(reader.getCoreCacheKey(), Boolean.TRUE);, +                    if (previous == null) {, +                        cache.seenReadersCount.incrementAndGet();, +                    }, +                FilterCacheValue<DocSet> previous = innerCache.putIfAbsent(cacheKey, cacheValue);, +                if (previous == null) {, +                    cache.totalSizeInBytes.addAndGet(cacheValue.value().sizeInBytes());, +                    cache.totalCount.incrementAndGet();, +                }, +                totalCount.decrementAndGet();, +                if (docSetFilterCacheValue != null) {, +                    totalSizeInBytes.addAndGet(-docSetFilterCacheValue.value().sizeInBytes());, +                }]