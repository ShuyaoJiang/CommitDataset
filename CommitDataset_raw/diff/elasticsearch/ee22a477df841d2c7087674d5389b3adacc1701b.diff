[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("  - skip:"), +                current.println("      features: always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("  - skip:"), +                current.println("      features: always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit/), +            patterns.put('norelease', /norelease/), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("  - skip:"), +                current.println("      features: always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit/), +            patterns.put('norelease', /norelease/), +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("  - skip:"), +                current.println("      features: always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit/), +            patterns.put('norelease', /norelease/), +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestProxyActionFilter;, +    public ActionModule(boolean ingestEnabled, boolean transportClient, Settings settings, IndexNameExpressionResolver resolver,, +        actionFilters = setupActionFilters(actionPlugins, ingestEnabled);, +    private List<Class<? extends ActionFilter>> setupActionFilters(List<ActionPlugin> actionPlugins, boolean ingestEnabled) {, +        List<Class<? extends ActionFilter>> filters = new ArrayList<>();, +        if (transportClient == false) {, +            if (ingestEnabled) {, +                filters.add(IngestActionFilter.class);, +            } else {, +                filters.add(IngestProxyActionFilter.class);, +            }, +        }, +, +        for (ActionPlugin plugin : actionPlugins) {, +            filters.addAll(plugin.getActionFilters());, +        }, +        return unmodifiableList(filters);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("  - skip:"), +                current.println("      features: always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit/), +            patterns.put('norelease', /norelease/), +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestProxyActionFilter;, +    public ActionModule(boolean ingestEnabled, boolean transportClient, Settings settings, IndexNameExpressionResolver resolver,, +        actionFilters = setupActionFilters(actionPlugins, ingestEnabled);, +    private List<Class<? extends ActionFilter>> setupActionFilters(List<ActionPlugin> actionPlugins, boolean ingestEnabled) {, +        List<Class<? extends ActionFilter>> filters = new ArrayList<>();, +        if (transportClient == false) {, +            if (ingestEnabled) {, +                filters.add(IngestActionFilter.class);, +            } else {, +                filters.add(IngestProxyActionFilter.class);, +            }, +        }, +, +        for (ActionPlugin plugin : actionPlugins) {, +            filters.addAll(plugin.getActionFilters());, +        }, +        return unmodifiableList(filters);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/NodeExplanation.java, +        Decision.writeTo(nodeDecision, out);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("  - skip:"), +                current.println("      features: always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit/), +            patterns.put('norelease', /norelease/), +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestProxyActionFilter;, +    public ActionModule(boolean ingestEnabled, boolean transportClient, Settings settings, IndexNameExpressionResolver resolver,, +        actionFilters = setupActionFilters(actionPlugins, ingestEnabled);, +    private List<Class<? extends ActionFilter>> setupActionFilters(List<ActionPlugin> actionPlugins, boolean ingestEnabled) {, +        List<Class<? extends ActionFilter>> filters = new ArrayList<>();, +        if (transportClient == false) {, +            if (ingestEnabled) {, +                filters.add(IngestActionFilter.class);, +            } else {, +                filters.add(IngestProxyActionFilter.class);, +            }, +        }, +, +        for (ActionPlugin plugin : actionPlugins) {, +            filters.addAll(plugin.getActionFilters());, +        }, +        return unmodifiableList(filters);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/NodeExplanation.java, +        Decision.writeTo(nodeDecision, out);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.ResourceAlreadyExistsException;]