[+++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulateProcessorResult.java, +import org.elasticsearch.ingest.ConfigurationUtils;, +            builder.field(ConfigurationUtils.TAG_KEY, processorTag);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulateProcessorResult.java, +import org.elasticsearch.ingest.ConfigurationUtils;, +            builder.field(ConfigurationUtils.TAG_KEY, processorTag);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulateProcessorResult.java, +import org.elasticsearch.ingest.ConfigurationUtils;, +            builder.field(ConfigurationUtils.TAG_KEY, processorTag);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +    public static final String TAG_KEY = "tag";, +, +            String tag = ConfigurationUtils.readOptionalStringProperty(null, null, config, TAG_KEY);, +            Processor processor = factory.create(tag, config);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulateProcessorResult.java, +import org.elasticsearch.ingest.ConfigurationUtils;, +            builder.field(ConfigurationUtils.TAG_KEY, processorTag);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +    public static final String TAG_KEY = "tag";, +, +            String tag = ConfigurationUtils.readOptionalStringProperty(null, null, config, TAG_KEY);, +            Processor processor = factory.create(tag, config);, +++ b/core/src/main/java/org/elasticsearch/ingest/Processor.java, +    interface Factory {, +         * @param tag The tag for the processor, +         * @param config Configuration for the processor to create, +         *, +        Processor create(String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulateProcessorResult.java, +import org.elasticsearch.ingest.ConfigurationUtils;, +            builder.field(ConfigurationUtils.TAG_KEY, processorTag);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +    public static final String TAG_KEY = "tag";, +, +            String tag = ConfigurationUtils.readOptionalStringProperty(null, null, config, TAG_KEY);, +            Processor processor = factory.create(tag, config);, +++ b/core/src/main/java/org/elasticsearch/ingest/Processor.java, +    interface Factory {, +         * @param tag The tag for the processor, +         * @param config Configuration for the processor to create, +         *, +        Processor create(String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +                               Map<String, Function<ProcessorsRegistry, Processor.Factory>> providers) {, +        for (Map.Entry<String, Function<ProcessorsRegistry, Processor.Factory>> entry : providers.entrySet()) {, +        private final Map<String, Function<ProcessorsRegistry, Processor.Factory>> providers = new HashMap<>();, +        public void registerProcessor(String name, Function<ProcessorsRegistry, Processor.Factory> provider) {, +            Function<ProcessorsRegistry, Processor.Factory> previous = this.providers.putIfAbsent(name, provider);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulateProcessorResult.java, +import org.elasticsearch.ingest.ConfigurationUtils;, +            builder.field(ConfigurationUtils.TAG_KEY, processorTag);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +    public static final String TAG_KEY = "tag";, +, +            String tag = ConfigurationUtils.readOptionalStringProperty(null, null, config, TAG_KEY);, +            Processor processor = factory.create(tag, config);, +++ b/core/src/main/java/org/elasticsearch/ingest/Processor.java, +    interface Factory {, +         * @param tag The tag for the processor, +         * @param config Configuration for the processor to create, +         *, +        Processor create(String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +                               Map<String, Function<ProcessorsRegistry, Processor.Factory>> providers) {, +        for (Map.Entry<String, Function<ProcessorsRegistry, Processor.Factory>> entry : providers.entrySet()) {, +        private final Map<String, Function<ProcessorsRegistry, Processor.Factory>> providers = new HashMap<>();, +        public void registerProcessor(String name, Function<ProcessorsRegistry, Processor.Factory> provider) {, +            Function<ProcessorsRegistry, Processor.Factory> previous = this.providers.putIfAbsent(name, provider);, +++ b/core/src/main/java/org/elasticsearch/node/NodeModule.java, +    public void registerProcessor(String type, Function<ProcessorsRegistry, Processor.Factory> provider) {, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulateProcessorResult.java, +import org.elasticsearch.ingest.ConfigurationUtils;, +            builder.field(ConfigurationUtils.TAG_KEY, processorTag);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +    public static final String TAG_KEY = "tag";, +, +            String tag = ConfigurationUtils.readOptionalStringProperty(null, null, config, TAG_KEY);, +            Processor processor = factory.create(tag, config);, +++ b/core/src/main/java/org/elasticsearch/ingest/Processor.java, +    interface Factory {, +         * @param tag The tag for the processor, +         * @param config Configuration for the processor to create, +         *, +        Processor create(String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +                               Map<String, Function<ProcessorsRegistry, Processor.Factory>> providers) {, +        for (Map.Entry<String, Function<ProcessorsRegistry, Processor.Factory>> entry : providers.entrySet()) {, +        private final Map<String, Function<ProcessorsRegistry, Processor.Factory>> providers = new HashMap<>();, +        public void registerProcessor(String name, Function<ProcessorsRegistry, Processor.Factory> provider) {, +            Function<ProcessorsRegistry, Processor.Factory> previous = this.providers.putIfAbsent(name, provider);, +++ b/core/src/main/java/org/elasticsearch/node/NodeModule.java, +    public void registerProcessor(String type, Function<ProcessorsRegistry, Processor.Factory> provider) {, +++ b/core/src/test/java/org/elasticsearch/ingest/ConfigurationUtilsTests.java, +        builder.registerProcessor("test_processor", (registry) -> (tag, config) -> processor);]