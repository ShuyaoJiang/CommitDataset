[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java, +    private static final Setting<Integer> SCROLL_SIZE_SETTING =, +            Setting.intSetting(setting("authz.store.roles.index.scroll.size"), 1000, Property.NodeScope);, +, +    private static final Setting<TimeValue> SCROLL_KEEP_ALIVE_SETTING =, +            Setting.timeSetting(setting("authz.store.roles.index.scroll.keep_alive"), TimeValue.timeValueSeconds(10L), Property.NodeScope);, +, +    private static final Setting<Integer> CACHE_SIZE_SETTING =, +            Setting.intSetting(setting("authz.store.roles.index.cache.max_size"), 10000, Property.NodeScope);, +    private static final Setting<TimeValue> CACHE_TTL_SETTING =, +            Setting.timeSetting(setting("authz.store.roles.index.cache.ttl"), TimeValue.timeValueMinutes(20), Property.NodeScope);, +, +    private static final String ROLE_DOC_TYPE = "role";, +                            final boolean created = indexResponse.getResult() == DocWriteResponse.Result.CREATED;, +        long count = 0L;, +                if (rv == RoleAndVersion.NON_EXISTENT) {, +                    continue;, +                }, +, +                count++;, +                        final RoleAndVersion roleAndVersion;, +                            roleAndVersion = new RoleAndVersion(descriptor, response.getVersion());, +                        } else {, +                            roleAndVersion = RoleAndVersion.NON_EXISTENT;, +                        }, +, +                                roleCache.computeIfAbsent(roleId, (k) -> roleAndVersion);, +    // pkg-private for testing, +    void executeGetRoleRequest(String role, ActionListener<GetResponse> listener) {, +        private static final RoleAndVersion NON_EXISTENT = new RoleAndVersion();, +, +        private RoleAndVersion() {, +            roleDescriptor = null;, +            role = null;, +            version = Long.MIN_VALUE;, +        }, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java, +    private static final Setting<Integer> SCROLL_SIZE_SETTING =, +            Setting.intSetting(setting("authz.store.roles.index.scroll.size"), 1000, Property.NodeScope);, +, +    private static final Setting<TimeValue> SCROLL_KEEP_ALIVE_SETTING =, +            Setting.timeSetting(setting("authz.store.roles.index.scroll.keep_alive"), TimeValue.timeValueSeconds(10L), Property.NodeScope);, +, +    private static final Setting<Integer> CACHE_SIZE_SETTING =, +            Setting.intSetting(setting("authz.store.roles.index.cache.max_size"), 10000, Property.NodeScope);, +    private static final Setting<TimeValue> CACHE_TTL_SETTING =, +            Setting.timeSetting(setting("authz.store.roles.index.cache.ttl"), TimeValue.timeValueMinutes(20), Property.NodeScope);, +, +    private static final String ROLE_DOC_TYPE = "role";, +                            final boolean created = indexResponse.getResult() == DocWriteResponse.Result.CREATED;, +        long count = 0L;, +                if (rv == RoleAndVersion.NON_EXISTENT) {, +                    continue;, +                }, +, +                count++;, +                        final RoleAndVersion roleAndVersion;, +                            roleAndVersion = new RoleAndVersion(descriptor, response.getVersion());, +                        } else {, +                            roleAndVersion = RoleAndVersion.NON_EXISTENT;, +                        }, +, +                                roleCache.computeIfAbsent(roleId, (k) -> roleAndVersion);, +    // pkg-private for testing, +    void executeGetRoleRequest(String role, ActionListener<GetResponse> listener) {, +        private static final RoleAndVersion NON_EXISTENT = new RoleAndVersion();, +, +        private RoleAndVersion() {, +            roleDescriptor = null;, +            role = null;, +            version = Long.MIN_VALUE;, +        }, +, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/security/authc/esnative/NativeRealmIntegTests.java, +, +    public void testNegativeLookupsThenCreateRole() throws Exception {, +        SecurityClient securityClient = new SecurityClient(client());, +        securityClient.preparePutUser("joe", "s3krit".toCharArray(), "unknown_role").get();, +, +        final int negativeLookups = scaledRandomIntBetween(1, 10);, +        for (int i = 0; i < negativeLookups; i++) {, +            if (anonymousEnabled && roleExists) {, +                ClusterHealthResponse response = client(), +                        .filterWithHeader(Collections.singletonMap("Authorization",, +                                basicAuthHeaderValue("joe", new SecuredString("s3krit".toCharArray())))), +                        .admin().cluster().prepareHealth().get();, +                assertNoTimeout(response);, +            } else {, +                ElasticsearchSecurityException e = expectThrows(ElasticsearchSecurityException.class, () -> client(), +                        .filterWithHeader(Collections.singletonMap("Authorization",, +                                basicAuthHeaderValue("joe", new SecuredString("s3krit".toCharArray())))), +                        .admin().cluster().prepareHealth().get());, +                assertThat(e.status(), is(RestStatus.FORBIDDEN));, +            }, +        }, +, +        securityClient.preparePutRole("unknown_role").cluster("all").get();, +        ClusterHealthResponse response = client(), +                .filterWithHeader(Collections.singletonMap("Authorization",]