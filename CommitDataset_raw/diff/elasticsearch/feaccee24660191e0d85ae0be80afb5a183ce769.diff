[+++ b/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +                .mappings(request.mappings()),, +++ b/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +                .mappings(request.mappings()),, +++ b/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +            // the first scope level is the most nested child, +            for (ScopePhase scopePhase : searchContext.scopePhases()) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +                .mappings(request.mappings()),, +++ b/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +            // the first scope level is the most nested child, +            for (ScopePhase scopePhase : searchContext.scopePhases()) {, +++ b/src/test/java/org/elasticsearch/test/integration/indices/template/SimpleIndexTemplateTests.java, +++ b/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +                .mappings(request.mappings()),, +++ b/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +            // the first scope level is the most nested child, +            for (ScopePhase scopePhase : searchContext.scopePhases()) {, +++ b/src/test/java/org/elasticsearch/test/integration/indices/template/SimpleIndexTemplateTests.java, +++ b/src/test/java/org/elasticsearch/test/integration/search/child/SimpleChildQuerySearchTests.java, +    public void multiLevelChild() throws Exception {, +        client.admin().indices().prepareDelete().execute().actionGet();, +, +        client.admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 1)).execute().actionGet();, +        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();, +        client.admin().indices().preparePutMapping("test").setType("child").setSource(XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_parent").field("type", "parent").endObject(), +                .endObject().endObject()).execute().actionGet();, +        client.admin().indices().preparePutMapping("test").setType("grandchild").setSource(XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_parent").field("type", "child").endObject(), +                .endObject().endObject()).execute().actionGet();, +, +        client.prepareIndex("test", "parent", "p1").setSource("p_field", "p_value1").execute().actionGet();, +        client.prepareIndex("test", "child", "c1").setSource("c_field", "c_value1").setParent("p1").execute().actionGet();, +        client.prepareIndex("test", "grandchild", "gc1").setSource("gc_field", "gc_value1").setParent("c1").setRouting("gc1").execute().actionGet();, +, +        client.admin().indices().prepareRefresh().execute().actionGet();, +, +        SearchResponse searchResponse = client.prepareSearch("test"), +                .setQuery(filteredQuery(matchAllQuery(), hasChildFilter("child", filteredQuery(termQuery("c_field", "c_value1"), hasChildFilter("grandchild", termQuery("gc_field", "gc_value1")))))), +                .execute().actionGet();, +        assertThat("Failures " + Arrays.toString(searchResponse.shardFailures()), searchResponse.shardFailures().length, equalTo(0));, +        assertThat(searchResponse.hits().totalHits(), equalTo(1l));, +    }, +, +    @Test]