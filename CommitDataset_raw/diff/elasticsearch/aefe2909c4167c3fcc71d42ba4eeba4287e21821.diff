[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineRequestBuilder.java, +public class GetPipelineRequestBuilder, +        extends MasterNodeReadOperationRequestBuilder<GetPipelineRequest, GetPipelineResponse, GetPipelineRequestBuilder> {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineRequestBuilder.java, +public class GetPipelineRequestBuilder, +        extends MasterNodeReadOperationRequestBuilder<GetPipelineRequest, GetPipelineResponse, GetPipelineRequestBuilder> {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineTransportAction.java, +        super(settings, GetPipelineAction.NAME, transportService, clusterService, threadPool, actionFilters, GetPipelineRequest::new,, +                indexNameExpressionResolver);, +    protected void masterOperation(GetPipelineRequest request, ClusterState state, ActionListener<GetPipelineResponse> listener), +            throws Exception {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineRequestBuilder.java, +public class GetPipelineRequestBuilder, +        extends MasterNodeReadOperationRequestBuilder<GetPipelineRequest, GetPipelineResponse, GetPipelineRequestBuilder> {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineTransportAction.java, +        super(settings, GetPipelineAction.NAME, transportService, clusterService, threadPool, actionFilters, GetPipelineRequest::new,, +                indexNameExpressionResolver);, +    protected void masterOperation(GetPipelineRequest request, ClusterState state, ActionListener<GetPipelineResponse> listener), +            throws Exception {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/PutPipelineTransportAction.java, +    protected void masterOperation(PutPipelineRequest request, ClusterState state, ActionListener<AcknowledgedResponse> listener), +            throws Exception {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineRequestBuilder.java, +public class GetPipelineRequestBuilder, +        extends MasterNodeReadOperationRequestBuilder<GetPipelineRequest, GetPipelineResponse, GetPipelineRequestBuilder> {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineTransportAction.java, +        super(settings, GetPipelineAction.NAME, transportService, clusterService, threadPool, actionFilters, GetPipelineRequest::new,, +                indexNameExpressionResolver);, +    protected void masterOperation(GetPipelineRequest request, ClusterState state, ActionListener<GetPipelineResponse> listener), +            throws Exception {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/PutPipelineTransportAction.java, +    protected void masterOperation(PutPipelineRequest request, ClusterState state, ActionListener<AcknowledgedResponse> listener), +            throws Exception {, +++ b/server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java, +        TestProcessor processor2 = new TestProcessor("processor_1", "mock",, +                ingestDocument -> { throw new RuntimeException("processor failed"); });, +        assertThat(simulateDocumentVerboseResult.getProcessorResults().get(0).getIngestDocument().getSourceAndMetadata(),, +                not(sameInstance(ingestDocument.getSourceAndMetadata())));, +        TestProcessor processor1 = new TestProcessor("processor_0", "mock",, +                ingestDocument -> { throw new RuntimeException("processor failed"); });, +        assertIngestDocument(simulateDocumentVerboseResult.getProcessorResults().get(1).getIngestDocument(),, +                ingestDocumentWithOnFailureMetadata);, +        assertThat(simulateDocumentVerboseResult.getProcessorResults().get(0).getIngestDocument().getSourceAndMetadata(),, +                not(sameInstance(ingestDocument.getSourceAndMetadata())));, +        assertThat(simulateDocumentVerboseResult.getProcessorResults().get(0).getIngestDocument().getSourceAndMetadata(),, +                not(sameInstance(ingestDocument.getSourceAndMetadata())));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineRequestBuilder.java, +public class GetPipelineRequestBuilder, +        extends MasterNodeReadOperationRequestBuilder<GetPipelineRequest, GetPipelineResponse, GetPipelineRequestBuilder> {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineTransportAction.java, +        super(settings, GetPipelineAction.NAME, transportService, clusterService, threadPool, actionFilters, GetPipelineRequest::new,, +                indexNameExpressionResolver);, +    protected void masterOperation(GetPipelineRequest request, ClusterState state, ActionListener<GetPipelineResponse> listener), +            throws Exception {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/PutPipelineTransportAction.java, +    protected void masterOperation(PutPipelineRequest request, ClusterState state, ActionListener<AcknowledgedResponse> listener), +            throws Exception {, +++ b/server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java, +        TestProcessor processor2 = new TestProcessor("processor_1", "mock",, +                ingestDocument -> { throw new RuntimeException("processor failed"); });, +        assertThat(simulateDocumentVerboseResult.getProcessorResults().get(0).getIngestDocument().getSourceAndMetadata(),, +                not(sameInstance(ingestDocument.getSourceAndMetadata())));, +        TestProcessor processor1 = new TestProcessor("processor_0", "mock",, +                ingestDocument -> { throw new RuntimeException("processor failed"); });, +        assertIngestDocument(simulateDocumentVerboseResult.getProcessorResults().get(1).getIngestDocument(),, +                ingestDocumentWithOnFailureMetadata);, +        assertThat(simulateDocumentVerboseResult.getProcessorResults().get(0).getIngestDocument().getSourceAndMetadata(),, +                not(sameInstance(ingestDocument.getSourceAndMetadata())));, +        assertThat(simulateDocumentVerboseResult.getProcessorResults().get(0).getIngestDocument().getSourceAndMetadata(),, +                not(sameInstance(ingestDocument.getSourceAndMetadata())));, +++ b/server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineResponseTests.java, +                SimulateDocumentVerboseResult expectedSimulateDocumentVerboseResult =, +                        (SimulateDocumentVerboseResult) expectedResultIterator.next();, +                assertThat(simulateDocumentVerboseResult.getProcessorResults().size(),, +                        equalTo(expectedSimulateDocumentVerboseResult.getProcessorResults().size()));, +                Iterator<SimulateProcessorResult> expectedProcessorResultIterator =, +                        expectedSimulateDocumentVerboseResult.getProcessorResults().iterator();, +                    assertIngestDocument(simulateDocumentBaseResult.getIngestDocument(),, +                            expectedSimulateDocumentBaseResult.getIngestDocument());, +        AbstractXContentTestCase.testFromXContent(NUMBER_OF_TEST_RUNS, instanceSupplier, supportsUnknownFields(),, +                getShuffleFieldsExceptions(), getRandomFieldsExcludeFilter(), this::createParser, this::doParseInstance,, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineRequestBuilder.java, +public class GetPipelineRequestBuilder, +        extends MasterNodeReadOperationRequestBuilder<GetPipelineRequest, GetPipelineResponse, GetPipelineRequestBuilder> {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/GetPipelineTransportAction.java, +        super(settings, GetPipelineAction.NAME, transportService, clusterService, threadPool, actionFilters, GetPipelineRequest::new,, +                indexNameExpressionResolver);, +    protected void masterOperation(GetPipelineRequest request, ClusterState state, ActionListener<GetPipelineResponse> listener), +            throws Exception {, +++ b/server/src/main/java/org/elasticsearch/action/ingest/PutPipelineTransportAction.java, +    protected void masterOperation(PutPipelineRequest request, ClusterState state, ActionListener<AcknowledgedResponse> listener), +            throws Exception {, +++ b/server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java]