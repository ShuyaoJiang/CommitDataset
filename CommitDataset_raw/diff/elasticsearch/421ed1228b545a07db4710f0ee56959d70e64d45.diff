[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' in a folder named `elasticsearch`, +# inside all plugins., +#|____elasticsearch/, +#| |____   <arbitrary name1>.jar <-- classes, resources, dependencies, +#| |____   <arbitrary nameN>.jar <-- any number of jars, +#| |____   plugin-descriptor.properties <-- example contents below:, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' in a folder named `elasticsearch`, +# inside all plugins., +#|____elasticsearch/, +#| |____   <arbitrary name1>.jar <-- classes, resources, dependencies, +#| |____   <arbitrary nameN>.jar <-- any number of jars, +#| |____   plugin-descriptor.properties <-- example contents below:, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' in a folder named `elasticsearch`, +# inside all plugins., +#|____elasticsearch/, +#| |____   <arbitrary name1>.jar <-- classes, resources, dependencies, +#| |____   <arbitrary nameN>.jar <-- any number of jars, +#| |____   plugin-descriptor.properties <-- example contents below:, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    public SuggestRequestBuilder addSuggestion(SuggestionBuilder<?> suggestion) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' in a folder named `elasticsearch`, +# inside all plugins., +#|____elasticsearch/, +#| |____   <arbitrary name1>.jar <-- classes, resources, dependencies, +#| |____   <arbitrary nameN>.jar <-- any number of jars, +#| |____   plugin-descriptor.properties <-- example contents below:, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    public SuggestRequestBuilder addSuggestion(SuggestionBuilder<?> suggestion) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +            MetaData.Builder builder = MetaData.builder(currentState.metaData());, +, +                IndexMetaData indexMetaData = currentState.metaData().index(index);, +                    throw new IndexNotFoundException(index);, +                IndexMetaData.Builder indexMetaDataBuilder = IndexMetaData.builder(indexMetaData);, +                // Mapping updates on a single type may have side-effects on other types so we need to, +                // update mapping metadata on all types, +                for (DocumentMapper mapper : indexService.mapperService().docMappers(true)) {, +                    indexMetaDataBuilder.putMapping(new MappingMetaData(mapper.mappingSource()));, +                builder.put(indexMetaDataBuilder);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            if (project.path.startsWith(':modules:') == false) {, +                into('elasticsearch'), +            }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# This file must exist as 'plugin-descriptor.properties' in a folder named `elasticsearch`, +# inside all plugins., +#|____elasticsearch/, +#| |____   <arbitrary name1>.jar <-- classes, resources, dependencies, +#| |____   <arbitrary nameN>.jar <-- any number of jars, +#| |____   plugin-descriptor.properties <-- example contents below:, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;]