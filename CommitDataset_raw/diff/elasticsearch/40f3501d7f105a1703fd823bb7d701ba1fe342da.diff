[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +            validationException = addValidationError("either concreteIndices or unresolved indices can be set concrete: [" + concreteIndex, +                + "] and indices: " + indices , validationException);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +            validationException = addValidationError("either concreteIndices or unresolved indices can be set concrete: [" + concreteIndex, +                + "] and indices: " + indices , validationException);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +            validationException = addValidationError("either concreteIndices or unresolved indices can be set concrete: [" + concreteIndex, +                + "] and indices: " + indices , validationException);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/ShardSuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestBuilder;, +    private SuggestBuilder suggest;, +        this.suggest = request.suggest();, +    public SuggestBuilder suggest() {, +        return suggest;, +        suggest = SuggestBuilder.PROTOTYPE.readFrom(in);, +        suggest.writeTo(out);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +            validationException = addValidationError("either concreteIndices or unresolved indices can be set concrete: [" + concreteIndex, +                + "] and indices: " + indices , validationException);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/ShardSuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestBuilder;, +    private SuggestBuilder suggest;, +        this.suggest = request.suggest();, +    public SuggestBuilder suggest() {, +        return suggest;, +        suggest = SuggestBuilder.PROTOTYPE.readFrom(in);, +        suggest.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import java.util.Objects;, + * The request requires the suggest query source to be set using, + * {@link #suggest(org.elasticsearch.search.suggest.SuggestBuilder)}, +    private SuggestBuilder suggest;, +     * The suggestion query to get correction suggestions for, +    public SuggestBuilder suggest() {, +        return suggest;, +    public SuggestRequest suggest(SuggestBuilder suggest) {, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        this.suggest = suggest;, +        suggest = SuggestBuilder.PROTOTYPE.readFrom(in);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        suggest.writeTo(out);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +            XContentBuilder builder = JsonXContent.contentBuilder();, +            builder = suggest.toXContent(builder, ToXContent.EMPTY_PARAMS);, +            sSource = builder.string();, +        return "[" + Arrays.toString(indices) + "]" + ", suggest[" + sSource + "]";, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +            validationException = addValidationError("either concreteIndices or unresolved indices can be set concrete: [" + concreteIndex, +                + "] and indices: " + indices , validationException);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/ShardSuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestBuilder;, +    private SuggestBuilder suggest;, +        this.suggest = request.suggest();, +    public SuggestBuilder suggest() {, +        return suggest;, +        suggest = SuggestBuilder.PROTOTYPE.readFrom(in);, +        suggest.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import java.util.Objects;, + * The request requires the suggest query source to be set using, + * {@link #suggest(org.elasticsearch.search.suggest.SuggestBuilder)}, +    private SuggestBuilder suggest;, +     * The suggestion query to get correction suggestions for, +    public SuggestBuilder suggest() {, +        return suggest;, +    public SuggestRequest suggest(SuggestBuilder suggest) {, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        this.suggest = suggest;, +        suggest = SuggestBuilder.PROTOTYPE.readFrom(in);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        suggest.writeTo(out);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +            XContentBuilder builder = JsonXContent.contentBuilder();, +            builder = suggest.toXContent(builder, ToXContent.EMPTY_PARAMS);, +            sSource = builder.string();, +        return "[" + Arrays.toString(indices) + "]" + ", suggest[" + sSource + "]";, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * @param name the name for the suggestion that will also be used in the response]