[+++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +import java.util.HashSet;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import java.util.stream.Collectors;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.xpack.security.audit.AuditTrail;, +import org.elasticsearch.xpack.security.audit.AuditTrailService;, +import org.elasticsearch.xpack.security.audit.logfile.LoggingAuditTrail;, +    public static final Setting<Boolean> AUDIT_ENABLED_SETTING =, +        Setting.boolSetting(featureEnabledSetting("audit"), false, Property.NodeScope);, +    public static final Setting<List<String>> AUDIT_OUTPUTS_SETTING =, +        Setting.listSetting(setting("audit.outputs"),, +            s -> s.getAsMap().containsKey(setting("audit.outputs")) ?, +                Collections.emptyList() : Collections.singletonList(LoggingAuditTrail.NAME),, +            Function.identity(), Property.NodeScope);, +, +        if (enabled == false || auditingEnabled(settings) == false) {, +            modules.add(b -> {, +                b.bind(AuditTrailService.class).toProvider(Providers.of(null));, +                b.bind(AuditTrail.class).toInstance(AuditTrail.NOOP);, +            });, +        }, +            modules.add(b -> {, +                b.bind(CryptoService.class).toProvider(Providers.of(null));, +            });, +        modules.add(b -> {, +            b.bind(CryptoService.class).toInstance(cryptoService);, +            if (auditingEnabled(settings)) {, +                b.bind(AuditTrail.class).to(AuditTrailService.class); // interface used by some actions..., +            } else {, +                // TODO: remove this once we can construct SecurityLifecycleService without guice, +                b.bind(IndexAuditTrail.class).toProvider(Providers.of(null));, +            }, +        });, +    public Collection<Object> createComponents(InternalClient client, ThreadPool threadPool, ClusterService clusterService,, +        List<Object> components = new ArrayList<>();, +        components.add(clientSSLService);, +        components.add(serverSSLService);, +        components.add(nativeUsersStore);, +        components.add(realms);, +        // audit trails construction, +        if (AUDIT_ENABLED_SETTING.get(settings)) {, +            List<String> outputs = AUDIT_OUTPUTS_SETTING.get(settings);, +            if (outputs.isEmpty()) {, +                throw new IllegalArgumentException("Audit logging is enabled but there are zero output types in ", +                    + AUDIT_ENABLED_SETTING.getKey());, +            }, +            Set<AuditTrail> auditTrails = new LinkedHashSet<>();, +            for (String output : outputs) {, +                switch (output) {, +                    case LoggingAuditTrail.NAME:, +                        auditTrails.add(new LoggingAuditTrail(settings, clusterService, threadPool));, +                        break;, +                    case IndexAuditTrail.NAME:, +                        auditTrails.add(new IndexAuditTrail(settings, client, threadPool, clusterService));, +                        break;, +                    default:, +                        throw new IllegalArgumentException("Unknown audit trail output [" + output + "]");, +                }, +            }, +            components.add(new AuditTrailService(settings, auditTrails.stream().collect(Collectors.toList()), securityLicenseState));, +        }, +, +        return components;, +        settingsList.add(AUDIT_ENABLED_SETTING);, +        settingsList.add(AUDIT_OUTPUTS_SETTING);, +        LoggingAuditTrail.registerSettings(settingsList);, +        IndexAuditTrail.registerSettings(settingsList);, +    public static boolean auditingEnabled(Settings settings) {, +        return AUDIT_ENABLED_SETTING.get(settings);, +    }, +, +    public static boolean indexAuditLoggingEnabled(Settings settings) {, +        if (auditingEnabled(settings)) {, +            List<String> outputs = AUDIT_OUTPUTS_SETTING.get(settings);, +            for (String output : outputs) {, +                if (output.equals(IndexAuditTrail.NAME)) {, +                    return true;, +                }, +            }, +        }, +        return false;, +    }, +, +        final boolean indexAuditingEnabled = Security.indexAuditLoggingEnabled(settings);, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +import java.util.HashSet;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import java.util.stream.Collectors;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.xpack.security.audit.AuditTrail;, +import org.elasticsearch.xpack.security.audit.AuditTrailService;, +import org.elasticsearch.xpack.security.audit.logfile.LoggingAuditTrail;, +    public static final Setting<Boolean> AUDIT_ENABLED_SETTING =, +        Setting.boolSetting(featureEnabledSetting("audit"), false, Property.NodeScope);, +    public static final Setting<List<String>> AUDIT_OUTPUTS_SETTING =, +        Setting.listSetting(setting("audit.outputs"),, +            s -> s.getAsMap().containsKey(setting("audit.outputs")) ?]