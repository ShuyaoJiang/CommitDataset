[+++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +import org.elasticsearch.common.CheckedFunction;, +     * Creates a listener that wraps another listener, mapping response values via the given mapping function and passing along, +     * exceptions to the delegate., +     *, +     * @param listener Listener to delegate to, +     * @param fn Function to apply to listener response, +     * @param <Response> Response type of the new listener, +     * @param <T> Response type of the wrapped listener, +     * @return a listener that maps the received response and then passes it to its delegate listener, +     */, +    static <T, Response> ActionListener<Response> map(ActionListener<T> listener, CheckedFunction<Response, T, Exception> fn) {, +        return wrap(r -> listener.onResponse(fn.apply(r)), listener::onFailure);, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +import org.elasticsearch.common.CheckedFunction;, +     * Creates a listener that wraps another listener, mapping response values via the given mapping function and passing along, +     * exceptions to the delegate., +     *, +     * @param listener Listener to delegate to, +     * @param fn Function to apply to listener response, +     * @param <Response> Response type of the new listener, +     * @param <T> Response type of the wrapped listener, +     * @return a listener that maps the received response and then passes it to its delegate listener, +     */, +    static <T, Response> ActionListener<Response> map(ActionListener<T> listener, CheckedFunction<Response, T, Exception> fn) {, +        return wrap(r -> listener.onResponse(fn.apply(r)), listener::onFailure);, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +                ActionListener.map(listener,, +                        return response;, +                    })));, +++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +import org.elasticsearch.common.CheckedFunction;, +     * Creates a listener that wraps another listener, mapping response values via the given mapping function and passing along, +     * exceptions to the delegate., +     *, +     * @param listener Listener to delegate to, +     * @param fn Function to apply to listener response, +     * @param <Response> Response type of the new listener, +     * @param <T> Response type of the wrapped listener, +     * @return a listener that maps the received response and then passes it to its delegate listener, +     */, +    static <T, Response> ActionListener<Response> map(ActionListener<T> listener, CheckedFunction<Response, T, Exception> fn) {, +        return wrap(r -> listener.onResponse(fn.apply(r)), listener::onFailure);, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +                ActionListener.map(listener,, +                        return response;, +                    })));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +            snapshotsService.executeSnapshot(request, ActionListener.map(listener, CreateSnapshotResponse::new));, +            snapshotsService.createSnapshot(request, ActionListener.map(listener, snapshot -> new CreateSnapshotResponse()));, +++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +import org.elasticsearch.common.CheckedFunction;, +     * Creates a listener that wraps another listener, mapping response values via the given mapping function and passing along, +     * exceptions to the delegate., +     *, +     * @param listener Listener to delegate to, +     * @param fn Function to apply to listener response, +     * @param <Response> Response type of the new listener, +     * @param <T> Response type of the wrapped listener, +     * @return a listener that maps the received response and then passes it to its delegate listener, +     */, +    static <T, Response> ActionListener<Response> map(ActionListener<T> listener, CheckedFunction<Response, T, Exception> fn) {, +        return wrap(r -> listener.onResponse(fn.apply(r)), listener::onFailure);, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +                ActionListener.map(listener,, +                        return response;, +                    })));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +            snapshotsService.executeSnapshot(request, ActionListener.map(listener, CreateSnapshotResponse::new));, +            snapshotsService.createSnapshot(request, ActionListener.map(listener, snapshot -> new CreateSnapshotResponse()));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +            ActionListener.map(listener, v -> new AcknowledgedResponse(true)), false);, +++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +import org.elasticsearch.common.CheckedFunction;, +     * Creates a listener that wraps another listener, mapping response values via the given mapping function and passing along, +     * exceptions to the delegate., +     *, +     * @param listener Listener to delegate to, +     * @param fn Function to apply to listener response, +     * @param <Response> Response type of the new listener, +     * @param <T> Response type of the wrapped listener, +     * @return a listener that maps the received response and then passes it to its delegate listener, +     */, +    static <T, Response> ActionListener<Response> map(ActionListener<T> listener, CheckedFunction<Response, T, Exception> fn) {, +        return wrap(r -> listener.onResponse(fn.apply(r)), listener::onFailure);, +    }, +, +    /**]