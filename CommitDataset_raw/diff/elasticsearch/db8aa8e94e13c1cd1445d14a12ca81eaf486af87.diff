[+++ b/core/src/test/java/org/elasticsearch/search/fetch/subphase/InnerHitsIT.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;, +    public void testDontExplode() throws Exception {, +        assertAcked(prepareCreate("index2").addMapping("type", "nested", "type=nested"));, +        client().prepareIndex("index2", "type", "1").setSource(jsonBuilder().startObject(), +            .startArray("nested"), +            .startObject(), +            .field("field", "value1"), +            .endObject(), +            .endArray(), +            .endObject()), +            .setRefreshPolicy(IMMEDIATE), +            .get();, +, +        QueryBuilder query = nestedQuery("nested", matchQuery("nested.field", "value1"), ScoreMode.Avg), +            .innerHit(new InnerHitBuilder().setSize(ArrayUtil.MAX_ARRAY_LENGTH - 1));, +        SearchResponse response = client().prepareSearch("index2"), +            .setQuery(query), +            .get();, +        assertNoFailures(response);, +        assertHitCount(response, 1);, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/fetch/subphase/InnerHitsIT.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;, +    public void testDontExplode() throws Exception {, +        assertAcked(prepareCreate("index2").addMapping("type", "nested", "type=nested"));, +        client().prepareIndex("index2", "type", "1").setSource(jsonBuilder().startObject(), +            .startArray("nested"), +            .startObject(), +            .field("field", "value1"), +            .endObject(), +            .endArray(), +            .endObject()), +            .setRefreshPolicy(IMMEDIATE), +            .get();, +, +        QueryBuilder query = nestedQuery("nested", matchQuery("nested.field", "value1"), ScoreMode.Avg), +            .innerHit(new InnerHitBuilder().setSize(ArrayUtil.MAX_ARRAY_LENGTH - 1));, +        SearchResponse response = client().prepareSearch("index2"), +            .setQuery(query), +            .get();, +        assertNoFailures(response);, +        assertHitCount(response, 1);, +    }, +, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/query/HasChildQueryBuilder.java, +        if (joinFieldMapper == null) {, +            if (ignoreUnmapped) {, +                return new MatchNoDocsQuery();, +            } else {, +                throw new QueryShardException(context, "[" + NAME + "] no join field has been configured");, +            }, +        }, +, +                throw new QueryShardException(context, "[" + NAME + "] join field [" + joinFieldMapper.name() +, +                    "] doesn't hold [" + type + "] as a child");, +                new ParentChildInnerHitContextBuilder(type, true, query, innerHitBuilder, children);, +++ b/core/src/test/java/org/elasticsearch/search/fetch/subphase/InnerHitsIT.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;, +    public void testDontExplode() throws Exception {, +        assertAcked(prepareCreate("index2").addMapping("type", "nested", "type=nested"));, +        client().prepareIndex("index2", "type", "1").setSource(jsonBuilder().startObject(), +            .startArray("nested"), +            .startObject(), +            .field("field", "value1"), +            .endObject(), +            .endArray(), +            .endObject()), +            .setRefreshPolicy(IMMEDIATE), +            .get();, +, +        QueryBuilder query = nestedQuery("nested", matchQuery("nested.field", "value1"), ScoreMode.Avg), +            .innerHit(new InnerHitBuilder().setSize(ArrayUtil.MAX_ARRAY_LENGTH - 1));, +        SearchResponse response = client().prepareSearch("index2"), +            .setQuery(query), +            .get();, +        assertNoFailures(response);, +        assertHitCount(response, 1);, +    }, +, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/query/HasChildQueryBuilder.java, +        if (joinFieldMapper == null) {, +            if (ignoreUnmapped) {, +                return new MatchNoDocsQuery();, +            } else {, +                throw new QueryShardException(context, "[" + NAME + "] no join field has been configured");, +            }, +        }, +, +                throw new QueryShardException(context, "[" + NAME + "] join field [" + joinFieldMapper.name() +, +                    "] doesn't hold [" + type + "] as a child");, +                new ParentChildInnerHitContextBuilder(type, true, query, innerHitBuilder, children);, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/query/HasParentQueryBuilder.java, +        if (joinFieldMapper == null) {, +            if (ignoreUnmapped) {, +                return new MatchNoDocsQuery();, +            } else {, +                throw new QueryShardException(context, "[" + NAME + "] no join field has been configured");, +            }]