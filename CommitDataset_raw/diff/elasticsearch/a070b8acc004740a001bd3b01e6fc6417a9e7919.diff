[+++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        protected final ActionListener<Void> createShardActionListener(final Runnable onSuccess,, +            return new ActionListener<Void>() {, +                public void onResponse(Void aVoid) {, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        protected final ActionListener<Void> createShardActionListener(final Runnable onSuccess,, +            return new ActionListener<Void>() {, +                public void onResponse(Void aVoid) {, +++ b/server/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.transport.TransportRequestDeduplicator;, +    private final TransportRequestDeduplicator<FailedShardEntry> remoteFailedShardsDeduplicator = new TransportRequestDeduplicator<>();, +                                 final TransportRequest request, final ActionListener<Void> listener) {, +                        listener.onResponse(null);, +                                  @Nullable final Exception failure, ActionListener<Void> listener) {, +        remoteFailedShardsDeduplicator.executeOnce(, +            new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale), listener,, +            (req, reqListener) -> sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), req, reqListener));, +        return remoteFailedShardsDeduplicator.size();, +                                 @Nullable final Exception failure, ActionListener<Void> listener) {, +                                 ActionListener<Void> listener, final ClusterState currentState) {, +                                            TransportRequest request, ActionListener<Void> listener,, +                                            Predicate<ClusterState> changePredicate) {, +                             final ActionListener<Void> listener) {, +                             final ActionListener<Void> listener,, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        protected final ActionListener<Void> createShardActionListener(final Runnable onSuccess,, +            return new ActionListener<Void>() {, +                public void onResponse(Void aVoid) {, +++ b/server/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.transport.TransportRequestDeduplicator;, +    private final TransportRequestDeduplicator<FailedShardEntry> remoteFailedShardsDeduplicator = new TransportRequestDeduplicator<>();, +                                 final TransportRequest request, final ActionListener<Void> listener) {, +                        listener.onResponse(null);, +                                  @Nullable final Exception failure, ActionListener<Void> listener) {, +        remoteFailedShardsDeduplicator.executeOnce(, +            new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale), listener,, +            (req, reqListener) -> sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), req, reqListener));, +        return remoteFailedShardsDeduplicator.size();, +                                 @Nullable final Exception failure, ActionListener<Void> listener) {, +                                 ActionListener<Void> listener, final ClusterState currentState) {, +                                            TransportRequest request, ActionListener<Void> listener,, +                                            Predicate<ClusterState> changePredicate) {, +                             final ActionListener<Void> listener) {, +                             final ActionListener<Void> listener,, +++ b/server/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +    private static final ActionListener<Void> SHARD_STATE_ACTION_LISTENER = ActionListener.wrap(() -> {});, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        protected final ActionListener<Void> createShardActionListener(final Runnable onSuccess,, +            return new ActionListener<Void>() {, +                public void onResponse(Void aVoid) {, +++ b/server/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.transport.TransportRequestDeduplicator;, +    private final TransportRequestDeduplicator<FailedShardEntry> remoteFailedShardsDeduplicator = new TransportRequestDeduplicator<>();, +                                 final TransportRequest request, final ActionListener<Void> listener) {, +                        listener.onResponse(null);, +                                  @Nullable final Exception failure, ActionListener<Void> listener) {, +        remoteFailedShardsDeduplicator.executeOnce(, +            new FailedShardEntry(shardId, allocationId, primaryTerm, message, failure, markAsStale), listener,, +            (req, reqListener) -> sendShardAction(SHARD_FAILED_ACTION_NAME, clusterService.state(), req, reqListener));, +        return remoteFailedShardsDeduplicator.size();, +                                 @Nullable final Exception failure, ActionListener<Void> listener) {, +                                 ActionListener<Void> listener, final ClusterState currentState) {, +                                            TransportRequest request, ActionListener<Void> listener,, +                                            Predicate<ClusterState> changePredicate) {, +                             final ActionListener<Void> listener) {, +                             final ActionListener<Void> listener,, +++ b/server/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +    private static final ActionListener<Void> SHARD_STATE_ACTION_LISTENER = ActionListener.wrap(() -> {});, +++ b/server/src/main/java/org/elasticsearch/transport/TransportRequestDeduplicator.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.transport;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.ConcurrentMap;, +import java.util.function.BiConsumer;]