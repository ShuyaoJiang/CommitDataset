[+++ b/core/src/main/java/org/elasticsearch/transport/TransportService.java, +     * @throws ConnectTransportException if the connection failed, +     * @throws IllegalStateException if the handshake failed, +        } catch (ConnectTransportException | IllegalStateException e) {, +            throw new IllegalStateException("handshake failed with " + node, e);, +            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node);, +            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node);, +++ b/core/src/main/java/org/elasticsearch/transport/TransportService.java, +     * @throws ConnectTransportException if the connection failed, +     * @throws IllegalStateException if the handshake failed, +        } catch (ConnectTransportException | IllegalStateException e) {, +            throw new IllegalStateException("handshake failed with " + node, e);, +            throw new IllegalStateException("handshake failed, mismatched cluster name [" + response.clusterName + "] - " + node);, +            throw new IllegalStateException("handshake failed, incompatible version [" + response.version + "] - " + node);, +++ b/core/src/test/java/org/elasticsearch/transport/NettyTransportServiceHandshakeTests.java, +        DiscoveryNode discoveryNode = new DiscoveryNode(, +            Version.CURRENT.minimumCompatibilityVersion());, +        DiscoveryNode connectedNode =, +                handleA.transportService.connectToNodeLightAndHandshake(discoveryNode, timeout);, +        assertTrue(handleA.transportService.nodeConnected(discoveryNode));, +        DiscoveryNode discoveryNode = new DiscoveryNode(, +            Version.CURRENT.minimumCompatibilityVersion());, +        IllegalStateException ex = expectThrows(IllegalStateException.class, () -> handleA.transportService.connectToNodeLightAndHandshake(, +                discoveryNode, timeout));, +        assertThat(ex.getMessage(), containsString("handshake failed, mismatched cluster name [Cluster [b]]"));, +        assertFalse(handleA.transportService.nodeConnected(discoveryNode));, +        DiscoveryNode discoveryNode = new DiscoveryNode(, +            Version.CURRENT.minimumCompatibilityVersion());, +        IllegalStateException ex = expectThrows(IllegalStateException.class, () -> handleA.transportService.connectToNodeLightAndHandshake(, +            discoveryNode, timeout));, +        assertThat(ex.getMessage(), containsString("handshake failed, incompatible version"));, +        assertFalse(handleA.transportService.nodeConnected(discoveryNode));, +        DiscoveryNode discoveryNode = new DiscoveryNode(, +            Version.CURRENT.minimumCompatibilityVersion());, +        DiscoveryNode connectedNode = handleA.transportService.connectToNodeLightAndHandshake(discoveryNode, timeout, false);, +        assertTrue(handleA.transportService.nodeConnected(discoveryNode));]