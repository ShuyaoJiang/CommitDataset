[+++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.cluster.service.PendingClusterTask;, +import org.hamcrest.Matchers;, +import java.util.concurrent.*;, +import static org.hamcrest.Matchers.notNullValue;, +    public void waitNoPendingTasksOnAll() throws Exception {, +        assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get());, +        assertBusy(new Runnable() {, +            public void run() {, +                    assertThat("client " + client + " still has pending tasks " + pendingTasks.prettyPrint(), pendingTasks, Matchers.emptyIterable());, +        assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get());, +    public void waitNoPendingTasksOnMaster() throws Exception {, +        assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get());, +        assertBusy(new Runnable() {, +            public void run() {, +                PendingClusterTasksResponse pendingTasks = client().admin().cluster().preparePendingClusterTasks().setLocal(true).get();, +                assertThat("master still has pending tasks " + pendingTasks.prettyPrint(), pendingTasks, Matchers.emptyIterable());, +        assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get());, +    public void waitForConcreteMappingsOnAll(final String index, final String type, final String... fieldNames) throws Exception {, +        assertBusy(new Runnable() {, +            public void run() {, +                assertThat(nodes, Matchers.not(Matchers.emptyIterable()));, +                    assertThat("index service doesn't exists on " + node, indexService, notNullValue());, +                    assertThat("document mapper doesn't exists on " + node, documentMapper, notNullValue());, +                        assertThat("field " + fieldName + " doesn't exists on " + node, matches, Matchers.not(emptyIterable()));, +    public void waitForMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception {, +        assertBusy(new Callable() {, +            public Object call() throws Exception {, +                GetMappingsResponse response = client().admin().indices().prepareGetMappings(index).setTypes(type).get();, +                assertThat(mappings, notNullValue());, +                assertThat(mappingMetaData, notNullValue());, +                Map<String, Object> mappingSource = mappingMetaData.getSourceAsMap();, +                assertFalse(mappingSource.isEmpty());, +                assertTrue(mappingSource.containsKey("properties"));, +                    assertThat("field " + fieldName + " doesn't exists in mapping " + mappingMetaData.source().string(), XContentMapValues.extractValue(fieldName, mappingProperties), notNullValue());, +                return null;, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.cluster.service.PendingClusterTask;, +import org.hamcrest.Matchers;, +import java.util.concurrent.*;, +import static org.hamcrest.Matchers.notNullValue;, +    public void waitNoPendingTasksOnAll() throws Exception {, +        assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get());, +        assertBusy(new Runnable() {, +            public void run() {, +                    assertThat("client " + client + " still has pending tasks " + pendingTasks.prettyPrint(), pendingTasks, Matchers.emptyIterable());, +        assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get());, +    public void waitNoPendingTasksOnMaster() throws Exception {, +        assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get());, +        assertBusy(new Runnable() {, +            public void run() {, +                PendingClusterTasksResponse pendingTasks = client().admin().cluster().preparePendingClusterTasks().setLocal(true).get();, +                assertThat("master still has pending tasks " + pendingTasks.prettyPrint(), pendingTasks, Matchers.emptyIterable());, +        assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get());, +    public void waitForConcreteMappingsOnAll(final String index, final String type, final String... fieldNames) throws Exception {, +        assertBusy(new Runnable() {, +            public void run() {, +                assertThat(nodes, Matchers.not(Matchers.emptyIterable()));, +                    assertThat("index service doesn't exists on " + node, indexService, notNullValue());, +                    assertThat("document mapper doesn't exists on " + node, documentMapper, notNullValue());, +                        assertThat("field " + fieldName + " doesn't exists on " + node, matches, Matchers.not(emptyIterable()));, +    public void waitForMappingOnMaster(final String index, final String type, final String... fieldNames) throws Exception {, +        assertBusy(new Callable() {, +            public Object call() throws Exception {, +                GetMappingsResponse response = client().admin().indices().prepareGetMappings(index).setTypes(type).get();, +                assertThat(mappings, notNullValue());, +                assertThat(mappingMetaData, notNullValue());, +                Map<String, Object> mappingSource = mappingMetaData.getSourceAsMap();, +                assertFalse(mappingSource.isEmpty());, +                assertTrue(mappingSource.containsKey("properties"));, +                    assertThat("field " + fieldName + " doesn't exists in mapping " + mappingMetaData.source().string(), XContentMapValues.extractValue(fieldName, mappingProperties), notNullValue());, +                return null;, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchTestCase.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.Executors;, +    /**, +     * Runs the code block for 10 seconds waiting for no assertion to trip., +     */, +    public static void assertBusy(Runnable codeBlock) throws Exception {, +        assertBusy(Executors.callable(codeBlock), 10, TimeUnit.SECONDS);, +    }, +, +    public static void assertBusy(Runnable codeBlock, long maxWaitTime, TimeUnit unit) throws Exception {, +        assertBusy(Executors.callable(codeBlock), maxWaitTime, unit);, +    }, +, +    /**, +     * Runs the code block for 10 seconds waiting for no assertion to trip., +     */, +    public static <V> V assertBusy(Callable<V> codeBlock) throws Exception {, +        return assertBusy(codeBlock, 10, TimeUnit.SECONDS);, +    }, +, +    /**, +     * Runs the code block for the provided interval, waiting for no assertions to trip., +     */, +    public static <V> V assertBusy(Callable<V> codeBlock, long maxWaitTime, TimeUnit unit) throws Exception {, +        long maxTimeInMillis = TimeUnit.MILLISECONDS.convert(maxWaitTime, unit);, +        long iterations = Math.max(Math.round(Math.log10(maxTimeInMillis) / Math.log10(2)), 1);, +        long timeInMillis = 1;]