[+++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        serverBootstrap.setPipelineFactory(configureServerChannelPipelineFactory());, +    public ChannelPipelineFactory configureServerChannelPipelineFactory() {, +        return new HttpChannelPipelineFactory(this);, +    }, +    protected static class HttpChannelPipelineFactory implements ChannelPipelineFactory {, +        protected final NettyHttpServerTransport transport;, +        protected final HttpRequestHandler requestHandler;, +        public HttpChannelPipelineFactory(NettyHttpServerTransport transport) {, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        serverBootstrap.setPipelineFactory(configureServerChannelPipelineFactory());, +    public ChannelPipelineFactory configureServerChannelPipelineFactory() {, +        return new HttpChannelPipelineFactory(this);, +    }, +    protected static class HttpChannelPipelineFactory implements ChannelPipelineFactory {, +        protected final NettyHttpServerTransport transport;, +        protected final HttpRequestHandler requestHandler;, +        public HttpChannelPipelineFactory(NettyHttpServerTransport transport) {, +++ b/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java, +    protected final ESLogger logger;, +    protected final ThreadPool threadPool;, +    protected final TransportServiceAdapter transportServiceAdapter;, +    protected final NettyTransport transport;, +    protected void handleResponse(Channel channel, StreamInput buffer, final TransportResponseHandler handler) {, +    protected String handleRequest(Channel channel, StreamInput buffer, long requestId, Version version) throws IOException {, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        serverBootstrap.setPipelineFactory(configureServerChannelPipelineFactory());, +    public ChannelPipelineFactory configureServerChannelPipelineFactory() {, +        return new HttpChannelPipelineFactory(this);, +    }, +    protected static class HttpChannelPipelineFactory implements ChannelPipelineFactory {, +        protected final NettyHttpServerTransport transport;, +        protected final HttpRequestHandler requestHandler;, +        public HttpChannelPipelineFactory(NettyHttpServerTransport transport) {, +++ b/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java, +    protected final ESLogger logger;, +    protected final ThreadPool threadPool;, +    protected final TransportServiceAdapter transportServiceAdapter;, +    protected final NettyTransport transport;, +    protected void handleResponse(Channel channel, StreamInput buffer, final TransportResponseHandler handler) {, +    protected String handleRequest(Channel channel, StreamInput buffer, long requestId, Version version) throws IOException {, +++ b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +        clientBootstrap.setPipelineFactory(configureClientChannelPipelineFactory());, +        serverBootstrap.setPipelineFactory(configureServerChannelPipelineFactory());, +    public ChannelPipelineFactory configureClientChannelPipelineFactory() {, +        return new ClientChannelPipelineFactory(this);, +    }, +, +    protected static class ClientChannelPipelineFactory implements ChannelPipelineFactory {, +        protected NettyTransport nettyTransport;, +, +        public ClientChannelPipelineFactory(NettyTransport nettyTransport) {, +            this.nettyTransport = nettyTransport;, +        }, +, +        @Override, +        public ChannelPipeline getPipeline() throws Exception {, +            ChannelPipeline channelPipeline = Channels.pipeline();, +            SizeHeaderFrameDecoder sizeHeader = new SizeHeaderFrameDecoder();, +            if (nettyTransport.maxCumulationBufferCapacity != null) {, +                if (nettyTransport.maxCumulationBufferCapacity.bytes() > Integer.MAX_VALUE) {, +                    sizeHeader.setMaxCumulationBufferCapacity(Integer.MAX_VALUE);, +                } else {, +                    sizeHeader.setMaxCumulationBufferCapacity((int) nettyTransport.maxCumulationBufferCapacity.bytes());, +                }, +            }, +            if (nettyTransport.maxCompositeBufferComponents != -1) {, +                sizeHeader.setMaxCumulationBufferComponents(nettyTransport.maxCompositeBufferComponents);, +            }, +            channelPipeline.addLast("size", sizeHeader);, +            channelPipeline.addLast("dispatcher", new MessageChannelHandler(nettyTransport, nettyTransport.logger));, +            return channelPipeline;, +        }, +    }, +, +    public ChannelPipelineFactory configureServerChannelPipelineFactory() {, +        return new ServerChannelPipeFactory(this);, +    }, +, +    protected static class ServerChannelPipeFactory implements ChannelPipelineFactory {, +, +        protected NettyTransport nettyTransport;, +, +        public ServerChannelPipeFactory(NettyTransport nettyTransport) {, +            this.nettyTransport = nettyTransport;, +        }, +, +        @Override, +        public ChannelPipeline getPipeline() throws Exception {, +            ChannelPipeline channelPipeline = Channels.pipeline();, +            channelPipeline.addLast("openChannels", nettyTransport.serverOpenChannels);, +            SizeHeaderFrameDecoder sizeHeader = new SizeHeaderFrameDecoder();, +            if (nettyTransport.maxCumulationBufferCapacity != null) {, +                if (nettyTransport.maxCumulationBufferCapacity.bytes() > Integer.MAX_VALUE) {, +                    sizeHeader.setMaxCumulationBufferCapacity(Integer.MAX_VALUE);, +                } else {, +                    sizeHeader.setMaxCumulationBufferCapacity((int) nettyTransport.maxCumulationBufferCapacity.bytes());, +                }, +            }, +            if (nettyTransport.maxCompositeBufferComponents != -1) {]