[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +import org.elasticsearch.client.watcher.StartWatchServiceRequest;, +import org.elasticsearch.client.watcher.StopWatchServiceRequest;, +     * Start the watch service, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public AcknowledgedResponse startWatchService(StartWatchServiceRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(, +                request, WatcherRequestConverters::startWatchService, options, AcknowledgedResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously start the watch service, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">, +     * the docs</a> for more., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     */, +    public void startWatchServiceAsync(StartWatchServiceRequest request, RequestOptions options,, +            ActionListener<AcknowledgedResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(, +                request, WatcherRequestConverters::startWatchService, options, AcknowledgedResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +     * Stop the watch service, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public AcknowledgedResponse stopWatchService(StopWatchServiceRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(, +                request, WatcherRequestConverters::stopWatchService, options, AcknowledgedResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously stop the watch service, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     */, +    public void stopWatchServiceAsync(StopWatchServiceRequest request, RequestOptions options,, +            ActionListener<AcknowledgedResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(, +                request, WatcherRequestConverters::stopWatchService, options, AcknowledgedResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +import org.elasticsearch.client.watcher.StartWatchServiceRequest;, +import org.elasticsearch.client.watcher.StopWatchServiceRequest;, +     * Start the watch service, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public AcknowledgedResponse startWatchService(StartWatchServiceRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(, +                request, WatcherRequestConverters::startWatchService, options, AcknowledgedResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously start the watch service, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">, +     * the docs</a> for more., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     */, +    public void startWatchServiceAsync(StartWatchServiceRequest request, RequestOptions options,, +            ActionListener<AcknowledgedResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(, +                request, WatcherRequestConverters::startWatchService, options, AcknowledgedResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +     * Stop the watch service, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public AcknowledgedResponse stopWatchService(StopWatchServiceRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(, +                request, WatcherRequestConverters::stopWatchService, options, AcknowledgedResponse::fromXContent, emptySet());, +    }, +]