[+++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageTestServer.java, +, +                byte[] existingBytes = destContainer.objects.putIfAbsent(destBlobName, body);, +                if (existingBytes != null) {, +                    return newBlobAlreadyExistsError(requestId);, +                }, +, +    private static Response newBlobAlreadyExistsError(final long requestId) {, +        return newError(requestId, RestStatus.CONFLICT, "BlobAlreadyExists", "The specified blob already exists");, +    }, +, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageTestServer.java, +, +                byte[] existingBytes = destContainer.objects.putIfAbsent(destBlobName, body);, +                if (existingBytes != null) {, +                    return newBlobAlreadyExistsError(requestId);, +                }, +, +    private static Response newBlobAlreadyExistsError(final long requestId) {, +        return newError(requestId, RestStatus.CONFLICT, "BlobAlreadyExists", "The specified blob already exists");, +    }, +, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageTestServer.java, +, +                byte[] existingBytes = destContainer.objects.putIfAbsent(destBlobName, body);, +                if (existingBytes != null) {, +                    return newBlobAlreadyExistsError(requestId);, +                }, +, +    private static Response newBlobAlreadyExistsError(final long requestId) {, +        return newError(requestId, RestStatus.CONFLICT, "BlobAlreadyExists", "The specified blob already exists");, +    }, +, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +import java.nio.file.FileAlreadyExistsException;, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize) throws URISyntaxException, StorageException,, +        FileAlreadyExistsException {, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageTestServer.java, +, +                byte[] existingBytes = destContainer.objects.putIfAbsent(destBlobName, body);, +                if (existingBytes != null) {, +                    return newBlobAlreadyExistsError(requestId);, +                }, +, +    private static Response newBlobAlreadyExistsError(final long requestId) {, +        return newError(requestId, RestStatus.CONFLICT, "BlobAlreadyExists", "The specified blob already exists");, +    }, +, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +import java.nio.file.FileAlreadyExistsException;, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize) throws URISyntaxException, StorageException,, +        FileAlreadyExistsException {, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java, +import java.nio.file.FileAlreadyExistsException;, +        URISyntaxException, StorageException, FileAlreadyExistsException;, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageTestServer.java, +, +                byte[] existingBytes = destContainer.objects.putIfAbsent(destBlobName, body);, +                if (existingBytes != null) {, +                    return newBlobAlreadyExistsError(requestId);, +                }, +, +    private static Response newBlobAlreadyExistsError(final long requestId) {, +        return newError(requestId, RestStatus.CONFLICT, "BlobAlreadyExists", "The specified blob already exists");, +    }, +, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +import java.nio.file.FileAlreadyExistsException;, +    public void writeBlob(String blobName, InputStream inputStream, long blobSize) throws URISyntaxException, StorageException,, +        FileAlreadyExistsException {, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageService.java, +import java.nio.file.FileAlreadyExistsException;, +        URISyntaxException, StorageException, FileAlreadyExistsException;, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageServiceImpl.java, +import com.microsoft.azure.storage.AccessCondition;, +import com.microsoft.azure.storage.StorageErrorCodeStrings;, +import java.net.HttpURLConnection;, +import java.nio.file.FileAlreadyExistsException;, +        throws URISyntaxException, StorageException, FileAlreadyExistsException {, +        try {, +            SocketAccess.doPrivilegedVoidException(() -> blob.upload(inputStream, blobSize, AccessCondition.generateIfNotExistsCondition(),, +                null, generateOperationContext(account)));, +        } catch (StorageException se) {, +            if (se.getHttpStatusCode() == HttpURLConnection.HTTP_CONFLICT &&, +                StorageErrorCodeStrings.BLOB_ALREADY_EXISTS.equals(se.getErrorCode())) {, +                throw new FileAlreadyExistsException(blobName, null, se.getMessage());, +            }, +            throw se;, +        }, +++ b/plugins/repository-azure/qa/microsoft-azure-storage/src/test/java/org/elasticsearch/repositories/azure/AzureStorageTestServer.java, +, +                byte[] existingBytes = destContainer.objects.putIfAbsent(destBlobName, body);]