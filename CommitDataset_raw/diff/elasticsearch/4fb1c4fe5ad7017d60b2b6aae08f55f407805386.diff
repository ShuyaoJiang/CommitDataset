[+++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ /dev/null, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        clusterSettings.validateUpdate(settings);, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        clusterSettings.validateUpdate(settings);, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/BaseNodesRequest.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +    /**, +     * the list of nodesIds that will be used to resolve this request and {@link #concreteNodes}, +     * will be populated. Note that if {@link #concreteNodes} is not null, it will be used and nodeIds, +     * will be ignored., +     *, +     * See {@link DiscoveryNodes#resolveNodes} for a full description of the options., +     *, +     * TODO: once we stop using the transport client as a gateway to the cluster, we can get rid of this and resolve it to concrete nodes, +     * in the rest layer, +     **/, +    /**, +     * once {@link #nodesIds} are resolved this will contain the concrete nodes that are part of this request. If set, {@link #nodesIds}, +     * will be ignored and this will be used., +     * */, +    private DiscoveryNode[] concreteNodes;, +, +    protected BaseNodesRequest(DiscoveryNode... concreteNodes) {, +        this.nodesIds = null;, +        this.concreteNodes = concreteNodes;, +    }, +, +    public DiscoveryNode[] concreteNodes() {, +        return concreteNodes;, +    }, +, +    public void setConcreteNodes(DiscoveryNode[] concreteNodes) {, +        this.concreteNodes = concreteNodes;, +    }, +        concreteNodes = in.readOptionalArray(DiscoveryNode::new, DiscoveryNode[]::new);, +        out.writeOptionalArray(concreteNodes);, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        clusterSettings.validateUpdate(settings);, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/BaseNodesRequest.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +    /**, +     * the list of nodesIds that will be used to resolve this request and {@link #concreteNodes}, +     * will be populated. Note that if {@link #concreteNodes} is not null, it will be used and nodeIds, +     * will be ignored., +     *, +     * See {@link DiscoveryNodes#resolveNodes} for a full description of the options., +     *, +     * TODO: once we stop using the transport client as a gateway to the cluster, we can get rid of this and resolve it to concrete nodes, +     * in the rest layer, +     **/, +    /**, +     * once {@link #nodesIds} are resolved this will contain the concrete nodes that are part of this request. If set, {@link #nodesIds}, +     * will be ignored and this will be used., +     * */, +    private DiscoveryNode[] concreteNodes;, +, +    protected BaseNodesRequest(DiscoveryNode... concreteNodes) {, +        this.nodesIds = null;, +        this.concreteNodes = concreteNodes;, +    }, +, +    public DiscoveryNode[] concreteNodes() {, +        return concreteNodes;, +    }, +, +    public void setConcreteNodes(DiscoveryNode[] concreteNodes) {, +        this.concreteNodes = concreteNodes;, +    }, +        concreteNodes = in.readOptionalArray(DiscoveryNode::new, DiscoveryNode[]::new);, +        out.writeOptionalArray(concreteNodes);, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +import java.util.Arrays;, +    /**, +     * resolve node ids to concrete nodes of the incoming request, +     **/, +    protected void resolveRequest(NodesRequest request, ClusterState clusterState) {, +        assert request.concreteNodes() == null : "request concreteNodes shouldn't be set";, +        String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds());, +        request.setConcreteNodes(Arrays.stream(nodesIds).map(clusterState.nodes()::get).toArray(DiscoveryNode[]::new));, +            if (request.concreteNodes() == null) {, +                resolveRequest(request, clusterService.state());, +                assert request.concreteNodes() != null;, +            this.responses = new AtomicReferenceArray<>(request.concreteNodes().length);]