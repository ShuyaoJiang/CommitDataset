[+++ b/core/src/main/java/org/elasticsearch/script/Script.java, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.index.query.QueryParseContext;, +    public static Script parse(XContentParser parser, QueryParseContext context) {, +        try {, +            return parse(parser, context.getParseFieldMatcher(), context.getDefaultScriptLanguage());, +        } catch (IOException e) {, +            throw new ParsingException(parser.getTokenLocation(), "Error parsing [" + ScriptField.SCRIPT.getPreferredName() + "] field", e);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.index.query.QueryParseContext;, +    public static Script parse(XContentParser parser, QueryParseContext context) {, +        try {, +            return parse(parser, context.getParseFieldMatcher(), context.getDefaultScriptLanguage());, +        } catch (IOException e) {, +            throw new ParsingException(parser.getTokenLocation(), "Error parsing [" + ScriptField.SCRIPT.getPreferredName() + "] field", e);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +            builder.field(NESTED_FILTER_FIELD.getPreferredName(), nestedFilter, params);, +            builder.field(NESTED_PATH_FIELD.getPreferredName(), nestedPath);, +        PARSER.declareString(FieldSortBuilder::setNestedPath , NESTED_PATH_FIELD);, +        PARSER.declareString((b, v) -> b.order(SortOrder.fromString(v)) , ORDER_FIELD);, +        PARSER.declareString((b, v) -> b.sortMode(SortMode.fromString(v)), SORT_MODE);, +        PARSER.declareObject(FieldSortBuilder::setNestedFilter, SortBuilder::parseNestedFilter, NESTED_FILTER_FIELD);, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.index.query.QueryParseContext;, +    public static Script parse(XContentParser parser, QueryParseContext context) {, +        try {, +            return parse(parser, context.getParseFieldMatcher(), context.getDefaultScriptLanguage());, +        } catch (IOException e) {, +            throw new ParsingException(parser.getTokenLocation(), "Error parsing [" + ScriptField.SCRIPT.getPreferredName() + "] field", e);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +            builder.field(NESTED_FILTER_FIELD.getPreferredName(), nestedFilter, params);, +            builder.field(NESTED_PATH_FIELD.getPreferredName(), nestedPath);, +        PARSER.declareString(FieldSortBuilder::setNestedPath , NESTED_PATH_FIELD);, +        PARSER.declareString((b, v) -> b.order(SortOrder.fromString(v)) , ORDER_FIELD);, +        PARSER.declareString((b, v) -> b.sortMode(SortMode.fromString(v)), SORT_MODE);, +        PARSER.declareObject(FieldSortBuilder::setNestedFilter, SortBuilder::parseNestedFilter, NESTED_FILTER_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +        List<GeoPoint> localPoints = new ArrayList<>();, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.index.query.QueryParseContext;, +    public static Script parse(XContentParser parser, QueryParseContext context) {, +        try {, +            return parse(parser, context.getParseFieldMatcher(), context.getDefaultScriptLanguage());, +        } catch (IOException e) {, +            throw new ParsingException(parser.getTokenLocation(), "Error parsing [" + ScriptField.SCRIPT.getPreferredName() + "] field", e);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +            builder.field(NESTED_FILTER_FIELD.getPreferredName(), nestedFilter, params);, +            builder.field(NESTED_PATH_FIELD.getPreferredName(), nestedPath);, +        PARSER.declareString(FieldSortBuilder::setNestedPath , NESTED_PATH_FIELD);, +        PARSER.declareString((b, v) -> b.order(SortOrder.fromString(v)) , ORDER_FIELD);, +        PARSER.declareString((b, v) -> b.sortMode(SortMode.fromString(v)), SORT_MODE);, +        PARSER.declareObject(FieldSortBuilder::setNestedFilter, SortBuilder::parseNestedFilter, NESTED_FILTER_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +        List<GeoPoint> localPoints = new ArrayList<>();, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +        PARSER.declareString((builder, order) -> builder.order(SortOrder.fromString(order)), ORDER_FIELD);, +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.index.query.QueryParseContext;, +    public static Script parse(XContentParser parser, QueryParseContext context) {, +        try {, +            return parse(parser, context.getParseFieldMatcher(), context.getDefaultScriptLanguage());, +        } catch (IOException e) {, +            throw new ParsingException(parser.getTokenLocation(), "Error parsing [" + ScriptField.SCRIPT.getPreferredName() + "] field", e);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +            builder.field(NESTED_FILTER_FIELD.getPreferredName(), nestedFilter, params);, +            builder.field(NESTED_PATH_FIELD.getPreferredName(), nestedPath);, +        PARSER.declareString(FieldSortBuilder::setNestedPath , NESTED_PATH_FIELD);, +        PARSER.declareString((b, v) -> b.order(SortOrder.fromString(v)) , ORDER_FIELD);, +        PARSER.declareString((b, v) -> b.sortMode(SortMode.fromString(v)), SORT_MODE);, +        PARSER.declareObject(FieldSortBuilder::setNestedFilter, SortBuilder::parseNestedFilter, NESTED_FILTER_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +        List<GeoPoint> localPoints = new ArrayList<>();, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScoreSortBuilder.java, +        PARSER.declareString((builder, order) -> builder.order(SortOrder.fromString(order)), ORDER_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/sort/ScriptSortBuilder.java, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import org.elasticsearch.common.xcontent.ObjectParser.ValueType;, +, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;, +    private static ConstructingObjectParser<ScriptSortBuilder, QueryParseContext> PARSER = new ConstructingObjectParser<>(NAME,, +            a -> new ScriptSortBuilder((Script) a[0], (ScriptSortType) a[1]));]