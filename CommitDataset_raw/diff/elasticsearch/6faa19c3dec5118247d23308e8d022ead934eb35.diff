[+++ b/core/pom.xml, +            <id>release</id> <!-- named after the parents release profile to be activated -->, +++ b/core/pom.xml, +            <id>release</id> <!-- named after the parents release profile to be activated -->, +++ /dev/null, +++ b/core/pom.xml, +            <id>release</id> <!-- named after the parents release profile to be activated -->, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +    private transient ShardId shardIdentifier;, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.relocatingNodeId(), copy.restoreSource(), copy.primary(), copy.state(), version, copy.unassignedInfo(), true);, +                 UnassignedInfo unassignedInfo, boolean internal) {, +        return new ShardRouting(index, shardId, null, null, restoreSource, primary, ShardRoutingState.UNASSIGNED, 0, unassignedInfo, true);, +        return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo, true);, +        unassignedInfo = null; // we keep the unassigned data until the shard is started, +++ b/core/pom.xml, +            <id>release</id> <!-- named after the parents release profile to be activated -->, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +    private transient ShardId shardIdentifier;, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.relocatingNodeId(), copy.restoreSource(), copy.primary(), copy.state(), version, copy.unassignedInfo(), true);, +                 UnassignedInfo unassignedInfo, boolean internal) {, +        return new ShardRouting(index, shardId, null, null, restoreSource, primary, ShardRoutingState.UNASSIGNED, 0, unassignedInfo, true);, +        return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo, true);, +        unassignedInfo = null; // we keep the unassigned data until the shard is started, +++ /dev/null, +++ b/core/pom.xml, +            <id>release</id> <!-- named after the parents release profile to be activated -->, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +    private transient ShardId shardIdentifier;, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.relocatingNodeId(), copy.restoreSource(), copy.primary(), copy.state(), version, copy.unassignedInfo(), true);, +                 UnassignedInfo unassignedInfo, boolean internal) {, +        return new ShardRouting(index, shardId, null, null, restoreSource, primary, ShardRoutingState.UNASSIGNED, 0, unassignedInfo, true);, +        return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo, true);, +        unassignedInfo = null; // we keep the unassigned data until the shard is started, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/cluster/routing/TestShardRouting.java, +        return new ShardRouting(index, shardId, currentNodeId, null, null, primary, state, version, null, true);, +        return new ShardRouting(index, shardId, currentNodeId, relocatingNodeId, null, primary, state, version, null, true);, +        return new ShardRouting(index, shardId, currentNodeId, relocatingNodeId, restoreSource, primary, state, version, null, true);, +        return new ShardRouting(index, shardId, currentNodeId, relocatingNodeId, restoreSource, primary, state, version, unassignedInfo, true);, +++ b/core/pom.xml, +            <id>release</id> <!-- named after the parents release profile to be activated -->, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +    private transient ShardId shardIdentifier;, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.relocatingNodeId(), copy.restoreSource(), copy.primary(), copy.state(), version, copy.unassignedInfo(), true);, +                 UnassignedInfo unassignedInfo, boolean internal) {, +        return new ShardRouting(index, shardId, null, null, restoreSource, primary, ShardRoutingState.UNASSIGNED, 0, unassignedInfo, true);, +        return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo, true);, +        unassignedInfo = null; // we keep the unassigned data until the shard is started, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/cluster/routing/TestShardRouting.java, +        return new ShardRouting(index, shardId, currentNodeId, null, null, primary, state, version, null, true);, +        return new ShardRouting(index, shardId, currentNodeId, relocatingNodeId, null, primary, state, version, null, true);, +        return new ShardRouting(index, shardId, currentNodeId, relocatingNodeId, restoreSource, primary, state, version, null, true);, +        return new ShardRouting(index, shardId, currentNodeId, relocatingNodeId, restoreSource, primary, state, version, unassignedInfo, true);, +++ b/pom.xml, +        <extensions>, +            <extension>, +                <groupId>org.springframework.build</groupId>, +                <artifactId>aws-maven</artifactId>, +                <version>5.0.0.RELEASE</version>, +            </extension>, +        </extensions>, +                <forbidden.test.signatures>org.apache.lucene.util.LuceneTestCase$AwaitsFix @ Please fix all bugs before release or mark them as ignored</forbidden.test.signatures>, +            <distributionManagement>, +                <repository>, +                    <id>aws-release</id>, +                    <name>AWS Release Repository</name>, +                    <url>s3://download.elasticsearch.org/elasticsearch/release</url>, +                </repository>, +                <snapshotRepository>, +                    <id>aws-snapshot</id>, +                    <name>AWS Snapshot Repository</name>, +                    <url>s3://download.elasticsearch.org/elasticsearch/snapshot</url>, +                </snapshotRepository>, +            </distributionManagement>]