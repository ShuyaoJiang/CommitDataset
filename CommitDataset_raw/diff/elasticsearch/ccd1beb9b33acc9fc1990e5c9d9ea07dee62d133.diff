[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.index.mapper.MapperService;, +        String endpoint = updateRequest.type().equals(MapperService.SINGLE_MAPPING_NAME), +            ? endpoint(updateRequest.index(), "_update", updateRequest.id()), +            : endpoint(updateRequest.index(), updateRequest.type(), updateRequest.id(), "_update");, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.index.mapper.MapperService;, +        String endpoint = updateRequest.type().equals(MapperService.SINGLE_MAPPING_NAME), +            ? endpoint(updateRequest.index(), "_update", updateRequest.id()), +            : endpoint(updateRequest.index(), updateRequest.type(), updateRequest.id(), "_update");, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +import org.elasticsearch.rest.action.document.RestDeleteAction;, +import org.elasticsearch.rest.action.document.RestGetAction;, +import org.elasticsearch.rest.action.document.RestMultiGetAction;, +import org.elasticsearch.rest.action.document.RestUpdateAction;, +    public void testDeleteWithTypes() throws IOException {, +        String docId = "id";, +        highLevelClient().index(new IndexRequest("index", "type", docId), +            .source(Collections.singletonMap("foo", "bar")), RequestOptions.DEFAULT);, +, +        DeleteRequest deleteRequest = new DeleteRequest("index", "type", docId);, +        DeleteResponse deleteResponse = execute(deleteRequest,, +            highLevelClient()::delete,, +            highLevelClient()::deleteAsync,, +            expectWarnings(RestDeleteAction.TYPES_DEPRECATION_MESSAGE));, +, +        assertEquals("index", deleteResponse.getIndex());, +        assertEquals("type", deleteResponse.getType());, +        assertEquals(docId, deleteResponse.getId());, +        assertEquals(DocWriteResponse.Result.DELETED, deleteResponse.getResult());, +    }, +, +    public void testGetWithTypes() throws IOException {, +        String document = "{\"field\":\"value\"}";, +        IndexRequest index = new IndexRequest("index", "type", "id");, +        index.source(document, XContentType.JSON);, +        index.setRefreshPolicy(RefreshPolicy.IMMEDIATE);, +        highLevelClient().index(index, RequestOptions.DEFAULT);, +, +        GetRequest getRequest = new GetRequest("index", "type", "id");, +        GetResponse getResponse = execute(getRequest,, +            highLevelClient()::get,, +            highLevelClient()::getAsync,, +            expectWarnings(RestGetAction.TYPES_DEPRECATION_MESSAGE));, +, +        assertEquals("index", getResponse.getIndex());, +        assertEquals("type", getResponse.getType());, +        assertEquals("id", getResponse.getId());, +, +        assertTrue(getResponse.isExists());, +        assertFalse(getResponse.isSourceEmpty());, +        assertEquals(1L, getResponse.getVersion());, +        assertEquals(document, getResponse.getSourceAsString());, +    }, +, +    public void testMultiGetWithTypes() throws IOException {, +        BulkRequest bulk = new BulkRequest();, +        bulk.setRefreshPolicy(RefreshPolicy.IMMEDIATE);, +        bulk.add(new IndexRequest("index", "type", "id1"), +            .source("{\"field\":\"value1\"}", XContentType.JSON));, +        bulk.add(new IndexRequest("index", "type", "id2"), +            .source("{\"field\":\"value2\"}", XContentType.JSON));, +, +        highLevelClient().bulk(bulk, RequestOptions.DEFAULT);, +        MultiGetRequest multiGetRequest = new MultiGetRequest();, +        multiGetRequest.add("index", "id1");, +        multiGetRequest.add("index", "type", "id2");, +, +        MultiGetResponse response = execute(multiGetRequest,, +            highLevelClient()::mget,, +            highLevelClient()::mgetAsync,, +            expectWarnings(RestMultiGetAction.TYPES_DEPRECATION_MESSAGE));, +        assertEquals(2, response.getResponses().length);, +, +        GetResponse firstResponse = response.getResponses()[0].getResponse();, +        assertEquals("index", firstResponse.getIndex());, +        assertEquals("type", firstResponse.getType());, +        assertEquals("id1", firstResponse.getId());, +, +        GetResponse secondResponse = response.getResponses()[1].getResponse();, +        assertEquals("index", secondResponse.getIndex());, +        assertEquals("type", secondResponse.getType());, +        assertEquals("id2", secondResponse.getId());, +    }, +, +            UpdateRequest updateRequest = new UpdateRequest("index", "does_not_exist");, +            UpdateRequest updateRequest = new UpdateRequest("index", "id");, +            UpdateRequest updateRequestConflict = new UpdateRequest("index", "id");, +            UpdateRequest updateRequest = new UpdateRequest("index", "with_script");, +            UpdateRequest updateRequest = new UpdateRequest("index", "with_doc");, +            UpdateRequest updateRequest = new UpdateRequest("index", "noop");, +            UpdateRequest updateRequest = new UpdateRequest("index", "with_upsert");, +            UpdateRequest updateRequest = new UpdateRequest("index", "with_doc_as_upsert");, +            UpdateRequest updateRequest = new UpdateRequest("index", "with_scripted_upsert");, +                UpdateRequest updateRequest = new UpdateRequest("index", "id");, +    public void testUpdateWithTypes() throws IOException {, +        IndexRequest indexRequest = new IndexRequest("index", "type", "id");, +        indexRequest.source(singletonMap("field", "value"));, +        IndexResponse indexResponse = highLevelClient().index(indexRequest, RequestOptions.DEFAULT);, +]