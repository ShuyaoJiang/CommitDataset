[+++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                                    addMoreLikeThis(request, boolBuilder, getField.getName(), value.toString(), true);, +                    addMoreLikeThis(request, boolBuilder, fieldMapper, field, !fields.isEmpty());, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, FieldMapper fieldMapper, Field field, boolean failOnUnsupportedField) {, +        addMoreLikeThis(request, boolBuilder, field.name(), fieldMapper.value(convertField(field)).toString(), failOnUnsupportedField);, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, String fieldName, String likeText, boolean failOnUnsupportedField) {, +                .stopWords(request.stopWords()), +                .failOnUnsupportedField(failOnUnsupportedField);, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                                    addMoreLikeThis(request, boolBuilder, getField.getName(), value.toString(), true);, +                    addMoreLikeThis(request, boolBuilder, fieldMapper, field, !fields.isEmpty());, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, FieldMapper fieldMapper, Field field, boolean failOnUnsupportedField) {, +        addMoreLikeThis(request, boolBuilder, field.name(), fieldMapper.value(convertField(field)).toString(), failOnUnsupportedField);, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, String fieldName, String likeText, boolean failOnUnsupportedField) {, +                .stopWords(request.stopWords()), +                .failOnUnsupportedField(failOnUnsupportedField);, +++ b/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.analysis.NumericTokenStream;, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;, +import java.io.*;, +, +    /**, +     * Check whether the provided token stream is able to provide character, +     * terms., +     * <p>Although most analyzers generate character terms (CharTermAttribute),, +     * some token only contain binary terms (BinaryTermAttribute,, +     * CharTermAttribute being a special type of BinaryTermAttribute), such as, +     * {@link NumericTokenStream} and unsuitable for highlighting and, +     * more-like-this queries which expect character terms.</p>, +     */, +    public static boolean isCharacterTokenStream(TokenStream tokenStream) {, +        try {, +            tokenStream.addAttribute(CharTermAttribute.class);, +            return true;, +        } catch (IllegalArgumentException e) {, +            return false;, +        }, +    }, +, +    /**, +     * Check whether {@link TokenStream}s generated with <code>analyzer</code>, +     * provide with character terms., +     * @see #isCharacterTokenStream(TokenStream), +     */, +    public static boolean generatesCharacterTokenStream(Analyzer analyzer, String fieldName) throws IOException {, +        return isCharacterTokenStream(analyzer.tokenStream(fieldName, new StringReader("")));, +    }, +, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                                    addMoreLikeThis(request, boolBuilder, getField.getName(), value.toString(), true);, +                    addMoreLikeThis(request, boolBuilder, fieldMapper, field, !fields.isEmpty());, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, FieldMapper fieldMapper, Field field, boolean failOnUnsupportedField) {, +        addMoreLikeThis(request, boolBuilder, field.name(), fieldMapper.value(convertField(field)).toString(), failOnUnsupportedField);, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, String fieldName, String likeText, boolean failOnUnsupportedField) {, +                .stopWords(request.stopWords()), +                .failOnUnsupportedField(failOnUnsupportedField);, +++ b/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.analysis.NumericTokenStream;, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;, +import java.io.*;, +, +    /**, +     * Check whether the provided token stream is able to provide character, +     * terms., +     * <p>Although most analyzers generate character terms (CharTermAttribute),, +     * some token only contain binary terms (BinaryTermAttribute,, +     * CharTermAttribute being a special type of BinaryTermAttribute), such as, +     * {@link NumericTokenStream} and unsuitable for highlighting and, +     * more-like-this queries which expect character terms.</p>, +     */, +    public static boolean isCharacterTokenStream(TokenStream tokenStream) {, +        try {, +            tokenStream.addAttribute(CharTermAttribute.class);, +            return true;, +        } catch (IllegalArgumentException e) {, +            return false;, +        }, +    }, +, +    /**, +     * Check whether {@link TokenStream}s generated with <code>analyzer</code>, +     * provide with character terms., +     * @see #isCharacterTokenStream(TokenStream), +     */, +    public static boolean generatesCharacterTokenStream(Analyzer analyzer, String fieldName) throws IOException {, +        return isCharacterTokenStream(analyzer.tokenStream(fieldName, new StringReader("")));, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +            super(mapper, number, fieldType);, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                                    addMoreLikeThis(request, boolBuilder, getField.getName(), value.toString(), true);, +                    addMoreLikeThis(request, boolBuilder, fieldMapper, field, !fields.isEmpty());, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, FieldMapper fieldMapper, Field field, boolean failOnUnsupportedField) {, +        addMoreLikeThis(request, boolBuilder, field.name(), fieldMapper.value(convertField(field)).toString(), failOnUnsupportedField);, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, String fieldName, String likeText, boolean failOnUnsupportedField) {]