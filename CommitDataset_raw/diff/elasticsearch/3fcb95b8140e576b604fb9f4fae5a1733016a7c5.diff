[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("\"line_$test.start\":"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("\"line_$test.start\":"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "log4j:log4j:${project.versions.log4j}", +            provided "log4j:apache-log4j-extras:${project.versions.log4j}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("\"line_$test.start\":"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "log4j:log4j:${project.versions.log4j}", +            provided "log4j:apache-log4j-extras:${project.versions.log4j}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("\"line_$test.start\":"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "log4j:log4j:${project.versions.log4j}", +            provided "log4j:apache-log4j-extras:${project.versions.log4j}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/buildSrc/version.properties, +log4j             = 1.2.17, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("\"line_$test.start\":"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "log4j:log4j:${project.versions.log4j}", +            provided "log4j:apache-log4j-extras:${project.versions.log4j}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/buildSrc/version.properties, +log4j             = 1.2.17, +++ b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/ops/bulk/BulkBenchmarkTask.java, +import org.elasticsearch.common.logging.ESLogger;, +        private static final ESLogger logger = ESLoggerFactory.getLogger(BulkIndexer.class.getName());, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("\"line_$test.start\":"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "log4j:log4j:${project.versions.log4j}", +            provided "log4j:apache-log4j-extras:${project.versions.log4j}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/buildSrc/version.properties, +log4j             = 1.2.17, +++ b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/ops/bulk/BulkBenchmarkTask.java, +import org.elasticsearch.common.logging.ESLogger;, +        private static final ESLogger logger = ESLoggerFactory.getLogger(BulkIndexer.class.getName());, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +    private final String pathPrefix;, +               HttpHost[] hosts, String pathPrefix, FailureListener failureListener) {, +        this.pathPrefix = pathPrefix;, +        URI uri = buildUri(pathPrefix, endpoint, params);, +        // request headers override default headers, so we don't add default headers if they exist as request headers, +        final Set<String> requestNames = new HashSet<>(requestHeaders.length);, +            httpRequest.addHeader(requestHeader);, +            requestNames.add(requestHeader.getName());, +        }, +        for (Header defaultHeader : defaultHeaders) {, +            if (requestNames.contains(defaultHeader.getName()) == false) {, +                httpRequest.addHeader(defaultHeader);, +            }, +    private static URI buildUri(String pathPrefix, String path, Map<String, String> params) {, +            String fullPath;, +            if (pathPrefix != null) {, +                if (path.startsWith("/")) {, +                    fullPath = pathPrefix + path;, +                } else {, +                    fullPath = pathPrefix + "/" + path;, +                }, +            } else {, +                fullPath = path;, +            }, +, +            URIBuilder uriBuilder = new URIBuilder(fullPath);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("\"line_$test.start\":"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "log4j:log4j:${project.versions.log4j}", +            provided "log4j:apache-log4j-extras:${project.versions.log4j}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/buildSrc/version.properties, +log4j             = 1.2.17, +++ b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/ops/bulk/BulkBenchmarkTask.java, +import org.elasticsearch.common.logging.ESLogger;, +        private static final ESLogger logger = ESLoggerFactory.getLogger(BulkIndexer.class.getName());, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +    private final String pathPrefix;, +               HttpHost[] hosts, String pathPrefix, FailureListener failureListener) {, +        this.pathPrefix = pathPrefix;, +        URI uri = buildUri(pathPrefix, endpoint, params);, +        // request headers override default headers, so we don't add default headers if they exist as request headers, +        final Set<String> requestNames = new HashSet<>(requestHeaders.length);, +            httpRequest.addHeader(requestHeader);, +            requestNames.add(requestHeader.getName());, +        }, +        for (Header defaultHeader : defaultHeaders) {, +            if (requestNames.contains(defaultHeader.getName()) == false) {, +                httpRequest.addHeader(defaultHeader);, +            }]