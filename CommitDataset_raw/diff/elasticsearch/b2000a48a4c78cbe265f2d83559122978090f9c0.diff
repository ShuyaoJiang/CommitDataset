[+++ b/core/src/main/java/org/elasticsearch/snapshots/InvalidSnapshotNameException.java, +public class InvalidSnapshotNameException extends SnapshotException {, +++ b/core/src/main/java/org/elasticsearch/snapshots/InvalidSnapshotNameException.java, +public class InvalidSnapshotNameException extends SnapshotException {, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotCreationException.java, +public class SnapshotCreationException extends SnapshotException {, +++ b/core/src/main/java/org/elasticsearch/snapshots/InvalidSnapshotNameException.java, +public class InvalidSnapshotNameException extends SnapshotException {, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotCreationException.java, +public class SnapshotCreationException extends SnapshotException {, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +        validate(snapshotId);, +        validate(snapshotId);, +        validate(new SnapshotId(request.repository(), request.name()));, +    , +    private static void validate(SnapshotId snapshotId) {, +        String name = snapshotId.getSnapshot();, +        if (!Strings.hasLength(name)) {, +            throw new InvalidSnapshotNameException(snapshotId, "cannot be empty");, +        if (name.contains(" ")) {, +            throw new InvalidSnapshotNameException(snapshotId, "must not contain whitespace");, +        if (name.contains(",")) {, +            throw new InvalidSnapshotNameException(snapshotId, "must not contain ','");, +        if (name.contains("#")) {, +            throw new InvalidSnapshotNameException(snapshotId, "must not contain '#'");, +        if (name.charAt(0) == '_') {, +            throw new InvalidSnapshotNameException(snapshotId, "must not start with '_'");, +        if (!name.toLowerCase(Locale.ROOT).equals(name)) {, +            throw new InvalidSnapshotNameException(snapshotId, "must be lowercase");, +        }, +        if (!Strings.validFileName(name)) {, +            throw new InvalidSnapshotNameException(snapshotId, "must not contain the following characters " + Strings.INVALID_FILENAME_CHARS);, +        validate(snapshotId);, +        validate(snapshotId);, +        validate(snapshotId);, +++ b/core/src/main/java/org/elasticsearch/snapshots/InvalidSnapshotNameException.java, +public class InvalidSnapshotNameException extends SnapshotException {, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotCreationException.java, +public class SnapshotCreationException extends SnapshotException {, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +        validate(snapshotId);, +        validate(snapshotId);, +        validate(new SnapshotId(request.repository(), request.name()));, +    , +    private static void validate(SnapshotId snapshotId) {, +        String name = snapshotId.getSnapshot();, +        if (!Strings.hasLength(name)) {, +            throw new InvalidSnapshotNameException(snapshotId, "cannot be empty");, +        if (name.contains(" ")) {, +            throw new InvalidSnapshotNameException(snapshotId, "must not contain whitespace");, +        if (name.contains(",")) {, +            throw new InvalidSnapshotNameException(snapshotId, "must not contain ','");, +        if (name.contains("#")) {, +            throw new InvalidSnapshotNameException(snapshotId, "must not contain '#'");, +        if (name.charAt(0) == '_') {, +            throw new InvalidSnapshotNameException(snapshotId, "must not start with '_'");, +        if (!name.toLowerCase(Locale.ROOT).equals(name)) {, +            throw new InvalidSnapshotNameException(snapshotId, "must be lowercase");, +        }, +        if (!Strings.validFileName(name)) {, +            throw new InvalidSnapshotNameException(snapshotId, "must not contain the following characters " + Strings.INVALID_FILENAME_CHARS);, +        validate(snapshotId);, +        validate(snapshotId);, +        validate(snapshotId);, +++ b/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java, +, +    @Test, +    public void snapshotNameTest() throws Exception {, +, +        final Client client = client();, +, +        logger.info("-->  creating repository");, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(Settings.settingsBuilder(), +                        .put("location", randomRepoPath()), +                        .put("compress", randomBoolean()), +                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));, +, +        try {, +            client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("_foo").get();, +            fail("shouldn't be here");, +        } catch (InvalidSnapshotNameException ex) {, +            assertThat(ex.getMessage(), containsString("Invalid snapshot name"));, +        }, +, +        try {, +            client.admin().cluster().prepareCreateSnapshot("test-repo", "_foo").get();, +            fail("shouldn't be here");, +        } catch (InvalidSnapshotNameException ex) {, +            assertThat(ex.getMessage(), containsString("Invalid snapshot name"));, +        }, +, +        try {, +            client.admin().cluster().prepareDeleteSnapshot("test-repo", "_foo").get();, +            fail("shouldn't be here");, +        } catch (InvalidSnapshotNameException ex) {, +            assertThat(ex.getMessage(), containsString("Invalid snapshot name"));, +        }, +, +        try {]