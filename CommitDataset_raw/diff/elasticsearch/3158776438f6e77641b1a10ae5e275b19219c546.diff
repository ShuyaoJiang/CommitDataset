[+++ b/src/test/java/org/elasticsearch/river/RiverTests.java, +import org.elasticsearch.action.get.MultiGetItemResponse;, +import org.elasticsearch.action.get.MultiGetRequestBuilder;, +import org.elasticsearch.action.get.MultiGetResponse;, +import java.util.concurrent.CountDownLatch;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +@ClusterScope(scope = ElasticsearchIntegrationTest.Scope.SUITE), +        Thread[] riverCreators = new Thread[nbRivers];, +        final CountDownLatch latch = new CountDownLatch(nbRivers);, +        final MultiGetRequestBuilder multiGetRequestBuilder = client().prepareMultiGet();, +            riverCreators[i] = new Thread() {, +                @Override, +                public void run() {, +                    try {, +                        startRiver(riverName);, +                    } catch (Throwable t) {, +                        logger.warn("failed to register river {}", t, riverName);, +                    } finally {, +                        latch.countDown();, +            };, +            riverCreators[i].start();, +            multiGetRequestBuilder.add(RiverIndexName.Conf.DEFAULT_INDEX_NAME, riverName, "_status");, +        }, +, +        latch.await();, +, +        logger.info("-->  checking that all rivers were created");, +        assertThat(awaitBusy(new Predicate<Object>() {, +            public boolean apply(Object obj) {, +                MultiGetResponse multiGetItemResponse = multiGetRequestBuilder.get();, +                for (MultiGetItemResponse getItemResponse : multiGetItemResponse) {, +                    if (getItemResponse.isFailed() || !getItemResponse.getResponse().isExists()) {, +                        return false;, +                    }, +                }, +                return true;, +            }, +        }, 5, TimeUnit.SECONDS), equalTo(true));, +    }, +        startRiver(riverName);, +        checkRiverIsStarted(riverName);, +    }, +, +    private void startRiver(final String riverName) {, +    }, +    private void checkRiverIsStarted(final String riverName) throws InterruptedException {]