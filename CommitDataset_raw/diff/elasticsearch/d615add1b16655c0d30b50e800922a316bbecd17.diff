[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregatorFactory.java, +    public HistogramAggregatorFactory(String name, ValuesSourceConfig<Numeric> config, double interval, double offset,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregatorFactory.java, +    public HistogramAggregatorFactory(String name, ValuesSourceConfig<Numeric> config, double interval, double offset,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/AbstractPipelineAggregationBuilder.java, +import org.elasticsearch.search.aggregations.bucket.histogram.AutoDateHistogramAggregatorFactory;, +import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregatorFactory;, +import org.elasticsearch.search.aggregations.bucket.histogram.HistogramAggregatorFactory;, +    /**, +     * Validates pipeline aggregations that need sequentially ordered data., +     */, +    public static void validateSequentiallyOrderedParentAggs(AggregatorFactory<?> parent, String type, String name) {, +        if ((parent instanceof HistogramAggregatorFactory || parent instanceof DateHistogramAggregatorFactory, +                || parent instanceof AutoDateHistogramAggregatorFactory) == false) {, +            throw new IllegalStateException(, +                    type + " aggregation [" + name + "] must have a histogram, date_histogram or auto_date_histogram as parent");, +        }, +        if (parent instanceof HistogramAggregatorFactory) {, +            HistogramAggregatorFactory histoParent = (HistogramAggregatorFactory) parent;, +            if (histoParent.minDocCount() != 0) {, +                throw new IllegalStateException("parent histogram of " + type + " aggregation [" + name + "] must have min_doc_count of 0");, +            }, +        } else if (parent instanceof DateHistogramAggregatorFactory) {, +            DateHistogramAggregatorFactory histoParent = (DateHistogramAggregatorFactory) parent;, +            if (histoParent.minDocCount() != 0) {, +                throw new IllegalStateException("parent histogram of " + type + " aggregation [" + name + "] must have min_doc_count of 0");, +            }, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregatorFactory.java, +    public HistogramAggregatorFactory(String name, ValuesSourceConfig<Numeric> config, double interval, double offset,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/AbstractPipelineAggregationBuilder.java, +import org.elasticsearch.search.aggregations.bucket.histogram.AutoDateHistogramAggregatorFactory;, +import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregatorFactory;, +import org.elasticsearch.search.aggregations.bucket.histogram.HistogramAggregatorFactory;, +    /**, +     * Validates pipeline aggregations that need sequentially ordered data., +     */, +    public static void validateSequentiallyOrderedParentAggs(AggregatorFactory<?> parent, String type, String name) {, +        if ((parent instanceof HistogramAggregatorFactory || parent instanceof DateHistogramAggregatorFactory, +                || parent instanceof AutoDateHistogramAggregatorFactory) == false) {, +            throw new IllegalStateException(, +                    type + " aggregation [" + name + "] must have a histogram, date_histogram or auto_date_histogram as parent");, +        }, +        if (parent instanceof HistogramAggregatorFactory) {, +            HistogramAggregatorFactory histoParent = (HistogramAggregatorFactory) parent;, +            if (histoParent.minDocCount() != 0) {, +                throw new IllegalStateException("parent histogram of " + type + " aggregation [" + name + "] must have min_doc_count of 0");, +            }, +        } else if (parent instanceof DateHistogramAggregatorFactory) {, +            DateHistogramAggregatorFactory histoParent = (DateHistogramAggregatorFactory) parent;, +            if (histoParent.minDocCount() != 0) {, +                throw new IllegalStateException("parent histogram of " + type + " aggregation [" + name + "] must have min_doc_count of 0");, +            }, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/CumulativeSumPipelineAggregationBuilder.java, +        , +        validateSequentiallyOrderedParentAggs(parent, NAME, name);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregatorFactory.java, +    public HistogramAggregatorFactory(String name, ValuesSourceConfig<Numeric> config, double interval, double offset,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/AbstractPipelineAggregationBuilder.java, +import org.elasticsearch.search.aggregations.bucket.histogram.AutoDateHistogramAggregatorFactory;, +import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregatorFactory;, +import org.elasticsearch.search.aggregations.bucket.histogram.HistogramAggregatorFactory;, +    /**, +     * Validates pipeline aggregations that need sequentially ordered data., +     */, +    public static void validateSequentiallyOrderedParentAggs(AggregatorFactory<?> parent, String type, String name) {, +        if ((parent instanceof HistogramAggregatorFactory || parent instanceof DateHistogramAggregatorFactory, +                || parent instanceof AutoDateHistogramAggregatorFactory) == false) {, +            throw new IllegalStateException(, +                    type + " aggregation [" + name + "] must have a histogram, date_histogram or auto_date_histogram as parent");, +        }, +        if (parent instanceof HistogramAggregatorFactory) {, +            HistogramAggregatorFactory histoParent = (HistogramAggregatorFactory) parent;, +            if (histoParent.minDocCount() != 0) {, +                throw new IllegalStateException("parent histogram of " + type + " aggregation [" + name + "] must have min_doc_count of 0");, +            }, +        } else if (parent instanceof DateHistogramAggregatorFactory) {, +            DateHistogramAggregatorFactory histoParent = (DateHistogramAggregatorFactory) parent;, +            if (histoParent.minDocCount() != 0) {, +                throw new IllegalStateException("parent histogram of " + type + " aggregation [" + name + "] must have min_doc_count of 0");, +            }, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/CumulativeSumPipelineAggregationBuilder.java, +        , +        validateSequentiallyOrderedParentAggs(parent, NAME, name);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/DerivativePipelineAggregationBuilder.java, +        , +        validateSequentiallyOrderedParentAggs(parent, NAME, name);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregatorFactory.java, +    public HistogramAggregatorFactory(String name, ValuesSourceConfig<Numeric> config, double interval, double offset,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/AbstractPipelineAggregationBuilder.java, +import org.elasticsearch.search.aggregations.bucket.histogram.AutoDateHistogramAggregatorFactory;, +import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregatorFactory;]