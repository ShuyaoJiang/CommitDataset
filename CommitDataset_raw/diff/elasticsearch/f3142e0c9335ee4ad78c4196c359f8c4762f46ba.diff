[+++ b/core/src/test/java/org/elasticsearch/cluster/MockInternalClusterInfoService.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.common.transport.DummyTransportAddress;, +import org.elasticsearch.monitor.fs.FsInfo;, +import java.util.AbstractMap;, +import java.util.Collections;, +import java.util.Map;, +import java.util.Set;, +    /** Create a fake NodeStats for the given node and usage */, +    public static NodeStats makeStats(String nodeName, DiskUsage usage) {, +        FsInfo.Path[] paths = new FsInfo.Path[1];, +        FsInfo.Path path = new FsInfo.Path("/dev/null", null,, +            usage.getTotalBytes(), usage.getFreeBytes(), usage.getFreeBytes());, +        paths[0] = path;, +        FsInfo fsInfo = new FsInfo(System.currentTimeMillis(), paths);, +        return new NodeStats(new DiscoveryNode(nodeName, DummyTransportAddress.INSTANCE, Version.CURRENT),, +            System.currentTimeMillis(),, +            null, null, null, null, null,, +            fsInfo,, +            null, null, null,, +            null);, +    }, +, +        stats[0] = makeStats("node_t1", new DiskUsage("node_t1", "n1", "/dev/null", 100, 100));, +        stats[1] = makeStats("node_t2", new DiskUsage("node_t2", "n2", "/dev/null", 100, 100));, +        stats[2] = makeStats("node_t3", new DiskUsage("node_t3", "n3", "/dev/null", 100, 100));, +        stats[0] = makeStats(nodeName, newUsage);, +        stats[1] = makeStats(nodeName, newUsage);, +        stats[2] = makeStats(nodeName, newUsage);, +        return new ClusterInfo(clusterInfo.getNodeLeastAvailableDiskUsages(), clusterInfo.getNodeMostAvailableDiskUsages(), clusterInfo.shardSizes, DEV_NULL_MAP);, +    }, +, +    public static final Map<ShardRouting, String> DEV_NULL_MAP = Collections.unmodifiableMap(new StaticValueMap("/dev/null"));, +, +    // a test only map that always returns the same value no matter what key is passed, +    private static final class StaticValueMap extends AbstractMap<ShardRouting, String> {, +, +        private final String value;, +, +        private StaticValueMap(String value) {, +            this.value = value;, +        }, +, +        @Override, +        public String get(Object key) {, +            return value;, +        }, +, +        @Override, +        public Set<Entry<ShardRouting, String>> entrySet() {, +            throw new UnsupportedOperationException("this is a test-only map that only supports #get(Object key)");, +        }, +++ b/core/src/test/java/org/elasticsearch/cluster/MockInternalClusterInfoService.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.common.transport.DummyTransportAddress;, +import org.elasticsearch.monitor.fs.FsInfo;, +import java.util.AbstractMap;, +import java.util.Collections;, +import java.util.Map;, +import java.util.Set;, +    /** Create a fake NodeStats for the given node and usage */, +    public static NodeStats makeStats(String nodeName, DiskUsage usage) {, +        FsInfo.Path[] paths = new FsInfo.Path[1];, +        FsInfo.Path path = new FsInfo.Path("/dev/null", null,, +            usage.getTotalBytes(), usage.getFreeBytes(), usage.getFreeBytes());, +        paths[0] = path;, +        FsInfo fsInfo = new FsInfo(System.currentTimeMillis(), paths);, +        return new NodeStats(new DiscoveryNode(nodeName, DummyTransportAddress.INSTANCE, Version.CURRENT),, +            System.currentTimeMillis(),, +            null, null, null, null, null,, +            fsInfo,, +            null, null, null,, +            null);, +    }, +, +        stats[0] = makeStats("node_t1", new DiskUsage("node_t1", "n1", "/dev/null", 100, 100));, +        stats[1] = makeStats("node_t2", new DiskUsage("node_t2", "n2", "/dev/null", 100, 100));, +        stats[2] = makeStats("node_t3", new DiskUsage("node_t3", "n3", "/dev/null", 100, 100));, +        stats[0] = makeStats(nodeName, newUsage);, +        stats[1] = makeStats(nodeName, newUsage);, +        stats[2] = makeStats(nodeName, newUsage);, +        return new ClusterInfo(clusterInfo.getNodeLeastAvailableDiskUsages(), clusterInfo.getNodeMostAvailableDiskUsages(), clusterInfo.shardSizes, DEV_NULL_MAP);, +    }, +, +    public static final Map<ShardRouting, String> DEV_NULL_MAP = Collections.unmodifiableMap(new StaticValueMap("/dev/null"));, +, +    // a test only map that always returns the same value no matter what key is passed, +    private static final class StaticValueMap extends AbstractMap<ShardRouting, String> {, +, +        private final String value;, +, +        private StaticValueMap(String value) {, +            this.value = value;, +        }, +, +        @Override]