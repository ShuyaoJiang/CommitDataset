[+++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +            final Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +            request.setJsonEntity("{\"leader_index_patterns\":[\"*\"], \"leader_cluster\": \"leader_cluster\"}");, +                            "failure occurred while fetching cluster state for auto follow pattern \\[test_pattern\\]")) {, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +            final Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +            request.setJsonEntity("{\"leader_index_patterns\":[\"*\"], \"leader_cluster\": \"leader_cluster\"}");, +                            "failure occurred while fetching cluster state for auto follow pattern \\[test_pattern\\]")) {, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +            request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"], \"leader_cluster\": \"leader_cluster\"}");, +        Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +        request.setJsonEntity("{\"leader_index_patterns\": [\"logs-eu-*\"], \"leader_cluster\": \"leader_cluster\"}");, +        request = new Request("DELETE", "/_ccr/auto_follow/test_pattern");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +            final Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +            request.setJsonEntity("{\"leader_index_patterns\":[\"*\"], \"leader_cluster\": \"leader_cluster\"}");, +                            "failure occurred while fetching cluster state for auto follow pattern \\[test_pattern\\]")) {, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +            request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"], \"leader_cluster\": \"leader_cluster\"}");, +        Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +        request.setJsonEntity("{\"leader_index_patterns\": [\"logs-eu-*\"], \"leader_cluster\": \"leader_cluster\"}");, +        request = new Request("DELETE", "/_ccr/auto_follow/test_pattern");, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +        Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +        request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"], \"leader_cluster\": \"leader_cluster\"}");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +            final Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +            request.setJsonEntity("{\"leader_index_patterns\":[\"*\"], \"leader_cluster\": \"leader_cluster\"}");, +                            "failure occurred while fetching cluster state for auto follow pattern \\[test_pattern\\]")) {, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +            request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"], \"leader_cluster\": \"leader_cluster\"}");, +        Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +        request.setJsonEntity("{\"leader_index_patterns\": [\"logs-eu-*\"], \"leader_cluster\": \"leader_cluster\"}");, +        request = new Request("DELETE", "/_ccr/auto_follow/test_pattern");, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +        Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +        request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"], \"leader_cluster\": \"leader_cluster\"}");, +++ b/x-pack/plugin/ccr/qa/rest/src/test/resources/rest-api-spec/test/ccr/auto_follow.yml, +        name: my_pattern, +          leader_cluster: local, +        name: my_pattern, +  - match: { my_pattern.leader_cluster: 'local' }, +  - match: { my_pattern.leader_index_patterns: ['logs-*'] }, +  - match: { my_pattern.max_concurrent_read_batches: 2 }, +  - match: { my_pattern.leader_cluster: 'local' }, +  - match: { my_pattern.leader_index_patterns: ['logs-*'] }, +  - match: { my_pattern.max_concurrent_read_batches: 2 }, +        name: my_pattern, +        name: my_pattern, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +            final Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +            request.setJsonEntity("{\"leader_index_patterns\":[\"*\"], \"leader_cluster\": \"leader_cluster\"}");, +                            "failure occurred while fetching cluster state for auto follow pattern \\[test_pattern\\]")) {, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +            request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"], \"leader_cluster\": \"leader_cluster\"}");, +        Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +        request.setJsonEntity("{\"leader_index_patterns\": [\"logs-eu-*\"], \"leader_cluster\": \"leader_cluster\"}");, +        request = new Request("DELETE", "/_ccr/auto_follow/test_pattern");, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +        Request request = new Request("PUT", "/_ccr/auto_follow/test_pattern");, +        request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"], \"leader_cluster\": \"leader_cluster\"}");, +++ b/x-pack/plugin/ccr/qa/rest/src/test/resources/rest-api-spec/test/ccr/auto_follow.yml, +        name: my_pattern, +          leader_cluster: local, +        name: my_pattern, +  - match: { my_pattern.leader_cluster: 'local' }, +  - match: { my_pattern.leader_index_patterns: ['logs-*'] }, +  - match: { my_pattern.max_concurrent_read_batches: 2 }, +  - match: { my_pattern.leader_cluster: 'local' }, +  - match: { my_pattern.leader_index_patterns: ['logs-*'] }, +  - match: { my_pattern.max_concurrent_read_batches: 2 }, +        name: my_pattern, +        name: my_pattern, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +import java.util.stream.Collectors;, +                recentAutoFollowErrors.put(result.autoFollowPatternName,, +                LOGGER.warn(new ParameterizedMessage("failure occurred while fetching cluster state for auto follow pattern [{}]",, +                    result.autoFollowPatternName), result.clusterStateFetchException);, +                        recentAutoFollowErrors.put(result.autoFollowPatternName + ":" + entry.getKey().getName(),, +                        LOGGER.warn(new ParameterizedMessage("failure occurred while auto following index [{}] for auto follow " +, +                            "pattern [{}]", entry.getKey(), result.autoFollowPatternName), entry.getValue());, +                final String autoFollowPattenName = entry.getKey();, +                final String leaderCluster = autoFollowPattern.getLeaderCluster();, +                Map<String, String> headers = autoFollowMetadata.getHeaders().get(autoFollowPattenName);, +                getLeaderClusterState(headers, leaderCluster, (leaderClusterState, e) -> {, +                        final List<String> followedIndices = autoFollowMetadata.getFollowedLeaderIndexUUIDs().get(autoFollowPattenName);, +                        final List<Index> leaderIndicesToFollow = getLeaderIndicesToFollow(leaderCluster, autoFollowPattern,, +                            finalise(slot, new AutoFollowResult(autoFollowPattenName));, +                            List<Tuple<String, AutoFollowPattern>> patternsForTheSameLeaderCluster = autoFollowMetadata.getPatterns(), +                                .entrySet().stream(), +                                .filter(item -> autoFollowPattenName.equals(item.getKey()) == false), +                                .filter(item -> leaderCluster.equals(item.getValue().getLeaderCluster())), +                                .map(item -> new Tuple<>(item.getKey(), item.getValue())), +                                .collect(Collectors.toList());, +, +                            checkAutoFollowPattern(autoFollowPattenName, leaderCluster, autoFollowPattern, leaderIndicesToFollow, headers,]