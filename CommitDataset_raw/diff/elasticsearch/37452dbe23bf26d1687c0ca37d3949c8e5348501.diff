[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +import org.gradle.api.execution.TaskExecutionAdapter, +import org.gradle.api.tasks.TaskState, +        final long seed, +        final String formattedSeed, +        String maybeTestsSeed = System.getProperty("tests.seed"), +            if (maybeTestsSeed.trim().isEmpty()) {, +                throw new GradleException("explicit tests.seed cannot be empty"), +            }, +            String masterSeed = maybeTestsSeed.tokenize(':').get(0), +        } else {, +        String upgradeFromVersion = System.getProperty("tests.packaging.upgradeVersion");, +        if (upgradeFromVersion == null) {, +            List<String> availableVersions = getVersionsFile(project).readLines('UTF-8'), +            upgradeFromVersion = availableVersions[new Random(seed).nextInt(availableVersions.size())], +        Task vagrantSetUpTask = project.tasks.create('setupBats'), +                versions.setText(listVersions(project).join('\n') + '\n', 'UTF-8'), +                Set<String> actualVersions = new TreeSet<>(getVersionsFile(project).readLines('UTF-8')), +        assert project.tasks.setupBats != null, +        Task setupBats = project.tasks.setupBats, +                dependsOn vagrantCheckVersion, virtualboxCheckVersion, +            update.mustRunAfter(setupBats), +            Task packaging = project.tasks.create("vagrant${boxTask}#packagingTest", BatsOverVagrantTask) {, +                dependsOn up, setupBats, +            TaskExecutionAdapter reproduceListener = new TaskExecutionAdapter() {, +                @Override, +                void afterExecute(Task task, TaskState state) {, +                    if (state.failure != null) {, +                        println "REPRODUCE WITH: gradle ${packaging.path} " +, +                            "-Dtests.seed=${project.extensions.esvagrant.formattedTestSeed} ", +                    }, +                }, +            }, +            packaging.doFirst {, +                project.gradle.addListener(reproduceListener), +            }, +            packaging.doLast {, +                project.gradle.removeListener(reproduceListener), +            }, +, +            if (project.extensions.esvagrant.boxes.contains(box)) {, +}]