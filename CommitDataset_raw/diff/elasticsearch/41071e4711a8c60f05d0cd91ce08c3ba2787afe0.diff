[+++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +import java.util.Map;, +    public AllocatedPersistentTask(long id, String type, String action, String description, TaskId parentTask,, +                                   Map<String, String> headers) {, +        super(id, type, action, description, parentTask, headers);, +++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +import java.util.Map;, +    public AllocatedPersistentTask(long id, String type, String action, String description, TaskId parentTask,, +                                   Map<String, String> headers) {, +        super(id, type, action, description, parentTask, headers);, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksExecutor.java, +import java.util.Map;, +                                                 PersistentTask<Params> taskInProgress, Map<String, String> headers) {, +        return new AllocatedPersistentTask(id, type, action, getDescription(taskInProgress), parentTaskId, headers);, +++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +import java.util.Map;, +    public AllocatedPersistentTask(long id, String type, String action, String description, TaskId parentTask,, +                                   Map<String, String> headers) {, +        super(id, type, action, description, parentTask, headers);, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksExecutor.java, +import java.util.Map;, +                                                 PersistentTask<Params> taskInProgress, Map<String, String> headers) {, +        return new AllocatedPersistentTask(id, type, action, getDescription(taskInProgress), parentTaskId, headers);, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksNodeService.java, +            public Task createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers) {, +                return executor.createTask(id, type, action, parentTaskId, taskInProgress, headers);, +++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +import java.util.Map;, +    public AllocatedPersistentTask(long id, String type, String action, String description, TaskId parentTask,, +                                   Map<String, String> headers) {, +        super(id, type, action, description, parentTask, headers);, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksExecutor.java, +import java.util.Map;, +                                                 PersistentTask<Params> taskInProgress, Map<String, String> headers) {, +        return new AllocatedPersistentTask(id, type, action, getDescription(taskInProgress), parentTaskId, headers);, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksNodeService.java, +            public Task createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers) {, +                return executor.createTask(id, type, action, parentTaskId, taskInProgress, headers);, +++ b/server/src/test/java/org/elasticsearch/persistent/PersistentTasksNodeServiceTests.java, +import org.elasticsearch.threadpool.TestThreadPool;, +import org.junit.After;, +import org.junit.Before;, +    private ThreadPool threadPool;, +, +    @Override, +    @Before, +    public void setUp() throws Exception {, +        super.setUp();, +        threadPool = new TestThreadPool(getClass().getName());, +    }, +, +, +    @Override, +    @After, +    public void tearDown() throws Exception {, +        terminate(threadPool);, +        super.tearDown();, +    }, +, +            when(action.createTask(anyLong(), anyString(), anyString(), eq(parentId), any(), any())).thenReturn(, +                    new TestPersistentTasksPlugin.TestTask(i, "persistent", "test", "", parentId, Collections.emptyMap()));, +                registry, new TaskManager(Settings.EMPTY, threadPool, Collections.emptySet()), executor);, +        AllocatedPersistentTask nodeTask =, +                new TestPersistentTasksPlugin.TestTask(0, "persistent", "test", "", parentId, Collections.emptyMap());, +        when(action.createTask(anyLong(), anyString(), anyString(), eq(parentId), any(), any())).thenReturn(nodeTask);, +                registry, new TaskManager(Settings.EMPTY, threadPool, Collections.emptySet()), executor);, +        when(action.createTask(anyLong(), anyString(), anyString(), any(), any(), any())), +                .thenReturn(new TestPersistentTasksPlugin.TestTask(1, "persistent", "test", "", new TaskId("cluster", 1),, +                        Collections.emptyMap()));, +        TaskManager taskManager = new TaskManager(Settings.EMPTY, threadPool, Collections.emptySet());, +++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +import java.util.Map;, +    public AllocatedPersistentTask(long id, String type, String action, String description, TaskId parentTask,, +                                   Map<String, String> headers) {, +        super(id, type, action, description, parentTask, headers);, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksExecutor.java, +import java.util.Map;, +                                                 PersistentTask<Params> taskInProgress, Map<String, String> headers) {, +        return new AllocatedPersistentTask(id, type, action, getDescription(taskInProgress), parentTaskId, headers);, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksNodeService.java, +            public Task createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers) {, +                return executor.createTask(id, type, action, parentTaskId, taskInProgress, headers);, +++ b/server/src/test/java/org/elasticsearch/persistent/PersistentTasksNodeServiceTests.java, +import org.elasticsearch.threadpool.TestThreadPool;, +import org.junit.After;, +import org.junit.Before;, +    private ThreadPool threadPool;, +, +    @Override, +    @Before, +    public void setUp() throws Exception {, +        super.setUp();, +        threadPool = new TestThreadPool(getClass().getName());, +    }, +, +, +    @Override, +    @After, +    public void tearDown() throws Exception {, +        terminate(threadPool);]