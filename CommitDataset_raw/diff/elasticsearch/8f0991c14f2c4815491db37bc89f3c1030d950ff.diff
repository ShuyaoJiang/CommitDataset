[+++ b/docs/reference/setup/configuration.asciidoc, +caches and eagerly swaps out unused application memory, possibly resulting, +in the elasticsearch process being swapped. Swapping is very bad for, +performance and for node stability, so it should be avoided at all costs., +There are three options:, +, +* **Disable swap**, ++, +--, +, +The simplest option is to completely disable swap. Usually Elasticsearch, +is the only service running on a box, and its memory usage is controlled, +by the `ES_HEAP_SIZE` environment variable.  There should be no need, +to have swap enabled.  On Linux systems, you can disable swap temporarily, +by running: `sudo swapoff -a`. To disable it permanently, you will need, +to edit the `/etc/fstab` file and comment out any lines that contain the, +word `swap`., +--, +, +* **Configure `swappiness`**, ++, +--, +The second option is to ensure that the sysctl value `vm.swappiness` is set, +NOTE: From kernel version 3.5-rc1 and above, a `swappiness` of `0` will, +cause the OOM killer to kill the process instead of allowing swapping., +You will need to set `swappiness` to `1` to still allow swapping in, +emergencies., +--, +, +* **`mlockall`**, ++, +--, +The third option on Linux/Unix systems only, is to use, +try to lock the process address space into RAM, preventing any Elasticsearch, +memory from being swapped out.  This can be done, by adding this line, +to the `config/elasticsearch.yml` file:, +[source,yaml], +--------------, +bootstrap.mlockall: true, +--------------, +After starting Elasticsearch, you can see whether this setting was applied, +successfully by checking the value of `mlockall` in the output from this, +request:, +[source,sh], +--------------, +curl http://localhost:9200/_nodes/process?pretty, +--------------, +If you see that `mlockall` is `false`, then it means that the the `mlockall`, +request has failed.  The most probable reason is that the user running, +Elasticsearch doesn't have permission to lock memory.  This can be granted, +by running `ulimit -l unlimited` as `root` before starting Elasticsearch., +, +Another possible reason why `mlockall` can fail is that the temporary directory, +(usually `/tmp`) is mounted with the `noexec` option. This can be solved by, +specfying a new temp directory, by starting Elasticsearch with:, +, +[source,sh], +--------------, +./bin/elasticsearch -Djna.tmpdir=/path/to/new/dir, +--------------, +, +WARNING: `mlockall` might cause the JVM or shell session to exit if it tries, +to allocate more memory than is available!, +--]