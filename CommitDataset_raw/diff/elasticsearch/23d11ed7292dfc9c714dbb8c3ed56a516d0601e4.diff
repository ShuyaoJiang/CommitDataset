[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/LongTermsAggregator.java, +                        long value = values.valueAt(i);, +                        if (longFilter == null || longFilter.accept(value)) {, +                            bucketOrds.add(value);, +                        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/LongTermsAggregator.java, +                        long value = values.valueAt(i);, +                        if (longFilter == null || longFilter.accept(value)) {, +                            bucketOrds.add(value);, +                        }, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/LongTermsIT.java, +        testIncludeExcludeResults(1, includes, empty, new long[] { 1, 2, 3 }, new long[0]);, +        testIncludeExcludeResults(1, includes, excludes, new long[] { 1, 3 }, new long[0]);, +        testIncludeExcludeResults(1, empty, excludes, new long[] { 0, 1, 3 }, new long[0]);, +, +        testIncludeExcludeResults(0, includes, empty, new long[] { 1, 2, 3}, new long[] { 98 });, +        testIncludeExcludeResults(0, includes, excludes, new long[] { 1, 3 }, new long[] { 98 });, +        testIncludeExcludeResults(0, empty, excludes, new long[] { 0, 1, 3 }, new long[] {5, 6, 7, 8, 9, 10, 11});, +    private void testIncludeExcludeResults(int minDocCount, long[] includes, long[] excludes,, +                                           long[] expectedWithCounts, long[] expectedZeroCounts) {, +                        .collectMode(randomFrom(SubAggCollectionMode.values())), +                        .minDocCount(minDocCount)), +        assertThat(terms.getBuckets().size(), equalTo(expectedWithCounts.length + expectedZeroCounts.length));, +        for (int i = 0; i < expectedWithCounts.length; i++) {, +            Terms.Bucket bucket = terms.getBucketByKey("" + expectedWithCounts[i]);, +, +        for (int i = 0; i < expectedZeroCounts.length; i++) {, +            Terms.Bucket bucket = terms.getBucketByKey("" + expectedZeroCounts[i]);, +            assertThat(bucket, notNullValue());, +            assertThat(bucket.getDocCount(), equalTo(0L));, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/LongTermsAggregator.java, +                        long value = values.valueAt(i);, +                        if (longFilter == null || longFilter.accept(value)) {, +                            bucketOrds.add(value);, +                        }, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/LongTermsIT.java, +        testIncludeExcludeResults(1, includes, empty, new long[] { 1, 2, 3 }, new long[0]);, +        testIncludeExcludeResults(1, includes, excludes, new long[] { 1, 3 }, new long[0]);, +        testIncludeExcludeResults(1, empty, excludes, new long[] { 0, 1, 3 }, new long[0]);, +, +        testIncludeExcludeResults(0, includes, empty, new long[] { 1, 2, 3}, new long[] { 98 });, +        testIncludeExcludeResults(0, includes, excludes, new long[] { 1, 3 }, new long[] { 98 });, +        testIncludeExcludeResults(0, empty, excludes, new long[] { 0, 1, 3 }, new long[] {5, 6, 7, 8, 9, 10, 11});, +    private void testIncludeExcludeResults(int minDocCount, long[] includes, long[] excludes,, +                                           long[] expectedWithCounts, long[] expectedZeroCounts) {, +                        .collectMode(randomFrom(SubAggCollectionMode.values())), +                        .minDocCount(minDocCount)), +        assertThat(terms.getBuckets().size(), equalTo(expectedWithCounts.length + expectedZeroCounts.length));, +        for (int i = 0; i < expectedWithCounts.length; i++) {, +            Terms.Bucket bucket = terms.getBucketByKey("" + expectedWithCounts[i]);, +, +        for (int i = 0; i < expectedZeroCounts.length; i++) {, +            Terms.Bucket bucket = terms.getBucketByKey("" + expectedZeroCounts[i]);, +            assertThat(bucket, notNullValue());, +            assertThat(bucket.getDocCount(), equalTo(0L));, +        }, +++ b/docs/java-api/aggregations/metrics/scripted-metric-aggregation.asciidoc, +        .initScript(new Script("_agg['heights'] = []")), +        .mapScript(new Script("if (doc['gender'].value == \"male\") " +, +                "{ _agg.heights.add(doc['height'].value) } " +, +                "else " +, +                "{ _agg.heights.add(-1 * doc['height'].value) }"));, +ScriptedMetricAggregationBuilder aggregation =, +        AggregationBuilders, +                .initScript(new Script("_agg['heights'] = []")), +                .mapScript(new Script("if (doc['gender'].value == \"male\") " +, +                        "{ _agg.heights.add(doc['height'].value) } " +, +                        "else " +, +                        "{ _agg.heights.add(-1 * doc['height'].value) }")), +                .combineScript(new Script("heights_sum = 0; for (t in _agg.heights) { heights_sum += t }; return heights_sum"));, +ScriptedMetricAggregationBuilder aggregation =, +        AggregationBuilders, +                .initScript(new Script("_agg['heights'] = []")), +                .mapScript(new Script("if (doc['gender'].value == \"male\") " +, +                        "{ _agg.heights.add(doc['height'].value) } " +, +                        "else " +, +                        "{ _agg.heights.add(-1 * doc['height'].value) }")), +                .combineScript(new Script("heights_sum = 0; for (t in _agg.heights) { heights_sum += t }; return heights_sum")), +                .reduceScript(new Script("heights_sum = 0; for (a in _aggs) { heights_sum += a }; return heights_sum"));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/LongTermsAggregator.java, +                        long value = values.valueAt(i);, +                        if (longFilter == null || longFilter.accept(value)) {, +                            bucketOrds.add(value);, +                        }, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/LongTermsIT.java, +        testIncludeExcludeResults(1, includes, empty, new long[] { 1, 2, 3 }, new long[0]);, +        testIncludeExcludeResults(1, includes, excludes, new long[] { 1, 3 }, new long[0]);, +        testIncludeExcludeResults(1, empty, excludes, new long[] { 0, 1, 3 }, new long[0]);, +, +        testIncludeExcludeResults(0, includes, empty, new long[] { 1, 2, 3}, new long[] { 98 });, +        testIncludeExcludeResults(0, includes, excludes, new long[] { 1, 3 }, new long[] { 98 });, +        testIncludeExcludeResults(0, empty, excludes, new long[] { 0, 1, 3 }, new long[] {5, 6, 7, 8, 9, 10, 11});, +    private void testIncludeExcludeResults(int minDocCount, long[] includes, long[] excludes,, +                                           long[] expectedWithCounts, long[] expectedZeroCounts) {, +                        .collectMode(randomFrom(SubAggCollectionMode.values())), +                        .minDocCount(minDocCount)), +        assertThat(terms.getBuckets().size(), equalTo(expectedWithCounts.length + expectedZeroCounts.length));, +        for (int i = 0; i < expectedWithCounts.length; i++) {, +            Terms.Bucket bucket = terms.getBucketByKey("" + expectedWithCounts[i]);]