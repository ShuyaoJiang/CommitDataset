[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    protected ClusterBlockException checkBlock(ClusterHealthRequest request, ClusterState state) {, +        return null; // we want users to be able to call this even when there are global blocks, just to check the health (are there blocks?), +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    protected ClusterBlockException checkBlock(ClusterHealthRequest request, ClusterState state) {, +        return null; // we want users to be able to call this even when there are global blocks, just to check the health (are there blocks?), +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    protected ClusterBlockException checkBlock(NodesShutdownRequest request, ClusterState state) {, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    protected ClusterBlockException checkBlock(ClusterHealthRequest request, ClusterState state) {, +        return null; // we want users to be able to call this even when there are global blocks, just to check the health (are there blocks?), +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    protected ClusterBlockException checkBlock(NodesShutdownRequest request, ClusterState state) {, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    protected ClusterBlockException checkBlock(ClusterRerouteRequest request, ClusterState state) {, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    protected ClusterBlockException checkBlock(ClusterHealthRequest request, ClusterState state) {, +        return null; // we want users to be able to call this even when there are global blocks, just to check the health (are there blocks?), +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    protected ClusterBlockException checkBlock(NodesShutdownRequest request, ClusterState state) {, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    protected ClusterBlockException checkBlock(ClusterRerouteRequest request, ClusterState state) {, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    protected ClusterBlockException checkBlock(ClusterUpdateSettingsRequest request, ClusterState state) {, +        // allow for dedicated changes to the metadata blocks, so we don't block those to allow to "re-enable" it, +        if ((request.transientSettings().getAsMap().isEmpty() && request.persistentSettings().getAsMap().size() == 1 && request.persistentSettings().get(MetaData.SETTING_READ_ONLY) != null) ||, +                request.persistentSettings().getAsMap().isEmpty() && request.transientSettings().getAsMap().size() == 1 && request.transientSettings().get(MetaData.SETTING_READ_ONLY) != null) {, +            return null;, +        }, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA);, +    }, +, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    protected ClusterBlockException checkBlock(ClusterHealthRequest request, ClusterState state) {, +        return null; // we want users to be able to call this even when there are global blocks, just to check the health (are there blocks?), +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    protected ClusterBlockException checkBlock(NodesShutdownRequest request, ClusterState state) {, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/reroute/TransportClusterRerouteAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;]