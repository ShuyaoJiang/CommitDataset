[+++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpClient.java, +        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {, +            try (InputStream is = urlConnection.getInputStream()) {, +                Streams.copy(is, outputStream);, +            } catch (Exception e) {, +                if (urlConnection.getErrorStream() != null) {, +                    try (InputStream is = urlConnection.getErrorStream()) {, +                        Streams.copy(is, outputStream);, +                    }, +                }, +            }, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpClient.java, +        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {, +            try (InputStream is = urlConnection.getInputStream()) {, +                Streams.copy(is, outputStream);, +            } catch (Exception e) {, +                if (urlConnection.getErrorStream() != null) {, +                    try (InputStream is = urlConnection.getErrorStream()) {, +                        Streams.copy(is, outputStream);, +                    }, +                }, +            }, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpResponse.java, +        this(status, body != null && body.length > 0 ? new BytesArray(body) : null, emptyMap());, +        this(status, body != null && body.length > 0 ? new BytesArray(body) : null, headers);, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpClient.java, +        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {, +            try (InputStream is = urlConnection.getInputStream()) {, +                Streams.copy(is, outputStream);, +            } catch (Exception e) {, +                if (urlConnection.getErrorStream() != null) {, +                    try (InputStream is = urlConnection.getErrorStream()) {, +                        Streams.copy(is, outputStream);, +                    }, +                }, +            }, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpResponse.java, +        this(status, body != null && body.length > 0 ? new BytesArray(body) : null, emptyMap());, +        this(status, body != null && body.length > 0 ? new BytesArray(body) : null, headers);, +++ b/elasticsearch/x-pack/watcher/src/test/java/org/elasticsearch/watcher/support/http/HttpClientTests.java, +import com.carrotsearch.randomizedtesting.generators.RandomStrings;, +import org.elasticsearch.common.unit.TimeValue;, +        webServer = startWebServer();, +    public void testHttpResponseWithAnyStatusCodeCanReturnBody() throws Exception {, +        int statusCode = randomFrom(200, 201, 400, 401, 403, 404, 405, 409, 413, 429, 500, 503);, +        String body = RandomStrings.randomAsciiOfLength(getRandom(), 100);, +        boolean hasBody = usually();, +        MockResponse mockResponse = new MockResponse().setResponseCode(statusCode);, +        if (hasBody) {, +            mockResponse.setBody(body);, +        }, +        webServer.enqueue(mockResponse);, +                .body("body"), +                .connectionTimeout(TimeValue.timeValueMillis(500)), +                .readTimeout(TimeValue.timeValueMillis(500));, +        assertThat(response.status(), equalTo(statusCode));, +        assertThat(response.hasContent(), is(hasBody));, +        if (hasBody) {, +            assertThat(response.body().toUtf8(), is(body));, +        }, +        MockWebServer proxyServer = startWebServer();, +        MockWebServer proxyServer = startWebServer();, +    private MockWebServer startWebServer() throws IOException {, +            mockWebServer.start();, +        throw new ElasticsearchException("unable to find open port: none specified, free one should have been chosed automatically");]