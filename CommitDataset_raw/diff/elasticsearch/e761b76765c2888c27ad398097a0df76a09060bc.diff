[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/qa/ml-basic-multi-node/build.gradle, +apply plugin: 'elasticsearch.standalone-rest-test', +apply plugin: 'elasticsearch.rest-test', +, +dependencies {, +    testCompile project(path: ':x-pack:elasticsearch', configuration: 'runtime'), +}, +, +integTest {, +    cluster {, +        setting 'xpack.security.enabled', 'false', +        setting 'xpack.ml.enabled', 'true', +        numNodes = 3, +        distribution = 'zip', +        plugin ':x-pack:elasticsearch', +    }, +}, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/qa/ml-basic-multi-node/build.gradle, +apply plugin: 'elasticsearch.standalone-rest-test', +apply plugin: 'elasticsearch.rest-test', +, +dependencies {, +    testCompile project(path: ':x-pack:elasticsearch', configuration: 'runtime'), +}, +, +integTest {, +    cluster {, +        setting 'xpack.security.enabled', 'false', +        setting 'xpack.ml.enabled', 'true', +        numNodes = 3, +        distribution = 'zip', +        plugin ':x-pack:elasticsearch', +    }, +}, +++ b/qa/ml-basic-multi-node/src/test/java/org/elasticsearch/xpack/ml/integration/MlBasicMultiNodeIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.integration;, +, +import org.apache.http.entity.StringEntity;, +import org.elasticsearch.client.Response;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.test.rest.ESRestTestCase;, +import org.elasticsearch.xpack.ml.MlPlugin;, +, +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +import java.nio.charset.StandardCharsets;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import java.util.stream.Collectors;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.common.xcontent.XContentType.JSON;, +, +public class MlBasicMultiNodeIT extends ESRestTestCase {, +, +    public void testBasics() throws Exception {, +        String jobId = "foo";, +        createFarequoteJob(jobId);, +, +        try {, +            Response response = client().performRequest("post", MlPlugin.BASE_PATH + "anomaly_detectors/" + jobId + "/_open");, +            assertEquals(200, response.getStatusLine().getStatusCode());, +            assertEquals(Collections.singletonMap("opened", true), responseEntityToMap(response));, +        } catch (Exception e) {, +            Response response = client().performRequest("get", "/_cluster/nodes/hotthreads");, +            logger.warn("hot_threads:\n" + responseEntityToString(response));, +            throw e;, +        }, +, +        String postData =, +                "{\"airline\":\"AAL\",\"responsetime\":\"132.2046\",\"sourcetype\":\"farequote\",\"time\":\"1403481600\"}\n" +, +                "{\"airline\":\"JZA\",\"responsetime\":\"990.4628\",\"sourcetype\":\"farequote\",\"time\":\"1403481700\"}";, +        Response response = client().performRequest("post", MlPlugin.BASE_PATH + "anomaly_detectors/" + jobId + "/_data",, +                Collections.emptyMap(), new StringEntity(postData));, +        assertEquals(202, response.getStatusLine().getStatusCode());, +        Map<String, Object> responseBody = responseEntityToMap(response);, +        assertEquals(2, responseBody.get("processed_record_count"));, +        assertEquals(4, responseBody.get("processed_field_count"));, +        assertEquals(177, responseBody.get("input_bytes"));, +        assertEquals(6, responseBody.get("input_field_count"));, +        assertEquals(0, responseBody.get("invalid_date_count"));]