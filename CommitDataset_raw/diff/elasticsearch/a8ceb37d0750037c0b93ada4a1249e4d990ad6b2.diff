[+++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import java.util.ArrayList;, +                            * maxDoc))) {, +                List<Query> queries = new ArrayList<>(ctx.length);, +                    queries.add(query);, +                return new DisjunctionMaxQuery(queries, tieBreakerMultiplier);, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import java.util.ArrayList;, +                            * maxDoc))) {, +                List<Query> queries = new ArrayList<>(ctx.length);, +                    queries.add(query);, +                return new DisjunctionMaxQuery(queries, tieBreakerMultiplier);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +            List<Query> queries = new ArrayList<>();, +                    queries.add(applyBoost(mField, q));, +            return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import java.util.ArrayList;, +                            * maxDoc))) {, +                List<Query> queries = new ArrayList<>(ctx.length);, +                    queries.add(query);, +                return new DisjunctionMaxQuery(queries, tieBreakerMultiplier);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +            List<Query> queries = new ArrayList<>();, +                    queries.add(applyBoost(mField, q));, +            return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import java.util.ArrayList;, +                            * maxDoc))) {, +                List<Query> queries = new ArrayList<>(ctx.length);, +                    queries.add(query);, +                return new DisjunctionMaxQuery(queries, tieBreakerMultiplier);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +            List<Query> queries = new ArrayList<>();, +                    queries.add(applyBoost(mField, q));, +            return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/XMoreLikeThis.java, +        BooleanQuery.Builder bq = new BooleanQuery.Builder();, +        return bq.build();, +        BooleanQuery.Builder query = new BooleanQuery.Builder();, +        return query.build();, +    private void addToQuery(PriorityQueue<ScoreTerm> q, BooleanQuery.Builder query) {, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import java.util.ArrayList;]