[+++ b/libs/nio/src/main/java/org/elasticsearch/nio/NioGroup.java, +import java.io.Closeable;, + * An class for interfacing with java.nio. Implementations implement the underlying logic for opening, + * channels and registering them with the OS., +public interface NioGroup extends Closeable {, +     * Opens and binds a server channel to accept incoming connections., +    <S extends NioServerSocketChannel> S bindServerChannel(InetSocketAddress address, ChannelFactory<S, ?> factory) throws IOException;, +     * Opens a outgoing client channel., +    <S extends NioSocketChannel> S openChannel(InetSocketAddress address, ChannelFactory<?, S> factory) throws IOException;, +    void close() throws IOException;, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/NioGroup.java, +import java.io.Closeable;, + * An class for interfacing with java.nio. Implementations implement the underlying logic for opening, + * channels and registering them with the OS., +public interface NioGroup extends Closeable {, +     * Opens and binds a server channel to accept incoming connections., +    <S extends NioServerSocketChannel> S bindServerChannel(InetSocketAddress address, ChannelFactory<S, ?> factory) throws IOException;, +     * Opens a outgoing client channel., +    <S extends NioSocketChannel> S openChannel(InetSocketAddress address, ChannelFactory<?, S> factory) throws IOException;, +    void close() throws IOException;, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/NioSelectorGroup.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.nio;, +, +import org.elasticsearch.nio.utils.ExceptionsHelper;, +, +import java.io.IOException;, +import java.net.InetSocketAddress;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.ThreadFactory;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.function.Function;, +import java.util.function.Supplier;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +, +/**, + * The NioSelectorGroup is a group of selectors for interfacing with java nio. When it is started it will create the, + * configured number of selectors. Each selector will be running in a dedicated thread. Server connections, + * can be bound using the {@link #bindServerChannel(InetSocketAddress, ChannelFactory)} method. Client, + * connections can be opened using the {@link #openChannel(InetSocketAddress, ChannelFactory)} method., + * <p>, + * The logic specific to a particular channel is provided by the {@link ChannelFactory} passed to the method, + * when the channel is created. This is what allows an NioSelectorGroup to support different channel types., + */, +public class NioSelectorGroup implements NioGroup {, +, +, +    private final List<NioSelector> dedicatedAcceptors;, +    private final RoundRobinSupplier<NioSelector> acceptorSupplier;, +, +    private final List<NioSelector> selectors;, +    private final RoundRobinSupplier<NioSelector> selectorSupplier;, +, +    private final AtomicBoolean isOpen = new AtomicBoolean(true);, +, +    /**, +     * This will create an NioSelectorGroup with no dedicated acceptors. All server channels will be handled by the, +     * same selectors that are handling child channels., +     *, +     * @param threadFactory factory to create selector threads, +     * @param selectorCount the number of selectors to be created, +     * @param eventHandlerFunction function for creating event handlers, +     * @throws IOException occurs if there is a problem while opening a java.nio.Selector, +     */, +    public NioSelectorGroup(ThreadFactory threadFactory, int selectorCount,, +                            Function<Supplier<NioSelector>, EventHandler> eventHandlerFunction) throws IOException {, +        this(null, 0, threadFactory, selectorCount, eventHandlerFunction);, +    }, +, +    /**, +     * This will create an NioSelectorGroup with dedicated acceptors. All server channels will be handled by a group, +     * of selectors dedicated to accepting channels. These accepted channels will be handed off the, +     * non-server selectors., +     *, +     * @param acceptorThreadFactory factory to create acceptor selector threads, +     * @param dedicatedAcceptorCount the number of dedicated acceptor selectors to be created, +     * @param selectorThreadFactory factory to create non-acceptor selector threads, +     * @param selectorCount the number of non-acceptor selectors to be created, +     * @param eventHandlerFunction function for creating event handlers]