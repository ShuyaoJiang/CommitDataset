[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCache.java, +    <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException;, +    FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCache.java, +    <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException;, +    FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/none/NoneFieldDataCache.java, +    @Override public <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException {, +        return FieldData.load(type, reader, fieldName);, +    @Override public FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException {, +        return FieldData.load(type, reader, fieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCache.java, +    <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException;, +    FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/none/NoneFieldDataCache.java, +    @Override public <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException {, +        return FieldData.load(type, reader, fieldName);, +    @Override public FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException {, +        return FieldData.load(type, reader, fieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +    @Override public FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException {, +        return cache(type.fieldDataClass, reader, fieldName);, +    @Override public <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException {, +                    cache.put(reader.getFieldCacheKey(), fieldDataCache);, +                if (fieldData == null) {, +                    fieldData = FieldData.load(type, reader, fieldName);, +                    fieldData = FieldData.load(type, reader, fieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCache.java, +    <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException;, +    FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/none/NoneFieldDataCache.java, +    @Override public <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException {, +        return FieldData.load(type, reader, fieldName);, +    @Override public FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException {, +        return FieldData.load(type, reader, fieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +    @Override public FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException {, +        return cache(type.fieldDataClass, reader, fieldName);, +    @Override public <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException {, +                    cache.put(reader.getFieldCacheKey(), fieldDataCache);, +                if (fieldData == null) {, +                    fieldData = FieldData.load(type, reader, fieldName);, +                    fieldData = FieldData.load(type, reader, fieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldData.java, +    protected FieldData(String fieldName) {, +        void onValue(String value);, +    public static FieldData load(Type type, IndexReader reader, String fieldName) throws IOException {, +        return load(type.fieldDataClass, reader, fieldName);, +    public static <T extends FieldData> T load(Class<T> type, IndexReader reader, String fieldName) throws IOException {, +            return (T) StringFieldData.load(reader, fieldName);, +            return (T) IntFieldData.load(reader, fieldName);, +            return (T) LongFieldData.load(reader, fieldName);, +            return (T) FloatFieldData.load(reader, fieldName);, +            return (T) DoubleFieldData.load(reader, fieldName);, +            return (T) ShortFieldData.load(reader, fieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCache.java, +    <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException;, +    FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/none/NoneFieldDataCache.java, +    @Override public <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException {, +        return FieldData.load(type, reader, fieldName);, +    @Override public FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException {, +        return FieldData.load(type, reader, fieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +    @Override public FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException {, +        return cache(type.fieldDataClass, reader, fieldName);, +    @Override public <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException {, +                    cache.put(reader.getFieldCacheKey(), fieldDataCache);, +                if (fieldData == null) {, +                    fieldData = FieldData.load(type, reader, fieldName);, +                    fieldData = FieldData.load(type, reader, fieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldData.java, +    protected FieldData(String fieldName) {, +        void onValue(String value);, +    public static FieldData load(Type type, IndexReader reader, String fieldName) throws IOException {, +        return load(type.fieldDataClass, reader, fieldName);, +    public static <T extends FieldData> T load(Class<T> type, IndexReader reader, String fieldName) throws IOException {, +            return (T) StringFieldData.load(reader, fieldName);, +            return (T) IntFieldData.load(reader, fieldName);, +            return (T) LongFieldData.load(reader, fieldName);, +            return (T) FloatFieldData.load(reader, fieldName);, +            return (T) DoubleFieldData.load(reader, fieldName);, +            return (T) ShortFieldData.load(reader, fieldName);, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/FieldDataCache.java, +    <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException;, +    FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/none/NoneFieldDataCache.java, +    @Override public <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException {, +        return FieldData.load(type, reader, fieldName);, +    @Override public FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException {, +        return FieldData.load(type, reader, fieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +    @Override public FieldData cache(FieldData.Type type, IndexReader reader, String fieldName) throws IOException {, +        return cache(type.fieldDataClass, reader, fieldName);, +    @Override public <T extends FieldData> T cache(Class<T> type, IndexReader reader, String fieldName) throws IOException {, +                    cache.put(reader.getFieldCacheKey(), fieldDataCache);, +                if (fieldData == null) {, +                    fieldData = FieldData.load(type, reader, fieldName);, +                    fieldData = FieldData.load(type, reader, fieldName);]