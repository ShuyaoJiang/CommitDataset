[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/FacetsParseElement.java, +import org.elasticsearch.search.internal.ContextIndexSearcher;, +                String scope = ContextIndexSearcher.Scopes.MAIN;, +                            if (parser.booleanValue()) {, +                                scope = ContextIndexSearcher.Scopes.GLOBAL;, +                            }, +                        } else if ("scope".equals(facetFieldName)) {, +                            scope = parser.text();, +                context.searcher().addCollector(scope, facet);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/FacetsParseElement.java, +import org.elasticsearch.search.internal.ContextIndexSearcher;, +                String scope = ContextIndexSearcher.Scopes.MAIN;, +                            if (parser.booleanValue()) {, +                                scope = ContextIndexSearcher.Scopes.GLOBAL;, +                            }, +                        } else if ("scope".equals(facetFieldName)) {, +                            scope = parser.text();, +                context.searcher().addCollector(scope, facet);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/FacetsPhase.java, +import org.elasticsearch.search.internal.ContextIndexSearcher;, +        if (context.searcher().hasCollectors(ContextIndexSearcher.Scopes.GLOBAL)) {, +            context.searcher().processingScope(ContextIndexSearcher.Scopes.GLOBAL);, +                context.searcher().processedScope();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/FacetsParseElement.java, +import org.elasticsearch.search.internal.ContextIndexSearcher;, +                String scope = ContextIndexSearcher.Scopes.MAIN;, +                            if (parser.booleanValue()) {, +                                scope = ContextIndexSearcher.Scopes.GLOBAL;, +                            }, +                        } else if ("scope".equals(facetFieldName)) {, +                            scope = parser.text();, +                context.searcher().addCollector(scope, facet);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/FacetsPhase.java, +import org.elasticsearch.search.internal.ContextIndexSearcher;, +        if (context.searcher().hasCollectors(ContextIndexSearcher.Scopes.GLOBAL)) {, +            context.searcher().processingScope(ContextIndexSearcher.Scopes.GLOBAL);, +                context.searcher().processedScope();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +import org.elasticsearch.common.collect.Maps;, +import java.util.Map;, +    public static final class Scopes {, +        public static final String MAIN = "_main_";, +        public static final String GLOBAL = "_global_";, +        public static final String NA = "_na_";, +    }, +, +    private Map<String, List<Collector>> scopeCollectors;, +    private String processingScope;, +    public void addCollector(String scope, Collector collector) {, +        if (scopeCollectors == null) {, +            scopeCollectors = Maps.newHashMap();, +        }, +        List<Collector> collectors = scopeCollectors.get(scope);, +            scopeCollectors.put(scope, collectors);, +    public boolean hasCollectors(String scope) {, +        if (scopeCollectors == null) {, +            return false;, +        }, +        if (!scopeCollectors.containsKey(scope)) {, +            return false;, +        }, +        return !scopeCollectors.get(scope).isEmpty();, +    public void processingScope(String scope) {, +        this.processingScope = scope;, +    public void processedScope() {, +        this.processingScope = Scopes.NA;, +        if (scopeCollectors != null) {, +            List<Collector> collectors = scopeCollectors.get(processingScope);, +            if (collectors != null && !collectors.isEmpty()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/FacetsParseElement.java, +import org.elasticsearch.search.internal.ContextIndexSearcher;, +                String scope = ContextIndexSearcher.Scopes.MAIN;, +                            if (parser.booleanValue()) {, +                                scope = ContextIndexSearcher.Scopes.GLOBAL;, +                            }, +                        } else if ("scope".equals(facetFieldName)) {, +                            scope = parser.text();, +                context.searcher().addCollector(scope, facet);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/FacetsPhase.java, +import org.elasticsearch.search.internal.ContextIndexSearcher;, +        if (context.searcher().hasCollectors(ContextIndexSearcher.Scopes.GLOBAL)) {, +            context.searcher().processingScope(ContextIndexSearcher.Scopes.GLOBAL);, +                context.searcher().processedScope();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +import org.elasticsearch.common.collect.Maps;, +import java.util.Map;, +    public static final class Scopes {, +        public static final String MAIN = "_main_";, +        public static final String GLOBAL = "_global_";, +        public static final String NA = "_na_";, +    }, +, +    private Map<String, List<Collector>> scopeCollectors;, +    private String processingScope;, +    public void addCollector(String scope, Collector collector) {, +        if (scopeCollectors == null) {, +            scopeCollectors = Maps.newHashMap();, +        }, +        List<Collector> collectors = scopeCollectors.get(scope);, +            scopeCollectors.put(scope, collectors);]