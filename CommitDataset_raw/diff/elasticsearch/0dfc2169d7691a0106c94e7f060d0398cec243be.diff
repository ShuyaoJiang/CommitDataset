[+++ b/src/main/java/org/elasticsearch/common/lucene/spatial/prefix/tree/SpatialPrefixTree.java, +      if (subCells.size() == node.getSubCellsSize() && !inclParents) {, +        // A bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell., +        // Can optimize at only one of index time or query/filter time; the !inclParents, +        // condition above means we do not optimize at index time., +        node.setLeaf();, +        result.add(node);, +      } else {, +++ b/src/main/java/org/elasticsearch/common/lucene/spatial/prefix/tree/SpatialPrefixTree.java, +      if (subCells.size() == node.getSubCellsSize() && !inclParents) {, +        // A bottom level (i.e. detail level) optimization where all boxes intersect, so use parent cell., +        // Can optimize at only one of index time or query/filter time; the !inclParents, +        // condition above means we do not optimize at index time., +        node.setLeaf();, +        result.add(node);, +      } else {, +++ b/src/test/java/org/elasticsearch/test/integration/search/geo/GeoShapeIntegrationTests.java, +    public void testEdgeCases() throws Exception {, +        client.admin().indices().prepareDelete().execute().actionGet();, +, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type1"), +                .startObject("properties").startObject("location"), +                .field("type", "geo_shape"), +                .field("tree", "quadtree"), +                .endObject().endObject(), +                .endObject().endObject().string();, +        client.admin().indices().prepareCreate("test").addMapping("type1", mapping).execute().actionGet();, +        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();, +, +        client.prepareIndex("test", "type1", "blakely").setSource(jsonBuilder().startObject(), +                .field("name", "Blakely Island"), +                .startObject("location"), +                .field("type", "polygon"), +                .startArray("coordinates").startArray(), +                    .startArray().value(-122.83).value(48.57).endArray(), +                    .startArray().value(-122.77).value(48.56).endArray(), +                    .startArray().value(-122.79).value(48.53).endArray(), +                    .startArray().value(-122.83).value(48.57).endArray() // close the polygon, +                .endArray().endArray(), +                .endObject(), +                .endObject()).execute().actionGet();, +, +        client.admin().indices().prepareRefresh().execute().actionGet();, +, +        Shape query = newRectangle().topLeft(-122.88, 48.62).bottomRight(-122.82, 48.54).build();, +, +        // This search would fail if both geoshape indexing and geoshape filtering, +        // used the bottom-level optimization in SpatialPrefixTree#recursiveGetNodes., +        SearchResponse searchResponse = client.prepareSearch(), +                .setQuery(filteredQuery(matchAllQuery(),, +                        geoShapeFilter("location", query).relation(ShapeRelation.INTERSECTS))), +                .execute().actionGet();, +, +        assertThat(searchResponse.hits().getTotalHits(), equalTo(1l));, +        assertThat(searchResponse.hits().hits().length, equalTo(1));, +        assertThat(searchResponse.hits().getAt(0).id(), equalTo("blakely"));, +    }, +, +    @Test]