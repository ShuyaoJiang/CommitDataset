[+++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcPreparedStatementTests.java, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +            Math.round(floatNotInt.doubleValue())), sqle.getMessage());, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +                Math.round(floatNotInt.doubleValue())), sqle.getMessage());, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +                ((Number) doubleNotInt).longValue()), sqle.getMessage());, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcPreparedStatementTests.java, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +            Math.round(floatNotInt.doubleValue())), sqle.getMessage());, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +                Math.round(floatNotInt.doubleValue())), sqle.getMessage());, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +                ((Number) doubleNotInt).longValue()), sqle.getMessage());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/AnalysisException.java, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +        return format("line {}:{}: {}", getLineNumber(), getColumnNumber(), super.getMessage());, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcPreparedStatementTests.java, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +            Math.round(floatNotInt.doubleValue())), sqle.getMessage());, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +                Math.round(floatNotInt.doubleValue())), sqle.getMessage());, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +                ((Number) doubleNotInt).longValue()), sqle.getMessage());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/AnalysisException.java, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +        return format("line {}:{}: {}", getLineNumber(), getColumnNumber(), super.getMessage());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Cast.java, +import org.elasticsearch.xpack.sql.tree.Source;, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +                formatTemplate(format("{sql}.", "cast({},{})", fieldAsScript.template())),, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcPreparedStatementTests.java, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +            Math.round(floatNotInt.doubleValue())), sqle.getMessage());, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +                Math.round(floatNotInt.doubleValue())), sqle.getMessage());, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +                ((Number) doubleNotInt).longValue()), sqle.getMessage());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/AnalysisException.java, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +        return format("line {}:{}: {}", getLineNumber(), getColumnNumber(), super.getMessage());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Cast.java, +import org.elasticsearch.xpack.sql.tree.Source;, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +                formatTemplate(format("{sql}.", "cast({},{})", fieldAsScript.template())),, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/script/Param.java, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +        return format(null, "{{}={}}", prefix(), value);, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcPreparedStatementTests.java, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +            Math.round(floatNotInt.doubleValue())), sqle.getMessage());, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +                Math.round(floatNotInt.doubleValue())), sqle.getMessage());, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +                ((Number) doubleNotInt).longValue()), sqle.getMessage());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/AnalysisException.java, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +        return format("line {}:{}: {}", getLineNumber(), getColumnNumber(), super.getMessage());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Cast.java, +import org.elasticsearch.xpack.sql.tree.Source;, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +                formatTemplate(format("{sql}.", "cast({},{})", fieldAsScript.template())),, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/script/Param.java, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +        return format(null, "{{}={}}", prefix(), value);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/comparison/In.java, +import org.elasticsearch.xpack.sql.tree.Source;, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +            formatTemplate(format("{sql}.","in({}, {})", leftScript.template())),, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcPreparedStatementTests.java, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +            Math.round(floatNotInt.doubleValue())), sqle.getMessage());, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +                Math.round(floatNotInt.doubleValue())), sqle.getMessage());, +        assertEquals(LoggerMessageFormat.format("Numeric {} out of range",, +                ((Number) doubleNotInt).longValue()), sqle.getMessage());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/AnalysisException.java, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +        return format("line {}:{}: {}", getLineNumber(), getColumnNumber(), super.getMessage());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Cast.java, +import org.elasticsearch.xpack.sql.tree.Source;, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +                formatTemplate(format("{sql}.", "cast({},{})", fieldAsScript.template())),, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/script/Param.java, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +        return format(null, "{{}={}}", prefix(), value);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/comparison/In.java, +import org.elasticsearch.xpack.sql.tree.Source;, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +            formatTemplate(format("{sql}.","in({}, {})", leftScript.template())),, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ParsingException.java, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +        return format("line {}:{}: {}", getLineNumber(), getColumnNumber(), getErrorMessage());, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/JdbcPreparedStatementTests.java]