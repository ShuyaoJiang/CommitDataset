[+++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +import java.text.DateFormat;, +import java.text.SimpleDateFormat;, +    static final String TIMESTAMP = "timestamp";, +, +    private final Map<String, String> esMetadata;, +    private final Map<String, String> ingestMetadata;, +        this.esMetadata = new HashMap<>();, +        this.esMetadata.put(MetaData.INDEX.getFieldName(), index);, +        this.esMetadata.put(MetaData.TYPE.getFieldName(), type);, +        this.esMetadata.put(MetaData.ID.getFieldName(), id);, +            this.esMetadata.put(MetaData.ROUTING.getFieldName(), routing);, +            this.esMetadata.put(MetaData.PARENT.getFieldName(), parent);, +            this.esMetadata.put(MetaData.TIMESTAMP.getFieldName(), timestamp);, +            this.esMetadata.put(MetaData.TTL.getFieldName(), ttl);, +        this.ingestMetadata = new HashMap<>();, +        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZZ", Locale.ROOT);, +        df.setTimeZone(TimeZone.getTimeZone("UTC"));, +        this.ingestMetadata.put(TIMESTAMP, df.format(new Date()));, +    /**, +     * Copy constructor that creates a new {@link IngestDocument} which has exactly the same properties of the one provided as argument, +     */, +        this(other.esMetadata, other.source, other.ingestMetadata);, +    }, +, +    /**, +     * Constructor needed for testing that allows to create a new {@link IngestDocument} given the provided elasticsearch metadata,, +     * source and ingest metadata. This is needed because the ingest metadata will be initialized with the current timestamp at, +     * init time, which makes comparisons impossible in tests., +     */, +    public IngestDocument(Map<String, String> esMetadata, Map<String, Object> source, Map<String, String> ingestMetadata) {, +        this.esMetadata = new HashMap<>(esMetadata);, +        this.source = new HashMap<>(source);, +        this.ingestMetadata = new HashMap<>(ingestMetadata);, +    public String getEsMetadata(MetaData esMetadata) {, +        return this.esMetadata.get(esMetadata.getFieldName());, +    public Map<String, String> getEsMetadata() {, +        return Collections.unmodifiableMap(esMetadata);, +    }, +, +    public void setEsMetadata(MetaData metaData, String value) {, +        this.esMetadata.put(metaData.getFieldName(), value);, +    }, +, +    public String getIngestMetadata(String ingestMetadata) {, +        return this.ingestMetadata.get(ingestMetadata);, +    }, +, +    public Map<String, String> getIngestMetadata() {, +        return Collections.unmodifiableMap(this.ingestMetadata);, +    }, +, +    public void setIngestMetadata(String metadata, String value) {, +        this.ingestMetadata.put(metadata, value);, +                Objects.equals(esMetadata, other.esMetadata) &&, +                Objects.equals(ingestMetadata, other.ingestMetadata);, +        return Objects.hash(esMetadata, source);, +                "esMetadata=" + esMetadata +, +                ", ingestMetadata=" + ingestMetadata +, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +import java.text.DateFormat;, +import java.text.SimpleDateFormat;, +    static final String TIMESTAMP = "timestamp";, +, +    private final Map<String, String> esMetadata;, +    private final Map<String, String> ingestMetadata;, +        this.esMetadata = new HashMap<>();, +        this.esMetadata.put(MetaData.INDEX.getFieldName(), index);, +        this.esMetadata.put(MetaData.TYPE.getFieldName(), type);, +        this.esMetadata.put(MetaData.ID.getFieldName(), id);, +            this.esMetadata.put(MetaData.ROUTING.getFieldName(), routing);, +            this.esMetadata.put(MetaData.PARENT.getFieldName(), parent);, +            this.esMetadata.put(MetaData.TIMESTAMP.getFieldName(), timestamp);, +            this.esMetadata.put(MetaData.TTL.getFieldName(), ttl);, +        this.ingestMetadata = new HashMap<>();, +        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZZ", Locale.ROOT);, +        df.setTimeZone(TimeZone.getTimeZone("UTC"));, +        this.ingestMetadata.put(TIMESTAMP, df.format(new Date()));, +    /**, +     * Copy constructor that creates a new {@link IngestDocument} which has exactly the same properties of the one provided as argument, +     */, +        this(other.esMetadata, other.source, other.ingestMetadata);, +    }, +, +    /**, +     * Constructor needed for testing that allows to create a new {@link IngestDocument} given the provided elasticsearch metadata,, +     * source and ingest metadata. This is needed because the ingest metadata will be initialized with the current timestamp at, +     * init time, which makes comparisons impossible in tests., +     */, +    public IngestDocument(Map<String, String> esMetadata, Map<String, Object> source, Map<String, String> ingestMetadata) {, +        this.esMetadata = new HashMap<>(esMetadata);, +        this.source = new HashMap<>(source);, +        this.ingestMetadata = new HashMap<>(ingestMetadata);, +    public String getEsMetadata(MetaData esMetadata) {, +        return this.esMetadata.get(esMetadata.getFieldName());, +    public Map<String, String> getEsMetadata() {, +        return Collections.unmodifiableMap(esMetadata);, +    }, +, +    public void setEsMetadata(MetaData metaData, String value) {]