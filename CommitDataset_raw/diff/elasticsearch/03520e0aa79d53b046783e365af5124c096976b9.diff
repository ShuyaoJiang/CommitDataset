[+++ b/src/main/java/org/elasticsearch/shield/authc/esusers/tool/ESUsersTool.java, +            } else if (cli.getArgs().length != 1) {, +                String[] extra = Arrays.copyOfRange(cli.getArgs(), 1, cli.getArgs().length);, +                return exitCmd(ExitStatus.USAGE, terminal, "extra arguments " + Arrays.toString(extra) + " were provided. please ensure all special characters are escaped");, +            } else if (cli.getArgs().length != 1) {, +                String[] extra = Arrays.copyOfRange(cli.getArgs(), 1, cli.getArgs().length);, +                return exitCmd(ExitStatus.USAGE, terminal, "extra arguments " + Arrays.toString(extra) + " were provided. userdel only supports deleting one user at a time");, +            } else if (cli.getArgs().length != 1) {, +                String[] extra = Arrays.copyOfRange(cli.getArgs(), 1, cli.getArgs().length);, +                return exitCmd(ExitStatus.USAGE, terminal, "extra arguments " + Arrays.toString(extra) + " were provided");, +            } else if (cli.getArgs().length != 1) {, +                String[] extra = Arrays.copyOfRange(cli.getArgs(), 1, cli.getArgs().length);, +                return exitCmd(ExitStatus.USAGE, terminal, "extra arguments " + Arrays.toString(extra) + " were provided. please ensure all special characters are escaped");, +            String username = null;, +            if (cli.getArgs().length == 1) {, +                username = cli.getArgs()[0];, +            } else if (cli.getArgs().length > 1) {, +                String[] extra = Arrays.copyOfRange(cli.getArgs(), 1, cli.getArgs().length);, +                return exitCmd(ExitStatus.USAGE, terminal, "extra arguments " + Arrays.toString(extra) + " were provided. list can be used without a user or with a single user");, +            }, +++ b/src/main/java/org/elasticsearch/shield/authc/esusers/tool/ESUsersTool.java, +            } else if (cli.getArgs().length != 1) {, +                String[] extra = Arrays.copyOfRange(cli.getArgs(), 1, cli.getArgs().length);, +                return exitCmd(ExitStatus.USAGE, terminal, "extra arguments " + Arrays.toString(extra) + " were provided. please ensure all special characters are escaped");, +            } else if (cli.getArgs().length != 1) {, +                String[] extra = Arrays.copyOfRange(cli.getArgs(), 1, cli.getArgs().length);, +                return exitCmd(ExitStatus.USAGE, terminal, "extra arguments " + Arrays.toString(extra) + " were provided. userdel only supports deleting one user at a time");, +            } else if (cli.getArgs().length != 1) {, +                String[] extra = Arrays.copyOfRange(cli.getArgs(), 1, cli.getArgs().length);, +                return exitCmd(ExitStatus.USAGE, terminal, "extra arguments " + Arrays.toString(extra) + " were provided");, +            } else if (cli.getArgs().length != 1) {, +                String[] extra = Arrays.copyOfRange(cli.getArgs(), 1, cli.getArgs().length);, +                return exitCmd(ExitStatus.USAGE, terminal, "extra arguments " + Arrays.toString(extra) + " were provided. please ensure all special characters are escaped");, +            String username = null;, +            if (cli.getArgs().length == 1) {, +                username = cli.getArgs()[0];, +            } else if (cli.getArgs().length > 1) {, +                String[] extra = Arrays.copyOfRange(cli.getArgs(), 1, cli.getArgs().length);, +                return exitCmd(ExitStatus.USAGE, terminal, "extra arguments " + Arrays.toString(extra) + " were provided. list can be used without a user or with a single user");, +            }, +++ b/src/test/java/org/elasticsearch/shield/authc/esusers/tool/ESUsersToolTests.java, +    public void testUseraddExtraArgs() throws Exception {, +        ESUsersTool tool = new ESUsersTool();, +        CliTool.Command command = tool.parse("useradd", args("username -p changeme -r r1,r2,r3 r4 r6"));, +        assertThat(command, instanceOf(CliTool.Command.Exit.class));, +        CliTool.Command.Exit exit = (CliTool.Command.Exit) command;, +        assertThat(exit.status(), is(CliTool.ExitStatus.USAGE));, +    }, +, +    @Test, +    public void testUserdel_Parse_ExtraArgs() throws Exception {, +        ESUsersTool tool = new ESUsersTool();, +        CliTool.Command command = tool.parse("userdel", args("user1 user2"));, +        assertThat(command, instanceOf(ESUsersTool.Command.Exit.class));, +        ESUsersTool.Command.Exit exit = (ESUsersTool.Command.Exit) command;, +        assertThat(exit.status(), equalTo(CliTool.ExitStatus.USAGE));, +    }, +, +    @Test, +    public void testPasswd_Parse_ExtraArgs() throws Exception {, +        ESUsersTool tool = new ESUsersTool();, +        CliTool.Command command = tool.parse("passwd", args("user1 user2 -p changeme"));, +        assertThat(command, instanceOf(ESUsersTool.Command.Exit.class));, +        ESUsersTool.Command.Exit cmd = (ESUsersTool.Command.Exit) command;, +        assertThat(cmd.status(), is(CliTool.ExitStatus.USAGE));, +    }, +, +    @Test, +    public void testRoles_Parse_ExtraArgs() throws Exception {, +        ESUsersTool tool = new ESUsersTool();, +        CliTool.Command command = tool.parse("roles", args("someuser -a test1,test2,test3 foo -r test4,test5,test6 bar"));, +        assertThat(command, instanceOf(ESUsersTool.Command.Exit.class));, +        ESUsersTool.Command.Exit cmd = (ESUsersTool.Command.Exit) command;, +        assertThat(cmd.status(), is(CliTool.ExitStatus.USAGE));, +    }, +, +    @Test, +    public void testListUsersAndRoles_Cmd_parsingExtraArgs() throws Exception {, +        ESUsersTool tool = new ESUsersTool();, +        CliTool.Command command = tool.parse("list", args("someuser two"));, +        assertThat(command, instanceOf(ESUsersTool.Command.Exit.class));, +        ESUsersTool.Command.Exit cmd = (ESUsersTool.Command.Exit) command;, +        assertThat(cmd.status(), is(CliTool.ExitStatus.USAGE));, +    }, +, +    @Test]