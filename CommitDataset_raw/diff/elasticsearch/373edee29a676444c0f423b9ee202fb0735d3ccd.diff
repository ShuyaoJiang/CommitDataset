[+++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/context/ContextMappings.java, +            List<String> keys = new ArrayList<>(contextNameMap.keySet());, +            Collections.sort(keys);, +            throw new IllegalArgumentException("Unknown context name [" + name + "], must be one of " + keys.toString());, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/context/ContextMappings.java, +            List<String> keys = new ArrayList<>(contextNameMap.keySet());, +            Collections.sort(keys);, +            throw new IllegalArgumentException("Unknown context name [" + name + "], must be one of " + keys.toString());, +++ b/core/src/test/java/org/elasticsearch/search/suggest/completion/CategoryContextMappingTests.java, +import org.elasticsearch.index.mapper.CompletionFieldMapper.CompletionFieldType;, +    public void testUnknownQueryContextParsing() throws Exception {, +        String mapping = jsonBuilder().startObject().startObject("type1"), +                .startObject("properties").startObject("completion"), +                .field("type", "completion"), +                .startArray("contexts"), +                .startObject(), +                .field("name", "ctx"), +                .field("type", "category"), +                .endObject(), +                .startObject(), +                .field("name", "type"), +                .field("type", "category"), +                .endObject(), +                .endArray(), +                .endObject().endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser().parse("type1", new CompressedXContent(mapping));, +        FieldMapper fieldMapper = defaultMapper.mappers().getMapper("completion");, +        CompletionFieldType completionFieldType = (CompletionFieldType) fieldMapper.fieldType();, +        , +        Exception e = expectThrows(IllegalArgumentException.class, () -> completionFieldType.getContextMappings().get("brand"));, +        assertEquals("Unknown context name [brand], must be one of [ctx, type]", e.getMessage());, +    }, +]