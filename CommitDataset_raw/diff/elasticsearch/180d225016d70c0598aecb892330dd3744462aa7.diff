[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/EmbeddedPercolatorBenchmarkTest.java, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.index.percolator.PercolatorExecutor;, +                new AbstractModule() {, +                    @Override protected void configure() {, +                        bind(PercolatorExecutor.class).asEagerSingleton();, +                    }, +                }, +        final PercolatorExecutor percolatorExecutor = injector.getInstance(PercolatorExecutor.class);, +        XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startObject("doc").startObject("type1"), +                .endObject().endObject().endObject();, +        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.Request(source));, +            percolatorExecutor.addQuery("test" + i, termQuery("field3", "quick"));, +            percolate = percolatorExecutor.percolate(new PercolatorExecutor.Request(source));, +                        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.Request(source));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/EmbeddedPercolatorBenchmarkTest.java, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.index.percolator.PercolatorExecutor;, +                new AbstractModule() {, +                    @Override protected void configure() {, +                        bind(PercolatorExecutor.class).asEagerSingleton();, +                    }, +                }, +        final PercolatorExecutor percolatorExecutor = injector.getInstance(PercolatorExecutor.class);, +        XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startObject("doc").startObject("type1"), +                .endObject().endObject().endObject();, +        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.Request(source));, +            percolatorExecutor.addQuery("test" + i, termQuery("field3", "quick"));, +            percolate = percolatorExecutor.percolate(new PercolatorExecutor.Request(source));, +                        PercolatorExecutor.Response percolate = percolatorExecutor.percolate(new PercolatorExecutor.Request(source));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/SinglePercolatorStressBenchmark.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.benchmark.percolator;, +, +import org.elasticsearch.action.percolate.PercolateResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.StopWatch;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.node.Node;, +, +import java.io.IOException;, +import java.util.concurrent.TimeUnit;, +, +import static org.elasticsearch.client.Requests.*;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.*;, +import static org.elasticsearch.common.settings.ImmutableSettings.*;, +import static org.elasticsearch.common.xcontent.XContentFactory.*;, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +import static org.elasticsearch.node.NodeBuilder.*;, +, +/**, + * @author kimchy (shay.banon), + */, +public class SinglePercolatorStressBenchmark {, +, +    public static void main(String[] args) throws Exception {, +        Settings settings = settingsBuilder(), +                .put("cluster.routing.schedule", 200, TimeUnit.MILLISECONDS), +                .put("gateway.type", "none"), +                .put(SETTING_NUMBER_OF_SHARDS, 2), +                .put(SETTING_NUMBER_OF_REPLICAS, 1), +                .build();, +, +        Node[] nodes = new Node[2];, +        for (int i = 0; i < nodes.length; i++) {, +            nodes[i] = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "node" + i)).node();, +        }, +, +        Node client = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "client")).client(true).node();, +, +        Client client1 = client.client();, +, +        client1.admin().indices().create(createIndexRequest("test")).actionGet();, +        Thread.sleep(1000);, +, +        int COUNT = 200000;, +        int QUERIES = 10;, +        // register queries, +        for (int i = 0; i < QUERIES; i++) {, +            client1.prepareIndex("_percolator", "test", Integer.toString(i)), +                    .setSource(jsonBuilder().startObject()]