[+++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexOrdinalsFieldData.java, +import org.apache.lucene.index.MultiDocValues;, +    /**, +     * Returns the underlying {@link MultiDocValues.OrdinalMap} for this fielddata, +     * or null if global ordinals are not needed (constant value or single segment)., +     */, +    MultiDocValues.OrdinalMap getOrdinalMap();, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexOrdinalsFieldData.java, +import org.apache.lucene.index.MultiDocValues;, +    /**, +     * Returns the underlying {@link MultiDocValues.OrdinalMap} for this fielddata, +     * or null if global ordinals are not needed (constant value or single segment)., +     */, +    MultiDocValues.OrdinalMap getOrdinalMap();, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexOrdinalsFieldData.java, +import org.apache.lucene.index.MultiDocValues;, +    /**, +     * Returns the underlying {@link MultiDocValues.OrdinalMap} for this fielddata, +     * or null if global ordinals are not needed (constant value or single segment)., +     */, +    MultiDocValues.OrdinalMap getOrdinalMap();, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/UidIndexFieldData.java, +import org.apache.lucene.index.MultiDocValues;, +    @Override, +    public MultiDocValues.OrdinalMap getOrdinalMap() {, +        return idFieldData.getOrdinalMap();, +    }, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexOrdinalsFieldData.java, +import org.apache.lucene.index.MultiDocValues;, +    /**, +     * Returns the underlying {@link MultiDocValues.OrdinalMap} for this fielddata, +     * or null if global ordinals are not needed (constant value or single segment)., +     */, +    MultiDocValues.OrdinalMap getOrdinalMap();, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/UidIndexFieldData.java, +import org.apache.lucene.index.MultiDocValues;, +    @Override, +    public MultiDocValues.OrdinalMap getOrdinalMap() {, +        return idFieldData.getOrdinalMap();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsBuilder.java, +        return new GlobalOrdinalsIndexFieldData(indexSettings, indexFieldData.getFieldName(),, +        return new GlobalOrdinalsIndexFieldData(indexSettings, indexFieldData.getFieldName(),, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexOrdinalsFieldData.java, +import org.apache.lucene.index.MultiDocValues;, +    /**, +     * Returns the underlying {@link MultiDocValues.OrdinalMap} for this fielddata, +     * or null if global ordinals are not needed (constant value or single segment)., +     */, +    MultiDocValues.OrdinalMap getOrdinalMap();, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/UidIndexFieldData.java, +import org.apache.lucene.index.MultiDocValues;, +    @Override, +    public MultiDocValues.OrdinalMap getOrdinalMap() {, +        return idFieldData.getOrdinalMap();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsBuilder.java, +        return new GlobalOrdinalsIndexFieldData(indexSettings, indexFieldData.getFieldName(),, +        return new GlobalOrdinalsIndexFieldData(indexSettings, indexFieldData.getFieldName(),, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsIndexFieldData.java, +import org.apache.lucene.index.MultiDocValues;, +import org.apache.lucene.index.SortedSetDocValues;, +import org.elasticsearch.index.fielddata.ScriptDocValues;, +import org.elasticsearch.index.fielddata.plain.AbstractAtomicOrdinalsFieldData;, +import java.util.function.Function;, +public class GlobalOrdinalsIndexFieldData extends AbstractIndexComponent implements IndexOrdinalsFieldData, Accountable {, +    private final MultiDocValues.OrdinalMap ordinalMap;, +    private final Atomic[] atomicReaders;, +    private final Function<SortedSetDocValues, ScriptDocValues<?>> scriptFunction;, +, +, +    protected GlobalOrdinalsIndexFieldData(IndexSettings indexSettings, String fieldName, AtomicOrdinalsFieldData[] segmentAfd,, +                                           MultiDocValues.OrdinalMap ordinalMap, long memorySizeInBytes, Function<SortedSetDocValues,, +                                           ScriptDocValues<?>> scriptFunction) {, +        this.ordinalMap = ordinalMap;, +        this.atomicReaders = new Atomic[segmentAfd.length];, +        for (int i = 0; i < segmentAfd.length; i++) {, +            atomicReaders[i] = new Atomic(segmentAfd[i], ordinalMap, i);, +        }, +        this.scriptFunction = scriptFunction;, +, +    @Override, +    public AtomicOrdinalsFieldData load(LeafReaderContext context) {, +        return atomicReaders[context.ord];, +    }, +, +    @Override]