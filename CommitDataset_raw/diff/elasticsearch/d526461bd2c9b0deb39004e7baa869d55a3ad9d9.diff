[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningTemplateRegistry.java, +    public static final String [] TEMPLATE_NAMES = new String [] {Auditor.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningTemplateRegistry.java, +    public static final String [] TEMPLATE_NAMES = new String [] {Auditor.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/SecurityClusterClientYamlTestCase.java, +        waitForSecurity();, +    }, +, +    public static void waitForSecurity() throws Exception {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningTemplateRegistry.java, +    public static final String [] TEMPLATE_NAMES = new String [] {Auditor.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/SecurityClusterClientYamlTestCase.java, +        waitForSecurity();, +    }, +, +    public static void waitForSecurity() throws Exception {, +++ b/plugin/src/test/java/org/elasticsearch/xpack/test/rest/XPackRestTestCase.java, +import org.apache.http.util.EntityUtils;, +import org.elasticsearch.Version;, +import org.elasticsearch.client.ResponseException;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.xpack.ml.MachineLearningTemplateRegistry;, +import java.io.IOException;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicReference;, +, +import static java.util.Collections.singletonMap;, +, +    /**, +     * Waits for the Machine Learning templates to be created by {@link MachineLearningTemplateRegistry}., +     */, +    public static void waitForMlTemplates() throws InterruptedException {, +        AtomicReference<Version> masterNodeVersion = new AtomicReference<>();, +        awaitBusy(() -> {, +            String response;, +            try {, +                response = EntityUtils, +                        .toString(client().performRequest("GET", "/_cat/nodes", singletonMap("h", "master,version")).getEntity());, +            } catch (IOException e) {, +                throw new RuntimeException(e);, +            }, +            for (String line : response.split("\n")) {, +                if (line.startsWith("*")) {, +                    masterNodeVersion.set(Version.fromString(line.substring(2).trim()));, +                    return true;, +                }, +            }, +            return false;, +        });, +, +        for (String template : MachineLearningTemplateRegistry.TEMPLATE_NAMES) {, +            awaitBusy(() -> {, +                Map<?, ?> response;, +                try {, +                    String string = EntityUtils.toString(client().performRequest("GET", "/_template/" + template).getEntity());, +                    response = XContentHelper.convertToMap(JsonXContent.jsonXContent, string, false);, +                } catch (ResponseException e) {, +                    if (e.getResponse().getStatusLine().getStatusCode() == 404) {, +                        return false;, +                    }, +                    throw new RuntimeException(e);, +                } catch (IOException e) {, +                    throw new RuntimeException(e);, +                }, +                Map<?, ?> templateDefinition = (Map<?, ?>) response.get(template);, +                return Version.fromId((Integer) templateDefinition.get("version")).equals(masterNodeVersion.get());, +            });, +        }, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningTemplateRegistry.java, +    public static final String [] TEMPLATE_NAMES = new String [] {Auditor.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/SecurityClusterClientYamlTestCase.java, +        waitForSecurity();, +    }, +, +    public static void waitForSecurity() throws Exception {, +++ b/plugin/src/test/java/org/elasticsearch/xpack/test/rest/XPackRestTestCase.java, +import org.apache.http.util.EntityUtils;, +import org.elasticsearch.Version;, +import org.elasticsearch.client.ResponseException;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.xpack.ml.MachineLearningTemplateRegistry;, +import java.io.IOException;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicReference;, +, +import static java.util.Collections.singletonMap;, +, +    /**, +     * Waits for the Machine Learning templates to be created by {@link MachineLearningTemplateRegistry}., +     */, +    public static void waitForMlTemplates() throws InterruptedException {, +        AtomicReference<Version> masterNodeVersion = new AtomicReference<>();, +        awaitBusy(() -> {, +            String response;, +            try {, +                response = EntityUtils, +                        .toString(client().performRequest("GET", "/_cat/nodes", singletonMap("h", "master,version")).getEntity());]