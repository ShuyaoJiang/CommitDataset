[+++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.util.ArrayUtil;, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.common.collect.Tuple;, +import java.util.stream.Collectors;, +            LevensteinDistance ld = new LevensteinDistance();, +            List<Tuple<Float, String>> scoredKeys = new ArrayList<>();, +            for (String k : this.keySettings.keySet()) {, +                float distance = ld.getDistance(key, k);, +                if (distance > 0.7f) {, +                    scoredKeys.add(new Tuple<>(distance, k));, +                }, +            }, +            CollectionUtil.timSort(scoredKeys, (a,b) -> b.v1().compareTo(a.v1()));, +            String msg = "unknown setting [" + key + "]";, +            List<String> keys = scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList());, +            if (keys.isEmpty() == false) {, +                msg += " did you mean " + (keys.size() == 1 ? "[" + keys.get(0) + "]": "any of " + keys.toString()) + "?";, +            }, +            throw new IllegalArgumentException(msg);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.util.ArrayUtil;, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.common.collect.Tuple;, +import java.util.stream.Collectors;, +            LevensteinDistance ld = new LevensteinDistance();, +            List<Tuple<Float, String>> scoredKeys = new ArrayList<>();, +            for (String k : this.keySettings.keySet()) {, +                float distance = ld.getDistance(key, k);, +                if (distance > 0.7f) {, +                    scoredKeys.add(new Tuple<>(distance, k));, +                }, +            }, +            CollectionUtil.timSort(scoredKeys, (a,b) -> b.v1().compareTo(a.v1()));, +            String msg = "unknown setting [" + key + "]";, +            List<String> keys = scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList());, +            if (keys.isEmpty() == false) {, +                msg += " did you mean " + (keys.size() == 1 ? "[" + keys.get(0) + "]": "any of " + keys.toString()) + "?";, +            }, +            throw new IllegalArgumentException(msg);, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayMetaState.java, +            // since we still haven't upgraded the index folders, we write index state in the old folder, +            metaStateService.writeIndex("upgrade", indexMetaData, nodeEnv.resolveIndexFolder(indexMetaData.getIndex().getUUID()));, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.util.ArrayUtil;, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.common.collect.Tuple;, +import java.util.stream.Collectors;, +            LevensteinDistance ld = new LevensteinDistance();, +            List<Tuple<Float, String>> scoredKeys = new ArrayList<>();, +            for (String k : this.keySettings.keySet()) {, +                float distance = ld.getDistance(key, k);, +                if (distance > 0.7f) {, +                    scoredKeys.add(new Tuple<>(distance, k));, +                }, +            }, +            CollectionUtil.timSort(scoredKeys, (a,b) -> b.v1().compareTo(a.v1()));, +            String msg = "unknown setting [" + key + "]";, +            List<String> keys = scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList());, +            if (keys.isEmpty() == false) {, +                msg += " did you mean " + (keys.size() == 1 ? "[" + keys.get(0) + "]": "any of " + keys.toString()) + "?";, +            }, +            throw new IllegalArgumentException(msg);, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayMetaState.java, +            // since we still haven't upgraded the index folders, we write index state in the old folder, +            metaStateService.writeIndex("upgrade", indexMetaData, nodeEnv.resolveIndexFolder(indexMetaData.getIndex().getUUID()));, +++ b/core/src/main/java/org/elasticsearch/gateway/MetaStateService.java, +        writeIndex(reason, indexMetaData, nodeEnv.indexPaths(indexMetaData.getIndex()));, +    }, +, +    /**, +     * Writes the index state in <code>locations</code>, use {@link #writeGlobalState(String, MetaData)}, +     * to write index state in index paths, +     */, +    void writeIndex(String reason, IndexMetaData indexMetaData, Path[] locations) throws IOException {, +            IndexMetaData.FORMAT.write(indexMetaData, indexMetaData.getVersion(), locations);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.util.ArrayUtil;, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.common.collect.Tuple;, +import java.util.stream.Collectors;, +            LevensteinDistance ld = new LevensteinDistance();, +            List<Tuple<Float, String>> scoredKeys = new ArrayList<>();, +            for (String k : this.keySettings.keySet()) {, +                float distance = ld.getDistance(key, k);, +                if (distance > 0.7f) {, +                    scoredKeys.add(new Tuple<>(distance, k));, +                }, +            }, +            CollectionUtil.timSort(scoredKeys, (a,b) -> b.v1().compareTo(a.v1()));, +            String msg = "unknown setting [" + key + "]";, +            List<String> keys = scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList());, +            if (keys.isEmpty() == false) {, +                msg += " did you mean " + (keys.size() == 1 ? "[" + keys.get(0) + "]": "any of " + keys.toString()) + "?";, +            }, +            throw new IllegalArgumentException(msg);]