[+++ b/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +    public static final String CACHE_HASH_ALGO_SETTING = "cache.hash_algo";, +    public static final String CACHE_TTL_SETTING = "cache.ttl";, +    public static final String CACHE_MAX_USERS_SETTING = "cache.max_users";, +, +    final Hasher hasher;, +        hasher = Hasher.resolve(config.settings().get(CACHE_HASH_ALGO_SETTING, null), Hasher.BCRYPT5);, +        TimeValue ttl = config.settings().getAsTime(CACHE_TTL_SETTING, DEFAULT_TTL);, +                    .maximumSize(config.settings().getAsInt(CACHE_MAX_USERS_SETTING, DEFAULT_MAX_USERS)), +++ b/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +    public static final String CACHE_HASH_ALGO_SETTING = "cache.hash_algo";, +    public static final String CACHE_TTL_SETTING = "cache.ttl";, +    public static final String CACHE_MAX_USERS_SETTING = "cache.max_users";, +, +    final Hasher hasher;, +        hasher = Hasher.resolve(config.settings().get(CACHE_HASH_ALGO_SETTING, null), Hasher.BCRYPT5);, +        TimeValue ttl = config.settings().getAsTime(CACHE_TTL_SETTING, DEFAULT_TTL);, +                    .maximumSize(config.settings().getAsInt(CACHE_MAX_USERS_SETTING, DEFAULT_MAX_USERS)), +++ b/src/main/java/org/elasticsearch/shield/authc/support/Hasher.java, +import java.util.Arrays;, +    BCRYPT5() {, +        @Override, +        public char[] hash(SecuredString text) {, +            String salt = org.elasticsearch.shield.authc.support.BCrypt.gensalt(5);, +            return BCrypt.hashpw(text, salt).toCharArray();, +        }, +, +        @Override, +        public boolean verify(SecuredString text, char[] hash) {, +            String hashStr = new String(hash);, +            if (!hashStr.startsWith(BCRYPT_PREFIX)) {, +                return false;, +            }, +            return BCrypt.checkpw(text, hashStr);, +        }, +    },, +, +    BCRYPT7() {, +        @Override, +        public char[] hash(SecuredString text) {, +            String salt = org.elasticsearch.shield.authc.support.BCrypt.gensalt(7);, +            return BCrypt.hashpw(text, salt).toCharArray();, +        }, +, +        @Override, +        public boolean verify(SecuredString text, char[] hash) {, +            String hashStr = new String(hash);, +            if (!hashStr.startsWith(BCRYPT_PREFIX)) {, +                return false;, +            }, +            return BCrypt.checkpw(text, hashStr);, +        }, +    },, +, +    },, +, +    NOOP() {, +        @Override, +        public char[] hash(SecuredString text) {, +            return text.copyChars();, +        }, +, +        @Override, +        public boolean verify(SecuredString text, char[] hash) {, +            return Arrays.equals(text.internalChars(), hash);, +        }, +            case "bcrypt5"      : return BCRYPT5;, +            case "bcrypt7"      : return BCRYPT7;, +            case "noop"         :, +            case "clear_text"   :  return NOOP;, +++ b/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +    public static final String CACHE_HASH_ALGO_SETTING = "cache.hash_algo";, +    public static final String CACHE_TTL_SETTING = "cache.ttl";, +    public static final String CACHE_MAX_USERS_SETTING = "cache.max_users";, +, +    final Hasher hasher;, +        hasher = Hasher.resolve(config.settings().get(CACHE_HASH_ALGO_SETTING, null), Hasher.BCRYPT5);, +        TimeValue ttl = config.settings().getAsTime(CACHE_TTL_SETTING, DEFAULT_TTL);, +                    .maximumSize(config.settings().getAsInt(CACHE_MAX_USERS_SETTING, DEFAULT_MAX_USERS)), +++ b/src/main/java/org/elasticsearch/shield/authc/support/Hasher.java, +import java.util.Arrays;, +    BCRYPT5() {, +        @Override, +        public char[] hash(SecuredString text) {, +            String salt = org.elasticsearch.shield.authc.support.BCrypt.gensalt(5);, +            return BCrypt.hashpw(text, salt).toCharArray();, +        }, +, +        @Override, +        public boolean verify(SecuredString text, char[] hash) {, +            String hashStr = new String(hash);, +            if (!hashStr.startsWith(BCRYPT_PREFIX)) {, +                return false;, +            }, +            return BCrypt.checkpw(text, hashStr);, +        }, +    },, +, +    BCRYPT7() {, +        @Override]