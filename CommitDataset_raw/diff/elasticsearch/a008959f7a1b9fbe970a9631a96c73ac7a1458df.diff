[+++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +import org.apache.lucene.util.SetOnce;, +import org.elasticsearch.common.bytes.BytesReference;, +    private boolean cachable = true;, +    private final SetOnce<Boolean> frozen = new SetOnce<>();, +        failIfFrozen();, +        failIfFrozen();, +        failIfFrozen();, +        failIfFrozen();, +        failIfFrozen();, +, +    /**, +     * if this method is called the query context will throw exception if methods are accessed, +     * that could yield different results across executions like {@link #getTemplateBytes(Script)}, +     */, +    public void freezeContext() {, +        this.frozen.set(Boolean.TRUE);, +    }, +, +    /**, +     * This method fails if {@link #freezeContext()} is called before on this context., +     * This is used to <i>seal</i>, +     */, +    protected void failIfFrozen() {, +        this.cachable = false;, +        if (frozen.get() == Boolean.TRUE) {, +            throw new IllegalArgumentException("features that prevent cachability are disabled on this context");, +        } else {, +            assert frozen.get() == null : frozen.get();, +        }, +    }, +, +    @Override, +    public BytesReference getTemplateBytes(Script template) {, +        failIfFrozen();, +        return super.getTemplateBytes(template);, +    }, +, +    /**, +     * Returns <code>true</code> iff the result of the processed search request is cachable. Otherwise <code>false</code>, +     */, +    public boolean isCachable() {, +        return cachable;, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +import org.apache.lucene.util.SetOnce;, +import org.elasticsearch.common.bytes.BytesReference;, +    private boolean cachable = true;, +    private final SetOnce<Boolean> frozen = new SetOnce<>();, +        failIfFrozen();, +        failIfFrozen();, +        failIfFrozen();, +        failIfFrozen();, +        failIfFrozen();, +, +    /**, +     * if this method is called the query context will throw exception if methods are accessed, +     * that could yield different results across executions like {@link #getTemplateBytes(Script)}, +     */, +    public void freezeContext() {, +        this.frozen.set(Boolean.TRUE);, +    }, +, +    /**, +     * This method fails if {@link #freezeContext()} is called before on this context., +     * This is used to <i>seal</i>, +     */, +    protected void failIfFrozen() {, +        this.cachable = false;, +        if (frozen.get() == Boolean.TRUE) {, +            throw new IllegalArgumentException("features that prevent cachability are disabled on this context");, +        } else {, +            assert frozen.get() == null : frozen.get();, +        }, +    }, +, +    @Override, +    public BytesReference getTemplateBytes(Script template) {, +        failIfFrozen();, +        return super.getTemplateBytes(template);, +    }, +, +    /**, +     * Returns <code>true</code> iff the result of the processed search request is cachable. Otherwise <code>false</code>, +     */, +    public boolean isCachable() {, +        return cachable;, +    }, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +        if (context.getQueryShardContext().isCachable() == false) {, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +import org.apache.lucene.util.SetOnce;, +import org.elasticsearch.common.bytes.BytesReference;, +    private boolean cachable = true;, +    private final SetOnce<Boolean> frozen = new SetOnce<>();, +        failIfFrozen();]