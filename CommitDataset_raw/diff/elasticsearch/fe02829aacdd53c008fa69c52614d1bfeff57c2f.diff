[+++ b/core/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +    public static Object extractValue(String path, Map<?, ?> map) {, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +    public static Object extractValue(String path, Map<?, ?> map) {, +++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +    public static Object extractValue(String path, Map<?, ?> map) {, +++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java, +++ b/qa/full-cluster-restart/src/test/java/org/elasticsearch/upgrades/FullClusterRestartIT.java, +import java.util.List;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +        assertAllSearchWorks(count);, +        assertBasicAggregationWorks(count);, +        assertRealtimeGetWorks(count);, +    }, +, +    public void testNewReplicasWork() throws Exception {, +        if (runningAgainstOldCluster) {, +            XContentBuilder mappingsAndSettings = jsonBuilder();, +            mappingsAndSettings.startObject();, +            {, +                mappingsAndSettings.startObject("settings");, +                mappingsAndSettings.field("number_of_shards", 1);, +                mappingsAndSettings.field("number_of_replicas", 0);, +                mappingsAndSettings.endObject();, +            }, +            {, +                mappingsAndSettings.startObject("mappings");, +                mappingsAndSettings.startObject("doc");, +                mappingsAndSettings.startObject("properties");, +                {, +                    mappingsAndSettings.startObject("field");, +                    mappingsAndSettings.field("type", "text");, +                    mappingsAndSettings.endObject();, +                }, +                mappingsAndSettings.endObject();, +                mappingsAndSettings.endObject();, +                mappingsAndSettings.endObject();, +            }, +            mappingsAndSettings.endObject();, +            client().performRequest("PUT", "/" + index, Collections.emptyMap(),, +                new StringEntity(mappingsAndSettings.string(), ContentType.APPLICATION_JSON));, +, +            int numDocs = randomIntBetween(2000, 3000);, +            indexRandomDocuments(numDocs, true, false, i -> {, +                return JsonXContent.contentBuilder().startObject(), +                    .field("field", "value"), +                    .endObject();, +            });, +            logger.info("Refreshing [{}]", index);, +            client().performRequest("POST", "/" + index + "/_refresh");, +        } else {, +            final int numReplicas = 1;, +            final long startTime = System.currentTimeMillis();, +            logger.debug("--> creating [{}] replicas for index [{}]", numReplicas, index);, +            String requestBody = "{ \"index\": { \"number_of_replicas\" : " + numReplicas + " }}";, +            Response response = client().performRequest("PUT", "/" + index + "/_settings", Collections.emptyMap(),, +                new StringEntity(requestBody, ContentType.APPLICATION_JSON));, +            assertEquals(200, response.getStatusLine().getStatusCode());, +, +            Map<String, String> params = new HashMap<>();, +            params.put("timeout", "2m");, +            params.put("wait_for_status", "green");, +            params.put("wait_for_no_relocating_shards", "true");, +            params.put("wait_for_events", "languid");, +            Map<String, Object> healthRsp = toMap(client().performRequest("GET", "/_cluster/health/" + index, params));, +            assertEquals("green", healthRsp.get("status"));, +            assertFalse((Boolean) healthRsp.get("timed_out"));, +, +            logger.debug("--> index [{}] is green, took [{}] ms", index, (System.currentTimeMillis() - startTime));, +            Map<String, Object> recoverRsp = toMap(client().performRequest("GET", "/" + index + "/_recovery"));, +            logger.debug("--> recovery status:\n{}", recoverRsp);, +, +            Map<String, Object> responseBody = toMap(client().performRequest("GET", "/" + index + "/_search",, +                Collections.singletonMap("preference", "_primary")));, +            assertNoFailures(responseBody);, +            int foundHits1 = (int) XContentMapValues.extractValue("hits.total", responseBody);, +, +            responseBody = toMap(client().performRequest("GET", "/" + index + "/_search",, +                Collections.singletonMap("preference", "_replica")));, +            assertNoFailures(responseBody);, +            int foundHits2 = (int) XContentMapValues.extractValue("hits.total", responseBody);, +            assertEquals(foundHits1, foundHits2);, +            // TODO: do something more with the replicas! index?, +        }, +    void assertAllSearchWorks(int count) throws IOException {, +        logger.info("--> testing _all search");, +        Map<String, Object>  searchRsp = toMap(client().performRequest("GET", "/" + index + "/_search"));, +        assertNoFailures(searchRsp);, +        int totalHits = (int) XContentMapValues.extractValue("hits.total", searchRsp);, +        assertEquals(count, totalHits);, +        Map<?, ?> bestHit = (Map<?, ?>) ((List)(XContentMapValues.extractValue("hits.hits", searchRsp))).get(0);, +, +        // Make sure there are payloads and they are taken into account for the score, +        // the 'string' field has a boost of 4 in the mappings so it should get a payload boost, +        String stringValue = (String) XContentMapValues.extractValue("_source.string", bestHit);, +        assertNotNull(stringValue);, +        String type = (String) bestHit.get("_type");, +        String id = (String) bestHit.get("_id");, +        String requestBody = "{ \"query\": { \"match_all\" : {} }}";]