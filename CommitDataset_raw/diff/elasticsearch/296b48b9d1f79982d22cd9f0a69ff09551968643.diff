[+++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +import org.elasticsearch.common.settings.Setting;, + * DiscoveryService#DISCOVERY_SEED_SETTING))., +     * @param setting  the setting to access the seed, +    public static Random get(Settings settings, Setting<Long> setting) {, +        if (setting.exists(settings)) {, +            return new Random(setting.get(settings));, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +import org.elasticsearch.common.settings.Setting;, + * DiscoveryService#DISCOVERY_SEED_SETTING))., +     * @param setting  the setting to access the seed, +    public static Random get(Settings settings, Setting<Long> setting) {, +        if (setting.exists(settings)) {, +            return new Random(setting.get(settings));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.discovery.DiscoveryModule;, +import org.elasticsearch.discovery.DiscoveryService;, +import org.elasticsearch.discovery.zen.fd.FaultDetection;, +import org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing;, +        Environment.PIDFILE_SETTING,, +        DiscoveryService.DISCOVERY_SEED_SETTING,, +        DiscoveryService.INITIAL_STATE_TIMEOUT_SETTING,, +        DiscoveryModule.DISCOVERY_TYPE_SETTING,, +        DiscoveryModule.ZEN_MASTER_SERVICE_TYPE_SETTING,, +        FaultDetection.PING_RETRIES_SETTING,, +        FaultDetection.PING_TIMEOUT_SETTING,, +        FaultDetection.REGISTER_CONNECTION_LISTENER_SETTING,, +        FaultDetection.PING_INTERVAL_SETTING,, +        FaultDetection.CONNECT_ON_NETWORK_DISCONNECT_SETTING,, +        ZenDiscovery.PING_TIMEOUT_SETTING,, +        ZenDiscovery.JOIN_TIMEOUT_SETTING,, +        ZenDiscovery.JOIN_RETRY_ATTEMPTS_SETTING,, +        ZenDiscovery.JOIN_RETRY_DELAY_SETTING,, +        ZenDiscovery.MAX_PINGS_FROM_ANOTHER_MASTER_SETTING,, +        ZenDiscovery.SEND_LEAVE_REQUEST_SETTING,, +        ZenDiscovery.MASTER_ELECTION_FILTER_CLIENT_SETTING,, +        ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING,, +        ZenDiscovery.MASTER_ELECTION_FILTER_DATA_SETTING,, +        UnicastZenPing.DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING,, +        UnicastZenPing.DISCOVERY_ZEN_PING_UNICAST_CONCURRENT_CONNECTS_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +import org.elasticsearch.common.settings.Setting;, + * DiscoveryService#DISCOVERY_SEED_SETTING))., +     * @param setting  the setting to access the seed, +    public static Random get(Settings settings, Setting<Long> setting) {, +        if (setting.exists(settings)) {, +            return new Random(setting.get(settings));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.discovery.DiscoveryModule;, +import org.elasticsearch.discovery.DiscoveryService;, +import org.elasticsearch.discovery.zen.fd.FaultDetection;, +import org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing;, +        Environment.PIDFILE_SETTING,, +        DiscoveryService.DISCOVERY_SEED_SETTING,, +        DiscoveryService.INITIAL_STATE_TIMEOUT_SETTING,, +        DiscoveryModule.DISCOVERY_TYPE_SETTING,, +        DiscoveryModule.ZEN_MASTER_SERVICE_TYPE_SETTING,, +        FaultDetection.PING_RETRIES_SETTING,, +        FaultDetection.PING_TIMEOUT_SETTING,, +        FaultDetection.REGISTER_CONNECTION_LISTENER_SETTING,, +        FaultDetection.PING_INTERVAL_SETTING,, +        FaultDetection.CONNECT_ON_NETWORK_DISCONNECT_SETTING,, +        ZenDiscovery.PING_TIMEOUT_SETTING,, +        ZenDiscovery.JOIN_TIMEOUT_SETTING,, +        ZenDiscovery.JOIN_RETRY_ATTEMPTS_SETTING,, +        ZenDiscovery.JOIN_RETRY_DELAY_SETTING,, +        ZenDiscovery.MAX_PINGS_FROM_ANOTHER_MASTER_SETTING,, +        ZenDiscovery.SEND_LEAVE_REQUEST_SETTING,, +        ZenDiscovery.MASTER_ELECTION_FILTER_CLIENT_SETTING,, +        ZenDiscovery.MASTER_ELECTION_WAIT_FOR_JOINS_TIMEOUT_SETTING,, +        ZenDiscovery.MASTER_ELECTION_FILTER_DATA_SETTING,, +        UnicastZenPing.DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING,, +        UnicastZenPing.DISCOVERY_ZEN_PING_UNICAST_CONCURRENT_CONNECTS_SETTING, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import org.elasticsearch.common.settings.Setting;, +import java.util.function.Function;, +    public static final Setting<String> DISCOVERY_TYPE_SETTING = new Setting<>("discovery.type",, +        settings -> DiscoveryNode.localNode(settings) ? "local" : "zen", Function.identity(), false, Setting.Scope.CLUSTER);, +    public static final Setting<String> ZEN_MASTER_SERVICE_TYPE_SETTING = new Setting<>("discovery.zen.masterservice.type",, +            "zen", Function.identity(), false, Setting.Scope.CLUSTER);, +        String discoveryType = DISCOVERY_TYPE_SETTING.get(settings);, +            String masterServiceTypeKey = ZEN_MASTER_SERVICE_TYPE_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +import org.elasticsearch.common.settings.Setting;, + * DiscoveryService#DISCOVERY_SEED_SETTING))., +     * @param setting  the setting to access the seed, +    public static Random get(Settings settings, Setting<Long> setting) {, +        if (setting.exists(settings)) {, +            return new Random(setting.get(settings));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.discovery.DiscoveryModule;, +import org.elasticsearch.discovery.DiscoveryService;, +import org.elasticsearch.discovery.zen.fd.FaultDetection;, +import org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing;, +        Environment.PIDFILE_SETTING,, +        DiscoveryService.DISCOVERY_SEED_SETTING,, +        DiscoveryService.INITIAL_STATE_TIMEOUT_SETTING,, +        DiscoveryModule.DISCOVERY_TYPE_SETTING,, +        DiscoveryModule.ZEN_MASTER_SERVICE_TYPE_SETTING,, +        FaultDetection.PING_RETRIES_SETTING,]