[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import org.elasticsearch.painless.Definition.Struct;, +            Struct struct = definition.RuntimeClassToStruct(clazz);, +                struct = definition.RuntimeClassToStruct(iface);, +         Method interfaceMethod = interfaceType.struct.functionalMethod;, +             Method interfaceMethod = clazz.struct.functionalMethod;, +            Struct struct = definition.RuntimeClassToStruct(clazz);, +                struct = definition.RuntimeClassToStruct(iface);, +            Struct struct = definition.RuntimeClassToStruct(clazz);, +                struct = definition.RuntimeClassToStruct(iface);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import org.elasticsearch.painless.Definition.Struct;, +            Struct struct = definition.RuntimeClassToStruct(clazz);, +                struct = definition.RuntimeClassToStruct(iface);, +         Method interfaceMethod = interfaceType.struct.functionalMethod;, +             Method interfaceMethod = clazz.struct.functionalMethod;, +            Struct struct = definition.RuntimeClassToStruct(clazz);, +                struct = definition.RuntimeClassToStruct(iface);, +            Struct struct = definition.RuntimeClassToStruct(clazz);, +                struct = definition.RuntimeClassToStruct(iface);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +        public final Map<String, MethodHandle> getters;, +        public final Map<String, MethodHandle> setters;, +        public final Method functionalMethod;, +, +        private Struct(String name, Class<?> clazz, org.objectweb.asm.Type type) {, +            getters = new HashMap<>();, +            setters = new HashMap<>();, +, +            functionalMethod = null;, +        private Struct(Struct struct, Method functionalMethod) {, +            getters = Collections.unmodifiableMap(struct.getters);, +            setters = Collections.unmodifiableMap(struct.setters);, +, +            this.functionalMethod = functionalMethod;, +        private Struct freeze(Method functionalMethod) {, +            return new Struct(this, functionalMethod);, +        if (clazz.isLocalClass() || clazz.isAnonymousClass()) {, +            return null;, +        } else if (clazz.isArray()) {, +                return getType(structsMap.get(ClassToName(component)), dimensions);, +    public Struct RuntimeClassToStruct(Class<?> clazz) {, +        return structsMap.get(ClassToName(clazz));, +    }, +, +            entry.setValue(entry.getValue().freeze(computeFunctionalInterfaceMethod(entry.getValue())));, +        for (Map.Entry<MethodKey, Method> method : struct.methods.entrySet()) {, +            String name = method.getKey().name;, +            Method m = method.getValue();, +                StringBuilder newName = new StringBuilder();, +                struct.getters.putIfAbsent(newName.toString(), m.handle);, +                StringBuilder newName = new StringBuilder();, +                struct.getters.putIfAbsent(newName.toString(), m.handle);, +                StringBuilder newName = new StringBuilder();, +                struct.setters.putIfAbsent(newName.toString(), m.handle);, +        // add all members, +        for (Map.Entry<String, Field> member : struct.members.entrySet()) {, +            struct.getters.put(member.getKey(), member.getValue().getter);, +            struct.setters.put(member.getKey(), member.getValue().setter);, +        }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import org.elasticsearch.painless.Definition.Struct;, +            Struct struct = definition.RuntimeClassToStruct(clazz);, +                struct = definition.RuntimeClassToStruct(iface);, +         Method interfaceMethod = interfaceType.struct.functionalMethod;, +             Method interfaceMethod = clazz.struct.functionalMethod;, +            Struct struct = definition.RuntimeClassToStruct(clazz);, +                struct = definition.RuntimeClassToStruct(iface);, +            Struct struct = definition.RuntimeClassToStruct(clazz);, +                struct = definition.RuntimeClassToStruct(iface);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +        public final Map<String, MethodHandle> getters;, +        public final Map<String, MethodHandle> setters;, +        public final Method functionalMethod;, +, +        private Struct(String name, Class<?> clazz, org.objectweb.asm.Type type) {, +            getters = new HashMap<>();, +            setters = new HashMap<>();, +, +            functionalMethod = null;, +        private Struct(Struct struct, Method functionalMethod) {, +            getters = Collections.unmodifiableMap(struct.getters);, +            setters = Collections.unmodifiableMap(struct.setters);, +, +            this.functionalMethod = functionalMethod;, +        private Struct freeze(Method functionalMethod) {, +            return new Struct(this, functionalMethod);, +        if (clazz.isLocalClass() || clazz.isAnonymousClass()) {, +            return null;, +        } else if (clazz.isArray()) {, +                return getType(structsMap.get(ClassToName(component)), dimensions);, +    public Struct RuntimeClassToStruct(Class<?> clazz) {, +        return structsMap.get(ClassToName(clazz));, +    }, +, +            entry.setValue(entry.getValue().freeze(computeFunctionalInterfaceMethod(entry.getValue())));, +        for (Map.Entry<MethodKey, Method> method : struct.methods.entrySet()) {, +            String name = method.getKey().name;, +            Method m = method.getValue();, +                StringBuilder newName = new StringBuilder();]