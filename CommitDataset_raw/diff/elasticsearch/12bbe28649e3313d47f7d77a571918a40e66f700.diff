[+++ b/src/main/java/org/elasticsearch/action/support/replication/TransportIndexReplicationOperationAction.java, +public abstract class TransportIndexReplicationOperationAction<Request extends IndexReplicationOperationRequest, Response extends ActionResponse, ShardRequest extends ShardReplicationOperationRequest, ShardReplicaRequest extends ShardReplicationOperationRequest, ShardResponse extends ActionResponse>, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportIndexReplicationOperationAction.java, +public abstract class TransportIndexReplicationOperationAction<Request extends IndexReplicationOperationRequest, Response extends ActionResponse, ShardRequest extends ShardReplicationOperationRequest, ShardReplicaRequest extends ShardReplicationOperationRequest, ShardResponse extends ActionResponse>, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportIndicesReplicationOperationAction.java, +        ShardRequest extends ShardReplicationOperationRequest, ShardReplicaRequest extends ShardReplicationOperationRequest, ShardResponse extends ActionResponse>, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportIndexReplicationOperationAction.java, +public abstract class TransportIndexReplicationOperationAction<Request extends IndexReplicationOperationRequest, Response extends ActionResponse, ShardRequest extends ShardReplicationOperationRequest, ShardReplicaRequest extends ShardReplicationOperationRequest, ShardResponse extends ActionResponse>, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportIndicesReplicationOperationAction.java, +        ShardRequest extends ShardReplicationOperationRequest, ShardReplicaRequest extends ShardReplicationOperationRequest, ShardResponse extends ActionResponse>, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.UnavailableShardsException;, +import org.elasticsearch.action.WriteConsistencyLevel;, +import org.elasticsearch.index.service.IndexService;, +import org.elasticsearch.index.shard.service.IndexShard;, +public abstract class TransportShardReplicationOperationAction<Request extends ShardReplicationOperationRequest, ReplicaRequest extends ShardReplicationOperationRequest, Response extends ActionResponse> extends TransportAction<Request, Response> {, +            try {, +            } catch (Throwable t) {, +                failReplicaIfNeeded(request.request.index(), request.shardId, t);, +                throw t;, +            }, +                final DiscoveryNode node = clusterState.nodes().get(nodeId);, +                            logger.warn("Failed to perform " + transportAction + " on remote replica " + node + shardIt.shardId(), exp);, +                                    "Failed to perform [" + transportAction + "] on replica, message [" + ExceptionsHelper.detailedMessage(exp) + "]");, +                                    failReplicaIfNeeded(shard.index(), shard.id(), e);, +                        failReplicaIfNeeded(shard.index(), shard.id(), e);, +                        failReplicaIfNeeded(shard.index(), shard.id(), e);, +, +    }, +, +    private void failReplicaIfNeeded(String index, int shardId, Throwable t) {, +        if (!ignoreReplicaException(t)) {, +            IndexService indexService = indicesService.indexService(index);, +            if (indexService == null) {, +                logger.debug("ignoring failed replica [{}][{}] because index was already removed.", index, shardId);, +                return;, +            }, +            IndexShard indexShard = indexService.shard(shardId);, +            if (indexShard == null) {, +                logger.debug("ignoring failed replica [{}][{}] because index was already removed.", index, shardId);, +                return;, +            }, +            indexShard.failShard(transportAction + " failed on replica", t);, +        }, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportIndexReplicationOperationAction.java, +public abstract class TransportIndexReplicationOperationAction<Request extends IndexReplicationOperationRequest, Response extends ActionResponse, ShardRequest extends ShardReplicationOperationRequest, ShardReplicaRequest extends ShardReplicationOperationRequest, ShardResponse extends ActionResponse>, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportIndicesReplicationOperationAction.java, +        ShardRequest extends ShardReplicationOperationRequest, ShardReplicaRequest extends ShardReplicationOperationRequest, ShardResponse extends ActionResponse>, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.UnavailableShardsException;, +import org.elasticsearch.action.WriteConsistencyLevel;, +import org.elasticsearch.index.service.IndexService;, +import org.elasticsearch.index.shard.service.IndexShard;, +public abstract class TransportShardReplicationOperationAction<Request extends ShardReplicationOperationRequest, ReplicaRequest extends ShardReplicationOperationRequest, Response extends ActionResponse> extends TransportAction<Request, Response> {, +            try {, +            } catch (Throwable t) {, +                failReplicaIfNeeded(request.request.index(), request.shardId, t);, +                throw t;, +            }, +                final DiscoveryNode node = clusterState.nodes().get(nodeId);, +                            logger.warn("Failed to perform " + transportAction + " on remote replica " + node + shardIt.shardId(), exp);, +                                    "Failed to perform [" + transportAction + "] on replica, message [" + ExceptionsHelper.detailedMessage(exp) + "]");, +                                    failReplicaIfNeeded(shard.index(), shard.id(), e);, +                        failReplicaIfNeeded(shard.index(), shard.id(), e);, +                        failReplicaIfNeeded(shard.index(), shard.id(), e);, +, +    }, +, +    private void failReplicaIfNeeded(String index, int shardId, Throwable t) {, +        if (!ignoreReplicaException(t)) {, +            IndexService indexService = indicesService.indexService(index);, +            if (indexService == null) {, +                logger.debug("ignoring failed replica [{}][{}] because index was already removed.", index, shardId);, +                return;, +            }, +            IndexShard indexShard = indexService.shard(shardId);, +            if (indexShard == null) {, +                logger.debug("ignoring failed replica [{}][{}] because index was already removed.", index, shardId);, +                return;, +            }, +            indexShard.failShard(transportAction + " failed on replica", t);, +        }, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +    /** fail engine due to some error. the engine will also be closed. */, +    void failEngine(String reason, @Nullable Throwable failure);, +, +        void onFailedEngine(ShardId shardId, String reason, @Nullable Throwable t);, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportIndexReplicationOperationAction.java, +public abstract class TransportIndexReplicationOperationAction<Request extends IndexReplicationOperationRequest, Response extends ActionResponse, ShardRequest extends ShardReplicationOperationRequest, ShardReplicaRequest extends ShardReplicationOperationRequest, ShardResponse extends ActionResponse>, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportIndicesReplicationOperationAction.java, +        ShardRequest extends ShardReplicationOperationRequest, ShardReplicaRequest extends ShardReplicationOperationRequest, ShardResponse extends ActionResponse>, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.UnavailableShardsException;, +import org.elasticsearch.action.WriteConsistencyLevel;]