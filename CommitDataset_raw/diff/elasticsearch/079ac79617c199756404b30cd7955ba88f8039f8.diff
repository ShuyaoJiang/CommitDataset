[+++ b/src/main/java/org/elasticsearch/index/search/child/ParentQuery.java, +        this.childrenFilter = childrenFilter;, +        ChildWeight childWeight = new ChildWeight(parentQuery.createWeight(searcher), childrenFilter, searchContext, uidToScore);, +        private final Filter childrenFilter;, +        private ChildWeight(Weight parentWeight, Filter childrenFilter, SearchContext searchContext, Recycler.V<ObjectFloatOpenHashMap<HashedBytesArray>> uidToScore) {, +            this.childrenFilter = new ApplyAcceptedDocsFilter(childrenFilter);, +            HashedBytesArray uid = typeCache.parentIdByDoc(currentChildDoc);, +++ b/src/main/java/org/elasticsearch/index/search/child/ParentQuery.java, +        this.childrenFilter = childrenFilter;, +        ChildWeight childWeight = new ChildWeight(parentQuery.createWeight(searcher), childrenFilter, searchContext, uidToScore);, +        private final Filter childrenFilter;, +        private ChildWeight(Weight parentWeight, Filter childrenFilter, SearchContext searchContext, Recycler.V<ObjectFloatOpenHashMap<HashedBytesArray>> uidToScore) {, +            this.childrenFilter = new ApplyAcceptedDocsFilter(childrenFilter);, +            HashedBytesArray uid = typeCache.parentIdByDoc(currentChildDoc);, +++ b/src/test/java/org/elasticsearch/index/search/child/ParentConstantScoreQueryTests.java, +import org.elasticsearch.common.lucene.search.NotFilter;, +import org.elasticsearch.common.lucene.search.XFilteredQuery;, +                boolean filterMe = rarely();, +                if (filterMe) {, +                    document.add(new StringField("filter", "me", Field.Store.NO));, +                }, +                if (!markParentAsDeleted) {, +                    if (!markChildAsDeleted && !filterMe) {, +        Filter rawFilterMe = new NotFilter(new TermFilter(new Term("filter", "me")));, +            // Using this in FQ, will invoke / test the Scorer#advance(..) and also let the Weight#scorer not get live docs as acceptedDocs, +            Filter filterMe;, +            if (random().nextBoolean()) {, +                filterMe = SearchContext.current().filterCache().cache(rawFilterMe);, +            } else {, +                filterMe = rawFilterMe;, +            }, +, +            query = new XFilteredQuery(query, filterMe);, +++ b/src/main/java/org/elasticsearch/index/search/child/ParentQuery.java, +        this.childrenFilter = childrenFilter;, +        ChildWeight childWeight = new ChildWeight(parentQuery.createWeight(searcher), childrenFilter, searchContext, uidToScore);, +        private final Filter childrenFilter;, +        private ChildWeight(Weight parentWeight, Filter childrenFilter, SearchContext searchContext, Recycler.V<ObjectFloatOpenHashMap<HashedBytesArray>> uidToScore) {, +            this.childrenFilter = new ApplyAcceptedDocsFilter(childrenFilter);, +            HashedBytesArray uid = typeCache.parentIdByDoc(currentChildDoc);, +++ b/src/test/java/org/elasticsearch/index/search/child/ParentConstantScoreQueryTests.java, +import org.elasticsearch.common.lucene.search.NotFilter;, +import org.elasticsearch.common.lucene.search.XFilteredQuery;, +                boolean filterMe = rarely();, +                if (filterMe) {, +                    document.add(new StringField("filter", "me", Field.Store.NO));, +                }, +                if (!markParentAsDeleted) {, +                    if (!markChildAsDeleted && !filterMe) {, +        Filter rawFilterMe = new NotFilter(new TermFilter(new Term("filter", "me")));, +            // Using this in FQ, will invoke / test the Scorer#advance(..) and also let the Weight#scorer not get live docs as acceptedDocs, +            Filter filterMe;, +            if (random().nextBoolean()) {, +                filterMe = SearchContext.current().filterCache().cache(rawFilterMe);, +            } else {, +                filterMe = rawFilterMe;, +            }, +, +            query = new XFilteredQuery(query, filterMe);, +++ b/src/test/java/org/elasticsearch/index/search/child/ParentQueryTests.java, +import org.elasticsearch.common.lucene.search.NotFilter;, +import org.elasticsearch.common.lucene.search.XFilteredQuery;, +                boolean filterMe = rarely();, +                if (filterMe) {, +                    document.add(new StringField("filter", "me", Field.Store.NO));, +                }, +                if (!markParentAsDeleted) {, +                    if (!markChildAsDeleted && !filterMe) {, +        Filter rawFilterMe = new NotFilter(new TermFilter(new Term("filter", "me")));, +            // Using this in FQ, will invoke / test the Scorer#advance(..) and also let the Weight#scorer not get live docs as acceptedDocs, +            Filter filterMe;, +            if (random().nextBoolean()) {, +                filterMe = SearchContext.current().filterCache().cache(rawFilterMe);, +            } else {, +                filterMe = rawFilterMe;, +            }, +, +            query = new XFilteredQuery(query, filterMe);]