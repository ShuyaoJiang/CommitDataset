[+++ b/server/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +                if (DiscoveryNode.isMasterNode(settings) == false) {, +                    ensureNoIndexMetaData(nodePaths);, +                }, +, +        List<Path> shardDataPaths = collectIndexSubPaths(nodePaths, this::isShardPath);, +    private void ensureNoIndexMetaData(final NodePath[] nodePaths) throws IOException {, +        List<Path> indexMetaDataPaths = collectIndexSubPaths(nodePaths, this::isIndexMetaDataPath);, +        if (indexMetaDataPaths.isEmpty() == false) {, +            throw new IllegalStateException("Node is started with ", +                + Node.NODE_DATA_SETTING.getKey(), +                + "=false and ", +                + Node.NODE_MASTER_SETTING.getKey(), +                + "=false, but has index metadata: ", +                + indexMetaDataPaths);, +        }, +    }, +, +    private List<Path> collectIndexSubPaths(NodePath[] nodePaths, Predicate<Path> subPathPredicate) throws IOException {, +        List<Path> indexSubPaths = new ArrayList<>();, +        for (NodePath nodePath : nodePaths) {, +            Path indicesPath = nodePath.indicesPath;, +            if (Files.isDirectory(indicesPath)) {, +                try (DirectoryStream<Path> indexStream = Files.newDirectoryStream(indicesPath)) {, +                    for (Path indexPath : indexStream) {, +                        if (Files.isDirectory(indexPath)) {, +                            try (Stream<Path> shardStream = Files.list(indexPath)) {, +                                shardStream.filter(subPathPredicate), +                                    .map(Path::toAbsolutePath), +                                    .forEach(indexSubPaths::add);, +                            }, +                        }, +                    }, +                }, +            }, +        }, +, +        return indexSubPaths;, +    }, +, +    private boolean isIndexMetaDataPath(Path path) {, +        return Files.isDirectory(path), +            && path.getFileName().toString().equals(MetaDataStateFormat.STATE_DIR_NAME);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +                if (DiscoveryNode.isMasterNode(settings) == false) {, +                    ensureNoIndexMetaData(nodePaths);, +                }, +, +        List<Path> shardDataPaths = collectIndexSubPaths(nodePaths, this::isShardPath);, +    private void ensureNoIndexMetaData(final NodePath[] nodePaths) throws IOException {, +        List<Path> indexMetaDataPaths = collectIndexSubPaths(nodePaths, this::isIndexMetaDataPath);, +        if (indexMetaDataPaths.isEmpty() == false) {, +            throw new IllegalStateException("Node is started with ", +                + Node.NODE_DATA_SETTING.getKey(), +                + "=false and ", +                + Node.NODE_MASTER_SETTING.getKey(), +                + "=false, but has index metadata: ", +                + indexMetaDataPaths);, +        }, +    }, +, +    private List<Path> collectIndexSubPaths(NodePath[] nodePaths, Predicate<Path> subPathPredicate) throws IOException {, +        List<Path> indexSubPaths = new ArrayList<>();, +        for (NodePath nodePath : nodePaths) {, +            Path indicesPath = nodePath.indicesPath;, +            if (Files.isDirectory(indicesPath)) {, +                try (DirectoryStream<Path> indexStream = Files.newDirectoryStream(indicesPath)) {, +                    for (Path indexPath : indexStream) {, +                        if (Files.isDirectory(indexPath)) {, +                            try (Stream<Path> shardStream = Files.list(indexPath)) {, +                                shardStream.filter(subPathPredicate), +                                    .map(Path::toAbsolutePath), +                                    .forEach(indexSubPaths::add);, +                            }, +                        }, +                    }, +                }, +            }, +        }, +, +        return indexSubPaths;, +    }, +, +    private boolean isIndexMetaDataPath(Path path) {, +        return Files.isDirectory(path), +            && path.getFileName().toString().equals(MetaDataStateFormat.STATE_DIR_NAME);, +    }, +, +++ b/server/src/test/java/org/elasticsearch/env/NodeEnvironmentIT.java, +        logger.info("--> restarting the node with node.data=false and node.master=false");, +        IllegalStateException ex = expectThrows(IllegalStateException.class,, +            "Node started with node.data=false and node.master=false while having existing index metadata must fail",, +            () ->, +                internalCluster().restartRandomDataNode(new InternalTestCluster.RestartCallback() {, +                    @Override, +                    public Settings onNodeStopped(String nodeName) {, +                        return Settings.builder(), +                            .put(Node.NODE_DATA_SETTING.getKey(), false)]