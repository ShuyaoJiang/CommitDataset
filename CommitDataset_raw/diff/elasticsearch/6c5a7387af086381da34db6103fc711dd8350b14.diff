[+++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/DateFormat.java, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale) {, +            return (date) -> DateFormatters.from(DateFormatter.forPattern("strict_date_time").parse(date)).withZoneSameInstant(timezone);, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale) {, +            return date -> Instant.ofEpochMilli((long) (Double.parseDouble(date) * 1000.0)).atZone(timezone);, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale) {, +            return date -> Instant.ofEpochMilli(Long.parseLong(date)).atZone(timezone);, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale) {, +            return date -> Instant.ofEpochMilli(parseMillis(date)).atZone(timezone);, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId zoneId, Locale locale) {, +                return DateFormatters.from(accessor);, +    abstract Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale);, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/DateFormat.java, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale) {, +            return (date) -> DateFormatters.from(DateFormatter.forPattern("strict_date_time").parse(date)).withZoneSameInstant(timezone);, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale) {, +            return date -> Instant.ofEpochMilli((long) (Double.parseDouble(date) * 1000.0)).atZone(timezone);, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale) {, +            return date -> Instant.ofEpochMilli(Long.parseLong(date)).atZone(timezone);, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale) {, +            return date -> Instant.ofEpochMilli(parseMillis(date)).atZone(timezone);, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId zoneId, Locale locale) {, +                return DateFormatters.from(accessor);, +    abstract Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale);, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/DateIndexNameProcessor.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.time.DateFormatter;, +import org.elasticsearch.ingest.AbstractProcessor;, +import org.elasticsearch.ingest.ConfigurationUtils;, +import org.elasticsearch.ingest.IngestDocument;, +import org.elasticsearch.ingest.Processor;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.script.TemplateScript;, +, +import java.time.ZoneId;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    private final ZoneId timezone;, +    private final List<Function<String, ZonedDateTime>> dateFormats;, +    DateIndexNameProcessor(String tag, String field, List<Function<String, ZonedDateTime>> dateFormats, ZoneId timezone,, +        ZonedDateTime dateTime = null;, +        for (Function<String, ZonedDateTime> dateParser : dateFormats) {, +        DateFormatter formatter = DateFormatter.forPattern(indexNameFormat);, +        // use UTC instead of Z is string representation of UTC, so behaviour is the same between 6.x and 7, +        String zone = timezone.equals(ZoneOffset.UTC) ? "UTC" : timezone.getId();, +                        .append(formatter.format(dateTime)).append("||/").append(dateRounding), +                            .append('{').append(indexNameFormat).append('|').append(zone).append('}'), +    ZoneId getTimezone() {, +    List<Function<String, ZonedDateTime>> getDateFormats() {, +            ZoneId timezone = timezoneString == null ? ZoneOffset.UTC : ZoneId.of(timezoneString);, +            List<Function<String, ZonedDateTime>> dateFormats = new ArrayList<>(dateFormatStrings.size());, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/DateFormat.java, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale) {, +            return (date) -> DateFormatters.from(DateFormatter.forPattern("strict_date_time").parse(date)).withZoneSameInstant(timezone);, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale) {, +            return date -> Instant.ofEpochMilli((long) (Double.parseDouble(date) * 1000.0)).atZone(timezone);, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale) {, +            return date -> Instant.ofEpochMilli(Long.parseLong(date)).atZone(timezone);, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale) {, +            return date -> Instant.ofEpochMilli(parseMillis(date)).atZone(timezone);, +        Function<String, ZonedDateTime> getFunction(String format, ZoneId zoneId, Locale locale) {, +                return DateFormatters.from(accessor);, +    abstract Function<String, ZonedDateTime> getFunction(String format, ZoneId timezone, Locale locale);, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/DateIndexNameProcessor.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.time.DateFormatter;, +import org.elasticsearch.ingest.AbstractProcessor;, +import org.elasticsearch.ingest.ConfigurationUtils;, +import org.elasticsearch.ingest.IngestDocument;, +import org.elasticsearch.ingest.Processor;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.script.TemplateScript;, +, +import java.time.ZoneId;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    private final ZoneId timezone;, +    private final List<Function<String, ZonedDateTime>> dateFormats;, +    DateIndexNameProcessor(String tag, String field, List<Function<String, ZonedDateTime>> dateFormats, ZoneId timezone,, +        ZonedDateTime dateTime = null;, +        for (Function<String, ZonedDateTime> dateParser : dateFormats) {, +        DateFormatter formatter = DateFormatter.forPattern(indexNameFormat);, +        // use UTC instead of Z is string representation of UTC, so behaviour is the same between 6.x and 7, +        String zone = timezone.equals(ZoneOffset.UTC) ? "UTC" : timezone.getId();, +                        .append(formatter.format(dateTime)).append("||/").append(dateRounding), +                            .append('{').append(indexNameFormat).append('|').append(zone).append('}'), +    ZoneId getTimezone() {, +    List<Function<String, ZonedDateTime>> getDateFormats() {, +            ZoneId timezone = timezoneString == null ? ZoneOffset.UTC : ZoneId.of(timezoneString);, +            List<Function<String, ZonedDateTime>> dateFormats = new ArrayList<>(dateFormatStrings.size());, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/DateProcessor.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneId;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    public static final DateFormatter FORMATTER = DateFormatter.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");, +    private final List<Function<Map<String, Object>, Function<String, ZonedDateTime>>> dateParsers;, +    private ZoneId newDateTimeZone(Map<String, Object> params) {, +        return timezone == null ? ZoneOffset.UTC : ZoneId.of(timezone.newInstance(params).execute());, +        ZonedDateTime dateTime = null;]