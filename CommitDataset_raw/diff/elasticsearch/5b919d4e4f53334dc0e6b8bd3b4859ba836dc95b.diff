[+++ b/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +++ b/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +++ b/src/main/java/org/elasticsearch/action/support/broadcast/TransportBroadcastOperationAction.java, +            logger.trace("resolving shards based on cluster state version [{}]", clusterState.version());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +++ b/src/main/java/org/elasticsearch/action/support/broadcast/TransportBroadcastOperationAction.java, +            logger.trace("resolving shards based on cluster state version [{}]", clusterState.version());, +++ b/src/test/java/org/elasticsearch/get/GetActionTests.java, +import org.elasticsearch.action.ShardOperationFailedException;, +import org.elasticsearch.test.junit.annotations.TestLogging;, +    @TestLogging("index.shard.service:TRACE,cluster.service:TRACE,action.admin.indices.flush:TRACE"), +        logger.info("indexing documents");, +, +        logger.info("checking real time retrieval");, +        logger.info("waiting for recoveries to complete");, +, +        logger.info("flushing");, +        if (flushResponse.getSuccessfulShards() == 0) {, +            StringBuilder sb = new StringBuilder("failed to flush at least one shard. total shards ["), +                    .append(flushResponse.getTotalShards()).append("], failed shards: [").append(flushResponse.getFailedShards()).append("]");, +            for (ShardOperationFailedException failure: flushResponse.getShardFailures()) {, +                sb.append("\nShard failure: ").append(failure);, +            }, +            fail(sb.toString());, +        }, +, +        logger.info("checking post-flush retrieval");]