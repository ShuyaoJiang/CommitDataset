[+++ b/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +import org.elasticsearch.index.percolator.stats.ShardPercolateService;, +import java.util.Map;, +    private final ShardPercolateService shardPercolateService;, +                                     IndexCache indexCache, IndexFieldDataService indexFieldDataService, ShardPercolateService shardPercolateService) {, +        this.shardPercolateService = shardPercolateService;, +        Query newquery = parsePercolatorDocument(idAsString, source);, +        HashedBytesRef id = new HashedBytesRef(new BytesRef(idAsString));, +        Query previousQuery = percolateQueries.put(id, newquery);, +        shardPercolateService.addedQuery(id, previousQuery, newquery);, +        HashedBytesRef id =new HashedBytesRef(idAsString) ;, +        Query query = percolateQueries.remove(id);, +        if (query != null) {, +            shardPercolateService.removedQuery(id, query);, +        }, +                    QueriesLoaderCollector queryCollector = new QueriesLoaderCollector(PercolatorQueriesRegistry.this, logger, indexFieldDataService);, +                    searcher.searcher().search(query, queryCollector);, +                    Map<HashedBytesRef, Query> queries = queryCollector.queries();, +                    for (Map.Entry<HashedBytesRef, Query> entry : queries.entrySet()) {, +                        Query previousQuery = percolateQueries.put(entry.getKey(), entry.getValue());, +                        shardPercolateService.addedQuery(entry.getKey(), previousQuery, entry.getValue());, +                    }, +++ b/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +import org.elasticsearch.index.percolator.stats.ShardPercolateService;, +import java.util.Map;, +    private final ShardPercolateService shardPercolateService;, +                                     IndexCache indexCache, IndexFieldDataService indexFieldDataService, ShardPercolateService shardPercolateService) {, +        this.shardPercolateService = shardPercolateService;, +        Query newquery = parsePercolatorDocument(idAsString, source);, +        HashedBytesRef id = new HashedBytesRef(new BytesRef(idAsString));, +        Query previousQuery = percolateQueries.put(id, newquery);, +        shardPercolateService.addedQuery(id, previousQuery, newquery);, +        HashedBytesRef id =new HashedBytesRef(idAsString) ;, +        Query query = percolateQueries.remove(id);, +        if (query != null) {, +            shardPercolateService.removedQuery(id, query);, +        }, +                    QueriesLoaderCollector queryCollector = new QueriesLoaderCollector(PercolatorQueriesRegistry.this, logger, indexFieldDataService);, +                    searcher.searcher().search(query, queryCollector);, +                    Map<HashedBytesRef, Query> queries = queryCollector.queries();, +                    for (Map.Entry<HashedBytesRef, Query> entry : queries.entrySet()) {, +                        Query previousQuery = percolateQueries.put(entry.getKey(), entry.getValue());, +                        shardPercolateService.addedQuery(entry.getKey(), previousQuery, entry.getValue());, +                    }, +++ b/src/main/java/org/elasticsearch/index/percolator/stats/PercolateStats.java, +import org.elasticsearch.common.unit.ByteSizeValue;, + * Exposes percolator related statistics., +    private long memorySizeInBytes;, +    private long numQueries;, +    /**, +     * Noop constructor for serialazation purposes., +     */, +    PercolateStats(long percolateCount, long percolateTimeInMillis, long current, long memorySizeInBytes, long numQueries) {, +        this.memorySizeInBytes = memorySizeInBytes;, +        this.numQueries = numQueries;, +    /**, +     * @return The number of times the percolate api has been invoked., +     */, +    /**, +     * @return The total amount of time spend in the percolate api, +     */, +    /**, +     * @return The total amount of time spend in the percolate api, +     */, +    /**, +     * @return The total amount of active percolate api invocations., +     */, +    /**, +     * @return The total number of loaded percolate queries., +     */, +    public long getNumQueries() {, +        return numQueries;, +    }, +, +    /**, +     * @return The total size the loaded queries take in memory., +     */, +    public long getMemorySizeInBytes() {, +        return memorySizeInBytes;, +    }, +, +    /**, +     * @return The total size the loaded queries take in memory., +     */, +    public ByteSizeValue getMemorySize() {, +        return new ByteSizeValue(memorySizeInBytes);, +    }, +, +        builder.field(Fields.MEMORY_SIZE_IN_BYTES, memorySizeInBytes);, +        builder.field(Fields.MEMORY_SIZE, getMemorySize());, +        memorySizeInBytes += percolate.getMemorySizeInBytes();, +        numQueries += percolate.getNumQueries();, +        static final XContentBuilderString MEMORY_SIZE_IN_BYTES = new XContentBuilderString("memory_size_in_bytes");, +        static final XContentBuilderString MEMORY_SIZE = new XContentBuilderString("memory_size");, +        memorySizeInBytes = in.readVLong();, +        numQueries = in.readVLong();, +        out.writeVLong(memorySizeInBytes);, +        out.writeVLong(numQueries);, +++ b/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +import org.elasticsearch.index.percolator.stats.ShardPercolateService;]