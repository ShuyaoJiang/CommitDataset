[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.protocol.xpack.license.DeleteLicenseRequest;, +import org.elasticsearch.protocol.xpack.license.DeleteLicenseResponse;, +     * Deletes license from the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public DeleteLicenseResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::deleteLicense, options,, +            DeleteLicenseResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously deletes license from the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<DeleteLicenseResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::deleteLicense, options,, +            DeleteLicenseResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.protocol.xpack.license.DeleteLicenseRequest;, +import org.elasticsearch.protocol.xpack.license.DeleteLicenseResponse;, +     * Deletes license from the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public DeleteLicenseResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::deleteLicense, options,, +            DeleteLicenseResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously deletes license from the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<DeleteLicenseResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::deleteLicense, options,, +            DeleteLicenseResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.protocol.xpack.license.DeleteLicenseRequest;, +    static Request deleteLicense(DeleteLicenseRequest deleteLicenseRequest) {, +        Request request = new Request(HttpDelete.METHOD_NAME, "/_xpack/license");, +        Params parameters = new Params(request);, +        parameters.withTimeout(deleteLicenseRequest.timeout());, +        parameters.withMasterTimeout(deleteLicenseRequest.masterNodeTimeout());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.protocol.xpack.license.DeleteLicenseRequest;, +import org.elasticsearch.protocol.xpack.license.DeleteLicenseResponse;, +     * Deletes license from the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public DeleteLicenseResponse deleteLicense(DeleteLicenseRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::deleteLicense, options,, +            DeleteLicenseResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously deletes license from the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void deleteLicenseAsync(DeleteLicenseRequest request, RequestOptions options, ActionListener<DeleteLicenseResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::deleteLicense, options,, +            DeleteLicenseResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.protocol.xpack.license.DeleteLicenseRequest;, +    static Request deleteLicense(DeleteLicenseRequest deleteLicenseRequest) {, +        Request request = new Request(HttpDelete.METHOD_NAME, "/_xpack/license");, +        Params parameters = new Params(request);, +        parameters.withTimeout(deleteLicenseRequest.timeout());, +        parameters.withMasterTimeout(deleteLicenseRequest.masterNodeTimeout());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/LicensingDocumentationIT.java, +import org.elasticsearch.common.Booleans;, +import org.elasticsearch.protocol.xpack.license.DeleteLicenseRequest;, +import org.elasticsearch.protocol.xpack.license.DeleteLicenseResponse;, +    public void testLicense() throws Exception {, +                public void onResponse(PutLicenseResponse putLicenseResponse) {, +, +        // we cannot actually delete the license, otherwise the remaining tests won't work]