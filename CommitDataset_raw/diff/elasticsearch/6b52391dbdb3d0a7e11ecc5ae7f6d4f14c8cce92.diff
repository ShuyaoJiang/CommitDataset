[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponse.java, +, +    @Override, +    public String toString() {, +        StringBuilder builder = new StringBuilder("ClusterHealthResponse - status [").append(status).append("]"), +                .append("\ntimedOut [").append(timedOut).append("]"), +                .append("\nclustername [").append(clusterName).append("]"), +                .append("\nnumberOfNodes [").append(numberOfNodes).append("]"), +                .append("\nnumberOfDataNodes [").append(numberOfDataNodes).append("]"), +                .append("\nactiveShards [").append(activeShards).append("]"), +                .append("\nrelocatingShards [").append(relocatingShards).append("]"), +                .append("\nactivePrimaryShards [").append(activePrimaryShards).append("]"), +                .append("\ninitializingShards [").append(initializingShards).append("]"), +                .append("\nvalidationFailures ").append(validationFailures), +                .append("\nindices:");, +, +        for (Map.Entry<String, ClusterIndexHealth> indexEntry : indices.entrySet()) {, +            builder.append(" [").append(indexEntry.getKey()).append("][").append(indexEntry.getValue().status).append("]");, +        }, +        return builder.toString();, +    }, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponse.java, +, +    @Override, +    public String toString() {, +        StringBuilder builder = new StringBuilder("ClusterHealthResponse - status [").append(status).append("]"), +                .append("\ntimedOut [").append(timedOut).append("]"), +                .append("\nclustername [").append(clusterName).append("]"), +                .append("\nnumberOfNodes [").append(numberOfNodes).append("]"), +                .append("\nnumberOfDataNodes [").append(numberOfDataNodes).append("]"), +                .append("\nactiveShards [").append(activeShards).append("]"), +                .append("\nrelocatingShards [").append(relocatingShards).append("]"), +                .append("\nactivePrimaryShards [").append(activePrimaryShards).append("]"), +                .append("\ninitializingShards [").append(initializingShards).append("]"), +                .append("\nvalidationFailures ").append(validationFailures), +                .append("\nindices:");, +, +        for (Map.Entry<String, ClusterIndexHealth> indexEntry : indices.entrySet()) {, +            builder.append(" [").append(indexEntry.getKey()).append("][").append(indexEntry.getValue().status).append("]");, +        }, +        return builder.toString();, +    }, +++ b/src/test/java/org/elasticsearch/recovery/FullRollingRestartTests.java, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequestBuilder;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +    protected void assertTimeout(ClusterHealthRequestBuilder requestBuilder) {, +        ClusterHealthResponse clusterHealth = requestBuilder.get();, +        if (clusterHealth.isTimedOut()) {, +            logger.info("cluster health request timed out:\n{}", clusterHealth);, +            fail("cluster health request timed out");, +        }, +, +    }, +, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout("1m").setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("3"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout("1m").setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("5"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout("1m").setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("4"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout("1m").setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("3"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout("1m").setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("2"));, +        assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout("1m").setWaitForYellowStatus().setWaitForRelocatingShards(0).setWaitForNodes("1"));]