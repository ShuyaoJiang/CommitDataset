[+++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        ChannelPipeline serverChannelPipeline = Channels.pipeline();, +        configureServerChannelPipeline(serverChannelPipeline);, +        serverBootstrap.setPipeline(serverChannelPipeline);, +    public void configureServerChannelPipeline(ChannelPipeline channelPipeline) {, +        channelPipeline.addLast("openChannels", this.serverOpenChannels);, +                (int) this.maxInitialLineLength.bytes(),, +                (int) this.maxHeaderSize.bytes(),, +                (int) this.maxChunkSize.bytes(), +        if (this.maxCumulationBufferCapacity != null) {, +            if (this.maxCumulationBufferCapacity.bytes() > Integer.MAX_VALUE) {, +                requestDecoder.setMaxCumulationBufferCapacity((int) this.maxCumulationBufferCapacity.bytes());, +        if (this.maxCompositeBufferComponents != -1) {, +            requestDecoder.setMaxCumulationBufferComponents(this.maxCompositeBufferComponents);, +        channelPipeline.addLast("decoder", requestDecoder);, +        if (this.compression) {, +            channelPipeline.addLast("decoder_compress", new HttpContentDecompressor());, +        HttpChunkAggregator httpChunkAggregator = new HttpChunkAggregator((int) this.maxContentLength.bytes());, +        if (this.maxCompositeBufferComponents != -1) {, +            httpChunkAggregator.setMaxCumulationBufferComponents(this.maxCompositeBufferComponents);, +        channelPipeline.addLast("aggregator", httpChunkAggregator);, +        channelPipeline.addLast("encoder", new HttpResponseEncoder());, +        if (this.compression) {, +            channelPipeline.addLast("encoder_compress", new HttpContentCompressor(this.compressionLevel));, +        channelPipeline.addLast("handler", new HttpRequestHandler(this));, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        ChannelPipeline serverChannelPipeline = Channels.pipeline();, +        configureServerChannelPipeline(serverChannelPipeline);, +        serverBootstrap.setPipeline(serverChannelPipeline);, +    public void configureServerChannelPipeline(ChannelPipeline channelPipeline) {, +        channelPipeline.addLast("openChannels", this.serverOpenChannels);, +                (int) this.maxInitialLineLength.bytes(),, +                (int) this.maxHeaderSize.bytes(),, +                (int) this.maxChunkSize.bytes(), +        if (this.maxCumulationBufferCapacity != null) {, +            if (this.maxCumulationBufferCapacity.bytes() > Integer.MAX_VALUE) {, +                requestDecoder.setMaxCumulationBufferCapacity((int) this.maxCumulationBufferCapacity.bytes());, +        if (this.maxCompositeBufferComponents != -1) {, +            requestDecoder.setMaxCumulationBufferComponents(this.maxCompositeBufferComponents);, +        channelPipeline.addLast("decoder", requestDecoder);, +        if (this.compression) {, +            channelPipeline.addLast("decoder_compress", new HttpContentDecompressor());, +        HttpChunkAggregator httpChunkAggregator = new HttpChunkAggregator((int) this.maxContentLength.bytes());, +        if (this.maxCompositeBufferComponents != -1) {, +            httpChunkAggregator.setMaxCumulationBufferComponents(this.maxCompositeBufferComponents);, +        channelPipeline.addLast("aggregator", httpChunkAggregator);, +        channelPipeline.addLast("encoder", new HttpResponseEncoder());, +        if (this.compression) {, +            channelPipeline.addLast("encoder_compress", new HttpContentCompressor(this.compressionLevel));, +        channelPipeline.addLast("handler", new HttpRequestHandler(this));, +++ b/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java, +    protected final ESLogger logger;, +    protected final ThreadPool threadPool;, +    protected final TransportServiceAdapter transportServiceAdapter;, +    protected final NettyTransport transport;, +    protected void handleResponse(Channel channel, StreamInput buffer, final TransportResponseHandler handler) {, +    protected String handleRequest(Channel channel, StreamInput buffer, long requestId, Version version) throws IOException {, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        ChannelPipeline serverChannelPipeline = Channels.pipeline();, +        configureServerChannelPipeline(serverChannelPipeline);, +        serverBootstrap.setPipeline(serverChannelPipeline);, +    public void configureServerChannelPipeline(ChannelPipeline channelPipeline) {, +        channelPipeline.addLast("openChannels", this.serverOpenChannels);, +                (int) this.maxInitialLineLength.bytes(),, +                (int) this.maxHeaderSize.bytes(),, +                (int) this.maxChunkSize.bytes(), +        if (this.maxCumulationBufferCapacity != null) {, +            if (this.maxCumulationBufferCapacity.bytes() > Integer.MAX_VALUE) {, +                requestDecoder.setMaxCumulationBufferCapacity((int) this.maxCumulationBufferCapacity.bytes());, +        if (this.maxCompositeBufferComponents != -1) {, +            requestDecoder.setMaxCumulationBufferComponents(this.maxCompositeBufferComponents);, +        channelPipeline.addLast("decoder", requestDecoder);, +        if (this.compression) {, +            channelPipeline.addLast("decoder_compress", new HttpContentDecompressor());, +        HttpChunkAggregator httpChunkAggregator = new HttpChunkAggregator((int) this.maxContentLength.bytes());, +        if (this.maxCompositeBufferComponents != -1) {, +            httpChunkAggregator.setMaxCumulationBufferComponents(this.maxCompositeBufferComponents);, +        channelPipeline.addLast("aggregator", httpChunkAggregator);, +        channelPipeline.addLast("encoder", new HttpResponseEncoder());, +        if (this.compression) {, +            channelPipeline.addLast("encoder_compress", new HttpContentCompressor(this.compressionLevel));, +        channelPipeline.addLast("handler", new HttpRequestHandler(this));, +++ b/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java, +    protected final ESLogger logger;, +    protected final ThreadPool threadPool;, +    protected final TransportServiceAdapter transportServiceAdapter;, +    protected final NettyTransport transport;, +    protected void handleResponse(Channel channel, StreamInput buffer, final TransportResponseHandler handler) {, +    protected String handleRequest(Channel channel, StreamInput buffer, long requestId, Version version) throws IOException {, +++ b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +import java.util.*;, +        ChannelPipeline clientChannelPipeline = Channels.pipeline();, +        configureClientChannelPipeline(clientChannelPipeline);, +        clientBootstrap.setPipeline(clientChannelPipeline);, +, +        ChannelPipeline serverChannelPipeline = Channels.pipeline();, +        configureServerChannelPipeline(serverChannelPipeline);, +        serverBootstrap.setPipeline(serverChannelPipeline);, +    public void configureClientChannelPipeline(ChannelPipeline channelPipeline) {, +        SizeHeaderFrameDecoder sizeHeader = new SizeHeaderFrameDecoder();]