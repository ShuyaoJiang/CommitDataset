[+++ b/docs/reference/index-modules/store.asciidoc, +depending on the operating environment, which is currently `hybridfs` on all, +[[hybridfs]]`hybridfs`::, +, +The `hybridfs` type is a hybrid of `niofs` and `mmapfs`, which chooses the best, +file system type for each type of file based on the read access pattern., +Currently only the Lucene term dictionary, norms and doc values files are, +memory mapped. All other files are opened using Lucene `NIOFSDirectory`., +Similarly to `mmapfs` be sure you have allowed plenty of, +<<vm-max-map-count,virtual address space>>., +, +You can restrict the use of the `mmapfs` and the related `hybridfs` store type, +via the setting `node.store.allow_mmapfs`. This is a boolean setting indicating, +whether or not memory-mapping is allowed. The default is to allow it. This, +setting is useful, for example, if you are in an environment where you can not, +control the ability to create a lot of memory maps so you need disable the, +ability to use memory-mapping., +++ b/docs/reference/index-modules/store.asciidoc, +depending on the operating environment, which is currently `hybridfs` on all, +[[hybridfs]]`hybridfs`::, +, +The `hybridfs` type is a hybrid of `niofs` and `mmapfs`, which chooses the best, +file system type for each type of file based on the read access pattern., +Currently only the Lucene term dictionary, norms and doc values files are, +memory mapped. All other files are opened using Lucene `NIOFSDirectory`., +Similarly to `mmapfs` be sure you have allowed plenty of, +<<vm-max-map-count,virtual address space>>., +, +You can restrict the use of the `mmapfs` and the related `hybridfs` store type, +via the setting `node.store.allow_mmapfs`. This is a boolean setting indicating, +whether or not memory-mapping is allowed. The default is to allow it. This, +setting is useful, for example, if you are in an environment where you can not, +control the ability to create a lot of memory maps so you need disable the, +ability to use memory-mapping., +++ b/server/src/main/java/org/elasticsearch/index/IndexModule.java, +        HYBRIDFS("hybridfs"),, +                throw new IllegalArgumentException("no matching store type for [" + key + "]");, +            return Type.HYBRIDFS;, +++ b/docs/reference/index-modules/store.asciidoc, +depending on the operating environment, which is currently `hybridfs` on all, +[[hybridfs]]`hybridfs`::, +, +The `hybridfs` type is a hybrid of `niofs` and `mmapfs`, which chooses the best, +file system type for each type of file based on the read access pattern., +Currently only the Lucene term dictionary, norms and doc values files are, +memory mapped. All other files are opened using Lucene `NIOFSDirectory`., +Similarly to `mmapfs` be sure you have allowed plenty of, +<<vm-max-map-count,virtual address space>>., +, +You can restrict the use of the `mmapfs` and the related `hybridfs` store type, +via the setting `node.store.allow_mmapfs`. This is a boolean setting indicating, +whether or not memory-mapping is allowed. The default is to allow it. This, +setting is useful, for example, if you are in an environment where you can not, +control the ability to create a lot of memory maps so you need disable the, +ability to use memory-mapping., +++ b/server/src/main/java/org/elasticsearch/index/IndexModule.java, +        HYBRIDFS("hybridfs"),, +                throw new IllegalArgumentException("no matching store type for [" + key + "]");, +            return Type.HYBRIDFS;, +++ b/server/src/main/java/org/elasticsearch/index/store/FsDirectoryService.java, +import org.apache.lucene.store.FSDirectory;, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Collections;, +    /*, +     * We are mmapping norms, docvalues as well as term dictionaries, all other files are served through NIOFS, +     * this provides good random access performance and does not lead to page cache thrashing., +     */, +    private static final Set<String> PRIMARY_EXTENSIONS = Collections.unmodifiableSet(Sets.newHashSet("nvd", "dvd", "tim"));, +        IndexModule.Type type;, +            type = IndexModule.defaultStoreType(IndexModule.NODE_STORE_ALLOW_MMAPFS.get(indexSettings.getNodeSettings()));, +        } else {, +            type = IndexModule.Type.fromSettingsKey(storeType);, +        }, +            case HYBRIDFS:, +                // Use Lucene defaults, +                final FSDirectory primaryDirectory = FSDirectory.open(location, lockFactory);, +                if (primaryDirectory instanceof MMapDirectory) {, +                    return new FileSwitchDirectory(PRIMARY_EXTENSIONS, primaryDirectory, new NIOFSDirectory(location, lockFactory), true) {, +                        @Override, +                        public String[] listAll() throws IOException {, +                            // Avoid doing listAll twice:, +                            return primaryDirectory.listAll();, +                        }, +                    };, +                } else {, +                    return primaryDirectory;, +                }, +++ b/docs/reference/index-modules/store.asciidoc, +depending on the operating environment, which is currently `hybridfs` on all, +[[hybridfs]]`hybridfs`::, +, +The `hybridfs` type is a hybrid of `niofs` and `mmapfs`, which chooses the best, +file system type for each type of file based on the read access pattern., +Currently only the Lucene term dictionary, norms and doc values files are, +memory mapped. All other files are opened using Lucene `NIOFSDirectory`., +Similarly to `mmapfs` be sure you have allowed plenty of, +<<vm-max-map-count,virtual address space>>., +, +You can restrict the use of the `mmapfs` and the related `hybridfs` store type, +via the setting `node.store.allow_mmapfs`. This is a boolean setting indicating]