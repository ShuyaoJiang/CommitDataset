[+++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +import org.elasticsearch.common.blobstore.BlobContainer;, +    private final URL url;, +, +                         NamedXContentRegistry namedXContentRegistry) {, +        this.environment = environment;, +        url = URL_SETTING.exists(metadata.settings()), +            ? URL_SETTING.get(metadata.settings()) : REPOSITORIES_URL_SETTING.get(settings);, +    protected BlobStore createBlobStore() {, +        URL normalizedURL = checkURL(url);, +        return new URLBlobStore(settings, normalizedURL);, +    }, +, +    // only use for testing, +    @Override, +    protected BlobContainer blobContainer() {, +        return super.blobContainer();, +    }, +, +    // only use for testing, +    @Override, +    protected BlobStore getBlobStore() {, +        return super.getBlobStore();, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +import org.elasticsearch.common.blobstore.BlobContainer;, +    private final URL url;, +, +                         NamedXContentRegistry namedXContentRegistry) {, +        this.environment = environment;, +        url = URL_SETTING.exists(metadata.settings()), +            ? URL_SETTING.get(metadata.settings()) : REPOSITORIES_URL_SETTING.get(settings);, +    protected BlobStore createBlobStore() {, +        URL normalizedURL = checkURL(url);, +        return new URLBlobStore(settings, normalizedURL);, +    }, +, +    // only use for testing, +    @Override, +    protected BlobContainer blobContainer() {, +        return super.blobContainer();, +    }, +, +    // only use for testing, +    @Override, +    protected BlobStore getBlobStore() {, +        return super.getBlobStore();, +++ b/modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLRepositoryTests.java, +import static org.hamcrest.CoreMatchers.is;, +import static org.hamcrest.CoreMatchers.not;, +import static org.hamcrest.CoreMatchers.nullValue;, +, +    private URLRepository createRepository(Settings baseSettings, RepositoryMetaData repositoryMetaData) {, +        return new URLRepository(repositoryMetaData, TestEnvironment.newEnvironment(baseSettings),, +            new NamedXContentRegistry(Collections.emptyList())) {, +            @Override, +            protected void assertSnapshotOrGenericThread() {, +                // eliminate thread name check as we create repo manually on test/main threads, +            }, +        };, +    }, +, +        final URLRepository repository = createRepository(baseSettings, repositoryMetaData);, +        repository.start();, +, +        assertThat("blob store has to be lazy initialized", repository.getBlobStore(), is(nullValue()));, +        repository.blobContainer();, +        assertThat("blobContainer has to initialize blob store", repository.getBlobStore(), not(nullValue()));, +        final URLRepository repository = createRepository(baseSettings, repositoryMetaData);, +        repository.start();, +            repository.blobContainer();, +        final URLRepository repository = createRepository(baseSettings, repositoryMetaData);, +        repository.start();, +            repository.blobContainer();, +    public void testNonNormalizedUrl() throws IOException {, +        Settings baseSettings = Settings.builder(), +            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()), +            .put(URLRepository.ALLOWED_URLS_SETTING.getKey(), "file:/tmp/"), +            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), "file:/var/" ), +            .build();, +        RepositoryMetaData repositoryMetaData = new RepositoryMetaData("url", URLRepository.TYPE, baseSettings);, +        final URLRepository repository = createRepository(baseSettings, repositoryMetaData);, +        repository.start();, +        try {, +            repository.blobContainer();, +            fail("RepositoryException should have been thrown.");, +        } catch (RepositoryException e) {, +            assertEquals("[url] file url [file:/var/] doesn't match any of the locations ", +                + "specified by path.repo or repositories.url.allowed_urls",, +                e.getMessage());, +        }, +    }, +, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +import org.elasticsearch.common.blobstore.BlobContainer;, +    private final URL url;, +, +                         NamedXContentRegistry namedXContentRegistry) {, +        this.environment = environment;, +        url = URL_SETTING.exists(metadata.settings()), +            ? URL_SETTING.get(metadata.settings()) : REPOSITORIES_URL_SETTING.get(settings);]