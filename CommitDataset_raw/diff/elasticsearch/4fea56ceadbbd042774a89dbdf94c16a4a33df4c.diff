[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.util.*;, +                    indicesService.createIndex(tmpImd, Collections.EMPTY_LIST);, +                    indexService.getIndexEventListener().beforeIndexAddedToCluster(new Index(request.index()),, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.util.*;, +                    indicesService.createIndex(tmpImd, Collections.EMPTY_LIST);, +                    indexService.getIndexEventListener().beforeIndexAddedToCluster(new Index(request.index()),, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +import java.util.*;, +                                            indexService = indicesService.createIndex(indexMetaData, Collections.EMPTY_LIST);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.util.*;, +                    indicesService.createIndex(tmpImd, Collections.EMPTY_LIST);, +                    indexService.getIndexEventListener().beforeIndexAddedToCluster(new Index(request.index()),, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +import java.util.*;, +                                            indexService = indicesService.createIndex(indexMetaData, Collections.EMPTY_LIST);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                indexService = indicesService.createIndex(indexMetaData, Collections.EMPTY_LIST);, +                        IndexService indexService = indicesService.createIndex(indexMetaData, Collections.EMPTY_LIST);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.util.*;, +                    indicesService.createIndex(tmpImd, Collections.EMPTY_LIST);, +                    indexService.getIndexEventListener().beforeIndexAddedToCluster(new Index(request.index()),, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +import java.util.*;, +                                            indexService = indicesService.createIndex(indexMetaData, Collections.EMPTY_LIST);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                indexService = indicesService.createIndex(indexMetaData, Collections.EMPTY_LIST);, +                        IndexService indexService = indicesService.createIndex(indexMetaData, Collections.EMPTY_LIST);, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +                allocationMultibinder.addBinding().to(clazz).asEagerSingleton();, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.util.*;, +                    indicesService.createIndex(tmpImd, Collections.EMPTY_LIST);, +                    indexService.getIndexEventListener().beforeIndexAddedToCluster(new Index(request.index()),, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +import java.util.*;, +                                            indexService = indicesService.createIndex(indexMetaData, Collections.EMPTY_LIST);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                indexService = indicesService.createIndex(indexMetaData, Collections.EMPTY_LIST);, +                        IndexService indexService = indicesService.createIndex(indexMetaData, Collections.EMPTY_LIST);, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +                allocationMultibinder.addBinding().to(clazz).asEagerSingleton();, +++ b/core/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index;, +, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.settings.IndexSettings;, +import org.elasticsearch.index.shard.IndexShard;, +import org.elasticsearch.index.shard.IndexShardState;, +import org.elasticsearch.index.shard.IndexEventListener;, +import org.elasticsearch.index.shard.ShardId;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +, +/**, + * A composite {@link IndexEventListener} that forwards all callbacks to an immutable list of IndexEventListener, + */, +final class CompositeIndexEventListener implements IndexEventListener {, +, +    private final List<IndexEventListener> listeners;, +    private final ESLogger logger;, +, +    CompositeIndexEventListener(String index, Settings indexSettings, Collection<IndexEventListener> listeners) {, +        for (IndexEventListener listener : listeners) {, +            if (listener == null) {, +                throw new IllegalArgumentException("listeners must be non-null");, +            }, +        }, +        this.listeners = Collections.unmodifiableList(new ArrayList<>(listeners));, +        this.logger = Loggers.getLogger(getClass(), indexSettings, index);, +    }]