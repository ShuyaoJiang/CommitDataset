[+++ b/core/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +import org.elasticsearch.transport.BindTransportException;, +import org.elasticsearch.transport.BytesTransportRequest;, +import org.elasticsearch.transport.ConnectTransportException;, +import org.elasticsearch.transport.NodeNotConnectedException;, +import org.elasticsearch.transport.Transport;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportRequest;, +import org.elasticsearch.transport.TransportRequestOptions;, +import org.elasticsearch.transport.TransportServiceAdapter;, +import org.jboss.netty.channel.AdaptiveReceiveBufferSizePredictorFactory;, +import org.jboss.netty.channel.Channel;, +import org.jboss.netty.channel.ChannelFuture;, +import org.jboss.netty.channel.ChannelFutureListener;, +import org.jboss.netty.channel.ChannelHandlerContext;, +import org.jboss.netty.channel.ChannelPipeline;, +import org.jboss.netty.channel.ChannelPipelineFactory;, +import org.jboss.netty.channel.Channels;, +import org.jboss.netty.channel.ExceptionEvent;, +import org.jboss.netty.channel.FixedReceiveBufferSizePredictorFactory;, +import org.jboss.netty.channel.ReceiveBufferSizePredictorFactory;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +import java.util.Set;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.Executors;, +import java.util.concurrent.ThreadFactory;, +import java.util.concurrent.TimeUnit;, +            List<ChannelFuture> futures = new ArrayList<>();, +            futures.addAll(Arrays.asList(connectRecovery));, +            futures.addAll(Arrays.asList(connectBulk));, +            futures.addAll(Arrays.asList(connectReg));, +            futures.addAll(Arrays.asList(connectState));, +            futures.addAll(Arrays.asList(connectPing));, +            for (ChannelFuture future : Collections.unmodifiableList(futures)) {, +            this.allChannels = Collections.unmodifiableList(newAllChannels);]