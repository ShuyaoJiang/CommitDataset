[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +    protected void doExecute(UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {, +        super.doExecute(request, settingsUpdateListener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +    protected void doExecute(UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {, +        super.doExecute(request, settingsUpdateListener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +    protected void doExecute(ValidateQueryRequest request, ActionListener<ValidateQueryResponse> listener) {, +        super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +    protected void doExecute(UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {, +        super.doExecute(request, settingsUpdateListener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +    protected void doExecute(ValidateQueryRequest request, ActionListener<ValidateQueryResponse> listener) {, +        super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +    protected void doExecute(final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +            createIndexAction.execute(new CreateIndexRequest().index(request.index()).cause("auto(delete api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +                    innerExecute(request, listener);, +                        innerExecute(request, listener);, +            innerExecute(request, listener);, +    private void innerExecute(final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +        super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +    protected void doExecute(UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {, +        super.doExecute(request, settingsUpdateListener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +    protected void doExecute(ValidateQueryRequest request, ActionListener<ValidateQueryResponse> listener) {, +        super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +    protected void doExecute(final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +            createIndexAction.execute(new CreateIndexRequest().index(request.index()).cause("auto(delete api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +                    innerExecute(request, listener);, +                        innerExecute(request, listener);, +            innerExecute(request, listener);, +    private void innerExecute(final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +        super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +    protected void doExecute(final IndexRequest request, final ActionListener<IndexResponse> listener) {, +            createIndexAction.execute(createIndexRequest, new ActionListener<CreateIndexResponse>() {, +                    innerExecute(request, listener);, +                            innerExecute(request, listener);, +            innerExecute(request, listener);, +    private void innerExecute(final IndexRequest request, final ActionListener<IndexResponse> listener) {, +        super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +    protected void doExecute(UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {, +        super.doExecute(request, settingsUpdateListener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +    protected void doExecute(ValidateQueryRequest request, ActionListener<ValidateQueryResponse> listener) {, +        super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +    protected void doExecute(final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +            createIndexAction.execute(new CreateIndexRequest().index(request.index()).cause("auto(delete api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +                    innerExecute(request, listener);, +                        innerExecute(request, listener);, +            innerExecute(request, listener);, +    private void innerExecute(final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +        super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +    protected void doExecute(final IndexRequest request, final ActionListener<IndexResponse> listener) {, +            createIndexAction.execute(createIndexRequest, new ActionListener<CreateIndexResponse>() {, +                    innerExecute(request, listener);, +                            innerExecute(request, listener);, +            innerExecute(request, listener);, +    private void innerExecute(final IndexRequest request, final ActionListener<IndexResponse> listener) {, +        super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +    protected void doExecute(final PercolateRequest request, final ActionListener<PercolateResponse> listener) {, +                    TransportPercolateAction.super.doExecute(new PercolateRequest(request, docSource), listener);, +            super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +    protected void doExecute(UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {, +        super.doExecute(request, settingsUpdateListener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +    protected void doExecute(ValidateQueryRequest request, ActionListener<ValidateQueryResponse> listener) {, +        super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +    protected void doExecute(final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +            createIndexAction.execute(new CreateIndexRequest().index(request.index()).cause("auto(delete api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +                    innerExecute(request, listener);, +                        innerExecute(request, listener);, +            innerExecute(request, listener);, +    private void innerExecute(final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +        super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +    protected void doExecute(final IndexRequest request, final ActionListener<IndexResponse> listener) {, +            createIndexAction.execute(createIndexRequest, new ActionListener<CreateIndexResponse>() {, +                    innerExecute(request, listener);, +                            innerExecute(request, listener);, +            innerExecute(request, listener);, +    private void innerExecute(final IndexRequest request, final ActionListener<IndexResponse> listener) {, +        super.doExecute(request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +    protected void doExecute(final PercolateRequest request, final ActionListener<PercolateResponse> listener) {, +                    TransportPercolateAction.super.doExecute(new PercolateRequest(request, docSource), listener);, +            super.doExecute(request, listener);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +    protected void doExecute(UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {]