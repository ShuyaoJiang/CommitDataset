[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/DependencyLicensesTask.groovy, +        if (dependencies.isEmpty()) {, +            if (licensesDir.exists()) {, +            return // no dependencies to check, +        } else if (licensesDir.exists() == false) {, +            throw new GradleException("Licences dir ${licensesDir} does not exist, but there are dependencies"), +        }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/DependencyLicensesTask.groovy, +        if (dependencies.isEmpty()) {, +            if (licensesDir.exists()) {, +            return // no dependencies to check, +        } else if (licensesDir.exists() == false) {, +            throw new GradleException("Licences dir ${licensesDir} does not exist, but there are dependencies"), +        }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +                signaturesURLs += getClass().getResource('/forbidden/core-signatures.txt'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/DependencyLicensesTask.groovy, +        if (dependencies.isEmpty()) {, +            if (licensesDir.exists()) {, +            return // no dependencies to check, +        } else if (licensesDir.exists() == false) {, +            throw new GradleException("Licences dir ${licensesDir} does not exist, but there are dependencies"), +        }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +                signaturesURLs += getClass().getResource('/forbidden/core-signatures.txt'), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +@defaultMessage Avoid unchecked warnings by using Collections#empty(List|Map|Set) methods, +java.util.Collections#EMPTY_LIST, +java.util.Collections#EMPTY_MAP, +java.util.Collections#EMPTY_SET, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/DependencyLicensesTask.groovy, +        if (dependencies.isEmpty()) {, +            if (licensesDir.exists()) {, +            return // no dependencies to check, +        } else if (licensesDir.exists() == false) {, +            throw new GradleException("Licences dir ${licensesDir} does not exist, but there are dependencies"), +        }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +                signaturesURLs += getClass().getResource('/forbidden/core-signatures.txt'), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +@defaultMessage Avoid unchecked warnings by using Collections#empty(List|Map|Set) methods, +java.util.Collections#EMPTY_LIST, +java.util.Collections#EMPTY_MAP, +java.util.Collections#EMPTY_SET, +++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt, +, +@defaultMessage Constructing a DateTime without a time zone is dangerous, +org.joda.time.DateTime#<init>(), +org.joda.time.DateTime#<init>(long), +org.joda.time.DateTime#<init>(int, int, int, int, int), +org.joda.time.DateTime#<init>(int, int, int, int, int, int), +org.joda.time.DateTime#<init>(int, int, int, int, int, int, int), +org.joda.time.DateTime#now(), +org.joda.time.DateTimeZone#getDefault(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/DependencyLicensesTask.groovy, +        if (dependencies.isEmpty()) {, +            if (licensesDir.exists()) {, +            return // no dependencies to check, +        } else if (licensesDir.exists() == false) {, +            throw new GradleException("Licences dir ${licensesDir} does not exist, but there are dependencies"), +        }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +                signaturesURLs += getClass().getResource('/forbidden/core-signatures.txt'), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +@defaultMessage Avoid unchecked warnings by using Collections#empty(List|Map|Set) methods, +java.util.Collections#EMPTY_LIST, +java.util.Collections#EMPTY_MAP, +java.util.Collections#EMPTY_SET, +++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt, +, +@defaultMessage Constructing a DateTime without a time zone is dangerous, +org.joda.time.DateTime#<init>(), +org.joda.time.DateTime#<init>(long), +org.joda.time.DateTime#<init>(int, int, int, int, int), +org.joda.time.DateTime#<init>(int, int, int, int, int, int), +org.joda.time.DateTime#<init>(int, int, int, int, int, int, int), +org.joda.time.DateTime#now(), +org.joda.time.DateTimeZone#getDefault(), +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/DependencyLicensesTask.groovy, +        if (dependencies.isEmpty()) {, +            if (licensesDir.exists()) {, +            return // no dependencies to check, +        } else if (licensesDir.exists() == false) {, +            throw new GradleException("Licences dir ${licensesDir} does not exist, but there are dependencies"), +        }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +                signaturesURLs += getClass().getResource('/forbidden/core-signatures.txt'), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +@defaultMessage Avoid unchecked warnings by using Collections#empty(List|Map|Set) methods, +java.util.Collections#EMPTY_LIST, +java.util.Collections#EMPTY_MAP, +java.util.Collections#EMPTY_SET, +++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt]