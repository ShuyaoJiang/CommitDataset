[+++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConnection.java, +    /**, +     * The SQLException is the only type of Exception the JDBC API can throw (and that the user expects)., +     * If we remove it, we need to make sure no other types of Exceptions (runtime or otherwise) are thrown, +     */, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConnection.java, +    /**, +     * The SQLException is the only type of Exception the JDBC API can throw (and that the user expects)., +     * If we remove it, we need to make sure no other types of Exceptions (runtime or otherwise) are thrown, +     */, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcStatement.java, +import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConnection.java, +    /**, +     * The SQLException is the only type of Exception the JDBC API can throw (and that the user expects)., +     * If we remove it, we need to make sure no other types of Exceptions (runtime or otherwise) are thrown, +     */, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcStatement.java, +import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/PreparedQuery.java, +import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;, +                paramInfo -> new SqlTypedParamValue(DataType.fromJdbcType(paramInfo.type), paramInfo.value), +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConnection.java, +    /**, +     * The SQLException is the only type of Exception the JDBC API can throw (and that the user expects)., +     * If we remove it, we need to make sure no other types of Exceptions (runtime or otherwise) are thrown, +     */, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcStatement.java, +import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/PreparedQuery.java, +import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;, +                paramInfo -> new SqlTypedParamValue(DataType.fromJdbcType(paramInfo.type), paramInfo.value), +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/JdbcHttpClient.java, +import org.elasticsearch.xpack.sql.proto.Mode;, +import org.elasticsearch.xpack.sql.proto.Protocol;, +import org.elasticsearch.xpack.sql.proto.SqlQueryRequest;, +import org.elasticsearch.xpack.sql.proto.MainResponse;, +import org.elasticsearch.xpack.sql.proto.SqlQueryResponse;, +import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;, +    /**, +     * The SQLException is the only type of Exception the JDBC API can throw (and that the user expects)., +     * If we remove it, we need to make sure no other types of Exceptions (runtime or otherwise) are thrown, +     */, +                SqlQueryRequest sqlRequest = new SqlQueryRequest(Mode.JDBC, sql, params, null,, +                Protocol.TIME_ZONE,, +                fetch, TimeValue.timeValueMillis(meta.timeoutInMs()), TimeValue.timeValueMillis(meta.queryTimeoutInMs()));, +        SqlQueryRequest sqlRequest = new SqlQueryRequest(Mode.JDBC, cursor, TimeValue.timeValueMillis(meta.timeoutInMs()),, +            TimeValue.timeValueMillis(meta.queryTimeoutInMs()));, +        return new InfoResponse(mainResponse.getClusterName(), mainResponse.getVersion().major, mainResponse.getVersion().minor);, +    private List<ColumnInfo> toJdbcColumnInfo(List<org.elasticsearch.xpack.sql.proto.ColumnInfo> columns) {, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConnection.java, +    /**, +     * The SQLException is the only type of Exception the JDBC API can throw (and that the user expects)., +     * If we remove it, we need to make sure no other types of Exceptions (runtime or otherwise) are thrown, +     */, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcStatement.java, +import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/PreparedQuery.java, +import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;, +                paramInfo -> new SqlTypedParamValue(DataType.fromJdbcType(paramInfo.type), paramInfo.value), +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/JdbcHttpClient.java, +import org.elasticsearch.xpack.sql.proto.Mode;, +import org.elasticsearch.xpack.sql.proto.Protocol;, +import org.elasticsearch.xpack.sql.proto.SqlQueryRequest;, +import org.elasticsearch.xpack.sql.proto.MainResponse;, +import org.elasticsearch.xpack.sql.proto.SqlQueryResponse;, +import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;, +    /**, +     * The SQLException is the only type of Exception the JDBC API can throw (and that the user expects)., +     * If we remove it, we need to make sure no other types of Exceptions (runtime or otherwise) are thrown, +     */, +                SqlQueryRequest sqlRequest = new SqlQueryRequest(Mode.JDBC, sql, params, null,, +                Protocol.TIME_ZONE,, +                fetch, TimeValue.timeValueMillis(meta.timeoutInMs()), TimeValue.timeValueMillis(meta.queryTimeoutInMs()));, +        SqlQueryRequest sqlRequest = new SqlQueryRequest(Mode.JDBC, cursor, TimeValue.timeValueMillis(meta.timeoutInMs()),, +            TimeValue.timeValueMillis(meta.queryTimeoutInMs()));, +        return new InfoResponse(mainResponse.getClusterName(), mainResponse.getVersion().major, mainResponse.getVersion().minor);, +    private List<ColumnInfo> toJdbcColumnInfo(List<org.elasticsearch.xpack.sql.proto.ColumnInfo> columns) {, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverterTests.java, +import org.elasticsearch.xpack.sql.proto.Mode;, +        SqlQueryResponse.value(builder, Mode.JDBC, value);, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConnection.java, +    /**, +     * The SQLException is the only type of Exception the JDBC API can throw (and that the user expects)., +     * If we remove it, we need to make sure no other types of Exceptions (runtime or otherwise) are thrown, +     */, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcStatement.java, +import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/PreparedQuery.java, +import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;, +                paramInfo -> new SqlTypedParamValue(DataType.fromJdbcType(paramInfo.type), paramInfo.value), +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/JdbcHttpClient.java, +import org.elasticsearch.xpack.sql.proto.Mode;, +import org.elasticsearch.xpack.sql.proto.Protocol;, +import org.elasticsearch.xpack.sql.proto.SqlQueryRequest;, +import org.elasticsearch.xpack.sql.proto.MainResponse;, +import org.elasticsearch.xpack.sql.proto.SqlQueryResponse;, +import org.elasticsearch.xpack.sql.proto.SqlTypedParamValue;, +    /**, +     * The SQLException is the only type of Exception the JDBC API can throw (and that the user expects).]