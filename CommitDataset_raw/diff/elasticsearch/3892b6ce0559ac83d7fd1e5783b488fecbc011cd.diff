[+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java, +import org.elasticsearch.common.text.Text;, +import org.elasticsearch.search.aggregations.InternalAggregations;, +        OrdBucket spare = new OrdBucket(-1, 0, null);, +            spare.globalOrd = globalTermOrd;, +                spare = (OrdBucket) ordered.insertWithOverflow(spare);, +                if (spare == null) {, +                    spare = new OrdBucket(-1, 0, null);, +                }, +            final OrdBucket bucket = (OrdBucket) ordered.pop();, +            BytesRef scratch = new BytesRef();, +            copy(globalValues.getValueByOrd(bucket.globalOrd), scratch);, +            list[i] = new StringTerms.Bucket(scratch, bucket.docCount, null);, +            list[i].bucketOrd = bucket.bucketOrd;, +    /** This is used internally only, just for compare using global ordinal instead of term bytes in the PQ */, +    static class OrdBucket extends InternalTerms.Bucket {, +        long globalOrd;, +, +        OrdBucket(long globalOrd, long docCount, InternalAggregations aggregations) {, +            super(docCount, aggregations);, +            this.globalOrd = globalOrd;, +        }, +, +        @Override, +        int compareTerm(Terms.Bucket other) {, +            return Long.compare(globalOrd, ((OrdBucket)other).globalOrd);, +        }, +, +        @Override, +        public String getKey() {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public Text getKeyAsText() {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        Object getKeyAsObject() {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        Bucket newBucket(long docCount, InternalAggregations aggs) {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public Number getKeyAsNumber() {, +            throw new UnsupportedOperationException();, +        }, +    }, +]