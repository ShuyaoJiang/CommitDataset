[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +             ref.delegateMethodType,, +             ref.isDelegateInterface ? 1 : 0, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +             ref.delegateMethodType,, +             ref.isDelegateInterface ? 1 : 0, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +import org.objectweb.asm.Opcodes;, +            final Class<?> clazz;, +                clazz = augmentation;, +                clazz = owner.clazz;, +                // invokeStatic assumes that the owner class is not an interface, so this is a, +                // special case for interfaces where the interface method boolean needs to be set to, +                // true to reference the appropriate class constant when calling a static interface, +                // method since java 8 did not check, but java 9 and 10 do, +                if (java.lang.reflect.Modifier.isInterface(clazz.getModifiers())) {, +                    writer.visitMethodInsn(Opcodes.INVOKESTATIC,, +                            type.getInternalName(), name, getMethodType().toMethodDescriptorString(), true);, +                } else {, +                }, +            } else if (java.lang.reflect.Modifier.isInterface(clazz.getModifiers())) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +             ref.delegateMethodType,, +             ref.isDelegateInterface ? 1 : 0, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +import org.objectweb.asm.Opcodes;, +            final Class<?> clazz;, +                clazz = augmentation;, +                clazz = owner.clazz;, +                // invokeStatic assumes that the owner class is not an interface, so this is a, +                // special case for interfaces where the interface method boolean needs to be set to, +                // true to reference the appropriate class constant when calling a static interface, +                // method since java 8 did not check, but java 9 and 10 do, +                if (java.lang.reflect.Modifier.isInterface(clazz.getModifiers())) {, +                    writer.visitMethodInsn(Opcodes.INVOKESTATIC,, +                            type.getInternalName(), name, getMethodType().toMethodDescriptorString(), true);, +                } else {, +                }, +            } else if (java.lang.reflect.Modifier.isInterface(clazz.getModifiers())) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +    /** whether a call is made on a delegate interface */, +    public final boolean isDelegateInterface;, +, +            isDelegateInterface = false;, +            isDelegateInterface = delegateMethod.augmentation.isInterface();, +            isDelegateInterface = delegateMethod.owner.clazz.isInterface();, +        isDelegateInterface = false;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +             ref.delegateMethodType,, +             ref.isDelegateInterface ? 1 : 0, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +import org.objectweb.asm.Opcodes;, +            final Class<?> clazz;, +                clazz = augmentation;, +                clazz = owner.clazz;, +                // invokeStatic assumes that the owner class is not an interface, so this is a, +                // special case for interfaces where the interface method boolean needs to be set to, +                // true to reference the appropriate class constant when calling a static interface, +                // method since java 8 did not check, but java 9 and 10 do, +                if (java.lang.reflect.Modifier.isInterface(clazz.getModifiers())) {, +                    writer.visitMethodInsn(Opcodes.INVOKESTATIC,, +                            type.getInternalName(), name, getMethodType().toMethodDescriptorString(), true);, +                } else {, +                }, +            } else if (java.lang.reflect.Modifier.isInterface(clazz.getModifiers())) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +    /** whether a call is made on a delegate interface */, +    public final boolean isDelegateInterface;, +, +            isDelegateInterface = false;, +            isDelegateInterface = delegateMethod.augmentation.isInterface();, +            isDelegateInterface = delegateMethod.owner.clazz.isInterface();, +        isDelegateInterface = false;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/LambdaBootstrap.java, +     * @param isDelegateInterface If the method to be called is owned by an interface where, +     *                            if the value is '1' if the delegate is an interface and '0', +     *                            otherwise; note this is an int because the bootstrap method, +     *                            cannot convert constants to boolean, +            MethodType delegateMethodType,, +            int isDelegateInterface), +            delegateMethodName, delegateMethodType, isDelegateInterface == 1, captures);, +            boolean isDelegateInterface,, +                isDelegateInterface);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +             ref.delegateMethodType,, +             ref.isDelegateInterface ? 1 : 0, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +import org.objectweb.asm.Opcodes;, +            final Class<?> clazz;, +                clazz = augmentation;, +                clazz = owner.clazz;, +                // invokeStatic assumes that the owner class is not an interface, so this is a, +                // special case for interfaces where the interface method boolean needs to be set to, +                // true to reference the appropriate class constant when calling a static interface, +                // method since java 8 did not check, but java 9 and 10 do, +                if (java.lang.reflect.Modifier.isInterface(clazz.getModifiers())) {, +                    writer.visitMethodInsn(Opcodes.INVOKESTATIC,, +                            type.getInternalName(), name, getMethodType().toMethodDescriptorString(), true);, +                } else {, +                }]