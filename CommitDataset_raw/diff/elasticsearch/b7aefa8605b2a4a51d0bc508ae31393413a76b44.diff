[+++ b/docs/reference/mapping.asciidoc, +`index.mapping.field_name_length.limit`::, +    Setting for the maximum length of a field name. The default value is, +    Long.MAX_VALUE (no limit). This setting isn't really something that addresses, +    mappings explosion but might still be useful if you want to limit the field length., +    It usually shouldn't be necessary to set this setting. The default is okay, +    unless a user starts to add a huge number of fields with really long names., +++ b/docs/reference/mapping.asciidoc, +`index.mapping.field_name_length.limit`::, +    Setting for the maximum length of a field name. The default value is, +    Long.MAX_VALUE (no limit). This setting isn't really something that addresses, +    mappings explosion but might still be useful if you want to limit the field length., +    It usually shouldn't be necessary to set this setting. The default is okay, +    unless a user starts to add a huge number of fields with really long names., +++ b/server/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_FIELD_NAME_LENGTH_LIMIT_SETTING,, +++ b/docs/reference/mapping.asciidoc, +`index.mapping.field_name_length.limit`::, +    Setting for the maximum length of a field name. The default value is, +    Long.MAX_VALUE (no limit). This setting isn't really something that addresses, +    mappings explosion but might still be useful if you want to limit the field length., +    It usually shouldn't be necessary to set this setting. The default is okay, +    unless a user starts to add a huge number of fields with really long names., +++ b/server/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_FIELD_NAME_LENGTH_LIMIT_SETTING,, +++ b/server/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import java.util.stream.Stream;, +    public static final Setting<Long> INDEX_MAPPING_FIELD_NAME_LENGTH_LIMIT_SETTING =, +        Setting.longSetting("index.mapping.field_name_length.limit", Long.MAX_VALUE, 1L, Property.Dynamic, Property.IndexScope);, +                checkFieldNameSoftLimit(objectMappers, fieldMappers, fieldAliasMappers);, +    private void checkFieldNameSoftLimit(Collection<ObjectMapper> objectMappers,, +                                         Collection<FieldMapper> fieldMappers,, +                                         Collection<FieldAliasMapper> fieldAliasMappers) {, +        final long maxFieldNameLength = indexSettings.getValue(INDEX_MAPPING_FIELD_NAME_LENGTH_LIMIT_SETTING);, +, +        Stream.of(objectMappers.stream(), fieldMappers.stream(), fieldAliasMappers.stream()), +            .reduce(Stream::concat), +            .orElseGet(Stream::empty), +            .forEach(mapper -> {, +                String name = mapper.simpleName();, +                if (name.length() > maxFieldNameLength) {, +                    throw new IllegalArgumentException("Field name [" + name + "] in index [" + index().getName() +, +                        "] is too long. The limit is set to [" + maxFieldNameLength + "] characters but was [", +                        + name.length() + "] characters");, +                }, +            });, +    }, +, +++ b/docs/reference/mapping.asciidoc, +`index.mapping.field_name_length.limit`::, +    Setting for the maximum length of a field name. The default value is, +    Long.MAX_VALUE (no limit). This setting isn't really something that addresses, +    mappings explosion but might still be useful if you want to limit the field length., +    It usually shouldn't be necessary to set this setting. The default is okay, +    unless a user starts to add a huge number of fields with really long names., +++ b/server/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_FIELD_NAME_LENGTH_LIMIT_SETTING,, +++ b/server/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import java.util.stream.Stream;, +    public static final Setting<Long> INDEX_MAPPING_FIELD_NAME_LENGTH_LIMIT_SETTING =, +        Setting.longSetting("index.mapping.field_name_length.limit", Long.MAX_VALUE, 1L, Property.Dynamic, Property.IndexScope);, +                checkFieldNameSoftLimit(objectMappers, fieldMappers, fieldAliasMappers);, +    private void checkFieldNameSoftLimit(Collection<ObjectMapper> objectMappers,, +                                         Collection<FieldMapper> fieldMappers,, +                                         Collection<FieldAliasMapper> fieldAliasMappers) {, +        final long maxFieldNameLength = indexSettings.getValue(INDEX_MAPPING_FIELD_NAME_LENGTH_LIMIT_SETTING);, +, +        Stream.of(objectMappers.stream(), fieldMappers.stream(), fieldAliasMappers.stream()), +            .reduce(Stream::concat), +            .orElseGet(Stream::empty), +            .forEach(mapper -> {, +                String name = mapper.simpleName();, +                if (name.length() > maxFieldNameLength) {, +                    throw new IllegalArgumentException("Field name [" + name + "] in index [" + index().getName() +, +                        "] is too long. The limit is set to [" + maxFieldNameLength + "] characters but was [", +                        + name.length() + "] characters");, +                }, +            });, +    }, +, +++ b/server/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java, +    public void testFieldNameLengthLimit() throws Throwable {, +        int maxFieldNameLength = randomIntBetween(15, 20);, +        String testString = new String(new char[maxFieldNameLength + 1]).replace("\0", "a");, +        Settings settings = Settings.builder().put(MapperService.INDEX_MAPPING_FIELD_NAME_LENGTH_LIMIT_SETTING.getKey(), maxFieldNameLength), +            .build();, +        MapperService mapperService = createIndex("test1", settings).mapperService();, +, +        CompressedXContent mapping = new CompressedXContent(BytesReference.bytes(, +            XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties"), +                    .startObject("field"), +                        .field("type", "text"), +                    .endObject(), +                .endObject(), +            .endObject().endObject()));, +, +        mapperService.merge("type", mapping, MergeReason.MAPPING_UPDATE);, +, +        CompressedXContent mappingUpdate = new CompressedXContent(BytesReference.bytes(]