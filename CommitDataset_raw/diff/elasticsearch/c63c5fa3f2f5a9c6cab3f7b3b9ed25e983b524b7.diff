[+++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("1.0.0.1.3"));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("1.0"));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("WRONG.VERSION"));, +        Exception e = expectThrows(IllegalStateException.class, () -> Version.indexCreated(Settings.builder().build()));, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("1.0.0.1.3"));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("1.0"));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("WRONG.VERSION"));, +        Exception e = expectThrows(IllegalStateException.class, () -> Version.indexCreated(Settings.builder().build()));, +++ b/core/src/test/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationActionTests.java, +    @Override, +    @Override, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("1.0.0.1.3"));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("1.0"));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("WRONG.VERSION"));, +        Exception e = expectThrows(IllegalStateException.class, () -> Version.indexCreated(Settings.builder().build()));, +++ b/core/src/test/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationActionTests.java, +    @Override, +    @Override, +++ b/core/src/test/java/org/elasticsearch/action/update/UpdateRequestTests.java, +        Exception e = expectThrows(ElasticsearchParseException.class, () -> request.fromXContent(new byte[] { (byte) '"' }));, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("1.0.0.1.3"));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("1.0"));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("WRONG.VERSION"));, +        Exception e = expectThrows(IllegalStateException.class, () -> Version.indexCreated(Settings.builder().build()));, +++ b/core/src/test/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationActionTests.java, +    @Override, +    @Override, +++ b/core/src/test/java/org/elasticsearch/action/update/UpdateRequestTests.java, +        Exception e = expectThrows(ElasticsearchParseException.class, () -> request.fromXContent(new byte[] { (byte) '"' }));, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/DateMathExpressionResolverTests.java, +        Exception e = expectThrows(ElasticsearchParseException.class,, +                () -> expressionResolver.resolve(context, Arrays.asList("<.mar}vel-{now/d}>")));, +        Exception e = expectThrows(ElasticsearchParseException.class,, +                () -> expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d{}>")));, +        Exception e = expectThrows(ElasticsearchParseException.class,, +                () -> expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d{}}>")));, +        Exception e = expectThrows(ElasticsearchParseException.class,, +                () -> expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d>")));, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("1.0.0.1.3"));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("1.0"));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("WRONG.VERSION"));, +        Exception e = expectThrows(IllegalStateException.class, () -> Version.indexCreated(Settings.builder().build()));, +++ b/core/src/test/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationActionTests.java, +    @Override, +    @Override, +++ b/core/src/test/java/org/elasticsearch/action/update/UpdateRequestTests.java, +        Exception e = expectThrows(ElasticsearchParseException.class, () -> request.fromXContent(new byte[] { (byte) '"' }));, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/DateMathExpressionResolverTests.java, +        Exception e = expectThrows(ElasticsearchParseException.class,, +                () -> expressionResolver.resolve(context, Arrays.asList("<.mar}vel-{now/d}>")));, +        Exception e = expectThrows(ElasticsearchParseException.class,, +                () -> expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d{}>")));, +        Exception e = expectThrows(ElasticsearchParseException.class,, +                () -> expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d{}}>")));, +        Exception e = expectThrows(ElasticsearchParseException.class,, +                () -> expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d>")));, +++ b/core/src/test/java/org/elasticsearch/common/TableTests.java, +, +        Exception e = expectThrows(IllegalStateException.class, () -> table.startRow());, +        Exception e = expectThrows(IllegalStateException.class, () -> table.endHeaders());, +        Exception e = expectThrows(IllegalStateException.class, () -> table.addCell("error"));, +        Exception e = expectThrows(IllegalStateException.class, () -> table.addCell("error"));, +        Exception e = expectThrows(IllegalStateException.class, () -> table.endRow());, +        Exception e = expectThrows(IllegalStateException.class, () -> table.endRow());, +        Exception e = expectThrows(IllegalStateException.class, () -> table.addCell("foobar"));, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("1.0.0.1.3"));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("1.0"));, +        Exception e = expectThrows(IllegalArgumentException.class, () -> Version.fromString("WRONG.VERSION"));, +        Exception e = expectThrows(IllegalStateException.class, () -> Version.indexCreated(Settings.builder().build()));, +++ b/core/src/test/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationActionTests.java, +    @Override, +    @Override, +++ b/core/src/test/java/org/elasticsearch/action/update/UpdateRequestTests.java, +        Exception e = expectThrows(ElasticsearchParseException.class, () -> request.fromXContent(new byte[] { (byte) '"' }));, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/DateMathExpressionResolverTests.java, +        Exception e = expectThrows(ElasticsearchParseException.class,, +                () -> expressionResolver.resolve(context, Arrays.asList("<.mar}vel-{now/d}>")));, +        Exception e = expectThrows(ElasticsearchParseException.class,, +                () -> expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d{}>")));, +        Exception e = expectThrows(ElasticsearchParseException.class,, +                () -> expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d{}}>")));, +        Exception e = expectThrows(ElasticsearchParseException.class,, +                () -> expressionResolver.resolve(context, Arrays.asList("<.marvel-{now/d>")));, +++ b/core/src/test/java/org/elasticsearch/common/TableTests.java, +, +        Exception e = expectThrows(IllegalStateException.class, () -> table.startRow());, +        Exception e = expectThrows(IllegalStateException.class, () -> table.endHeaders());, +        Exception e = expectThrows(IllegalStateException.class, () -> table.addCell("error"));, +        Exception e = expectThrows(IllegalStateException.class, () -> table.addCell("error"));, +        Exception e = expectThrows(IllegalStateException.class, () -> table.endRow());, +        Exception e = expectThrows(IllegalStateException.class, () -> table.endRow());, +        Exception e = expectThrows(IllegalStateException.class, () -> table.addCell("foobar"));, +++ b/core/src/test/java/org/elasticsearch/common/geo/ShapeBuilderTests.java, +import org.locationtech.spatial4j.exception.InvalidShapeException;]