[+++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +import org.elasticsearch.index.fielddata.SortingNumericDoubleValues;, +import org.elasticsearch.index.mapper.GeoPointFieldMapper.GeoPointFieldType;, +            return mode.select(new SortingNumericDoubleValues() {, +                    if (geoPointValues.advanceExact(docId)) {, +                        int n = geoPointValues.docValueCount();, +                        resize(n);, +                        for (int i = 0; i < n; i++) {, +                            double distance = distFunction.calculate(, +                                origin.lat(), origin.lon(), other.lat(), other.lon(), DistanceUnit.METERS);, +                            values[i] = Math.max(0.0d, distance - offset);, +                        }, +                        sort();, +                        return true;, +                    } else {, +                        return false;, +                    }, +            return mode.select(new SortingNumericDoubleValues() {, +                public boolean advanceExact(int docId) throws IOException {, +                    if (doubleValues.advanceExact(docId)) {, +                        int n = doubleValues.docValueCount();, +                        resize(n);, +                        for (int i = 0; i < n; i++) {, +                            values[i] = Math.max(0.0d, Math.abs(doubleValues.nextValue() - origin) - offset);, +                        sort();, +                        return true;, +                    } else {, +                        return false;, +                    double value = distance.doubleValue();, +                            func.explainFunction(getDistanceString(ctx, docId), value, scale));, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +import org.elasticsearch.index.fielddata.SortingNumericDoubleValues;, +import org.elasticsearch.index.mapper.GeoPointFieldMapper.GeoPointFieldType;, +            return mode.select(new SortingNumericDoubleValues() {, +                    if (geoPointValues.advanceExact(docId)) {, +                        int n = geoPointValues.docValueCount();, +                        resize(n);, +                        for (int i = 0; i < n; i++) {, +                            double distance = distFunction.calculate(, +                                origin.lat(), origin.lon(), other.lat(), other.lon(), DistanceUnit.METERS);, +                            values[i] = Math.max(0.0d, distance - offset);, +                        }, +                        sort();, +                        return true;, +                    } else {, +                        return false;, +                    }, +            return mode.select(new SortingNumericDoubleValues() {, +                public boolean advanceExact(int docId) throws IOException {, +                    if (doubleValues.advanceExact(docId)) {, +                        int n = doubleValues.docValueCount();, +                        resize(n);, +                        for (int i = 0; i < n; i++) {, +                            values[i] = Math.max(0.0d, Math.abs(doubleValues.nextValue() - origin) - offset);, +                        sort();, +                        return true;, +                    } else {, +                        return false;, +                    double value = distance.doubleValue();, +                            func.explainFunction(getDistanceString(ctx, docId), value, scale));, +++ b/core/src/main/java/org/elasticsearch/search/MultiValueMode.java, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +import org.elasticsearch.index.fielddata.SortingNumericDoubleValues;, +import org.elasticsearch.index.mapper.GeoPointFieldMapper.GeoPointFieldType;, +            return mode.select(new SortingNumericDoubleValues() {, +                    if (geoPointValues.advanceExact(docId)) {, +                        int n = geoPointValues.docValueCount();, +                        resize(n);, +                        for (int i = 0; i < n; i++) {, +                            double distance = distFunction.calculate(, +                                origin.lat(), origin.lon(), other.lat(), other.lon(), DistanceUnit.METERS);, +                            values[i] = Math.max(0.0d, distance - offset);, +                        }, +                        sort();, +                        return true;, +                    } else {, +                        return false;, +                    }, +            return mode.select(new SortingNumericDoubleValues() {, +                public boolean advanceExact(int docId) throws IOException {, +                    if (doubleValues.advanceExact(docId)) {, +                        int n = doubleValues.docValueCount();, +                        resize(n);, +                        for (int i = 0; i < n; i++) {, +                            values[i] = Math.max(0.0d, Math.abs(doubleValues.nextValue() - origin) - offset);, +                        sort();, +                        return true;, +                    } else {, +                        return false;, +                    double value = distance.doubleValue();, +                            func.explainFunction(getDistanceString(ctx, docId), value, scale));, +++ b/core/src/main/java/org/elasticsearch/search/MultiValueMode.java, +++ b/core/src/test/java/org/elasticsearch/search/MultiValueModeTests.java]