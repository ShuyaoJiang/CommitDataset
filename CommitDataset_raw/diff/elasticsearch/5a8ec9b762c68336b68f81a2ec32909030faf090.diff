[+++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptingSelector.java, +import java.util.stream.Collectors;, +        ServerChannelContext channelContext = (ServerChannelContext) selectionKey.attachment();, +                eventHandler.acceptChannel(channelContext);, +                eventHandler.acceptException(channelContext, e);, +        channelsToClose.addAll(newChannels.stream().map(NioServerSocketChannel::getContext).collect(Collectors.toList()));, +            ServerChannelContext context = newChannel.getContext();, +            assert context.getSelector() == this : "The channel must be registered with the selector with which it was created";, +                if (context.isOpen()) {, +                    eventHandler.handleRegistration(context);, +                    eventHandler.registrationException(context, new ClosedChannelException());, +            } catch (Exception e) {, +                eventHandler.registrationException(context, e);, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptingSelector.java, +import java.util.stream.Collectors;, +        ServerChannelContext channelContext = (ServerChannelContext) selectionKey.attachment();, +                eventHandler.acceptChannel(channelContext);, +                eventHandler.acceptException(channelContext, e);, +        channelsToClose.addAll(newChannels.stream().map(NioServerSocketChannel::getContext).collect(Collectors.toList()));, +            ServerChannelContext context = newChannel.getContext();, +            assert context.getSelector() == this : "The channel must be registered with the selector with which it was created";, +                if (context.isOpen()) {, +                    eventHandler.handleRegistration(context);, +                    eventHandler.registrationException(context, new ClosedChannelException());, +            } catch (Exception e) {, +                eventHandler.registrationException(context, e);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptorEventHandler.java, +import java.nio.channels.SelectionKey;, +     * This method is called when a NioServerSocketChannel is being registered with the selector. It should, +     * only be called once per channel., +     * @param context that was registered, +    protected void handleRegistration(ServerChannelContext context) throws IOException {, +        context.register();, +        SelectionKey selectionKey = context.getSelectionKey();, +        selectionKey.attach(context);, +        SelectionKeyUtils.setAcceptInterested(selectionKey);, +     * @param context that was registered, +    protected void registrationException(ServerChannelContext context, Exception exception) {, +        logger.error(new ParameterizedMessage("failed to register server channel: {}", context.getChannel()), exception);, +     * @param context that can accept a connection, +    protected void acceptChannel(ServerChannelContext context) throws IOException {, +        context.acceptChannels(selectorSupplier);, +     * @param context that accepting a connection, +    protected void acceptException(ServerChannelContext context, Exception exception) {, +            context.getChannel()), exception);, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptingSelector.java, +import java.util.stream.Collectors;, +        ServerChannelContext channelContext = (ServerChannelContext) selectionKey.attachment();, +                eventHandler.acceptChannel(channelContext);, +                eventHandler.acceptException(channelContext, e);, +        channelsToClose.addAll(newChannels.stream().map(NioServerSocketChannel::getContext).collect(Collectors.toList()));, +            ServerChannelContext context = newChannel.getContext();, +            assert context.getSelector() == this : "The channel must be registered with the selector with which it was created";, +                if (context.isOpen()) {, +                    eventHandler.handleRegistration(context);, +                    eventHandler.registrationException(context, new ClosedChannelException());, +            } catch (Exception e) {, +                eventHandler.registrationException(context, e);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptorEventHandler.java, +import java.nio.channels.SelectionKey;, +     * This method is called when a NioServerSocketChannel is being registered with the selector. It should, +     * only be called once per channel., +     * @param context that was registered, +    protected void handleRegistration(ServerChannelContext context) throws IOException {, +        context.register();, +        SelectionKey selectionKey = context.getSelectionKey();, +        selectionKey.attach(context);, +        SelectionKeyUtils.setAcceptInterested(selectionKey);, +     * @param context that was registered, +    protected void registrationException(ServerChannelContext context, Exception exception) {, +        logger.error(new ParameterizedMessage("failed to register server channel: {}", context.getChannel()), exception);, +     * @param context that can accept a connection, +    protected void acceptChannel(ServerChannelContext context) throws IOException {, +        context.acceptChannels(selectorSupplier);, +     * @param context that accepting a connection, +    protected void acceptException(ServerChannelContext context, Exception exception) {, +            context.getChannel()), exception);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +import java.util.function.Consumer;, +    public BytesChannelContext(NioSocketChannel channel, SocketSelector selector, Consumer<Exception> exceptionHandler,, +        super(channel, selector, exceptionHandler);, +        BytesWriteOperation writeOperation = new BytesWriteOperation(this, buffers, listener);, +        SocketSelector selector = getSelector();, +        getSelector().assertOnSelectorThread();, +        getSelector().assertOnSelectorThread();, +        getSelector().assertOnSelectorThread();, +            getSelector().queueChannelClose(channel);, +        getSelector().assertOnSelectorThread();, +                super.closeFromSelector();, +                getSelector().executeFailedListener(op.getListener(), new ClosedChannelException());, +            getSelector().executeFailedListener(headOp.getListener(), e);, +            getSelector().executeListener(headOp.getListener(), null);, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptingSelector.java, +import java.util.stream.Collectors;, +        ServerChannelContext channelContext = (ServerChannelContext) selectionKey.attachment();]