[+++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +import org.elasticsearch.search.slice.SliceBuilder;, +                    timeoutInMillis = TimeValue.parseTimeValue(parser.text(), null, TIMEOUT_FIELD.getPreferredName()).millis();, +            builder.field(TIMEOUT_FIELD.getPreferredName(), TimeValue.timeValueMillis(timeoutInMillis).toString());, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +import org.elasticsearch.search.slice.SliceBuilder;, +                    timeoutInMillis = TimeValue.parseTimeValue(parser.text(), null, TIMEOUT_FIELD.getPreferredName()).millis();, +            builder.field(TIMEOUT_FIELD.getPreferredName(), TimeValue.timeValueMillis(timeoutInMillis).toString());, +++ b/core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java, +import org.elasticsearch.ElasticsearchParseException;, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.hamcrest.Matchers.hasToString;, +    public void testTimeoutWithUnits() throws IOException {, +        final String timeout = randomTimeValue();, +        final String query = "{ \"query\": { \"match_all\": {}}, \"timeout\": \"" + timeout + "\"}";, +        try (XContentParser parser = XContentFactory.xContent(query).createParser(query)) {, +            final SearchSourceBuilder builder = SearchSourceBuilder.fromXContent(createParseContext(parser), aggParsers, suggesters);, +            assertThat(builder.timeoutInMillis(), equalTo(TimeValue.parseTimeValue(timeout, null, "timeout").millis()));, +        }, +    }, +, +    public void testTimeoutWithoutUnits() throws IOException {, +        final int timeout = randomIntBetween(1, 1024);, +        final String query = "{ \"query\": { \"match_all\": {}}, \"timeout\": \"" + timeout + "\"}";, +        try (XContentParser parser = XContentFactory.xContent(query).createParser(query)) {, +            final ElasticsearchParseException e =, +                    expectThrows(, +                            ElasticsearchParseException.class,, +                            () -> SearchSourceBuilder.fromXContent(createParseContext(parser), aggParsers, suggesters));, +            assertThat(e, hasToString(containsString("unit is missing or unrecognized")));, +        }, +    }, +]