[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +        return defaultFactory.newInstance(prefix == null ? null : prefix.intern(), name.intern());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +        return defaultFactory.newInstance(prefix == null ? null : prefix.intern(), name.intern());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +            private final IndicesAnalysisService indicesAnalysisService;, +            public TokenizersBindings(MapBinder<String, TokenizerFactoryFactory> binder, Map<String, Settings> groupSettings, IndicesAnalysisService indicesAnalysisService) {, +                this.indicesAnalysisService = indicesAnalysisService;, +                    if (indicesAnalysisService != null && indicesAnalysisService.hasTokenizer(name)) {, +                        binder.addBinding(name).toInstance(indicesAnalysisService.tokenizerFactoryFactory(name));, +                    } else {, +        }, +            if (indicesAnalysisService != null && indicesAnalysisService.hasCharFilter(charFilterName)) {, +                charFilterBinder.addBinding(charFilterName).toInstance(indicesAnalysisService.charFilterFactoryFactory(charFilterName));, +            } else {, +        }, +            if (indicesAnalysisService != null && indicesAnalysisService.hasTokenFilter(tokenFilterName)) {, +                tokenFilterBinder.addBinding(tokenFilterName).toInstance(indicesAnalysisService.tokenFilterFactoryFactory(tokenFilterName));, +            } else {, +        }, +        AnalysisBinderProcessor.TokenizersBindings tokenizersBindings = new AnalysisBinderProcessor.TokenizersBindings(tokenizerBinder, tokenizersSettings, indicesAnalysisService);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +        return defaultFactory.newInstance(prefix == null ? null : prefix.intern(), name.intern());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +            private final IndicesAnalysisService indicesAnalysisService;, +            public TokenizersBindings(MapBinder<String, TokenizerFactoryFactory> binder, Map<String, Settings> groupSettings, IndicesAnalysisService indicesAnalysisService) {, +                this.indicesAnalysisService = indicesAnalysisService;, +                    if (indicesAnalysisService != null && indicesAnalysisService.hasTokenizer(name)) {, +                        binder.addBinding(name).toInstance(indicesAnalysisService.tokenizerFactoryFactory(name));, +                    } else {, +        }, +            if (indicesAnalysisService != null && indicesAnalysisService.hasCharFilter(charFilterName)) {, +                charFilterBinder.addBinding(charFilterName).toInstance(indicesAnalysisService.charFilterFactoryFactory(charFilterName));, +            } else {, +        }, +            if (indicesAnalysisService != null && indicesAnalysisService.hasTokenFilter(tokenFilterName)) {, +                tokenFilterBinder.addBinding(tokenFilterName).toInstance(indicesAnalysisService.tokenFilterFactoryFactory(tokenFilterName));, +            } else {, +        }, +        AnalysisBinderProcessor.TokenizersBindings tokenizersBindings = new AnalysisBinderProcessor.TokenizersBindings(tokenizerBinder, tokenizersSettings, indicesAnalysisService);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/CharFilterFactory.java, +public interface CharFilterFactory {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +        return defaultFactory.newInstance(prefix == null ? null : prefix.intern(), name.intern());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +            private final IndicesAnalysisService indicesAnalysisService;, +            public TokenizersBindings(MapBinder<String, TokenizerFactoryFactory> binder, Map<String, Settings> groupSettings, IndicesAnalysisService indicesAnalysisService) {, +                this.indicesAnalysisService = indicesAnalysisService;, +                    if (indicesAnalysisService != null && indicesAnalysisService.hasTokenizer(name)) {, +                        binder.addBinding(name).toInstance(indicesAnalysisService.tokenizerFactoryFactory(name));, +                    } else {, +        }, +            if (indicesAnalysisService != null && indicesAnalysisService.hasCharFilter(charFilterName)) {, +                charFilterBinder.addBinding(charFilterName).toInstance(indicesAnalysisService.charFilterFactoryFactory(charFilterName));, +            } else {, +        }, +            if (indicesAnalysisService != null && indicesAnalysisService.hasTokenFilter(tokenFilterName)) {, +                tokenFilterBinder.addBinding(tokenFilterName).toInstance(indicesAnalysisService.tokenFilterFactoryFactory(tokenFilterName));, +            } else {, +        }, +        AnalysisBinderProcessor.TokenizersBindings tokenizersBindings = new AnalysisBinderProcessor.TokenizersBindings(tokenizerBinder, tokenizersSettings, indicesAnalysisService);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/CharFilterFactory.java, +public interface CharFilterFactory {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/LengthTokenFilterFactory.java, +        enablePositionIncrements = settings.getAsBoolean("enabled_position_increments", true);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +        return defaultFactory.newInstance(prefix == null ? null : prefix.intern(), name.intern());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +            private final IndicesAnalysisService indicesAnalysisService;, +            public TokenizersBindings(MapBinder<String, TokenizerFactoryFactory> binder, Map<String, Settings> groupSettings, IndicesAnalysisService indicesAnalysisService) {, +                this.indicesAnalysisService = indicesAnalysisService;, +                    if (indicesAnalysisService != null && indicesAnalysisService.hasTokenizer(name)) {, +                        binder.addBinding(name).toInstance(indicesAnalysisService.tokenizerFactoryFactory(name));, +                    } else {, +        }, +            if (indicesAnalysisService != null && indicesAnalysisService.hasCharFilter(charFilterName)) {, +                charFilterBinder.addBinding(charFilterName).toInstance(indicesAnalysisService.charFilterFactoryFactory(charFilterName));, +            } else {, +        }, +            if (indicesAnalysisService != null && indicesAnalysisService.hasTokenFilter(tokenFilterName)) {, +                tokenFilterBinder.addBinding(tokenFilterName).toInstance(indicesAnalysisService.tokenFilterFactoryFactory(tokenFilterName));, +            } else {, +        }, +        AnalysisBinderProcessor.TokenizersBindings tokenizersBindings = new AnalysisBinderProcessor.TokenizersBindings(tokenizerBinder, tokenizersSettings, indicesAnalysisService);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/CharFilterFactory.java, +public interface CharFilterFactory {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/LengthTokenFilterFactory.java, +        enablePositionIncrements = settings.getAsBoolean("enabled_position_increments", true);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/PreBuiltCharFilterFactoryFactory.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *]