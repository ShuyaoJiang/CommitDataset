[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.GetFiltersRequest;, +import org.elasticsearch.client.ml.job.util.PageParams;, +, +    static Request getFilter(GetFiltersRequest getFiltersRequest) {, +        String endpoint = new EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("ml"), +            .addPathPartAsIs("filters"), +            .addPathPart(getFiltersRequest.getFilterId()), +            .build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +        RequestConverters.Params params = new RequestConverters.Params(request);, +        if (getFiltersRequest.getSize() != null) {, +            params.putParam(PageParams.SIZE.getPreferredName(), getFiltersRequest.getSize().toString());, +        }, +        if (getFiltersRequest.getFrom() != null) {, +            params.putParam(PageParams.FROM.getPreferredName(), getFiltersRequest.getFrom().toString());, +        }, +        return request;, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.GetFiltersRequest;, +import org.elasticsearch.client.ml.job.util.PageParams;, +, +    static Request getFilter(GetFiltersRequest getFiltersRequest) {, +        String endpoint = new EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("ml"), +            .addPathPartAsIs("filters"), +            .addPathPart(getFiltersRequest.getFilterId()), +            .build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +        RequestConverters.Params params = new RequestConverters.Params(request);, +        if (getFiltersRequest.getSize() != null) {, +            params.putParam(PageParams.SIZE.getPreferredName(), getFiltersRequest.getSize().toString());, +        }, +        if (getFiltersRequest.getFrom() != null) {, +            params.putParam(PageParams.FROM.getPreferredName(), getFiltersRequest.getFrom().toString());, +        }, +        return request;, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MachineLearningClient.java, +import org.elasticsearch.client.ml.GetFiltersRequest;, +import org.elasticsearch.client.ml.GetFiltersResponse;, +    /**, +     * Gets Machine Learning Filters, +     * <p>, +     * For additional info, +     * see <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-filter.html">ML GET Filter documentation</a>, +     *, +     * @param request The request, +     * @param options Additional request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return GetFilterResponse with enclosed {@link org.elasticsearch.client.ml.job.config.MlFilter} objects, +     * @throws IOException when there is a serialization issue sending the request or receiving the response, +     */, +    public GetFiltersResponse getFilter(GetFiltersRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request,, +            MLRequestConverters::getFilter,, +            options,, +            GetFiltersResponse::fromXContent,, +            Collections.emptySet());, +    }, +, +    /**, +     * Gets Machine Learning Filters asynchronously and notifies listener on completion, +     * <p>, +     * For additional info, +     * see <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-filter.html">ML GET Filter documentation</a>, +     *, +     * @param request  The request, +     * @param options  Additional request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener Listener to be notified upon request completion, +     */, +    public void getFilterAsync(GetFiltersRequest request, RequestOptions options, ActionListener<GetFiltersResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request,, +            MLRequestConverters::getFilter,, +            options,, +            GetFiltersResponse::fromXContent,, +            listener,, +            Collections.emptySet());, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.GetFiltersRequest;, +import org.elasticsearch.client.ml.job.util.PageParams;, +, +    static Request getFilter(GetFiltersRequest getFiltersRequest) {, +        String endpoint = new EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("ml"), +            .addPathPartAsIs("filters"), +            .addPathPart(getFiltersRequest.getFilterId()), +            .build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +        RequestConverters.Params params = new RequestConverters.Params(request);, +        if (getFiltersRequest.getSize() != null) {, +            params.putParam(PageParams.SIZE.getPreferredName(), getFiltersRequest.getSize().toString());, +        }, +        if (getFiltersRequest.getFrom() != null) {, +            params.putParam(PageParams.FROM.getPreferredName(), getFiltersRequest.getFrom().toString());]