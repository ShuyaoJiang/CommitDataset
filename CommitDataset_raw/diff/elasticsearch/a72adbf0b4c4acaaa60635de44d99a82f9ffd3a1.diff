[+++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +     * @param engineConfig  The engine config which can be used to get the query cache and query cache policy from, +     *                      when creating a new index searcher, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +     * @param engineConfig  The engine config which can be used to get the query cache and query cache policy from, +     *                      when creating a new index searcher, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrappingService.java, +        IndexSearcher indexSearcher = wrapper.wrap(engineConfig, innerIndexSearcher);, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +     * @param engineConfig  The engine config which can be used to get the query cache and query cache policy from, +     *                      when creating a new index searcher, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrappingService.java, +        IndexSearcher indexSearcher = wrapper.wrap(engineConfig, innerIndexSearcher);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(GeoPointFieldMapper.CONTENT_TYPE, new GeoPointFieldMapper.TypeParser());, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +     * @param engineConfig  The engine config which can be used to get the query cache and query cache policy from, +     *                      when creating a new index searcher, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrappingService.java, +        IndexSearcher indexSearcher = wrapper.wrap(engineConfig, innerIndexSearcher);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(GeoPointFieldMapper.CONTENT_TYPE, new GeoPointFieldMapper.TypeParser());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperBuilders.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +     * @param engineConfig  The engine config which can be used to get the query cache and query cache policy from, +     *                      when creating a new index searcher, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrappingService.java, +        IndexSearcher indexSearcher = wrapper.wrap(engineConfig, innerIndexSearcher);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(GeoPointFieldMapper.CONTENT_TYPE, new GeoPointFieldMapper.TypeParser());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperBuilders.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +     * @param engineConfig  The engine config which can be used to get the query cache and query cache policy from, +     *                      when creating a new index searcher, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrappingService.java, +        IndexSearcher indexSearcher = wrapper.wrap(engineConfig, innerIndexSearcher);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(GeoPointFieldMapper.CONTENT_TYPE, new GeoPointFieldMapper.TypeParser());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperBuilders.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-mapper-murmur3",, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +     * @param engineConfig  The engine config which can be used to get the query cache and query cache policy from, +     *                      when creating a new index searcher, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrappingService.java, +        IndexSearcher indexSearcher = wrapper.wrap(engineConfig, innerIndexSearcher);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(GeoPointFieldMapper.CONTENT_TYPE, new GeoPointFieldMapper.TypeParser());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperBuilders.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-mapper-murmur3",, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java, +    public CardinalityAggregator(String name, ValuesSource valuesSource, int precision, ValueFormatter formatter,, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +     * @param engineConfig  The engine config which can be used to get the query cache and query cache policy from, +     *                      when creating a new index searcher, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrappingService.java, +        IndexSearcher indexSearcher = wrapper.wrap(engineConfig, innerIndexSearcher);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(GeoPointFieldMapper.CONTENT_TYPE, new GeoPointFieldMapper.TypeParser());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperBuilders.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-mapper-murmur3",, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java, +    public CardinalityAggregator(String name, ValuesSource valuesSource, int precision, ValueFormatter formatter,, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregatorFactory.java, +    CardinalityAggregatorFactory(String name, ValuesSourceConfig config, long precisionThreshold) {, +        return new CardinalityAggregator(name, null, precision(parent), config.formatter(), context, parent, pipelineAggregators, metaData);, +        return new CardinalityAggregator(name, valuesSource, precision(parent), config.formatter(), context, parent, pipelineAggregators,, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrapper.java, +     * @param engineConfig  The engine config which can be used to get the query cache and query cache policy from, +     *                      when creating a new index searcher, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/IndexSearcherWrappingService.java, +        IndexSearcher indexSearcher = wrapper.wrap(engineConfig, innerIndexSearcher);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(GeoPointFieldMapper.CONTENT_TYPE, new GeoPointFieldMapper.TypeParser());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperBuilders.java, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-mapper-murmur3",, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java, +    public CardinalityAggregator(String name, ValuesSource valuesSource, int precision, ValueFormatter formatter,, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregatorFactory.java, +    CardinalityAggregatorFactory(String name, ValuesSourceConfig config, long precisionThreshold) {, +        return new CardinalityAggregator(name, null, precision(parent), config.formatter(), context, parent, pipelineAggregators, metaData);, +        return new CardinalityAggregator(name, valuesSource, precision(parent), config.formatter(), context, parent, pipelineAggregators,, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityParser.java]