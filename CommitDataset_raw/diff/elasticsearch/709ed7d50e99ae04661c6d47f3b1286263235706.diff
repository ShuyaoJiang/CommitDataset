[+++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/WatcherService.java, +                Collection<TriggeredWatch> triggeredWatches = triggeredWatchStore.findTriggeredWatches(watches, clusterState);, +        Collection<TriggeredWatch> triggeredWatches = triggeredWatchStore.findTriggeredWatches(watches, clusterState);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/WatcherService.java, +                Collection<TriggeredWatch> triggeredWatches = triggeredWatchStore.findTriggeredWatches(watches, clusterState);, +        Collection<TriggeredWatch> triggeredWatches = triggeredWatchStore.findTriggeredWatches(watches, clusterState);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/execution/TriggeredWatchStore.java, +     * @param clusterState  The current cluster state, +    public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState) {, +        // non existing index, return immediately, +        IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(TriggeredWatchStore.INDEX_NAME, clusterState.metaData());, +        if (indexMetaData == null) {, +            return Collections.emptyList();, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/WatcherService.java, +                Collection<TriggeredWatch> triggeredWatches = triggeredWatchStore.findTriggeredWatches(watches, clusterState);, +        Collection<TriggeredWatch> triggeredWatches = triggeredWatchStore.findTriggeredWatches(watches, clusterState);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/execution/TriggeredWatchStore.java, +     * @param clusterState  The current cluster state, +    public Collection<TriggeredWatch> findTriggeredWatches(Collection<Watch> watches, ClusterState clusterState) {, +        // non existing index, return immediately, +        IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(TriggeredWatchStore.INDEX_NAME, clusterState.metaData());, +        if (indexMetaData == null) {, +            return Collections.emptyList();, +        }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/watcher/execution/TriggeredWatchStoreTests.java, +import org.elasticsearch.index.IndexNotFoundException;, +import static org.mockito.Mockito.verifyZeroInteractions;, +        ClusterState.Builder csBuilder = new ClusterState.Builder(new ClusterName("name"));, +        Collection<TriggeredWatch> triggeredWatches = triggeredWatchStore.findTriggeredWatches(Collections.emptyList(), csBuilder.build());, +        Collection<TriggeredWatch> triggeredWatches = triggeredWatchStore.findTriggeredWatches(watches, cs);, +    public void testTriggeredWatchesIndexDoesNotExistOnStartup() throws Exception {, +        ClusterState.Builder csBuilder = new ClusterState.Builder(new ClusterName("_name"));, +        ClusterState cs = csBuilder.build();, +        assertThat(triggeredWatchStore.validate(cs), is(true));, +        Watch watch = mock(Watch.class);, +        triggeredWatchStore.findTriggeredWatches(Collections.singletonList(watch), cs);, +        verifyZeroInteractions(client);, +    }, +, +    public void testIndexNotFoundButInMetaData() throws Exception {, +        ClusterState.Builder csBuilder = new ClusterState.Builder(new ClusterName("_name"));, +        MetaData.Builder metaDataBuilder = MetaData.builder(), +                .put(IndexMetaData.builder(TriggeredWatchStore.INDEX_NAME).settings(indexSettings));, +        csBuilder.metaData(metaDataBuilder);, +, +        ClusterState cs = csBuilder.build();, +        Watch watch = mock(Watch.class);, +, +        AdminClient adminClient = mock(AdminClient.class);, +        when(client.admin()).thenReturn(adminClient);, +        IndicesAdminClient indicesAdminClient = mock(IndicesAdminClient.class);, +        when(adminClient.indices()).thenReturn(indicesAdminClient);, +        PlainActionFuture<RefreshResponse> future = PlainActionFuture.newFuture();, +        when(indicesAdminClient.refresh(any())).thenReturn(future);, +        future.onFailure(new IndexNotFoundException(TriggeredWatchStore.INDEX_NAME));, +, +        Collection<TriggeredWatch> triggeredWatches = triggeredWatchStore.findTriggeredWatches(Collections.singletonList(watch), cs);, +        assertThat(triggeredWatches, hasSize(0));, +    }, +]