[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +                new NamedWriteableRegistry.Entry(Task.Status.class, JobTaskStatus.NAME, JobTaskStatus::new),, +                new NamedXContentRegistry.Entry(Task.Status.class, new ParseField(JobTaskStatus.NAME), JobTaskStatus::fromXContent), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +                new NamedWriteableRegistry.Entry(Task.Status.class, JobTaskStatus.NAME, JobTaskStatus::new),, +                new NamedXContentRegistry.Entry(Task.Status.class, new ParseField(JobTaskStatus.NAME), JobTaskStatus::fromXContent), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +            JobTaskStatus jobTaskState = (JobTaskStatus) task.getStatus();, +                return jobTaskState.getState();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +                new NamedWriteableRegistry.Entry(Task.Status.class, JobTaskStatus.NAME, JobTaskStatus::new),, +                new NamedXContentRegistry.Entry(Task.Status.class, new ParseField(JobTaskStatus.NAME), JobTaskStatus::fromXContent), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +            JobTaskStatus jobTaskState = (JobTaskStatus) task.getStatus();, +                return jobTaskState.getState();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +                JobTaskStatus jobState = (JobTaskStatus) persistentTask.getStatus();, +                switch (jobState.getState()) {, +                    JobTaskStatus jobTaskState = (JobTaskStatus) task.getStatus();, +                           jobTaskState.staleStatus(task); // previous executor node failed and, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +                new NamedWriteableRegistry.Entry(Task.Status.class, JobTaskStatus.NAME, JobTaskStatus::new),, +                new NamedXContentRegistry.Entry(Task.Status.class, new ParseField(JobTaskStatus.NAME), JobTaskStatus::fromXContent), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +            JobTaskStatus jobTaskState = (JobTaskStatus) task.getStatus();, +                return jobTaskState.getState();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +                JobTaskStatus jobState = (JobTaskStatus) persistentTask.getStatus();, +                switch (jobState.getState()) {, +                    JobTaskStatus jobTaskState = (JobTaskStatus) task.getStatus();, +                           jobTaskState.staleStatus(task); // previous executor node failed and, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +        JobTaskStatus taskStatus = (JobTaskStatus) jobTask.getStatus();, +        if (taskStatus == null || taskStatus.getState() != JobState.OPENED) {, +            String taskStatusAsString = taskStatus == null ? "null" : taskStatus.getState().toString();, +                    "] state is [" + taskStatusAsString +  "] while state [" + JobState.OPENED + "] is required";, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +                new NamedWriteableRegistry.Entry(Task.Status.class, JobTaskStatus.NAME, JobTaskStatus::new),, +                new NamedXContentRegistry.Entry(Task.Status.class, new ParseField(JobTaskStatus.NAME), JobTaskStatus::fromXContent), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +            JobTaskStatus jobTaskState = (JobTaskStatus) task.getStatus();, +                return jobTaskState.getState();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +                JobTaskStatus jobState = (JobTaskStatus) persistentTask.getStatus();, +                switch (jobState.getState()) {, +                    JobTaskStatus jobTaskState = (JobTaskStatus) task.getStatus();, +                           jobTaskState.staleStatus(task); // previous executor node failed and, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +        JobTaskStatus taskStatus = (JobTaskStatus) jobTask.getStatus();, +        if (taskStatus == null || taskStatus.getState() != JobState.OPENED) {, +            String taskStatusAsString = taskStatus == null ? "null" : taskStatus.getState().toString();, +                    "] state is [" + taskStatusAsString +  "] while state [" + JobState.OPENED + "] is required";, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/JobState.java, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.xcontent.ToXContent;, +public enum JobState implements ToXContent, Writeable {, +        builder.value(name().toLowerCase(Locale.ROOT));, +        return true;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +                new NamedWriteableRegistry.Entry(Task.Status.class, JobTaskStatus.NAME, JobTaskStatus::new),, +                new NamedXContentRegistry.Entry(Task.Status.class, new ParseField(JobTaskStatus.NAME), JobTaskStatus::fromXContent), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +            JobTaskStatus jobTaskState = (JobTaskStatus) task.getStatus();, +                return jobTaskState.getState();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +                JobTaskStatus jobState = (JobTaskStatus) persistentTask.getStatus();, +                switch (jobState.getState()) {, +                    JobTaskStatus jobTaskState = (JobTaskStatus) task.getStatus();, +                           jobTaskState.staleStatus(task); // previous executor node failed and, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +        JobTaskStatus taskStatus = (JobTaskStatus) jobTask.getStatus();, +        if (taskStatus == null || taskStatus.getState() != JobState.OPENED) {, +            String taskStatusAsString = taskStatus == null ? "null" : taskStatus.getState().toString();, +                    "] state is [" + taskStatusAsString +  "] while state [" + JobState.OPENED + "] is required";, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/JobState.java, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.xcontent.ToXContent;, +public enum JobState implements ToXContent, Writeable {, +        builder.value(name().toLowerCase(Locale.ROOT));, +        return true;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/JobTaskStatus.java, +/*]