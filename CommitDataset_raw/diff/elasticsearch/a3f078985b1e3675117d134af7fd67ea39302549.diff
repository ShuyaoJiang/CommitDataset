[+++ b/dev-tools/tests.policy, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp", "read,write";, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp${/}-", "read,write,delete";, +++ b/dev-tools/tests.policy, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp", "read,write";, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp${/}-", "read,write,delete";, +++ b/pom.xml, +                                <!-- we use './temp' since this is per JVM and tests are forbidden from writing to CWD -->, +                                <java.io.tmpdir>./temp</java.io.tmpdir>, +++ b/dev-tools/tests.policy, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp", "read,write";, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp${/}-", "read,write,delete";, +++ b/pom.xml, +                                <!-- we use './temp' since this is per JVM and tests are forbidden from writing to CWD -->, +                                <java.io.tmpdir>./temp</java.io.tmpdir>, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +        if (!file.toAbsolutePath().startsWith(siteFile.toAbsolutePath())) {, +++ b/dev-tools/tests.policy, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp", "read,write";, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp${/}-", "read,write,delete";, +++ b/pom.xml, +                                <!-- we use './temp' since this is per JVM and tests are forbidden from writing to CWD -->, +                                <java.io.tmpdir>./temp</java.io.tmpdir>, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +        if (!file.toAbsolutePath().startsWith(siteFile.toAbsolutePath())) {, +++ b/src/test/java/org/elasticsearch/client/transport/TransportClientTests.java, +                .put("path.home", newTempDirPath()), +++ b/dev-tools/tests.policy, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp", "read,write";, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp${/}-", "read,write,delete";, +++ b/pom.xml, +                                <!-- we use './temp' since this is per JVM and tests are forbidden from writing to CWD -->, +                                <java.io.tmpdir>./temp</java.io.tmpdir>, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +        if (!file.toAbsolutePath().startsWith(siteFile.toAbsolutePath())) {, +++ b/src/test/java/org/elasticsearch/client/transport/TransportClientTests.java, +                .put("path.home", newTempDirPath()), +++ b/src/test/java/org/elasticsearch/cluster/routing/RoutingBackwardCompatibilityTests.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import java.nio.file.Path;, +        Path baseDir = newTempDirPath();, +        Node node = new Node(ImmutableSettings.builder().put("path.home", baseDir.toString()).build(), false);, +++ b/dev-tools/tests.policy, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp", "read,write";, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp${/}-", "read,write,delete";, +++ b/pom.xml, +                                <!-- we use './temp' since this is per JVM and tests are forbidden from writing to CWD -->, +                                <java.io.tmpdir>./temp</java.io.tmpdir>, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +        if (!file.toAbsolutePath().startsWith(siteFile.toAbsolutePath())) {, +++ b/src/test/java/org/elasticsearch/client/transport/TransportClientTests.java, +                .put("path.home", newTempDirPath()), +++ b/src/test/java/org/elasticsearch/cluster/routing/RoutingBackwardCompatibilityTests.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import java.nio.file.Path;, +        Path baseDir = newTempDirPath();, +        Node node = new Node(ImmutableSettings.builder().put("path.home", baseDir.toString()).build(), false);, +++ b/src/test/java/org/elasticsearch/gateway/RecoveryFromGatewayTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.not;, +import static org.hamcrest.Matchers.notNullValue;, +        final String node_1 = internalCluster().startNode(settingsBuilder().put("path.data", newTempDirPath()).build());, +        internalCluster().startNode(settingsBuilder().put("path.data", newTempDirPath()).build());, +++ b/dev-tools/tests.policy, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp", "read,write";, +  permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp${/}-", "read,write,delete";, +++ b/pom.xml, +                                <!-- we use './temp' since this is per JVM and tests are forbidden from writing to CWD -->, +                                <java.io.tmpdir>./temp</java.io.tmpdir>, +++ b/src/main/java/org/elasticsearch/http/HttpServer.java, +        if (!file.toAbsolutePath().startsWith(siteFile.toAbsolutePath())) {, +++ b/src/test/java/org/elasticsearch/client/transport/TransportClientTests.java, +                .put("path.home", newTempDirPath()), +++ b/src/test/java/org/elasticsearch/cluster/routing/RoutingBackwardCompatibilityTests.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import java.nio.file.Path;, +        Path baseDir = newTempDirPath();, +        Node node = new Node(ImmutableSettings.builder().put("path.home", baseDir.toString()).build(), false);, +++ b/src/test/java/org/elasticsearch/gateway/RecoveryFromGatewayTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.not;, +import static org.hamcrest.Matchers.notNullValue;, +        final String node_1 = internalCluster().startNode(settingsBuilder().put("path.data", newTempDirPath()).build());, +        internalCluster().startNode(settingsBuilder().put("path.data", newTempDirPath()).build());, +++ b/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +import org.apache.lucene.index.CorruptIndexException;, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.index.IndexDeletionPolicy;, +import org.apache.lucene.index.IndexWriterConfig;, +import org.apache.lucene.index.LiveIndexWriterConfig;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.util.LuceneTestCase;, +import static com.carrotsearch.randomizedtesting.RandomizedTest.randomBoolean;, +import static com.carrotsearch.randomizedtesting.RandomizedTest.randomDouble;, +import static com.carrotsearch.randomizedtesting.RandomizedTest.randomIntBetween;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.notNullValue;]