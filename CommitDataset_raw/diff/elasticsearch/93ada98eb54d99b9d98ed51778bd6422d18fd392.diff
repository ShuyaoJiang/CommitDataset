[+++ /dev/null, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +                            apiName.startsWith("migration.") == false) {, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +                            apiName.startsWith("migration.") == false) {, +++ b/docs/reference/index.asciidoc, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +                            apiName.startsWith("migration.") == false) {, +++ b/docs/reference/index.asciidoc, +++ b/docs/reference/rest-api/info.asciidoc, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +++ /dev/null, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +                            apiName.startsWith("migration.") == false) {, +++ b/docs/reference/index.asciidoc, +++ b/docs/reference/rest-api/info.asciidoc, +++ b/libs/core/src/main/java/org/elasticsearch/common/CharArrays.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common;, +, +import java.nio.ByteBuffer;, +import java.nio.CharBuffer;, +import java.nio.charset.StandardCharsets;, +import java.util.Arrays;, +import java.util.Objects;, +, +/**, + * Helper class similar to Arrays to handle conversions for Char arrays, + */, +public final class CharArrays {, +, +    private CharArrays() {}, +, +    /**, +     * Decodes the provided byte[] to a UTF-8 char[]. This is done while avoiding, +     * conversions to String. The provided byte[] is not modified by this method, so, +     * the caller needs to take care of clearing the value if it is sensitive., +     */, +    public static char[] utf8BytesToChars(byte[] utf8Bytes) {, +        final ByteBuffer byteBuffer = ByteBuffer.wrap(utf8Bytes);, +        final CharBuffer charBuffer = StandardCharsets.UTF_8.decode(byteBuffer);, +        final char[] chars;, +        if (charBuffer.hasArray()) {, +            // there is no guarantee that the char buffers backing array is the right size, +            // so we need to make a copy, +            chars = Arrays.copyOfRange(charBuffer.array(), charBuffer.position(), charBuffer.limit());, +            Arrays.fill(charBuffer.array(), (char) 0); // clear sensitive data, +        } else {, +            final int length = charBuffer.limit() - charBuffer.position();, +            chars = new char[length];]