[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +        return Strings.toString(this);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +        return Strings.toString(this);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +        return Strings.toString(this);, +++ /dev/null, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequest.java, +public class Netty4HttpRequest extends RestRequest {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +        return Strings.toString(this);, +++ /dev/null, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequest.java, +public class Netty4HttpRequest extends RestRequest {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +    protected static class HttpChannelHandler extends ChannelInitializer<Channel> {, +        protected HttpChannelHandler(, +        protected void initChannel(Channel ch) throws Exception {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +        return Strings.toString(this);, +++ /dev/null, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequest.java, +public class Netty4HttpRequest extends RestRequest {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +    protected static class HttpChannelHandler extends ChannelInitializer<Channel> {, +        protected HttpChannelHandler(, +        protected void initChannel(Channel ch) throws Exception {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +import io.netty.channel.ChannelHandler;, +        bootstrap.handler(getClientChannelInitializer());, +        serverBootstrap.childHandler(getServerChannelInitializer(name, settings));, +    protected ChannelHandler getServerChannelInitializer(String name, Settings settings) {, +        return new ServerChannelInitializer(name, settings);, +    }, +, +    protected ChannelHandler getClientChannelInitializer() {, +        return new ClientChannelInitializer();, +    }, +, +        NodeChannels nodeChannels = new NodeChannels(channels, channels, channels, channels, channels);, +        onAfterChannelsConnected(nodeChannels);, +        return nodeChannels;, +            onAfterChannelsConnected(nodeChannels);, +    /**, +     * Allows for logic to be executed after a connection has been made on all channels. While this method is being executed, the node is, +     * not listed as being connected to., +     * @param nodeChannels the {@link NodeChannels} that have been connected, +     */, +    protected void onAfterChannelsConnected(NodeChannels nodeChannels) {, +    }, +, +    protected class ClientChannelInitializer extends ChannelInitializer<Channel> {, +, +        @Override, +        protected void initChannel(Channel ch) throws Exception {, +            ch.pipeline().addLast("size", new Netty4SizeHeaderFrameDecoder());, +            // using a dot as a prefix means this cannot come from any settings parsed, +            ch.pipeline().addLast("dispatcher", new Netty4MessageChannelHandler(Netty4Transport.this, ".client"));, +        }, +, +    }, +, +    protected class ServerChannelInitializer extends ChannelInitializer<Channel> {, +, +        protected final String name;, +        protected final Settings settings;, +, +        protected ServerChannelInitializer(String name, Settings settings) {, +            this.name = name;, +            this.settings = settings;, +        }, +, +        @Override, +        protected void initChannel(Channel ch) throws Exception {, +            ch.pipeline().addLast("open_channels", Netty4Transport.this.serverOpenChannels);, +            ch.pipeline().addLast("size", new Netty4SizeHeaderFrameDecoder());, +            ch.pipeline().addLast("dispatcher", new Netty4MessageChannelHandler(Netty4Transport.this, name));, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +        return Strings.toString(this);, +++ /dev/null, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpRequest.java, +public class Netty4HttpRequest extends RestRequest {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +    protected static class HttpChannelHandler extends ChannelInitializer<Channel> {, +        protected HttpChannelHandler(, +        protected void initChannel(Channel ch) throws Exception {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +import io.netty.channel.ChannelHandler;, +        bootstrap.handler(getClientChannelInitializer());, +        serverBootstrap.childHandler(getServerChannelInitializer(name, settings));, +    protected ChannelHandler getServerChannelInitializer(String name, Settings settings) {, +        return new ServerChannelInitializer(name, settings);, +    }, +, +    protected ChannelHandler getClientChannelInitializer() {, +        return new ClientChannelInitializer();]