[+++ b/plugins/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java, +        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));, +        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));, +        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));, +        Map<String, Object> config1 = new HashMap<>();, +        config1.put("field", "_field");, +        config1.put("properties", Collections.singletonList("invalid"));, +        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config1));, +        Map<String, Object> config2 = new HashMap<>();, +        config2.put("field", "_field");, +        config2.put("properties", "invalid");, +        e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config2));, +++ b/plugins/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorFactoryTests.java, +        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));, +        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));, +        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));, +        Map<String, Object> config1 = new HashMap<>();, +        config1.put("field", "_field");, +        config1.put("properties", Collections.singletonList("invalid"));, +        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config1));, +        Map<String, Object> config2 = new HashMap<>();, +        config2.put("field", "_field");, +        config2.put("properties", "invalid");, +        e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config2));, +++ b/plugins/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java, +        Exception e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));, +        assertThat(e.getMessage(), containsString("not an IP string literal"));]