[+++ b/src/main/java/org/elasticsearch/index/query/AndFilterParser.java, +            // no filters provided, this should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/AndFilterParser.java, +            // no filters provided, this should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/BoolFilterParser.java, +            // no filters provided, it should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/AndFilterParser.java, +            // no filters provided, this should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/BoolFilterParser.java, +            // no filters provided, it should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/ExistsFilterParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +            // no fields exists, so we should not match anything, +            return Queries.MATCH_NO_FILTER;, +++ b/src/main/java/org/elasticsearch/index/query/AndFilterParser.java, +            // no filters provided, this should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/BoolFilterParser.java, +            // no filters provided, it should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/ExistsFilterParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +            // no fields exists, so we should not match anything, +            return Queries.MATCH_NO_FILTER;, +++ b/src/main/java/org/elasticsearch/index/query/FilterParser.java, +     * <p/>, +     * The parser should return null value when it should be ignored, regardless under which context, +     * it is. For example, an and filter with "and []" (no clauses), should be ignored regardless if, +     * it exists within a must clause or a must_not bool clause (that is why returning MATCH_ALL will, +     * not be good, since it will not match anything when returned within a must_not clause)., +++ b/src/main/java/org/elasticsearch/index/query/AndFilterParser.java, +            // no filters provided, this should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/BoolFilterParser.java, +            // no filters provided, it should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/ExistsFilterParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +            // no fields exists, so we should not match anything, +            return Queries.MATCH_NO_FILTER;, +++ b/src/main/java/org/elasticsearch/index/query/FilterParser.java, +     * <p/>, +     * The parser should return null value when it should be ignored, regardless under which context, +     * it is. For example, an and filter with "and []" (no clauses), should be ignored regardless if, +     * it exists within a must clause or a must_not bool clause (that is why returning MATCH_ALL will, +     * not be good, since it will not match anything when returned within a must_not clause)., +++ b/src/main/java/org/elasticsearch/index/query/FilteredQueryParser.java, +                // even if the filter is not found, and its null, we should simply ignore it, and go, +                // by the query, +                return query;, +++ b/src/main/java/org/elasticsearch/index/query/AndFilterParser.java, +            // no filters provided, this should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/BoolFilterParser.java, +            // no filters provided, it should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/ExistsFilterParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +            // no fields exists, so we should not match anything, +            return Queries.MATCH_NO_FILTER;, +++ b/src/main/java/org/elasticsearch/index/query/FilterParser.java, +     * <p/>, +     * The parser should return null value when it should be ignored, regardless under which context, +     * it is. For example, an and filter with "and []" (no clauses), should be ignored regardless if, +     * it exists within a must clause or a must_not bool clause (that is why returning MATCH_ALL will, +     * not be good, since it will not match anything when returned within a must_not clause)., +++ b/src/main/java/org/elasticsearch/index/query/FilteredQueryParser.java, +                // even if the filter is not found, and its null, we should simply ignore it, and go, +                // by the query, +                return query;, +++ b/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +    /**, +     * Parses an inner filter, returning null if the filter should be ignored., +     */, +++ b/src/main/java/org/elasticsearch/index/query/AndFilterParser.java, +            // no filters provided, this should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/BoolFilterParser.java, +            // no filters provided, it should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/ExistsFilterParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +            // no fields exists, so we should not match anything, +            return Queries.MATCH_NO_FILTER;, +++ b/src/main/java/org/elasticsearch/index/query/FilterParser.java, +     * <p/>, +     * The parser should return null value when it should be ignored, regardless under which context, +     * it is. For example, an and filter with "and []" (no clauses), should be ignored regardless if, +     * it exists within a must clause or a must_not bool clause (that is why returning MATCH_ALL will, +     * not be good, since it will not match anything when returned within a must_not clause)., +++ b/src/main/java/org/elasticsearch/index/query/FilteredQueryParser.java, +                // even if the filter is not found, and its null, we should simply ignore it, and go, +                // by the query, +                return query;, +++ b/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +    /**, +     * Parses an inner filter, returning null if the filter should be ignored., +     */, +++ b/src/main/java/org/elasticsearch/index/query/MissingFilterParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +            if (existence) {, +                // if we ask for existence of fields, and we found none, then we should match on all, +                return Queries.MATCH_ALL_FILTER;, +            }, +++ b/src/main/java/org/elasticsearch/index/query/AndFilterParser.java, +            // no filters provided, this should be ignored upstream, +++ b/src/main/java/org/elasticsearch/index/query/BoolFilterParser.java, +            // no filters provided, it should be ignored upstream]