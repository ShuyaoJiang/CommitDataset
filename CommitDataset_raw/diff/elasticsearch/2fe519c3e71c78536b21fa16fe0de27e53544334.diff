[+++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java, +        if (minimumShouldMatch != null && query instanceof BooleanQuery) {, +            query = Queries.applyMinimumShouldMatch((BooleanQuery) query, minimumShouldMatch);, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java, +        if (minimumShouldMatch != null && query instanceof BooleanQuery) {, +            query = Queries.applyMinimumShouldMatch((BooleanQuery) query, minimumShouldMatch);, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +                QueryBuilder deserializedQuery = prototype.readFrom(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java, +        if (minimumShouldMatch != null && query instanceof BooleanQuery) {, +            query = Queries.applyMinimumShouldMatch((BooleanQuery) query, minimumShouldMatch);, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +                QueryBuilder deserializedQuery = prototype.readFrom(in);, +++ b/core/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java, +import static org.hamcrest.Matchers.greaterThan;, +        SimpleQueryStringBuilder result = new SimpleQueryStringBuilder(randomAsciiOfLengthBetween(1, 10));, +                flagSet.add(randomFrom(SimpleQueryStringFlag.values()));, +                fields.put(randomAsciiOfLengthBetween(1, 10), AbstractQueryBuilder.DEFAULT_BOOST);, +                fields.put(randomBoolean() ? STRING_FIELD_NAME : randomAsciiOfLengthBetween(1, 10), 2.0f / randomIntBetween(1, 20));, +, +            assertThat(luceneQuery, instanceOf(TermQuery.class));, +            TermQuery termQuery = (TermQuery) luceneQuery;, +        } else if (queryBuilder.fields().size() > 1) {, +            assertThat(boolQuery.clauses().size(), equalTo(queryBuilder.fields().size()));, +            Iterator<String> fields = queryBuilder.fields().keySet().iterator();, +            for (BooleanClause booleanClause : boolQuery) {, +                assertThat(termQuery.getTerm().field(), equalTo(fields.next()));, +                assertThat(termQuery.getTerm().text().toLowerCase(Locale.ROOT), equalTo(queryBuilder.value().toLowerCase(Locale.ROOT)));, +                assertThat(boolQuery.getMinimumNumberShouldMatch(), greaterThan(0));, +        } else if (queryBuilder.fields().size() <= 1) {, +            assertTrue("Query should have been TermQuery but was " + query.getClass().getName(), query instanceof TermQuery);, +, +            TermQuery termQuery = (TermQuery) query;, +            String field;, +            if (queryBuilder.fields().size() == 0) {, +                field = MetaData.ALL;, +            } else {, +                field = queryBuilder.fields().keySet().iterator().next();, +            assertThat(termQuery.getTerm().field(), equalTo(field));, +            assertThat(termQuery.getTerm().text().toLowerCase(Locale.ROOT), equalTo(queryBuilder.value().toLowerCase(Locale.ROOT)));, +        } else {, +            fail("Encountered lucene query type we do not have a validation implementation for in our " + SimpleQueryStringBuilderTests.class.getSimpleName());, +        assertThat(query, instanceOf(TermQuery.class));, +        assertThat(query.getBoost(), equalTo(5f));, +        assertThat(query, instanceOf(TermQuery.class));, +        assertThat(query.getBoost(), equalTo(10f));, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +        return super.simplify(bq.build());, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java, +        if (minimumShouldMatch != null && query instanceof BooleanQuery) {, +            query = Queries.applyMinimumShouldMatch((BooleanQuery) query, minimumShouldMatch);, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +                QueryBuilder deserializedQuery = prototype.readFrom(in);, +++ b/core/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java, +import static org.hamcrest.Matchers.greaterThan;, +        SimpleQueryStringBuilder result = new SimpleQueryStringBuilder(randomAsciiOfLengthBetween(1, 10));, +                flagSet.add(randomFrom(SimpleQueryStringFlag.values()));, +                fields.put(randomAsciiOfLengthBetween(1, 10), AbstractQueryBuilder.DEFAULT_BOOST);, +                fields.put(randomBoolean() ? STRING_FIELD_NAME : randomAsciiOfLengthBetween(1, 10), 2.0f / randomIntBetween(1, 20));, +, +            assertThat(luceneQuery, instanceOf(TermQuery.class));, +            TermQuery termQuery = (TermQuery) luceneQuery;, +        } else if (queryBuilder.fields().size() > 1) {, +            assertThat(boolQuery.clauses().size(), equalTo(queryBuilder.fields().size()));, +            Iterator<String> fields = queryBuilder.fields().keySet().iterator();, +            for (BooleanClause booleanClause : boolQuery) {, +                assertThat(termQuery.getTerm().field(), equalTo(fields.next()));, +                assertThat(termQuery.getTerm().text().toLowerCase(Locale.ROOT), equalTo(queryBuilder.value().toLowerCase(Locale.ROOT)));, +                assertThat(boolQuery.getMinimumNumberShouldMatch(), greaterThan(0));, +        } else if (queryBuilder.fields().size() <= 1) {, +            assertTrue("Query should have been TermQuery but was " + query.getClass().getName(), query instanceof TermQuery);, +, +            TermQuery termQuery = (TermQuery) query;, +            String field;, +            if (queryBuilder.fields().size() == 0) {, +                field = MetaData.ALL;, +            } else {]