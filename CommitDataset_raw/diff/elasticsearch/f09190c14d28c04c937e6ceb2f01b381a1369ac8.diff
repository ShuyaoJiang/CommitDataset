[+++ b/docs/reference/migration/migrate_7_0/aggregations.asciidoc, +, +[float], +==== Make metric aggregation script parameters `reduce_script` and `combine_script` mandatory, +, +The metric aggregation has been changed to require these two script parameters to ensure users are, +explicitly defining how their data is processed., +++ b/docs/reference/migration/migrate_7_0/aggregations.asciidoc, +, +[float], +==== Make metric aggregation script parameters `reduce_script` and `combine_script` mandatory, +, +The metric aggregation has been changed to require these two script parameters to ensure users are, +explicitly defining how their data is processed., +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregationBuilder.java, +        if (combineScript == null) {, +            throw new IllegalArgumentException("[combineScript] must not be null: [" + name + "]");, +        }, +, +        if(reduceScript == null) {, +            throw new IllegalArgumentException("[reduceScript] must not be null: [" + name + "]");, +        }, +, +, +, +, +++ b/docs/reference/migration/migrate_7_0/aggregations.asciidoc, +, +[float], +==== Make metric aggregation script parameters `reduce_script` and `combine_script` mandatory, +, +The metric aggregation has been changed to require these two script parameters to ensure users are, +explicitly defining how their data is processed., +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregationBuilder.java, +        if (combineScript == null) {, +            throw new IllegalArgumentException("[combineScript] must not be null: [" + name + "]");, +        }, +, +        if(reduceScript == null) {, +            throw new IllegalArgumentException("[reduceScript] must not be null: [" + name + "]");, +        }, +, +, +, +, +++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/ScriptedMetricAggregatorTests.java, +    private static final Script REDUCE_SCRIPT = new Script(ScriptType.INLINE, MockScriptEngine.NAME, "reduceScript",, +        Collections.emptyMap());, +    private static final Script COMBINE_SCRIPT_NOOP = new Script(ScriptType.INLINE, MockScriptEngine.NAME, "combineScriptNoop",, +        Collections.emptyMap());, +        SCRIPTS.put("combineScriptNoop", params -> {, +            Map<String, Object> state = (Map<String, Object>) params.get("state");, +            return state;, +        });, +        SCRIPTS.put("reduceScript", params -> {, +            Map<String, Object> state = (Map<String, Object>) params.get("state");, +            return state;, +        });, +                aggregationBuilder.mapScript(MAP_SCRIPT).combineScript(COMBINE_SCRIPT_NOOP).reduceScript(REDUCE_SCRIPT);, +                aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT).reduceScript(REDUCE_SCRIPT);, +                IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,, +                    () -> search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder));, +                assertEquals(exception.getMessage(), "[combineScript] must not be null: [scriptedMetric]");, +            }, +        }, +    }, +, +    public void testScriptedMetricWithoutReduce() throws IOException {, +        try (Directory directory = newDirectory()) {, +            int numDocs = randomInt(100);, +            try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {, +                for (int i = 0; i < numDocs; i++) {, +                    indexWriter.addDocument(singleton(new SortedNumericDocValuesField("number", i)));, +                }, +            }, +            try (IndexReader indexReader = DirectoryReader.open(directory)) {, +                ScriptedMetricAggregationBuilder aggregationBuilder = new ScriptedMetricAggregationBuilder(AGG_NAME);, +                aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT).combineScript(COMBINE_SCRIPT);, +                IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,, +                    () -> search(newSearcher(indexReader, true, true), new MatchAllDocsQuery(), aggregationBuilder));, +                assertEquals(exception.getMessage(), "[reduceScript] must not be null: [scriptedMetric]");, +                aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT), +                    .combineScript(COMBINE_SCRIPT).reduceScript(REDUCE_SCRIPT);, +                aggregationBuilder.initScript(INIT_SCRIPT_SCORE).mapScript(MAP_SCRIPT_SCORE), +                    .combineScript(COMBINE_SCRIPT_SCORE).reduceScript(REDUCE_SCRIPT);, +                aggregationBuilder.initScript(INIT_SCRIPT_PARAMS).mapScript(MAP_SCRIPT_PARAMS), +                    .combineScript(COMBINE_SCRIPT_PARAMS).reduceScript(REDUCE_SCRIPT);, +                aggregationBuilder.params(aggParams).initScript(INIT_SCRIPT_PARAMS).mapScript(MAP_SCRIPT_PARAMS), +                    .combineScript(COMBINE_SCRIPT_PARAMS).reduceScript(REDUCE_SCRIPT);, +                aggregationBuilder.initScript(INIT_SCRIPT_SELF_REF).mapScript(MAP_SCRIPT), +                    .combineScript(COMBINE_SCRIPT_PARAMS).reduceScript(REDUCE_SCRIPT);, +                aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT_SELF_REF), +                    .combineScript(COMBINE_SCRIPT_PARAMS).reduceScript(REDUCE_SCRIPT);, +                aggregationBuilder.initScript(INIT_SCRIPT).mapScript(MAP_SCRIPT), +                    .combineScript(COMBINE_SCRIPT_SELF_REF).reduceScript(REDUCE_SCRIPT);, +++ b/docs/reference/migration/migrate_7_0/aggregations.asciidoc, +, +[float], +==== Make metric aggregation script parameters `reduce_script` and `combine_script` mandatory, +]