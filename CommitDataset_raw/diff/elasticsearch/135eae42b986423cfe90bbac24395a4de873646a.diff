[+++ b/core/src/main/java/org/elasticsearch/action/search/FetchSearchPhase.java, +            sortedDocs, reducedQueryPhase, fetchResultsArr.asList(), fetchResultsArr::get);, +++ b/core/src/main/java/org/elasticsearch/action/search/FetchSearchPhase.java, +            sortedDocs, reducedQueryPhase, fetchResultsArr.asList(), fetchResultsArr::get);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +import java.util.Collection;, +import java.util.function.IntFunction;, +public final class SearchPhaseController extends AbstractComponent {, +    public AggregatedDfs aggregateDfs(Collection<DfsSearchResult> results) {, +    public ScoreDoc[] sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results, int numShards) throws IOException {, +            result = results.stream().findFirst().get().queryResult();, +            result = canOptimize ? resultToOptimize : results.stream().findFirst().get().queryResult();, +                                                Collection<? extends SearchPhaseResult> results, T empytTopDocs) {, +                                        Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {, +        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, sortedDocs, fetchResults, resultsLookup);, +                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex);, +                               Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {, +                SearchPhaseResult fetchResultProvider = resultsLookup.apply(shardDoc.shardIndex);, +    public ReducedQueryPhase reducedQueryPhase(List<? extends SearchPhaseResult> queryResults) {, +    private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,, +        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult();, +         * @see #merge(boolean, ScoreDoc[], ReducedQueryPhase, Collection, IntFunction), +++ b/core/src/main/java/org/elasticsearch/action/search/FetchSearchPhase.java, +            sortedDocs, reducedQueryPhase, fetchResultsArr.asList(), fetchResultsArr::get);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +import java.util.Collection;, +import java.util.function.IntFunction;, +public final class SearchPhaseController extends AbstractComponent {, +    public AggregatedDfs aggregateDfs(Collection<DfsSearchResult> results) {, +    public ScoreDoc[] sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results, int numShards) throws IOException {, +            result = results.stream().findFirst().get().queryResult();, +            result = canOptimize ? resultToOptimize : results.stream().findFirst().get().queryResult();, +                                                Collection<? extends SearchPhaseResult> results, T empytTopDocs) {, +                                        Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {, +        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, sortedDocs, fetchResults, resultsLookup);, +                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex);, +                               Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {, +                SearchPhaseResult fetchResultProvider = resultsLookup.apply(shardDoc.shardIndex);, +    public ReducedQueryPhase reducedQueryPhase(List<? extends SearchPhaseResult> queryResults) {, +    private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,, +        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult();, +         * @see #merge(boolean, ScoreDoc[], ReducedQueryPhase, Collection, IntFunction), +++ b/core/src/main/java/org/elasticsearch/action/search/SearchScrollQueryAndFetchAsyncAction.java, +        List<QueryFetchSearchResult> queryFetchSearchResults = queryFetchResults.asList();, +            searchPhaseController.reducedQueryPhase(queryFetchSearchResults), queryFetchSearchResults, queryFetchResults::get);, +++ b/core/src/main/java/org/elasticsearch/action/search/FetchSearchPhase.java, +            sortedDocs, reducedQueryPhase, fetchResultsArr.asList(), fetchResultsArr::get);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +import java.util.Collection;, +import java.util.function.IntFunction;, +public final class SearchPhaseController extends AbstractComponent {, +    public AggregatedDfs aggregateDfs(Collection<DfsSearchResult> results) {, +    public ScoreDoc[] sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results, int numShards) throws IOException {, +            result = results.stream().findFirst().get().queryResult();, +            result = canOptimize ? resultToOptimize : results.stream().findFirst().get().queryResult();, +                                                Collection<? extends SearchPhaseResult> results, T empytTopDocs) {, +                                        Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {, +        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, sortedDocs, fetchResults, resultsLookup);, +                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex);, +                               Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {, +                SearchPhaseResult fetchResultProvider = resultsLookup.apply(shardDoc.shardIndex);, +    public ReducedQueryPhase reducedQueryPhase(List<? extends SearchPhaseResult> queryResults) {, +    private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,, +        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult();, +         * @see #merge(boolean, ScoreDoc[], ReducedQueryPhase, Collection, IntFunction), +++ b/core/src/main/java/org/elasticsearch/action/search/SearchScrollQueryAndFetchAsyncAction.java, +        List<QueryFetchSearchResult> queryFetchSearchResults = queryFetchResults.asList();, +            searchPhaseController.reducedQueryPhase(queryFetchSearchResults), queryFetchSearchResults, queryFetchResults::get);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchScrollQueryThenFetchAsyncAction.java, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(true, sortedShardDocs, queryPhase,, +                fetchResults.asList(), fetchResults::get);, +++ b/core/src/main/java/org/elasticsearch/action/search/FetchSearchPhase.java, +            sortedDocs, reducedQueryPhase, fetchResultsArr.asList(), fetchResultsArr::get);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +import java.util.Collection;, +import java.util.function.IntFunction;, +public final class SearchPhaseController extends AbstractComponent {, +    public AggregatedDfs aggregateDfs(Collection<DfsSearchResult> results) {, +    public ScoreDoc[] sortDocs(boolean ignoreFrom, Collection<? extends SearchPhaseResult> results, int numShards) throws IOException {, +            result = results.stream().findFirst().get().queryResult();, +            result = canOptimize ? resultToOptimize : results.stream().findFirst().get().queryResult();, +                                                Collection<? extends SearchPhaseResult> results, T empytTopDocs) {, +                                        Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {, +        SearchHits hits = getHits(reducedQueryPhase, ignoreFrom, sortedDocs, fetchResults, resultsLookup);, +                        SearchPhaseResult searchResultProvider = resultsLookup.apply(shardDoc.shardIndex);, +                               Collection<? extends SearchPhaseResult> fetchResults, IntFunction<SearchPhaseResult> resultsLookup) {, +                SearchPhaseResult fetchResultProvider = resultsLookup.apply(shardDoc.shardIndex);, +    public ReducedQueryPhase reducedQueryPhase(List<? extends SearchPhaseResult> queryResults) {, +    private ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,, +        final QuerySearchResult firstResult = queryResults.stream().findFirst().get().queryResult();, +         * @see #merge(boolean, ScoreDoc[], ReducedQueryPhase, Collection, IntFunction), +++ b/core/src/main/java/org/elasticsearch/action/search/SearchScrollQueryAndFetchAsyncAction.java, +        List<QueryFetchSearchResult> queryFetchSearchResults = queryFetchResults.asList();, +            searchPhaseController.reducedQueryPhase(queryFetchSearchResults), queryFetchSearchResults, queryFetchResults::get);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchScrollQueryThenFetchAsyncAction.java, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(true, sortedShardDocs, queryPhase,, +                fetchResults.asList(), fetchResults::get);, +++ b/core/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java, +        AtomicArray<SearchPhaseResult> searchPhaseResultAtomicArray = generateFetchResults(nShards, mergedSearchDocs, mergedSuggest);, +            searchPhaseResultAtomicArray.asList(), searchPhaseResultAtomicArray::get);]