[+++ b/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import java.util.Set;, +    @Override, +    public void extractTerms(Set<Term> terms) {, +        for (Term term : this.terms) {, +            terms.add(term);, +        }, +    }, +, +++ b/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import java.util.Set;, +    @Override, +    public void extractTerms(Set<Term> terms) {, +        for (Term term : this.terms) {, +            terms.add(term);, +        }, +    }, +, +++ b/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.apache.lucene.queries.BlendedTermQuery;, +        } else if (sourceQuery instanceof BlendedTermQuery) {, +            final BlendedTermQuery blendedTermQuery = (BlendedTermQuery) sourceQuery;, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries);, +++ b/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import java.util.Set;, +    @Override, +    public void extractTerms(Set<Term> terms) {, +        for (Term term : this.terms) {, +            terms.add(term);, +        }, +    }, +, +++ b/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.apache.lucene.queries.BlendedTermQuery;, +        } else if (sourceQuery instanceof BlendedTermQuery) {, +            final BlendedTermQuery blendedTermQuery = (BlendedTermQuery) sourceQuery;, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries);, +++ b/src/main/java/org/elasticsearch/search/highlight/CustomQueryScorer.java, +import org.apache.lucene.queries.BlendedTermQuery;, +import java.io.IOException;, +import java.util.Map;, +, +            } else if (query instanceof BlendedTermQuery) {, +                extractWeightedTerms(terms, query);, +++ b/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import java.util.Set;, +    @Override, +    public void extractTerms(Set<Term> terms) {, +        for (Term term : this.terms) {, +            terms.add(term);, +        }, +    }, +, +++ b/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.apache.lucene.queries.BlendedTermQuery;, +        } else if (sourceQuery instanceof BlendedTermQuery) {, +            final BlendedTermQuery blendedTermQuery = (BlendedTermQuery) sourceQuery;, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries);, +++ b/src/main/java/org/elasticsearch/search/highlight/CustomQueryScorer.java, +import org.apache.lucene.queries.BlendedTermQuery;, +import java.io.IOException;, +import java.util.Map;, +, +            } else if (query instanceof BlendedTermQuery) {, +                extractWeightedTerms(terms, query);, +++ b/src/test/java/org/apache/lucene/queries/BlendedTermQueryTest.java, +import org.junit.Test;, +import java.util.*;, +, +import static org.hamcrest.Matchers.containsInAnyOrder;, +import static org.hamcrest.Matchers.equalTo;, +    @Test, +    @Test, +    @Test, +, +    @Test, +    public void testExtractTerms() {, +        Set<Term> terms = new HashSet<Term>();, +        int num = atLeast(1);, +        for (int i = 0; i < num; i++) {, +            terms.add(new Term(_TestUtil.randomRealisticUnicodeString(random(), 1, 10), _TestUtil.randomRealisticUnicodeString(random(), 1, 10)));, +        }, +, +        BlendedTermQuery blendedTermQuery = random().nextBoolean() ? BlendedTermQuery.dismaxBlendedQuery(terms.toArray(new Term[0]), random().nextFloat()) :, +                BlendedTermQuery.booleanBlendedQuery(terms.toArray(new Term[0]), random().nextBoolean());, +        Set<Term> extracted = new HashSet<Term>();, +        blendedTermQuery.extractTerms(extracted);, +        assertThat(extracted.size(), equalTo(terms.size()));, +        assertThat(extracted, containsInAnyOrder(terms.toArray(new Term[0])));, +    }, +++ b/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import java.util.Set;, +    @Override, +    public void extractTerms(Set<Term> terms) {, +        for (Term term : this.terms) {, +            terms.add(term);, +        }, +    }, +, +++ b/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java]