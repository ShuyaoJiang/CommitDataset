[+++ b/TESTING.asciidoc, +== Testing backwards compatibility, +, +Backwards compatibility tests exist to test upgrading from each supported version, +to the current version. To run all backcompat tests use:, +, +-------------------------------------------------, +gradle bwcTest, +-------------------------------------------------, +, +A specific version can be tested as well. For example, to test backcompat with, +version 5.3.2 run:, +, +-------------------------------------------------, +gradle v5.3.2#bwcTest, +-------------------------------------------------, +, +When running `gradle check`, some minimal backcompat checks are run. Which version, +is tested depends on the branch. On master, this will test against the current, +stable branch. On the stable branch, it will test against the latest release, +branch. Finally, on a release branch, it will test against the most recent release., +++ b/TESTING.asciidoc, +== Testing backwards compatibility, +, +Backwards compatibility tests exist to test upgrading from each supported version, +to the current version. To run all backcompat tests use:, +, +-------------------------------------------------, +gradle bwcTest, +-------------------------------------------------, +, +A specific version can be tested as well. For example, to test backcompat with, +version 5.3.2 run:, +, +-------------------------------------------------, +gradle v5.3.2#bwcTest, +-------------------------------------------------, +, +When running `gradle check`, some minimal backcompat checks are run. Which version, +is tested depends on the branch. On master, this will test against the current, +stable branch. On the stable branch, it will test against the latest release, +branch. Finally, on a release branch, it will test against the most recent release., +++ b/build.gradle, +import org.elasticsearch.gradle.Version, +Version currentVersion = Version.fromString(VersionProperties.elasticsearch.minus('-SNAPSHOT')), +int prevMajor = currentVersion.major - 1, +List<Version> versions = [], +    boolean unreleased = match.group(4) != null, +    Version foundVersion = new Version(major, minor, bugfix, false, unreleased), +    if (currentVersion != foundVersion) {, +      versions.add(foundVersion), +if (versions.toSorted { it.id } != versions) {, +  println "Versions: ${versions}", +  throw new GradleException("Versions.java contains out of order version constants"), +if (currentVersion.bugfix == 0) {, +  // and the bwc-zip distribution will checkout and build that version., +  Version last = versions[-1], +  versions[-1] = new Version(last.major, last.minor, last.bugfix,, +      true, last.unreleased), +  if (wireCompatVersions[-1].snapshot) {, +    // if the most previous version is a snapshot, we need to connect that version to the, +    // bwc-zip project which will checkout and build that snapshot version, +    ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch:${wireCompatVersions[-1]}"] = ':distribution:bwc-zip', +  }, +++ b/TESTING.asciidoc, +== Testing backwards compatibility, +, +Backwards compatibility tests exist to test upgrading from each supported version, +to the current version. To run all backcompat tests use:, +, +-------------------------------------------------, +gradle bwcTest, +-------------------------------------------------, +, +A specific version can be tested as well. For example, to test backcompat with, +version 5.3.2 run:, +, +-------------------------------------------------, +gradle v5.3.2#bwcTest, +-------------------------------------------------, +, +When running `gradle check`, some minimal backcompat checks are run. Which version, +is tested depends on the branch. On master, this will test against the current, +stable branch. On the stable branch, it will test against the latest release, +branch. Finally, on a release branch, it will test against the most recent release., +++ b/build.gradle, +import org.elasticsearch.gradle.Version, +Version currentVersion = Version.fromString(VersionProperties.elasticsearch.minus('-SNAPSHOT')), +int prevMajor = currentVersion.major - 1, +List<Version> versions = [], +    boolean unreleased = match.group(4) != null, +    Version foundVersion = new Version(major, minor, bugfix, false, unreleased), +    if (currentVersion != foundVersion) {, +      versions.add(foundVersion), +if (versions.toSorted { it.id } != versions) {, +  println "Versions: ${versions}", +  throw new GradleException("Versions.java contains out of order version constants"), +if (currentVersion.bugfix == 0) {, +  // and the bwc-zip distribution will checkout and build that version., +  Version last = versions[-1]]