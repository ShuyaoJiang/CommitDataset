[+++ b/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java, +        } else if (newLicense.type().equals("basic")) {, +            listener.onFailure(new IllegalArgumentException("Registering basic licenses is not allowed."));, +++ b/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java, +        } else if (newLicense.type().equals("basic")) {, +            listener.onFailure(new IllegalArgumentException("Registering basic licenses is not allowed."));, +++ b/plugin/core/src/main/java/org/elasticsearch/license/RestPutLicenseAction.java, +        if ("basic".equals(putLicenseRequest.license().type())) {, +            throw new IllegalArgumentException("Installing basic licenses is no longer allowed. Use the POST " +, +                    "/_xpack/license/start_basic API to install a basic license that does not expire.");, +        }, +, +++ b/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java, +        } else if (newLicense.type().equals("basic")) {, +            listener.onFailure(new IllegalArgumentException("Registering basic licenses is not allowed."));, +++ b/plugin/core/src/main/java/org/elasticsearch/license/RestPutLicenseAction.java, +        if ("basic".equals(putLicenseRequest.license().type())) {, +            throw new IllegalArgumentException("Installing basic licenses is no longer allowed. Use the POST " +, +                    "/_xpack/license/start_basic API to install a basic license that does not expire.");, +        }, +, +++ b/plugin/core/src/test/java/org/elasticsearch/license/LicensesAcknowledgementTests.java, +import static org.elasticsearch.common.unit.TimeValue.timeValueHours;, +        setInitialState(TestUtils.generateSignedLicense("gold", timeValueHours(2)), licenseState, Settings.EMPTY);, +        long issueDate = System.currentTimeMillis() - TimeValue.timeValueHours(24 * 2).getMillis();, +        License signedLicense = TestUtils.generateSignedLicense("trial", License.VERSION_CURRENT, issueDate, timeValueHours(10));, +        setInitialState(TestUtils.generateSignedLicense("trial", timeValueHours(2)), licenseState, Settings.EMPTY);, +        License signedLicense = TestUtils.generateSignedLicense("platinum", timeValueHours(10));, +        setInitialState(TestUtils.generateSignedLicense("trial", timeValueHours(2)), licenseState, Settings.builder(), +        License signedLicense = TestUtils.generateSignedLicense("platinum", timeValueHours(10));, +        setInitialState(TestUtils.generateSignedLicense("trial", timeValueHours(2)), licenseState, Settings.builder(), +        License signedLicense = TestUtils.generateSignedLicense("platinum", timeValueHours(10));, +++ b/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java, +        } else if (newLicense.type().equals("basic")) {, +            listener.onFailure(new IllegalArgumentException("Registering basic licenses is not allowed."));, +++ b/plugin/core/src/main/java/org/elasticsearch/license/RestPutLicenseAction.java, +        if ("basic".equals(putLicenseRequest.license().type())) {, +            throw new IllegalArgumentException("Installing basic licenses is no longer allowed. Use the POST " +, +                    "/_xpack/license/start_basic API to install a basic license that does not expire.");, +        }, +, +++ b/plugin/core/src/test/java/org/elasticsearch/license/LicensesAcknowledgementTests.java, +import static org.elasticsearch.common.unit.TimeValue.timeValueHours;, +        setInitialState(TestUtils.generateSignedLicense("gold", timeValueHours(2)), licenseState, Settings.EMPTY);, +        long issueDate = System.currentTimeMillis() - TimeValue.timeValueHours(24 * 2).getMillis();, +        License signedLicense = TestUtils.generateSignedLicense("trial", License.VERSION_CURRENT, issueDate, timeValueHours(10));, +        setInitialState(TestUtils.generateSignedLicense("trial", timeValueHours(2)), licenseState, Settings.EMPTY);, +        License signedLicense = TestUtils.generateSignedLicense("platinum", timeValueHours(10));, +        setInitialState(TestUtils.generateSignedLicense("trial", timeValueHours(2)), licenseState, Settings.builder(), +        License signedLicense = TestUtils.generateSignedLicense("platinum", timeValueHours(10));, +        setInitialState(TestUtils.generateSignedLicense("trial", timeValueHours(2)), licenseState, Settings.builder(), +        License signedLicense = TestUtils.generateSignedLicense("platinum", timeValueHours(10));, +++ b/plugin/core/src/test/java/org/elasticsearch/license/LicensesTransportTests.java, +    public void testPutBasicLicenseIsInvalid() throws Exception {, +        License signedLicense = generateSignedLicense("basic", License.VERSION_CURRENT, -1, TimeValue.timeValueMinutes(2));, +, +        PutLicenseRequestBuilder builder = new PutLicenseRequestBuilder(client().admin().cluster(), PutLicenseAction.INSTANCE);, +        builder.setLicense(signedLicense);, +, +        // try to put license (should be invalid), +        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, builder::get);, +        assertEquals(iae.getMessage(), "Registering basic licenses is not allowed.");, +, +        // try to get invalid license, +        GetLicenseResponse getLicenseResponse = new GetLicenseRequestBuilder(client().admin().cluster(), GetLicenseAction.INSTANCE).get();, +        assertThat(getLicenseResponse.license(), not(signedLicense));, +    }, +, +++ b/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java, +        } else if (newLicense.type().equals("basic")) {, +            listener.onFailure(new IllegalArgumentException("Registering basic licenses is not allowed."));, +++ b/plugin/core/src/main/java/org/elasticsearch/license/RestPutLicenseAction.java, +        if ("basic".equals(putLicenseRequest.license().type())) {, +            throw new IllegalArgumentException("Installing basic licenses is no longer allowed. Use the POST " +, +                    "/_xpack/license/start_basic API to install a basic license that does not expire.");, +        }, +, +++ b/plugin/core/src/test/java/org/elasticsearch/license/LicensesAcknowledgementTests.java, +import static org.elasticsearch.common.unit.TimeValue.timeValueHours;, +        setInitialState(TestUtils.generateSignedLicense("gold", timeValueHours(2)), licenseState, Settings.EMPTY);, +        long issueDate = System.currentTimeMillis() - TimeValue.timeValueHours(24 * 2).getMillis();, +        License signedLicense = TestUtils.generateSignedLicense("trial", License.VERSION_CURRENT, issueDate, timeValueHours(10));, +        setInitialState(TestUtils.generateSignedLicense("trial", timeValueHours(2)), licenseState, Settings.EMPTY);, +        License signedLicense = TestUtils.generateSignedLicense("platinum", timeValueHours(10));, +        setInitialState(TestUtils.generateSignedLicense("trial", timeValueHours(2)), licenseState, Settings.builder(), +        License signedLicense = TestUtils.generateSignedLicense("platinum", timeValueHours(10));, +        setInitialState(TestUtils.generateSignedLicense("trial", timeValueHours(2)), licenseState, Settings.builder(), +        License signedLicense = TestUtils.generateSignedLicense("platinum", timeValueHours(10));, +++ b/plugin/core/src/test/java/org/elasticsearch/license/LicensesTransportTests.java, +    public void testPutBasicLicenseIsInvalid() throws Exception {, +        License signedLicense = generateSignedLicense("basic", License.VERSION_CURRENT, -1, TimeValue.timeValueMinutes(2));, +, +        PutLicenseRequestBuilder builder = new PutLicenseRequestBuilder(client().admin().cluster(), PutLicenseAction.INSTANCE);, +        builder.setLicense(signedLicense);, +, +        // try to put license (should be invalid), +        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, builder::get);, +        assertEquals(iae.getMessage(), "Registering basic licenses is not allowed.");, +, +        // try to get invalid license]