[+++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            result = context.indexShard().get(new Engine.Get(false, false, request.type(), request.id(), uidTerm));, +            int topLevelDocId = result.docIdAndVersion().docId + result.docIdAndVersion().docBase;, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            result = context.indexShard().get(new Engine.Get(false, false, request.type(), request.id(), uidTerm));, +            int topLevelDocId = result.docIdAndVersion().docId + result.docIdAndVersion().docBase;, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),, +            request.versionType());, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            result = context.indexShard().get(new Engine.Get(false, false, request.type(), request.id(), uidTerm));, +            int topLevelDocId = result.docIdAndVersion().docId + result.docIdAndVersion().docBase;, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),, +            request.versionType());, +++ b/server/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDVersionAndSeqNoLookup.java, +            return new DocIdAndVersion(docID, versions.longValue(), context.reader(), context.docBase);, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            result = context.indexShard().get(new Engine.Get(false, false, request.type(), request.id(), uidTerm));, +            int topLevelDocId = result.docIdAndVersion().docId + result.docIdAndVersion().docBase;, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),, +            request.versionType());, +++ b/server/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDVersionAndSeqNoLookup.java, +            return new DocIdAndVersion(docID, versions.longValue(), context.reader(), context.docBase);, +++ b/server/src/main/java/org/elasticsearch/common/lucene/uid/VersionsAndSeqNoResolver.java, +import org.apache.lucene.index.LeafReader;, +        public final LeafReader reader;, +        public final int docBase;, +        public DocIdAndVersion(int docId, long version, LeafReader reader, int docBase) {, +            this.reader = reader;, +            this.docBase = docBase;, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            result = context.indexShard().get(new Engine.Get(false, false, request.type(), request.id(), uidTerm));, +            int topLevelDocId = result.docIdAndVersion().docId + result.docIdAndVersion().docBase;, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),, +            request.versionType());, +++ b/server/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDVersionAndSeqNoLookup.java, +            return new DocIdAndVersion(docID, versions.longValue(), context.reader(), context.docBase);, +++ b/server/src/main/java/org/elasticsearch/common/lucene/uid/VersionsAndSeqNoResolver.java, +import org.apache.lucene.index.LeafReader;, +        public final LeafReader reader;, +        public final int docBase;, +        public DocIdAndVersion(int docId, long version, LeafReader reader, int docBase) {, +            this.reader = reader;, +            this.docBase = docBase;, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private final boolean readFromTranslog;, +        public Get(boolean realtime, boolean readFromTranslog, String type, String id, Term uid) {, +            this.readFromTranslog = readFromTranslog;, +, +        public boolean isReadFromTranslog() {, +            return readFromTranslog;, +        }, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            result = context.indexShard().get(new Engine.Get(false, false, request.type(), request.id(), uidTerm));, +            int topLevelDocId = result.docIdAndVersion().docId + result.docIdAndVersion().docBase;, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        final GetResult getResult = indexShard.getService().getForUpdate(request.type(), request.id(), request.version(),, +            request.versionType());, +++ b/server/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDVersionAndSeqNoLookup.java, +            return new DocIdAndVersion(docID, versions.longValue(), context.reader(), context.docBase);, +++ b/server/src/main/java/org/elasticsearch/common/lucene/uid/VersionsAndSeqNoResolver.java, +import org.apache.lucene.index.LeafReader;, +        public final LeafReader reader;, +        public final int docBase;, +        public DocIdAndVersion(int docId, long version, LeafReader reader, int docBase) {, +            this.reader = reader;, +            this.docBase = docBase;, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private final boolean readFromTranslog;, +        public Get(boolean realtime, boolean readFromTranslog, String type, String id, Term uid) {, +            this.readFromTranslog = readFromTranslog;, +, +        public boolean isReadFromTranslog() {, +            return readFromTranslog;, +        }, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import java.io.UncheckedIOException;, +    private final AtomicBoolean trackTranslogLocation = new AtomicBoolean(false);, +                    if (get.isReadFromTranslog()) {, +                        // this is only used for updates - API _GET calls will always read form a reader for consistency, +                        // the update call doesn't need the consistency since it's source only + _parent but parent can go away in 7.0, +                        if (versionValue.getLocation() != null) {, +                            try {, +                                Translog.Operation operation = translog.readOperation(versionValue.getLocation());, +                                if (operation != null) {, +                                    // in the case of a already pruned translog generation we might get null here - yet very unlikely, +                                    TranslogLeafReader reader = new TranslogLeafReader((Translog.Index) operation, engineConfig, +                                        .getIndexSettings().getIndexVersionCreated());, +                                    return new GetResult(new Searcher("realtime_get", new IndexSearcher(reader)),, +                                        new VersionsAndSeqNoResolver.DocIdAndVersion(0, ((Translog.Index) operation).version(), reader, 0));, +                                }, +                            } catch (IOException e) {, +                                maybeFailEngine("realtime_get", e); // lets check if the translog has failed with a tragic event, +                                throw new EngineException(shardId, "failed to read operation from translog", e);, +                            }, +                        } else {, +                            trackTranslogLocation.set(true);]