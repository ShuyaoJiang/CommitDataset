[+++ b/src/main/java/org/elasticsearch/common/joda/Joda.java, +import org.joda.time.*;, +import org.joda.time.field.DividedDateTimeField;, +import org.joda.time.field.OffsetDateTimeField;, +import org.joda.time.field.ScaledDurationField;, +, +, +    public static final DurationFieldType Quarters = new DurationFieldType("quarters") {, +        private static final long serialVersionUID = -8167713675442491871L;, +, +        public DurationField getField(Chronology chronology) {, +            return new ScaledDurationField(chronology.months(), Quarters, 3);, +        }, +    };, +, +    public static final DateTimeFieldType QuarterOfYear = new DateTimeFieldType("quarterOfYear") {, +        private static final long serialVersionUID = -5677872459807379123L;, +, +        public DurationFieldType getDurationType() {, +            return Quarters;, +        }, +, +        public DurationFieldType getRangeDurationType() {, +            return DurationFieldType.years();, +        }, +, +        public DateTimeField getField(Chronology chronology) {, +            return new OffsetDateTimeField(new DividedDateTimeField(new OffsetDateTimeField(chronology.monthOfYear(), -1), QuarterOfYear, 3), 1);, +        }, +    };, +++ b/src/main/java/org/elasticsearch/common/joda/Joda.java, +import org.joda.time.*;, +import org.joda.time.field.DividedDateTimeField;, +import org.joda.time.field.OffsetDateTimeField;, +import org.joda.time.field.ScaledDurationField;, +, +, +    public static final DurationFieldType Quarters = new DurationFieldType("quarters") {, +        private static final long serialVersionUID = -8167713675442491871L;, +, +        public DurationField getField(Chronology chronology) {, +            return new ScaledDurationField(chronology.months(), Quarters, 3);, +        }, +    };, +, +    public static final DateTimeFieldType QuarterOfYear = new DateTimeFieldType("quarterOfYear") {, +        private static final long serialVersionUID = -5677872459807379123L;, +, +        public DurationFieldType getDurationType() {, +            return Quarters;, +        }, +, +        public DurationFieldType getRangeDurationType() {, +            return DurationFieldType.years();, +        }, +, +        public DateTimeField getField(Chronology chronology) {, +            return new OffsetDateTimeField(new DividedDateTimeField(new OffsetDateTimeField(chronology.monthOfYear(), -1), QuarterOfYear, 3), 1);, +        }, +    };, +++ b/src/main/java/org/elasticsearch/search/facet/datehistogram/DateHistogramFacetProcessor.java, +import org.elasticsearch.common.joda.Joda;, +                .put("quarter", new DateFieldParser.Quarter()), +        static class Quarter implements DateFieldParser {, +            @Override, +            public DateTimeField parse(Chronology chronology) {, +                return Joda.QuarterOfYear.getField(chronology);, +            }, +        }, +, +++ b/src/main/java/org/elasticsearch/common/joda/Joda.java, +import org.joda.time.*;, +import org.joda.time.field.DividedDateTimeField;, +import org.joda.time.field.OffsetDateTimeField;, +import org.joda.time.field.ScaledDurationField;, +, +, +    public static final DurationFieldType Quarters = new DurationFieldType("quarters") {, +        private static final long serialVersionUID = -8167713675442491871L;, +, +        public DurationField getField(Chronology chronology) {, +            return new ScaledDurationField(chronology.months(), Quarters, 3);, +        }, +    };, +, +    public static final DateTimeFieldType QuarterOfYear = new DateTimeFieldType("quarterOfYear") {, +        private static final long serialVersionUID = -5677872459807379123L;, +, +        public DurationFieldType getDurationType() {, +            return Quarters;, +        }, +, +        public DurationFieldType getRangeDurationType() {, +            return DurationFieldType.years();, +        }, +, +        public DateTimeField getField(Chronology chronology) {, +            return new OffsetDateTimeField(new DividedDateTimeField(new OffsetDateTimeField(chronology.monthOfYear(), -1), QuarterOfYear, 3), 1);, +        }, +    };]