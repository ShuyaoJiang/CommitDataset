[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/min/MinAggregator.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.search.aggregations.support.ValueType;, +import org.elasticsearch.search.aggregations.support.ValuesSource.Numeric;, +import org.elasticsearch.search.aggregations.support.ValuesSourceType;, +        public Factory(String name) {, +            super(name, InternalMin.TYPE.name(), ValuesSourceType.NUMERIC, ValueType.NUMERIC);, +, +        @Override, +        protected ValuesSourceAggregatorFactory<Numeric> innerReadFrom(String name, ValuesSourceType valuesSourceType,, +                ValueType targetValueType, StreamInput in) {, +            return new MinAggregator.Factory(name);, +        }, +, +        @Override, +        protected void innerWriteTo(StreamOutput out) {, +            // Do nothing, no extra state to write to stream, +        }, +, +        @Override, +        public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {, +            return builder;, +        }, +, +        @Override, +        protected int innerHashCode() {, +            return 0;, +        }, +, +        @Override, +        protected boolean innerEquals(Object obj) {, +            return true;, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/min/MinAggregator.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.search.aggregations.support.ValueType;, +import org.elasticsearch.search.aggregations.support.ValuesSource.Numeric;, +import org.elasticsearch.search.aggregations.support.ValuesSourceType;, +        public Factory(String name) {, +            super(name, InternalMin.TYPE.name(), ValuesSourceType.NUMERIC, ValueType.NUMERIC);, +, +        @Override, +        protected ValuesSourceAggregatorFactory<Numeric> innerReadFrom(String name, ValuesSourceType valuesSourceType,, +                ValueType targetValueType, StreamInput in) {, +            return new MinAggregator.Factory(name);, +        }, +, +        @Override, +        protected void innerWriteTo(StreamOutput out) {, +            // Do nothing, no extra state to write to stream, +        }, +, +        @Override, +        public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {, +            return builder;, +        }, +, +        @Override, +        protected int innerHashCode() {, +            return 0;, +        }, +, +        @Override, +        protected boolean innerEquals(Object obj) {, +            return true;, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/min/MinParser.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentParser.Token;, +import org.elasticsearch.search.aggregations.support.AbstractValuesSourceParser.NumericValuesSourceParser;, +import org.elasticsearch.search.aggregations.support.ValueType;, +import org.elasticsearch.search.aggregations.support.ValuesSource.Numeric;, +import org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory;, +import org.elasticsearch.search.aggregations.support.ValuesSourceType;, +, +import java.io.IOException;, +import java.util.Map;, +public class MinParser extends NumericValuesSourceParser {, +        super(true, true, false);, +    public String type() {, +        return InternalMin.TYPE.name();, +    @Override, +    protected boolean token(String aggregationName, String currentFieldName, Token token, XContentParser parser,, +            ParseFieldMatcher parseFieldMatcher, Map<ParseField, Object> otherOptions) throws IOException {, +        return false;, +    }, +, +    @Override, +    protected ValuesSourceAggregatorFactory<Numeric> createFactory(String aggregationName, ValuesSourceType valuesSourceType,, +            ValueType targetValueType, Map<ParseField, Object> otherOptions) {, +        return new MinAggregator.Factory(aggregationName);, +    }, +, +        return new MinAggregator.Factory(null);]