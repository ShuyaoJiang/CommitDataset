[+++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +    public HasChildQueryBuilder innerHit(InnerHitBuilder innerHit, boolean ignoreUnmapped) {, +        this.innerHitBuilder = new InnerHitBuilder(Objects.requireNonNull(innerHit), query, type, ignoreUnmapped);, +        if (innerHitBuilder != null) {, +            hasChildQueryBuilder.innerHit(innerHitBuilder, ignoreUnmapped);, +        }, +        DocumentMapper childDocMapper = context.documentMapper(type);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +    public HasChildQueryBuilder innerHit(InnerHitBuilder innerHit, boolean ignoreUnmapped) {, +        this.innerHitBuilder = new InnerHitBuilder(Objects.requireNonNull(innerHit), query, type, ignoreUnmapped);, +        if (innerHitBuilder != null) {, +            hasChildQueryBuilder.innerHit(innerHitBuilder, ignoreUnmapped);, +        }, +        DocumentMapper childDocMapper = context.documentMapper(type);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java, +    public HasParentQueryBuilder innerHit(InnerHitBuilder innerHit, boolean ignoreUnmapped) {, +        this.innerHit = new InnerHitBuilder(innerHit, query, type, ignoreUnmapped);, +        DocumentMapper parentDocMapper = context.documentMapper(type);, +            queryBuilder.innerHit(innerHits, ignoreUnmapped);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +    public HasChildQueryBuilder innerHit(InnerHitBuilder innerHit, boolean ignoreUnmapped) {, +        this.innerHitBuilder = new InnerHitBuilder(Objects.requireNonNull(innerHit), query, type, ignoreUnmapped);, +        if (innerHitBuilder != null) {, +            hasChildQueryBuilder.innerHit(innerHitBuilder, ignoreUnmapped);, +        }, +        DocumentMapper childDocMapper = context.documentMapper(type);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java, +    public HasParentQueryBuilder innerHit(InnerHitBuilder innerHit, boolean ignoreUnmapped) {, +        this.innerHit = new InnerHitBuilder(innerHit, query, type, ignoreUnmapped);, +        DocumentMapper parentDocMapper = context.documentMapper(type);, +            queryBuilder.innerHit(innerHits, ignoreUnmapped);, +++ b/core/src/main/java/org/elasticsearch/index/query/InnerHitBuilder.java, +import org.elasticsearch.Version;, +    public static final ParseField IGNORE_UNMAPPED = new ParseField("ignore_unmapped");, +        PARSER.declareBoolean((innerHitBuilder, value) -> innerHitBuilder.ignoreUnmapped = value, IGNORE_UNMAPPED);, +    private boolean ignoreUnmapped;, +        this.ignoreUnmapped = other.ignoreUnmapped;, +    InnerHitBuilder(InnerHitBuilder other, String nestedPath, QueryBuilder query, boolean ignoreUnmapped) {, +        this.ignoreUnmapped = ignoreUnmapped;, +    InnerHitBuilder(InnerHitBuilder other, QueryBuilder query, String parentChildType, boolean ignoreUnmapped) {, +        this.ignoreUnmapped = ignoreUnmapped;, +        if (in.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)) {, +            ignoreUnmapped = in.readBoolean();, +        }, +        if (out.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)) {, +            out.writeBoolean(ignoreUnmapped);, +        }, +    /**, +     * Whether to include inner hits in the search response hits if required mappings is missing, +     */, +    public boolean isIgnoreUnmapped() {, +        return ignoreUnmapped;, +    }, +, +            if (nestedObjectMapper == null) {, +                if (ignoreUnmapped == false) {, +                    throw new IllegalStateException("[" + query.getName() + "] no mapping found for type [" + nestedPath + "]");, +                } else {, +                    return null;, +                }, +            }, +, +            DocumentMapper documentMapper = queryShardContext.documentMapper(parentChildType);, +            if (documentMapper == null) {, +                if (ignoreUnmapped == false) {, +                    throw new IllegalStateException("[" + query.getName() + "] no mapping found for type [" + parentChildType + "]");, +                } else {, +                    return null;, +                }, +            }, +, +            if (childInnerHit != null) {, +        }, +        builder.field(IGNORE_UNMAPPED.getPreferredName(), ignoreUnmapped);, +                Objects.equals(ignoreUnmapped, that.ignoreUnmapped) &&, +        return Objects.hash(name, nestedPath, parentChildType, ignoreUnmapped, from, size, explain, version, trackScores,, +                storedFieldsContext, docValueFields, scriptFields, fetchSourceContext, sorts, highlightBuilder, query, childInnerHits);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +    public HasChildQueryBuilder innerHit(InnerHitBuilder innerHit, boolean ignoreUnmapped) {, +        this.innerHitBuilder = new InnerHitBuilder(Objects.requireNonNull(innerHit), query, type, ignoreUnmapped);, +        if (innerHitBuilder != null) {, +            hasChildQueryBuilder.innerHit(innerHitBuilder, ignoreUnmapped);, +        }, +        DocumentMapper childDocMapper = context.documentMapper(type);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java, +    public HasParentQueryBuilder innerHit(InnerHitBuilder innerHit, boolean ignoreUnmapped) {, +        this.innerHit = new InnerHitBuilder(innerHit, query, type, ignoreUnmapped);, +        DocumentMapper parentDocMapper = context.documentMapper(type);, +            queryBuilder.innerHit(innerHits, ignoreUnmapped);, +++ b/core/src/main/java/org/elasticsearch/index/query/InnerHitBuilder.java, +import org.elasticsearch.Version;, +    public static final ParseField IGNORE_UNMAPPED = new ParseField("ignore_unmapped");, +        PARSER.declareBoolean((innerHitBuilder, value) -> innerHitBuilder.ignoreUnmapped = value, IGNORE_UNMAPPED);, +    private boolean ignoreUnmapped;, +        this.ignoreUnmapped = other.ignoreUnmapped;, +    InnerHitBuilder(InnerHitBuilder other, String nestedPath, QueryBuilder query, boolean ignoreUnmapped) {, +        this.ignoreUnmapped = ignoreUnmapped;, +    InnerHitBuilder(InnerHitBuilder other, QueryBuilder query, String parentChildType, boolean ignoreUnmapped) {, +        this.ignoreUnmapped = ignoreUnmapped;, +        if (in.getVersion().onOrAfter(Version.V_5_2_0_UNRELEASED)) {]