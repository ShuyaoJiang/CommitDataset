[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.unit.TimeValue;, +, +    private final ESLogger logger;, +    private final AtomicLong totalMerges = new AtomicLong();, +    private final AtomicLong totalMergeTime = new AtomicLong();, +    private final AtomicLong currentMerges = new AtomicLong();, +, +    public TrackingConcurrentMergeScheduler(ESLogger logger) {, +        this.logger = logger;, +        if (logger.isTraceEnabled()) {, +            logger.trace("merge [{}] starting...", merge.info.name);, +        }, +            long took = System.currentTimeMillis() - time;, +            totalMergeTime.addAndGet(took);, +            if (took > 20000) { // if more than 20 seconds, DEBUG log it, +                logger.debug("merge [{}] done, took [{}]", merge.info.name, TimeValue.timeValueMillis(took));, +            } else if (logger.isTraceEnabled()) {, +                logger.trace("merge [{}] done, took [{}]", merge.info.name, TimeValue.timeValueMillis(took));, +            }, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.unit.TimeValue;, +, +    private final ESLogger logger;, +    private final AtomicLong totalMerges = new AtomicLong();, +    private final AtomicLong totalMergeTime = new AtomicLong();, +    private final AtomicLong currentMerges = new AtomicLong();, +, +    public TrackingConcurrentMergeScheduler(ESLogger logger) {, +        this.logger = logger;, +        if (logger.isTraceEnabled()) {, +            logger.trace("merge [{}] starting...", merge.info.name);, +        }, +            long took = System.currentTimeMillis() - time;, +            totalMergeTime.addAndGet(took);, +            if (took > 20000) { // if more than 20 seconds, DEBUG log it, +                logger.debug("merge [{}] done, took [{}]", merge.info.name, TimeValue.timeValueMillis(took));, +            } else if (logger.isTraceEnabled()) {, +                logger.trace("merge [{}] done, took [{}]", merge.info.name, TimeValue.timeValueMillis(took));, +            }, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/index/TrackingSerialMergeScheduler.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.unit.TimeValue;, +, +    private final ESLogger logger;, +, +    private final AtomicLong totalMerges = new AtomicLong();, +    private final AtomicLong totalMergeTime = new AtomicLong();, +    private final AtomicLong currentMerges = new AtomicLong();, +, +    public TrackingSerialMergeScheduler(ESLogger logger) {, +        this.logger = logger;, +    }, +            if (logger.isTraceEnabled()) {, +                logger.trace("merge [{}] starting...", merge.info.name);, +            }, +, +                long took = System.currentTimeMillis() - time;, +                totalMergeTime.addAndGet(took);, +                if (took > 20000) { // if more than 20 seconds, DEBUG log it, +                    logger.debug("merge [{}] done, took [{}]", merge.info.name, TimeValue.timeValueMillis(took));, +                } else if (logger.isTraceEnabled()) {, +                    logger.trace("merge [{}] done, took [{}]", merge.info.name, TimeValue.timeValueMillis(took));, +                }, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.unit.TimeValue;, +, +    private final ESLogger logger;, +    private final AtomicLong totalMerges = new AtomicLong();, +    private final AtomicLong totalMergeTime = new AtomicLong();, +    private final AtomicLong currentMerges = new AtomicLong();, +, +    public TrackingConcurrentMergeScheduler(ESLogger logger) {, +        this.logger = logger;, +        if (logger.isTraceEnabled()) {, +            logger.trace("merge [{}] starting...", merge.info.name);, +        }, +            long took = System.currentTimeMillis() - time;, +            totalMergeTime.addAndGet(took);, +            if (took > 20000) { // if more than 20 seconds, DEBUG log it, +                logger.debug("merge [{}] done, took [{}]", merge.info.name, TimeValue.timeValueMillis(took));, +            } else if (logger.isTraceEnabled()) {, +                logger.trace("merge [{}] done, took [{}]", merge.info.name, TimeValue.timeValueMillis(took));, +            }, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/index/TrackingSerialMergeScheduler.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.unit.TimeValue;, +, +    private final ESLogger logger;, +, +    private final AtomicLong totalMerges = new AtomicLong();, +    private final AtomicLong totalMergeTime = new AtomicLong();, +    private final AtomicLong currentMerges = new AtomicLong();, +, +    public TrackingSerialMergeScheduler(ESLogger logger) {, +        this.logger = logger;, +    }]