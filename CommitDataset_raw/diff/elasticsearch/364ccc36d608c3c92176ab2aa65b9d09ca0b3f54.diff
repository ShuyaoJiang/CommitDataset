[+++ b/Vagrantfile, +++ b/Vagrantfile, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/Vagrantfile, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        project.getTasks().create("buildResources", ExportElasticsearchBuildResourcesTask), +, +, +                if(System.getenv(getJavaHomeEnvVarName(version.toString())) != null) {, +                    javaVersions.put(version, findJavaHome(version.toString()));, +                }, +            String gradleJavaVersion = System.getProperty('java.version'), +            String gradleJavaVersionDetails = "${javaVendor} ${gradleJavaVersion}" +, +                println "  Compiler JDK Version  : ${getPaddedMajorVersion(compilerJavaVersionEnum)} (${compilerJavaVersionDetails})", +                println "  Compiler java.home    : ${compilerJavaHome}", +                println "  Runtime JDK Version   : ${getPaddedMajorVersion(runtimeJavaVersionEnum)} (${runtimeJavaVersionDetails})", +                println "  Runtime java.home     : ${runtimeJavaHome}", +                println "  Gradle JDK Version    : ${getPaddedMajorVersion(JavaVersion.toVersion(gradleJavaVersion))} (${gradleJavaVersionDetails})", +                println "  Gradle java.home      : ${gradleJavaHome}", +                println "  JDK Version           : ${getPaddedMajorVersion(JavaVersion.toVersion(gradleJavaVersion))} (${gradleJavaVersionDetails})", +            println '=======================================', +                        "the compiler java.home must be set to a JDK installation directory for Java ${minimumCompilerVersion}" +, +                        "the runtime java.home must be set to a JDK installation directory for Java ${minimumRuntimeVersion}" +, +            project.rootProject.ext.gradleJavaVersion = JavaVersion.toVersion(gradleJavaVersion), +        project.ext.gradleJavaVersion = project.rootProject.ext.gradleJavaVersion, +    }, +, +    private static String getPaddedMajorVersion(JavaVersion compilerJavaVersionEnum) {, +        compilerJavaVersionEnum.getMajorVersion().toString().padLeft(2), +        final String compilerJavaHome = System.getenv('JAVA_HOME'), +        final String compilerJavaProperty = System.getProperty('compiler.java'), +        if (compilerJavaProperty != null) {, +            compilerJavaHome = findJavaHome(compilerJavaProperty), +        }, +        if (compilerJavaHome == null) {, +        return compilerJavaHome, +    private static String findJavaHome(String version) {, +        String versionedVarName = getJavaHomeEnvVarName(version), +        String versionedJavaHome = System.getenv(versionedVarName);, +        if (versionedJavaHome == null) {, +            throw new GradleException(, +                    "$versionedVarName must be set to build Elasticsearch. " +, +                            "Note that if the variable was just set you might have to run `./gradlew --stop` for " +, +                            "it to be picked up. See https://github.com/elastic/elasticsearch/issues/31399 details.", +            ), +        }, +        return versionedJavaHome, +    }, +, +    private static String getJavaHomeEnvVarName(String version) {, +        return 'JAVA' + version + '_HOME', +        String runtimeJavaProperty = System.getProperty("runtime.java"), +        if (runtimeJavaProperty != null) {, +            return findJavaHome(runtimeJavaProperty), +        }, +        repos.maven {, +            name "elastic", +            url "https://artifacts.elastic.co/maven", +        }, +            systemProperty 'compiler.java', project.ext.compilerJavaVersion.getMajorVersion(), +            if (project.ext.inFipsJvm) {, +                systemProperty 'runtime.java', project.ext.runtimeJavaVersion.getMajorVersion() + "FIPS", +            } else {, +                systemProperty 'runtime.java', project.ext.runtimeJavaVersion.getMajorVersion(), +            }, +, +            // TODO: remove this once joda time is removed from scripting in 7.0, +            systemProperty 'es.scripting.use_java_time', 'true', +, +            // TODO: remove this once ctx isn't added to update script params in 7.0, +            systemProperty 'es.scripting.update.ctx_in_params', 'false', +, +, +++ b/Vagrantfile, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        project.getTasks().create("buildResources", ExportElasticsearchBuildResourcesTask), +, +, +                if(System.getenv(getJavaHomeEnvVarName(version.toString())) != null) {, +                    javaVersions.put(version, findJavaHome(version.toString()));, +                }, +            String gradleJavaVersion = System.getProperty('java.version'), +            String gradleJavaVersionDetails = "${javaVendor} ${gradleJavaVersion}" +, +                println "  Compiler JDK Version  : ${getPaddedMajorVersion(compilerJavaVersionEnum)} (${compilerJavaVersionDetails})", +                println "  Compiler java.home    : ${compilerJavaHome}", +                println "  Runtime JDK Version   : ${getPaddedMajorVersion(runtimeJavaVersionEnum)} (${runtimeJavaVersionDetails})", +                println "  Runtime java.home     : ${runtimeJavaHome}", +                println "  Gradle JDK Version    : ${getPaddedMajorVersion(JavaVersion.toVersion(gradleJavaVersion))} (${gradleJavaVersionDetails})", +                println "  Gradle java.home      : ${gradleJavaHome}", +                println "  JDK Version           : ${getPaddedMajorVersion(JavaVersion.toVersion(gradleJavaVersion))} (${gradleJavaVersionDetails})", +            println '=======================================', +                        "the compiler java.home must be set to a JDK installation directory for Java ${minimumCompilerVersion}" +]