[+++ b/docs/reference/how-to.asciidoc, +[[how-to]], += How To, +, +[partintro], +--, +Elasticsearch ships with defaults which are intended to give a good out of, +the box experience. Full text search, highlighting, aggregations, indexing, +should all just work without the user having to change anything., +, +Once you better understand how you want to use Elasticsearch, however,, +there are a number of optimizations you can make to improve performance, +for your use case., +, +This section provides guidance about which changes should and shouldn't be, +made., +--, +, +include::how-to/indexing-speed.asciidoc[], +, +include::how-to/search-speed.asciidoc[], +, +include::how-to/disk-usage.asciidoc[], +++ b/docs/reference/how-to.asciidoc, +[[how-to]], += How To, +, +[partintro], +--, +Elasticsearch ships with defaults which are intended to give a good out of, +the box experience. Full text search, highlighting, aggregations, indexing, +should all just work without the user having to change anything., +, +Once you better understand how you want to use Elasticsearch, however,, +there are a number of optimizations you can make to improve performance, +for your use case., +, +This section provides guidance about which changes should and shouldn't be, +made., +--, +, +include::how-to/indexing-speed.asciidoc[], +, +include::how-to/search-speed.asciidoc[], +, +include::how-to/disk-usage.asciidoc[], +++ b/docs/reference/how-to/disk-usage.asciidoc, +[[tune-for-disk-usage]], +== Tune for disk usage, +, +[float], +=== Disable the features you do not need, +, +By default elasticsearch indexes and adds doc values to most fields so that they, +can be searched and aggregated out of the box. For instance if you have a numeric, +field called `foo` that you need to run histograms on but that you never need to, +filter on, you can safely disable indexing on this field in your, +<<mappings,mappings>>:, +, +[source,js], +--------------------------------------------------, +PUT index, +{, +  "mappings": {, +    "type": {, +      "properties": {, +        "foo": {, +          "type": "integer",, +          "index": false, +        }, +      }, +    }, +  }, +}, +--------------------------------------------------, +// CONSOLE, +, +<<text,`text`>> fields store normalization factors in the index in order to be, +able to score documents. If you only need matching capabilities on a `text`, +field but do not care about the produced scores, you can configure elasticsearch, +to not write norms to the index:, +, +[source,js], +--------------------------------------------------, +PUT index, +{, +  "mappings": {, +    "type": {, +      "properties": {, +        "foo": {, +          "type": "text",, +          "norms": false, +        }, +      }, +    }, +  }, +}, +--------------------------------------------------, +// CONSOLE, +]