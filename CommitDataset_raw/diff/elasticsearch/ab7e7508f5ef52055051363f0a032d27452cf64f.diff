[+++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistLoader.java, +     *     short type Java name may be excluded by using the 'no_import' token during Painless class parsing, +     *   class name, optionally followed by an 'no_import' token, an opening bracket, a newline,, +     * class my.package.Example no_import {, +                boolean noImport = false;, +                    // Expects the following format: 'class' ID 'no_import'? '{' '\n', +                        if (tokens.length == 2 && "no_import".equals(tokens[1])) {, +                            noImport = true;, +                        whitelistClasses.add(new WhitelistClass(whitelistClassOrigin, javaClassName, noImport,, +                        noImport = false;, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistLoader.java, +     *     short type Java name may be excluded by using the 'no_import' token during Painless class parsing, +     *   class name, optionally followed by an 'no_import' token, an opening bracket, a newline,, +     * class my.package.Example no_import {, +                boolean noImport = false;, +                    // Expects the following format: 'class' ID 'no_import'? '{' '\n', +                        if (tokens.length == 2 && "no_import".equals(tokens[1])) {, +                            noImport = true;, +                        whitelistClasses.add(new WhitelistClass(whitelistClassOrigin, javaClassName, noImport,, +                        noImport = false;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookupBuilder.java, +                throw new IllegalArgumentException("must use no_import parameter on class [" + canonicalClassName + "] with no package");, +                        throw new IllegalArgumentException(, +                                "inconsistent no_import parameters found for class [" + canonicalClassName + "]");, +                throw new IllegalArgumentException("inconsistent no_import parameters found for class [" + canonicalClassName + "]");, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistLoader.java, +     *     short type Java name may be excluded by using the 'no_import' token during Painless class parsing, +     *   class name, optionally followed by an 'no_import' token, an opening bracket, a newline,, +     * class my.package.Example no_import {, +                boolean noImport = false;, +                    // Expects the following format: 'class' ID 'no_import'? '{' '\n', +                        if (tokens.length == 2 && "no_import".equals(tokens[1])) {, +                            noImport = true;, +                        whitelistClasses.add(new WhitelistClass(whitelistClassOrigin, javaClassName, noImport,, +                        noImport = false;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookupBuilder.java, +                throw new IllegalArgumentException("must use no_import parameter on class [" + canonicalClassName + "] with no package");, +                        throw new IllegalArgumentException(, +                                "inconsistent no_import parameters found for class [" + canonicalClassName + "]");, +                throw new IllegalArgumentException("inconsistent no_import parameters found for class [" + canonicalClassName + "]");, +++ b/modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/org.elasticsearch.txt, +class void no_import {, +class boolean no_import {, +class byte no_import {, +class short no_import {, +class char no_import {, +class int no_import {, +class long no_import {, +class float no_import {, +class double no_import {, +class org.elasticsearch.painless.FeatureTest no_import {]