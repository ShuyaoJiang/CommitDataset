[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +, +    public static void renderThrowable(XContentBuilder builder, Params params, Throwable t) throws IOException {, +        builder.startObject("error");, +        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(t);, +        builder.field("root_cause");, +        builder.startArray();, +        for (ElasticsearchException rootCause : rootCauses){, +            builder.startObject();, +            rootCause.toXContent(builder, new ToXContent.DelegatingMapParams(Collections.singletonMap(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE, "true"), params));, +            builder.endObject();, +        }, +        builder.endArray();, +        ElasticsearchException.toXContent(builder, params, t);, +        builder.endObject();, +    }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +, +    public static void renderThrowable(XContentBuilder builder, Params params, Throwable t) throws IOException {, +        builder.startObject("error");, +        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(t);, +        builder.field("root_cause");, +        builder.startArray();, +        for (ElasticsearchException rootCause : rootCauses){, +            builder.startObject();, +            rootCause.toXContent(builder, new ToXContent.DelegatingMapParams(Collections.singletonMap(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE, "true"), params));, +            builder.endObject();, +        }, +        builder.endArray();, +        ElasticsearchException.toXContent(builder, params, t);, +        builder.endObject();, +    }, +++ b/core/src/main/java/org/elasticsearch/action/get/MultiGetResponse.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.action.percolate.PercolateResponse;, +import java.util.Collections;, +        private Throwable throwable;, +        public Failure(String index, String type, String id, Throwable throwable) {, +            this.throwable = throwable;, +            return throwable != null ? throwable.getMessage() : null;, +            throwable = in.readThrowable();, +            out.writeThrowable(throwable);, +        }, +, +        public Throwable getFailure() {, +            return throwable;, +                ElasticsearchException.renderThrowable(builder, params, failure.getFailure());, +        static final XContentBuilderString ROOT_CAUSE = new XContentBuilderString("root_cause");, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +, +    public static void renderThrowable(XContentBuilder builder, Params params, Throwable t) throws IOException {, +        builder.startObject("error");, +        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(t);, +        builder.field("root_cause");, +        builder.startArray();, +        for (ElasticsearchException rootCause : rootCauses){, +            builder.startObject();, +            rootCause.toXContent(builder, new ToXContent.DelegatingMapParams(Collections.singletonMap(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE, "true"), params));, +            builder.endObject();, +        }, +        builder.endArray();, +        ElasticsearchException.toXContent(builder, params, t);, +        builder.endObject();, +    }, +++ b/core/src/main/java/org/elasticsearch/action/get/MultiGetResponse.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.action.percolate.PercolateResponse;, +import java.util.Collections;, +        private Throwable throwable;, +        public Failure(String index, String type, String id, Throwable throwable) {, +            this.throwable = throwable;, +            return throwable != null ? throwable.getMessage() : null;, +            throwable = in.readThrowable();, +            out.writeThrowable(throwable);, +        }, +, +        public Throwable getFailure() {, +            return throwable;, +                ElasticsearchException.renderThrowable(builder, params, failure.getFailure());, +        static final XContentBuilderString ROOT_CAUSE = new XContentBuilderString("root_cause");, +, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +import org.elasticsearch.index.IndexNotFoundException;, +                responses.set(i, new MultiGetItemResponse(null, new MultiGetResponse.Failure(item.index(), item.type(), item.id(), new IndexNotFoundException(item.index()))));, +                        new IllegalArgumentException("routing is required for [" + concreteSingleIndex + "]/[" + item.type() + "]/[" + item.id() + "]"))));, +                                new MultiGetResponse.Failure(shardRequest.index(), item.type(), item.id(), e)));, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +, +    public static void renderThrowable(XContentBuilder builder, Params params, Throwable t) throws IOException {, +        builder.startObject("error");, +        final ElasticsearchException[] rootCauses = ElasticsearchException.guessRootCauses(t);, +        builder.field("root_cause");, +        builder.startArray();, +        for (ElasticsearchException rootCause : rootCauses){, +            builder.startObject();, +            rootCause.toXContent(builder, new ToXContent.DelegatingMapParams(Collections.singletonMap(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE, "true"), params));, +            builder.endObject();, +        }, +        builder.endArray();]