[+++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                if (oldState != newState && newState.getRoutingNodes().hasUnassigned()) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                if (oldState != newState && newState.getRoutingNodes().hasUnassigned()) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public <T extends ClusterState.Custom> T custom(String type) {, +        return (T) customs.get(type);, +    }, +, +    public boolean hasUnassigned() {, +        return !unassignedShards.isEmpty();, +    }, +        return unassignedShards.numPrimaries() > 0;, +        return !unassignedShards.isEmpty();, +        private long transactionId = 0;, +        private final UnassignedShards source;, +        private final long sourceTransactionId;, +, +        public UnassignedShards(UnassignedShards other) {, +            this.nodes = other.nodes;, +            source = other;, +            sourceTransactionId = other.transactionId;, +            unassigned = new ArrayList<>(other.unassigned);, +            ignored = new ArrayList<>(other.ignored);, +            primaries = other.primaries;, +        }, +            source = null;, +            sourceTransactionId = -1;, +            transactionId++;, +        public int size() {, +            return unassigned.size();, +        public int numPrimaries() {, +            return primaries;, +        }, +         * Adds a shard to the ignore unassigned list. Should be used with caution, typically,, +            transactionId++;, +                transactionId++;, +        public void clear() {, +            transactionId++;, +            unassigned.clear();, +            ignored.clear();, +            primaries = 0;, +        }, +, +        public void transactionEnd(UnassignedShards shards) {, +            assert shards.source == this && shards.sourceTransactionId == transactionId :, +                    "Expected ID: " + shards.sourceTransactionId + " actual: " + transactionId + " Expected Source: " + shards.source + " actual: " + this;, +            transactionId++;, +            this.unassigned.clear();, +            this.unassigned.addAll(shards.unassigned);, +            this.ignored.clear();, +            this.ignored.addAll(shards.ignored);, +            this.primaries = shards.primaries;, +        }, +, +        public UnassignedShards transactionBegin() {, +            return new UnassignedShards(this);, +        }, +, +            transactionId++;, +        final Set<ShardId> seenShards = new HashSet<>();, +                seenShards.add(shard.shardId());, +            seenShards.add(shard.shardId());, +        assert unassignedPrimaryCount == routingNodes.unassignedShards.numPrimaries() :, +                "Unassigned primaries is [" + unassignedPrimaryCount + "] but RoutingNodes returned unassigned primaries [" + routingNodes.unassigned().numPrimaries() + "]";, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                if (oldState != newState && newState.getRoutingNodes().hasUnassigned()) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public <T extends ClusterState.Custom> T custom(String type) {, +        return (T) customs.get(type);, +    }, +, +    public boolean hasUnassigned() {, +        return !unassignedShards.isEmpty();, +    }, +        return unassignedShards.numPrimaries() > 0;, +        return !unassignedShards.isEmpty();, +        private long transactionId = 0;, +        private final UnassignedShards source;, +        private final long sourceTransactionId;, +, +        public UnassignedShards(UnassignedShards other) {, +            this.nodes = other.nodes;, +            source = other;, +            sourceTransactionId = other.transactionId;, +            unassigned = new ArrayList<>(other.unassigned);, +            ignored = new ArrayList<>(other.ignored);, +            primaries = other.primaries;, +        }, +            source = null;, +            sourceTransactionId = -1;, +            transactionId++;, +        public int size() {, +            return unassigned.size();, +        public int numPrimaries() {, +            return primaries;, +        }, +         * Adds a shard to the ignore unassigned list. Should be used with caution, typically,, +            transactionId++;, +                transactionId++;]