[+++ b/server/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * @param clusterAlias the alias to prefix index names with in the returned search results, +    static SearchRequest crossClusterSearch(SearchRequest originalSearchRequest, String[] indices,, +                                            String clusterAlias, long absoluteStartMillis, boolean finalReduce) {, +        Objects.requireNonNull(clusterAlias, "cluster alias must not be null");, +        return new SearchRequest(originalSearchRequest, indices, clusterAlias, absoluteStartMillis, finalReduce);, +     * request. When created through {@link #crossClusterSearch(SearchRequest, String[], String, long, boolean)}, this method returns, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * @param clusterAlias the alias to prefix index names with in the returned search results, +    static SearchRequest crossClusterSearch(SearchRequest originalSearchRequest, String[] indices,, +                                            String clusterAlias, long absoluteStartMillis, boolean finalReduce) {, +        Objects.requireNonNull(clusterAlias, "cluster alias must not be null");, +        return new SearchRequest(originalSearchRequest, indices, clusterAlias, absoluteStartMillis, finalReduce);, +     * request. When created through {@link #crossClusterSearch(SearchRequest, String[], String, long, boolean)}, this method returns, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +            SearchRequest ccsSearchRequest = SearchRequest.crossClusterSearch(searchRequest, indices.indices(),, +                SearchRequest ccsSearchRequest = SearchRequest.crossClusterSearch(searchRequest, indices.indices(),, +                SearchRequest ccsLocalSearchRequest = SearchRequest.crossClusterSearch(searchRequest, localIndices.indices(),, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * @param clusterAlias the alias to prefix index names with in the returned search results, +    static SearchRequest crossClusterSearch(SearchRequest originalSearchRequest, String[] indices,, +                                            String clusterAlias, long absoluteStartMillis, boolean finalReduce) {, +        Objects.requireNonNull(clusterAlias, "cluster alias must not be null");, +        return new SearchRequest(originalSearchRequest, indices, clusterAlias, absoluteStartMillis, finalReduce);, +     * request. When created through {@link #crossClusterSearch(SearchRequest, String[], String, long, boolean)}, this method returns, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +            SearchRequest ccsSearchRequest = SearchRequest.crossClusterSearch(searchRequest, indices.indices(),, +                SearchRequest ccsSearchRequest = SearchRequest.crossClusterSearch(searchRequest, indices.indices(),, +                SearchRequest ccsLocalSearchRequest = SearchRequest.crossClusterSearch(searchRequest, localIndices.indices(),, +++ b/server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java, +        return randomBoolean() ? new SearchRequest() : SearchRequest.crossClusterSearch(new SearchRequest(),, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * @param clusterAlias the alias to prefix index names with in the returned search results, +    static SearchRequest crossClusterSearch(SearchRequest originalSearchRequest, String[] indices,, +                                            String clusterAlias, long absoluteStartMillis, boolean finalReduce) {, +        Objects.requireNonNull(clusterAlias, "cluster alias must not be null");, +        return new SearchRequest(originalSearchRequest, indices, clusterAlias, absoluteStartMillis, finalReduce);, +     * request. When created through {@link #crossClusterSearch(SearchRequest, String[], String, long, boolean)}, this method returns, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +            SearchRequest ccsSearchRequest = SearchRequest.crossClusterSearch(searchRequest, indices.indices(),, +                SearchRequest ccsSearchRequest = SearchRequest.crossClusterSearch(searchRequest, indices.indices(),, +                SearchRequest ccsLocalSearchRequest = SearchRequest.crossClusterSearch(searchRequest, localIndices.indices(),, +++ b/server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java, +        return randomBoolean() ? new SearchRequest() : SearchRequest.crossClusterSearch(new SearchRequest(),, +++ b/server/src/test/java/org/elasticsearch/action/search/SearchRequestTests.java, +        return SearchRequest.crossClusterSearch(request, request.indices(),, +        expectThrows(NullPointerException.class, () -> SearchRequest.crossClusterSearch(null, Strings.EMPTY_ARRAY, "", 0, randomBoolean()));, +        expectThrows(NullPointerException.class, () -> SearchRequest.crossClusterSearch(request, null, "", 0, randomBoolean()));, +        expectThrows(NullPointerException.class, () -> SearchRequest.crossClusterSearch(request,, +        expectThrows(NullPointerException.class, () -> SearchRequest.crossClusterSearch(request,, +        expectThrows(IllegalArgumentException.class, () -> SearchRequest.crossClusterSearch(request,, +        SearchRequest searchRequest = SearchRequest.crossClusterSearch(request, Strings.EMPTY_ARRAY, "", 0, randomBoolean());, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * @param clusterAlias the alias to prefix index names with in the returned search results, +    static SearchRequest crossClusterSearch(SearchRequest originalSearchRequest, String[] indices,, +                                            String clusterAlias, long absoluteStartMillis, boolean finalReduce) {, +        Objects.requireNonNull(clusterAlias, "cluster alias must not be null");, +        return new SearchRequest(originalSearchRequest, indices, clusterAlias, absoluteStartMillis, finalReduce);, +     * request. When created through {@link #crossClusterSearch(SearchRequest, String[], String, long, boolean)}, this method returns, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +            SearchRequest ccsSearchRequest = SearchRequest.crossClusterSearch(searchRequest, indices.indices(),, +                SearchRequest ccsSearchRequest = SearchRequest.crossClusterSearch(searchRequest, indices.indices(),, +                SearchRequest ccsLocalSearchRequest = SearchRequest.crossClusterSearch(searchRequest, localIndices.indices(),, +++ b/server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java, +        return randomBoolean() ? new SearchRequest() : SearchRequest.crossClusterSearch(new SearchRequest(),, +++ b/server/src/test/java/org/elasticsearch/action/search/SearchRequestTests.java, +        return SearchRequest.crossClusterSearch(request, request.indices(),, +        expectThrows(NullPointerException.class, () -> SearchRequest.crossClusterSearch(null, Strings.EMPTY_ARRAY, "", 0, randomBoolean()));, +        expectThrows(NullPointerException.class, () -> SearchRequest.crossClusterSearch(request, null, "", 0, randomBoolean()));, +        expectThrows(NullPointerException.class, () -> SearchRequest.crossClusterSearch(request,, +        expectThrows(NullPointerException.class, () -> SearchRequest.crossClusterSearch(request,, +        expectThrows(IllegalArgumentException.class, () -> SearchRequest.crossClusterSearch(request,, +        SearchRequest searchRequest = SearchRequest.crossClusterSearch(request, Strings.EMPTY_ARRAY, "", 0, randomBoolean());, +++ b/server/src/test/java/org/elasticsearch/action/search/TransportSearchActionSingleNodeTests.java, +            SearchRequest searchRequest = SearchRequest.crossClusterSearch(new SearchRequest(), Strings.EMPTY_ARRAY,, +            SearchRequest searchRequest = SearchRequest.crossClusterSearch(new SearchRequest(), Strings.EMPTY_ARRAY,, +            SearchRequest searchRequest = SearchRequest.crossClusterSearch(new SearchRequest(),, +            SearchRequest searchRequest = SearchRequest.crossClusterSearch(new SearchRequest(),, +            SearchRequest searchRequest = SearchRequest.crossClusterSearch(new SearchRequest(),, +            SearchRequest searchRequest = randomBoolean() ? originalRequest : SearchRequest.crossClusterSearch(originalRequest,, +            SearchRequest searchRequest = SearchRequest.crossClusterSearch(originalRequest,]