[+++ b/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +++ b/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +++ b/src/main/java/org/elasticsearch/index/cache/filter/weighted/WeightedFilterCache.java, +import org.apache.lucene.index.IndexReader;, +import org.elasticsearch.common.lucene.SegmentReaderUtils;, +public class WeightedFilterCache extends AbstractIndexComponent implements FilterCache, SegmentReader.CoreClosedListener, IndexReader.ReaderClosedListener {, +    public void onClose(IndexReader reader) {, +        clear(reader.getCoreCacheKey());, +    }, +, +, +    @Override, +                        SegmentReaderUtils.registerCoreListener(context.reader(), cache);, +++ b/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +++ b/src/main/java/org/elasticsearch/index/cache/filter/weighted/WeightedFilterCache.java, +import org.apache.lucene.index.IndexReader;, +import org.elasticsearch.common.lucene.SegmentReaderUtils;, +public class WeightedFilterCache extends AbstractIndexComponent implements FilterCache, SegmentReader.CoreClosedListener, IndexReader.ReaderClosedListener {, +    public void onClose(IndexReader reader) {, +        clear(reader.getCoreCacheKey());, +    }, +, +, +    @Override, +                        SegmentReaderUtils.registerCoreListener(context.reader(), cache);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +    class None implements IndexFieldDataCache {, +, +        @Override, +        public <FD extends AtomicFieldData, IFD extends IndexFieldData<FD>> FD load(AtomicReaderContext context, IFD indexFieldData) throws Exception {, +            return indexFieldData.loadDirect(context);, +        }, +, +        @Override, +        @SuppressWarnings("unchecked"), +        public <IFD extends IndexFieldData.WithOrdinals<?>> IFD load(IndexReader indexReader, IFD indexFieldData) throws Exception {, +            return (IFD) indexFieldData.localGlobalDirect(indexReader);, +        }, +, +        @Override, +        public void clear() {, +        }, +, +        @Override, +        public void clear(String fieldName) {, +        }, +, +        @Override, +        public void clear(Object coreCacheKey) {, +, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +++ b/src/main/java/org/elasticsearch/index/cache/filter/weighted/WeightedFilterCache.java, +import org.apache.lucene.index.IndexReader;, +import org.elasticsearch.common.lucene.SegmentReaderUtils;, +public class WeightedFilterCache extends AbstractIndexComponent implements FilterCache, SegmentReader.CoreClosedListener, IndexReader.ReaderClosedListener {, +    public void onClose(IndexReader reader) {, +        clear(reader.getCoreCacheKey());, +    }, +, +, +    @Override, +                        SegmentReaderUtils.registerCoreListener(context.reader(), cache);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +    class None implements IndexFieldDataCache {, +, +        @Override, +        public <FD extends AtomicFieldData, IFD extends IndexFieldData<FD>> FD load(AtomicReaderContext context, IFD indexFieldData) throws Exception {, +            return indexFieldData.loadDirect(context);, +        }, +, +        @Override, +        @SuppressWarnings("unchecked"), +        public <IFD extends IndexFieldData.WithOrdinals<?>> IFD load(IndexReader indexReader, IFD indexFieldData) throws Exception {, +            return (IFD) indexFieldData.localGlobalDirect(indexReader);, +        }, +, +        @Override, +        public void clear() {, +        }, +, +        @Override, +        public void clear(String fieldName) {, +        }, +, +        @Override, +        public void clear(Object coreCacheKey) {, +, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.indices.fielddata.breaker.NoneCircuitBreakerService;, +    @SuppressWarnings("unchecked"), +                        } else if ("none".equals(cacheType)){, +                            cache = new IndexFieldDataCache.None();, +    public <IFD extends IndexFieldData<?>> IFD getForFieldDirect(FieldMapper<?> mapper) {, +        final FieldMapper.Names fieldNames = mapper.names();]