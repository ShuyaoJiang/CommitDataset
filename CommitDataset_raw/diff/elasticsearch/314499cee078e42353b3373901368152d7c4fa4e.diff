[+++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +import com.google.common.collect.Iterables;, +                        assignedShardsAdd(sr);, +                            assignedShardsAdd(sr);, +                        assignedShardsAdd(sr);, +        for (MutableShardRouting shardRouting : assignedShards(shard.shardId())) {, +            if (shardRouting.primary() && shardRouting.active()) {, +     * Returns one active replica shard for the given ShardRouting shard ID or <code>null</code> if, +     * no active replica is found., +     */, +    public MutableShardRouting activeReplica(ShardRouting shard) {, +        for (MutableShardRouting shardRouting : assignedShards(shard.shardId())) {, +            if (!shardRouting.primary() && shardRouting.active()) {, +                return shardRouting;, +            }, +        }, +        return null;, +    }, +, +    /**, +     * Returns all shards that are not in the state UNASSIGNED with the same shard, +     * ID as the given shard., +     */, +    public Iterable<MutableShardRouting> assignedShards(ShardRouting shard) {, +        return Iterables.unmodifiableIterable(assignedShards(shard.shardId()));, +    }, +, +    /**, +        final Set<MutableShardRouting> shards = assignedShards(shardRouting.shardId());, +        assignedShardsAdd(shard);, +    private Set<MutableShardRouting> assignedShards(ShardId shardId) {, +        assignedShardsRemove(shard);, +    private void assignedShardsAdd(MutableShardRouting shard) {, +    private void assignedShardsRemove(MutableShardRouting shard) {, +, +                Set<MutableShardRouting> mutableShardRoutings = routingNodes.assignedShards(new ShardId(index, i));, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +import com.google.common.collect.Iterables;, +                        assignedShardsAdd(sr);, +                            assignedShardsAdd(sr);, +                        assignedShardsAdd(sr);, +        for (MutableShardRouting shardRouting : assignedShards(shard.shardId())) {, +            if (shardRouting.primary() && shardRouting.active()) {, +     * Returns one active replica shard for the given ShardRouting shard ID or <code>null</code> if, +     * no active replica is found., +     */, +    public MutableShardRouting activeReplica(ShardRouting shard) {, +        for (MutableShardRouting shardRouting : assignedShards(shard.shardId())) {, +            if (!shardRouting.primary() && shardRouting.active()) {, +                return shardRouting;, +            }, +        }, +        return null;, +    }, +, +    /**, +     * Returns all shards that are not in the state UNASSIGNED with the same shard, +     * ID as the given shard., +     */, +    public Iterable<MutableShardRouting> assignedShards(ShardRouting shard) {, +        return Iterables.unmodifiableIterable(assignedShards(shard.shardId()));, +    }, +, +    /**, +        final Set<MutableShardRouting> shards = assignedShards(shardRouting.shardId());, +        assignedShardsAdd(shard);, +    private Set<MutableShardRouting> assignedShards(ShardId shardId) {, +        assignedShardsRemove(shard);, +    private void assignedShardsAdd(MutableShardRouting shard) {, +    private void assignedShardsRemove(MutableShardRouting shard) {, +, +                Set<MutableShardRouting> mutableShardRoutings = routingNodes.assignedShards(new ShardId(index, i));, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        if (!routingNodes.hasUnassignedPrimaries()) {, +            // move out if we don't have unassigned primaries, +            return changed;, +        }, +            if (shardEntry.primary()) {, +                MutableShardRouting candidate = allocation.routingNodes().activeReplica(shardEntry);, +                if (candidate != null) {, +                    routingNodes.swapPrimaryFlag(shardEntry, candidate);, +                    if (candidate.relocatingNodeId() != null) {, +                        RoutingNode node = routingNodes.node(candidate.relocatingNodeId());, +                                if (shardRouting.shardId().equals(candidate.shardId()) && !shardRouting.primary()) {, +        if (routingNodes.hasUnassignedPrimaries()) {, +                if (shardEntry.primary()) {, +                    for(MutableShardRouting routing : routingNodes.assignedShards(shardEntry)) {, +                        if (!routing.primary()) {, +                            shardsToFail.add(routing);, +        }]