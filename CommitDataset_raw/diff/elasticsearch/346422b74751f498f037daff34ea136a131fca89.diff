[+++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/Ordinals.java, +import java.util.Map;, +, +    static class Factories {, +, +        public static Ordinals createFromFlatOrdinals(int[][] ordinals, int numOrds, Map<String, String> options) {, +            String multiOrdinals = options.get("multi_ordinals");, +            if ("flat".equals(multiOrdinals)) {, +                return new MultiFlatArrayOrdinals(ordinals, numOrds);, +            }, +            int multiOrdinalsMaxDocs = 16777216; // Equal to 64MB per storage array, +            String multiOrdinalsMaxDocsVal = options.get("multi_ordinals_max_docs");, +            if (multiOrdinalsMaxDocsVal != null) {, +                multiOrdinalsMaxDocs = Integer.valueOf(multiOrdinalsMaxDocsVal);, +            }, +, +            return new SparseMultiArrayOrdinals(ordinals, numOrds, multiOrdinalsMaxDocs);, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/Ordinals.java, +import java.util.Map;, +, +    static class Factories {, +, +        public static Ordinals createFromFlatOrdinals(int[][] ordinals, int numOrds, Map<String, String> options) {, +            String multiOrdinals = options.get("multi_ordinals");, +            if ("flat".equals(multiOrdinals)) {, +                return new MultiFlatArrayOrdinals(ordinals, numOrds);, +            }, +            int multiOrdinalsMaxDocs = 16777216; // Equal to 64MB per storage array, +            String multiOrdinalsMaxDocsVal = options.get("multi_ordinals_max_docs");, +            if (multiOrdinalsMaxDocsVal != null) {, +                multiOrdinalsMaxDocs = Integer.valueOf(multiOrdinalsMaxDocsVal);, +            }, +, +            return new SparseMultiArrayOrdinals(ordinals, numOrds, multiOrdinalsMaxDocs);, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/SparseMultiArrayOrdinals.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing,, + *  software distributed under the License is distributed on an, + *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + *  KIND, either express or implied.  See the License for the, + *  specific language governing permissions and limitations, + *  under the License., + */, +, +package org.elasticsearch.index.fielddata.ordinals;, +, +import gnu.trove.list.array.TIntArrayList;, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.RamUsage;, +import org.elasticsearch.index.fielddata.util.IntArrayRef;, +, +import java.util.ArrayList;, +import java.util.List;, +, +/**, + * Ordinals implementation that stores the ordinals into sparse fixed arrays., + * <p/>, + * This prevents large ordinal arrays that are created in for example {@link MultiFlatArrayOrdinals} when, + * only a few documents have a lot of terms per field., + */, +public class SparseMultiArrayOrdinals implements Ordinals {, +, +    // Contains pointer in starageOrdinals or the actual ordinal if document has one ordinal, +    private final int[] lookup;, +, +    // Contains the ordinals for documents that have more than one ordinal. Each of this document has a start, +    // point this array and the last ordinal is marked as negative., +    private final int[][] storageOrdinals;, +, +    // The n-th bit to shift the index of the storage array to inside the lookup pointer, +    private final int storageShift;, +    private final int numOrds;, +    private final int numDocs;, +, +    private long size;, +, +    /**, +     * @param loadedOrds The ordinals, +     * @param numOrds    The total number of unique ords, +     * @param maxSize    The maximum size in elements for each individual storage array, +     */, +    public SparseMultiArrayOrdinals(int[][] loadedOrds, int numOrds, int maxSize) {, +        int maxDoc = loadedOrds[0].length;, +        if (loadedOrds.length * loadedOrds[0].length < maxSize) {]