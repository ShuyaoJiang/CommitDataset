[+++ b/plugins/repository-hdfs/src/test/java/org/elasticsearch/repositories/hdfs/HdfsTests.java, +import java.util.Collections;, +import org.elasticsearch.test.ESSingleNodeTestCase;, +public class HdfsTests extends ESSingleNodeTestCase {, +    protected Collection<Class<? extends Plugin>> getPlugins() {, +        createIndex("test-idx-1");, +        createIndex("test-idx-2");, +        createIndex("test-idx-3");, +            client().prepareIndex("test-idx-1", "doc", Integer.toString(i)).setSource("foo", "bar" + i).get();, +            client().prepareIndex("test-idx-2", "doc", Integer.toString(i)).setSource("foo", "bar" + i).get();, +            client().prepareIndex("test-idx-3", "doc", Integer.toString(i)).setSource("foo", "bar" + i).get();, +        client().admin().indices().prepareRefresh().get();, +        client().admin().indices().prepareRefresh().get();, +        client().admin().indices().prepareDelete("test-idx-1", "test-idx-2").get();, +            createIndex("test-idx-1");, +            createIndex("test-idx-2");, +            createIndex("test-idx-3");, +            createIndex("test-idx-1");, +            createIndex("test-idx-2");, +            createIndex("test-idx-3");, +            createIndex("test-idx-1");, +            createIndex("test-idx-2");, +            createIndex("test-idx-3");, +++ b/plugins/repository-hdfs/src/test/java/org/elasticsearch/repositories/hdfs/HdfsTests.java, +import java.util.Collections;, +import org.elasticsearch.test.ESSingleNodeTestCase;, +public class HdfsTests extends ESSingleNodeTestCase {, +    protected Collection<Class<? extends Plugin>> getPlugins() {, +        createIndex("test-idx-1");, +        createIndex("test-idx-2");, +        createIndex("test-idx-3");, +            client().prepareIndex("test-idx-1", "doc", Integer.toString(i)).setSource("foo", "bar" + i).get();, +            client().prepareIndex("test-idx-2", "doc", Integer.toString(i)).setSource("foo", "bar" + i).get();, +            client().prepareIndex("test-idx-3", "doc", Integer.toString(i)).setSource("foo", "bar" + i).get();, +        client().admin().indices().prepareRefresh().get();, +        client().admin().indices().prepareRefresh().get();, +        client().admin().indices().prepareDelete("test-idx-1", "test-idx-2").get();, +            createIndex("test-idx-1");, +            createIndex("test-idx-2");, +            createIndex("test-idx-3");, +            createIndex("test-idx-1");, +            createIndex("test-idx-2");, +            createIndex("test-idx-3");, +            createIndex("test-idx-1");, +            createIndex("test-idx-2");, +            createIndex("test-idx-3");, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java, +import org.elasticsearch.Version;, +import org.elasticsearch.node.MockNode;, +import org.elasticsearch.plugins.Plugin;, +import org.junit.Before;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +, +    private void reset() {, +    private void startNode() {, +    private void cleanup(boolean resetNode) {, +    @Before, +    @Override, +    public void setUp() throws Exception {, +        super.setUp();, +        // Create the node lazily, on the first test. This is ok because we do not randomize any settings,, +        // only the cluster name. This allows us to have overriden properties for plugins and the version to use., +        if (NODE == null) {, +            startNode();, +        }, +    }, +, +    @Override, +    /** The version of elasticsearch the node should act like. */, +    protected Version getVersion() {, +        return Version.CURRENT;, +    }, +, +    /** The plugin classes that should be added to the node. */, +    protected Collection<Class<? extends Plugin>> getPlugins() {, +        return Collections.emptyList();, +    }, +, +    /** Helper method to create list of plugins without specifying generic types. */, +    @SafeVarargs, +    @SuppressWarnings("varargs") // due to type erasure, the varargs type is non-reifiable, which casues this warning, +    protected final Collection<Class<? extends Plugin>> pluginList(Class<? extends Plugin>... plugins) {, +        return Arrays.asList(plugins);, +    }, +, +    private Node newNode() {, +        Settings settings = Settings.builder(), +            .build();, +        Node build = new MockNode(settings, getVersion(), getPlugins());]