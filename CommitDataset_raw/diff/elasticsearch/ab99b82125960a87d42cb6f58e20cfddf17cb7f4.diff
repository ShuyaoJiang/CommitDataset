[+++ /dev/null, +++ /dev/null, +++ b/qa/smoke-test-watcher/src/test/java/org/elasticsearch/smoketest/SmokeTestWatcherTestSuiteIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.smoketest;, +, +import org.apache.http.entity.ContentType;, +import org.apache.http.entity.StringEntity;, +import org.elasticsearch.client.Response;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.settings.SecureString;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.test.rest.ESRestTestCase;, +import org.elasticsearch.test.rest.yaml.ObjectPath;, +import org.elasticsearch.xpack.core.watcher.support.WatcherIndexTemplateRegistryField;, +import org.junit.After;, +import org.junit.Before;, +, +import java.io.IOException;, +import java.util.Collections;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicReference;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +import static org.hamcrest.Matchers.hasEntry;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.notNullValue;, +, +public class SmokeTestWatcherTestSuiteIT extends ESRestTestCase {, +, +    private static final String TEST_ADMIN_USERNAME = "test_admin";, +    private static final String TEST_ADMIN_PASSWORD = "x-pack-test-password";, +, +    @Before, +    public void startWatcher() throws Exception {, +        assertBusy(() -> {, +            adminClient().performRequest("POST", "_xpack/watcher/_start");, +, +            for (String template : WatcherIndexTemplateRegistryField.TEMPLATE_NAMES) {, +                assertOK(adminClient().performRequest("HEAD", "_template/" + template));, +            }, +, +            Response statsResponse = adminClient().performRequest("GET", "_xpack/watcher/stats");, +            ObjectPath objectPath = ObjectPath.createFromResponse(statsResponse);, +            String state = objectPath.evaluate("stats.0.watcher_state");, +            assertThat(state, is("started"));, +        });, +    }, +, +    @After, +    public void stopWatcher() throws Exception {, +        assertBusy(() -> {, +            adminClient().performRequest("POST", "_xpack/watcher/_stop", Collections.emptyMap());, +            Response statsResponse = adminClient().performRequest("GET", "_xpack/watcher/stats");, +            ObjectPath objectPath = ObjectPath.createFromResponse(statsResponse);, +            String state = objectPath.evaluate("stats.0.watcher_state");, +            assertThat(state, is("stopped"));, +        });, +    }, +, +    @Override, +    protected Settings restClientSettings() {, +        String token = basicAuthHeaderValue("watcher_manager", new SecureString("x-pack-test-password".toCharArray()));, +        return Settings.builder().put(ThreadContext.PREFIX + ".Authorization", token).build();, +    }, +, +    @Override, +    protected Settings restAdminSettings() {, +        String token = basicAuthHeaderValue(TEST_ADMIN_USERNAME, new SecureString(TEST_ADMIN_PASSWORD.toCharArray()));, +        return Settings.builder().put(ThreadContext.PREFIX + ".Authorization", token).build();, +    }, +, +    public void testMonitorClusterHealth() throws Exception {, +        String watchId = "cluster_health_watch";, +, +        // get master publish address, +        Response clusterStateResponse = adminClient().performRequest("GET", "_cluster/state");, +        ObjectPath clusterState = ObjectPath.createFromResponse(clusterStateResponse);, +        String masterNode = clusterState.evaluate("master_node");, +        assertThat(masterNode, is(notNullValue()));, +, +        Response statsResponse = adminClient().performRequest("GET", "_nodes");, +        ObjectPath stats = ObjectPath.createFromResponse(statsResponse);, +        String address = stats.evaluate("nodes." + masterNode + ".http.publish_address");, +        assertThat(address, is(notNullValue()));, +        String[] splitAddress = address.split(":", 2);, +        String host = splitAddress[0];, +        int port = Integer.valueOf(splitAddress[1]);, +, +        // put watch, +        try (XContentBuilder builder = jsonBuilder()) {, +            builder.startObject();]