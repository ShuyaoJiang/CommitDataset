[+++ b/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +++ b/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +++ b/src/test/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzerIntegrationTests.java, +import org.elasticsearch.test.ElasticsearchBackwardsCompatIntegrationTest;, +@ElasticsearchBackwardsCompatIntegrationTest.CompatibilityVersion(version = Version.V_1_2_0_ID) // we throw an exception if we create an index with _field_names that is 1.3, +++ b/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +++ b/src/test/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzerIntegrationTests.java, +import org.elasticsearch.test.ElasticsearchBackwardsCompatIntegrationTest;, +@ElasticsearchBackwardsCompatIntegrationTest.CompatibilityVersion(version = Version.V_1_2_0_ID) // we throw an exception if we create an index with _field_names that is 1.3, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +import com.carrotsearch.randomizedtesting.annotations.TestGroup;, +import org.elasticsearch.common.Strings;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Inherited;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +import java.util.Random;, + * Backwards compatibility tests are disabled by default via {@link Backwards} annotation., + *          tests annotated with {@link Backwards} (defaults to, +@ElasticsearchBackwardsCompatIntegrationTest.Backwards, +    /**, +     * Key used to set the path for the elasticsearch executable used to run backwards compatibility tests from, +     * via the commandline -D{@value #TESTS_BACKWARDS_COMPATIBILITY}, +     */, +    public static final String TESTS_BACKWARDS_COMPATIBILITY = "tests.bwc";, +    public static final String TESTS_BACKWARDS_COMPATIBILITY_VERSION = "tests.bwc.version";, +    /**, +     * Key used to set the path for the elasticsearch executable used to run backwards compatibility tests from, +     * via the commandline -D{@value #TESTS_BACKWARDS_COMPATIBILITY_PATH}, +     */, +    public static final String TESTS_BACKWARDS_COMPATIBILITY_PATH = "tests.bwc.path";, +    /**, +     * Property that allows to adapt the tests behaviour to older features/bugs based on the input version, +     */, +    private static final String TESTS_COMPATIBILITY = "tests.compatibility";, +, +    private static final Version GLOABL_COMPATIBILITY_VERSION = Version.fromString(compatibilityVersionProperty());, +, +    @Override, +    protected ImmutableSettings.Builder setRandomSettings(Random random, ImmutableSettings.Builder builder) {, +        if (globalCompatibilityVersion().before(Version.V_1_3_2)) {, +            // if we test against nodes before 1.3.2 we disable all the compression due to a known bug, +            // see #7210, +            builder.put(RecoverySettings.INDICES_RECOVERY_COMPRESS, false);, +        }, +        return builder;, +    }, +, +    /**, +     * Retruns the tests compatibility version., +     */, +    public Version compatibilityVersion() {, +        return compatibilityVersion(getClass());, +    }, +, +    private Version compatibilityVersion(Class<?> clazz) {, +        if (clazz == Object.class || clazz == ElasticsearchIntegrationTest.class) {, +            return globalCompatibilityVersion();, +        }, +        CompatibilityVersion annotation = clazz.getAnnotation(CompatibilityVersion.class);, +        if (annotation != null) {, +            return Version.smallest(Version.fromId(annotation.version()), compatibilityVersion(clazz.getSuperclass()));, +        }, +        return compatibilityVersion(clazz.getSuperclass());, +    }, +, +    /**, +     * Returns a global compatibility version that is set via the, +     * {@value #TESTS_COMPATIBILITY} or {@value #TESTS_BACKWARDS_COMPATIBILITY_VERSION} system property., +     * If both are unset the current version is used as the global compatibility version. This, +     * compatibility version is used for static randomization. For per-suite compatibility version see, +     * {@link #compatibilityVersion()}, +     */, +    public static Version globalCompatibilityVersion() {, +        return GLOABL_COMPATIBILITY_VERSION;, +    }, +, +    private static String compatibilityVersionProperty() {, +        final String version = System.getProperty(TESTS_COMPATIBILITY);, +        if (Strings.hasLength(version)) {, +            return version;, +        }, +        return System.getProperty(TESTS_BACKWARDS_COMPATIBILITY_VERSION);, +    }, +, +, +    /**, +     * Annotation for backwards compat tests, +     */, +    @Inherited, +    @Retention(RetentionPolicy.RUNTIME), +    @Target(ElementType.TYPE), +    @TestGroup(enabled = false, sysProperty = ElasticsearchBackwardsCompatIntegrationTest.TESTS_BACKWARDS_COMPATIBILITY), +    public @interface Backwards {, +    }, +, +    /**, +     * If a test is annotated with {@link CompatibilityVersion}, +     * all randomized settings will only contain settings or mappings which are compatible with the specified version ID.]