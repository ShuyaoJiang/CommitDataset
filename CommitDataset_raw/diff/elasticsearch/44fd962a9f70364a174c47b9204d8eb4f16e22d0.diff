[+++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +                if (successfulOps.get() == 0) {, +                    listener.onFailure(new SearchPhaseExecutionException("query_fetch", "all shards failed", buildShardFailures()));, +                } else {, +        }, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +                if (successfulOps.get() == 0) {, +                    listener.onFailure(new SearchPhaseExecutionException("query_fetch", "all shards failed", buildShardFailures()));, +                } else {, +        }, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryThenFetchAction.java, +                if (successfulOps.get() == 0) {, +                    listener.onFailure(new SearchPhaseExecutionException("query", "all shards failed", buildShardFailures()));, +                } else {, +        }, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +                if (successfulOps.get() == 0) {, +                    listener.onFailure(new SearchPhaseExecutionException("query_fetch", "all shards failed", buildShardFailures()));, +                } else {, +        }, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryThenFetchAction.java, +                if (successfulOps.get() == 0) {, +                    listener.onFailure(new SearchPhaseExecutionException("query", "all shards failed", buildShardFailures()));, +                } else {, +        }, +++ b/src/test/java/org/elasticsearch/search/scroll/SearchScrollTests.java, +        assertThrows(client().prepareSearchScroll(searchResponse1.getScrollId()).setScroll(TimeValue.timeValueMinutes(2)), RestStatus.NOT_FOUND);, +        assertThrows(client().prepareSearchScroll(searchResponse2.getScrollId()).setScroll(TimeValue.timeValueMinutes(2)), RestStatus.NOT_FOUND);, +        assertThrows(cluster().transportClient().prepareSearchScroll(searchResponse1.getScrollId()).setScroll(TimeValue.timeValueMinutes(2)), RestStatus.NOT_FOUND);, +        assertThrows(cluster().transportClient().prepareSearchScroll(searchResponse2.getScrollId()).setScroll(TimeValue.timeValueMinutes(2)), RestStatus.NOT_FOUND);, +        assertThrows(cluster().transportClient().prepareSearchScroll(searchResponse.getScrollId()), RestStatus.NOT_FOUND);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +                if (successfulOps.get() == 0) {, +                    listener.onFailure(new SearchPhaseExecutionException("query_fetch", "all shards failed", buildShardFailures()));, +                } else {, +        }, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryThenFetchAction.java, +                if (successfulOps.get() == 0) {, +                    listener.onFailure(new SearchPhaseExecutionException("query", "all shards failed", buildShardFailures()));, +                } else {, +        }, +++ b/src/test/java/org/elasticsearch/search/scroll/SearchScrollTests.java, +        assertThrows(client().prepareSearchScroll(searchResponse1.getScrollId()).setScroll(TimeValue.timeValueMinutes(2)), RestStatus.NOT_FOUND);, +        assertThrows(client().prepareSearchScroll(searchResponse2.getScrollId()).setScroll(TimeValue.timeValueMinutes(2)), RestStatus.NOT_FOUND);, +        assertThrows(cluster().transportClient().prepareSearchScroll(searchResponse1.getScrollId()).setScroll(TimeValue.timeValueMinutes(2)), RestStatus.NOT_FOUND);, +        assertThrows(cluster().transportClient().prepareSearchScroll(searchResponse2.getScrollId()).setScroll(TimeValue.timeValueMinutes(2)), RestStatus.NOT_FOUND);, +        assertThrows(cluster().transportClient().prepareSearchScroll(searchResponse.getScrollId()), RestStatus.NOT_FOUND);, +++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +import org.elasticsearch.ExceptionsHelper;, +    public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?, ?> builder, RestStatus status) {, +        assertThrows(builder.execute(), status);, +    }, +, +    public static <E extends Throwable> void assertThrows(ActionRequestBuilder<?, ?, ?> builder, RestStatus status, String extraInfo) {, +        assertThrows(builder.execute(), status, extraInfo);, +    }, +, +    public static <E extends Throwable> void assertThrows(ActionFuture future, RestStatus status) {, +        assertThrows(future, status, null);, +    }, +, +    public static void assertThrows(ActionFuture future, RestStatus status, String extraInfo) {, +        boolean fail = false;, +        extraInfo = extraInfo == null || extraInfo.isEmpty() ? "" : extraInfo + ": ";, +        extraInfo += "expected a " + status + " status exception to be thrown";, +, +        try {, +            future.actionGet();, +            fail = true;, +        } catch (Throwable e) {, +            assertThat(extraInfo, ExceptionsHelper.status(e), equalTo(status));, +        }, +        // has to be outside catch clause to get a proper message, +        if (fail) {, +            throw new AssertionError(extraInfo);, +        }, +    }, +]