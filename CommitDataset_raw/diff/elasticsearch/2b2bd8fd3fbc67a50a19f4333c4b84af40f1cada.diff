[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +            reindexRequest, RequestConverters::reindex, options, BulkByScrollResponse::fromXContent, singleton(409), +            reindexRequest, RequestConverters::reindex, options, BulkByScrollResponse::fromXContent, listener, singleton(409), +            updateByQueryRequest, RequestConverters::updateByQuery, options, BulkByScrollResponse::fromXContent, singleton(409), +            updateByQueryRequest, RequestConverters::updateByQuery, options, BulkByScrollResponse::fromXContent, listener, singleton(409), +            deleteByQueryRequest, RequestConverters::deleteByQuery, options, BulkByScrollResponse::fromXContent, singleton(409), +            deleteByQueryRequest, RequestConverters::deleteByQuery, options, BulkByScrollResponse::fromXContent, listener, singleton(409), +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +            reindexRequest, RequestConverters::reindex, options, BulkByScrollResponse::fromXContent, singleton(409), +            reindexRequest, RequestConverters::reindex, options, BulkByScrollResponse::fromXContent, listener, singleton(409), +            updateByQueryRequest, RequestConverters::updateByQuery, options, BulkByScrollResponse::fromXContent, singleton(409), +            updateByQueryRequest, RequestConverters::updateByQuery, options, BulkByScrollResponse::fromXContent, listener, singleton(409), +            deleteByQueryRequest, RequestConverters::deleteByQuery, options, BulkByScrollResponse::fromXContent, singleton(409), +            deleteByQueryRequest, RequestConverters::deleteByQuery, options, BulkByScrollResponse::fromXContent, listener, singleton(409), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +            reindexRequest, RequestConverters::reindex, options, BulkByScrollResponse::fromXContent, singleton(409), +            reindexRequest, RequestConverters::reindex, options, BulkByScrollResponse::fromXContent, listener, singleton(409), +            updateByQueryRequest, RequestConverters::updateByQuery, options, BulkByScrollResponse::fromXContent, singleton(409), +            updateByQueryRequest, RequestConverters::updateByQuery, options, BulkByScrollResponse::fromXContent, listener, singleton(409), +            deleteByQueryRequest, RequestConverters::deleteByQuery, options, BulkByScrollResponse::fromXContent, singleton(409), +            deleteByQueryRequest, RequestConverters::deleteByQuery, options, BulkByScrollResponse::fromXContent, listener, singleton(409), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ReindexIT.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksRequest;, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksResponse;, +import org.elasticsearch.action.admin.cluster.node.tasks.list.TaskGroup;, +import org.elasticsearch.action.get.GetRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.index.reindex.DeleteByQueryAction;, +import org.elasticsearch.index.reindex.DeleteByQueryRequest;, +import org.elasticsearch.index.reindex.ScrollableHitSource;, +import org.elasticsearch.index.reindex.UpdateByQueryAction;, +import org.elasticsearch.index.reindex.UpdateByQueryRequest;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.tasks.RawTaskStatus;, +import org.elasticsearch.tasks.TaskId;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.stream.Collectors;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.empty;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.everyItem;, +import static org.hamcrest.Matchers.hasSize;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.lessThan;, +    private static final String CONFLICT_PIPELINE_ID = "conflict_pipeline";, +, +    public void testReindexConflict() throws IOException {, +        final String sourceIndex = "testreindexconflict_source";, +        final String destIndex = "testreindexconflict_dest";, +, +        final Settings settings = Settings.builder(), +            .put("number_of_shards", 1), +            .put("number_of_replicas", 0), +            .build();, +        createIndex(sourceIndex, settings);, +        createIndex(destIndex, settings);, +        final BulkRequest bulkRequest = new BulkRequest(), +            .add(new IndexRequest(sourceIndex).id("1").source(Collections.singletonMap("foo", "bar"), XContentType.JSON)), +            .add(new IndexRequest(sourceIndex).id("2").source(Collections.singletonMap("foo", "bar"), XContentType.JSON)), +            .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);, +        assertThat(highLevelClient().bulk(bulkRequest, RequestOptions.DEFAULT).status(), equalTo(RestStatus.OK));, +, +        putConflictPipeline();, +, +        final ReindexRequest reindexRequest = new ReindexRequest();, +        reindexRequest.setSourceIndices(sourceIndex);, +        reindexRequest.setDestIndex(destIndex);, +        reindexRequest.setRefresh(true);, +        reindexRequest.setDestPipeline(CONFLICT_PIPELINE_ID);, +        final BulkByScrollResponse response = highLevelClient().reindex(reindexRequest, RequestOptions.DEFAULT);, +, +        assertThat(response.getVersionConflicts(), equalTo(2L));, +        assertThat(response.getBulkFailures(), empty());, +        assertThat(response.getSearchFailures(), hasSize(2));, +        assertThat(, +            response.getSearchFailures().stream().map(ScrollableHitSource.SearchFailure::toString).collect(Collectors.toSet()),, +            everyItem(containsString("version conflict")), +        );, +, +        assertThat(response.getTotal(), equalTo(2L));, +        assertThat(response.getCreated(), equalTo(0L));, +        assertThat(response.getUpdated(), equalTo(0L));, +        assertThat(response.getDeleted(), equalTo(0L));, +        assertThat(response.getNoops(), equalTo(0L));, +        assertThat(response.getBatches(), equalTo(1));, +        assertTrue(response.getTook().getMillis() > 0);, +    }, +, +    public void testUpdateByQuery() throws Exception {, +        final String sourceIndex = "source1";, +        {]