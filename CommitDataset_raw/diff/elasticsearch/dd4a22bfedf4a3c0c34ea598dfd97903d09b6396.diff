[+++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +            // Keep track of all unique indices and all unique types per index for the create index requests:, +            final Map<String, Set<String>> indicesAndTypes = new HashMap<>();, +                    Set<String> types = indicesAndTypes.get(req.index());, +                    if (types == null) {, +                        indicesAndTypes.put(req.index(), types = new HashSet<>());, +                    types.add(req.type());, +            final AtomicInteger counter = new AtomicInteger(indicesAndTypes.size());, +            for (Map.Entry<String, Set<String>> entry : indicesAndTypes.entrySet()) {, +                final String index = entry.getKey();, +                    CreateIndexRequest createIndexRequest = new CreateIndexRequest(bulkRequest);, +                    createIndexRequest.index(index);, +                    for (String type : entry.getValue()) {, +                        createIndexRequest.mapping(type);, +                    }, +                    createIndexRequest.cause("auto(bulk api)");, +                    createIndexRequest.masterNodeTimeout(bulkRequest.timeout());, +                    createIndexAction.execute(createIndexRequest, new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +            // Keep track of all unique indices and all unique types per index for the create index requests:, +            final Map<String, Set<String>> indicesAndTypes = new HashMap<>();, +                    Set<String> types = indicesAndTypes.get(req.index());, +                    if (types == null) {, +                        indicesAndTypes.put(req.index(), types = new HashSet<>());, +                    types.add(req.type());, +            final AtomicInteger counter = new AtomicInteger(indicesAndTypes.size());, +            for (Map.Entry<String, Set<String>> entry : indicesAndTypes.entrySet()) {, +                final String index = entry.getKey();, +                    CreateIndexRequest createIndexRequest = new CreateIndexRequest(bulkRequest);, +                    createIndexRequest.index(index);, +                    for (String type : entry.getValue()) {, +                        createIndexRequest.mapping(type);, +                    }, +                    createIndexRequest.cause("auto(bulk api)");, +                    createIndexRequest.masterNodeTimeout(bulkRequest.timeout());, +                    createIndexAction.execute(createIndexRequest, new ActionListener<CreateIndexResponse>() {, +++ b/src/test/java/org/elasticsearch/indices/template/SimpleIndexTemplateTests.java, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.action.index.IndexRequest;, +                .setTemplate("a*"), +                .setTemplate("b*"), +                .setTemplate("c*"), +                .setTemplate("d*"), +        client().prepareIndex("a1", "test", "test").setSource("{}").get();, +        BulkResponse response = client().prepareBulk().add(new IndexRequest("a2", "test", "test").source("{}")).get();, +        assertThat(response.hasFailures(), is(false));, +        assertThat(response.getItems()[0].isFailed(), equalTo(false));, +        assertThat(response.getItems()[0].getIndex(), equalTo("a2"));, +        assertThat(response.getItems()[0].getType(), equalTo("test"));, +        assertThat(response.getItems()[0].getId(), equalTo("test"));, +        assertThat(response.getItems()[0].getVersion(), equalTo(1l));, +, +        client().prepareIndex("b1", "test", "test").setSource("{}").get();, +        response = client().prepareBulk().add(new IndexRequest("b2", "test", "test").source("{}")).get();, +        assertThat(response.hasFailures(), is(false));, +        assertThat(response.getItems()[0].isFailed(), equalTo(false));, +        assertThat(response.getItems()[0].getIndex(), equalTo("b2"));, +        assertThat(response.getItems()[0].getType(), equalTo("test"));, +        assertThat(response.getItems()[0].getId(), equalTo("test"));, +        assertThat(response.getItems()[0].getVersion(), equalTo(1l));, +, +        client().prepareIndex("c1", "test", "test").setSource("{}").get();, +        response = client().prepareBulk().add(new IndexRequest("c2", "test", "test").source("{}")).get();, +        assertThat(response.hasFailures(), is(false));, +        assertThat(response.getItems()[0].isFailed(), equalTo(false));, +        assertThat(response.getItems()[0].getIndex(), equalTo("c2"));, +        assertThat(response.getItems()[0].getType(), equalTo("test"));, +        assertThat(response.getItems()[0].getId(), equalTo("test"));, +        assertThat(response.getItems()[0].getVersion(), equalTo(1l));, +, +            client().prepareIndex("d1", "test", "test").setSource("{}").get();, +        response = client().prepareBulk().add(new IndexRequest("d2", "test", "test").source("{}")).get();, +        assertThat(response.hasFailures(), is(true));, +        assertThat(response.getItems()[0].isFailed(), equalTo(true));, +        assertThat(response.getItems()[0].getFailureMessage(), containsString("failed to parse filter for alias [alias4]"));]