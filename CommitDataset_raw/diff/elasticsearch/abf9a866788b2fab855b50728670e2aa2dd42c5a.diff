[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginInfo.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.Strings;, +    public static final String DESCRIPTION_NOT_AVAILABLE = "No description found.";, +    public static final String VERSION_NOT_AVAILABLE = "NA";, +, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +    private String version;, +     * @param version     Version number is applicable (NA otherwise), +    public PluginInfo(String name, String description, boolean site, boolean jvm, String version) {, +        if (Strings.hasText(version)) {, +            this.version = version;, +        } else {, +            this.version = VERSION_NOT_AVAILABLE;, +        }, +     * @return relative URL for site plugin, +    /**, +     * @return Version number for the plugin, +     */, +    public String getVersion() {, +        return version;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_1_0_0_RC2)) {, +            this.version = in.readString();, +        } else {, +            this.version = VERSION_NOT_AVAILABLE;, +        }, +        if (out.getVersion().onOrAfter(Version.V_1_0_0_RC2)) {, +            out.writeString(version);, +        }, +        builder.field(Fields.VERSION, version);, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        PluginInfo that = (PluginInfo) o;, +, +        if (!name.equals(that.name)) return false;, +        if (version != null ? !version.equals(that.version) : that.version != null) return false;, +, +    @Override, +    public String toString() {, +        final StringBuffer sb = new StringBuffer("PluginInfo{");, +        sb.append("name='").append(name).append('\'');, +        sb.append(", description='").append(description).append('\'');, +        sb.append(", site=").append(site);, +        sb.append(", jvm=").append(jvm);, +        sb.append(", version='").append(version).append('\'');, +        sb.append('}');, +        return sb.toString();, +    }, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginInfo.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.Strings;, +    public static final String DESCRIPTION_NOT_AVAILABLE = "No description found.";, +    public static final String VERSION_NOT_AVAILABLE = "NA";, +, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +    private String version;, +     * @param version     Version number is applicable (NA otherwise), +    public PluginInfo(String name, String description, boolean site, boolean jvm, String version) {, +        if (Strings.hasText(version)) {, +            this.version = version;, +        } else {, +            this.version = VERSION_NOT_AVAILABLE;, +        }, +     * @return relative URL for site plugin, +    /**, +     * @return Version number for the plugin, +     */, +    public String getVersion() {, +        return version;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_1_0_0_RC2)) {, +            this.version = in.readString();, +        } else {, +            this.version = VERSION_NOT_AVAILABLE;, +        }, +        if (out.getVersion().onOrAfter(Version.V_1_0_0_RC2)) {, +            out.writeString(version);, +        }, +        builder.field(Fields.VERSION, version);, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        PluginInfo that = (PluginInfo) o;, +, +        if (!name.equals(that.name)) return false;, +        if (version != null ? !version.equals(that.version) : that.version != null) return false;, +, +    @Override, +    public String toString() {, +        final StringBuffer sb = new StringBuffer("PluginInfo{");, +        sb.append("name='").append(name).append('\'');, +        sb.append(", description='").append(description).append('\'');, +        sb.append(", site=").append(site);, +        sb.append(", jvm=").append(jvm);, +        sb.append(", version='").append(version).append('\'');, +        sb.append('}');]