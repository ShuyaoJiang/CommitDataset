[+++ b/x-pack/plugin/sql/qa/src/main/resources/null.sql-spec, +coalesceOrderBy, +SELECT COALESCE(null, ABS(emp_no) + 1, 123) AS c FROM test_emp ORDER BY c NULLS FIRST LIMIT 5;, +, +nullIfOrderBy, +SELECT NULLIF(10030, ABS(emp_no + 1)) AS nif FROM test_emp ORDER BY nif NULLS FIRST LIMIT 5;, +, +greatestOrderBy, +SELECT GREATEST(10096, ABS(emp_no + 1)) AS gt FROM test_emp ORDER BY gt LIMIT 10;, +, +, +leastOrderBy, +SELECT LEAST(10096, ABS(emp_no + 1)) AS lt FROM test_emp ORDER BY lt LIMIT 10;, +++ b/x-pack/plugin/sql/qa/src/main/resources/null.sql-spec, +coalesceOrderBy, +SELECT COALESCE(null, ABS(emp_no) + 1, 123) AS c FROM test_emp ORDER BY c NULLS FIRST LIMIT 5;, +, +nullIfOrderBy, +SELECT NULLIF(10030, ABS(emp_no + 1)) AS nif FROM test_emp ORDER BY nif NULLS FIRST LIMIT 5;, +, +greatestOrderBy, +SELECT GREATEST(10096, ABS(emp_no + 1)) AS gt FROM test_emp ORDER BY gt LIMIT 10;, +, +, +leastOrderBy, +SELECT LEAST(10096, ABS(emp_no + 1)) AS lt FROM test_emp ORDER BY lt LIMIT 10;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/ArbitraryConditionalFunction.java, +        return new ScriptTemplate(formatTemplate(template.toString()), params.build(), dataType());, +++ b/x-pack/plugin/sql/qa/src/main/resources/null.sql-spec, +coalesceOrderBy, +SELECT COALESCE(null, ABS(emp_no) + 1, 123) AS c FROM test_emp ORDER BY c NULLS FIRST LIMIT 5;, +, +nullIfOrderBy, +SELECT NULLIF(10030, ABS(emp_no + 1)) AS nif FROM test_emp ORDER BY nif NULLS FIRST LIMIT 5;, +, +greatestOrderBy, +SELECT GREATEST(10096, ABS(emp_no + 1)) AS gt FROM test_emp ORDER BY gt LIMIT 10;, +, +, +leastOrderBy, +SELECT LEAST(10096, ABS(emp_no + 1)) AS lt FROM test_emp ORDER BY lt LIMIT 10;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/ArbitraryConditionalFunction.java, +        return new ScriptTemplate(formatTemplate(template.toString()), params.build(), dataType());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/NullIf.java, +        return new ScriptTemplate(formatTemplate(template), params.build(), dataType);, +++ b/x-pack/plugin/sql/qa/src/main/resources/null.sql-spec, +coalesceOrderBy, +SELECT COALESCE(null, ABS(emp_no) + 1, 123) AS c FROM test_emp ORDER BY c NULLS FIRST LIMIT 5;, +, +nullIfOrderBy, +SELECT NULLIF(10030, ABS(emp_no + 1)) AS nif FROM test_emp ORDER BY nif NULLS FIRST LIMIT 5;, +, +greatestOrderBy, +SELECT GREATEST(10096, ABS(emp_no + 1)) AS gt FROM test_emp ORDER BY gt LIMIT 10;, +, +, +leastOrderBy, +SELECT LEAST(10096, ABS(emp_no + 1)) AS lt FROM test_emp ORDER BY lt LIMIT 10;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/ArbitraryConditionalFunction.java, +        return new ScriptTemplate(formatTemplate(template.toString()), params.build(), dataType());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/NullIf.java, +        return new ScriptTemplate(formatTemplate(template), params.build(), dataType);, +++ b/x-pack/plugin/sql/src/main/resources/org/elasticsearch/xpack/sql/plugin/sql_whitelist.txt, +  def coalesce(java.util.List), +  def greatest(java.util.List), +  def least(java.util.List), +  def nullif(Object, Object), +++ b/x-pack/plugin/sql/qa/src/main/resources/null.sql-spec, +coalesceOrderBy, +SELECT COALESCE(null, ABS(emp_no) + 1, 123) AS c FROM test_emp ORDER BY c NULLS FIRST LIMIT 5;, +, +nullIfOrderBy, +SELECT NULLIF(10030, ABS(emp_no + 1)) AS nif FROM test_emp ORDER BY nif NULLS FIRST LIMIT 5;, +, +greatestOrderBy, +SELECT GREATEST(10096, ABS(emp_no + 1)) AS gt FROM test_emp ORDER BY gt LIMIT 10;, +, +, +leastOrderBy, +SELECT LEAST(10096, ABS(emp_no + 1)) AS lt FROM test_emp ORDER BY lt LIMIT 10;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/ArbitraryConditionalFunction.java, +        return new ScriptTemplate(formatTemplate(template.toString()), params.build(), dataType());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/NullIf.java, +        return new ScriptTemplate(formatTemplate(template), params.build(), dataType);, +++ b/x-pack/plugin/sql/src/main/resources/org/elasticsearch/xpack/sql/plugin/sql_whitelist.txt, +  def coalesce(java.util.List), +  def greatest(java.util.List), +  def least(java.util.List), +  def nullif(Object, Object), +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java, +import org.elasticsearch.xpack.sql.expression.gen.script.ScriptTemplate;, +import org.elasticsearch.xpack.sql.plan.logical.Aggregate;, +import org.elasticsearch.xpack.sql.querydsl.agg.GroupByScriptKey;, +, +    public void testTranslateCoalesce_GroupBy_Painless() {, +        LogicalPlan p = plan("SELECT COALESCE(int, 10) FROM test GROUP BY 1");, +        assertTrue(p instanceof Aggregate);, +        Expression condition = ((Aggregate) p).groupings().get(0);, +        assertFalse(condition.foldable());, +        QueryTranslator.GroupingContext groupingContext = QueryTranslator.groupBy(((Aggregate) p).groupings());]