[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    Map<String, String> keystoreSettings = new HashMap<>(), +, +    void keystoreSetting(String name, String value) {, +        keystoreSettings.put(name, value), +    }, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    Map<String, String> keystoreSettings = new HashMap<>(), +, +    void keystoreSetting(String name, String value) {, +        keystoreSettings.put(name, value), +    }, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import java.nio.charset.StandardCharsets, +, +        setup = configureCreateKeystoreTask(taskName(prefix, node, 'createKeystore'), project, setup, node), +        setup = configureAddKeystoreSettingTasks(prefix, project, setup, node), +, +    /** Adds a task to create keystore */, +    static Task configureCreateKeystoreTask(String name, Project project, Task setup, NodeInfo node) {, +        if (node.config.keystoreSettings.isEmpty()) {, +            return setup, +        } else {, +            File esKeystoreUtil = Paths.get(node.homeDir.toString(), "bin/" + "elasticsearch-keystore").toFile(), +            return configureExecTask(name, project, setup, node, esKeystoreUtil, 'create'), +        }, +    }, +, +    /** Adds tasks to add settings to the keystore */, +    static Task configureAddKeystoreSettingTasks(String parent, Project project, Task setup, NodeInfo node) {, +        Map kvs = node.config.keystoreSettings, +        File esKeystoreUtil = Paths.get(node.homeDir.toString(), "bin/" + "elasticsearch-keystore").toFile(), +        Task parentTask = setup, +        for (Map.Entry<String, String> entry in kvs) {, +            String key = entry.getKey(), +            String name = taskName(parent, node, 'addToKeystore#' + key), +            Task t = configureExecTask(name, project, parentTask, node, esKeystoreUtil, 'add', key, '-x'), +            t.doFirst {, +                standardInput = new ByteArrayInputStream(entry.getValue().getBytes(StandardCharsets.UTF_8)), +            }, +            parentTask = t, +        }, +        return parentTask, +    }, +]