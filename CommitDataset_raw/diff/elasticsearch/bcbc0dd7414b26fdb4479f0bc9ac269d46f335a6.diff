[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +        sb.append("Failed to execute phase [").append(phaseName).append("], ").append(msg);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +        sb.append("Failed to execute phase [").append(phaseName).append("], ").append(msg);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +import java.util.Arrays;, +, +            if (expectedSuccessfulOps == 0) {, +                // not search shards to search on..., +                throw new SearchPhaseExecutionException("initial", "No indices / shards to search on, requested indices are " + Arrays.toString(request.indices()), buildShardFailures());, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +        sb.append("Failed to execute phase [").append(phaseName).append("], ").append(msg);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +import java.util.Arrays;, +, +            if (expectedSuccessfulOps == 0) {, +                // not search shards to search on..., +                throw new SearchPhaseExecutionException("initial", "No indices / shards to search on, requested indices are " + Arrays.toString(request.indices()), buildShardFailures());, +            }, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/document/DocumentActionsTests.java, +, +        // no indices, check that simple operations fail, +        try {, +            client1.prepareCount("test").setQuery(termQuery("_type", "type1")).setOperationThreading(BroadcastOperationThreading.NO_THREADS).execute().actionGet();, +            assert false : "should fail";, +        } catch (Exception e) {, +            // all is well, +        }, +        client1.prepareCount().setQuery(termQuery("_type", "type1")).setOperationThreading(BroadcastOperationThreading.NO_THREADS).execute().actionGet();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +        sb.append("Failed to execute phase [").append(phaseName).append("], ").append(msg);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +import java.util.Arrays;, +, +            if (expectedSuccessfulOps == 0) {, +                // not search shards to search on..., +                throw new SearchPhaseExecutionException("initial", "No indices / shards to search on, requested indices are " + Arrays.toString(request.indices()), buildShardFailures());, +            }, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/document/DocumentActionsTests.java, +, +        // no indices, check that simple operations fail, +        try {, +            client1.prepareCount("test").setQuery(termQuery("_type", "type1")).setOperationThreading(BroadcastOperationThreading.NO_THREADS).execute().actionGet();, +            assert false : "should fail";, +        } catch (Exception e) {, +            // all is well, +        }, +        client1.prepareCount().setQuery(termQuery("_type", "type1")).setOperationThreading(BroadcastOperationThreading.NO_THREADS).execute().actionGet();, +, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/search/indicesboost/SimpleIndicesBoostSearchTests.java, +        // execute a search before we create an index, +        try {, +            client.prepareSearch().setQuery(termQuery("test", "value")).execute().actionGet();, +            assert false : "should fail";, +        } catch (Exception e) {, +            // ignore, no indices, +        }, +, +        try {, +            client.prepareSearch("test").setQuery(termQuery("test", "value")).execute().actionGet();, +            assert false : "should fail";, +        } catch (Exception e) {, +            // ignore, no indices, +        }, +]