[+++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha2, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha2, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version CURRENT = V_5_0_0_alpha2;, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha2, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version CURRENT = V_5_0_0_alpha2;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +        public StringBuilder stringBuilder() {, +            return in.stringBuilder();, +        }, +, +        @Override, +        private StringBuilder stringBuilder = new StringBuilder();, +, +        /**, +         * A string builder that can be used to construct complex names for example., +         * Its better to reuse the., +         */, +        @Override, +        public StringBuilder stringBuilder() {, +            stringBuilder.setLength(0);, +            return this.stringBuilder;, +        }, +, +     * A string builder that can be used to construct complex names for example., +     * Its better to reuse the., +     */, +    public abstract StringBuilder stringBuilder();, +, +    /**, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha2, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version CURRENT = V_5_0_0_alpha2;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +        public StringBuilder stringBuilder() {, +            return in.stringBuilder();, +        }, +, +        @Override, +        private StringBuilder stringBuilder = new StringBuilder();, +, +        /**, +         * A string builder that can be used to construct complex names for example., +         * Its better to reuse the., +         */, +        @Override, +        public StringBuilder stringBuilder() {, +            stringBuilder.setLength(0);, +            return this.stringBuilder;, +        }, +, +     * A string builder that can be used to construct complex names for example., +     * Its better to reuse the., +     */, +    public abstract StringBuilder stringBuilder();, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Uid.java, +    public static BytesRef createUidAsBytes(BytesRef type, BytesRef id, BytesRefBuilder spare) {, +        spare.copyBytes(type);, +        spare.append(DELIMITER_BYTES);, +        spare.append(id);, +        return spare.get();, +    }, +, +        return createUid(new StringBuilder(), type, id);, +    }, +, +    public static String createUid(StringBuilder sb, String type, String id) {, +        return sb.append(type).append(DELIMITER).append(id).toString();, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha2, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version CURRENT = V_5_0_0_alpha2;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +        public StringBuilder stringBuilder() {, +            return in.stringBuilder();, +        }, +, +        @Override, +        private StringBuilder stringBuilder = new StringBuilder();, +, +        /**, +         * A string builder that can be used to construct complex names for example., +         * Its better to reuse the., +         */, +        @Override, +        public StringBuilder stringBuilder() {, +            stringBuilder.setLength(0);, +            return this.stringBuilder;, +        }, +, +     * A string builder that can be used to construct complex names for example., +     * Its better to reuse the., +     */]