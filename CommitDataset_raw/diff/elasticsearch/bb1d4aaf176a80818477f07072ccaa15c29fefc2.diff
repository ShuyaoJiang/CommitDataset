[+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder<?> sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder<?> rescorer, int window) {, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder<?> sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder<?> rescorer, int window) {, +++ b/distribution/packages/src/common/scripts/preinst, +# Check for these at preinst time due to failures in postinst if they do not exist, +if [ -x "$JAVA_HOME/bin/java" ]; then, +    JAVA="$JAVA_HOME/bin/java", +else, +    JAVA=`which java`, +fi, +, +if [ -z "$JAVA" ]; then, +    echo "could not find java; set JAVA_HOME or ensure java is in PATH", +    exit 1, +fi, +, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder<?> sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder<?> rescorer, int window) {, +++ b/distribution/packages/src/common/scripts/preinst, +# Check for these at preinst time due to failures in postinst if they do not exist, +if [ -x "$JAVA_HOME/bin/java" ]; then, +    JAVA="$JAVA_HOME/bin/java", +else, +    JAVA=`which java`, +fi, +, +if [ -z "$JAVA" ]; then, +    echo "could not find java; set JAVA_HOME or ensure java is in PATH", +    exit 1, +fi, +, +++ b/docs/java-api/aggregations/metrics/scripted-metric-aggregation.asciidoc, +    .initScript(new Script("state.heights = []")), +    .mapScript(new Script("state.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)"));, +    .initScript(new Script("state.heights = []")), +    .mapScript(new Script("state.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)")), +    .combineScript(new Script("double heights_sum = 0.0; for (t in state.heights) { heights_sum += t } return heights_sum"));, +    .initScript(new Script("state.heights = []")), +    .mapScript(new Script("state.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)")), +    .combineScript(new Script("double heights_sum = 0.0; for (t in state.heights) { heights_sum += t } return heights_sum")), +    .reduceScript(new Script("double heights_sum = 0.0; for (a in states) { heights_sum += a } return heights_sum"));, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder<?> sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder<?> rescorer, int window) {, +++ b/distribution/packages/src/common/scripts/preinst, +# Check for these at preinst time due to failures in postinst if they do not exist, +if [ -x "$JAVA_HOME/bin/java" ]; then, +    JAVA="$JAVA_HOME/bin/java", +else, +    JAVA=`which java`, +fi, +, +if [ -z "$JAVA" ]; then, +    echo "could not find java; set JAVA_HOME or ensure java is in PATH", +    exit 1, +fi, +, +++ b/docs/java-api/aggregations/metrics/scripted-metric-aggregation.asciidoc, +    .initScript(new Script("state.heights = []")), +    .mapScript(new Script("state.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)"));, +    .initScript(new Script("state.heights = []")), +    .mapScript(new Script("state.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)")), +    .combineScript(new Script("double heights_sum = 0.0; for (t in state.heights) { heights_sum += t } return heights_sum"));, +    .initScript(new Script("state.heights = []")), +    .mapScript(new Script("state.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)")), +    .combineScript(new Script("double heights_sum = 0.0; for (t in state.heights) { heights_sum += t } return heights_sum")), +    .reduceScript(new Script("double heights_sum = 0.0; for (a in states) { heights_sum += a } return heights_sum"));, +++ b/docs/reference/aggregations/metrics/scripted-metric-aggregation.asciidoc, +                "init_script" : "state.transactions = []",, +                "map_script" : "state.transactions.add(doc.type.value == 'sale' ? doc.amount.value : -1 * doc.amount.value)", <1>, +                "combine_script" : "double profit = 0; for (t in state.transactions) { profit += t } return profit",, +                "reduce_script" : "double profit = 0; for (a in states) { profit += a } return profit", +                    "field": "amount" <1>, +in a global `params` object so that it can be shared between the scripts., +Whilst any valid script object can be used within a single script, the scripts must return or store in the `state` object only the following types:, +In the above example, the `init_script` creates an array `transactions` in the `state` object., +                    needs to be stored in the `state` object., +                    variable `states` which is an array of the result of the combine_script on each shard. If a reduce_script is not provided, +                    the reduce phase will return the `states` variable., +`state` is initialized as a new empty object., +"state" : {}, +"state" : {, +"state" : {, +"state" : {, +"state" : {, +The reduce_script receives a `states` array containing the result of the combine script for each shard:, +"states" : [, +"params" : {}, +shard with a `null` value. In this case the `reduce_script`'s `states` variable will contain `null` as a response from that shard., +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder<?> sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder<?> rescorer, int window) {, +++ b/distribution/packages/src/common/scripts/preinst, +# Check for these at preinst time due to failures in postinst if they do not exist, +if [ -x "$JAVA_HOME/bin/java" ]; then, +    JAVA="$JAVA_HOME/bin/java"]