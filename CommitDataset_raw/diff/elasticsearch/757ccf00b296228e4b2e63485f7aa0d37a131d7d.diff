[+++ b/core/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +            throw new IllegalArgumentException("[" + NAME + "] requires prefix length to be non-negative.");, +        if (maxExpansions <= 0 ) {, +            throw new IllegalArgumentException("[" + NAME + "] requires maxExpansions to be positive.");, +++ b/core/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +            throw new IllegalArgumentException("[" + NAME + "] requires prefix length to be non-negative.");, +        if (maxExpansions <= 0 ) {, +            throw new IllegalArgumentException("[" + NAME + "] requires maxExpansions to be positive.");, +++ b/core/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder(null, "value"));, +            assertEquals("[match] requires fieldName", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder("fieldName", null));, +            assertEquals("[match] requires query value", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.prefixLength(-1));, +            assertEquals("[match] requires prefix length to be non-negative.", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                    () -> matchQuery.maxExpansions(randomIntBetween(-10, 0)));, +            assertEquals("[match] requires maxExpansions to be positive.", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.operator(null));, +            assertEquals("[match] requires operator to be non-null", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.type(null));, +            assertEquals("[match] requires type to be non-null", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.zeroTermsQuery(null));, +            assertEquals("[match] requires zeroTermsQuery to be non-null", e.getMessage());, +        {, +            QueryShardException e = expectThrows(QueryShardException.class, () -> matchQuery.toQuery(createShardContext()));, +++ b/core/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +            throw new IllegalArgumentException("[" + NAME + "] requires prefix length to be non-negative.");, +        if (maxExpansions <= 0 ) {, +            throw new IllegalArgumentException("[" + NAME + "] requires maxExpansions to be positive.");, +++ b/core/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder(null, "value"));, +            assertEquals("[match] requires fieldName", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder("fieldName", null));, +            assertEquals("[match] requires query value", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.prefixLength(-1));, +            assertEquals("[match] requires prefix length to be non-negative.", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                    () -> matchQuery.maxExpansions(randomIntBetween(-10, 0)));, +            assertEquals("[match] requires maxExpansions to be positive.", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.operator(null));, +            assertEquals("[match] requires operator to be non-null", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.type(null));, +            assertEquals("[match] requires type to be non-null", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.zeroTermsQuery(null));, +            assertEquals("[match] requires zeroTermsQuery to be non-null", e.getMessage());, +        {, +            QueryShardException e = expectThrows(QueryShardException.class, () -> matchQuery.toQuery(createShardContext()));, +++ b/docs/plugins/repository-s3.asciidoc, +elasticsearch config using `cloud.aws.access_key` and `cloud.aws.secret_key`:, +    Makes repository read-only. coming[2.1.0]  Defaults to `false`., +++ b/core/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +            throw new IllegalArgumentException("[" + NAME + "] requires prefix length to be non-negative.");, +        if (maxExpansions <= 0 ) {, +            throw new IllegalArgumentException("[" + NAME + "] requires maxExpansions to be positive.");, +++ b/core/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder(null, "value"));, +            assertEquals("[match] requires fieldName", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder("fieldName", null));, +            assertEquals("[match] requires query value", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.prefixLength(-1));, +            assertEquals("[match] requires prefix length to be non-negative.", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                    () -> matchQuery.maxExpansions(randomIntBetween(-10, 0)));, +            assertEquals("[match] requires maxExpansions to be positive.", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.operator(null));, +            assertEquals("[match] requires operator to be non-null", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.type(null));, +            assertEquals("[match] requires type to be non-null", e.getMessage());, +        {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.zeroTermsQuery(null));, +            assertEquals("[match] requires zeroTermsQuery to be non-null", e.getMessage());, +        {, +            QueryShardException e = expectThrows(QueryShardException.class, () -> matchQuery.toQuery(createShardContext()));, +++ b/docs/plugins/repository-s3.asciidoc, +elasticsearch config using `cloud.aws.access_key` and `cloud.aws.secret_key`:, +    Makes repository read-only. coming[2.1.0]  Defaults to `false`., +++ b/plugins/discovery-ec2/build.gradle, +  'aws': '1.10.33', +  // uses internal java api: com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]