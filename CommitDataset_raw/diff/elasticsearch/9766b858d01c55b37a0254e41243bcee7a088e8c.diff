[+++ b/build.gradle, +int prevBugfixIndex = -1 // index in the versions list of the last bugfix release from the prev major, +    if (major == prevMajor) {, +      prevBugfixIndex = versions.size() - 1, +    }, +if (prevBugfixIndex != -1) {, +  versions[prevBugfixIndex] = new Version(versions[prevBugfixIndex].major, versions[prevBugfixIndex].minor,, +                                          versions[prevBugfixIndex].bugfix, versions[prevBugfixIndex].suffix, true), +}, +  } else if (indexCompatVersions[-2].snapshot) {, +    /* This is a terrible hack for the bump to 6.0.1 which will be fixed by #27397 */, +    ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch:${indexCompatVersions[-2]}"] = ':distribution:bwc-release-snapshot', +    ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch:${indexCompatVersions[-2]}"] = ':distribution:bwc-release-snapshot', +    ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch:${indexCompatVersions[-2]}"] = ':distribution:bwc-release-snapshot', +++ b/build.gradle, +int prevBugfixIndex = -1 // index in the versions list of the last bugfix release from the prev major, +    if (major == prevMajor) {, +      prevBugfixIndex = versions.size() - 1, +    }, +if (prevBugfixIndex != -1) {, +  versions[prevBugfixIndex] = new Version(versions[prevBugfixIndex].major, versions[prevBugfixIndex].minor,, +                                          versions[prevBugfixIndex].bugfix, versions[prevBugfixIndex].suffix, true), +}, +  } else if (indexCompatVersions[-2].snapshot) {, +    /* This is a terrible hack for the bump to 6.0.1 which will be fixed by #27397 */, +    ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch:${indexCompatVersions[-2]}"] = ':distribution:bwc-release-snapshot', +    ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch:${indexCompatVersions[-2]}"] = ':distribution:bwc-release-snapshot', +    ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch:${indexCompatVersions[-2]}"] = ':distribution:bwc-release-snapshot', +++ b/core/src/main/java/org/elasticsearch/Version.java, +import java.lang.reflect.Field;, +import java.lang.reflect.Modifier;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +        if (major >= 6) {, +            // all major versions from 6 onwards are compatible with last minor series of the previous major, +            final List<Version> declaredVersions = getDeclaredVersions(getClass());, +            Version bwcVersion = null;, +            for (int i = declaredVersions.size() - 1; i >= 0; i--) {, +                final Version candidateVersion = declaredVersions.get(i);, +                if (candidateVersion.major == major - 1 && candidateVersion.isRelease() && after(candidateVersion)) {, +                    if (bwcVersion != null && candidateVersion.minor < bwcVersion.minor) {, +                        break;, +                    bwcVersion = candidateVersion;, +                }, +            }, +            return bwcVersion == null ? this : bwcVersion;, +        }, +, +        return Version.min(this, fromId((int) major * 1000000 + 0 * 10000 + 99));, +, +    /**, +     * Extracts a sorted list of declared version constants from a class., +     * The argument would normally be Version.class but is exposed for, +     * testing with other classes-containing-version-constants., +     */, +    public static List<Version> getDeclaredVersions(final Class<?> versionClass) {, +        final Field[] fields = versionClass.getFields();, +        final List<Version> versions = new ArrayList<>(fields.length);, +        for (final Field field : fields) {, +            final int mod = field.getModifiers();, +            if (false == Modifier.isStatic(mod) && Modifier.isFinal(mod) && Modifier.isPublic(mod)) {, +                continue;, +            }, +            if (field.getType() != Version.class) {, +                continue;, +            }, +            if ("CURRENT".equals(field.getName())) {, +                continue;, +            }, +            assert field.getName().matches("V(_\\d+)+(_(alpha|beta|rc)\\d+)?") : field.getName();, +            try {, +                versions.add(((Version) field.get(null)));, +            } catch (final IllegalAccessException e) {, +                throw new RuntimeException(e);, +            }, +        }, +        Collections.sort(versions);, +        return versions;, +    }, +++ b/build.gradle, +int prevBugfixIndex = -1 // index in the versions list of the last bugfix release from the prev major, +    if (major == prevMajor) {, +      prevBugfixIndex = versions.size() - 1, +    }, +if (prevBugfixIndex != -1) {, +  versions[prevBugfixIndex] = new Version(versions[prevBugfixIndex].major, versions[prevBugfixIndex].minor,, +                                          versions[prevBugfixIndex].bugfix, versions[prevBugfixIndex].suffix, true), +}, +  } else if (indexCompatVersions[-2].snapshot) {, +    /* This is a terrible hack for the bump to 6.0.1 which will be fixed by #27397 */, +    ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch:${indexCompatVersions[-2]}"] = ':distribution:bwc-release-snapshot', +    ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch:${indexCompatVersions[-2]}"] = ':distribution:bwc-release-snapshot', +    ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch:${indexCompatVersions[-2]}"] = ':distribution:bwc-release-snapshot', +++ b/core/src/main/java/org/elasticsearch/Version.java, +import java.lang.reflect.Field;, +import java.lang.reflect.Modifier;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;]