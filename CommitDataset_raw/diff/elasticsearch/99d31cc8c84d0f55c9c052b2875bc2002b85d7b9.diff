[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/netty/OpenChannelsHandler.java, +import org.elasticsearch.common.logging.ESLogger;, +    final Set<Channel> openChannels = ConcurrentCollections.newConcurrentSet();, +    final CounterMetric openChannelsMetric = new CounterMetric();, +    final CounterMetric totalChannelsMetric = new CounterMetric();, +    final ESLogger logger;, +, +    public OpenChannelsHandler(ESLogger logger) {, +        this.logger = logger;, +    }, +, +    final ChannelFutureListener remover = new ChannelFutureListener() {, +            if (logger.isTraceEnabled()) {, +                logger.trace("channel closed: {}", future.getChannel());, +            }, +            // OPEN is also sent to when closing channel, but with FALSE on it to indicate it closes, +            if (evt.getState() == ChannelState.OPEN && Boolean.TRUE.equals(evt.getValue())) {, +                if (logger.isTraceEnabled()) {, +                    logger.trace("channel opened: {}", ctx.getChannel());, +                }, +                    totalChannelsMetric.inc();, +    public long totalChannels() {, +        return totalChannelsMetric.count();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/netty/OpenChannelsHandler.java, +import org.elasticsearch.common.logging.ESLogger;, +    final Set<Channel> openChannels = ConcurrentCollections.newConcurrentSet();, +    final CounterMetric openChannelsMetric = new CounterMetric();, +    final CounterMetric totalChannelsMetric = new CounterMetric();, +    final ESLogger logger;, +, +    public OpenChannelsHandler(ESLogger logger) {, +        this.logger = logger;, +    }, +, +    final ChannelFutureListener remover = new ChannelFutureListener() {, +            if (logger.isTraceEnabled()) {, +                logger.trace("channel closed: {}", future.getChannel());, +            }, +            // OPEN is also sent to when closing channel, but with FALSE on it to indicate it closes, +            if (evt.getState() == ChannelState.OPEN && Boolean.TRUE.equals(evt.getValue())) {, +                if (logger.isTraceEnabled()) {, +                    logger.trace("channel opened: {}", ctx.getChannel());, +                }, +                    totalChannelsMetric.inc();, +    public long totalChannels() {, +        return totalChannelsMetric.count();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpStats.java, +    private long totalOpen;, +    public HttpStats(long serverOpen, long totalOpen) {, +        this.totalOpen = totalOpen;, +    public long totalOpen() {, +        return this.totalOpen;, +    }, +, +    public long getTotalOpen() {, +        return this.totalOpen;, +    }, +, +        totalOpen = in.readVLong();, +        out.writeVLong(totalOpen);, +        builder.field("current_open", serverOpen);, +        builder.field("total_opened", totalOpen);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/netty/OpenChannelsHandler.java, +import org.elasticsearch.common.logging.ESLogger;, +    final Set<Channel> openChannels = ConcurrentCollections.newConcurrentSet();, +    final CounterMetric openChannelsMetric = new CounterMetric();, +    final CounterMetric totalChannelsMetric = new CounterMetric();, +    final ESLogger logger;, +, +    public OpenChannelsHandler(ESLogger logger) {, +        this.logger = logger;, +    }, +, +    final ChannelFutureListener remover = new ChannelFutureListener() {, +            if (logger.isTraceEnabled()) {, +                logger.trace("channel closed: {}", future.getChannel());, +            }, +            // OPEN is also sent to when closing channel, but with FALSE on it to indicate it closes, +            if (evt.getState() == ChannelState.OPEN && Boolean.TRUE.equals(evt.getValue())) {, +                if (logger.isTraceEnabled()) {, +                    logger.trace("channel opened: {}", ctx.getChannel());, +                }, +                    totalChannelsMetric.inc();, +    public long totalChannels() {, +        return totalChannelsMetric.count();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpStats.java, +    private long totalOpen;, +    public HttpStats(long serverOpen, long totalOpen) {, +        this.totalOpen = totalOpen;, +    public long totalOpen() {, +        return this.totalOpen;, +    }, +, +    public long getTotalOpen() {]