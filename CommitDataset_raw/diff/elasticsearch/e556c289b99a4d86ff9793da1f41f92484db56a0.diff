[+++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +    /**, +     * Returns <code>true</code> iff the result of the processed search request is cachable. Otherwise <code>false</code>, +     */, +        this.cachable = false;, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +    /**, +     * Returns <code>true</code> iff the result of the processed search request is cachable. Otherwise <code>false</code>, +     */, +        this.cachable = false;, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +            request.rewrite(new QueryShardContext(context.getQueryShardContext()));, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +    /**, +     * Returns <code>true</code> iff the result of the processed search request is cachable. Otherwise <code>false</code>, +     */, +        this.cachable = false;, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +            request.rewrite(new QueryShardContext(context.getQueryShardContext()));, +++ b/core/src/main/java/org/elasticsearch/search/internal/SearchContext.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryRewriteContext.java, +    /**, +     * Returns <code>true</code> iff the result of the processed search request is cachable. Otherwise <code>false</code>, +     */, +        this.cachable = false;, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +            request.rewrite(new QueryShardContext(context.getQueryShardContext()));, +++ b/core/src/main/java/org/elasticsearch/search/internal/SearchContext.java, +++ b/test/framework/src/main/java/org/elasticsearch/test/AbstractQueryTestCase.java, +            /* we use a private rewrite context here since we want the most realistic way of asserting that we are cachabel or not., +             * We do it this way in SearchService where, +             * we first rewrite the query with a private context, then reset the context and then build the actual lucene query*/, +            QueryBuilder rewritten = rewriteQuery(firstQuery, new QueryShardContext(context));, +            Query firstLuceneQuery = rewritten.toQuery(context);]