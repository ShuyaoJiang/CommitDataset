[+++ b/.idea/dictionaries/kimchy.xml, +      <w>charfilter</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>charfilter</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/analysis/HTMLStripCharFilter.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.lucene.analysis;, +, +import org.apache.lucene.analysis.BaseCharFilter;, +import org.apache.lucene.analysis.CharReader;, +import org.apache.lucene.analysis.CharStream;, +, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.Reader;, +import java.util.HashMap;, +import java.util.Set;, +, +/**, + * @author kimchy (shay.banon), + */, +// LUCENE MONITOR: Once the next Lucene version is out, use the built in HTML filter, +public class HTMLStripCharFilter extends BaseCharFilter {, +    private int readAheadLimit = DEFAULT_READ_AHEAD;, +    private int safeReadAheadLimit = readAheadLimit - 3;, +    private int numWhitespace = 0;, +    private int numRead = 0;, +    private int numEaten = 0;, +    private int numReturned = 0;, +    private int lastMark;, +    private Set<String> escapedTags;, +, +    // pushback buffer, +    private final StringBuilder pushed = new StringBuilder();, +    private static final int EOF = -1;, +    private static final int MISMATCH = -2;, +, +    private static final int MATCH = -3;, +    // temporary buffer, +    private final StringBuilder sb = new StringBuilder();, +    public static final int DEFAULT_READ_AHEAD = 8192;, +, +, +    public static void main(String[] args) throws IOException {, +        Reader in = new HTMLStripCharFilter(, +                CharReader.get(new InputStreamReader(System.in)));, +        int ch;, +        while ((ch = in.read()) != -1) System.out.print((char) ch);, +    }, +, +    public HTMLStripCharFilter(CharStream source) {, +        super(source.markSupported() ? source : CharReader.get(new BufferedReader(source)));, +    }, +, +    public HTMLStripCharFilter(CharStream source, Set<String> escapedTags) {, +        this(source);, +        this.escapedTags = escapedTags;, +    }, +, +    public HTMLStripCharFilter(CharStream source, Set<String> escapedTags, int readAheadLimit) {, +        this(source);, +        this.escapedTags = escapedTags;, +        this.readAheadLimit = readAheadLimit;, +        safeReadAheadLimit = readAheadLimit - 3;, +    }, +, +    public int getReadAheadLimit() {, +        return readAheadLimit;, +    }, +, +    private int next() throws IOException {, +        int len = pushed.length();, +        if (len > 0) {, +            int ch = pushed.charAt(len - 1);, +            pushed.setLength(len - 1);, +            return ch;, +        }, +        numRead++;, +        return input.read();, +    }, +]