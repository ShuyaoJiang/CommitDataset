[+++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterBuilder.java, +    private Boolean cache;, +    private String cacheKey;, +    /**, +     * Should the filter be cached or not. Defaults to <tt>false</tt>., +     */, +    public HasChildFilterBuilder cache(boolean cache) {, +        this.cache = cache;, +        return this;, +    }, +, +    /**, +     * Defines what should be used as key to represent this filter in the filter cache., +     * By default the filter itself is used as key., +     */, +    public HasChildFilterBuilder cacheKey(String cacheKey) {, +        this.cacheKey = cacheKey;, +        return this;, +    }, +, +        if (cache != null) {, +            builder.field("_cache", cache);, +        }, +        if (cacheKey != null) {, +            builder.field("_cache_key", cacheKey);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterBuilder.java, +    private Boolean cache;, +    private String cacheKey;, +    /**, +     * Should the filter be cached or not. Defaults to <tt>false</tt>., +     */, +    public HasChildFilterBuilder cache(boolean cache) {, +        this.cache = cache;, +        return this;, +    }, +, +    /**, +     * Defines what should be used as key to represent this filter in the filter cache., +     * By default the filter itself is used as key., +     */, +    public HasChildFilterBuilder cacheKey(String cacheKey) {, +        this.cacheKey = cacheKey;, +        return this;, +    }, +, +        if (cache != null) {, +            builder.field("_cache", cache);, +        }, +        if (cacheKey != null) {, +            builder.field("_cache_key", cacheKey);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterParser.java, +import org.elasticsearch.index.cache.filter.support.CacheKeyFilter;, +        boolean cache = false;, +        CacheKeyFilter.Key cacheKey = null;, +                } else if ("_cache".equals(currentFieldName)) {, +                    cache = parser.booleanValue();, +                } else if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {, +                    cacheKey = new CacheKeyFilter.Key(parser.text());, +        Filter filter = childFilter;, +, +        if (cache) {, +            filter = parseContext.cacheFilter(filter, cacheKey);, +        }, +            parseContext.addNamedFilter(filterName, filter);, +        return filter;, +++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterBuilder.java, +    private Boolean cache;, +    private String cacheKey;, +    /**, +     * Should the filter be cached or not. Defaults to <tt>false</tt>., +     */, +    public HasChildFilterBuilder cache(boolean cache) {, +        this.cache = cache;, +        return this;, +    }, +, +    /**, +     * Defines what should be used as key to represent this filter in the filter cache., +     * By default the filter itself is used as key., +     */, +    public HasChildFilterBuilder cacheKey(String cacheKey) {, +        this.cacheKey = cacheKey;, +        return this;, +    }, +, +        if (cache != null) {, +            builder.field("_cache", cache);, +        }, +        if (cacheKey != null) {, +            builder.field("_cache_key", cacheKey);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterParser.java, +import org.elasticsearch.index.cache.filter.support.CacheKeyFilter;, +        boolean cache = false;, +        CacheKeyFilter.Key cacheKey = null;, +                } else if ("_cache".equals(currentFieldName)) {, +                    cache = parser.booleanValue();, +                } else if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {]