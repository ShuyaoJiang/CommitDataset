[+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java, +                            decryptTokenId(in, cipher, version, ActionListener.wrap(tokenId -> {, +                                if (securityIndex.isAvailable() == false) {, +                                    logger.warn("failed to get token [{}] since index is not available", tokenId);, +                                    listener.onResponse(null);, +                                } else {, +                                    securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {, +                                    });, +                                }}, listener::onFailure));, +            if (securityIndex.isAvailable() == false) {, +                logger.debug("security index is not available to find token from refresh token, retrying");, +                attemptCount.incrementAndGet();, +                findTokenFromRefreshToken(refreshToken, listener, attemptCount);, +            } else {, +                securityIndex.checkIndexVersionThenExecute(listener::onFailure, () ->, +    }, +        } else if (securityIndex.isAvailable() == false) {, +            listener.onResponse(Collections.emptyList());, +        } else {, +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () ->, +    }, +            // index doesn't exist so the token is considered valid. it is important to note that, +            // we do not use isAvailable as the lack of a shard being available is not equivalent, +            // to the index not existing in the case of revocation checking., +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java, +                            decryptTokenId(in, cipher, version, ActionListener.wrap(tokenId -> {, +                                if (securityIndex.isAvailable() == false) {, +                                    logger.warn("failed to get token [{}] since index is not available", tokenId);, +                                    listener.onResponse(null);, +                                } else {, +                                    securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {, +                                    });, +                                }}, listener::onFailure));, +            if (securityIndex.isAvailable() == false) {, +                logger.debug("security index is not available to find token from refresh token, retrying");, +                attemptCount.incrementAndGet();, +                findTokenFromRefreshToken(refreshToken, listener, attemptCount);, +            } else {, +                securityIndex.checkIndexVersionThenExecute(listener::onFailure, () ->, +    }, +        } else if (securityIndex.isAvailable() == false) {, +            listener.onResponse(Collections.emptyList());, +        } else {, +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () ->, +    }, +            // index doesn't exist so the token is considered valid. it is important to note that, +            // we do not use isAvailable as the lack of a shard being available is not equivalent, +            // to the index not existing in the case of revocation checking., +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/esnative/NativeUsersStore.java, +        if (securityIndex.isAvailable() == false) {, +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {, +        if (securityIndex.isAvailable() == false) {, +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () ->, +        if (securityIndex.isAvailable() == false) {, +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () ->, +        if (securityIndex.isAvailable() == false) {, +            listener.onResponse(false);, +        } else {, +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {, +    }, +        if (securityIndex.isAvailable() == false) {, +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () ->, +        if (securityIndex.isAvailable() == false) {, +            listener.onResponse(Collections.emptyMap());, +        } else {, +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () ->, +    }, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java, +                            decryptTokenId(in, cipher, version, ActionListener.wrap(tokenId -> {, +                                if (securityIndex.isAvailable() == false) {, +                                    logger.warn("failed to get token [{}] since index is not available", tokenId);, +                                    listener.onResponse(null);, +                                } else {, +                                    securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {, +                                    });, +                                }}, listener::onFailure));, +            if (securityIndex.isAvailable() == false) {, +                logger.debug("security index is not available to find token from refresh token, retrying");, +                attemptCount.incrementAndGet();, +                findTokenFromRefreshToken(refreshToken, listener, attemptCount);, +            } else {, +                securityIndex.checkIndexVersionThenExecute(listener::onFailure, () ->, +    }, +        } else if (securityIndex.isAvailable() == false) {, +            listener.onResponse(Collections.emptyList());, +        } else {, +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () ->, +    }, +            // index doesn't exist so the token is considered valid. it is important to note that, +            // we do not use isAvailable as the lack of a shard being available is not equivalent, +            // to the index not existing in the case of revocation checking., +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/esnative/NativeUsersStore.java, +        if (securityIndex.isAvailable() == false) {, +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () -> {, +        if (securityIndex.isAvailable() == false) {, +            securityIndex.checkIndexVersionThenExecute(listener::onFailure, () ->, +        if (securityIndex.isAvailable() == false) {]