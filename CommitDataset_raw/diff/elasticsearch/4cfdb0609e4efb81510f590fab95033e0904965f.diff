[+++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +         * closes the node and prepares it to be restarted, +        Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {, +            close();, +            // delete data folders now, before we start other nodes that may claim it, +            return newSettings.build();, +        private void recreateNode(final Settings newSettings, final Runnable onTransportServiceStarted) {, +            if (closed.get() == false) {, +                throw new IllegalStateException("node " + name + " should be closed before recreating it");, +            }, +            closed.set(false);, +                markNodeDataDirsAsPendingForWipe(node);, +                node.close();, +        final Settings newSettings = nodeAndClient.closeForRestart(callback,, +            autoManageMinMasterNodes ? getMinMasterNodes(masterNodesCount) : -1);, +        nodeAndClient.recreateNode(newSettings, () -> rebuildUnicastHostFiles(emptyList()));, +        nodeAndClient.startNode();, +        final Settings[] newNodeSettings = new Settings[nextNodeId.get()];, +        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1;, +            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name);, +            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes);, +            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings;, +            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles();, +            logger.info("creating node [{}] ", nodeAndClient.name);, +            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder));, +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +         * closes the node and prepares it to be restarted, +        Settings closeForRestart(RestartCallback callback, int minMasterNodes) throws Exception {, +            close();, +            // delete data folders now, before we start other nodes that may claim it, +            return newSettings.build();, +        private void recreateNode(final Settings newSettings, final Runnable onTransportServiceStarted) {, +            if (closed.get() == false) {, +                throw new IllegalStateException("node " + name + " should be closed before recreating it");, +            }, +            closed.set(false);, +                markNodeDataDirsAsPendingForWipe(node);, +                node.close();, +        final Settings newSettings = nodeAndClient.closeForRestart(callback,, +            autoManageMinMasterNodes ? getMinMasterNodes(masterNodesCount) : -1);, +        nodeAndClient.recreateNode(newSettings, () -> rebuildUnicastHostFiles(emptyList()));, +        nodeAndClient.startNode();, +        final Settings[] newNodeSettings = new Settings[nextNodeId.get()];, +        final int minMasterNodes = autoManageMinMasterNodes ? getMinMasterNodes(getMasterNodesCount()) : -1;, +            logger.info("Stopping and resetting node [{}] ", nodeAndClient.name);, +            final Settings newSettings = nodeAndClient.closeForRestart(callback, minMasterNodes);, +            newNodeSettings[nodeAndClient.nodeAndClientId()] = newSettings;, +            rolesOrderedByOriginalStartupOrder[nodeAndClient.nodeAndClientId()] = discoveryNode.getRoles();, +            logger.info("creating node [{}] ", nodeAndClient.name);, +            nodeAndClient.recreateNode(newNodeSettings[nodeAndClient.nodeAndClientId()], () -> rebuildUnicastHostFiles(startUpOrder));, +++ b/test/framework/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java, +            assertMMNinClusterSetting(node, cluster, masterNodes);, +        }, +    }, +, +    private void assertMMNinClusterSetting(String node, InternalTestCluster cluster, int masterNodes) {, +        final int minMasterNodes = masterNodes / 2 + 1;, +                            for (String name : cluster.getNodeNames()) {, +                                if (name.equals(nodeName) == false) {, +                                    assertMMNinClusterSetting(name, cluster, 1);, +                                }, +                            }]