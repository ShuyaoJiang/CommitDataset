[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +import java.util.Map;, +        // now, go over all the transports connected to me, and raise disconnected event, +        for (LocalTransport targetTransport : transports.values()) {, +            for (Map.Entry<DiscoveryNode, LocalTransport> entry : targetTransport.connectedNodes.entrySet()) {, +                if (entry.getValue() == this) {, +                    targetTransport.disconnectFromNode(entry.getKey());, +                }, +            }, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +import java.util.Map;, +        // now, go over all the transports connected to me, and raise disconnected event, +        for (LocalTransport targetTransport : transports.values()) {, +            for (Map.Entry<DiscoveryNode, LocalTransport> entry : targetTransport.connectedNodes.entrySet()) {, +                if (entry.getValue() == this) {, +                    targetTransport.disconnectFromNode(entry.getKey());, +                }, +            }, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +            logger.debug("Disconnected from [{}]", node);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +import java.util.Map;, +        // now, go over all the transports connected to me, and raise disconnected event, +        for (LocalTransport targetTransport : transports.values()) {, +            for (Map.Entry<DiscoveryNode, LocalTransport> entry : targetTransport.connectedNodes.entrySet()) {, +                if (entry.getValue() == this) {, +                    targetTransport.disconnectFromNode(entry.getKey());, +                }, +            }, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +            logger.debug("Disconnected from [{}]", node);, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTests.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +    @Test, +    public void testDisconnectListener() throws Exception {, +        final CountDownLatch latch = new CountDownLatch(1);, +        TransportConnectionListener disconnectListener = new TransportConnectionListener() {, +            @Override public void onNodeConnected(DiscoveryNode node) {, +                throw new RuntimeException("Should not be called");, +            }, +, +            @Override public void onNodeDisconnected(DiscoveryNode node) {, +                latch.countDown();, +            }, +        };, +        serviceA.addConnectionListener(disconnectListener);, +        serviceB.close();, +        assertThat(latch.await(1, TimeUnit.SECONDS), equalTo(true));, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +import java.util.Map;, +        // now, go over all the transports connected to me, and raise disconnected event, +        for (LocalTransport targetTransport : transports.values()) {, +            for (Map.Entry<DiscoveryNode, LocalTransport> entry : targetTransport.connectedNodes.entrySet()) {, +                if (entry.getValue() == this) {, +                    targetTransport.disconnectFromNode(entry.getKey());, +                }, +            }, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +            logger.debug("Disconnected from [{}]", node);, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTests.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +    @Test, +    public void testDisconnectListener() throws Exception {, +        final CountDownLatch latch = new CountDownLatch(1);, +        TransportConnectionListener disconnectListener = new TransportConnectionListener() {, +            @Override public void onNodeConnected(DiscoveryNode node) {, +                throw new RuntimeException("Should not be called");, +            }, +, +            @Override public void onNodeDisconnected(DiscoveryNode node) {, +                latch.countDown();, +            }, +        };, +        serviceA.addConnectionListener(disconnectListener);, +        serviceB.close();, +        assertThat(latch.await(1, TimeUnit.SECONDS), equalTo(true));, +    }, +, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/transport/netty/SimpleNettyTransportTests.java, +import static org.elasticsearch.util.settings.ImmutableSettings.*;, +, +        serviceA = new TransportService(settingsBuilder().put("name", "A").build(), new NettyTransport(settingsBuilder().put("name", "A").build(), threadPool), threadPool).start();, +        serviceB = new TransportService(settingsBuilder().put("name", "B").build(), new NettyTransport(settingsBuilder().put("name", "B").build(), threadPool), threadPool).start();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +import java.util.Map;, +        // now, go over all the transports connected to me, and raise disconnected event, +        for (LocalTransport targetTransport : transports.values()) {, +            for (Map.Entry<DiscoveryNode, LocalTransport> entry : targetTransport.connectedNodes.entrySet()) {, +                if (entry.getValue() == this) {, +                    targetTransport.disconnectFromNode(entry.getKey());, +                }]