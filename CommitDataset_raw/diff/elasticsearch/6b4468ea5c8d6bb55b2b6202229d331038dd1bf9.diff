[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +        realmFactories.putAll(InternalRealms.getFactories(threadPool, resourceWatcherService, sslService, nativeUsersStore,, +                nativeRoleMappingStore, securityLifecycleService));, +        securityLifecycleService.addSecurityIndexHealthChangeListener(allRolesStore::onSecurityIndexHealthChange);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +        realmFactories.putAll(InternalRealms.getFactories(threadPool, resourceWatcherService, sslService, nativeUsersStore,, +                nativeRoleMappingStore, securityLifecycleService));, +        securityLifecycleService.addSecurityIndexHealthChangeListener(allRolesStore::onSecurityIndexHealthChange);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import org.elasticsearch.cluster.health.ClusterIndexHealth;, +import java.util.function.BiConsumer;, +    /**, +     * Adds a listener which will be notified when the security index health changes. The previous and, +     * current health will be provided to the listener so that the listener can determine if any action, +     * needs to be taken., +     */, +    public void addSecurityIndexHealthChangeListener(BiConsumer<ClusterIndexHealth, ClusterIndexHealth> listener) {, +        securityIndex.addIndexHealthChangeListener(listener);, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +        realmFactories.putAll(InternalRealms.getFactories(threadPool, resourceWatcherService, sslService, nativeUsersStore,, +                nativeRoleMappingStore, securityLifecycleService));, +        securityLifecycleService.addSecurityIndexHealthChangeListener(allRolesStore::onSecurityIndexHealthChange);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import org.elasticsearch.cluster.health.ClusterIndexHealth;, +import java.util.function.BiConsumer;, +    /**, +     * Adds a listener which will be notified when the security index health changes. The previous and, +     * current health will be provided to the listener so that the listener can determine if any action, +     * needs to be taken., +     */, +    public void addSecurityIndexHealthChangeListener(BiConsumer<ClusterIndexHealth, ClusterIndexHealth> listener) {, +        securityIndex.addIndexHealthChangeListener(listener);, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/InternalRealms.java, +import org.elasticsearch.xpack.security.SecurityLifecycleService;, +    public static Map<String, Realm.Factory> getFactories(ThreadPool threadPool, ResourceWatcherService resourceWatcherService,, +                                                          NativeRoleMappingStore nativeRoleMappingStore,, +                                                          SecurityLifecycleService securityLifecycleService) {, +        map.put(NativeRealm.TYPE, config -> {, +            final NativeRealm nativeRealm = new NativeRealm(config, nativeUsersStore);, +            securityLifecycleService.addSecurityIndexHealthChangeListener(nativeRealm::onSecurityIndexHealthChange);, +            return nativeRealm;, +        });, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +        realmFactories.putAll(InternalRealms.getFactories(threadPool, resourceWatcherService, sslService, nativeUsersStore,, +                nativeRoleMappingStore, securityLifecycleService));, +        securityLifecycleService.addSecurityIndexHealthChangeListener(allRolesStore::onSecurityIndexHealthChange);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import org.elasticsearch.cluster.health.ClusterIndexHealth;, +import java.util.function.BiConsumer;, +    /**, +     * Adds a listener which will be notified when the security index health changes. The previous and, +     * current health will be provided to the listener so that the listener can determine if any action, +     * needs to be taken., +     */, +    public void addSecurityIndexHealthChangeListener(BiConsumer<ClusterIndexHealth, ClusterIndexHealth> listener) {, +        securityIndex.addIndexHealthChangeListener(listener);, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/InternalRealms.java, +import org.elasticsearch.xpack.security.SecurityLifecycleService;, +    public static Map<String, Realm.Factory> getFactories(ThreadPool threadPool, ResourceWatcherService resourceWatcherService,, +                                                          NativeRoleMappingStore nativeRoleMappingStore,, +                                                          SecurityLifecycleService securityLifecycleService) {, +        map.put(NativeRealm.TYPE, config -> {, +            final NativeRealm nativeRealm = new NativeRealm(config, nativeUsersStore);, +            securityLifecycleService.addSecurityIndexHealthChangeListener(nativeRealm::onSecurityIndexHealthChange);, +            return nativeRealm;, +        });, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/NativeRealm.java, +import org.elasticsearch.cluster.health.ClusterHealthStatus;, +import org.elasticsearch.cluster.health.ClusterIndexHealth;, +    public void onSecurityIndexHealthChange(ClusterIndexHealth previousHealth, ClusterIndexHealth currentHealth) {, +        final boolean movedFromRedToNonRed = (previousHealth == null || previousHealth.getStatus() == ClusterHealthStatus.RED), +                && currentHealth != null && currentHealth.getStatus() != ClusterHealthStatus.RED;, +        final boolean indexDeleted = previousHealth != null && currentHealth == null;, +, +        if (movedFromRedToNonRed || indexDeleted) {, +            clearCache();, +        }, +    }, +, +    // method is used for testing to verify cache expiration since expireAll is final, +    void clearCache() {, +        expireAll();, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +        realmFactories.putAll(InternalRealms.getFactories(threadPool, resourceWatcherService, sslService, nativeUsersStore,, +                nativeRoleMappingStore, securityLifecycleService));, +        securityLifecycleService.addSecurityIndexHealthChangeListener(allRolesStore::onSecurityIndexHealthChange);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import org.elasticsearch.cluster.health.ClusterIndexHealth;, +import java.util.function.BiConsumer;, +    /**, +     * Adds a listener which will be notified when the security index health changes. The previous and, +     * current health will be provided to the listener so that the listener can determine if any action]