[+++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        serverBootstrap.setPipelineFactory(new MyChannelPipelineFactory(this));, +, +    static class MyChannelPipelineFactory implements ChannelPipelineFactory {, +, +        private final NettyHttpServerTransport transport;, +, +        private final HttpRequestHandler requestHandler;, +, +        MyChannelPipelineFactory(NettyHttpServerTransport transport) {, +            this.transport = transport;, +            this.requestHandler = new HttpRequestHandler(transport);, +        }, +, +        @Override, +        public ChannelPipeline getPipeline() throws Exception {, +            ChannelPipeline pipeline = Channels.pipeline();, +            pipeline.addLast("openChannels", transport.serverOpenChannels);, +                    (int) transport.maxInitialLineLength.bytes(),, +                    (int) transport.maxHeaderSize.bytes(),, +                    (int) transport.maxChunkSize.bytes(), +            if (transport.maxCumulationBufferCapacity != null) {, +                if (transport.maxCumulationBufferCapacity.bytes() > Integer.MAX_VALUE) {, +                    requestDecoder.setMaxCumulationBufferCapacity((int) transport.maxCumulationBufferCapacity.bytes());, +            if (transport.maxCompositeBufferComponents != -1) {, +                requestDecoder.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);, +            pipeline.addLast("decoder", requestDecoder);, +            if (transport.compression) {, +                pipeline.addLast("decoder_compress", new HttpContentDecompressor());, +            HttpChunkAggregator httpChunkAggregator = new HttpChunkAggregator((int) transport.maxContentLength.bytes());, +            if (transport.maxCompositeBufferComponents != -1) {, +                httpChunkAggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);, +            pipeline.addLast("aggregator", httpChunkAggregator);, +            pipeline.addLast("encoder", new HttpResponseEncoder());, +            if (transport.compression) {, +                pipeline.addLast("encoder_compress", new HttpContentCompressor(transport.compressionLevel));, +            pipeline.addLast("handler", requestHandler);, +            return pipeline;, +        }, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        serverBootstrap.setPipelineFactory(new MyChannelPipelineFactory(this));, +, +    static class MyChannelPipelineFactory implements ChannelPipelineFactory {, +, +        private final NettyHttpServerTransport transport;, +, +        private final HttpRequestHandler requestHandler;, +, +        MyChannelPipelineFactory(NettyHttpServerTransport transport) {, +            this.transport = transport;, +            this.requestHandler = new HttpRequestHandler(transport);, +        }, +, +        @Override, +        public ChannelPipeline getPipeline() throws Exception {, +            ChannelPipeline pipeline = Channels.pipeline();, +            pipeline.addLast("openChannels", transport.serverOpenChannels);, +                    (int) transport.maxInitialLineLength.bytes(),, +                    (int) transport.maxHeaderSize.bytes(),, +                    (int) transport.maxChunkSize.bytes(), +            if (transport.maxCumulationBufferCapacity != null) {, +                if (transport.maxCumulationBufferCapacity.bytes() > Integer.MAX_VALUE) {, +                    requestDecoder.setMaxCumulationBufferCapacity((int) transport.maxCumulationBufferCapacity.bytes());, +            if (transport.maxCompositeBufferComponents != -1) {, +                requestDecoder.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);, +            pipeline.addLast("decoder", requestDecoder);, +            if (transport.compression) {, +                pipeline.addLast("decoder_compress", new HttpContentDecompressor());, +            HttpChunkAggregator httpChunkAggregator = new HttpChunkAggregator((int) transport.maxContentLength.bytes());, +            if (transport.maxCompositeBufferComponents != -1) {, +                httpChunkAggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);, +            pipeline.addLast("aggregator", httpChunkAggregator);, +            pipeline.addLast("encoder", new HttpResponseEncoder());, +            if (transport.compression) {, +                pipeline.addLast("encoder_compress", new HttpContentCompressor(transport.compressionLevel));, +            pipeline.addLast("handler", requestHandler);, +            return pipeline;, +        }, +++ b/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java, +    private final ESLogger logger;, +    private final ThreadPool threadPool;, +    private final TransportServiceAdapter transportServiceAdapter;, +    private final NettyTransport transport;, +    private void handleResponse(Channel channel, StreamInput buffer, final TransportResponseHandler handler) {, +    private String handleRequest(Channel channel, StreamInput buffer, long requestId, Version version) throws IOException {, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        serverBootstrap.setPipelineFactory(new MyChannelPipelineFactory(this));, +, +    static class MyChannelPipelineFactory implements ChannelPipelineFactory {, +, +        private final NettyHttpServerTransport transport;, +, +        private final HttpRequestHandler requestHandler;, +, +        MyChannelPipelineFactory(NettyHttpServerTransport transport) {, +            this.transport = transport;, +            this.requestHandler = new HttpRequestHandler(transport);, +        }, +, +        @Override]