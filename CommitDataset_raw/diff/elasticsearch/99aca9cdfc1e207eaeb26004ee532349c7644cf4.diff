[+++ b/core/src/main/java/org/elasticsearch/index/mapper/BinaryFieldMapper.java, +, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.DocValuesFieldExistsQuery;, +import org.apache.lucene.search.TermQuery;, +        public Query existsQuery(QueryShardContext context) {, +            if (hasDocValues()) {, +                return new DocValuesFieldExistsQuery(name());, +            } else {, +                return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name()));, +            }, +        }, +, +        @Override, +        } else {, +            // Only add an entry to the field names field if the field is stored, +            // but has no doc values so exists query will work on a field with, +            // no doc values, +            createFieldNamesField(context, fields);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/BinaryFieldMapper.java, +, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.DocValuesFieldExistsQuery;, +import org.apache.lucene.search.TermQuery;, +        public Query existsQuery(QueryShardContext context) {, +            if (hasDocValues()) {, +                return new DocValuesFieldExistsQuery(name());, +            } else {, +                return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name()));, +            }, +        }, +, +        @Override, +        } else {, +            // Only add an entry to the field names field if the field is stored, +            // but has no doc values so exists query will work on a field with, +            // no doc values, +            createFieldNamesField(context, fields);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/BooleanFieldMapper.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.DocValuesFieldExistsQuery;, +import org.apache.lucene.search.TermQuery;, +        public Query existsQuery(QueryShardContext context) {, +            if (hasDocValues()) {, +                return new DocValuesFieldExistsQuery(name());, +            } else {, +                return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name()));, +            }, +        }, +, +        @Override, +        } else {, +            createFieldNamesField(context, fields);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/BinaryFieldMapper.java, +, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.DocValuesFieldExistsQuery;, +import org.apache.lucene.search.TermQuery;, +        public Query existsQuery(QueryShardContext context) {, +            if (hasDocValues()) {, +                return new DocValuesFieldExistsQuery(name());, +            } else {, +                return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name()));, +            }, +        }, +, +        @Override, +        } else {, +            // Only add an entry to the field names field if the field is stored, +            // but has no doc values so exists query will work on a field with, +            // no doc values, +            createFieldNamesField(context, fields);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/BooleanFieldMapper.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.DocValuesFieldExistsQuery;, +import org.apache.lucene.search.TermQuery;, +        public Query existsQuery(QueryShardContext context) {, +            if (hasDocValues()) {, +                return new DocValuesFieldExistsQuery(name());, +            } else {, +                return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name()));, +            }, +        }, +, +        @Override, +        } else {, +            createFieldNamesField(context, fields);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.TermQuery;, +import org.elasticsearch.index.query.QueryShardContext;, +import java.util.ArrayList;, +        @Override, +        public Query existsQuery(QueryShardContext context) {, +            return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name()));, +        }, +, +        List<IndexableField> fields = new ArrayList<>(1);, +        createFieldNamesField(context, fields);, +        for (IndexableField field : fields) {]