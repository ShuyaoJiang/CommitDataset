[+++ b/core/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +                        // now this gets interesting: since the search sort is a prefix of the index sort, we can directly, +                                .add(new SearchAfterSortedDocQuery(searchContext.sort().sort, (FieldDoc) after), BooleanClause.Occur.FILTER), +++ b/core/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +                        // now this gets interesting: since the search sort is a prefix of the index sort, we can directly, +                                .add(new SearchAfterSortedDocQuery(searchContext.sort().sort, (FieldDoc) after), BooleanClause.Occur.FILTER), +++ b/core/src/test/java/org/elasticsearch/search/query/QueryPhaseTests.java, +import java.util.ArrayList;, +        final Sort indexSort = new Sort(, +        IndexWriterConfig iwc = newIndexWriterConfig().setIndexSort(indexSort);, +        final IndexReader reader = DirectoryReader.open(dir);, +        List<SortAndFormats> searchSortAndFormats = new ArrayList<>();, +        searchSortAndFormats.add(new SortAndFormats(indexSort, new DocValueFormat[]{DocValueFormat.RAW, DocValueFormat.RAW}));, +        // search sort is a prefix of the index sort, +        searchSortAndFormats.add(new SortAndFormats(new Sort(indexSort.getSort()[0]), new DocValueFormat[]{DocValueFormat.RAW}));, +        for (SortAndFormats searchSortAndFormat : searchSortAndFormats) {, +            IndexSearcher contextSearcher = new IndexSearcher(reader);, +            context.sort(searchSortAndFormat);, +            QueryPhase.execute(context, contextSearcher, checkCancelled -> {}, searchSortAndFormat.sort);, +            QueryPhase.execute(context, contextSearcher, checkCancelled -> {}, searchSortAndFormat.sort);, +            for (int i = 0; i < searchSortAndFormat.sort.getSort().length; i++) {, +                FieldComparator<Object> comparator = (FieldComparator<Object>) searchSortAndFormat.sort.getSort()[i].getComparator(1, i);, +        }]