[+++ b/docs/reference/query-dsl/filters/has-child-filter.asciidoc, +, +[float], +==== Caching, +, +The `has_child` filter cannot be cached in the filter cache. The `_cache`, +and `_cache_key` options are a no-op in this filter. Also any filter that, +wraps the `has_child` filter either directly or indirectly will not be cached., +++ b/docs/reference/query-dsl/filters/has-child-filter.asciidoc, +, +[float], +==== Caching, +, +The `has_child` filter cannot be cached in the filter cache. The `_cache`, +and `_cache_key` options are a no-op in this filter. Also any filter that, +wraps the `has_child` filter either directly or indirectly will not be cached., +++ b/docs/reference/query-dsl/filters/has-parent-filter.asciidoc, +, +[float], +==== Caching, +, +The `has_parent` filter cannot be cached in the filter cache. The `_cache`, +and `_cache_key` options are a no-op in this filter. Also any filter that, +wraps the `has_parent` filter either directly or indirectly will not be cached., +++ b/docs/reference/query-dsl/filters/has-child-filter.asciidoc, +, +[float], +==== Caching, +, +The `has_child` filter cannot be cached in the filter cache. The `_cache`, +and `_cache_key` options are a no-op in this filter. Also any filter that, +wraps the `has_child` filter either directly or indirectly will not be cached., +++ b/docs/reference/query-dsl/filters/has-parent-filter.asciidoc, +, +[float], +==== Caching, +, +The `has_parent` filter cannot be cached in the filter cache. The `_cache`, +and `_cache_key` options are a no-op in this filter. Also any filter that, +wraps the `has_parent` filter either directly or indirectly will not be cached., +++ b/src/main/java/org/elasticsearch/index/search/child/CustomQueryWrappingFilter.java, +import org.elasticsearch.common.lucene.search.NoCacheFilter;, +public class CustomQueryWrappingFilter extends NoCacheFilter {, +++ b/docs/reference/query-dsl/filters/has-child-filter.asciidoc, +, +[float], +==== Caching, +, +The `has_child` filter cannot be cached in the filter cache. The `_cache`, +and `_cache_key` options are a no-op in this filter. Also any filter that, +wraps the `has_child` filter either directly or indirectly will not be cached., +++ b/docs/reference/query-dsl/filters/has-parent-filter.asciidoc, +, +[float], +==== Caching, +, +The `has_parent` filter cannot be cached in the filter cache. The `_cache`, +and `_cache_key` options are a no-op in this filter. Also any filter that, +wraps the `has_parent` filter either directly or indirectly will not be cached., +++ b/src/main/java/org/elasticsearch/index/search/child/CustomQueryWrappingFilter.java, +import org.elasticsearch.common.lucene.search.NoCacheFilter;, +public class CustomQueryWrappingFilter extends NoCacheFilter {, +++ b/src/test/java/org/elasticsearch/search/child/SimpleChildQuerySearchTests.java, +    @Test, +    public void testParentChildCaching() throws Exception {, +        client().admin().indices().prepareCreate("test"), +                .setSettings(, +                        ImmutableSettings.settingsBuilder(), +                                .put("index.number_of_shards", 1), +                                .put("index.number_of_replicas", 0), +                                .put("index.refresh_interval", -1), +                ).get();, +        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();, +        client().admin().indices().preparePutMapping("test").setType("child").setSource(jsonBuilder().startObject().startObject("child"), +                .startObject("_parent").field("type", "parent").endObject(), +                .endObject().endObject()).get();, +, +, +        // index simple data, +        client().prepareIndex("test", "parent", "p1").setSource("p_field", "p_value1").get();, +        client().prepareIndex("test", "parent", "p2").setSource("p_field", "p_value2").get();, +        client().prepareIndex("test", "child", "c1").setParent("p1").setSource("c_field", "blue").get();, +        client().prepareIndex("test", "child", "c2").setParent("p1").setSource("c_field", "red").get();, +        client().prepareIndex("test", "child", "c3").setParent("p2").setSource("c_field", "red").get();, +        client().admin().indices().prepareOptimize("test").setFlush(true).setWaitForMerge(true).get();, +        client().prepareIndex("test", "parent", "p3").setSource("p_field", "p_value3").get();, +        client().prepareIndex("test", "parent", "p4").setSource("p_field", "p_value4").get();, +        client().prepareIndex("test", "child", "c4").setParent("p3").setSource("c_field", "green").get();, +        client().prepareIndex("test", "child", "c5").setParent("p3").setSource("c_field", "blue").get();, +        client().prepareIndex("test", "child", "c6").setParent("p4").setSource("c_field", "blue").get();, +        client().admin().indices().prepareFlush("test").get();, +        client().admin().indices().prepareRefresh("test").get();, +, +        for (int i = 0; i < 2; i++) {, +            SearchResponse searchResponse = client().prepareSearch(), +                    .setQuery(filteredQuery(matchAllQuery(), boolFilter(), +                            .must(FilterBuilders.hasChildFilter("child", matchQuery("c_field", "red"))), +                            .must(matchAllFilter()), +                            .cache(true))), +                    .get();]