[+++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/resources/rest-api-spec/test/watcher_mustache/30_search_input_and_transform.yaml, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-3d" }, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-1d" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.1.term.value": "val_3" }, +++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/resources/rest-api-spec/test/watcher_mustache/30_search_input_and_transform.yaml, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-3d" }, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-1d" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.1.term.value": "val_3" }, +++ b/elasticsearch/x-pack/security/src/test/java/org/elasticsearch/xpack/security/ssl/CertificateToolTests.java, +            final String name = getValidRandomInstanceName();, +            logger.info("instance [{}] name [{}] [{}]", i, name, instanceInfo);, +        logger.info("certificate tool output:\n{}", terminal.getOutput());, +, +    /**, +     * Gets a random name that is valid for certificate generation. There are some cases where the random value could match one of the, +     * reserved names like ca, so this method allows us to avoid these issues., +     */, +    private String getValidRandomInstanceName() {, +        String name;, +        boolean valid;, +        do {, +            name = randomAsciiOfLengthBetween(1, 32);, +            valid = Name.fromUserProvidedName(name).error == null;, +        } while (valid == false);, +        return name;, +    }, +++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/resources/rest-api-spec/test/watcher_mustache/30_search_input_and_transform.yaml, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-3d" }, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-1d" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.1.term.value": "val_3" }, +++ b/elasticsearch/x-pack/security/src/test/java/org/elasticsearch/xpack/security/ssl/CertificateToolTests.java, +            final String name = getValidRandomInstanceName();, +            logger.info("instance [{}] name [{}] [{}]", i, name, instanceInfo);, +        logger.info("certificate tool output:\n{}", terminal.getOutput());, +, +    /**, +     * Gets a random name that is valid for certificate generation. There are some cases where the random value could match one of the, +     * reserved names like ca, so this method allows us to avoid these issues., +     */, +    private String getValidRandomInstanceName() {, +        String name;, +        boolean valid;, +        do {, +            name = randomAsciiOfLengthBetween(1, 32);, +            valid = Name.fromUserProvidedName(name).error == null;, +        } while (valid == false);, +        return name;, +    }, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/Action.java, +            CONDITION_FAILED,, +        /**, +         * {@code StoppedResult} is a {@link Result} with a {@link #reason()}., +         * <p>, +         * Any {@code StoppedResult} should provide a reason <em>why</em> it is stopped., +         */, +        public static class StoppedResult extends Result {, +            protected StoppedResult(String type, Status status, String reason, Object... args) {, +                super(type, status);, +, +        /**, +         * {@code Failure} is a {@link StoppedResult} with a status of {@link Status#FAILURE} for actiosn that have failed unexpectedly, +         * (e.g., an exception was thrown in a place that wouldn't expect one, like transformation or an HTTP request)., +         */, +        public static class Failure extends StoppedResult {, +            public Failure(String type, String reason, Object... args) {, +                super(type, Status.FAILURE, reason, args);, +            }, +, +        }, +, +        /**, +         * {@code Throttled} is a {@link StoppedResult} with a status of {@link Status#THROTTLED} for actions that have been throttled., +         */, +        public static class Throttled extends StoppedResult {, +                super(type, Status.THROTTLED, reason);, +        /**, +         * {@code ConditionFailed} is a {@link StoppedResult} with a status of {@link Status#FAILURE} for actions that have been skipped, +         * because the action's condition failed (either expected or unexpected)., +         */, +        public static class ConditionFailed extends StoppedResult {, +, +            public ConditionFailed(String type, String reason, Object... args) {, +                super(type, Status.CONDITION_FAILED, reason, args);, +, +++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/resources/rest-api-spec/test/watcher_mustache/30_search_input_and_transform.yaml, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-3d" }, +  - match: { "watch_record.result.input.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.gte": "2015-01-04T00:00:00.000Z||-1d" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.0.range.date.lte": "2015-01-04T00:00:00.000Z" }, +  - match: { "watch_record.result.transform.search.request.body.query.bool.filter.1.term.value": "val_3" }, +++ b/elasticsearch/x-pack/security/src/test/java/org/elasticsearch/xpack/security/ssl/CertificateToolTests.java, +            final String name = getValidRandomInstanceName();, +            logger.info("instance [{}] name [{}] [{}]", i, name, instanceInfo);, +        logger.info("certificate tool output:\n{}", terminal.getOutput());]