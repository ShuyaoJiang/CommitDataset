[+++ b/build.gradle, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "$archivesBaseName-*-javadoc.jar") }, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "$archivesBaseName-*-sources.jar") }, +, +++ b/build.gradle, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "$archivesBaseName-*-javadoc.jar") }, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "$archivesBaseName-*-sources.jar") }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +            context.docIdsToLoad(request.docIds(), 0, request.docIdsSize());, +            context.docIdsToLoad(EMPTY_DOC_IDS, 0, 0);, +        context.docIdsToLoad(docIdsToLoad, 0, counter);, +++ b/build.gradle, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "$archivesBaseName-*-javadoc.jar") }, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "$archivesBaseName-*-sources.jar") }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +            context.docIdsToLoad(request.docIds(), 0, request.docIdsSize());, +            context.docIdsToLoad(EMPTY_DOC_IDS, 0, 0);, +        context.docIdsToLoad(docIdsToLoad, 0, counter);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +                list = new ExtTIntArrayList(); // can't be shared!, uses unsafe on it later on, +++ b/build.gradle, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "$archivesBaseName-*-javadoc.jar") }, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "$archivesBaseName-*-sources.jar") }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +            context.docIdsToLoad(request.docIds(), 0, request.docIdsSize());, +            context.docIdsToLoad(EMPTY_DOC_IDS, 0, 0);, +        context.docIdsToLoad(docIdsToLoad, 0, counter);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +                list = new ExtTIntArrayList(); // can't be shared!, uses unsafe on it later on, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +        InternalSearchHit[] hits = new InternalSearchHit[context.docIdsToLoadSize()];, +        for (int docIdIdx = context.docIdsToLoadFrom(); docIdIdx < context.docIdsToLoadSize(); docIdIdx++) {, +            int docId = context.docIdsToLoad()[docIdIdx];, +++ b/build.gradle, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "$archivesBaseName-*-javadoc.jar") }, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "$archivesBaseName-*-sources.jar") }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +            context.docIdsToLoad(request.docIds(), 0, request.docIdsSize());, +            context.docIdsToLoad(EMPTY_DOC_IDS, 0, 0);, +        context.docIdsToLoad(docIdsToLoad, 0, counter);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +                list = new ExtTIntArrayList(); // can't be shared!, uses unsafe on it later on, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +        InternalSearchHit[] hits = new InternalSearchHit[context.docIdsToLoadSize()];, +        for (int docIdIdx = context.docIdsToLoadFrom(); docIdIdx < context.docIdsToLoadSize(); docIdIdx++) {, +            int docId = context.docIdsToLoad()[docIdIdx];, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/fetch/FetchSearchRequest.java, + * @author kimchy (shay.banon), +    private int size;, +    public int docIdsSize() {, +        return size;, +    }, +, +        for (int i = 0; i < size; i++) {, +++ b/build.gradle, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "$archivesBaseName-*-javadoc.jar") }, +    ant.delete { fileset(dir: explodedDistLibDir, includes: "$archivesBaseName-*-sources.jar") }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +            context.docIdsToLoad(request.docIds(), 0, request.docIdsSize());, +            context.docIdsToLoad(EMPTY_DOC_IDS, 0, 0);, +        context.docIdsToLoad(docIdsToLoad, 0, counter);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +                list = new ExtTIntArrayList(); // can't be shared!, uses unsafe on it later on, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +        InternalSearchHit[] hits = new InternalSearchHit[context.docIdsToLoadSize()];, +        for (int docIdIdx = context.docIdsToLoadFrom(); docIdIdx < context.docIdsToLoadSize(); docIdIdx++) {, +            int docId = context.docIdsToLoad()[docIdIdx];, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/fetch/FetchSearchRequest.java, + * @author kimchy (shay.banon), +    private int size;, +    public int docIdsSize() {, +        return size;, +    }, +, +        for (int i = 0; i < size; i++) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/internal/SearchContext.java, +    private int docsIdsToLoadFrom;, +, +    private int docsIdsToLoadSize;, +, +    public int docIdsToLoadFrom() {, +        return docsIdsToLoadFrom;, +    }, +, +    public int docIdsToLoadSize() {, +        return docsIdsToLoadSize;, +    }, +, +    public SearchContext docIdsToLoad(int[] docIdsToLoad, int docsIdsToLoadFrom, int docsIdsToLoadSize) {, +        this.docsIdsToLoadFrom = docsIdsToLoadFrom;, +        this.docsIdsToLoadSize = docsIdsToLoadSize;]