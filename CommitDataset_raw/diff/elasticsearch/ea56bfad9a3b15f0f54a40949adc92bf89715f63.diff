[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.monitor.jvm.JvmGcMonitorService;, +                    FsService.REFRESH_INTERVAL_SETTING,, +                    JvmGcMonitorService.ENABLED_SETTING,, +                    JvmGcMonitorService.REFRESH_INTERVAL_SETTING,, +                    JvmGcMonitorService.GC_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.monitor.jvm.JvmGcMonitorService;, +                    FsService.REFRESH_INTERVAL_SETTING,, +                    JvmGcMonitorService.ENABLED_SETTING,, +                    JvmGcMonitorService.REFRESH_INTERVAL_SETTING,, +                    JvmGcMonitorService.GC_SETTING, +++ b/core/src/main/java/org/elasticsearch/monitor/MonitorService.java, +import org.elasticsearch.monitor.jvm.JvmGcMonitorService;, +    private final JvmGcMonitorService jvmGcMonitorService;, +        this.jvmGcMonitorService = new JvmGcMonitorService(settings, threadPool);, +        jvmGcMonitorService.start();, +        jvmGcMonitorService.stop();, +        jvmGcMonitorService.close();, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.monitor.jvm.JvmGcMonitorService;, +                    FsService.REFRESH_INTERVAL_SETTING,, +                    JvmGcMonitorService.ENABLED_SETTING,, +                    JvmGcMonitorService.REFRESH_INTERVAL_SETTING,, +                    JvmGcMonitorService.GC_SETTING, +++ b/core/src/main/java/org/elasticsearch/monitor/MonitorService.java, +import org.elasticsearch.monitor.jvm.JvmGcMonitorService;, +    private final JvmGcMonitorService jvmGcMonitorService;, +        this.jvmGcMonitorService = new JvmGcMonitorService(settings, threadPool);, +        jvmGcMonitorService.start();, +        jvmGcMonitorService.stop();, +        jvmGcMonitorService.close();, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.monitor.jvm;, +, +import org.elasticsearch.common.component.AbstractLifecycleComponent;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Scope;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +import org.elasticsearch.monitor.jvm.JvmStats.GarbageCollector;, +import org.elasticsearch.threadpool.ThreadPool;, +, +import java.util.HashMap;, +import java.util.Map;, +import java.util.concurrent.ScheduledFuture;, +, +import static java.util.Collections.unmodifiableMap;, +import static org.elasticsearch.monitor.jvm.JvmStats.jvmStats;, +, +/**, + *, + */, +public class JvmGcMonitorService extends AbstractLifecycleComponent<JvmGcMonitorService> {, +, +    private final ThreadPool threadPool;, +    private final boolean enabled;, +    private final TimeValue interval;, +    private final Map<String, GcThreshold> gcThresholds;, +, +    private volatile ScheduledFuture scheduledFuture;, +, +    public final static Setting<Boolean> ENABLED_SETTING = Setting.boolSetting("monitor.jvm.gc.enabled", true, false, Scope.CLUSTER);, +    public final static Setting<TimeValue> REFRESH_INTERVAL_SETTING =, +        Setting.timeSetting("monitor.jvm.gc.refresh_interval", TimeValue.timeValueSeconds(1), TimeValue.timeValueSeconds(1), false, Scope.CLUSTER);, +    public final static Setting<Settings> GC_SETTING = Setting.groupSetting("monitor.jvm.gc.collector.", false, Scope.CLUSTER);, +, +    static class GcThreshold {, +        public final String name;, +        public final long warnThreshold;, +        public final long infoThreshold;, +        public final long debugThreshold;, +, +        GcThreshold(String name, long warnThreshold, long infoThreshold, long debugThreshold) {, +            this.name = name;, +            this.warnThreshold = warnThreshold;, +            this.infoThreshold = infoThreshold;, +            this.debugThreshold = debugThreshold;, +        }, +]