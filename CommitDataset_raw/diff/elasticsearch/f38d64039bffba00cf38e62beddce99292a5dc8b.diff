[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngineService.java, +        // Note that it is safe to catch any of the following errors since Painless is stateless., +        } catch (OutOfMemoryError | StackOverflowError | Exception e) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngineService.java, +        // Note that it is safe to catch any of the following errors since Painless is stateless., +        } catch (OutOfMemoryError | StackOverflowError | Exception e) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +        // Note that it is safe to catch any of the following errors since Painless is stateless., +        } catch (PainlessError | BootstrapMethodError | OutOfMemoryError | StackOverflowError | Exception e) {, +            throw convertToScriptException(e);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngineService.java, +        // Note that it is safe to catch any of the following errors since Painless is stateless., +        } catch (OutOfMemoryError | StackOverflowError | Exception e) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +        // Note that it is safe to catch any of the following errors since Painless is stateless., +        } catch (PainlessError | BootstrapMethodError | OutOfMemoryError | StackOverflowError | Exception e) {, +            throw convertToScriptException(e);, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/WhenThingsGoWrongTests.java, +import org.apache.lucene.util.Constants;, +import org.elasticsearch.script.ScriptException;, +, +, +    public void testOutOfMemoryError() {, +        assumeTrue("test only happens to work for sure on oracle jre", Constants.JAVA_VENDOR.startsWith("Oracle"));, +        expectScriptThrows(OutOfMemoryError.class, () -> {, +            exec("int[] x = new int[Integer.MAX_VALUE - 1];");, +        });, +    }, +, +    public void testStackOverflowError() {, +        expectScriptThrows(StackOverflowError.class, () -> {, +            exec("void recurse(int x, int y) {recurse(x, y)} recurse(1, 2);");, +        });, +    }]