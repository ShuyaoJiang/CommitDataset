[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +import org.elasticsearch.xpack.sql.plan.logical.Project;, +            LogicalPlan child = o.child();, +, +            if (child instanceof Project) {, +                child = ((Project) child).child();, +            }, +            if (child instanceof Filter) {, +                child = ((Filter) child).child();, +            }, +, +            if (child instanceof Aggregate) {, +                Aggregate a = (Aggregate) child;, +                    // Make sure you can apply functions on top of the grouped by expressions in the ORDER BY:, +                    // e.g.: if "GROUP BY f2(f1(field))" you can "ORDER BY f4(f3(f2(f1(field))))", +                    //, +                    // Also, make sure to compare attributes directly, +                    if (e.anyMatch(expression -> Expressions.anyMatch(groupingAndMatchingAggregatesAliases,, +                        g -> expression.semanticEquals(expression instanceof Attribute ? Expressions.attribute(g) : g)))) {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +import org.elasticsearch.xpack.sql.plan.logical.Project;, +            LogicalPlan child = o.child();, +, +            if (child instanceof Project) {, +                child = ((Project) child).child();, +            }, +            if (child instanceof Filter) {, +                child = ((Filter) child).child();, +            }, +, +            if (child instanceof Aggregate) {, +                Aggregate a = (Aggregate) child;, +                    // Make sure you can apply functions on top of the grouped by expressions in the ORDER BY:, +                    // e.g.: if "GROUP BY f2(f1(field))" you can "ORDER BY f4(f3(f2(f1(field))))", +                    //, +                    // Also, make sure to compare attributes directly, +                    if (e.anyMatch(expression -> Expressions.anyMatch(groupingAndMatchingAggregatesAliases,, +                        g -> expression.semanticEquals(expression instanceof Attribute ? Expressions.attribute(g) : g)))) {, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java, +    public void testGroupByOrderByNonGrouped_WithHaving() {, +        assertEquals("1:71: Cannot order by non-grouped column [bool], expected [text]",, +            verify("SELECT MAX(int) FROM test GROUP BY text HAVING MAX(int) > 10 ORDER BY bool"));, +    }, +, +    public void testGroupByOrderByScalarOverNonGrouped_WithHaving() {, +        assertEquals("1:71: Cannot order by non-grouped column [YEAR(date [UTC])], expected [text]",, +            verify("SELECT MAX(int) FROM test GROUP BY text HAVING MAX(int) > 10 ORDER BY YEAR(date)"));, +    }, +]