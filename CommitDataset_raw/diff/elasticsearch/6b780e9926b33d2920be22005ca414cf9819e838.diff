[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        for (Map.Entry<String, Object> setting : node.config.settings) {, +            if (setting.value == null) {, +                esConfig.remove(setting.key), +            } else {, +                esConfig.put(setting.key, setting.value), +            }, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        for (Map.Entry<String, Object> setting : node.config.settings) {, +            if (setting.value == null) {, +                esConfig.remove(setting.key), +            } else {, +                esConfig.put(setting.key, setting.value), +            }, +        }, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        for (Map.Entry<String, Object> setting : node.config.settings) {, +            if (setting.value == null) {, +                esConfig.remove(setting.key), +            } else {, +                esConfig.put(setting.key, setting.value), +            }, +        }, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IngestClient.java, +        return restHighLevelClient.performRequestAndParseEntity( request, IngestRequestConverters::putPipeline, options,, +        restHighLevelClient.performRequestAsyncAndParseEntity( request, IngestRequestConverters::putPipeline, options,, +        return restHighLevelClient.performRequestAndParseEntity( request, IngestRequestConverters::getPipeline, options,, +        restHighLevelClient.performRequestAsyncAndParseEntity( request, IngestRequestConverters::getPipeline, options,, +        return restHighLevelClient.performRequestAndParseEntity( request, IngestRequestConverters::deletePipeline, options,, +        restHighLevelClient.performRequestAsyncAndParseEntity( request, IngestRequestConverters::deletePipeline, options,, +        return restHighLevelClient.performRequestAndParseEntity( request, IngestRequestConverters::simulatePipeline, options,, +        restHighLevelClient.performRequestAsyncAndParseEntity( request, IngestRequestConverters::simulatePipeline, options,, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        for (Map.Entry<String, Object> setting : node.config.settings) {, +            if (setting.value == null) {, +                esConfig.remove(setting.key), +            } else {, +                esConfig.put(setting.key, setting.value), +            }, +        }, +++ /dev/null, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IngestClient.java, +        return restHighLevelClient.performRequestAndParseEntity( request, IngestRequestConverters::putPipeline, options,, +        restHighLevelClient.performRequestAsyncAndParseEntity( request, IngestRequestConverters::putPipeline, options,, +        return restHighLevelClient.performRequestAndParseEntity( request, IngestRequestConverters::getPipeline, options,, +        restHighLevelClient.performRequestAsyncAndParseEntity( request, IngestRequestConverters::getPipeline, options,, +        return restHighLevelClient.performRequestAndParseEntity( request, IngestRequestConverters::deletePipeline, options,, +        restHighLevelClient.performRequestAsyncAndParseEntity( request, IngestRequestConverters::deletePipeline, options,, +        return restHighLevelClient.performRequestAndParseEntity( request, IngestRequestConverters::simulatePipeline, options,, +        restHighLevelClient.performRequestAsyncAndParseEntity( request, IngestRequestConverters::simulatePipeline, options,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IngestRequestConverters.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.client;, +, +import org.apache.http.client.methods.HttpDelete;, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.client.methods.HttpPost;, +import org.apache.http.client.methods.HttpPut;, +import org.elasticsearch.action.ingest.DeletePipelineRequest;, +import org.elasticsearch.action.ingest.GetPipelineRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +import org.elasticsearch.action.ingest.SimulatePipelineRequest;, +, +import java.io.IOException;, +, +public class IngestRequestConverters {, +, +    static Request getPipeline(GetPipelineRequest getPipelineRequest) {, +        String endpoint = new RequestConverters.EndpointBuilder(), +            .addPathPartAsIs("_ingest/pipeline"), +            .addCommaSeparatedPathParts(getPipelineRequest.getIds()), +            .build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        RequestConverters.Params parameters = new RequestConverters.Params(request);, +        parameters.withMasterTimeout(getPipelineRequest.masterNodeTimeout());, +        return request;, +    }, +]