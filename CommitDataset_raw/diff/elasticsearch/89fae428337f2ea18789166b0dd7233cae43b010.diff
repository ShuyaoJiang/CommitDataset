[+++ b/buildSrc/build.gradle, +  // we need to apply these again to override the build plugin, +  targetCompatibility = "10", +  sourceCompatibility = "10", +, +++ b/buildSrc/build.gradle, +  // we need to apply these again to override the build plugin, +  targetCompatibility = "10", +  sourceCompatibility = "10", +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            namingConventionsTask.javaHome = project.compilerJavaHome, +++ b/buildSrc/build.gradle, +  // we need to apply these again to override the build plugin, +  targetCompatibility = "10", +  sourceCompatibility = "10", +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            namingConventionsTask.javaHome = project.compilerJavaHome, +++ b/buildSrc/src/main/java/org/elasticsearch/GradleServicesAdapter.java, +    private final Project project;, +++ b/buildSrc/build.gradle, +  // we need to apply these again to override the build plugin, +  targetCompatibility = "10", +  sourceCompatibility = "10", +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            namingConventionsTask.javaHome = project.compilerJavaHome, +++ b/buildSrc/src/main/java/org/elasticsearch/GradleServicesAdapter.java, +    private final Project project;, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/Distribution.java, +    INTEG_TEST("integ-test", "zip"),, +    ZIP("elasticsearch", "zip"),, +    ZIP_OSS("elasticsearch-oss", "zip");, +    private final String fileExtension;, +    Distribution(String name, String fileExtension) {, +        this.fileExtension = fileExtension;, +, +    public String getFileExtension() {, +        return fileExtension;, +    }, +++ b/buildSrc/build.gradle, +  // we need to apply these again to override the build plugin, +  targetCompatibility = "10", +  sourceCompatibility = "10", +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            namingConventionsTask.javaHome = project.compilerJavaHome, +++ b/buildSrc/src/main/java/org/elasticsearch/GradleServicesAdapter.java, +    private final Project project;, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/Distribution.java, +    INTEG_TEST("integ-test", "zip"),, +    ZIP("elasticsearch", "zip"),, +    ZIP_OSS("elasticsearch-oss", "zip");, +    private final String fileExtension;, +    Distribution(String name, String fileExtension) {, +        this.fileExtension = fileExtension;, +, +    public String getFileExtension() {, +        return fileExtension;, +    }, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchNode.java, +import org.elasticsearch.gradle.Version;, +import org.gradle.internal.os.OperatingSystem;, +import java.io.BufferedReader;, +import java.io.File;, +import java.io.FileReader;, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.net.HttpURLConnection;, +import java.net.URL;, +import java.nio.charset.StandardCharsets;, +import java.nio.file.Files;, +import java.util.Arrays;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +import java.util.function.Predicate;, +import java.util.stream.Collectors;, +, +import static java.util.Objects.requireNonNull;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +import static java.util.concurrent.TimeUnit.SECONDS;, +    private final Logger logger = Logging.getLogger(ElasticsearchNode.class);, +    private final File artifactsExtractDir;, +    private final File workingDir;, +, +    private static final int ES_DESTROY_TIMEOUT = 20;, +    private static final TimeUnit ES_DESTROY_TIMEOUT_UNIT = TimeUnit.SECONDS;, +    private static final int NODE_UP_TIMEOUT = 30;, +    private static final TimeUnit NODE_UP_TIMEOUT_UNIT = TimeUnit.SECONDS;, +    private final LinkedHashMap<String, Predicate<ElasticsearchNode>> waitConditions;, +    private File javaHome;, +    private volatile Process esProcess;, +    private final String path;, +    ElasticsearchNode(String path, String name, GradleServicesAdapter services, File artifactsExtractDir, File workingDirBase) {, +        this.path = path;]