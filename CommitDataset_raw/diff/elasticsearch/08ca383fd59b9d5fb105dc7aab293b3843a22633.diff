[+++ b/.idea/dictionaries/kimchy.xml, +      <w>substring</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>substring</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/support/ImmutableAppendableBlobContainer.java, +                } else {, +                    listener.onCompleted();, +++ b/.idea/dictionaries/kimchy.xml, +      <w>substring</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/support/ImmutableAppendableBlobContainer.java, +                } else {, +                    listener.onCompleted();, +++ b/plugins/cloud/src/main/java/org/elasticsearch/cloud/blobstore/AbstractCloudBlobContainer.java, +import org.elasticsearch.common.blobstore.BlobStoreException;, +    @Override public void readBlob(final String blobName, final ReadBlobListener listener) {, +                    if (blob == null) {, +                        listener.onFailure(new BlobStoreException("No blob found for [" + buildBlobPath(blobName) + "]"));, +                        return;, +                    }, +    // inDirectory expects a directory, not a blob prefix, +//    @Override public ImmutableMap<String, BlobMetaData> listBlobsByPrefix(String blobNamePrefix) throws IOException {, +//        PageSet<? extends StorageMetadata> list = cloudBlobStore.sync().list(cloudBlobStore.container(), ListContainerOptions.Builder.recursive().inDirectory(buildBlobPath(blobNamePrefix)));, +//        ImmutableMap.Builder<String, BlobMetaData> blobs = ImmutableMap.builder();, +//        for (StorageMetadata storageMetadata : list) {, +//            String name = storageMetadata.getName().substring(cloudPath.length() + 1);, +//            blobs.put(name, new PlainBlobMetaData(name, storageMetadata.getSize(), null));, +//        }, +//        return blobs.build();, +//    }, +        PageSet<? extends StorageMetadata> list = cloudBlobStore.sync().list(cloudBlobStore.container(), ListContainerOptions.Builder.recursive().inDirectory(cloudPath));, +            String name = storageMetadata.getName().substring(cloudPath.length() + 1);, +            blobs.put(name, new PlainBlobMetaData(name, storageMetadata.getSize(), null));, +++ b/.idea/dictionaries/kimchy.xml, +      <w>substring</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/support/ImmutableAppendableBlobContainer.java, +                } else {, +                    listener.onCompleted();, +++ b/plugins/cloud/src/main/java/org/elasticsearch/cloud/blobstore/AbstractCloudBlobContainer.java, +import org.elasticsearch.common.blobstore.BlobStoreException;, +    @Override public void readBlob(final String blobName, final ReadBlobListener listener) {, +                    if (blob == null) {, +                        listener.onFailure(new BlobStoreException("No blob found for [" + buildBlobPath(blobName) + "]"));, +                        return;, +                    }, +    // inDirectory expects a directory, not a blob prefix, +//    @Override public ImmutableMap<String, BlobMetaData> listBlobsByPrefix(String blobNamePrefix) throws IOException {, +//        PageSet<? extends StorageMetadata> list = cloudBlobStore.sync().list(cloudBlobStore.container(), ListContainerOptions.Builder.recursive().inDirectory(buildBlobPath(blobNamePrefix)));, +//        ImmutableMap.Builder<String, BlobMetaData> blobs = ImmutableMap.builder();, +//        for (StorageMetadata storageMetadata : list) {, +//            String name = storageMetadata.getName().substring(cloudPath.length() + 1);, +//            blobs.put(name, new PlainBlobMetaData(name, storageMetadata.getSize(), null));, +//        }, +//        return blobs.build();, +//    }, +        PageSet<? extends StorageMetadata> list = cloudBlobStore.sync().list(cloudBlobStore.container(), ListContainerOptions.Builder.recursive().inDirectory(cloudPath));, +            String name = storageMetadata.getName().substring(cloudPath.length() + 1);, +            blobs.put(name, new PlainBlobMetaData(name, storageMetadata.getSize(), null));, +++ b/plugins/cloud/src/main/java/org/elasticsearch/cloud/blobstore/CloudImmutableBlobContainer.java, +        Blob blob = cloudBlobStore.sync().newBlob(buildBlobPath(blobName));]