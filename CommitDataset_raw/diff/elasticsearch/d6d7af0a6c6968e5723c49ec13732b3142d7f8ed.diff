[+++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt, +, +@defaultMessage Don't use deprecated Query#setBoost, wrap the query into a BoostQuery instead, +org.apache.lucene.search.Query#setBoost(float), +++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt, +, +@defaultMessage Don't use deprecated Query#setBoost, wrap the query into a BoostQuery instead, +org.apache.lucene.search.Query#setBoost(float), +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.*;, +import java.util.Objects;, +        Query rewritten = super.rewrite(reader);, +        if (rewritten != this) {, +            return rewritten;, +        }, +        return topLevelQuery(terms, ctx, docFreqs, maxDoc);, +        return Arrays.equals(equalsTerms(), that.equalsTerms());, +        return Objects.hash(super.hashCode(), Arrays.hashCode(equalsTerms()));, +                BooleanQuery.Builder booleanQueryBuilder = new BooleanQuery.Builder();, +                booleanQueryBuilder.setDisableCoord(disableCoord);, +                    Query query = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null && boosts[i] != 1f) {, +                        query = new BoostQuery(query, boosts[i]);, +                    booleanQueryBuilder.add(query, BooleanClause.Occur.SHOULD);, +                return booleanQueryBuilder.build();, +                    Query query = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null && boosts[i] != 1f) {, +                        query = new BoostQuery(query, boosts[i]);, +                        highBuilder.add(query, BooleanClause.Occur.SHOULD);, +                        lowBuilder.add(query, BooleanClause.Occur.SHOULD);, +                DisjunctionMaxQuery disMaxQuery = new DisjunctionMaxQuery(tieBreakerMultiplier);, +                    Query query = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null && boosts[i] != 1f) {, +                        query = new BoostQuery(query, boosts[i]);, +                    disMaxQuery.add(query);, +                return disMaxQuery;, +++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt, +, +@defaultMessage Don't use deprecated Query#setBoost, wrap the query into a BoostQuery instead, +org.apache.lucene.search.Query#setBoost(float), +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.*;, +import java.util.Objects;, +        Query rewritten = super.rewrite(reader);, +        if (rewritten != this) {, +            return rewritten;, +        }, +        return topLevelQuery(terms, ctx, docFreqs, maxDoc);, +        return Arrays.equals(equalsTerms(), that.equalsTerms());, +        return Objects.hash(super.hashCode(), Arrays.hashCode(equalsTerms()));, +                BooleanQuery.Builder booleanQueryBuilder = new BooleanQuery.Builder();, +                booleanQueryBuilder.setDisableCoord(disableCoord);, +                    Query query = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null && boosts[i] != 1f) {, +                        query = new BoostQuery(query, boosts[i]);, +                    booleanQueryBuilder.add(query, BooleanClause.Occur.SHOULD);, +                return booleanQueryBuilder.build();, +                    Query query = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null && boosts[i] != 1f) {, +                        query = new BoostQuery(query, boosts[i]);, +                        highBuilder.add(query, BooleanClause.Occur.SHOULD);, +                        lowBuilder.add(query, BooleanClause.Occur.SHOULD);, +                DisjunctionMaxQuery disMaxQuery = new DisjunctionMaxQuery(tieBreakerMultiplier);, +                    Query query = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null && boosts[i] != 1f) {, +                        query = new BoostQuery(query, boosts[i]);, +                    disMaxQuery.add(query);, +                return disMaxQuery;, +++ b/core/src/main/java/org/apache/lucene/queries/MinDocQuery.java, +import java.util.Objects;, +        return Objects.hash(super.hashCode(), minDoc);, +++ b/buildSrc/src/main/resources/forbidden/core-signatures.txt, +, +@defaultMessage Don't use deprecated Query#setBoost, wrap the query into a BoostQuery instead, +org.apache.lucene.search.Query#setBoost(float), +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.*;, +import java.util.Objects;, +        Query rewritten = super.rewrite(reader);, +        if (rewritten != this) {, +            return rewritten;, +        }, +        return topLevelQuery(terms, ctx, docFreqs, maxDoc);, +        return Arrays.equals(equalsTerms(), that.equalsTerms());, +        return Objects.hash(super.hashCode(), Arrays.hashCode(equalsTerms()));, +                BooleanQuery.Builder booleanQueryBuilder = new BooleanQuery.Builder();, +                booleanQueryBuilder.setDisableCoord(disableCoord);, +                    Query query = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null && boosts[i] != 1f) {, +                        query = new BoostQuery(query, boosts[i]);, +                    booleanQueryBuilder.add(query, BooleanClause.Occur.SHOULD);, +                return booleanQueryBuilder.build();, +                    Query query = new TermQuery(terms[i], ctx[i]);, +                    if (boosts != null && boosts[i] != 1f) {, +                        query = new BoostQuery(query, boosts[i]);, +                        highBuilder.add(query, BooleanClause.Occur.SHOULD);, +                        lowBuilder.add(query, BooleanClause.Occur.SHOULD);]