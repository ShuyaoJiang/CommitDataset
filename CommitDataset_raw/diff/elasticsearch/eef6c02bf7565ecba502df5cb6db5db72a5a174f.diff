[+++ b/.idea/dictionaries/kimchy.xml, +      <w>warmup</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>warmup</w>, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/stress/NodesStressTest.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.benchmark.stress;, +, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.index.query.xcontent.XContentQueryBuilder;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.util.StopWatch;, +import org.elasticsearch.util.TimeValue;, +import org.elasticsearch.util.settings.Settings;, +import org.elasticsearch.util.xcontent.XContentFactory;, +, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.CyclicBarrier;, +import java.util.concurrent.atomic.AtomicLong;, +, +import static org.elasticsearch.client.Requests.*;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.*;, +import static org.elasticsearch.index.query.xcontent.FilterBuilders.*;, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +import static org.elasticsearch.node.NodeBuilder.*;, +import static org.elasticsearch.search.builder.SearchSourceBuilder.*;, +import static org.elasticsearch.util.settings.ImmutableSettings.Builder.*;, +import static org.elasticsearch.util.settings.ImmutableSettings.*;, +, +/**, + * @author kimchy (shay.banon), + */, +public class NodesStressTest {, +, +    private Node[] nodes;, +, +    private int numberOfNodes = 2;, +, +    private Client[] clients;, +, +    private AtomicLong idGenerator = new AtomicLong();, +, +    private int fieldNumLimit = 50;, +, +    private long searcherIterations = 10;, +    private Searcher[] searcherThreads = new Searcher[1];, +, +    private long indexIterations = 10;, +    private Indexer[] indexThreads = new Indexer[1];, +, +    private TimeValue sleepAfterDone = TimeValue.timeValueMillis(0);, +, +    private CountDownLatch latch;, +    private CyclicBarrier barrier1;, +    private CyclicBarrier barrier2;, +, +    public NodesStressTest() {, +    }, +, +    public NodesStressTest numberOfNodes(int numberOfNodes) {, +        this.numberOfNodes = numberOfNodes;, +        return this;, +    }, +, +    public NodesStressTest fieldNumLimit(int fieldNumLimit) {, +        this.fieldNumLimit = fieldNumLimit;, +        return this;, +    }, +, +    public NodesStressTest searchIterations(int searchIterations) {, +        this.searcherIterations = searchIterations;, +        return this;, +    }, +, +    public NodesStressTest searcherThreads(int numberOfSearcherThreads) {, +        searcherThreads = new Searcher[numberOfSearcherThreads];, +        return this;, +    }, +, +    public NodesStressTest indexIterations(long indexIterations) {]