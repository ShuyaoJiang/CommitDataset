[+++ b/src/test/java/org/elasticsearch/integration/MultipleIndicesPermissionsTests.java, +import org.elasticsearch.test.ShieldIntegrationTest;, +import org.elasticsearch.test.ShieldSettingsSource;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, +@ClusterScope(scope = Scope.SUITE), +    @Override, +    protected String configRoles() {, +        return ShieldSettingsSource.DEFAULT_ROLE + ":\n" +, +        return ShieldSettingsSource.CONFIG_STANDARD_USER +, +                "user_a:{plain}passwd\n" +, +                "user_ab:{plain}passwd\n";, +        return ShieldSettingsSource.CONFIG_STANDARD_USER_ROLES +, +                "role_a:user_a,user_ab\n" +, +                "role_b:user_ab\n";, +                .putHeader(BASIC_AUTH_HEADER, userHeader("user_ab", "passwd")), +                .putHeader(BASIC_AUTH_HEADER, userHeader("user_ab", "passwd")), +                .putHeader(BASIC_AUTH_HEADER, userHeader("user_ab", "passwd")), +++ b/src/test/java/org/elasticsearch/integration/MultipleIndicesPermissionsTests.java, +import org.elasticsearch.test.ShieldIntegrationTest;, +import org.elasticsearch.test.ShieldSettingsSource;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, +@ClusterScope(scope = Scope.SUITE), +    @Override, +    protected String configRoles() {, +        return ShieldSettingsSource.DEFAULT_ROLE + ":\n" +, +        return ShieldSettingsSource.CONFIG_STANDARD_USER +, +                "user_a:{plain}passwd\n" +, +                "user_ab:{plain}passwd\n";, +        return ShieldSettingsSource.CONFIG_STANDARD_USER_ROLES +, +                "role_a:user_a,user_ab\n" +, +                "role_b:user_ab\n";, +                .putHeader(BASIC_AUTH_HEADER, userHeader("user_ab", "passwd")), +                .putHeader(BASIC_AUTH_HEADER, userHeader("user_ab", "passwd")), +                .putHeader(BASIC_AUTH_HEADER, userHeader("user_ab", "passwd")), +++ b/src/test/java/org/elasticsearch/integration/PermissionPrecedenceTests.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.shield.authc.support.UsernamePasswordToken;, +import org.elasticsearch.test.ShieldIntegrationTest;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, + * internal categorization in shield), then we apply the cluster priv checks and don't, +@ClusterScope(scope = Scope.SUITE), +    @Override, +    protected String configRoles() {, +        return "admin:\n" +, +        return "admin:{plain}test123\n" +, +                "client:{plain}test123\n" +, +                "user:{plain}test123\n";, +        return "admin:admin\n" +, +                "transport_client:client\n" +, +                "user:user\n";, +    protected String nodeClientUsername() {, +    protected SecuredString nodeClientPassword() {, +        return new SecuredString("test123".toCharArray());, +    }, +, +    @Override, +    protected String transportClientUsername() {, +        return "admin";, +    }, +, +    @Override, +    protected SecuredString transportClientPassword() {, +        return new SecuredString("test123".toCharArray());, +    public void testDifferentCombinationsOfIndices() throws Exception {, +        Client client = internalCluster().transportClient();, +            .putHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, basicAuthHeaderValue(transportClientUsername(), transportClientPassword())), +                    .putHeader(UsernamePasswordToken.BASIC_AUTH_HEADER, basicAuthHeaderValue("user", transportClientPassword())), +++ b/src/test/java/org/elasticsearch/integration/MultipleIndicesPermissionsTests.java, +import org.elasticsearch.test.ShieldIntegrationTest;, +import org.elasticsearch.test.ShieldSettingsSource;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, +@ClusterScope(scope = Scope.SUITE), +    @Override, +    protected String configRoles() {, +        return ShieldSettingsSource.DEFAULT_ROLE + ":\n" +, +        return ShieldSettingsSource.CONFIG_STANDARD_USER +, +                "user_a:{plain}passwd\n" +, +                "user_ab:{plain}passwd\n";, +        return ShieldSettingsSource.CONFIG_STANDARD_USER_ROLES +, +                "role_a:user_a,user_ab\n" +, +                "role_b:user_ab\n";, +                .putHeader(BASIC_AUTH_HEADER, userHeader("user_ab", "passwd")), +                .putHeader(BASIC_AUTH_HEADER, userHeader("user_ab", "passwd")), +                .putHeader(BASIC_AUTH_HEADER, userHeader("user_ab", "passwd")), +++ b/src/test/java/org/elasticsearch/integration/PermissionPrecedenceTests.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.shield.authc.support.UsernamePasswordToken;, +import org.elasticsearch.test.ShieldIntegrationTest;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, + * internal categorization in shield), then we apply the cluster priv checks and don't, +@ClusterScope(scope = Scope.SUITE), +    @Override, +    protected String configRoles() {, +        return "admin:\n" +, +        return "admin:{plain}test123\n" +]