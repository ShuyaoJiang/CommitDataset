[+++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +                        } else if ("request_cache".equals(entry.getKey()) || "requestCache".equals(entry.getKey())) {, +                            searchRequest.requestCache(nodeBooleanValue(value));, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +                        } else if ("request_cache".equals(entry.getKey()) || "requestCache".equals(entry.getKey())) {, +                            searchRequest.requestCache(nodeBooleanValue(value));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * Sets if this request should use the request cache or not, assuming that it can (for, +     * will default to the index level setting if request cache is enabled or not)., +    public SearchRequest requestCache(Boolean requestCache) {, +        this.requestCache = requestCache;, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +                        } else if ("request_cache".equals(entry.getKey()) || "requestCache".equals(entry.getKey())) {, +                            searchRequest.requestCache(nodeBooleanValue(value));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * Sets if this request should use the request cache or not, assuming that it can (for, +     * will default to the index level setting if request cache is enabled or not)., +    public SearchRequest requestCache(Boolean requestCache) {, +        this.requestCache = requestCache;, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Sets if this request should use the request cache or not, assuming that it can (for, +     * will default to the index level setting if request cache is enabled or not)., +    public SearchRequestBuilder setRequestCache(Boolean requestCache) {, +        request.requestCache(requestCache);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +                        } else if ("request_cache".equals(entry.getKey()) || "requestCache".equals(entry.getKey())) {, +                            searchRequest.requestCache(nodeBooleanValue(value));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * Sets if this request should use the request cache or not, assuming that it can (for, +     * will default to the index level setting if request cache is enabled or not)., +    public SearchRequest requestCache(Boolean requestCache) {, +        this.requestCache = requestCache;, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Sets if this request should use the request cache or not, assuming that it can (for, +     * will default to the index level setting if request cache is enabled or not)., +    public SearchRequestBuilder setRequestCache(Boolean requestCache) {, +        request.requestCache(requestCache);, +++ b/core/src/main/java/org/elasticsearch/index/cache/request/RequestCacheStats.java, +        builder.startObject(Fields.REQUEST_CACHE_STATS);, +        static final XContentBuilderString REQUEST_CACHE_STATS = new XContentBuilderString("request_cache");, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +                        } else if ("request_cache".equals(entry.getKey()) || "requestCache".equals(entry.getKey())) {, +                            searchRequest.requestCache(nodeBooleanValue(value));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * Sets if this request should use the request cache or not, assuming that it can (for, +     * will default to the index level setting if request cache is enabled or not)., +    public SearchRequest requestCache(Boolean requestCache) {, +        this.requestCache = requestCache;, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Sets if this request should use the request cache or not, assuming that it can (for, +     * will default to the index level setting if request cache is enabled or not)., +    public SearchRequestBuilder setRequestCache(Boolean requestCache) {, +        request.requestCache(requestCache);, +++ b/core/src/main/java/org/elasticsearch/index/cache/request/RequestCacheStats.java, +        builder.startObject(Fields.REQUEST_CACHE_STATS);, +        static final XContentBuilderString REQUEST_CACHE_STATS = new XContentBuilderString("request_cache");, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/warmer/put/RestPutWarmerAction.java, +                .requestCache(request.paramAsBoolean("request_cache", null)), +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +                        } else if ("request_cache".equals(entry.getKey()) || "requestCache".equals(entry.getKey())) {, +                            searchRequest.requestCache(nodeBooleanValue(value));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * Sets if this request should use the request cache or not, assuming that it can (for, +     * will default to the index level setting if request cache is enabled or not)., +    public SearchRequest requestCache(Boolean requestCache) {, +        this.requestCache = requestCache;, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Sets if this request should use the request cache or not, assuming that it can (for, +     * will default to the index level setting if request cache is enabled or not)., +    public SearchRequestBuilder setRequestCache(Boolean requestCache) {, +        request.requestCache(requestCache);, +++ b/core/src/main/java/org/elasticsearch/index/cache/request/RequestCacheStats.java, +        builder.startObject(Fields.REQUEST_CACHE_STATS);, +        static final XContentBuilderString REQUEST_CACHE_STATS = new XContentBuilderString("request_cache");, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/warmer/put/RestPutWarmerAction.java, +                .requestCache(request.paramAsBoolean("request_cache", null)), +++ b/core/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java, +        searchRequest.requestCache(request.paramAsBoolean("request_cache", null));, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +                        } else if ("request_cache".equals(entry.getKey()) || "requestCache".equals(entry.getKey())) {, +                            searchRequest.requestCache(nodeBooleanValue(value));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * Sets if this request should use the request cache or not, assuming that it can (for, +     * will default to the index level setting if request cache is enabled or not)., +    public SearchRequest requestCache(Boolean requestCache) {, +        this.requestCache = requestCache;, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Sets if this request should use the request cache or not, assuming that it can (for, +     * will default to the index level setting if request cache is enabled or not)., +    public SearchRequestBuilder setRequestCache(Boolean requestCache) {, +        request.requestCache(requestCache);, +++ b/core/src/main/java/org/elasticsearch/index/cache/request/RequestCacheStats.java, +        builder.startObject(Fields.REQUEST_CACHE_STATS);, +        static final XContentBuilderString REQUEST_CACHE_STATS = new XContentBuilderString("request_cache");, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/warmer/put/RestPutWarmerAction.java, +                .requestCache(request.paramAsBoolean("request_cache", null)), +++ b/core/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java, +        searchRequest.requestCache(request.paramAsBoolean("request_cache", null));, +++ b/core/src/main/java/org/elasticsearch/search/warmer/IndexWarmersMetaData.java, +                        if ("requestCache".equals(currentFieldName) || "request_cache".equals(currentFieldName)) {]