[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Validates that all settings are registered and valid., +     *, +     * @param validateDependencies true if dependent settings should be validated, +    public final void validate(final Settings settings, final boolean validateDependencies) {, +        validate(settings, validateDependencies, false, false);, +    }, +, +    /**, +     * Validates that all settings are registered and valid., +     *, +     * @param settings               the settings, +     * @param validateDependencies   true if dependent settings should be validated, +     * @param ignorePrivateSettings  true if private settings should be ignored during validation, +     * @param ignoreArchivedSettings true if archived settings should be ignored during validation, +     * @see Setting#getSettingsDependencies(String), +     */, +    public final void validate(, +            final Settings settings,, +            final boolean validateDependencies,, +            final boolean ignorePrivateSettings,, +            final boolean ignoreArchivedSettings) {, +        final List<RuntimeException> exceptions = new ArrayList<>();, +        for (final String key : settings.keySet()) { // settings iterate in deterministic fashion, +            if (isPrivateSetting(key) && ignorePrivateSettings) {, +                continue;, +            }, +            if (key.startsWith(ARCHIVED_SETTINGS_PREFIX) && ignoreArchivedSettings) {, +                continue;, +            }, +            } catch (final RuntimeException ex) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Validates that all settings are registered and valid., +     *, +     * @param validateDependencies true if dependent settings should be validated, +    public final void validate(final Settings settings, final boolean validateDependencies) {, +        validate(settings, validateDependencies, false, false);, +    }, +, +    /**, +     * Validates that all settings are registered and valid., +     *, +     * @param settings               the settings, +     * @param validateDependencies   true if dependent settings should be validated, +     * @param ignorePrivateSettings  true if private settings should be ignored during validation, +     * @param ignoreArchivedSettings true if archived settings should be ignored during validation, +     * @see Setting#getSettingsDependencies(String), +     */, +    public final void validate(, +            final Settings settings,, +            final boolean validateDependencies,, +            final boolean ignorePrivateSettings,, +            final boolean ignoreArchivedSettings) {, +        final List<RuntimeException> exceptions = new ArrayList<>();, +        for (final String key : settings.keySet()) { // settings iterate in deterministic fashion, +            if (isPrivateSetting(key) && ignorePrivateSettings) {, +                continue;, +            }, +            if (key.startsWith(ARCHIVED_SETTINGS_PREFIX) && ignoreArchivedSettings) {, +                continue;, +            }, +            } catch (final RuntimeException ex) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +    public static final IndexScopedSettings DEFAULT_SCOPED_SETTINGS = new IndexScopedSettings(Settings.EMPTY, BUILT_IN_INDEX_SETTINGS);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Validates that all settings are registered and valid., +     *, +     * @param validateDependencies true if dependent settings should be validated, +    public final void validate(final Settings settings, final boolean validateDependencies) {, +        validate(settings, validateDependencies, false, false);, +    }, +, +    /**, +     * Validates that all settings are registered and valid., +     *, +     * @param settings               the settings, +     * @param validateDependencies   true if dependent settings should be validated, +     * @param ignorePrivateSettings  true if private settings should be ignored during validation, +     * @param ignoreArchivedSettings true if archived settings should be ignored during validation, +     * @see Setting#getSettingsDependencies(String), +     */, +    public final void validate(, +            final Settings settings,, +            final boolean validateDependencies,, +            final boolean ignorePrivateSettings,, +            final boolean ignoreArchivedSettings) {, +        final List<RuntimeException> exceptions = new ArrayList<>();, +        for (final String key : settings.keySet()) { // settings iterate in deterministic fashion, +            if (isPrivateSetting(key) && ignorePrivateSettings) {, +                continue;, +            }, +            if (key.startsWith(ARCHIVED_SETTINGS_PREFIX) && ignoreArchivedSettings) {, +                continue;, +            }, +            } catch (final RuntimeException ex) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java]