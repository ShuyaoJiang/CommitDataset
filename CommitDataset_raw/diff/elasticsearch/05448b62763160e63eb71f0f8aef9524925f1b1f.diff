[+++ b/docs/reference/index-modules/fielddata.asciidoc, +`doc_values`::, +    Computes and stores field data data-structures on disk at indexing time., +, +++ b/docs/reference/index-modules/fielddata.asciidoc, +`doc_values`::, +    Computes and stores field data data-structures on disk at indexing time., +, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                .put("geo_point", new GeoPointBinaryDVIndexFieldData.Builder()), +                .put(Tuple.tuple("geo_point", DOC_VALUES_FORMAT), new GeoPointBinaryDVIndexFieldData.Builder()), +++ b/docs/reference/index-modules/fielddata.asciidoc, +`doc_values`::, +    Computes and stores field data data-structures on disk at indexing time., +, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                .put("geo_point", new GeoPointBinaryDVIndexFieldData.Builder()), +                .put(Tuple.tuple("geo_point", DOC_VALUES_FORMAT), new GeoPointBinaryDVIndexFieldData.Builder()), +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/GeoPointBinaryDVAtomicFieldData.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.fielddata.plain;, +, +import org.apache.lucene.index.AtomicReader;, +import org.apache.lucene.index.BinaryDocValues;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.common.geo.GeoPoint;, +import org.elasticsearch.common.util.ByteUtils;, +import org.elasticsearch.index.fielddata.AtomicGeoPointFieldData;, +import org.elasticsearch.index.fielddata.GeoPointValues;, +import org.elasticsearch.index.fielddata.ScriptDocValues;, +, +final class GeoPointBinaryDVAtomicFieldData extends AtomicGeoPointFieldData<ScriptDocValues> {, +, +    private final AtomicReader reader;, +    private final BinaryDocValues values;, +, +    GeoPointBinaryDVAtomicFieldData(AtomicReader reader, BinaryDocValues values) {, +        super();, +        this.reader = reader;, +        this.values = values == null ? BinaryDocValues.EMPTY : values;, +    }, +, +    @Override, +    public boolean isMultiValued() {, +        return false;, +    }, +, +    @Override, +    public boolean isValuesOrdered() {, +        return false;, +    }, +, +    @Override, +    public int getNumDocs() {, +        return reader.maxDoc();, +    }, +, +    @Override, +    public long getNumberUniqueValues() {, +        return Long.MAX_VALUE;, +    }, +, +    @Override, +    public long getMemorySizeInBytes() {, +        return -1; // not exposed by Lucene, +    }, +, +    @Override, +    public ScriptDocValues getScriptValues() {, +        return new ScriptDocValues.GeoPoints(getGeoPointValues());, +    }, +, +    @Override, +    public void close() {, +        // no-op, +    }, +, +    @Override, +    public GeoPointValues getGeoPointValues() {, +        return new GeoPointValues(true) {, +, +            final BytesRef bytes = new BytesRef();]