[+++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java, +import org.apache.lucene.index.IndexFileNames;, +import java.util.*;, +        Set<File> files = new TreeSet<>(); // treeset makes sure iteration order is deterministic, +            files.addAll(Arrays.asList(file.listFiles(new FileFilter() {, +                    return pathname.isFile() && !"write.lock".equals(pathname.getName());, +            })));, +        }, +        pruneOldDeleteGenerations(files);, +        File fileToCorrupt = null;, +        if (!files.isEmpty()) {, +            try (Directory dir = FSDirectory.open(fileToCorrupt.getParentFile())) {, +    /**, +     * prunes the list of index files such that only the latest del generation files are contained., +     */, +    private void pruneOldDeleteGenerations(Set<File> files) {, +        final TreeSet<File> delFiles = new TreeSet<>();, +        for (File file : files) {, +            if (file.getName().endsWith(".del")) {, +                delFiles.add(file);, +            }, +        }, +        File last = null;, +        for (File current : delFiles) {, +            if (last != null) {, +                final String newSegmentName = IndexFileNames.parseSegmentName(current.getName());, +                final String oldSegmentName = IndexFileNames.parseSegmentName(last.getName());, +                if (newSegmentName.equals(oldSegmentName)) {, +                    int oldGen = Integer.parseInt(IndexFileNames.stripExtension(IndexFileNames.stripSegmentName(last.getName())).replace("_", ""), Character.MAX_RADIX);, +                    int newGen = Integer.parseInt(IndexFileNames.stripExtension(IndexFileNames.stripSegmentName(current.getName())).replace("_", ""), Character.MAX_RADIX);, +                    if (newGen > oldGen) {, +                        files.remove(last);, +                    } else {, +                        files.remove(current);, +                        continue;, +                    }, +                }, +            }, +            last = current;, +        }, +    }, +]