[+++ b/build.gradle, +      languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava, +++ b/build.gradle, +      languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +    static final JavaVersion minimumJava = JavaVersion.VERSION_1_8, +, +        globalBuildInfo(project), +        configureRepositories(project), +            if (JavaVersion.current() < minimumJava) {, +                throw new GradleException("Java ${minimumJava} or above is required to build Elasticsearch"), +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava, +++ b/build.gradle, +      languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +    static final JavaVersion minimumJava = JavaVersion.VERSION_1_8, +, +        globalBuildInfo(project), +        configureRepositories(project), +            if (JavaVersion.current() < minimumJava) {, +                throw new GradleException("Java ${minimumJava} or above is required to build Elasticsearch"), +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java, +++ b/build.gradle, +      languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +    static final JavaVersion minimumJava = JavaVersion.VERSION_1_8, +, +        globalBuildInfo(project), +        configureRepositories(project), +            if (JavaVersion.current() < minimumJava) {, +                throw new GradleException("Java ${minimumJava} or above is required to build Elasticsearch"), +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java, +++ b/core/src/test/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeActionTests.java, +        final TransportService transportService = new TransportService(transport, THREAD_POOL);, +                new ActionFilters(new HashSet<>()),, +                .addGlobalBlock(new ClusterBlock(1, "test-block", false, true, RestStatus.SERVICE_UNAVAILABLE, ClusterBlockLevel.ALL));, +            assertEquals("blocked by: [SERVICE_UNAVAILABLE/1/test-block];", expected.getMessage());, +            assertEquals("blocked by: [SERVICE_UNAVAILABLE/1/test-block];", expected.getMessage());, +            if (!shard.currentNodeId().equals(masterNode.id())) {, +                map.put(shard.currentNodeId(), new ArrayList<>());, +++ b/build.gradle, +      languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +    static final JavaVersion minimumJava = JavaVersion.VERSION_1_8, +, +        globalBuildInfo(project), +        configureRepositories(project), +            if (JavaVersion.current() < minimumJava) {, +                throw new GradleException("Java ${minimumJava} or above is required to build Elasticsearch"), +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java, +++ b/core/src/test/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeActionTests.java, +        final TransportService transportService = new TransportService(transport, THREAD_POOL);, +                new ActionFilters(new HashSet<>()),, +                .addGlobalBlock(new ClusterBlock(1, "test-block", false, true, RestStatus.SERVICE_UNAVAILABLE, ClusterBlockLevel.ALL));, +            assertEquals("blocked by: [SERVICE_UNAVAILABLE/1/test-block];", expected.getMessage());, +            assertEquals("blocked by: [SERVICE_UNAVAILABLE/1/test-block];", expected.getMessage());, +            if (!shard.currentNodeId().equals(masterNode.id())) {, +                map.put(shard.currentNodeId(), new ArrayList<>());, +++ b/core/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, +++ b/build.gradle, +      languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +    static final JavaVersion minimumJava = JavaVersion.VERSION_1_8, +, +        globalBuildInfo(project), +        configureRepositories(project), +            if (JavaVersion.current() < minimumJava) {, +                throw new GradleException("Java ${minimumJava} or above is required to build Elasticsearch"), +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java, +++ b/core/src/test/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeActionTests.java, +        final TransportService transportService = new TransportService(transport, THREAD_POOL);, +                new ActionFilters(new HashSet<>()),, +                .addGlobalBlock(new ClusterBlock(1, "test-block", false, true, RestStatus.SERVICE_UNAVAILABLE, ClusterBlockLevel.ALL));, +            assertEquals("blocked by: [SERVICE_UNAVAILABLE/1/test-block];", expected.getMessage());, +            assertEquals("blocked by: [SERVICE_UNAVAILABLE/1/test-block];", expected.getMessage());, +            if (!shard.currentNodeId().equals(masterNode.id())) {, +                map.put(shard.currentNodeId(), new ArrayList<>());, +++ b/core/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterInfoServiceIT.java, +            mockTransportService.addDelegate(internalTestCluster.getInstance(TransportService.class, node.getName()), new MockTransportService.DelegateTransport(mockTransportService.original()) {, +++ b/build.gradle, +      languageLevel = org.elasticsearch.gradle.BuildPlugin.minimumJava, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +    static final JavaVersion minimumJava = JavaVersion.VERSION_1_8, +, +        globalBuildInfo(project), +        configureRepositories(project), +            if (JavaVersion.current() < minimumJava) {, +                throw new GradleException("Java ${minimumJava} or above is required to build Elasticsearch"), +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava]