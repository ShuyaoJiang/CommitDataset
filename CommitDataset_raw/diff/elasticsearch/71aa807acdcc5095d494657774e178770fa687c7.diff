[+++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +            return MultiMatchQuery.blendTerm(context, term.bytes(), commonTermsCutoff, tieBreaker, blendedFields);, +    static Query blendTerm(QueryShardContext context, BytesRef value, Float commonTermsCutoff, float tieBreaker,, +            FieldAndFieldType... blendedFields) {, +                query = ft.fieldType.termQuery(value, context);, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +            return MultiMatchQuery.blendTerm(context, term.bytes(), commonTermsCutoff, tieBreaker, blendedFields);, +    static Query blendTerm(QueryShardContext context, BytesRef value, Float commonTermsCutoff, float tieBreaker,, +            FieldAndFieldType... blendedFields) {, +                query = ft.fieldType.termQuery(value, context);, +++ b/core/src/test/java/org/elasticsearch/index/search/MultiMatchQueryTests.java, +        Query actual = MultiMatchQuery.blendTerm(indexService.newQueryShardContext(), new BytesRef("baz"), null, 1f,, +                new FieldAndFieldType(ft1, 2), new FieldAndFieldType(ft2, 3));, +        Query actual = MultiMatchQuery.blendTerm(indexService.newQueryShardContext(), new BytesRef("baz"), null, 1f,, +                new FieldAndFieldType(ft1, 2), new FieldAndFieldType(ft2, 3));, +        Query actual = MultiMatchQuery.blendTerm(indexService.newQueryShardContext(), new BytesRef("baz"), null, 1f,, +                new FieldAndFieldType(ft1, 2), new FieldAndFieldType(ft2, 3));, +        Query actual = MultiMatchQuery.blendTerm(indexService.newQueryShardContext(), new BytesRef("baz"), null, 1f,, +                new FieldAndFieldType(ft1, 2), new FieldAndFieldType(ft2, 3));, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +            return MultiMatchQuery.blendTerm(context, term.bytes(), commonTermsCutoff, tieBreaker, blendedFields);, +    static Query blendTerm(QueryShardContext context, BytesRef value, Float commonTermsCutoff, float tieBreaker,, +            FieldAndFieldType... blendedFields) {, +                query = ft.fieldType.termQuery(value, context);, +++ b/core/src/test/java/org/elasticsearch/index/search/MultiMatchQueryTests.java, +        Query actual = MultiMatchQuery.blendTerm(indexService.newQueryShardContext(), new BytesRef("baz"), null, 1f,, +                new FieldAndFieldType(ft1, 2), new FieldAndFieldType(ft2, 3));, +        Query actual = MultiMatchQuery.blendTerm(indexService.newQueryShardContext(), new BytesRef("baz"), null, 1f,, +                new FieldAndFieldType(ft1, 2), new FieldAndFieldType(ft2, 3));, +        Query actual = MultiMatchQuery.blendTerm(indexService.newQueryShardContext(), new BytesRef("baz"), null, 1f,, +                new FieldAndFieldType(ft1, 2), new FieldAndFieldType(ft2, 3));, +        Query actual = MultiMatchQuery.blendTerm(indexService.newQueryShardContext(), new BytesRef("baz"), null, 1f,, +                new FieldAndFieldType(ft1, 2), new FieldAndFieldType(ft2, 3));, +++ b/core/src/test/java/org/elasticsearch/search/query/MultiMatchQueryIT.java, +, +        builders.add(client().prepareIndex("test", "test", "nowHero").setSource(, +                "full_name", "now sort of",, +                "first_name", "now",, +                "last_name", "",, +                "category", "marvel hero",, +                "skill", 1));, +                .startObject("date"), +                .field("type", "date"), +                .endObject(), +, +, +        // Check that cross fields works with date fields, +        searchResponse = client().prepareSearch("test"), +                .setQuery(randomizeType(multiMatchQuery("now", "f*", "date"), +                        .type(MultiMatchQueryBuilder.Type.CROSS_FIELDS)).lenient(true)), +                .get();, +        assertHitCount(searchResponse, 1L);, +        assertFirstHit(searchResponse, hasId("nowHero"));]