[+++ b/core/src/main/java/org/elasticsearch/index/seqno/LocalCheckpointTracker.java, +     * Resets the checkpoint to the specified value., +     *, +     * @param checkpoint the local checkpoint to reset this tracker to, +     */, +    synchronized void resetCheckpoint(final long checkpoint) {, +        assert checkpoint != SequenceNumbersService.UNASSIGNED_SEQ_NO;, +        assert checkpoint <= this.checkpoint;, +        processedSeqNo.clear();, +        firstProcessedSeqNo = checkpoint + 1;, +        this.checkpoint = checkpoint;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/seqno/LocalCheckpointTracker.java, +     * Resets the checkpoint to the specified value., +     *, +     * @param checkpoint the local checkpoint to reset this tracker to, +     */, +    synchronized void resetCheckpoint(final long checkpoint) {, +        assert checkpoint != SequenceNumbersService.UNASSIGNED_SEQ_NO;, +        assert checkpoint <= this.checkpoint;, +        processedSeqNo.clear();, +        firstProcessedSeqNo = checkpoint + 1;, +        this.checkpoint = checkpoint;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/seqno/SequenceNumbersService.java, +     * Resets the local checkpoint to the specified value., +     *, +     * @param localCheckpoint the local checkpoint to reset to, +     */, +    public void resetLocalCheckpoint(final long localCheckpoint) {, +        localCheckpointTracker.resetCheckpoint(localCheckpoint);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/seqno/LocalCheckpointTracker.java, +     * Resets the checkpoint to the specified value., +     *, +     * @param checkpoint the local checkpoint to reset this tracker to, +     */, +    synchronized void resetCheckpoint(final long checkpoint) {, +        assert checkpoint != SequenceNumbersService.UNASSIGNED_SEQ_NO;, +        assert checkpoint <= this.checkpoint;, +        processedSeqNo.clear();, +        firstProcessedSeqNo = checkpoint + 1;, +        this.checkpoint = checkpoint;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/seqno/SequenceNumbersService.java, +     * Resets the local checkpoint to the specified value., +     *, +     * @param localCheckpoint the local checkpoint to reset to, +     */, +    public void resetLocalCheckpoint(final long localCheckpoint) {, +        localCheckpointTracker.resetCheckpoint(localCheckpoint);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +                            final long currentGlobalCheckpoint = getGlobalCheckpoint();, +                            final long localCheckpoint;, +                            if (currentGlobalCheckpoint == SequenceNumbersService.UNASSIGNED_SEQ_NO) {, +                                localCheckpoint = SequenceNumbersService.NO_OPS_PERFORMED;, +                            } else {, +                                localCheckpoint = currentGlobalCheckpoint;, +                            }, +                            logger.trace(, +                                    "detected new primary with primary term [{}], resetting local checkpoint from [{}] to [{}]",, +                                    operationPrimaryTerm,, +                                    getLocalCheckpoint(),, +                                    localCheckpoint);, +                            getEngine().seqNoService().resetLocalCheckpoint(localCheckpoint);, +++ b/core/src/main/java/org/elasticsearch/index/seqno/LocalCheckpointTracker.java, +     * Resets the checkpoint to the specified value., +     *, +     * @param checkpoint the local checkpoint to reset this tracker to, +     */, +    synchronized void resetCheckpoint(final long checkpoint) {, +        assert checkpoint != SequenceNumbersService.UNASSIGNED_SEQ_NO;, +        assert checkpoint <= this.checkpoint;, +        processedSeqNo.clear();, +        firstProcessedSeqNo = checkpoint + 1;, +        this.checkpoint = checkpoint;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/seqno/SequenceNumbersService.java, +     * Resets the local checkpoint to the specified value., +     *, +     * @param localCheckpoint the local checkpoint to reset to, +     */, +    public void resetLocalCheckpoint(final long localCheckpoint) {, +        localCheckpointTracker.resetCheckpoint(localCheckpoint);, +    }, +, +    /**]