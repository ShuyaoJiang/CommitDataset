[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java, +    void accessGranted(User user, String action, TransportMessage message, String[] roleNames);, +    void accessDenied(User user, String action, TransportMessage message, String[] roleNames);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java, +    void accessGranted(User user, String action, TransportMessage message, String[] roleNames);, +    void accessDenied(User user, String action, TransportMessage message, String[] roleNames);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java, +    public void accessGranted(User user, String action, TransportMessage message, String[] roleNames) {, +                auditTrail.accessGranted(user, action, message, roleNames);, +    public void accessDenied(User user, String action, TransportMessage message, String[] roleNames) {, +                auditTrail.accessDenied(user, action, message, roleNames);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java, +    void accessGranted(User user, String action, TransportMessage message, String[] roleNames);, +    void accessDenied(User user, String action, TransportMessage message, String[] roleNames);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java, +    public void accessGranted(User user, String action, TransportMessage message, String[] roleNames) {, +                auditTrail.accessGranted(user, action, message, roleNames);, +    public void accessDenied(User user, String action, TransportMessage message, String[] roleNames) {, +                auditTrail.accessDenied(user, action, message, roleNames);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/index/IndexAuditTrail.java, +    public void accessGranted(User user, String action, TransportMessage message, String[] roleNames) {, +                enqueue(message("access_granted", action, user, roleNames, null, indices(message), message), "access_granted");, +    public void accessDenied(User user, String action, TransportMessage message, String[] roleNames) {, +                enqueue(message("access_denied", action, user, roleNames, null, indices(message), message), "access_denied");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java, +    void accessGranted(User user, String action, TransportMessage message, String[] roleNames);, +    void accessDenied(User user, String action, TransportMessage message, String[] roleNames);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java, +    public void accessGranted(User user, String action, TransportMessage message, String[] roleNames) {, +                auditTrail.accessGranted(user, action, message, roleNames);, +    public void accessDenied(User user, String action, TransportMessage message, String[] roleNames) {, +                auditTrail.accessDenied(user, action, message, roleNames);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/index/IndexAuditTrail.java, +    public void accessGranted(User user, String action, TransportMessage message, String[] roleNames) {, +                enqueue(message("access_granted", action, user, roleNames, null, indices(message), message), "access_granted");, +    public void accessDenied(User user, String action, TransportMessage message, String[] roleNames) {, +                enqueue(message("access_denied", action, user, roleNames, null, indices(message), message), "access_denied");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/logfile/LoggingAuditTrail.java, +    public void accessGranted(User user, String action, TransportMessage message, String[] roleNames) {, +            String indices = indicesString(message);, +    public void accessDenied(User user, String action, TransportMessage message, String[] roleNames) {, +            String indices = indicesString(message);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java, +    void accessGranted(User user, String action, TransportMessage message, String[] roleNames);, +    void accessDenied(User user, String action, TransportMessage message, String[] roleNames);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java, +    public void accessGranted(User user, String action, TransportMessage message, String[] roleNames) {, +                auditTrail.accessGranted(user, action, message, roleNames);, +    public void accessDenied(User user, String action, TransportMessage message, String[] roleNames) {, +                auditTrail.accessDenied(user, action, message, roleNames);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/index/IndexAuditTrail.java, +    public void accessGranted(User user, String action, TransportMessage message, String[] roleNames) {, +                enqueue(message("access_granted", action, user, roleNames, null, indices(message), message), "access_granted");, +    public void accessDenied(User user, String action, TransportMessage message, String[] roleNames) {, +                enqueue(message("access_denied", action, user, roleNames, null, indices(message), message), "access_denied");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/logfile/LoggingAuditTrail.java, +    public void accessGranted(User user, String action, TransportMessage message, String[] roleNames) {, +            String indices = indicesString(message);, +    public void accessDenied(User user, String action, TransportMessage message, String[] roleNames) {, +            String indices = indicesString(message);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java, +                grant(authentication, action, request, new String[] { SystemUser.ROLE_NAME });, +            throw denial(authentication, action, request, new String[] { SystemUser.ROLE_NAME });, +                grant(authentication, action, request, permission.names());, +            throw denial(authentication, action, request, permission.names());, +            throw denial(authentication, action, request, permission.names());, +                grant(authentication, action, request, permission.names());, +            throw denial(authentication, action, request, permission.names());, +                grant(authentication, action, request, permission.names());, +            throw denial(authentication, action, request, permission.names());, +                grant(authentication, action, request, permission.names());, +                throw denial(authentication, action, request, permission.names());, +                    throw denial(authentication, action, request, permission.names());, +                    grant(authentication, action, request, permission.names());, +                throw denial(authentication, action, request, permission.names());, +            throw denial(authentication, action, request, permission.names());, +        final ResolvedIndices resolvedIndices = resolveIndexNames(authentication, action, request,, +            throw denial(authentication, action, request, permission.names());, +            grant(authentication, action, request, permission.names());, +            throw denial(authentication, action, request, permission.names());, +            throw denial(authentication, action, request, permission.names());, +                    throw denial(authentication, "indices:admin/aliases", request, permission.names());, +        grant(authentication, action, originalRequest, permission.names());, +     * {@link #denial(Authentication, String, TransportRequest, String[]) access, +                item.abort(resolvedIndex, denial(authentication, itemAction, request, permission.names()));, +    private ResolvedIndices resolveIndexNames(Authentication authentication, String action, TransportRequest request,, +                                              MetaData metaData, AuthorizedIndices authorizedIndices, Role permission) {, +            return indicesAndAliasesResolver.resolve(request, metaData, authorizedIndices);, +            auditTrail.accessDenied(authentication.getUser(), action, request, permission.names());, +    ElasticsearchSecurityException denial(Authentication authentication, String action, TransportRequest request, String[] roleNames) {, +        auditTrail.accessDenied(authentication.getUser(), action, request, roleNames);, +    private void grant(Authentication authentication, String action, TransportRequest request, String[] roleNames) {, +        auditTrail.accessGranted(authentication.getUser(), action, request, roleNames);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrail.java, +    void accessGranted(User user, String action, TransportMessage message, String[] roleNames);, +    void accessDenied(User user, String action, TransportMessage message, String[] roleNames);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/AuditTrailService.java, +    public void accessGranted(User user, String action, TransportMessage message, String[] roleNames) {, +                auditTrail.accessGranted(user, action, message, roleNames);, +    public void accessDenied(User user, String action, TransportMessage message, String[] roleNames) {]