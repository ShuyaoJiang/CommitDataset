[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.GetWatchRequest;, +import org.elasticsearch.client.watcher.GetWatchResponse;, +     * Gets a watch from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public GetWatchResponse getWatch(GetWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::getWatch, options,, +            GetWatchResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously gets a watch into the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void getWatchAsync(GetWatchRequest request, RequestOptions options,, +                              ActionListener<GetWatchResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::getWatch, options,, +            GetWatchResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.GetWatchRequest;, +import org.elasticsearch.client.watcher.GetWatchResponse;, +     * Gets a watch from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public GetWatchResponse getWatch(GetWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::getWatch, options,, +            GetWatchResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously gets a watch into the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void getWatchAsync(GetWatchRequest request, RequestOptions options,, +                              ActionListener<GetWatchResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::getWatch, options,, +            GetWatchResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +import org.elasticsearch.client.watcher.DeleteWatchRequest;, +import org.elasticsearch.client.watcher.GetWatchRequest;, +import org.elasticsearch.client.watcher.PutWatchRequest;, +, +    static Request getWatch(GetWatchRequest getWatchRequest) {, +        String endpoint = new RequestConverters.EndpointBuilder(), +            .addPathPartAsIs("_xpack", "watcher", "watch"), +            .addPathPart(getWatchRequest.getId()), +            .build();, +, +        return new Request(HttpGet.METHOD_NAME, endpoint);, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.GetWatchRequest;, +import org.elasticsearch.client.watcher.GetWatchResponse;, +     * Gets a watch from the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public GetWatchResponse getWatch(GetWatchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::getWatch, options,, +            GetWatchResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously gets a watch into the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */]