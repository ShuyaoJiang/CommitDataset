[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +            double evaluationResult = response.getMetricScore();   // <1>, +            double qualityLevel = evalQuality.metricScore();        // <3>, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +            double evaluationResult = response.getMetricScore();   // <1>, +            double qualityLevel = evalQuality.metricScore();        // <3>, +++ b/docs/reference/search/rank-eval.asciidoc, +        "metric_score": 0.4, <1>, +                "metric_score": 0.6, <3>, +<3> the `metric_score` in the `details` section shows the contribution of this query to the global quality metric score, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +            double evaluationResult = response.getMetricScore();   // <1>, +            double qualityLevel = evalQuality.metricScore();        // <3>, +++ b/docs/reference/search/rank-eval.asciidoc, +        "metric_score": 0.4, <1>, +                "metric_score": 0.6, <3>, +<3> the `metric_score` in the `details` section shows the contribution of this query to the global quality metric score, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +            List<Integer> allRatings = ratedDocs.stream().mapToInt(RatedDocument::getRating).boxed(), +                    .collect(Collectors.toList());, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +            double evaluationResult = response.getMetricScore();   // <1>, +            double qualityLevel = evalQuality.metricScore();        // <3>, +++ b/docs/reference/search/rank-eval.asciidoc, +        "metric_score": 0.4, <1>, +                "metric_score": 0.6, <3>, +<3> the `metric_score` in the `details` section shows the contribution of this query to the global quality metric score, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +            List<Integer> allRatings = ratedDocs.stream().mapToInt(RatedDocument::getRating).boxed(), +                    .collect(Collectors.toList());, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +    private final double metricScore;, +    public EvalQueryQuality(String id, double metricScore) {, +        this.metricScore = metricScore;, +        this.metricScore = in.readDouble();, +        this.metricScore = builder.evaluationResult;, +        out.writeDouble(metricScore);, +    public double metricScore() {, +        return metricScore;, +        builder.field(METRIC_SCORE_FIELD.getPreferredName(), this.metricScore);, +    static final ParseField METRIC_SCORE_FIELD = new ParseField("metric_score");, +        PARSER.declareDouble((obj, value) -> obj.evaluationResult = value, METRIC_SCORE_FIELD);, +                Objects.equals(metricScore, other.metricScore) &&, +        return Objects.hash(queryId, metricScore, ratedHits, optionalMetricDetails);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +            double evaluationResult = response.getMetricScore();   // <1>, +            double qualityLevel = evalQuality.metricScore();        // <3>, +++ b/docs/reference/search/rank-eval.asciidoc, +        "metric_score": 0.4, <1>, +                "metric_score": 0.6, <3>, +<3> the `metric_score` in the `details` section shows the contribution of this query to the global quality metric score, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +            List<Integer> allRatings = ratedDocs.stream().mapToInt(RatedDocument::getRating).boxed(), +                    .collect(Collectors.toList());, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +    private final double metricScore;, +    public EvalQueryQuality(String id, double metricScore) {, +        this.metricScore = metricScore;, +        this.metricScore = in.readDouble();, +        this.metricScore = builder.evaluationResult;, +        out.writeDouble(metricScore);, +    public double metricScore() {, +        return metricScore;, +        builder.field(METRIC_SCORE_FIELD.getPreferredName(), this.metricScore);, +    static final ParseField METRIC_SCORE_FIELD = new ParseField("metric_score");, +        PARSER.declareDouble((obj, value) -> obj.evaluationResult = value, METRIC_SCORE_FIELD);, +                Objects.equals(metricScore, other.metricScore) &&, +        return Objects.hash(queryId, metricScore, ratedHits, optionalMetricDetails);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvaluationMetric.java, +     * Evaluates a single ranking evaluation case., +     *            an identifier of the query for which the search ranking is, +     *            evaluated, +     *            the search result hits, +     *            the documents that contain the document rating for this query case, +     * @return an {@link EvalQueryQuality} instance that contains the metric score, +     *         with respect to the provided search hits and ratings, +     * Joins hits with rated documents using the joint _index/_id document key., +     * Filter {@link RatedSearchHit}s that do not have a rating., +     * Combine several {@link EvalQueryQuality} results into the overall evaluation score., +     * This defaults to averaging over the partial results, but can be overwritten to obtain a different behavior., +        return partialResults.stream().mapToDouble(EvalQueryQuality::metricScore).sum() / partialResults.size();, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +        assertEquals(expectedPrecision, response.getMetricScore(), Double.MIN_VALUE);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +            double evaluationResult = response.getMetricScore();   // <1>, +            double qualityLevel = evalQuality.metricScore();        // <3>, +++ b/docs/reference/search/rank-eval.asciidoc, +        "metric_score": 0.4, <1>]