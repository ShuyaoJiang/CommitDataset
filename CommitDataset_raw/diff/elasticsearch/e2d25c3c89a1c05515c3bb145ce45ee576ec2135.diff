[+++ b/core/src/main/java/org/elasticsearch/action/main/MainResponse.java, +    boolean available;, +            MainResponse::new);, +++ b/core/src/main/java/org/elasticsearch/action/main/MainResponse.java, +    boolean available;, +            MainResponse::new);, +++ b/core/src/test/java/org/elasticsearch/action/main/MainActionTests.java, +++ b/core/src/main/java/org/elasticsearch/action/main/MainResponse.java, +    boolean available;, +            MainResponse::new);, +++ b/core/src/test/java/org/elasticsearch/action/main/MainActionTests.java, +++ b/core/src/test/java/org/elasticsearch/action/main/MainResponseTests.java, +import org.elasticsearch.test.AbstractStreamableXContentTestCase;, +public class MainResponseTests extends AbstractStreamableXContentTestCase<MainResponse> {, +    @Override, +    protected MainResponse getExpectedFromXContent(MainResponse testInstance) {, +        // we cannot recreate the "available" flag from xContent, but should be "true" if request came through, +        testInstance.available = true;, +        return testInstance;, +    }, +, +    @Override, +    protected MainResponse createTestInstance() {, +    @Override, +    protected MainResponse createBlankInstance() {, +        return new MainResponse();, +, +    @Override, +    protected MainResponse doParseInstance(XContentParser parser) {, +        return MainResponse.fromXContent(parser);, +        String clusterUUID = randomAlphaOfLengthBetween(10, 20);, +        Build build = new Build(Build.CURRENT.shortHash(), Build.CURRENT.date(), Build.CURRENT.isSnapshot());, +        MainResponse response = new MainResponse("nodeName", version, new ClusterName("clusterName"), clusterUUID, build, true);, +                + "\"cluster_uuid\":\"" + clusterUUID + "\",", +                    + "\"build_hash\":\"" + Build.CURRENT.shortHash() + "\",", +                    + "\"build_date\":\"" + Build.CURRENT.date() + "\",", +                    + "\"build_snapshot\":" + Build.CURRENT.isSnapshot() + ",", +    //TODO this should be removed and the metehod from AbstractStreamableTestCase should be, +    //used instead once https://github.com/elastic/elasticsearch/pull/25910 goes in, +        MainResponse original = createTestInstance();, +++ b/core/src/main/java/org/elasticsearch/action/main/MainResponse.java, +    boolean available;, +            MainResponse::new);, +++ b/core/src/test/java/org/elasticsearch/action/main/MainActionTests.java, +++ b/core/src/test/java/org/elasticsearch/action/main/MainResponseTests.java, +import org.elasticsearch.test.AbstractStreamableXContentTestCase;, +public class MainResponseTests extends AbstractStreamableXContentTestCase<MainResponse> {, +    @Override, +    protected MainResponse getExpectedFromXContent(MainResponse testInstance) {, +        // we cannot recreate the "available" flag from xContent, but should be "true" if request came through, +        testInstance.available = true;, +        return testInstance;, +    }, +, +    @Override, +    protected MainResponse createTestInstance() {, +    @Override, +    protected MainResponse createBlankInstance() {, +        return new MainResponse();, +, +    @Override, +    protected MainResponse doParseInstance(XContentParser parser) {, +        return MainResponse.fromXContent(parser);, +        String clusterUUID = randomAlphaOfLengthBetween(10, 20);, +        Build build = new Build(Build.CURRENT.shortHash(), Build.CURRENT.date(), Build.CURRENT.isSnapshot());, +        MainResponse response = new MainResponse("nodeName", version, new ClusterName("clusterName"), clusterUUID, build, true);, +                + "\"cluster_uuid\":\"" + clusterUUID + "\",", +                    + "\"build_hash\":\"" + Build.CURRENT.shortHash() + "\",", +                    + "\"build_date\":\"" + Build.CURRENT.date() + "\",", +                    + "\"build_snapshot\":" + Build.CURRENT.isSnapshot() + ",", +    //TODO this should be removed and the metehod from AbstractStreamableTestCase should be, +    //used instead once https://github.com/elastic/elasticsearch/pull/25910 goes in, +        MainResponse original = createTestInstance();, +++ b/core/src/test/java/org/elasticsearch/search/collapse/CollapseBuilderTests.java, +    protected String[] getShuffleFieldsExceptions() {, +        //disable xcontent shuffling on the highlight builder, +        return new String[]{"fields"};, +++ b/core/src/main/java/org/elasticsearch/action/main/MainResponse.java, +    boolean available;, +            MainResponse::new);, +++ b/core/src/test/java/org/elasticsearch/action/main/MainActionTests.java, +++ b/core/src/test/java/org/elasticsearch/action/main/MainResponseTests.java, +import org.elasticsearch.test.AbstractStreamableXContentTestCase;, +public class MainResponseTests extends AbstractStreamableXContentTestCase<MainResponse> {, +    @Override, +    protected MainResponse getExpectedFromXContent(MainResponse testInstance) {, +        // we cannot recreate the "available" flag from xContent, but should be "true" if request came through, +        testInstance.available = true;, +        return testInstance;, +    }, +, +    @Override, +    protected MainResponse createTestInstance() {, +    @Override, +    protected MainResponse createBlankInstance() {, +        return new MainResponse();, +, +    @Override, +    protected MainResponse doParseInstance(XContentParser parser) {, +        return MainResponse.fromXContent(parser);]