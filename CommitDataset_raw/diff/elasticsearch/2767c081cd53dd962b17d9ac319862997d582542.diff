[+++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +    public static int boundedNumberOfProcessors(Settings settings) {, +        return settings.getAsInt("processors", Math.min(32, Runtime.getRuntime().availableProcessors()));, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +    public static int boundedNumberOfProcessors(Settings settings) {, +        return settings.getAsInt("processors", Math.min(32, Runtime.getRuntime().availableProcessors()));, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        this.workerCount = componentSettings.getAsInt("worker_count", EsExecutors.boundedNumberOfProcessors(settings) * 2);, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +    public static int boundedNumberOfProcessors(Settings settings) {, +        return settings.getAsInt("processors", Math.min(32, Runtime.getRuntime().availableProcessors()));, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        this.workerCount = componentSettings.getAsInt("worker_count", EsExecutors.boundedNumberOfProcessors(settings) * 2);, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +        this.indexConcurrency = indexSettings.getAsInt(INDEX_INDEX_CONCURRENCY, Math.max(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, (int) (EsExecutors.boundedNumberOfProcessors(indexSettings) * 0.65)));, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +    public static int boundedNumberOfProcessors(Settings settings) {, +        return settings.getAsInt("processors", Math.min(32, Runtime.getRuntime().availableProcessors()));, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        this.workerCount = componentSettings.getAsInt("worker_count", EsExecutors.boundedNumberOfProcessors(settings) * 2);, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +        this.indexConcurrency = indexSettings.getAsInt(INDEX_INDEX_CONCURRENCY, Math.max(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, (int) (EsExecutors.boundedNumberOfProcessors(indexSettings) * 0.65)));, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +        int availableProcessors = EsExecutors.boundedNumberOfProcessors(settings);, +            int defaultSize = defaultSettings.getAsInt("size", EsExecutors.boundedNumberOfProcessors(settings));, +            int defaultSize = defaultSettings.getAsInt("size", EsExecutors.boundedNumberOfProcessors(settings));, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +    public static int boundedNumberOfProcessors(Settings settings) {, +        return settings.getAsInt("processors", Math.min(32, Runtime.getRuntime().availableProcessors()));, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +        this.workerCount = componentSettings.getAsInt("worker_count", EsExecutors.boundedNumberOfProcessors(settings) * 2);, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +        this.indexConcurrency = indexSettings.getAsInt(INDEX_INDEX_CONCURRENCY, Math.max(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, (int) (EsExecutors.boundedNumberOfProcessors(indexSettings) * 0.65)));, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +        int availableProcessors = EsExecutors.boundedNumberOfProcessors(settings);, +            int defaultSize = defaultSettings.getAsInt("size", EsExecutors.boundedNumberOfProcessors(settings));, +            int defaultSize = defaultSettings.getAsInt("size", EsExecutors.boundedNumberOfProcessors(settings));, +++ b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +        this.workerCount = componentSettings.getAsInt("worker_count", EsExecutors.boundedNumberOfProcessors(settings) * 2);]