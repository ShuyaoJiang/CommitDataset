[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/UsernamePasswordToken.java, +import org.elasticsearch.common.Strings;, +    // authorization scheme check is case-insensitive, +    private static final boolean IGNORE_CASE_AUTH_HEADER_MATCH = true;, +        if (Strings.isNullOrEmpty(headerValue)) {, +            return null;, +        }, +        if (headerValue.regionMatches(IGNORE_CASE_AUTH_HEADER_MATCH, 0, BASIC_AUTH_PREFIX, 0,, +                BASIC_AUTH_PREFIX.length()) == false) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/UsernamePasswordToken.java, +import org.elasticsearch.common.Strings;, +    // authorization scheme check is case-insensitive, +    private static final boolean IGNORE_CASE_AUTH_HEADER_MATCH = true;, +        if (Strings.isNullOrEmpty(headerValue)) {, +            return null;, +        }, +        if (headerValue.regionMatches(IGNORE_CASE_AUTH_HEADER_MATCH, 0, BASIC_AUTH_PREFIX, 0,, +                BASIC_AUTH_PREFIX.length()) == false) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java, +        if (Strings.hasText(header) && header.regionMatches(true, 0, "Bearer ", 0, "Bearer ".length()), +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/UsernamePasswordToken.java, +import org.elasticsearch.common.Strings;, +    // authorization scheme check is case-insensitive, +    private static final boolean IGNORE_CASE_AUTH_HEADER_MATCH = true;, +        if (Strings.isNullOrEmpty(headerValue)) {, +            return null;, +        }, +        if (headerValue.regionMatches(IGNORE_CASE_AUTH_HEADER_MATCH, 0, BASIC_AUTH_PREFIX, 0,, +                BASIC_AUTH_PREFIX.length()) == false) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java, +        if (Strings.hasText(header) && header.regionMatches(true, 0, "Bearer ", 0, "Bearer ".length()), +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/TokenServiceTests.java, +import static org.hamcrest.Matchers.nullValue;, +        requestContext.putHeader("Authorization", randomFrom("Bearer ", "BEARER ", "bearer ") + tokenService.getUserTokenString(token));, +    public void testInvalidAuthorizationHeader() throws Exception {, +        TokenService tokenService = new TokenService(tokenServiceEnabledSettings, systemUTC(), client, securityIndex, clusterService);, +        ThreadContext requestContext = new ThreadContext(Settings.EMPTY);, +        String token = randomFrom("", "          ");, +        String authScheme = randomFrom("Bearer ", "BEARER ", "bearer ", "Basic ");, +        requestContext.putHeader("Authorization", authScheme + token);, +, +        try (ThreadContext.StoredContext ignore = requestContext.newStoredContext(true)) {, +            PlainActionFuture<UserToken> future = new PlainActionFuture<>();, +            tokenService.getAndValidateToken(requestContext, future);, +            UserToken serialized = future.get();, +            assertThat(serialized, nullValue());, +        }, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/support/UsernamePasswordToken.java, +import org.elasticsearch.common.Strings;, +    // authorization scheme check is case-insensitive, +    private static final boolean IGNORE_CASE_AUTH_HEADER_MATCH = true;, +        if (Strings.isNullOrEmpty(headerValue)) {, +            return null;, +        }, +        if (headerValue.regionMatches(IGNORE_CASE_AUTH_HEADER_MATCH, 0, BASIC_AUTH_PREFIX, 0,, +                BASIC_AUTH_PREFIX.length()) == false) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java, +        if (Strings.hasText(header) && header.regionMatches(true, 0, "Bearer ", 0, "Bearer ".length()), +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/TokenServiceTests.java, +import static org.hamcrest.Matchers.nullValue;, +        requestContext.putHeader("Authorization", randomFrom("Bearer ", "BEARER ", "bearer ") + tokenService.getUserTokenString(token));, +    public void testInvalidAuthorizationHeader() throws Exception {, +        TokenService tokenService = new TokenService(tokenServiceEnabledSettings, systemUTC(), client, securityIndex, clusterService);, +        ThreadContext requestContext = new ThreadContext(Settings.EMPTY);, +        String token = randomFrom("", "          ");, +        String authScheme = randomFrom("Bearer ", "BEARER ", "bearer ", "Basic ");, +        requestContext.putHeader("Authorization", authScheme + token);, +, +        try (ThreadContext.StoredContext ignore = requestContext.newStoredContext(true)) {, +            PlainActionFuture<UserToken> future = new PlainActionFuture<>();, +            tokenService.getAndValidateToken(requestContext, future);, +            UserToken serialized = future.get();, +            assertThat(serialized, nullValue());, +        }, +    }, +, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/support/UsernamePasswordTokenTests.java, +        final String header = randomFrom("Basic ", "basic ", "BASIC "), +                + Base64.getEncoder().encodeToString("user1:test123".getBytes(StandardCharsets.UTF_8));, +        final String[] invalidValues = { "Basic ", "Basic f", "basic " };, +        final String header = randomFrom("Basic", "BasicBroken", "invalid", "   basic   ");]