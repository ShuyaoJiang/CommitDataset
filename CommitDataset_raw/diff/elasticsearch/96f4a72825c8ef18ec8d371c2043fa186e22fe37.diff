[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.UpdateJobProcessNotifier;, +        UpdateJobProcessNotifier notifier = new UpdateJobProcessNotifier(settings, internalClient, clusterService, threadPool);, +        JobManager jobManager = new JobManager(settings, jobProvider, jobResultsPersister, clusterService, auditor, internalClient, notifier);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.UpdateJobProcessNotifier;, +        UpdateJobProcessNotifier notifier = new UpdateJobProcessNotifier(settings, internalClient, clusterService, threadPool);, +        JobManager jobManager = new JobManager(settings, jobProvider, jobResultsPersister, clusterService, auditor, internalClient, notifier);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateJobAction.java, +            JobUpdate update = JobUpdate.PARSER.apply(parser, null).setJobId(jobId).build();, +                               JobManager jobManager) {, +            jobManager.updateJob(request.getJobId(), request.getJobUpdate(), request, listener);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.UpdateJobProcessNotifier;, +        UpdateJobProcessNotifier notifier = new UpdateJobProcessNotifier(settings, internalClient, clusterService, threadPool);, +        JobManager jobManager = new JobManager(settings, jobProvider, jobResultsPersister, clusterService, auditor, internalClient, notifier);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateJobAction.java, +            JobUpdate update = JobUpdate.PARSER.apply(parser, null).setJobId(jobId).build();, +                               JobManager jobManager) {, +            jobManager.updateJob(request.getJobId(), request.getJobUpdate(), request, listener);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateProcessAction.java, +        public boolean isUpdated() {, +            return isUpdated;, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.UpdateJobProcessNotifier;, +        UpdateJobProcessNotifier notifier = new UpdateJobProcessNotifier(settings, internalClient, clusterService, threadPool);, +        JobManager jobManager = new JobManager(settings, jobProvider, jobResultsPersister, clusterService, auditor, internalClient, notifier);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateJobAction.java, +            JobUpdate update = JobUpdate.PARSER.apply(parser, null).setJobId(jobId).build();, +                               JobManager jobManager) {, +            jobManager.updateJob(request.getJobId(), request.getJobUpdate(), request, listener);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateProcessAction.java, +        public boolean isUpdated() {, +            return isUpdated;, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +    private final UpdateJobProcessNotifier updateJobProcessNotifier;, +                      ClusterService clusterService, Auditor auditor, Client client,, +                      UpdateJobProcessNotifier updateJobProcessNotifier) {, +        this.updateJobProcessNotifier = updateJobProcessNotifier;, +                    String message = Messages.getMessage(Messages.REST_NO_SUCH_MODEL_SNAPSHOT, jobUpdate.getModelSnapshotId(),, +                            job.getId());, +                    errorHandler.accept(new ResourceNotFoundException(message));, +                        String message = "Job [" + job.getId() + "] has a more recent model snapshot [" +, +                                oldModelSnapshot.getSnapshotId() + "]";, +                        errorHandler.accept(new IllegalArgumentException(message));, +                    private volatile Job updatedJob;, +, +                    @Override, +                    public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +                        updateJobProcessNotifier.submitJobUpdate(jobUpdate);, +                    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.UpdateJobProcessNotifier;, +        UpdateJobProcessNotifier notifier = new UpdateJobProcessNotifier(settings, internalClient, clusterService, threadPool);, +        JobManager jobManager = new JobManager(settings, jobProvider, jobResultsPersister, clusterService, auditor, internalClient, notifier);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateJobAction.java, +            JobUpdate update = JobUpdate.PARSER.apply(parser, null).setJobId(jobId).build();, +                               JobManager jobManager) {, +            jobManager.updateJob(request.getJobId(), request.getJobUpdate(), request, listener);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/UpdateProcessAction.java, +        public boolean isUpdated() {, +            return isUpdated;, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +    private final UpdateJobProcessNotifier updateJobProcessNotifier;, +                      ClusterService clusterService, Auditor auditor, Client client,, +                      UpdateJobProcessNotifier updateJobProcessNotifier) {, +        this.updateJobProcessNotifier = updateJobProcessNotifier;, +                    String message = Messages.getMessage(Messages.REST_NO_SUCH_MODEL_SNAPSHOT, jobUpdate.getModelSnapshotId(),, +                            job.getId());, +                    errorHandler.accept(new ResourceNotFoundException(message));, +                        String message = "Job [" + job.getId() + "] has a more recent model snapshot [" +, +                                oldModelSnapshot.getSnapshotId() + "]";, +                        errorHandler.accept(new IllegalArgumentException(message));, +                    private volatile Job updatedJob;, +, +                    @Override, +                    public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +                        updateJobProcessNotifier.submitJobUpdate(jobUpdate);, +                    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/UpdateJobProcessNotifier.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.job;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.LocalNodeMasterListener;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.component.LifecycleListener;, +import org.elasticsearch.common.settings.Settings;]