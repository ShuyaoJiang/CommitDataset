[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);, +++ b/core/src/main/java/org/elasticsearch/common/logging/log4j/LogConfigurator.java, +        // TODO: this is partly a copy of InternalSettingsPreparer...we should pass in Environment and not do all this..., +    static void reset() {, +    static void resolveConfig(Environment env, final Settings.Builder settingsBuilder) {, +    static void loadConfig(Path file, Settings.Builder settingsBuilder) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);, +++ b/core/src/main/java/org/elasticsearch/common/logging/log4j/LogConfigurator.java, +        // TODO: this is partly a copy of InternalSettingsPreparer...we should pass in Environment and not do all this..., +    static void reset() {, +    static void resolveConfig(Environment env, final Settings.Builder settingsBuilder) {, +    static void loadConfig(Path file, Settings.Builder settingsBuilder) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +    public Node(Settings preparedSettings) {, +        this(preparedSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());, +    Node(Settings preparedSettings, Version version, Collection<Class<? extends Plugin>> classpathPlugins) {, +        Environment tmpEnv = InternalSettingsPreparer.prepareEnvironment(pSettings, null);, +        Settings tmpSettings = TribeService.processSettings(tmpEnv.settings());, +        ESLogger logger = Loggers.getLogger(Node.class, tmpSettings.get("name"));, +                tmpEnv.configFile(), Arrays.toString(tmpEnv.dataFiles()), tmpEnv.logsFile(), tmpEnv.pluginsFile());, +        this.pluginsService = new PluginsService(tmpSettings, tmpEnv.pluginsFile(), classpathPlugins);, +            modules.add(new SettingsModule(this.settings));, +            modules.add(new ScriptModule(this.settings));, +            modules.add(new ClusterNameModule(this.settings));, +            modules.add(new DiscoveryModule(this.settings));, +            modules.add(new ClusterModule(this.settings));, +            modules.add(new RestModule(this.settings));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);, +++ b/core/src/main/java/org/elasticsearch/common/logging/log4j/LogConfigurator.java, +        // TODO: this is partly a copy of InternalSettingsPreparer...we should pass in Environment and not do all this..., +    static void reset() {, +    static void resolveConfig(Environment env, final Settings.Builder settingsBuilder) {, +    static void loadConfig(Path file, Settings.Builder settingsBuilder) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +    public Node(Settings preparedSettings) {, +        this(preparedSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());, +    Node(Settings preparedSettings, Version version, Collection<Class<? extends Plugin>> classpathPlugins) {, +        Environment tmpEnv = InternalSettingsPreparer.prepareEnvironment(pSettings, null);, +        Settings tmpSettings = TribeService.processSettings(tmpEnv.settings());, +        ESLogger logger = Loggers.getLogger(Node.class, tmpSettings.get("name"));, +                tmpEnv.configFile(), Arrays.toString(tmpEnv.dataFiles()), tmpEnv.logsFile(), tmpEnv.pluginsFile());, +        this.pluginsService = new PluginsService(tmpSettings, tmpEnv.pluginsFile(), classpathPlugins);, +            modules.add(new SettingsModule(this.settings));, +            modules.add(new ScriptModule(this.settings));, +            modules.add(new ClusterNameModule(this.settings));, +            modules.add(new DiscoveryModule(this.settings));, +            modules.add(new ClusterModule(this.settings));, +            modules.add(new RestModule(this.settings));, +++ b/core/src/main/java/org/elasticsearch/node/NodeBuilder.java, + * <tt>elasticsearch.yml</tt> or <tt>elasticsearch.json</tt>)., +        return new Node(settings.build());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);, +++ b/core/src/main/java/org/elasticsearch/common/logging/log4j/LogConfigurator.java, +        // TODO: this is partly a copy of InternalSettingsPreparer...we should pass in Environment and not do all this..., +    static void reset() {, +    static void resolveConfig(Environment env, final Settings.Builder settingsBuilder) {, +    static void loadConfig(Path file, Settings.Builder settingsBuilder) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +    public Node(Settings preparedSettings) {, +        this(preparedSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());, +    Node(Settings preparedSettings, Version version, Collection<Class<? extends Plugin>> classpathPlugins) {, +        Environment tmpEnv = InternalSettingsPreparer.prepareEnvironment(pSettings, null);, +        Settings tmpSettings = TribeService.processSettings(tmpEnv.settings());, +        ESLogger logger = Loggers.getLogger(Node.class, tmpSettings.get("name"));, +                tmpEnv.configFile(), Arrays.toString(tmpEnv.dataFiles()), tmpEnv.logsFile(), tmpEnv.pluginsFile());, +        this.pluginsService = new PluginsService(tmpSettings, tmpEnv.pluginsFile(), classpathPlugins);, +            modules.add(new SettingsModule(this.settings));, +            modules.add(new ScriptModule(this.settings));, +            modules.add(new ClusterNameModule(this.settings));, +            modules.add(new DiscoveryModule(this.settings));, +            modules.add(new ClusterModule(this.settings));, +            modules.add(new RestModule(this.settings));, +++ b/core/src/main/java/org/elasticsearch/node/NodeBuilder.java, + * <tt>elasticsearch.yml</tt> or <tt>elasticsearch.json</tt>)., +        return new Node(settings.build());, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +        // just create enough settings to build the environment, to get the config dir, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);, +++ b/core/src/main/java/org/elasticsearch/common/logging/log4j/LogConfigurator.java, +        // TODO: this is partly a copy of InternalSettingsPreparer...we should pass in Environment and not do all this..., +    static void reset() {, +    static void resolveConfig(Environment env, final Settings.Builder settingsBuilder) {, +    static void loadConfig(Path file, Settings.Builder settingsBuilder) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +    public Node(Settings preparedSettings) {, +        this(preparedSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());, +    Node(Settings preparedSettings, Version version, Collection<Class<? extends Plugin>> classpathPlugins) {, +        Environment tmpEnv = InternalSettingsPreparer.prepareEnvironment(pSettings, null);, +        Settings tmpSettings = TribeService.processSettings(tmpEnv.settings());, +        ESLogger logger = Loggers.getLogger(Node.class, tmpSettings.get("name"));, +                tmpEnv.configFile(), Arrays.toString(tmpEnv.dataFiles()), tmpEnv.logsFile(), tmpEnv.pluginsFile());, +        this.pluginsService = new PluginsService(tmpSettings, tmpEnv.pluginsFile(), classpathPlugins);, +            modules.add(new SettingsModule(this.settings));]