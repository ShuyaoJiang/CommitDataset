[+++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/email/Account.java, +import org.elasticsearch.common.settings.SecureSetting;, +import org.elasticsearch.common.settings.SecureString;, +import org.elasticsearch.common.settings.Setting;, +import java.util.Set;, +    private static final String SMTP_PASSWORD = "password";, +    private static final Setting<SecureString> SECURE_PASSWORD_SETTING = SecureSetting.secureString("secure_" + SMTP_PASSWORD, null);, +            password = new String(config.smtp.password.getChars());, +            final SecureString password;, +, +                password = getSecureSetting(SMTP_PASSWORD, settings, SECURE_PASSWORD_SETTING);, +                //password = passStr != null ? passStr.toCharArray() : null;, +             * Finds a setting, and then a secure setting if the setting is null, or returns null if one does not exist. This differs, +             * from other getSetting calls in that it allows for null whereas the other methods throw an exception., +             *, +             * Note: if your setting was not previously secure, than the string reference that is in the setting object is still, +             * insecure. This is only constructing a new SecureString with the char[] of the insecure setting., +             */, +            private static SecureString getSecureSetting(String settingName, Settings settings, Setting<SecureString> secureSetting) {, +                String value = settings.get(settingName);, +                if (value == null) {, +                    SecureString secureString = secureSetting.get(settings);, +                    if (secureString != null && secureString.length() > 0) {, +                        return secureString;, +                    } else  {, +                        return null;, +                    }, +                } else {, +                    return new SecureString(value.toCharArray());, +                }, +            }, +, +            /**, +                // Secure strings can not be retreived out of a settings object and should be handled differently, +                Set<String> insecureSettings = settings.filter(s -> s.startsWith("secure_") == false).keySet();, +                for (String key : insecureSettings) {, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/email/Account.java, +import org.elasticsearch.common.settings.SecureSetting;, +import org.elasticsearch.common.settings.SecureString;, +import org.elasticsearch.common.settings.Setting;, +import java.util.Set;, +    private static final String SMTP_PASSWORD = "password";, +    private static final Setting<SecureString> SECURE_PASSWORD_SETTING = SecureSetting.secureString("secure_" + SMTP_PASSWORD, null);, +            password = new String(config.smtp.password.getChars());, +            final SecureString password;, +, +                password = getSecureSetting(SMTP_PASSWORD, settings, SECURE_PASSWORD_SETTING);, +                //password = passStr != null ? passStr.toCharArray() : null;, +             * Finds a setting, and then a secure setting if the setting is null, or returns null if one does not exist. This differs, +             * from other getSetting calls in that it allows for null whereas the other methods throw an exception., +             *, +             * Note: if your setting was not previously secure, than the string reference that is in the setting object is still, +             * insecure. This is only constructing a new SecureString with the char[] of the insecure setting., +             */, +            private static SecureString getSecureSetting(String settingName, Settings settings, Setting<SecureString> secureSetting) {, +                String value = settings.get(settingName);, +                if (value == null) {, +                    SecureString secureString = secureSetting.get(settings);, +                    if (secureString != null && secureString.length() > 0) {, +                        return secureString;, +                    } else  {, +                        return null;, +                    }, +                } else {, +                    return new SecureString(value.toCharArray());, +                }, +            }, +, +            /**, +                // Secure strings can not be retreived out of a settings object and should be handled differently, +                Set<String> insecureSettings = settings.filter(s -> s.startsWith("secure_") == false).keySet();, +                for (String key : insecureSettings) {, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/email/EmailService.java, +import org.elasticsearch.common.settings.SecureSetting;, +import org.elasticsearch.common.settings.SecureString;, +    private static final Setting.AffixSetting<SecureString> SETTING_SECURE_PASSWORD =, +        Setting.affixKeySetting("xpack.notification.email.account.", "smtp.secure_password",, +            (key) -> SecureSetting.secureString(key, null));, +, +        clusterSettings.addAffixUpdateConsumer(SETTING_SECURE_PASSWORD, (s, o) -> {}, (s, o) -> {});, +                SETTING_SMTP_LOCAL_PORT, SETTING_SMTP_SEND_PARTIAL, SETTING_SMTP_WAIT_ON_QUIT, SETTING_SMTP_SSL_TRUST_ADDRESS,, +                SETTING_SECURE_PASSWORD);, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/notification/email/Account.java, +import org.elasticsearch.common.settings.SecureSetting;, +import org.elasticsearch.common.settings.SecureString;, +import org.elasticsearch.common.settings.Setting;, +import java.util.Set;, +    private static final String SMTP_PASSWORD = "password";, +    private static final Setting<SecureString> SECURE_PASSWORD_SETTING = SecureSetting.secureString("secure_" + SMTP_PASSWORD, null);, +            password = new String(config.smtp.password.getChars());, +            final SecureString password;, +, +                password = getSecureSetting(SMTP_PASSWORD, settings, SECURE_PASSWORD_SETTING);, +                //password = passStr != null ? passStr.toCharArray() : null;, +             * Finds a setting, and then a secure setting if the setting is null, or returns null if one does not exist. This differs, +             * from other getSetting calls in that it allows for null whereas the other methods throw an exception., +             *, +             * Note: if your setting was not previously secure, than the string reference that is in the setting object is still, +             * insecure. This is only constructing a new SecureString with the char[] of the insecure setting., +             */]