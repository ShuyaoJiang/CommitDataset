[+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java, +        final List<String> finalAliases = new ArrayList<>();, +        // IndicesAliasesRequest doesn't support empty aliases (validation fails) but, +        // GetAliasesRequest does (in which case empty means _all), +        for (String aliasExpression : aliases) {, +            boolean include = true;, +            if (aliasExpression.charAt(0) == '-') {, +                include = false;, +                aliasExpression = aliasExpression.substring(1);, +            }, +            if (MetaData.ALL.equals(aliasExpression) || Regex.isSimpleMatchPattern(aliasExpression)) {, +                final Set<String> resolvedAliases = new HashSet<>();, +                for (final String authorizedAlias : authorizedAliases) {, +                    if (MetaData.ALL.equals(aliasExpression) || Regex.simpleMatch(aliasExpression, authorizedAlias)) {, +                        resolvedAliases.add(authorizedAlias);, +                if (include) {, +                    finalAliases.addAll(resolvedAliases);, +                    finalAliases.removeAll(resolvedAliases);, +                }, +            } else if (include) {, +                finalAliases.add(aliasExpression);, +            } else {, +                finalAliases.remove(aliasExpression);, +, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java, +        final List<String> finalAliases = new ArrayList<>();, +        // IndicesAliasesRequest doesn't support empty aliases (validation fails) but, +        // GetAliasesRequest does (in which case empty means _all), +        for (String aliasExpression : aliases) {, +            boolean include = true;, +            if (aliasExpression.charAt(0) == '-') {, +                include = false;, +                aliasExpression = aliasExpression.substring(1);, +            }, +            if (MetaData.ALL.equals(aliasExpression) || Regex.isSimpleMatchPattern(aliasExpression)) {, +                final Set<String> resolvedAliases = new HashSet<>();, +                for (final String authorizedAlias : authorizedAliases) {, +                    if (MetaData.ALL.equals(aliasExpression) || Regex.simpleMatch(aliasExpression, authorizedAlias)) {, +                        resolvedAliases.add(authorizedAlias);, +                if (include) {, +                    finalAliases.addAll(resolvedAliases);, +                    finalAliases.removeAll(resolvedAliases);, +                }, +            } else if (include) {, +                finalAliases.add(aliasExpression);, +            } else {, +                finalAliases.remove(aliasExpression);, +, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolverTests.java, +                .put(indexBuilder("foo").putAlias(AliasMetaData.builder("foofoobar")), +                        .putAlias(AliasMetaData.builder("foounauthorized")).settings(settings)), +                .put(indexBuilder("foobar").putAlias(AliasMetaData.builder("foofoobar")), +                        .putAlias(AliasMetaData.builder("foobarfoo")).settings(settings)), +        String[] authorizedIndices = new String[] { "bar", "bar-closed", "foofoobar", "foobarfoo", "foofoo", "missing", "foofoo-closed"};, +        String[] replacedIndices = new String[]{"bar", "bar-closed", "foofoobar", "foobarfoo", "foofoo", "foofoo-closed"};, +        String[] replacedIndices = new String[]{"bar", "foofoobar", "foobarfoo", "foofoo"};, +        assertSameValues(indices, replacedIndices);, +        String[] replacedIndices = new String[]{"bar", "bar-closed", "foofoobar", "foobarfoo", "foofoo", "foofoo-closed"};, +        String[] replacedIndices = new String[]{"bar", "foofoobar", "foobarfoo", "foofoo"};, +        String[] replacedIndices = new String[]{"bar", "foobarfoo"};, +        String[] replacedIndices = new String[]{"bar", "foobarfoo", "bar-closed"};, +        String[] replacedIndices = new String[]{"bar", "foobarfoo", "barbaz"};, +        assertSameValues(indices, replacedIndices);, +        assertThat(request.indices(), arrayContainingInAnyOrder("bar", "foobarfoo", "barbaz", "foobarfoo"));, +        String[] replacedIndices = new String[]{"bar", "foobarfoo"};, +        String[] replacedIndices = new String[]{"bar", "bar-closed", "barbaz", "foobarfoo"};, +        assertSameValues(indices, replacedIndices);, +        String[] replacedIndices = new String[]{"bar", "bar-closed", "foobarfoo"};, +        String[] expectedIndices = new String[]{"bar", "foofoobar", "foobarfoo", "foofoo"};, +        assertThat(request.getAliasActions().get(0).aliases(), arrayContainingInAnyOrder("foofoobar", "foobarfoo"));, +        assertThat(request.getAliasActions().get(1).aliases(), arrayContainingInAnyOrder("foofoobar", "foobarfoo"));, +        String[] expectedIndices = new String[]{"bar", "foofoobar", "foobarfoo", "foofoo", "explicit"};, +        assertThat(request.getAliasActions().get(0).aliases(), arrayContainingInAnyOrder("foofoobar", "foobarfoo"));, +        assertThat(request.getAliasActions().get(1).aliases(), arrayContainingInAnyOrder("foofoobar", "foobarfoo", "explicit"));, +        assertThat(request.getAliasActions().get(0).aliases(), arrayContainingInAnyOrder("foofoobar", "foobarfoo"));, +        String[] expectedIndices = new String[]{"alias1", "foofoo", "foofoo-closed", "foofoobar", "foobarfoo"};, +        assertThat(request.indices(), arrayContainingInAnyOrder("foofoobar", "foobarfoo", "foofoo", "foofoo-closed"));, +        String[] expectedIndices = new String[]{"alias1", "foofoo", "foofoobar", "foobarfoo"};, +        assertThat(request.indices(), arrayContainingInAnyOrder("foofoobar", "foobarfoo", "foofoo"));, +        String[] expectedIndices = new String[]{"alias1", "foofoo", "foofoobar", "foobarfoo", "bar"};, +        assertThat(request.indices(), arrayContainingInAnyOrder("foofoobar", "foobarfoo", "foofoo", "bar"));, +        String[] expectedIndices = new String[]{"bar", "bar-closed", "foofoobar", "foobarfoo", "foofoo", "foofoo-closed", "alias1"};, +        String[] replacedIndices = new String[]{"bar", "bar-closed", "foofoobar", "foobarfoo", "foofoo", "foofoo-closed"};, +        String[] expectedIndices = new String[]{"bar", "foofoobar", "foobarfoo", "foofoo", "alias1"};, +        String[] replacedIndices = new String[]{"bar", "foofoobar", "foobarfoo", "foofoo"};, +        String[] expectedIndices = new String[]{"bar", "bar-closed", "foofoobar", "foobarfoo", "foofoo", "foofoo-closed"};, +        assertThat(request.aliases(), arrayContainingInAnyOrder("foofoobar", "foobarfoo"));, +        String[] expectedIndices = new String[]{"bar", "bar-closed", "foofoobar", "foobarfoo", "foofoo", "foofoo-closed", "explicit"};, +        assertThat(request.indices(), arrayContainingInAnyOrder("bar", "bar-closed", "foofoobar", "foobarfoo", "foofoo", "foofoo-closed"));, +        assertThat(request.aliases(), arrayContainingInAnyOrder("foofoobar", "foobarfoo", "explicit"));, +        String[] expectedIndices = new String[]{"bar", "bar-closed", "foofoobar", "foobarfoo", "foofoo", "foofoo-closed"};, +        assertThat(request.aliases(), arrayContainingInAnyOrder("foofoobar", "foofoobar", "foobarfoo", "foobarfoo"));, +        String[] expectedIndices = new String[]{"bar", "foobarfoo", "foofoobar"};, +        assertThat(request.aliases(), arrayContainingInAnyOrder("foofoobar", "foobarfoo"));, +    public void testResolveAliasesExclusionWildcardsGetAliasesRequest() {, +        GetAliasesRequest request = new GetAliasesRequest();, +        request.aliases("foo*","-foobar*");, +        final AuthorizedIndices authorizedIndices = buildAuthorizedIndices(user, GetAliasesAction.NAME);, +        List<String> indices = resolveIndices(request, authorizedIndices).getLocal();, +        //union of all resolved indices and aliases gets returned, based on what user is authorized for]