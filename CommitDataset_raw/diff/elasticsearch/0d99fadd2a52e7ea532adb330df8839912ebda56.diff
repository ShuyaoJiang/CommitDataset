[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +         * The local checkpoint for the shard., +         * The global checkpoint for the shard., +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +         * The local checkpoint for the shard., +         * The global checkpoint for the shard., +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +         * The local checkpoint for the shard., +         * The global checkpoint for the shard., +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +         * The local checkpoint for the shard., +         * The global checkpoint for the shard., +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.seqno.LocalCheckpointTracker;, +    public abstract LocalCheckpointTracker getLocalCheckpointTracker();, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +         * The local checkpoint for the shard., +         * The global checkpoint for the shard., +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.seqno.LocalCheckpointTracker;, +    public abstract LocalCheckpointTracker getLocalCheckpointTracker();, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import java.util.function.LongSupplier;, +    private final LongSupplier globalCheckpointSupplier;, +                        TranslogRecoveryRunner translogRecoveryRunner, CircuitBreakerService circuitBreakerService,, +                        LongSupplier globalCheckpointSupplier) {, +        this.globalCheckpointSupplier = globalCheckpointSupplier;, +     * Returns the global checkpoint tracker, +     */, +    public LongSupplier getGlobalCheckpointSupplier() {, +        return globalCheckpointSupplier;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +         * The local checkpoint for the shard., +         * The global checkpoint for the shard., +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.seqno.LocalCheckpointTracker;, +    public abstract LocalCheckpointTracker getLocalCheckpointTracker();, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import java.util.function.LongSupplier;, +    private final LongSupplier globalCheckpointSupplier;, +                        TranslogRecoveryRunner translogRecoveryRunner, CircuitBreakerService circuitBreakerService,, +                        LongSupplier globalCheckpointSupplier) {, +        this.globalCheckpointSupplier = globalCheckpointSupplier;, +     * Returns the global checkpoint tracker, +     */, +    public LongSupplier getGlobalCheckpointSupplier() {, +        return globalCheckpointSupplier;]