[+++ b/src/main/java/org/elasticsearch/monitor/jvm/JvmInfo.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +        builder.startObject(Fields.JVM);, +        builder.field(Fields.PID, pid);, +        builder.field(Fields.VERSION, version);, +        builder.field(Fields.VM_NAME, vmName);, +        builder.field(Fields.VM_VERSION, vmVersion);, +        builder.field(Fields.VM_VENDOR, vmVendor);, +        builder.field(Fields.START_TIME, startTime);, +        builder.startObject(Fields.MEM);, +        builder.field(Fields.HEAP_INIT, mem.heapInit().toString());, +        builder.field(Fields.HEAP_INIT_IN_BYTES, mem.heapInit);, +        builder.field(Fields.HEAP_MAX, mem.heapMax().toString());, +        builder.field(Fields.HEAP_MAX_IN_BYTES, mem.heapMax);, +        builder.field(Fields.NON_HEAP_INIT, mem.nonHeapInit().toString());, +        builder.field(Fields.NON_HEAP_INIT_IN_BYTES, mem.nonHeapInit);, +        builder.field(Fields.NON_HEAP_MAX, mem.nonHeapMax().toString());, +        builder.field(Fields.NON_HEAP_MAX_IN_BYTES, mem.nonHeapMax);, +    static final class Fields {, +        static final XContentBuilderString JVM = new XContentBuilderString("jvm");, +        static final XContentBuilderString PID = new XContentBuilderString("pid");, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +        static final XContentBuilderString VM_NAME = new XContentBuilderString("vm_name");, +        static final XContentBuilderString VM_VERSION = new XContentBuilderString("vm_version");, +        static final XContentBuilderString VM_VENDOR = new XContentBuilderString("vm_vendor");, +        static final XContentBuilderString START_TIME = new XContentBuilderString("start_time");, +, +        static final XContentBuilderString MEM = new XContentBuilderString("mem");, +        static final XContentBuilderString HEAP_INIT = new XContentBuilderString("heap_init");, +        static final XContentBuilderString HEAP_INIT_IN_BYTES = new XContentBuilderString("heap_init_in_bytes");, +        static final XContentBuilderString HEAP_MAX = new XContentBuilderString("heap_max");, +        static final XContentBuilderString HEAP_MAX_IN_BYTES = new XContentBuilderString("heap_max_in_bytes");, +        static final XContentBuilderString NON_HEAP_INIT = new XContentBuilderString("non_heap_init");, +        static final XContentBuilderString NON_HEAP_INIT_IN_BYTES = new XContentBuilderString("non_heap_init_in_bytes");, +        static final XContentBuilderString NON_HEAP_MAX = new XContentBuilderString("non_heap_max");, +        static final XContentBuilderString NON_HEAP_MAX_IN_BYTES = new XContentBuilderString("non_heap_max_in_bytes");, +    }, +, +++ b/src/main/java/org/elasticsearch/monitor/jvm/JvmInfo.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +        builder.startObject(Fields.JVM);, +        builder.field(Fields.PID, pid);, +        builder.field(Fields.VERSION, version);, +        builder.field(Fields.VM_NAME, vmName);, +        builder.field(Fields.VM_VERSION, vmVersion);, +        builder.field(Fields.VM_VENDOR, vmVendor);, +        builder.field(Fields.START_TIME, startTime);, +        builder.startObject(Fields.MEM);, +        builder.field(Fields.HEAP_INIT, mem.heapInit().toString());, +        builder.field(Fields.HEAP_INIT_IN_BYTES, mem.heapInit);, +        builder.field(Fields.HEAP_MAX, mem.heapMax().toString());, +        builder.field(Fields.HEAP_MAX_IN_BYTES, mem.heapMax);, +        builder.field(Fields.NON_HEAP_INIT, mem.nonHeapInit().toString());, +        builder.field(Fields.NON_HEAP_INIT_IN_BYTES, mem.nonHeapInit);, +        builder.field(Fields.NON_HEAP_MAX, mem.nonHeapMax().toString());, +        builder.field(Fields.NON_HEAP_MAX_IN_BYTES, mem.nonHeapMax);, +    static final class Fields {, +        static final XContentBuilderString JVM = new XContentBuilderString("jvm");, +        static final XContentBuilderString PID = new XContentBuilderString("pid");, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +        static final XContentBuilderString VM_NAME = new XContentBuilderString("vm_name");, +        static final XContentBuilderString VM_VERSION = new XContentBuilderString("vm_version");, +        static final XContentBuilderString VM_VENDOR = new XContentBuilderString("vm_vendor");, +        static final XContentBuilderString START_TIME = new XContentBuilderString("start_time");, +, +        static final XContentBuilderString MEM = new XContentBuilderString("mem");, +        static final XContentBuilderString HEAP_INIT = new XContentBuilderString("heap_init");, +        static final XContentBuilderString HEAP_INIT_IN_BYTES = new XContentBuilderString("heap_init_in_bytes");, +        static final XContentBuilderString HEAP_MAX = new XContentBuilderString("heap_max");, +        static final XContentBuilderString HEAP_MAX_IN_BYTES = new XContentBuilderString("heap_max_in_bytes");, +        static final XContentBuilderString NON_HEAP_INIT = new XContentBuilderString("non_heap_init");, +        static final XContentBuilderString NON_HEAP_INIT_IN_BYTES = new XContentBuilderString("non_heap_init_in_bytes");, +        static final XContentBuilderString NON_HEAP_MAX = new XContentBuilderString("non_heap_max");, +        static final XContentBuilderString NON_HEAP_MAX_IN_BYTES = new XContentBuilderString("non_heap_max_in_bytes");, +    }, +, +++ b/src/main/java/org/elasticsearch/monitor/jvm/JvmStats.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +        builder.startObject(Fields.JVM);, +        builder.field(Fields.TIMESTAMP, timestamp);, +        builder.field(Fields.UPTIME, uptime().format());, +        builder.field(Fields.UPTIME_IN_MILLIS, uptime().millis());, +            builder.startObject(Fields.MEM);, +            builder.field(Fields.HEAP_USED, mem.heapUsed().toString());, +            builder.field(Fields.HEAP_USED_IN_BYTES, mem.heapUsed().bytes());, +            builder.field(Fields.HEAP_COMMITTED, mem.heapCommitted().toString());, +            builder.field(Fields.HEAP_COMMITTED_IN_BYTES, mem.heapCommitted().bytes());, +            builder.field(Fields.NON_HEAP_USED, mem.nonHeapUsed().toString());, +            builder.field(Fields.NON_HEAP_USED_IN_BYTES, mem.nonHeapUsed);, +            builder.field(Fields.NON_HEAP_COMMITTED, mem.nonHeapCommitted().toString());, +            builder.field(Fields.NON_HEAP_COMMITTED_IN_BYTES, mem.nonHeapCommitted);, +            builder.startObject(Fields.POOLS);, +                builder.field(Fields.USED, pool.used().toString());, +                builder.field(Fields.USED_IN_BYTES, pool.used);, +                builder.field(Fields.MAX, pool.max().toString());, +                builder.field(Fields.MAX_IN_BYTES, pool.max);, +                builder.field(Fields.PEAK_USED, pool.peakUsed().toString());, +                builder.field(Fields.PEAK_USED_IN_BYTES, pool.peakUsed);, +                builder.field(Fields.PEAK_MAX, pool.peakMax().toString());, +                builder.field(Fields.PEAK_MAX_IN_BYTES, pool.peakMax);]