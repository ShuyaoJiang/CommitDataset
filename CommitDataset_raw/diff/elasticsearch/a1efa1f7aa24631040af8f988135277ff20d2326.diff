[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/ActionFuture.java, +     * Similar to {@link #get()}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/ActionFuture.java, +     * Similar to {@link #get()}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +++ b/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java, +import org.elasticsearch.ElasticsearchIllegalStateException;, +            Thread.currentThread().interrupt();, +            throw new ElasticsearchIllegalStateException("Future got interrupted", e);, +            Thread.currentThread().interrupt();, +            throw new ElasticsearchIllegalStateException("Future got interrupted", e);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/ActionFuture.java, +     * Similar to {@link #get()}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +++ b/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java, +import org.elasticsearch.ElasticsearchIllegalStateException;, +            Thread.currentThread().interrupt();, +            throw new ElasticsearchIllegalStateException("Future got interrupted", e);, +            Thread.currentThread().interrupt();, +            throw new ElasticsearchIllegalStateException("Future got interrupted", e);, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsAbortPolicy.java, +                    Thread.currentThread().interrupt();, +                    throw new ElasticsearchIllegalStateException("forced execution, but got interrupted", e);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/ActionFuture.java, +     * Similar to {@link #get()}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},, +     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}., +++ b/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java, +import org.elasticsearch.ElasticsearchIllegalStateException;, +            Thread.currentThread().interrupt();, +            throw new ElasticsearchIllegalStateException("Future got interrupted", e);, +            Thread.currentThread().interrupt();, +            throw new ElasticsearchIllegalStateException("Future got interrupted", e);, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsAbortPolicy.java, +                    Thread.currentThread().interrupt();, +                    throw new ElasticsearchIllegalStateException("forced execution, but got interrupted", e);, +++ b/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +            logger.debug("Interrupted closing index [{}]", e, index().name());, +            Thread.currentThread().interrupt();, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/ActionFuture.java, +     * Similar to {@link #get()}, just catching the {@link InterruptedException} with, +     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},]