[+++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, + * A bulk request holds an ordered {@link IndexRequest}s and {@link DeleteRequest}s and allows to executes, + * it in a single batch., +        sizeInBytes += request.source().length() + REQUEST_OVERHEAD;, +        for (int i = 0; i < requests.size(); i++) {, +            ActionRequestValidationException ex = requests.get(i).validate();, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, + * A bulk request holds an ordered {@link IndexRequest}s and {@link DeleteRequest}s and allows to executes, + * it in a single batch., +        sizeInBytes += request.source().length() + REQUEST_OVERHEAD;, +        for (int i = 0; i < requests.size(); i++) {, +            ActionRequestValidationException ex = requests.get(i).validate();, +++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkRequestTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.notNullValue;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, + * A bulk request holds an ordered {@link IndexRequest}s and {@link DeleteRequest}s and allows to executes, + * it in a single batch., +        sizeInBytes += request.source().length() + REQUEST_OVERHEAD;, +        for (int i = 0; i < requests.size(); i++) {, +            ActionRequestValidationException ex = requests.get(i).validate();, +++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkRequestTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.notNullValue;, +++ b/core/src/test/java/org/elasticsearch/search/simple/SimpleSearchIT.java, +        assertAcked(prepareCreate("idx").addMapping("type", "num", "type=integer"));, +        ensureGreen("idx");]