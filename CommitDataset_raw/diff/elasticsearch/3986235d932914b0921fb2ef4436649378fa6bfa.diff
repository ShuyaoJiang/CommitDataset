[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +            try {, +            } finally {, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +            try {, +            } finally {, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcess.java, +                LOGGER.error(new ParameterizedMessage("[{}] Error tailing autodetect process logs", jobId), e);, +            try (InputStream in = persistStream) {, +                stateProcessor.process(jobId, in);, +            } catch (IOException e) {, +                LOGGER.error(new ParameterizedMessage("[{}] Error reading autodetect state output", jobId), e);, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +            try {, +            } finally {, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcess.java, +                LOGGER.error(new ParameterizedMessage("[{}] Error tailing autodetect process logs", jobId), e);, +            try (InputStream in = persistStream) {, +                stateProcessor.process(jobId, in);, +            } catch (IOException e) {, +                LOGGER.error(new ParameterizedMessage("[{}] Error reading autodetect state output", jobId), e);, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutoDetectResultProcessor.java, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +    public void awaitCompletion() throws TimeoutException {, +            // Although the results won't take 30 minutes to finish, the pipe won't be closed, +            // until the state is persisted, and that can take a while, +            if (completionLatch.await(30, TimeUnit.MINUTES) == false) {, +                throw new TimeoutException("Timed out waiting for results processor to complete for job " + jobId);, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +            try {, +            } finally {, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcess.java, +                LOGGER.error(new ParameterizedMessage("[{}] Error tailing autodetect process logs", jobId), e);, +            try (InputStream in = persistStream) {, +                stateProcessor.process(jobId, in);, +            } catch (IOException e) {, +                LOGGER.error(new ParameterizedMessage("[{}] Error reading autodetect state output", jobId), e);, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutoDetectResultProcessor.java, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +    public void awaitCompletion() throws TimeoutException {, +            // Although the results won't take 30 minutes to finish, the pipe won't be closed, +            // until the state is persisted, and that can take a while, +            if (completionLatch.await(30, TimeUnit.MINUTES) == false) {, +                throw new TimeoutException("Timed out waiting for results processor to complete for job " + jobId);, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/StateProcessor.java, +import java.util.ArrayList;, +import java.util.List;, +    public void process(String jobId, InputStream in) throws IOException {, +        BytesReference bytesToDate = null;, +        List<BytesReference> newBlocks = new ArrayList<>();, +        int searchFrom = 0;, +        // The original implementation of this loop created very deeply nested, +        // CompositeBytesReference objects, which caused problems for the bulk persister., +        // This new implementation uses an intermediate List of blocks that don't contain, +        // end markers to avoid such deep nesting in the CompositeBytesReference that, +        // eventually gets created., +            BytesArray newBlock = new BytesArray(readBuf, 0, bytesRead);, +            newBlocks.add(newBlock);, +            if (findNextZeroByte(newBlock, 0, 0) == -1) {, +                searchFrom += bytesRead;, +                BytesReference newBytes = new CompositeBytesReference(newBlocks.toArray(new BytesReference[0]));, +                bytesToDate = (bytesToDate == null) ? newBytes : new CompositeBytesReference(bytesToDate, newBytes);, +                bytesToDate = splitAndPersist(jobId, bytesToDate, searchFrom);, +                searchFrom = (bytesToDate == null) ? 0 : bytesToDate.length();, +                newBlocks.clear();, +    private BytesReference splitAndPersist(String jobId, BytesReference bytesRef, int searchFrom) throws IOException {, +    void persist(String jobId, BytesReference bytes) throws IOException {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +            try {, +            } finally {, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcess.java, +                LOGGER.error(new ParameterizedMessage("[{}] Error tailing autodetect process logs", jobId), e);, +            try (InputStream in = persistStream) {, +                stateProcessor.process(jobId, in);, +            } catch (IOException e) {, +                LOGGER.error(new ParameterizedMessage("[{}] Error reading autodetect state output", jobId), e);, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutoDetectResultProcessor.java, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +    public void awaitCompletion() throws TimeoutException {, +            // Although the results won't take 30 minutes to finish, the pipe won't be closed, +            // until the state is persisted, and that can take a while, +            if (completionLatch.await(30, TimeUnit.MINUTES) == false) {, +                throw new TimeoutException("Timed out waiting for results processor to complete for job " + jobId);, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/StateProcessor.java, +import java.util.ArrayList;]