[+++ b/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +    public String script() {, +        return this.script;, +    }, +, +    public Map<String, Object> scriptParams() {, +        return this.scriptParams;, +    }, +, +    public UpdateRequest source(XContentBuilder source) throws Exception {, +        return source(source.underlyingBytes(), 0, source.underlyingBytesLength());, +    }, +, +    public UpdateRequest source(byte[] source) throws Exception {, +        return source(source, 0, source.length);, +    }, +, +    public UpdateRequest source(byte[] source, int offset, int length) throws Exception {, +        XContentType xContentType = XContentFactory.xContentType(source, offset, length);, +        XContentParser parser = XContentFactory.xContent(xContentType).createParser(source, offset, length);, +        XContentParser.Token t = parser.nextToken();, +        if (t == null) {, +            return this;, +        }, +        String currentFieldName = null;, +        while ((t = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (t == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if ("script".equals(currentFieldName)) {, +                script = parser.textOrNull();, +            } else if ("params".equals(currentFieldName)) {, +                scriptParams = parser.map();, +            } else if ("lang".equals(currentFieldName)) {, +                scriptLang = parser.text();, +            } else if ("upsert".equals(currentFieldName)) {, +                XContentBuilder builder = XContentFactory.contentBuilder(xContentType);, +                builder.copyCurrentStructure(parser);, +                safeUpsertRequest().source(builder);, +            }, +        }, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +    public String script() {, +        return this.script;, +    }, +, +    public Map<String, Object> scriptParams() {, +        return this.scriptParams;, +    }, +, +    public UpdateRequest source(XContentBuilder source) throws Exception {, +        return source(source.underlyingBytes(), 0, source.underlyingBytesLength());, +    }, +, +    public UpdateRequest source(byte[] source) throws Exception {, +        return source(source, 0, source.length);, +    }, +, +    public UpdateRequest source(byte[] source, int offset, int length) throws Exception {, +        XContentType xContentType = XContentFactory.xContentType(source, offset, length);, +        XContentParser parser = XContentFactory.xContent(xContentType).createParser(source, offset, length);, +        XContentParser.Token t = parser.nextToken();, +        if (t == null) {, +            return this;, +        }, +        String currentFieldName = null;, +        while ((t = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (t == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if ("script".equals(currentFieldName)) {, +                script = parser.textOrNull();, +            } else if ("params".equals(currentFieldName)) {, +                scriptParams = parser.map();, +            } else if ("lang".equals(currentFieldName)) {, +                scriptLang = parser.text();, +            } else if ("upsert".equals(currentFieldName)) {, +                XContentBuilder builder = XContentFactory.contentBuilder(xContentType);, +                builder.copyCurrentStructure(parser);, +                safeUpsertRequest().source(builder);, +            }, +        }, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/update/UpdateRequestBuilder.java, +    public UpdateRequestBuilder setSource(XContentBuilder source) throws Exception {, +        request.source(source);, +        return this;, +    }, +, +    public UpdateRequestBuilder setSource(byte[] source) throws Exception {, +        request.source(source);, +        return this;, +    }]