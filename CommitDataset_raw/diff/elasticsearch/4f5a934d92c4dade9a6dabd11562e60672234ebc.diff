[+++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import java.util.Optional;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.discovery.zen.ZenPing;, +import org.elasticsearch.threadpool.ThreadPool;, +public class DiscoveryModule {, +    public static final Setting<Optional<String>> DISCOVERY_HOSTS_PROVIDER_SETTING =, +        new Setting<>("discovery.zen.hosts_provider", (String)null, Optional::ofNullable, Property.NodeScope);, +    private final Discovery discovery;, +    public DiscoveryModule(Settings settings, ThreadPool threadPool, TransportService transportService, NetworkService networkService,, +                           ClusterService clusterService, Function<UnicastHostsProvider, ZenPing> createZenPing,, +        final UnicastHostsProvider hostsProvider;, +                    throw new IllegalArgumentException("Cannot register zen hosts provider [" + entry.getKey() + "] twice");, +        Optional<String> hostsProviderName = DISCOVERY_HOSTS_PROVIDER_SETTING.get(settings);, +        if (hostsProviderName.isPresent()) {, +            Supplier<UnicastHostsProvider> hostsProviderSupplier = hostProviders.get(hostsProviderName.get());, +                throw new IllegalArgumentException("Unknown zen hosts provider [" + hostsProviderName.get() + "]");, +            hostsProvider = Collections::emptyList;, +        final ZenPing zenPing = createZenPing.apply(hostsProvider);, +        Map<String, Supplier<Discovery>> discoveryTypes = new HashMap<>();, +        discoveryTypes.put("zen",, +            () -> new ZenDiscovery(settings, threadPool, transportService, clusterService, clusterService.getClusterSettings(), zenPing));, +        discoveryTypes.put("none", () -> new NoneDiscovery(settings, clusterService, clusterService.getClusterSettings()));, +        for (DiscoveryPlugin plugin : plugins) {, +            plugin.getDiscoveryTypes(threadPool, transportService, clusterService, zenPing).entrySet().forEach(entry -> {, +                if (discoveryTypes.put(entry.getKey(), entry.getValue()) != null) {, +                    throw new IllegalArgumentException("Cannot register discovery type [" + entry.getKey() + "] twice");, +            });, +        Supplier<Discovery> discoverySupplier = discoveryTypes.get(discoveryType);, +        if (discoverySupplier == null) {, +            throw new IllegalArgumentException("Unknown discovery type [" + discoveryType + "]");, +        }, +        discovery = Objects.requireNonNull(discoverySupplier.get());, +    public Discovery getDiscovery() {, +        return discovery;, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import java.util.Optional;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.discovery.zen.ZenPing;, +import org.elasticsearch.threadpool.ThreadPool;, +public class DiscoveryModule {, +    public static final Setting<Optional<String>> DISCOVERY_HOSTS_PROVIDER_SETTING =, +        new Setting<>("discovery.zen.hosts_provider", (String)null, Optional::ofNullable, Property.NodeScope);, +    private final Discovery discovery;, +    public DiscoveryModule(Settings settings, ThreadPool threadPool, TransportService transportService, NetworkService networkService,, +                           ClusterService clusterService, Function<UnicastHostsProvider, ZenPing> createZenPing,, +        final UnicastHostsProvider hostsProvider;, +                    throw new IllegalArgumentException("Cannot register zen hosts provider [" + entry.getKey() + "] twice");, +        Optional<String> hostsProviderName = DISCOVERY_HOSTS_PROVIDER_SETTING.get(settings);, +        if (hostsProviderName.isPresent()) {, +            Supplier<UnicastHostsProvider> hostsProviderSupplier = hostProviders.get(hostsProviderName.get());, +                throw new IllegalArgumentException("Unknown zen hosts provider [" + hostsProviderName.get() + "]");, +            hostsProvider = Collections::emptyList;, +        final ZenPing zenPing = createZenPing.apply(hostsProvider);, +        Map<String, Supplier<Discovery>> discoveryTypes = new HashMap<>();, +        discoveryTypes.put("zen",, +            () -> new ZenDiscovery(settings, threadPool, transportService, clusterService, clusterService.getClusterSettings(), zenPing));, +        discoveryTypes.put("none", () -> new NoneDiscovery(settings, clusterService, clusterService.getClusterSettings()));, +        for (DiscoveryPlugin plugin : plugins) {, +            plugin.getDiscoveryTypes(threadPool, transportService, clusterService, zenPing).entrySet().forEach(entry -> {, +                if (discoveryTypes.put(entry.getKey(), entry.getValue()) != null) {, +                    throw new IllegalArgumentException("Cannot register discovery type [" + entry.getKey() + "] twice");, +            });, +        Supplier<Discovery> discoverySupplier = discoveryTypes.get(discoveryType);, +        if (discoverySupplier == null) {, +            throw new IllegalArgumentException("Unknown discovery type [" + discoveryType + "]");, +        }, +        discovery = Objects.requireNonNull(discoverySupplier.get());, +    public Discovery getDiscovery() {, +        return discovery;, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.discovery.NoneDiscovery;, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +import java.util.HashMap;, +import java.util.Objects;, +import java.util.function.Supplier;, +import static org.elasticsearch.discovery.DiscoveryModule.DISCOVERY_HOSTS_PROVIDER_SETTING;, +import static org.elasticsearch.discovery.DiscoveryModule.DISCOVERY_TYPE_SETTING;, +, +, +            final DiscoveryModule discoveryModule = new DiscoveryModule(this.settings, threadPool, transportService,, +                networkService, clusterService, hostsProvider -> newZenPing(settings, threadPool, transportService, hostsProvider),, +                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery());, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import java.util.Optional;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.discovery.zen.ZenPing;, +import org.elasticsearch.threadpool.ThreadPool;, +public class DiscoveryModule {, +    public static final Setting<Optional<String>> DISCOVERY_HOSTS_PROVIDER_SETTING =, +        new Setting<>("discovery.zen.hosts_provider", (String)null, Optional::ofNullable, Property.NodeScope);, +    private final Discovery discovery;, +    public DiscoveryModule(Settings settings, ThreadPool threadPool, TransportService transportService, NetworkService networkService,, +                           ClusterService clusterService, Function<UnicastHostsProvider, ZenPing> createZenPing,, +        final UnicastHostsProvider hostsProvider;, +                    throw new IllegalArgumentException("Cannot register zen hosts provider [" + entry.getKey() + "] twice");, +        Optional<String> hostsProviderName = DISCOVERY_HOSTS_PROVIDER_SETTING.get(settings);]