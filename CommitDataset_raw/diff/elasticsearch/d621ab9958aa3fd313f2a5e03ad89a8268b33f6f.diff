[+++ b/src/main/java/org/elasticsearch/rest/action/get/RestMultiGetAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiGetRequest.add(request.param("index"), request.param("type"), sFields, defaultFetchSource, request.param("routing"), RestActions.getRestContent(request), allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/get/RestMultiGetAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiGetRequest.add(request.param("index"), request.param("type"), sFields, defaultFetchSource, request.param("routing"), RestActions.getRestContent(request), allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/percolate/RestMultiPercolateAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiPercolateRequest.add(RestActions.getRestContent(restRequest), restRequest.contentUnsafe(), allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/get/RestMultiGetAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiGetRequest.add(request.param("index"), request.param("type"), sFields, defaultFetchSource, request.param("routing"), RestActions.getRestContent(request), allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/percolate/RestMultiPercolateAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiPercolateRequest.add(RestActions.getRestContent(restRequest), restRequest.contentUnsafe(), allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/percolate/RestPercolateAction.java, +        percolateRequest.source(RestActions.getRestContent(restRequest), restRequest.contentUnsafe());, +++ b/src/main/java/org/elasticsearch/rest/action/get/RestMultiGetAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiGetRequest.add(request.param("index"), request.param("type"), sFields, defaultFetchSource, request.param("routing"), RestActions.getRestContent(request), allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/percolate/RestMultiPercolateAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiPercolateRequest.add(RestActions.getRestContent(restRequest), restRequest.contentUnsafe(), allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/percolate/RestPercolateAction.java, +        percolateRequest.source(RestActions.getRestContent(restRequest), restRequest.contentUnsafe());, +++ b/src/main/java/org/elasticsearch/rest/action/search/RestMultiSearchAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiSearchRequest.add(RestActions.getRestContent(request), request.contentUnsafe(), indices, types, request.param("search_type"), request.param("routing"), indicesOptions, allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/get/RestMultiGetAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiGetRequest.add(request.param("index"), request.param("type"), sFields, defaultFetchSource, request.param("routing"), RestActions.getRestContent(request), allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/percolate/RestMultiPercolateAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiPercolateRequest.add(RestActions.getRestContent(restRequest), restRequest.contentUnsafe(), allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/percolate/RestPercolateAction.java, +        percolateRequest.source(RestActions.getRestContent(restRequest), restRequest.contentUnsafe());, +++ b/src/main/java/org/elasticsearch/rest/action/search/RestMultiSearchAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiSearchRequest.add(RestActions.getRestContent(request), request.contentUnsafe(), indices, types, request.param("search_type"), request.param("routing"), indicesOptions, allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/support/RestActions.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +, +    /**, +     * Get Rest content from either payload or source parameter, +     * @param request Rest request, +     * @return rest content, +     */, +    public static BytesReference getRestContent(RestRequest request) {, +        assert request != null;, +, +        BytesReference content = request.content();, +        if (!request.hasContent()) {, +            String source = request.param("source");, +            if (source != null) {, +                content = new BytesArray(source);, +            }, +        }, +, +        return content;, +    }, +++ b/src/main/java/org/elasticsearch/rest/action/get/RestMultiGetAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiGetRequest.add(request.param("index"), request.param("type"), sFields, defaultFetchSource, request.param("routing"), RestActions.getRestContent(request), allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/percolate/RestMultiPercolateAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiPercolateRequest.add(RestActions.getRestContent(restRequest), restRequest.contentUnsafe(), allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/percolate/RestPercolateAction.java, +        percolateRequest.source(RestActions.getRestContent(restRequest), restRequest.contentUnsafe());, +++ b/src/main/java/org/elasticsearch/rest/action/search/RestMultiSearchAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiSearchRequest.add(RestActions.getRestContent(request), request.contentUnsafe(), indices, types, request.param("search_type"), request.param("routing"), indicesOptions, allowExplicitIndex);, +++ b/src/main/java/org/elasticsearch/rest/action/support/RestActions.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +, +    /**, +     * Get Rest content from either payload or source parameter, +     * @param request Rest request, +     * @return rest content, +     */, +    public static BytesReference getRestContent(RestRequest request) {, +        assert request != null;, +, +        BytesReference content = request.content();, +        if (!request.hasContent()) {, +            String source = request.param("source");, +            if (source != null) {, +                content = new BytesArray(source);, +            }, +        }, +, +        return content;, +    }, +++ b/src/main/java/org/elasticsearch/rest/action/termvector/RestMultiTermVectorsAction.java, +import org.elasticsearch.rest.action.support.RestActions;, +            multiTermVectorsRequest.add(template, RestActions.getRestContent(request));]