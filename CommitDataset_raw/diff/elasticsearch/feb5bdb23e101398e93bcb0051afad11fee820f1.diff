[+++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +    public float getMaxTermFrequency() {, +        return this.maxTermFrequency;, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +    public float getMaxTermFrequency() {, +        return this.maxTermFrequency;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +import org.apache.lucene.queries.ExtendedCommonTermsQuery;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.FuzzyQuery;, +import org.apache.lucene.search.Query;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.lucene.search.Queries;, +import org.elasticsearch.index.query.support.QueryParsers;, +import org.elasticsearch.index.search.MatchQuery;, +import java.util.Objects;, +    /** The default name for the match query */, +    /** The default mode terms are combined in a match query */, +    public static final Operator DEFAULT_OPERATOR = Operator.OR;, +    /** The default mode match query type */, +    public static final MatchQuery.Type DEFAULT_TYPE = MatchQuery.Type.BOOLEAN;, +    private final String fieldName;, +    private final Object value;, +    private MatchQuery.Type type = DEFAULT_TYPE;, +    private Operator operator = DEFAULT_OPERATOR;, +    private int slop = MatchQuery.DEFAULT_PHRASE_SLOP;, +    private Fuzziness fuzziness = null;, +    private int prefixLength = FuzzyQuery.defaultPrefixLength;, +    private int  maxExpansions = FuzzyQuery.defaultMaxExpansions;, +, +    private boolean fuzzyTranspositions = FuzzyQuery.defaultTranspositions;, +    private boolean lenient = MatchQuery.DEFAULT_LENIENCY;, +    private MatchQuery.ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;, +    private Float cutoffFrequency = null;, +    static final MatchQueryBuilder PROTOTYPE = new MatchQueryBuilder("","");, +     * Constructs a new match query., +    public MatchQueryBuilder(String fieldName, Object value) {, +        if (fieldName == null) {, +            throw new IllegalArgumentException("[" + NAME + "] requires fieldName");, +        }, +        if (value == null) {, +            throw new IllegalArgumentException("[" + NAME + "] requires query value");, +        }, +        this.fieldName = fieldName;, +        this.value = value;, +    /** Returns the field name used in this query. */, +    public String fieldName() {, +        return this.fieldName;, +    }, +, +    /** Returns the value used in this query. */, +    public Object value() {, +        return this.value;, +    }, +, +    /** Sets the type of the text query. */, +    public MatchQueryBuilder type(MatchQuery.Type type) {, +        if (type == null) {, +            throw new IllegalArgumentException("[" + NAME + "] requires type to be non-null");, +        }, +    /** Get the type of the query. */, +    public MatchQuery.Type type() {, +        return this.type;, +    }, +, +    /** Sets the operator to use when using a boolean query. Defaults to <tt>OR</tt>. */, +        if (operator == null) {, +            throw new IllegalArgumentException("[" + NAME + "] requires operator to be non-null");, +        }, +    /** Get the analyzer to use, if previously set, otherwise <tt>null</tt> */, +    public String analyzer() {, +        return this.analyzer;, +    }, +, +    /** Sets a slop factor for phrase queries */, +        if (slop < 0 ) {, +            throw new IllegalArgumentException("No negative slop allowed.");, +        }, +    /** Get the slop factor for phrase queries. */, +    public int slop() {, +        return this.slop;, +    }, +, +    /** Sets the fuzziness used when evaluated to a fuzzy query type. Defaults to "AUTO". */, +    /**  Gets the fuzziness used when evaluated to a fuzzy query type. */, +    public Fuzziness fuzziness() {, +        return this.fuzziness;, +    }, +, +    /**, +     * Sets the length of a length of common (non-fuzzy) prefix for fuzzy match queries, +     * @param prefixLength non-negative length of prefix, +     * @throws IllegalArgumentException in case the prefix is negative, +     */, +        if (prefixLength < 0 ) {]