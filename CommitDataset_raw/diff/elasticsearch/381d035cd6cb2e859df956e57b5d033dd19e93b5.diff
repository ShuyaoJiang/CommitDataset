[+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/TransportRestoreSnapshotAction.java, +        restoreService.restoreSnapshot(request, new ActionListener<RestoreCompletionResponse>() {, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/TransportRestoreSnapshotAction.java, +        restoreService.restoreSnapshot(request, new ActionListener<RestoreCompletionResponse>() {, +++ b/server/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;, + * First {@link #restoreSnapshot(RestoreSnapshotRequest, org.elasticsearch.action.ActionListener)}, +    public void restoreSnapshot(final RestoreSnapshotRequest request, final ActionListener<RestoreCompletionResponse> listener) {, +            final String repositoryName = request.repository();, +            Repository repository = repositoriesService.repository(repositoryName);, +            final String snapshotName = request.snapshot();, +                repositoryData.getIncompatibleSnapshotIds().stream().filter(s -> snapshotName.equals(s.getName())).findFirst();, +                throw new SnapshotRestoreException(repositoryName, snapshotName, "cannot restore incompatible snapshot");, +                .filter(s -> snapshotName.equals(s.getName())).findFirst();, +                throw new SnapshotRestoreException(repositoryName, snapshotName, "snapshot does not exist");, +            final Snapshot snapshot = new Snapshot(repositoryName, snapshotId);, +            validateSnapshotRestorable(repositoryName, snapshotInfo);, +            clusterService.submitStateUpdateTask("restore_snapshot[" + snapshotName + ']', new ClusterStateUpdateTask() {, +                                                                        request.indexSettings(), request.ignoreIndexSettings());, +                request.repository() + ":" + request.snapshot()), e);, +    private Map<String, String> renamedIndices(RestoreSnapshotRequest request, List<String> filteredIndices) {, +                throw new SnapshotRestoreException(request.repository(), request.snapshot(),, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/TransportRestoreSnapshotAction.java, +        restoreService.restoreSnapshot(request, new ActionListener<RestoreCompletionResponse>() {, +++ b/server/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;, + * First {@link #restoreSnapshot(RestoreSnapshotRequest, org.elasticsearch.action.ActionListener)}, +    public void restoreSnapshot(final RestoreSnapshotRequest request, final ActionListener<RestoreCompletionResponse> listener) {, +            final String repositoryName = request.repository();, +            Repository repository = repositoriesService.repository(repositoryName);, +            final String snapshotName = request.snapshot();, +                repositoryData.getIncompatibleSnapshotIds().stream().filter(s -> snapshotName.equals(s.getName())).findFirst();, +                throw new SnapshotRestoreException(repositoryName, snapshotName, "cannot restore incompatible snapshot");, +                .filter(s -> snapshotName.equals(s.getName())).findFirst();, +                throw new SnapshotRestoreException(repositoryName, snapshotName, "snapshot does not exist");, +            final Snapshot snapshot = new Snapshot(repositoryName, snapshotId);, +            validateSnapshotRestorable(repositoryName, snapshotInfo);, +            clusterService.submitStateUpdateTask("restore_snapshot[" + snapshotName + ']', new ClusterStateUpdateTask() {, +                                                                        request.indexSettings(), request.ignoreIndexSettings());, +                request.repository() + ":" + request.snapshot()), e);, +    private Map<String, String> renamedIndices(RestoreSnapshotRequest request, List<String> filteredIndices) {, +                throw new SnapshotRestoreException(request.repository(), request.snapshot(),, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/CcrRepositoryIT.java, +import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;, +        RestoreSnapshotRequest restoreRequest = new RestoreSnapshotRequest(leaderClusterRepoName, CcrRepository.LATEST), +            .indices(leaderIndex).indicesOptions(indicesOptions).renamePattern("^(.*)$"), +            .renameReplacement(followerIndex).masterNodeTimeout(new TimeValue(1L, TimeUnit.HOURS)), +            .indexSettings(settingsBuilder);, +        RestoreSnapshotRequest restoreRequest = new RestoreSnapshotRequest(leaderClusterRepoName, CcrRepository.LATEST), +            .indices(leaderIndex).indicesOptions(indicesOptions).renamePattern("^(.*)$"), +            .renameReplacement(followerIndex).masterNodeTimeout(new TimeValue(1L, TimeUnit.HOURS)), +            .indexSettings(settingsBuilder);, +        RestoreSnapshotRequest restoreRequest = new RestoreSnapshotRequest(leaderClusterRepoName, CcrRepository.LATEST), +            .indices(leaderIndex).indicesOptions(indicesOptions).renamePattern("^(.*)$"), +            .renameReplacement(followerIndex).masterNodeTimeout(new TimeValue(1L, TimeUnit.HOURS)), +            .indexSettings(settingsBuilder);]