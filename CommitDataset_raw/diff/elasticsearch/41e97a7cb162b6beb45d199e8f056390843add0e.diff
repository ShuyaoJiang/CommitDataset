[+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, + * Must be created using {@link RestClientBuilder}, which allows to set all the different options or just rely on defaults., +     * Returns a new {@link RestClientBuilder} to help with {@link RestClient} creation., +    public static RestClientBuilder builder(HttpHost... hosts) {, +        return new RestClientBuilder(hosts);, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, + * Must be created using {@link RestClientBuilder}, which allows to set all the different options or just rely on defaults., +     * Returns a new {@link RestClientBuilder} to help with {@link RestClient} creation., +    public static RestClientBuilder builder(HttpHost... hosts) {, +        return new RestClientBuilder(hosts);, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.client;, +, +import org.apache.http.Header;, +import org.apache.http.HttpHost;, +import org.apache.http.client.config.RequestConfig;, +import org.apache.http.impl.client.CloseableHttpClient;, +import org.apache.http.impl.client.HttpClientBuilder;, +import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;, +import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;, +import org.apache.http.nio.conn.SchemeIOSessionStrategy;, +, +import java.util.Objects;, +, +/**, + * Helps creating a new {@link RestClient}. Allows to set the most common http client configuration options when internally, + * creating the underlying {@link org.apache.http.nio.client.HttpAsyncClient}. Also allows to provide an externally created, + * {@link org.apache.http.nio.client.HttpAsyncClient} in case additional customization is needed., + */, +public final class RestClientBuilder {, +    public static final int DEFAULT_CONNECT_TIMEOUT_MILLIS = 1000;, +    public static final int DEFAULT_SOCKET_TIMEOUT_MILLIS = 10000;, +    public static final int DEFAULT_MAX_RETRY_TIMEOUT_MILLIS = DEFAULT_SOCKET_TIMEOUT_MILLIS;, +    public static final int DEFAULT_CONNECTION_REQUEST_TIMEOUT_MILLIS = 500;, +    public static final int DEFAULT_MAX_CONN_PER_ROUTE = 10;, +    public static final int DEFAULT_MAX_CONN_TOTAL = 30;, +, +    private static final Header[] EMPTY_HEADERS = new Header[0];, +, +    private final HttpHost[] hosts;, +    private int maxRetryTimeout = DEFAULT_MAX_RETRY_TIMEOUT_MILLIS;, +    private Header[] defaultHeaders = EMPTY_HEADERS;, +    private RestClient.FailureListener failureListener;, +    private HttpClientConfigCallback httpClientConfigCallback;, +    private RequestConfigCallback requestConfigCallback;, +, +    /**, +     * Creates a new builder instance and sets the hosts that the client will send requests to., +     */, +    RestClientBuilder(HttpHost... hosts) {, +        if (hosts == null || hosts.length == 0) {, +            throw new IllegalArgumentException("no hosts provided");, +        }, +        this.hosts = hosts;, +    }, +, +    /**, +     * Sets the default request headers, which will be sent along with each request, +     */, +    public RestClientBuilder setDefaultHeaders(Header[] defaultHeaders) {, +        Objects.requireNonNull(defaultHeaders, "defaultHeaders must not be null");, +        for (Header defaultHeader : defaultHeaders) {, +            Objects.requireNonNull(defaultHeader, "default header must not be null");, +        }, +        this.defaultHeaders = defaultHeaders;, +        return this;, +    }, +, +    /**, +     * Sets the {@link RestClient.FailureListener} to be notified for each request failure, +     */, +    public RestClientBuilder setFailureListener(RestClient.FailureListener failureListener) {, +        Objects.requireNonNull(failureListener, "failureListener must not be null");, +        this.failureListener = failureListener;, +        return this;, +    }, +, +    /**, +     * Sets the maximum timeout (in milliseconds) to honour in case of multiple retries of the same request., +     * {@link #DEFAULT_MAX_RETRY_TIMEOUT_MILLIS} if not specified., +     *]