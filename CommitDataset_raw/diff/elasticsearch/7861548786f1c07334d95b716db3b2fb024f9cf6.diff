[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerPipelineAggregation(new PipelineAggregationSpec(, +                SerialDiffPipelineAggregationBuilder::new,, +                SerialDiffPipelineAggregationBuilder::parse,, +                SerialDiffPipelineAggregationBuilder.AGGREGATION_NAME_FIELD), +                    .addResultReader(SerialDiffPipelineAggregator::new));, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerPipelineAggregation(new PipelineAggregationSpec(, +                SerialDiffPipelineAggregationBuilder::new,, +                SerialDiffPipelineAggregationBuilder::parse,, +                SerialDiffPipelineAggregationBuilder.AGGREGATION_NAME_FIELD), +                    .addResultReader(SerialDiffPipelineAggregator::new));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/serialdiff/SerialDiffPipelineAggregationBuilder.java, +    public static final String NAME = "serial_diff";, +        super(name, NAME, new String[] { bucketsPath });, +        super(in, NAME);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerPipelineAggregation(new PipelineAggregationSpec(, +                SerialDiffPipelineAggregationBuilder::new,, +                SerialDiffPipelineAggregationBuilder::parse,, +                SerialDiffPipelineAggregationBuilder.AGGREGATION_NAME_FIELD), +                    .addResultReader(SerialDiffPipelineAggregator::new));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/serialdiff/SerialDiffPipelineAggregationBuilder.java, +    public static final String NAME = "serial_diff";, +        super(name, NAME, new String[] { bucketsPath });, +        super(in, NAME);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/serialdiff/SerialDiffPipelineAggregator.java, +    /**, +     * Read from a stream., +     */, +    public SerialDiffPipelineAggregator(StreamInput in) throws IOException {, +        super(in);, +        formatter = in.readNamedWriteable(DocValueFormat.class);, +        gapPolicy = GapPolicy.readFrom(in);, +        lag = in.readVInt();, +    }, +, +    public void doWriteTo(StreamOutput out) throws IOException {, +        out.writeNamedWriteable(formatter);, +        gapPolicy.writeTo(out);, +        out.writeVInt(lag);, +    }, +, +    @Override, +    public String getWriteableName() {, +        return SerialDiffPipelineAggregationBuilder.NAME;]