[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +    /**, +     * The last / on going recovery status., +     */, +     * The last snapshot status performed. Can be <tt>null</tt>., +     */, +    SnapshotStatus lastSnapshotStatus();, +, +    /**, +     * The current snapshot status being performed. Can be <tt>null</tt> indicating that no snapshot, +     * is being executed currently., +     */, +    SnapshotStatus currentSnapshotStatus();, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +    /**, +     * The last / on going recovery status., +     */, +     * The last snapshot status performed. Can be <tt>null</tt>., +     */, +    SnapshotStatus lastSnapshotStatus();, +, +    /**, +     * The current snapshot status being performed. Can be <tt>null</tt> indicating that no snapshot, +     * is being executed currently., +     */, +    SnapshotStatus currentSnapshotStatus();, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                    RecoveryStatus recoveryStatus = shardGateway.recover();, +            SnapshotStatus snapshotStatus = indexShard.snapshot(new Engine.SnapshotHandler<SnapshotStatus>() {, +                @Override public SnapshotStatus snapshot(SnapshotIndexCommit snapshotIndexCommit, Translog.Snapshot translogSnapshot) throws EngineException {, +                        SnapshotStatus snapshotStatus =, +                    return null;, +            if (snapshotStatus != null) {, +                    sb.append("snapshot (").append(reason).append(") completed to ").append(shardGateway).append(", took [").append(snapshotStatus.took()).append("]\n");, +                    sb.append("    index    : version [").append(lastIndexVersion).append("], number_of_files [").append(snapshotStatus.index().numberOfFiles()).append("] with total_size [").append(snapshotStatus.index().totalSize()).append("], took [").append(snapshotStatus.index().took()).append("]\n");, +                    sb.append("    translog : id      [").append(lastTranslogId).append("], number_of_operations [").append(snapshotStatus.translog().currentTranslogOperations()).append("], took [").append(snapshotStatus.translog().took()).append("]");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +    /**, +     * The last / on going recovery status., +     */, +     * The last snapshot status performed. Can be <tt>null</tt>., +     */, +    SnapshotStatus lastSnapshotStatus();, +, +    /**, +     * The current snapshot status being performed. Can be <tt>null</tt> indicating that no snapshot, +     * is being executed currently., +     */, +    SnapshotStatus currentSnapshotStatus();, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                    RecoveryStatus recoveryStatus = shardGateway.recover();, +            SnapshotStatus snapshotStatus = indexShard.snapshot(new Engine.SnapshotHandler<SnapshotStatus>() {, +                @Override public SnapshotStatus snapshot(SnapshotIndexCommit snapshotIndexCommit, Translog.Snapshot translogSnapshot) throws EngineException {, +                        SnapshotStatus snapshotStatus =, +                    return null;, +            if (snapshotStatus != null) {, +                    sb.append("snapshot (").append(reason).append(") completed to ").append(shardGateway).append(", took [").append(snapshotStatus.took()).append("]\n");, +                    sb.append("    index    : version [").append(lastIndexVersion).append("], number_of_files [").append(snapshotStatus.index().numberOfFiles()).append("] with total_size [").append(snapshotStatus.index().totalSize()).append("], took [").append(snapshotStatus.index().took()).append("]\n");, +                    sb.append("    translog : id      [").append(lastTranslogId).append("], number_of_operations [").append(snapshotStatus.translog().currentTranslogOperations()).append("], took [").append(snapshotStatus.translog().took()).append("]");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/RecoveryStatus.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.gateway;, +, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.common.unit.TimeValue;, +, +import java.util.concurrent.atomic.AtomicLong;, +, +/**, + * @author kimchy (shay.banon), + */, +public class RecoveryStatus {, +, +    public static enum Stage {, +        NONE,, +        INDEX,]