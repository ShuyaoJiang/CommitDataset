[+++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +        return settingsBuilder(), +                // Default the watermarks to absurdly low to prevent the tests, +                // from failing on nodes without enough disk space, +                .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK, "1b"), +                .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK, "1b"), +                .build();, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +        return settingsBuilder(), +                // Default the watermarks to absurdly low to prevent the tests, +                // from failing on nodes without enough disk space, +                .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK, "1b"), +                .put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK, "1b"), +                .build();, +++ b/src/test/java/org/elasticsearch/test/InternalTestCluster.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +        // Default the watermarks to absurdly low to prevent the tests, +        // from failing on nodes without enough disk space, +        builder.put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK, "1b");, +        builder.put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK, "1b");]