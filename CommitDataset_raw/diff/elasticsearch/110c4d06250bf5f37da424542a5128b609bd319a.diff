[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +    protected long version;, +, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.primary(), copy.state(), copy.version());, +    public ImmutableShardRouting(ShardRouting copy, long version) {, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.primary(), copy.state(), copy.version());, +        this.relocatingNodeId = copy.relocatingNodeId();, +        this.version = version;, +    }, +, +                                 String relocatingNodeId, boolean primary, ShardRoutingState state, long version) {, +        this(index, shardId, currentNodeId, primary, state, version);, +    public ImmutableShardRouting(String index, int shardId, String currentNodeId, boolean primary, ShardRoutingState state, long version) {, +        this.version = version;, +    @Override public long version() {, +        return this.version;, +    }, +, +        version = in.readLong();, +        out.writeLong(version);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +    protected long version;, +, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.primary(), copy.state(), copy.version());, +    public ImmutableShardRouting(ShardRouting copy, long version) {, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.primary(), copy.state(), copy.version());, +        this.relocatingNodeId = copy.relocatingNodeId();, +        this.version = version;, +    }, +, +                                 String relocatingNodeId, boolean primary, ShardRoutingState state, long version) {, +        this(index, shardId, currentNodeId, primary, state, version);, +    public ImmutableShardRouting(String index, int shardId, String currentNodeId, boolean primary, ShardRoutingState state, long version) {, +        this.version = version;, +    @Override public long version() {, +        return this.version;, +    }, +, +        version = in.readLong();, +        out.writeLong(version);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +    public IndexRoutingTable normalizeVersions() {, +        IndexRoutingTable.Builder builder = new Builder(this.index);, +        for (IndexShardRoutingTable shardTable : shards.values()) {, +            builder.addIndexShard(shardTable.normalizeVersions());, +        }, +        return builder.build();, +    }, +, +                    addShard(shardId, null, i == 0, ShardRoutingState.UNASSIGNED, 0, fromApi);, +                // version 0, will get updated when reroute will happen, +                addShard(shardId, null, false, ShardRoutingState.UNASSIGNED, 0, false);, +        private Builder addShard(int shardId, String nodeId, boolean primary, ShardRoutingState state, long version, boolean fromApi) {, +            ImmutableShardRouting shard = new ImmutableShardRouting(index, shardId, nodeId, primary, state, version);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +    protected long version;, +, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.primary(), copy.state(), copy.version());, +    public ImmutableShardRouting(ShardRouting copy, long version) {, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.primary(), copy.state(), copy.version());, +        this.relocatingNodeId = copy.relocatingNodeId();, +        this.version = version;, +    }, +, +                                 String relocatingNodeId, boolean primary, ShardRoutingState state, long version) {, +        this(index, shardId, currentNodeId, primary, state, version);, +    public ImmutableShardRouting(String index, int shardId, String currentNodeId, boolean primary, ShardRoutingState state, long version) {, +        this.version = version;, +    @Override public long version() {, +        return this.version;, +    }, +, +        version = in.readLong();, +        out.writeLong(version);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +    public IndexRoutingTable normalizeVersions() {, +        IndexRoutingTable.Builder builder = new Builder(this.index);, +        for (IndexShardRoutingTable shardTable : shards.values()) {, +            builder.addIndexShard(shardTable.normalizeVersions());, +        }, +        return builder.build();, +    }, +, +                    addShard(shardId, null, i == 0, ShardRoutingState.UNASSIGNED, 0, fromApi);, +                // version 0, will get updated when reroute will happen, +                addShard(shardId, null, false, ShardRoutingState.UNASSIGNED, 0, false);, +        private Builder addShard(int shardId, String nodeId, boolean primary, ShardRoutingState state, long version, boolean fromApi) {, +            ImmutableShardRouting shard = new ImmutableShardRouting(index, shardId, nodeId, primary, state, version);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +     * Normalizes all shard routings to the same version.]