[+++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeFilters.java, +     * that has no wildcards is a valid IP address., +                    if (Regex.isSimpleMatchPattern(value) == false && InetAddresses.isInetAddress(value) == false) {, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeFilters.java, +     * that has no wildcards is a valid IP address., +                    if (Regex.isSimpleMatchPattern(value) == false && InetAddresses.isInetAddress(value) == false) {, +++ b/core/src/test/java/org/elasticsearch/cluster/node/DiscoveryNodeFiltersTests.java, +    public void testIpPublishFilteringMatchingWildcard() {, +        boolean matches = randomBoolean();, +        Settings settings = shuffleSettings(Settings.builder(), +            .put("xxx._publish_ip", matches ? "192.1.*" : "192.2.*"), +            .build());, +        DiscoveryNodeFilters filters = DiscoveryNodeFilters.buildFromSettings(OR, "xxx.", settings);, +, +        DiscoveryNode node = new DiscoveryNode("", "", "", "", "192.1.1.54", localAddress, emptyMap(), emptySet(), null);, +        assertThat(filters.match(node), equalTo(matches));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeFilters.java, +     * that has no wildcards is a valid IP address., +                    if (Regex.isSimpleMatchPattern(value) == false && InetAddresses.isInetAddress(value) == false) {, +++ b/core/src/test/java/org/elasticsearch/cluster/node/DiscoveryNodeFiltersTests.java, +    public void testIpPublishFilteringMatchingWildcard() {, +        boolean matches = randomBoolean();, +        Settings settings = shuffleSettings(Settings.builder(), +            .put("xxx._publish_ip", matches ? "192.1.*" : "192.2.*"), +            .build());, +        DiscoveryNodeFilters filters = DiscoveryNodeFilters.buildFromSettings(OR, "xxx.", settings);, +, +        DiscoveryNode node = new DiscoveryNode("", "", "", "", "192.1.1.54", localAddress, emptyMap(), emptySet(), null);, +        assertThat(filters.match(node), equalTo(matches));, +    }, +, +++ b/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDeciderTests.java, +        String invalidIP = randomFrom("192..168.1.1", "192.300.1.1");, +            indexScopedSettings.updateDynamicSettings(Settings.builder().put(filterSetting.getKey() + ipKey, invalidIP).build(),, +        assertEquals("invalid IP address [" + invalidIP + "] for [" + ipKey + "]", e.getMessage());, +    }, +, +    public void testWildcardIPFilter() {, +        String ipKey = randomFrom("_ip", "_host_ip", "_publish_ip");, +        Setting<Settings> filterSetting = randomFrom(IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING,, +            IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING, IndexMetaData.INDEX_ROUTING_EXCLUDE_GROUP_SETTING);, +        String wildcardIP = randomFrom("192.168.*", "192.*.1.1");, +        IndexScopedSettings indexScopedSettings = new IndexScopedSettings(Settings.EMPTY, IndexScopedSettings.BUILT_IN_INDEX_SETTINGS);, +        indexScopedSettings.updateDynamicSettings(Settings.builder().put(filterSetting.getKey() + ipKey, wildcardIP).build(),, +            Settings.builder().put(Settings.EMPTY), Settings.builder(), "test ip validation");]