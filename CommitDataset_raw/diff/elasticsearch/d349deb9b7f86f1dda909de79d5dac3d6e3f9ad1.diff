[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        addPath(policy, environment.pluginsFile(), "read,readlink");, +        addPath(policy, environment.configFile(), "read,readlink");, +        // read-write dirs, +            // we just need permission to remove the file if its elsewhere., +            policy.add(new FilePermission(environment.pidFile().toString(), "delete"));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        addPath(policy, environment.pluginsFile(), "read,readlink");, +        addPath(policy, environment.configFile(), "read,readlink");, +        // read-write dirs, +            // we just need permission to remove the file if its elsewhere., +            policy.add(new FilePermission(environment.pidFile().toString(), "delete"));, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestIndicesAction.java, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +        table.addCell("creation.date", "alias:cd;default:false;desc:index creation date (millisecond value)");, +        table.addCell("creation.date.string", "alias:cds;default:false;desc:index creation date (as string)");        , +, +            table.addCell(indexMetaData.creationDate());, +            table.addCell(new DateTime(indexMetaData.creationDate(), DateTimeZone.getDefault()));, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        addPath(policy, environment.pluginsFile(), "read,readlink");, +        addPath(policy, environment.configFile(), "read,readlink");, +        // read-write dirs, +            // we just need permission to remove the file if its elsewhere., +            policy.add(new FilePermission(environment.pidFile().toString(), "delete"));, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestIndicesAction.java, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +        table.addCell("creation.date", "alias:cd;default:false;desc:index creation date (millisecond value)");, +        table.addCell("creation.date.string", "alias:cds;default:false;desc:index creation date (as string)");        , +, +            table.addCell(indexMetaData.creationDate());, +            table.addCell(new DateTime(indexMetaData.creationDate(), DateTimeZone.getDefault()));, +, +++ b/core/src/test/java/org/elasticsearch/bootstrap/SecurityTests.java, +import org.elasticsearch.common.io.PathUtils;, +import java.security.PermissionCollection;, +import java.util.Set;, +        assertNoPermissions(esHome, permissions);, +        assertNoPermissions(esHome.getParent(), permissions);, +        assertNoPermissions(esHome.getParent().resolve("other"), permissions);, +        assertNoPermissions(PathUtils.get(realTmpDir), permissions);, +        // make a fake ES home and ensure we only grant permissions to that., +        Path esHome = path.resolve("esHome");, +        settingsBuilder.put("path.home", esHome.resolve("home").toString());, +        settingsBuilder.put("path.conf", esHome.resolve("conf").toString());, +        settingsBuilder.put("path.plugins", esHome.resolve("plugins").toString());, +        settingsBuilder.putArray("path.data", esHome.resolve("data1").toString(), esHome.resolve("data2").toString());, +        settingsBuilder.put("path.logs", esHome.resolve("logs").toString());, +        settingsBuilder.put("pidfile", esHome.resolve("test.pid").toString());, +        // the fake es home, +        assertNoPermissions(esHome, permissions);, +        // its parent, +        assertNoPermissions(esHome.getParent(), permissions);, +        // some other sibling, +        assertNoPermissions(esHome.getParent().resolve("other"), permissions);, +        // double check we overwrote java.io.tmpdir correctly for the test, +        assertNoPermissions(PathUtils.get(realTmpDir), permissions);, + , +, +        // bin file: ro, +        assertExactPermissions(new FilePermission(environment.binFile().toString(), "read,readlink"), permissions);, +        // lib file: ro, +        assertExactPermissions(new FilePermission(environment.libFile().toString(), "read,readlink"), permissions);, +        // config file: ro, +        assertExactPermissions(new FilePermission(environment.configFile().toString(), "read,readlink"), permissions);, +        // plugins: ro, +        assertExactPermissions(new FilePermission(environment.pluginsFile().toString(), "read,readlink"), permissions);, +, +            assertExactPermissions(new FilePermission(dataPath.toString(), "read,readlink,write,delete"), permissions);, +            assertExactPermissions(new FilePermission(dataPath.toString(), "read,readlink,write,delete"), permissions);, +        assertExactPermissions(new FilePermission(environment.logsFile().toString(), "read,readlink,write,delete"), permissions);, +        assertExactPermissions(new FilePermission(fakeTmpDir.toString(), "read,readlink,write,delete"), permissions);, +        // PID file: delete only (for the shutdown hook), +        assertExactPermissions(new FilePermission(environment.pidFile().toString(), "delete"), permissions);, +        assertExactPermissions(new FilePermission(link.toString(), "read"), permissions);, +        assertExactPermissions(new FilePermission(link.resolve("foo").toString(), "read"), permissions);, +        assertExactPermissions(new FilePermission(target.toString(), "read"), permissions);, +        assertExactPermissions(new FilePermission(target.resolve("foo").toString(), "read"), permissions);, +    }, +, +    /** , +     * checks exact file permissions, meaning those and only those for that path., +     */, +    static void assertExactPermissions(FilePermission expected, PermissionCollection actual) {, +        String target = expected.getName(); // see javadocs, +        Set<String> permissionSet = asSet(expected.getActions().split(","));, +        boolean read = permissionSet.remove("read");, +        boolean readlink = permissionSet.remove("readlink");, +        boolean write = permissionSet.remove("write");, +        boolean delete = permissionSet.remove("delete");, +        boolean execute = permissionSet.remove("execute");, +        assertTrue("unrecognized permission: " + permissionSet, permissionSet.isEmpty());, +        assertEquals(read, actual.implies(new FilePermission(target, "read")));, +        assertEquals(readlink, actual.implies(new FilePermission(target, "readlink")));, +        assertEquals(write, actual.implies(new FilePermission(target, "write")));, +        assertEquals(delete, actual.implies(new FilePermission(target, "delete")));, +        assertEquals(execute, actual.implies(new FilePermission(target, "execute")));]