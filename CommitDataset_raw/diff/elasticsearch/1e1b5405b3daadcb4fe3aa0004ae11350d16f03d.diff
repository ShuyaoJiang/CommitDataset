[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +        return getHistogramIntervalMillis(aggregations);, +    }, +, +    private static long getHistogramIntervalMillis(AggregatorFactories.Builder aggregations) {, +        AggregationBuilder topLevelAgg = getTopLevelAgg(aggregations);, +    private static AggregationBuilder getTopLevelAgg(AggregatorFactories.Builder aggregations) {, +        private static final int DEFAULT_AGGREGATION_CHUNKING_BUCKETS = 1000;, +            setDefaultChunkingConfig();, +        private void setDefaultChunkingConfig() {, +            if (chunkingConfig == null) {, +                if (aggregations == null) {, +                    chunkingConfig = ChunkingConfig.newAuto();, +                } else {, +                    long histogramIntervalMillis = getHistogramIntervalMillis(aggregations);, +                    chunkingConfig = ChunkingConfig.newManual(TimeValue.timeValueMillis(, +                            DEFAULT_AGGREGATION_CHUNKING_BUCKETS * histogramIntervalMillis));, +                }, +            }, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +        return getHistogramIntervalMillis(aggregations);, +    }, +, +    private static long getHistogramIntervalMillis(AggregatorFactories.Builder aggregations) {, +        AggregationBuilder topLevelAgg = getTopLevelAgg(aggregations);, +    private static AggregationBuilder getTopLevelAgg(AggregatorFactories.Builder aggregations) {, +        private static final int DEFAULT_AGGREGATION_CHUNKING_BUCKETS = 1000;, +            setDefaultChunkingConfig();, +        private void setDefaultChunkingConfig() {, +            if (chunkingConfig == null) {, +                if (aggregations == null) {, +                    chunkingConfig = ChunkingConfig.newAuto();, +                } else {, +                    long histogramIntervalMillis = getHistogramIntervalMillis(aggregations);, +                    chunkingConfig = ChunkingConfig.newManual(TimeValue.timeValueMillis(, +                            DEFAULT_AGGREGATION_CHUNKING_BUCKETS * histogramIntervalMillis));, +                }, +            }, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/DataExtractorFactory.java, +        return datafeedConfig.getChunkingConfig().isEnabled() ? new ChunkedDataExtractorFactory(, +                client, datafeedConfig, job, dataExtractorFactory) : dataExtractorFactory;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +        return getHistogramIntervalMillis(aggregations);, +    }, +, +    private static long getHistogramIntervalMillis(AggregatorFactories.Builder aggregations) {, +        AggregationBuilder topLevelAgg = getTopLevelAgg(aggregations);, +    private static AggregationBuilder getTopLevelAgg(AggregatorFactories.Builder aggregations) {, +        private static final int DEFAULT_AGGREGATION_CHUNKING_BUCKETS = 1000;, +            setDefaultChunkingConfig();, +        private void setDefaultChunkingConfig() {, +            if (chunkingConfig == null) {, +                if (aggregations == null) {, +                    chunkingConfig = ChunkingConfig.newAuto();, +                } else {, +                    long histogramIntervalMillis = getHistogramIntervalMillis(aggregations);, +                    chunkingConfig = ChunkingConfig.newManual(TimeValue.timeValueMillis(, +                            DEFAULT_AGGREGATION_CHUNKING_BUCKETS * histogramIntervalMillis));, +                }, +            }, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/DataExtractorFactory.java, +        return datafeedConfig.getChunkingConfig().isEnabled() ? new ChunkedDataExtractorFactory(, +                client, datafeedConfig, job, dataExtractorFactory) : dataExtractorFactory;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/chunked/ChunkedDataExtractorFactory.java, +                datafeedConfig.getChunkingConfig().getTimeSpan());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +        return getHistogramIntervalMillis(aggregations);, +    }, +, +    private static long getHistogramIntervalMillis(AggregatorFactories.Builder aggregations) {, +        AggregationBuilder topLevelAgg = getTopLevelAgg(aggregations);, +    private static AggregationBuilder getTopLevelAgg(AggregatorFactories.Builder aggregations) {, +        private static final int DEFAULT_AGGREGATION_CHUNKING_BUCKETS = 1000;, +            setDefaultChunkingConfig();, +        private void setDefaultChunkingConfig() {, +            if (chunkingConfig == null) {, +                if (aggregations == null) {, +                    chunkingConfig = ChunkingConfig.newAuto();, +                } else {, +                    long histogramIntervalMillis = getHistogramIntervalMillis(aggregations);, +                    chunkingConfig = ChunkingConfig.newManual(TimeValue.timeValueMillis(, +                            DEFAULT_AGGREGATION_CHUNKING_BUCKETS * histogramIntervalMillis));, +                }, +            }, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/DataExtractorFactory.java, +        return datafeedConfig.getChunkingConfig().isEnabled() ? new ChunkedDataExtractorFactory(, +                client, datafeedConfig, job, dataExtractorFactory) : dataExtractorFactory;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/chunked/ChunkedDataExtractorFactory.java, +                datafeedConfig.getChunkingConfig().getTimeSpan());, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfigTests.java, +    public void testDefaultChunkingConfig_GivenAggregations() {, +        assertThat(createDatafeedWithDateHistogram("1s").getChunkingConfig(),]