[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/ActionStatus.java, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +        private final ZonedDateTime timestamp;, +        public AckStatus(ZonedDateTime timestamp, State state) {, +            assert timestamp.getOffset() == ZoneOffset.UTC;, +            this.timestamp = timestamp;, +        public ZonedDateTime timestamp() {, +            ZonedDateTime timestamp = null;, +        public static Execution successful(ZonedDateTime timestamp) {, +        public static Execution failure(ZonedDateTime timestamp, String reason) {, +        private final ZonedDateTime timestamp;, +        private Execution(ZonedDateTime timestamp, boolean successful, String reason) {, +            this.timestamp = timestamp.withZoneSameInstant(ZoneOffset.UTC);, +        public ZonedDateTime timestamp() {, +            ZonedDateTime timestamp = null;, +        private final ZonedDateTime timestamp;, +        public Throttle(ZonedDateTime timestamp, String reason) {, +            this.timestamp = timestamp.withZoneSameInstant(ZoneOffset.UTC);, +        public ZonedDateTime timestamp() {, +            ZonedDateTime timestamp = null;, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/ActionStatus.java, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +        private final ZonedDateTime timestamp;, +        public AckStatus(ZonedDateTime timestamp, State state) {, +            assert timestamp.getOffset() == ZoneOffset.UTC;, +            this.timestamp = timestamp;, +        public ZonedDateTime timestamp() {, +            ZonedDateTime timestamp = null;, +        public static Execution successful(ZonedDateTime timestamp) {, +        public static Execution failure(ZonedDateTime timestamp, String reason) {, +        private final ZonedDateTime timestamp;, +        private Execution(ZonedDateTime timestamp, boolean successful, String reason) {, +            this.timestamp = timestamp.withZoneSameInstant(ZoneOffset.UTC);, +        public ZonedDateTime timestamp() {, +            ZonedDateTime timestamp = null;, +        private final ZonedDateTime timestamp;, +        public Throttle(ZonedDateTime timestamp, String reason) {, +            this.timestamp = timestamp.withZoneSameInstant(ZoneOffset.UTC);, +        public ZonedDateTime timestamp() {, +            ZonedDateTime timestamp = null;, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatus.java, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    private final ZonedDateTime lastChecked;, +    private final ZonedDateTime lastMetCondition;, +                       ZonedDateTime lastChecked,, +                       ZonedDateTime lastMetCondition,, +    public ZonedDateTime lastChecked() {, +    public ZonedDateTime lastMetCondition() {, +        ZonedDateTime lastChecked = null;, +        ZonedDateTime lastMetCondition = null;, +        private final ZonedDateTime timestamp;, +        public State(boolean active, ZonedDateTime timestamp) {, +        public ZonedDateTime getTimestamp() {, +            ZonedDateTime timestamp = ZonedDateTime.now(ZoneOffset.UTC);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/ActionStatus.java, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +        private final ZonedDateTime timestamp;, +        public AckStatus(ZonedDateTime timestamp, State state) {, +            assert timestamp.getOffset() == ZoneOffset.UTC;, +            this.timestamp = timestamp;, +        public ZonedDateTime timestamp() {, +            ZonedDateTime timestamp = null;, +        public static Execution successful(ZonedDateTime timestamp) {, +        public static Execution failure(ZonedDateTime timestamp, String reason) {, +        private final ZonedDateTime timestamp;, +        private Execution(ZonedDateTime timestamp, boolean successful, String reason) {, +            this.timestamp = timestamp.withZoneSameInstant(ZoneOffset.UTC);, +        public ZonedDateTime timestamp() {, +            ZonedDateTime timestamp = null;, +        private final ZonedDateTime timestamp;, +        public Throttle(ZonedDateTime timestamp, String reason) {, +            this.timestamp = timestamp.withZoneSameInstant(ZoneOffset.UTC);, +        public ZonedDateTime timestamp() {, +            ZonedDateTime timestamp = null;, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatus.java, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    private final ZonedDateTime lastChecked;, +    private final ZonedDateTime lastMetCondition;, +                       ZonedDateTime lastChecked,, +                       ZonedDateTime lastMetCondition,, +    public ZonedDateTime lastChecked() {, +    public ZonedDateTime lastMetCondition() {, +        ZonedDateTime lastChecked = null;, +        ZonedDateTime lastMetCondition = null;, +        private final ZonedDateTime timestamp;, +        public State(boolean active, ZonedDateTime timestamp) {, +        public ZonedDateTime getTimestamp() {, +            ZonedDateTime timestamp = ZonedDateTime.now(ZoneOffset.UTC);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatusDateParser.java, +import org.elasticsearch.common.time.DateFormatters;, +import java.time.Instant;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    public static ZonedDateTime parseDate(String fieldName, XContentParser parser) throws IOException {, +            return Instant.ofEpochMilli(parser.longValue()).atZone(ZoneOffset.UTC);]