[+++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.ElasticsearchWrapperException;, +import org.elasticsearch.common.Nullable;, +        final Set<Tuple<String, String>> mappingsToUpdate = Sets.newHashSet();, +                    try {, +                    } catch (WriteFailure e){, +                        Tuple<String, String> mappingsToUpdateOnFailure = e.mappingsToUpdate;, +                        if (mappingsToUpdateOnFailure != null) {, +                            mappingsToUpdate.add(mappingsToUpdateOnFailure);, +                        }, +                        throw e.getCause();, +                    }, +                        for (Tuple<String, String> mappingToUpdate : mappingsToUpdate) {, +                            updateMappingOnMaster(mappingToUpdate.v1(), mappingToUpdate.v2());, +                        }, +    static class WriteFailure extends ElasticsearchException implements ElasticsearchWrapperException {, +        @Nullable, +        final Tuple<String, String> mappingsToUpdate;, +, +        WriteFailure(Throwable cause, Tuple<String, String> mappingsToUpdate) {, +            super(null, cause);, +            assert cause != null;, +            this.mappingsToUpdate = mappingsToUpdate;, +        }, +    }, +, +        // update mapping on master if needed, we won't update changes to the same type, since once its changed, it won't have mappers added, +        Tuple<String, String> mappingsToUpdate = null;, +, +        try {, +                if (index.parsedDoc().mappingsModified()) {, +                    mappingsToUpdate = Tuple.tuple(indexRequest.index(), indexRequest.type());, +                }, +                if (create.parsedDoc().mappingsModified()) {, +                    mappingsToUpdate = Tuple.tuple(indexRequest.index(), indexRequest.type());, +                }, +        } catch (Throwable t) {, +            throw new WriteFailure(t, mappingsToUpdate);, +        }, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.ElasticsearchWrapperException;, +import org.elasticsearch.common.Nullable;, +        final Set<Tuple<String, String>> mappingsToUpdate = Sets.newHashSet();, +                    try {, +                    } catch (WriteFailure e){, +                        Tuple<String, String> mappingsToUpdateOnFailure = e.mappingsToUpdate;, +                        if (mappingsToUpdateOnFailure != null) {, +                            mappingsToUpdate.add(mappingsToUpdateOnFailure);, +                        }, +                        throw e.getCause();, +                    }, +                        for (Tuple<String, String> mappingToUpdate : mappingsToUpdate) {, +                            updateMappingOnMaster(mappingToUpdate.v1(), mappingToUpdate.v2());, +                        }, +    static class WriteFailure extends ElasticsearchException implements ElasticsearchWrapperException {, +        @Nullable, +        final Tuple<String, String> mappingsToUpdate;, +, +        WriteFailure(Throwable cause, Tuple<String, String> mappingsToUpdate) {, +            super(null, cause);, +            assert cause != null;, +            this.mappingsToUpdate = mappingsToUpdate;, +        }, +    }, +, +        // update mapping on master if needed, we won't update changes to the same type, since once its changed, it won't have mappers added, +        Tuple<String, String> mappingsToUpdate = null;, +, +        try {, +                if (index.parsedDoc().mappingsModified()) {, +                    mappingsToUpdate = Tuple.tuple(indexRequest.index(), indexRequest.type());, +                }, +                if (create.parsedDoc().mappingsModified()) {, +                    mappingsToUpdate = Tuple.tuple(indexRequest.index(), indexRequest.type());, +                }, +        } catch (Throwable t) {, +            throw new WriteFailure(t, mappingsToUpdate);, +        }, +++ b/src/test/java/org/elasticsearch/action/bulk/BulkIntegrationTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +, +package org.elasticsearch.action.bulk;]