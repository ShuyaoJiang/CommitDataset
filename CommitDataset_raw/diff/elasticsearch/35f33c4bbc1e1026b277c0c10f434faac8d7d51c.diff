[+++ b/dev-tools/build_release.py, +# Licensed to  ElasticSearch and Shay Banon under one or more, +# contributor license agreements. See the NOTICE file distributed with, +# this work for additional information regarding copyright ownership., +# The ASF licenses this file to You under the Apache License, Version 2.0, +# (the 'License'); you may not use this file except in compliance with, +# the License.  You may obtain a copy of the License at, +#, +#     http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing, software, +# distributed under the License is distributed on an 'AS IS' BASIS,, +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +# See the License for the specific language governing permissions and, +# limitations under the License., +, +import re, +import tempfile, +import shutil, +import os, +import datetime, +import json, +import time, +import sys, +import argparse, +import hmac, +import urllib, +from http.client import HTTPConnection, +, +LOG = '/tmp/release.log', +, +def log(msg):, +  f = open(LOG, mode='ab'), +  f.write(msg.encode('utf-8')), +  f.close(), +, +def run(command, quiet=False):, +  log('\n\n%s: RUN: %s\n' % (datetime.datetime.now(), command)), +  if os.system('%s >> %s 2>&1' % (command, LOG)):, +    msg = '    FAILED: %s [see log %s]' % (command, LOG), +    if not quiet:, +      print(msg), +    raise RuntimeError(msg), +, +env = os.environ, +try:, +  JAVA_HOME = env['JAVA_HOME'], +except KeyError:, +  raise RuntimeError(""", +  Please set JAVA_HOME in the env before running release tool, +  On OSX use: export JAVA_HOME=`/usr/libexec/java_home -v '1.6*'`"""), +, +try:, +  JAVA_HOME = env['JAVA6_HOME'], +except KeyError:, +  pass #no JAVA6_HOME - we rely on JAVA_HOME, +, +, +try:, +  MVN='mvn', +  # make sure mvn3 is used if mvn3 is available, +  # some systems use maven 2 as default, +  run('mvn3 --version', quiet=True), +  MVN='mvn3', +except RuntimeError:, +  pass, +, +, +def java_exe():, +  path = JAVA_HOME, +  return 'export JAVA_HOME="%s" PATH="%s/bin:$PATH" JAVACMD="%s/bin/java"' % (path, path, path), +, +def verify_java_version(version):, +  s = os.popen('%s; java -version 2>&1' % java_exe()).read(), +  if s.find(' version "%s.' % version) == -1:, +    raise RuntimeError('got wrong version for java %s:\n%s' % (version, s)), +, +def verify_mvn_java_version(version, mvn):, +  s = os.popen('%s; %s --version 2>&1' % (java_exe(), mvn)).read(), +  if s.find('Java version: %s' % version) == -1:, +    raise RuntimeError('got wrong java version for %s %s:\n%s' % (mvn, version, s)), +, +def get_head_hash():, +  return os.popen('git rev-parse --verify HEAD 2>&1').read().strip(), +, +def get_current_branch():, +  return os.popen('git rev-parse --abbrev-ref HEAD  2>&1').read().strip(), +, +verify_java_version('1.6') # we require to build with 1.6, +verify_mvn_java_version('1.6', MVN), +, +def release_branch(release):, +  return 'release_branch_%s' % (release), +, +def create_release_branch(remote, src_branch, release):, +  run('git checkout %s' % (src_branch)), +  run('git pull --rebase %s %s' % (remote, src_branch)), +  run('git checkout -b %s' % (release_branch(release))), +, +]