[+++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            try (Translog.Snapshot snapshot = getTranslog().newSnapshotFromMinSeqNo(localCheckpoint + 1)) {, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            try (Translog.Snapshot snapshot = getTranslog().newSnapshotFromMinSeqNo(localCheckpoint + 1)) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.index.engine.InternalEngineFactory;, +    protected final EngineFactory engineFactory;, +        this.engineFactory = engineFactory == null ? new InternalEngineFactory() : engineFactory;, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            try (Translog.Snapshot snapshot = getTranslog().newSnapshotFromMinSeqNo(localCheckpoint + 1)) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.index.engine.InternalEngineFactory;, +    protected final EngineFactory engineFactory;, +        this.engineFactory = engineFactory == null ? new InternalEngineFactory() : engineFactory;, +++ b/core/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +            Translog.Snapshot snapshot = indexShard.getTranslog().newSnapshotFromMinSeqNo(startingSeqNo);, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();, +    public IndexModule(IndexSettings indexSettings, AnalysisRegistry analysisRegistry) {, +                shardStoreDeleter, analysisRegistry, engineFactory.get(), circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            @Nullable EngineFactory engineFactory,, +        this.engineFactory = engineFactory;, +    final EngineFactory getEngineFactory() {, +    } // pkg private for testing, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            try (Translog.Snapshot snapshot = getTranslog().newSnapshotFromMinSeqNo(localCheckpoint + 1)) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.index.engine.InternalEngineFactory;, +    protected final EngineFactory engineFactory;, +        this.engineFactory = engineFactory == null ? new InternalEngineFactory() : engineFactory;, +++ b/core/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +            Translog.Snapshot snapshot = indexShard.getTranslog().newSnapshotFromMinSeqNo(startingSeqNo);, +++ b/core/src/main/java/org/elasticsearch/index/translog/Translog.java, +            return readersAboveMinSeqNo(minSeqNo).mapToInt(BaseTranslogReader::totalOperations).sum();, +            return readersAboveMinSeqNo(minSeqNo).mapToLong(BaseTranslogReader::sizeInBytes).sum();, +    public Snapshot newSnapshotFromMinSeqNo(long minSeqNo) throws IOException {, +            TranslogSnapshot[] snapshots = readersAboveMinSeqNo(minSeqNo).map(BaseTranslogReader::newSnapshot), +    private Stream<? extends BaseTranslogReader> readersAboveMinSeqNo(long minSeqNo) {, +        assert readLock.isHeldByCurrentThread() || writeLock.isHeldByCurrentThread() :, +        "callers of readersAboveMinSeqNo must hold a lock: readLock [", +            + readLock.isHeldByCurrentThread() + "], writeLock [" + readLock.isHeldByCurrentThread() + "]";, +                final long maxSeqNo = reader.getCheckpoint().maxSeqNo;, +                return maxSeqNo == SequenceNumbers.UNASSIGNED_SEQ_NO || maxSeqNo >= minSeqNo;, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.shard.ShardId;, +    // pkg private so tests can mock, +    final SetOnce<EngineFactory> engineFactory = new SetOnce<>();]