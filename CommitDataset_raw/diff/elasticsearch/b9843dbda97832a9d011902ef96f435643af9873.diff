[+++ b/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +                    logger.warn("[{}] New used memory {} [{}] for data of [{}] would be larger than configured breaker: {} [{}], breaking",, +++ b/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +                    logger.warn("[{}] New used memory {} [{}] for data of [{}] would be larger than configured breaker: {} [{}], breaking",, +++ b/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +import java.util.HashMap;, +import java.util.Map;, +    public static class Name {, +        private static Map<Integer, Name> names = new HashMap<>();, +        public static final Name PARENT = register(0, "parent");, +        public static final Name FIELDDATA = register(1, "fielddata");, +        public static final Name REQUEST = register(2, "request");, +, +        private final int id;, +        private final String label;, +, +        Name(int ordinal, String label) {, +            this.id = ordinal;, +            this.label = label;, +            return this.id;, +        }, +, +        public String toString() {, +            return label.toUpperCase(Locale.ENGLISH);, +        }, +, +        public static Name register(int id, String label) {, +            if (names.containsKey(id)) {, +                throw new ElasticsearchIllegalArgumentException(, +                        String.format(Locale.ENGLISH,, +                                "CircuitBreaker.Name with id %d already registered", id));, +            }, +            Name name = new Name(id, label);, +            names.put(id, name);, +            return name;, +            Name name = names.get(value);, +            if (name == null) {, +                throw new ElasticsearchIllegalArgumentException("No CircuitBreaker.Name with id: " + value);, +            return name;, +, +        @Override, +        public boolean equals(Object o) {, +            if (this == o) return true;, +            if (o == null || getClass() != o.getClass()) return false;, +, +            Name name = (Name) o;, +, +            if (id != name.id) return false;, +            if (label != null ? !label.equals(name.label) : name.label != null) return false;, +, +            return true;, +        }, +, +        @Override, +        public int hashCode() {, +            int result = id;, +            result = 31 * result + (label != null ? label.hashCode() : 0);, +            return result;, +        }, +++ b/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +                    logger.warn("[{}] New used memory {} [{}] for data of [{}] would be larger than configured breaker: {} [{}], breaking",, +++ b/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +import java.util.HashMap;, +import java.util.Map;, +    public static class Name {, +        private static Map<Integer, Name> names = new HashMap<>();, +        public static final Name PARENT = register(0, "parent");, +        public static final Name FIELDDATA = register(1, "fielddata");, +        public static final Name REQUEST = register(2, "request");, +, +        private final int id;, +        private final String label;, +, +        Name(int ordinal, String label) {, +            this.id = ordinal;, +            this.label = label;, +            return this.id;, +        }, +, +        public String toString() {, +            return label.toUpperCase(Locale.ENGLISH);, +        }, +, +        public static Name register(int id, String label) {, +            if (names.containsKey(id)) {, +                throw new ElasticsearchIllegalArgumentException(, +                        String.format(Locale.ENGLISH,, +                                "CircuitBreaker.Name with id %d already registered", id));, +            }, +            Name name = new Name(id, label);, +            names.put(id, name);, +            return name;, +            Name name = names.get(value);, +            if (name == null) {, +                throw new ElasticsearchIllegalArgumentException("No CircuitBreaker.Name with id: " + value);, +            return name;, +, +        @Override, +        public boolean equals(Object o) {, +            if (this == o) return true;]