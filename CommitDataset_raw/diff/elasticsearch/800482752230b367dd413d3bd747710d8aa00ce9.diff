[+++ b/build.gradle, +  // For reasons we don't fully understand yet, external dependencies are not picked up by Ant's optional tasks., +  // But you can easily do it in another way., +  // Only if your buildscript and Ant's optional task need the same library would you have to define it twice., +  // https://docs.gradle.org/current/userguide/organizing_build_logic.html, +  configurations {, +    buildTools, +  }, +  dependencies {, +    buildTools 'de.thetaphi:forbiddenapis:2.0', +    buildTools 'org.apache.rat:apache-rat:0.11', +  }, +++ b/build.gradle, +  // For reasons we don't fully understand yet, external dependencies are not picked up by Ant's optional tasks., +  // But you can easily do it in another way., +  // Only if your buildscript and Ant's optional task need the same library would you have to define it twice., +  // https://docs.gradle.org/current/userguide/organizing_build_logic.html, +  configurations {, +    buildTools, +  }, +  dependencies {, +    buildTools 'de.thetaphi:forbiddenapis:2.0', +    buildTools 'org.apache.rat:apache-rat:0.11', +  }, +++ b/buildSrc/build.gradle, +++ b/build.gradle, +  // For reasons we don't fully understand yet, external dependencies are not picked up by Ant's optional tasks., +  // But you can easily do it in another way., +  // Only if your buildscript and Ant's optional task need the same library would you have to define it twice., +  // https://docs.gradle.org/current/userguide/organizing_build_logic.html, +  configurations {, +    buildTools, +  }, +  dependencies {, +    buildTools 'de.thetaphi:forbiddenapis:2.0', +    buildTools 'org.apache.rat:apache-rat:0.11', +  }, +++ b/buildSrc/build.gradle, +++ /dev/null, +++ b/build.gradle, +  // For reasons we don't fully understand yet, external dependencies are not picked up by Ant's optional tasks., +  // But you can easily do it in another way., +  // Only if your buildscript and Ant's optional task need the same library would you have to define it twice., +  // https://docs.gradle.org/current/userguide/organizing_build_logic.html, +  configurations {, +    buildTools, +  }, +  dependencies {, +    buildTools 'de.thetaphi:forbiddenapis:2.0', +    buildTools 'org.apache.rat:apache-rat:0.11', +  }, +++ b/buildSrc/build.gradle, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +import org.gradle.api.DefaultTask, +import org.gradle.api.tasks.SourceSet, +import org.gradle.api.tasks.TaskAction, +, +import groovy.xml.NamespaceBuilder, +import groovy.xml.NamespaceBuilderSupport, +, +public class LicenseHeadersTask extends DefaultTask {, +    @TaskAction, +    public void check() {, +        // load rat tasks, +        AntBuilder ant = new AntBuilder(), +        ant.typedef(resource:  "org/apache/rat/anttasks/antlib.xml",, +                    uri:       "antlib:org.apache.rat.anttasks",, +                    classpath: project.configurations.buildTools.asPath), +        NamespaceBuilderSupport rat = NamespaceBuilder.newInstance(ant, "antlib:org.apache.rat.anttasks"), +        rat.report(reportFile: reportFile.absolutePath, addDefaultLicenseMatchers: true) {, +++ b/build.gradle, +  // For reasons we don't fully understand yet, external dependencies are not picked up by Ant's optional tasks., +  // But you can easily do it in another way., +  // Only if your buildscript and Ant's optional task need the same library would you have to define it twice., +  // https://docs.gradle.org/current/userguide/organizing_build_logic.html, +  configurations {, +    buildTools, +  }, +  dependencies {, +    buildTools 'de.thetaphi:forbiddenapis:2.0', +    buildTools 'org.apache.rat:apache-rat:0.11', +  }, +++ b/buildSrc/build.gradle, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +import org.gradle.api.DefaultTask, +import org.gradle.api.tasks.SourceSet, +import org.gradle.api.tasks.TaskAction, +, +import groovy.xml.NamespaceBuilder, +import groovy.xml.NamespaceBuilderSupport, +, +public class LicenseHeadersTask extends DefaultTask {, +    @TaskAction, +    public void check() {, +        // load rat tasks, +        AntBuilder ant = new AntBuilder(), +        ant.typedef(resource:  "org/apache/rat/anttasks/antlib.xml",, +                    uri:       "antlib:org.apache.rat.anttasks",]