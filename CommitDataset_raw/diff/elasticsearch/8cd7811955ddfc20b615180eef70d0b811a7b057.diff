[+++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +     * Returns whether any of the parent aggregators has {@link BucketAggregationMode#PER_BUCKET} as a bucket aggregation mode., +     */, +    public static boolean hasParentBucketAggregator(Aggregator parent) {, +        if (parent == null) {, +            return false;, +        } else if (parent.bucketAggregationMode() == BucketAggregationMode.PER_BUCKET) {, +            return true;, +        } else {, +            return hasParentBucketAggregator(parent.parent());, +        }, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +     * Returns whether any of the parent aggregators has {@link BucketAggregationMode#PER_BUCKET} as a bucket aggregation mode., +     */, +    public static boolean hasParentBucketAggregator(Aggregator parent) {, +        if (parent == null) {, +            return false;, +        } else if (parent.bucketAggregationMode() == BucketAggregationMode.PER_BUCKET) {, +            return true;, +        } else {, +            return hasParentBucketAggregator(parent.parent());, +        }, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregator.java, +            long estimatedBucketCount = 50;, +            if (hasParentBucketAggregator(parent)) {, +                estimatedBucketCount = 8;, +            }, +            return new HistogramAggregator(name, factories, rounding, order, keyed, minDocCount, roundedBounds, valuesSource, config.formatter(), estimatedBucketCount, histogramFactory, aggregationContext, parent);, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +     * Returns whether any of the parent aggregators has {@link BucketAggregationMode#PER_BUCKET} as a bucket aggregation mode., +     */, +    public static boolean hasParentBucketAggregator(Aggregator parent) {, +        if (parent == null) {, +            return false;, +        } else if (parent.bucketAggregationMode() == BucketAggregationMode.PER_BUCKET) {, +            return true;, +        } else {, +            return hasParentBucketAggregator(parent.parent());, +        }, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregator.java, +            long estimatedBucketCount = 50;, +            if (hasParentBucketAggregator(parent)) {, +                estimatedBucketCount = 8;, +            }, +            return new HistogramAggregator(name, factories, rounding, order, keyed, minDocCount, roundedBounds, valuesSource, config.formatter(), estimatedBucketCount, histogramFactory, aggregationContext, parent);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregatorFactory;, +        long estimatedBucketCount = TermsAggregatorFactory.estimatedBucketCount(valuesSource, parent);, +                if (Aggregator.hasParentBucketAggregator(parent)) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +     * Returns whether any of the parent aggregators has {@link BucketAggregationMode#PER_BUCKET} as a bucket aggregation mode., +     */, +    public static boolean hasParentBucketAggregator(Aggregator parent) {, +        if (parent == null) {, +            return false;, +        } else if (parent.bucketAggregationMode() == BucketAggregationMode.PER_BUCKET) {, +            return true;, +        } else {, +            return hasParentBucketAggregator(parent.parent());, +        }, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregator.java, +            long estimatedBucketCount = 50;, +            if (hasParentBucketAggregator(parent)) {, +                estimatedBucketCount = 8;, +            }, +            return new HistogramAggregator(name, factories, rounding, order, keyed, minDocCount, roundedBounds, valuesSource, config.formatter(), estimatedBucketCount, histogramFactory, aggregationContext, parent);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregatorFactory;, +        long estimatedBucketCount = TermsAggregatorFactory.estimatedBucketCount(valuesSource, parent);, +                if (Aggregator.hasParentBucketAggregator(parent)) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java, +    public static long estimatedBucketCount(ValuesSource valuesSource, Aggregator parent) {, +        if (Aggregator.hasParentBucketAggregator(parent)) {, +            // There is a parent that creates buckets, potentially with a very long tail of buckets with few documents, +            // Let's be conservative with memory in that case, +            estimatedBucketCount = Math.min(estimatedBucketCount, 8);, +        }, +, +        return estimatedBucketCount;, +    }, +, +    @Override, +    protected Aggregator create(ValuesSource valuesSource, long expectedBucketsCount, AggregationContext aggregationContext, Aggregator parent) {, +        long estimatedBucketCount = estimatedBucketCount(valuesSource, parent);, +, +                if (Aggregator.hasParentBucketAggregator(parent)) {]