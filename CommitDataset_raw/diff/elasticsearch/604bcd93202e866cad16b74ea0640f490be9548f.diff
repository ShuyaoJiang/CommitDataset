[+++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +                    // Could be while we were checking, more bytes arrived:, +                    totalBytes = bytesWrittenSinceCheck.addAndGet(bytes);, +++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +                    // Could be while we were checking, more bytes arrived:, +                    totalBytes = bytesWrittenSinceCheck.addAndGet(bytes);, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +        indexingMemoryController = new IndexingMemoryController(settings, threadPool, Iterables.flatten(this));, +++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +                    // Could be while we were checking, more bytes arrived:, +                    totalBytes = bytesWrittenSinceCheck.addAndGet(bytes);, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +        indexingMemoryController = new IndexingMemoryController(settings, threadPool, Iterables.flatten(this));, +++ b/core/src/test/java/org/elasticsearch/common/util/iterable/IterablesTests.java, +import org.elasticsearch.test.ESTestCase;, +, +++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +                    // Could be while we were checking, more bytes arrived:, +                    totalBytes = bytesWrittenSinceCheck.addAndGet(bytes);, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +        indexingMemoryController = new IndexingMemoryController(settings, threadPool, Iterables.flatten(this));, +++ b/core/src/test/java/org/elasticsearch/common/util/iterable/IterablesTests.java, +import org.elasticsearch.test.ESTestCase;, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ADefLink.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.painless.node;, +, +import org.elasticsearch.painless.Definition.Type;, +, +/**, + * The superclass for all LDef* (link) nodes that store or return a DEF. (Internal only.), + */, +abstract class ADefLink extends ALink {, +    , +    /**, +     * The type of the original type that was pushed on stack, set by {@link EChain} during analyze., +     * This value is only used for writing the 'store' bytecode, otherwise ignored., +     */, +    Type storeValueType = null;, +, +    ADefLink(final int line, final String location, final int size) {, +        super(line, location, size);, +    }, +, +}, +++ b/core/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +                    // Could be while we were checking, more bytes arrived:, +                    totalBytes = bytesWrittenSinceCheck.addAndGet(bytes);, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +        indexingMemoryController = new IndexingMemoryController(settings, threadPool, Iterables.flatten(this));, +++ b/core/src/test/java/org/elasticsearch/common/util/iterable/IterablesTests.java, +import org.elasticsearch.test.ESTestCase;, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ADefLink.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.painless.node;, +]