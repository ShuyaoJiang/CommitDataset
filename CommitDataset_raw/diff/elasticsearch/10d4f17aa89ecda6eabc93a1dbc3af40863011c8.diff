[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `File > Import -> Gradle -> Gradle project`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `File > Import -> Gradle -> Gradle project`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +          // so that eclipse doesn't have circular references, +          // the downside is, if you hack on test-framework, you have to gradle install, +          // the first prop detects eclipse itself, the second detects eclipse from commandline, +          if (System.getProperty("eclipse.launcher") == null && gradle.startParameter.taskNames.contains('eclipse') == false) {, +          }, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `File > Import -> Gradle -> Gradle project`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +          // so that eclipse doesn't have circular references, +          // the downside is, if you hack on test-framework, you have to gradle install, +          // the first prop detects eclipse itself, the second detects eclipse from commandline, +          if (System.getProperty("eclipse.launcher") == null && gradle.startParameter.taskNames.contains('eclipse') == false) {, +          }, +++ b/core/src/main/java/org/elasticsearch/action/get/GetRequestBuilder.java, +     * Should the source be transformed using the script to used at index time, +     * (if any)? Note that calling this without having called setFetchSource, +     * will automatically turn on source fetching., +     *, +     * @return this for chaining, +     */, +    public GetRequestBuilder setTransformSource(boolean transform) {, +        FetchSourceContext context = request.fetchSourceContext();, +        if (context == null) {, +            context = new FetchSourceContext(true);, +            request.fetchSourceContext(context);, +        }, +        context.transformSource(transform);, +        return this;, +    }, +, +    /**, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `File > Import -> Gradle -> Gradle project`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +          // so that eclipse doesn't have circular references, +          // the downside is, if you hack on test-framework, you have to gradle install, +          // the first prop detects eclipse itself, the second detects eclipse from commandline, +          if (System.getProperty("eclipse.launcher") == null && gradle.startParameter.taskNames.contains('eclipse') == false) {, +          }, +++ b/core/src/main/java/org/elasticsearch/action/get/GetRequestBuilder.java, +     * Should the source be transformed using the script to used at index time, +     * (if any)? Note that calling this without having called setFetchSource, +     * will automatically turn on source fetching., +     *, +     * @return this for chaining, +     */, +    public GetRequestBuilder setTransformSource(boolean transform) {, +        FetchSourceContext context = request.fetchSourceContext();, +        if (context == null) {, +            context = new FetchSourceContext(true);, +            request.fetchSourceContext(context);, +        }, +        context.transformSource(transform);, +        return this;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.script.ScriptService;, +, +    private final ScriptService scriptService;, +, +    public MetaDataIndexUpgradeService(Settings settings, ScriptService scriptService) {, +        this.scriptService = scriptService;, +, +                try (MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, scriptService)) {, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `File > Import -> Gradle -> Gradle project`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +          // so that eclipse doesn't have circular references, +          // the downside is, if you hack on test-framework, you have to gradle install, +          // the first prop detects eclipse itself, the second detects eclipse from commandline, +          if (System.getProperty("eclipse.launcher") == null && gradle.startParameter.taskNames.contains('eclipse') == false) {, +          }, +++ b/core/src/main/java/org/elasticsearch/action/get/GetRequestBuilder.java, +     * Should the source be transformed using the script to used at index time, +     * (if any)? Note that calling this without having called setFetchSource, +     * will automatically turn on source fetching., +     *, +     * @return this for chaining, +     */, +    public GetRequestBuilder setTransformSource(boolean transform) {]