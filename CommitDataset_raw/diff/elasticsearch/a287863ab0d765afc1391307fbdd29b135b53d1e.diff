[+++ b/src/main/java/org/elasticsearch/shield/SecurityFilter.java, +, +++ b/src/main/java/org/elasticsearch/shield/SecurityFilter.java, +, +++ b/src/main/java/org/elasticsearch/shield/authc/InternalAuthenticationService.java, +, +                if (logger.isTraceEnabled()) {, +                    logger.trace("Realm [{}] resolved auth token [{}] from transport request with action [{}]", realm.type(), token.principal(), action);, +                }, +, +++ b/src/main/java/org/elasticsearch/shield/SecurityFilter.java, +, +++ b/src/main/java/org/elasticsearch/shield/authc/InternalAuthenticationService.java, +, +                if (logger.isTraceEnabled()) {, +                    logger.trace("Realm [{}] resolved auth token [{}] from transport request with action [{}]", realm.type(), token.principal(), action);, +                }, +, +++ b/src/main/java/org/elasticsearch/shield/authz/Privilege.java, +                "internal:*",, +                "indices:monitor/*",  // added for marvel, +                "cluster:monitor/*"   // added for marvel, +++ b/src/main/java/org/elasticsearch/shield/SecurityFilter.java, +, +++ b/src/main/java/org/elasticsearch/shield/authc/InternalAuthenticationService.java, +, +                if (logger.isTraceEnabled()) {, +                    logger.trace("Realm [{}] resolved auth token [{}] from transport request with action [{}]", realm.type(), token.principal(), action);, +                }, +, +++ b/src/main/java/org/elasticsearch/shield/authz/Privilege.java, +                "internal:*",, +                "indices:monitor/*",  // added for marvel, +                "cluster:monitor/*"   // added for marvel, +++ b/src/test/java/org/elasticsearch/shield/authz/PrivilegeTests.java, +import org.elasticsearch.common.base.Predicate;, +    @Test, +    public void testSystem() throws Exception {, +        Predicate<String> predicate = Privilege.SYSTEM.predicate();, +        assertThat(predicate.apply("indices:monitor/whatever"), is(true));, +        assertThat(predicate.apply("cluster:monitor/whatever"), is(true));, +        assertThat(predicate.apply("internal:whatever"), is(true));, +        assertThat(predicate.apply("indices:whatever"), is(false));, +        assertThat(predicate.apply("cluster:whatever"), is(false));, +        assertThat(predicate.apply("whatever"), is(false));, +    }, +++ b/src/main/java/org/elasticsearch/shield/SecurityFilter.java, +, +++ b/src/main/java/org/elasticsearch/shield/authc/InternalAuthenticationService.java, +, +                if (logger.isTraceEnabled()) {, +                    logger.trace("Realm [{}] resolved auth token [{}] from transport request with action [{}]", realm.type(), token.principal(), action);, +                }, +, +++ b/src/main/java/org/elasticsearch/shield/authz/Privilege.java, +                "internal:*",, +                "indices:monitor/*",  // added for marvel, +                "cluster:monitor/*"   // added for marvel, +++ b/src/test/java/org/elasticsearch/shield/authz/PrivilegeTests.java, +import org.elasticsearch.common.base.Predicate;, +    @Test, +    public void testSystem() throws Exception {, +        Predicate<String> predicate = Privilege.SYSTEM.predicate();, +        assertThat(predicate.apply("indices:monitor/whatever"), is(true));, +        assertThat(predicate.apply("cluster:monitor/whatever"), is(true));, +        assertThat(predicate.apply("internal:whatever"), is(true));, +        assertThat(predicate.apply("indices:whatever"), is(false));, +        assertThat(predicate.apply("cluster:whatever"), is(false));, +        assertThat(predicate.apply("whatever"), is(false));, +    }, +++ b/src/test/java/org/elasticsearch/shield/authz/SystemRoleTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.shield.authz;, +, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.junit.Test;, +, +import static org.hamcrest.Matchers.*;, +, +/**, + *, + */, +public class SystemRoleTests extends ElasticsearchTestCase {, +, +    @Test, +    public void testCheck() throws Exception {, +        assertThat(SystemRole.INSTANCE.check("indices:monitor/whatever"), is(true));, +        assertThat(SystemRole.INSTANCE.check("cluster:monitor/whatever"), is(true));, +        assertThat(SystemRole.INSTANCE.check("internal:whatever"), is(true));, +        assertThat(SystemRole.INSTANCE.check("indices:whatever"), is(false));, +        assertThat(SystemRole.INSTANCE.check("cluster:whatever"), is(false));, +        assertThat(SystemRole.INSTANCE.check("whatever"), is(false));, +    }, +}]