[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/regex/Regex.java, +        int pFlags = flags == null ? 0 : flagsFromString(flags);, +        return Pattern.compile(regex, pFlags);, +    }, +, +    public static int flagsFromString(String flags) {, +            if (s.isEmpty()) {, +                continue;, +            }, +                throw new ElasticSearchIllegalArgumentException("Unknown regex flag [" + s + "]");, +        return pFlags;, +, +    public static String flagsToString(int flags) {, +        StringBuilder sb = new StringBuilder();, +        if ((flags & Pattern.CASE_INSENSITIVE) != 0) {, +            sb.append("CASE_INSENSITIVE|");, +        }, +        if ((flags & Pattern.MULTILINE) != 0) {, +            sb.append("MULTILINE|");, +        }, +        if ((flags & Pattern.DOTALL) != 0) {, +            sb.append("DOTALL|");, +        }, +        if ((flags & Pattern.UNICODE_CASE) != 0) {, +            sb.append("UNICODE_CASE|");, +        }, +        if ((flags & Pattern.CANON_EQ) != 0) {, +            sb.append("CANON_EQ|");, +        }, +        if ((flags & Pattern.UNIX_LINES) != 0) {, +            sb.append("UNIX_LINES|");, +        }, +        if ((flags & Pattern.LITERAL) != 0) {, +            sb.append("LITERAL|");, +        }, +        if ((flags & Pattern.COMMENTS) != 0) {, +            sb.append("COMMENTS|");, +        }, +        return sb.toString();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/regex/Regex.java, +        int pFlags = flags == null ? 0 : flagsFromString(flags);, +        return Pattern.compile(regex, pFlags);, +    }, +, +    public static int flagsFromString(String flags) {, +            if (s.isEmpty()) {, +                continue;, +            }, +                throw new ElasticSearchIllegalArgumentException("Unknown regex flag [" + s + "]");, +        return pFlags;, +, +    public static String flagsToString(int flags) {, +        StringBuilder sb = new StringBuilder();, +        if ((flags & Pattern.CASE_INSENSITIVE) != 0) {, +            sb.append("CASE_INSENSITIVE|");, +        }, +        if ((flags & Pattern.MULTILINE) != 0) {, +            sb.append("MULTILINE|");, +        }, +        if ((flags & Pattern.DOTALL) != 0) {, +            sb.append("DOTALL|");, +        }, +        if ((flags & Pattern.UNICODE_CASE) != 0) {, +            sb.append("UNICODE_CASE|");, +        }, +        if ((flags & Pattern.CANON_EQ) != 0) {, +            sb.append("CANON_EQ|");, +        }, +        if ((flags & Pattern.UNIX_LINES) != 0) {, +            sb.append("UNIX_LINES|");, +        }, +        if ((flags & Pattern.LITERAL) != 0) {, +            sb.append("LITERAL|");, +        }, +        if ((flags & Pattern.COMMENTS) != 0) {, +            sb.append("COMMENTS|");, +        }, +        return sb.toString();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/Facets.java, +    <T extends Facet> T facet(String name);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/regex/Regex.java, +        int pFlags = flags == null ? 0 : flagsFromString(flags);, +        return Pattern.compile(regex, pFlags);, +    }, +, +    public static int flagsFromString(String flags) {, +            if (s.isEmpty()) {, +                continue;, +            }, +                throw new ElasticSearchIllegalArgumentException("Unknown regex flag [" + s + "]");, +        return pFlags;, +, +    public static String flagsToString(int flags) {, +        StringBuilder sb = new StringBuilder();, +        if ((flags & Pattern.CASE_INSENSITIVE) != 0) {, +            sb.append("CASE_INSENSITIVE|");, +        }, +        if ((flags & Pattern.MULTILINE) != 0) {, +            sb.append("MULTILINE|");, +        }]