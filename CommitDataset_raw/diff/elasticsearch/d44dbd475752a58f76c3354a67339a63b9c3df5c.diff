[+++ b/build.gradle, +  impliesSubProjects = true, +++ b/build.gradle, +  impliesSubProjects = true, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            delete cwd, +        // running with cmd on windows will look for this with the .bat extension, +        String esScript = new File(home, 'bin/elasticsearch').toString(), +, +        File failedMarker = new File(cwd, 'run.failed'), +            // Due to how ant exec works with the spawn option, we lose all stdout/stderr from the, +            // process executed. To work around this, when spawning, we wrap the elasticsearch start, +            // command inside another shell script, which simply internally redirects the output, +            // of the real elasticsearch script. This allows ant to keep the streams open with the, +            // dummy process, but us to have the output available if there is an error in the, +            // elasticsearch start script, +            if (config.daemonize) {, +                String scriptName = 'run', +                String argsPasser = '"$@"', +                String exitMarker = '; if [ $? != 0 ]; then touch run.failed; fi', +                if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +                    scriptName += '.bat', +                    argsPasser = '%*', +                    exitMarker = '\r\n if "%errorlevel%" neq "0" ( type nul >> run.failed )', +                }, +                File wrapperScript = new File(cwd, scriptName), +                wrapperScript.setText("\"${esScript}\" ${argsPasser} > run.log 2>&1 ${exitMarker}", 'UTF-8'), +                esScript = wrapperScript.toString(), +            }, +, +                arg(value: esScript), +                esProps.each { arg(value: it) }, +                or {, +                    resourceexists {, +                        file(file: failedMarker.toString()), +                    }, +        }, +            String esCommandString = "Elasticsearch command: ${esScript} ", +            esCommandString += esProps.join(' '), +            if (ant.properties.containsKey("failed${name}".toString()) || failedMarker.exists()) {, +                // the waitfor failed, so dump any output we got (may be empty if info logging, but that is ok), +                logger.error(buffer.toString('UTF-8')), +                // also dump the log file for the startup script (which will include ES logging output to stdout), +                File startLog = new File(cwd, 'run.log'), +                if (startLog.exists()) {, +                    startLog.eachLine { line -> logger.error(line) }, +                }]