[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/loader/JsonSettingsLoader.java, +import org.elasticsearch.util.io.FastByteArrayInputStream;, +    @Override public Map<String, String> load(byte[] source) throws IOException {, +        JsonParser jp = jsonFactory.createJsonParser(new FastByteArrayInputStream(source));, +        try {, +            return load(jp);, +        } finally {, +            jp.close();, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/loader/JsonSettingsLoader.java, +import org.elasticsearch.util.io.FastByteArrayInputStream;, +    @Override public Map<String, String> load(byte[] source) throws IOException {, +        JsonParser jp = jsonFactory.createJsonParser(new FastByteArrayInputStream(source));, +        try {, +            return load(jp);, +        } finally {, +            jp.close();, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/loader/PropertiesSettingsLoader.java, +import org.elasticsearch.util.io.FastByteArrayInputStream;, +, +    @Override public Map<String, String> load(byte[] source) throws IOException {, +        Properties props = new Properties();, +        props.load(new FastByteArrayInputStream(source));, +        Map<String, String> result = newHashMap();, +        for (Map.Entry entry : props.entrySet()) {, +            result.put((String) entry.getKey(), (String) entry.getValue());, +        }, +        return result;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/loader/JsonSettingsLoader.java, +import org.elasticsearch.util.io.FastByteArrayInputStream;, +    @Override public Map<String, String> load(byte[] source) throws IOException {, +        JsonParser jp = jsonFactory.createJsonParser(new FastByteArrayInputStream(source));, +        try {, +            return load(jp);, +        } finally {, +            jp.close();, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/loader/PropertiesSettingsLoader.java, +import org.elasticsearch.util.io.FastByteArrayInputStream;, +, +    @Override public Map<String, String> load(byte[] source) throws IOException {, +        Properties props = new Properties();, +        props.load(new FastByteArrayInputStream(source));, +        Map<String, String> result = newHashMap();, +        for (Map.Entry entry : props.entrySet()) {, +            result.put((String) entry.getKey(), (String) entry.getValue());, +        }, +        return result;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/loader/SettingsLoader.java, + * @author kimchy (shay.banon), +, +    /**, +     * Loads (parses) the settings from a source bytes., +     */, +    Map<String, String> load(byte[] source) throws IOException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/loader/JsonSettingsLoader.java, +import org.elasticsearch.util.io.FastByteArrayInputStream;, +    @Override public Map<String, String> load(byte[] source) throws IOException {, +        JsonParser jp = jsonFactory.createJsonParser(new FastByteArrayInputStream(source));, +        try {, +            return load(jp);, +        } finally {, +            jp.close();, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/loader/PropertiesSettingsLoader.java, +import org.elasticsearch.util.io.FastByteArrayInputStream;, +, +    @Override public Map<String, String> load(byte[] source) throws IOException {, +        Properties props = new Properties();, +        props.load(new FastByteArrayInputStream(source));, +        Map<String, String> result = newHashMap();, +        for (Map.Entry entry : props.entrySet()) {, +            result.put((String) entry.getKey(), (String) entry.getValue());, +        }, +        return result;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/loader/SettingsLoader.java, + * @author kimchy (shay.banon), +, +    /**, +     * Loads (parses) the settings from a source bytes., +     */, +    Map<String, String> load(byte[] source) throws IOException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/loader/YamlSettingsLoader.java, +import org.elasticsearch.util.io.FastByteArrayInputStream;, + * @author kimchy (shay.banon), +    @Override public Map<String, String> load(byte[] source) throws IOException {, +        Yaml yaml = new Yaml();, +        Map<Object, Object> yamlMap = (Map<Object, Object>) yaml.load(new FastByteArrayInputStream(source));]