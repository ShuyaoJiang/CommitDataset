[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.search.SearchScrollRequest;, +    static final XContentType REQUEST_BODY_CONTENT_TYPE = XContentType.JSON;, +    static Request searchScroll(SearchScrollRequest searchScrollRequest) throws IOException {, +        HttpEntity entity = createEntity(searchScrollRequest, REQUEST_BODY_CONTENT_TYPE);, +        return new Request("GET", "/_search/scroll", Collections.emptyMap(), entity);, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.search.SearchScrollRequest;, +    static final XContentType REQUEST_BODY_CONTENT_TYPE = XContentType.JSON;, +    static Request searchScroll(SearchScrollRequest searchScrollRequest) throws IOException {, +        HttpEntity entity = createEntity(searchScrollRequest, REQUEST_BODY_CONTENT_TYPE);, +        return new Request("GET", "/_search/scroll", Collections.emptyMap(), entity);, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.search.SearchScrollRequest;, +    /**, +     * Executes a search using the Search Scroll api, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll, +     * API on elastic.co</a>, +     */, +    public SearchResponse searchScroll(SearchScrollRequest searchScrollRequest, Header... headers) throws IOException {, +        return performRequestAndParseEntity(searchScrollRequest, Request::searchScroll, SearchResponse::fromXContent, emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously executes a search using the Search Scroll api, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll, +     * API on elastic.co</a>, +     */, +    public void searchScrollAsync(SearchScrollRequest searchScrollRequest, ActionListener<SearchResponse> listener, Header... headers) {, +        performRequestAsyncAndParseEntity(searchScrollRequest, Request::searchScroll, SearchResponse::fromXContent,, +                listener, emptySet(), headers);, +    }, +, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.search.SearchScrollRequest;, +    static final XContentType REQUEST_BODY_CONTENT_TYPE = XContentType.JSON;, +    static Request searchScroll(SearchScrollRequest searchScrollRequest) throws IOException {, +        HttpEntity entity = createEntity(searchScrollRequest, REQUEST_BODY_CONTENT_TYPE);, +        return new Request("GET", "/_search/scroll", Collections.emptyMap(), entity);, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.search.SearchScrollRequest;, +    /**, +     * Executes a search using the Search Scroll api, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll, +     * API on elastic.co</a>, +     */, +    public SearchResponse searchScroll(SearchScrollRequest searchScrollRequest, Header... headers) throws IOException {, +        return performRequestAndParseEntity(searchScrollRequest, Request::searchScroll, SearchResponse::fromXContent, emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously executes a search using the Search Scroll api, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html">Search Scroll, +     * API on elastic.co</a>, +     */, +    public void searchScrollAsync(SearchScrollRequest searchScrollRequest, ActionListener<SearchResponse> listener, Header... headers) {, +        performRequestAsyncAndParseEntity(searchScrollRequest, Request::searchScroll, SearchResponse::fromXContent,, +                listener, emptySet(), headers);, +    }, +, +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestTests.java, +import org.elasticsearch.action.search.SearchScrollRequest;, +import org.elasticsearch.common.xcontent.ToXContent;, +            assertToXContentBody(searchSourceBuilder, request.entity);, +    public void testSearchScroll() throws IOException {, +        SearchScrollRequest searchScrollRequest = new SearchScrollRequest();, +        searchScrollRequest.scrollId(randomAlphaOfLengthBetween(5, 10));, +        if (randomBoolean()) {, +            searchScrollRequest.scroll(randomPositiveTimeValue());, +        }, +        Request request = Request.searchScroll(searchScrollRequest);, +        assertEquals("GET", request.method);, +        assertEquals("/_search/scroll", request.endpoint);, +        assertEquals(0, request.params.size());, +        assertToXContentBody(searchScrollRequest, request.entity);, +    }, +, +    private static void assertToXContentBody(ToXContent expectedBody, HttpEntity actualEntity) throws IOException {, +        BytesReference expectedBytes = XContentHelper.toXContent(expectedBody, Request.REQUEST_BODY_CONTENT_TYPE, false);, +        assertEquals(XContentType.JSON.mediaType(), actualEntity.getContentType().getValue());, +        assertEquals(expectedBytes, new BytesArray(EntityUtils.toByteArray(actualEntity)));, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.search.SearchScrollRequest;, +    static final XContentType REQUEST_BODY_CONTENT_TYPE = XContentType.JSON;, +    static Request searchScroll(SearchScrollRequest searchScrollRequest) throws IOException {, +        HttpEntity entity = createEntity(searchScrollRequest, REQUEST_BODY_CONTENT_TYPE);]