[+++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            return readFrom(new BytesStreamInput(data, false), localNode);, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            return readFrom(new BytesStreamInput(data, false), localNode);, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    private final boolean unsafe;, +, +    public BytesStreamInput(byte buf[], boolean unsafe) {, +        this(buf, 0, buf.length, unsafe);, +    public BytesStreamInput(byte buf[], int offset, int length, boolean unsafe) {, +        this.unsafe = unsafe;, +        if (unsafe) {, +            return readBytesHolder();, +        }, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            return readFrom(new BytesStreamInput(data, false), localNode);, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    private final boolean unsafe;, +, +    public BytesStreamInput(byte buf[], boolean unsafe) {, +        this(buf, 0, buf.length, unsafe);, +    public BytesStreamInput(byte buf[], int offset, int length, boolean unsafe) {, +        this.unsafe = unsafe;, +        if (unsafe) {, +            return readBytesHolder();, +        }, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +            BytesStreamInput siBytes = new BytesStreamInput(data, offset, length, false);, +                BytesStreamInput siBytes = new BytesStreamInput(data, offset, length, false);, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            return readFrom(new BytesStreamInput(data, false), localNode);, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    private final boolean unsafe;, +, +    public BytesStreamInput(byte buf[], boolean unsafe) {, +        this(buf, 0, buf.length, unsafe);, +    public BytesStreamInput(byte buf[], int offset, int length, boolean unsafe) {, +        this.unsafe = unsafe;, +        if (unsafe) {, +            return readBytesHolder();, +        }, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +            BytesStreamInput siBytes = new BytesStreamInput(data, offset, length, false);, +                BytesStreamInput siBytes = new BytesStreamInput(data, offset, length, false);, +++ b/src/main/java/org/elasticsearch/discovery/zen/ping/multicast/MulticastZenPing.java, +                                StreamInput input = CachedStreamInput.cachedHandles(new BytesStreamInput(datagramPacketReceive.getData(), datagramPacketReceive.getOffset() + INTERNAL_HEADER.length, datagramPacketReceive.getLength(), true));, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            return readFrom(new BytesStreamInput(data, false), localNode);, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    private final boolean unsafe;, +, +    public BytesStreamInput(byte buf[], boolean unsafe) {, +        this(buf, 0, buf.length, unsafe);, +    public BytesStreamInput(byte buf[], int offset, int length, boolean unsafe) {, +        this.unsafe = unsafe;, +        if (unsafe) {, +            return readBytesHolder();, +        }, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +            BytesStreamInput siBytes = new BytesStreamInput(data, offset, length, false);, +                BytesStreamInput siBytes = new BytesStreamInput(data, offset, length, false);, +++ b/src/main/java/org/elasticsearch/discovery/zen/ping/multicast/MulticastZenPing.java, +                                StreamInput input = CachedStreamInput.cachedHandles(new BytesStreamInput(datagramPacketReceive.getData(), datagramPacketReceive.getOffset() + INTERNAL_HEADER.length, datagramPacketReceive.getLength(), true));, +++ b/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java, +    class PublishClusterStateRequest implements Streamable {, +            StreamInput in = CachedStreamInput.cachedHandlesLzf(new BytesStreamInput(request.clusterStateInBytes, false));, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            return readFrom(new BytesStreamInput(data, false), localNode);, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    private final boolean unsafe;, +, +    public BytesStreamInput(byte buf[], boolean unsafe) {, +        this(buf, 0, buf.length, unsafe);, +    public BytesStreamInput(byte buf[], int offset, int length, boolean unsafe) {, +        this.unsafe = unsafe;, +        if (unsafe) {, +            return readBytesHolder();, +        }, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +            BytesStreamInput siBytes = new BytesStreamInput(data, offset, length, false);, +                BytesStreamInput siBytes = new BytesStreamInput(data, offset, length, false);, +++ b/src/main/java/org/elasticsearch/discovery/zen/ping/multicast/MulticastZenPing.java, +                                StreamInput input = CachedStreamInput.cachedHandles(new BytesStreamInput(datagramPacketReceive.getData(), datagramPacketReceive.getOffset() + INTERNAL_HEADER.length, datagramPacketReceive.getLength(), true));, +++ b/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java, +    class PublishClusterStateRequest implements Streamable {, +            StreamInput in = CachedStreamInput.cachedHandlesLzf(new BytesStreamInput(request.clusterStateInBytes, false));, +++ b/src/main/java/org/elasticsearch/gateway/blobstore/BlobStoreGateway.java, +                BytesStreamInput siBytes = new BytesStreamInput(data, false);, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            return readFrom(new BytesStreamInput(data, false), localNode);, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    private final boolean unsafe;, +, +    public BytesStreamInput(byte buf[], boolean unsafe) {, +        this(buf, 0, buf.length, unsafe);, +    public BytesStreamInput(byte buf[], int offset, int length, boolean unsafe) {, +        this.unsafe = unsafe;, +        if (unsafe) {, +            return readBytesHolder();, +        }]