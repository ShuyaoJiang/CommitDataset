[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupField.java, +import org.elasticsearch.index.mapper.NumberFieldMapper;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +    // these mapper types are used by the configs (metric, histo, etc) to validate field mappings, +    public static final List<String> NUMERIC_FIELD_MAPPER_TYPES;, +    static {, +        List<String> types = Stream.of(NumberFieldMapper.NumberType.values()), +            .map(NumberFieldMapper.NumberType::typeName), +            .collect(Collectors.toList());, +        types.add("scaled_float"); // have to add manually since scaled_float is in a module, +        NUMERIC_FIELD_MAPPER_TYPES = types;, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupField.java, +import org.elasticsearch.index.mapper.NumberFieldMapper;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +    // these mapper types are used by the configs (metric, histo, etc) to validate field mappings, +    public static final List<String> NUMERIC_FIELD_MAPPER_TYPES;, +    static {, +        List<String> types = Stream.of(NumberFieldMapper.NumberType.values()), +            .map(NumberFieldMapper.NumberType::typeName), +            .collect(Collectors.toList());, +        types.add("scaled_float"); // have to add manually since scaled_float is in a module, +        NUMERIC_FIELD_MAPPER_TYPES = types;, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/HistoGroupConfig.java, +                    if (RollupField.NUMERIC_FIELD_MAPPER_TYPES.contains(key)) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupField.java, +import org.elasticsearch.index.mapper.NumberFieldMapper;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +    // these mapper types are used by the configs (metric, histo, etc) to validate field mappings, +    public static final List<String> NUMERIC_FIELD_MAPPER_TYPES;, +    static {, +        List<String> types = Stream.of(NumberFieldMapper.NumberType.values()), +            .map(NumberFieldMapper.NumberType::typeName), +            .collect(Collectors.toList());, +        types.add("scaled_float"); // have to add manually since scaled_float is in a module, +        NUMERIC_FIELD_MAPPER_TYPES = types;, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/HistoGroupConfig.java, +                    if (RollupField.NUMERIC_FIELD_MAPPER_TYPES.contains(key)) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/MetricConfig.java, +                if (RollupField.NUMERIC_FIELD_MAPPER_TYPES.contains(key)) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/RollupField.java, +import org.elasticsearch.index.mapper.NumberFieldMapper;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +    // these mapper types are used by the configs (metric, histo, etc) to validate field mappings, +    public static final List<String> NUMERIC_FIELD_MAPPER_TYPES;, +    static {, +        List<String> types = Stream.of(NumberFieldMapper.NumberType.values()), +            .map(NumberFieldMapper.NumberType::typeName), +            .collect(Collectors.toList());, +        types.add("scaled_float"); // have to add manually since scaled_float is in a module, +        NUMERIC_FIELD_MAPPER_TYPES = types;, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/HistoGroupConfig.java, +                    if (RollupField.NUMERIC_FIELD_MAPPER_TYPES.contains(key)) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/MetricConfig.java, +                if (RollupField.NUMERIC_FIELD_MAPPER_TYPES.contains(key)) {, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/rollup/job/HistoGroupConfigSerializingTests.java, +import org.elasticsearch.xpack.core.rollup.RollupField;, +        String mappingType = randomFrom(RollupField.NUMERIC_FIELD_MAPPER_TYPES);, +        responseMap.put("my_field", Collections.singletonMap(mappingType, fieldCaps));]