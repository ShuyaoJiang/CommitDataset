[+++ b/core/src/main/java/org/elasticsearch/common/util/set/Sets.java, +    /**, +     * The relative complement, or difference, of the specified left and right set. Namely, the resulting set contains all the elements that, +     * are in the left set but not in the right set. Neither input is mutated by this operation, an entirely new set is returned., +     *, +     * @param left  the left set, +     * @param right the right set, +     * @param <T>   the type of the elements of the sets, +     * @return the relative complement of the left set with respect to the right set, +     */, +    /**, +     * The relative complement, or difference, of the specified left and right set, returned as a sorted set. Namely, the resulting set, +     * contains all the elements that are in the left set but not in the right set, and the set is sorted using the natural ordering of, +     * element type. Neither input is mutated by this operation, an entirely new set is returned., +     *, +     * @param left  the left set, +     * @param right the right set, +     * @param <T>   the type of the elements of the sets, +     * @return the sorted relative complement of the left set with respect to the right set, +     */, +++ b/core/src/main/java/org/elasticsearch/common/util/set/Sets.java, +    /**, +     * The relative complement, or difference, of the specified left and right set. Namely, the resulting set contains all the elements that, +     * are in the left set but not in the right set. Neither input is mutated by this operation, an entirely new set is returned., +     *, +     * @param left  the left set, +     * @param right the right set, +     * @param <T>   the type of the elements of the sets, +     * @return the relative complement of the left set with respect to the right set, +     */, +    /**, +     * The relative complement, or difference, of the specified left and right set, returned as a sorted set. Namely, the resulting set, +     * contains all the elements that are in the left set but not in the right set, and the set is sorted using the natural ordering of, +     * element type. Neither input is mutated by this operation, an entirely new set is returned., +     *, +     * @param left  the left set, +     * @param right the right set, +     * @param <T>   the type of the elements of the sets, +     * @return the sorted relative complement of the left set with respect to the right set, +     */, +++ b/core/src/test/java/org/elasticsearch/common/util/set/SetsTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.util.set;, +, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.test.ESTestCase;, +, +import java.util.HashSet;, +import java.util.Iterator;, +import java.util.Set;, +import java.util.stream.Collectors;, +import java.util.stream.IntStream;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +, +public class SetsTests extends ESTestCase {, +, +    public void testDifference() {, +        final int endExclusive = randomIntBetween(0, 256);, +        final Tuple<Set<Integer>, Set<Integer>> sets = randomSets(endExclusive);, +        final Set<Integer> difference = Sets.difference(sets.v1(), sets.v2());, +        assertDifference(endExclusive, sets, difference);, +    }, +, +    public void testSortedDifference() {, +        final int endExclusive = randomIntBetween(0, 256);, +        final Tuple<Set<Integer>, Set<Integer>> sets = randomSets(endExclusive);, +        final Set<Integer> difference = Sets.sortedDifference(sets.v1(), sets.v2());, +        assertDifference(endExclusive, sets, difference);, +        final Iterator<Integer> it = difference.iterator();, +        if (it.hasNext()) {, +            int current = it.next();, +            while (it.hasNext()) {, +                final int next = it.next();, +                assertThat(next, greaterThan(current));, +                current = next;, +            }, +        }, +    }, +, +    /**]