[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +description = 'Builds the Prelert Engine native binaries and Java classes', +import org.gradle.internal.os.OperatingSystem, +import org.gradle.plugins.ide.eclipse.model.SourceFolder, +import org.elasticsearch.gradle.precommit.LicenseHeadersTask, +import org.elasticsearch.gradle.VersionProperties, +, +import java.nio.file.Files, +import java.nio.file.Paths, +import java.nio.file.StandardCopyOption, +, +boolean isWindows = OperatingSystem.current().isWindows(), +boolean isLinux = OperatingSystem.current().isLinux(), +boolean isMacOsX = OperatingSystem.current().isMacOsX(), +, +project.ext.bash = isWindows ? "C:\\Program Files\\Git\\bin\\bash" : "/bin/bash", +, +// norelease: replace with something else when we become part of x-plugins, +project.ext.nasDirectory = isWindows ? "\\\\prelert-nas\\builds\\6.5.0\\" :, +    (isMacOsX ? "/Volumes/builds/6.5.0/" : "/export/builds/6.5.0/"), +// norelease: replace with something else when we become part of x-plugins, +project.ext.nasExtension = '_' + (System.getenv()['GIT_COMMIT'] ?: 'xxxxxxxxxxxxxx').substring(0, 14) +, +    (isWindows ? "_windows-x86_64.zip" : (isMacOsX ? "_darwin-x86_64.zip" :, +    (isLinux ? "_linux-x86_64.zip" : "_sunos-x86_64.zip"))), +, +// C++ build can be explicitly enabled or disabled, or if neither is chosen, +// it will be enabled if the necessary 3rd party dependencies are present, +String cppEnabledStr = properties.get('xpack.cpp.build', 'auto'), +if (['true', 'false', 'auto'].contains(cppEnabledStr) == false) {, +  throw new GradleException("xpack.cpp.build must be true or false, got ${cppEnabledStr}"), +}, +project.ext.cppEnabled = cppEnabledStr == 'true', +if (cppEnabledStr == 'auto') {, +    // Disable the C++ build if the 3rd party tools/libraries aren't available, +    String[] cmdArray = [ project.ext.bash, '-c', 'source cpp/set_env.sh && 3rd_party/3rd_party.sh --check' ], +    Process checkProcess = Runtime.getRuntime().exec(cmdArray, null, rootDir), +    StringBuffer checkOutput = new StringBuffer(), +    checkProcess.consumeProcessOutputStream(checkOutput), +    if (checkProcess.waitFor() == 0) {, +        project.ext.cppEnabled = true, +    } else {, +        println 'C++ dependencies not available - disabling C++ build', +        println checkOutput, +        project.ext.cppEnabled = false, +    }, +}, +, +configurations.all {, +    // check for updates every build, +    resolutionStrategy.cacheChangingModulesFor 0, 'seconds', +}, +, +buildscript {, +    repositories {, +        if (System.getProperty("repos.mavenlocal") != null) {, +            // with -Drepos.mavenlocal=true we can force checking the local .m2 repo which is useful for building against, +            // elasticsearch snapshots, +            mavenLocal(), +        }, +        mavenCentral(), +        maven {, +            name 'sonatype-snapshots', +            url "https://oss.sonatype.org/content/repositories/snapshots/", +        }, +        jcenter(), +    }, +    dependencies {, +        classpath group: 'org.elasticsearch.gradle', name: 'build-tools', version: "${elasticsearchVersion}", changing: true, +    }, +  // we must not publish to sonatype until we have set up x-plugins to only publish the parts we want to publish!, +  project.afterEvaluate {, +    if (project.plugins.hasPlugin('com.bmuschko.nexus') && project.nexus.repositoryUrl.startsWith('file://') == false) {, +      uploadArchives.enabled = false, +  onlyIf { project('kibana').bundlePlugin.enabled && project('cpp').strip.enabled }, +  baseName = 'prelert', +// norelease: this won't be needed when the pluginAll task below is removed, +class SimpleCopy extends DefaultTask {, +  String sourceFile;, +  String destFile;, +, +  @TaskAction, +  def copy() {, +    Files.copy(Paths.get(sourceFile), Paths.get(destFile), StandardCopyOption.REPLACE_EXISTING), +  }, +}, +]