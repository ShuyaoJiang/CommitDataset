[+++ b/build.gradle, +    boolean unreleased = match.group(4) != null, +    Version foundVersion = new Version(major, minor, bugfix, false, unreleased), +  versions[-1] = new Version(last.major, last.minor, last.bugfix,, +      true, last.unreleased), +++ b/build.gradle, +    boolean unreleased = match.group(4) != null, +    Version foundVersion = new Version(major, minor, bugfix, false, unreleased), +  versions[-1] = new Version(last.major, last.minor, last.bugfix,, +      true, last.unreleased), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/Version.groovy, +    /**, +     * Is the vesion listed as {@code _UNRELEASED} in Version.java., +     */, +    final boolean unreleased, +    public Version(int major, int minor, int bugfix, boolean snapshot,, +            boolean unreleased) {, +        this.id = major * 100000 + minor * 1000 + bugfix * 10 +, +            (snapshot ? 1 : 0), +        this.unreleased = unreleased, +        return new Version(parts[0] as int, parts[1] as int, bugfix as int,, +            snapshot, false), +++ b/build.gradle, +    boolean unreleased = match.group(4) != null, +    Version foundVersion = new Version(major, minor, bugfix, false, unreleased), +  versions[-1] = new Version(last.major, last.minor, last.bugfix,, +      true, last.unreleased), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/Version.groovy, +    /**, +     * Is the vesion listed as {@code _UNRELEASED} in Version.java., +     */, +    final boolean unreleased, +    public Version(int major, int minor, int bugfix, boolean snapshot,, +            boolean unreleased) {, +        this.id = major * 100000 + minor * 1000 + bugfix * 10 +, +            (snapshot ? 1 : 0), +        this.unreleased = unreleased, +        return new Version(parts[0] as int, parts[1] as int, bugfix as int,, +            snapshot, false), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +            upgradeFromVersion = project.indexCompatVersions[new Random(seed).nextInt(project.indexCompatVersions.size())], +++ b/build.gradle, +    boolean unreleased = match.group(4) != null, +    Version foundVersion = new Version(major, minor, bugfix, false, unreleased), +  versions[-1] = new Version(last.major, last.minor, last.bugfix,, +      true, last.unreleased), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/Version.groovy, +    /**, +     * Is the vesion listed as {@code _UNRELEASED} in Version.java., +     */, +    final boolean unreleased, +    public Version(int major, int minor, int bugfix, boolean snapshot,, +            boolean unreleased) {, +        this.id = major * 100000 + minor * 1000 + bugfix * 10 +, +            (snapshot ? 1 : 0), +        this.unreleased = unreleased, +        return new Version(parts[0] as int, parts[1] as int, bugfix as int,, +            snapshot, false), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +            upgradeFromVersion = project.indexCompatVersions[new Random(seed).nextInt(project.indexCompatVersions.size())], +++ b/core/build.gradle, +, +task('verifyVersions') {, +  description 'Verifies that all released versions that are indexed compatible are listed in Version.java.', +  group 'Verification', +  enabled = false == gradle.startParameter.isOffline(), +  doLast {, +    // Read the list from maven central, +    Node xml, +    new URL('https://repo1.maven.org/maven2/org/elasticsearch/elasticsearch/maven-metadata.xml').openStream().withStream { s ->, +        xml = new XmlParser().parse(s), +    }, +    Set<String> knownVersions = new TreeSet<>(xml.versioning.versions.version.collect { it.text() }.findAll { it ==~ /\d\.\d\.\d/ }), +, +    // Limit the known versions to those that should be wire compatible, +    String currentVersion = versions.elasticsearch.minus('-SNAPSHOT'), +    int prevMajor = Integer.parseInt(currentVersion.split('\\.')[0]) - 1, +    if (prevMajor == 4) {, +      // 4 didn't exist, it was 2., +      prevMajor = 2;, +    }, +    knownVersions = knownVersions.findAll { Integer.parseInt(it.split('\\.')[0]) >= prevMajor }, +, +    /* Limit the listed versions to those that have been marked as released., +     * Versions not marked as released don't get the same testing and we want, +     * to make sure that we flip all unreleased versions to released as soon, +     * as possible after release. */, +    Set<String> actualVersions = new TreeSet<>(, +      indexCompatVersions, +        .findAll { false == it.unreleased }, +        .collect { it.toString() }), +, +    // Finally, compare!, +    if (!knownVersions.equals(actualVersions)) {, +      throw new GradleException("out-of-date versions\nActual  :" +, +        actualVersions + "\nExpected:" + knownVersions +, +        "; update Version.java"), +    }, +  }, +}]