[+++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +                SearchSourceBuilder extraSource = searchSource().query(boolBuilder);, +                if (request.searchFrom() != 0) {, +                    extraSource.from(request.searchFrom());, +                }, +                if (request.searchSize() != 0) {, +                    extraSource.size(request.searchSize());, +                }, +                searchRequest.extraSource(extraSource);, +, +, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +                SearchSourceBuilder extraSource = searchSource().query(boolBuilder);, +                if (request.searchFrom() != 0) {, +                    extraSource.from(request.searchFrom());, +                }, +                if (request.searchSize() != 0) {, +                    extraSource.size(request.searchSize());, +                }, +                searchRequest.extraSource(extraSource);, +, +, +++ b/src/test/java/org/elasticsearch/mlt/MoreLikeThisActionTests.java, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import java.util.ArrayList;, +import java.util.List;, +, +    @Test, +    public void testMoreLikeThisBodyFromSize() throws Exception {, +        logger.info("Creating index test");, +        assertAcked(prepareCreate("test").addMapping("type1",, +                jsonBuilder().startObject().startObject("type1").startObject("properties"), +                        .startObject("text").field("type", "string").endObject(), +                        .endObject().endObject().endObject()));, +, +        logger.info("Running Cluster Health");, +        assertThat(ensureGreen(), equalTo(ClusterHealthStatus.GREEN));, +, +        logger.info("Indexing...");, +        List<IndexRequestBuilder> builders = new ArrayList<>(10);, +        for (int i = 1; i <= 10; i++) {, +            builders.add(client().prepareIndex("test", "type1").setSource("text", "lucene").setId(String.valueOf(i)));, +        }, +        indexRandom(true, builders);, +, +        logger.info("'size' set but 'search_from' and 'search_size' kept to defaults");, +        SearchResponse mltResponse = client().moreLikeThis(, +                moreLikeThisRequest("test").type("type1").id("1").minTermFreq(1).minDocFreq(1).include(true), +                        .searchSource(SearchSourceBuilder.searchSource().size(5))), +                .actionGet();, +        assertSearchResponse(mltResponse);, +        assertEquals(mltResponse.getHits().hits().length, 5);, +, +        logger.info("'from' set but 'search_from' and 'search_size' kept to defaults");, +        mltResponse = client().moreLikeThis(, +                moreLikeThisRequest("test").type("type1").id("1").minTermFreq(1).minDocFreq(1).include(true), +                        .searchSource(SearchSourceBuilder.searchSource().from(5))), +                .actionGet();, +        assertSearchResponse(mltResponse);, +        assertEquals(mltResponse.getHits().hits().length, 5);, +, +        logger.info("When set, 'search_from' and 'search_size' should override 'from' and 'size'");, +        mltResponse = client().moreLikeThis(, +                moreLikeThisRequest("test").type("type1").id("1").minTermFreq(1).minDocFreq(1).include(true), +                        .searchSize(10).searchFrom(2), +                        .searchSource(SearchSourceBuilder.searchSource().size(1).from(1))), +                .actionGet();, +        assertSearchResponse(mltResponse);, +        assertEquals(mltResponse.getHits().hits().length, 8);, +    }, +]