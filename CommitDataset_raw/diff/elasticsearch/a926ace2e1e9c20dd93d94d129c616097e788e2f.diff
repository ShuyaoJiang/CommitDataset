[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +    Constructor<?> compile(Loader loader, String name, String source, CompilerSettings settings) {, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, base);, +        SSource root = Walker.buildPainlessTree(scriptClassInfo, name, source, settings, definition,, +            return clazz.getConstructors()[0];, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, base);, +        SSource root = Walker.buildPainlessTree(scriptClassInfo, name, source, settings, definition,, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +    Constructor<?> compile(Loader loader, String name, String source, CompilerSettings settings) {, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, base);, +        SSource root = Walker.buildPainlessTree(scriptClassInfo, name, source, settings, definition,, +            return clazz.getConstructors()[0];, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, base);, +        SSource root = Walker.buildPainlessTree(scriptClassInfo, name, source, settings, definition,, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/GenericElasticsearchScript.java, +public abstract class GenericElasticsearchScript {, +    public GenericElasticsearchScript() {}, +, +    public static final String[] PARAMETERS = new String[] {"params", "_score", "doc", "_value", "ctx"};, +    public abstract Object execute(, +        Map<String, Object> params, double _score, Map<String, ScriptDocValues<?>> doc, Object _value, Map<?, ?> ctx);, +, +    public abstract boolean uses$_score();, +    public abstract boolean uses$ctx();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +    Constructor<?> compile(Loader loader, String name, String source, CompilerSettings settings) {, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, base);, +        SSource root = Walker.buildPainlessTree(scriptClassInfo, name, source, settings, definition,, +            return clazz.getConstructors()[0];, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, base);, +        SSource root = Walker.buildPainlessTree(scriptClassInfo, name, source, settings, definition,, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/GenericElasticsearchScript.java, +public abstract class GenericElasticsearchScript {, +    public GenericElasticsearchScript() {}, +, +    public static final String[] PARAMETERS = new String[] {"params", "_score", "doc", "_value", "ctx"};, +    public abstract Object execute(, +        Map<String, Object> params, double _score, Map<String, ScriptDocValues<?>> doc, Object _value, Map<?, ?> ctx);, +, +    public abstract boolean uses$_score();, +    public abstract boolean uses$ctx();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +import org.elasticsearch.painless.ScriptClassInfo.MethodArgument;, +    public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter) {, +                scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS);, +        for (MethodArgument arg : scriptClassInfo.getExecuteArguments()) {, +    /** Whitelist against which this script is being compiled. */, +        private boolean used;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +    Constructor<?> compile(Loader loader, String name, String source, CompilerSettings settings) {, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, base);, +        SSource root = Walker.buildPainlessTree(scriptClassInfo, name, source, settings, definition,, +            return clazz.getConstructors()[0];, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, base);, +        SSource root = Walker.buildPainlessTree(scriptClassInfo, name, source, settings, definition,, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/GenericElasticsearchScript.java, +public abstract class GenericElasticsearchScript {, +    public GenericElasticsearchScript() {}, +, +    public static final String[] PARAMETERS = new String[] {"params", "_score", "doc", "_value", "ctx"};, +    public abstract Object execute(, +        Map<String, Object> params, double _score, Map<String, ScriptDocValues<?>> doc, Object _value, Map<?, ?> ctx);, +, +    public abstract boolean uses$_score();, +    public abstract boolean uses$ctx();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +import org.elasticsearch.painless.ScriptClassInfo.MethodArgument;, +    public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter) {, +                scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS);, +        for (MethodArgument arg : scriptClassInfo.getExecuteArguments()) {, +    /** Whitelist against which this script is being compiled. */, +        private boolean used;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +    Object compile(Compiler compiler, String scriptName, String source, Map<String, String> params, Object... args) {, +            return AccessController.doPrivileged(new PrivilegedAction<Object>() {, +                public Object run() {, +                    Constructor<?> constructor = compiler.compile(loader, name, source, compilerSettings);, +                        return constructor.newInstance(args);, +            throw convertToScriptException(scriptName == null ? source : scriptName, source, e);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +    Constructor<?> compile(Loader loader, String name, String source, CompilerSettings settings) {, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, base);, +        SSource root = Walker.buildPainlessTree(scriptClassInfo, name, source, settings, definition,, +            return clazz.getConstructors()[0];, +        ScriptClassInfo scriptClassInfo = new ScriptClassInfo(definition, base);, +        SSource root = Walker.buildPainlessTree(scriptClassInfo, name, source, settings, definition,, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/GenericElasticsearchScript.java, +public abstract class GenericElasticsearchScript {, +    public GenericElasticsearchScript() {}, +, +    public static final String[] PARAMETERS = new String[] {"params", "_score", "doc", "_value", "ctx"};, +    public abstract Object execute(, +        Map<String, Object> params, double _score, Map<String, ScriptDocValues<?>> doc, Object _value, Map<?, ?> ctx);, +, +    public abstract boolean uses$_score();, +    public abstract boolean uses$ctx();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +import org.elasticsearch.painless.ScriptClassInfo.MethodArgument;, +    public static Locals newMainMethodScope(ScriptClassInfo scriptClassInfo, Locals programScope, int maxLoopCounter) {, +                scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS);]