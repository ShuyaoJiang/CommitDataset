[+++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +            return new double[] { oneMinuteLoadAverage, -1, -1 };, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +            return new double[] { oneMinuteLoadAverage, -1, -1 };, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsStats.java, +            if (cpu.getLoadAverage() != null) {, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +            return new double[] { oneMinuteLoadAverage, -1, -1 };, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsStats.java, +            if (cpu.getLoadAverage() != null) {, +++ b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java, +import static org.hamcrest.Matchers.lessThan;, +            if (loadAverage != null) {, +                assertThat(loadAverage[0], equalTo((double) -1));, +                assertThat(loadAverage[1], equalTo((double) -1));, +                assertThat(loadAverage[2], equalTo((double) -1));, +            }, +            // one minute load average is available, but 10-minute and 15-minute load averages are not, +            // load average can be negative if not available or not computed yet, otherwise it should be >= 0, +                assertThat(loadAverage[0], anyOf(lessThan((double) 0), greaterThanOrEqualTo((double) 0)));, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +            return new double[] { oneMinuteLoadAverage, -1, -1 };, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsStats.java, +            if (cpu.getLoadAverage() != null) {, +++ b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java, +import static org.hamcrest.Matchers.lessThan;, +            if (loadAverage != null) {, +                assertThat(loadAverage[0], equalTo((double) -1));, +                assertThat(loadAverage[1], equalTo((double) -1));, +                assertThat(loadAverage[2], equalTo((double) -1));, +            }, +            // one minute load average is available, but 10-minute and 15-minute load averages are not, +            // load average can be negative if not available or not computed yet, otherwise it should be >= 0, +                assertThat(loadAverage[0], anyOf(lessThan((double) 0), greaterThanOrEqualTo((double) 0)));, +++ b/plugins/lang-plan-a/build.gradle, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +            return new double[] { oneMinuteLoadAverage, -1, -1 };, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsStats.java, +            if (cpu.getLoadAverage() != null) {, +++ b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java, +import static org.hamcrest.Matchers.lessThan;, +            if (loadAverage != null) {, +                assertThat(loadAverage[0], equalTo((double) -1));, +                assertThat(loadAverage[1], equalTo((double) -1));, +                assertThat(loadAverage[2], equalTo((double) -1));, +            }, +            // one minute load average is available, but 10-minute and 15-minute load averages are not, +            // load average can be negative if not available or not computed yet, otherwise it should be >= 0, +                assertThat(loadAverage[0], anyOf(lessThan((double) 0), greaterThanOrEqualTo((double) 0)));, +++ b/plugins/lang-plan-a/build.gradle, +++ b/plugins/lang-plan-a/src/main/java/org/elasticsearch/plan/a/Definition.java, +        final Class<?>[] classes = new Class<?>[args.length];, +        final Class<?>[] classes = new Class<?>[args.length];, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +            return new double[] { oneMinuteLoadAverage, -1, -1 };, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsStats.java, +            if (cpu.getLoadAverage() != null) {, +++ b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java, +import static org.hamcrest.Matchers.lessThan;, +            if (loadAverage != null) {, +                assertThat(loadAverage[0], equalTo((double) -1));, +                assertThat(loadAverage[1], equalTo((double) -1));, +                assertThat(loadAverage[2], equalTo((double) -1));, +            }, +            // one minute load average is available, but 10-minute and 15-minute load averages are not, +            // load average can be negative if not available or not computed yet, otherwise it should be >= 0, +                assertThat(loadAverage[0], anyOf(lessThan((double) 0), greaterThanOrEqualTo((double) 0)));, +++ b/plugins/lang-plan-a/build.gradle, +++ b/plugins/lang-plan-a/src/main/java/org/elasticsearch/plan/a/Definition.java, +        final Class<?>[] classes = new Class<?>[args.length];, +        final Class<?>[] classes = new Class<?>[args.length];, +++ b/plugins/lang-plan-a/src/main/java/org/elasticsearch/plan/a/Utility.java, +        return (char)value;, +        return (char)value;, +        return value;, +        return value;, +        return value;, +        return value;, +        return (char)value;, +        return (char)value;, +        return (char)value;, +        return (char)value;, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +            return new double[] { oneMinuteLoadAverage, -1, -1 };, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsStats.java, +            if (cpu.getLoadAverage() != null) {, +++ b/core/src/test/java/org/elasticsearch/monitor/os/OsProbeTests.java, +import static org.hamcrest.Matchers.lessThan;, +            if (loadAverage != null) {, +                assertThat(loadAverage[0], equalTo((double) -1));, +                assertThat(loadAverage[1], equalTo((double) -1));, +                assertThat(loadAverage[2], equalTo((double) -1));, +            }, +            // one minute load average is available, but 10-minute and 15-minute load averages are not, +            // load average can be negative if not available or not computed yet, otherwise it should be >= 0, +                assertThat(loadAverage[0], anyOf(lessThan((double) 0), greaterThanOrEqualTo((double) 0)));, +++ b/plugins/lang-plan-a/build.gradle, +++ b/plugins/lang-plan-a/src/main/java/org/elasticsearch/plan/a/Definition.java, +        final Class<?>[] classes = new Class<?>[args.length];, +        final Class<?>[] classes = new Class<?>[args.length];]