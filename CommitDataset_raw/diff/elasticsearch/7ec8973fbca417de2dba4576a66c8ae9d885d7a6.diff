[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        for (IndexService indexService : indicesService) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        for (IndexService indexService : indicesService) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/recovery/TransportRecoveryAction.java, +                    indexService.shardInjectorSafe(request.shardId().id()).getInstance(IndexShardGatewayService.class);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        for (IndexService indexService : indicesService) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/recovery/TransportRecoveryAction.java, +                    indexService.shardInjectorSafe(request.shardId().id()).getInstance(IndexShardGatewayService.class);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        for (IndexService indexService : indicesService) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/recovery/TransportRecoveryAction.java, +                    indexService.shardInjectorSafe(request.shardId().id()).getInstance(IndexShardGatewayService.class);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/component/LifecycleComponent.java, +import org.elasticsearch.common.lease.Releasable;, +, +import java.io.Closeable;, +public interface LifecycleComponent<T> extends Releasable {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        for (IndexService indexService : indicesService) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/recovery/TransportRecoveryAction.java, +                    indexService.shardInjectorSafe(request.shardId().id()).getInstance(IndexShardGatewayService.class);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/component/LifecycleComponent.java, +import org.elasticsearch.common.lease.Releasable;, +, +import java.io.Closeable;, +public interface LifecycleComponent<T> extends Releasable {, +++ b/src/main/java/org/elasticsearch/common/inject/Injectors.java, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        for (IndexService indexService : indicesService) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/recovery/TransportRecoveryAction.java, +                    indexService.shardInjectorSafe(request.shardId().id()).getInstance(IndexShardGatewayService.class);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/component/LifecycleComponent.java, +import org.elasticsearch.common.lease.Releasable;, +, +import java.io.Closeable;, +public interface LifecycleComponent<T> extends Releasable {, +++ b/src/main/java/org/elasticsearch/common/inject/Injectors.java, +++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +        try (ShardLock lock = shardLock(shardId)) {, +            deleteShardDirectoryUnderLock(lock, indexSettings);, +        }, +    }, +, +    /**, +     * Deletes a shard data directory. Note: this method assumes that the shard lock is acquired, +     *, +     * @param lock the shards lock, +     * @throws IOException if an IOException occurs, +     */, +    public void deleteShardDirectoryUnderLock(ShardLock lock, @IndexSettings Settings indexSettings) throws IOException {, +        assert indexSettings != ImmutableSettings.EMPTY;, +        final ShardId shardId = lock.getShardId();, +        assert isShardLocked(shardId) : "shard " + shardId + " is not locked";, +        final Path[] paths = shardPaths(shardId);, +, +    private boolean isShardLocked(ShardId id) {, +        try {, +            shardLock(id, 0).close();, +            return false;, +        } catch (IOException ex) {, +            return true;, +        }, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +        for (IndexService indexService : indicesService) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/recovery/TransportRecoveryAction.java, +                    indexService.shardInjectorSafe(request.shardId().id()).getInstance(IndexShardGatewayService.class);, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/component/LifecycleComponent.java, +import org.elasticsearch.common.lease.Releasable;, +, +import java.io.Closeable;, +public interface LifecycleComponent<T> extends Releasable {, +++ b/src/main/java/org/elasticsearch/common/inject/Injectors.java, +++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +        try (ShardLock lock = shardLock(shardId)) {, +            deleteShardDirectoryUnderLock(lock, indexSettings);, +        }, +    }, +, +    /**, +     * Deletes a shard data directory. Note: this method assumes that the shard lock is acquired, +     *, +     * @param lock the shards lock, +     * @throws IOException if an IOException occurs, +     */, +    public void deleteShardDirectoryUnderLock(ShardLock lock, @IndexSettings Settings indexSettings) throws IOException {, +        assert indexSettings != ImmutableSettings.EMPTY;, +        final ShardId shardId = lock.getShardId();, +        assert isShardLocked(shardId) : "shard " + shardId + " is not locked";, +        final Path[] paths = shardPaths(shardId);, +, +    private boolean isShardLocked(ShardId id) {, +        try {, +            shardLock(id, 0).close();]