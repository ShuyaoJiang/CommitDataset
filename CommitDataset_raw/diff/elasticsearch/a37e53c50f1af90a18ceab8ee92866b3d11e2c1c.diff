[+++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +STRING: '"' ( '\\"' | '\\\\' | ~[\\"] )*? '"';, +CHAR: '\'' . '\'';, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +STRING: '"' ( '\\"' | '\\\\' | ~[\\"] )*? '"';, +CHAR: '\'' . '\'';, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +    : identifier (LBRACE RBRACE)*, +    : identifier ( ASSIGN expression )?, +    : CATCH LP ( identifier identifier ) RP ( block | emptyscope ), +    ;, +, +identifier, +    : ID generic?, +    ;, +, +generic, +    : LT identifier ( COMMA identifier )* GT, +extprec:   LP ( extprec | extcast | extvar | extnew | extstring ) RP ( extdot | extbrace )?;, +extcast:   LP decltype RP ( extprec | extcast | extvar | extnew | extstring );, +extvar:    identifier ( extdot | extbrace )?;, +extnew:    NEW identifier ( ( arguments extdot? ) | ( ( LBRACE expression RBRACE )+ extdot? ) );, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +STRING: '"' ( '\\"' | '\\\\' | ~[\\"] )*? '"';, +CHAR: '\'' . '\'';, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +    : identifier (LBRACE RBRACE)*, +    : identifier ( ASSIGN expression )?, +    : CATCH LP ( identifier identifier ) RP ( block | emptyscope ), +    ;, +, +identifier, +    : ID generic?, +    ;, +, +generic, +    : LT identifier ( COMMA identifier )* GT, +extprec:   LP ( extprec | extcast | extvar | extnew | extstring ) RP ( extdot | extbrace )?;, +extcast:   LP decltype RP ( extprec | extcast | extvar | extnew | extstring );, +extvar:    identifier ( extdot | extbrace )?;, +extnew:    NEW identifier ( ( arguments extdot? ) | ( ( LBRACE expression RBRACE )+ extdot? ) );, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +import org.elasticsearch.painless.PainlessParser.GenericContext;, +import org.elasticsearch.painless.PainlessParser.IdentifierContext;, +        final AnalyzerUtility utility = new AnalyzerUtility(metadata);, +        metadata.scoreValueSlot = utility.addVariable(null, "_score", definition.floatType).slot;, +    public Void visitIdentifier(IdentifierContext ctx) {, +        throw new UnsupportedOperationException(AnalyzerUtility.error(ctx) + "Unexpected state.");, +    }, +, +    @Override, +    public Void visitGeneric(GenericContext ctx) {, +        throw new UnsupportedOperationException(AnalyzerUtility.error(ctx) + "Unexpected state.");, +    }, +, +    @Override, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +STRING: '"' ( '\\"' | '\\\\' | ~[\\"] )*? '"';, +CHAR: '\'' . '\'';, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +    : identifier (LBRACE RBRACE)*, +    : identifier ( ASSIGN expression )?, +    : CATCH LP ( identifier identifier ) RP ( block | emptyscope ), +    ;, +, +identifier, +    : ID generic?, +    ;, +, +generic, +    : LT identifier ( COMMA identifier )* GT, +extprec:   LP ( extprec | extcast | extvar | extnew | extstring ) RP ( extdot | extbrace )?;, +extcast:   LP decltype RP ( extprec | extcast | extvar | extnew | extstring );, +extvar:    identifier ( extdot | extbrace )?;, +extnew:    NEW identifier ( ( arguments extdot? ) | ( ( LBRACE expression RBRACE )+ extdot? ) );, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +import org.elasticsearch.painless.PainlessParser.GenericContext;, +import org.elasticsearch.painless.PainlessParser.IdentifierContext;, +        final AnalyzerUtility utility = new AnalyzerUtility(metadata);, +        metadata.scoreValueSlot = utility.addVariable(null, "_score", definition.floatType).slot;, +    public Void visitIdentifier(IdentifierContext ctx) {, +        throw new UnsupportedOperationException(AnalyzerUtility.error(ctx) + "Unexpected state.");, +    }, +, +    @Override, +    public Void visitGeneric(GenericContext ctx) {, +        throw new UnsupportedOperationException(AnalyzerUtility.error(ctx) + "Unexpected state.");, +    }, +, +    @Override, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerExpression.java, +        charemd.preConst = ctx.CHAR().getText().charAt(1);, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +STRING: '"' ( '\\"' | '\\\\' | ~[\\"] )*? '"';, +CHAR: '\'' . '\'';, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +    : identifier (LBRACE RBRACE)*, +    : identifier ( ASSIGN expression )?, +    : CATCH LP ( identifier identifier ) RP ( block | emptyscope ), +    ;]