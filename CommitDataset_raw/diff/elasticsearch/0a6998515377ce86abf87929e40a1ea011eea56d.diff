[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import java.util.concurrent.ConcurrentHashMap;, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId, request);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId, Request request) {, +        IndexShardReference ref = IndexShardReferenceImpl.createOnReplica(indexShard, primaryTerm);, +        return ref;, +                                                    String message = "unknown";, +                                                    try {, +                                                        message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                    } catch (Throwable t) {, +                                                        shardFailedError.addSuppressed(t);, +                                                    }, +                                                    // these can occur if the node is shutting down and are okay, +                                                    // any other exception here is not expected and merits investigation, +                                                    assert shardFailedError instanceof TransportException ||, +                                                            shardFailedError instanceof NodeClosedException : shardFailedError;, +, +, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import java.util.concurrent.ConcurrentHashMap;, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId, request);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId, Request request) {, +        IndexShardReference ref = IndexShardReferenceImpl.createOnReplica(indexShard, primaryTerm);, +        return ref;, +                                                    String message = "unknown";, +                                                    try {, +                                                        message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                    } catch (Throwable t) {, +                                                        shardFailedError.addSuppressed(t);, +                                                    }, +                                                    // these can occur if the node is shutting down and are okay, +                                                    // any other exception here is not expected and merits investigation, +                                                    assert shardFailedError instanceof TransportException ||, +                                                            shardFailedError instanceof NodeClosedException : shardFailedError;, +, +, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.transport.RemoteTransportException;, +                            listener.onFailure(exp instanceof RemoteTransportException ? exp.getCause() : exp);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import java.util.concurrent.ConcurrentHashMap;, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId, request);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId, Request request) {, +        IndexShardReference ref = IndexShardReferenceImpl.createOnReplica(indexShard, primaryTerm);, +        return ref;, +                                                    String message = "unknown";, +                                                    try {, +                                                        message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                    } catch (Throwable t) {, +                                                        shardFailedError.addSuppressed(t);, +                                                    }, +                                                    // these can occur if the node is shutting down and are okay, +                                                    // any other exception here is not expected and merits investigation, +                                                    assert shardFailedError instanceof TransportException ||, +                                                            shardFailedError instanceof NodeClosedException : shardFailedError;, +, +, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.transport.RemoteTransportException;, +                            listener.onFailure(exp instanceof RemoteTransportException ? exp.getCause() : exp);, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +            onGoingTimeout.cancel();, +        // close timeout listeners that did not have an ongoing timeout, +        postAppliedListeners, +                .stream(), +                .filter(listener -> listener instanceof TimeoutClusterStateListener), +                .map(listener -> (TimeoutClusterStateListener)listener), +                .forEach(TimeoutClusterStateListener::onClose);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import java.util.concurrent.ConcurrentHashMap;, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId, request);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId, Request request) {, +        IndexShardReference ref = IndexShardReferenceImpl.createOnReplica(indexShard, primaryTerm);, +        return ref;, +                                                    String message = "unknown";, +                                                    try {, +                                                        message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                    } catch (Throwable t) {, +                                                        shardFailedError.addSuppressed(t);, +                                                    }, +                                                    // these can occur if the node is shutting down and are okay, +                                                    // any other exception here is not expected and merits investigation, +                                                    assert shardFailedError instanceof TransportException ||, +                                                            shardFailedError instanceof NodeClosedException : shardFailedError;, +, +, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.transport.RemoteTransportException;, +                            listener.onFailure(exp instanceof RemoteTransportException ? exp.getCause() : exp);, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +            onGoingTimeout.cancel();, +        // close timeout listeners that did not have an ongoing timeout, +        postAppliedListeners, +                .stream(), +                .filter(listener -> listener instanceof TimeoutClusterStateListener), +                .map(listener -> (TimeoutClusterStateListener)listener), +                .forEach(TimeoutClusterStateListener::onClose);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.common.SuppressForbidden;, +        this.publishClusterState =]