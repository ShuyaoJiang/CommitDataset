[+++ b/server/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +                if (seqNo == SequenceNumbers.UNASSIGNED_SEQ_NO || seqNo < startingSeqNo) {, +                assert operation.seqNo() >= 0 : "sending operation with unassigned sequence number [" + operation + "]";, +++ b/server/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +                if (seqNo == SequenceNumbers.UNASSIGNED_SEQ_NO || seqNo < startingSeqNo) {, +                assert operation.seqNo() >= 0 : "sending operation with unassigned sequence number [" + operation + "]";, +++ b/server/src/test/java/org/elasticsearch/index/shard/PrimaryReplicaSyncerTests.java, +import org.elasticsearch.index.translog.TestTranslog;, +import org.elasticsearch.index.translog.Translog;, +import java.util.Arrays;, +import java.util.stream.Collectors;, +import static org.mockito.Matchers.anyLong;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Mockito.doReturn;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.when;, +    public void testDoNotSendOperationsWithoutSequenceNumber() throws Exception {, +        IndexShard shard = spy(newStartedShard(true));, +        when(shard.getGlobalCheckpoint()).thenReturn(SequenceNumbers.UNASSIGNED_SEQ_NO);, +        int numOps = between(0, 20);, +        List<Translog.Operation> operations = new ArrayList<>();, +        for (int i = 0; i < numOps; i++) {, +            operations.add(new Translog.Index(, +                "_doc", Integer.toString(i), randomBoolean() ? SequenceNumbers.UNASSIGNED_SEQ_NO : i, primaryTerm, new byte[]{1}));, +        }, +        doReturn(TestTranslog.newSnapshotFromOperations(operations)).when(shard).getHistoryOperations(anyString(), anyLong());, +        TaskManager taskManager = new TaskManager(Settings.EMPTY, threadPool, Collections.emptySet());, +        List<Translog.Operation> sentOperations = new ArrayList<>();, +        PrimaryReplicaSyncer.SyncAction syncAction = (request, parentTask, allocationId, primaryTerm, listener) -> {, +            sentOperations.addAll(Arrays.asList(request.getOperations()));, +            listener.onResponse(new ResyncReplicationResponse());, +        };, +        PrimaryReplicaSyncer syncer = new PrimaryReplicaSyncer(taskManager, syncAction);, +        syncer.setChunkSize(new ByteSizeValue(randomIntBetween(1, 10)));, +        PlainActionFuture<PrimaryReplicaSyncer.ResyncTask> fut = new PlainActionFuture<>();, +        syncer.resync(shard, fut);, +        fut.actionGet();, +        assertThat(sentOperations, equalTo(operations.stream().filter(op -> op.seqNo() >= 0).collect(Collectors.toList())));, +        closeShards(shard);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +                if (seqNo == SequenceNumbers.UNASSIGNED_SEQ_NO || seqNo < startingSeqNo) {, +                assert operation.seqNo() >= 0 : "sending operation with unassigned sequence number [" + operation + "]";, +++ b/server/src/test/java/org/elasticsearch/index/shard/PrimaryReplicaSyncerTests.java, +import org.elasticsearch.index.translog.TestTranslog;, +import org.elasticsearch.index.translog.Translog;, +import java.util.Arrays;, +import java.util.stream.Collectors;, +import static org.mockito.Matchers.anyLong;, +import static org.mockito.Matchers.anyString;, +import static org.mockito.Mockito.doReturn;, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.when;, +    public void testDoNotSendOperationsWithoutSequenceNumber() throws Exception {, +        IndexShard shard = spy(newStartedShard(true));, +        when(shard.getGlobalCheckpoint()).thenReturn(SequenceNumbers.UNASSIGNED_SEQ_NO);, +        int numOps = between(0, 20);, +        List<Translog.Operation> operations = new ArrayList<>();, +        for (int i = 0; i < numOps; i++) {, +            operations.add(new Translog.Index(, +                "_doc", Integer.toString(i), randomBoolean() ? SequenceNumbers.UNASSIGNED_SEQ_NO : i, primaryTerm, new byte[]{1}));, +        }, +        doReturn(TestTranslog.newSnapshotFromOperations(operations)).when(shard).getHistoryOperations(anyString(), anyLong());, +        TaskManager taskManager = new TaskManager(Settings.EMPTY, threadPool, Collections.emptySet());, +        List<Translog.Operation> sentOperations = new ArrayList<>();, +        PrimaryReplicaSyncer.SyncAction syncAction = (request, parentTask, allocationId, primaryTerm, listener) -> {, +            sentOperations.addAll(Arrays.asList(request.getOperations()));, +            listener.onResponse(new ResyncReplicationResponse());, +        };, +        PrimaryReplicaSyncer syncer = new PrimaryReplicaSyncer(taskManager, syncAction);, +        syncer.setChunkSize(new ByteSizeValue(randomIntBetween(1, 10)));, +        PlainActionFuture<PrimaryReplicaSyncer.ResyncTask> fut = new PlainActionFuture<>();, +        syncer.resync(shard, fut);, +        fut.actionGet();, +        assertThat(sentOperations, equalTo(operations.stream().filter(op -> op.seqNo() >= 0).collect(Collectors.toList())));, +        closeShards(shard);, +    }, +, +++ b/server/src/test/java/org/elasticsearch/index/translog/TestTranslog.java, +import java.util.Iterator;, +, +    public static Translog.Snapshot newSnapshotFromOperations(List<Translog.Operation> operations) {, +        final Iterator<Translog.Operation> iterator = operations.iterator();, +        return new Translog.Snapshot() {, +            @Override, +            public int totalOperations() {, +                return operations.size();, +            }, +, +            @Override, +            public Translog.Operation next() {, +                if (iterator.hasNext()) {, +                    return iterator.next();, +                } else {, +                    return null;, +                }, +            }, +, +            @Override]