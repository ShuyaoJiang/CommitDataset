[+++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +, +, +        if (fields == null) {, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive);, +        }, +, +, +, +, +                if (lowercaseExpandedTerms && !currentMapper.isNumeric()) {, +                    part1 = part1 == null ? null : part1.toLowerCase(locale);, +                    part2 = part2 == null ? null : part2.toLowerCase(locale);, +                }, +, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +, +, +        if (fields == null) {, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive);, +        }, +, +, +, +, +                if (lowercaseExpandedTerms && !currentMapper.isNumeric()) {, +                    part1 = part1 == null ? null : part1.toLowerCase(locale);, +                    part2 = part2 == null ? null : part2.toLowerCase(locale);, +                }, +, +++ b/src/test/java/org/elasticsearch/test/integration/search/query/SimpleQueryTests.java, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +import org.joda.time.format.ISODateTimeFormat;, +    public void testDateRangeInQueryString() {, +        client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 1)).execute().actionGet();, +, +        String aMonthAgo = ISODateTimeFormat.yearMonthDay().print(new DateTime(DateTimeZone.UTC).minusMonths(1));, +        String aMonthFromNow = ISODateTimeFormat.yearMonthDay().print(new DateTime(DateTimeZone.UTC).plusMonths(1));, +, +        client().prepareIndex("test", "type", "1").setSource("past", aMonthAgo, "future", aMonthFromNow).execute().actionGet();, +, +        client().admin().indices().prepareRefresh().execute().actionGet();, +, +        SearchResponse searchResponse = client().prepareSearch().setQuery(queryString("past:[now-2M/d TO now/d]")).execute().actionGet();, +        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));, +, +        searchResponse = client().prepareSearch().setQuery(queryString("future:[now/d TO now+2M/d]").lowercaseExpandedTerms(false)).execute().actionGet();, +        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));, +, +        try {, +            client().prepareSearch().setQuery(queryString("future:[now/D TO now+2M/d]").lowercaseExpandedTerms(false)).execute().actionGet();, +            fail("D is an unsupported unit in date math");, +        } catch (Exception e) {, +            // expected, +        }, +    }, +, +    @Test]