[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import org.elasticsearch.common.logging.ESLogger;, +        private final ESLogger logger;, +        protected FieldBased(ESLogger logger, IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, CacheBuilder cache, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            this.logger = logger;, +                try {, +                } catch (Throwable e) {, +                    logger.error("Failed to call listener on field data cache unloading", e);, +                }, +, +                    final AtomicFieldData fieldData = indexFieldData.loadDirect(context);, +                    key.sizeInBytes = fieldData.getMemorySizeInBytes();, +                        try {, +                        } catch (Throwable e) {, +                            // load anyway since listeners should not throw exceptions, +                            logger.error("Failed to call listener on atomic field data loading", e);, +                        }, +, +                    GlobalOrdinalsIndexFieldData ifd = (GlobalOrdinalsIndexFieldData) indexFieldData.localGlobalDirect(indexReader);, +                    key.sizeInBytes = ifd.getMemorySizeInBytes();, +                        try {, +                        } catch (Throwable e) {, +                            // load anyway since listeners should not throw exceptions, +                            logger.error("Failed to call listener on global ordinals loading", e);, +                        }, +        public Resident(ESLogger logger, IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(logger, indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder(), indicesFieldDataCacheListener);, +        public Soft(ESLogger logger, IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(logger, indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder().softValues(), indicesFieldDataCacheListener);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import org.elasticsearch.common.logging.ESLogger;, +        private final ESLogger logger;, +        protected FieldBased(ESLogger logger, IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, CacheBuilder cache, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            this.logger = logger;, +                try {, +                } catch (Throwable e) {, +                    logger.error("Failed to call listener on field data cache unloading", e);, +                }, +, +                    final AtomicFieldData fieldData = indexFieldData.loadDirect(context);, +                    key.sizeInBytes = fieldData.getMemorySizeInBytes();, +                        try {, +                        } catch (Throwable e) {, +                            // load anyway since listeners should not throw exceptions, +                            logger.error("Failed to call listener on atomic field data loading", e);, +                        }, +, +                    GlobalOrdinalsIndexFieldData ifd = (GlobalOrdinalsIndexFieldData) indexFieldData.localGlobalDirect(indexReader);, +                    key.sizeInBytes = ifd.getMemorySizeInBytes();, +                        try {, +                        } catch (Throwable e) {, +                            // load anyway since listeners should not throw exceptions, +                            logger.error("Failed to call listener on global ordinals loading", e);, +                        }, +        public Resident(ESLogger logger, IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(logger, indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder(), indicesFieldDataCacheListener);, +        public Soft(ESLogger logger, IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(logger, indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder().softValues(), indicesFieldDataCacheListener);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                            cache = new IndexFieldDataCache.Resident(logger, indexService, fieldNames, type, indicesFieldDataCacheListener);, +                            cache = new IndexFieldDataCache.Soft(logger, indexService, fieldNames, type, indicesFieldDataCacheListener);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import org.elasticsearch.common.logging.ESLogger;, +        private final ESLogger logger;, +        protected FieldBased(ESLogger logger, IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, CacheBuilder cache, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            this.logger = logger;, +                try {, +                } catch (Throwable e) {, +                    logger.error("Failed to call listener on field data cache unloading", e);, +                }, +, +                    final AtomicFieldData fieldData = indexFieldData.loadDirect(context);, +                    key.sizeInBytes = fieldData.getMemorySizeInBytes();, +                        try {, +                        } catch (Throwable e) {, +                            // load anyway since listeners should not throw exceptions, +                            logger.error("Failed to call listener on atomic field data loading", e);, +                        }, +, +                    GlobalOrdinalsIndexFieldData ifd = (GlobalOrdinalsIndexFieldData) indexFieldData.localGlobalDirect(indexReader);, +                    key.sizeInBytes = ifd.getMemorySizeInBytes();, +                        try {, +                        } catch (Throwable e) {, +                            // load anyway since listeners should not throw exceptions, +                            logger.error("Failed to call listener on global ordinals loading", e);, +                        }, +        public Resident(ESLogger logger, IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(logger, indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder(), indicesFieldDataCacheListener);, +        public Soft(ESLogger logger, IndexService indexService, FieldMapper.Names fieldNames, FieldDataType fieldDataType, IndicesFieldDataCacheListener indicesFieldDataCacheListener) {, +            super(logger, indexService, fieldNames, fieldDataType, CacheBuilder.newBuilder().softValues(), indicesFieldDataCacheListener);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                            cache = new IndexFieldDataCache.Resident(logger, indexService, fieldNames, type, indicesFieldDataCacheListener);, +                            cache = new IndexFieldDataCache.Soft(logger, indexService, fieldNames, type, indicesFieldDataCacheListener);, +++ b/src/main/java/org/elasticsearch/indices/fielddata/cache/IndicesFieldDataCache.java, +import org.elasticsearch.common.logging.ESLogger;, +        return new IndexFieldCache(logger, cache, indicesFieldDataCacheListener, indexService, index, fieldNames, fieldDataType);, +            try {, +            } catch (Throwable e) {, +                // load anyway since listeners should not throw exceptions, +                logger.error("Failed to call listener on field data cache unloading", e);]