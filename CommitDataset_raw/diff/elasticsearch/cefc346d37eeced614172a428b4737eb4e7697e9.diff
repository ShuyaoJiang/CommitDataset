[+++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpClient.java, +import io.netty.handler.codec.http.FullHttpRequest;, +import java.util.concurrent.TimeUnit;, +    public final FullHttpResponse post(SocketAddress remoteAddress, FullHttpRequest httpRequest) throws InterruptedException {, +        Collection<FullHttpResponse> responses = sendRequests(remoteAddress, Collections.singleton(httpRequest));, +        assert responses.size() == 1 : "expected 1 and only 1 http response";, +        return responses.iterator().next();, +    }, +, +            latch.await(10, TimeUnit.SECONDS);, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpClient.java, +import io.netty.handler.codec.http.FullHttpRequest;, +import java.util.concurrent.TimeUnit;, +    public final FullHttpResponse post(SocketAddress remoteAddress, FullHttpRequest httpRequest) throws InterruptedException {, +        Collection<FullHttpResponse> responses = sendRequests(remoteAddress, Collections.singleton(httpRequest));, +        assert responses.size() == 1 : "expected 1 and only 1 http response";, +        return responses.iterator().next();, +    }, +, +            latch.await(10, TimeUnit.SECONDS);, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java, +import io.netty.buffer.ByteBufUtil;, +import io.netty.buffer.Unpooled;, +import io.netty.handler.codec.http.DefaultFullHttpRequest;, +import io.netty.handler.codec.http.FullHttpRequest;, +import io.netty.handler.codec.http.FullHttpResponse;, +import io.netty.handler.codec.http.HttpResponseStatus;, +import io.netty.handler.codec.http.HttpUtil;, +import io.netty.handler.codec.http.HttpVersion;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.transport.InetSocketTransportAddress;, +import org.elasticsearch.rest.BytesRestResponse;, +import java.nio.charset.StandardCharsets;, +import static org.elasticsearch.rest.RestStatus.OK;, +import static org.hamcrest.Matchers.is;, +    /**, +     * Test that {@link Netty4HttpServerTransport} supports the "Expect: 100-continue" HTTP header, +     */, +    public void testExpectContinueHeader() throws Exception {, +        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool)) {, +            transport.httpServerAdapter((request, channel, context) ->, +                    channel.sendResponse(new BytesRestResponse(OK, BytesRestResponse.TEXT_CONTENT_TYPE, new BytesArray("done"))));, +            transport.start();, +            InetSocketTransportAddress remoteAddress = (InetSocketTransportAddress) randomFrom(transport.boundAddress().boundAddresses());, +, +            try (Netty4HttpClient client = new Netty4HttpClient()) {, +                FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, "/");, +                HttpUtil.set100ContinueExpected(request, true);, +                HttpUtil.setContentLength(request, 10);, +, +                FullHttpResponse response = client.post(remoteAddress.address(), request);, +                assertThat(response.status(), is(HttpResponseStatus.CONTINUE));, +, +                request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, "/", Unpooled.EMPTY_BUFFER);, +                response = client.post(remoteAddress.address(), request);, +                assertThat(response.status(), is(HttpResponseStatus.OK));, +                assertThat(new String(ByteBufUtil.getBytes(response.content()), StandardCharsets.UTF_8), is("done"));, +            }, +        }, +    }]