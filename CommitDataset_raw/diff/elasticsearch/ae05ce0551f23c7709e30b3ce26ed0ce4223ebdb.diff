[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +    String[] extensions();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +    String[] extensions();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.elasticsearch.common.io.Streams;, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import org.elasticsearch.env.Environment;, +import java.io.File;, +import java.io.FileInputStream;, +import java.io.InputStreamReader;, +    private final ConcurrentMap<String, CompiledScript> staticCache = ConcurrentCollections.newConcurrentMap();, +, +        this(settings, new Environment(), ImmutableSet.<ScriptEngineService>builder(), +    @Inject public ScriptService(Settings settings, Environment env, Set<ScriptEngineService> scriptEngines) {, +, +        // compile static scripts, +        File scriptsFile = new File(env.configFile(), "scripts");, +        if (scriptsFile.exists()) {, +            processScriptsDirectory("", scriptsFile);, +        }, +    }, +, +    private void processScriptsDirectory(String prefix, File dir) {, +        for (File file : dir.listFiles()) {, +            if (file.isDirectory()) {, +                processScriptsDirectory(prefix + file.getName() + "_", file);, +            } else {, +                int extIndex = file.getName().lastIndexOf('.');, +                if (extIndex != -1) {, +                    String ext = file.getName().substring(extIndex + 1);, +                    String scriptName = prefix + file.getName().substring(0, extIndex);, +                    boolean found = false;, +                    for (ScriptEngineService engineService : scriptEngines.values()) {, +                        for (String s : engineService.extensions()) {, +                            if (s.equals(ext)) {, +                                found = true;, +                                try {, +                                    String script = Streams.copyToString(new InputStreamReader(new FileInputStream(file), "UTF-8"));, +                                    staticCache.put(scriptName, new CompiledScript(engineService.types()[0], engineService.compile(script)));, +                                } catch (Exception e) {, +                                    logger.warn("failed to load/compile script [{}]", e, scriptName);, +                                }, +                                break;, +                            }, +                        }, +                        if (found) {, +                            break;, +                        }, +                    }, +                    if (!found) {, +                        logger.warn("no script engine found for [{}]", ext);, +                    }, +                }, +            }, +        }, +        CompiledScript compiled = staticCache.get(script);, +        if (compiled != null) {, +            return compiled;, +        }, +        compiled = cache.get(script);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +    String[] extensions();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.elasticsearch.common.io.Streams;, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import org.elasticsearch.env.Environment;, +import java.io.File;, +import java.io.FileInputStream;, +import java.io.InputStreamReader;, +    private final ConcurrentMap<String, CompiledScript> staticCache = ConcurrentCollections.newConcurrentMap();, +, +        this(settings, new Environment(), ImmutableSet.<ScriptEngineService>builder(), +    @Inject public ScriptService(Settings settings, Environment env, Set<ScriptEngineService> scriptEngines) {, +, +        // compile static scripts, +        File scriptsFile = new File(env.configFile(), "scripts");, +        if (scriptsFile.exists()) {, +            processScriptsDirectory("", scriptsFile);, +        }, +    }, +, +    private void processScriptsDirectory(String prefix, File dir) {, +        for (File file : dir.listFiles()) {, +            if (file.isDirectory()) {, +                processScriptsDirectory(prefix + file.getName() + "_", file);, +            } else {, +                int extIndex = file.getName().lastIndexOf('.');, +                if (extIndex != -1) {, +                    String ext = file.getName().substring(extIndex + 1);, +                    String scriptName = prefix + file.getName().substring(0, extIndex);, +                    boolean found = false;, +                    for (ScriptEngineService engineService : scriptEngines.values()) {, +                        for (String s : engineService.extensions()) {, +                            if (s.equals(ext)) {, +                                found = true;, +                                try {]