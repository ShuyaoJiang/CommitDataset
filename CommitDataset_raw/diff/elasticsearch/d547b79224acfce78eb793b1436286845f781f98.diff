[+++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerTests.java, +        setupLogging("location_info");, +, +        final Logger testLogger = ESLoggerFactory.getLogger("test");, +, +        setupLogging("deprecation");, +, +        final DeprecationLogger deprecationLogger = new DeprecationLogger(ESLoggerFactory.getLogger("deprecation"));, +, +    public void testFindAppender() throws IOException {, +        setupLogging("find_appender");, +, +        final Logger hasConsoleAppender = ESLoggerFactory.getLogger("has_console_appender");, +, +        final Appender testLoggerConsoleAppender = Loggers.findAppender(hasConsoleAppender, ConsoleAppender.class);, +        final Logger hasCountingNoOpAppender = ESLoggerFactory.getLogger("has_counting_no_op_appender");, +        assertNull(Loggers.findAppender(hasCountingNoOpAppender, ConsoleAppender.class));, +        final Appender countingNoOpAppender = Loggers.findAppender(hasCountingNoOpAppender, CountingNoOpAppender.class);, +    private void setupLogging(final String config) throws IOException {, +        final Path configDir = getDataPath(config);, +        // need to set custom path.conf so we can use a custom log4j2.properties file for the test, +        final Settings settings = Settings.builder(), +                .put(Environment.PATH_CONF_SETTING.getKey(), configDir.toAbsolutePath()), +                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()), +                .build();, +        final Environment environment = new Environment(settings);, +        LogConfigurator.configure(environment, true);, +    }, +, +    private void assertLogLine(final String logLine, final Level level, final String location, final String message) {, +        final Matcher matcher = Pattern.compile("\\[(.*)\\]\\[(.*)\\(.*\\)\\] (.*)").matcher(logLine);, +        assertTrue(logLine, matcher.matches());, +        assertThat(matcher.group(1), equalTo(level.toString()));, +        assertThat(matcher.group(2), RegexMatcher.matches(location));, +        assertThat(matcher.group(3), RegexMatcher.matches(message));, +    }, +, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerTests.java, +        setupLogging("location_info");, +, +        final Logger testLogger = ESLoggerFactory.getLogger("test");, +, +        setupLogging("deprecation");, +, +        final DeprecationLogger deprecationLogger = new DeprecationLogger(ESLoggerFactory.getLogger("deprecation"));, +, +    public void testFindAppender() throws IOException {, +        setupLogging("find_appender");, +, +        final Logger hasConsoleAppender = ESLoggerFactory.getLogger("has_console_appender");, +, +        final Appender testLoggerConsoleAppender = Loggers.findAppender(hasConsoleAppender, ConsoleAppender.class);, +        final Logger hasCountingNoOpAppender = ESLoggerFactory.getLogger("has_counting_no_op_appender");, +        assertNull(Loggers.findAppender(hasCountingNoOpAppender, ConsoleAppender.class));, +        final Appender countingNoOpAppender = Loggers.findAppender(hasCountingNoOpAppender, CountingNoOpAppender.class);, +    private void setupLogging(final String config) throws IOException {, +        final Path configDir = getDataPath(config);, +        // need to set custom path.conf so we can use a custom log4j2.properties file for the test, +        final Settings settings = Settings.builder(), +                .put(Environment.PATH_CONF_SETTING.getKey(), configDir.toAbsolutePath()), +                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()), +                .build();, +        final Environment environment = new Environment(settings);, +        LogConfigurator.configure(environment, true);, +    }, +, +    private void assertLogLine(final String logLine, final Level level, final String location, final String message) {, +        final Matcher matcher = Pattern.compile("\\[(.*)\\]\\[(.*)\\(.*\\)\\] (.*)").matcher(logLine);, +        assertTrue(logLine, matcher.matches());, +        assertThat(matcher.group(1), equalTo(level.toString()));, +        assertThat(matcher.group(2), RegexMatcher.matches(location));, +        assertThat(matcher.group(3), RegexMatcher.matches(message));, +    }, +, +++ b/qa/evil-tests/src/test/resources/org/elasticsearch/common/logging/config/log4j2.properties, +rootLogger.level = info, +rootLogger.appenderRef.console.ref = console, +rootLogger.appenderRef.file.ref = file, +, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerTests.java, +        setupLogging("location_info");, +, +        final Logger testLogger = ESLoggerFactory.getLogger("test");, +, +        setupLogging("deprecation");, +, +        final DeprecationLogger deprecationLogger = new DeprecationLogger(ESLoggerFactory.getLogger("deprecation"));, +, +    public void testFindAppender() throws IOException {, +        setupLogging("find_appender");, +, +        final Logger hasConsoleAppender = ESLoggerFactory.getLogger("has_console_appender");, +, +        final Appender testLoggerConsoleAppender = Loggers.findAppender(hasConsoleAppender, ConsoleAppender.class);, +        final Logger hasCountingNoOpAppender = ESLoggerFactory.getLogger("has_counting_no_op_appender");, +        assertNull(Loggers.findAppender(hasCountingNoOpAppender, ConsoleAppender.class));, +        final Appender countingNoOpAppender = Loggers.findAppender(hasCountingNoOpAppender, CountingNoOpAppender.class);, +    private void setupLogging(final String config) throws IOException {, +        final Path configDir = getDataPath(config);, +        // need to set custom path.conf so we can use a custom log4j2.properties file for the test]