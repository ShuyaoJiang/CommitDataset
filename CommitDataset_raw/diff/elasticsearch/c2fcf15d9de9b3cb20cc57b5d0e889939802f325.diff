[+++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/RemovePluginCommand.java, +        Set<PluginsService.Bundle> bundles = PluginsService.getPluginBundles(env.pluginsFile(), false);, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/RemovePluginCommand.java, +        Set<PluginsService.Bundle> bundles = PluginsService.getPluginBundles(env.pluginsFile(), false);, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/RemovePluginCommandTests.java, +import org.elasticsearch.test.VersionUtils;, +import static org.hamcrest.Matchers.equalTo;, +    void createPlugin(String name) throws IOException {, +    void createPlugin(String name, Version version) throws IOException {, +        createPlugin(env.pluginsFile(), name, version);, +    }, +, +    void createPlugin(Path path, String name) throws IOException {, +        createPlugin(path, name, Version.CURRENT);, +    }, +, +    void createPlugin(Path path, String name, Version version) throws IOException {, +                "elasticsearch.version", version.toString(),, +    public void testRemoveOldVersion() throws Exception {, +        createPlugin(, +                "fake",, +                VersionUtils.randomVersionBetween(, +                        random(),, +                        Version.CURRENT.minimumIndexCompatibilityVersion(),, +                        VersionUtils.getPreviousVersion()));, +        removePlugin("fake", home, randomBoolean());, +        assertThat(Files.exists(env.pluginsFile().resolve("fake")), equalTo(false));, +        assertRemoveCleaned(env);, +    }, +, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/RemovePluginCommand.java, +        Set<PluginsService.Bundle> bundles = PluginsService.getPluginBundles(env.pluginsFile(), false);, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/RemovePluginCommandTests.java, +import org.elasticsearch.test.VersionUtils;, +import static org.hamcrest.Matchers.equalTo;, +    void createPlugin(String name) throws IOException {, +    void createPlugin(String name, Version version) throws IOException {, +        createPlugin(env.pluginsFile(), name, version);, +    }, +, +    void createPlugin(Path path, String name) throws IOException {, +        createPlugin(path, name, Version.CURRENT);, +    }, +, +    void createPlugin(Path path, String name, Version version) throws IOException {, +                "elasticsearch.version", version.toString(),, +    public void testRemoveOldVersion() throws Exception {, +        createPlugin(, +                "fake",, +                VersionUtils.randomVersionBetween(, +                        random(),, +                        Version.CURRENT.minimumIndexCompatibilityVersion(),, +                        VersionUtils.getPreviousVersion()));, +        removePlugin("fake", home, randomBoolean());, +        assertThat(Files.exists(env.pluginsFile().resolve("fake")), equalTo(false));, +        assertRemoveCleaned(env);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +        return readFromProperties(path, true);, +    }, +, +    /**, +     * Reads and validates the plugin descriptor file. If {@code enforceVersion} is false then version enforcement for the plugin descriptor, +     * is skipped., +     *, +     * @param path           the path to the root directory for the plugin, +     * @param enforceVersion whether or not to enforce the version when reading plugin descriptors, +     * @return the plugin info, +     * @throws IOException if an I/O exception occurred reading the plugin descriptor, +     */, +    static PluginInfo readFromProperties(final Path path, final boolean enforceVersion) throws IOException {, +        if (enforceVersion && esVersion.equals(Version.CURRENT) == false) {, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/RemovePluginCommand.java, +        Set<PluginsService.Bundle> bundles = PluginsService.getPluginBundles(env.pluginsFile(), false);, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/RemovePluginCommandTests.java, +import org.elasticsearch.test.VersionUtils;, +import static org.hamcrest.Matchers.equalTo;, +    void createPlugin(String name) throws IOException {, +    void createPlugin(String name, Version version) throws IOException {, +        createPlugin(env.pluginsFile(), name, version);, +    }, +, +    void createPlugin(Path path, String name) throws IOException {, +        createPlugin(path, name, Version.CURRENT);, +    }, +, +    void createPlugin(Path path, String name, Version version) throws IOException {, +                "elasticsearch.version", version.toString(),, +    public void testRemoveOldVersion() throws Exception {, +        createPlugin(, +                "fake",, +                VersionUtils.randomVersionBetween(, +                        random(),, +                        Version.CURRENT.minimumIndexCompatibilityVersion(),, +                        VersionUtils.getPreviousVersion()));, +        removePlugin("fake", home, randomBoolean());, +        assertThat(Files.exists(env.pluginsFile().resolve("fake")), equalTo(false));, +        assertRemoveCleaned(env);, +    }]