[+++ b/docs/en/sql/endpoints/rest.asciidoc, +    "table_pattern": "lib%", +        {"table": "library", "name": "author",       "type": "text",  "position": 1},, +        {"table": "library", "name": "name",         "type": "text",  "position": 2},, +        {"table": "library", "name": "page_count",   "type": "short", "position": 3},, +        {"table": "library", "name": "release_date", "type": "date",  "position": 4}, +The `position` is the position in the original table and won't match the position in the, +array if the `column_pattern` removes any columns., +++ b/docs/en/sql/endpoints/rest.asciidoc, +    "table_pattern": "lib%", +        {"table": "library", "name": "author",       "type": "text",  "position": 1},, +        {"table": "library", "name": "name",         "type": "text",  "position": 2},, +        {"table": "library", "name": "page_count",   "type": "short", "position": 3},, +        {"table": "library", "name": "release_date", "type": "date",  "position": 4}, +The `position` is the position in the original table and won't match the position in the, +array if the `column_pattern` removes any columns., +++ b/plugin/build.gradle, +++ b/docs/en/sql/endpoints/rest.asciidoc, +    "table_pattern": "lib%", +        {"table": "library", "name": "author",       "type": "text",  "position": 1},, +        {"table": "library", "name": "name",         "type": "text",  "position": 2},, +        {"table": "library", "name": "page_count",   "type": "short", "position": 3},, +        {"table": "library", "name": "release_date", "type": "date",  "position": 4}, +The `position` is the position in the original table and won't match the position in the, +array if the `column_pattern` removes any columns., +++ b/plugin/build.gradle, +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlActionIT.java, +import org.elasticsearch.xpack.sql.plugin.MetaColumnInfo;, +import org.elasticsearch.xpack.sql.plugin.SqlQueryAction;, +import static org.hamcrest.Matchers.contains;, +        response = client().prepareExecute(SqlListTablesAction.INSTANCE).pattern("b%").get();, +        List<MetaColumnInfo> columns = response.getColumns();, +        assertThat(columns, contains(, +                new MetaColumnInfo("bar", "int_field", "integer", JDBCType.INTEGER, 10, 1),, +                new MetaColumnInfo("bar", "str_field", "text", JDBCType.VARCHAR, Integer.MAX_VALUE, 2), +        ));, +, +        response = client().prepareExecute(SqlListColumnsAction.INSTANCE), +                .indexPattern("bar").columnPattern("").mode(Mode.PLAIN).get();, +        columns = response.getColumns();, +        assertThat(columns, hasSize(2));, +        assertThat(columns, contains(, +                new MetaColumnInfo("bar", "int_field", "integer", null, 0, 1),, +                new MetaColumnInfo("bar", "str_field", "text", null, 0, 2), +++ b/docs/en/sql/endpoints/rest.asciidoc, +    "table_pattern": "lib%", +        {"table": "library", "name": "author",       "type": "text",  "position": 1},, +        {"table": "library", "name": "name",         "type": "text",  "position": 2},, +        {"table": "library", "name": "page_count",   "type": "short", "position": 3},, +        {"table": "library", "name": "release_date", "type": "date",  "position": 4}, +The `position` is the position in the original table and won't match the position in the, +array if the `column_pattern` removes any columns., +++ b/plugin/build.gradle, +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlActionIT.java, +import org.elasticsearch.xpack.sql.plugin.MetaColumnInfo;, +import org.elasticsearch.xpack.sql.plugin.SqlQueryAction;, +import static org.hamcrest.Matchers.contains;, +        response = client().prepareExecute(SqlListTablesAction.INSTANCE).pattern("b%").get();, +        List<MetaColumnInfo> columns = response.getColumns();, +        assertThat(columns, contains(, +                new MetaColumnInfo("bar", "int_field", "integer", JDBCType.INTEGER, 10, 1),, +                new MetaColumnInfo("bar", "str_field", "text", JDBCType.VARCHAR, Integer.MAX_VALUE, 2), +        ));, +, +        response = client().prepareExecute(SqlListColumnsAction.INSTANCE), +                .indexPattern("bar").columnPattern("").mode(Mode.PLAIN).get();, +        columns = response.getColumns();, +        assertThat(columns, hasSize(2));, +        assertThat(columns, contains(, +                new MetaColumnInfo("bar", "int_field", "integer", null, 0, 1),, +                new MetaColumnInfo("bar", "str_field", "text", null, 0, 2), +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlLicenseIT.java, +++ b/docs/en/sql/endpoints/rest.asciidoc, +    "table_pattern": "lib%", +        {"table": "library", "name": "author",       "type": "text",  "position": 1},, +        {"table": "library", "name": "name",         "type": "text",  "position": 2},, +        {"table": "library", "name": "page_count",   "type": "short", "position": 3},, +        {"table": "library", "name": "release_date", "type": "date",  "position": 4}, +The `position` is the position in the original table and won't match the position in the, +array if the `column_pattern` removes any columns., +++ b/plugin/build.gradle, +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlActionIT.java, +import org.elasticsearch.xpack.sql.plugin.MetaColumnInfo;, +import org.elasticsearch.xpack.sql.plugin.SqlQueryAction;, +import static org.hamcrest.Matchers.contains;, +        response = client().prepareExecute(SqlListTablesAction.INSTANCE).pattern("b%").get();, +        List<MetaColumnInfo> columns = response.getColumns();, +        assertThat(columns, contains(, +                new MetaColumnInfo("bar", "int_field", "integer", JDBCType.INTEGER, 10, 1),, +                new MetaColumnInfo("bar", "str_field", "text", JDBCType.VARCHAR, Integer.MAX_VALUE, 2), +        ));, +, +        response = client().prepareExecute(SqlListColumnsAction.INSTANCE), +                .indexPattern("bar").columnPattern("").mode(Mode.PLAIN).get();, +        columns = response.getColumns();, +        assertThat(columns, hasSize(2));, +        assertThat(columns, contains(, +                new MetaColumnInfo("bar", "int_field", "integer", null, 0, 1),, +                new MetaColumnInfo("bar", "str_field", "text", null, 0, 2), +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlLicenseIT.java]