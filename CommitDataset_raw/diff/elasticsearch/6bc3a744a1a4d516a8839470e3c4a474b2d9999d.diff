[+++ b/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      return XSpecialOperations.getFiniteStrings(automaton, maxGraphExpansions);, +++ b/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      return XSpecialOperations.getFiniteStrings(automaton, maxGraphExpansions);, +++ b/src/main/java/org/apache/lucene/search/suggest/analyzing/XFuzzySuggester.java, +        final Set<IntsRef> ref = XSpecialOperations.getFiniteStrings(automaton, -1);, +++ b/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +      return XSpecialOperations.getFiniteStrings(automaton, maxGraphExpansions);, +++ b/src/main/java/org/apache/lucene/search/suggest/analyzing/XFuzzySuggester.java, +        final Set<IntsRef> ref = XSpecialOperations.getFiniteStrings(automaton, -1);, +++ b/src/main/java/org/apache/lucene/search/suggest/analyzing/XSpecialOperations.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.apache.lucene.search.suggest.analyzing;, +, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.IdentityHashMap;, +import java.util.Set;, +, +import org.apache.lucene.util.ArrayUtil;, +import org.apache.lucene.util.IntsRef;, +import org.apache.lucene.util.RamUsageEstimator;, +import org.apache.lucene.util.automaton.Automaton;, +import org.apache.lucene.util.automaton.State;, +import org.apache.lucene.util.automaton.Transition;, +import org.apache.lucene.util.fst.Util;, +import org.elasticsearch.Version;, +, +class XSpecialOperations {, +, +  // TODO Lucene 4.9: remove this once we upgrade; see, +  // LUCENE-5628, +, +  static {, +    assert Version.CURRENT.luceneVersion == org.apache.lucene.util.Version.LUCENE_48: "Remove this code once we upgrade to Lucene 4.9 where LUCENE-5628 is fixed";, +  }, +, +  private static class PathNode {, +, +    /** Which state the path node ends on, whose, +     *  transitions we are enumerating. */, +    public State state;, +, +    /** Which state the current transition leads to. */, +    public State to;, +, +    /** Which transition we are on. */, +    public int transition;, +, +    /** Which label we are on, in the min-max range of the, +     *  current Transition */, +    public int label;, +, +    public void resetState(State state) {, +      assert state.numTransitions() != 0;, +      this.state = state;, +      transition = 0;, +      Transition t = state.transitionsArray[transition];, +      label = t.getMin();, +      to = t.getDest();, +    }, +, +    /** Returns next label of current transition, or, +     *  advances to next transition and returns its first, +     *  label, if current one is exhausted.  If there are, +     *  no more transitions, returns -1. */, +    public int nextLabel() {, +      if (label > state.transitionsArray[transition].getMax()) {, +        // We've exhaused the current transition's labels;, +        // move to next transitions:, +        transition++;, +        if (transition >= state.numTransitions()) {, +          // We're done iterating transitions leaving this state, +          return -1;, +        }, +        Transition t = state.transitionsArray[transition];, +        label = t.getMin();, +        to = t.getDest();, +      }, +      return label++;, +    }, +  }]