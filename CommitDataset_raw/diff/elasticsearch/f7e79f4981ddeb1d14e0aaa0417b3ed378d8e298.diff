[+++ b/build.gradle, +    // TODO: add gpg signing prompts, +++ b/build.gradle, +    // TODO: add gpg signing prompts, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import java.io.IOException;, +import java.util.Arrays;, +, +            QueryParseContext queryParseContext = new QueryParseContext(queryRegistry, XContentHelper.createParser(querySource),, +                    parseFieldMatcher);, +            QueryParseContext context = new QueryParseContext(queryRegistry, parser, parseFieldMatcher);, +++ b/build.gradle, +    // TODO: add gpg signing prompts, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import java.io.IOException;, +import java.util.Arrays;, +, +            QueryParseContext queryParseContext = new QueryParseContext(queryRegistry, XContentHelper.createParser(querySource),, +                    parseFieldMatcher);, +            QueryParseContext context = new QueryParseContext(queryRegistry, parser, parseFieldMatcher);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +            queryShardContext.reset();, +            QueryParseContext queryParseContext = queryShardContext.newParseContext(parser);, +            queryShardContext.reset();, +++ b/build.gradle, +    // TODO: add gpg signing prompts, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import java.io.IOException;, +import java.util.Arrays;, +, +            QueryParseContext queryParseContext = new QueryParseContext(queryRegistry, XContentHelper.createParser(querySource),, +                    parseFieldMatcher);, +            QueryParseContext context = new QueryParseContext(queryRegistry, parser, parseFieldMatcher);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +            queryShardContext.reset();, +            QueryParseContext queryParseContext = queryShardContext.newParseContext(parser);, +            queryShardContext.reset();, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    BootstrapSettings.CTRLHANDLER_SETTING, +++ b/build.gradle, +    // TODO: add gpg signing prompts, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import java.io.IOException;, +import java.util.Arrays;, +, +            QueryParseContext queryParseContext = new QueryParseContext(queryRegistry, XContentHelper.createParser(querySource),, +                    parseFieldMatcher);, +            QueryParseContext context = new QueryParseContext(queryRegistry, parser, parseFieldMatcher);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +            queryShardContext.reset();, +            QueryParseContext queryParseContext = queryShardContext.newParseContext(parser);, +            queryShardContext.reset();, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    BootstrapSettings.CTRLHANDLER_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, ByteSizeValue value, ByteSizeValue minValue, ByteSizeValue maxValue,, +        return byteSizeSetting(key, (s) -> value.toString(), minValue, maxValue, properties);, +++ b/build.gradle, +    // TODO: add gpg signing prompts, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import java.io.IOException;, +import java.util.Arrays;, +, +            QueryParseContext queryParseContext = new QueryParseContext(queryRegistry, XContentHelper.createParser(querySource),, +                    parseFieldMatcher);, +            QueryParseContext context = new QueryParseContext(queryRegistry, parser, parseFieldMatcher);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +            queryShardContext.reset();, +            QueryParseContext queryParseContext = queryShardContext.newParseContext(parser);, +            queryShardContext.reset();, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    BootstrapSettings.CTRLHANDLER_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, ByteSizeValue value, ByteSizeValue minValue, ByteSizeValue maxValue,, +        return byteSizeSetting(key, (s) -> value.toString(), minValue, maxValue, properties);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/build.gradle, +    // TODO: add gpg signing prompts, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import java.io.IOException;, +import java.util.Arrays;, +, +            QueryParseContext queryParseContext = new QueryParseContext(queryRegistry, XContentHelper.createParser(querySource),, +                    parseFieldMatcher);, +            QueryParseContext context = new QueryParseContext(queryRegistry, parser, parseFieldMatcher);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +            queryShardContext.reset();, +            QueryParseContext queryParseContext = queryShardContext.newParseContext(parser);, +            queryShardContext.reset();, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    BootstrapSettings.CTRLHANDLER_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, ByteSizeValue value, ByteSizeValue minValue, ByteSizeValue maxValue,, +        return byteSizeSetting(key, (s) -> value.toString(), minValue, maxValue, properties);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/core/src/main/java/org/elasticsearch/index/engine/SegmentsStats.java, +import org.elasticsearch.Version;, +        if (in.getVersion().onOrAfter(Version.V_5_0_0_alpha1)) {, +        } else {, +            fileSizes = ImmutableOpenMap.of();]