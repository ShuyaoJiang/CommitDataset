[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +import org.elasticsearch.tasks.TaskId;, +import java.util.stream.Collectors;, +    private List<TaskGroup> groups;, +, +    public List<TaskGroup> getTaskGroups() {, +        if (groups == null) {, +            buildTaskGroups();, +        }, +        return groups;, +    }, +, +    private void buildTaskGroups() {, +        Map<TaskId, TaskGroup.Builder> taskGroups = new HashMap<>();, +        List<TaskGroup.Builder> topLevelTasks = new ArrayList<>();, +        // First populate all tasks, +        for (TaskInfo taskInfo : this.tasks) {, +            taskGroups.put(taskInfo.getTaskId(), TaskGroup.builder(taskInfo));, +        }, +, +        // Now go through all task group builders and add children to their parents, +        for (TaskGroup.Builder taskGroup : taskGroups.values()) {, +            TaskId parentTaskId = taskGroup.getTaskInfo().getParentTaskId();, +            if (parentTaskId.isSet()) {, +                TaskGroup.Builder parentTask = taskGroups.get(parentTaskId);, +                if (parentTask != null) {, +                    // we found parent in the list of tasks - add it to the parent list, +                    parentTask.addGroup(taskGroup);, +                } else {, +                    // we got zombie or the parent was filtered out - add it to the the top task list, +                    topLevelTasks.add(taskGroup);, +                }, +            } else {, +                // top level task - add it to the top task list, +                topLevelTasks.add(taskGroup);, +            }, +        }, +        this.groups = Collections.unmodifiableList(topLevelTasks.stream().map(TaskGroup.Builder::build).collect(Collectors.toList()));, +    }, +, +        String groupBy = params.param("group_by", "nodes");, +        if ("nodes".equals(groupBy)) {, +        } else if ("parents".equals(groupBy)) {, +            builder.startObject("tasks");, +            for (TaskGroup group : getTaskGroups()) {, +                builder.startObject(group.getTaskInfo().getTaskId().toString(), XContentBuilder.FieldCaseConversion.NONE);, +                group.toXContent(builder, params);, +            }, +            builder.endObject();, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +import org.elasticsearch.tasks.TaskId;, +import java.util.stream.Collectors;, +    private List<TaskGroup> groups;, +, +    public List<TaskGroup> getTaskGroups() {, +        if (groups == null) {, +            buildTaskGroups();, +        }, +        return groups;, +    }, +, +    private void buildTaskGroups() {, +        Map<TaskId, TaskGroup.Builder> taskGroups = new HashMap<>();, +        List<TaskGroup.Builder> topLevelTasks = new ArrayList<>();, +        // First populate all tasks, +        for (TaskInfo taskInfo : this.tasks) {, +            taskGroups.put(taskInfo.getTaskId(), TaskGroup.builder(taskInfo));, +        }, +, +        // Now go through all task group builders and add children to their parents, +        for (TaskGroup.Builder taskGroup : taskGroups.values()) {, +            TaskId parentTaskId = taskGroup.getTaskInfo().getParentTaskId();, +            if (parentTaskId.isSet()) {, +                TaskGroup.Builder parentTask = taskGroups.get(parentTaskId);, +                if (parentTask != null) {, +                    // we found parent in the list of tasks - add it to the parent list, +                    parentTask.addGroup(taskGroup);, +                } else {, +                    // we got zombie or the parent was filtered out - add it to the the top task list, +                    topLevelTasks.add(taskGroup);, +                }, +            } else {, +                // top level task - add it to the top task list, +                topLevelTasks.add(taskGroup);, +            }, +        }, +        this.groups = Collections.unmodifiableList(topLevelTasks.stream().map(TaskGroup.Builder::build).collect(Collectors.toList()));, +    }, +, +        String groupBy = params.param("group_by", "nodes");, +        if ("nodes".equals(groupBy)) {, +        } else if ("parents".equals(groupBy)) {, +            builder.startObject("tasks");, +            for (TaskGroup group : getTaskGroups()) {, +                builder.startObject(group.getTaskInfo().getTaskId().toString(), XContentBuilder.FieldCaseConversion.NONE);, +                group.toXContent(builder, params);, +            }, +            builder.endObject();, +        }]