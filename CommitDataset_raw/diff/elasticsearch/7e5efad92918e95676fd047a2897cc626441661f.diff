[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/RollupJobCaps.java, +import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;, +import org.elasticsearch.search.aggregations.bucket.histogram.HistogramAggregationBuilder;, +import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;, +import org.elasticsearch.xpack.core.rollup.job.DateHistogramGroupConfig;, +import org.elasticsearch.xpack.core.rollup.job.GroupConfig;, +import org.elasticsearch.xpack.core.rollup.job.HistogramGroupConfig;, +import org.elasticsearch.xpack.core.rollup.job.MetricConfig;, +import org.elasticsearch.xpack.core.rollup.job.TermsGroupConfig;, +import java.util.Collections;, +import java.util.stream.Collectors;, +, +import static java.util.Collections.singletonMap;, +        fieldCapLookup = createRollupFieldCaps(job);, +    static Map<String, RollupFieldCaps> createRollupFieldCaps(final RollupJobConfig rollupJobConfig) {, +        final Map<String, RollupFieldCaps> fieldCapLookup = new HashMap<>();, +, +        final GroupConfig groupConfig = rollupJobConfig.getGroupConfig();, +        if (groupConfig != null) {, +            // Create RollupFieldCaps for the date histogram, +            final DateHistogramGroupConfig dateHistogram = groupConfig.getDateHistogram();, +            final Map<String, Object> dateHistogramAggCap = new HashMap<>();, +            dateHistogramAggCap.put("agg", DateHistogramAggregationBuilder.NAME);, +            dateHistogramAggCap.put(DateHistogramGroupConfig.INTERVAL, dateHistogram.getInterval().toString());, +            if (dateHistogram.getDelay() != null) {, +                dateHistogramAggCap.put(DateHistogramGroupConfig.DELAY, dateHistogram.getDelay().toString());, +            }, +            dateHistogramAggCap.put(DateHistogramGroupConfig.TIME_ZONE, dateHistogram.getTimeZone());, +, +            final RollupFieldCaps dateHistogramFieldCaps = new RollupFieldCaps();, +            dateHistogramFieldCaps.addAgg(dateHistogramAggCap);, +            fieldCapLookup.put(dateHistogram.getField(), dateHistogramFieldCaps);, +, +            // Create RollupFieldCaps for the histogram, +            final HistogramGroupConfig histogram = groupConfig.getHistogram();, +            if (histogram != null) {, +                final Map<String, Object> histogramAggCap = new HashMap<>();, +                histogramAggCap.put("agg", HistogramAggregationBuilder.NAME);, +                histogramAggCap.put(HistogramGroupConfig.INTERVAL, histogram.getInterval());, +                for (String field : histogram.getFields()) {, +                    RollupFieldCaps caps = fieldCapLookup.get(field);, +                    if (caps == null) {, +                        caps = new RollupFieldCaps();, +                    }, +                    caps.addAgg(histogramAggCap);, +                    fieldCapLookup.put(field, caps);, +                }, +            }, +, +            // Create RollupFieldCaps for the term, +            final TermsGroupConfig terms = groupConfig.getTerms();, +            if (terms != null) {, +                final Map<String, Object> termsAggCap = singletonMap("agg", TermsAggregationBuilder.NAME);, +                for (String field : terms.getFields()) {, +                    RollupFieldCaps caps = fieldCapLookup.get(field);, +                    if (caps == null) {, +                        caps = new RollupFieldCaps();, +                    }, +                    caps.addAgg(termsAggCap);, +                    fieldCapLookup.put(field, caps);, +                }, +            }, +        }, +, +        // Create RollupFieldCaps for the metrics, +        final List<MetricConfig> metricsConfig = rollupJobConfig.getMetricsConfig();, +            if (metricsConfig.size() > 0) {, +            metricsConfig.forEach(metricConfig -> {, +                final List<Map<String, Object>> metrics = metricConfig.getMetrics().stream(), +                    .map(metric -> singletonMap("agg", (Object) metric)), +                    .collect(Collectors.toList());, +, +                metrics.forEach(m -> {, +                    RollupFieldCaps caps = fieldCapLookup.get(metricConfig.getField());, +                    if (caps == null) {, +                        caps = new RollupFieldCaps();, +                    }, +                    caps.addAgg(m);, +                    fieldCapLookup.put(metricConfig.getField(), caps);, +                });, +            });, +        }, +        return Collections.unmodifiableMap(fieldCapLookup);, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/action/RollupJobCaps.java, +import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;, +import org.elasticsearch.search.aggregations.bucket.histogram.HistogramAggregationBuilder;, +import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;, +import org.elasticsearch.xpack.core.rollup.job.DateHistogramGroupConfig;, +import org.elasticsearch.xpack.core.rollup.job.GroupConfig;, +import org.elasticsearch.xpack.core.rollup.job.HistogramGroupConfig;, +import org.elasticsearch.xpack.core.rollup.job.MetricConfig;, +import org.elasticsearch.xpack.core.rollup.job.TermsGroupConfig;, +import java.util.Collections;, +import java.util.stream.Collectors;, +, +import static java.util.Collections.singletonMap;, +        fieldCapLookup = createRollupFieldCaps(job);, +    static Map<String, RollupFieldCaps> createRollupFieldCaps(final RollupJobConfig rollupJobConfig) {]