[+++ b/src/main/java/org/elasticsearch/index/store/Store.java, +     * @see #tryIncRef(), +     * @throws AlreadyClosedException iff the reference counter can not be incremented., +        if (tryIncRef() == false) {, +            throw new AlreadyClosedException("Store is already closed can't increment refCount current count [" + refCount.get() + "]");, +        }, +    }, +, +    /**, +     * Tries to increment the refCount of this Store instance. This method will return <tt>true</tt> iff the refCount was, +     * incremented successfully otherwise <tt>false</tt>. RefCounts are used to determine when a, +     * Store can be closed safely, i.e. as soon as there are no more references. Be sure to always call a, +     * corresponding {@link #decRef}, in a finally clause; otherwise the store may never be closed.  Note that, +     * {@link #close} simply calls decRef(), which means that the Store will not really be closed until {@link, +     * #decRef} has been called for all outstanding references., +     *, +     * Note: Close can safely be called multiple times., +     * @see #decRef(), +     * @see #incRef(), +     */, +    public final boolean tryIncRef() {, +                    return true;, +                return false;, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +     * @see #tryIncRef(), +     * @throws AlreadyClosedException iff the reference counter can not be incremented., +        if (tryIncRef() == false) {, +            throw new AlreadyClosedException("Store is already closed can't increment refCount current count [" + refCount.get() + "]");, +        }, +    }, +, +    /**, +     * Tries to increment the refCount of this Store instance. This method will return <tt>true</tt> iff the refCount was, +     * incremented successfully otherwise <tt>false</tt>. RefCounts are used to determine when a, +     * Store can be closed safely, i.e. as soon as there are no more references. Be sure to always call a, +     * corresponding {@link #decRef}, in a finally clause; otherwise the store may never be closed.  Note that, +     * {@link #close} simply calls decRef(), which means that the Store will not really be closed until {@link, +     * #decRef} has been called for all outstanding references., +     *, +     * Note: Close can safely be called multiple times., +     * @see #decRef(), +     * @see #incRef(), +     */, +    public final boolean tryIncRef() {, +                    return true;, +                return false;, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +        if (shard.store().tryIncRef()) {, +            } finally {, +                shard.store().decRef();, +            }, +        } else {, +            listener.onIgnoreRecovery(false, "local store closed, stop recovery");]