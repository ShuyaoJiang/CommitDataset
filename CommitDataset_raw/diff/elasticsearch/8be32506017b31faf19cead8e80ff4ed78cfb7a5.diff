[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import org.elasticsearch.xpack.common.http.HttpSettings;, +        settings.addAll(Security.getSettings(transportClientMode, extensionsService));, +        settings.addAll(HttpSettings.getSettings());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import org.elasticsearch.xpack.common.http.HttpSettings;, +        settings.addAll(Security.getSettings(transportClientMode, extensionsService));, +        settings.addAll(HttpSettings.getSettings());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/XPackSettings.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.xpack.security.Security;, +import org.elasticsearch.xpack.ssl.SSLClientAuth;, +import org.elasticsearch.xpack.ssl.SSLConfigurationSettings;, +import org.elasticsearch.xpack.ssl.VerificationMode;, +, +    public static final String GLOBAL_SSL_PREFIX = "xpack.ssl.";, +    private static final SSLConfigurationSettings GLOBAL_SSL = SSLConfigurationSettings.withPrefix(GLOBAL_SSL_PREFIX);, +    public static final String HTTP_SSL_PREFIX = Security.setting("http.ssl.");, +    private static final SSLConfigurationSettings HTTP_SSL = SSLConfigurationSettings.withPrefix(HTTP_SSL_PREFIX);, +    public static final String TRANSPORT_SSL_PREFIX = Security.setting("transport.ssl.");, +    private static final SSLConfigurationSettings TRANSPORT_SSL = SSLConfigurationSettings.withPrefix(TRANSPORT_SSL_PREFIX);, +, +        ALL_SETTINGS.addAll(GLOBAL_SSL.getAllSettings());, +        ALL_SETTINGS.addAll(HTTP_SSL.getAllSettings());, +        ALL_SETTINGS.addAll(TRANSPORT_SSL.getAllSettings());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import org.elasticsearch.xpack.common.http.HttpSettings;, +        settings.addAll(Security.getSettings(transportClientMode, extensionsService));, +        settings.addAll(HttpSettings.getSettings());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/XPackSettings.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.xpack.security.Security;, +import org.elasticsearch.xpack.ssl.SSLClientAuth;, +import org.elasticsearch.xpack.ssl.SSLConfigurationSettings;, +import org.elasticsearch.xpack.ssl.VerificationMode;, +, +    public static final String GLOBAL_SSL_PREFIX = "xpack.ssl.";, +    private static final SSLConfigurationSettings GLOBAL_SSL = SSLConfigurationSettings.withPrefix(GLOBAL_SSL_PREFIX);, +    public static final String HTTP_SSL_PREFIX = Security.setting("http.ssl.");, +    private static final SSLConfigurationSettings HTTP_SSL = SSLConfigurationSettings.withPrefix(HTTP_SSL_PREFIX);, +    public static final String TRANSPORT_SSL_PREFIX = Security.setting("transport.ssl.");, +    private static final SSLConfigurationSettings TRANSPORT_SSL = SSLConfigurationSettings.withPrefix(TRANSPORT_SSL_PREFIX);, +, +        ALL_SETTINGS.addAll(GLOBAL_SSL.getAllSettings());, +        ALL_SETTINGS.addAll(HTTP_SSL.getAllSettings());, +        ALL_SETTINGS.addAll(TRANSPORT_SSL.getAllSettings());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/common/http/HttpClient.java, +        this.defaultConnectionTimeout = HttpSettings.CONNECTION_TIMEOUT.get(settings);, +        this.defaultReadTimeout = HttpSettings.READ_TIMEOUT.get(settings);, +, +        final Integer proxyPort;, +        if (HttpSettings.PROXY_HOST.exists(settings)) {, +            proxyPort = HttpSettings.PROXY_PORT.get(settings);, +        } else {, +            proxyPort = null;, +        }, +        final String proxyHost = HttpSettings.PROXY_HOST.get(settings);, +            throw new IllegalArgumentException("HTTP Proxy requires both settings: [" + HttpSettings.PROXY_HOST_KEY + "] and [" +, +                    HttpSettings.PROXY_PORT_KEY + "]");, +        Settings sslSettings = settings.getByPrefix(HttpSettings.SSL_KEY_PREFIX);, +        this.sslSocketFactory = sslService.sslSocketFactory(settings.getByPrefix(HttpSettings.SSL_KEY_PREFIX));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import org.elasticsearch.xpack.common.http.HttpSettings;, +        settings.addAll(Security.getSettings(transportClientMode, extensionsService));, +        settings.addAll(HttpSettings.getSettings());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/XPackSettings.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.xpack.security.Security;, +import org.elasticsearch.xpack.ssl.SSLClientAuth;, +import org.elasticsearch.xpack.ssl.SSLConfigurationSettings;, +import org.elasticsearch.xpack.ssl.VerificationMode;, +, +    public static final String GLOBAL_SSL_PREFIX = "xpack.ssl.";, +    private static final SSLConfigurationSettings GLOBAL_SSL = SSLConfigurationSettings.withPrefix(GLOBAL_SSL_PREFIX);, +    public static final String HTTP_SSL_PREFIX = Security.setting("http.ssl.");, +    private static final SSLConfigurationSettings HTTP_SSL = SSLConfigurationSettings.withPrefix(HTTP_SSL_PREFIX);, +    public static final String TRANSPORT_SSL_PREFIX = Security.setting("transport.ssl.");, +    private static final SSLConfigurationSettings TRANSPORT_SSL = SSLConfigurationSettings.withPrefix(TRANSPORT_SSL_PREFIX);, +, +        ALL_SETTINGS.addAll(GLOBAL_SSL.getAllSettings());, +        ALL_SETTINGS.addAll(HTTP_SSL.getAllSettings());, +        ALL_SETTINGS.addAll(TRANSPORT_SSL.getAllSettings());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/common/http/HttpClient.java, +        this.defaultConnectionTimeout = HttpSettings.CONNECTION_TIMEOUT.get(settings);, +        this.defaultReadTimeout = HttpSettings.READ_TIMEOUT.get(settings);, +, +        final Integer proxyPort;, +        if (HttpSettings.PROXY_HOST.exists(settings)) {, +            proxyPort = HttpSettings.PROXY_PORT.get(settings);, +        } else {, +            proxyPort = null;, +        }, +        final String proxyHost = HttpSettings.PROXY_HOST.get(settings);, +            throw new IllegalArgumentException("HTTP Proxy requires both settings: [" + HttpSettings.PROXY_HOST_KEY + "] and [" +, +                    HttpSettings.PROXY_PORT_KEY + "]");, +        Settings sslSettings = settings.getByPrefix(HttpSettings.SSL_KEY_PREFIX);, +        this.sslSocketFactory = sslService.sslSocketFactory(settings.getByPrefix(HttpSettings.SSL_KEY_PREFIX));]