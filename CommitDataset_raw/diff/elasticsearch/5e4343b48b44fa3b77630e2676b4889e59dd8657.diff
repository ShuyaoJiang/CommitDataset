[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/soft/SoftFilterCache.java, +import org.apache.lucene.index.IndexReader;, + * A soft reference based filter cache that has soft keys on the <tt>IndexReader</tt>., + *, + * @author kimchy (shay.banon), +        super(index, indexSettings, threadPool, new MapMaker().softKeys().<IndexReader, ConcurrentMap<Filter, DocIdSet>>makeMap());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/soft/SoftFilterCache.java, +import org.apache.lucene.index.IndexReader;, + * A soft reference based filter cache that has soft keys on the <tt>IndexReader</tt>., + *, + * @author kimchy (shay.banon), +        super(index, indexSettings, threadPool, new MapMaker().softKeys().<IndexReader, ConcurrentMap<Filter, DocIdSet>>makeMap());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractConcurrentMapFilterCache.java, + * A base concurrent filter cache that accepts the actual cache to use., + *, + * @author kimchy (shay.banon), +    protected AbstractConcurrentMapFilterCache(Index index, @IndexSettings Settings indexSettings, ThreadPool threadPool,, +                                               ConcurrentMap<IndexReader, ConcurrentMap<Filter, DocIdSet>> cache) {, +        this.cache = cache;, +    protected ConcurrentMap<Filter, DocIdSet> buildFilterMap() {, +        return newConcurrentMap();, +    }, +                cachedFilters = buildFilterMap();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/soft/SoftFilterCache.java, +import org.apache.lucene.index.IndexReader;, + * A soft reference based filter cache that has soft keys on the <tt>IndexReader</tt>., + *, + * @author kimchy (shay.banon), +        super(index, indexSettings, threadPool, new MapMaker().softKeys().<IndexReader, ConcurrentMap<Filter, DocIdSet>>makeMap());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractConcurrentMapFilterCache.java, + * A base concurrent filter cache that accepts the actual cache to use., + *, + * @author kimchy (shay.banon), +    protected AbstractConcurrentMapFilterCache(Index index, @IndexSettings Settings indexSettings, ThreadPool threadPool,, +                                               ConcurrentMap<IndexReader, ConcurrentMap<Filter, DocIdSet>> cache) {, +        this.cache = cache;, +    protected ConcurrentMap<Filter, DocIdSet> buildFilterMap() {, +        return newConcurrentMap();, +    }, +                cachedFilters = buildFilterMap();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/weak/WeakFilterCache.java, +import org.apache.lucene.index.IndexReader;, + * A weak reference based filter cache that has weak keys on the <tt>IndexReader</tt>., + *, + * @author kimchy (shay.banon), +        super(index, indexSettings, threadPool, new MapMaker().weakKeys().<IndexReader, ConcurrentMap<Filter, DocIdSet>>makeMap());]