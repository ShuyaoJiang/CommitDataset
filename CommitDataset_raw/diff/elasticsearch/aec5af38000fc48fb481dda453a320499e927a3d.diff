[+++ /dev/null, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/test/integration/indexlifecycle/IndexLifecycleActionTests.java, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/test/integration/indexlifecycle/IndexLifecycleActionTests.java, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +++ /dev/null, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/test/integration/indexlifecycle/IndexLifecycleActionTests.java, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/test/integration/search/indicesboost/SimpleIndicesBoostSearchTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +        Settings nodeSettings = ImmutableSettings.settingsBuilder(), +                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1), +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0), +                .build();, +        startNode("server1", nodeSettings);, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/test/integration/indexlifecycle/IndexLifecycleActionTests.java, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/test/integration/search/indicesboost/SimpleIndicesBoostSearchTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +        Settings nodeSettings = ImmutableSettings.settingsBuilder(), +                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1), +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0), +                .build();, +        startNode("server1", nodeSettings);, +++ /dev/null, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/test/integration/indexlifecycle/IndexLifecycleActionTests.java, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/test/integration/search/indicesboost/SimpleIndicesBoostSearchTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +        Settings nodeSettings = ImmutableSettings.settingsBuilder(), +                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1), +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0), +                .build();, +        startNode("server1", nodeSettings);, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/test/integration/search/scriptfilter/ScriptFilterSearchTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +        Settings nodeSettings = ImmutableSettings.settingsBuilder(), +                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1), +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0), +                .build();, +        startNode("server1", nodeSettings);, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/test/integration/indexlifecycle/IndexLifecycleActionTests.java, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +                .put("cluster.routing.schedule", "20ms") // reroute every 20ms so we identify new nodes fast, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/test/integration/search/indicesboost/SimpleIndicesBoostSearchTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +        Settings nodeSettings = ImmutableSettings.settingsBuilder(), +                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1), +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0), +                .build();, +        startNode("server1", nodeSettings);, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/test/integration/search/scriptfilter/ScriptFilterSearchTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +        Settings nodeSettings = ImmutableSettings.settingsBuilder(), +                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1), +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0), +                .build();, +        startNode("server1", nodeSettings);, +++ /dev/null]