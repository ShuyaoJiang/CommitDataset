[+++ b/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +                    builder.nullValue(propNode.toString());, +            dateAsString = context.parser().textOrNull();, +, +        if (includeDefaults || fieldType().nullValue() != null) {, +            builder.field("null_value", fieldType().nullValueAsString());, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +                    builder.nullValue(propNode.toString());, +            dateAsString = context.parser().textOrNull();, +, +        if (includeDefaults || fieldType().nullValue() != null) {, +            builder.field("null_value", fieldType().nullValueAsString());, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +                if (value instanceof Number) {, +                    double doubleValue = ((Number) value).doubleValue();, +                    if (doubleValue < Byte.MIN_VALUE || doubleValue > Byte.MAX_VALUE) {, +                        throw new IllegalArgumentException("Value [" + value + "] is out of range for a byte");, +                    }, +                    if (doubleValue % 1 != 0) {, +                        throw new IllegalArgumentException("Value [" + value + "] has a decimal part");, +                    }, +                    return ((Number) value).byteValue();, +                    double doubleValue = ((Number) value).doubleValue();, +                    if (doubleValue < Short.MIN_VALUE || doubleValue > Short.MAX_VALUE) {, +                        throw new IllegalArgumentException("Value [" + value + "] is out of range for a short");, +                    }, +                    if (doubleValue % 1 != 0) {, +                        throw new IllegalArgumentException("Value [" + value + "] has a decimal part");, +                    }, +                    double doubleValue = ((Number) value).doubleValue();, +                    if (doubleValue < Integer.MIN_VALUE || doubleValue > Integer.MAX_VALUE) {, +                        throw new IllegalArgumentException("Value [" + value + "] is out of range for an integer");, +                    }, +                    if (doubleValue % 1 != 0) {, +                        throw new IllegalArgumentException("Value [" + value + "] has a decimal part");, +                    }, +                    double doubleValue = ((Number) value).doubleValue();, +                    if (doubleValue < Long.MIN_VALUE || doubleValue > Long.MAX_VALUE) {, +                        throw new IllegalArgumentException("Value [" + value + "] is out of range for a long");, +                    }, +                    if (doubleValue % 1 != 0) {, +                        throw new IllegalArgumentException("Value [" + value + "] has a decimal part");, +                    }, +, +        if (includeDefaults || fieldType().nullValue() != null) {, +            builder.field("null_value", fieldType().nullValue());, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +                    builder.nullValue(propNode.toString());, +            dateAsString = context.parser().textOrNull();, +, +        if (includeDefaults || fieldType().nullValue() != null) {, +            builder.field("null_value", fieldType().nullValueAsString());, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +                if (value instanceof Number) {, +                    double doubleValue = ((Number) value).doubleValue();, +                    if (doubleValue < Byte.MIN_VALUE || doubleValue > Byte.MAX_VALUE) {, +                        throw new IllegalArgumentException("Value [" + value + "] is out of range for a byte");, +                    }, +                    if (doubleValue % 1 != 0) {, +                        throw new IllegalArgumentException("Value [" + value + "] has a decimal part");, +                    }, +                    return ((Number) value).byteValue();, +                    double doubleValue = ((Number) value).doubleValue();, +                    if (doubleValue < Short.MIN_VALUE || doubleValue > Short.MAX_VALUE) {, +                        throw new IllegalArgumentException("Value [" + value + "] is out of range for a short");, +                    }, +                    if (doubleValue % 1 != 0) {, +                        throw new IllegalArgumentException("Value [" + value + "] has a decimal part");, +                    }, +                    double doubleValue = ((Number) value).doubleValue();, +                    if (doubleValue < Integer.MIN_VALUE || doubleValue > Integer.MAX_VALUE) {, +                        throw new IllegalArgumentException("Value [" + value + "] is out of range for an integer");, +                    }, +                    if (doubleValue % 1 != 0) {, +                        throw new IllegalArgumentException("Value [" + value + "] has a decimal part");, +                    }, +                    double doubleValue = ((Number) value).doubleValue();, +                    if (doubleValue < Long.MIN_VALUE || doubleValue > Long.MAX_VALUE) {, +                        throw new IllegalArgumentException("Value [" + value + "] is out of range for a long");, +                    }, +                    if (doubleValue % 1 != 0) {, +                        throw new IllegalArgumentException("Value [" + value + "] has a decimal part");, +                    }, +, +        if (includeDefaults || fieldType().nullValue() != null) {, +            builder.field("null_value", fieldType().nullValue());, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/IpFieldMapper.java, +            addressAsObject = context.parser().textOrNull();, +        if (includeDefaults || fieldType().nullValue() != null) {, +            builder.field("null_value", InetAddresses.toAddrString((InetAddress) fieldType().nullValue()));]