[+++ b/CONTRIBUTING.md, +Make sure you have [Maven](http://maven.apache.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `mvn eclipse:eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors. Please make sure the [m2e-connector](http://marketplace.eclipse.org/content/m2e-connector-maven-dependency-plugin) is not installed in your Eclipse distribution as it will interfere with setup performed by `mvn eclipse:eclipse`., +++ b/CONTRIBUTING.md, +Make sure you have [Maven](http://maven.apache.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `mvn eclipse:eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors. Please make sure the [m2e-connector](http://marketplace.eclipse.org/content/m2e-connector-maven-dependency-plugin) is not installed in your Eclipse distribution as it will interfere with setup performed by `mvn eclipse:eclipse`., +++ b/TESTING.asciidoc, +or run jessie and trusty:, +mvn -Dtests.vagrant -pl qa/vagrant verify -DboxesToTest='jessie, trusty', +If you want to run a specific test on several boxes you can do:, +, +---------------------------------------, +mvn -Dtests.vagrant=all -pl qa/vagrant verify -DtestScripts=*tar*.bats, +---------------------------------------, +, +* sles-12, +++ b/CONTRIBUTING.md, +Make sure you have [Maven](http://maven.apache.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `mvn eclipse:eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors. Please make sure the [m2e-connector](http://marketplace.eclipse.org/content/m2e-connector-maven-dependency-plugin) is not installed in your Eclipse distribution as it will interfere with setup performed by `mvn eclipse:eclipse`., +++ b/TESTING.asciidoc, +or run jessie and trusty:, +mvn -Dtests.vagrant -pl qa/vagrant verify -DboxesToTest='jessie, trusty', +If you want to run a specific test on several boxes you can do:, +, +---------------------------------------, +mvn -Dtests.vagrant=all -pl qa/vagrant verify -DtestScripts=*tar*.bats, +---------------------------------------, +, +* sles-12, +++ b/Vagrantfile, +    ubuntu_common config, extra: <<-SHELL, +      # Install Jayatana so we can work around it being present., +      [ -f /usr/share/java/jayatanaag.jar ] || install jayatana, +    SHELL, +    opensuse_common config, +  end, +  # The SLES boxes are not considered to be highest quality, but seem to be sufficient for a test run, +  config.vm.define "sles-12" do |config|, +    config.vm.box = "idar/sles12", +    sles_common config, +  config.vm.provider "virtualbox" do |v|, +    # Give the boxes 2GB so they can run our tests if they have to., +    v.memory = 2048, +  end, +def ubuntu_common(config, extra: ''), +  deb_common config, 'apt-add-repository -y ppa:openjdk-r/ppa > /dev/null 2>&1', 'openjdk-r-*', extra: extra, +def deb_common(config, add_openjdk_repository_command, openjdk_list, extra: ''), +          apt-get update), +      #{extra}, +def opensuse_common(config), +  suse_common config, '', +end, +, +def suse_common(config, extra), +    java_package: "java-1_8_0-openjdk-devel",, +    extra: extra), +end, +, +def sles_common(config), +  extra = <<-SHELL, +    zypper rr systemsmanagement_puppet, +    zypper addrepo -t yast2 http://demeter.uni-regensburg.de/SLES12-x64/DVD1/ dvd1 || true, +    zypper addrepo -t yast2 http://demeter.uni-regensburg.de/SLES12-x64/DVD2/ dvd2 || true, +    zypper addrepo http://download.opensuse.org/repositories/Java:Factory/SLE_12/Java:Factory.repo || true, +    zypper --no-gpg-checks --non-interactive refresh, +    zypper --non-interactive install git-core, +SHELL, +  suse_common config, extra, +++ b/CONTRIBUTING.md, +Make sure you have [Maven](http://maven.apache.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `mvn eclipse:eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors. Please make sure the [m2e-connector](http://marketplace.eclipse.org/content/m2e-connector-maven-dependency-plugin) is not installed in your Eclipse distribution as it will interfere with setup performed by `mvn eclipse:eclipse`., +++ b/TESTING.asciidoc, +or run jessie and trusty:, +mvn -Dtests.vagrant -pl qa/vagrant verify -DboxesToTest='jessie, trusty', +If you want to run a specific test on several boxes you can do:, +, +---------------------------------------, +mvn -Dtests.vagrant=all -pl qa/vagrant verify -DtestScripts=*tar*.bats, +---------------------------------------, +, +* sles-12, +++ b/Vagrantfile, +    ubuntu_common config, extra: <<-SHELL, +      # Install Jayatana so we can work around it being present., +      [ -f /usr/share/java/jayatanaag.jar ] || install jayatana, +    SHELL, +    opensuse_common config, +  end, +  # The SLES boxes are not considered to be highest quality, but seem to be sufficient for a test run, +  config.vm.define "sles-12" do |config|, +    config.vm.box = "idar/sles12", +    sles_common config, +  config.vm.provider "virtualbox" do |v|, +    # Give the boxes 2GB so they can run our tests if they have to., +    v.memory = 2048, +  end, +def ubuntu_common(config, extra: ''), +  deb_common config, 'apt-add-repository -y ppa:openjdk-r/ppa > /dev/null 2>&1', 'openjdk-r-*', extra: extra, +def deb_common(config, add_openjdk_repository_command, openjdk_list, extra: ''), +          apt-get update), +      #{extra}, +def opensuse_common(config), +  suse_common config, '', +end]