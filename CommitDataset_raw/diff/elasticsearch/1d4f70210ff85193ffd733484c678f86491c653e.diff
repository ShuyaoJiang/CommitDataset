[+++ b/core/src/main/java/org/elasticsearch/search/MultiValueMode.java, +                private long value;, +                    this.value = singleton.advanceExact(target) ? singleton.longValue() : missingValue;, +                    return this.value;, +                private long value;, +                    this.value = values.advanceExact(target) ? pick(values) : missingValue;, +                    return value;, +                private double value;, +                    this.value = singleton.advanceExact(doc) ? singleton.doubleValue() : missingValue;, +                    return this.value;, +                private double value;, +                    value = values.advanceExact(target) ? pick(values) : missingValue;, +                    return this.value;, +                private BytesRef value;, +                    this.value = singleton.advanceExact(target) ? singleton.binaryValue() : missingValue;, +                    return this.value;, +++ b/core/src/main/java/org/elasticsearch/search/MultiValueMode.java, +                private long value;, +                    this.value = singleton.advanceExact(target) ? singleton.longValue() : missingValue;, +                    return this.value;, +                private long value;, +                    this.value = values.advanceExact(target) ? pick(values) : missingValue;, +                    return value;, +                private double value;, +                    this.value = singleton.advanceExact(doc) ? singleton.doubleValue() : missingValue;, +                    return this.value;, +                private double value;, +                    value = values.advanceExact(target) ? pick(values) : missingValue;, +                    return this.value;, +                private BytesRef value;, +                    this.value = singleton.advanceExact(target) ? singleton.binaryValue() : missingValue;, +                    return this.value;, +++ b/core/src/test/java/org/elasticsearch/search/MultiValueModeTests.java, +                    verifyLongValueCanCalledMoreThanOnce(selected, actual);, +, +    private void verifyLongValueCanCalledMoreThanOnce(NumericDocValues values, long expected) throws IOException {, +        for (int j = 0, numCall = randomIntBetween(1, 10); j < numCall; j++) {, +            assertEquals(expected, values.longValue());, +        }, +    }, +, +                    verifyLongValueCanCalledMoreThanOnce(selected, actual);, +, +                    verifyDoubleValueCanCalledMoreThanOnce(selected, actual);, +, +    private void verifyDoubleValueCanCalledMoreThanOnce(NumericDoubleValues values, double expected) throws IOException {, +        for (int j = 0, numCall = randomIntBetween(1, 10); j < numCall; j++) {, +            assertTrue(Double.compare(values.doubleValue(), expected) == 0);, +        }, +    }, +, +                    final double actual = selected.doubleValue();, +                    verifyDoubleValueCanCalledMoreThanOnce(selected, actual);, +, +                array[i] = new BytesRef(randomAlphaOfLengthBetween(8, 8));, +                values[j] = new BytesRef(randomAlphaOfLengthBetween(8, 8));, +        for (BytesRef missingValue : new BytesRef[] { new BytesRef(), new BytesRef(randomAlphaOfLengthBetween(8, 8)) }) {, +                    verifyBinaryValueCanCalledMoreThanOnce(selected, actual);, +, +    private void verifyBinaryValueCanCalledMoreThanOnce(BinaryDocValues values, BytesRef expected) throws IOException {, +        for (int j = 0, numCall = randomIntBetween(1, 10); j < numCall; j++) {, +            assertEquals(values.binaryValue(), expected);, +        }, +    }, +, +        for (BytesRef missingValue : new BytesRef[] { new BytesRef(), new BytesRef(randomAlphaOfLengthBetween(8, 8)) }) {, +                    verifyBinaryValueCanCalledMoreThanOnce(selected, actual);, +, +                long actual = -1;, +                if (selected.advanceExact(i)) {, +                    actual = selected.ordValue();, +                    verifyOrdValueCanCalledMoreThanOnce(selected, selected.ordValue());, +                }, +    private void verifyOrdValueCanCalledMoreThanOnce(SortedDocValues values, long expected) throws IOException {, +        for (int j = 0, numCall = randomIntBetween(1, 10); j < numCall; j++) {, +            assertEquals(values.ordValue(), expected);, +        }, +    }, +, +                int actual = -1;, +                if (selected.advanceExact(root)) {, +                    actual = selected.ordValue();, +                    verifyOrdValueCanCalledMoreThanOnce(selected, actual);, +                }]