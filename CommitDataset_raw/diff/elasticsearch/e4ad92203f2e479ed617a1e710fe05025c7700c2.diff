[+++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/util/BigDoubleArrayList.java, +import org.apache.lucene.util.RamUsageEstimator;, +/**, + * Float array abstraction able to support more than 2B values. This implementation slices data into fixed-sized blocks of, + * configurable length., + */, +    /**, +     * Default page size, 16KB of memory per page., +     */, +        return RamUsageEstimator.NUM_BYTES_DOUBLE;, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/util/BigDoubleArrayList.java, +import org.apache.lucene.util.RamUsageEstimator;, +/**, + * Float array abstraction able to support more than 2B values. This implementation slices data into fixed-sized blocks of, + * configurable length., + */, +    /**, +     * Default page size, 16KB of memory per page., +     */, +        return RamUsageEstimator.NUM_BYTES_DOUBLE;, +++ b/src/main/java/org/elasticsearch/common/util/BigFloatArrayList.java, +import org.apache.lucene.util.RamUsageEstimator;, +/**, + * Float array abstraction able to support more than 2B values. This implementation slices data into fixed-sized blocks of, + * configurable length., + */, +    /**, +     * Default page size, 16KB of memory per page., +     */, +        return RamUsageEstimator.NUM_BYTES_FLOAT;, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/util/BigDoubleArrayList.java, +import org.apache.lucene.util.RamUsageEstimator;, +/**, + * Float array abstraction able to support more than 2B values. This implementation slices data into fixed-sized blocks of, + * configurable length., + */, +    /**, +     * Default page size, 16KB of memory per page., +     */, +        return RamUsageEstimator.NUM_BYTES_DOUBLE;, +++ b/src/main/java/org/elasticsearch/common/util/BigFloatArrayList.java, +import org.apache.lucene.util.RamUsageEstimator;, +/**, + * Float array abstraction able to support more than 2B values. This implementation slices data into fixed-sized blocks of, + * configurable length., + */, +    /**, +     * Default page size, 16KB of memory per page., +     */, +        return RamUsageEstimator.NUM_BYTES_FLOAT;, +++ b/src/main/java/org/elasticsearch/common/util/BigIntArray.java, +import org.apache.lucene.util.RamUsageEstimator;, +/**, + * Int array abstraction able to support more than 2B values. This implementation slices data into fixed-sized blocks of, + * configurable length., + */, +    /**, +     * Default page size, 16KB of memory per page., +     */, +        return RamUsageEstimator.NUM_BYTES_INT;, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/util/BigDoubleArrayList.java, +import org.apache.lucene.util.RamUsageEstimator;, +/**, + * Float array abstraction able to support more than 2B values. This implementation slices data into fixed-sized blocks of, + * configurable length., + */, +    /**, +     * Default page size, 16KB of memory per page., +     */, +        return RamUsageEstimator.NUM_BYTES_DOUBLE;, +++ b/src/main/java/org/elasticsearch/common/util/BigFloatArrayList.java, +import org.apache.lucene.util.RamUsageEstimator;, +/**, + * Float array abstraction able to support more than 2B values. This implementation slices data into fixed-sized blocks of, + * configurable length., + */, +    /**, +     * Default page size, 16KB of memory per page., +     */, +        return RamUsageEstimator.NUM_BYTES_FLOAT;, +++ b/src/main/java/org/elasticsearch/common/util/BigIntArray.java, +import org.apache.lucene.util.RamUsageEstimator;, +/**, + * Int array abstraction able to support more than 2B values. This implementation slices data into fixed-sized blocks of, + * configurable length., + */, +    /**, +     * Default page size, 16KB of memory per page., +     */, +        return RamUsageEstimator.NUM_BYTES_INT;, +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdReaderTypeCache.java, +import org.apache.lucene.util.RamUsageEstimator;, +        sizeInBytes += RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + (idToDoc._valuesSize() * RamUsageEstimator.NUM_BYTES_INT);, +                sizeInBytes += RamUsageEstimator.NUM_BYTES_OBJECT_REF;, +                sizeInBytes += RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + (bytesArray.length() + RamUsageEstimator.NUM_BYTES_INT);]