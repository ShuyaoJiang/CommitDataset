[+++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                        translog.commit();, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                        translog.commit();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            this.rootMappers.put(ParentFieldMapper.class, new ParentFieldMapper(indexSettings, mapperService.fullName(ParentFieldMapper.NAME), /* parent type */builder.name()));, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                        translog.commit();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            this.rootMappers.put(ParentFieldMapper.class, new ParentFieldMapper(indexSettings, mapperService.fullName(ParentFieldMapper.NAME), /* parent type */builder.name()));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +    public Mapper.TypeParser.ParserContext parserContext(String type) {, +        return new Mapper.TypeParser.ParserContext(type, analysisService, similarityLookupService, mapperService, typeParsers, indexVersionCreated, parseFieldMatcher);, +        Mapper.TypeParser.ParserContext parserContext = parserContext(type);, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                        translog.commit();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            this.rootMappers.put(ParentFieldMapper.class, new ParentFieldMapper(indexSettings, mapperService.fullName(ParentFieldMapper.NAME), /* parent type */builder.name()));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +    public Mapper.TypeParser.ParserContext parserContext(String type) {, +        return new Mapper.TypeParser.ParserContext(type, analysisService, similarityLookupService, mapperService, typeParsers, indexVersionCreated, parseFieldMatcher);, +        Mapper.TypeParser.ParserContext parserContext = parserContext(type);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            private final String type;, +, +            public ParserContext(String type, AnalysisService analysisService, SimilarityLookupService similarityLookupService,, +                this.type = type;, +            public String type() {, +                return type;, +            }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                        translog.commit();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            this.rootMappers.put(ParentFieldMapper.class, new ParentFieldMapper(indexSettings, mapperService.fullName(ParentFieldMapper.NAME), /* parent type */builder.name()));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +    public Mapper.TypeParser.ParserContext parserContext(String type) {, +        return new Mapper.TypeParser.ParserContext(type, analysisService, similarityLookupService, mapperService, typeParsers, indexVersionCreated, parseFieldMatcher);, +        Mapper.TypeParser.ParserContext parserContext = parserContext(type);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            private final String type;, +, +            public ParserContext(String type, AnalysisService analysisService, SimilarityLookupService similarityLookupService,, +                this.type = type;, +            public String type() {, +                return type;, +            }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +            final Mapper.TypeParser.ParserContext parserContext = documentMapperParser().parserContext(type);, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                        translog.commit();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            this.rootMappers.put(ParentFieldMapper.class, new ParentFieldMapper(indexSettings, mapperService.fullName(ParentFieldMapper.NAME), /* parent type */builder.name()));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +    public Mapper.TypeParser.ParserContext parserContext(String type) {, +        return new Mapper.TypeParser.ParserContext(type, analysisService, similarityLookupService, mapperService, typeParsers, indexVersionCreated, parseFieldMatcher);, +        Mapper.TypeParser.ParserContext parserContext = parserContext(type);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            private final String type;, +, +            public ParserContext(String type, AnalysisService analysisService, SimilarityLookupService similarityLookupService,, +                this.type = type;, +            public String type() {, +                return type;, +            }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +            final Mapper.TypeParser.ParserContext parserContext = documentMapperParser().parserContext(type);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +import org.apache.lucene.index.DocValuesType;, +import org.elasticsearch.index.mapper.*;, +        public static final MappedFieldType JOIN_FIELD_TYPE = new ParentFieldType();, +, +            JOIN_FIELD_TYPE.setHasDocValues(true);, +            JOIN_FIELD_TYPE.setDocValuesType(DocValuesType.SORTED);, +            JOIN_FIELD_TYPE.freeze();, +        private String parentType;, +, +        private final String documentType;, +        private final MappedFieldType parentJoinFieldType = Defaults.JOIN_FIELD_TYPE.clone();, +, +        private final MappedFieldType childJoinFieldType = Defaults.JOIN_FIELD_TYPE.clone();, +, +        public Builder(String documentType) {, +            this.documentType = documentType;, +            this.parentType = type;, +        public Builder fieldDataSettings(Settings fieldDataSettings) {, +            Settings settings = Settings.builder().put(childJoinFieldType.fieldDataType().getSettings()).put(fieldDataSettings).build();, +            childJoinFieldType.setFieldDataType(new FieldDataType(childJoinFieldType.fieldDataType().getType(), settings));, +            return this;, +        }, +, +        @Override, +            if (parentType == null) {, +            parentJoinFieldType.setNames(new MappedFieldType.Names(joinField(documentType)));, +            parentJoinFieldType.setFieldDataType(null);, +            childJoinFieldType.setNames(new MappedFieldType.Names(joinField(parentType)));, +            if (context.indexCreatedVersion().before(Version.V_2_0_0_beta1)) {, +                childJoinFieldType.setHasDocValues(false);]