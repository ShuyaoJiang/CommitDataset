[+++ b/src/main/java/org/elasticsearch/index/mapper/internal/AllFieldMapper.java, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +        if (!includeDefaults) {, +            // simulate the generation to make sure we don't add unnecessary content if all is default, +            // if all are defaults, no need to write it at all - generating is twice is ok though, +            BytesStreamOutput bytesStreamOutput = new BytesStreamOutput(0);, +            XContentBuilder b =  new XContentBuilder(builder.contentType().xContent(), bytesStreamOutput);, +            long pos = bytesStreamOutput.position();, +            innerToXContent(b, false);, +            b.flush();, +            if (pos == bytesStreamOutput.position()) {, +        }, +        innerToXContent(builder, includeDefaults);, +        builder.endObject();, +        return builder;, +    }, +, +    private void innerToXContent(XContentBuilder builder, boolean includeDefaults) throws IOException {, +            builder.field("store_term_vectors", fieldType.storeTermVectors());, +, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/AllFieldMapper.java, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +        if (!includeDefaults) {, +            // simulate the generation to make sure we don't add unnecessary content if all is default, +            // if all are defaults, no need to write it at all - generating is twice is ok though, +            BytesStreamOutput bytesStreamOutput = new BytesStreamOutput(0);, +            XContentBuilder b =  new XContentBuilder(builder.contentType().xContent(), bytesStreamOutput);, +            long pos = bytesStreamOutput.position();, +            innerToXContent(b, false);, +            b.flush();, +            if (pos == bytesStreamOutput.position()) {, +        }, +        innerToXContent(builder, includeDefaults);, +        builder.endObject();, +        return builder;, +    }, +, +    private void innerToXContent(XContentBuilder builder, boolean includeDefaults) throws IOException {, +            builder.field("store_term_vectors", fieldType.storeTermVectors());, +, +++ b/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java, +import org.apache.lucene.search.Query;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.hamcrest.Matchers.*;, +, +    @Test, +    public void testRandom() throws Exception {, +        boolean omitNorms = false;, +        boolean stored = false;, +        boolean enabled = true;, +        boolean autoBoost = false;, +        boolean tv_stored = false;, +        boolean tv_payloads = false;, +        boolean tv_offsets = false;, +        boolean tv_positions = false;, +        String similarity = null;, +        boolean fieldData = false;, +        XContentBuilder mappingBuilder = jsonBuilder();, +        mappingBuilder.startObject().startObject("test");, +        List<Tuple<String, Boolean>> booleanOptionList = new ArrayList<Tuple<String, Boolean>>();, +        boolean allDefault = true;, +        if (frequently()) {, +            allDefault = false;, +            mappingBuilder.startObject("_all");, +            if (randomBoolean()) {, +                booleanOptionList.add(new Tuple<String, Boolean>("omit_norms", omitNorms = randomBoolean()));, +            }, +            if (randomBoolean()) {, +                booleanOptionList.add(new Tuple<String, Boolean>("store", stored = randomBoolean()));, +            }, +            if (randomBoolean()) {, +                booleanOptionList.add(new Tuple<String, Boolean>("store_term_vectors", tv_stored = randomBoolean()));, +            }, +            if (randomBoolean()) {, +                booleanOptionList.add(new Tuple<String, Boolean>("enabled", enabled = randomBoolean()));, +            }, +            if (randomBoolean()) {, +                booleanOptionList.add(new Tuple<String, Boolean>("auto_boost", autoBoost = randomBoolean()));, +            }, +            if (randomBoolean()) {, +                booleanOptionList.add(new Tuple<String, Boolean>("store_term_vector_offsets", tv_offsets = randomBoolean()));, +            }, +            if (randomBoolean()) {, +                booleanOptionList.add(new Tuple<String, Boolean>("store_term_vector_positions", tv_positions = randomBoolean()));, +            }, +            if (randomBoolean()) {, +                booleanOptionList.add(new Tuple<String, Boolean>("store_term_vector_payloads", tv_payloads = randomBoolean()));, +            }, +            Collections.shuffle(booleanOptionList, getRandom());, +            for (Tuple<String, Boolean> option : booleanOptionList) {, +                mappingBuilder.field(option.v1(), option.v2().booleanValue());]