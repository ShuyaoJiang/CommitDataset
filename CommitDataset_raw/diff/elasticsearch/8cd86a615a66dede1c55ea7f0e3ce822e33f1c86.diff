[+++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType) throws Exception {, +        return add(new BytesArray(data, from, length), isTemplateRequest, indices, types, searchType, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IndicesOptions indicesOptions) throws Exception {, +        return add(data, isTemplateRequest, indices, types, searchType, null, indicesOptions, true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex) throws Exception {, +            if (isTemplateRequest) {, +                searchRequest.templateSource(data.slice(from,  nextMarker - from));, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType) throws Exception {, +        return add(new BytesArray(data, from, length), isTemplateRequest, indices, types, searchType, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IndicesOptions indicesOptions) throws Exception {, +        return add(data, isTemplateRequest, indices, types, searchType, null, indicesOptions, true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex) throws Exception {, +            if (isTemplateRequest) {, +                searchRequest.templateSource(data.slice(from,  nextMarker - from));, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/rest/action/search/RestMultiSearchAction.java, +        controller.registerHandler(GET, "/_msearch/template", this);, +        controller.registerHandler(POST, "/_msearch/template", this);, +        controller.registerHandler(GET, "/{index}/_msearch/template", this);, +        controller.registerHandler(POST, "/{index}/_msearch/template", this);, +        controller.registerHandler(GET, "/{index}/{type}/_msearch/template", this);, +        controller.registerHandler(POST, "/{index}/{type}/_msearch/template", this);, +, +        String path = request.path();, +        boolean isTemplateRequest = isTemplateRequest(path);, +        multiSearchRequest.add(RestActions.getRestContent(request), isTemplateRequest, indices, types, request.param("search_type"), request.param("routing"), indicesOptions, allowExplicitIndex);, +, +    private boolean isTemplateRequest(String path) {, +        return (path != null && path.endsWith("/template"));, +    }, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType) throws Exception {, +        return add(new BytesArray(data, from, length), isTemplateRequest, indices, types, searchType, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IndicesOptions indicesOptions) throws Exception {, +        return add(data, isTemplateRequest, indices, types, searchType, null, indicesOptions, true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex) throws Exception {, +            if (isTemplateRequest) {, +                searchRequest.templateSource(data.slice(from,  nextMarker - from));, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/rest/action/search/RestMultiSearchAction.java, +        controller.registerHandler(GET, "/_msearch/template", this);, +        controller.registerHandler(POST, "/_msearch/template", this);, +        controller.registerHandler(GET, "/{index}/_msearch/template", this);, +        controller.registerHandler(POST, "/{index}/_msearch/template", this);, +        controller.registerHandler(GET, "/{index}/{type}/_msearch/template", this);, +        controller.registerHandler(POST, "/{index}/{type}/_msearch/template", this);, +, +        String path = request.path();, +        boolean isTemplateRequest = isTemplateRequest(path);, +        multiSearchRequest.add(RestActions.getRestContent(request), isTemplateRequest, indices, types, request.param("search_type"), request.param("routing"), indicesOptions, allowExplicitIndex);, +, +    private boolean isTemplateRequest(String path) {, +        return (path != null && path.endsWith("/template"));, +    }, +++ b/core/src/test/java/org/elasticsearch/action/search/MultiSearchRequestTests.java, +        MultiSearchRequest request = new MultiSearchRequest().add(data, 0, data.length, false, null, null, null);, +        MultiSearchRequest request = new MultiSearchRequest().add(data, 0, data.length, false, null, null, null);, +        MultiSearchRequest request = new MultiSearchRequest().add(data, 0, data.length, false, null, null, null);, +        MultiSearchRequest request = new MultiSearchRequest().add(data, 0, data.length, false, null, null, null);, +        assertThat(request.requests().size(), equalTo(3));, +        assertThat(request.requests().get(0).indices()[0], equalTo("test0"));, +        assertThat(request.requests().get(0).indices()[1], equalTo("test1"));, +        assertThat(request.requests().get(0).requestCache(), equalTo(true));, +        assertThat(request.requests().get(0).preference(), nullValue());, +        assertThat(request.requests().get(1).indices()[0], equalTo("test2"));, +        assertThat(request.requests().get(1).indices()[1], equalTo("test3"));, +        assertThat(request.requests().get(1).types()[0], equalTo("type1"));, +        assertThat(request.requests().get(1).requestCache(), nullValue());, +        assertThat(request.requests().get(1).preference(), equalTo("_local"));, +        assertThat(request.requests().get(2).indices()[0], equalTo("test4"));, +        assertThat(request.requests().get(2).indices()[1], equalTo("test1"));, +        assertThat(request.requests().get(2).types()[0], equalTo("type2"));, +        assertThat(request.requests().get(2).types()[1], equalTo("type1"));, +        assertThat(request.requests().get(2).routing(), equalTo("123"));, +    }, +, +    @Test, +    public void simpleAdd5() throws Exception {, +        byte[] data = StreamsUtils.copyToBytesFromClasspath("/org/elasticsearch/action/search/simple-msearch5.json");, +        MultiSearchRequest request = new MultiSearchRequest().add(data, 0, data.length, true, null, null, null);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType) throws Exception {, +        return add(new BytesArray(data, from, length), isTemplateRequest, indices, types, searchType, null, IndicesOptions.strictExpandOpenAndForbidClosed(), true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, IndicesOptions indicesOptions) throws Exception {, +        return add(data, isTemplateRequest, indices, types, searchType, null, indicesOptions, true);, +    public MultiSearchRequest add(BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex) throws Exception {, +            if (isTemplateRequest) {, +                searchRequest.templateSource(data.slice(from,  nextMarker - from));, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/rest/action/search/RestMultiSearchAction.java, +        controller.registerHandler(GET, "/_msearch/template", this);, +        controller.registerHandler(POST, "/_msearch/template", this);, +        controller.registerHandler(GET, "/{index}/_msearch/template", this);]