[+++ b/qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/50_missing.yml, +      catch: "missing", +      catch: "missing", +++ b/qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/50_missing.yml, +      catch: "missing", +      catch: "missing", +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +        final AtomicReference<RemoteTransportException> transportException = new AtomicReference<>();, +                            RemoteTransportException exception = transportException.get();, +                        RemoteTransportException exception = new RemoteTransportException("error while communicating with remote cluster [", +                                + clusterName + "]", e);, +++ b/qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/50_missing.yml, +      catch: "missing", +      catch: "missing", +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +        final AtomicReference<RemoteTransportException> transportException = new AtomicReference<>();, +                            RemoteTransportException exception = transportException.get();, +                        RemoteTransportException exception = new RemoteTransportException("error while communicating with remote cluster [", +                                + clusterName + "]", e);, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterConnectionTests.java, +import org.elasticsearch.core.internal.io.IOUtils;, +import org.elasticsearch.index.IndexNotFoundException;, +                        if ("index_not_found".equals(request.preference())) {, +                            channel.sendResponse(new IndexNotFoundException("index"));, +                        } else {, +                        }, +++ b/qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/50_missing.yml, +      catch: "missing", +      catch: "missing", +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +        final AtomicReference<RemoteTransportException> transportException = new AtomicReference<>();, +                            RemoteTransportException exception = transportException.get();, +                        RemoteTransportException exception = new RemoteTransportException("error while communicating with remote cluster [", +                                + clusterName + "]", e);, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterConnectionTests.java, +import org.elasticsearch.core.internal.io.IOUtils;, +import org.elasticsearch.index.IndexNotFoundException;, +                        if ("index_not_found".equals(request.preference())) {, +                            channel.sendResponse(new IndexNotFoundException("index"));, +                        } else {, +                        }, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java, +import org.elasticsearch.rest.RestStatus;, +                    {, +                        final CountDownLatch latch = new CountDownLatch(1);, +                        AtomicReference<Map<String, ClusterSearchShardsResponse>> response = new AtomicReference<>();, +                        AtomicReference<Exception> failure = new AtomicReference<>();, +                        remoteClusterService.collectSearchShards(IndicesOptions.lenientExpandOpen(), "index_not_found",, +                                null, remoteIndicesByCluster,, +                                new LatchedActionListener<>(ActionListener.wrap(response::set, failure::set), latch));, +                        assertTrue(latch.await(1, TimeUnit.SECONDS));, +                        assertNull(response.get());, +                        assertNotNull(failure.get());, +                        assertThat(failure.get(), instanceOf(RemoteTransportException.class));, +                        RemoteTransportException remoteTransportException = (RemoteTransportException) failure.get();, +                        assertEquals(RestStatus.NOT_FOUND, remoteTransportException.status());, +                    }, +                        assertThat(failure.get(), instanceOf(RemoteTransportException.class));, +                        assertThat(failure.get().getMessage(), containsString("error while communicating with remote cluster ["));, +                        assertThat(failure.get().getCause(), instanceOf(NodeDisconnectedException.class));, +++ b/qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/50_missing.yml, +      catch: "missing", +      catch: "missing", +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +        final AtomicReference<RemoteTransportException> transportException = new AtomicReference<>();, +                            RemoteTransportException exception = transportException.get();, +                        RemoteTransportException exception = new RemoteTransportException("error while communicating with remote cluster [", +                                + clusterName + "]", e);, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterConnectionTests.java, +import org.elasticsearch.core.internal.io.IOUtils;, +import org.elasticsearch.index.IndexNotFoundException;, +                        if ("index_not_found".equals(request.preference())) {, +                            channel.sendResponse(new IndexNotFoundException("index"));, +                        } else {, +                        }, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java, +import org.elasticsearch.rest.RestStatus;, +                    {, +                        final CountDownLatch latch = new CountDownLatch(1);, +                        AtomicReference<Map<String, ClusterSearchShardsResponse>> response = new AtomicReference<>();, +                        AtomicReference<Exception> failure = new AtomicReference<>();, +                        remoteClusterService.collectSearchShards(IndicesOptions.lenientExpandOpen(), "index_not_found",, +                                null, remoteIndicesByCluster,, +                                new LatchedActionListener<>(ActionListener.wrap(response::set, failure::set), latch));, +                        assertTrue(latch.await(1, TimeUnit.SECONDS));, +                        assertNull(response.get());, +                        assertNotNull(failure.get());, +                        assertThat(failure.get(), instanceOf(RemoteTransportException.class));, +                        RemoteTransportException remoteTransportException = (RemoteTransportException) failure.get();, +                        assertEquals(RestStatus.NOT_FOUND, remoteTransportException.status());, +                    }, +                        assertThat(failure.get(), instanceOf(RemoteTransportException.class));, +                        assertThat(failure.get().getMessage(), containsString("error while communicating with remote cluster ["));, +                        assertThat(failure.get().getCause(), instanceOf(NodeDisconnectedException.class));, +++ b/x-pack/qa/multi-cluster-search-security/src/test/resources/rest-api-spec/test/multi_cluster/50_missing.yml, +      catch: "forbidden", +      catch: "forbidden"]