[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +### example plugin for "foo", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +### example plugin for "foo", +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        return addRescorer(rescorer, window);, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer));, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer).windowSize(window));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +### example plugin for "foo", +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        return addRescorer(rescorer, window);, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer));, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer).windowSize(window));, +++ b/core/src/main/java/org/elasticsearch/action/support/ActionFilter.java, +    <Request extends ActionRequest<Request>, Response extends ActionResponse> void apply(Task task, String action, Request request,, +            ActionListener<Response> listener, ActionFilterChain<Request, Response> chain);, +    <Response extends ActionResponse> void apply(String action, Response response, ActionListener<Response> listener,, +            ActionFilterChain<?, Response> chain);, +        public final <Request extends ActionRequest<Request>, Response extends ActionResponse> void apply(Task task, String action, Request request,, +                ActionListener<Response> listener, ActionFilterChain<Request, Response> chain) {, +        public final <Response extends ActionResponse> void apply(String action, Response response, ActionListener<Response> listener,, +                ActionFilterChain<?, Response> chain) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +### example plugin for "foo", +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder.Rescorer, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer, int window) {, +        return addRescorer(rescorer, window);, +    public SearchRequestBuilder addRescorer(RescoreBuilder.Rescorer rescorer) {, +        sourceBuilder().addRescorer(new RescoreBuilder(rescorer));]