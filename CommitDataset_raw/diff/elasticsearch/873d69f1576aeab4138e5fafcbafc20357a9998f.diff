[+++ b/core/src/main/java/org/elasticsearch/index/query/SpanContainingQueryParser.java, +        if (boost != 1.0F) {, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanContainingQueryParser.java, +        if (boost != 1.0F) {, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanWithinQueryParser.java, +        if (boost != 1.0F) {, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanContainingQueryParser.java, +        if (boost != 1.0F) {, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanWithinQueryParser.java, +        if (boost != 1.0F) {, +        }, +++ b/core/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java, +        SpanTermQuery big = new SpanTermQuery(new Term("age", longToPrefixCoded(34, 0)));, +        big.setBoost(2);, +        SpanTermQuery little = new SpanTermQuery(new Term("age", longToPrefixCoded(35, 0)));, +        little.setBoost(3);, +        Query expectedQuery = new SpanWithinQuery(big, little);, +, +        SpanWithinQueryBuilder spanWithinQueryBuilder = spanWithinQuery(), +                .big(spanTermQuery("age", 34).boost(2)), +                .little(spanTermQuery("age", 35).boost(3));, +        Query actualQuery = queryParser.parse(spanWithinQueryBuilder).query();, +        assertEquals(expectedQuery, actualQuery);, +, +        float boost = randomFloat();, +        expectedQuery.setBoost(boost);, +        spanWithinQueryBuilder.boost(boost);, +        actualQuery = queryParser.parse(spanWithinQueryBuilder).query();, +        SpanTermQuery big = new SpanTermQuery(new Term("age", longToPrefixCoded(34, 0)));, +        big.setBoost(2);, +        SpanTermQuery little = new SpanTermQuery(new Term("age", longToPrefixCoded(35, 0)));, +        little.setBoost(3);, +        Query expectedQuery = new SpanContainingQuery(big, little);, +, +        SpanContainingQueryBuilder spanContainingQueryBuilder = spanContainingQuery(), +                .big(spanTermQuery("age", 34).boost(2)), +                .little(spanTermQuery("age", 35).boost(3));, +        Query actualQuery = queryParser.parse(spanContainingQueryBuilder).query();, +        assertEquals(expectedQuery, actualQuery);, +, +        float boost = randomFloat();, +        expectedQuery.setBoost(boost);, +        spanContainingQueryBuilder.boost(boost);, +        actualQuery = queryParser.parse(spanContainingQueryBuilder).query();]