[+++ b/modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngine.java, +import org.elasticsearch.index.mapper.GeoPointFieldMapper.GeoPointFieldType;, +import org.elasticsearch.script.BucketAggregationScript;, +import org.elasticsearch.script.BucketAggregationSelectorScript;, +import java.util.HashMap;, +        } else if (context.instanceClazz.equals(BucketAggregationScript.class)) {, +            return context.factoryClazz.cast(newBucketAggregationScriptFactory(expr));, +        } else if (context.instanceClazz.equals(BucketAggregationSelectorScript.class)) {, +            BucketAggregationScript.Factory factory = newBucketAggregationScriptFactory(expr);, +            BucketAggregationSelectorScript.Factory wrappedFactory = parameters -> new BucketAggregationSelectorScript(parameters) {, +                @Override, +                public boolean execute() {, +                    return factory.newInstance(getParams()).execute() == 1.0;, +                }, +            };, +            return context.factoryClazz.cast(wrappedFactory);, +    private static BucketAggregationScript.Factory newBucketAggregationScriptFactory(Expression expr) {, +        return parameters -> {, +            ReplaceableConstDoubleValues[] functionValuesArray =, +                new ReplaceableConstDoubleValues[expr.variables.length];, +            Map<String, ReplaceableConstDoubleValues> functionValuesMap = new HashMap<>();, +            for (int i = 0; i < expr.variables.length; ++i) {, +                functionValuesArray[i] = new ReplaceableConstDoubleValues();, +                functionValuesMap.put(expr.variables[i], functionValuesArray[i]);, +            }, +            return new BucketAggregationScript(parameters) {, +                @Override, +                public double execute() {, +                    getParams().forEach((name, value) -> {, +                        ReplaceableConstDoubleValues placeholder = functionValuesMap.get(name);, +                        if (placeholder == null) {, +                            throw new IllegalArgumentException("Error using " + expr + ". " +, +                                "The variable [" + name + "] does not exist in the executable expressions script.");, +                        } else if (value instanceof Number == false) {, +                            throw new IllegalArgumentException("Error using " + expr + ". " +, +                                "Executable expressions scripts can only process numbers." +, +                                "  The variable [" + name + "] is not a number.");, +                        } else {, +                            placeholder.setValue(((Number) value).doubleValue());, +                        }, +                    });, +                    return expr.evaluate(functionValuesArray);, +                }, +            };, +        };, +    }, +, +++ b/modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngine.java, +import org.elasticsearch.index.mapper.GeoPointFieldMapper.GeoPointFieldType;, +import org.elasticsearch.script.BucketAggregationScript;, +import org.elasticsearch.script.BucketAggregationSelectorScript;, +import java.util.HashMap;, +        } else if (context.instanceClazz.equals(BucketAggregationScript.class)) {, +            return context.factoryClazz.cast(newBucketAggregationScriptFactory(expr));, +        } else if (context.instanceClazz.equals(BucketAggregationSelectorScript.class)) {, +            BucketAggregationScript.Factory factory = newBucketAggregationScriptFactory(expr);, +            BucketAggregationSelectorScript.Factory wrappedFactory = parameters -> new BucketAggregationSelectorScript(parameters) {, +                @Override, +                public boolean execute() {, +                    return factory.newInstance(getParams()).execute() == 1.0;, +                }, +            };, +            return context.factoryClazz.cast(wrappedFactory);, +    private static BucketAggregationScript.Factory newBucketAggregationScriptFactory(Expression expr) {, +        return parameters -> {, +            ReplaceableConstDoubleValues[] functionValuesArray =, +                new ReplaceableConstDoubleValues[expr.variables.length];, +            Map<String, ReplaceableConstDoubleValues> functionValuesMap = new HashMap<>();, +            for (int i = 0; i < expr.variables.length; ++i) {, +                functionValuesArray[i] = new ReplaceableConstDoubleValues();, +                functionValuesMap.put(expr.variables[i], functionValuesArray[i]);, +            }, +            return new BucketAggregationScript(parameters) {, +                @Override, +                public double execute() {, +                    getParams().forEach((name, value) -> {, +                        ReplaceableConstDoubleValues placeholder = functionValuesMap.get(name);, +                        if (placeholder == null) {, +                            throw new IllegalArgumentException("Error using " + expr + ". " +, +                                "The variable [" + name + "] does not exist in the executable expressions script.");, +                        } else if (value instanceof Number == false) {, +                            throw new IllegalArgumentException("Error using " + expr + ". " +, +                                "Executable expressions scripts can only process numbers." +, +                                "  The variable [" + name + "] is not a number.");, +                        } else {, +                            placeholder.setValue(((Number) value).doubleValue());, +                        }, +                    });, +                    return expr.evaluate(functionValuesArray);, +                }, +            };, +        };, +    }, +, +++ b/server/src/main/java/org/elasticsearch/script/BucketAggregationScript.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under]