[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +### example plugin for "foo", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +### example plugin for "foo", +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedRunnable.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +### example plugin for "foo", +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedRunnable.java, +++ b/core/src/main/java/org/elasticsearch/http/HttpServer.java, + * A component to serve http requests, backed by rest handlers., +        if (request.rawPath().equals("/favicon.ico")) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +### example plugin for "foo", +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedRunnable.java, +++ b/core/src/main/java/org/elasticsearch/http/HttpServer.java, + * A component to serve http requests, backed by rest handlers., +        if (request.rawPath().equals("/favicon.ico")) {, +++ b/core/src/main/java/org/elasticsearch/plugins/DummyPluginInfo.java, +    private DummyPluginInfo(String name, String description, String version, String classname, boolean isolated) {, +        super(name, description, version, classname, isolated);, +    public static final DummyPluginInfo INSTANCE = new DummyPluginInfo("dummy_plugin_name", "dummy plugin description", "dummy_plugin_version", "DummyPluginName", true);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +### example plugin for "foo", +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedRunnable.java, +++ b/core/src/main/java/org/elasticsearch/http/HttpServer.java, + * A component to serve http requests, backed by rest handlers., +        if (request.rawPath().equals("/favicon.ico")) {, +++ b/core/src/main/java/org/elasticsearch/plugins/DummyPluginInfo.java, +    private DummyPluginInfo(String name, String description, String version, String classname, boolean isolated) {, +        super(name, description, version, classname, isolated);, +    public static final DummyPluginInfo INSTANCE = new DummyPluginInfo("dummy_plugin_name", "dummy plugin description", "dummy_plugin_version", "DummyPluginName", true);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +    PluginInfo(String name, String description, String version, String classname, boolean isolated) {, +            throw new IllegalArgumentException("Property [elasticsearch.version] is missing for plugin [" + name + "]");, +            throw new IllegalArgumentException("Property [java.version] is missing for plugin [" + name + "]");, +        boolean isolated = Boolean.parseBoolean(props.getProperty("isolated", "true"));, +        String classname = props.getProperty("classname");, +            throw new IllegalArgumentException("Property [classname] is missing for plugin [" + name + "]");, +        return new PluginInfo(name, description, version, classname, isolated);, +     * @return true if plugin has isolated classloader, +     * @return plugin's classname, +                .append(" * Classname: ").append(classname).append("\n"), +                .append(" * Isolated: ").append(isolated);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +                if (extension.isolated == false) {, +            'classname': extension.classname, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +### example plugin for "foo", +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedRunnable.java, +++ b/core/src/main/java/org/elasticsearch/http/HttpServer.java, + * A component to serve http requests, backed by rest handlers.]