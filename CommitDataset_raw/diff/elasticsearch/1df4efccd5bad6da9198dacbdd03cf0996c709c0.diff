[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Note: This method will only allow updates to dynamic settings. if a non-dynamic setting is updated an, +     * {@link IllegalArgumentException} is thrown instead., +     *, +     * @param target the target settings builder that the updates are applied to. All keys that have explicit null value in toApply will be, +     *        removed from this builder, +     *, +     * @param target the target settings builder that the updates are applied to. All keys that have explicit null value in toApply will be, +     *        removed from this builder, +     *, +     * @param target the target settings builder that the updates are applied to. All keys that have explicit null value in toApply will be, +     *        removed from this builder, +     * @param onlyDynamic if <code>false</code> all settings are updated otherwise only dynamic settings are updated. if set to, +     *        <code>true</code> and a non-dynamic setting is updated an exception is thrown., +                        /*, +                         * We put them back in here such that tools can check from the outside if there are any indices with broken, +                         * settings. The setting can remain there but we want users to be aware that some of their setting are broken and, +                         * they can research why and what they need to do to replace them., +                         */, +                /*, +                 * We put them back in here such that tools can check from the outside if there are any indices with broken settings. The, +                 * setting can remain there but we want users to be aware that some of their setting are broken and they can research why, +                 * and what they need to do to replace them., +                 */, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Note: This method will only allow updates to dynamic settings. if a non-dynamic setting is updated an, +     * {@link IllegalArgumentException} is thrown instead., +     *, +     * @param target the target settings builder that the updates are applied to. All keys that have explicit null value in toApply will be, +     *        removed from this builder, +     *, +     * @param target the target settings builder that the updates are applied to. All keys that have explicit null value in toApply will be, +     *        removed from this builder, +     *, +     * @param target the target settings builder that the updates are applied to. All keys that have explicit null value in toApply will be, +     *        removed from this builder, +     * @param onlyDynamic if <code>false</code> all settings are updated otherwise only dynamic settings are updated. if set to, +     *        <code>true</code> and a non-dynamic setting is updated an exception is thrown., +                        /*, +                         * We put them back in here such that tools can check from the outside if there are any indices with broken, +                         * settings. The setting can remain there but we want users to be aware that some of their setting are broken and, +                         * they can research why and what they need to do to replace them., +                         */, +                /*, +                 * We put them back in here such that tools can check from the outside if there are any indices with broken settings. The, +                 * setting can remain there but we want users to be aware that some of their setting are broken and they can research why, +                 * and what they need to do to replace them., +                 */, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +    public static final Set<Setting<?>> BUILT_IN_INDEX_SETTINGS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(, +                    throw new IllegalArgumentException("illegal value for [index.similarity." + key +, +                            "] cannot redefine built-in similarity");, +    public static final IndexScopedSettings DEFAULT_SCOPED_SETTINGS = new IndexScopedSettings(Settings.EMPTY,, +            BUILT_IN_INDEX_SETTINGS);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Note: This method will only allow updates to dynamic settings. if a non-dynamic setting is updated an, +     * {@link IllegalArgumentException} is thrown instead., +     *, +     * @param target the target settings builder that the updates are applied to. All keys that have explicit null value in toApply will be, +     *        removed from this builder, +     *, +     * @param target the target settings builder that the updates are applied to. All keys that have explicit null value in toApply will be, +     *        removed from this builder, +     *, +     * @param target the target settings builder that the updates are applied to. All keys that have explicit null value in toApply will be, +     *        removed from this builder, +     * @param onlyDynamic if <code>false</code> all settings are updated otherwise only dynamic settings are updated. if set to, +     *        <code>true</code> and a non-dynamic setting is updated an exception is thrown., +                        /*, +                         * We put them back in here such that tools can check from the outside if there are any indices with broken, +                         * settings. The setting can remain there but we want users to be aware that some of their setting are broken and, +                         * they can research why and what they need to do to replace them., +                         */, +                /*, +                 * We put them back in here such that tools can check from the outside if there are any indices with broken settings. The, +                 * setting can remain there but we want users to be aware that some of their setting are broken and they can research why, +                 * and what they need to do to replace them., +                 */, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +    public static final Set<Setting<?>> BUILT_IN_INDEX_SETTINGS = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(, +                    throw new IllegalArgumentException("illegal value for [index.similarity." + key +, +                            "] cannot redefine built-in similarity");, +    public static final IndexScopedSettings DEFAULT_SCOPED_SETTINGS = new IndexScopedSettings(Settings.EMPTY,, +            BUILT_IN_INDEX_SETTINGS);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +     * Returns <code>true</code> iff this setting is a group setting. Group settings represent a set of settings rather than a single value., +     * The key, see {@link #getKey()}, in contrast to non-group settings is a prefix like <tt>cluster.store.</tt> that matches all settings, +     * with this prefix., +        // we use startsWith here since the key might be foo.bar.0 if it's an array, +        assert key.startsWith(this.getKey()) : "was " + key + " expected: " + getKey();, +     * Updates settings that depend on eachother. See {@link AbstractScopedSettings#addSettingsUpdateConsumer(Setting, Setting, BiConsumer)}, +     * and its usage for details., +    static <A, B> AbstractScopedSettings.SettingUpdater<Tuple<A, B>> compoundUpdater(final BiConsumer<A, B> consumer,, +            final Setting<A> aSetting, final Setting<B> bSetting, ESLogger logger) {, +                throw new IllegalArgumentException("illegal value can't update [" + key + "] from [" + value + "] to [" + newValue + "]",, +                        e);]