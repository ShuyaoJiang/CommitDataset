[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        if (System.getProperty(prop) != null) {, +                            throw new IllegalStateException("property: " + prop + " is unexpectedly set");, +                        }, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        if (System.getProperty(prop) != null) {, +                            throw new IllegalStateException("property: " + prop + " is unexpectedly set");, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +        QueryParseContext context = queryParserService.getParseContext();, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        if (System.getProperty(prop) != null) {, +                            throw new IllegalStateException("property: " + prop + " is unexpectedly set");, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +        QueryParseContext context = queryParserService.getParseContext();, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        if (System.getProperty(prop) != null) {, +                            throw new IllegalStateException("property: " + prop + " is unexpectedly set");, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +        QueryParseContext context = queryParserService.getParseContext();, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                        if (System.getProperty(prop) != null) {, +                            throw new IllegalStateException("property: " + prop + " is unexpectedly set");, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +        QueryParseContext context = queryParserService.getParseContext();, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +    static final String PLUGIN_LIB_PATTERN = "glob:**.{jar,zip}";, +        try {, +            loadPluginsIntoClassLoader();, +        } catch (IOException ex) {, +            throw new IllegalStateException("Can't load plugins into classloader", ex);, +        }, +    private void loadPluginsIntoClassLoader() throws IOException {, +        Path pluginsDirectory = environment.pluginsFile();, +        if (!isAccessibleDirectory(pluginsDirectory, logger)) {, +            return;, +        }, +        ClassLoader classLoader = settings.getClassLoader();, +        Class classLoaderClass = classLoader.getClass();, +        Method addURL = null;, +        while (!classLoaderClass.equals(Object.class)) {, +            try {, +                addURL = classLoaderClass.getDeclaredMethod("addURL", URL.class);, +                addURL.setAccessible(true);, +                break;, +            } catch (NoSuchMethodException e) {, +                // no method, try the parent, +                classLoaderClass = classLoaderClass.getSuperclass();, +            }, +        }, +        if (addURL == null) {, +            logger.debug("failed to find addURL method on classLoader [" + classLoader + "] to add methods");, +            return;, +        }, +        try (DirectoryStream<Path> stream = Files.newDirectoryStream(pluginsDirectory)) {, +, +            for (Path plugin : stream) {, +                // We check that subdirs are directories and readable, +                if (!isAccessibleDirectory(plugin, logger)) {, +                    continue;]