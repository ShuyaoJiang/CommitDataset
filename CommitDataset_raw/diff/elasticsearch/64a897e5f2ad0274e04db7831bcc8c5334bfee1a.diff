[+++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                updateOperationResult = new Engine.IndexResult(failure, updateRequest.version(), 0);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                updateOperationResult = new Engine.IndexResult(failure, updateRequest.version(), 0);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +            return new Engine.IndexResult(e, request.version(), 0);, +            return new Engine.IndexResult(e, request.version(), 0);, +                        0);, +                        0);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                updateOperationResult = new Engine.IndexResult(failure, updateRequest.version(), 0);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +            return new Engine.IndexResult(e, request.version(), 0);, +            return new Engine.IndexResult(e, request.version(), 0);, +                        0);, +                        0);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private Translog.Location location;, +        private long took;, +        private boolean freeze;, +        protected Result(Operation.TYPE operationType, Exception failure,, +                       long version, int estimatedSizeInBytes) {, +        protected Result(Operation.TYPE operationType, long version, int estimatedSizeInBytes) {, +            this(operationType, null, version, estimatedSizeInBytes);, +, +        public void setLocation(Translog.Location location) {, +            if (freeze == false) {, +                this.location = location;, +            } else {, +                throw new IllegalStateException("result is already frozen");, +            }, +        }, +, +        public void setTook(long took) {, +            if (freeze == false) {, +                this.took = took;, +            } else {, +                throw new IllegalStateException("result is already frozen");, +            }, +        }, +, +        public void freeze() {, +            this.freeze = true;, +        }, +        public IndexResult(long version, boolean created, int estimatedSizeInBytes) {, +            super(Operation.TYPE.INDEX, version, estimatedSizeInBytes);, +        public IndexResult(Exception failure, long version, int estimatedSizeInBytes) {, +            super(Operation.TYPE.INDEX, failure, version, estimatedSizeInBytes);, +        public DeleteResult(long version, boolean found, int estimatedSizeInBytes) {, +            super(Operation.TYPE.DELETE, version, estimatedSizeInBytes);, +        public DeleteResult(Exception failure, long version, int estimatedSizeInBytes) {, +            super(Operation.TYPE.DELETE, failure, version, estimatedSizeInBytes);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                updateOperationResult = new Engine.IndexResult(failure, updateRequest.version(), 0);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +            return new Engine.IndexResult(e, request.version(), 0);, +            return new Engine.IndexResult(e, request.version(), 0);, +                        0);, +                        0);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private Translog.Location location;, +        private long took;, +        private boolean freeze;, +        protected Result(Operation.TYPE operationType, Exception failure,, +                       long version, int estimatedSizeInBytes) {, +        protected Result(Operation.TYPE operationType, long version, int estimatedSizeInBytes) {, +            this(operationType, null, version, estimatedSizeInBytes);, +, +        public void setLocation(Translog.Location location) {, +            if (freeze == false) {, +                this.location = location;, +            } else {, +                throw new IllegalStateException("result is already frozen");, +            }, +        }, +, +        public void setTook(long took) {, +            if (freeze == false) {, +                this.took = took;, +            } else {, +                throw new IllegalStateException("result is already frozen");, +            }, +        }, +, +        public void freeze() {, +            this.freeze = true;, +        }, +        public IndexResult(long version, boolean created, int estimatedSizeInBytes) {, +            super(Operation.TYPE.INDEX, version, estimatedSizeInBytes);, +        public IndexResult(Exception failure, long version, int estimatedSizeInBytes) {, +            super(Operation.TYPE.INDEX, failure, version, estimatedSizeInBytes);, +        public DeleteResult(long version, boolean found, int estimatedSizeInBytes) {, +            super(Operation.TYPE.DELETE, version, estimatedSizeInBytes);, +        public DeleteResult(Exception failure, long version, int estimatedSizeInBytes) {, +            super(Operation.TYPE.DELETE, failure, version, estimatedSizeInBytes);, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    index.estimatedSizeInBytes());, +                return new IndexResult(expectedVersion, false, index.estimatedSizeInBytes());, +                IndexResult indexResult = new IndexResult(updatedVersion, deleted, index.estimatedSizeInBytes());, +                if (index.origin() != Operation.Origin.LOCAL_TRANSLOG_RECOVERY) {]