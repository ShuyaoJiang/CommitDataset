[+++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +                    if (ExceptionsHelper.unwrapCause(exception) instanceof MapperException == false) {, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +                    if (ExceptionsHelper.unwrapCause(exception) instanceof MapperException == false) {, +++ b/core/src/main/java/org/elasticsearch/repositories/Repository.java, +     * @param snapshot snapshot, +    MetaData readSnapshotMetaData(SnapshotId snapshotId, Snapshot snapshot, List<String> indices) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +                    if (ExceptionsHelper.unwrapCause(exception) instanceof MapperException == false) {, +++ b/core/src/main/java/org/elasticsearch/repositories/Repository.java, +     * @param snapshot snapshot, +    MetaData readSnapshotMetaData(SnapshotId snapshotId, Snapshot snapshot, List<String> indices) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +import org.elasticsearch.Version;, +    private static final String METADATA_PREFIX = "meta-";, +, +    private static final String LEGACY_METADATA_PREFIX = "metadata-";, +, +    private static final String METADATA_SUFFIX = ".dat";, +            try (StreamOutput output = compressIfNeeded(snapshotsBlobContainer.createOutput(metaDataBlobName(snapshotId, false)))) {, +        Snapshot snapshot = null;, +            snapshot = readSnapshot(snapshotId);, +            indices = snapshot.indices();, +            if (snapshot != null) {, +                metaData = readSnapshotMetaData(snapshotId, snapshot.version(), indices, true);, +            } else {, +                try {, +                    metaData = readSnapshotMetaData(snapshotId, false, indices, true);, +                } catch (IOException ex) {, +                    metaData = readSnapshotMetaData(snapshotId, true, indices, true);, +                }, +            }, +            if (snapshot != null) {, +                snapshotsBlobContainer.deleteBlob(metaDataBlobName(snapshotId, legacyMetaData(snapshot.version())));, +            } else {, +                // We don't know which version was the snapshot created with - try deleting both current and legacy metadata, +                snapshotsBlobContainer.deleteBlob(metaDataBlobName(snapshotId, true));, +                snapshotsBlobContainer.deleteBlob(metaDataBlobName(snapshotId, false));, +            }, +    public MetaData readSnapshotMetaData(SnapshotId snapshotId, Snapshot snapshot, List<String> indices) throws IOException {, +        return readSnapshotMetaData(snapshotId, snapshot.version(), indices, false);, +    private MetaData readSnapshotMetaData(SnapshotId snapshotId, Version snapshotVersion, List<String> indices, boolean ignoreIndexErrors) throws IOException {, +        return readSnapshotMetaData(snapshotId, legacyMetaData(snapshotVersion), indices, ignoreIndexErrors);, +    }, +, +    private MetaData readSnapshotMetaData(SnapshotId snapshotId, boolean legacy, List<String> indices, boolean ignoreIndexErrors) throws IOException {, +        try (InputStream blob = snapshotsBlobContainer.openInput(metaDataBlobName(snapshotId, legacy))) {, +            metaData = readMetaData(ByteStreams.toByteArray(blob));, +     * @param legacy true if legacy (pre-2.0.0) format should be used, +    private String metaDataBlobName(SnapshotId snapshotId, boolean legacy) {, +        if (legacy) {, +            return LEGACY_METADATA_PREFIX + snapshotId.getSnapshot();, +        } else {, +            return METADATA_PREFIX + snapshotId.getSnapshot() + METADATA_SUFFIX;, +        }, +    }, +, +    /**, +     * In v2.0.0 we changed the matadata file format, +     * @param version, +     * @return true if legacy version should be used false otherwise, +     */, +    private boolean legacyMetaData(Version version) {, +        return version.before(Version.V_2_0_0);, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +                    if (ExceptionsHelper.unwrapCause(exception) instanceof MapperException == false) {, +++ b/core/src/main/java/org/elasticsearch/repositories/Repository.java, +     * @param snapshot snapshot, +    MetaData readSnapshotMetaData(SnapshotId snapshotId, Snapshot snapshot, List<String> indices) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +import org.elasticsearch.Version;, +    private static final String METADATA_PREFIX = "meta-";, +, +    private static final String LEGACY_METADATA_PREFIX = "metadata-";, +, +    private static final String METADATA_SUFFIX = ".dat";, +            try (StreamOutput output = compressIfNeeded(snapshotsBlobContainer.createOutput(metaDataBlobName(snapshotId, false)))) {, +        Snapshot snapshot = null;, +            snapshot = readSnapshot(snapshotId);, +            indices = snapshot.indices();, +            if (snapshot != null) {, +                metaData = readSnapshotMetaData(snapshotId, snapshot.version(), indices, true);, +            } else {, +                try {, +                    metaData = readSnapshotMetaData(snapshotId, false, indices, true);, +                } catch (IOException ex) {, +                    metaData = readSnapshotMetaData(snapshotId, true, indices, true);, +                }, +            }, +            if (snapshot != null) {, +                snapshotsBlobContainer.deleteBlob(metaDataBlobName(snapshotId, legacyMetaData(snapshot.version())));, +            } else {, +                // We don't know which version was the snapshot created with - try deleting both current and legacy metadata, +                snapshotsBlobContainer.deleteBlob(metaDataBlobName(snapshotId, true));, +                snapshotsBlobContainer.deleteBlob(metaDataBlobName(snapshotId, false));, +            }, +    public MetaData readSnapshotMetaData(SnapshotId snapshotId, Snapshot snapshot, List<String> indices) throws IOException {, +        return readSnapshotMetaData(snapshotId, snapshot.version(), indices, false);, +    private MetaData readSnapshotMetaData(SnapshotId snapshotId, Version snapshotVersion, List<String> indices, boolean ignoreIndexErrors) throws IOException {, +        return readSnapshotMetaData(snapshotId, legacyMetaData(snapshotVersion), indices, ignoreIndexErrors);]