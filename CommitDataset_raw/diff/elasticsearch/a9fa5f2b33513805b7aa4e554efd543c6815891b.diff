[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                for (ReplicationResponse.ShardInfo.Failure failure :, +                        shardInfo.getFailures()) {, +            ActionListener<IndexResponse> listener;, +            listener = new ActionListener<IndexResponse>() {, +            Script stored = new Script(, +                    ScriptType.STORED, null, "increment-field", parameters);  // <1>, +            UpdateResponse updateResponse = client.update(, +                    request, RequestOptions.DEFAULT);, +                for (ReplicationResponse.ShardInfo.Failure failure :, +                        shardInfo.getFailures()) {, +                UpdateResponse updateResponse = client.update(, +                        request, RequestOptions.DEFAULT);, +                UpdateResponse updateResponse = client.update(, +                        request, RequestOptions.DEFAULT);, +            request.fetchSource(, +                    new FetchSourceContext(true, includes, excludes)); // <1>, +            request.fetchSource(, +                    new FetchSourceContext(true, includes, excludes)); // <1>, +            ActionListener<UpdateResponse> listener;, +            listener = new ActionListener<UpdateResponse>() {, +            DeleteResponse deleteResponse = client.delete(, +                    request, RequestOptions.DEFAULT);, +                for (ReplicationResponse.ShardInfo.Failure failure :, +                        shardInfo.getFailures()) {, +            DeleteResponse deleteResponse = client.delete(, +                    request, RequestOptions.DEFAULT);, +                DeleteResponse deleteResponse = client.delete(, +                        new DeleteRequest("posts", "doc", "1").version(2),, +                        RequestOptions.DEFAULT);, +            ActionListener<DeleteResponse> listener;, +            listener = new ActionListener<DeleteResponse>() {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                for (ReplicationResponse.ShardInfo.Failure failure :, +                        shardInfo.getFailures()) {, +            ActionListener<IndexResponse> listener;, +            listener = new ActionListener<IndexResponse>() {, +            Script stored = new Script(, +                    ScriptType.STORED, null, "increment-field", parameters);  // <1>, +            UpdateResponse updateResponse = client.update(, +                    request, RequestOptions.DEFAULT);, +                for (ReplicationResponse.ShardInfo.Failure failure :, +                        shardInfo.getFailures()) {, +                UpdateResponse updateResponse = client.update(, +                        request, RequestOptions.DEFAULT);, +                UpdateResponse updateResponse = client.update(, +                        request, RequestOptions.DEFAULT);, +            request.fetchSource(, +                    new FetchSourceContext(true, includes, excludes)); // <1>, +            request.fetchSource(, +                    new FetchSourceContext(true, includes, excludes)); // <1>, +            ActionListener<UpdateResponse> listener;, +            listener = new ActionListener<UpdateResponse>() {, +            DeleteResponse deleteResponse = client.delete(, +                    request, RequestOptions.DEFAULT);, +                for (ReplicationResponse.ShardInfo.Failure failure :, +                        shardInfo.getFailures()) {, +            DeleteResponse deleteResponse = client.delete(, +                    request, RequestOptions.DEFAULT);, +                DeleteResponse deleteResponse = client.delete(, +                        new DeleteRequest("posts", "doc", "1").version(2),, +                        RequestOptions.DEFAULT);, +            ActionListener<DeleteResponse> listener;, +            listener = new ActionListener<DeleteResponse>() {, +++ b/docs/java-rest/high-level/document/delete.asciidoc, +--, +:api: delete, +:request: DeleteRequest, +:response: DeleteResponse, +--, +, +[id="{upid}-{api}"], +[id="{upid}-{api}-request"], +A +{request}+ requires the following arguments:, +include-tagged::{doc-tests-file}[{api}-request], +include-tagged::{doc-tests-file}[{api}-request-routing], +include-tagged::{doc-tests-file}[{api}-request-timeout], +include-tagged::{doc-tests-file}[{api}-request-refresh], +include-tagged::{doc-tests-file}[{api}-request-version], +include-tagged::{doc-tests-file}[{api}-request-version-type], +include::../execution.asciidoc[], +[id="{upid}-{api}-response"], +The returned +{response}+ allows to retrieve information about the executed, +include-tagged::{doc-tests-file}[{api}-response], +include-tagged::{doc-tests-file}[{api}-notfound], +include-tagged::{doc-tests-file}[{api}-conflict], +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                for (ReplicationResponse.ShardInfo.Failure failure :, +                        shardInfo.getFailures()) {, +            ActionListener<IndexResponse> listener;, +            listener = new ActionListener<IndexResponse>() {, +            Script stored = new Script(, +                    ScriptType.STORED, null, "increment-field", parameters);  // <1>, +            UpdateResponse updateResponse = client.update(, +                    request, RequestOptions.DEFAULT);, +                for (ReplicationResponse.ShardInfo.Failure failure :, +                        shardInfo.getFailures()) {, +                UpdateResponse updateResponse = client.update(, +                        request, RequestOptions.DEFAULT);, +                UpdateResponse updateResponse = client.update(]