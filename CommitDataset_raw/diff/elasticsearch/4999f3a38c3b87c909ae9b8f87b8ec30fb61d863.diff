[+++ b/elasticsearch/qa/messy-test-watcher-with-groovy/src/test/java/org/elasticsearch/messy/tests/MessyTestUtils.java, +                new ResourceWatcherService(settings, tp), scriptEngineRegistry, scriptContextRegistry, scriptSettings));, +++ b/elasticsearch/qa/messy-test-watcher-with-groovy/src/test/java/org/elasticsearch/messy/tests/MessyTestUtils.java, +                new ResourceWatcherService(settings, tp), scriptEngineRegistry, scriptContextRegistry, scriptSettings));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchInputIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ b/elasticsearch/qa/messy-test-watcher-with-groovy/src/test/java/org/elasticsearch/messy/tests/MessyTestUtils.java, +                new ResourceWatcherService(settings, tp), scriptEngineRegistry, scriptContextRegistry, scriptSettings));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchInputIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchTransformIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ b/elasticsearch/qa/messy-test-watcher-with-groovy/src/test/java/org/elasticsearch/messy/tests/MessyTestUtils.java, +                new ResourceWatcherService(settings, tp), scriptEngineRegistry, scriptContextRegistry, scriptSettings));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchInputIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchTransformIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ /dev/null, +++ b/elasticsearch/qa/messy-test-watcher-with-groovy/src/test/java/org/elasticsearch/messy/tests/MessyTestUtils.java, +                new ResourceWatcherService(settings, tp), scriptEngineRegistry, scriptContextRegistry, scriptSettings));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchInputIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchTransformIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/qa/messy-test-watcher-with-groovy/src/test/java/org/elasticsearch/messy/tests/MessyTestUtils.java, +                new ResourceWatcherService(settings, tp), scriptEngineRegistry, scriptContextRegistry, scriptSettings));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchInputIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchTransformIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/qa/messy-test-watcher-with-groovy/src/test/java/org/elasticsearch/messy/tests/MessyTestUtils.java, +                new ResourceWatcherService(settings, tp), scriptEngineRegistry, scriptContextRegistry, scriptSettings));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchInputIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchTransformIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/qa/messy-test-watcher-with-groovy/src/test/java/org/elasticsearch/messy/tests/MessyTestUtils.java, +                new ResourceWatcherService(settings, tp), scriptEngineRegistry, scriptContextRegistry, scriptSettings));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchInputIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchTransformIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/java/org/elasticsearch/smoketest/WatcherTemplateTests.java, +        engine = new DefaultTextTemplateEngine(Settings.EMPTY, ScriptServiceProxy.of(scriptService));, +++ b/elasticsearch/qa/messy-test-watcher-with-groovy/src/test/java/org/elasticsearch/messy/tests/MessyTestUtils.java, +                new ResourceWatcherService(settings, tp), scriptEngineRegistry, scriptContextRegistry, scriptSettings));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchInputIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ b/elasticsearch/qa/messy-test-xpack-with-mustache/src/test/java/org/elasticsearch/messy/tests/SearchTransformIT.java, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class, master)),, +        return ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/qa/smoke-test-watcher-with-mustache/src/test/java/org/elasticsearch/smoketest/WatcherTemplateTests.java, +        engine = new DefaultTextTemplateEngine(Settings.EMPTY, ScriptServiceProxy.of(scriptService));, +++ b/elasticsearch/x-pack/build.gradle, +import java.nio.charset.StandardCharsets, +, +        for (int i = 0; i < 10; i++) {, +          // we use custom wait logic here as the elastic user is not available immediately and ant.get will fail when a 401 is returned, +          HttpURLConnection httpURLConnection = null;, +          try {, +            httpURLConnection = (HttpURLConnection) new URL("http://${node.httpUri()}").openConnection();, +            httpURLConnection.setRequestProperty("Authorization", "Basic " +, +                    Base64.getEncoder().encodeToString("elastic:changeme".getBytes(StandardCharsets.UTF_8)));, +            httpURLConnection.setRequestMethod("GET");, +            httpURLConnection.connect();, +            if (httpURLConnection.getResponseCode() == 200) {, +              tmpFile.withWriter StandardCharsets.UTF_8.name(), {, +                it.write(httpURLConnection.getInputStream().getText(StandardCharsets.UTF_8.name()))]