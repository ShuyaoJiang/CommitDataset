[+++ b/docs/reference/mapping/types/geo-point-type.asciidoc, +==== Field data, +, +By default, geo points use the `array` format which loads geo points into two, +parallel double arrays, making sure there is no precision loss. However, this, +can require a non-negligible amount of memory (16 bytes per document) which is, +why Elasticsearch also provides a field data implementation with lossy, +compression called `compressed`:, +, +[source,js], +--------------------------------------------------, +{, +    "pin" : {, +        "properties" : {, +            "location" : {, +                "type" : "geo_point",, +                "fielddata" : {, +                    "format" : "compressed",, +                    "precision" : "1cm", +                }, +            }, +        }, +    }, +}, +--------------------------------------------------, +, +This field data format comes with a `precision` option which allows to, +configure how much precision can be traded for memory. The default value is, +`1cm`. The following table presents values of the memory savings given various, +precisions:, +, +|=============================================, +| Precision | Bytes per point | Size reduction, +|       1km |               4 |            75%, +|        3m |               6 |          62.5%, +|       1cm |               8 |            50%, +|       1mm |              10 |          37.5%, +|=============================================, +, +Precision can be changed on a live index by using the update mapping API., +, +[float], +++ b/docs/reference/mapping/types/geo-point-type.asciidoc, +==== Field data, +, +By default, geo points use the `array` format which loads geo points into two, +parallel double arrays, making sure there is no precision loss. However, this, +can require a non-negligible amount of memory (16 bytes per document) which is, +why Elasticsearch also provides a field data implementation with lossy, +compression called `compressed`:, +, +[source,js], +--------------------------------------------------, +{, +    "pin" : {, +        "properties" : {, +            "location" : {, +                "type" : "geo_point",, +                "fielddata" : {, +                    "format" : "compressed",, +                    "precision" : "1cm", +                }, +            }, +        }, +    }, +}, +--------------------------------------------------, +, +This field data format comes with a `precision` option which allows to, +configure how much precision can be traded for memory. The default value is, +`1cm`. The following table presents values of the memory savings given various, +precisions:, +, +|=============================================, +| Precision | Bytes per point | Size reduction, +|       1km |               4 |            75%, +|        3m |               6 |          62.5%, +|       1cm |               8 |            50%, +|       1mm |              10 |          37.5%, +|=============================================, +, +Precision can be changed on a live index by using the update mapping API., +, +[float], +++ b/src/main/java/org/elasticsearch/common/unit/DistanceUnit.java, +        public Distance(double value, DistanceUnit unit) {, +++ b/docs/reference/mapping/types/geo-point-type.asciidoc, +==== Field data, +, +By default, geo points use the `array` format which loads geo points into two, +parallel double arrays, making sure there is no precision loss. However, this, +can require a non-negligible amount of memory (16 bytes per document) which is, +why Elasticsearch also provides a field data implementation with lossy, +compression called `compressed`:, +, +[source,js], +--------------------------------------------------, +{, +    "pin" : {, +        "properties" : {]