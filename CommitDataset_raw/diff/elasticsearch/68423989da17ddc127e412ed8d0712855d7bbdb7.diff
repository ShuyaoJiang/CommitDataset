[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    /**, +     * an internal index format description, allowing us to find out if this index is upgraded or needs upgrading, +     */, +    private static final String INDEX_FORMAT = "index.format";, +    public static final Setting<Integer> INDEX_FORMAT_SETTING =, +            Setting.intSetting(INDEX_FORMAT, 0, Setting.Property.IndexScope, Setting.Property.Final);, +, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    /**, +     * an internal index format description, allowing us to find out if this index is upgraded or needs upgrading, +     */, +    private static final String INDEX_FORMAT = "index.format";, +    public static final Setting<Integer> INDEX_FORMAT_SETTING =, +            Setting.intSetting(INDEX_FORMAT, 0, Setting.Property.IndexScope, Setting.Property.Final);, +, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexMetaData.INDEX_FORMAT_SETTING,, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    /**, +     * an internal index format description, allowing us to find out if this index is upgraded or needs upgrading, +     */, +    private static final String INDEX_FORMAT = "index.format";, +    public static final Setting<Integer> INDEX_FORMAT_SETTING =, +            Setting.intSetting(INDEX_FORMAT, 0, Setting.Property.IndexScope, Setting.Property.Final);, +, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexMetaData.INDEX_FORMAT_SETTING,, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/IndexMetaDataTests.java, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.nullValue;, +, +, +    public void testIndexFormat() {, +        Settings defaultSettings = Settings.builder(), +                .put("index.version.created", 1), +                .put("index.number_of_shards", 1), +                .put("index.number_of_replicas", 1), +                .build();, +, +        // matching version, +        {, +            IndexMetaData metaData = IndexMetaData.builder("foo"), +                    .settings(Settings.builder(), +                            .put(defaultSettings), +                            // intentionally not using the constant, so upgrading requires you to look at this test, +                            // where you have to update this part and the next one, +                            .put("index.format", 6), +                            .build()), +                    .build();, +, +            assertThat(metaData.getSettings().getAsInt(IndexMetaData.INDEX_FORMAT_SETTING.getKey(), 0), is(6));, +        }, +, +        // no setting configured, +        {, +            IndexMetaData metaData = IndexMetaData.builder("foo"), +                    .settings(Settings.builder(), +                            .put(defaultSettings), +                            .build()), +                    .build();, +            assertThat(metaData.getSettings().getAsInt(IndexMetaData.INDEX_FORMAT_SETTING.getKey(), 0), is(0));, +        }, +    }]