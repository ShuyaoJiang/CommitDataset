[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    Node.WRITE_PORTS_FILE_SETTING,, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    Node.WRITE_PORTS_FILE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_SINGLE_TYPE_SETTING,, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    Node.WRITE_PORTS_FILE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_SINGLE_TYPE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java, +    private final BiFunction<Object[], Context, Value> builder;, +        this(name, ignoreUnknownFields, (args, context) -> builder.apply(args));, +    }, +, +    /**, +     * Build the parser., +     *, +     * @param name The name given to the delegate ObjectParser for error identification. Use what you'd use if the object worked with, +     *        ObjectParser., +     * @param ignoreUnknownFields Should this parser ignore unknown fields? This should generally be set to true only when parsing responses, +     *        from external systems, never when parsing requests from users., +     * @param builder A binary function that builds the object from an array of Objects and the parser context.  Declare this inline with, +     *        the parser, casting the elements of the array to the arguments so they work with your favorite constructor. The objects in, +     *        the array will be in the same order that you declared the {{@link #constructorArg()}s and none will be null. The second, +     *        argument is the value of the context provided to the {@link #parse(XContentParser, Object) parse function}. If any of the, +     *        constructor arguments aren't defined in the XContent then parsing will throw an error. We use an array here rather than a, +     *        {@code Map<String, Object>} to save on allocations., +     */, +    public ConstructingObjectParser(String name, boolean ignoreUnknownFields, BiFunction<Object[], Context, Value> builder) {, +, +        return objectParser.parse(parser, new Target(parser, context), context).finish();, +, +        /**, +         * The parse context that is used for this invocation. Stored here so that it can be passed to the {@link #builder}., +         */, +        private Context context;, +, +        Target(XContentParser parser, Context context) {, +            this.context = context;, +                targetObject = builder.apply(constructorArgs, context);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    Node.WRITE_PORTS_FILE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_SINGLE_TYPE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java, +    private final BiFunction<Object[], Context, Value> builder;, +        this(name, ignoreUnknownFields, (args, context) -> builder.apply(args));, +    }, +, +    /**, +     * Build the parser., +     *, +     * @param name The name given to the delegate ObjectParser for error identification. Use what you'd use if the object worked with, +     *        ObjectParser., +     * @param ignoreUnknownFields Should this parser ignore unknown fields? This should generally be set to true only when parsing responses, +     *        from external systems, never when parsing requests from users., +     * @param builder A binary function that builds the object from an array of Objects and the parser context.  Declare this inline with, +     *        the parser, casting the elements of the array to the arguments so they work with your favorite constructor. The objects in, +     *        the array will be in the same order that you declared the {{@link #constructorArg()}s and none will be null. The second, +     *        argument is the value of the context provided to the {@link #parse(XContentParser, Object) parse function}. If any of the, +     *        constructor arguments aren't defined in the XContent then parsing will throw an error. We use an array here rather than a, +     *        {@code Map<String, Object>} to save on allocations., +     */, +    public ConstructingObjectParser(String name, boolean ignoreUnknownFields, BiFunction<Object[], Context, Value> builder) {, +, +        return objectParser.parse(parser, new Target(parser, context), context).finish();, +, +        /**, +         * The parse context that is used for this invocation. Stored here so that it can be passed to the {@link #builder}., +         */, +        private Context context;, +, +        Target(XContentParser parser, Context context) {, +            this.context = context;, +                targetObject = builder.apply(constructorArgs, context);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    Node.WRITE_PORTS_FILE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_SINGLE_TYPE_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java, +    private final BiFunction<Object[], Context, Value> builder;, +        this(name, ignoreUnknownFields, (args, context) -> builder.apply(args));, +    }, +, +    /**, +     * Build the parser., +     *, +     * @param name The name given to the delegate ObjectParser for error identification. Use what you'd use if the object worked with, +     *        ObjectParser., +     * @param ignoreUnknownFields Should this parser ignore unknown fields? This should generally be set to true only when parsing responses, +     *        from external systems, never when parsing requests from users., +     * @param builder A binary function that builds the object from an array of Objects and the parser context.  Declare this inline with]