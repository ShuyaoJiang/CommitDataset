[+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +            request,, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +            request,, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +        repositoriesService.registerRepository(request, new ActionListener<ClusterStateUpdateResponse>() {, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +            request,, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +        repositoriesService.registerRepository(request, new ActionListener<ClusterStateUpdateResponse>() {, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/TransportVerifyRepositoryAction.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import java.util.List;, +, +        repositoriesService.verifyRepository(request.name(), new ActionListener<List<DiscoveryNode>>() {, +            public void onResponse(List<DiscoveryNode> verifyResponse) {, +                listener.onResponse(new VerifyRepositoryResponse(verifyResponse.toArray(new DiscoveryNode[0])));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +            request,, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +        repositoriesService.registerRepository(request, new ActionListener<ClusterStateUpdateResponse>() {, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/TransportVerifyRepositoryAction.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import java.util.List;, +, +        repositoriesService.verifyRepository(request.name(), new ActionListener<List<DiscoveryNode>>() {, +            public void onResponse(List<DiscoveryNode> verifyResponse) {, +                listener.onResponse(new VerifyRepositoryResponse(verifyResponse.toArray(new DiscoveryNode[0])));, +++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +import org.elasticsearch.action.admin.cluster.repositories.delete.DeleteRepositoryRequest;, +import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;, +    public void registerRepository(final PutRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {, +        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name(), request.type(), request.settings());, +        if (request.verify()) {, +            registrationListener = new VerifyingRegisterRepositoryListener(request.name(), listener);, +        clusterService.submitStateUpdateTask("put_repository [" + request.name() + "]",, +                    ensureRepositoryNotInUse(currentState, request.name());, +                        logger.info("put repository [{}]", request.name());, +                            Collections.singletonList(new RepositoryMetaData(request.name(), request.type(), request.settings())));, +                            logger.info("put repository [{}]", request.name());, +                            repositoriesMetaData.add(new RepositoryMetaData(request.name(), request.type(), request.settings()));, +                            logger.info("update repository [{}]", request.name());, +                    logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name()), e);, +    public void unregisterRepository(final DeleteRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {, +        clusterService.submitStateUpdateTask("delete_repository [" + request.name() + "]",, +            new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {, +                    ensureRepositoryNotInUse(currentState, request.name());, +                            if (Regex.simpleMatch(request.name(), repositoryMetaData.name())) {, +                    if (Regex.isMatchAllPattern(request.name())) { // we use a wildcard so we don't barf if it's not present., +                    throw new RepositoryMissingException(request.name());, +    public void verifyRepository(final String repositoryName, final ActionListener<List<DiscoveryNode>> listener) {, +                            verifyAction.verify(repositoryName, verificationToken, new ActionListener<List<DiscoveryNode>>() {, +                                public void onResponse(List<DiscoveryNode> verifyResponse) {, +                        listener.onResponse(Collections.emptyList());, +                verifyRepository(name, new ActionListener<List<DiscoveryNode>>() {, +                    public void onResponse(List<DiscoveryNode> verifyResponse) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +            request,, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +        repositoriesService.registerRepository(request, new ActionListener<ClusterStateUpdateResponse>() {, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/TransportVerifyRepositoryAction.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import java.util.List;, +, +        repositoriesService.verifyRepository(request.name(), new ActionListener<List<DiscoveryNode>>() {, +            public void onResponse(List<DiscoveryNode> verifyResponse) {, +                listener.onResponse(new VerifyRepositoryResponse(verifyResponse.toArray(new DiscoveryNode[0])));, +++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +import org.elasticsearch.action.admin.cluster.repositories.delete.DeleteRepositoryRequest;, +import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;, +    public void registerRepository(final PutRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {, +        final RepositoryMetaData newRepositoryMetaData = new RepositoryMetaData(request.name(), request.type(), request.settings());, +        if (request.verify()) {, +            registrationListener = new VerifyingRegisterRepositoryListener(request.name(), listener);, +        clusterService.submitStateUpdateTask("put_repository [" + request.name() + "]",, +                    ensureRepositoryNotInUse(currentState, request.name());, +                        logger.info("put repository [{}]", request.name());, +                            Collections.singletonList(new RepositoryMetaData(request.name(), request.type(), request.settings())));, +                            logger.info("put repository [{}]", request.name());, +                            repositoriesMetaData.add(new RepositoryMetaData(request.name(), request.type(), request.settings()));, +                            logger.info("update repository [{}]", request.name());, +                    logger.warn(() -> new ParameterizedMessage("failed to create repository [{}]", request.name()), e);, +    public void unregisterRepository(final DeleteRepositoryRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {, +        clusterService.submitStateUpdateTask("delete_repository [" + request.name() + "]",, +            new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {, +                    ensureRepositoryNotInUse(currentState, request.name());, +                            if (Regex.simpleMatch(request.name(), repositoryMetaData.name())) {, +                    if (Regex.isMatchAllPattern(request.name())) { // we use a wildcard so we don't barf if it's not present., +                    throw new RepositoryMissingException(request.name());, +    public void verifyRepository(final String repositoryName, final ActionListener<List<DiscoveryNode>> listener) {, +                            verifyAction.verify(repositoryName, verificationToken, new ActionListener<List<DiscoveryNode>>() {, +                                public void onResponse(List<DiscoveryNode> verifyResponse) {, +                        listener.onResponse(Collections.emptyList());, +                verifyRepository(name, new ActionListener<List<DiscoveryNode>>() {, +                    public void onResponse(List<DiscoveryNode> verifyResponse) {, +++ b/server/src/main/java/org/elasticsearch/repositories/VerifyNodeRepositoryAction.java, +    public void verify(String repository, String verificationToken, final ActionListener<List<DiscoveryNode>> listener) {, +                    finishVerification(repository, listener, nodes, errors);, +                                finishVerification(repository, listener, nodes, errors);, +                                finishVerification(repository, listener, nodes, errors);]