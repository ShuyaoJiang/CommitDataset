[+++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/SocketEventHandler.java, +import org.elasticsearch.action.ActionListener;, +    /**, +     * This method is called when a listener attached to a channel operation throws an exception., +     *, +     * @param listener that was called, +     * @param exception that occurred, +     */, +    <V> void listenerException(ActionListener<V> listener, Exception exception) {, +        logger.warn(new ParameterizedMessage("exception while executing listener: {}", listener), exception);, +    }, +, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/SocketEventHandler.java, +import org.elasticsearch.action.ActionListener;, +    /**, +     * This method is called when a listener attached to a channel operation throws an exception., +     *, +     * @param listener that was called, +     * @param exception that occurred, +     */, +    <V> void listenerException(ActionListener<V> listener, Exception exception) {, +        logger.warn(new ParameterizedMessage("exception while executing listener: {}", listener), exception);, +    }, +, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/SocketSelector.java, +import org.elasticsearch.action.ActionListener;, +            executeFailedListener(op.getListener(), new ClosedSelectorException());, +                executeFailedListener(writeOperation.getListener(), new ClosedSelectorException());, +            executeFailedListener(writeOperation.getListener(), e);, +        }, +    }, +, +    /**, +     * Executes a success listener with consistent exception handling. This can only be called from current, +     * selector thread., +     *, +     * @param listener to be executed, +     * @param value to provide to listener, +     */, +    public <V> void executeListener(ActionListener<V> listener, V value) {, +        assert isOnCurrentThread() : "Must be on selector thread";, +        try {, +            listener.onResponse(value);, +        } catch (Exception e) {, +            eventHandler.listenerException(listener, e);, +        }, +    }, +, +    /**, +     * Executes a failed listener with consistent exception handling. This can only be called from current, +     * selector thread., +     *, +     * @param listener to be executed, +     * @param exception to provide to listener, +     */, +    public <V> void executeFailedListener(ActionListener<V> listener, Exception exception) {, +        assert isOnCurrentThread() : "Must be on selector thread";, +        try {, +            listener.onFailure(exception);, +        } catch (Exception e) {, +            eventHandler.listenerException(listener, e);, +                executeFailedListener(writeOperation.getListener(), new ClosedChannelException());, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/SocketEventHandler.java, +import org.elasticsearch.action.ActionListener;, +    /**, +     * This method is called when a listener attached to a channel operation throws an exception., +     *, +     * @param listener that was called, +     * @param exception that occurred, +     */, +    <V> void listenerException(ActionListener<V> listener, Exception exception) {, +        logger.warn(new ParameterizedMessage("exception while executing listener: {}", listener), exception);, +    }, +, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/SocketSelector.java, +import org.elasticsearch.action.ActionListener;, +            executeFailedListener(op.getListener(), new ClosedSelectorException());, +                executeFailedListener(writeOperation.getListener(), new ClosedSelectorException());, +            executeFailedListener(writeOperation.getListener(), e);, +        }, +    }, +, +    /**, +     * Executes a success listener with consistent exception handling. This can only be called from current, +     * selector thread., +     *, +     * @param listener to be executed, +     * @param value to provide to listener, +     */, +    public <V> void executeListener(ActionListener<V> listener, V value) {, +        assert isOnCurrentThread() : "Must be on selector thread";, +        try {, +            listener.onResponse(value);, +        } catch (Exception e) {, +            eventHandler.listenerException(listener, e);, +        }, +    }, +, +    /**, +     * Executes a failed listener with consistent exception handling. This can only be called from current]