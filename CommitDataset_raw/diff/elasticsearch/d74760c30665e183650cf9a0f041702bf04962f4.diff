[+++ b/docs/plugins/repository-gcs.asciidoc, +* The built-in <<repository-gcs-using-compute-engine, Compute Engine authentication>>. This mode is, +* Specifying <<repository-gcs-using-service-account, Service Account>> credentials., +When running on Compute Engine, the plugin use Google's built-in authentication mechanism to, +This is the default authentication mode and requires no configuration., +If your elasticsearch node is not running on Compute Engine, or if you don't want to use Google's, +This file must be stored in the <<secure-settings, elasticsearch keystore>>, under a setting name, +of the form `gcs.client.NAME.credentials_file`, where `NAME` is the name of the client congiguration., +The default client name is `default`, but a different client name can be specified in repository, +settings using `client`., +For example, if specifying the credentials file in the keystore under, +`gcs.client.my_alternate_client.credentials_file`, you can configure a repository to use these, +credentials like this:, +    "client": "my_alternate_client", +    "bucket": "my_bucket", +`client`::, +    The client congfiguration to use. This controls which credentials are used to connect, +    to Compute Engine., +++ b/docs/plugins/repository-gcs.asciidoc, +* The built-in <<repository-gcs-using-compute-engine, Compute Engine authentication>>. This mode is, +* Specifying <<repository-gcs-using-service-account, Service Account>> credentials., +When running on Compute Engine, the plugin use Google's built-in authentication mechanism to, +This is the default authentication mode and requires no configuration., +If your elasticsearch node is not running on Compute Engine, or if you don't want to use Google's, +This file must be stored in the <<secure-settings, elasticsearch keystore>>, under a setting name, +of the form `gcs.client.NAME.credentials_file`, where `NAME` is the name of the client congiguration., +The default client name is `default`, but a different client name can be specified in repository, +settings using `client`., +For example, if specifying the credentials file in the keystore under, +`gcs.client.my_alternate_client.credentials_file`, you can configure a repository to use these, +credentials like this:, +    "client": "my_alternate_client", +    "bucket": "my_bucket", +`client`::, +    The client congfiguration to use. This controls which credentials are used to connect, +    to Compute Engine., +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStoragePlugin.java, +import java.util.List;, +import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Settings;, +    private final Map<String, GoogleCredential> credentials;, +, +    public GoogleCloudStoragePlugin(Settings settings) {, +        credentials = GoogleCloudStorageService.loadClientCredentials(settings);, +    }, +, +        return new GoogleCloudStorageService.InternalGoogleCloudStorageService(environment, credentials);, +, +    @Override, +    public List<Setting<?>> getSettings() {, +        return Collections.singletonList(GoogleCloudStorageService.CREDENTIALS_FILE_SETTING);, +    }, +++ b/docs/plugins/repository-gcs.asciidoc, +* The built-in <<repository-gcs-using-compute-engine, Compute Engine authentication>>. This mode is, +* Specifying <<repository-gcs-using-service-account, Service Account>> credentials., +When running on Compute Engine, the plugin use Google's built-in authentication mechanism to, +This is the default authentication mode and requires no configuration., +If your elasticsearch node is not running on Compute Engine, or if you don't want to use Google's, +This file must be stored in the <<secure-settings, elasticsearch keystore>>, under a setting name, +of the form `gcs.client.NAME.credentials_file`, where `NAME` is the name of the client congiguration., +The default client name is `default`, but a different client name can be specified in repository, +settings using `client`., +For example, if specifying the credentials file in the keystore under, +`gcs.client.my_alternate_client.credentials_file`, you can configure a repository to use these, +credentials like this:, +    "client": "my_alternate_client", +    "bucket": "my_bucket", +`client`::, +    The client congfiguration to use. This controls which credentials are used to connect, +    to Compute Engine., +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStoragePlugin.java, +import java.util.List;, +import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Settings;, +    private final Map<String, GoogleCredential> credentials;, +, +    public GoogleCloudStoragePlugin(Settings settings) {, +        credentials = GoogleCloudStorageService.loadClientCredentials(settings);, +    }, +, +        return new GoogleCloudStorageService.InternalGoogleCloudStorageService(environment, credentials);, +, +    @Override, +    public List<Setting<?>> getSettings() {, +        return Collections.singletonList(GoogleCloudStorageService.CREDENTIALS_FILE_SETTING);, +    }, +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageRepository.java, +    static final String TYPE = "gcs";, +    static final TimeValue NO_TIMEOUT = timeValueMillis(-1);, +    static final Setting<String> BUCKET =, +    static final Setting<String> BASE_PATH =, +    static final Setting<Boolean> COMPRESS =, +    static final Setting<ByteSizeValue> CHUNK_SIZE =, +    static final Setting<String> APPLICATION_NAME =, +    static final Setting<String> SERVICE_ACCOUNT =, +            new Setting<>("service_account", "_default_", Function.identity(), Property.NodeScope, Property.Dynamic, Property.Deprecated);, +    static final Setting<String> CLIENT_NAME = new Setting<>("client", "default", Function.identity());, +    static final Setting<TimeValue> HTTP_READ_TIMEOUT =]