[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +    protected static boolean convertExistsResponse(Response response) {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +    protected static boolean convertExistsResponse(Response response) {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityClient.java, +     * @deprecated use {@link #enableUser(RequestOptions, EnableUserRequest)} instead, +    @Deprecated, +     * Enable a native realm or built-in user synchronously., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html">, +     * the docs</a> for more., +     *, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param request the request with the user to enable, +     * @return {@code true} if the request succeeded (the user is enabled), +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public boolean enableUser(RequestOptions options, EnableUserRequest request) throws IOException {, +        return restHighLevelClient.performRequest(request, SecurityRequestConverters::enableUser, options,, +            RestHighLevelClient::convertExistsResponse, emptySet());, +    }, +, +    /**, +     * @deprecated use {@link #enableUserAsync(RequestOptions, EnableUserRequest, ActionListener)} instead, +    @Deprecated, +     * Enable a native realm or built-in user asynchronously., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html">, +     * the docs</a> for more., +     *, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param request  the request with the user to enable, +     * @param listener the listener to be notified upon request completion, +     */, +    public void enableUserAsync(RequestOptions options, EnableUserRequest request,, +                                ActionListener<Boolean> listener) {, +        restHighLevelClient.performRequestAsync(request, SecurityRequestConverters::enableUser, options,, +            RestHighLevelClient::convertExistsResponse, listener, emptySet());, +    }, +, +    /**, +     * @deprecated use {@link #disableUser(RequestOptions, DisableUserRequest)} instead, +    @Deprecated, +     * Disable a native realm or built-in user synchronously., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html">, +     * the docs</a> for more., +     *, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param request the request with the user to disable, +     * @return {@code true} if the request succeeded (the user is disabled), +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public boolean disableUser(RequestOptions options, DisableUserRequest request) throws IOException {, +        return restHighLevelClient.performRequest(request, SecurityRequestConverters::disableUser, options,, +            RestHighLevelClient::convertExistsResponse, emptySet());, +    }, +, +    /**, +     * @deprecated use {@link #disableUserAsync(RequestOptions, DisableUserRequest, ActionListener)} instead, +    @Deprecated, +     * Disable a native realm or built-in user asynchronously., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html">, +     * the docs</a> for more., +     *, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param request  the request with the user to disable, +     * @param listener the listener to be notified upon request completion, +     */, +    public void disableUserAsync(RequestOptions options, DisableUserRequest request,, +                                 ActionListener<Boolean> listener) {, +        restHighLevelClient.performRequestAsync(request, SecurityRequestConverters::disableUser, options,, +            RestHighLevelClient::convertExistsResponse, listener, emptySet());, +    }, +, +    /**, +     * @deprecated use {@link #changePassword(RequestOptions, ChangePasswordRequest)} instead, +    @Deprecated, +     * Change the password of a user of a native realm or built-in user synchronously., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html">, +     * the docs</a> for more., +     *, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param request the request with the user's new password, +     * @return {@code true} if the request succeeded (the new password was set), +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public boolean changePassword(RequestOptions options, ChangePasswordRequest request) throws IOException {, +        return restHighLevelClient.performRequest(request, SecurityRequestConverters::changePassword, options,, +            RestHighLevelClient::convertExistsResponse, emptySet());, +    }, +, +    /**, +     * @deprecated use {@link #changePasswordAsync(RequestOptions, ChangePasswordRequest, ActionListener)} instead, +    @Deprecated, +     * Change the password of a user of a native realm or built-in user asynchronously., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html">, +     * the docs</a> for more., +     *, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param request  the request with the user's new password, +     * @param listener the listener to be notified upon request completion, +     */]