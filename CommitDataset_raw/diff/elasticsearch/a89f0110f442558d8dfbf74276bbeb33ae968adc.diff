[+++ b/elasticsearch/qa/security-migrate-tests/src/test/java/org/elasticsearch/xpack/security/MigrateToolTestCase.java, +import org.apache.logging.log4j.Logger;, +    protected static final Logger logger = ESLoggerFactory.getLogger(MigrateToolTestCase.class.getName());, +++ b/elasticsearch/qa/security-migrate-tests/src/test/java/org/elasticsearch/xpack/security/MigrateToolTestCase.java, +import org.apache.logging.log4j.Logger;, +    protected static final Logger logger = ESLoggerFactory.getLogger(MigrateToolTestCase.class.getName());, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +import org.elasticsearch.cluster.service.ClusterService;, +                logger.error((Supplier<?>) () -> new ParameterizedMessage("unexpected failure during [{}]", source), e);, +++ b/elasticsearch/qa/security-migrate-tests/src/test/java/org/elasticsearch/xpack/security/MigrateToolTestCase.java, +import org.apache.logging.log4j.Logger;, +    protected static final Logger logger = ESLoggerFactory.getLogger(MigrateToolTestCase.class.getName());, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +import org.elasticsearch.cluster.service.ClusterService;, +                logger.error((Supplier<?>) () -> new ParameterizedMessage("unexpected failure during [{}]", source), e);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/OperationModeFileWatcher.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +    private final Logger logger;, +                                    Logger logger, Runnable onChange) {, +                    logger.error(, +                            (Supplier<?>) () -> new ParameterizedMessage(, +                                    "couldn't read operation mode from [{}]", licenseModePath.toAbsolutePath()), e);, +                    logger.error(, +                            (Supplier<?>) () -> new ParameterizedMessage(, +                                    "invalid operation mode in [{}]", licenseModePath.toAbsolutePath()), e);, +++ b/elasticsearch/qa/security-migrate-tests/src/test/java/org/elasticsearch/xpack/security/MigrateToolTestCase.java, +import org.apache.logging.log4j.Logger;, +    protected static final Logger logger = ESLoggerFactory.getLogger(MigrateToolTestCase.class.getName());, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +import org.elasticsearch.cluster.service.ClusterService;, +                logger.error((Supplier<?>) () -> new ParameterizedMessage("unexpected failure during [{}]", source), e);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/OperationModeFileWatcher.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +    private final Logger logger;, +                                    Logger logger, Runnable onChange) {, +                    logger.error(, +                            (Supplier<?>) () -> new ParameterizedMessage(, +                                    "couldn't read operation mode from [{}]", licenseModePath.toAbsolutePath()), e);, +                    logger.error(, +                            (Supplier<?>) () -> new ParameterizedMessage(, +                                    "invalid operation mode in [{}]", licenseModePath.toAbsolutePath()), e);, +++ b/elasticsearch/x-pack/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/agent/AgentService.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +                logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to close exporter [{}]", exporter.name()), e);, +++ b/elasticsearch/qa/security-migrate-tests/src/test/java/org/elasticsearch/xpack/security/MigrateToolTestCase.java, +import org.apache.logging.log4j.Logger;, +    protected static final Logger logger = ESLoggerFactory.getLogger(MigrateToolTestCase.class.getName());, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +import org.elasticsearch.cluster.service.ClusterService;, +                logger.error((Supplier<?>) () -> new ParameterizedMessage("unexpected failure during [{}]", source), e);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/OperationModeFileWatcher.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +    private final Logger logger;, +                                    Logger logger, Runnable onChange) {, +                    logger.error(, +                            (Supplier<?>) () -> new ParameterizedMessage(, +                                    "couldn't read operation mode from [{}]", licenseModePath.toAbsolutePath()), e);, +                    logger.error(, +                            (Supplier<?>) () -> new ParameterizedMessage(, +                                    "invalid operation mode in [{}]", licenseModePath.toAbsolutePath()), e);, +++ b/elasticsearch/x-pack/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/agent/AgentService.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +                logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to close exporter [{}]", exporter.name()), e);, +++ b/elasticsearch/x-pack/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/agent/collector/AbstractCollector.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +            logger.error((Supplier<?>) () -> new ParameterizedMessage("collector [{}] - failed collecting data", name()), e);, +++ b/elasticsearch/qa/security-migrate-tests/src/test/java/org/elasticsearch/xpack/security/MigrateToolTestCase.java, +import org.apache.logging.log4j.Logger;, +    protected static final Logger logger = ESLoggerFactory.getLogger(MigrateToolTestCase.class.getName());, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +import org.elasticsearch.cluster.service.ClusterService;, +                logger.error((Supplier<?>) () -> new ParameterizedMessage("unexpected failure during [{}]", source), e);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/OperationModeFileWatcher.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +    private final Logger logger;, +                                    Logger logger, Runnable onChange) {, +                    logger.error(, +                            (Supplier<?>) () -> new ParameterizedMessage(, +                                    "couldn't read operation mode from [{}]", licenseModePath.toAbsolutePath()), e);]