[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            if (nodeStats.getProcess().getCpu() != null) {, +                cpuPercent += nodeStats.getProcess().getCpu().getPercent();, +            long fd = nodeStats.getProcess().getOpenFileDescriptors();, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            if (nodeStats.getProcess().getCpu() != null) {, +                cpuPercent += nodeStats.getProcess().getCpu().getPercent();, +            long fd = nodeStats.getProcess().getOpenFileDescriptors();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +import org.elasticsearch.action.ActionListener;, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            if (nodeStats.getProcess().getCpu() != null) {, +                cpuPercent += nodeStats.getProcess().getCpu().getPercent();, +            long fd = nodeStats.getProcess().getOpenFileDescriptors();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +import org.elasticsearch.action.ActionListener;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.monitor.process.ProcessProbe;, +    static void initializeProbes() {, +        // Force probes to be loaded, +        ProcessProbe.getInstance();, +    }, +, +        // initialize probes before the security manager is installed, +        initializeProbes();, +, +            logger.info("max_open_files [{}]", ProcessProbe.getInstance().getMaxFileDescriptorCount());, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            if (nodeStats.getProcess().getCpu() != null) {, +                cpuPercent += nodeStats.getProcess().getCpu().getPercent();, +            long fd = nodeStats.getProcess().getOpenFileDescriptors();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +import org.elasticsearch.action.ActionListener;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.monitor.process.ProcessProbe;, +    static void initializeProbes() {, +        // Force probes to be loaded, +        ProcessProbe.getInstance();, +    }, +, +        // initialize probes before the security manager is installed, +        initializeProbes();, +, +            logger.info("max_open_files [{}]", ProcessProbe.getInstance().getMaxFileDescriptorCount());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +import org.elasticsearch.cluster.routing.ShardRouting;, +    private final Map<String, DiskUsage> usages;, +    final Map<String, Long> shardSizes;, +    public ClusterInfo(Map<String, DiskUsage> usages, Map<String, Long> shardSizes) {, +    public Long getShardSize(ShardRouting shardRouting) {, +        return shardSizes.get(shardIdentifierFromRouting(shardRouting));, +    }, +, +    /**, +     * Method that incorporates the ShardId for the shard into a string that, +     * includes a 'p' or 'r' depending on whether the shard is a primary., +     */, +    static String shardIdentifierFromRouting(ShardRouting shardRouting) {, +        return shardRouting.shardId().toString() + "[" + (shardRouting.primary() ? "p" : "r") + "]";, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            if (nodeStats.getProcess().getCpu() != null) {]