[+++ /dev/null, +++ /dev/null, +++ b/plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpClient.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.http.nio;, +, +import io.netty.buffer.Unpooled;, +import io.netty.channel.ChannelHandler;, +import io.netty.handler.codec.http.DefaultFullHttpRequest;, +import io.netty.handler.codec.http.DefaultFullHttpResponse;, +import io.netty.handler.codec.http.FullHttpRequest;, +import io.netty.handler.codec.http.FullHttpResponse;, +import io.netty.handler.codec.http.HttpMethod;, +import io.netty.handler.codec.http.HttpObjectAggregator;, +import io.netty.handler.codec.http.HttpRequest;, +import io.netty.handler.codec.http.HttpRequestEncoder;, +import io.netty.handler.codec.http.HttpResponse;, +import io.netty.handler.codec.http.HttpResponseDecoder;, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.support.PlainActionFuture;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.core.internal.io.IOUtils;, +import org.elasticsearch.nio.BytesChannelContext;, +import org.elasticsearch.nio.ChannelFactory;, +import org.elasticsearch.nio.EventHandler;, +import org.elasticsearch.nio.FlushOperation;, +import org.elasticsearch.nio.InboundChannelBuffer;, +import org.elasticsearch.nio.NioGroup;, +import org.elasticsearch.nio.NioSelector;, +import org.elasticsearch.nio.NioServerSocketChannel;, +import org.elasticsearch.nio.NioSocketChannel;, +import org.elasticsearch.nio.ReadWriteHandler;, +import org.elasticsearch.nio.SocketChannelContext;, +import org.elasticsearch.nio.WriteOperation;, +import org.elasticsearch.tasks.Task;, +, +import java.io.Closeable;, +import java.io.IOException;, +import java.io.UncheckedIOException;, +import java.net.InetSocketAddress;, +import java.nio.channels.ServerSocketChannel;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.function.BiConsumer;, +import java.util.function.Consumer;, +, +import static io.netty.handler.codec.http.HttpHeaderNames.HOST;, +import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;, +import static org.elasticsearch.common.util.concurrent.EsExecutors.daemonThreadFactory;, +, +/**, + * Tiny helper to send http requests over nio., + */, +class NioHttpClient implements Closeable {, +, +    static Collection<String> returnOpaqueIds(Collection<FullHttpResponse> responses) {, +        List<String> list = new ArrayList<>(responses.size());, +        for (HttpResponse response : responses) {, +            list.add(response.headers().get(Task.X_OPAQUE_ID));, +        }, +        return list;, +    }, +, +    private final NioGroup nioGroup;, +    private final Logger logger;, +, +    NioHttpClient() {, +        logger = Loggers.getLogger(NioHttpClient.class, Settings.EMPTY);, +        try {, +            nioGroup = new NioGroup(daemonThreadFactory(Settings.EMPTY, "nio-http-client"), 1,, +                (s) -> new EventHandler(this::onException, s));, +        } catch (IOException e) {, +            throw new UncheckedIOException(e);]