[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatusDateParser.java, +        return FORMATTER.parseJoda(text);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatusDateParser.java, +        return FORMATTER.parseJoda(text);, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +            out.writeString(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.pattern());, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatusDateParser.java, +        return FORMATTER.parseJoda(text);, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +            out.writeString(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.pattern());, +++ b/server/src/main/java/org/elasticsearch/common/joda/FormatDateTimeFormatter.java, +import org.elasticsearch.common.time.DateUtils;, +import org.joda.time.DateTime;, +import java.time.ZoneId;, +    private final String pattern;, +    public FormatDateTimeFormatter(String pattern, DateTimeFormatter parser, DateTimeFormatter printer) {, +        this.pattern = pattern;, +        this.printer = printer.withDefaultYear(1970);, +        this.parser = parser.withDefaultYear(1970);, +    public String pattern() {, +        return pattern;, +    public long parseMillis(String input) {, +        return parser.parseMillis(input);, +    }, +, +    public DateTime parseJoda(String input) {, +        return parser.parseDateTime(input);, +    public String formatJoda(DateTime dateTime) {, +        return printer.print(dateTime);, +    }, +, +    public String formatMillis(long millis) {, +        return printer.print(millis);, +    }, +, +    public FormatDateTimeFormatter withZone(ZoneId zoneId) {, +        DateTimeFormatter parser = this.parser.withZone(DateUtils.zoneIdToDateTimeZone(zoneId));, +        DateTimeFormatter printer = this.printer.withZone(DateUtils.zoneIdToDateTimeZone(zoneId));, +        return new FormatDateTimeFormatter(pattern, parser, printer);, +    }, +, +    public FormatDateTimeFormatter withLocale(Locale locale) {, +        DateTimeFormatter parser = this.parser.withLocale(locale);, +        DateTimeFormatter printer = this.printer.withLocale(locale);, +        return new FormatDateTimeFormatter(this.pattern, parser, printer);, +    }, +, +        return parser.getLocale();, +    }, +, +    public ZoneId zone() {, +        return DateUtils.dateTimeZoneToZoneId(parser.getZone());, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/WatchStatusDateParser.java, +        return FORMATTER.parseJoda(text);, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +            out.writeString(DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.pattern());, +++ b/server/src/main/java/org/elasticsearch/common/joda/FormatDateTimeFormatter.java, +import org.elasticsearch.common.time.DateUtils;, +import org.joda.time.DateTime;, +import java.time.ZoneId;, +    private final String pattern;, +    public FormatDateTimeFormatter(String pattern, DateTimeFormatter parser, DateTimeFormatter printer) {, +        this.pattern = pattern;, +        this.printer = printer.withDefaultYear(1970);, +        this.parser = parser.withDefaultYear(1970);, +    public String pattern() {, +        return pattern;, +    public long parseMillis(String input) {, +        return parser.parseMillis(input);, +    }, +, +    public DateTime parseJoda(String input) {, +        return parser.parseDateTime(input);, +    public String formatJoda(DateTime dateTime) {, +        return printer.print(dateTime);, +    }, +, +    public String formatMillis(long millis) {, +        return printer.print(millis);, +    }, +, +    public FormatDateTimeFormatter withZone(ZoneId zoneId) {, +        DateTimeFormatter parser = this.parser.withZone(DateUtils.zoneIdToDateTimeZone(zoneId));, +        DateTimeFormatter printer = this.printer.withZone(DateUtils.zoneIdToDateTimeZone(zoneId));, +        return new FormatDateTimeFormatter(pattern, parser, printer);, +    }, +, +    public FormatDateTimeFormatter withLocale(Locale locale) {, +        DateTimeFormatter parser = this.parser.withLocale(locale);, +        DateTimeFormatter printer = this.printer.withLocale(locale);, +        return new FormatDateTimeFormatter(this.pattern, parser, printer);, +    }, +, +        return parser.getLocale();, +    }, +, +    public ZoneId zone() {, +        return DateUtils.dateTimeZoneToZoneId(parser.getZone());, +++ b/server/src/main/java/org/elasticsearch/common/joda/Joda.java, +                    ISODateTimeFormat.dateOptionalTimeParser().withLocale(locale).withZone(DateTimeZone.UTC),]