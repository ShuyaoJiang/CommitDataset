[+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                boolean indexCreated = false;, +                String failureReason = null;, +                    indexCreated = true;, +                            failureReason = "failed on parsing default mapping on index creation";, +                            failureReason = "failed on parsing mappings on index creation";, +                    final IndexMetaData indexMetaData;, +                    try {, +                        indexMetaData = indexMetaDataBuilder.build();, +                    } catch (Exception e) {, +                        failureReason = "failed to build index metadata";, +                        throw e;, +                    }, +                    if (indexCreated) {, +                        // Index was already partially created - need to clean up, +                        indicesService.deleteIndex(request.index, failureReason != null ? failureReason : "failed to create index");, +                    }, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                boolean indexCreated = false;, +                String failureReason = null;, +                    indexCreated = true;, +                            failureReason = "failed on parsing default mapping on index creation";, +                            failureReason = "failed on parsing mappings on index creation";, +                    final IndexMetaData indexMetaData;, +                    try {, +                        indexMetaData = indexMetaDataBuilder.build();, +                    } catch (Exception e) {, +                        failureReason = "failed to build index metadata";, +                        throw e;, +                    }, +                    if (indexCreated) {, +                        // Index was already partially created - need to clean up, +                        indicesService.deleteIndex(request.index, failureReason != null ? failureReason : "failed to create index");, +                    }, +++ b/src/test/java/org/elasticsearch/test/integration/indices/state/SimpleIndexStateTests.java, +import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;, +import org.elasticsearch.common.settings.SettingsException;, +import org.elasticsearch.indices.IndexMissingException;, +import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;, +, +    @Test, +    public void testConsistencyAfterIndexCreationFailure() {, +        logger.info("--> starting one node....");, +        startNode("node1");, +, +        logger.info("--> deleting test index....");, +        try {, +            client("node1").admin().indices().prepareDelete("test").execute().actionGet();, +        } catch (IndexMissingException ex) {, +            // Ignore, +        }, +, +        logger.info("--> creating test index with invalid settings ");, +        try {, +            client("node1").admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("number_of_shards", "bad")).execute().actionGet();, +            assert false;, +        } catch (SettingsException ex) {, +            // Expected, +        }, +, +        logger.info("--> creating test index with valid settings ");, +        CreateIndexResponse response = client("node1").admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("number_of_shards", 1)).execute().actionGet();, +        assertThat(response.acknowledged(), equalTo(true));, +    }, +]