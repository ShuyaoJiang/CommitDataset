[+++ b/docs/java-api/aggregations/bucket/datehistogram-aggregation.asciidoc, +                .interval(DateHistogram.Interval.YEAR);, +                .interval(DateHistogram.Interval.days(10));, +DateHistogram agg = sr.getAggregations().get("agg");, +for (DateHistogram.Bucket entry : agg.getBuckets()) {, +    String key = entry.getKey();                // Key, +    DateTime keyAsDate = entry.getKeyAsDate();  // Key as date, +++ b/docs/java-api/aggregations/bucket/datehistogram-aggregation.asciidoc, +                .interval(DateHistogram.Interval.YEAR);, +                .interval(DateHistogram.Interval.days(10));, +DateHistogram agg = sr.getAggregations().get("agg");, +for (DateHistogram.Bucket entry : agg.getBuckets()) {, +    String key = entry.getKey();                // Key, +    DateTime keyAsDate = entry.getKeyAsDate();  // Key as date, +++ b/docs/java-api/aggregations/bucket/daterange-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.date.DateRange;, +DateRange agg = sr.getAggregations().get("agg");, +for (DateRange.Bucket entry : agg.getBuckets()) {, +    DateTime fromAsDate = entry.getFromAsDate();    // Date bucket from as a Date, +    DateTime toAsDate = entry.getToAsDate();        // Date bucket to as a Date, +++ b/docs/java-api/aggregations/bucket/datehistogram-aggregation.asciidoc, +                .interval(DateHistogram.Interval.YEAR);, +                .interval(DateHistogram.Interval.days(10));, +DateHistogram agg = sr.getAggregations().get("agg");, +for (DateHistogram.Bucket entry : agg.getBuckets()) {, +    String key = entry.getKey();                // Key, +    DateTime keyAsDate = entry.getKeyAsDate();  // Key as date, +++ b/docs/java-api/aggregations/bucket/daterange-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.date.DateRange;, +DateRange agg = sr.getAggregations().get("agg");, +for (DateRange.Bucket entry : agg.getBuckets()) {, +    DateTime fromAsDate = entry.getFromAsDate();    // Date bucket from as a Date, +    DateTime toAsDate = entry.getToAsDate();        // Date bucket to as a Date, +++ b/docs/java-api/aggregations/bucket/geodistance-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.geodistance.GeoDistance;, +GeoDistance agg = sr.getAggregations().get("agg");, +for (GeoDistance.Bucket entry : agg.getBuckets()) {, +    Number from = entry.getFrom();          // bucket from value, +    Number to = entry.getTo();              // bucket to value, +++ b/docs/java-api/aggregations/bucket/datehistogram-aggregation.asciidoc, +                .interval(DateHistogram.Interval.YEAR);, +                .interval(DateHistogram.Interval.days(10));, +DateHistogram agg = sr.getAggregations().get("agg");, +for (DateHistogram.Bucket entry : agg.getBuckets()) {, +    String key = entry.getKey();                // Key, +    DateTime keyAsDate = entry.getKeyAsDate();  // Key as date, +++ b/docs/java-api/aggregations/bucket/daterange-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.date.DateRange;, +DateRange agg = sr.getAggregations().get("agg");, +for (DateRange.Bucket entry : agg.getBuckets()) {, +    DateTime fromAsDate = entry.getFromAsDate();    // Date bucket from as a Date, +    DateTime toAsDate = entry.getToAsDate();        // Date bucket to as a Date, +++ b/docs/java-api/aggregations/bucket/geodistance-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.geodistance.GeoDistance;, +GeoDistance agg = sr.getAggregations().get("agg");, +for (GeoDistance.Bucket entry : agg.getBuckets()) {, +    Number from = entry.getFrom();          // bucket from value, +    Number to = entry.getTo();              // bucket to value, +++ b/docs/java-api/aggregations/bucket/histogram-aggregation.asciidoc, +    String key = entry.getKey();            // Key, +++ b/docs/java-api/aggregations/bucket/datehistogram-aggregation.asciidoc, +                .interval(DateHistogram.Interval.YEAR);, +                .interval(DateHistogram.Interval.days(10));, +DateHistogram agg = sr.getAggregations().get("agg");, +for (DateHistogram.Bucket entry : agg.getBuckets()) {, +    String key = entry.getKey();                // Key, +    DateTime keyAsDate = entry.getKeyAsDate();  // Key as date, +++ b/docs/java-api/aggregations/bucket/daterange-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.date.DateRange;, +DateRange agg = sr.getAggregations().get("agg");, +for (DateRange.Bucket entry : agg.getBuckets()) {, +    DateTime fromAsDate = entry.getFromAsDate();    // Date bucket from as a Date, +    DateTime toAsDate = entry.getToAsDate();        // Date bucket to as a Date, +++ b/docs/java-api/aggregations/bucket/geodistance-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.geodistance.GeoDistance;, +GeoDistance agg = sr.getAggregations().get("agg");, +for (GeoDistance.Bucket entry : agg.getBuckets()) {, +    Number from = entry.getFrom();          // bucket from value, +    Number to = entry.getTo();              // bucket to value, +++ b/docs/java-api/aggregations/bucket/histogram-aggregation.asciidoc, +    String key = entry.getKey();            // Key, +++ b/docs/java-api/aggregations/bucket/iprange-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.ipv4.IPv4Range;, +for (IPv4Range.Bucket entry : agg.getBuckets()) {, +++ b/docs/java-api/aggregations/bucket/datehistogram-aggregation.asciidoc, +                .interval(DateHistogram.Interval.YEAR);, +                .interval(DateHistogram.Interval.days(10));, +DateHistogram agg = sr.getAggregations().get("agg");, +for (DateHistogram.Bucket entry : agg.getBuckets()) {, +    String key = entry.getKey();                // Key, +    DateTime keyAsDate = entry.getKeyAsDate();  // Key as date, +++ b/docs/java-api/aggregations/bucket/daterange-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.date.DateRange;, +DateRange agg = sr.getAggregations().get("agg");, +for (DateRange.Bucket entry : agg.getBuckets()) {, +    DateTime fromAsDate = entry.getFromAsDate();    // Date bucket from as a Date, +    DateTime toAsDate = entry.getToAsDate();        // Date bucket to as a Date, +++ b/docs/java-api/aggregations/bucket/geodistance-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.geodistance.GeoDistance;, +GeoDistance agg = sr.getAggregations().get("agg");]