[+++ b/build.gradle, +    // Read the list from maven central. , +    // Fetch the metadata an parse the xml into Version instances because it's more straight forward here , +    // rather than bwcVersion ( VersionCollection )., +      bwcVersions.compareToAuthoritative(, +              new XmlParser().parse(s), +                      .versioning.versions.version, +                      .collect { it.text() }.findAll { it ==~ /\d+\.\d+\.\d+/ }, +                      .collect { Version.fromString(it) }, +      ), +  // substitute unreleased versions with projects that check out and build locally, +  bwcVersions.forPreviousUnreleased { VersionCollection.UnreleasedVersionInfo unreleasedVersion ->, +    Version unreleased = unreleasedVersion.version, +    String snapshotProject = ":distribution:bwc:${unreleasedVersion.gradleProjectName}", +    ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch:${unreleased}"] = snapshotProject, +    ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch:${unreleased}"] = snapshotProject, +    ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch:${unreleased}"] = snapshotProject, +    if (unreleased.onOrAfter('6.3.0')) {, +      ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch-oss:${unreleased}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch-oss:${unreleased}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch-oss:${unreleased}"] = snapshotProject, +++ b/build.gradle, +    // Read the list from maven central. , +    // Fetch the metadata an parse the xml into Version instances because it's more straight forward here , +    // rather than bwcVersion ( VersionCollection )., +      bwcVersions.compareToAuthoritative(, +              new XmlParser().parse(s), +                      .versioning.versions.version, +                      .collect { it.text() }.findAll { it ==~ /\d+\.\d+\.\d+/ }, +                      .collect { Version.fromString(it) }, +      ), +  // substitute unreleased versions with projects that check out and build locally, +  bwcVersions.forPreviousUnreleased { VersionCollection.UnreleasedVersionInfo unreleasedVersion ->, +    Version unreleased = unreleasedVersion.version, +    String snapshotProject = ":distribution:bwc:${unreleasedVersion.gradleProjectName}", +    ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch:${unreleased}"] = snapshotProject, +    ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch:${unreleased}"] = snapshotProject, +    ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch:${unreleased}"] = snapshotProject, +    if (unreleased.onOrAfter('6.3.0')) {, +      ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch-oss:${unreleased}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch-oss:${unreleased}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch-oss:${unreleased}"] = snapshotProject, +++ /dev/null, +++ b/build.gradle, +    // Read the list from maven central. , +    // Fetch the metadata an parse the xml into Version instances because it's more straight forward here , +    // rather than bwcVersion ( VersionCollection )., +      bwcVersions.compareToAuthoritative(, +              new XmlParser().parse(s), +                      .versioning.versions.version, +                      .collect { it.text() }.findAll { it ==~ /\d+\.\d+\.\d+/ }, +                      .collect { Version.fromString(it) }, +      ), +  // substitute unreleased versions with projects that check out and build locally, +  bwcVersions.forPreviousUnreleased { VersionCollection.UnreleasedVersionInfo unreleasedVersion ->, +    Version unreleased = unreleasedVersion.version, +    String snapshotProject = ":distribution:bwc:${unreleasedVersion.gradleProjectName}", +    ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch:${unreleased}"] = snapshotProject, +    ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch:${unreleased}"] = snapshotProject, +    ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch:${unreleased}"] = snapshotProject, +    if (unreleased.onOrAfter('6.3.0')) {, +      ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch-oss:${unreleased}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch-oss:${unreleased}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch-oss:${unreleased}"] = snapshotProject, +++ /dev/null, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/Version.java, +    public Version(int major, int minor, int revision) {, +        this(major, minor, revision, "", false);, +    }, +, +        this.id = major * 10000000 + minor * 100000 + revision * 1000;, +                revision == version.revision;, +, +++ b/build.gradle, +    // Read the list from maven central. , +    // Fetch the metadata an parse the xml into Version instances because it's more straight forward here , +    // rather than bwcVersion ( VersionCollection )., +      bwcVersions.compareToAuthoritative(, +              new XmlParser().parse(s), +                      .versioning.versions.version, +                      .collect { it.text() }.findAll { it ==~ /\d+\.\d+\.\d+/ }, +                      .collect { Version.fromString(it) }, +      ), +  // substitute unreleased versions with projects that check out and build locally, +  bwcVersions.forPreviousUnreleased { VersionCollection.UnreleasedVersionInfo unreleasedVersion ->, +    Version unreleased = unreleasedVersion.version, +    String snapshotProject = ":distribution:bwc:${unreleasedVersion.gradleProjectName}", +    ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch:${unreleased}"] = snapshotProject, +    ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch:${unreleased}"] = snapshotProject, +    ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch:${unreleased}"] = snapshotProject, +    if (unreleased.onOrAfter('6.3.0')) {, +      ext.projectSubstitutions["org.elasticsearch.distribution.deb:elasticsearch-oss:${unreleased}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.rpm:elasticsearch-oss:${unreleased}"] = snapshotProject, +      ext.projectSubstitutions["org.elasticsearch.distribution.zip:elasticsearch-oss:${unreleased}"] = snapshotProject, +++ /dev/null, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/Version.java, +    public Version(int major, int minor, int revision) {, +        this(major, minor, revision, "", false);, +    }, +]