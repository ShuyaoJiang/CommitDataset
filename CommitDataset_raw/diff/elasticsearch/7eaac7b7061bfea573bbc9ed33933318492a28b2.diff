[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeRequest.java, + * A request to upgrade one or more indices. In order to optimize on all the indices, pass an empty array or, +     * @param indices The indices to optimize, no indices passed means all indices will be optimized., +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeRequest.java, + * A request to upgrade one or more indices. In order to optimize on all the indices, pass an empty array or, +     * @param indices The indices to optimize, no indices passed means all indices will be optimized., +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeResponse.java, + * A response for optimize action., +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeRequest.java, + * A request to upgrade one or more indices. In order to optimize on all the indices, pass an empty array or, +     * @param indices The indices to optimize, no indices passed means all indices will be optimized., +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeResponse.java, + * A response for optimize action., +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +        final Set<String> concreteIndices = new HashSet<>(expressions.size());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeRequest.java, + * A request to upgrade one or more indices. In order to optimize on all the indices, pass an empty array or, +     * @param indices The indices to optimize, no indices passed means all indices will be optimized., +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeResponse.java, + * A response for optimize action., +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +        final Set<String> concreteIndices = new HashSet<>(expressions.size());, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Optimizes to 1 segment, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeRequest.java, + * A request to upgrade one or more indices. In order to optimize on all the indices, pass an empty array or, +     * @param indices The indices to optimize, no indices passed means all indices will be optimized., +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeResponse.java, + * A response for optimize action., +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +        final Set<String> concreteIndices = new HashSet<>(expressions.size());, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Optimizes to 1 segment, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        // we just want to upgrade the segments, not actually optimize to a single segment, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeRequest.java, + * A request to upgrade one or more indices. In order to optimize on all the indices, pass an empty array or, +     * @param indices The indices to optimize, no indices passed means all indices will be optimized., +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeResponse.java, + * A response for optimize action., +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +        final Set<String> concreteIndices = new HashSet<>(expressions.size());, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Optimizes to 1 segment, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        // we just want to upgrade the segments, not actually optimize to a single segment, +++ b/core/src/main/java/org/elasticsearch/index/shard/MergePolicyConfig.java, + *     Maximum number of segments to be merged at a time, during optimize or, + *     optimize). This setting is approximate: the estimate of the merged segment, + *     size is made by summing sizes of to-be-merged segments (compensating for, + *     percent deleted docs). Default is <code>5gb</code>., +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeRequest.java, + * A request to upgrade one or more indices. In order to optimize on all the indices, pass an empty array or, +     * @param indices The indices to optimize, no indices passed means all indices will be optimized., +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeResponse.java, + * A response for optimize action., +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +        final Set<String> concreteIndices = new HashSet<>(expressions.size());, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Optimizes to 1 segment, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        // we just want to upgrade the segments, not actually optimize to a single segment, +++ b/core/src/main/java/org/elasticsearch/index/shard/MergePolicyConfig.java, + *     Maximum number of segments to be merged at a time, during optimize or, + *     optimize). This setting is approximate: the estimate of the merged segment, + *     size is made by summing sizes of to-be-merged segments (compensating for, + *     percent deleted docs). Default is <code>5gb</code>., +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/forcemerge/RestForceMergeAction.java, +, +        // TODO: Remove for 3.0, +        controller.registerHandler(POST, "/_optimize", this);, +        controller.registerHandler(POST, "/{index}/_optimize", this);, +, +        controller.registerHandler(GET, "/_optimize", this);, +        controller.registerHandler(GET, "/{index}/_optimize", this);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeRequest.java, + * A request to upgrade one or more indices. In order to optimize on all the indices, pass an empty array or, +     * @param indices The indices to optimize, no indices passed means all indices will be optimized., +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/UpgradeResponse.java, + * A response for optimize action., +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +        final Set<String> concreteIndices = new HashSet<>(expressions.size());, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Optimizes to 1 segment, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        // we just want to upgrade the segments, not actually optimize to a single segment, +++ b/core/src/main/java/org/elasticsearch/index/shard/MergePolicyConfig.java, + *     Maximum number of segments to be merged at a time, during optimize or]