[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +                        String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue(), clusterService.state());, +                        String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue(), clusterService.state());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +                        String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue(), clusterService.state());, +                        String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue(), clusterService.state());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.action.support.DestructiveOperations;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.metadata.IndexTemplateFilter;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.metadata.MetaDataCreateIndexService;, +import org.elasticsearch.cluster.metadata.MetaDataDeleteIndexService;, +import org.elasticsearch.cluster.metadata.MetaDataIndexAliasesService;, +import org.elasticsearch.cluster.metadata.MetaDataIndexStateService;, +import org.elasticsearch.cluster.metadata.MetaDataIndexTemplateService;, +import org.elasticsearch.cluster.metadata.MetaDataMappingService;, +import org.elasticsearch.cluster.metadata.MetaDataService;, +import org.elasticsearch.cluster.metadata.MetaDataUpdateSettingsService;, +import org.elasticsearch.cluster.routing.UnassignedInfo;, +import org.elasticsearch.cluster.routing.allocation.AllocationService;, +import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;, +import org.elasticsearch.cluster.routing.allocation.allocator.ShardsAllocator;, +import org.elasticsearch.cluster.routing.allocation.decider.AllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;, +import org.elasticsearch.cluster.routing.allocation.decider.AwarenessAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ConcurrentRebalanceAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.DisableAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.NodeVersionAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.RebalanceOnlyWhenActiveAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ShardsLimitAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.SnapshotInProgressAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ThrottlingAllocationDecider;, +import org.elasticsearch.cluster.settings.ClusterDynamicSettings;, +import org.elasticsearch.cluster.settings.DynamicSettings;, +import org.elasticsearch.cluster.settings.Validator;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.util.ExtensionPoint;, +import org.elasticsearch.discovery.DiscoverySettings;, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +import org.elasticsearch.discovery.zen.elect.ElectMasterService;, +import org.elasticsearch.gateway.GatewayAllocator;, +import org.elasticsearch.gateway.PrimaryShardAllocator;, +import org.elasticsearch.index.engine.EngineConfig;, +import org.elasticsearch.index.indexing.IndexingSlowLog;, +import org.elasticsearch.index.search.stats.SearchSlowLog;, +import org.elasticsearch.index.settings.IndexDynamicSettings;, +import org.elasticsearch.index.shard.IndexShard;, +import org.elasticsearch.index.shard.MergePolicyConfig;, +import org.elasticsearch.index.shard.MergeSchedulerConfig;, +import org.elasticsearch.index.store.IndexStore;, +import org.elasticsearch.index.translog.TranslogConfig;, +import org.elasticsearch.index.translog.TranslogService;, +import org.elasticsearch.indices.IndicesWarmer;, +import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;, +import org.elasticsearch.indices.cache.request.IndicesRequestCache;, +import org.elasticsearch.indices.recovery.RecoverySettings;, +import org.elasticsearch.indices.store.IndicesStore;, +import org.elasticsearch.indices.ttl.IndicesTTLService;, +import org.elasticsearch.search.SearchService;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.TransportService;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, + * Configures classes and services that affect the entire cluster., +public class ClusterModule extends AbstractModule {, +, +    public static final String EVEN_SHARD_COUNT_ALLOCATOR = "even_shard";, +    public static final String BALANCED_ALLOCATOR = "balanced"; // default, +    public static final String SHARDS_ALLOCATOR_TYPE_KEY = "cluster.routing.allocation.type";, +    public static final List<Class<? extends AllocationDecider>> DEFAULT_ALLOCATION_DECIDERS =, +        Collections.unmodifiableList(Arrays.asList(, +            SameShardAllocationDecider.class,, +            FilterAllocationDecider.class,, +            ReplicaAfterPrimaryActiveAllocationDecider.class,, +            ThrottlingAllocationDecider.class,, +            RebalanceOnlyWhenActiveAllocationDecider.class,, +            ClusterRebalanceAllocationDecider.class,, +            ConcurrentRebalanceAllocationDecider.class,, +            EnableAllocationDecider.class, // new enable allocation logic should proceed old disable allocation logic, +            DisableAllocationDecider.class,, +            AwarenessAllocationDecider.class,, +            ShardsLimitAllocationDecider.class,, +            NodeVersionAllocationDecider.class,, +            DiskThresholdDecider.class,, +            SnapshotInProgressAllocationDecider.class));, +    private final DynamicSettings.Builder clusterDynamicSettings = new DynamicSettings.Builder();, +    private final DynamicSettings.Builder indexDynamicSettings = new DynamicSettings.Builder();, +    private final ExtensionPoint.TypeExtensionPoint<ShardsAllocator> shardsAllocators = new ExtensionPoint.TypeExtensionPoint<>("shards_allocator", ShardsAllocator.class);, +    private final ExtensionPoint.SetExtensionPoint<AllocationDecider> allocationDeciders = new ExtensionPoint.SetExtensionPoint<>("allocation_decider", AllocationDecider.class, AllocationDeciders.class);, +    private final ExtensionPoint.SetExtensionPoint<IndexTemplateFilter> indexTemplateFilters = new ExtensionPoint.SetExtensionPoint<>("index_template_filter", IndexTemplateFilter.class);]