[+++ b/docs/reference/search/request/highlighting.asciidoc, +[NOTE], +[WARNING], +The postings highlighter does support highlighting of multi term queries, like, +prefix queries, wildcard queries and so on. On the other hand, this requires, +the queries to be rewritten using a proper, +<<query-dsl-multi-term-rewrite,rewrite method>> that supports multi term, +extraction, which is a potentially expensive operation., +, +++ b/docs/reference/search/request/highlighting.asciidoc, +[NOTE], +[WARNING], +The postings highlighter does support highlighting of multi term queries, like, +prefix queries, wildcard queries and so on. On the other hand, this requires, +the queries to be rewritten using a proper, +<<query-dsl-multi-term-rewrite,rewrite method>> that supports multi term, +extraction, which is a potentially expensive operation., +, +++ b/src/main/java/org/elasticsearch/search/highlight/PostingsHighlighter.java, +import com.google.common.collect.Lists;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.lucene.search.XFilteredQuery;, +        //we walk the query tree and when we encounter multi term queries we need to make sure the rewrite method, +        //supports multi term extraction. If not we temporarily override it (and restore it after the rewrite)., +        List<Tuple<MultiTermQuery, MultiTermQuery.RewriteMethod>> modifiedMultiTermQueries = Lists.newArrayList();, +        overrideMultiTermRewriteMethod(original, modifiedMultiTermQueries);, +        //rewrite is expensive: if the query was already rewritten we try not to rewrite it again, +        if (highlighterContext.query.queryRewritten() && modifiedMultiTermQueries.size() == 0) {, +            //return the already rewritten query, +        for (Tuple<MultiTermQuery, MultiTermQuery.RewriteMethod> modifiedMultiTermQuery : modifiedMultiTermQueries) {, +            modifiedMultiTermQuery.v1().setRewriteMethod(modifiedMultiTermQuery.v2());, +    private static void overrideMultiTermRewriteMethod(Query query, List<Tuple<MultiTermQuery, MultiTermQuery.RewriteMethod>> modifiedMultiTermQueries) {, +, +        if (query instanceof  MultiTermQuery) {, +            MultiTermQuery originalMultiTermQuery = (MultiTermQuery) query;, +            if (!allowsForTermExtraction(originalMultiTermQuery.getRewriteMethod())) {, +                MultiTermQuery.RewriteMethod originalRewriteMethod = originalMultiTermQuery.getRewriteMethod();, +                originalMultiTermQuery.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(50));, +                //we need to rewrite anyway if it is a multi term query which was rewritten with the wrong rewrite method, +                modifiedMultiTermQueries.add(Tuple.tuple(originalMultiTermQuery, originalRewriteMethod));, +            }, +        }, +, +        if (query instanceof BooleanQuery) {, +            BooleanQuery booleanQuery = (BooleanQuery) query;, +            for (BooleanClause booleanClause : booleanQuery) {, +                overrideMultiTermRewriteMethod(booleanClause.getQuery(), modifiedMultiTermQueries);, +            }, +        }, +, +        if (query instanceof XFilteredQuery) {, +            overrideMultiTermRewriteMethod(((XFilteredQuery) query).getQuery(), modifiedMultiTermQueries);, +        }, +, +        if (query instanceof FilteredQuery) {, +            overrideMultiTermRewriteMethod(((FilteredQuery) query).getQuery(), modifiedMultiTermQueries);, +        }, +, +        if (query instanceof ConstantScoreQuery) {, +            overrideMultiTermRewriteMethod(((ConstantScoreQuery) query).getQuery(), modifiedMultiTermQueries);, +        }, +    }, +, +++ b/docs/reference/search/request/highlighting.asciidoc, +[NOTE], +[WARNING], +The postings highlighter does support highlighting of multi term queries, like, +prefix queries, wildcard queries and so on. On the other hand, this requires, +the queries to be rewritten using a proper, +<<query-dsl-multi-term-rewrite,rewrite method>> that supports multi term, +extraction, which is a potentially expensive operation., +, +++ b/src/main/java/org/elasticsearch/search/highlight/PostingsHighlighter.java, +import com.google.common.collect.Lists;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.lucene.search.XFilteredQuery;, +        //we walk the query tree and when we encounter multi term queries we need to make sure the rewrite method, +        //supports multi term extraction. If not we temporarily override it (and restore it after the rewrite)., +        List<Tuple<MultiTermQuery, MultiTermQuery.RewriteMethod>> modifiedMultiTermQueries = Lists.newArrayList();, +        overrideMultiTermRewriteMethod(original, modifiedMultiTermQueries);, +        //rewrite is expensive: if the query was already rewritten we try not to rewrite it again, +        if (highlighterContext.query.queryRewritten() && modifiedMultiTermQueries.size() == 0) {, +            //return the already rewritten query, +        for (Tuple<MultiTermQuery, MultiTermQuery.RewriteMethod> modifiedMultiTermQuery : modifiedMultiTermQueries) {, +            modifiedMultiTermQuery.v1().setRewriteMethod(modifiedMultiTermQuery.v2());, +    private static void overrideMultiTermRewriteMethod(Query query, List<Tuple<MultiTermQuery, MultiTermQuery.RewriteMethod>> modifiedMultiTermQueries) {, +, +        if (query instanceof  MultiTermQuery) {, +            MultiTermQuery originalMultiTermQuery = (MultiTermQuery) query;, +            if (!allowsForTermExtraction(originalMultiTermQuery.getRewriteMethod())) {, +                MultiTermQuery.RewriteMethod originalRewriteMethod = originalMultiTermQuery.getRewriteMethod();, +                originalMultiTermQuery.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(50));, +                //we need to rewrite anyway if it is a multi term query which was rewritten with the wrong rewrite method, +                modifiedMultiTermQueries.add(Tuple.tuple(originalMultiTermQuery, originalRewriteMethod));, +            }, +        }, +, +        if (query instanceof BooleanQuery) {, +            BooleanQuery booleanQuery = (BooleanQuery) query;, +            for (BooleanClause booleanClause : booleanQuery) {]