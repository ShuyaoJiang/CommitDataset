[+++ b/server/src/main/java/org/elasticsearch/action/StepListener.java, +import java.util.concurrent.TimeUnit;, +        return FutureUtils.get(delegate, 0L, TimeUnit.NANOSECONDS); // this future is done already - use a non-blocking method., +++ b/server/src/main/java/org/elasticsearch/action/StepListener.java, +import java.util.concurrent.TimeUnit;, +        return FutureUtils.get(delegate, 0L, TimeUnit.NANOSECONDS); // this future is done already - use a non-blocking method., +++ b/server/src/main/java/org/elasticsearch/indices/flush/SyncedFlushService.java, +import org.elasticsearch.action.StepListener;, +            // 1. send pre-sync flushes to all replicas, +            final StepListener<Map<String, PreSyncedFlushResponse>> presyncStep = new StepListener<>();, +            sendPreSyncRequests(activeShards, state, shardId, presyncStep);, +, +            // 2. fetch in flight operations, +            final StepListener<InFlightOpsResponse> inflightOpsStep = new StepListener<>();, +            presyncStep.whenComplete(presyncResponses -> {, +                    actionListener.onResponse(new ShardsSyncedFlushResult(shardId, totalShards, "all shards failed to commit on pre-sync"));, +                } else {, +                    getInflightOpsCount(shardId, state, shardRoutingTable, inflightOpsStep);, +            }, actionListener::onFailure);, +, +            // 3. now send the sync request to all the shards, +            inflightOpsStep.whenComplete(inFlightOpsResponse -> {, +                final Map<String, PreSyncedFlushResponse> presyncResponses = presyncStep.result();, +                final int inflight = inFlightOpsResponse.opCount();, +                    actionListener.onResponse(, +                        new ShardsSyncedFlushResult(shardId, totalShards, "[" + inflight + "] ongoing operations on primary"));, +                            "Not all shards have the same existing sync id [" + sharedSyncId + "], responses [" + presyncResponses + "]";, +                        reportSuccessWithExistingSyncId(shardId, sharedSyncId, activeShards, totalShards, presyncResponses, actionListener);, +            }, actionListener::onFailure);]