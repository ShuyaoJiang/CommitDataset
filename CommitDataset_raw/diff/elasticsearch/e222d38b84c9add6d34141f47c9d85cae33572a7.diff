[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/jvm/JvmInfo.java, +        JvmInfo info = new JvmInfo();, +        info.pid = pid;, +        info.startTime = runtimeMXBean.getStartTime();, +        info.vmName = runtimeMXBean.getVmName();, +        info.vmVendor = runtimeMXBean.getVmVendor();, +        info.vmVersion = runtimeMXBean.getVmVersion();, +        info.mem = new Mem();, +        info.mem.heapInit = memoryMXBean.getHeapMemoryUsage().getInit();, +        info.mem.heapMax = memoryMXBean.getHeapMemoryUsage().getMax();, +        info.mem.nonHeapInit = memoryMXBean.getNonHeapMemoryUsage().getInit();, +        info.mem.nonHeapMax = memoryMXBean.getNonHeapMemoryUsage().getMax();, +        info.inputArguments = runtimeMXBean.getInputArguments().toArray(new String[runtimeMXBean.getInputArguments().size()]);, +        info.bootClassPath = runtimeMXBean.getBootClassPath();, +        info.classPath = runtimeMXBean.getClassPath();, +        info.systemProperties = runtimeMXBean.getSystemProperties();, +, +        INSTANCE = info;, +    long pid = -1;, +    String vmName = "";, +    String vmVersion = "";, +    String vmVendor = "";, +    long startTime = -1;, +    Mem mem;, +    String[] inputArguments;, +    String bootClassPath;, +    String classPath;, +    Map<String, String> systemProperties;, +    public Mem mem() {, +        return mem;, +    public Mem getMem() {, +        return mem();, +, +    public static class Mem implements Streamable, Serializable {, +, +        long heapInit = -1;, +        long heapMax = -1;, +        long nonHeapInit = -1;, +        long nonHeapMax = -1;, +, +        Mem() {, +        }, +, +        public static Mem readMem(StreamInput in) throws IOException {, +            Mem mem = new Mem();, +            mem.readFrom(in);, +            return mem;, +        }, +, +        @Override public void readFrom(StreamInput in) throws IOException {, +            heapInit = in.readVLong();, +            heapMax = in.readVLong();, +            nonHeapInit = in.readVLong();, +            nonHeapMax = in.readVLong();, +        }, +, +        @Override public void writeTo(StreamOutput out) throws IOException {, +            out.writeVLong(heapInit);, +            out.writeVLong(heapMax);, +            out.writeVLong(nonHeapInit);, +            out.writeVLong(nonHeapMax);, +        }, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/monitor/jvm/JvmInfo.java, +        JvmInfo info = new JvmInfo();, +        info.pid = pid;, +        info.startTime = runtimeMXBean.getStartTime();, +        info.vmName = runtimeMXBean.getVmName();, +        info.vmVendor = runtimeMXBean.getVmVendor();, +        info.vmVersion = runtimeMXBean.getVmVersion();, +        info.mem = new Mem();, +        info.mem.heapInit = memoryMXBean.getHeapMemoryUsage().getInit();, +        info.mem.heapMax = memoryMXBean.getHeapMemoryUsage().getMax();, +        info.mem.nonHeapInit = memoryMXBean.getNonHeapMemoryUsage().getInit();, +        info.mem.nonHeapMax = memoryMXBean.getNonHeapMemoryUsage().getMax();, +        info.inputArguments = runtimeMXBean.getInputArguments().toArray(new String[runtimeMXBean.getInputArguments().size()]);, +        info.bootClassPath = runtimeMXBean.getBootClassPath();, +        info.classPath = runtimeMXBean.getClassPath();, +        info.systemProperties = runtimeMXBean.getSystemProperties();, +, +        INSTANCE = info;, +    long pid = -1;, +    String vmName = "";, +    String vmVersion = "";, +    String vmVendor = "";, +    long startTime = -1;, +    Mem mem;, +    String[] inputArguments;, +    String bootClassPath;, +    String classPath;, +    Map<String, String> systemProperties;, +    public Mem mem() {, +        return mem;, +    public Mem getMem() {, +        return mem();, +, +    public static class Mem implements Streamable, Serializable {, +, +        long heapInit = -1;, +        long heapMax = -1;]