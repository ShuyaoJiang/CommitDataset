[+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +import java.util.LinkedHashSet;, +        Set<HttpHost> httpHosts = new LinkedHashSet<>();, +     * Returns the configured hosts, +     */, +    public List<HttpHost> getHosts() {, +        return new ArrayList<>(hostTuple.hosts);, +    }, +, +    /**, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +import java.util.LinkedHashSet;, +        Set<HttpHost> httpHosts = new LinkedHashSet<>();, +     * Returns the configured hosts, +     */, +    public List<HttpHost> getHosts() {, +        return new ArrayList<>(hostTuple.hosts);, +    }, +, +    /**, +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientTests.java, +import java.util.Arrays;, +    public void testSetHostsPreservesOrdering() throws Exception {, +        try (RestClient restClient = createRestClient()) {, +            HttpHost[] hosts = randomHosts();, +            restClient.setHosts(hosts);, +            assertEquals(Arrays.asList(hosts), restClient.getHosts());, +        }, +    }, +, +    private static HttpHost[] randomHosts() {, +        int numHosts = randomIntBetween(1, 10);, +        HttpHost[] hosts = new HttpHost[numHosts];, +        for (int i = 0; i < hosts.length; i++) {, +            hosts[i] = new HttpHost("host-" + i, 9200);, +        }, +        return hosts;, +    }, +, +    public void testSetHostsDuplicatedHosts() throws Exception {, +        try (RestClient restClient = createRestClient()) {, +            int numHosts = randomIntBetween(1, 10);, +            HttpHost[] hosts = new HttpHost[numHosts];, +            HttpHost host = new HttpHost("host", 9200);, +            for (int i = 0; i < hosts.length; i++) {, +                hosts[i] = host;, +            }, +            restClient.setHosts(hosts);, +            assertEquals(1, restClient.getHosts().size());, +            assertEquals(host, restClient.getHosts().get(0));, +        }, +    }, +, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +import java.util.LinkedHashSet;, +        Set<HttpHost> httpHosts = new LinkedHashSet<>();, +     * Returns the configured hosts, +     */, +    public List<HttpHost> getHosts() {, +        return new ArrayList<>(hostTuple.hosts);, +    }, +, +    /**, +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientTests.java, +import java.util.Arrays;, +    public void testSetHostsPreservesOrdering() throws Exception {, +        try (RestClient restClient = createRestClient()) {, +            HttpHost[] hosts = randomHosts();, +            restClient.setHosts(hosts);, +            assertEquals(Arrays.asList(hosts), restClient.getHosts());, +        }, +    }, +, +    private static HttpHost[] randomHosts() {, +        int numHosts = randomIntBetween(1, 10);, +        HttpHost[] hosts = new HttpHost[numHosts];, +        for (int i = 0; i < hosts.length; i++) {, +            hosts[i] = new HttpHost("host-" + i, 9200);, +        }, +        return hosts;, +    }, +, +    public void testSetHostsDuplicatedHosts() throws Exception {, +        try (RestClient restClient = createRestClient()) {, +            int numHosts = randomIntBetween(1, 10);, +            HttpHost[] hosts = new HttpHost[numHosts];, +            HttpHost host = new HttpHost("host", 9200);, +            for (int i = 0; i < hosts.length; i++) {, +                hosts[i] = host;, +            }, +            restClient.setHosts(hosts);, +            assertEquals(1, restClient.getHosts().size());, +            assertEquals(host, restClient.getHosts().get(0));, +        }, +    }, +, +++ b/client/sniffer/src/main/java/org/elasticsearch/client/sniff/SniffOnFailureListener.java, +        sniffer.sniffOnFailure();, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +import java.util.LinkedHashSet;]