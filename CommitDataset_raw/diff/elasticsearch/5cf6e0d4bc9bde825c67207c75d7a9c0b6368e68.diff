[+++ b/buildSrc/build.gradle, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/JarHellTask.groovy, +import org.gradle.api.tasks.Classpath, +    File successMarker, +, +    @Classpath, +    FileCollection classpath, +        successMarker = new File(project.buildDir, 'markers/jarHell-' + getName()), +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/JarHellTask.groovy, +import org.gradle.api.tasks.Classpath, +    File successMarker, +, +    @Classpath, +    FileCollection classpath, +        successMarker = new File(project.buildDir, 'markers/jarHell-' + getName()), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +        project.configurations.create("forbiddenApisCliJar"), +            configureJarHell(project),, +    private static Task configureJarHell(Project project) {, +        Task task = project.tasks.create('jarHell', JarHellTask.class), +        task.classpath = project.sourceSets.test.runtimeClasspath, +        return task, +    }, +, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/JarHellTask.groovy, +import org.gradle.api.tasks.Classpath, +    File successMarker, +, +    @Classpath, +    FileCollection classpath, +        successMarker = new File(project.buildDir, 'markers/jarHell-' + getName()), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +        project.configurations.create("forbiddenApisCliJar"), +            configureJarHell(project),, +    private static Task configureJarHell(Project project) {, +        Task task = project.tasks.create('jarHell', JarHellTask.class), +        task.classpath = project.sourceSets.test.runtimeClasspath, +        return task, +    }, +, +++ b/buildSrc/src/test/java/org/elasticsearch/gradle/BuildExamplePluginsIT.java, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/JarHellTask.groovy, +import org.gradle.api.tasks.Classpath, +    File successMarker, +, +    @Classpath, +    FileCollection classpath, +        successMarker = new File(project.buildDir, 'markers/jarHell-' + getName()), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +        project.configurations.create("forbiddenApisCliJar"), +            configureJarHell(project),, +    private static Task configureJarHell(Project project) {, +        Task task = project.tasks.create('jarHell', JarHellTask.class), +        task.classpath = project.sourceSets.test.runtimeClasspath, +        return task, +    }, +, +++ b/buildSrc/src/test/java/org/elasticsearch/gradle/BuildExamplePluginsIT.java, +++ b/buildSrc/src/test/java/org/elasticsearch/gradle/ExportElasticsearchBuildResourcesTaskIT.java, +        assertTaskSuccessful(result, ":buildResources");, +        assertTaskSuccessful(result, ":buildResources");, +        assertTaskSuccessful(result, ":sampleCopyAll");, +        assertTaskSuccessful(result, ":sample");, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/JarHellTask.groovy, +import org.gradle.api.tasks.Classpath, +    File successMarker, +, +    @Classpath, +    FileCollection classpath, +        successMarker = new File(project.buildDir, 'markers/jarHell-' + getName()), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +        project.configurations.create("forbiddenApisCliJar"), +            configureJarHell(project),, +    private static Task configureJarHell(Project project) {, +        Task task = project.tasks.create('jarHell', JarHellTask.class), +        task.classpath = project.sourceSets.test.runtimeClasspath, +        return task, +    }, +, +++ b/buildSrc/src/test/java/org/elasticsearch/gradle/BuildExamplePluginsIT.java, +++ b/buildSrc/src/test/java/org/elasticsearch/gradle/ExportElasticsearchBuildResourcesTaskIT.java, +        assertTaskSuccessful(result, ":buildResources");, +        assertTaskSuccessful(result, ":buildResources");, +        assertTaskSuccessful(result, ":sampleCopyAll");, +        assertTaskSuccessful(result, ":sample");, +++ b/buildSrc/src/test/java/org/elasticsearch/gradle/precommit/JarHellTaskIT.java, +package org.elasticsearch.gradle.precommit;, +, +import org.elasticsearch.gradle.test.GradleIntegrationTestCase;, +import org.gradle.testkit.runner.BuildResult;, +import org.gradle.testkit.runner.GradleRunner;, +, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with]