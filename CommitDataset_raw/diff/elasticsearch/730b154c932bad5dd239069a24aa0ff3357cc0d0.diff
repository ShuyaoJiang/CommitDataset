[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/arithmetic/Arithmetics.java, +        if (l instanceof Long || r instanceof Long) {, +            return Long.valueOf(l.longValue() % r.longValue());, +        }, +        return l.intValue() % r.intValue();, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/arithmetic/Arithmetics.java, +        if (l instanceof Long || r instanceof Long) {, +            return Long.valueOf(l.longValue() % r.longValue());, +        }, +        return l.intValue() % r.intValue();, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/predicate/operator/arithmetic/BinaryArithmeticTests.java, +import static org.elasticsearch.xpack.sql.expression.predicate.operator.arithmetic.Arithmetics.mod;, +    public void testAddNumbers() {, +    public void testMod() {, +        assertEquals(2, mod(10, 8));, +        assertEquals(2, mod(10, -8));, +        assertEquals(-2, mod(-10, 8));, +        assertEquals(-2, mod(-10, -8));, +, +        assertEquals(2L, mod(10L, 8));, +        assertEquals(2L, mod(10, -8L));, +        assertEquals(-2L, mod(-10L, 8L));, +        assertEquals(-2L, mod(-10L, -8L));, +, +        assertEquals(2.3000002f, mod(10.3f, 8L));, +        assertEquals(1.5f, mod(10, -8.5f));, +        assertEquals(-1.8000002f, mod(-10.3f, 8.5f));, +        assertEquals(-1.8000002f, mod(-10.3f, -8.5f));, +, +        assertEquals(2.3000000000000007d, mod(10.3d, 8L));, +        assertEquals(1.5d, mod(10, -8.5d));, +        assertEquals(-1.8000001907348633d, mod(-10.3f, 8.5d));, +        assertEquals(-1.8000000000000007, mod(-10.3d, -8.5d));, +    }, +, +    public void testAddYearMonthIntervals() {, +    public void testAddYearMonthMixedIntervals() {, +    public void testAddDayTimeIntervals() {, +    public void testAddYearMonthIntervalToDate() {, +    public void testAddDayTimeIntervalToDate() {, +    public void testAddDayTimeIntervalToDateReverse() {, +    public void testAddNumberToIntervalIllegal() {, +    public void testSubYearMonthIntervals() {, +    public void testSubDayTimeIntervals() {, +    public void testSubYearMonthIntervalToDate() {, +    public void testSubYearMonthIntervalToDateIllegal() {, +    public void testSubNumberFromIntervalIllegal() {, +    public void testSubDayTimeIntervalToDate() {]