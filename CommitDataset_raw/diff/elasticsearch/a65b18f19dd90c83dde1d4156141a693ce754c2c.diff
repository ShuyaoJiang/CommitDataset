[+++ b/server/src/main/java/org/elasticsearch/action/support/TransportAction.java, +++ b/server/src/main/java/org/elasticsearch/action/support/TransportAction.java, +++ b/server/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayMetaState.java, +import org.elasticsearch.action.support.PlainActionFuture;, +        PlainActionFuture<NodesGatewayMetaState> future = PlainActionFuture.newFuture();, +        execute(new Request(nodesIds).timeout(timeout), future);, +        return future;, +++ b/server/src/main/java/org/elasticsearch/action/support/TransportAction.java, +++ b/server/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayMetaState.java, +import org.elasticsearch.action.support.PlainActionFuture;, +        PlainActionFuture<NodesGatewayMetaState> future = PlainActionFuture.newFuture();, +        execute(new Request(nodesIds).timeout(timeout), future);, +        return future;, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/CancellableTasksTests.java, +import org.elasticsearch.action.support.ActionTestUtils;, +        CancelTasksResponse response = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(0, testNodes.length - 1)].transportCancelTasksAction, request);, +        ListTasksResponse listTasksResponse = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(0, testNodes.length - 1)].transportListTasksAction,, +            new ListTasksRequest().setTaskId(new TaskId(testNodes[0].getNodeId(), mainTask.getId())));, +        CancelTasksResponse response = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(1, testNodes.length - 1)].transportCancelTasksAction, request);, +            ListTasksResponse listTasksResponse = ActionTestUtils.executeBlocking(, +                testNodes[randomIntBetween(0, testNodes.length - 1)].transportListTasksAction,, +                new ListTasksRequest().setTaskId(new TaskId(testNodes[0].getNodeId(), mainTask.getId())));, +        ListTasksResponse listTasksResponse = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(0, testNodes.length - 1)].transportListTasksAction,, +            new ListTasksRequest().setParentTaskId(new TaskId(mainNode, mainTask.getId())));, +            CancelTasksResponse response = ActionTestUtils.executeBlocking(testNodes[0].transportCancelTasksAction, request);, +            ListTasksResponse listTasksResponse1 = ActionTestUtils.executeBlocking(, +                testNodes[randomIntBetween(1, testNodes.length - 1)].transportListTasksAction,, +                new ListTasksRequest().setTaskId(new TaskId(mainNode, mainTask.getId())));, +++ b/server/src/main/java/org/elasticsearch/action/support/TransportAction.java, +++ b/server/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayMetaState.java, +import org.elasticsearch.action.support.PlainActionFuture;, +        PlainActionFuture<NodesGatewayMetaState> future = PlainActionFuture.newFuture();, +        execute(new Request(nodesIds).timeout(timeout), future);, +        return future;, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/CancellableTasksTests.java, +import org.elasticsearch.action.support.ActionTestUtils;, +        CancelTasksResponse response = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(0, testNodes.length - 1)].transportCancelTasksAction, request);, +        ListTasksResponse listTasksResponse = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(0, testNodes.length - 1)].transportListTasksAction,, +            new ListTasksRequest().setTaskId(new TaskId(testNodes[0].getNodeId(), mainTask.getId())));, +        CancelTasksResponse response = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(1, testNodes.length - 1)].transportCancelTasksAction, request);, +            ListTasksResponse listTasksResponse = ActionTestUtils.executeBlocking(, +                testNodes[randomIntBetween(0, testNodes.length - 1)].transportListTasksAction,, +                new ListTasksRequest().setTaskId(new TaskId(testNodes[0].getNodeId(), mainTask.getId())));, +        ListTasksResponse listTasksResponse = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(0, testNodes.length - 1)].transportListTasksAction,, +            new ListTasksRequest().setParentTaskId(new TaskId(mainNode, mainTask.getId())));, +            CancelTasksResponse response = ActionTestUtils.executeBlocking(testNodes[0].transportCancelTasksAction, request);, +            ListTasksResponse listTasksResponse1 = ActionTestUtils.executeBlocking(, +                testNodes[randomIntBetween(1, testNodes.length - 1)].transportListTasksAction,, +                new ListTasksRequest().setTaskId(new TaskId(mainNode, mainTask.getId())));, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TransportTasksActionTests.java, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.support.ActionTestUtils;, +        ListTasksResponse response = ActionTestUtils.executeBlocking(testNode.transportListTasksAction, listTasksRequest);, +        response = ActionTestUtils.executeBlocking(testNode.transportListTasksAction, listTasksRequest);, +        response = ActionTestUtils.executeBlocking(testNode.transportListTasksAction, listTasksRequest);, +        response = ActionTestUtils.executeBlocking(testNode.transportListTasksAction, listTasksRequest);, +        ListTasksResponse response = ActionTestUtils.executeBlocking(testNode.transportListTasksAction, listTasksRequest);, +        response = ActionTestUtils.executeBlocking(testNode.transportListTasksAction, listTasksRequest);, +        ListTasksResponse response = ActionTestUtils.executeBlocking(testNode.transportListTasksAction, listTasksRequest);, +        ListTasksResponse response = ActionTestUtils.executeBlocking(testNode.transportListTasksAction, listTasksRequest);, +        response = ActionTestUtils.executeBlocking(testNode.transportListTasksAction, listTasksRequest);, +        CancelTasksResponse response = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(0, testNodes.length - 1)].transportCancelTasksAction, request);, +        response = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(0, testNodes.length - 1)].transportCancelTasksAction, request);, +        ListTasksResponse listResponse = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(0, testNodes.length - 1)].transportListTasksAction, listTasksRequest);, +        NodesResponse responses = ActionTestUtils.executeBlocking(actions[0], request);, +        TestTasksResponse response = ActionTestUtils.executeBlocking(tasksActions[0], testTasksRequest);, +        TestTasksResponse response = ActionTestUtils.executeBlocking(tasksActions[randomIntBetween(0, nodesCount - 1)], testTasksRequest);, +        ListTasksResponse response = ActionTestUtils.executeBlocking(testNodes[0].transportListTasksAction, listTasksRequest);, +++ b/server/src/main/java/org/elasticsearch/action/support/TransportAction.java, +++ b/server/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayMetaState.java, +import org.elasticsearch.action.support.PlainActionFuture;, +        PlainActionFuture<NodesGatewayMetaState> future = PlainActionFuture.newFuture();, +        execute(new Request(nodesIds).timeout(timeout), future);, +        return future;, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/CancellableTasksTests.java, +import org.elasticsearch.action.support.ActionTestUtils;, +        CancelTasksResponse response = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(0, testNodes.length - 1)].transportCancelTasksAction, request);, +        ListTasksResponse listTasksResponse = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(0, testNodes.length - 1)].transportListTasksAction,, +            new ListTasksRequest().setTaskId(new TaskId(testNodes[0].getNodeId(), mainTask.getId())));, +        CancelTasksResponse response = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(1, testNodes.length - 1)].transportCancelTasksAction, request);, +            ListTasksResponse listTasksResponse = ActionTestUtils.executeBlocking(, +                testNodes[randomIntBetween(0, testNodes.length - 1)].transportListTasksAction,, +                new ListTasksRequest().setTaskId(new TaskId(testNodes[0].getNodeId(), mainTask.getId())));, +        ListTasksResponse listTasksResponse = ActionTestUtils.executeBlocking(, +            testNodes[randomIntBetween(0, testNodes.length - 1)].transportListTasksAction,, +            new ListTasksRequest().setParentTaskId(new TaskId(mainNode, mainTask.getId())));]