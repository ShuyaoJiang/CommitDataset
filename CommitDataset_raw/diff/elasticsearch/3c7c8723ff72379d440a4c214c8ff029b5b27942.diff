[+++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +     * The system load averages as an array., +     *, +     * On Windows, this method returns {@code null}., +     *, +     * On Linux, this method should return the 1, 5, and 15-minute load, +     * averages. If obtaining these values from {@code /proc/loadavg}, +     * fails, the method will fallback to obtaining the 1-minute load, +     * average., +     *, +     * On macOS, this method should return the 1-minute load average., +     *, +     * @return the available system load averages or {@code null}, +    final double[] getSystemLoadAverage() {, +        if (Constants.WINDOWS) {, +            return null;, +        } else if (Constants.LINUX) {, +            final String procLoadAvg = readProcLoadavg();, +            if (procLoadAvg != null) {, +                assert procLoadAvg.matches("(\\d+\\.\\d+\\s+){3}\\d+/\\d+\\s+\\d+");, +                final String[] fields = procLoadAvg.split("\\s+");, +                try {, +                    return new double[]{Double.parseDouble(fields[0]), Double.parseDouble(fields[1]), Double.parseDouble(fields[2])};, +                } catch (final NumberFormatException e) {, +                    logger.debug((Supplier<?>) () -> new ParameterizedMessage("error parsing /proc/loadavg [{}]", procLoadAvg), e);, +                }, +, +            final double oneMinuteLoadAverage = (double) getSystemLoadAverage.invoke(osMxBean);, +        } catch (final Exception e) {, +            logger.debug("error obtaining system load average", e);, +    /**, +     * The line from {@code /proc/loadavg}. The first three fields are, +     * the load averages averaged over 1, 5, and 15 minutes. The fourth, +     * field is two numbers separated by a slash, the first is the, +     * number of currently runnable scheduling entities, the second is, +     * the number of scheduling entities on the system. The fifth field, +     * is the PID of the most recently created process., +     *, +     * @return the line from {@code /proc/loadavg} or {@code null}, +     */, +    @SuppressForbidden(reason = "access /proc/loadavg"), +    String readProcLoadavg() {, +            final List<String> lines = Files.readAllLines(PathUtils.get("/proc/loadavg"));, +            assert lines != null && lines.size() == 1;, +            return lines.get(0);, +        } catch (final IOException e) {, +            logger.debug("error reading /proc/loadavg", e);, +    }, +    OsProbe() {, +    private final Logger logger = ESLoggerFactory.getLogger(getClass());, +, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +     * The system load averages as an array., +     *, +     * On Windows, this method returns {@code null}., +     *, +     * On Linux, this method should return the 1, 5, and 15-minute load, +     * averages. If obtaining these values from {@code /proc/loadavg}, +     * fails, the method will fallback to obtaining the 1-minute load, +     * average., +     *, +     * On macOS, this method should return the 1-minute load average., +     *, +     * @return the available system load averages or {@code null}, +    final double[] getSystemLoadAverage() {, +        if (Constants.WINDOWS) {, +            return null;, +        } else if (Constants.LINUX) {, +            final String procLoadAvg = readProcLoadavg();, +            if (procLoadAvg != null) {, +                assert procLoadAvg.matches("(\\d+\\.\\d+\\s+){3}\\d+/\\d+\\s+\\d+");, +                final String[] fields = procLoadAvg.split("\\s+");, +                try {, +                    return new double[]{Double.parseDouble(fields[0]), Double.parseDouble(fields[1]), Double.parseDouble(fields[2])};, +                } catch (final NumberFormatException e) {, +                    logger.debug((Supplier<?>) () -> new ParameterizedMessage("error parsing /proc/loadavg [{}]", procLoadAvg), e);, +                }, +, +            final double oneMinuteLoadAverage = (double) getSystemLoadAverage.invoke(osMxBean);, +        } catch (final Exception e) {, +            logger.debug("error obtaining system load average", e);, +    /**, +     * The line from {@code /proc/loadavg}. The first three fields are, +     * the load averages averaged over 1, 5, and 15 minutes. The fourth, +     * field is two numbers separated by a slash, the first is the, +     * number of currently runnable scheduling entities, the second is, +     * the number of scheduling entities on the system. The fifth field, +     * is the PID of the most recently created process., +     *, +     * @return the line from {@code /proc/loadavg} or {@code null}, +     */, +    @SuppressForbidden(reason = "access /proc/loadavg")]