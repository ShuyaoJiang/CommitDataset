[+++ b/core/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java, +            throw new IllegalArgumentException("value cannot be null");, +        String fieldName = null;, +        XContentParser.Token token;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {, +                // skip, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[wildcard] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +                fieldName = currentFieldName;, +                fieldName = parser.currentName();, +            }, +++ b/core/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java, +            throw new IllegalArgumentException("value cannot be null");, +        String fieldName = null;, +        XContentParser.Token token;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {, +                // skip, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[wildcard] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +                fieldName = currentFieldName;, +                fieldName = parser.currentName();, +            }, +++ b/core/src/test/java/org/elasticsearch/index/query/WildcardQueryBuilderTests.java, +import org.elasticsearch.common.ParsingException;, +import java.util.HashMap;, +import java.util.Map;, +        WildcardQueryBuilder query = randomWildcardQuery();, +    protected Map<String, WildcardQueryBuilder> getAlternateVersions() {, +        Map<String, WildcardQueryBuilder> alternateVersions = new HashMap<>();, +        WildcardQueryBuilder wildcardQuery = randomWildcardQuery();, +        String contentString = "{\n" +, +                "    \"wildcard\" : {\n" +, +                "        \"" + wildcardQuery.fieldName() + "\" : \"" + wildcardQuery.value() + "\"\n" +, +                "    }\n" +, +                "}";, +        alternateVersions.put(contentString, wildcardQuery);, +        return alternateVersions;, +    }, +, +    private static WildcardQueryBuilder randomWildcardQuery() {, +        // mapped or unmapped field, +        String text = randomAsciiOfLengthBetween(1, 10);, +        if (randomBoolean()) {, +            return new WildcardQueryBuilder(STRING_FIELD_NAME, text);, +        } else {, +            return new WildcardQueryBuilder(randomAsciiOfLengthBetween(1, 10), text);, +        }, +    }, +, +    @Override, +            assertEquals("field name is null or empty", e.getMessage());, +            assertEquals("value cannot be null", e.getMessage());, +, +    public void testParseFailsWithMultipleFields() throws IOException {, +        String json =, +                "{\n" +, +                "    \"wildcard\": {\n" +, +                "      \"user1\": {\n" +, +                "        \"wildcard\": \"ki*y\"\n" +, +                "      },\n" +, +                "      \"user2\": {\n" +, +                "        \"wildcard\": \"ki*y\"\n" +, +                "      }\n" +, +                "    }\n" +, +                "}";, +, +        try {, +            parseQuery(json);, +            fail("parseQuery should have failed");, +        } catch(ParsingException e) {, +            assertEquals("[wildcard] query doesn't support multiple fields, found [user1] and [user2]", e.getMessage());, +        }, +    }]