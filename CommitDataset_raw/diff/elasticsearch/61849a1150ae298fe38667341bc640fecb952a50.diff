[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java, +import com.carrotsearch.hppc.LongArrayList;, +    private final boolean collectsFromSingleBucket;, +, +    private BufferingNestedLeafBucketCollector bufferingNestedLeafBucketCollector;, +                     List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData,, +                     boolean collectsFromSingleBucket) throws IOException {, +        this.collectsFromSingleBucket = collectsFromSingleBucket;, +        if (collectsFromSingleBucket) {, +        } else {, +            doPostCollection();, +            return bufferingNestedLeafBucketCollector = new BufferingNestedLeafBucketCollector(sub, parentDocs, childDocs);, +        }, +    }, +, +    @Override, +    protected void doPostCollection() throws IOException {, +        if (bufferingNestedLeafBucketCollector != null) {, +            bufferingNestedLeafBucketCollector.postCollect();, +        }, +    class BufferingNestedLeafBucketCollector extends LeafBucketCollectorBase {, +, +        final BitSet parentDocs;, +        final LeafBucketCollector sub;, +        final DocIdSetIterator childDocs;, +        final LongArrayList bucketBuffer = new LongArrayList();, +, +        int currentParentDoc = -1;, +, +        BufferingNestedLeafBucketCollector(LeafBucketCollector sub, BitSet parentDocs, DocIdSetIterator childDocs) {, +            super(sub, null);, +            this.sub = sub;, +            this.parentDocs = parentDocs;, +            this.childDocs = childDocs;, +        }, +, +        @Override, +        public void collect(int parentDoc, long bucket) throws IOException {, +            // if parentDoc is 0 then this means that this parent doesn't have child docs (b/c these appear always before the parent, +            // doc), so we can skip:, +            if (parentDoc == 0 || parentDocs == null || childDocs == null) {, +                return;, +            }, +, +            if (currentParentDoc != parentDoc) {, +                processChildBuckets(currentParentDoc, bucketBuffer);, +                currentParentDoc = parentDoc;, +            }, +            bucketBuffer.add(bucket);, +        }, +, +        void processChildBuckets(int parentDoc, LongArrayList buckets) throws IOException {, +            if (bucketBuffer.isEmpty()) {, +                return;, +            }, +, +, +            final int prevParentDoc = parentDocs.prevSetBit(parentDoc - 1);, +            int childDocId = childDocs.docID();, +            if (childDocId <= prevParentDoc) {, +                childDocId = childDocs.advance(prevParentDoc + 1);, +            }, +, +            for (; childDocId < parentDoc; childDocId = childDocs.nextDoc()) {, +                final long[] buffer = buckets.buffer;, +                final int size = buckets.size();, +                for (int i = 0; i < size; i++) {, +                    collectBucket(sub, childDocId, buffer[i]);, +                }, +            }, +            bucketBuffer.clear();, +        }, +, +        void postCollect() throws IOException {, +            processChildBuckets(currentParentDoc, bucketBuffer);, +        }, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java, +import com.carrotsearch.hppc.LongArrayList;, +    private final boolean collectsFromSingleBucket;, +, +    private BufferingNestedLeafBucketCollector bufferingNestedLeafBucketCollector;, +                     List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData,, +                     boolean collectsFromSingleBucket) throws IOException {, +        this.collectsFromSingleBucket = collectsFromSingleBucket;, +        if (collectsFromSingleBucket) {, +        } else {, +            doPostCollection();, +            return bufferingNestedLeafBucketCollector = new BufferingNestedLeafBucketCollector(sub, parentDocs, childDocs);, +        }, +    }, +, +    @Override, +    protected void doPostCollection() throws IOException {, +        if (bufferingNestedLeafBucketCollector != null) {, +            bufferingNestedLeafBucketCollector.postCollect();, +        }, +    class BufferingNestedLeafBucketCollector extends LeafBucketCollectorBase {]