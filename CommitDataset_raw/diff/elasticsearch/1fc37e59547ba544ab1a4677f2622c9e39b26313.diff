[+++ b/src/main/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentResponse.java, +                        builder.startObject(segment.getName());, +                        builder.field(Fields.GENERATION, segment.getGeneration());, +                        builder.field(Fields.NUM_DOCS, segment.getNumDocs());, +                        builder.field(Fields.DELETED_DOCS, segment.getDeletedDocs());, +                        builder.field(Fields.SIZE, segment.getSize().toString());, +                        builder.field(Fields.SIZE_IN_BYTES, segment.getSizeInBytes());, +                        builder.field(Fields.COMMITTED, segment.isCommitted());, +                        builder.field(Fields.SEARCH, segment.isSearch());, +                        if (segment.getVersion() != null) {, +                            builder.field(Fields.VERSION, segment.getVersion());, +                        }, +                        if (segment.isCompound() != null) {, +                            builder.field(Fields.COMPOUND, segment.isCompound());, +                        }, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +        static final XContentBuilderString COMPOUND = new XContentBuilderString("compound");, +++ b/src/main/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentResponse.java, +                        builder.startObject(segment.getName());, +                        builder.field(Fields.GENERATION, segment.getGeneration());, +                        builder.field(Fields.NUM_DOCS, segment.getNumDocs());, +                        builder.field(Fields.DELETED_DOCS, segment.getDeletedDocs());, +                        builder.field(Fields.SIZE, segment.getSize().toString());, +                        builder.field(Fields.SIZE_IN_BYTES, segment.getSizeInBytes());, +                        builder.field(Fields.COMMITTED, segment.isCommitted());, +                        builder.field(Fields.SEARCH, segment.isSearch());, +                        if (segment.getVersion() != null) {, +                            builder.field(Fields.VERSION, segment.getVersion());, +                        }, +                        if (segment.isCompound() != null) {, +                            builder.field(Fields.COMPOUND, segment.isCompound());, +                        }, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +        static final XContentBuilderString COMPOUND = new XContentBuilderString("compound");, +++ b/src/main/java/org/elasticsearch/action/admin/indices/segments/ShardSegments.java, +            if (segment.isCommitted()) {, +            if (segment.isSearch()) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentResponse.java, +                        builder.startObject(segment.getName());, +                        builder.field(Fields.GENERATION, segment.getGeneration());, +                        builder.field(Fields.NUM_DOCS, segment.getNumDocs());, +                        builder.field(Fields.DELETED_DOCS, segment.getDeletedDocs());, +                        builder.field(Fields.SIZE, segment.getSize().toString());, +                        builder.field(Fields.SIZE_IN_BYTES, segment.getSizeInBytes());, +                        builder.field(Fields.COMMITTED, segment.isCommitted());, +                        builder.field(Fields.SEARCH, segment.isSearch());, +                        if (segment.getVersion() != null) {, +                            builder.field(Fields.VERSION, segment.getVersion());, +                        }, +                        if (segment.isCompound() != null) {, +                            builder.field(Fields.COMPOUND, segment.isCompound());, +                        }, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +        static final XContentBuilderString COMPOUND = new XContentBuilderString("compound");, +++ b/src/main/java/org/elasticsearch/action/admin/indices/segments/ShardSegments.java, +            if (segment.isCommitted()) {, +            if (segment.isSearch()) {, +++ b/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +    @Nullable, +    public final Boolean readOptionalBoolean() throws IOException {, +        byte val = readByte();, +        if (val == 2) {, +            return null;, +        }, +        if (val == 1) {, +            return true;, +        }, +        return false;, +    }, +++ b/src/main/java/org/elasticsearch/action/admin/indices/segments/IndicesSegmentResponse.java, +                        builder.startObject(segment.getName());, +                        builder.field(Fields.GENERATION, segment.getGeneration());, +                        builder.field(Fields.NUM_DOCS, segment.getNumDocs());, +                        builder.field(Fields.DELETED_DOCS, segment.getDeletedDocs());, +                        builder.field(Fields.SIZE, segment.getSize().toString());, +                        builder.field(Fields.SIZE_IN_BYTES, segment.getSizeInBytes());, +                        builder.field(Fields.COMMITTED, segment.isCommitted());, +                        builder.field(Fields.SEARCH, segment.isSearch());, +                        if (segment.getVersion() != null) {, +                            builder.field(Fields.VERSION, segment.getVersion());, +                        }, +                        if (segment.isCompound() != null) {, +                            builder.field(Fields.COMPOUND, segment.isCompound());, +                        }, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +        static final XContentBuilderString COMPOUND = new XContentBuilderString("compound");, +++ b/src/main/java/org/elasticsearch/action/admin/indices/segments/ShardSegments.java, +            if (segment.isCommitted()) {, +            if (segment.isSearch()) {, +++ b/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +    @Nullable, +    public final Boolean readOptionalBoolean() throws IOException {, +        byte val = readByte();, +        if (val == 2) {, +            return null;, +        }, +        if (val == 1) {, +            return true;, +        }, +        return false;]