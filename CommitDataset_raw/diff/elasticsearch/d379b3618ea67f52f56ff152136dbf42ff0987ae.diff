[+++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    protected final Boolean docValues;, +            this.docValues = null; // use the default, +        return docValues == null ? defaultDocValues() : docValues;, +        doXContentDocValues(builder, includeDefaults);, +    protected void doXContentDocValues(XContentBuilder builder, boolean includeDefaults) throws IOException {, +        if (includeDefaults || docValues != null) {, +            builder.field(TypeParsers.DOC_VALUES, hasDocValues());, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    protected final Boolean docValues;, +            this.docValues = null; // use the default, +        return docValues == null ? defaultDocValues() : docValues;, +        doXContentDocValues(builder, includeDefaults);, +    protected void doXContentDocValues(XContentBuilder builder, boolean includeDefaults) throws IOException {, +        if (includeDefaults || docValues != null) {, +            builder.field(TypeParsers.DOC_VALUES, hasDocValues());, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +        doXContentDocValues(builder, includeDefaults);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    protected final Boolean docValues;, +            this.docValues = null; // use the default, +        return docValues == null ? defaultDocValues() : docValues;, +        doXContentDocValues(builder, includeDefaults);, +    protected void doXContentDocValues(XContentBuilder builder, boolean includeDefaults) throws IOException {, +        if (includeDefaults || docValues != null) {, +            builder.field(TypeParsers.DOC_VALUES, hasDocValues());, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +        doXContentDocValues(builder, includeDefaults);, +++ b/src/test/java/org/elasticsearch/index/mapper/timestamp/TimestampMappingTests.java, +        assertConflict(mapping1.string(), mapping2.string(), parser, (path1 == path2 ? null : "Cannot update path in _timestamp value"));, +    void assertConflict(String mapping1, String mapping2, DocumentMapperParser parser, String conflict) throws IOException {, +    , +    public void testDocValuesSerialization() throws Exception {, +        // default, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +            .startObject("_timestamp"), +            .endObject().endObject().endObject().string();, +        assertDocValuesSerialization(mapping);, +, +        // just format specified, +        mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +            .startObject("_timestamp"), +            .startObject("fielddata").field("format", "doc_values").endObject(), +            .endObject().endObject().endObject().string();, +        assertDocValuesSerialization(mapping);, +, +        // explicitly enabled, +        mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +            .startObject("_timestamp"), +            .field("doc_values", true), +            .endObject().endObject().endObject().string();, +        assertDocValuesSerialization(mapping);, +, +        // explicitly disabled, +        mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +            .startObject("_timestamp"), +            .field("doc_values", false), +            .endObject().endObject().endObject().string();, +        assertDocValuesSerialization(mapping);, +, +        // explicitly enabled, with format, +        mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +            .startObject("_timestamp"), +            .field("doc_values", true), +            .startObject("fielddata").field("format", "doc_values").endObject(), +            .endObject().endObject().endObject().string();, +        assertDocValuesSerialization(mapping);, +, +        // explicitly disabled, with format, +        mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +            .startObject("_timestamp"), +            .field("doc_values", false), +            .startObject("fielddata").field("format", "doc_values").endObject(), +            .endObject().endObject().endObject().string();, +        assertDocValuesSerialization(mapping);, +    }, +    , +    void assertDocValuesSerialization(String mapping) throws Exception {, +        DocumentMapperParser parser = createIndex("test_doc_values").mapperService().documentMapperParser();, +        DocumentMapper docMapper = parser.parse(mapping);, +        boolean docValues= docMapper.timestampFieldMapper().hasDocValues();, +        docMapper.refreshSource();, +        docMapper = parser.parse(docMapper.mappingSource().string());, +        assertThat(docMapper.timestampFieldMapper().hasDocValues(), equalTo(docValues));, +        assertAcked(client().admin().indices().prepareDelete("test_doc_values"));, +    }]