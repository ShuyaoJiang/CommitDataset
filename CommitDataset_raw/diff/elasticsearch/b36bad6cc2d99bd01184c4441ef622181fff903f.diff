[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java, +        breaker = in.readOptionalWriteable(AllCircuitBreakerStats::new);, +        out.writeOptionalWriteable(breaker);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java, +        breaker = in.readOptionalWriteable(AllCircuitBreakerStats::new);, +        out.writeOptionalWriteable(breaker);, +++ b/core/src/main/java/org/elasticsearch/indices/breaker/AllCircuitBreakerStats.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class AllCircuitBreakerStats implements Writeable, ToXContent {, +    private final CircuitBreakerStats[] allStats;, +    public AllCircuitBreakerStats(StreamInput in) throws IOException {, +        allStats = in.readArray(CircuitBreakerStats::new, CircuitBreakerStats[]::new);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeArray(allStats);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStats.java, +        breaker = in.readOptionalWriteable(AllCircuitBreakerStats::new);, +        out.writeOptionalWriteable(breaker);, +++ b/core/src/main/java/org/elasticsearch/indices/breaker/AllCircuitBreakerStats.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class AllCircuitBreakerStats implements Writeable, ToXContent {, +    private final CircuitBreakerStats[] allStats;, +    public AllCircuitBreakerStats(StreamInput in) throws IOException {, +        allStats = in.readArray(CircuitBreakerStats::new, CircuitBreakerStats[]::new);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeArray(allStats);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/indices/breaker/CircuitBreakerStats.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class CircuitBreakerStats implements Writeable, ToXContent {, +    private final String name;, +    private final long limit;, +    private final long estimated;, +    private final long trippedCount;, +    private final double overhead;, +    public CircuitBreakerStats(StreamInput in) throws IOException {, +        // limit is the maximum from the old circuit breaker stats for backwards compatibility, +        limit = in.readLong();, +        estimated = in.readLong();, +        overhead = in.readDouble();, +        this.trippedCount = in.readLong();, +        this.name = in.readString();, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeLong(limit);, +        out.writeLong(estimated);, +        out.writeDouble(overhead);, +        out.writeLong(trippedCount);, +        out.writeString(name);, +    }, +]