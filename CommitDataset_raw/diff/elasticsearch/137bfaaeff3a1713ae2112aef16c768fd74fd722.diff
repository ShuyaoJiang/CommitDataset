[+++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +        if (needsScores == false) {, +            return subQuery.createWeight(searcher, needsScores);, +        }, +, +        boolean subQueryNeedsScores = combineFunction != CombineFunction.REPLACE;, +            subQueryNeedsScores |= filterFunctions[i].function.needsScores();, +        Weight subQueryWeight = subQuery.createWeight(searcher, subQueryNeedsScores);, +        return new CustomBoostFactorWeight(this, subQueryWeight, filterWeights, subQueryNeedsScores);, +        final boolean needsScores;, +        public CustomBoostFactorWeight(Query parent, Weight subQueryWeight, Weight[] filterWeights, boolean needsScores) throws IOException {, +            this.needsScores = needsScores;, +            return new FiltersFunctionFactorScorer(this, subQueryScorer, scoreMode, filterFunctions, maxBoost, functions, docSets, combineFunction, minScore, needsScores);, +        private final boolean needsScores;, +                                            float maxBoost, LeafScoreFunction[] functions, Bits[] docSets, CombineFunction scoreCombiner, Float minScore, boolean needsScores) throws IOException {, +            this.needsScores = needsScores;, +            // Even if the weight is created with needsScores=false, it might, +            // be costly to call score(), so we explicitly check if scores, +            // are needed, +            float subQueryScore = needsScores ? scorer.score() : 0f;]