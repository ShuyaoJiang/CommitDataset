[+++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcIdea(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanIdea', 'ideaModule'], +}, +tasks.idea.dependsOn(buildSrcIdea), +++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcIdea(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanIdea', 'ideaModule'], +}, +tasks.idea.dependsOn(buildSrcIdea), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneTestBasePlugin.groovy, +        project.idea.module.testSourceDirs += project.sourceSets.test.java.srcDirs, +        project.idea.module.scopes['TEST'] = [plus: [project.configurations.testRuntime]], +++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcIdea(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanIdea', 'ideaModule'], +}, +tasks.idea.dependsOn(buildSrcIdea), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneTestBasePlugin.groovy, +        project.idea.module.testSourceDirs += project.sourceSets.test.java.srcDirs, +        project.idea.module.scopes['TEST'] = [plus: [project.configurations.testRuntime]], +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.action.delete.TransportDeleteAction;, +import org.elasticsearch.action.index.TransportIndexAction;, +                    final WriteResult<DeleteResponse> writeResult = TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest, indexShard);, +        processAfterWrite(request.refresh(), indexShard, location);, +    private WriteResult<IndexResponse> shardIndexOperation(BulkShardRequest request, IndexRequest indexRequest, ClusterState clusterState,, +        return TransportIndexAction.executeIndexRequestOnPrimary(indexRequest, indexShard, mappingUpdatedAction);, +                    WriteResult<DeleteResponse> result = TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest, indexShard);, +                    Engine.Index operation = TransportIndexAction.executeIndexRequestOnReplica(indexRequest, indexShard);, +                    Engine.Delete delete = TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest, indexShard);, +        processAfterWrite(request.refresh(), indexShard, location);, +++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcIdea(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanIdea', 'ideaModule'], +}, +tasks.idea.dependsOn(buildSrcIdea), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneTestBasePlugin.groovy, +        project.idea.module.testSourceDirs += project.sourceSets.test.java.srcDirs, +        project.idea.module.scopes['TEST'] = [plus: [project.configurations.testRuntime]], +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.action.delete.TransportDeleteAction;, +import org.elasticsearch.action.index.TransportIndexAction;, +                    final WriteResult<DeleteResponse> writeResult = TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest, indexShard);, +        processAfterWrite(request.refresh(), indexShard, location);, +    private WriteResult<IndexResponse> shardIndexOperation(BulkShardRequest request, IndexRequest indexRequest, ClusterState clusterState,, +        return TransportIndexAction.executeIndexRequestOnPrimary(indexRequest, indexShard, mappingUpdatedAction);, +                    WriteResult<DeleteResponse> result = TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest, indexShard);, +                    Engine.Index operation = TransportIndexAction.executeIndexRequestOnReplica(indexRequest, indexShard);, +                    Engine.Delete delete = TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest, indexShard);, +        processAfterWrite(request.refresh(), indexShard, location);, +++ b/core/src/main/java/org/elasticsearch/action/delete/DeleteResponse.java, +public class DeleteResponse extends ActionWriteResponse {, +++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcIdea(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanIdea', 'ideaModule'], +}, +tasks.idea.dependsOn(buildSrcIdea), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneTestBasePlugin.groovy, +        project.idea.module.testSourceDirs += project.sourceSets.test.java.srcDirs, +        project.idea.module.scopes['TEST'] = [plus: [project.configurations.testRuntime]], +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.action.delete.TransportDeleteAction;, +import org.elasticsearch.action.index.TransportIndexAction;, +                    final WriteResult<DeleteResponse> writeResult = TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest, indexShard);, +        processAfterWrite(request.refresh(), indexShard, location);, +    private WriteResult<IndexResponse> shardIndexOperation(BulkShardRequest request, IndexRequest indexRequest, ClusterState clusterState,, +        return TransportIndexAction.executeIndexRequestOnPrimary(indexRequest, indexShard, mappingUpdatedAction);, +                    WriteResult<DeleteResponse> result = TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest, indexShard);, +                    Engine.Index operation = TransportIndexAction.executeIndexRequestOnReplica(indexRequest, indexShard);, +                    Engine.Delete delete = TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest, indexShard);, +        processAfterWrite(request.refresh(), indexShard, location);, +++ b/core/src/main/java/org/elasticsearch/action/delete/DeleteResponse.java, +public class DeleteResponse extends ActionWriteResponse {, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        final WriteResult<DeleteResponse> result = executeDeleteRequestOnPrimary(request, indexShard);, +        processAfterWrite(request.refresh(), indexShard, result.location);, +        return new Tuple<>(result.response, shardRequest.request);, +    }, +, +    public static WriteResult<DeleteResponse> executeDeleteRequestOnPrimary(DeleteRequest request, IndexShard indexShard) {, +        Engine.Delete delete = indexShard.prepareDeleteOnPrimary(request.type(), request.id(), request.version(), request.versionType());, +        return new WriteResult<>(, +            new DeleteResponse(indexShard.shardId().getIndex(), request.type(), request.id(), delete.version(), delete.found()),, +            delete.getTranslogLocation());, +    public static Engine.Delete executeDeleteRequestOnReplica(DeleteRequest request, IndexShard indexShard) {, +        Engine.Delete delete = indexShard.prepareDeleteOnReplica(request.type(), request.id(), request.version(), request.versionType());, +        indexShard.delete(delete);, +        return delete;, +    }]