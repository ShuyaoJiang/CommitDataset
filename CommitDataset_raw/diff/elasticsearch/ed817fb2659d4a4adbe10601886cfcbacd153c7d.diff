[+++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            follow(client(), allowedIndex, allowedIndex);, +            resumeFollow(allowedIndex);, +            Exception e = expectThrows(ResponseException.class, () -> resumeFollow(allowedIndex));, +            e = expectThrows(ResponseException.class, () -> follow(client(), unallowedIndex, unallowedIndex));, +            e = expectThrows(ResponseException.class, () -> follow(client(), unallowedIndex, allowedIndex));, +            follow(adminClient(), unallowedIndex, unallowedIndex);, +            pauseFollow(adminClient(), unallowedIndex);, +, +            e = expectThrows(ResponseException.class, () -> resumeFollow(unallowedIndex));, +            assertOK(adminClient().performRequest(new Request("POST", "/" + unallowedIndex + "/_close")));, +            assertOK(adminClient().performRequest(new Request("POST", "/" + unallowedIndex + "/_ccr/unfollow")));, +            assertBusy(() -> assertThat(countCcrNodeTasks(), equalTo(0)));, +        pauseFollow(client(), allowedIndex);, +    private static void resumeFollow(String followIndex) throws IOException {, +        request.setJsonEntity("{\"poll_timeout\": \"10ms\"}");, +    private static void follow(RestClient client, String leaderIndex, String followIndex) throws IOException {, +        assertOK(client.performRequest(request));, +    private static void pauseFollow(RestClient client, String followIndex) throws IOException {, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            follow(client(), allowedIndex, allowedIndex);, +            resumeFollow(allowedIndex);, +            Exception e = expectThrows(ResponseException.class, () -> resumeFollow(allowedIndex));, +            e = expectThrows(ResponseException.class, () -> follow(client(), unallowedIndex, unallowedIndex));, +            e = expectThrows(ResponseException.class, () -> follow(client(), unallowedIndex, allowedIndex));, +            follow(adminClient(), unallowedIndex, unallowedIndex);, +            pauseFollow(adminClient(), unallowedIndex);, +, +            e = expectThrows(ResponseException.class, () -> resumeFollow(unallowedIndex));, +            assertOK(adminClient().performRequest(new Request("POST", "/" + unallowedIndex + "/_close")));, +            assertOK(adminClient().performRequest(new Request("POST", "/" + unallowedIndex + "/_ccr/unfollow")));, +            assertBusy(() -> assertThat(countCcrNodeTasks(), equalTo(0)));, +        pauseFollow(client(), allowedIndex);, +    private static void resumeFollow(String followIndex) throws IOException {, +        request.setJsonEntity("{\"poll_timeout\": \"10ms\"}");, +    private static void follow(RestClient client, String leaderIndex, String followIndex) throws IOException {, +        assertOK(client.performRequest(request));, +    private static void pauseFollow(RestClient client, String followIndex) throws IOException {, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +            resumeFollow(followIndexName);, +            Exception e = expectThrows(ResponseException.class, () -> resumeFollow(followIndexName));, +        ResponseException e = expectThrows(ResponseException.class, () -> resumeFollow("non-existing-index"));, +    private static void resumeFollow(String followIndex) throws IOException {, +        request.setJsonEntity("{\"poll_timeout\": \"10ms\"}");, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            follow(client(), allowedIndex, allowedIndex);, +            resumeFollow(allowedIndex);, +            Exception e = expectThrows(ResponseException.class, () -> resumeFollow(allowedIndex));, +            e = expectThrows(ResponseException.class, () -> follow(client(), unallowedIndex, unallowedIndex));, +            e = expectThrows(ResponseException.class, () -> follow(client(), unallowedIndex, allowedIndex));, +            follow(adminClient(), unallowedIndex, unallowedIndex);, +            pauseFollow(adminClient(), unallowedIndex);, +, +            e = expectThrows(ResponseException.class, () -> resumeFollow(unallowedIndex));, +            assertOK(adminClient().performRequest(new Request("POST", "/" + unallowedIndex + "/_close")));, +            assertOK(adminClient().performRequest(new Request("POST", "/" + unallowedIndex + "/_ccr/unfollow")));, +            assertBusy(() -> assertThat(countCcrNodeTasks(), equalTo(0)));, +        pauseFollow(client(), allowedIndex);, +    private static void resumeFollow(String followIndex) throws IOException {, +        request.setJsonEntity("{\"poll_timeout\": \"10ms\"}");, +    private static void follow(RestClient client, String leaderIndex, String followIndex) throws IOException {, +        assertOK(client.performRequest(request));, +    private static void pauseFollow(RestClient client, String followIndex) throws IOException {, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +            resumeFollow(followIndexName);, +            Exception e = expectThrows(ResponseException.class, () -> resumeFollow(followIndexName));, +        ResponseException e = expectThrows(ResponseException.class, () -> resumeFollow("non-existing-index"));, +    private static void resumeFollow(String followIndex) throws IOException {, +        request.setJsonEntity("{\"poll_timeout\": \"10ms\"}");, +++ b/x-pack/plugin/ccr/qa/rest/src/test/resources/rest-api-spec/test/ccr/follow_and_unfollow.yml, +        body: {}, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-non-compliant-license/src/test/java/org/elasticsearch/xpack/ccr/CcrMultiClusterLicenseIT.java, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            follow(client(), allowedIndex, allowedIndex);, +            resumeFollow(allowedIndex);, +            Exception e = expectThrows(ResponseException.class, () -> resumeFollow(allowedIndex));, +            e = expectThrows(ResponseException.class, () -> follow(client(), unallowedIndex, unallowedIndex));, +            e = expectThrows(ResponseException.class, () -> follow(client(), unallowedIndex, allowedIndex));, +            follow(adminClient(), unallowedIndex, unallowedIndex);, +            pauseFollow(adminClient(), unallowedIndex);, +, +            e = expectThrows(ResponseException.class, () -> resumeFollow(unallowedIndex));, +            assertOK(adminClient().performRequest(new Request("POST", "/" + unallowedIndex + "/_close")));, +            assertOK(adminClient().performRequest(new Request("POST", "/" + unallowedIndex + "/_ccr/unfollow")));, +            assertBusy(() -> assertThat(countCcrNodeTasks(), equalTo(0)));, +        pauseFollow(client(), allowedIndex);, +    private static void resumeFollow(String followIndex) throws IOException {, +        request.setJsonEntity("{\"poll_timeout\": \"10ms\"}");, +    private static void follow(RestClient client, String leaderIndex, String followIndex) throws IOException {, +        assertOK(client.performRequest(request));, +    private static void pauseFollow(RestClient client, String followIndex) throws IOException {, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +            resumeFollow(followIndexName);, +            Exception e = expectThrows(ResponseException.class, () -> resumeFollow(followIndexName));, +        ResponseException e = expectThrows(ResponseException.class, () -> resumeFollow("non-existing-index"));, +    private static void resumeFollow(String followIndex) throws IOException {]