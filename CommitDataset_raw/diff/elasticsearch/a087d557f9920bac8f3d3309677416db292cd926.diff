[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +, +        inputs.property("excludes", filesFilter.excludes), +        inputs.property("rules", patterns), +        filesFilter.exclude(excludes), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +, +        inputs.property("excludes", filesFilter.excludes), +        inputs.property("rules", patterns), +        filesFilter.exclude(excludes), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +, +java.util.Collections#shuffle(java.util.List) @ Use java.util.Collections#shuffle(java.util.List, java.util.Random) with a reproducible source of randomness, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +, +        inputs.property("excludes", filesFilter.excludes), +        inputs.property("rules", patterns), +        filesFilter.exclude(excludes), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +, +java.util.Collections#shuffle(java.util.List) @ Use java.util.Collections#shuffle(java.util.List, java.util.Random) with a reproducible source of randomness, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +import org.elasticsearch.common.Randomness;, +import java.util.*;, +            Randomness.shuffle(unassigned);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +, +        inputs.property("excludes", filesFilter.excludes), +        inputs.property("rules", patterns), +        filesFilter.exclude(excludes), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +, +java.util.Collections#shuffle(java.util.List) @ Use java.util.Collections#shuffle(java.util.List, java.util.Random) with a reproducible source of randomness, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +import org.elasticsearch.common.Randomness;, +import java.util.*;, +            Randomness.shuffle(unassigned);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +import org.elasticsearch.common.Randomness;, +import java.util.*;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +, +        inputs.property("excludes", filesFilter.excludes), +        inputs.property("rules", patterns), +        filesFilter.exclude(excludes), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +, +java.util.Collections#shuffle(java.util.List) @ Use java.util.Collections#shuffle(java.util.List, java.util.Random) with a reproducible source of randomness, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +import org.elasticsearch.common.Randomness;, +import java.util.*;, +            Randomness.shuffle(unassigned);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +import org.elasticsearch.common.Randomness;, +import java.util.*;, +++ b/core/src/main/java/org/elasticsearch/common/Randomness.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common;, +, +import org.elasticsearch.common.settings.Settings;, +, +import java.lang.reflect.Method;, +import java.security.SecureRandom;, +import java.util.Collections;, +import java.util.List;, +import java.util.Random;, +, +/**, + * Provides factory methods for producing reproducible sources of, + * randomness. Reproducible sources of randomness contribute to, + * reproducible tests. When running the Elasticsearch test suite, the, + * test runner will establish a global random seed accessible via the, + * system property "tests.seed". By seeding a random number generator, + * with this global seed, we ensure that instances of Random produced, + * with this class produce reproducible sources of randomness under, + * when running under the Elasticsearch test suite. Alternatively,, + * a reproducible source of randomness can be produced by providing a, + * setting a reproducible seed. When running the Elasticsearch server]