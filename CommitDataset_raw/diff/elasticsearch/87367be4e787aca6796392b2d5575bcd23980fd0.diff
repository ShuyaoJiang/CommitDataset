[+++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +import org.elasticsearch.index.translog.Translog;, +    public DeleteVersionValue(long version, long time, Translog.Location translogLocation) {, +        super(version, translogLocation);, +        Translog.Location translogLocation = translogLocation();, +        return BASE_RAM_BYTES_USED + (translogLocation != null ? translogLocation.ramBytesUsed() : 0);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +import org.elasticsearch.index.translog.Translog;, +    public DeleteVersionValue(long version, long time, Translog.Location translogLocation) {, +        super(version, translogLocation);, +        Translog.Location translogLocation = translogLocation();, +        return BASE_RAM_BYTES_USED + (translogLocation != null ? translogLocation.ramBytesUsed() : 0);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private final Translog.Source source;, +        public static final GetResult NOT_EXISTS = new GetResult(false, Versions.NOT_FOUND, null);, +        /**, +         * Build a realtime get result from the translog., +         */, +        public GetResult(boolean exists, long version, @Nullable Translog.Source source) {, +            this.source = source;, +            this.docIdAndVersion = null;, +            this.searcher = null;, +            this.exists = true;, +            this.source = null;, +            this.version = docIdAndVersion.version;, +            this.docIdAndVersion = docIdAndVersion;, +            this.searcher = searcher;, +        @Nullable, +        public Translog.Source source() {, +            return source;, +        }, +, +            if (searcher != null) {, +                searcher.close();, +            }, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +import org.elasticsearch.index.translog.Translog;, +    public DeleteVersionValue(long version, long time, Translog.Location translogLocation) {, +        super(version, translogLocation);, +        Translog.Location translogLocation = translogLocation();, +        return BASE_RAM_BYTES_USED + (translogLocation != null ? translogLocation.ramBytesUsed() : 0);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private final Translog.Source source;, +        public static final GetResult NOT_EXISTS = new GetResult(false, Versions.NOT_FOUND, null);, +        /**, +         * Build a realtime get result from the translog., +         */, +        public GetResult(boolean exists, long version, @Nullable Translog.Source source) {, +            this.source = source;, +            this.docIdAndVersion = null;, +            this.searcher = null;, +            this.exists = true;, +            this.source = null;, +            this.version = docIdAndVersion.version;, +            this.docIdAndVersion = docIdAndVersion;, +            this.searcher = searcher;, +        @Nullable, +        public Translog.Source source() {, +            return source;, +        }, +, +            if (searcher != null) {, +                searcher.close();, +            }, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    Translog.Operation op = translog.read(versionValue.translogLocation());, +                    if (op != null) {, +                        return new GetResult(true, versionValue.version(), op.getSource());, +                    }, +    private static VersionValueSupplier NEW_VERSION_VALUE = (u, t, l) -> new VersionValue(u, l);, +        VersionValue apply(long updatedVersion, long time, Translog.Location location);, +            versionMap.putUnderLock(op.uid().bytes(), toVersionValue.apply(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis(), op.getTranslogLocation()));, +        } else {, +            // we do not replay in to the translog, so there is no, +            // translog location; that is okay because real-time, +            // gets are not possible during recovery and we will, +            // flush when the recovery is complete, +            versionMap.putUnderLock(op.uid().bytes(), toVersionValue.apply(updatedVersion, engineConfig.getThreadPool().estimatedTimeInMillis(), null));, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/index/engine/DeleteVersionValue.java, +import org.elasticsearch.index.translog.Translog;, +    public DeleteVersionValue(long version, long time, Translog.Location translogLocation) {, +        super(version, translogLocation);, +        Translog.Location translogLocation = translogLocation();, +        return BASE_RAM_BYTES_USED + (translogLocation != null ? translogLocation.ramBytesUsed() : 0);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private final Translog.Source source;, +        public static final GetResult NOT_EXISTS = new GetResult(false, Versions.NOT_FOUND, null);, +        /**, +         * Build a realtime get result from the translog., +         */]