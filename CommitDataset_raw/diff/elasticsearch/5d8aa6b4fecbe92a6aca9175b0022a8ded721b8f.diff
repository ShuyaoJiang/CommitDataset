[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "log4j:log4j:${project.versions.log4j}", +            provided "log4j:apache-log4j-extras:${project.versions.log4j}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "log4j:log4j:${project.versions.log4j}", +            provided "log4j:apache-log4j-extras:${project.versions.log4j}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "log4j:log4j:${project.versions.log4j}", +            provided "log4j:apache-log4j-extras:${project.versions.log4j}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    /** An override of the data directory. This may only be used with a single node. */, +    @Input, +    File dataDir = null, +, +    /** Optional override of the cluster name. */, +    @Input, +    String clusterName = null, +, +     * A uri that should be used for the unicast host list., +     * This allows multi node clusters, or a new cluster to connect to an existing cluster., +     * The type is Object to allow lazy evaluation. Typically this would be set with a, +     * closure in a GString like:, +     *, +     * {@code "$&#123;-> node.transportUri()&#125;"}, +    @Input, +    Closure unicastTransportUri = null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "log4j:log4j:${project.versions.log4j}", +            provided "log4j:apache-log4j-extras:${project.versions.log4j}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    /** An override of the data directory. This may only be used with a single node. */, +    @Input, +    File dataDir = null, +, +    /** Optional override of the cluster name. */, +    @Input, +    String clusterName = null, +, +     * A uri that should be used for the unicast host list., +     * This allows multi node clusters, or a new cluster to connect to an existing cluster., +     * The type is Object to allow lazy evaluation. Typically this would be set with a, +     * closure in a GString like:, +     *, +     * {@code "$&#123;-> node.transportUri()&#125;"}, +    @Input, +    Closure unicastTransportUri = null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +    static List<NodeInfo> setup(Project project, Task task, ClusterConfiguration config) {, +        NodeInfo seedNode = null, +            if (i == 0) {, +                seedNode = node, +            }, +            startTasks.add(configureNode(project, task, cleanup, node, distro, seedNode)), +        return nodes, +    static Task configureNode(Project project, Task task, Object dependsOn, NodeInfo node, Configuration configuration, NodeInfo seedNode) {, +        setup = configureWriteConfigTask(taskName(task, node, 'configure'), project, setup, node, seedNode), +    static Task configureWriteConfigTask(String name, Project project, Task setup, NodeInfo node, NodeInfo seedNode) {, +            if (node.config.unicastTransportUri != null) {, +                // if the unicast transport uri was specified, use it for all nodes, +                // this will typically be the case if all the nodes we are setting up, +                // should connect to a master in an already formed cluster, +                esConfig['discovery.zen.ping.unicast.hosts'] = node.config.unicastTransportUri(), +            } else if (node.nodeNum > 0) { // multi-node cluster case, we have to wait for the seed node to startup, +                        file(file: seedNode.transportPortsFile.toString()), +                esConfig['discovery.zen.ping.unicast.hosts'] = "\"${seedNode.transportUri()}\"", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "log4j:log4j:${project.versions.log4j}", +            provided "log4j:apache-log4j-extras:${project.versions.log4j}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    /** An override of the data directory. This may only be used with a single node. */, +    @Input, +    File dataDir = null, +, +    /** Optional override of the cluster name. */, +    @Input, +    String clusterName = null, +, +     * A uri that should be used for the unicast host list., +     * This allows multi node clusters, or a new cluster to connect to an existing cluster., +     * The type is Object to allow lazy evaluation. Typically this would be set with a, +     * closure in a GString like:, +     *, +     * {@code "$&#123;-> node.transportUri()&#125;"}, +    @Input, +    Closure unicastTransportUri = null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +    static List<NodeInfo> setup(Project project, Task task, ClusterConfiguration config) {, +        NodeInfo seedNode = null, +            if (i == 0) {, +                seedNode = node, +            }, +            startTasks.add(configureNode(project, task, cleanup, node, distro, seedNode))]