[+++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequest.java, +                port = uri.getPort() > 0 ? uri.getPort() : scheme.defaultPort();, +                host = uri.getHost();, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequest.java, +                port = uri.getPort() > 0 ? uri.getPort() : scheme.defaultPort();, +                host = uri.getHost();, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequestTemplate.java, +                port = uri.getPort() > 0 ? uri.getPort() : scheme.defaultPort();, +                host = uri.getHost();, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequest.java, +                port = uri.getPort() > 0 ? uri.getPort() : scheme.defaultPort();, +                host = uri.getHost();, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequestTemplate.java, +                port = uri.getPort() > 0 ? uri.getPort() : scheme.defaultPort();, +                host = uri.getHost();, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/Scheme.java, +    HTTP("http", 80),, +    HTTPS("https", 443);, +    private final int defaultPort;, +    Scheme(String scheme, int defaultPort) {, +        this.defaultPort = defaultPort;, +    public int defaultPort() {, +        return defaultPort;, +    }, +, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequest.java, +                port = uri.getPort() > 0 ? uri.getPort() : scheme.defaultPort();, +                host = uri.getHost();, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequestTemplate.java, +                port = uri.getPort() > 0 ? uri.getPort() : scheme.defaultPort();, +                host = uri.getHost();, +++ b/elasticsearch/x-pack/watcher/src/main/java/org/elasticsearch/watcher/support/http/Scheme.java, +    HTTP("http", 80),, +    HTTPS("https", 443);, +    private final int defaultPort;, +    Scheme(String scheme, int defaultPort) {, +        this.defaultPort = defaultPort;, +    public int defaultPort() {, +        return defaultPort;, +    }, +, +++ b/elasticsearch/x-pack/watcher/src/test/java/org/elasticsearch/watcher/support/http/HttpRequestTemplateTests.java, +        // ssl support, getting the default port right, +        builder = HttpRequestTemplate.builder("www.example.org", 443).scheme(Scheme.HTTPS).path("/test");, +        assertThatManualBuilderEqualsParsingFromUrl("https://www.example.org/test", builder);, +]