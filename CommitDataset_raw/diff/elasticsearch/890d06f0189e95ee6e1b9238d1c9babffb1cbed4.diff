[+++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    private boolean onlyCount;, +    public PercolateRequest() {, +        this.onlyCount = request.onlyCount;, +        this.startTime = request.startTime;, +    public boolean onlyCount() {, +        return onlyCount;, +    }, +, +    public void onlyCount(boolean onlyCount) {, +        this.onlyCount = onlyCount;, +    }, +, +        onlyCount = in.readBoolean();, +        out.writeBoolean(onlyCount);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    private boolean onlyCount;, +    public PercolateRequest() {, +        this.onlyCount = request.onlyCount;, +        this.startTime = request.startTime;, +    public boolean onlyCount() {, +        return onlyCount;, +    }, +, +    public void onlyCount(boolean onlyCount) {, +        this.onlyCount = onlyCount;, +    }, +, +        onlyCount = in.readBoolean();, +        out.writeBoolean(onlyCount);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    /**, +     * Whether only to return total count and don't keep track of the matches (Count percolation)., +     */, +    public PercolateRequestBuilder setOnlyCount(boolean onlyCount) {, +        request.onlyCount(onlyCount);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    private boolean onlyCount;, +    public PercolateRequest() {, +        this.onlyCount = request.onlyCount;, +        this.startTime = request.startTime;, +    public boolean onlyCount() {, +        return onlyCount;, +    }, +, +    public void onlyCount(boolean onlyCount) {, +        this.onlyCount = onlyCount;, +    }, +, +        onlyCount = in.readBoolean();, +        out.writeBoolean(onlyCount);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    /**, +     * Whether only to return total count and don't keep track of the matches (Count percolation)., +     */, +    public PercolateRequestBuilder setOnlyCount(boolean onlyCount) {, +        request.onlyCount(onlyCount);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java, +    private static final Match[] EMPTY = new Match[0];, +, +    private long count;, +    public PercolateResponse(int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures, Match[] matches, long count, long tookInMillis) {, +        this.count = count;, +    }, +, +    public PercolateResponse(int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures, long count, long tookInMillis) {, +        super(totalShards, successfulShards, failedShards, shardFailures);, +        this.tookInMillis = tookInMillis;, +        this.matches = EMPTY;, +        this.count = count;, +    public long getCount() {, +        return count;, +    }, +, +        count = in.readVLong();, +        out.writeVLong(count);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    private boolean onlyCount;, +    public PercolateRequest() {, +        this.onlyCount = request.onlyCount;, +        this.startTime = request.startTime;, +    public boolean onlyCount() {, +        return onlyCount;, +    }, +, +    public void onlyCount(boolean onlyCount) {, +        this.onlyCount = onlyCount;, +    }, +, +        onlyCount = in.readBoolean();, +        out.writeBoolean(onlyCount);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    /**, +     * Whether only to return total count and don't keep track of the matches (Count percolation).]