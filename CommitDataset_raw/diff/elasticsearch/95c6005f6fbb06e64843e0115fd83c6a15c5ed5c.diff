[+++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +    State markAsCompleted(Exception failure) {, +        State prevState = state.getAndSet(AllocatedPersistentTask.State.COMPLETED);, +        if (prevState == State.STARTED || prevState == State.CANCELLED) {, +        return prevState;, +        COMPLETED     // the task is done running and trying to notify caller, +++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +    State markAsCompleted(Exception failure) {, +        State prevState = state.getAndSet(AllocatedPersistentTask.State.COMPLETED);, +        if (prevState == State.STARTED || prevState == State.CANCELLED) {, +        return prevState;, +        COMPLETED     // the task is done running and trying to notify caller, +++ b/server/src/main/java/org/elasticsearch/persistent/CreatePersistentTaskAction.java, +                    transportService.getTaskManager(), executor));, +++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +    State markAsCompleted(Exception failure) {, +        State prevState = state.getAndSet(AllocatedPersistentTask.State.COMPLETED);, +        if (prevState == State.STARTED || prevState == State.CANCELLED) {, +        return prevState;, +        COMPLETED     // the task is done running and trying to notify caller, +++ b/server/src/main/java/org/elasticsearch/persistent/CreatePersistentTaskAction.java, +                    transportService.getTaskManager(), executor));, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksClusterService.java, +++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +    State markAsCompleted(Exception failure) {, +        State prevState = state.getAndSet(AllocatedPersistentTask.State.COMPLETED);, +        if (prevState == State.STARTED || prevState == State.CANCELLED) {, +        return prevState;, +        COMPLETED     // the task is done running and trying to notify caller, +++ b/server/src/main/java/org/elasticsearch/persistent/CreatePersistentTaskAction.java, +                    transportService.getTaskManager(), executor));, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksClusterService.java, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksNodeService.java, +                                      TaskManager taskManager, NodePersistentTasksExecutor nodePersistentTasksExecutor) {, +        // Cluster State   Local State      Local Action, +        //   STARTED         NULL          Create as STARTED, Start, +        //   STARTED         STARTED       Noop - running, +        //   STARTED         COMPLETED     Noop - waiting for notification ack, +, +        //   NULL            NULL          Noop - nothing to do, +        //   NULL            STARTED       Remove locally, Mark as CANCELLED, Cancel, +        //   NULL            COMPLETED     Remove locally, +, +        // Master states:, +        // NULL - doesn't exist in the cluster state, +        // STARTED - exist in the cluster state, +, +        // Local state:, +        // NULL - we don't have task registered locally in runningTasks, +        // STARTED - registered in TaskManager, requires master notification when finishes, +        // CANCELLED - registered in TaskManager, doesn't require master notification when finishes, +        // COMPLETED - not registered in TaskManager, notified, waiting for master to remove it from CS so we can remove locally, +, +        // When task finishes if it is marked as STARTED or CANCELLED it is marked as COMPLETED and unregistered,, +        // If the task was STARTED, the master notification is also triggered (this is handled by unregisterTask() method, which is, +        // triggered by PersistentTaskListener, +, +                if (task.getState() == AllocatedPersistentTask.State.COMPLETED) {, +                    logger.trace("Found unregistered persistent task with id {} - cancelling ", id);, +    /**, +     * Unregisters the locally running task. No notification to master will be send upon cancellation., +     */, +    /**, +     * Unregisters and then cancels the locally running task using the task manager. No notification to master will be send upon, +     * cancellation., +     */, +                // Cancel the local task using the task manager, +                persistentTasksService.sendTaskManagerCancellation(task.getId(), new ActionListener<CancelTasksResponse>() {, +    private void unregisterTask(AllocatedPersistentTask task, Exception e) {, +        AllocatedPersistentTask.State prevState = task.markAsCompleted(e);, +        if (prevState == AllocatedPersistentTask.State.CANCELLED) {, +            // The task was cancelled by master - no need to send notifications, +        } else if (prevState == AllocatedPersistentTask.State.STARTED) {, +            // The task finished locally, but master doesn't know about it - we need notify the master before we can unregister it, +            logger.trace("sending notification for completed task {}", task.getPersistentTaskId());, +            persistentTasksService.sendCompletionNotification(task.getPersistentTaskId(), e, new ActionListener<PersistentTask<?>>() {, +                public void onResponse(PersistentTask<?> persistentTask) {, +                    logger.trace("notification for task {} was successful", task.getId());, +                    taskManager.unregister(task);, +                public void onFailure(Exception e) {, +                    logger.warn((Supplier<?>) () ->, +                            new ParameterizedMessage("notification for task {} failed", task.getPersistentTaskId()), e);, +                    taskManager.unregister(task);, +            logger.warn("attempt to complete task {} in the {} state", task.getPersistentTaskId(), prevState);, +            unregisterTask(task, null);, +                    unregisterTask(task, null);, +                    unregisterTask(task, e);, +                unregisterTask(task, e);, +++ b/server/src/main/java/org/elasticsearch/persistent/AllocatedPersistentTask.java, +    State markAsCompleted(Exception failure) {, +        State prevState = state.getAndSet(AllocatedPersistentTask.State.COMPLETED);, +        if (prevState == State.STARTED || prevState == State.CANCELLED) {, +        return prevState;, +        COMPLETED     // the task is done running and trying to notify caller, +++ b/server/src/main/java/org/elasticsearch/persistent/CreatePersistentTaskAction.java, +                    transportService.getTaskManager(), executor));, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksClusterService.java, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTasksNodeService.java, +                                      TaskManager taskManager, NodePersistentTasksExecutor nodePersistentTasksExecutor) {, +        // Cluster State   Local State      Local Action]