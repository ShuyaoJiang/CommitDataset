[+++ b/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java, +    /**, +     * The number of ports in the range used for this cluster, +     */, +    public static final int PORTS_PER_CLUSTER = 20;, +, +    private static final int GLOBAL_TRANSPORT_BASE_PORT = 9300;, +    private static final int GLOBAL_HTTP_BASE_PORT = 19200;, +, +, +    /** a per-JVM unique offset to be used for calculating unique port ranges. */, +    public static final int JVM_BASE_PORT_OFFEST = PORTS_PER_JVM * (JVM_ORDINAL + 1);, +, +    private static final AtomicInteger clusterOrdinal = new AtomicInteger();, +    private final int CLUSTER_BASE_PORT_OFFSET = JVM_BASE_PORT_OFFEST + (clusterOrdinal.getAndIncrement() * PORTS_PER_CLUSTER) % PORTS_PER_JVM;, +, +    public final int TRANSPORT_BASE_PORT = GLOBAL_TRANSPORT_BASE_PORT + CLUSTER_BASE_PORT_OFFSET;, +    public final int HTTP_BASE_PORT = GLOBAL_HTTP_BASE_PORT + CLUSTER_BASE_PORT_OFFSET;, +, +        builder.put("transport.tcp.port", TRANSPORT_BASE_PORT + "-" + (TRANSPORT_BASE_PORT + PORTS_PER_CLUSTER));, +        builder.put("http.port", HTTP_BASE_PORT + "-" + (HTTP_BASE_PORT + PORTS_PER_CLUSTER));, +++ b/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java, +    /**, +     * The number of ports in the range used for this cluster, +     */, +    public static final int PORTS_PER_CLUSTER = 20;, +, +    private static final int GLOBAL_TRANSPORT_BASE_PORT = 9300;, +    private static final int GLOBAL_HTTP_BASE_PORT = 19200;, +, +, +    /** a per-JVM unique offset to be used for calculating unique port ranges. */, +    public static final int JVM_BASE_PORT_OFFEST = PORTS_PER_JVM * (JVM_ORDINAL + 1);, +, +    private static final AtomicInteger clusterOrdinal = new AtomicInteger();, +    private final int CLUSTER_BASE_PORT_OFFSET = JVM_BASE_PORT_OFFEST + (clusterOrdinal.getAndIncrement() * PORTS_PER_CLUSTER) % PORTS_PER_JVM;, +, +    public final int TRANSPORT_BASE_PORT = GLOBAL_TRANSPORT_BASE_PORT + CLUSTER_BASE_PORT_OFFSET;, +    public final int HTTP_BASE_PORT = GLOBAL_HTTP_BASE_PORT + CLUSTER_BASE_PORT_OFFSET;, +, +        builder.put("transport.tcp.port", TRANSPORT_BASE_PORT + "-" + (TRANSPORT_BASE_PORT + PORTS_PER_CLUSTER));, +        builder.put("http.port", HTTP_BASE_PORT + "-" + (HTTP_BASE_PORT + PORTS_PER_CLUSTER));, +++ b/core/src/test/java/org/elasticsearch/test/discovery/ClusterDiscoveryConfiguration.java, +            return 30000 + InternalTestCluster.JVM_BASE_PORT_OFFEST;, +++ b/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java, +    /**, +     * The number of ports in the range used for this cluster, +     */, +    public static final int PORTS_PER_CLUSTER = 20;, +, +    private static final int GLOBAL_TRANSPORT_BASE_PORT = 9300;, +    private static final int GLOBAL_HTTP_BASE_PORT = 19200;, +, +, +    /** a per-JVM unique offset to be used for calculating unique port ranges. */, +    public static final int JVM_BASE_PORT_OFFEST = PORTS_PER_JVM * (JVM_ORDINAL + 1);, +, +    private static final AtomicInteger clusterOrdinal = new AtomicInteger();, +    private final int CLUSTER_BASE_PORT_OFFSET = JVM_BASE_PORT_OFFEST + (clusterOrdinal.getAndIncrement() * PORTS_PER_CLUSTER) % PORTS_PER_JVM;, +, +    public final int TRANSPORT_BASE_PORT = GLOBAL_TRANSPORT_BASE_PORT + CLUSTER_BASE_PORT_OFFSET;, +    public final int HTTP_BASE_PORT = GLOBAL_HTTP_BASE_PORT + CLUSTER_BASE_PORT_OFFSET;, +, +        builder.put("transport.tcp.port", TRANSPORT_BASE_PORT + "-" + (TRANSPORT_BASE_PORT + PORTS_PER_CLUSTER));, +        builder.put("http.port", HTTP_BASE_PORT + "-" + (HTTP_BASE_PORT + PORTS_PER_CLUSTER));, +++ b/core/src/test/java/org/elasticsearch/test/discovery/ClusterDiscoveryConfiguration.java, +            return 30000 + InternalTestCluster.JVM_BASE_PORT_OFFEST;, +++ b/core/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java, +import java.util.*;, +        // TODO: this is not ideal - we should have a way to make sure ports are initialized in the same way, +        assertClusters(cluster0, cluster1, false);, +    /**, +     * a set of settings that are expected to have different values betweem clusters, even they have been initialized with the same, +     * base settins., +     */, +    final static Set<String> clusterUniqueSettings = new HashSet<>();, +, +    static {, +        clusterUniqueSettings.add(ClusterName.SETTING);, +        clusterUniqueSettings.add("transport.tcp.port");, +        clusterUniqueSettings.add("http.port");, +        clusterUniqueSettings.add("http.port");, +    }, +, +    public static void assertClusters(InternalTestCluster cluster0, InternalTestCluster cluster1, boolean checkClusterUniqueSettings) {, +        assertSettings(defaultSettings0, defaultSettings1, checkClusterUniqueSettings);, +        if (checkClusterUniqueSettings) {, +    public static void assertSettings(Settings left, Settings right, boolean checkClusterUniqueSettings) {, +            if (clusterUniqueSettings.contains(entry.getKey()) && checkClusterUniqueSettings == false) {, +++ b/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java, +    /**, +     * The number of ports in the range used for this cluster, +     */, +    public static final int PORTS_PER_CLUSTER = 20;, +, +    private static final int GLOBAL_TRANSPORT_BASE_PORT = 9300;, +    private static final int GLOBAL_HTTP_BASE_PORT = 19200;, +, +, +    /** a per-JVM unique offset to be used for calculating unique port ranges. */]