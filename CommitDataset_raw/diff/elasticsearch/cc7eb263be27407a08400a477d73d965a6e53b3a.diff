[+++ b/src/main/java/org/elasticsearch/Version.java, +    public boolean before(Version version) {, +        return version.id < id;, +    }, +, +    public boolean onOrBefore(Version version) {, +        return version.id <= id;, +    }, +, +++ b/src/main/java/org/elasticsearch/Version.java, +    public boolean before(Version version) {, +        return version.id < id;, +    }, +, +    public boolean onOrBefore(Version version) {, +        return version.id <= id;, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +        nodeName = in.readString().intern();, +        nodeId = in.readString().intern();, +            builder.put(in.readString().intern(), in.readString().intern());, +        out.writeString(nodeName);, +        out.writeString(nodeId);, +            out.writeString(entry.getKey());, +            out.writeString(entry.getValue());, +++ b/src/main/java/org/elasticsearch/Version.java, +    public boolean before(Version version) {, +        return version.id < id;, +    }, +, +    public boolean onOrBefore(Version version) {, +        return version.id <= id;, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +        nodeName = in.readString().intern();, +        nodeId = in.readString().intern();, +            builder.put(in.readString().intern(), in.readString().intern());, +        out.writeString(nodeName);, +        out.writeString(nodeId);, +            out.writeString(entry.getKey());, +            out.writeString(entry.getValue());, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +    public void skip(int length) {, +        int newcount = count + length;, +        if (newcount > buf.length) {, +            buf = Arrays.copyOf(buf, Bytes.oversize(newcount, 1));, +        }, +        count = newcount;, +    }, +, +++ b/src/main/java/org/elasticsearch/Version.java, +    public boolean before(Version version) {, +        return version.id < id;, +    }, +, +    public boolean onOrBefore(Version version) {, +        return version.id <= id;, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +        nodeName = in.readString().intern();, +        nodeId = in.readString().intern();, +            builder.put(in.readString().intern(), in.readString().intern());, +        out.writeString(nodeName);, +        out.writeString(nodeId);, +            out.writeString(entry.getKey());, +            out.writeString(entry.getValue());, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +    public void skip(int length) {, +        int newcount = count + length;, +        if (newcount > buf.length) {, +            buf = Arrays.copyOf(buf, Bytes.oversize(newcount, 1));, +        }, +        count = newcount;, +    }, +, +++ b/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +import org.elasticsearch.transport.support.TransportStatus;, +            status = TransportStatus.setRequest(status);, +            boolean isRequest = TransportStatus.isRequest(status);, +                    if (TransportStatus.isError(status)) {, +++ b/src/main/java/org/elasticsearch/Version.java, +    public boolean before(Version version) {, +        return version.id < id;, +    }, +, +    public boolean onOrBefore(Version version) {, +        return version.id <= id;, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +        nodeName = in.readString().intern();, +        nodeId = in.readString().intern();, +            builder.put(in.readString().intern(), in.readString().intern());, +        out.writeString(nodeName);, +        out.writeString(nodeId);, +            out.writeString(entry.getKey());, +            out.writeString(entry.getValue());]