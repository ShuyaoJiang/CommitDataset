[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +import org.elasticsearch.common.settings.SettingsException;, +import java.util.regex.PatternSyntaxException;, +            try {, +            } catch (PatternSyntaxException e) {, +                throw new SettingsException("Bad regex in [" + SETTING_CORS_ALLOW_ORIGIN.getKey() + "]: [" + origin + "]", e);, +            }, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +import org.elasticsearch.common.settings.SettingsException;, +import java.util.regex.PatternSyntaxException;, +            try {, +            } catch (PatternSyntaxException e) {, +                throw new SettingsException("Bad regex in [" + SETTING_CORS_ALLOW_ORIGIN.getKey() + "]: [" + origin + "]", e);, +            }, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java, +import org.elasticsearch.common.settings.SettingsException;, +import java.util.regex.PatternSyntaxException;, +    public void testCorsConfigWithBadRegex() {, +        final Settings settings = Settings.builder(), +            .put(SETTING_CORS_ENABLED.getKey(), true), +            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), "/[*/"), +            .put(SETTING_CORS_ALLOW_CREDENTIALS.getKey(), true), +            .build();, +        SettingsException e = expectThrows(SettingsException.class, () -> Netty4HttpServerTransport.buildCorsConfig(settings));, +        assertThat(e.getMessage(), containsString("Bad regex in [http.cors.allow-origin]: [/[*/]"));, +        assertThat(e.getCause(), instanceOf(PatternSyntaxException.class));, +    }, +, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +import org.elasticsearch.common.settings.SettingsException;, +import java.util.regex.PatternSyntaxException;, +            try {, +            } catch (PatternSyntaxException e) {, +                throw new SettingsException("Bad regex in [" + SETTING_CORS_ALLOW_ORIGIN.getKey() + "]: [" + origin + "]", e);, +            }, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java, +import org.elasticsearch.common.settings.SettingsException;, +import java.util.regex.PatternSyntaxException;, +    public void testCorsConfigWithBadRegex() {, +        final Settings settings = Settings.builder(), +            .put(SETTING_CORS_ENABLED.getKey(), true), +            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), "/[*/"), +            .put(SETTING_CORS_ALLOW_CREDENTIALS.getKey(), true), +            .build();, +        SettingsException e = expectThrows(SettingsException.class, () -> Netty4HttpServerTransport.buildCorsConfig(settings));, +        assertThat(e.getMessage(), containsString("Bad regex in [http.cors.allow-origin]: [/[*/]"));, +        assertThat(e.getCause(), instanceOf(PatternSyntaxException.class));, +    }, +, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpServerTransport.java, +import org.elasticsearch.common.settings.SettingsException;, +import java.util.regex.PatternSyntaxException;, +            try {, +            } catch (PatternSyntaxException e) {, +                throw new SettingsException("Bad regex in [" + SETTING_CORS_ALLOW_ORIGIN.getKey() + "]: [" + origin + "]", e);, +            }, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +import org.elasticsearch.common.settings.SettingsException;, +import java.util.regex.PatternSyntaxException;, +            try {, +            } catch (PatternSyntaxException e) {, +                throw new SettingsException("Bad regex in [" + SETTING_CORS_ALLOW_ORIGIN.getKey() + "]: [" + origin + "]", e);, +            }, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java, +import org.elasticsearch.common.settings.SettingsException;, +import java.util.regex.PatternSyntaxException;, +    public void testCorsConfigWithBadRegex() {, +        final Settings settings = Settings.builder(), +            .put(SETTING_CORS_ENABLED.getKey(), true), +            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), "/[*/"), +            .put(SETTING_CORS_ALLOW_CREDENTIALS.getKey(), true), +            .build();, +        SettingsException e = expectThrows(SettingsException.class, () -> Netty4HttpServerTransport.buildCorsConfig(settings));, +        assertThat(e.getMessage(), containsString("Bad regex in [http.cors.allow-origin]: [/[*/]"));, +        assertThat(e.getCause(), instanceOf(PatternSyntaxException.class));, +    }, +, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpServerTransport.java, +import org.elasticsearch.common.settings.SettingsException;, +import java.util.regex.PatternSyntaxException;, +            try {, +            } catch (PatternSyntaxException e) {, +                throw new SettingsException("Bad regex in [" + SETTING_CORS_ALLOW_ORIGIN.getKey() + "]: [" + origin + "]", e);, +            }, +++ b/plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java, +import org.elasticsearch.common.settings.SettingsException;, +import java.util.regex.PatternSyntaxException;, +    public void testCorsConfigWithBadRegex() {, +        final Settings settings = Settings.builder(), +            .put(SETTING_CORS_ENABLED.getKey(), true), +            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), "/[*/"), +            .put(SETTING_CORS_ALLOW_CREDENTIALS.getKey(), true), +            .build();, +        SettingsException e = expectThrows(SettingsException.class, () -> NioHttpServerTransport.buildCorsConfig(settings));, +        assertThat(e.getMessage(), containsString("Bad regex in [http.cors.allow-origin]: [/[*/]"));, +        assertThat(e.getCause(), instanceOf(PatternSyntaxException.class));, +    }, +]