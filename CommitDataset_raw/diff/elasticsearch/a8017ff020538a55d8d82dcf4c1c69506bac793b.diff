[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    List<Object> dependencies = new ArrayList<>(), +, +, +    /** Add dependencies that must be run before the first task setting up the cluster. */, +    @Input, +    void dependsOn(Object... deps) {, +        dependencies.addAll(deps), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    List<Object> dependencies = new ArrayList<>(), +, +, +    /** Add dependencies that must be run before the first task setting up the cluster. */, +    @Input, +    void dependsOn(Object... deps) {, +        dependencies.addAll(deps), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Task cleanup = project.tasks.create(name: "${prefix}#prepareCluster.cleanShared", type: Delete, dependsOn: config.dependencies) {, +            startTasks.add(configureNode(project, prefix, runner, dependsOn, node, config, distro, nodes.get(0))), +    static Task configureNode(Project project, String prefix, Task runner, Object dependsOn, NodeInfo node, ClusterConfiguration config,, +                              Configuration distribution, NodeInfo seedNode) {, +        setup = configureExtractTask(taskName(prefix, node, 'extract'), project, setup, node, distribution), +            for (Object dependency : config.dependencies) {, +                if (dependency instanceof Fixture) {, +                    Task depStop = ((Fixture)dependency).stopTask, +                    runner.finalizedBy(depStop), +                    start.finalizedBy(depStop), +                }, +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    List<Object> dependencies = new ArrayList<>(), +, +, +    /** Add dependencies that must be run before the first task setting up the cluster. */, +    @Input, +    void dependsOn(Object... deps) {, +        dependencies.addAll(deps), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Task cleanup = project.tasks.create(name: "${prefix}#prepareCluster.cleanShared", type: Delete, dependsOn: config.dependencies) {, +            startTasks.add(configureNode(project, prefix, runner, dependsOn, node, config, distro, nodes.get(0))), +    static Task configureNode(Project project, String prefix, Task runner, Object dependsOn, NodeInfo node, ClusterConfiguration config,, +                              Configuration distribution, NodeInfo seedNode) {, +        setup = configureExtractTask(taskName(prefix, node, 'extract'), project, setup, node, distribution), +            for (Object dependency : config.dependencies) {, +                if (dependency instanceof Fixture) {, +                    Task depStop = ((Fixture)dependency).stopTask, +                    runner.finalizedBy(depStop), +                    start.finalizedBy(depStop), +                }, +            }, +++ b/distribution/build.gradle, +    dependsOn project.assemble, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    List<Object> dependencies = new ArrayList<>(), +, +, +    /** Add dependencies that must be run before the first task setting up the cluster. */, +    @Input, +    void dependsOn(Object... deps) {, +        dependencies.addAll(deps), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Task cleanup = project.tasks.create(name: "${prefix}#prepareCluster.cleanShared", type: Delete, dependsOn: config.dependencies) {, +            startTasks.add(configureNode(project, prefix, runner, dependsOn, node, config, distro, nodes.get(0))), +    static Task configureNode(Project project, String prefix, Task runner, Object dependsOn, NodeInfo node, ClusterConfiguration config,, +                              Configuration distribution, NodeInfo seedNode) {, +        setup = configureExtractTask(taskName(prefix, node, 'extract'), project, setup, node, distribution), +            for (Object dependency : config.dependencies) {, +                if (dependency instanceof Fixture) {, +                    Task depStop = ((Fixture)dependency).stopTask, +                    runner.finalizedBy(depStop), +                    start.finalizedBy(depStop), +                }, +            }, +++ b/distribution/build.gradle, +    dependsOn project.assemble, +++ b/plugins/discovery-file/build.gradle, +    dependsOn setupSeedNodeAndUnicastHostsFile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    List<Object> dependencies = new ArrayList<>(), +, +, +    /** Add dependencies that must be run before the first task setting up the cluster. */, +    @Input, +    void dependsOn(Object... deps) {, +        dependencies.addAll(deps), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Task cleanup = project.tasks.create(name: "${prefix}#prepareCluster.cleanShared", type: Delete, dependsOn: config.dependencies) {, +            startTasks.add(configureNode(project, prefix, runner, dependsOn, node, config, distro, nodes.get(0))), +    static Task configureNode(Project project, String prefix, Task runner, Object dependsOn, NodeInfo node, ClusterConfiguration config,, +                              Configuration distribution, NodeInfo seedNode) {, +        setup = configureExtractTask(taskName(prefix, node, 'extract'), project, setup, node, distribution), +            for (Object dependency : config.dependencies) {, +                if (dependency instanceof Fixture) {, +                    Task depStop = ((Fixture)dependency).stopTask, +                    runner.finalizedBy(depStop)]