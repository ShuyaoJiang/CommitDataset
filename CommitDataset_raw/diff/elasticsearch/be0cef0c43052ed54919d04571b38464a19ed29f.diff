[+++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_type` configuration can no longer be changed., +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_type` configuration can no longer be changed., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0)) {, +                throw new MapperParsingException(NAME + " is not configurable");, +            }, +        if (writePre2xSettings == false) {, +            return builder;, +        }, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_type` configuration can no longer be changed., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0)) {, +                throw new MapperParsingException(NAME + " is not configurable");, +            }, +        if (writePre2xSettings == false) {, +            return builder;, +        }, +++ b/src/test/java/org/elasticsearch/count/query/CountQueryTests.java, +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        assertAcked(prepareCreate("test").setSettings(indexSettings), +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_type` configuration can no longer be changed., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0)) {, +                throw new MapperParsingException(NAME + " is not configurable");, +            }, +        if (writePre2xSettings == false) {, +            return builder;, +        }, +++ b/src/test/java/org/elasticsearch/count/query/CountQueryTests.java, +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        assertAcked(prepareCreate("test").setSettings(indexSettings), +++ b/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_type` configuration can no longer be changed., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0)) {, +                throw new MapperParsingException(NAME + " is not configurable");, +            }, +        if (writePre2xSettings == false) {, +            return builder;, +        }, +++ b/src/test/java/org/elasticsearch/count/query/CountQueryTests.java, +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        assertAcked(prepareCreate("test").setSettings(indexSettings), +++ b/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java, +++ b/src/test/java/org/elasticsearch/index/mapper/simple/test-mapping.json, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_type` configuration can no longer be changed., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0)) {, +                throw new MapperParsingException(NAME + " is not configurable");, +            }, +        if (writePre2xSettings == false) {, +            return builder;, +        }, +++ b/src/test/java/org/elasticsearch/count/query/CountQueryTests.java, +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        assertAcked(prepareCreate("test").setSettings(indexSettings), +++ b/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java, +++ b/src/test/java/org/elasticsearch/index/mapper/simple/test-mapping.json, +++ b/src/test/java/org/elasticsearch/search/query/SearchQueryTests.java, +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        assertAcked(prepareCreate("test").setSettings(indexSettings), +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_type` configuration can no longer be changed., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0)) {, +                throw new MapperParsingException(NAME + " is not configurable");, +            }, +        if (writePre2xSettings == false) {, +            return builder;, +        }, +++ b/src/test/java/org/elasticsearch/count/query/CountQueryTests.java, +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        assertAcked(prepareCreate("test").setSettings(indexSettings), +++ b/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java, +++ b/src/test/java/org/elasticsearch/index/mapper/simple/test-mapping.json, +++ b/src/test/java/org/elasticsearch/search/query/SearchQueryTests.java, +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        assertAcked(prepareCreate("test").setSettings(indexSettings), +++ b/src/test/java/org/elasticsearch/search/suggest/ContextSuggestSearchTests.java, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_type` configuration can no longer be changed., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0)) {, +                throw new MapperParsingException(NAME + " is not configurable");, +            }, +        if (writePre2xSettings == false) {, +            return builder;]