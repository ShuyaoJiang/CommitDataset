[+++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdCache.java, +                // we can use #lkey() since this is called from a synchronized block, +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdCache.java, +                // we can use #lkey() since this is called from a synchronized block, +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdReaderTypeCache.java, +            // We can't use #lget() here since the idToDoc map shared across threads, so we really need a second lookup..., +            // BTW: This method is only used via TopChildrenQuery, +            return idToDoc.get(uid);, +            // we can use #lkey() since this is called from a synchronized block, +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdCache.java, +                // we can use #lkey() since this is called from a synchronized block, +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdReaderTypeCache.java, +            // We can't use #lget() here since the idToDoc map shared across threads, so we really need a second lookup..., +            // BTW: This method is only used via TopChildrenQuery, +            return idToDoc.get(uid);, +            // we can use #lkey() since this is called from a synchronized block, +++ b/src/test/java/org/elasticsearch/search/child/SimpleChildQuerySearchTests.java, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.atomic.AtomicReference;, +    }, +    @Test, +    // The SimpleIdReaderTypeCache#docById method used lget, which can't be used if a map is shared., +    public void testTopChildrenBug_concurrencyIssue() throws Exception {, +        client().admin().indices().prepareCreate("test"), +                .setSettings(, +                        ImmutableSettings.settingsBuilder(), +                                .put("index.number_of_shards", 1), +                                .put("index.number_of_replicas", 0), +                ).execute().actionGet();, +        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();, +        client().admin().indices().preparePutMapping("test").setType("child").setSource(jsonBuilder().startObject().startObject("type"), +                .startObject("_parent").field("type", "parent").endObject(), +                .endObject().endObject()).execute().actionGet();, +, +        // index simple data, +        client().prepareIndex("test", "parent", "p1").setSource("p_field", "p_value1").execute().actionGet();, +        client().prepareIndex("test", "parent", "p2").setSource("p_field", "p_value2").execute().actionGet();, +        client().prepareIndex("test", "child", "c1").setParent("p1").setSource("c_field", "blue").execute().actionGet();, +        client().prepareIndex("test", "child", "c2").setParent("p1").setSource("c_field", "red").execute().actionGet();, +        client().prepareIndex("test", "child", "c3").setParent("p2").setSource("c_field", "red").execute().actionGet();, +        client().admin().indices().prepareRefresh("test").execute().actionGet();, +, +        int numThreads = 10;, +        final CountDownLatch latch = new CountDownLatch(numThreads);, +        final AtomicReference<AssertionError> holder = new AtomicReference<AssertionError>();, +        Runnable r = new Runnable() {, +            @Override, +            public void run() {, +                try {, +                    for (int i = 0; i < 100; i++) {, +                        SearchResponse searchResponse = client().prepareSearch("test"), +                                .setQuery(topChildrenQuery("child", termQuery("c_field", "blue"))), +                                .execute().actionGet();, +                        assertNoFailures(searchResponse);, +                        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));, +, +                        searchResponse = client().prepareSearch("test"), +                                .setQuery(topChildrenQuery("child", termQuery("c_field", "red"))), +                                .execute().actionGet();, +                        assertNoFailures(searchResponse);, +                        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));, +                    }, +                } catch (AssertionError error) {, +                    holder.set(error);, +                } finally {, +                    latch.countDown();, +                }, +            }, +        };, +, +        for (int i = 0; i < 10; i++) {, +            new Thread(r).start();, +        }, +        latch.await();, +        if (holder.get() != null) {, +            throw holder.get();, +        }]