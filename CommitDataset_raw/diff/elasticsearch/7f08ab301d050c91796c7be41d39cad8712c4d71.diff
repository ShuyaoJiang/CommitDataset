[+++ b/src/main/java/org/elasticsearch/rest/action/search/RestSearchScrollAction.java, +import org.elasticsearch.common.bytes.BytesArray;, +        if (request.hasContent() || request.hasParam("source")) {, +            XContentType type = contentType(request);, +                    scrollId = bodyContent(request).toUtf8();, +                buildFromContent(bodyContent(request), searchScrollRequest);, +    private XContentType contentType(final RestRequest request) {, +        if (request.hasContent()) {, +            return XContentFactory.xContentType(request.content());, +        } else if (request.hasParam("source")) {, +            return XContentFactory.xContentType(request.param("source"));, +        }, +        throw new ElasticsearchIllegalArgumentException("Can't guess contentType neither source nor content available");, +    }, +, +    private BytesReference bodyContent(final RestRequest request) {, +        if (request.hasContent()) {, +            return request.content();, +        } else if (request.hasParam("source")) {, +            return new BytesArray(request.param("source"));, +        }, +        throw new ElasticsearchIllegalArgumentException("Can't guess contentType neither source nor content available");, +    }, +, +, +++ b/src/main/java/org/elasticsearch/rest/action/search/RestSearchScrollAction.java, +import org.elasticsearch.common.bytes.BytesArray;, +        if (request.hasContent() || request.hasParam("source")) {, +            XContentType type = contentType(request);, +                    scrollId = bodyContent(request).toUtf8();, +                buildFromContent(bodyContent(request), searchScrollRequest);, +    private XContentType contentType(final RestRequest request) {, +        if (request.hasContent()) {, +            return XContentFactory.xContentType(request.content());, +        } else if (request.hasParam("source")) {, +            return XContentFactory.xContentType(request.param("source"));, +        }, +        throw new ElasticsearchIllegalArgumentException("Can't guess contentType neither source nor content available");, +    }, +, +    private BytesReference bodyContent(final RestRequest request) {, +        if (request.hasContent()) {, +            return request.content();, +        } else if (request.hasParam("source")) {, +            return new BytesArray(request.param("source"));, +        }, +        throw new ElasticsearchIllegalArgumentException("Can't guess contentType neither source nor content available");, +    }, +, +, +++ b/src/test/java/org/elasticsearch/test/rest/ElasticsearchRestTestCase.java, +, +    // don't look any further: NO TOUCHY!, +    , +    public static class Rest0Tests extends ElasticsearchRestTestCase {, +        public Rest0Tests(@Name("yaml") RestTestCandidate testCandidate) {, +            super(testCandidate);, +        }, +        @ParametersFactory, +        public static Iterable<Object[]> parameters() throws IOException, RestTestParseException {, +            return createParameters(0, 8);, +        }, +    }, +    , +    public static class Rest1Tests extends ElasticsearchRestTestCase {, +        public Rest1Tests(@Name("yaml") RestTestCandidate testCandidate) {, +            super(testCandidate);, +        }, +        @ParametersFactory, +        public static Iterable<Object[]> parameters() throws IOException, RestTestParseException {, +            return createParameters(1, 8);, +        }, +    }, +    , +    public static class Rest2Tests extends ElasticsearchRestTestCase {, +        public Rest2Tests(@Name("yaml") RestTestCandidate testCandidate) {, +            super(testCandidate);, +        }, +        @ParametersFactory, +        public static Iterable<Object[]> parameters() throws IOException, RestTestParseException {, +            return createParameters(2, 8);, +        }, +    }, +    , +    public static class Rest3Tests extends ElasticsearchRestTestCase {, +        public Rest3Tests(@Name("yaml") RestTestCandidate testCandidate) {, +            super(testCandidate);, +        }, +        @ParametersFactory, +        public static Iterable<Object[]> parameters() throws IOException, RestTestParseException {, +            return createParameters(3, 8);, +        }, +    }, +    , +    public static class Rest4Tests extends ElasticsearchRestTestCase {, +        public Rest4Tests(@Name("yaml") RestTestCandidate testCandidate) {, +            super(testCandidate);, +        }, +        @ParametersFactory, +        public static Iterable<Object[]> parameters() throws IOException, RestTestParseException {]