[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +     * This rule is needed for multiple reasons:, +     * 3. composite agg (used for GROUP BY) allows ordering only on the group keys, +    // check whether an orderBy failed or if it occurs on a non-key, +                o.order().forEach(oe -> {, +                    Expression e = oe.child();, +                    // cannot order by aggregates (not supported by composite), +                    if (Functions.isAggregate(e)) {, +                        missing.put(e, oe);, +                        return;, +                    }, +, +                    // make sure to compare attributes directly, +                    if (Expressions.anyMatch(a.groupings(), , +                            g -> e.semanticEquals(e instanceof Attribute ? Expressions.attribute(g) : g))) {, +                        return;, +                    }, +, +                    // nothing matched, cannot group by it, +                    missing.put(e, oe);, +                });, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +     * This rule is needed for multiple reasons:, +     * 3. composite agg (used for GROUP BY) allows ordering only on the group keys, +    // check whether an orderBy failed or if it occurs on a non-key, +                o.order().forEach(oe -> {, +                    Expression e = oe.child();, +                    // cannot order by aggregates (not supported by composite), +                    if (Functions.isAggregate(e)) {, +                        missing.put(e, oe);, +                        return;, +                    }, +, +                    // make sure to compare attributes directly, +                    if (Expressions.anyMatch(a.groupings(), , +                            g -> e.semanticEquals(e instanceof Attribute ? Expressions.attribute(g) : g))) {, +                        return;, +                    }, +, +                    // nothing matched, cannot group by it, +                    missing.put(e, oe);, +                });, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java, +        assertEquals("1:50: Cannot order by non-grouped column [YEAR(date [UTC])], expected [text]",, +, +    public void testGroupByOrderByNonKey() {, +        assertEquals("1:52: Cannot order by non-grouped column [a], expected [bool]",, +                verify("SELECT AVG(int) a FROM test GROUP BY bool ORDER BY a"));, +    }, +, +    public void testGroupByOrderByFunctionOverKey() {, +        assertEquals("1:44: Cannot order by non-grouped column [MAX(int)], expected [int]",, +                verify("SELECT int FROM test GROUP BY int ORDER BY MAX(int)"));, +    }, +, +    public void testGroupByOrderByScore() {, +        assertEquals("1:44: Cannot order by non-grouped column [SCORE()], expected [int]",, +                verify("SELECT int FROM test GROUP BY int ORDER BY SCORE()"));, +    }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +     * This rule is needed for multiple reasons:, +     * 3. composite agg (used for GROUP BY) allows ordering only on the group keys, +    // check whether an orderBy failed or if it occurs on a non-key, +                o.order().forEach(oe -> {, +                    Expression e = oe.child();, +                    // cannot order by aggregates (not supported by composite), +                    if (Functions.isAggregate(e)) {, +                        missing.put(e, oe);, +                        return;, +                    }, +, +                    // make sure to compare attributes directly, +                    if (Expressions.anyMatch(a.groupings(), , +                            g -> e.semanticEquals(e instanceof Attribute ? Expressions.attribute(g) : g))) {, +                        return;, +                    }, +, +                    // nothing matched, cannot group by it, +                    missing.put(e, oe);, +                });, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java, +        assertEquals("1:50: Cannot order by non-grouped column [YEAR(date [UTC])], expected [text]",, +, +    public void testGroupByOrderByNonKey() {, +        assertEquals("1:52: Cannot order by non-grouped column [a], expected [bool]",, +                verify("SELECT AVG(int) a FROM test GROUP BY bool ORDER BY a"));, +    }, +, +    public void testGroupByOrderByFunctionOverKey() {, +        assertEquals("1:44: Cannot order by non-grouped column [MAX(int)], expected [int]",, +                verify("SELECT int FROM test GROUP BY int ORDER BY MAX(int)"));, +    }, +, +    public void testGroupByOrderByScore() {, +        assertEquals("1:44: Cannot order by non-grouped column [SCORE()], expected [int]",, +                verify("SELECT int FROM test GROUP BY int ORDER BY SCORE()"));, +    }, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/VerifierErrorMessagesTests.java, +, +    //]