[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;, +    static Request restoreSnapshot(RestoreSnapshotRequest restoreSnapshotRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot"), +            .addPathPart(restoreSnapshotRequest.repository()), +            .addPathPart(restoreSnapshotRequest.snapshot()), +            .addPathPartAsIs("_restore"), +            .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(restoreSnapshotRequest.masterNodeTimeout());, +        parameters.withWaitForCompletion(restoreSnapshotRequest.waitForCompletion());, +        request.setEntity(createEntity(restoreSnapshotRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;, +    static Request restoreSnapshot(RestoreSnapshotRequest restoreSnapshotRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot"), +            .addPathPart(restoreSnapshotRequest.repository()), +            .addPathPart(restoreSnapshotRequest.snapshot()), +            .addPathPartAsIs("_restore"), +            .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(restoreSnapshotRequest.masterNodeTimeout());, +        parameters.withWaitForCompletion(restoreSnapshotRequest.waitForCompletion());, +        request.setEntity(createEntity(restoreSnapshotRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;, +import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;, +     * Restores a snapshot., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     *, +     * @param restoreSnapshotRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public RestoreSnapshotResponse restore(RestoreSnapshotRequest restoreSnapshotRequest, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(restoreSnapshotRequest, RequestConverters::restoreSnapshot, options,, +            RestoreSnapshotResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously restores a snapshot., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     *, +     * @param restoreSnapshotRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void restoreAsync(RestoreSnapshotRequest restoreSnapshotRequest, RequestOptions options,, +                            ActionListener<RestoreSnapshotResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(restoreSnapshotRequest, RequestConverters::restoreSnapshot, options,, +            RestoreSnapshotResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;, +    static Request restoreSnapshot(RestoreSnapshotRequest restoreSnapshotRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot"), +            .addPathPart(restoreSnapshotRequest.repository()), +            .addPathPart(restoreSnapshotRequest.snapshot()), +            .addPathPartAsIs("_restore"), +            .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(restoreSnapshotRequest.masterNodeTimeout());, +        parameters.withWaitForCompletion(restoreSnapshotRequest.waitForCompletion());, +        request.setEntity(createEntity(restoreSnapshotRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;, +import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse;, +     * Restores a snapshot., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     *, +     * @param restoreSnapshotRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public RestoreSnapshotResponse restore(RestoreSnapshotRequest restoreSnapshotRequest, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(restoreSnapshotRequest, RequestConverters::restoreSnapshot, options,, +            RestoreSnapshotResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously restores a snapshot.]