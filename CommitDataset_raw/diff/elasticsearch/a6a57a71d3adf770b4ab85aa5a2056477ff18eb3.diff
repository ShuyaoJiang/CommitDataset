[+++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AbstractNioChannel.java, +                socketChannel.close();, +    @Override, +    public void close() {, +        getContext().closeChannel();, +    }, +, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AbstractNioChannel.java, +                socketChannel.close();, +    @Override, +    public void close() {, +        getContext().closeChannel();, +    }, +, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptorEventHandler.java, +        nioServerChannel.getContext().acceptChannel(nioSocketChannel);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AbstractNioChannel.java, +                socketChannel.close();, +    @Override, +    public void close() {, +        getContext().closeChannel();, +    }, +, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptorEventHandler.java, +        nioServerChannel.getContext().acceptChannel(nioSocketChannel);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +public class BytesChannelContext extends SocketChannelContext {, +    public BytesChannelContext(NioSocketChannel channel, BiConsumer<NioSocketChannel, Exception> exceptionHandler,, +                               ReadConsumer readConsumer, InboundChannelBuffer channelBuffer) {, +        super(channel, exceptionHandler);, +        int bytesRead = readFromChannel(channelBuffer.sliceBuffersFrom(channelBuffer.getIndex()));, +        if (bytesRead == 0) {, +        return isPeerClosed() || hasIOException() || isClosing.get();, +    public void closeFromSelector() throws IOException {, +        if (channel.isOpen()) {, +            IOException channelCloseException = null;, +            try {, +                channel.closeFromSelector();, +            } catch (IOException e) {, +                channelCloseException = e;, +            }, +            if (channelCloseException != null) {, +                throw channelCloseException;, +            }, +        }, +            int written = flushToChannel(headOp.getBuffersToWrite());, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AbstractNioChannel.java, +                socketChannel.close();, +    @Override, +    public void close() {, +        getContext().closeChannel();, +    }, +, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptorEventHandler.java, +        nioServerChannel.getContext().acceptChannel(nioSocketChannel);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +public class BytesChannelContext extends SocketChannelContext {, +    public BytesChannelContext(NioSocketChannel channel, BiConsumer<NioSocketChannel, Exception> exceptionHandler,, +                               ReadConsumer readConsumer, InboundChannelBuffer channelBuffer) {, +        super(channel, exceptionHandler);, +        int bytesRead = readFromChannel(channelBuffer.sliceBuffersFrom(channelBuffer.getIndex()));, +        if (bytesRead == 0) {, +        return isPeerClosed() || hasIOException() || isClosing.get();, +    public void closeFromSelector() throws IOException {, +        if (channel.isOpen()) {, +            IOException channelCloseException = null;, +            try {, +                channel.closeFromSelector();, +            } catch (IOException e) {, +                channelCloseException = e;, +            }, +            if (channelCloseException != null) {, +                throw channelCloseException;, +            }, +        }, +            int written = flushToChannel(headOp.getBuffersToWrite());, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/ChannelContext.java, +    /**, +     * Schedules a channel to be closed by the selector event loop with which it is registered., +     *, +     * If the channel is open and the state can be transitioned to closed, the close operation will, +     * be scheduled with the event loop., +     *, +     * Depending on the underlying protocol of the channel, a close operation might simply close the socket, +     * channel or may involve reading and writing messages., +     */, +    void closeChannel();, +, +    void handleException(Exception e);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AbstractNioChannel.java, +                socketChannel.close();, +    @Override, +    public void close() {, +        getContext().closeChannel();, +    }, +, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptorEventHandler.java, +        nioServerChannel.getContext().acceptChannel(nioSocketChannel);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/BytesChannelContext.java, +public class BytesChannelContext extends SocketChannelContext {]