[+++ b/build.gradle, +      project.configurations.compileOnly.dependencies.findAll().toSorted(sortClosure).each(depJavadocClosure), +++ b/build.gradle, +      project.configurations.compileOnly.dependencies.findAll().toSorted(sortClosure).each(depJavadocClosure), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        // we want to test compileOnly deps!, +        project.configurations.testCompile.extendsFrom(project.configurations.compileOnly), +, +        project.configurations.compileOnly.dependencies.all(disableTransitiveDeps), +        } - project.configurations.compileOnly, +++ b/build.gradle, +      project.configurations.compileOnly.dependencies.findAll().toSorted(sortClosure).each(depJavadocClosure), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        // we want to test compileOnly deps!, +        project.configurations.testCompile.extendsFrom(project.configurations.compileOnly), +, +        project.configurations.compileOnly.dependencies.all(disableTransitiveDeps), +        } - project.configurations.compileOnly, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            compileOnly "org.elasticsearch:elasticsearch:${project.versions.elasticsearch}", +            compileOnly "org.locationtech.spatial4j:spatial4j:${project.versions.spatial4j}", +            compileOnly "com.vividsolutions:jts:${project.versions.jts}", +            compileOnly "org.apache.logging.log4j:log4j-api:${project.versions.log4j}", +            compileOnly "org.apache.logging.log4j:log4j-core:${project.versions.log4j}", +            compileOnly "org.elasticsearch:jna:${project.versions.jna}", +            from project.configurations.runtime - project.configurations.compileOnly // the dep jars, +++ b/build.gradle, +      project.configurations.compileOnly.dependencies.findAll().toSorted(sortClosure).each(depJavadocClosure), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        // we want to test compileOnly deps!, +        project.configurations.testCompile.extendsFrom(project.configurations.compileOnly), +, +        project.configurations.compileOnly.dependencies.all(disableTransitiveDeps), +        } - project.configurations.compileOnly, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            compileOnly "org.elasticsearch:elasticsearch:${project.versions.elasticsearch}", +            compileOnly "org.locationtech.spatial4j:spatial4j:${project.versions.spatial4j}", +            compileOnly "com.vividsolutions:jts:${project.versions.jts}", +            compileOnly "org.apache.logging.log4j:log4j-api:${project.versions.log4j}", +            compileOnly "org.apache.logging.log4j:log4j-core:${project.versions.log4j}", +            compileOnly "org.elasticsearch:jna:${project.versions.jna}", +            from project.configurations.runtime - project.configurations.compileOnly // the dep jars, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/NamingConventionsTask.groovy, +        FileCollection classpath = project.files(project.configurations.namingConventions,, +                                                 project.sourceSets.test.compileClasspath,, +                                                 project.sourceSets.test.output), +        dependsOn(classpath), +                args('-cp', classpath.asPath, 'org.elasticsearch.test.NamingConventionsCheck'), +++ b/build.gradle, +      project.configurations.compileOnly.dependencies.findAll().toSorted(sortClosure).each(depJavadocClosure), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        // we want to test compileOnly deps!, +        project.configurations.testCompile.extendsFrom(project.configurations.compileOnly), +, +        project.configurations.compileOnly.dependencies.all(disableTransitiveDeps), +        } - project.configurations.compileOnly, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            compileOnly "org.elasticsearch:elasticsearch:${project.versions.elasticsearch}", +            compileOnly "org.locationtech.spatial4j:spatial4j:${project.versions.spatial4j}", +            compileOnly "com.vividsolutions:jts:${project.versions.jts}", +            compileOnly "org.apache.logging.log4j:log4j-api:${project.versions.log4j}", +            compileOnly "org.apache.logging.log4j:log4j-core:${project.versions.log4j}", +            compileOnly "org.elasticsearch:jna:${project.versions.jna}", +            from project.configurations.runtime - project.configurations.compileOnly // the dep jars, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/NamingConventionsTask.groovy, +        FileCollection classpath = project.files(project.configurations.namingConventions,, +                                                 project.sourceSets.test.compileClasspath,, +                                                 project.sourceSets.test.output), +        dependsOn(classpath), +                args('-cp', classpath.asPath, 'org.elasticsearch.test.NamingConventionsCheck'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +            Configuration configuration = project.configurations.findByName('runtime'), +            Configuration compileOnly = project.configurations.findByName('compileOnly'), +                configuration = project.configurations.findByName('testCompile'), +            assert configuration != null, +            if (compileOnly == null) {, +            } else {, +                classpath = project.files(configuration, compileOnly), +            }, +            if (compileOnly != null) {, +                jars -= compileOnly, +++ b/build.gradle, +      project.configurations.compileOnly.dependencies.findAll().toSorted(sortClosure).each(depJavadocClosure), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        // we want to test compileOnly deps!, +        project.configurations.testCompile.extendsFrom(project.configurations.compileOnly), +, +        project.configurations.compileOnly.dependencies.all(disableTransitiveDeps), +        } - project.configurations.compileOnly, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            compileOnly "org.elasticsearch:elasticsearch:${project.versions.elasticsearch}", +            compileOnly "org.locationtech.spatial4j:spatial4j:${project.versions.spatial4j}", +            compileOnly "com.vividsolutions:jts:${project.versions.jts}", +            compileOnly "org.apache.logging.log4j:log4j-api:${project.versions.log4j}", +            compileOnly "org.apache.logging.log4j:log4j-core:${project.versions.log4j}", +            compileOnly "org.elasticsearch:jna:${project.versions.jna}", +            from project.configurations.runtime - project.configurations.compileOnly // the dep jars, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/NamingConventionsTask.groovy, +        FileCollection classpath = project.files(project.configurations.namingConventions,, +                                                 project.sourceSets.test.compileClasspath,]