[+++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +        if (this.isDeprecated() && this.exists(settings) && settings.addDeprecatedSetting(this)) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +        if (this.isDeprecated() && this.exists(settings) && settings.addDeprecatedSetting(this)) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +import java.util.concurrent.ConcurrentHashMap;, +     * The set of deprecated settings tracked by this settings object., +     */, +    private final Set<String> deprecatedSettings = Collections.newSetFromMap(new ConcurrentHashMap<>());, +, +    /**, +     * Add the setting as a tracked deprecated setting., +     *, +     * @param setting the deprecated setting to track, +     * @return true if the setting was not already tracked as a deprecated setting, otherwise false, +     */, +    boolean addDeprecatedSetting(final Setting setting) {, +        assert setting.isDeprecated() && setting.exists(this) : setting.getKey();, +        return deprecatedSettings.add(setting.getKey());, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +        if (this.isDeprecated() && this.exists(settings) && settings.addDeprecatedSetting(this)) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +import java.util.concurrent.ConcurrentHashMap;, +     * The set of deprecated settings tracked by this settings object., +     */, +    private final Set<String> deprecatedSettings = Collections.newSetFromMap(new ConcurrentHashMap<>());, +, +    /**, +     * Add the setting as a tracked deprecated setting., +     *, +     * @param setting the deprecated setting to track, +     * @return true if the setting was not already tracked as a deprecated setting, otherwise false, +     */, +    boolean addDeprecatedSetting(final Setting setting) {, +        assert setting.isDeprecated() && setting.exists(this) : setting.getKey();, +        return deprecatedSettings.add(setting.getKey());, +    }, +, +    /**, +++ b/core/src/test/java/org/elasticsearch/common/settings/SettingTests.java, +    public void testDeprecatedSetting() {, +        final Setting<Boolean> deprecatedSetting = Setting.boolSetting("deprecated.foo.bar", false, Property.Deprecated);, +        final Settings settings = Settings.builder().put("deprecated.foo.bar", true).build();, +        final int iterations = randomIntBetween(0, 128);, +        for (int i = 0; i < iterations; i++) {, +            deprecatedSetting.get(settings);, +        }, +        if (iterations > 0) {, +            /*, +             * This tests that we log the deprecation warning exactly one time, otherwise we would have to assert the deprecation warning, +             * for each usage of the setting., +             */, +            assertSettingDeprecationsAndWarnings(new Setting[]{deprecatedSetting});, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +        if (this.isDeprecated() && this.exists(settings) && settings.addDeprecatedSetting(this)) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +import java.util.concurrent.ConcurrentHashMap;, +     * The set of deprecated settings tracked by this settings object., +     */, +    private final Set<String> deprecatedSettings = Collections.newSetFromMap(new ConcurrentHashMap<>());, +, +    /**, +     * Add the setting as a tracked deprecated setting., +     *, +     * @param setting the deprecated setting to track, +     * @return true if the setting was not already tracked as a deprecated setting, otherwise false, +     */, +    boolean addDeprecatedSetting(final Setting setting) {, +        assert setting.isDeprecated() && setting.exists(this) : setting.getKey();, +        return deprecatedSettings.add(setting.getKey());, +    }, +, +    /**, +++ b/core/src/test/java/org/elasticsearch/common/settings/SettingTests.java, +    public void testDeprecatedSetting() {, +        final Setting<Boolean> deprecatedSetting = Setting.boolSetting("deprecated.foo.bar", false, Property.Deprecated);, +        final Settings settings = Settings.builder().put("deprecated.foo.bar", true).build();, +        final int iterations = randomIntBetween(0, 128);, +        for (int i = 0; i < iterations; i++) {, +            deprecatedSetting.get(settings);, +        }, +        if (iterations > 0) {, +            /*, +             * This tests that we log the deprecation warning exactly one time, otherwise we would have to assert the deprecation warning, +             * for each usage of the setting., +             */, +            assertSettingDeprecationsAndWarnings(new Setting[]{deprecatedSetting});, +        }, +    }, +, +++ b/qa/smoke-test-http/src/test/java/org/elasticsearch/http/DeprecationHttpIT.java, +import org.elasticsearch.test.ESIntegTestCase;, +@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST)]