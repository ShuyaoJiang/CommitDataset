[+++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealmTests.java, +import org.apache.lucene.util.Constants;, +import org.elasticsearch.protocol.xpack.security.User;, +import java.nio.ByteBuffer;, +import java.nio.channels.SeekableByteChannel;, +import java.nio.file.StandardOpenOption;, +import java.nio.file.attribute.FileAttribute;, +import java.nio.file.attribute.PosixFilePermission;, +import java.util.EnumSet;, +    public void testKerberosRealmThrowsErrorWhenKeytabPathIsConfiguredAsDirectory() throws IOException {, +        final String keytabPath = dir.resolve(dirName).toString();, +        final String expectedErrorMessage = "configured service key tab file [" + keytabPath + "] is a directory";, +, +        assertKerberosRealmConstructorFails(keytabPath, expectedErrorMessage);, +    }, +, +    public void testKerberosRealmThrowsErrorWhenKeytabFileDoesNotExist() throws IOException {, +        final String keytabPath = dir.resolve(randomAlphaOfLength(5) + ".keytab").toString();, +        final String expectedErrorMessage = "configured service key tab file [" + keytabPath + "] does not exist";, +, +        assertKerberosRealmConstructorFails(keytabPath, expectedErrorMessage);, +    }, +, +    public void testKerberosRealmThrowsErrorWhenKeytabFileHasNoReadPermissions() throws IOException {, +        assumeFalse("Not running this test on Windows, as it requires additional access permissions for test framework.",, +                Constants.WINDOWS);, +        final Set<String> supportedAttributes = dir.getFileSystem().supportedFileAttributeViews();, +        final String keytabFileName = randomAlphaOfLength(5) + ".keytab";, +        final Path keytabPath;, +            final Set<PosixFilePermission> filePerms = PosixFilePermissions.fromString("---------");, +            final FileAttribute<Set<PosixFilePermission>> fileAttributes = PosixFilePermissions.asFileAttribute(filePerms);, +            try (SeekableByteChannel byteChannel = Files.newByteChannel(dir.resolve(keytabFileName),, +                    EnumSet.of(StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE), fileAttributes)) {, +                byteChannel.write(ByteBuffer.wrap(randomByteArrayOfLength(10)));, +            }, +            keytabPath = dir.resolve(keytabFileName);, +                            dir.resolve(keytabFileName), supportedAttributes));, +        final String expectedErrorMessage = "configured service key tab file [" + keytabPath + "] must have read permission";, +, +        assertKerberosRealmConstructorFails(keytabPath.toString(), expectedErrorMessage);, +    private void assertKerberosRealmConstructorFails(final String keytabPath, final String expectedErrorMessage) {]