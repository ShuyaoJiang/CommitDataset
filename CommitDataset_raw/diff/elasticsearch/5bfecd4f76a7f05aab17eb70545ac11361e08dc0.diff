[+++ b/.gitignore, +generated-resources/, +++ b/.gitignore, +generated-resources/, +++ /dev/null, +++ b/.gitignore, +generated-resources/, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +generated-resources/, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +generated-resources/, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +if (projectsPrefix.isEmpty()) {, +  task cleanEclipseSettings(type: Delete) {, +    delete '.settings', +  }, +  task copyEclipseSettings(type: Copy) {, +    // TODO: "package this up" for external builds, +    from new File(project.rootDir, 'buildSrc/src/main/resources/eclipse.settings'), +    into '.settings', +  }, +  // otherwise .settings is not nuked entirely, +  tasks.cleanEclipse.dependsOn(cleanEclipseSettings), +  tasks.eclipse.dependsOn(copyEclipseSettings), +++ b/.gitignore, +generated-resources/, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +if (projectsPrefix.isEmpty()) {, +  task cleanEclipseSettings(type: Delete) {, +    delete '.settings', +  }, +  task copyEclipseSettings(type: Copy) {, +    // TODO: "package this up" for external builds, +    from new File(project.rootDir, 'buildSrc/src/main/resources/eclipse.settings'), +    into '.settings', +  }, +  // otherwise .settings is not nuked entirely, +  tasks.cleanEclipse.dependsOn(cleanEclipseSettings), +  tasks.eclipse.dependsOn(copyEclipseSettings), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        project.sourceSets.test {, +            output.dir(buildProperties.generatedResourcesDir, builtBy: 'pluginProperties'), +            resources {, +                srcDir pluginMetadata, +            }, +++ b/.gitignore, +generated-resources/, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +if (projectsPrefix.isEmpty()) {, +  task cleanEclipseSettings(type: Delete) {, +    delete '.settings', +  }, +  task copyEclipseSettings(type: Copy) {, +    // TODO: "package this up" for external builds, +    from new File(project.rootDir, 'buildSrc/src/main/resources/eclipse.settings'), +    into '.settings', +  }, +  // otherwise .settings is not nuked entirely, +  tasks.cleanEclipse.dependsOn(cleanEclipseSettings), +  tasks.eclipse.dependsOn(copyEclipseSettings), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        project.sourceSets.test {, +            output.dir(buildProperties.generatedResourcesDir, builtBy: 'pluginProperties'), +            resources {, +                srcDir pluginMetadata, +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +import org.gradle.api.Task, +import org.gradle.api.tasks.Copy, +class PluginPropertiesTask extends Copy {, +    File generatedResourcesDir = new File(project.projectDir, 'generated-resources'), +        File templateFile = new File(project.buildDir, 'templates/plugin-descriptor.properties'), +        Task copyPluginPropertiesTemplate = project.tasks.create('copyPluginPropertiesTemplate') {, +            doLast {, +                InputStream resourceTemplate = PluginPropertiesTask.getResourceAsStream('/plugin-descriptor.properties'), +                templateFile.parentFile.mkdirs(), +                templateFile.setText(resourceTemplate.getText('UTF-8'), 'UTF-8'), +            }, +        }, +        dependsOn(copyPluginPropertiesTemplate), +        project.clean {, +            delete generatedResourcesDir, +        }, +            // check require properties are set, +                doFirst {, +                    if (extension.jvm && extension.isolated == false) {]