[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/audit/index/IndexAuditTrail.java, +import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRequest;, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingResponse;, +import org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateResponse;, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +    private final Lock putMappingLock = new ReentrantLock();, +            ClusterStateResponse response = client.admin().cluster().prepareState().execute().actionGet();, +            return canStart(response.getState(), master);, +                putTemplate(customAuditIndexSettings(settings));, +    }, +    void putTemplate(Settings customSettings) {, +            PutIndexTemplateRequest request = new PutIndexTemplateRequest(INDEX_TEMPLATE_NAME).source(template);, +            assert !Thread.currentThread().isInterrupted() : "current thread has been interrupted before putting index template!!!";, +, +            PutIndexTemplateResponse response = client.admin().indices().putTemplate(request).actionGet();, +            if (!response.isAcknowledged()) {, +                throw new IllegalStateException("failed to put index template for audit logging");, +            }, +, +            DateTime dateTime;, +            Message message = eventQueue.peek();, +            String index = resolve(INDEX_NAME_PREFIX, dateTime, rollover);, +            IndicesExistsRequest existsRequest = new IndicesExistsRequest(index);, +            if (client.admin().indices().exists(existsRequest).get().isExists()) {, +                PutMappingRequest putMappingRequest = new PutMappingRequest(index).type(DOC_TYPE).source(request.mappings().get(DOC_TYPE));, +                PutMappingResponse putMappingResponse = client.admin().indices().putMapping(putMappingRequest).get();, +                if (!putMappingResponse.isAcknowledged()) {, +                    throw new IllegalStateException("failed to put mappings for audit logging index [" + index + "]");, +                }, +        } catch (Exception e) {, +            logger.debug("unexpected exception while putting index template", e);, +            throw new IllegalStateException("failed to load [" + INDEX_TEMPLATE_NAME + ".json]", e);, +        State state = state();, +        if (state != State.STARTED || indexToRemoteCluster) {, +            return;, +        }, +, +        if (clusterChangedEvent.localNodeMaster() == false) {, +            return;, +        }, +        if (clusterChangedEvent.state().metaData().templates().get(INDEX_TEMPLATE_NAME) == null) {, +            threadPool.generic().execute(new AbstractRunnable() {, +                public void onFailure(Exception e) {, +                    logger.error((Supplier<?>) () -> new ParameterizedMessage(, +                            "failed to update security audit index template [{}]", INDEX_TEMPLATE_NAME), e);, +                protected void doRun() throws Exception {, +                    final boolean locked = putMappingLock.tryLock();, +                    if (locked) {, +                        try {, +                            putTemplate(customAuditIndexSettings(settings));, +                        } finally {, +                            putMappingLock.unlock();, +                        }, +                    } else {, +                        logger.trace("unable to PUT security audit index template as the lock is already held");, +                    }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/audit/index/IndexAuditTrail.java, +import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsRequest;, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingResponse;, +import org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateResponse;, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +    private final Lock putMappingLock = new ReentrantLock();, +            ClusterStateResponse response = client.admin().cluster().prepareState().execute().actionGet();, +            return canStart(response.getState(), master);, +                putTemplate(customAuditIndexSettings(settings));, +    }, +    void putTemplate(Settings customSettings) {, +            PutIndexTemplateRequest request = new PutIndexTemplateRequest(INDEX_TEMPLATE_NAME).source(template);, +            assert !Thread.currentThread().isInterrupted() : "current thread has been interrupted before putting index template!!!";, +, +            PutIndexTemplateResponse response = client.admin().indices().putTemplate(request).actionGet();, +            if (!response.isAcknowledged()) {, +                throw new IllegalStateException("failed to put index template for audit logging");, +            }, +, +            DateTime dateTime;, +            Message message = eventQueue.peek();, +            String index = resolve(INDEX_NAME_PREFIX, dateTime, rollover);, +            IndicesExistsRequest existsRequest = new IndicesExistsRequest(index);, +            if (client.admin().indices().exists(existsRequest).get().isExists()) {, +                PutMappingRequest putMappingRequest = new PutMappingRequest(index).type(DOC_TYPE).source(request.mappings().get(DOC_TYPE));, +                PutMappingResponse putMappingResponse = client.admin().indices().putMapping(putMappingRequest).get();, +                if (!putMappingResponse.isAcknowledged()) {, +                    throw new IllegalStateException("failed to put mappings for audit logging index [" + index + "]");, +                }, +        } catch (Exception e) {, +            logger.debug("unexpected exception while putting index template", e);, +            throw new IllegalStateException("failed to load [" + INDEX_TEMPLATE_NAME + ".json]", e);, +        State state = state();, +        if (state != State.STARTED || indexToRemoteCluster) {, +            return;, +        }, +, +        if (clusterChangedEvent.localNodeMaster() == false) {]