[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.cluster.action.shard.NoOpShardStateActionListener;, +, +                replicationPhase = new ReplicationPhase(shardsIt, primaryResponse.v2(), primaryResponse.v1(), observer, primary, internalRequest, listener, indexShardReference);, +    final class ReplicationPhase extends AbstractRunnable implements ShardStateAction.Listener {, +                                InternalRequest internalRequest, ActionListener<Response> listener, Releasable indexShardReference) {, +        @Override, +        public void onShardFailedNoMaster() {, +, +        }, +, +        @Override, +        public void onShardFailedFailure(DiscoveryNode master, TransportException e) {, +, +        }, +, +                                logger.trace("[{}] transport failure during replica request [{}] ", exp, node, replicaRequest);, +                                if (ignoreReplicaException(exp) == false) {, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(), "failed to perform " + actionName + " on replica on node " + node, exp, ReplicationPhase.this);, +, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.cluster.action.shard.NoOpShardStateActionListener;, +, +                replicationPhase = new ReplicationPhase(shardsIt, primaryResponse.v2(), primaryResponse.v1(), observer, primary, internalRequest, listener, indexShardReference);, +    final class ReplicationPhase extends AbstractRunnable implements ShardStateAction.Listener {, +                                InternalRequest internalRequest, ActionListener<Response> listener, Releasable indexShardReference) {, +        @Override, +        public void onShardFailedNoMaster() {, +, +        }, +, +        @Override, +        public void onShardFailedFailure(DiscoveryNode master, TransportException e) {, +, +        }, +, +                                logger.trace("[{}] transport failure during replica request [{}] ", exp, node, replicaRequest);, +                                if (ignoreReplicaException(exp) == false) {, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(), "failed to perform " + actionName + " on replica on node " + node, exp, ReplicationPhase.this);, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.indices.store.IndicesStore;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.cluster.action.shard.NoOpShardStateActionListener;, +, +                replicationPhase = new ReplicationPhase(shardsIt, primaryResponse.v2(), primaryResponse.v1(), observer, primary, internalRequest, listener, indexShardReference);, +    final class ReplicationPhase extends AbstractRunnable implements ShardStateAction.Listener {, +                                InternalRequest internalRequest, ActionListener<Response> listener, Releasable indexShardReference) {, +        @Override, +        public void onShardFailedNoMaster() {, +, +        }, +, +        @Override, +        public void onShardFailedFailure(DiscoveryNode master, TransportException e) {, +, +        }, +, +                                logger.trace("[{}] transport failure during replica request [{}] ", exp, node, replicaRequest);, +                                if (ignoreReplicaException(exp) == false) {, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(), "failed to perform " + actionName + " on replica on node " + node, exp, ReplicationPhase.this);, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.indices.store.IndicesStore;, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure, listener);, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure, listener);, +    private void innerShardFailed(final ShardRouting shardRouting, final String indexUUID, final DiscoveryNode masterNode, final String message, final Throwable failure, Listener listener) {, +                SHARD_FAILED_ACTION_NAME, shardRoutingEntry, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.cluster.action.shard.NoOpShardStateActionListener;, +, +                replicationPhase = new ReplicationPhase(shardsIt, primaryResponse.v2(), primaryResponse.v1(), observer, primary, internalRequest, listener, indexShardReference);, +    final class ReplicationPhase extends AbstractRunnable implements ShardStateAction.Listener {, +                                InternalRequest internalRequest, ActionListener<Response> listener, Releasable indexShardReference) {, +        @Override, +        public void onShardFailedNoMaster() {, +, +        }, +, +        @Override, +        public void onShardFailedFailure(DiscoveryNode master, TransportException e) {, +, +        }, +, +                                logger.trace("[{}] transport failure during replica request [{}] ", exp, node, replicaRequest);, +                                if (ignoreReplicaException(exp) == false) {, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(), "failed to perform " + actionName + " on replica on node " + node, exp, ReplicationPhase.this);, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.indices.store.IndicesStore;, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure, listener);, +        innerShardFailed(shardRouting, indexUUID, masterNode, message, failure, listener);, +    private void innerShardFailed(final ShardRouting shardRouting, final String indexUUID, final DiscoveryNode masterNode, final String message, final Throwable failure, Listener listener) {, +                SHARD_FAILED_ACTION_NAME, shardRoutingEntry, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +                        primaryShard, internalRequest, listener, reference);, +                if (randomBoolean()) {, +        assertThat("failed to see enough shard failures", transport.capturedRequests().length, equalTo(criticalFailures));]