[+++ b/core/src/main/java/org/elasticsearch/gateway/Gateway.java, +++ b/core/src/main/java/org/elasticsearch/gateway/Gateway.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +    private final NodeEnvironment nodeEnvironment;, +     * Returns the {@link NodeEnvironment} instance of this node, +     */, +    public NodeEnvironment getNodeEnvironment() {, +        return nodeEnvironment;, +    }, +, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/gateway/Gateway.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +    private final NodeEnvironment nodeEnvironment;, +     * Returns the {@link NodeEnvironment} instance of this node, +     */, +    public NodeEnvironment getNodeEnvironment() {, +        return nodeEnvironment;, +    }, +, +, +    /**, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java, +        String nodeName = internalCluster().startNode(nodeSettings);, +++ b/core/src/main/java/org/elasticsearch/gateway/Gateway.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +    private final NodeEnvironment nodeEnvironment;, +     * Returns the {@link NodeEnvironment} instance of this node, +     */, +    public NodeEnvironment getNodeEnvironment() {, +        return nodeEnvironment;, +    }, +, +, +    /**, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java, +        String nodeName = internalCluster().startNode(nodeSettings);, +++ b/core/src/test/java/org/elasticsearch/gateway/GatewayIndexStateIT.java, +            public boolean clearData(String nodeName) {, +                return node_1.equals(nodeName);, +++ b/core/src/main/java/org/elasticsearch/gateway/Gateway.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +    private final NodeEnvironment nodeEnvironment;, +     * Returns the {@link NodeEnvironment} instance of this node, +     */, +    public NodeEnvironment getNodeEnvironment() {, +        return nodeEnvironment;, +    }, +, +, +    /**, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java, +        String nodeName = internalCluster().startNode(nodeSettings);, +++ b/core/src/test/java/org/elasticsearch/gateway/GatewayIndexStateIT.java, +            public boolean clearData(String nodeName) {, +                return node_1.equals(nodeName);, +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.cluster.node.DiscoveryNode.Role;, +        buildNode.startNode();, +        logger.info("changing cluster size from {} data nodes to {}", size, n);, +    private NodeAndClient buildNode(Settings settings) {, +        return buildNode(ord, random.nextLong(), settings, false);, +        return buildNode(ord, random.nextLong(), null, false);, +    private NodeAndClient buildNode(int nodeId, long seed, Settings settings, boolean reuseExisting) {, +        return new NodeAndClient(name, node, nodeId);, +            suffix = suffix + Role.MASTER.getAbbreviation();, +            suffix = suffix + Role.DATA.getAbbreviation();, +    public synchronized String startCoordinatingOnlyNode(Settings settings) {, +        return startNode(builder);, +    public synchronized void close() {, +        private final int nodeAndClientId;, +        NodeAndClient(String name, MockNode node, int nodeAndClientId) {, +            this.nodeAndClientId = nodeAndClientId;, +            markNodeDataDirsAsNotEligableForWipe(node);, +        public int nodeAndClientId() {, +            return nodeAndClientId;, +        }, +, +        void startNode() {, +            node.start();, +        }, +, +            markNodeDataDirsAsPendingForWipe(node);, +        void restart(RestartCallback callback, boolean clearDataIfNeeded) throws Exception {, +            if (clearDataIfNeeded) {, +                clearDataIfNeeded(callback);, +            createNewNode(newSettings);, +            startNode();, +        private void clearDataIfNeeded(RestartCallback callback) throws IOException {, +            if (callback.clearData(name)) {, +                NodeEnvironment nodeEnv = node.getNodeEnvironment();, +                if (nodeEnv.hasNodeFile()) {, +                    final Path[] locations = nodeEnv.nodeDataPaths();, +                    logger.debug("removing node data paths: [{}]", (Object[]) locations);, +                    IOUtils.rm(locations);, +                }, +            }, +        }]