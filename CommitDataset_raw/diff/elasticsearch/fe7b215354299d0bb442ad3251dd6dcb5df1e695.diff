[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/calendars/ScheduledEvent.java, +                return Instant.ofEpochMilli(p.longValue());, +                return Instant.ofEpochMilli(TimeUtils.dateStringToEpoch(p.text()));, +                return Instant.ofEpochMilli(p.longValue());, +                return Instant.ofEpochMilli(TimeUtils.dateStringToEpoch(p.text()));, +    private final Instant startTime;, +    private final Instant endTime;, +    ScheduledEvent(String description, Instant startTime, Instant endTime, String calendarId, @Nullable String eventId) {, +        startTime = Instant.ofEpochMilli(in.readVLong());, +        endTime = Instant.ofEpochMilli(in.readVLong());, +    public Instant getStartTime() {, +    public Instant getEndTime() {, +        long bucketStartTime = Intervals.alignToFloor(getStartTime().getEpochSecond(), bucketSpanSecs);, +        long bucketEndTime = Intervals.alignToCeil(getEndTime().getEpochSecond(), bucketSpanSecs);, +        out.writeVLong(startTime.toEpochMilli());, +        out.writeVLong(endTime.toEpochMilli());, +        builder.timeField(START_TIME.getPreferredName(), START_TIME.getPreferredName() + "_string", startTime.toEpochMilli());, +        builder.timeField(END_TIME.getPreferredName(), END_TIME.getPreferredName() + "_string", endTime.toEpochMilli());, +                && Objects.equals(startTime.getEpochSecond(), other.startTime.getEpochSecond()), +                && Objects.equals(endTime.getEpochSecond(), other.endTime.getEpochSecond()), +        private Instant startTime;, +        private Instant endTime;, +        public Builder startTime(Instant startTime) {, +        public Builder endTime(Instant endTime) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/calendars/ScheduledEvent.java, +                return Instant.ofEpochMilli(p.longValue());, +                return Instant.ofEpochMilli(TimeUtils.dateStringToEpoch(p.text()));, +                return Instant.ofEpochMilli(p.longValue());, +                return Instant.ofEpochMilli(TimeUtils.dateStringToEpoch(p.text()));, +    private final Instant startTime;, +    private final Instant endTime;, +    ScheduledEvent(String description, Instant startTime, Instant endTime, String calendarId, @Nullable String eventId) {, +        startTime = Instant.ofEpochMilli(in.readVLong());, +        endTime = Instant.ofEpochMilli(in.readVLong());, +    public Instant getStartTime() {, +    public Instant getEndTime() {, +        long bucketStartTime = Intervals.alignToFloor(getStartTime().getEpochSecond(), bucketSpanSecs);, +        long bucketEndTime = Intervals.alignToCeil(getEndTime().getEpochSecond(), bucketSpanSecs);, +        out.writeVLong(startTime.toEpochMilli());, +        out.writeVLong(endTime.toEpochMilli());, +        builder.timeField(START_TIME.getPreferredName(), START_TIME.getPreferredName() + "_string", startTime.toEpochMilli());, +        builder.timeField(END_TIME.getPreferredName(), END_TIME.getPreferredName() + "_string", endTime.toEpochMilli());, +                && Objects.equals(startTime.getEpochSecond(), other.startTime.getEpochSecond()), +                && Objects.equals(endTime.getEpochSecond(), other.endTime.getEpochSecond()), +        private Instant startTime;, +        private Instant endTime;, +        public Builder startTime(Instant startTime) {, +        public Builder endTime(Instant endTime) {, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/calendars/ScheduledEventTests.java, +import java.time.Instant;, +        Instant start = Instant.ofEpochMilli(Instant.now().toEpochMilli());, +        long eventTime = event.getEndTime().getEpochSecond() - conditionStartTime;, +        Instant now = Instant.now();, +        builder.endTime(now.plusSeconds(1*60*60));, +        builder.endTime(now.minusSeconds(2*60*60));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/calendars/ScheduledEvent.java, +                return Instant.ofEpochMilli(p.longValue());, +                return Instant.ofEpochMilli(TimeUtils.dateStringToEpoch(p.text()));, +                return Instant.ofEpochMilli(p.longValue());, +                return Instant.ofEpochMilli(TimeUtils.dateStringToEpoch(p.text()));, +    private final Instant startTime;, +    private final Instant endTime;, +    ScheduledEvent(String description, Instant startTime, Instant endTime, String calendarId, @Nullable String eventId) {, +        startTime = Instant.ofEpochMilli(in.readVLong());, +        endTime = Instant.ofEpochMilli(in.readVLong());, +    public Instant getStartTime() {, +    public Instant getEndTime() {, +        long bucketStartTime = Intervals.alignToFloor(getStartTime().getEpochSecond(), bucketSpanSecs);, +        long bucketEndTime = Intervals.alignToCeil(getEndTime().getEpochSecond(), bucketSpanSecs);, +        out.writeVLong(startTime.toEpochMilli());, +        out.writeVLong(endTime.toEpochMilli());, +        builder.timeField(START_TIME.getPreferredName(), START_TIME.getPreferredName() + "_string", startTime.toEpochMilli());, +        builder.timeField(END_TIME.getPreferredName(), END_TIME.getPreferredName() + "_string", endTime.toEpochMilli());, +                && Objects.equals(startTime.getEpochSecond(), other.startTime.getEpochSecond()), +                && Objects.equals(endTime.getEpochSecond(), other.endTime.getEpochSecond()), +        private Instant startTime;, +        private Instant endTime;, +        public Builder startTime(Instant startTime) {, +        public Builder endTime(Instant endTime) {, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/calendars/ScheduledEventTests.java, +import java.time.Instant;, +        Instant start = Instant.ofEpochMilli(Instant.now().toEpochMilli());, +        long eventTime = event.getEndTime().getEpochSecond() - conditionStartTime;, +        Instant now = Instant.now();, +        builder.endTime(now.plusSeconds(1*60*60));, +        builder.endTime(now.minusSeconds(2*60*60));, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/ScheduledEventsIT.java, +                .startTime(Instant.ofEpochMilli(firstEventStartTime)), +                .endTime(Instant.ofEpochMilli(firstEventEndTime)), +                .startTime(Instant.ofEpochMilli(secondEventStartTime)), +                .endTime(Instant.ofEpochMilli(secondEventEndTime)), +                .startTime(Instant.ofEpochMilli(thirdEventStartTime)), +                .endTime(Instant.ofEpochMilli(thirdEventEndTime)), +                .startTime(Instant.ofEpochMilli(firstEventStartTime)), +                .endTime((Instant.ofEpochMilli(firstEventEndTime))), +                .startTime((Instant.ofEpochMilli(eventStartTime))), +                .endTime((Instant.ofEpochMilli(eventEndTime))), +                .startTime((Instant.ofEpochMilli(eventStartTime))), +                .endTime((Instant.ofEpochMilli(eventEndTime))), +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/calendars/ScheduledEvent.java]