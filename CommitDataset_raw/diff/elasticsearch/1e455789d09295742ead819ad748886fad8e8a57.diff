[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +        bind(TransportSearchScrollQueryAndFetchAction.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +        bind(TransportSearchScrollQueryAndFetchAction.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchScrollRequest.java, +import org.elasticsearch.util.TimeValue;, +    private boolean listenerThreaded = false;, +    private SearchOperationThreading operationThreading = SearchOperationThreading.SINGLE_THREAD;, +, +    /**, +     * Controls the the search operation threading model., +     */, +    public SearchOperationThreading operationThreading() {, +        return this.operationThreading;, +    }, +, +    /**, +     * Controls the the search operation threading model., +     */, +    public SearchScrollRequest operationThreading(SearchOperationThreading operationThreading) {, +        this.operationThreading = operationThreading;, +        return this;, +    }, +, +    /**, +     * Should the listener be called on a separate thread if needed., +     */, +        return listenerThreaded;, +    /**, +     * Should the listener be called on a separate thread if needed., +     */, +    @Override public SearchScrollRequest listenerThreaded(boolean threadedListener) {, +        this.listenerThreaded = threadedListener;, +        return this;, +    /**, +     * The scroll id used to scroll the search., +     */, +    /**, +     * If set, will enable scrolling of the search request., +     */, +    /**, +     * If set, will enable scrolling of the search request., +     */, +    public SearchScrollRequest scroll(Scroll scroll) {, +        return this;, +    }, +, +    /**, +     * If set, will enable scrolling of the search request for the specified timeout., +     */, +    public SearchScrollRequest scroll(TimeValue keepAlive) {, +        return scroll(new Scroll(keepAlive));, +        operationThreading = SearchOperationThreading.fromId(in.readByte());, +        out.writeByte(operationThreading.id());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +        bind(TransportSearchScrollQueryAndFetchAction.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchScrollRequest.java, +import org.elasticsearch.util.TimeValue;, +    private boolean listenerThreaded = false;, +    private SearchOperationThreading operationThreading = SearchOperationThreading.SINGLE_THREAD;, +, +    /**, +     * Controls the the search operation threading model., +     */, +    public SearchOperationThreading operationThreading() {, +        return this.operationThreading;, +    }, +, +    /**, +     * Controls the the search operation threading model., +     */, +    public SearchScrollRequest operationThreading(SearchOperationThreading operationThreading) {, +        this.operationThreading = operationThreading;, +        return this;, +    }, +, +    /**, +     * Should the listener be called on a separate thread if needed., +     */, +        return listenerThreaded;, +    /**, +     * Should the listener be called on a separate thread if needed., +     */, +    @Override public SearchScrollRequest listenerThreaded(boolean threadedListener) {, +        this.listenerThreaded = threadedListener;, +        return this;, +    /**, +     * The scroll id used to scroll the search., +     */, +    /**, +     * If set, will enable scrolling of the search request., +     */, +    /**, +     * If set, will enable scrolling of the search request., +     */, +    public SearchScrollRequest scroll(Scroll scroll) {, +        return this;, +    }, +, +    /**]