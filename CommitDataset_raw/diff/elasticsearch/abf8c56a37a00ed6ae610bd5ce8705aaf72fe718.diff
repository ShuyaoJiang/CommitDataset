[+++ b/libs/elasticsearch-nio/build.gradle, +++ b/libs/elasticsearch-nio/build.gradle, +++ /dev/null, +++ b/libs/elasticsearch-nio/build.gradle, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptorEventHandler.java, +import java.util.function.Consumer;, +    public AcceptorEventHandler(Supplier<SocketSelector> selectorSupplier, Consumer<Exception> exceptionHandler) {, +        super(exceptionHandler);, +        context.handleException(exception);, +        context.handleException(exception);, +++ b/libs/elasticsearch-nio/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptorEventHandler.java, +import java.util.function.Consumer;, +    public AcceptorEventHandler(Supplier<SocketSelector> selectorSupplier, Consumer<Exception> exceptionHandler) {, +        super(exceptionHandler);, +        context.handleException(exception);, +        context.handleException(exception);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/ESSelector.java, +                        eventHandler.selectorException(e);, +            eventHandler.selectorException(e);, +++ b/libs/elasticsearch-nio/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptorEventHandler.java, +import java.util.function.Consumer;, +    public AcceptorEventHandler(Supplier<SocketSelector> selectorSupplier, Consumer<Exception> exceptionHandler) {, +        super(exceptionHandler);, +        context.handleException(exception);, +        context.handleException(exception);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/ESSelector.java, +                        eventHandler.selectorException(e);, +            eventHandler.selectorException(e);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/EventHandler.java, +import java.util.function.Consumer;, +    protected final Consumer<Exception> exceptionHandler;, +    protected EventHandler(Consumer<Exception> exceptionHandler) {, +        this.exceptionHandler = exceptionHandler;, +     * This method handles an IOException that was thrown during a call to {@link Selector#select(long)} or, +     * {@link Selector#close()}., +    protected void selectorException(IOException exception) {, +        exceptionHandler.accept(exception);, +     * @param channel that was being closed, +    protected void closeException(ChannelContext<?> channel, Exception exception) {, +        channel.handleException(exception);, +        channel.handleException(exception);, +++ b/libs/elasticsearch-nio/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptorEventHandler.java, +import java.util.function.Consumer;, +    public AcceptorEventHandler(Supplier<SocketSelector> selectorSupplier, Consumer<Exception> exceptionHandler) {, +        super(exceptionHandler);, +        context.handleException(exception);, +        context.handleException(exception);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/ESSelector.java, +                        eventHandler.selectorException(e);, +            eventHandler.selectorException(e);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/EventHandler.java, +import java.util.function.Consumer;, +    protected final Consumer<Exception> exceptionHandler;, +    protected EventHandler(Consumer<Exception> exceptionHandler) {, +        this.exceptionHandler = exceptionHandler;, +     * This method handles an IOException that was thrown during a call to {@link Selector#select(long)} or, +     * {@link Selector#close()}., +    protected void selectorException(IOException exception) {, +        exceptionHandler.accept(exception);, +     * @param channel that was being closed, +    protected void closeException(ChannelContext<?> channel, Exception exception) {, +        channel.handleException(exception);, +        channel.handleException(exception);, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/NioGroup.java, +    public NioGroup(ThreadFactory acceptorThreadFactory, int acceptorCount,, +                    Function<Supplier<SocketSelector>, AcceptorEventHandler> acceptorEventHandlerFunction,, +                    Supplier<SocketEventHandler> socketEventHandlerFunction) throws IOException {, +                SocketSelector selector = new SocketSelector(socketEventHandlerFunction.get());, +                AcceptingSelector acceptor = new AcceptingSelector(acceptorEventHandlerFunction.apply(selectorSupplier));, +++ b/libs/elasticsearch-nio/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-nio/src/main/java/org/elasticsearch/nio/AcceptorEventHandler.java, +import java.util.function.Consumer;, +    public AcceptorEventHandler(Supplier<SocketSelector> selectorSupplier, Consumer<Exception> exceptionHandler) {, +        super(exceptionHandler);, +        context.handleException(exception);]