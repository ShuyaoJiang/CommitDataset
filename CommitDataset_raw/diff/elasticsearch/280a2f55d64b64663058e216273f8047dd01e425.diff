[+++ b/server/src/main/java/org/elasticsearch/index/query/SpanMultiTermQueryBuilder.java, +    static class TopTermSpanBooleanQueryRewriteWithMaxClause extends SpanMultiTermQueryWrapper.SpanRewriteMethod {, +        TopTermSpanBooleanQueryRewriteWithMaxClause() {, +            this.maxExpansions = BooleanQuery.getMaxClauseCount();, +            final MultiTermQuery.RewriteMethod delegate = new ScoringRewrite<List<SpanQuery>>() {, +                        throw new RuntimeException("[" + query.toString() + " ] " +, +            return (SpanQuery) delegate.rewrite(reader, query);, +        }, +                subQuery = prefixQuery;, +        }, +        if (subQuery instanceof MultiTermQuery) {, +            MultiTermQuery multiTermQuery = (MultiTermQuery) subQuery;, +            SpanMultiTermQueryWrapper<?> wrapper = (SpanMultiTermQueryWrapper<?>) spanQuery;, +            if (multiTermQuery.getRewriteMethod() instanceof TopTermsRewrite == false) {, +                wrapper.setRewriteMethod(new TopTermSpanBooleanQueryRewriteWithMaxClause());, +++ b/server/src/main/java/org/elasticsearch/index/query/SpanMultiTermQueryBuilder.java, +    static class TopTermSpanBooleanQueryRewriteWithMaxClause extends SpanMultiTermQueryWrapper.SpanRewriteMethod {, +        TopTermSpanBooleanQueryRewriteWithMaxClause() {, +            this.maxExpansions = BooleanQuery.getMaxClauseCount();, +            final MultiTermQuery.RewriteMethod delegate = new ScoringRewrite<List<SpanQuery>>() {, +                        throw new RuntimeException("[" + query.toString() + " ] " +, +            return (SpanQuery) delegate.rewrite(reader, query);, +        }, +                subQuery = prefixQuery;, +        }, +        if (subQuery instanceof MultiTermQuery) {, +            MultiTermQuery multiTermQuery = (MultiTermQuery) subQuery;, +            SpanMultiTermQueryWrapper<?> wrapper = (SpanMultiTermQueryWrapper<?>) spanQuery;, +            if (multiTermQuery.getRewriteMethod() instanceof TopTermsRewrite == false) {, +                wrapper.setRewriteMethod(new TopTermSpanBooleanQueryRewriteWithMaxClause());, +++ b/server/src/test/java/org/elasticsearch/index/query/SpanMultiTermQueryBuilderTests.java, +import org.apache.lucene.analysis.core.WhitespaceAnalyzer;, +import org.apache.lucene.document.Field;, +import org.apache.lucene.document.TextField;, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.RandomIndexWriter;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.store.Directory;, +import static java.util.Collections.singleton;, +    }, +    public void testTermExpansionExceptionOnSpanFailure() throws Exception {, +        try (Directory directory = newDirectory()) {, +            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory, new WhitespaceAnalyzer())) {, +                for (int i = 0; i < 3; i++) {, +                    iw.addDocument(singleton(new TextField("body", "foo bar" + Integer.toString(i), Field.Store.NO)));, +                }, +                try (IndexReader reader = iw.getReader()) {, +                    int origBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();, +                    BooleanQuery.setMaxClauseCount(1);, +                    try {, +                        QueryBuilder queryBuilder = new SpanMultiTermQueryBuilder(, +                            QueryBuilders.prefixQuery("body", "bar"), +                        );, +                        Query query = queryBuilder.toQuery(createShardContext(reader));, +                        RuntimeException exc = expectThrows(RuntimeException.class, () -> query.rewrite(reader));, +                        assertThat(exc.getMessage(), containsString("maxClauseCount"));, +, +                    } finally {, +                        BooleanQuery.setMaxClauseCount(origBoolMaxClauseCount);, +                    }, +                }, +            }, +        }, +        Query query = QueryBuilders.spanMultiTermQueryBuilder(, +            QueryBuilders.prefixQuery("foo", "b").rewrite("top_terms_boost_2000"), +        ).toQuery(createShardContext());, +++ b/server/src/main/java/org/elasticsearch/index/query/SpanMultiTermQueryBuilder.java, +    static class TopTermSpanBooleanQueryRewriteWithMaxClause extends SpanMultiTermQueryWrapper.SpanRewriteMethod {, +        TopTermSpanBooleanQueryRewriteWithMaxClause() {, +            this.maxExpansions = BooleanQuery.getMaxClauseCount();, +            final MultiTermQuery.RewriteMethod delegate = new ScoringRewrite<List<SpanQuery>>() {, +                        throw new RuntimeException("[" + query.toString() + " ] " +, +            return (SpanQuery) delegate.rewrite(reader, query);, +        }, +                subQuery = prefixQuery;, +        }, +        if (subQuery instanceof MultiTermQuery) {, +            MultiTermQuery multiTermQuery = (MultiTermQuery) subQuery;, +            SpanMultiTermQueryWrapper<?> wrapper = (SpanMultiTermQueryWrapper<?>) spanQuery;, +            if (multiTermQuery.getRewriteMethod() instanceof TopTermsRewrite == false) {, +                wrapper.setRewriteMethod(new TopTermSpanBooleanQueryRewriteWithMaxClause());, +++ b/server/src/test/java/org/elasticsearch/index/query/SpanMultiTermQueryBuilderTests.java, +import org.apache.lucene.analysis.core.WhitespaceAnalyzer;, +import org.apache.lucene.document.Field;, +import org.apache.lucene.document.TextField;, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.RandomIndexWriter;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.store.Directory;, +import static java.util.Collections.singleton;, +    }, +    public void testTermExpansionExceptionOnSpanFailure() throws Exception {, +        try (Directory directory = newDirectory()) {, +            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory, new WhitespaceAnalyzer())) {, +                for (int i = 0; i < 3; i++) {, +                    iw.addDocument(singleton(new TextField("body", "foo bar" + Integer.toString(i), Field.Store.NO)));, +                }, +                try (IndexReader reader = iw.getReader()) {, +                    int origBoolMaxClauseCount = BooleanQuery.getMaxClauseCount();, +                    BooleanQuery.setMaxClauseCount(1);]