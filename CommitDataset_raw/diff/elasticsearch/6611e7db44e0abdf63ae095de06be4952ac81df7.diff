[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +import org.elasticsearch.search.sort.SortParseElement;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +import org.elasticsearch.search.sort.SortParseElement;, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +import org.elasticsearch.search.sort.SortParseElement;, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortParser.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.sort;, +, +import org.apache.lucene.search.SortField;, +import org.elasticsearch.common.lucene.geo.GeoDistance;, +import org.elasticsearch.common.lucene.geo.GeoDistanceDataComparator;, +import org.elasticsearch.common.lucene.geo.GeoHashUtils;, +import org.elasticsearch.common.unit.DistanceUnit;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.mapper.xcontent.XContentGeoPointFieldMapper;, +import org.elasticsearch.search.internal.SearchContext;, +, +/**, + * @author kimchy (shay.banon), + */, +public class GeoDistanceSortParser implements SortParser {, +, +    @Override public String[] names() {, +        return new String[]{"_geo_distance", "_geoDistance"};, +    }, +, +    @Override public SortField parse(XContentParser parser, SearchContext context) throws Exception {, +        String fieldName = null;, +        double lat = Double.NaN;, +        double lon = Double.NaN;, +        DistanceUnit unit = DistanceUnit.KILOMETERS;, +        GeoDistance geoDistance = GeoDistance.ARC;, +        boolean reverse = false;, +, +, +        XContentParser.Token token;, +        String currentName = parser.currentName();, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentName = parser.currentName();, +            } else if (token == XContentParser.Token.START_ARRAY) {, +                token = parser.nextToken();, +                lat = parser.doubleValue();, +                token = parser.nextToken();, +                lon = parser.doubleValue();, +                while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +, +                }, +                fieldName = currentName;, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                // the json in the format of -> field : { lat : 30, lon : 12 }, +                fieldName = currentName;, +                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                    if (token == XContentParser.Token.FIELD_NAME) {, +                        currentName = parser.currentName();, +                    } else if (token.isValue()) {, +                        if (currentName.equals(XContentGeoPointFieldMapper.Names.LAT)) {, +                            lat = parser.doubleValue();, +                        } else if (currentName.equals(XContentGeoPointFieldMapper.Names.LON)) {, +                            lon = parser.doubleValue();, +                        } else if (currentName.equals(XContentGeoPointFieldMapper.Names.GEOHASH)) {, +                            double[] values = GeoHashUtils.decode(parser.text());, +                            lat = values[0];, +                            lon = values[1];, +                        }, +                    }, +                }, +            } else if (token.isValue()) {, +                if ("reverse".equals(currentName)) {, +                    reverse = parser.booleanValue();, +                } else if ("order".equals(currentName)) {, +                    reverse = "desc".equals(parser.text());, +                } else if (currentName.equals("unit")) {, +                    unit = DistanceUnit.fromString(parser.text());, +                } else if (currentName.equals("distance_type") || currentName.equals("distanceType")) {, +                    geoDistance = GeoDistance.fromString(parser.text());, +                } else {, +                    // assume the value is the actual value]