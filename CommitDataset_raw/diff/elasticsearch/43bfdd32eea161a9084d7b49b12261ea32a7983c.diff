[+++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +                            shard.runUnderPrimaryPermit(, +                                    () -> shard.maybeSyncGlobalCheckpoint("background"),, +                                    e -> {, +                                        if (e instanceof AlreadyClosedException == false, +                                                && e instanceof IndexShardClosedException == false) {, +                                            logger.warn(, +                                                    new ParameterizedMessage(, +                                                            "{} failed to execute background global checkpoint sync", shard.shardId()), e);, +                                    ThreadPool.Names.SAME,, +                                    "background global checkpoint sync");, +++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +                            shard.runUnderPrimaryPermit(, +                                    () -> shard.maybeSyncGlobalCheckpoint("background"),, +                                    e -> {, +                                        if (e instanceof AlreadyClosedException == false, +                                                && e instanceof IndexShardClosedException == false) {, +                                            logger.warn(, +                                                    new ParameterizedMessage(, +                                                            "{} failed to execute background global checkpoint sync", shard.shardId()), e);, +                                    ThreadPool.Names.SAME,, +                                    "background global checkpoint sync");, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    /**, +     * Runs the specified runnable under a permit and otherwise calling back the specified failure callback. This method is really a, +     * convenience for {@link #acquirePrimaryOperationPermit(ActionListener, String, Object)} where the listener equates to, +     * try-with-resources closing the releasable after executing the runnable on successfully acquiring the permit, an otherwise calling, +     * back the failure callback., +     *, +     * @param runnable the runnable to execute under permit, +     * @param onFailure the callback on failure, +     * @param executorOnDelay the executor to execute the runnable on if permit acquisition is blocked, +     * @param debugInfo debug info, +     */, +    public void runUnderPrimaryPermit(, +            final Runnable runnable,, +            final Consumer<Exception> onFailure,, +            final String executorOnDelay,, +            final Object debugInfo) {, +        verifyNotClosed();, +        assert shardRouting.primary() : "runUnderPrimaryPermit should only be called on primary shard but was " + shardRouting;, +        final ActionListener<Releasable> onPermitAcquired = ActionListener.wrap(, +                releasable -> {, +                    try (Releasable ignore = releasable) {, +                        runnable.run();, +                    }, +                },, +                onFailure);, +        acquirePrimaryOperationPermit(onPermitAcquired, executorOnDelay, debugInfo);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +                            shard.runUnderPrimaryPermit(, +                                    () -> shard.maybeSyncGlobalCheckpoint("background"),, +                                    e -> {, +                                        if (e instanceof AlreadyClosedException == false, +                                                && e instanceof IndexShardClosedException == false) {, +                                            logger.warn(, +                                                    new ParameterizedMessage(, +                                                            "{} failed to execute background global checkpoint sync", shard.shardId()), e);, +                                    ThreadPool.Names.SAME,, +                                    "background global checkpoint sync");, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    /**, +     * Runs the specified runnable under a permit and otherwise calling back the specified failure callback. This method is really a, +     * convenience for {@link #acquirePrimaryOperationPermit(ActionListener, String, Object)} where the listener equates to, +     * try-with-resources closing the releasable after executing the runnable on successfully acquiring the permit, an otherwise calling, +     * back the failure callback., +     *, +     * @param runnable the runnable to execute under permit, +     * @param onFailure the callback on failure, +     * @param executorOnDelay the executor to execute the runnable on if permit acquisition is blocked, +     * @param debugInfo debug info, +     */, +    public void runUnderPrimaryPermit(, +            final Runnable runnable,, +            final Consumer<Exception> onFailure,, +            final String executorOnDelay,, +            final Object debugInfo) {, +        verifyNotClosed();, +        assert shardRouting.primary() : "runUnderPrimaryPermit should only be called on primary shard but was " + shardRouting;, +        final ActionListener<Releasable> onPermitAcquired = ActionListener.wrap(, +                releasable -> {, +                    try (Releasable ignore = releasable) {, +                        runnable.run();, +                    }, +                },, +                onFailure);, +        acquirePrimaryOperationPermit(onPermitAcquired, executorOnDelay, debugInfo);, +    }, +, +++ b/server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +import java.util.Locale;, +    public void testRunUnderPrimaryPermitRunsUnderPrimaryPermit() throws IOException {, +        final IndexShard indexShard = newStartedShard(true);, +        try {, +            assertThat(indexShard.getActiveOperationsCount(), equalTo(0));, +            indexShard.runUnderPrimaryPermit(, +                    () -> assertThat(indexShard.getActiveOperationsCount(), equalTo(1)),, +                    e -> fail(e.toString()),]