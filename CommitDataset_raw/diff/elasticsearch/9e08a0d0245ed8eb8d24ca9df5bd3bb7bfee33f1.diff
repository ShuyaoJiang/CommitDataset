[+++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    private final List<SettingUpdater> settingUpdaters = new ArrayList<>();, +        for (SettingUpdater settingUpdater : settingUpdaters) {, +            for (SettingUpdater settingUpdater : settingUpdaters) {, +    public Setting get(String key) {, +        if (setting == null) {, +        } else {, +            return setting;, +        }, +        final Setting setting = get(key);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    private final List<SettingUpdater> settingUpdaters = new ArrayList<>();, +        for (SettingUpdater settingUpdater : settingUpdaters) {, +            for (SettingUpdater settingUpdater : settingUpdaters) {, +    public Setting get(String key) {, +        if (setting == null) {, +        } else {, +            return setting;, +        }, +        final Setting setting = get(key);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    final AbstractScopedSettings.SettingUpdater newUpdater(Consumer<T> consumer, ESLogger logger) {, +    AbstractScopedSettings.SettingUpdater newUpdater(Consumer<T> consumer, ESLogger logger, Consumer<T> validator) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    private final List<SettingUpdater> settingUpdaters = new ArrayList<>();, +        for (SettingUpdater settingUpdater : settingUpdaters) {, +            for (SettingUpdater settingUpdater : settingUpdaters) {, +    public Setting get(String key) {, +        if (setting == null) {, +        } else {, +            return setting;, +        }, +        final Setting setting = get(key);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    final AbstractScopedSettings.SettingUpdater newUpdater(Consumer<T> consumer, ESLogger logger) {, +    AbstractScopedSettings.SettingUpdater newUpdater(Consumer<T> consumer, ESLogger logger, Consumer<T> validator) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public static class CommitId implements Writeable<CommitId> {, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    private final List<SettingUpdater> settingUpdaters = new ArrayList<>();, +        for (SettingUpdater settingUpdater : settingUpdaters) {, +            for (SettingUpdater settingUpdater : settingUpdaters) {, +    public Setting get(String key) {, +        if (setting == null) {, +        } else {, +            return setting;, +        }, +        final Setting setting = get(key);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    final AbstractScopedSettings.SettingUpdater newUpdater(Consumer<T> consumer, ESLogger logger) {, +    AbstractScopedSettings.SettingUpdater newUpdater(Consumer<T> consumer, ESLogger logger, Consumer<T> validator) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public static class CommitId implements Writeable<CommitId> {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParser.java, +        ValuesSourceParser<ValuesSource.GeoPoint> vsParser = ValuesSourceParser.geoPoint(aggregationName, InternalGeoHashGrid.TYPE, context), +                .build();, +                @Override, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    private final List<SettingUpdater> settingUpdaters = new ArrayList<>();, +        for (SettingUpdater settingUpdater : settingUpdaters) {, +            for (SettingUpdater settingUpdater : settingUpdaters) {, +    public Setting get(String key) {, +        if (setting == null) {, +        } else {, +            return setting;, +        }, +        final Setting setting = get(key);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    final AbstractScopedSettings.SettingUpdater newUpdater(Consumer<T> consumer, ESLogger logger) {, +    AbstractScopedSettings.SettingUpdater newUpdater(Consumer<T> consumer, ESLogger logger, Consumer<T> validator) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public static class CommitId implements Writeable<CommitId> {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParser.java, +        ValuesSourceParser<ValuesSource.GeoPoint> vsParser = ValuesSourceParser.geoPoint(aggregationName, InternalGeoHashGrid.TYPE, context), +                .build();, +                @Override, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java, +import org.elasticsearch.search.aggregations.support.ValuesSource.Numeric;, +        ValuesSourceParser<Numeric> vsParser = ValuesSourceParser.numeric(aggregationName, InternalDateHistogram.TYPE, context), +        ValuesSourceConfig<Numeric> config = vsParser.config();, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    private final List<SettingUpdater> settingUpdaters = new ArrayList<>();, +        for (SettingUpdater settingUpdater : settingUpdaters) {, +            for (SettingUpdater settingUpdater : settingUpdaters) {, +    public Setting get(String key) {, +        if (setting == null) {, +        } else {, +            return setting;, +        }, +        final Setting setting = get(key);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    final AbstractScopedSettings.SettingUpdater newUpdater(Consumer<T> consumer, ESLogger logger) {, +    AbstractScopedSettings.SettingUpdater newUpdater(Consumer<T> consumer, ESLogger logger, Consumer<T> validator) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public static class CommitId implements Writeable<CommitId> {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParser.java, +        ValuesSourceParser<ValuesSource.GeoPoint> vsParser = ValuesSourceParser.geoPoint(aggregationName, InternalGeoHashGrid.TYPE, context), +                .build();, +                @Override, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java]