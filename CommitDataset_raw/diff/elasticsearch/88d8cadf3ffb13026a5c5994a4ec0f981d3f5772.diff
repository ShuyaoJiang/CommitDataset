[+++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0 0 0\n)*/], +ccr (default distro only), +     0     0        0, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0 0 0\n)*/], +ccr (default distro only), +     0     0        0, +++ b/docs/reference/settings/security-settings.asciidoc, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0 0 0\n)*/], +ccr (default distro only), +     0     0        0, +++ b/docs/reference/settings/security-settings.asciidoc, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java, +        public final IndexShard primary;, +            this.primary = primary;, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0 0 0\n)*/], +ccr (default distro only), +     0     0        0, +++ b/docs/reference/settings/security-settings.asciidoc, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java, +        public final IndexShard primary;, +            this.primary = primary;, +++ b/server/src/main/java/org/elasticsearch/index/IndexSettings.java, +        softDeleteEnabled = version.onOrAfter(Version.V_6_5_0) && scopedSettings.get(INDEX_SOFT_DELETES_SETTING);, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0 0 0\n)*/], +ccr (default distro only), +     0     0        0, +++ b/docs/reference/settings/security-settings.asciidoc, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java, +        public final IndexShard primary;, +            this.primary = primary;, +++ b/server/src/main/java/org/elasticsearch/index/IndexSettings.java, +        softDeleteEnabled = version.onOrAfter(Version.V_6_5_0) && scopedSettings.get(INDEX_SOFT_DELETES_SETTING);, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    assertPrimaryCanOptimizeAddDocument(index);, +    protected boolean assertPrimaryCanOptimizeAddDocument(final Index index) {, +        assert (index.version() == Versions.MATCH_ANY && index.versionType() == VersionType.INTERNAL), +            : "version: " + index.version() + " type: " + index.versionType();, +        return true;, +    }, +, +            assertPrimaryIncomingSequenceNumber(origin, seqNo);, +    protected boolean assertPrimaryIncomingSequenceNumber(final Engine.Operation.Origin origin, final long seqNo) {, +    long doGenerateSeqNoForOperation(final Operation operation) {, +                final IndexingStrategy plan = indexingStrategyForOperation(index);, +    protected final IndexingStrategy planIndexingAsNonPrimary(Index index) throws IOException {, +        assertNonPrimaryOrigin(index);, +    protected IndexingStrategy indexingStrategyForOperation(final Index index) throws IOException {, +        if (index.origin() == Operation.Origin.PRIMARY) {, +            return planIndexingAsPrimary(index);, +        } else {, +            // non-primary mode (i.e., replica or recovery), +            return planIndexingAsNonPrimary(index);, +        }, +    }, +, +    protected final IndexingStrategy planIndexingAsPrimary(Index index) throws IOException {, +            final DeletionStrategy plan = deletionStrategyForOperation(delete);, +    protected DeletionStrategy deletionStrategyForOperation(final Delete delete) throws IOException {, +        if (delete.origin() == Operation.Origin.PRIMARY) {, +            return planDeletionAsPrimary(delete);, +        } else {, +            // non-primary mode (i.e., replica or recovery), +            return planDeletionAsNonPrimary(delete);, +        }, +    }, +, +    protected final DeletionStrategy planDeletionAsNonPrimary(Delete delete) throws IOException {, +        assertNonPrimaryOrigin(delete);, +    protected boolean assertNonPrimaryOrigin(final Operation operation) {, +        assert operation.origin() != Operation.Origin.PRIMARY : "planing as primary but got " + operation.origin();, +        return true;, +    }, +, +    protected final DeletionStrategy planDeletionAsPrimary(Delete delete) throws IOException {, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0 0 0\n)*/], +ccr (default distro only), +     0     0        0, +++ b/docs/reference/settings/security-settings.asciidoc, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportWriteAction.java, +        public final IndexShard primary;, +            this.primary = primary;, +++ b/server/src/main/java/org/elasticsearch/index/IndexSettings.java, +        softDeleteEnabled = version.onOrAfter(Version.V_6_5_0) && scopedSettings.get(INDEX_SOFT_DELETES_SETTING);, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    assertPrimaryCanOptimizeAddDocument(index);, +    protected boolean assertPrimaryCanOptimizeAddDocument(final Index index) {, +        assert (index.version() == Versions.MATCH_ANY && index.versionType() == VersionType.INTERNAL), +            : "version: " + index.version() + " type: " + index.versionType();]