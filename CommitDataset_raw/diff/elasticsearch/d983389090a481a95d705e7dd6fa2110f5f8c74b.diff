[+++ b/src/main/java/org/elasticsearch/action/get/MultiGetRequest.java, +import org.elasticsearch.Version;, +import java.util.Iterator;, +public class MultiGetRequest extends ActionRequest<MultiGetRequest> implements Iterable<MultiGetRequest.Item> {, +            type = in.readOptionalString();, +            routing = in.readOptionalString();, +            if (in.getVersion().before(Version.V_0_90_1)) {, +            } else {, +                // post 0.90.1, we maintain the semantic difference between not setting fields (default to _source), +                // and setting fields to empty array (no data to return), +                int size = in.readInt();, +                if (size >= 0) {, +                    fields = new String[size];, +                    for (int i = 0; i < size; i++) {, +                        fields[i] = in.readString();, +                    }, +                }, +            }, +            out.writeOptionalString(type);, +            out.writeOptionalString(routing);, +            if (out.getVersion().before(Version.V_0_90_1)) {, +            } else {, +                if (fields == null) {, +                    out.writeInt(-1);, +                } else {, +                    out.writeInt(fields.length);, +                    for (String field : fields) {, +                        out.writeString(field);, +                    }, +                }, +            }, +    @Override, +    public Iterator<Item> iterator() {, +        return items.iterator();, +    }, +, +++ b/src/main/java/org/elasticsearch/action/get/MultiGetRequest.java, +import org.elasticsearch.Version;, +import java.util.Iterator;, +public class MultiGetRequest extends ActionRequest<MultiGetRequest> implements Iterable<MultiGetRequest.Item> {, +            type = in.readOptionalString();, +            routing = in.readOptionalString();, +            if (in.getVersion().before(Version.V_0_90_1)) {, +            } else {, +                // post 0.90.1, we maintain the semantic difference between not setting fields (default to _source), +                // and setting fields to empty array (no data to return), +                int size = in.readInt();, +                if (size >= 0) {, +                    fields = new String[size];, +                    for (int i = 0; i < size; i++) {, +                        fields[i] = in.readString();, +                    }, +                }, +            }, +            out.writeOptionalString(type);, +            out.writeOptionalString(routing);, +            if (out.getVersion().before(Version.V_0_90_1)) {, +            } else {, +                if (fields == null) {, +                    out.writeInt(-1);, +                } else {, +                    out.writeInt(fields.length);, +                    for (String field : fields) {, +                        out.writeString(field);, +                    }, +                }, +            }, +    @Override, +    public Iterator<Item> iterator() {, +        return items.iterator();, +    }, +, +++ b/src/test/java/org/elasticsearch/test/integration/get/GetActionTests.java, +, +        // multi get with "no" fields, nothing should return, exists indication should still be around, +        response = client.prepareMultiGet(), +                .add(new MultiGetRequest.Item("test", "type1", "1").fields(Strings.EMPTY_ARRAY)), +                .add(new MultiGetRequest.Item("test", "type1", "3").fields(Strings.EMPTY_ARRAY)), +                .execute().actionGet();, +, +        assertThat(response.getResponses().length, equalTo(2));, +        assertThat(response.getResponses()[0].getResponse().isExists(), equalTo(true));, +        assertThat(response.getResponses()[0].getResponse().getSourceAsBytes(), nullValue());, +        assertThat(response.getResponses()[0].getResponse().getFields().size(), equalTo(0));]