[+++ b/core/src/main/java/org/elasticsearch/transport/TransportService.java, +    /**, +     * Returns <code>true</code> iff the given node is already connected., +     */, +     * Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers, +     * responsibility to close the connection once it goes out of scope., +     * @param node the node to connect to, +     * @param profile the connection profile to use, +     */, +    public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException {, +        if (node.equals(localNode)) {, +            return localNodeConnection;, +        } else {, +            return transport.openConnection(node, profile);, +        }, +    }, +, +    /**, +    /**, +     * Executes a high-level handshake using the given connection, +     * and returns the discovery node of the node the connection, +     * was established with. The handshake will fail if the cluster, +     * name on the target node mismatches the local cluster name., +     *, +     * @param connection       the connection to a specific node, +     * @param handshakeTimeout handshake timeout, +     * @return the connected node, +     * @throws ConnectTransportException if the connection failed, +     * @throws IllegalStateException if the handshake failed, +     */, +    public DiscoveryNode handshake(, +    public final <T extends TransportResponse> void sendRequest(final Transport.Connection connection, final String action,, +    public Transport.Connection getConnection(DiscoveryNode node) {, +++ b/core/src/main/java/org/elasticsearch/transport/TransportService.java, +    /**, +     * Returns <code>true</code> iff the given node is already connected., +     */, +     * Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers, +     * responsibility to close the connection once it goes out of scope., +     * @param node the node to connect to, +     * @param profile the connection profile to use, +     */, +    public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException {, +        if (node.equals(localNode)) {, +            return localNodeConnection;, +        } else {, +            return transport.openConnection(node, profile);, +        }, +    }, +, +    /**, +    /**, +     * Executes a high-level handshake using the given connection, +     * and returns the discovery node of the node the connection, +     * was established with. The handshake will fail if the cluster, +     * name on the target node mismatches the local cluster name., +     *, +     * @param connection       the connection to a specific node, +     * @param handshakeTimeout handshake timeout, +     * @return the connected node, +     * @throws ConnectTransportException if the connection failed, +     * @throws IllegalStateException if the handshake failed, +     */, +    public DiscoveryNode handshake(, +    public final <T extends TransportResponse> void sendRequest(final Transport.Connection connection, final String action,, +    public Transport.Connection getConnection(DiscoveryNode node) {, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/UnicastZenPingTests.java, +import org.elasticsearch.test.transport.MockTransportService;, +            new MockTransportService(settings, transport, threadPool, TransportService.NOOP_TRANSPORT_INTERCEPTOR, null);, +++ b/core/src/main/java/org/elasticsearch/transport/TransportService.java, +    /**, +     * Returns <code>true</code> iff the given node is already connected., +     */, +     * Establishes and returns a new connection to the given node. The connection is NOT maintained by this service, it's the callers, +     * responsibility to close the connection once it goes out of scope., +     * @param node the node to connect to, +     * @param profile the connection profile to use, +     */, +    public Transport.Connection openConnection(final DiscoveryNode node, ConnectionProfile profile) throws IOException {, +        if (node.equals(localNode)) {, +            return localNodeConnection;, +        } else {, +            return transport.openConnection(node, profile);, +        }, +    }, +, +    /**, +    /**, +     * Executes a high-level handshake using the given connection, +     * and returns the discovery node of the node the connection, +     * was established with. The handshake will fail if the cluster, +     * name on the target node mismatches the local cluster name., +     *, +     * @param connection       the connection to a specific node, +     * @param handshakeTimeout handshake timeout, +     * @return the connected node, +     * @throws ConnectTransportException if the connection failed, +     * @throws IllegalStateException if the handshake failed, +     */, +    public DiscoveryNode handshake(]