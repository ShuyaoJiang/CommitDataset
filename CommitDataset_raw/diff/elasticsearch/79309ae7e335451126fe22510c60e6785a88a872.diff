[+++ b/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequest.java, +            return source(templateBuilder.underlyingBytes(), 0, templateBuilder.underlyingBytesLength());, +        } catch (Exception e) {, +        Map<String, Object> source = templateSource;, +    /**, +     * The template source definition., +     */, +    public PutIndexTemplateRequest source(String templateSource) {, +        try {, +            return source(XContentFactory.xContent(templateSource).createParser(templateSource).mapOrderedAndClose());, +        } catch (Exception e) {, +            throw new ElasticSearchIllegalArgumentException("failed to parse template source [" + templateSource + "]", e);, +        }, +    }, +, +    /**, +     * The template source definition., +     */, +    public PutIndexTemplateRequest source(byte[] source) {, +        return source(source, 0, source.length);, +    }, +, +    /**, +     * The template source definition., +     */, +    public PutIndexTemplateRequest source(byte[] source, int offset, int length) {, +        try {, +            return source(XContentFactory.xContent(source, offset, length).createParser(source, offset, length).mapOrderedAndClose());, +        } catch (IOException e) {, +            throw new ElasticSearchIllegalArgumentException("failed to parse template source", e);, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequest.java, +            return source(templateBuilder.underlyingBytes(), 0, templateBuilder.underlyingBytesLength());, +        } catch (Exception e) {, +        Map<String, Object> source = templateSource;, +    /**, +     * The template source definition., +     */, +    public PutIndexTemplateRequest source(String templateSource) {, +        try {, +            return source(XContentFactory.xContent(templateSource).createParser(templateSource).mapOrderedAndClose());, +        } catch (Exception e) {, +            throw new ElasticSearchIllegalArgumentException("failed to parse template source [" + templateSource + "]", e);, +        }, +    }, +, +    /**, +     * The template source definition., +     */, +    public PutIndexTemplateRequest source(byte[] source) {, +        return source(source, 0, source.length);, +    }, +, +    /**, +     * The template source definition., +     */, +    public PutIndexTemplateRequest source(byte[] source, int offset, int length) {, +        try {, +            return source(XContentFactory.xContent(source, offset, length).createParser(source, offset, length).mapOrderedAndClose());, +        } catch (IOException e) {, +            throw new ElasticSearchIllegalArgumentException("failed to parse template source", e);, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequestBuilder.java, +     * The template source definition., +     */, +    public PutIndexTemplateRequestBuilder setSource(byte[] templateSource) {, +        request.source(templateSource);, +        return this;, +    }, +, +    /**, +     * The template source definition., +     */, +    public PutIndexTemplateRequestBuilder setSource(byte[] templateSource, int offset, int length) {, +        request.source(templateSource, offset, length);, +        return this;, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequest.java, +            return source(templateBuilder.underlyingBytes(), 0, templateBuilder.underlyingBytesLength());, +        } catch (Exception e) {, +        Map<String, Object> source = templateSource;, +    /**, +     * The template source definition., +     */, +    public PutIndexTemplateRequest source(String templateSource) {, +        try {, +            return source(XContentFactory.xContent(templateSource).createParser(templateSource).mapOrderedAndClose());, +        } catch (Exception e) {, +            throw new ElasticSearchIllegalArgumentException("failed to parse template source [" + templateSource + "]", e);, +        }, +    }, +, +    /**, +     * The template source definition.]