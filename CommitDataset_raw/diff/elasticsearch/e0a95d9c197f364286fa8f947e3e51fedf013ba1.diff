[+++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +                    indexOf = objectPath.lastIndexOf('.');, +                    continue;, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +                    indexOf = objectPath.lastIndexOf('.');, +                    continue;, +++ b/src/test/java/org/elasticsearch/search/sort/SimpleSortTests.java, +import org.elasticsearch.common.text.StringAndBytesText;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;, +    /**, +     * Test case for issue 6150: https://github.com/elasticsearch/elasticsearch/issues/6150, +     */, +    @Test, +    public void testNestedSort() throws ElasticsearchException, IOException, InterruptedException, ExecutionException {, +        assertAcked(prepareCreate("test"), +                .addMapping("type",, +                        XContentFactory.jsonBuilder(), +                                .startObject(), +                                    .startObject("type"), +                                        .startObject("properties"), +                                            .startObject("nested"), +                                                .field("type", "nested"), +                                                .startObject("properties"), +                                                    .startObject("foo"), +                                                        .field("type", "string"), +                                                        .startObject("fields"), +                                                            .startObject("sub"), +                                                                .field("type", "string"), +                                                                .field("index", "not_analyzed"), +                                                            .endObject(), +                                                        .endObject(), +                                                    .endObject(), +                                                .endObject(), +                                            .endObject(), +                                        .endObject(), +                                    .endObject(), +                                .endObject()));, +        ensureGreen();, +, +        client().prepareIndex("test", "type", "1").setSource(jsonBuilder().startObject(), +                .startObject("nested"), +                    .field("foo", "bar bar"), +                .endObject(), +                .endObject()).execute().actionGet();, +        refresh();, +, +        // We sort on nested field, +        SearchResponse searchResponse = client().prepareSearch(), +                .setQuery(matchAllQuery()), +                .addSort("nested.foo", SortOrder.DESC), +                .execute().actionGet();, +        assertNoFailures(searchResponse);, +        SearchHit[] hits = searchResponse.getHits().hits();, +        for (int i = 0; i < hits.length; ++i) {, +            assertThat(hits[i].getSortValues().length, is(1));, +            Object o = hits[i].getSortValues()[0];, +            assertThat(o, notNullValue());, +            assertThat(o instanceof StringAndBytesText, is(true));, +            StringAndBytesText text = (StringAndBytesText) o;, +            assertThat(text.string(), is("bar"));, +        }, +, +, +        // We sort on nested sub field, +        searchResponse = client().prepareSearch(), +                .setQuery(matchAllQuery()), +                .addSort("nested.foo.sub", SortOrder.DESC), +                .execute().actionGet();, +        assertNoFailures(searchResponse);, +        hits = searchResponse.getHits().hits();, +        for (int i = 0; i < hits.length; ++i) {, +            assertThat(hits[i].getSortValues().length, is(1));, +            Object o = hits[i].getSortValues()[0];, +            assertThat(o, notNullValue());, +            assertThat(o instanceof StringAndBytesText, is(true));, +            StringAndBytesText text = (StringAndBytesText) o;, +            assertThat(text.string(), is("bar bar"));, +        }, +    }, +, +]