[+++ b/docs/reference/index-modules/merge.asciidoc, +The merge scheduler (ConcurrentMergeScheduler) controls the execution of, +merge operations once they are needed (according to the merge policy).  Merges, +run in separate threads, and when the maximum number of threads is reached,, +further merges will wait until a merge thread becomes available.  The merge, +scheduler supports this setting:, +++ b/docs/reference/index-modules/merge.asciidoc, +The merge scheduler (ConcurrentMergeScheduler) controls the execution of, +merge operations once they are needed (according to the merge policy).  Merges, +run in separate threads, and when the maximum number of threads is reached,, +further merges will wait until a merge thread becomes available.  The merge, +scheduler supports this setting:, +++ /dev/null, +++ b/docs/reference/index-modules/merge.asciidoc, +The merge scheduler (ConcurrentMergeScheduler) controls the execution of, +merge operations once they are needed (according to the merge policy).  Merges, +run in separate threads, and when the maximum number of threads is reached,, +further merges will wait until a merge thread becomes available.  The merge, +scheduler supports this setting:, +++ /dev/null, +++ /dev/null, +++ b/docs/reference/index-modules/merge.asciidoc, +The merge scheduler (ConcurrentMergeScheduler) controls the execution of, +merge operations once they are needed (according to the merge policy).  Merges, +run in separate threads, and when the maximum number of threads is reached,, +further merges will wait until a merge thread becomes available.  The merge, +scheduler supports this setting:, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/docs/reference/index-modules/merge.asciidoc, +The merge scheduler (ConcurrentMergeScheduler) controls the execution of, +merge operations once they are needed (according to the merge policy).  Merges, +run in separate threads, and when the maximum number of threads is reached,, +further merges will wait until a merge thread becomes available.  The merge, +scheduler supports this setting:, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/index/engine/internal/InternalEngineTests.java, +    protected MergeSchedulerProvider createMergeScheduler(IndexSettingsService indexSettingsService) {, +        return new ConcurrentMergeSchedulerProvider(shardId, EMPTY_SETTINGS, threadPool, indexSettingsService);, +        return createEngine(indexSettingsService, store, translog, createMergeScheduler(indexSettingsService));, +++ b/docs/reference/index-modules/merge.asciidoc, +The merge scheduler (ConcurrentMergeScheduler) controls the execution of, +merge operations once they are needed (according to the merge policy).  Merges, +run in separate threads, and when the maximum number of threads is reached,, +further merges will wait until a merge thread becomes available.  The merge, +scheduler supports this setting:, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/index/engine/internal/InternalEngineTests.java, +    protected MergeSchedulerProvider createMergeScheduler(IndexSettingsService indexSettingsService) {, +        return new ConcurrentMergeSchedulerProvider(shardId, EMPTY_SETTINGS, threadPool, indexSettingsService);, +        return createEngine(indexSettingsService, store, translog, createMergeScheduler(indexSettingsService));, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +        switch (random.nextInt(4)) {]