[+++ b/src/main/java/org/elasticsearch/common/joda/Joda.java, +        if (Strings.hasLength(input)) {, +            input = input.trim();, +        }, +        if (input == null || input.length() == 0) {, +            throw new IllegalArgumentException("No date pattern provided");, +        }, +, +        } else if (Strings.hasLength(input) && input.contains("||")) {, +, +                if (formats.length == 1) {, +                    formatter = forPattern(input, locale).parser();, +                } else {, +                    DateTimeFormatter dateTimeFormatter = null;, +                        DateTimeFormatter currentFormatter = forPattern(formats[i], locale).parser();, +                        if (dateTimeFormatter == null) {, +                            dateTimeFormatter = currentFormatter;, +                        parsers[i] = currentFormatter.getParser();, +                    }, +, +                    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder().append(dateTimeFormatter.withZone(DateTimeZone.UTC).getPrinter(), parsers);, +        } else {, +            try {, +                formatter = DateTimeFormat.forPattern(input);, +            } catch (IllegalArgumentException e) {, +                throw new IllegalArgumentException("Invalid format: [" + input + "]: " + e.getMessage(), e);, +        }, +, +++ b/src/main/java/org/elasticsearch/common/joda/Joda.java, +        if (Strings.hasLength(input)) {, +            input = input.trim();, +        }, +        if (input == null || input.length() == 0) {, +            throw new IllegalArgumentException("No date pattern provided");, +        }, +, +        } else if (Strings.hasLength(input) && input.contains("||")) {, +, +                if (formats.length == 1) {, +                    formatter = forPattern(input, locale).parser();, +                } else {, +                    DateTimeFormatter dateTimeFormatter = null;, +                        DateTimeFormatter currentFormatter = forPattern(formats[i], locale).parser();, +                        if (dateTimeFormatter == null) {, +                            dateTimeFormatter = currentFormatter;, +                        parsers[i] = currentFormatter.getParser();, +                    }, +, +                    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder().append(dateTimeFormatter.withZone(DateTimeZone.UTC).getPrinter(), parsers);, +        } else {, +            try {, +                formatter = DateTimeFormat.forPattern(input);, +            } catch (IllegalArgumentException e) {, +                throw new IllegalArgumentException("Invalid format: [" + input + "]: " + e.getMessage(), e);, +        }, +, +++ b/src/test/java/org/elasticsearch/test/unit/deps/joda/SimpleJodaTests.java, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.is;, +import static org.testng.AssertJUnit.fail;, +        assertThat("1970/01/01 00:00:00", is(formatter.printer().print(millis)));, +    }, +    @Test, +    public void testMultipleDifferentFormats() {, +        FormatDateTimeFormatter formatter = Joda.forPattern("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd");, +        String input = "1970/01/01 00:00:00";, +        long millis = formatter.parser().parseMillis(input);, +        assertThat(input, is(formatter.printer().print(millis)));, +, +        Joda.forPattern("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd||dateOptionalTime");, +        Joda.forPattern("dateOptionalTime||yyyy/MM/dd HH:mm:ss||yyyy/MM/dd");, +        Joda.forPattern("yyyy/MM/dd HH:mm:ss||dateOptionalTime||yyyy/MM/dd");, +        Joda.forPattern("date_time||date_time_no_millis");, +        Joda.forPattern(" date_time || date_time_no_millis");, +    }, +, +    @Test, +    public void testInvalidPatterns() {, +        expectInvalidPattern("does_not_exist_pattern", "Invalid format: [does_not_exist_pattern]: Illegal pattern component: o");, +        expectInvalidPattern("OOOOO", "Invalid format: [OOOOO]: Illegal pattern component: OOOOO");, +        expectInvalidPattern(null, "No date pattern provided");, +        expectInvalidPattern("", "No date pattern provided");, +        expectInvalidPattern(" ", "No date pattern provided");, +        expectInvalidPattern("||date_time_no_millis", "No date pattern provided");, +        expectInvalidPattern("date_time_no_millis||", "No date pattern provided");, +    }, +, +    private void expectInvalidPattern(String pattern, String errorMessage) {, +        try {, +            Joda.forPattern(pattern);, +            fail("Pattern " + pattern + " should have thrown an exception but did not");, +        } catch (IllegalArgumentException e) {, +            assertThat(e.getMessage(), containsString(errorMessage));, +        }]