[+++ b/src/main/java/org/elasticsearch/plugins/PluginManager.java, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.X509TrustManager;, +, +        TrustManager[] trustAllCerts = new TrustManager[]{, +                new X509TrustManager() {, +                    @Override, +                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {, +                        return null;, +                    }, +, +                    @Override, +                    public void checkClientTrusted(, +                            java.security.cert.X509Certificate[] certs, String authType) {, +                    }, +, +                    @Override, +                    public void checkServerTrusted(, +                            java.security.cert.X509Certificate[] certs, String authType) {, +                    }, +                }, +        };, +, +        // Install the all-trusting trust manager, +        try {, +            SSLContext sc = SSLContext.getInstance("SSL");, +            sc.init(null, trustAllCerts, new java.security.SecureRandom());, +            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());, +        } catch (Exception e) {, +            throw new ElasticsearchException("Failed to install all-trusting trust manager", e);, +        }, +++ b/src/main/java/org/elasticsearch/plugins/PluginManager.java, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.X509TrustManager;, +, +        TrustManager[] trustAllCerts = new TrustManager[]{, +                new X509TrustManager() {, +                    @Override, +                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {, +                        return null;, +                    }, +, +                    @Override, +                    public void checkClientTrusted(, +                            java.security.cert.X509Certificate[] certs, String authType) {, +                    }, +, +                    @Override, +                    public void checkServerTrusted(, +                            java.security.cert.X509Certificate[] certs, String authType) {, +                    }, +                }, +        };, +, +        // Install the all-trusting trust manager, +        try {, +            SSLContext sc = SSLContext.getInstance("SSL");, +            sc.init(null, trustAllCerts, new java.security.SecureRandom());, +            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());, +        } catch (Exception e) {, +            throw new ElasticsearchException("Failed to install all-trusting trust manager", e);, +        }, +++ b/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // needed by PluginManager, +  permission java.lang.RuntimePermission "setFactory";, +, +++ b/src/main/java/org/elasticsearch/plugins/PluginManager.java, +import javax.net.ssl.HttpsURLConnection;, +import javax.net.ssl.SSLContext;, +import javax.net.ssl.TrustManager;, +import javax.net.ssl.X509TrustManager;, +, +        TrustManager[] trustAllCerts = new TrustManager[]{, +                new X509TrustManager() {, +                    @Override, +                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {, +                        return null;, +                    }, +, +                    @Override, +                    public void checkClientTrusted(, +                            java.security.cert.X509Certificate[] certs, String authType) {, +                    }, +, +                    @Override, +                    public void checkServerTrusted(, +                            java.security.cert.X509Certificate[] certs, String authType) {, +                    }, +                }, +        };, +, +        // Install the all-trusting trust manager, +        try {, +            SSLContext sc = SSLContext.getInstance("SSL");, +            sc.init(null, trustAllCerts, new java.security.SecureRandom());, +            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());]