[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            availableProcessors += nodeInfo.getOs().getAvailableProcessors();, +            if (nodeStats.getProcess().getCpu() != null) {, +                cpuPercent += nodeStats.getProcess().getCpu().getPercent();, +            long fd = nodeStats.getProcess().getOpenFileDescriptors();, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            availableProcessors += nodeInfo.getOs().getAvailableProcessors();, +            if (nodeStats.getProcess().getCpu() != null) {, +                cpuPercent += nodeStats.getProcess().getCpu().getPercent();, +            long fd = nodeStats.getProcess().getOpenFileDescriptors();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +import org.elasticsearch.action.ActionListener;, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            availableProcessors += nodeInfo.getOs().getAvailableProcessors();, +            if (nodeStats.getProcess().getCpu() != null) {, +                cpuPercent += nodeStats.getProcess().getCpu().getPercent();, +            long fd = nodeStats.getProcess().getOpenFileDescriptors();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +import org.elasticsearch.action.ActionListener;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +        bulkRequest.add(data, defaultIndex, defaultType, null, null, payload, true);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            availableProcessors += nodeInfo.getOs().getAvailableProcessors();, +            if (nodeStats.getProcess().getCpu() != null) {, +                cpuPercent += nodeStats.getProcess().getCpu().getPercent();, +            long fd = nodeStats.getProcess().getOpenFileDescriptors();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +import org.elasticsearch.action.ActionListener;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +        bulkRequest.add(data, defaultIndex, defaultType, null, null, payload, true);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        return add(data, defaultIndex, defaultType, null, null, null, true);, +        return add(data, defaultIndex, defaultType, null, null, null, allowExplicitIndex);, +    public BulkRequest add(BytesReference data, @Nullable String defaultIndex, @Nullable String defaultType, @Nullable String defaultRouting, @Nullable String[] defaultFields, @Nullable Object payload, boolean allowExplicitIndex) throws Exception {, +                String[] fields = defaultFields;, +                            } else if ("fields".equals(currentFieldName)) {, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains a simple value for parameter [fields] while a list is expected");, +                        } else if (token == XContentParser.Token.START_ARRAY) {, +                            if ("fields".equals(currentFieldName)) {, +                                List<Object> values = parser.list();, +                                fields = values.toArray(new String[values.size()]);, +                            } else {, +                                throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected a simple value for field [" + currentFieldName + "] but found [" + token + "]");, +                            }, +                        if (fields != null) {, +                            updateRequest.fields(fields);, +                        }, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            availableProcessors += nodeInfo.getOs().getAvailableProcessors();, +            if (nodeStats.getProcess().getCpu() != null) {, +                cpuPercent += nodeStats.getProcess().getCpu().getPercent();, +            long fd = nodeStats.getProcess().getOpenFileDescriptors();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +import org.elasticsearch.action.ActionListener;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +        bulkRequest.add(data, defaultIndex, defaultType, null, null, payload, true);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        return add(data, defaultIndex, defaultType, null, null, null, true);, +        return add(data, defaultIndex, defaultType, null, null, null, allowExplicitIndex);, +    public BulkRequest add(BytesReference data, @Nullable String defaultIndex, @Nullable String defaultType, @Nullable String defaultRouting, @Nullable String[] defaultFields, @Nullable Object payload, boolean allowExplicitIndex) throws Exception {, +                String[] fields = defaultFields;]