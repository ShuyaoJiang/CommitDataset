[+++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract GetResult get(Get get, Function<String, Searcher> searcherFactory) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract GetResult get(Get get, Function<String, Searcher> searcherFactory) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import java.util.List;, +, +    private final List<ReferenceManager.RefreshListener> refreshListeners;, +                        TranslogConfig translogConfig, TimeValue flushMergesAfter, List<ReferenceManager.RefreshListener> refreshListeners,, +     * The refresh listeners to add to Lucene, +    public List<ReferenceManager.RefreshListener> getRefreshListeners() {, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract GetResult get(Get get, Function<String, Searcher> searcherFactory) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import java.util.List;, +, +    private final List<ReferenceManager.RefreshListener> refreshListeners;, +                        TranslogConfig translogConfig, TimeValue flushMergesAfter, List<ReferenceManager.RefreshListener> refreshListeners,, +     * The refresh listeners to add to Lucene, +    public List<ReferenceManager.RefreshListener> getRefreshListeners() {, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.search.ReferenceManager;, +            for (ReferenceManager.RefreshListener listener: engineConfig.getRefreshListeners()) {, +                searcherManager.addListener(listener);, +    public GetResult get(Get get, Function<String, Searcher> searcherFactory) throws EngineException {, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract GetResult get(Get get, Function<String, Searcher> searcherFactory) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import java.util.List;, +, +    private final List<ReferenceManager.RefreshListener> refreshListeners;, +                        TranslogConfig translogConfig, TimeValue flushMergesAfter, List<ReferenceManager.RefreshListener> refreshListeners,, +     * The refresh listeners to add to Lucene, +    public List<ReferenceManager.RefreshListener> getRefreshListeners() {, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.search.ReferenceManager;, +            for (ReferenceManager.RefreshListener listener: engineConfig.getRefreshListeners()) {, +                searcherManager.addListener(listener);, +    public GetResult get(Get get, Function<String, Searcher> searcherFactory) throws EngineException {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.apache.lucene.search.ReferenceManager;, +import org.elasticsearch.Assertions;, +import java.util.Arrays;, +        return getEngine().get(get, this::acquireSearcher);, +            IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING.get(indexSettings.getSettings()),, +            Arrays.asList(refreshListeners, new RefreshMetricUpdater(refreshMetric)), indexSort);, +    private static class RefreshMetricUpdater implements ReferenceManager.RefreshListener {, +, +        private final MeanMetric refreshMetric;, +        private long currentRefreshStartTime;, +        private Thread callingThread = null;, +, +        private RefreshMetricUpdater(MeanMetric refreshMetric) {, +            this.refreshMetric = refreshMetric;, +        }, +, +        @Override, +        public void beforeRefresh() throws IOException {, +            if (Assertions.ENABLED) {, +                assert callingThread == null : "beforeRefresh was called by " + callingThread.getName() +, +                    " without a corresponding call to afterRefresh";, +                callingThread = Thread.currentThread();, +            }, +            currentRefreshStartTime = System.nanoTime();, +        }, +, +        @Override, +        public void afterRefresh(boolean didRefresh) throws IOException {, +            if (Assertions.ENABLED) {, +                assert callingThread != null : "afterRefresh called but not beforeRefresh";, +                assert callingThread == Thread.currentThread() : "beforeRefreshed called by a different thread. current [", +                    + Thread.currentThread().getName() + "], thread that called beforeRefresh [" + callingThread.getName() + "]";, +                callingThread = null;, +            }, +            refreshMetric.inc(System.nanoTime() - currentRefreshStartTime);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract GetResult get(Get get, Function<String, Searcher> searcherFactory) throws EngineException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import java.util.List;, +, +    private final List<ReferenceManager.RefreshListener> refreshListeners;, +                        TranslogConfig translogConfig, TimeValue flushMergesAfter, List<ReferenceManager.RefreshListener> refreshListeners,, +     * The refresh listeners to add to Lucene, +    public List<ReferenceManager.RefreshListener> getRefreshListeners() {, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.search.ReferenceManager;, +            for (ReferenceManager.RefreshListener listener: engineConfig.getRefreshListeners()) {, +                searcherManager.addListener(listener);, +    public GetResult get(Get get, Function<String, Searcher> searcherFactory) throws EngineException {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.apache.lucene.search.ReferenceManager;, +import org.elasticsearch.Assertions;, +import java.util.Arrays;, +        return getEngine().get(get, this::acquireSearcher);, +            IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING.get(indexSettings.getSettings()),, +            Arrays.asList(refreshListeners, new RefreshMetricUpdater(refreshMetric)), indexSort);, +    private static class RefreshMetricUpdater implements ReferenceManager.RefreshListener {, +]