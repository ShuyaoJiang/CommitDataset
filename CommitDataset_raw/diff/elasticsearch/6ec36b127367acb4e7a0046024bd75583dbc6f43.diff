[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +                Map<String, List<String>> newFollowedIndexUUIDS = new HashMap<>(currentAutoFollowMetadata.getFollowedLeaderIndexUUIDs());, +                newFollowedIndexUUIDS.compute(clusterAlias, (key, existingUUIDs) -> {, +                    assert existingUUIDs != null;, +                    List<String> newUUIDs = new ArrayList<>(existingUUIDs);, +                    newUUIDs.add(indexToFollow.getUUID());, +                    return Collections.unmodifiableList(newUUIDs);, +                });, +                final AutoFollowMetadata newAutoFollowMetadata = new AutoFollowMetadata(currentAutoFollowMetadata.getPatterns(),, +                return ClusterState.builder(currentState), +                    .metaData(MetaData.builder(currentState.getMetaData()), +                        .putCustom(AutoFollowMetadata.TYPE, newAutoFollowMetadata).build()), +                    .build();, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +                Map<String, List<String>> newFollowedIndexUUIDS = new HashMap<>(currentAutoFollowMetadata.getFollowedLeaderIndexUUIDs());, +                newFollowedIndexUUIDS.compute(clusterAlias, (key, existingUUIDs) -> {, +                    assert existingUUIDs != null;, +                    List<String> newUUIDs = new ArrayList<>(existingUUIDs);, +                    newUUIDs.add(indexToFollow.getUUID());, +                    return Collections.unmodifiableList(newUUIDs);, +                });, +                final AutoFollowMetadata newAutoFollowMetadata = new AutoFollowMetadata(currentAutoFollowMetadata.getPatterns(),, +                return ClusterState.builder(currentState), +                    .metaData(MetaData.builder(currentState.getMetaData()), +                        .putCustom(AutoFollowMetadata.TYPE, newAutoFollowMetadata).build()), +                    .build();, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPutAutoFollowPatternAction.java, +        final List<String> followedIndexUUIDs;, +        if (followedLeaderIndices.containsKey(request.getLeaderClusterAlias())) {, +            followedIndexUUIDs = new ArrayList<>(followedLeaderIndices.get(request.getLeaderClusterAlias()));, +        } else {, +        followedLeaderIndices.put(request.getLeaderClusterAlias(), followedIndexUUIDs);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +                Map<String, List<String>> newFollowedIndexUUIDS = new HashMap<>(currentAutoFollowMetadata.getFollowedLeaderIndexUUIDs());, +                newFollowedIndexUUIDS.compute(clusterAlias, (key, existingUUIDs) -> {, +                    assert existingUUIDs != null;, +                    List<String> newUUIDs = new ArrayList<>(existingUUIDs);, +                    newUUIDs.add(indexToFollow.getUUID());, +                    return Collections.unmodifiableList(newUUIDs);, +                });, +                final AutoFollowMetadata newAutoFollowMetadata = new AutoFollowMetadata(currentAutoFollowMetadata.getPatterns(),, +                return ClusterState.builder(currentState), +                    .metaData(MetaData.builder(currentState.getMetaData()), +                        .putCustom(AutoFollowMetadata.TYPE, newAutoFollowMetadata).build()), +                    .build();, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPutAutoFollowPatternAction.java, +        final List<String> followedIndexUUIDs;, +        if (followedLeaderIndices.containsKey(request.getLeaderClusterAlias())) {, +            followedIndexUUIDs = new ArrayList<>(followedLeaderIndices.get(request.getLeaderClusterAlias()));, +        } else {, +        followedLeaderIndices.put(request.getLeaderClusterAlias(), followedIndexUUIDs);, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinatorTests.java, +                assertThat(headers, equalTo(autoFollowHeaders.get("remote")));, +                assertThat(headers, equalTo(autoFollowHeaders.get("remote")));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +                Map<String, List<String>> newFollowedIndexUUIDS = new HashMap<>(currentAutoFollowMetadata.getFollowedLeaderIndexUUIDs());, +                newFollowedIndexUUIDS.compute(clusterAlias, (key, existingUUIDs) -> {, +                    assert existingUUIDs != null;, +                    List<String> newUUIDs = new ArrayList<>(existingUUIDs);, +                    newUUIDs.add(indexToFollow.getUUID());, +                    return Collections.unmodifiableList(newUUIDs);, +                });, +                final AutoFollowMetadata newAutoFollowMetadata = new AutoFollowMetadata(currentAutoFollowMetadata.getPatterns(),, +                return ClusterState.builder(currentState), +                    .metaData(MetaData.builder(currentState.getMetaData()), +                        .putCustom(AutoFollowMetadata.TYPE, newAutoFollowMetadata).build()), +                    .build();, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportPutAutoFollowPatternAction.java, +        final List<String> followedIndexUUIDs;, +        if (followedLeaderIndices.containsKey(request.getLeaderClusterAlias())) {, +            followedIndexUUIDs = new ArrayList<>(followedLeaderIndices.get(request.getLeaderClusterAlias()));, +        } else {, +        followedLeaderIndices.put(request.getLeaderClusterAlias(), followedIndexUUIDs);, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinatorTests.java, +                assertThat(headers, equalTo(autoFollowHeaders.get("remote")));, +                assertThat(headers, equalTo(autoFollowHeaders.get("remote")));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ccr/AutoFollowMetadata.java, +import java.util.stream.Collectors;, +        this.patterns = Collections.unmodifiableMap(patterns);, +        this.followedLeaderIndexUUIDs = Collections.unmodifiableMap(followedLeaderIndexUUIDs.entrySet().stream(), +            .collect(Collectors.toMap(Map.Entry::getKey, e -> Collections.unmodifiableList(e.getValue()))));, +        this.headers = Collections.unmodifiableMap(headers.entrySet().stream(), +            .collect(Collectors.toMap(Map.Entry::getKey, e -> Collections.unmodifiableMap(e.getValue()))));, +        this(, +            in.readMap(StreamInput::readString, AutoFollowPattern::new),, +            in.readMapOfLists(StreamInput::readString, StreamInput::readString),, +            in.readMap(StreamInput::readString, valIn -> valIn.readMap(StreamInput::readString, StreamInput::readString)), +        );]