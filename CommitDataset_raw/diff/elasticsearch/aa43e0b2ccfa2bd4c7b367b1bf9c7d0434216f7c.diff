[+++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/discovery/Zen2RestApiIT.java, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/discovery/Zen2RestApiIT.java, +++ b/server/src/main/java/org/elasticsearch/gateway/GatewayService.java, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +        } else if (discovery instanceof ZenDiscovery) {, +        } else {, +            recoverAfterMasterNodes = -1;, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/discovery/Zen2RestApiIT.java, +++ b/server/src/main/java/org/elasticsearch/gateway/GatewayService.java, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +        } else if (discovery instanceof ZenDiscovery) {, +        } else {, +            recoverAfterMasterNodes = -1;, +++ b/server/src/test/java/org/elasticsearch/cluster/NoMasterNodeIT.java, +import org.elasticsearch.action.support.AutoCreateIndex;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.coordination.ClusterBootstrapService;, +import org.elasticsearch.discovery.zen.ElectMasterService;, +import org.elasticsearch.test.InternalTestCluster.RestartCallback;, +import java.util.Arrays;, +    protected int numberOfReplicas() {, +        return 2;, +            .put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), true), +            .put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), Integer.MAX_VALUE), +            .put(ClusterBootstrapService.INITIAL_MASTER_NODE_COUNT_SETTING.getKey(), 3), +        internalCluster().startNodes(3, settings);, +, +, +        internalCluster().restartRandomDataNode(new RestartCallback() {, +            @Override, +            public Settings onNodeStopped(String nodeName) throws Exception {, +, +                final Client remainingClient = client(Arrays.stream(, +                    internalCluster().getNodeNames()).filter(n -> n.equals(nodeName) == false).findAny().get());, +, +                    ClusterState state = remainingClient.admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();, +                assertThrows(remainingClient.prepareGet("test", "type1", "1"),, +                assertThrows(remainingClient.prepareGet("no_index", "type1", "1"),, +                assertThrows(remainingClient.prepareMultiGet().add("test", "type1", "1"),, +                assertThrows(remainingClient.prepareMultiGet().add("no_index", "type1", "1"),, +                assertThrows(remainingClient.admin().indices().prepareAnalyze("test", "this is a test"),, +                assertThrows(remainingClient.admin().indices().prepareAnalyze("no_index", "this is a test"),, +                assertThrows(remainingClient.prepareSearch("test").setSize(0),, +                assertThrows(remainingClient.prepareSearch("no_index").setSize(0),, +                    remainingClient.prepareUpdate("test", "type1", "1"), +                    remainingClient.prepareUpdate("no_index", "type1", "1"), +                checkWriteAction(remainingClient.prepareIndex("test", "type1", "1"), +                checkWriteAction(remainingClient.prepareIndex("no_index", "type1", "1"), +                BulkRequestBuilder bulkRequestBuilder = remainingClient.prepareBulk();, +                bulkRequestBuilder.add(remainingClient.prepareIndex("test", "type1", "1"), +                bulkRequestBuilder.add(remainingClient.prepareIndex("test", "type1", "2"), +                bulkRequestBuilder = remainingClient.prepareBulk();, +                bulkRequestBuilder.add(remainingClient.prepareIndex("no_index", "type1", "1"), +                bulkRequestBuilder.add(remainingClient.prepareIndex("no_index", "type1", "2"), +                return Settings.EMPTY;, +            }, +        });, +, +, +        client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("3").execute().actionGet();, +            .put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), false), +            .put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), Integer.MAX_VALUE), +            .put(ClusterBootstrapService.INITIAL_MASTER_NODE_COUNT_SETTING.getKey(), 3), +        internalCluster().startNodes(3, settings);, +, +        prepareCreate("test1").setSettings(, +            Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2)).get();, +            Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 3).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)).get();, +        internalCluster().restartRandomDataNode(new RestartCallback() {, +            @Override, +            public Settings onNodeStopped(String nodeName) throws Exception {, +, +                final Client remainingClient = client(Arrays.stream(, +                    internalCluster().getNodeNames()).filter(n -> n.equals(nodeName) == false).findAny().get());, +, +                        ClusterState state = remainingClient.admin().cluster().prepareState().setLocal(true).get().getState();, +                GetResponse getResponse = remainingClient.prepareGet("test1", "type1", "1").get();, +                SearchResponse countResponse = remainingClient.prepareSearch("test1").setAllowPartialSearchResults(true).setSize(0).get();, +                logger.info("--> here 3");, +                SearchResponse searchResponse = remainingClient.prepareSearch("test1").setAllowPartialSearchResults(true).get();, +                countResponse = remainingClient.prepareSearch("test2").setAllowPartialSearchResults(true).setSize(0).get();, +                assertThat(countResponse.getTotalShards(), equalTo(3));, +                    remainingClient.prepareUpdate("test1", "type1", "1"), +                        .setDoc(Requests.INDEX_CONTENT_TYPE, "field", "value2").setTimeout(timeout).get();, +                } catch (Exception e) {, +                    logger.info("unexpected", e);, +                    throw e;, +                    remainingClient.prepareIndex("test1", "type1", "1"), +                logger.info("finished assertions, restarting node [{}]", nodeName);, +, +                return Settings.EMPTY;, +            }, +        });, +, +        client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("3").get();, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/discovery/Zen2RestApiIT.java, +++ b/server/src/main/java/org/elasticsearch/gateway/GatewayService.java, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +        } else if (discovery instanceof ZenDiscovery) {, +        } else {]