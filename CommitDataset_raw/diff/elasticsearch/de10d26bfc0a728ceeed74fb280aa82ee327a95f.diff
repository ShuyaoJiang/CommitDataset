[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapRealm.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +                    new LdapSessionActionListener("authenticate", token.principal(), listener, roleMapper, logger)));, +                sessionFactory.unauthenticatedSession(username,, +                        new LdapSessionActionListener("lookup", username, listener, roleMapper, logger)));, +        private String action;, +        private Logger logger;, +        LdapSessionActionListener(String action, String username, ActionListener<User> userActionListener,, +                                  DnRoleMapper roleMapper, Logger logger) {, +            this.action = action;, +            this.logger = logger;, +            logger.info("{} failed for user [{}]: {}", action, username, e.getMessage());, +            if (logger.isDebugEnabled()) {, +                logger.debug(new ParameterizedMessage("{} failed", action), e);, +            userActionListener.onResponse(null);, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapRealm.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +                    new LdapSessionActionListener("authenticate", token.principal(), listener, roleMapper, logger)));, +                sessionFactory.unauthenticatedSession(username,, +                        new LdapSessionActionListener("lookup", username, listener, roleMapper, logger)));, +        private String action;, +        private Logger logger;, +        LdapSessionActionListener(String action, String username, ActionListener<User> userActionListener,, +                                  DnRoleMapper roleMapper, Logger logger) {, +            this.action = action;, +            this.logger = logger;, +            logger.info("{} failed for user [{}]: {}", action, username, e.getMessage());, +            if (logger.isDebugEnabled()) {, +                logger.debug(new ParameterizedMessage("{} failed", action), e);, +            userActionListener.onResponse(null);, +        }, +, +++ b/plugin/src/test/java/org/elasticsearch/integration/ldap/AbstractAdLdapRealmTestCase.java, +    protected static final String TESTNODE_KEYSTORE = "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.jks";, +        final RealmConfig realm = AbstractAdLdapRealmTestCase.realmConfig;, +        Path store = getDataPath(TESTNODE_KEYSTORE);, +        builder.put(buildRealmSettings(realm, store));, +        return builder.build();, +    }, +, +    protected Settings buildRealmSettings(RealmConfig realm, Path store) {, +        Settings.Builder builder = Settings.builder();, +        Path nodeFiles = createTempDir();, +        builder.put(realm.buildSettings(store, "testnode")), +                        configRoleMappings(realm)));, +            Path store = getDataPath(TESTNODE_KEYSTORE);, +    protected String configRoleMappings(RealmConfig realm) {, +        return realm.configRoleMappings();, +        final Settings settings;, +            return buildSettings(store, password, 1);, +        }, +, +        protected Settings buildSettings(Path store, String password, int order) {, +                    .put(XPACK_SECURITY_AUTHC_REALMS_EXTERNAL + ".order", order), +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapRealm.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +                    new LdapSessionActionListener("authenticate", token.principal(), listener, roleMapper, logger)));, +                sessionFactory.unauthenticatedSession(username,, +                        new LdapSessionActionListener("lookup", username, listener, roleMapper, logger)));, +        private String action;, +        private Logger logger;, +        LdapSessionActionListener(String action, String username, ActionListener<User> userActionListener,, +                                  DnRoleMapper roleMapper, Logger logger) {, +            this.action = action;, +            this.logger = logger;, +            logger.info("{} failed for user [{}]: {}", action, username, e.getMessage());, +            if (logger.isDebugEnabled()) {, +                logger.debug(new ParameterizedMessage("{} failed", action), e);, +            userActionListener.onResponse(null);, +        }, +, +++ b/plugin/src/test/java/org/elasticsearch/integration/ldap/AbstractAdLdapRealmTestCase.java, +    protected static final String TESTNODE_KEYSTORE = "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.jks";, +        final RealmConfig realm = AbstractAdLdapRealmTestCase.realmConfig;, +        Path store = getDataPath(TESTNODE_KEYSTORE);, +        builder.put(buildRealmSettings(realm, store));, +        return builder.build();, +    }, +, +    protected Settings buildRealmSettings(RealmConfig realm, Path store) {, +        Settings.Builder builder = Settings.builder();, +        Path nodeFiles = createTempDir();, +        builder.put(realm.buildSettings(store, "testnode")), +                        configRoleMappings(realm)));, +            Path store = getDataPath(TESTNODE_KEYSTORE);, +    protected String configRoleMappings(RealmConfig realm) {, +        return realm.configRoleMappings();, +        final Settings settings;, +            return buildSettings(store, password, 1);, +        }, +, +        protected Settings buildSettings(Path store, String password, int order) {, +                    .put(XPACK_SECURITY_AUTHC_REALMS_EXTERNAL + ".order", order), +++ b/plugin/src/test/java/org/elasticsearch/integration/ldap/MultiGroupMappingTests.java, +    protected String configRoleMappings(RealmConfig realm) {]