[+++ b/src/main/java/org/elasticsearch/common/lucene/search/function/CombineFunction.java, +    REPLACE {, +            return "replace";, +    },, +    SUM {, +        @Override, +        public float combine(double queryBoost, double queryScore, double funcScore, double maxBoost) {, +            return toFloat(queryBoost * (queryScore + Math.min(funcScore, maxBoost)));, +        }, +, +        @Override, +        public String getName() {, +            return "sum";, +        }, +, +        @Override, +        public ComplexExplanation explain(float queryBoost, Explanation queryExpl, Explanation funcExpl, float maxBoost) {, +            float score = queryBoost * (Math.min(funcExpl.getValue(), maxBoost) + queryExpl.getValue());, +            ComplexExplanation res = new ComplexExplanation(true, score, "function score, product of:");, +            ComplexExplanation minExpl = new ComplexExplanation(true, Math.min(funcExpl.getValue(), maxBoost), "Math.min of");, +            minExpl.addDetail(funcExpl);, +            minExpl.addDetail(new Explanation(maxBoost, "maxBoost"));, +            ComplexExplanation sumExpl = new ComplexExplanation(true, Math.min(funcExpl.getValue(), maxBoost) + queryExpl.getValue(),, +                    "sum of");, +            sumExpl.addDetail(queryExpl);, +            sumExpl.addDetail(minExpl);, +            res.addDetail(sumExpl);, +            res.addDetail(new Explanation(queryBoost, "queryBoost"));, +            return res;, +        }, +, +    },, +    AVG {, +        @Override, +        public float combine(double queryBoost, double queryScore, double funcScore, double maxBoost) {, +            return toFloat((queryBoost * (Math.min(funcScore, maxBoost) + queryScore) / 2.0));, +        }, +, +        @Override, +        public String getName() {, +            return "avg";, +        }, +, +        @Override, +        public ComplexExplanation explain(float queryBoost, Explanation queryExpl, Explanation funcExpl, float maxBoost) {, +            float score = toFloat(queryBoost * (queryExpl.getValue() + Math.min(funcExpl.getValue(), maxBoost)) / 2.0);, +            ComplexExplanation res = new ComplexExplanation(true, score, "function score, product of:");, +            ComplexExplanation minExpl = new ComplexExplanation(true, Math.min(funcExpl.getValue(), maxBoost), "Math.min of");, +            minExpl.addDetail(funcExpl);, +            minExpl.addDetail(new Explanation(maxBoost, "maxBoost"));, +            ComplexExplanation avgExpl = new ComplexExplanation(true,, +                    toFloat((Math.min(funcExpl.getValue(), maxBoost) + queryExpl.getValue()) / 2.0), "avg of");, +            avgExpl.addDetail(queryExpl);, +            avgExpl.addDetail(minExpl);, +            res.addDetail(avgExpl);, +            res.addDetail(new Explanation(queryBoost, "queryBoost"));, +            return res;, +        }, +, +    },, +    MIN {, +        @Override, +        public float combine(double queryBoost, double queryScore, double funcScore, double maxBoost) {, +            return toFloat(queryBoost * Math.min(queryScore, Math.min(funcScore, maxBoost)));, +        }, +, +        @Override, +        public String getName() {, +            return "min";, +        }, +, +        @Override, +        public ComplexExplanation explain(float queryBoost, Explanation queryExpl, Explanation funcExpl, float maxBoost) {, +            float score = toFloat(queryBoost * Math.min(queryExpl.getValue(), Math.min(funcExpl.getValue(), maxBoost)));, +            ComplexExplanation res = new ComplexExplanation(true, score, "function score, product of:");, +            ComplexExplanation innerMinExpl = new ComplexExplanation(true, Math.min(funcExpl.getValue(), maxBoost), "Math.min of");, +            innerMinExpl.addDetail(funcExpl);, +            innerMinExpl.addDetail(new Explanation(maxBoost, "maxBoost"));, +            ComplexExplanation outerMinExpl = new ComplexExplanation(true, Math.min(Math.min(funcExpl.getValue(), maxBoost),, +                    queryExpl.getValue()), "min of");, +            outerMinExpl.addDetail(queryExpl);, +            outerMinExpl.addDetail(innerMinExpl);, +            res.addDetail(outerMinExpl);, +            res.addDetail(new Explanation(queryBoost, "queryBoost"));, +            return res;, +        }, +, +    },, +    MAX {, +        @Override, +        public float combine(double queryBoost, double queryScore, double funcScore, double maxBoost) {, +            return toFloat(queryBoost * (Math.max(queryScore, Math.min(funcScore, maxBoost))));, +        }, +, +        @Override, +        public String getName() {, +            return "max";, +        }, +, +        @Override]