[+++ b/client/rest-high-level/build.gradle, +  compile "org.elasticsearch.plugin:lang-mustache-client:${version}", +++ b/client/rest-high-level/build.gradle, +  compile "org.elasticsearch.plugin:lang-mustache-client:${version}", +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.script.mustache.SearchTemplateRequest;, +        addSearchRequestParams(params, searchRequest);, +, +        if (searchRequest.source() != null) {, +            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE));, +        }, +        return request;, +    }, +, +    private static void addSearchRequestParams(Params params, SearchRequest searchRequest) {, +    static Request searchTemplate(SearchTemplateRequest searchTemplateRequest) throws IOException {, +        Request request;, +, +        if (searchTemplateRequest.isSimulate()) {, +            request = new Request(HttpGet.METHOD_NAME, "_render/template");, +        } else {, +            SearchRequest searchRequest = searchTemplateRequest.getRequest();, +            String endpoint = endpoint(searchRequest.indices(), searchRequest.types(), "_search/template");, +            request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +            Params params = new Params(request);, +            addSearchRequestParams(params, searchRequest);, +        }, +, +        request.setEntity(createEntity(searchTemplateRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/build.gradle, +  compile "org.elasticsearch.plugin:lang-mustache-client:${version}", +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.script.mustache.SearchTemplateRequest;, +        addSearchRequestParams(params, searchRequest);, +, +        if (searchRequest.source() != null) {, +            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE));, +        }, +        return request;, +    }, +, +    private static void addSearchRequestParams(Params params, SearchRequest searchRequest) {, +    static Request searchTemplate(SearchTemplateRequest searchTemplateRequest) throws IOException {, +        Request request;, +, +        if (searchTemplateRequest.isSimulate()) {, +            request = new Request(HttpGet.METHOD_NAME, "_render/template");, +        } else {, +            SearchRequest searchRequest = searchTemplateRequest.getRequest();, +            String endpoint = endpoint(searchRequest.indices(), searchRequest.types(), "_search/template");, +            request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +            Params params = new Params(request);, +            addSearchRequestParams(params, searchRequest);, +        }, +, +        request.setEntity(createEntity(searchTemplateRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.script.mustache.SearchTemplateRequest;, +import org.elasticsearch.script.mustache.SearchTemplateResponse;, +     * Executes a request using the Search Template API., +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html">Search Template API, +     * on elastic.co</a>., +     */, +    public final SearchTemplateResponse searchTemplate(SearchTemplateRequest searchTemplateRequest,, +                                                       Header... headers) throws IOException {, +        return performRequestAndParseEntity(searchTemplateRequest, RequestConverters::searchTemplate,, +            SearchTemplateResponse::fromXContent, emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously executes a request using the Search Template API, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html">Search Template API, +     * on elastic.co</a>., +     */, +    public final void searchTemplateAsync(SearchTemplateRequest searchTemplateRequest,, +                                          ActionListener<SearchTemplateResponse> listener,, +                                          Header... headers) {, +        performRequestAsyncAndParseEntity(searchTemplateRequest, RequestConverters::searchTemplate,, +            SearchTemplateResponse::fromXContent, listener, emptySet(), headers);, +    }, +, +, +    /**, +++ b/client/rest-high-level/build.gradle, +  compile "org.elasticsearch.plugin:lang-mustache-client:${version}", +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.script.mustache.SearchTemplateRequest;, +        addSearchRequestParams(params, searchRequest);, +, +        if (searchRequest.source() != null) {]