[+++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +            Setting.dynamicKeySetting("logger.", LogLevel.INFO.name(), LogLevel::parse, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +            Setting.dynamicKeySetting("logger.", LogLevel.INFO.name(), LogLevel::parse, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +                        assert payload.length == 4;, +                        boost = PayloadHelper.decodeFloat(payload.bytes, payload.offset);, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +            Setting.dynamicKeySetting("logger.", LogLevel.INFO.name(), LogLevel::parse, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +                        assert payload.length == 4;, +                        boost = PayloadHelper.decodeFloat(payload.bytes, payload.offset);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTokenStream.java, +import static org.apache.lucene.analysis.payloads.PayloadHelper.encodeFloat;, +, +    private final BytesRef payloadSpare = new BytesRef(new byte[4]);, +            encodeFloat(boost, payloadSpare.bytes, payloadSpare.offset);, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +            Setting.dynamicKeySetting("logger.", LogLevel.INFO.name(), LogLevel::parse, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +                        assert payload.length == 4;, +                        boost = PayloadHelper.decodeFloat(payload.bytes, payload.offset);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTokenStream.java, +import static org.apache.lucene.analysis.payloads.PayloadHelper.encodeFloat;, +, +    private final BytesRef payloadSpare = new BytesRef(new byte[4]);, +            encodeFloat(boost, payloadSpare.bytes, payloadSpare.offset);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +            Setting.dynamicKeySetting("logger.", LogLevel.INFO.name(), LogLevel::parse, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +                        assert payload.length == 4;, +                        boost = PayloadHelper.decodeFloat(payload.bytes, payload.offset);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTokenStream.java, +import static org.apache.lucene.analysis.payloads.PayloadHelper.encodeFloat;, +, +    private final BytesRef payloadSpare = new BytesRef(new byte[4]);, +            encodeFloat(boost, payloadSpare.bytes, payloadSpare.offset);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    private final String key;, +    public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, boolean dynamic, Scope scope) {, +        return settings.get(key) != null;, +        return settings.get(key, defaultValue.apply(settings));, +    public boolean match(String toTest) {, +        return key.equals(toTest);, +        builder.field("key", key);, +        return new Setting<List<T>>(key, (s) -> arrayToParsableString(defaultStringValue.apply(s).toArray(Strings.EMPTY_ARRAY)), parser, dynamic, scope) {, +            private final Pattern pattern = Pattern.compile(Pattern.quote(key)+"(\\.\\d+)?");, +                String[] array = settings.getAsArray(key, null);, +            public boolean match(String toTest) {, +                return pattern.matcher(toTest).matches();, +            }, +, +            @Override, +        if (key.endsWith(".") == false) {, +            throw new IllegalArgumentException("key must end with a '.'");, +        }, +        return new Setting<Settings>(key, "", (s) -> null, dynamic, scope) {, +, +                return settings.getByPrefix(key);, +            }, +, +            @Override, +            public boolean match(String toTest) {, +                return Regex.simpleMatch(key + "*", toTest);, +        return new Setting<>(key, defaultValue, (s) -> {, +            TimeValue timeValue = TimeValue.parseTimeValue(s, null, key);, +            if (timeValue.millis() < minValue.millis()) {, +                throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be >= " + minValue);, +            }, +            return timeValue;, +        }, dynamic, scope);, +     * can easily be added with this setting. Yet, dynamic key settings don't support updaters our of the box unless {@link #getConcreteSetting(String)}, +     * is used to pull the updater., +    public static <T> Setting<T> dynamicKeySetting(String key, String defaultValue, Function<String, T> parser, boolean dynamic, Scope scope) {, +            public boolean match(String toTest) {, +                return toTest.startsWith(getKey());, +            }, +, +            @Override, +                throw new UnsupportedOperationException("dynamic settings can't be updated use #getConcreteSetting for updating");, +                    throw new IllegalArgumentException("key must match setting but didn't ["+key +"]");, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +            Setting.dynamicKeySetting("logger.", LogLevel.INFO.name(), LogLevel::parse, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +                        assert payload.length == 4;, +                        boost = PayloadHelper.decodeFloat(payload.bytes, payload.offset);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTokenStream.java, +import static org.apache.lucene.analysis.payloads.PayloadHelper.encodeFloat;, +, +    private final BytesRef payloadSpare = new BytesRef(new byte[4]);, +            encodeFloat(boost, payloadSpare.bytes, payloadSpare.offset);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    private final String key;, +    public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, boolean dynamic, Scope scope) {, +        return settings.get(key) != null;, +        return settings.get(key, defaultValue.apply(settings));, +    public boolean match(String toTest) {]