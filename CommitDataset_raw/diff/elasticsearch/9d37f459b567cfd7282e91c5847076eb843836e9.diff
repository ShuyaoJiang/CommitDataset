[+++ b/core/src/main/java/org/elasticsearch/index/query/PercolatorQuery.java, +                    TwoPhaseIterator twoPhaseIterator = scorer.twoPhaseIterator();, +                    int result = twoPhaseIterator.approximation().advance(docId);, +                        if (twoPhaseIterator.matches()) {, +                }, +++ b/core/src/main/java/org/elasticsearch/index/query/PercolatorQuery.java, +                    TwoPhaseIterator twoPhaseIterator = scorer.twoPhaseIterator();, +                    int result = twoPhaseIterator.approximation().advance(docId);, +                        if (twoPhaseIterator.matches()) {, +                }, +++ b/core/src/test/java/org/elasticsearch/index/query/PercolatorQueryTests.java, +import org.apache.lucene.search.Explanation;, +import static org.hamcrest.Matchers.is;, +        Explanation explanation = shardSearcher.explain(builder.build(), 0);, +        assertThat(explanation.isMatch(), is(true));, +        assertThat(explanation.getValue(), equalTo(topDocs.scoreDocs[0].score));, +, +        explanation = shardSearcher.explain(builder.build(), 1);, +        assertThat(explanation.isMatch(), is(false));, +, +        explanation = shardSearcher.explain(builder.build(), 2);, +        assertThat(explanation.isMatch(), is(true));, +        assertThat(explanation.getValue(), equalTo(topDocs.scoreDocs[1].score));, +, +        explanation = shardSearcher.explain(builder.build(), 3);, +        assertThat(explanation.isMatch(), is(true));, +        assertThat(explanation.getValue(), equalTo(topDocs.scoreDocs[2].score));, +, +        explanation = shardSearcher.explain(builder.build(), 4);, +        assertThat(explanation.isMatch(), is(false));, +, +        explanation = shardSearcher.explain(builder.build(), 5);, +        assertThat(explanation.isMatch(), is(true));, +        assertThat(explanation.getValue(), equalTo(topDocs.scoreDocs[3].score));, +, +        explanation = shardSearcher.explain(builder.build(), 6);, +        assertThat(explanation.isMatch(), is(false));, +, +        explanation = shardSearcher.explain(builder.build(), 7);, +        assertThat(explanation.isMatch(), is(true));, +        assertThat(explanation.getValue(), equalTo(topDocs.scoreDocs[4].score));, +            assertThat(topDocs1.scoreDocs[j].score, equalTo(topDocs2.scoreDocs[j].score));, +            Explanation explain1 = shardSearcher.explain(builder1.build(), topDocs1.scoreDocs[j].doc);, +            Explanation explain2 = shardSearcher.explain(builder2.build(), topDocs2.scoreDocs[j].doc);, +            assertThat(explain1.toHtml(), equalTo(explain2.toHtml()));]