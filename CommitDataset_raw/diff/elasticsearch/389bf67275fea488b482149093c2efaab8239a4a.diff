[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.index.reindex.AbstractBulkByScrollRequest;, +import org.elasticsearch.index.reindex.UpdateByQueryRequest;, +    static Request updateByQuery(UpdateByQueryRequest updateByQueryRequest) throws IOException {, +        String endpoint =, +            endpoint(updateByQueryRequest.indices(), updateByQueryRequest.getDocTypes(), "_update_by_query");, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        Params params = new Params(request), +            .withRouting(updateByQueryRequest.getRouting()), +            .withPipeline(updateByQueryRequest.getPipeline()), +            .withRefresh(updateByQueryRequest.isRefresh()), +            .withTimeout(updateByQueryRequest.getTimeout()), +            .withWaitForActiveShards(updateByQueryRequest.getWaitForActiveShards()), +            .withIndicesOptions(updateByQueryRequest.indicesOptions());, +        if (updateByQueryRequest.isAbortOnVersionConflict() == false) {, +            params.putParam("conflicts", "proceed");, +        }, +        if (updateByQueryRequest.getBatchSize() != AbstractBulkByScrollRequest.DEFAULT_SCROLL_SIZE) {, +            params.putParam("scroll_size", Integer.toString(updateByQueryRequest.getBatchSize()));, +        }, +        if (updateByQueryRequest.getScrollTime() != AbstractBulkByScrollRequest.DEFAULT_SCROLL_TIMEOUT) {, +            params.putParam("scroll", updateByQueryRequest.getScrollTime());, +        }, +        if (updateByQueryRequest.getSize() > 0) {, +            params.putParam("size", Integer.toString(updateByQueryRequest.getSize()));, +        }, +        request.setEntity(createEntity(updateByQueryRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.index.reindex.AbstractBulkByScrollRequest;, +import org.elasticsearch.index.reindex.UpdateByQueryRequest;, +    static Request updateByQuery(UpdateByQueryRequest updateByQueryRequest) throws IOException {, +        String endpoint =, +            endpoint(updateByQueryRequest.indices(), updateByQueryRequest.getDocTypes(), "_update_by_query");, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        Params params = new Params(request), +            .withRouting(updateByQueryRequest.getRouting()), +            .withPipeline(updateByQueryRequest.getPipeline()), +            .withRefresh(updateByQueryRequest.isRefresh()), +            .withTimeout(updateByQueryRequest.getTimeout()), +            .withWaitForActiveShards(updateByQueryRequest.getWaitForActiveShards()), +            .withIndicesOptions(updateByQueryRequest.indicesOptions());, +        if (updateByQueryRequest.isAbortOnVersionConflict() == false) {, +            params.putParam("conflicts", "proceed");, +        }, +        if (updateByQueryRequest.getBatchSize() != AbstractBulkByScrollRequest.DEFAULT_SCROLL_SIZE) {, +            params.putParam("scroll_size", Integer.toString(updateByQueryRequest.getBatchSize()));, +        }, +        if (updateByQueryRequest.getScrollTime() != AbstractBulkByScrollRequest.DEFAULT_SCROLL_TIMEOUT) {, +            params.putParam("scroll", updateByQueryRequest.getScrollTime());, +        }, +        if (updateByQueryRequest.getSize() > 0) {, +            params.putParam("size", Integer.toString(updateByQueryRequest.getSize()));, +        }, +        request.setEntity(createEntity(updateByQueryRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.index.reindex.UpdateByQueryRequest;, +     * Executes a update by query request., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html">, +     *     Update By Query API on elastic.co</a>, +     * @param updateByQueryRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public final BulkByScrollResponse updateByQuery(UpdateByQueryRequest updateByQueryRequest, RequestOptions options) throws IOException {, +        return performRequestAndParseEntity(, +            updateByQueryRequest, RequestConverters::updateByQuery, options, BulkByScrollResponse::fromXContent, emptySet(), +        );, +    }, +, +    /**, +     * Asynchronously executes an update by query request., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html">, +     *     Update By Query API on elastic.co</a>, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public final void updateByQueryAsync(UpdateByQueryRequest reindexRequest, RequestOptions options,, +                                   ActionListener<BulkByScrollResponse> listener) {, +        performRequestAsyncAndParseEntity(, +            reindexRequest, RequestConverters::updateByQuery, options, BulkByScrollResponse::fromXContent, listener, emptySet(), +        );, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.index.reindex.AbstractBulkByScrollRequest;, +import org.elasticsearch.index.reindex.UpdateByQueryRequest;, +    static Request updateByQuery(UpdateByQueryRequest updateByQueryRequest) throws IOException {, +        String endpoint =, +            endpoint(updateByQueryRequest.indices(), updateByQueryRequest.getDocTypes(), "_update_by_query");, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        Params params = new Params(request), +            .withRouting(updateByQueryRequest.getRouting())]