[+++ b/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +import org.elasticsearch.common.geo.GeoPoint;, +        } else if (type == GeoPoint.class) {, +            generator.writeStartObject();, +            generator.writeNumberField("lat", ((GeoPoint) value).lat());, +            generator.writeNumberField("lon", ((GeoPoint) value).lon());, +            generator.writeEndObject();, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +import org.elasticsearch.common.geo.GeoPoint;, +        } else if (type == GeoPoint.class) {, +            generator.writeStartObject();, +            generator.writeNumberField("lat", ((GeoPoint) value).lat());, +            generator.writeNumberField("lon", ((GeoPoint) value).lon());, +            generator.writeEndObject();, +++ b/src/test/java/org/elasticsearch/test/integration/search/functionscore/DecayFunctionScoreTests.java, +import org.elasticsearch.common.geo.GeoPoint;, +import static org.hamcrest.Matchers.*;, +                        jsonBuilder().startObject().field("test", "value value").startObject("loc").field("lat", 11).field("lon", 20), +                                .endObject().endObject()));, +                        searchSource().explain(true).query(, +                                functionScoreQuery(termQuery("test", "value")).add(fb).boostMode(CombineFunction.MULT.getName()))));, +                        searchSource().explain(true).query(, +                                functionScoreQuery(termQuery("test", "value")).add(fb).boostMode(CombineFunction.PLAIN.getName()))));, +    @Test, +    public void testParseGeoPoint() throws Exception {, +, +        createIndexMapped("test", "type1", "test", "string", "loc", "geo_point");, +        ensureYellow();, +, +        List<IndexRequestBuilder> indexBuilders = new ArrayList<IndexRequestBuilder>();, +        indexBuilders.add(new IndexRequestBuilder(client()), +                .setType("type1"), +                .setId("1"), +                .setIndex("test"), +                .setSource(, +                        jsonBuilder().startObject().field("test", "value").startObject("loc").field("lat", 20).field("lon", 11).endObject(), +                                .endObject()));, +        IndexRequestBuilder[] builders = indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]);, +, +        indexRandom("test", false, builders);, +        refresh();, +        GeoPoint point = new GeoPoint(20, 11);, +        DecayFunctionBuilder fb = new GaussDecayFunctionBuilder("loc", point, "1000km");, +, +        ActionFuture<SearchResponse> response = client().search(, +                searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(, +                        searchSource().explain(true).query(, +                                functionScoreQuery(termQuery("test", "value")).add(fb).boostMode(CombineFunction.MULT.getName()))));, +        SearchResponse sr = response.actionGet();, +        SearchHits sh = sr.getHits();, +        assertThat(sh.getTotalHits(), equalTo((long) (1)));, +        assertThat(sh.getAt(0).getId(), equalTo("1"));, +        assertThat((double) sh.getAt(0).score(), closeTo(0.30685282, 1.e-5));, +        float[] coords = {11,20};, +        fb = new GaussDecayFunctionBuilder("loc", coords, "1000km");, +, +        response = client().search(, +                searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(, +                        searchSource().explain(true).query(, +                                functionScoreQuery(termQuery("test", "value")).add(fb).boostMode(CombineFunction.MULT.getName()))));, +        sr = response.actionGet();, +        sh = sr.getHits();, +        assertThat(sh.getTotalHits(), equalTo((long) (1)));, +        assertThat(sh.getAt(0).getId(), equalTo("1"));, +        assertThat((double) sh.getAt(0).score(), closeTo(0.30685282, 1.e-5));, +    }, +]