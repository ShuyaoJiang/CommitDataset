[+++ b/rest-api-spec/api/mget.json, +        "source": {, +          "type" : "string",, +          "description" : "The URL-encoded request definition using the Query DSL (instead of using request body)", +        },, +      "required" : false, +++ b/rest-api-spec/api/mget.json, +        "source": {, +          "type" : "string",, +          "description" : "The URL-encoded request definition using the Query DSL (instead of using request body)", +        },, +      "required" : false, +++ b/rest-api-spec/test/mget/55_source.yaml, +---, +"Source":, +, + - do:, +      indices.create:, +          index: test_1, + - do:, +      cluster.health:, +          wait_for_status: yellow, +, + - do:, +      index:, +          index:   test_1, +          type:    test, +          id:      1, +          body:    { foo: bar }, +, + - do:, +      mget:, +        index:  test_1, +        type:   test, +        source: "{\"ids\":[\"1\"]}", +, + - is_true:  docs.0.found, + - match:   { docs.0._index:          test_1 }, + - match:   { docs.0._type:           test   }, + - match:   { docs.0._id:             "1"    }, +++ b/rest-api-spec/api/mget.json, +        "source": {, +          "type" : "string",, +          "description" : "The URL-encoded request definition using the Query DSL (instead of using request body)", +        },, +      "required" : false, +++ b/rest-api-spec/test/mget/55_source.yaml, +---, +"Source":, +, + - do:, +      indices.create:, +          index: test_1, + - do:, +      cluster.health:, +          wait_for_status: yellow, +, + - do:, +      index:, +          index:   test_1, +          type:    test, +          id:      1, +          body:    { foo: bar }, +, + - do:, +      mget:, +        index:  test_1, +        type:   test, +        source: "{\"ids\":[\"1\"]}", +, + - is_true:  docs.0.found, + - match:   { docs.0._index:          test_1 }, + - match:   { docs.0._type:           test   }, + - match:   { docs.0._id:             "1"    }, +++ b/src/main/java/org/elasticsearch/rest/action/get/RestMultiGetAction.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +        BytesReference content = null;, +        if (request.hasContent()) {, +            content = request.content();, +        } else {, +            String source = request.param("source");, +            if (source != null) {, +                content = new BytesArray(source);, +            }, +        }, +, +            multiGetRequest.add(request.param("index"), request.param("type"), sFields, defaultFetchSource, request.param("routing"), content, allowExplicitIndex);]