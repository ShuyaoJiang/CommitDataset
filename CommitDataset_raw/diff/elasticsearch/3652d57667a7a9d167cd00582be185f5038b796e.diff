[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.io.PrintStream;, +            out.print("Downloading ");, +            out.println("DONE");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.io.PrintStream;, +            out.print("Downloading ");, +            out.println("DONE");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +import java.io.File;, +import java.io.FileInputStream;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.io.InterruptedIOException;, +import java.io.RandomAccessFile;, +, +    public static boolean hasExtensions(File root, String... extensions) {, +        if (root != null && root.exists()) {, +            if (root.isDirectory()) {, +                File[] children = root.listFiles();, +                if (children != null) {, +                    for (File child : children) {, +                        if (child.isDirectory()) {, +                            boolean has = hasExtensions(child, extensions);, +                            if (has) {, +                                return true;, +                            }, +                        } else {, +                            for (String extension : extensions) {, +                                if (child.getName().endsWith(extension)) {, +                                    return true;, +                                }, +                            }, +                        }, +                    }, +                }, +            }, +        }, +        return false;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +import java.io.File;, +import java.io.FileNotFoundException;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.io.PrintStream;, +            out.print("Downloading ");, +            out.println("DONE");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +import java.io.File;, +import java.io.FileInputStream;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.io.InterruptedIOException;, +import java.io.RandomAccessFile;, +, +    public static boolean hasExtensions(File root, String... extensions) {, +        if (root != null && root.exists()) {, +            if (root.isDirectory()) {, +                File[] children = root.listFiles();, +                if (children != null) {, +                    for (File child : children) {, +                        if (child.isDirectory()) {, +                            boolean has = hasExtensions(child, extensions);, +                            if (has) {, +                                return true;, +                            }, +                        } else {, +                            for (String extension : extensions) {, +                                if (child.getName().endsWith(extension)) {, +                                    return true;, +                                }, +                            }, +                        }, +                    }, +                }, +            }, +        }, +        return false;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +import org.elasticsearch.common.io.Streams;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.rest.BytesRestResponse;]