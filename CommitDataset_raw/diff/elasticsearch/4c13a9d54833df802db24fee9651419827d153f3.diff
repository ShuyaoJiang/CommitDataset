[+++ b/.idea/libraries/lucene.xml, +      <root url="jar://$GRADLE_REPOSITORY$/org.apache.lucene/lucene-fast-vector-highlighter/jars/lucene-fast-vector-highlighter-3.0.1.jar!/" />, +++ b/.idea/libraries/lucene.xml, +      <root url="jar://$GRADLE_REPOSITORY$/org.apache.lucene/lucene-fast-vector-highlighter/jars/lucene-fast-vector-highlighter-3.0.1.jar!/" />, +++ b/modules/elasticsearch/build.gradle, +    compile 'org.apache.lucene:lucene-fast-vector-highlighter:3.0.1', +++ b/.idea/libraries/lucene.xml, +      <root url="jar://$GRADLE_REPOSITORY$/org.apache.lucene/lucene-fast-vector-highlighter/jars/lucene-fast-vector-highlighter-3.0.1.jar!/" />, +++ b/modules/elasticsearch/build.gradle, +    compile 'org.apache.lucene:lucene-fast-vector-highlighter:3.0.1', +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +import org.apache.lucene.analysis.TokenStream;, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.util.lucene.all.AllAnalyzer;, +        @Override public Builder store(Field.Store store) {, +            return super.store(store);, +        }, +, +            return new JsonAllFieldMapper(name, store, termVector, omitNorms, omitTermFreqAndPositions,, +    private AllAnalyzer allAnalyzer;, +, +        this(Defaults.NAME, Defaults.STORE, Defaults.TERM_VECTOR, Defaults.OMIT_NORMS, Defaults.OMIT_TERM_FREQ_AND_POSITIONS, null, null, Defaults.ENABLED);, +    protected JsonAllFieldMapper(String name, Field.Store store, Field.TermVector termVector, boolean omitNorms, boolean omitTermFreqAndPositions,, +        super(new Names(name, name, name, name), Field.Index.ANALYZED, store, termVector, 1.0f, omitNorms, omitTermFreqAndPositions,, +        // reset the entries, +        jsonContext.allEntries().reset();, +, +        Analyzer analyzer = findAnalyzer(jsonContext.docMapper());, +        TokenStream tokenStream = allTokenStream(names.indexName(), jsonContext.allEntries(), analyzer);, +        if (stored()) {, +            // TODO when its possible to pass char[] to field, we can optimize, +            Field field = new Field(names.indexName(), jsonContext.allEntries().buildText(), store, index, termVector);, +            field.setTokenStream(tokenStream);, +            return field;, +        } else {, +            return new Field(names.indexName(), tokenStream, termVector);, +        }, +    }, +, +    private Analyzer findAnalyzer(DocumentMapper docMapper) {, +        Analyzer analyzer = indexAnalyzer;, +            analyzer = docMapper.indexAnalyzer();, +        return analyzer;, +        builder.field("store", store.name().toLowerCase());, +++ b/.idea/libraries/lucene.xml, +      <root url="jar://$GRADLE_REPOSITORY$/org.apache.lucene/lucene-fast-vector-highlighter/jars/lucene-fast-vector-highlighter-3.0.1.jar!/" />, +++ b/modules/elasticsearch/build.gradle, +    compile 'org.apache.lucene:lucene-fast-vector-highlighter:3.0.1', +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +import org.apache.lucene.analysis.TokenStream;, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.util.lucene.all.AllAnalyzer;, +        @Override public Builder store(Field.Store store) {, +            return super.store(store);, +        }, +, +            return new JsonAllFieldMapper(name, store, termVector, omitNorms, omitTermFreqAndPositions,, +    private AllAnalyzer allAnalyzer;, +, +        this(Defaults.NAME, Defaults.STORE, Defaults.TERM_VECTOR, Defaults.OMIT_NORMS, Defaults.OMIT_TERM_FREQ_AND_POSITIONS, null, null, Defaults.ENABLED);, +    protected JsonAllFieldMapper(String name, Field.Store store, Field.TermVector termVector, boolean omitNorms, boolean omitTermFreqAndPositions,, +        super(new Names(name, name, name, name), Field.Index.ANALYZED, store, termVector, 1.0f, omitNorms, omitTermFreqAndPositions,, +        // reset the entries, +        jsonContext.allEntries().reset();, +, +        Analyzer analyzer = findAnalyzer(jsonContext.docMapper());, +        TokenStream tokenStream = allTokenStream(names.indexName(), jsonContext.allEntries(), analyzer);, +        if (stored()) {, +            // TODO when its possible to pass char[] to field, we can optimize, +            Field field = new Field(names.indexName(), jsonContext.allEntries().buildText(), store, index, termVector);, +            field.setTokenStream(tokenStream);, +            return field;, +        } else {, +            return new Field(names.indexName(), tokenStream, termVector);, +        }, +    }, +, +    private Analyzer findAnalyzer(DocumentMapper docMapper) {, +        Analyzer analyzer = indexAnalyzer;, +            analyzer = docMapper.indexAnalyzer();, +        return analyzer;, +        builder.field("store", store.name().toLowerCase());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonDocumentMapper.java, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +        private NamedAnalyzer indexAnalyzer;, +        private NamedAnalyzer searchAnalyzer;, +        public Builder indexAnalyzer(NamedAnalyzer indexAnalyzer) {, +        public Builder searchAnalyzer(NamedAnalyzer searchAnalyzer) {, +        rootObjectMapper.toJson(builder, params, allFieldMapper);, +++ b/.idea/libraries/lucene.xml, +      <root url="jar://$GRADLE_REPOSITORY$/org.apache.lucene/lucene-fast-vector-highlighter/jars/lucene-fast-vector-highlighter-3.0.1.jar!/" />, +++ b/modules/elasticsearch/build.gradle, +    compile 'org.apache.lucene:lucene-fast-vector-highlighter:3.0.1', +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +import org.apache.lucene.analysis.TokenStream;, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.util.lucene.all.AllAnalyzer;, +        @Override public Builder store(Field.Store store) {, +            return super.store(store);, +        }]