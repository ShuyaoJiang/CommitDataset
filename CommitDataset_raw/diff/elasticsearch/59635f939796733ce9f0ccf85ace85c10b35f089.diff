[+++ b/src/main/java/jsr166e/ConcurrentHashMapV8.java, +, +// Rev 1.121 copied from http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/jsr166e/ConcurrentHashMapV8.java?view=markup, +, +/*, + * Written by Doug Lea with assistance from members of JCP JSR-166, + * Expert Group and released to the public domain, as explained at, + * http://creativecommons.org/publicdomain/zero/1.0/, + */, +, +package jsr166e;, +, +import jsr166e.ForkJoinPool;, +, +import java.io.ObjectStreamField;, +import java.io.Serializable;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.util.AbstractMap;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Comparator;, +import java.util.ConcurrentModificationException;, +import java.util.Enumeration;, +import java.util.HashMap;, +import java.util.Hashtable;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.NoSuchElementException;, +import java.util.Set;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.atomic.AtomicReference;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.locks.LockSupport;, +import java.util.concurrent.locks.ReentrantLock;, +, +/**, + * A hash table supporting full concurrency of retrievals and, + * high expected concurrency for updates. This class obeys the, + * same functional specification as {@link java.util.Hashtable}, and, + * includes versions of methods corresponding to each method of, + * {@code Hashtable}. However, even though all operations are, + * thread-safe, retrieval operations do <em>not</em> entail locking,, + * and there is <em>not</em> any support for locking the entire table, + * in a way that prevents all access.  This class is fully, + * interoperable with {@code Hashtable} in programs that rely on its, + * thread safety but not on its synchronization details., + *, + * <p>Retrieval operations (including {@code get}) generally do not, + * block, so may overlap with update operations (including {@code put}, + * and {@code remove}). Retrievals reflect the results of the most, + * recently <em>completed</em> update operations holding upon their, + * onset. (More formally, an update operation for a given key bears a, + * <em>happens-before</em> relation with any (non-null) retrieval for, + * that key reporting the updated value.)  For aggregate operations, + * such as {@code putAll} and {@code clear}, concurrent retrievals may, + * reflect insertion or removal of only some entries.  Similarly,, + * Iterators and Enumerations return elements reflecting the state of, + * the hash table at some point at or since the creation of the, + * iterator/enumeration.  They do <em>not</em> throw {@link, + * ConcurrentModificationException}.  However, iterators are designed, + * to be used by only one thread at a time.  Bear in mind that the, + * results of aggregate status methods including {@code size}, {@code, + * isEmpty}, and {@code containsValue} are typically useful only when, + * a map is not undergoing concurrent updates in other threads., + * Otherwise the results of these methods reflect transient states, + * that may be adequate for monitoring or estimation purposes, but not, + * for program control., + *, + * <p>The table is dynamically expanded when there are too many, + * collisions (i.e., keys that have distinct hash codes but fall into, + * the same slot modulo the table size), with the expected average, + * effect of maintaining roughly two bins per mapping (corresponding, + * to a 0.75 load factor threshold for resizing). There may be much, + * variance around this average as mappings are added and removed, but, + * overall, this maintains a commonly accepted time/space tradeoff for, + * hash tables.  However, resizing this or any other kind of hash, + * table may be a relatively slow operation. When possible, it is a, + * good idea to provide a size estimate as an optional {@code, + * initialCapacity} constructor argument. An additional optional, + * {@code loadFactor} constructor argument provides a further means of, + * customizing initial table capacity by specifying the table density, + * to be used in calculating the amount of space to allocate for the, + * given number of elements.  Also, for compatibility with previous, + * versions of this class, constructors may optionally specify an, + * expected {@code concurrencyLevel} as an additional hint for, + * internal sizing.  Note that using many keys with exactly the same, + * {@code hashCode()} is a sure way to slow down performance of any, + * hash table. To ameliorate impact, when keys are {@link Comparable},, + * this class may use comparison order among keys to help break ties., + *, + * <p>A {@link Set} projection of a ConcurrentHashMapV8 may be created, + * (using {@link #newKeySet()} or {@link #newKeySet(int)}), or viewed, + * (using {@link #keySet(Object)} when only keys are of interest, and the, + * mapped values are (perhaps transiently) not used or all take the, + * same mapping value., + *, + * <p>This class and its views and iterators implement all of the, + * <em>optional</em> methods of the {@link Map} and {@link Iterator}, + * interfaces.]