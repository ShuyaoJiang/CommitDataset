[+++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +            if (false == propName.equals("null_value") && propNode == null) {, +                /*, +                 * No properties *except* null_value are allowed to have null. So we catch it here and tell the user something useful rather, +                 * than send them a null pointer exception later., +                 */, +                throw new MapperParsingException("[" + propName + "] must not have a [null] value");, +            }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +            if (false == propName.equals("null_value") && propNode == null) {, +                /*, +                 * No properties *except* null_value are allowed to have null. So we catch it here and tell the user something useful rather, +                 * than send them a null pointer exception later., +                 */, +                throw new MapperParsingException("[" + propName + "] must not have a [null] value");, +            }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/core/DateFieldMapperTests.java, +, +    public void testNullConfigValuesFail() throws MapperParsingException, IOException {, +        String mapping = XContentFactory.jsonBuilder().startObject(), +                .startObject("type"), +                    .startObject("properties"), +                        .startObject("field"), +                            .field("type", "date"), +                            .field("format", (String) null), +                        .endObject(), +                    .endObject(), +                .endObject().endObject().string();, +, +        Exception e = expectThrows(MapperParsingException.class, () -> parser.parse("type", new CompressedXContent(mapping)));, +        assertEquals("[format] must not have a [null] value", e.getMessage());, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +            if (false == propName.equals("null_value") && propNode == null) {, +                /*, +                 * No properties *except* null_value are allowed to have null. So we catch it here and tell the user something useful rather, +                 * than send them a null pointer exception later., +                 */, +                throw new MapperParsingException("[" + propName + "] must not have a [null] value");, +            }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/core/DateFieldMapperTests.java, +, +    public void testNullConfigValuesFail() throws MapperParsingException, IOException {, +        String mapping = XContentFactory.jsonBuilder().startObject(), +                .startObject("type"), +                    .startObject("properties"), +                        .startObject("field"), +                            .field("type", "date"), +                            .field("format", (String) null), +                        .endObject(), +                    .endObject(), +                .endObject().endObject().string();, +, +        Exception e = expectThrows(MapperParsingException.class, () -> parser.parse("type", new CompressedXContent(mapping)));, +        assertEquals("[format] must not have a [null] value", e.getMessage());, +    }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/core/TextFieldMapperTests.java, +import org.elasticsearch.index.mapper.MapperParsingException;, +, +    public void testNullConfigValuesFail() throws MapperParsingException, IOException {, +        String mapping = XContentFactory.jsonBuilder().startObject(), +                .startObject("type"), +                    .startObject("properties"), +                        .startObject("field"), +                            .field("type", "text"), +                            .field("analyzer", (String) null), +                        .endObject(), +                    .endObject(), +                .endObject().endObject().string();, +, +        Exception e = expectThrows(MapperParsingException.class, () -> parser.parse("type", new CompressedXContent(mapping)));, +        assertEquals("[analyzer] must not have a [null] value", e.getMessage());, +    }]