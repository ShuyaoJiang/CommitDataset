[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/NoticeTask.groovy, +    /** Directories to include notices from */, +    private List<File> licensesDirs = new ArrayList<>(), +        // Default licenses directory is ${projectDir}/licenses (if it exists), +        File licensesDir = new File(project.projectDir, 'licenses'), +        if (licensesDir.exists()) {, +            licensesDirs.add(licensesDir), +        }, +    /** Add notices from the specified directory. */, +    public void licensesDir(File licensesDir) {, +        licensesDirs.add(licensesDir), +        // This is a map rather than a set so that the sort order is the 3rd, +        // party component names, unaffected by the full path to the various files, +        Map<String, File> seen = new TreeMap<>(), +        for (File licensesDir : licensesDirs) {, +            licensesDir.eachFileMatch({ it ==~ /.*-NOTICE\.txt/ }) { File file ->, +                if (seen.containsKey(name)) {, +                    File prevFile = seen.get(name), +                    if (prevFile.text != file.text) {, +                        throw new RuntimeException("Two different notices exist for dependency '" +, +                                name + "': " + prevFile + " and " + file), +                    }, +                } else {, +                    seen.put(name, file), +                }, +            }, +        }, +        for (Map.Entry<String, File> entry : seen.entrySet()) {, +            String name = entry.getKey(), +            File file = entry.getValue(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/NoticeTask.groovy, +    /** Directories to include notices from */, +    private List<File> licensesDirs = new ArrayList<>(), +        // Default licenses directory is ${projectDir}/licenses (if it exists), +        File licensesDir = new File(project.projectDir, 'licenses'), +        if (licensesDir.exists()) {, +            licensesDirs.add(licensesDir), +        }, +    /** Add notices from the specified directory. */, +    public void licensesDir(File licensesDir) {, +        licensesDirs.add(licensesDir), +        // This is a map rather than a set so that the sort order is the 3rd, +        // party component names, unaffected by the full path to the various files, +        Map<String, File> seen = new TreeMap<>(), +        for (File licensesDir : licensesDirs) {, +            licensesDir.eachFileMatch({ it ==~ /.*-NOTICE\.txt/ }) { File file ->, +                if (seen.containsKey(name)) {, +                    File prevFile = seen.get(name), +                    if (prevFile.text != file.text) {, +                        throw new RuntimeException("Two different notices exist for dependency '" +, +                                name + "': " + prevFile + " and " + file), +                    }, +                } else {, +                    seen.put(name, file), +                }, +            }, +        }, +        for (Map.Entry<String, File> entry : seen.entrySet()) {, +            String name = entry.getKey(), +            File file = entry.getValue(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/NoticeTask.groovy, +    /** Directories to include notices from */, +    private List<File> licensesDirs = new ArrayList<>(), +        // Default licenses directory is ${projectDir}/licenses (if it exists), +        File licensesDir = new File(project.projectDir, 'licenses'), +        if (licensesDir.exists()) {, +            licensesDirs.add(licensesDir), +        }, +    /** Add notices from the specified directory. */, +    public void licensesDir(File licensesDir) {, +        licensesDirs.add(licensesDir), +        // This is a map rather than a set so that the sort order is the 3rd, +        // party component names, unaffected by the full path to the various files, +        Map<String, File> seen = new TreeMap<>(), +        for (File licensesDir : licensesDirs) {, +            licensesDir.eachFileMatch({ it ==~ /.*-NOTICE\.txt/ }) { File file ->, +                if (seen.containsKey(name)) {, +                    File prevFile = seen.get(name), +                    if (prevFile.text != file.text) {, +                        throw new RuntimeException("Two different notices exist for dependency '" +, +                                name + "': " + prevFile + " and " + file), +                    }, +                } else {, +                    seen.put(name, file), +                }, +            }, +        }, +        for (Map.Entry<String, File> entry : seen.entrySet()) {, +            String name = entry.getKey(), +            File file = entry.getValue(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +++ b/distribution/build.gradle, +  licensesDir new File(project(':core').projectDir, 'licenses'), +  licensesDir new File(project(':core').projectDir, 'licenses'), +    def defaultLicensesDir = new File(module.projectDir, 'licenses'), +    if (defaultLicensesDir.exists()) {, +      licensesDir defaultLicensesDir, +    }]