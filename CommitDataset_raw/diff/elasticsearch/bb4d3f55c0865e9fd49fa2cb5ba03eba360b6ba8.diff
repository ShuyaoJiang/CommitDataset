[+++ b/src/main/java/jsr166e/ConcurrentHashMapV8.java, +        public ConcurrentHashMapSpliterator<K> spliteratorJSR166() {, +        public ConcurrentHashMapSpliterator<V> spliteratorJSR166() {, +        public ConcurrentHashMapSpliterator<Map.Entry<K,V>> spliteratorJSR166() {, +++ b/src/main/java/jsr166e/ConcurrentHashMapV8.java, +        public ConcurrentHashMapSpliterator<K> spliteratorJSR166() {, +        public ConcurrentHashMapSpliterator<V> spliteratorJSR166() {, +        public ConcurrentHashMapSpliterator<Map.Entry<K,V>> spliteratorJSR166() {, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> replicaShardsWithState(ShardRoutingState... states) {, +        List<ShardRouting> shards = newArrayList();, +        for (ShardRouting shardEntry : replicas) {, +            for (ShardRoutingState state : states) {, +                if (shardEntry.state() == state) {, +                    shards.add(shardEntry);, +                }, +            }, +        }, +        return shards;, +    }, +, +++ b/src/main/java/jsr166e/ConcurrentHashMapV8.java, +        public ConcurrentHashMapSpliterator<K> spliteratorJSR166() {, +        public ConcurrentHashMapSpliterator<V> spliteratorJSR166() {, +        public ConcurrentHashMapSpliterator<Map.Entry<K,V>> spliteratorJSR166() {, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> replicaShardsWithState(ShardRoutingState... states) {, +        List<ShardRouting> shards = newArrayList();, +        for (ShardRouting shardEntry : replicas) {, +            for (ShardRoutingState state : states) {, +                if (shardEntry.state() == state) {, +                    shards.add(shardEntry);, +                }, +            }, +        }, +        return shards;, +    }, +, +++ b/src/test/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceRoutingTests.java, +import static org.hamcrest.Matchers.anyOf;, +        assertThat(routingNodes.node("node3").get(0).shardId().index().name(), anyOf(equalTo("test1"), equalTo("test2")));, +++ b/src/main/java/jsr166e/ConcurrentHashMapV8.java, +        public ConcurrentHashMapSpliterator<K> spliteratorJSR166() {, +        public ConcurrentHashMapSpliterator<V> spliteratorJSR166() {, +        public ConcurrentHashMapSpliterator<Map.Entry<K,V>> spliteratorJSR166() {, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> replicaShardsWithState(ShardRoutingState... states) {, +        List<ShardRouting> shards = newArrayList();, +        for (ShardRouting shardEntry : replicas) {, +            for (ShardRoutingState state : states) {, +                if (shardEntry.state() == state) {, +                    shards.add(shardEntry);, +                }, +            }, +        }, +        return shards;, +    }, +, +++ b/src/test/java/org/elasticsearch/cluster/routing/allocation/ClusterRebalanceRoutingTests.java, +import static org.hamcrest.Matchers.anyOf;, +        assertThat(routingNodes.node("node3").get(0).shardId().index().name(), anyOf(equalTo("test1"), equalTo("test2")));, +++ b/src/test/java/org/elasticsearch/cluster/routing/allocation/UpdateNumberOfReplicasTests.java, +        assertThat(routingTable.index("test").shard(0).replicaShardsWithState(STARTED).size(), equalTo(1));, +        assertThat(routingTable.index("test").shard(0).replicaShardsWithState(STARTED).get(0).currentNodeId(), equalTo(nodeHoldingReplica));, +        assertThat(routingTable.index("test").shard(0).replicaShardsWithState(INITIALIZING).size(), equalTo(1));, +        assertThat(routingTable.index("test").shard(0).replicaShardsWithState(INITIALIZING).get(0).currentNodeId(), equalTo("node3"));, +        assertThat(routingTable.index("test").shard(0).replicaShardsWithState(STARTED).size(), equalTo(2));, +        assertThat(routingTable.index("test").shard(0).replicaShardsWithState(STARTED).get(0).currentNodeId(), anyOf(equalTo(nodeHoldingReplica), equalTo("node3")));, +        assertThat(routingTable.index("test").shard(0).replicaShardsWithState(STARTED).get(1).currentNodeId(), anyOf(equalTo(nodeHoldingReplica), equalTo("node3")));]