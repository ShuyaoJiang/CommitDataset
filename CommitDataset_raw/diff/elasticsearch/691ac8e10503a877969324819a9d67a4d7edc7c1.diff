[+++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    /**, +     * Limits the maximum number of percolate query matches to be returned., +     */, +    public PercolateRequestBuilder setSize(int size) {, +        sourceBuilder().setSize(size);, +        return this;, +    }, +, +    public PercolateRequestBuilder setSort(boolean sort) {, +        sourceBuilder().setSort(sort);, +        return this;, +    }, +, +    public PercolateRequestBuilder setScore(boolean score) {, +        sourceBuilder().setScore(score);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    /**, +     * Limits the maximum number of percolate query matches to be returned., +     */, +    public PercolateRequestBuilder setSize(int size) {, +        sourceBuilder().setSize(size);, +        return this;, +    }, +, +    public PercolateRequestBuilder setSort(boolean sort) {, +        sourceBuilder().setSort(sort);, +        return this;, +    }, +, +    public PercolateRequestBuilder setScore(boolean score) {, +        sourceBuilder().setScore(score);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java, +import org.elasticsearch.rest.action.support.RestActions;, +    private boolean hasScores;, +, +    public PercolateResponse(int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures,, +                             Match[] matches, long count, long tookInMillis, boolean hasScores) {, +        this.hasScores = hasScores;, +        this.hasScores = false;, +        this.matches = EMPTY;, +        this.hasScores = false;, +        RestActions.buildBroadcastShardsHeader(builder, this);, +                    if (hasScores) {, +                        builder.field(Fields._SCORE, match.getScore());, +                    }, +        hasScores = in.readBoolean();, +        out.writeBoolean(hasScores);, +        private Text id;, +        private float score;, +        public Match(Text index, Text id, float score) {, +            this.score = score;, +        public Text id() {, +        public float score() {, +            return score;, +        }, +, +            return index();, +        }, +, +        public Text getId() {, +            return id();, +        }, +, +        public float getScore() {, +            return score();, +            score = in.readFloat();, +            out.writeFloat(score);, +        static final XContentBuilderString TOTAL = new XContentBuilderString("total");, +        static final XContentBuilderString _SCORE = new XContentBuilderString("_score");, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    /**, +     * Limits the maximum number of percolate query matches to be returned., +     */, +    public PercolateRequestBuilder setSize(int size) {, +        sourceBuilder().setSize(size);, +        return this;, +    }, +, +    public PercolateRequestBuilder setSort(boolean sort) {, +        sourceBuilder().setSort(sort);, +        return this;, +    }, +, +    public PercolateRequestBuilder setScore(boolean score) {, +        sourceBuilder().setScore(score);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java, +import org.elasticsearch.rest.action.support.RestActions;, +    private boolean hasScores;, +, +    public PercolateResponse(int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures,]