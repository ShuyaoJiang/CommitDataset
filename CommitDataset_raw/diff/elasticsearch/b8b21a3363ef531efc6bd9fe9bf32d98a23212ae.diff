[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/unit/DistanceUnit.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +import java.io.IOException;, +        @Override public String toString() {, +            return "miles";, +        }@Override public double toMiles(double distance) {, +        @Override public String toString() {, +            return "km";, +        }@Override public double toMiles(double distance) {, +    public static DistanceUnit parseUnit(String distance, DistanceUnit defaultUnit) {, +        if (distance.endsWith("mi")) {, +            return MILES;, +        } else if (distance.endsWith("miles")) {, +            return MILES;, +        } else if (distance.endsWith("km")) {, +            return KILOMETERS;, +        } else {, +            return defaultUnit;, +        }, +    }, +, +, +    public static void writeDistanceUnit(StreamOutput out, DistanceUnit unit) throws IOException {, +        if (unit == MILES) {, +            out.writeByte((byte) 0);, +        } else if (unit == KILOMETERS) {, +            out.writeByte((byte) 1);, +        }, +    }, +, +    public static DistanceUnit readDistanceUnit(StreamInput in) throws IOException {, +        byte b = in.readByte();, +        if (b == 0) {, +            return MILES;, +        } else if (b == 1) {, +            return KILOMETERS;, +        } else {, +            throw new ElasticSearchIllegalArgumentException("No type for distance unit matching [" + b + "]");, +        }, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/unit/DistanceUnit.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +import java.io.IOException;, +        @Override public String toString() {, +            return "miles";, +        }@Override public double toMiles(double distance) {, +        @Override public String toString() {, +            return "km";, +        }@Override public double toMiles(double distance) {, +    public static DistanceUnit parseUnit(String distance, DistanceUnit defaultUnit) {, +        if (distance.endsWith("mi")) {, +            return MILES;, +        } else if (distance.endsWith("miles")) {, +            return MILES;, +        } else if (distance.endsWith("km")) {, +            return KILOMETERS;, +        } else {, +            return defaultUnit;, +        }, +    }, +, +, +    public static void writeDistanceUnit(StreamOutput out, DistanceUnit unit) throws IOException {, +        if (unit == MILES) {, +            out.writeByte((byte) 0);, +        } else if (unit == KILOMETERS) {, +            out.writeByte((byte) 1);, +        }, +    }, +, +    public static DistanceUnit readDistanceUnit(StreamInput in) throws IOException {, +        byte b = in.readByte();, +        if (b == 0) {, +            return MILES;, +        } else if (b == 1) {, +            return KILOMETERS;, +        } else {, +            throw new ElasticSearchIllegalArgumentException("No type for distance unit matching [" + b + "]");, +        }, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/function/FieldsFunction.java, +    Object execute(int docId, Map<String, Object> vars);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/unit/DistanceUnit.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +import java.io.IOException;, +        @Override public String toString() {, +            return "miles";, +        }@Override public double toMiles(double distance) {, +        @Override public String toString() {, +            return "km";, +        }@Override public double toMiles(double distance) {, +    public static DistanceUnit parseUnit(String distance, DistanceUnit defaultUnit) {, +        if (distance.endsWith("mi")) {, +            return MILES;]