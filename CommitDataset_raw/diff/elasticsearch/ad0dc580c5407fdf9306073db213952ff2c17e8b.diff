[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +import org.elasticsearch.http.AbstractHttpServerTransport;, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +import org.elasticsearch.http.AbstractHttpServerTransport;, +++ /dev/null, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +import org.elasticsearch.http.AbstractHttpServerTransport;, +++ /dev/null, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java, +            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());, +            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +import org.elasticsearch.http.AbstractHttpServerTransport;, +++ /dev/null, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java, +            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());, +            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpServerTransport.java, +import org.elasticsearch.http.AbstractHttpServerTransport;, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java, +import org.elasticsearch.http.AbstractHttpServerTransport;, +++ /dev/null, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java, +            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());, +            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpServerTransport.java, +import org.elasticsearch.http.AbstractHttpServerTransport;, +++ b/server/src/main/java/org/elasticsearch/http/AbstractHttpServerTransport.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.http;, +, +import com.carrotsearch.hppc.IntHashSet;, +import com.carrotsearch.hppc.IntSet;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.component.AbstractLifecycleComponent;, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.transport.BoundTransportAddress;, +import org.elasticsearch.common.transport.PortsRange;, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import org.elasticsearch.rest.RestChannel;, +import org.elasticsearch.rest.RestRequest;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.BindTransportException;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.InetSocketAddress;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_BIND_HOST;, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_MAX_CONTENT_LENGTH;, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_PORT;, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_PUBLISH_HOST;, +import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_PUBLISH_PORT;, +, +public abstract class AbstractHttpServerTransport extends AbstractLifecycleComponent implements org.elasticsearch.http.HttpServerTransport {, +, +    protected final NetworkService networkService;, +    protected final ThreadPool threadPool;, +    protected final Dispatcher dispatcher;, +, +    protected final String[] bindHosts;, +    protected final String[] publishHosts;, +    protected final PortsRange port;, +    protected final ByteSizeValue maxContentLength;, +, +    protected volatile BoundTransportAddress boundAddress;, +, +    protected AbstractHttpServerTransport(Settings settings, NetworkService networkService, ThreadPool threadPool, Dispatcher dispatcher) {, +        super(settings);, +        this.networkService = networkService;, +        this.threadPool = threadPool;, +        this.dispatcher = dispatcher;, +, +        // we can't make the network.bind_host a fallback since we already fall back to http.host hence the extra conditional here, +        List<String> httpBindHost = SETTING_HTTP_BIND_HOST.get(settings);, +        this.bindHosts = (httpBindHost.isEmpty() ? NetworkService.GLOBAL_NETWORK_BINDHOST_SETTING.get(settings) : httpBindHost)]