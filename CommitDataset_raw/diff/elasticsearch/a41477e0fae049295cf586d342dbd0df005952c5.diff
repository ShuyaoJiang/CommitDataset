[+++ b/src/main/java/org/elasticsearch/common/io/UTF8StreamWriter.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.io;, +, +import java.io.CharConversionException;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.io.Writer;, +, +, +/**, + */, +public final class UTF8StreamWriter extends Writer {, +, +    /**, +     * Holds the current output stream or <code>null</code> if closed., +     */, +    private OutputStream _outputStream;, +, +    /**, +     * Holds the bytes' buffer., +     */, +    private final byte[] _bytes;, +, +    /**, +     * Holds the bytes buffer index., +     */, +    private int _index;, +, +    /**, +     * Creates a UTF-8 writer having a byte buffer of moderate capacity (2048)., +     */, +    public UTF8StreamWriter() {, +        _bytes = new byte[2048];, +    }, +, +    /**, +     * Creates a UTF-8 writer having a byte buffer of specified capacity., +     *, +     * @param capacity the capacity of the byte buffer., +     */, +    public UTF8StreamWriter(int capacity) {, +        _bytes = new byte[capacity];, +    }, +, +    /**, +     * Sets the output stream to use for writing until this writer is closed., +     * For example:[code], +     * Writer writer = new UTF8StreamWriter().setOutputStream(out);, +     * [/code] is equivalent but writes faster than [code], +     * Writer writer = new java.io.OutputStreamWriter(out, "UTF-8");, +     * [/code], +     *, +     * @param out the output stream., +     * @return this UTF-8 writer., +     * @throws IllegalStateException if this writer is being reused and, +     *                               it has not been {@link #close closed} or {@link #reset reset}., +     */, +    public UTF8StreamWriter setOutput(OutputStream out) {, +        if (_outputStream != null), +            throw new IllegalStateException("Writer not closed or reset");, +        _outputStream = out;, +        return this;, +    }, +, +    /**, +     * Writes a single character. This method supports 16-bits, +     * character surrogates., +     *, +     * @param c <code>char</code> the character to be written (possibly, +     *          a surrogate)., +     * @throws IOException if an I/O error occurs., +     */, +    public void write(char c) throws IOException {, +        if ((c < 0xd800) || (c > 0xdfff)) {, +            write((int) c);, +        } else if (c < 0xdc00) { // High surrogate., +            _highSurrogate = c;, +        } else { // Low surrogate., +            int code = ((_highSurrogate - 0xd800) << 10) + (c - 0xdc00), +                    + 0x10000;, +            write(code);]