[+++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +import org.apache.lucene.util.SuppressForbidden;, +import org.elasticsearch.common.io.PathUtils;, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.nio.file.Files;, +import java.nio.file.Path;, +        if (Constants.LINUX) {, +            checks.add(new MaxMapCountCheck());, +        }, +    static class MaxMapCountCheck implements Check {, +, +        private final long limit = 1 << 18;, +, +        @Override, +        public boolean check() {, +            return getMaxMapCount() != -1 && getMaxMapCount() < limit;, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                    Locale.ROOT,, +                    "max virtual memory areas vm.max_map_count [%d] likely too low, increase to at least [%d]",, +                    getMaxMapCount(),, +                    limit);, +        }, +, +        // visible for testing, +        long getMaxMapCount() {, +            return getMaxMapCount(Loggers.getLogger(BootstrapCheck.class));, +        }, +, +        // visible for testing, +        long getMaxMapCount(ESLogger logger) {, +            final Path path = getProcSysVmMaxMapCountPath();, +            try (final BufferedReader bufferedReader = getBufferedReader(path)) {, +                final String rawProcSysVmMaxMapCount = readProcSysVmMaxMapCount(bufferedReader);, +                if (rawProcSysVmMaxMapCount != null) {, +                    try {, +                        return parseProcSysVmMaxMapCount(rawProcSysVmMaxMapCount);, +                    } catch (final NumberFormatException e) {, +                        logger.warn("unable to parse vm.max_map_count [{}]", e, rawProcSysVmMaxMapCount);, +                    }, +                }, +            } catch (final IOException e) {, +                logger.warn("I/O exception while trying to read [{}]", e, path);, +            }, +            return -1;, +        }, +, +        @SuppressForbidden(reason = "access /proc/sys/vm/max_map_count"), +        private Path getProcSysVmMaxMapCountPath() {, +            return PathUtils.get("/proc/sys/vm/max_map_count");, +        }, +, +        // visible for testing, +        BufferedReader getBufferedReader(final Path path) throws IOException {, +            return Files.newBufferedReader(path);, +        }, +, +        // visible for testing, +        String readProcSysVmMaxMapCount(final BufferedReader bufferedReader) throws IOException {, +            return bufferedReader.readLine();, +        }, +, +        // visible for testing, +        long parseProcSysVmMaxMapCount(final String procSysVmMaxMapCount) throws NumberFormatException {, +            return Long.parseLong(procSysVmMaxMapCount);, +        }, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +import org.apache.lucene.util.SuppressForbidden;, +import org.elasticsearch.common.io.PathUtils;, +import java.io.BufferedReader;, +import java.io.IOException;, +import java.nio.file.Files;, +import java.nio.file.Path;, +        if (Constants.LINUX) {, +            checks.add(new MaxMapCountCheck());, +        }, +    static class MaxMapCountCheck implements Check {, +, +        private final long limit = 1 << 18;, +, +        @Override, +        public boolean check() {, +            return getMaxMapCount() != -1 && getMaxMapCount() < limit;, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                    Locale.ROOT,, +                    "max virtual memory areas vm.max_map_count [%d] likely too low, increase to at least [%d]",, +                    getMaxMapCount(),, +                    limit);, +        }]