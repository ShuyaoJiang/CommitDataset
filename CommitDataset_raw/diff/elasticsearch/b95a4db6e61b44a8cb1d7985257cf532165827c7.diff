[+++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +    with a custom analyzer will now throw an exception., +*   Attempts to set `boost` on inner span queries will now throw a parsing exception., +, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +    with a custom analyzer will now throw an exception., +*   Attempts to set `boost` on inner span queries will now throw a parsing exception., +, +++ b/docs/reference/query-dsl/span-queries.asciidoc, +It is only allowed to set boost on an outer span query. Compound span queries,, +like span_near, only use the list of matching spans of inner span queries in, +order to find their own spans, which they then use to produce a score. Scores, +are never computed on inner span queries, which is the reason why boosts are not, +allowed: they only influence the way scores are computed, not spans., +, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +    with a custom analyzer will now throw an exception., +*   Attempts to set `boost` on inner span queries will now throw a parsing exception., +, +++ b/docs/reference/query-dsl/span-queries.asciidoc, +It is only allowed to set boost on an outer span query. Compound span queries,, +like span_near, only use the list of matching spans of inner span queries in, +order to find their own spans, which they then use to produce a score. Scores, +are never computed on inner span queries, which is the reason why boosts are not, +allowed: they only influence the way scores are computed, not spans., +, +++ b/server/src/main/java/org/elasticsearch/index/query/SpanContainingQueryBuilder.java, +import static org.elasticsearch.index.query.SpanQueryBuilder.SpanQueryBuilderUtil.checkNoBoost;, +, +                    checkNoBoost(NAME, currentFieldName, parser, big);, +                    checkNoBoost(NAME, currentFieldName, parser, little);, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +    with a custom analyzer will now throw an exception., +*   Attempts to set `boost` on inner span queries will now throw a parsing exception., +, +++ b/docs/reference/query-dsl/span-queries.asciidoc, +It is only allowed to set boost on an outer span query. Compound span queries,, +like span_near, only use the list of matching spans of inner span queries in, +order to find their own spans, which they then use to produce a score. Scores, +are never computed on inner span queries, which is the reason why boosts are not, +allowed: they only influence the way scores are computed, not spans., +, +++ b/server/src/main/java/org/elasticsearch/index/query/SpanContainingQueryBuilder.java, +import static org.elasticsearch.index.query.SpanQueryBuilder.SpanQueryBuilderUtil.checkNoBoost;, +, +                    checkNoBoost(NAME, currentFieldName, parser, big);, +                    checkNoBoost(NAME, currentFieldName, parser, little);, +++ b/server/src/main/java/org/elasticsearch/index/query/SpanFirstQueryBuilder.java, +import static org.elasticsearch.index.query.SpanQueryBuilder.SpanQueryBuilderUtil.checkNoBoost;, +, +                        throw new ParsingException(parser.getTokenLocation(), "span_first [match] must be of type span query");, +                    checkNoBoost(NAME, currentFieldName, parser, match);, +            throw new ParsingException(parser.getTokenLocation(), "span_first must have [match] span query clause");, +            throw new ParsingException(parser.getTokenLocation(), "span_first must have [end] set for it");, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +    with a custom analyzer will now throw an exception., +*   Attempts to set `boost` on inner span queries will now throw a parsing exception., +, +++ b/docs/reference/query-dsl/span-queries.asciidoc, +It is only allowed to set boost on an outer span query. Compound span queries,, +like span_near, only use the list of matching spans of inner span queries in, +order to find their own spans, which they then use to produce a score. Scores, +are never computed on inner span queries, which is the reason why boosts are not, +allowed: they only influence the way scores are computed, not spans., +, +++ b/server/src/main/java/org/elasticsearch/index/query/SpanContainingQueryBuilder.java, +import static org.elasticsearch.index.query.SpanQueryBuilder.SpanQueryBuilderUtil.checkNoBoost;, +, +                    checkNoBoost(NAME, currentFieldName, parser, big);, +                    checkNoBoost(NAME, currentFieldName, parser, little);, +++ b/server/src/main/java/org/elasticsearch/index/query/SpanFirstQueryBuilder.java, +import static org.elasticsearch.index.query.SpanQueryBuilder.SpanQueryBuilderUtil.checkNoBoost;, +, +                        throw new ParsingException(parser.getTokenLocation(), "span_first [match] must be of type span query");, +                    checkNoBoost(NAME, currentFieldName, parser, match);, +            throw new ParsingException(parser.getTokenLocation(), "span_first must have [match] span query clause");, +            throw new ParsingException(parser.getTokenLocation(), "span_first must have [end] set for it");, +++ b/server/src/main/java/org/elasticsearch/index/query/SpanNearQueryBuilder.java, +import static org.elasticsearch.index.query.SpanQueryBuilder.SpanQueryBuilderUtil.checkNoBoost;, +, +                            throw new ParsingException(parser.getTokenLocation(), "span_near [clauses] must be of type span query");, +                        final SpanQueryBuilder clause = (SpanQueryBuilder) query;, +                        checkNoBoost(NAME, currentFieldName, parser, clause);, +                        clauses.add(clause);, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +    with a custom analyzer will now throw an exception., +*   Attempts to set `boost` on inner span queries will now throw a parsing exception., +, +++ b/docs/reference/query-dsl/span-queries.asciidoc, +It is only allowed to set boost on an outer span query. Compound span queries,, +like span_near, only use the list of matching spans of inner span queries in, +order to find their own spans, which they then use to produce a score. Scores, +are never computed on inner span queries, which is the reason why boosts are not, +allowed: they only influence the way scores are computed, not spans., +, +++ b/server/src/main/java/org/elasticsearch/index/query/SpanContainingQueryBuilder.java, +import static org.elasticsearch.index.query.SpanQueryBuilder.SpanQueryBuilderUtil.checkNoBoost;, +, +                    checkNoBoost(NAME, currentFieldName, parser, big);, +                    checkNoBoost(NAME, currentFieldName, parser, little);]