[+++ b/server/src/main/java/org/elasticsearch/node/Node.java, +    private final Settings originalSettings;, +            originalSettings = environment.settings();, +     * The original settings that were used to create the node, +     */, +    public Settings originalSettings() {, +        return originalSettings;, +    }, +, +    /**, +     * The settings that are used by this node. Contains original settings as well as additional settings provided by plugins., +++ b/server/src/main/java/org/elasticsearch/node/Node.java, +    private final Settings originalSettings;, +            originalSettings = environment.settings();, +     * The original settings that were used to create the node, +     */, +    public Settings originalSettings() {, +        return originalSettings;, +    }, +, +    /**, +     * The settings that are used by this node. Contains original settings as well as additional settings provided by plugins., +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +            Settings finalSettings = Settings.builder().put(node.originalSettings()).put(newSettings).put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), newIdSeed).build();, +++ b/server/src/main/java/org/elasticsearch/node/Node.java, +    private final Settings originalSettings;, +            originalSettings = environment.settings();, +     * The original settings that were used to create the node, +     */, +    public Settings originalSettings() {, +        return originalSettings;, +    }, +, +    /**, +     * The settings that are used by this node. Contains original settings as well as additional settings provided by plugins., +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +            Settings finalSettings = Settings.builder().put(node.originalSettings()).put(newSettings).put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), newIdSeed).build();, +++ b/test/framework/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java, +        List<Class<? extends Plugin>> plugins = new ArrayList<>(mockPlugins());, +        plugins.add(NodeAttrCheckPlugin.class);, +            plugins, Function.identity());, +, +    /**, +     * Plugin that adds a simple node attribute as setting and checks if that node attribute is not already defined., +     * Allows to check that the full-cluster restart logic does not copy over plugin-derived settings., +     */, +    public static class NodeAttrCheckPlugin extends Plugin {, +, +        private final Settings settings;, +, +        public NodeAttrCheckPlugin(Settings settings) {, +            this.settings = settings;, +        }, +, +        @Override, +        public Settings additionalSettings() {, +            if (settings.get("node.attr.dummy") != null) {, +                fail("dummy setting already exists");, +            }, +            return Settings.builder().put("node.attr.dummy", true).build();, +        }, +, +    }, +++ b/server/src/main/java/org/elasticsearch/node/Node.java, +    private final Settings originalSettings;, +            originalSettings = environment.settings();, +     * The original settings that were used to create the node, +     */, +    public Settings originalSettings() {, +        return originalSettings;, +    }, +, +    /**, +     * The settings that are used by this node. Contains original settings as well as additional settings provided by plugins., +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +            Settings finalSettings = Settings.builder().put(node.originalSettings()).put(newSettings).put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), newIdSeed).build();, +++ b/test/framework/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java, +        List<Class<? extends Plugin>> plugins = new ArrayList<>(mockPlugins());, +        plugins.add(NodeAttrCheckPlugin.class);, +            plugins, Function.identity());, +, +    /**, +     * Plugin that adds a simple node attribute as setting and checks if that node attribute is not already defined., +     * Allows to check that the full-cluster restart logic does not copy over plugin-derived settings., +     */, +    public static class NodeAttrCheckPlugin extends Plugin {, +, +        private final Settings settings;, +, +        public NodeAttrCheckPlugin(Settings settings) {, +            this.settings = settings;, +        }, +, +        @Override, +        public Settings additionalSettings() {, +            if (settings.get("node.attr.dummy") != null) {, +                fail("dummy setting already exists");, +            }, +            return Settings.builder().put("node.attr.dummy", true).build();, +        }]