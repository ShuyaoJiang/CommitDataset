[+++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +        ExternalNode externalNode = new ExternalNode(backwardsCompatibilityPath(), randomLong(), new SettingsSource() {, +            public Settings node(int nodeOrdinal) {, +, +            @Override, +            public Settings transportClient() {, +                return transportClientSettings();, +            }, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +        ExternalNode externalNode = new ExternalNode(backwardsCompatibilityPath(), randomLong(), new SettingsSource() {, +            public Settings node(int nodeOrdinal) {, +, +            @Override, +            public Settings transportClient() {, +                return transportClientSettings();, +            }, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +    /**, +     * This method is used to obtain additional settings for clients created by the internal cluster., +     * These settings will be applied on the client in addition to some randomized settings defined in, +     * the cluster. These setttings will also override any other settings the internal cluster might, +     * add by default., +     */, +    protected Settings transportClientSettings() {, +        return ImmutableSettings.EMPTY;, +    }, +, +        SettingsSource settingsSource = new SettingsSource() {, +            public Settings node(int nodeOrdinal) {, +, +            @Override, +            public Settings transportClient() {, +                return transportClientSettings();, +            }, +        return new InternalTestCluster(currentClusterSeed, minNumDataNodes, maxNumDataNodes, clusterName(scope.name(), ElasticsearchTestCase.CHILD_VM_ID, currentClusterSeed), settingsSource, numClientNodes, enableRandomBenchNodes);, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +        ExternalNode externalNode = new ExternalNode(backwardsCompatibilityPath(), randomLong(), new SettingsSource() {, +            public Settings node(int nodeOrdinal) {, +, +            @Override, +            public Settings transportClient() {, +                return transportClientSettings();, +            }, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +    /**, +     * This method is used to obtain additional settings for clients created by the internal cluster., +     * These settings will be applied on the client in addition to some randomized settings defined in, +     * the cluster. These setttings will also override any other settings the internal cluster might, +     * add by default., +     */, +    protected Settings transportClientSettings() {, +        return ImmutableSettings.EMPTY;, +    }, +, +        SettingsSource settingsSource = new SettingsSource() {, +            public Settings node(int nodeOrdinal) {, +, +            @Override, +            public Settings transportClient() {, +                return transportClientSettings();, +            }, +        return new InternalTestCluster(currentClusterSeed, minNumDataNodes, maxNumDataNodes, clusterName(scope.name(), ElasticsearchTestCase.CHILD_VM_ID, currentClusterSeed), settingsSource, numClientNodes, enableRandomBenchNodes);, +++ b/src/test/java/org/elasticsearch/test/ExternalNode.java, +    private final SettingsSource settingsSource;, +    ExternalNode(File path, long seed, SettingsSource settingsSource) {, +        this(path, null, seed, settingsSource);, +    ExternalNode(File path, String clusterName, long seed, SettingsSource settingsSource) {, +        this.settingsSource = settingsSource;, +        ExternalNode externalNode = new ExternalNode(path, clusterName, random.nextLong(), settingsSource);, +        Settings settings = ImmutableSettings.builder().put(settingsSource.node(nodeOrdinal)).put(defaultSettings).build();, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +        ExternalNode externalNode = new ExternalNode(backwardsCompatibilityPath(), randomLong(), new SettingsSource() {, +            public Settings node(int nodeOrdinal) {, +, +            @Override, +            public Settings transportClient() {, +                return transportClientSettings();, +            }, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +    /**, +     * This method is used to obtain additional settings for clients created by the internal cluster., +     * These settings will be applied on the client in addition to some randomized settings defined in, +     * the cluster. These setttings will also override any other settings the internal cluster might, +     * add by default., +     */, +    protected Settings transportClientSettings() {, +        return ImmutableSettings.EMPTY;, +    }, +, +        SettingsSource settingsSource = new SettingsSource() {, +            public Settings node(int nodeOrdinal) {, +, +            @Override, +            public Settings transportClient() {, +                return transportClientSettings();, +            }, +        return new InternalTestCluster(currentClusterSeed, minNumDataNodes, maxNumDataNodes, clusterName(scope.name(), ElasticsearchTestCase.CHILD_VM_ID, currentClusterSeed), settingsSource, numClientNodes, enableRandomBenchNodes);, +++ b/src/test/java/org/elasticsearch/test/ExternalNode.java, +    private final SettingsSource settingsSource;, +    ExternalNode(File path, long seed, SettingsSource settingsSource) {]