[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +        super(settings, IndicesAliasesAction.NAME, transportService, clusterService, threadPool, actionFilters, indexNameExpressionResolver,, +            IndicesAliasesRequest::new);, +    protected void masterOperation(final IndicesAliasesRequest request, final ClusterState state,, +                                   final ActionListener<AcknowledgedResponse> listener) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +        super(settings, IndicesAliasesAction.NAME, transportService, clusterService, threadPool, actionFilters, indexNameExpressionResolver,, +            IndicesAliasesRequest::new);, +    protected void masterOperation(final IndicesAliasesRequest request, final ClusterState state,, +                                   final ActionListener<AcknowledgedResponse> listener) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/exists/TransportAliasesExistAction.java, +                                       ThreadPool threadPool, ActionFilters actionFilters,, +                                       IndexNameExpressionResolver indexNameExpressionResolver) {, +        super(settings, AliasesExistAction.NAME, transportService, clusterService, threadPool, actionFilters, GetAliasesRequest::new,, +            indexNameExpressionResolver);, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ,, +            indexNameExpressionResolver.concreteIndexNames(state, request));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +        super(settings, IndicesAliasesAction.NAME, transportService, clusterService, threadPool, actionFilters, indexNameExpressionResolver,, +            IndicesAliasesRequest::new);, +    protected void masterOperation(final IndicesAliasesRequest request, final ClusterState state,, +                                   final ActionListener<AcknowledgedResponse> listener) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/exists/TransportAliasesExistAction.java, +                                       ThreadPool threadPool, ActionFilters actionFilters,, +                                       IndexNameExpressionResolver indexNameExpressionResolver) {, +        super(settings, AliasesExistAction.NAME, transportService, clusterService, threadPool, actionFilters, GetAliasesRequest::new,, +            indexNameExpressionResolver);, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ,, +            indexNameExpressionResolver.concreteIndexNames(state, request));, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/get/BaseAliasesRequestBuilder.java, +public abstract class BaseAliasesRequestBuilder<Response extends ActionResponse,, +                                                Builder extends BaseAliasesRequestBuilder<Response, Builder>>, +    extends MasterNodeReadOperationRequestBuilder<GetAliasesRequest, Response, Builder> {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +        super(settings, IndicesAliasesAction.NAME, transportService, clusterService, threadPool, actionFilters, indexNameExpressionResolver,, +            IndicesAliasesRequest::new);, +    protected void masterOperation(final IndicesAliasesRequest request, final ClusterState state,, +                                   final ActionListener<AcknowledgedResponse> listener) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/exists/TransportAliasesExistAction.java, +                                       ThreadPool threadPool, ActionFilters actionFilters,, +                                       IndexNameExpressionResolver indexNameExpressionResolver) {, +        super(settings, AliasesExistAction.NAME, transportService, clusterService, threadPool, actionFilters, GetAliasesRequest::new,, +            indexNameExpressionResolver);, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ,, +            indexNameExpressionResolver.concreteIndexNames(state, request));, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/get/BaseAliasesRequestBuilder.java, +public abstract class BaseAliasesRequestBuilder<Response extends ActionResponse,, +                                                Builder extends BaseAliasesRequestBuilder<Response, Builder>>, +    extends MasterNodeReadOperationRequestBuilder<GetAliasesRequest, Response, Builder> {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/get/TransportGetAliasesAction.java, +                                     ThreadPool threadPool, ActionFilters actionFilters,, +                                     IndexNameExpressionResolver indexNameExpressionResolver) {, +        super(settings, GetAliasesAction.NAME, transportService, clusterService, threadPool, actionFilters, GetAliasesRequest::new,, +            indexNameExpressionResolver);, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ,, +            indexNameExpressionResolver.concreteIndexNames(state, request));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +        super(settings, IndicesAliasesAction.NAME, transportService, clusterService, threadPool, actionFilters, indexNameExpressionResolver,, +            IndicesAliasesRequest::new);, +    protected void masterOperation(final IndicesAliasesRequest request, final ClusterState state,, +                                   final ActionListener<AcknowledgedResponse> listener) {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/exists/TransportAliasesExistAction.java, +                                       ThreadPool threadPool, ActionFilters actionFilters,, +                                       IndexNameExpressionResolver indexNameExpressionResolver) {, +        super(settings, AliasesExistAction.NAME, transportService, clusterService, threadPool, actionFilters, GetAliasesRequest::new,, +            indexNameExpressionResolver);, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ,, +            indexNameExpressionResolver.concreteIndexNames(state, request));, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/get/BaseAliasesRequestBuilder.java, +public abstract class BaseAliasesRequestBuilder<Response extends ActionResponse,, +                                                Builder extends BaseAliasesRequestBuilder<Response, Builder>>, +    extends MasterNodeReadOperationRequestBuilder<GetAliasesRequest, Response, Builder> {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/get/TransportGetAliasesAction.java, +                                     ThreadPool threadPool, ActionFilters actionFilters,, +                                     IndexNameExpressionResolver indexNameExpressionResolver) {, +        super(settings, GetAliasesAction.NAME, transportService, clusterService, threadPool, actionFilters, GetAliasesRequest::new,, +            indexNameExpressionResolver);, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ,, +            indexNameExpressionResolver.concreteIndexNames(state, request));, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +    public TransportAnalyzeAction(Settings settings, ThreadPool threadPool, ClusterService clusterService,, +                                  TransportService transportService, IndicesService indicesService, ActionFilters actionFilters,, +        super(settings, AnalyzeAction.NAME, threadPool, clusterService, transportService, actionFilters, indexNameExpressionResolver,, +            AnalyzeRequest::new, ThreadPool.Names.ANALYZE);, +                    throw new IllegalArgumentException(, +                        "No index provided, and trying to analyzer based on a specific field which requires the index parameter");, +                        throw new IllegalArgumentException("Can't process field [" + request.field() +, +                            "], Analysis requests are only supported on tokenized fields");, +                parseTokenFilterFactories(request, indexSettings, analysisRegistry, environment,, +                    new Tuple<>(keywordTokenizerName, keywordTokenizerFactory), charFilterFactoryList, true);, +            TokenListCreator[] tokenFiltersTokenListCreator = new TokenListCreator[tokenFilterFactories != null ?, +                tokenFilterFactories.length : 0];, +            DetailAnalyzeResponse.CharFilteredText[] charFilteredLists =, +                new DetailAnalyzeResponse.CharFilteredText[charFiltersTexts.length];]