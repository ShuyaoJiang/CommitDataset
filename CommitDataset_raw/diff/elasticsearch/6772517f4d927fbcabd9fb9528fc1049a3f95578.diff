[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +    static Variables analyze(final CompilerSettings settings, final Definition definition,, +        final Variables variables = new Variables(settings, definition, shortcut);, +        root.analyze(settings, definition, variables);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +    static Variables analyze(final CompilerSettings settings, final Definition definition,, +        final Variables variables = new Variables(settings, definition, shortcut);, +        root.analyze(settings, definition, variables);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +    public static Cast getLegalCast(final Definition definition,, +                                    final String location, final Type actual, final Type expected, final boolean explicit) {, +        Cast transform = definition.transformsMap.get(cast);, +            transform = definition.transformsMap.get(new Cast(actual, expected, false));, +    public static Type promoteNumeric(final Definition definition, final Type from, final boolean decimal, final boolean primitive) {, +            return definition.defType;, +            return primitive ? definition.doubleType : definition.doubleobjType;, +            return primitive ? definition.floatType : definition.floatobjType;, +            return primitive ? definition.longType : definition.longobjType;, +            return primitive ? definition.intType : definition.intobjType;, +    public static Type promoteNumeric(final Definition definition,, +                                      final Type from0, final Type from1, final boolean decimal, final boolean primitive) {, +            return definition.defType;, +                return primitive ? definition.doubleType : definition.doubleobjType;, +                return primitive ? definition.floatType : definition.floatobjType;, +            return primitive ? definition.longType : definition.longobjType;, +            return primitive ? definition.intType : definition.intobjType;, +    public static Type promoteAdd(final Definition definition, final Type from0, final Type from1) {, +            return definition.stringType;, +        return promoteNumeric(definition, from0, from1, true, true);, +    public static Type promoteXor(final Definition definition, final Type from0, final Type from1) {, +            return definition.booleanType;, +        return promoteNumeric(definition, from0, from1, false, true);, +    public static Type promoteEquality(final Definition definition, final Type from0, final Type from1) {, +            return definition.defType;, +            return primitive ? definition.booleanType : definition.booleanobjType;, +            return promoteNumeric(definition, from0, from1, true, primitive);, +        return definition.objectType;, +    public static Type promoteReference(final Definition definition, final Type from0, final Type from1) {, +            return definition.defType;, +                return definition.booleanType;, +                return promoteNumeric(definition, from0, from1, true, true);, +        return definition.objectType;, +    public static Type promoteConditional(final Definition definition,, +                                          final Type from0, final Type from1, final Object const0, final Object const1) {, +            return definition.defType;, +            return primitive ? definition.booleanType : definition.booleanobjType;, +                return primitive ? definition.doubleType : definition.doubleobjType;, +                return primitive ? definition.floatType : definition.floatobjType;, +                return sort0.primitive && sort1.primitive ? definition.longType : definition.longobjType;, +                        return primitive ? definition.byteType : definition.byteobjType;, +                                return primitive ? definition.byteType : definition.byteobjType;, +                        return primitive ? definition.shortType : definition.shortobjType;, +                        return primitive ? definition.intType : definition.intobjType;, +                                return primitive ? definition.byteType : definition.byteobjType;, +                        return primitive ? definition.intType : definition.intobjType;, +                                return primitive ? definition.byteType : definition.byteobjType;, +                        return primitive ? definition.shortType : definition.shortobjType;, +                        return primitive ? definition.shortType : definition.shortobjType;, +                        return primitive ? definition.intType : definition.intobjType;, +                                return primitive ? definition.shortType : definition.shortobjType;, +                        return primitive ? definition.intType : definition.intobjType;, +                        return primitive ? definition.intType : definition.intobjType;, +                        return primitive ? definition.intType : definition.intobjType;, +                        return primitive ? definition.charType : definition.charobjType;, +                                return primitive ? definition.byteType : definition.byteobjType;, +                        return primitive ? definition.intType : definition.intobjType;, +                                return primitive ? definition.byteType : definition.byteobjType;, +                        return primitive ? definition.intType : definition.intobjType;, +                                return primitive ? definition.byteType : definition.byteobjType;, +                        return primitive ? definition.intType : definition.intobjType;, +                                return primitive ? definition.byteType : definition.byteobjType;, +                        return primitive ? definition.intType : definition.intobjType;, +                        return primitive ? definition.intType : definition.intobjType;, +        return definition.objectType;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +    static Variables analyze(final CompilerSettings settings, final Definition definition,, +        final Variables variables = new Variables(settings, definition, shortcut);, +        root.analyze(settings, definition, variables);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +    public static Cast getLegalCast(final Definition definition,, +                                    final String location, final Type actual, final Type expected, final boolean explicit) {, +        Cast transform = definition.transformsMap.get(cast);, +            transform = definition.transformsMap.get(new Cast(actual, expected, false));, +    public static Type promoteNumeric(final Definition definition, final Type from, final boolean decimal, final boolean primitive) {, +            return definition.defType;]