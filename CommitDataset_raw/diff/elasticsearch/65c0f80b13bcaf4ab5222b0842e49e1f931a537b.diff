[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            // fail if somebody replaced the lucene jars, +            checkLucene();, +, +, +    private static void checkLucene() {, +        if (Version.CURRENT.luceneVersion.equals(org.apache.lucene.util.Version.LATEST) == false) {, +            throw new AssertionError("Lucene version mismatch this version of Elasticsearch requires lucene version [", +                + Version.CURRENT.luceneVersion + "]  but the current lucene version is [" + org.apache.lucene.util.Version.LATEST + "]");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            // fail if somebody replaced the lucene jars, +            checkLucene();, +, +, +    private static void checkLucene() {, +        if (Version.CURRENT.luceneVersion.equals(org.apache.lucene.util.Version.LATEST) == false) {, +            throw new AssertionError("Lucene version mismatch this version of Elasticsearch requires lucene version [", +                + Version.CURRENT.luceneVersion + "]  but the current lucene version is [" + org.apache.lucene.util.Version.LATEST + "]");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            // fail if somebody replaced the lucene jars, +            checkLucene();, +, +, +    private static void checkLucene() {, +        if (Version.CURRENT.luceneVersion.equals(org.apache.lucene.util.Version.LATEST) == false) {, +            throw new AssertionError("Lucene version mismatch this version of Elasticsearch requires lucene version [", +                + Version.CURRENT.luceneVersion + "]  but the current lucene version is [" + org.apache.lucene.util.Version.LATEST + "]");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +                    cancellableThreads.execute(() -> {, +                    });, +                            ArrayUtil.timSort(metadata, (o1, o2) -> {, +                                cancellableThreads.checkForCancel();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            // fail if somebody replaced the lucene jars, +            checkLucene();, +, +, +    private static void checkLucene() {, +        if (Version.CURRENT.luceneVersion.equals(org.apache.lucene.util.Version.LATEST) == false) {, +            throw new AssertionError("Lucene version mismatch this version of Elasticsearch requires lucene version [", +                + Version.CURRENT.luceneVersion + "]  but the current lucene version is [" + org.apache.lucene.util.Version.LATEST + "]");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +                    cancellableThreads.execute(() -> {, +                    });, +                            ArrayUtil.timSort(metadata, (o1, o2) -> {, +                                cancellableThreads.checkForCancel();, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeService.java, +        if (settings.get(TRIBE_NAME) != null) {, +                if (s.startsWith("tribe.") && !s.equals(TRIBE_NAME)) {, +    public static final String TRIBE_NAME = "tribe.name";, +, +, +            sb.put(TRIBE_NAME, entry.getKey());, +            if (settings.getAsBoolean("tribe.blocks.write", false)) {, +            blockIndicesWrite = settings.getAsArray("tribe.blocks.write.indices", Strings.EMPTY_ARRAY);, +            if (settings.getAsBoolean("tribe.blocks.metadata", false)) {, +            blockIndicesMetadata = settings.getAsArray("tribe.blocks.metadata.indices", Strings.EMPTY_ARRAY);, +            blockIndicesRead = settings.getAsArray("tribe.blocks.read.indices", Strings.EMPTY_ARRAY);, +        this.onConflict = settings.get("tribe.on_conflict", ON_CONFLICT_ANY);, +            String tribeName = tribeNode.settings().get(TRIBE_NAME);, +                String markedTribeName = discoNode.attributes().get(TRIBE_NAME);, +                    tribeAttr.put(TRIBE_NAME, tribeName);, +                String markedTribeName = index.getSettings().get(TRIBE_NAME);, +                        Settings tribeSettings = Settings.builder().put(tribeIndex.getSettings()).put(TRIBE_NAME, tribeName).build();, +                    String existingFromTribe = indexMetaData.getSettings().get(TRIBE_NAME);, +            Settings tribeSettings = Settings.builder().put(tribeIndex.getSettings()).put(TRIBE_NAME, tribeName).build();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            // fail if somebody replaced the lucene jars, +            checkLucene();, +, +, +    private static void checkLucene() {, +        if (Version.CURRENT.luceneVersion.equals(org.apache.lucene.util.Version.LATEST) == false) {, +            throw new AssertionError("Lucene version mismatch this version of Elasticsearch requires lucene version [", +                + Version.CURRENT.luceneVersion + "]  but the current lucene version is [" + org.apache.lucene.util.Version.LATEST + "]");, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +                    cancellableThreads.execute(() -> {, +                    });, +                            ArrayUtil.timSort(metadata, (o1, o2) -> {, +                                cancellableThreads.checkForCancel();, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeService.java, +        if (settings.get(TRIBE_NAME) != null) {, +                if (s.startsWith("tribe.") && !s.equals(TRIBE_NAME)) {, +    public static final String TRIBE_NAME = "tribe.name";, +, +]