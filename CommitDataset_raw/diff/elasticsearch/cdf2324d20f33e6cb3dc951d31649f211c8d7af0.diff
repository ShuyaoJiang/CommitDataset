[+++ b/build.gradle, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            // always wait for yellow before anything is executed, +            current.println(, +                    "  - do:\n" +, +                    "      raw:\n" +, +                    "        method: GET\n" +, +                    "        path: \"_cluster/health\"\n" +, +                    "        wait_for_status: \"yellow\""), +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            // always wait for yellow before anything is executed, +            current.println(, +                    "  - do:\n" +, +                    "      raw:\n" +, +                    "        method: GET\n" +, +                    "        path: \"_cluster/health\"\n" +, +                    "        wait_for_status: \"yellow\""), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +import nebula.plugin.publishing.maven.MavenScmPlugin, +            if (project.path.startsWith(':modules:')) {, +                project.integTest.clusterConfig.plugin(name, project.bundlePlugin.outputs.files), +                project.tasks.run.clusterConfig.plugin(name, project.bundlePlugin.outputs.files), +                addPomGeneration(project), +        // remove jar from the archives (things that will be published), and set it to the zip, +        project.configurations.archives.artifacts.removeAll { it.archiveTask.is project.jar }, +        project.artifacts.add('archives', bundle), +, +        // also make the zip the default artifact (used when depending on this project), +        project.configurations.getByName('default').extendsFrom = [], +        project.artifacts.add('default', bundle), +    /**, +     * Adds the plugin jar and zip as publications., +     */, +    protected static void addPomGeneration(Project project) {, +        project.plugins.apply(MavenBasePublishPlugin.class), +        project.plugins.apply(MavenScmPlugin.class), +                nebula {, +                    pom.withXml {, +                        // overwrite the name/description in the pom nebula set up, +                        Node root = asNode(), +                        for (Node node : root.children()) {, +                            if (node.name() == 'name') {, +                                node.setValue(project.pluginProperties.extension.name), +                            } else if (node.name() == 'description') {, +                                node.setValue(project.pluginProperties.extension.description), +, +    }, +}, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            // always wait for yellow before anything is executed, +            current.println(, +                    "  - do:\n" +, +                    "      raw:\n" +, +                    "        method: GET\n" +, +                    "        path: \"_cluster/health\"\n" +, +                    "        wait_for_status: \"yellow\""), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +import nebula.plugin.publishing.maven.MavenScmPlugin, +            if (project.path.startsWith(':modules:')) {, +                project.integTest.clusterConfig.plugin(name, project.bundlePlugin.outputs.files), +                project.tasks.run.clusterConfig.plugin(name, project.bundlePlugin.outputs.files), +                addPomGeneration(project), +        // remove jar from the archives (things that will be published), and set it to the zip, +        project.configurations.archives.artifacts.removeAll { it.archiveTask.is project.jar }, +        project.artifacts.add('archives', bundle), +, +        // also make the zip the default artifact (used when depending on this project), +        project.configurations.getByName('default').extendsFrom = [], +        project.artifacts.add('default', bundle), +    /**, +     * Adds the plugin jar and zip as publications., +     */, +    protected static void addPomGeneration(Project project) {, +        project.plugins.apply(MavenBasePublishPlugin.class), +        project.plugins.apply(MavenScmPlugin.class), +                nebula {, +                    pom.withXml {, +                        // overwrite the name/description in the pom nebula set up, +                        Node root = asNode(), +                        for (Node node : root.children()) {, +                            if (node.name() == 'name') {, +                                node.setValue(project.pluginProperties.extension.name)]