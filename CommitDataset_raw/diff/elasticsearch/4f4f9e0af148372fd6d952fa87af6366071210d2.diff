[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +import org.elasticsearch.search.SearchHits;, +import java.util.Collections;, +            int size = 1;, +            // tag::search-scroll-init, +            SearchRequest searchRequest = new SearchRequest("posts");, +            SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +            searchSourceBuilder.query(matchQuery("title", "Elasticsearch"));, +            searchSourceBuilder.size(size); // <1>, +            searchRequest.source(searchSourceBuilder);, +            searchRequest.scroll(TimeValue.timeValueMinutes(1L)); // <2>, +            SearchResponse searchResponse = client.search(searchRequest);, +            String scrollId = searchResponse.getScrollId(); // <3>, +            SearchHits hits = searchResponse.getHits();  // <4>, +            // end::search-scroll-init, +            assertEquals(3, hits.getTotalHits());, +            assertEquals(1, hits.getHits().length);, +            assertNotNull(scrollId);, +            // tag::search-scroll2, +            SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId); // <1>, +            scrollRequest.scroll(TimeValue.timeValueSeconds(30));, +            SearchResponse searchScrollResponse = client.searchScroll(scrollRequest);, +            scrollId = searchScrollResponse.getScrollId();  // <2>, +            hits = searchScrollResponse.getHits(); // <3>, +            assertEquals(3, hits.getTotalHits());, +            assertEquals(1, hits.getHits().length);, +            assertNotNull(scrollId);, +            // end::search-scroll2, +            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();, +            ClearScrollResponse clearScrollResponse = client.clearScroll(clearScrollRequest);, +            assertTrue(clearScrollResponse.isSucceeded());, +            // tag::scroll-request-arguments, +            // end::scroll-request-arguments, +            List<String> scrollIds = Collections.singletonList(scrollId);, +        {, +            // tag::search-scroll-example, +            final Scroll scroll = new Scroll(TimeValue.timeValueMinutes(1L));, +            SearchRequest searchRequest = new SearchRequest("posts");, +            searchRequest.scroll(scroll);, +            SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +            searchSourceBuilder.query(matchQuery("title", "Elasticsearch"));, +            searchRequest.source(searchSourceBuilder);, +, +            SearchResponse searchResponse = client.search(searchRequest); // <1>, +            String scrollId = searchResponse.getScrollId();, +            SearchHit[] searchHits = searchResponse.getHits().getHits();, +, +            while (searchHits != null && searchHits.length > 0) { // <2>, +                SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId); // <3>, +                scrollRequest.scroll(scroll);, +                searchResponse = client.searchScroll(scrollRequest);, +                scrollId = searchResponse.getScrollId();, +                searchHits = searchResponse.getHits().getHits();, +                // <4>, +            }, +, +            ClearScrollRequest clearScrollRequest = new ClearScrollRequest(); // <5>, +            clearScrollRequest.addScrollId(scrollId);, +            ClearScrollResponse clearScrollResponse = client.clearScroll(clearScrollRequest);, +            boolean succeeded = clearScrollResponse.isSucceeded();, +            // end::search-scroll-example, +            assertTrue(succeeded);, +        }, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +import org.elasticsearch.search.SearchHits;, +import java.util.Collections;, +            int size = 1;, +            // tag::search-scroll-init, +            SearchRequest searchRequest = new SearchRequest("posts");, +            SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +            searchSourceBuilder.query(matchQuery("title", "Elasticsearch"));, +            searchSourceBuilder.size(size); // <1>, +            searchRequest.source(searchSourceBuilder);, +            searchRequest.scroll(TimeValue.timeValueMinutes(1L)); // <2>, +            SearchResponse searchResponse = client.search(searchRequest);, +            String scrollId = searchResponse.getScrollId(); // <3>, +            SearchHits hits = searchResponse.getHits();  // <4>, +            // end::search-scroll-init, +            assertEquals(3, hits.getTotalHits());, +            assertEquals(1, hits.getHits().length);, +            assertNotNull(scrollId);, +            // tag::search-scroll2, +            SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId); // <1>, +            scrollRequest.scroll(TimeValue.timeValueSeconds(30));, +            SearchResponse searchScrollResponse = client.searchScroll(scrollRequest);, +            scrollId = searchScrollResponse.getScrollId();  // <2>, +            hits = searchScrollResponse.getHits(); // <3>, +            assertEquals(3, hits.getTotalHits());, +            assertEquals(1, hits.getHits().length);, +            assertNotNull(scrollId);, +            // end::search-scroll2, +            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();, +            ClearScrollResponse clearScrollResponse = client.clearScroll(clearScrollRequest);, +            assertTrue(clearScrollResponse.isSucceeded());, +            // tag::scroll-request-arguments, +            // end::scroll-request-arguments, +            List<String> scrollIds = Collections.singletonList(scrollId);, +        {, +            // tag::search-scroll-example, +            final Scroll scroll = new Scroll(TimeValue.timeValueMinutes(1L));]