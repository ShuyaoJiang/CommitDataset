[+++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +import java.io.IOException;, +, +    /** A consumer interface which allows throwing checked exceptions. */, +    @FunctionalInterface, +    interface CheckedConsumer<T> {, +        void accept(T t) throws Exception;, +    }, +, +    static <Response> ActionListener<Response> wrap(CheckedConsumer<Response> onResponse, Consumer<Exception> onFailure) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +import java.io.IOException;, +, +    /** A consumer interface which allows throwing checked exceptions. */, +    @FunctionalInterface, +    interface CheckedConsumer<T> {, +        void accept(T t) throws Exception;, +    }, +, +    static <Response> ActionListener<Response> wrap(CheckedConsumer<Response> onResponse, Consumer<Exception> onFailure) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import java.util.function.UnaryOperator;, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +import org.elasticsearch.threadpool.ThreadPool;, +    private static final Logger logger = ESLoggerFactory.getLogger(ActionModule.class);, +, +                        ClusterSettings clusterSettings, ThreadPool threadPool, List<ActionPlugin> actionPlugins) {, +        UnaryOperator<RestHandler> restWrapper = null;, +        for (ActionPlugin plugin : actionPlugins) {, +            UnaryOperator<RestHandler> newRestWrapper = plugin.getRestHandlerWrapper(threadPool.getThreadContext());, +            if (newRestWrapper != null) {, +                logger.debug("Using REST wrapper from plugin " + plugin.getClass().getName());, +                if (restWrapper != null) {, +                    throw new IllegalArgumentException("Cannot have more than one plugin implementing a REST wrapper");, +                }, +                restWrapper = newRestWrapper;, +            }, +        }, +        restController = new RestController(settings, headers, restWrapper);, +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +import java.io.IOException;, +, +    /** A consumer interface which allows throwing checked exceptions. */, +    @FunctionalInterface, +    interface CheckedConsumer<T> {, +        void accept(T t) throws Exception;, +    }, +, +    static <Response> ActionListener<Response> wrap(CheckedConsumer<Response> onResponse, Consumer<Exception> onFailure) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import java.util.function.UnaryOperator;, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +import org.elasticsearch.threadpool.ThreadPool;, +    private static final Logger logger = ESLoggerFactory.getLogger(ActionModule.class);, +, +                        ClusterSettings clusterSettings, ThreadPool threadPool, List<ActionPlugin> actionPlugins) {, +        UnaryOperator<RestHandler> restWrapper = null;, +        for (ActionPlugin plugin : actionPlugins) {, +            UnaryOperator<RestHandler> newRestWrapper = plugin.getRestHandlerWrapper(threadPool.getThreadContext());, +            if (newRestWrapper != null) {, +                logger.debug("Using REST wrapper from plugin " + plugin.getClass().getName());, +                if (restWrapper != null) {, +                    throw new IllegalArgumentException("Cannot have more than one plugin implementing a REST wrapper");, +                }, +                restWrapper = newRestWrapper;, +            }, +        }, +        restController = new RestController(settings, headers, restWrapper);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                threadPool, pluginsService.filterPlugins(ActionPlugin.class));, +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +import java.io.IOException;, +, +    /** A consumer interface which allows throwing checked exceptions. */, +    @FunctionalInterface, +    interface CheckedConsumer<T> {, +        void accept(T t) throws Exception;, +    }, +, +    static <Response> ActionListener<Response> wrap(CheckedConsumer<Response> onResponse, Consumer<Exception> onFailure) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import java.util.function.UnaryOperator;, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +import org.elasticsearch.threadpool.ThreadPool;, +    private static final Logger logger = ESLoggerFactory.getLogger(ActionModule.class);, +, +                        ClusterSettings clusterSettings, ThreadPool threadPool, List<ActionPlugin> actionPlugins) {, +        UnaryOperator<RestHandler> restWrapper = null;, +        for (ActionPlugin plugin : actionPlugins) {, +            UnaryOperator<RestHandler> newRestWrapper = plugin.getRestHandlerWrapper(threadPool.getThreadContext());, +            if (newRestWrapper != null) {, +                logger.debug("Using REST wrapper from plugin " + plugin.getClass().getName());, +                if (restWrapper != null) {, +                    throw new IllegalArgumentException("Cannot have more than one plugin implementing a REST wrapper");, +                }, +                restWrapper = newRestWrapper;, +            }]