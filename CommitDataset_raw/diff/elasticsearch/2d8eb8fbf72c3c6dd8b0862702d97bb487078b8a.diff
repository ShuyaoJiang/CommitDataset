[+++ b/docs/en/ml/functions/metric.asciidoc, +The metric functions include functions such as mean, min and max. These values, +are calculated for each bucket. Field values that cannot be converted to, +double precision floating point numbers are ignored., +, +* <<ml-metric-min,`min`>>, +* <<ml-metric-max,`max`>>, +* <<ml-metric-median,`median`>>, +* <<ml-metric-mean,`mean`>>, +* <<ml-metric-high-mean,`high_mean`>>, +* <<ml-metric-low-mean,`low_mean`>>, +* <<ml-metric-metric,`metric`>>, +* <<ml-metric-varp,`varp`>>, +* <<ml-metric-high-varp,`high_varp`>>, +* <<ml-metric-low-varp,`low_varp`>>, +[float], +[[ml-metric-min]], +==== Min, +The `min` function detects anomalies in the arithmetic minimum of a value., +The minimum value is calculated for each bucket., +High- and low-sided functions are not applicable., +This function supports the following properties:, +* `field_name` (required), +* `by_field_name` (optional), +* `over_field_name` (optional), +* `partition_field_name` (optional), +* `summary_count_field_name` (optional), +For more information about those properties,, +see <<ml-detectorconfig,Detector Configuration Objects>>., +For example, if you use the following function in a detector in your job,, +it detects where the smallest transaction is lower than previously observed., +You can use this function to detect items for sale at unintentionally low, +prices due to data entry mistakes. It models the minimum amount for each, +product over time., +//Detect when the minumum amount for a product is unusually low compared to its past amounts, +{, +  "function" : "min",, +  "field_name" : "amt",, +  "by_field_name" : "product", +}, +[float], +[[ml-metric-max]], +==== Max, +The `max` function detects anomalies in the arithmetic maximum of a value., +The maximum value is calculated for each bucket., +, +High- and low-sided functions are not applicable., +, +This function supports the following properties:, +, +* `field_name` (required), +* `by_field_name` (optional), +* `over_field_name` (optional), +* `partition_field_name` (optional), +* `summary_count_field_name` (optional), +, +For more information about those properties,, +see <<ml-detectorconfig,Detector Configuration Objects>>., +, +For example, if you use the following function in a detector in your job,, +it detects where the longest `responsetime` is longer than previously observed., +You can use this function to detect applications that have `responsetime`, +values that are unusually lengthy. It models the maximum `responsetime` for, +each application over time and detects when the longest `responsetime` is, +unusually long compared to previous applications., +, +[source,js], +--------------------------------------------------, +{, +  "function" : "max",, +  "field_name" : "responsetime",, +  "by_field_name" : "application", +}, +--------------------------------------------------, +, +This analysis can be performed alongside `high_mean` functions by, +application. By combining detectors and using the same influencer this would, +detect both unusually long individual response times and average response times, +for each bucket. For example:, +, +[source,js], +--------------------------------------------------, +{, +  "function" : "max",, +  "field_name" : "responsetime",, +  "by_field_name" : "application", +},, +{, +  "function" : "high_mean",, +  "field_name" : "responsetime",, +  "by_field_name" : "application", +}, +--------------------------------------------------, +, +[float], +[[ml-metric-median]], +==== Median, +, +The `median` function detects anomalies in the statistical median of a value., +The median value is calculated for each bucket.]