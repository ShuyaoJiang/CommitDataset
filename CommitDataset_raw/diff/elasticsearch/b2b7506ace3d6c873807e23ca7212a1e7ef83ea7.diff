[+++ b/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +import com.google.common.collect.ImmutableList;, +import org.elasticsearch.ElasticsearchIllegalStateException;, +                Object extractedValue = XContentMapValues.extractValue(nested.getField().string(), sourceAsMap);, +                if (extractedValue instanceof List) {, +                    // nested field has an array value in the _source, +                    nestedParsedSource = (List<Map<String, Object>>) extractedValue;, +                } else if (extractedValue instanceof Map) {, +                    // nested field has an object value in the _source. This just means the nested field has just one inner object, which is valid, but uncommon., +                    nestedParsedSource = ImmutableList.of((Map < String, Object >) extractedValue);, +                } else {, +                    throw new ElasticsearchIllegalStateException("extracted source isn't an object or an array");, +                }, +++ b/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +import com.google.common.collect.ImmutableList;, +import org.elasticsearch.ElasticsearchIllegalStateException;, +                Object extractedValue = XContentMapValues.extractValue(nested.getField().string(), sourceAsMap);, +                if (extractedValue instanceof List) {, +                    // nested field has an array value in the _source, +                    nestedParsedSource = (List<Map<String, Object>>) extractedValue;, +                } else if (extractedValue instanceof Map) {, +                    // nested field has an object value in the _source. This just means the nested field has just one inner object, which is valid, but uncommon., +                    nestedParsedSource = ImmutableList.of((Map < String, Object >) extractedValue);, +                } else {, +                    throw new ElasticsearchIllegalStateException("extracted source isn't an object or an array");, +                }, +++ b/src/test/java/org/elasticsearch/search/innerhits/InnerHitsTests.java, +    @Test, +    // https://github.com/elasticsearch/elasticsearch/issues/9723, +    public void testNestedDefinedAsObject() throws Exception {, +        assertAcked(prepareCreate("articles").addMapping("article", "comments", "type=nested", "title", "type=string"));, +, +        List<IndexRequestBuilder> requests = new ArrayList<>();, +        requests.add(client().prepareIndex("articles", "article", "1").setSource(jsonBuilder().startObject(), +                .field("title", "quick brown fox"), +                .startObject("comments").field("message", "fox eat quick").endObject(), +                .endObject()));, +        indexRandom(true, requests);, +, +        SearchResponse response = client().prepareSearch("articles"), +                .setQuery(nestedQuery("comments", matchQuery("comments.message", "fox")).innerHit(new QueryInnerHitBuilder())), +                .get();, +        assertNoFailures(response);, +        assertHitCount(response, 1);, +        assertThat(response.getHits().getAt(0).id(), equalTo("1"));, +        assertThat(response.getHits().getAt(0).getInnerHits().get("comments").getTotalHits(), equalTo(1l));, +        assertThat(response.getHits().getAt(0).getInnerHits().get("comments").getAt(0).id(), equalTo("1"));, +        assertThat(response.getHits().getAt(0).getInnerHits().get("comments").getAt(0).getNestedIdentity().getField().string(), equalTo("comments"));, +        assertThat(response.getHits().getAt(0).getInnerHits().get("comments").getAt(0).getNestedIdentity().getOffset(), equalTo(0));, +        assertThat(response.getHits().getAt(0).getInnerHits().get("comments").getAt(0).getNestedIdentity().getChild(), nullValue());, +    }, +]