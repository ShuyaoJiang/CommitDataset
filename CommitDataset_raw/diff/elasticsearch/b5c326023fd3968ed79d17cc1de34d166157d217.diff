[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +, +, +    public ActionModule(boolean proxy) {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +, +, +    public ActionModule(boolean proxy) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +, +, +    public ActionModule(boolean proxy) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/put/TransportUpdateSettingsAction.java, +        if (request.settings().getAsMap().size() == 1 && IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.exists(request.settings()) || IndexMetaData.INDEX_READ_ONLY_SETTING.exists(request.settings())) {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +, +, +    public ActionModule(boolean proxy) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/put/TransportUpdateSettingsAction.java, +        if (request.settings().getAsMap().size() == 1 && IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.exists(request.settings()) || IndexMetaData.INDEX_READ_ONLY_SETTING.exists(request.settings())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +    private final IndexScopeSettings indexScopeSettings;, +                                           ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver, IndexScopeSettings indexScopeSettings) {, +        this.indexScopeSettings = indexScopeSettings;, +        indexScopeSettings.validate(request.settings());, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +, +, +    public ActionModule(boolean proxy) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/put/TransportUpdateSettingsAction.java, +        if (request.settings().getAsMap().size() == 1 && IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.exists(request.settings()) || IndexMetaData.INDEX_READ_ONLY_SETTING.exists(request.settings())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +    private final IndexScopeSettings indexScopeSettings;, +                                           ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver, IndexScopeSettings indexScopeSettings) {, +        this.indexScopeSettings = indexScopeSettings;, +        indexScopeSettings.validate(request.settings());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +        return add(data, defaultIndex, defaultType, null);, +    public synchronized BulkProcessor add(BytesReference data, @Nullable String defaultIndex, @Nullable String defaultType, @Nullable Object payload) throws Exception {, +        bulkRequest.add(data, defaultIndex, defaultType, null, null, payload, true);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +, +, +    public ActionModule(boolean proxy) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/put/TransportUpdateSettingsAction.java, +        if (request.settings().getAsMap().size() == 1 && IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.exists(request.settings()) || IndexMetaData.INDEX_READ_ONLY_SETTING.exists(request.settings())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +    private final IndexScopeSettings indexScopeSettings;, +                                           ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver, IndexScopeSettings indexScopeSettings) {, +        this.indexScopeSettings = indexScopeSettings;, +        indexScopeSettings.validate(request.settings());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +        return add(data, defaultIndex, defaultType, null);, +    public synchronized BulkProcessor add(BytesReference data, @Nullable String defaultIndex, @Nullable String defaultType, @Nullable Object payload) throws Exception {, +        bulkRequest.add(data, defaultIndex, defaultType, null, null, payload, true);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        return add(data, defaultIndex, defaultType, null, null, null, true);, +        return add(data, defaultIndex, defaultType, null, null, null, allowExplicitIndex);, +    public BulkRequest add(BytesReference data, @Nullable String defaultIndex, @Nullable String defaultType, @Nullable String defaultRouting, @Nullable String[] defaultFields, @Nullable Object payload, boolean allowExplicitIndex) throws Exception {, +                                    .source(data.slice(from, nextMarker - from)), payload);, +                                    .create("create".equals(opType)), +                                .create(true), +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +, +, +    public ActionModule(boolean proxy) {]