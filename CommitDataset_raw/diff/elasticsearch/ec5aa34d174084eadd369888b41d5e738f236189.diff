[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +                    .start(request.start).end(request.end).from(request.pageParams.getFrom()).size(request.pageParams.getSize()), +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +                    .start(request.start).end(request.end).from(request.pageParams.getFrom()).size(request.pageParams.getSize()), +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/BucketsQueryBuilder.java, +import org.elasticsearch.xpack.prelert.job.results.Bucket;, + * <li>start- The start bucket time. A bucket with this timestamp will be, + * <li>end- The end bucket timestamp buckets up to but NOT including this, +        bucketsQuery.start = startTime;, +        bucketsQuery.end = endTime;, +        private String start;, +        private String end;, +        public String getStart() {, +            return start;, +        public String getEnd() {, +            return end;, +            return Objects.hash(from, size, expand, includeInterim, anomalyScoreFilter, normalizedProbability, start, end,, +                    Objects.equals(start, other.start) &&, +                    Objects.equals(end, other.end) &&, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +                    .start(request.start).end(request.end).from(request.pageParams.getFrom()).size(request.pageParams.getSize()), +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/BucketsQueryBuilder.java, +import org.elasticsearch.xpack.prelert.job.results.Bucket;, + * <li>start- The start bucket time. A bucket with this timestamp will be, + * <li>end- The end bucket timestamp buckets up to but NOT including this, +        bucketsQuery.start = startTime;, +        bucketsQuery.end = endTime;, +        private String start;, +        private String end;, +        public String getStart() {, +            return start;, +        public String getEnd() {, +            return end;, +            return Objects.hash(from, size, expand, includeInterim, anomalyScoreFilter, normalizedProbability, start, end,, +                    Objects.equals(start, other.start) &&, +                    Objects.equals(end, other.end) &&, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/ElasticsearchJobProvider.java, +                .timeRange(ElasticsearchMappings.ES_TIMESTAMP, query.getStart(), query.getEnd()), +                    partitionMaxNormalisedProbabilities(jobId, query.getStart(), query.getEnd(), query.getPartitionValue());, +                .timeRange(ElasticsearchMappings.ES_TIMESTAMP, query.getStart(), query.getEnd()), +                .timeRange(ElasticsearchMappings.ES_TIMESTAMP, query.getStart(), query.getEnd()), +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +                    .start(request.start).end(request.end).from(request.pageParams.getFrom()).size(request.pageParams.getSize()), +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/BucketsQueryBuilder.java, +import org.elasticsearch.xpack.prelert.job.results.Bucket;, + * <li>start- The start bucket time. A bucket with this timestamp will be, + * <li>end- The end bucket timestamp buckets up to but NOT including this, +        bucketsQuery.start = startTime;, +        bucketsQuery.end = endTime;, +        private String start;, +        private String end;, +        public String getStart() {, +            return start;, +        public String getEnd() {, +            return end;, +            return Objects.hash(from, size, expand, includeInterim, anomalyScoreFilter, normalizedProbability, start, end,, +                    Objects.equals(start, other.start) &&, +                    Objects.equals(end, other.end) &&, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/ElasticsearchJobProvider.java, +                .timeRange(ElasticsearchMappings.ES_TIMESTAMP, query.getStart(), query.getEnd()), +                    partitionMaxNormalisedProbabilities(jobId, query.getStart(), query.getEnd(), query.getPartitionValue());, +                .timeRange(ElasticsearchMappings.ES_TIMESTAMP, query.getStart(), query.getEnd()), +                .timeRange(ElasticsearchMappings.ES_TIMESTAMP, query.getStart(), query.getEnd()), +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/InfluencersQueryBuilder.java, + * One time query builder for influencers., + * <li>From- Skip the first N Influencers. This parameter is for paging if not, + * <li>Size- Take only this number of Influencers. Default =, + * <li>anomalyScoreThreshold- Return only influencers with an anomalyScore &gt;=, + * <li>start- The start influencer time. An influencer with this timestamp will be, + * included in the results. If 0 all influencers up to <code>end</code> are, + * <li>end- The end influencer timestamp. Influencers up to but NOT including this, + * timestamp are returned. If 0 all influencers from <code>start</code> are, +    public InfluencersQueryBuilder start(String startTime) {, +        influencersQuery.start = startTime;, +    public InfluencersQueryBuilder end(String endTime) {, +        influencersQuery.end = endTime;, +        private String start;, +        private String end;, +        public String getStart() {, +            return start;, +        public String getEnd() {, +            return end;, +            return Objects.hash(from, size, includeInterim, anomalyScoreFilter, start, end, sortField, sortDescending);, +                    Objects.equals(start, other.start) &&, +                    Objects.equals(end, other.end) &&, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +                    .start(request.start).end(request.end).from(request.pageParams.getFrom()).size(request.pageParams.getSize()), +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/BucketsQueryBuilder.java, +import org.elasticsearch.xpack.prelert.job.results.Bucket;, + * <li>start- The start bucket time. A bucket with this timestamp will be, + * <li>end- The end bucket timestamp buckets up to but NOT including this, +        bucketsQuery.start = startTime;, +        bucketsQuery.end = endTime;, +        private String start;, +        private String end;, +        public String getStart() {, +            return start;, +        public String getEnd() {, +            return end;, +            return Objects.hash(from, size, expand, includeInterim, anomalyScoreFilter, normalizedProbability, start, end,]