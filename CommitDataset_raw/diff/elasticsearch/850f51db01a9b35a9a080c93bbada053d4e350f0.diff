[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import java.util.Collections;, +    private static Environment initialEnvironment(boolean foreground, Path pidFile, Settings initialSettings) {, +        builder.put(initialSettings);, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal, Collections.emptyMap());, +            final Settings initialSettings) throws BootstrapException, NodeValidationException, UserException {, +        Environment environment = initialEnvironment(foreground, pidFile, initialSettings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import java.util.Collections;, +    private static Environment initialEnvironment(boolean foreground, Path pidFile, Settings initialSettings) {, +        builder.put(initialSettings);, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal, Collections.emptyMap());, +            final Settings initialSettings) throws BootstrapException, NodeValidationException, UserException {, +        Environment environment = initialEnvironment(foreground, pidFile, initialSettings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapException.java, + * these checked exceptions so that, + * {@link Bootstrap#init(boolean, Path, boolean, org.elasticsearch.common.settings.Settings)}, + * does not have to declare all of these checked exceptions., +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import java.util.Collections;, +    private static Environment initialEnvironment(boolean foreground, Path pidFile, Settings initialSettings) {, +        builder.put(initialSettings);, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal, Collections.emptyMap());, +            final Settings initialSettings) throws BootstrapException, NodeValidationException, UserException {, +        Environment environment = initialEnvironment(foreground, pidFile, initialSettings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapException.java, + * these checked exceptions so that, + * {@link Bootstrap#init(boolean, Path, boolean, org.elasticsearch.common.settings.Settings)}, + * does not have to declare all of these checked exceptions., +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +import org.elasticsearch.cli.EnvironmentAwareCommand;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.env.Environment;, +class Elasticsearch extends EnvironmentAwareCommand {, +    protected void execute(Terminal terminal, OptionSet options, Environment env) throws UserException {, +            init(daemonize, pidFile, quiet, env.settings());, +    void init(final boolean daemonize, final Path pidFile, final boolean quiet, Settings initialSettings), +            Bootstrap.init(!daemonize, pidFile, quiet, initialSettings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import java.util.Collections;, +    private static Environment initialEnvironment(boolean foreground, Path pidFile, Settings initialSettings) {, +        builder.put(initialSettings);, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal, Collections.emptyMap());, +            final Settings initialSettings) throws BootstrapException, NodeValidationException, UserException {, +        Environment environment = initialEnvironment(foreground, pidFile, initialSettings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapException.java, + * these checked exceptions so that, + * {@link Bootstrap#init(boolean, Path, boolean, org.elasticsearch.common.settings.Settings)}, + * does not have to declare all of these checked exceptions., +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +import org.elasticsearch.cli.EnvironmentAwareCommand;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.env.Environment;, +class Elasticsearch extends EnvironmentAwareCommand {, +    protected void execute(Terminal terminal, OptionSet options, Environment env) throws UserException {, +            init(daemonize, pidFile, quiet, env.settings());, +    void init(final boolean daemonize, final Path pidFile, final boolean quiet, Settings initialSettings), +            Bootstrap.init(!daemonize, pidFile, quiet, initialSettings);, +++ b/core/src/main/java/org/elasticsearch/cli/EnvironmentAwareCommand.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cli;, +, +import joptsimple.OptionSet;, +import joptsimple.OptionSpec;, +import joptsimple.util.KeyValuePair;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.node.internal.InternalSettingsPreparer;, +, +import java.util.HashMap;, +import java.util.Locale;, +import java.util.Map;, +, +/** A cli command which requires an {@link org.elasticsearch.env.Environment} to use current paths and settings. */, +public abstract class EnvironmentAwareCommand extends Command {, +, +    private final OptionSpec<KeyValuePair> settingOption;, +, +    public EnvironmentAwareCommand(String description) {, +        super(description);, +        this.settingOption = parser.accepts("E", "Configure a setting").withRequiredArg().ofType(KeyValuePair.class);, +    }]