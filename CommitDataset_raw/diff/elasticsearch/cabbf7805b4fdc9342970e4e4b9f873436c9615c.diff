[+++ b/pom.xml, +                                <tests.cluster_seed>${tests.cluster_seed}</tests.cluster_seed>, +++ b/pom.xml, +                                <tests.cluster_seed>${tests.cluster_seed}</tests.cluster_seed>, +++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +import org.junit.After;, +import org.junit.AfterClass;, +import org.junit.Before;, +import org.junit.Ignore;, +import static org.hamcrest.Matchers.emptyIterable;, +    private static final TestCluster cluster = new TestCluster(SHARED_CLUSTER_SEED, TestCluster.clusterName("shared", ElasticsearchTestCase.CHILD_VM_ID, SHARED_CLUSTER_SEED));, +        cluster.beforeTest(getRandom());, +        assertThat(errors, emptyIterable());, +++ b/pom.xml, +                                <tests.cluster_seed>${tests.cluster_seed}</tests.cluster_seed>, +++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +import org.junit.After;, +import org.junit.AfterClass;, +import org.junit.Before;, +import org.junit.Ignore;, +import static org.hamcrest.Matchers.emptyIterable;, +    private static final TestCluster cluster = new TestCluster(SHARED_CLUSTER_SEED, TestCluster.clusterName("shared", ElasticsearchTestCase.CHILD_VM_ID, SHARED_CLUSTER_SEED));, +        cluster.beforeTest(getRandom());, +        assertThat(errors, emptyIterable());, +++ /dev/null, +++ b/pom.xml, +                                <tests.cluster_seed>${tests.cluster_seed}</tests.cluster_seed>, +++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +import org.junit.After;, +import org.junit.AfterClass;, +import org.junit.Before;, +import org.junit.Ignore;, +import static org.hamcrest.Matchers.emptyIterable;, +    private static final TestCluster cluster = new TestCluster(SHARED_CLUSTER_SEED, TestCluster.clusterName("shared", ElasticsearchTestCase.CHILD_VM_ID, SHARED_CLUSTER_SEED));, +        cluster.beforeTest(getRandom());, +        assertThat(errors, emptyIterable());, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/ElasticsearchTestCase.java, +import com.carrotsearch.randomizedtesting.SeedUtils;, +    public static final long SHARED_CLUSTER_SEED = clusterSeed();, +    , +    private static long clusterSeed() {, +        String property = System.getProperty("tests.cluster_seed");, +        if (property == null || property.isEmpty()) {, +            return System.nanoTime();, +        }, +        return SeedUtils.parseSeed(property);, +        , +    }, +    , +++ b/pom.xml, +                                <tests.cluster_seed>${tests.cluster_seed}</tests.cluster_seed>, +++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +import org.junit.After;, +import org.junit.AfterClass;, +import org.junit.Before;, +import org.junit.Ignore;, +import static org.hamcrest.Matchers.emptyIterable;, +    private static final TestCluster cluster = new TestCluster(SHARED_CLUSTER_SEED, TestCluster.clusterName("shared", ElasticsearchTestCase.CHILD_VM_ID, SHARED_CLUSTER_SEED));, +        cluster.beforeTest(getRandom());, +        assertThat(errors, emptyIterable());, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/ElasticsearchTestCase.java, +import com.carrotsearch.randomizedtesting.SeedUtils;, +    public static final long SHARED_CLUSTER_SEED = clusterSeed();, +    , +    private static long clusterSeed() {, +        String property = System.getProperty("tests.cluster_seed");, +        if (property == null || property.isEmpty()) {, +            return System.nanoTime();, +        }, +        return SeedUtils.parseSeed(property);, +        , +    }, +    , +++ b/src/test/java/org/elasticsearch/TestCluster.java, +import com.carrotsearch.randomizedtesting.SeedUtils;, +import org.elasticsearch.index.store.mock.MockRamIndexStoreModule;, +import static com.google.common.collect.Maps.newTreeMap;, +    /* sorted map to make traverse order reproducible */, +    private final TreeMap<String, NodeAndClient> nodes = newTreeMap(); , +    private NodeAndClient clientNode; // currently unused, +    /* We have a fixed number of shared nodes that we keep around across tests */, +    private final int numSharedNodes;, +    /* Each shared node has a node seed that is used to start up the node and get default settings, +     * this is important if a node is randomly shut down in a test since the next test relies on a, +     * fully shared cluster to be more reproducible */, +    private final long[] sharedNodesSeeds;, +    public TestCluster(long clusterSeed, String clusterName) {, +        this(clusterSeed, clusterName, ImmutableSettings.EMPTY);, +    private TestCluster(long clusterSeed, String clusterName, Settings defaultSettings) {, +        Random random = new Random(clusterSeed);, +        numSharedNodes = 2 + random.nextInt(4); // at least 2 nodes, +        /*, +         *  TODO , +         *  - we might want start some master only nodes?, +         *  - we could add a flag that returns a client to the master all the time?, +         *  - we could add a flag that never returns a client to the master , +         *  - along those lines use a dedicated node that is master eligible and let all other nodes be only data nodes, +         */]