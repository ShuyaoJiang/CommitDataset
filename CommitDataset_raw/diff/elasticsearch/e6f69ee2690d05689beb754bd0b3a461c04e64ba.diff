[+++ b/.ci/java-versions.properties, +# This file is used with all of the non-matrix tests in Jenkins., +, +# This .properties file defines the versions of Java with which to, +# build and test Elasticsearch for this branch. Valid Java versions, +# are 'java' or 'openjdk' followed by the major release number., +, +ES_BUILD_JAVA=java10, +ES_RUNTIME_JAVA=java8, +++ b/.ci/java-versions.properties, +# This file is used with all of the non-matrix tests in Jenkins., +, +# This .properties file defines the versions of Java with which to, +# build and test Elasticsearch for this branch. Valid Java versions, +# are 'java' or 'openjdk' followed by the major release number., +, +ES_BUILD_JAVA=java10, +ES_RUNTIME_JAVA=java8, +++ b/.ci/matrix-build-javas.yml, +ES_BUILD_JAVA:, +  - java10, +++ b/.ci/java-versions.properties, +# This file is used with all of the non-matrix tests in Jenkins., +, +# This .properties file defines the versions of Java with which to, +# build and test Elasticsearch for this branch. Valid Java versions, +# are 'java' or 'openjdk' followed by the major release number., +, +ES_BUILD_JAVA=java10, +ES_RUNTIME_JAVA=java8, +++ b/.ci/matrix-build-javas.yml, +ES_BUILD_JAVA:, +  - java10, +++ b/.ci/matrix-java-exclusions.yml, +exclude:, +++ b/.ci/java-versions.properties, +# This file is used with all of the non-matrix tests in Jenkins., +, +# This .properties file defines the versions of Java with which to, +# build and test Elasticsearch for this branch. Valid Java versions, +# are 'java' or 'openjdk' followed by the major release number., +, +ES_BUILD_JAVA=java10, +ES_RUNTIME_JAVA=java8, +++ b/.ci/matrix-build-javas.yml, +ES_BUILD_JAVA:, +  - java10, +++ b/.ci/matrix-java-exclusions.yml, +exclude:, +++ b/.ci/matrix-runtime-javas.yml, +ES_RUNTIME_JAVA:, +  - java8, +  - java10, +++ b/.ci/java-versions.properties, +# This file is used with all of the non-matrix tests in Jenkins., +, +# This .properties file defines the versions of Java with which to, +# build and test Elasticsearch for this branch. Valid Java versions, +# are 'java' or 'openjdk' followed by the major release number., +, +ES_BUILD_JAVA=java10, +ES_RUNTIME_JAVA=java8, +++ b/.ci/matrix-build-javas.yml, +ES_BUILD_JAVA:, +  - java10, +++ b/.ci/matrix-java-exclusions.yml, +exclude:, +++ b/.ci/matrix-runtime-javas.yml, +ES_RUNTIME_JAVA:, +  - java8, +  - java10, +++ b/.dir-locals.el, +((java-mode, +  ., +  ((eval, +    ., +    (progn, +      (defun my/point-in-defun-declaration-p (), +        (let ((bod (save-excursion (c-beginning-of-defun), +                                   (point)))), +          (<= bod, +              (point), +              (save-excursion (goto-char bod), +                              (re-search-forward "{"), +                              (point))))), +, +      (defun my/is-string-concatenation-p (), +        "Returns true if the previous line is a string concatenation", +        (save-excursion, +          (let ((start (point))), +            (forward-line -1), +            (if (re-search-forward " \\\+$" start t) t nil)))), +, +      (defun my/inside-java-lambda-p (), +        "Returns true if point is the first statement inside of a lambda", +        (save-excursion, +          (c-beginning-of-statement-1), +          (let ((start (point))), +            (forward-line -1), +            (if (search-forward " -> {" start t) t nil))))]