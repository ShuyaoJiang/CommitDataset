[+++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Checks if this engine has every operations since  {@code startingSeqNo}(inclusive) in its translog, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Checks if this engine has every operations since  {@code startingSeqNo}(inclusive) in its translog, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +     * Creates a new history snapshot for reading operations since the provided seqno from the translog., +            final Releasable softDeletesRetentionLock = softDeletesPolicy.acquireRetentionLock();, +            final Closeable translogRetentionLock;, +            try {, +                translogRetentionLock = translog.acquireRetentionLock();, +            } catch (Exception e) {, +                softDeletesRetentionLock.close();, +                throw e;, +            }, +            return () -> IOUtils.close(translogRetentionLock, softDeletesRetentionLock);, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Checks if this engine has every operations since  {@code startingSeqNo}(inclusive) in its translog, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +     * Creates a new history snapshot for reading operations since the provided seqno from the translog., +            final Releasable softDeletesRetentionLock = softDeletesPolicy.acquireRetentionLock();, +            final Closeable translogRetentionLock;, +            try {, +                translogRetentionLock = translog.acquireRetentionLock();, +            } catch (Exception e) {, +                softDeletesRetentionLock.close();, +                throw e;, +            }, +            return () -> IOUtils.close(translogRetentionLock, softDeletesRetentionLock);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +                // We need to set this to 0 to create a translog roughly according to the retention policy on the target. Note that it will, +                // still filter out legacy operations without seqNo., +                startingSeqNo = 0;, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Checks if this engine has every operations since  {@code startingSeqNo}(inclusive) in its translog, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +     * Creates a new history snapshot for reading operations since the provided seqno from the translog., +            final Releasable softDeletesRetentionLock = softDeletesPolicy.acquireRetentionLock();, +            final Closeable translogRetentionLock;, +            try {, +                translogRetentionLock = translog.acquireRetentionLock();, +            } catch (Exception e) {, +                softDeletesRetentionLock.close();, +                throw e;, +            }, +            return () -> IOUtils.close(translogRetentionLock, softDeletesRetentionLock);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +                // We need to set this to 0 to create a translog roughly according to the retention policy on the target. Note that it will, +                // still filter out legacy operations without seqNo., +                startingSeqNo = 0;, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +        // for tests, +        public long getStartNanoTime() {, +            return startNanoTime;, +        }, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Checks if this engine has every operations since  {@code startingSeqNo}(inclusive) in its translog, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +     * Creates a new history snapshot for reading operations since the provided seqno from the translog., +            final Releasable softDeletesRetentionLock = softDeletesPolicy.acquireRetentionLock();, +            final Closeable translogRetentionLock;, +            try {, +                translogRetentionLock = translog.acquireRetentionLock();, +            } catch (Exception e) {, +                softDeletesRetentionLock.close();, +                throw e;, +            }, +            return () -> IOUtils.close(translogRetentionLock, softDeletesRetentionLock);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +                // We need to set this to 0 to create a translog roughly according to the retention policy on the target. Note that it will, +                // still filter out legacy operations without seqNo., +                startingSeqNo = 0;, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +        // for tests, +        public long getStartNanoTime() {, +            return startNanoTime;, +        }, +++ b/server/src/test/java/org/elasticsearch/index/shard/PrimaryReplicaSyncerTests.java, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Checks if this engine has every operations since  {@code startingSeqNo}(inclusive) in its translog, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +     * Creates a new history snapshot for reading operations since the provided seqno from the translog., +            final Releasable softDeletesRetentionLock = softDeletesPolicy.acquireRetentionLock();, +            final Closeable translogRetentionLock;, +            try {, +                translogRetentionLock = translog.acquireRetentionLock();, +            } catch (Exception e) {, +                softDeletesRetentionLock.close();, +                throw e;, +            }, +            return () -> IOUtils.close(translogRetentionLock, softDeletesRetentionLock);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +                // We need to set this to 0 to create a translog roughly according to the retention policy on the target. Note that it will, +                // still filter out legacy operations without seqNo., +                startingSeqNo = 0;, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +        // for tests, +        public long getStartNanoTime() {, +            return startNanoTime;, +        }, +++ b/server/src/test/java/org/elasticsearch/index/shard/PrimaryReplicaSyncerTests.java]