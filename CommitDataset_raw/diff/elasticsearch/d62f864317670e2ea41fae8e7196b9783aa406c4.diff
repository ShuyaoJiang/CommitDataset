[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +            clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", request.waitForEvents(), new ClusterStateUpdateTask() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +            clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", request.waitForEvents(), new ClusterStateUpdateTask() {, +++ b/core/src/main/java/org/elasticsearch/cluster/AckedClusterStateUpdateTask.java, +public abstract class AckedClusterStateUpdateTask<Response> extends ClusterStateUpdateTask {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +            clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", request.waitForEvents(), new ClusterStateUpdateTask() {, +++ b/core/src/main/java/org/elasticsearch/cluster/AckedClusterStateUpdateTask.java, +public abstract class AckedClusterStateUpdateTask<Response> extends ClusterStateUpdateTask {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +            clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", request.waitForEvents(), new ClusterStateUpdateTask() {, +++ b/core/src/main/java/org/elasticsearch/cluster/AckedClusterStateUpdateTask.java, +public abstract class AckedClusterStateUpdateTask<Response> extends ClusterStateUpdateTask {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.unit.TimeValue;, +, +    /**, +     * Called when the result of the {@link #execute(ClusterState)} have been processed, +     * properly by all listeners., +     */, +    public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +    }, +, +    /**, +     * If the cluster state update task wasn't processed by the provided timeout, call, +     * {@link #onFailure(String, Throwable)}. May return null to indicate no timeout is needed (default)., +     */, +    @Nullable, +    public TimeValue timeout() {, +        return null;, +    }, +, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +            clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", request.waitForEvents(), new ClusterStateUpdateTask() {, +++ b/core/src/main/java/org/elasticsearch/cluster/AckedClusterStateUpdateTask.java, +public abstract class AckedClusterStateUpdateTask<Response> extends ClusterStateUpdateTask {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.unit.TimeValue;, +, +    /**, +     * Called when the result of the {@link #execute(ClusterState)} have been processed, +     * properly by all listeners., +     */, +    public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +    }, +, +    /**, +     * If the cluster state update task wasn't processed by the provided timeout, call, +     * {@link #onFailure(String, Throwable)}. May return null to indicate no timeout is needed (default)., +     */, +    @Nullable, +    public TimeValue timeout() {, +        return null;, +    }, +, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +            clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", request.waitForEvents(), new ClusterStateUpdateTask() {, +++ b/core/src/main/java/org/elasticsearch/cluster/AckedClusterStateUpdateTask.java, +public abstract class AckedClusterStateUpdateTask<Response> extends ClusterStateUpdateTask {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.unit.TimeValue;, +, +    /**, +     * Called when the result of the {@link #execute(ClusterState)} have been processed, +     * properly by all listeners., +     */, +    public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +    }, +, +    /**, +     * If the cluster state update task wasn't processed by the provided timeout, call, +     * {@link #onFailure(String, Throwable)}. May return null to indicate no timeout is needed (default)., +     */, +    @Nullable, +    public TimeValue timeout() {, +        return null;, +    }, +, +, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +            clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", request.waitForEvents(), new ClusterStateUpdateTask() {, +++ b/core/src/main/java/org/elasticsearch/cluster/AckedClusterStateUpdateTask.java, +public abstract class AckedClusterStateUpdateTask<Response> extends ClusterStateUpdateTask {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.unit.TimeValue;]