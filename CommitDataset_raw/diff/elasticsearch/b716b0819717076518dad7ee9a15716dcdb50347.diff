[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.verify.VerifyRepositoryRequest;, +    static Request verifyRepository(VerifyRepositoryRequest verifyRepositoryRequest) {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot"), +            .addPathPart(verifyRepositoryRequest.name()), +            .addPathPartAsIs("_verify"), +            .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(verifyRepositoryRequest.masterNodeTimeout());, +        parameters.withTimeout(verifyRepositoryRequest.timeout());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.verify.VerifyRepositoryRequest;, +    static Request verifyRepository(VerifyRepositoryRequest verifyRepositoryRequest) {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot"), +            .addPathPart(verifyRepositoryRequest.name()), +            .addPathPartAsIs("_verify"), +            .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(verifyRepositoryRequest.masterNodeTimeout());, +        parameters.withTimeout(verifyRepositoryRequest.timeout());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.repositories.verify.VerifyRepositoryRequest;, +import org.elasticsearch.action.admin.cluster.repositories.verify.VerifyRepositoryResponse;, +, +    /**, +     * Verifies a snapshot repository., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public VerifyRepositoryResponse verifyRepository(VerifyRepositoryRequest verifyRepositoryRequest, Header... headers), +        throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(verifyRepositoryRequest, RequestConverters::verifyRepository,, +            VerifyRepositoryResponse::fromXContent, emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously verifies a snapshot repository., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public void verifyRepositoryAsync(VerifyRepositoryRequest verifyRepositoryRequest,, +                                      ActionListener<VerifyRepositoryResponse> listener, Header... headers) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(verifyRepositoryRequest, RequestConverters::verifyRepository,, +            VerifyRepositoryResponse::fromXContent, listener, emptySet(), headers);, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.verify.VerifyRepositoryRequest;, +    static Request verifyRepository(VerifyRepositoryRequest verifyRepositoryRequest) {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot"), +            .addPathPart(verifyRepositoryRequest.name()), +            .addPathPartAsIs("_verify"), +            .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(verifyRepositoryRequest.masterNodeTimeout());, +        parameters.withTimeout(verifyRepositoryRequest.timeout());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.repositories.verify.VerifyRepositoryRequest;, +import org.elasticsearch.action.admin.cluster.repositories.verify.VerifyRepositoryResponse;, +, +    /**, +     * Verifies a snapshot repository., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public VerifyRepositoryResponse verifyRepository(VerifyRepositoryRequest verifyRepositoryRequest, Header... headers), +        throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(verifyRepositoryRequest, RequestConverters::verifyRepository,, +            VerifyRepositoryResponse::fromXContent, emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously verifies a snapshot repository., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public void verifyRepositoryAsync(VerifyRepositoryRequest verifyRepositoryRequest,, +                                      ActionListener<VerifyRepositoryResponse> listener, Header... headers) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(verifyRepositoryRequest, RequestConverters::verifyRepository,, +            VerifyRepositoryResponse::fromXContent, listener, emptySet(), headers);, +    }, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java]