[+++ b/src/main/java/org/elasticsearch/index/query/ScriptQueryParser.java, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.RandomAccessWeight;, +import org.apache.lucene.search.Weight;, +        Query query = new ScriptQuery(scriptLang, script, scriptType, params, parseContext.scriptService(), parseContext.lookup());, +    static class ScriptQuery extends Query {, +        private ScriptQuery(String scriptLang, String script, ScriptService.ScriptType scriptType, Map<String, Object> params, ScriptService scriptService, SearchLookup searchLookup) {, +            ScriptQuery that = (ScriptQuery) o;, +        public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {, +            return new RandomAccessWeight(this) {, +                @Override, +                protected Bits getMatchingDocs(final LeafReaderContext context) throws IOException {, +                    return new Bits() {, +                        public boolean get(int doc) {, +                            leafScript.setDocument(doc);, +                            Object val = leafScript.run();, +                        public int length() {, +                            return context.reader().maxDoc();, +, +                    };, +                }, +            };, +++ b/src/main/java/org/elasticsearch/index/query/ScriptQueryParser.java, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.RandomAccessWeight;, +import org.apache.lucene.search.Weight;, +        Query query = new ScriptQuery(scriptLang, script, scriptType, params, parseContext.scriptService(), parseContext.lookup());, +    static class ScriptQuery extends Query {, +        private ScriptQuery(String scriptLang, String script, ScriptService.ScriptType scriptType, Map<String, Object> params, ScriptService scriptService, SearchLookup searchLookup) {, +            ScriptQuery that = (ScriptQuery) o;, +        public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {, +            return new RandomAccessWeight(this) {, +                @Override, +                protected Bits getMatchingDocs(final LeafReaderContext context) throws IOException {, +                    return new Bits() {, +                        public boolean get(int doc) {, +                            leafScript.setDocument(doc);, +                            Object val = leafScript.run();, +                        public int length() {, +                            return context.reader().maxDoc();, +, +                    };, +                }, +            };, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/query/ScriptQueryParser.java, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.RandomAccessWeight;, +import org.apache.lucene.search.Weight;, +        Query query = new ScriptQuery(scriptLang, script, scriptType, params, parseContext.scriptService(), parseContext.lookup());, +    static class ScriptQuery extends Query {, +        private ScriptQuery(String scriptLang, String script, ScriptService.ScriptType scriptType, Map<String, Object> params, ScriptService scriptService, SearchLookup searchLookup) {, +            ScriptQuery that = (ScriptQuery) o;, +        public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {, +            return new RandomAccessWeight(this) {, +                @Override, +                protected Bits getMatchingDocs(final LeafReaderContext context) throws IOException {, +                    return new Bits() {, +                        public boolean get(int doc) {, +                            leafScript.setDocument(doc);, +                            Object val = leafScript.run();, +                        public int length() {, +                            return context.reader().maxDoc();, +, +                    };, +                }, +            };, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/search/scriptfilter/ScriptQuerySearchTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.scriptfilter;, +, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.cache.filter.FilterCacheModule;, +import org.elasticsearch.index.cache.filter.FilterCacheModule.FilterCacheSettings;, +import org.elasticsearch.index.cache.filter.index.IndexFilterCache;, +import org.elasticsearch.search.sort.SortOrder;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.junit.Test;, +]