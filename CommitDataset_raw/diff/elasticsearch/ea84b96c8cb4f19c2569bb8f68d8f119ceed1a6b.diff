[+++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    private IndexShard getIndexShard(final ShardId shardId) {, +            final ActionListenerResponseHandler<ReplicaResponse> handler = new ActionListenerResponseHandler<>(listener, in -> {, +                ReplicaResponse replicaResponse = new ReplicaResponse();, +                replicaResponse.readFrom(in);, +                return replicaResponse;, +            });, +            transportService.sendRequest(node, transportReplicaAction, replicaRequest, transportOptions, handler);, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    private IndexShard getIndexShard(final ShardId shardId) {, +            final ActionListenerResponseHandler<ReplicaResponse> handler = new ActionListenerResponseHandler<>(listener, in -> {, +                ReplicaResponse replicaResponse = new ReplicaResponse();, +                replicaResponse.readFrom(in);, +                return replicaResponse;, +            });, +            transportService.sendRequest(node, transportReplicaAction, replicaRequest, transportOptions, handler);, +++ b/server/src/main/java/org/elasticsearch/index/seqno/GlobalCheckpointSyncAction.java, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    private IndexShard getIndexShard(final ShardId shardId) {, +            final ActionListenerResponseHandler<ReplicaResponse> handler = new ActionListenerResponseHandler<>(listener, in -> {, +                ReplicaResponse replicaResponse = new ReplicaResponse();, +                replicaResponse.readFrom(in);, +                return replicaResponse;, +            });, +            transportService.sendRequest(node, transportReplicaAction, replicaRequest, transportOptions, handler);, +++ b/server/src/main/java/org/elasticsearch/index/seqno/GlobalCheckpointSyncAction.java, +++ b/server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +    public void testSeqNoIsSetOnPrimary() {, +        final IndexService indexService = mock(IndexService.class);, +        when(indexService.getShard(shard.shardId().id())).thenReturn(shard);, +, +        final IndicesService indicesService = mock(IndicesService.class);, +        when(indicesService.indexServiceSafe(shard.shardId().getIndex())).thenReturn(indexService);, +, +        TestAction action = new TestAction(Settings.EMPTY, "internal:testSeqNoIsSetOnPrimary", transportService, clusterService,, +            shardStateAction, threadPool, indicesService);, +            this(settings, actionName, transportService, clusterService, shardStateAction, threadPool, mockIndicesService(clusterService));, +        }, +, +        TestAction(Settings settings, String actionName, TransportService transportService,, +                   ClusterService clusterService, ShardStateAction shardStateAction,, +                   ThreadPool threadPool, IndicesService indicesService) {, +            super(settings, actionName, transportService, clusterService, indicesService, threadPool,, +    private IndicesService mockIndicesService(ClusterService clusterService) {, +    private IndexService mockIndexService(final IndexMetaData indexMetaData, ClusterService clusterService) {, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    private IndexShard getIndexShard(final ShardId shardId) {, +            final ActionListenerResponseHandler<ReplicaResponse> handler = new ActionListenerResponseHandler<>(listener, in -> {, +                ReplicaResponse replicaResponse = new ReplicaResponse();, +                replicaResponse.readFrom(in);, +                return replicaResponse;, +            });, +            transportService.sendRequest(node, transportReplicaAction, replicaRequest, transportOptions, handler);, +++ b/server/src/main/java/org/elasticsearch/index/seqno/GlobalCheckpointSyncAction.java, +++ b/server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +    public void testSeqNoIsSetOnPrimary() {, +        final IndexService indexService = mock(IndexService.class);, +        when(indexService.getShard(shard.shardId().id())).thenReturn(shard);, +, +        final IndicesService indicesService = mock(IndicesService.class);, +        when(indicesService.indexServiceSafe(shard.shardId().getIndex())).thenReturn(indexService);, +, +        TestAction action = new TestAction(Settings.EMPTY, "internal:testSeqNoIsSetOnPrimary", transportService, clusterService,, +            shardStateAction, threadPool, indicesService);, +            this(settings, actionName, transportService, clusterService, shardStateAction, threadPool, mockIndicesService(clusterService));, +        }, +, +        TestAction(Settings settings, String actionName, TransportService transportService,, +                   ClusterService clusterService, ShardStateAction shardStateAction,, +                   ThreadPool threadPool, IndicesService indicesService) {, +            super(settings, actionName, transportService, clusterService, indicesService, threadPool,, +    private IndicesService mockIndicesService(ClusterService clusterService) {, +    private IndexService mockIndexService(final IndexMetaData indexMetaData, ClusterService clusterService) {, +++ b/server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationAllPermitsAcquisitionTests.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.indices.IndicesService;, +import org.elasticsearch.test.transport.MockTransport;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportMessageListener;, +import org.elasticsearch.transport.TransportRequest;, +import org.elasticsearch.transport.TransportResponseHandler;, +import static java.util.Collections.emptySet;, +import static org.hamcrest.Matchers.allOf;, +import static org.hamcrest.Matchers.endsWith;, +import static org.hamcrest.Matchers.startsWith;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +, +        MockTransport transport = new MockTransport() {, +            @Override, +            protected void onSendRequest(long requestId, String action, TransportRequest request, DiscoveryNode node) {, +                assertThat(action, allOf(startsWith("cluster:admin/test/"), endsWith("[r]")));, +                assertThat(node, equalTo(node2));, +                // node2 doesn't really exist, but we are performing some trickery in mockIndicesService() to pretend that node1 holds both]