[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            Property.IndexScope, Property.Final);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            Property.IndexScope, Property.Final);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            Property.IndexScope, Property.Final);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    public boolean isDynamicSetting(String key) {, +     * Returns <code>true</code> if the setting for the given key is final. Otherwise <code>false</code>., +     */, +    public boolean isFinalSetting(String key) {, +        final Setting<?> setting = get(key);, +        return setting != null && setting.isFinal();, +    }, +, +    /**, +        final Predicate<String> canUpdate = (key) -> (, +            isFinalSetting(key) == false && // it's not a final setting, +                ((onlyDynamic == false && get(key) != null) || isDynamicSetting(key)));, +            isFinalSetting(key) == false && // it's not a final setting, +                (onlyDynamic && isDynamicSetting(key)  // it's a dynamicSetting and we only do dynamic settings, +                || (onlyDynamic == false && get(key) != null))); // if it's not dynamic AND we have a key, +                if (isFinalSetting(entry.getKey())) {, +                    throw new IllegalArgumentException("final " + type + " setting [" + entry.getKey() + "], not updateable");, +                } else {, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            Property.IndexScope, Property.Final);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    public boolean isDynamicSetting(String key) {, +     * Returns <code>true</code> if the setting for the given key is final. Otherwise <code>false</code>., +     */, +    public boolean isFinalSetting(String key) {, +        final Setting<?> setting = get(key);, +        return setting != null && setting.isFinal();, +    }, +, +    /**, +        final Predicate<String> canUpdate = (key) -> (, +            isFinalSetting(key) == false && // it's not a final setting, +                ((onlyDynamic == false && get(key) != null) || isDynamicSetting(key)));, +            isFinalSetting(key) == false && // it's not a final setting, +                (onlyDynamic && isDynamicSetting(key)  // it's a dynamicSetting and we only do dynamic settings, +                || (onlyDynamic == false && get(key) != null))); // if it's not dynamic AND we have a key, +                if (isFinalSetting(entry.getKey())) {, +                    throw new IllegalArgumentException("final " + type + " setting [" + entry.getKey() + "], not updateable");, +                } else {, +        }, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +         * mark this setting as final, not updateable even when the context is not dynamic, +         * ie. Setting this property on an index scoped setting will fail update when the index is closed, +         */, +        Final,, +, +        /**, +            if (isDynamic() && isFinal()) {, +                throw new IllegalArgumentException("final setting [" + key + "] cannot be dynamic");, +            }, +     * Returns <code>true</code> if this setting is final, otherwise <code>false</code>, +     */, +    public final boolean isFinal() {, +        return properties.contains(Property.Final);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            Property.IndexScope, Property.Final);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    public boolean isDynamicSetting(String key) {, +     * Returns <code>true</code> if the setting for the given key is final. Otherwise <code>false</code>., +     */, +    public boolean isFinalSetting(String key) {, +        final Setting<?> setting = get(key);, +        return setting != null && setting.isFinal();, +    }, +, +    /**, +        final Predicate<String> canUpdate = (key) -> (, +            isFinalSetting(key) == false && // it's not a final setting, +                ((onlyDynamic == false && get(key) != null) || isDynamicSetting(key)));, +            isFinalSetting(key) == false && // it's not a final setting, +                (onlyDynamic && isDynamicSetting(key)  // it's a dynamicSetting and we only do dynamic settings, +                || (onlyDynamic == false && get(key) != null))); // if it's not dynamic AND we have a key, +                if (isFinalSetting(entry.getKey())) {, +                    throw new IllegalArgumentException("final " + type + " setting [" + entry.getKey() + "], not updateable");, +                } else {, +        }, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +         * mark this setting as final, not updateable even when the context is not dynamic, +         * ie. Setting this property on an index scoped setting will fail update when the index is closed, +         */, +        Final,, +, +        /**, +            if (isDynamic() && isFinal()) {, +                throw new IllegalArgumentException("final setting [" + key + "] cannot be dynamic");]