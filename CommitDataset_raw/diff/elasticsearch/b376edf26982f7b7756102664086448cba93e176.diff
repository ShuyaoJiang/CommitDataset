[+++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcConfiguration.java, +import java.time.ZoneId;, +    private ZoneId zoneId;, +        this.zoneId = parseValue(TIME_ZONE, props.getProperty(TIME_ZONE, TIME_ZONE_DEFAULT),, +                s -> TimeZone.getTimeZone(s).toZoneId().normalized());, +        return zoneId != null ? TimeZone.getTimeZone(zoneId) : null;, +        this.zoneId = timeZone != null ? timeZone.toZoneId() : null;, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcConfiguration.java, +import java.time.ZoneId;, +    private ZoneId zoneId;, +        this.zoneId = parseValue(TIME_ZONE, props.getProperty(TIME_ZONE, TIME_ZONE_DEFAULT),, +                s -> TimeZone.getTimeZone(s).toZoneId().normalized());, +        return zoneId != null ? TimeZone.getTimeZone(zoneId) : null;, +        this.zoneId = timeZone != null ? timeZone.toZoneId() : null;, +++ b/x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/AbstractSqlQueryRequest.java, +import java.time.ZoneId;, +    private ZoneId zoneId = Protocol.TIME_ZONE;, +    public AbstractSqlQueryRequest(String query, List<SqlTypedParamValue> params, QueryBuilder filter, ZoneId zoneId,, +        this.zoneId = zoneId;, +        parser.declareString((request, zoneId) -> request.zoneId(ZoneId.of(zoneId)), TIME_ZONE);, +    public ZoneId zoneId() {, +        return zoneId;, +    public AbstractSqlQueryRequest zoneId(ZoneId zoneId) {, +        if (zoneId == null) {, +        this.zoneId = zoneId;, +        zoneId = ZoneId.of(in.readString());, +        out.writeString(zoneId.getId());, +                Objects.equals(zoneId, that.zoneId) &&, +        return Objects.hash(super.hashCode(), query, zoneId, fetchSize, requestTimeout, pageTimeout, filter);, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcConfiguration.java, +import java.time.ZoneId;, +    private ZoneId zoneId;, +        this.zoneId = parseValue(TIME_ZONE, props.getProperty(TIME_ZONE, TIME_ZONE_DEFAULT),, +                s -> TimeZone.getTimeZone(s).toZoneId().normalized());, +        return zoneId != null ? TimeZone.getTimeZone(zoneId) : null;, +        this.zoneId = timeZone != null ? timeZone.toZoneId() : null;, +++ b/x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/AbstractSqlQueryRequest.java, +import java.time.ZoneId;, +    private ZoneId zoneId = Protocol.TIME_ZONE;, +    public AbstractSqlQueryRequest(String query, List<SqlTypedParamValue> params, QueryBuilder filter, ZoneId zoneId,, +        this.zoneId = zoneId;, +        parser.declareString((request, zoneId) -> request.zoneId(ZoneId.of(zoneId)), TIME_ZONE);, +    public ZoneId zoneId() {, +        return zoneId;, +    public AbstractSqlQueryRequest zoneId(ZoneId zoneId) {, +        if (zoneId == null) {, +        this.zoneId = zoneId;, +        zoneId = ZoneId.of(in.readString());, +        out.writeString(zoneId.getId());, +                Objects.equals(zoneId, that.zoneId) &&, +        return Objects.hash(super.hashCode(), query, zoneId, fetchSize, requestTimeout, pageTimeout, filter);, +++ b/x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/SqlQueryRequest.java, +import java.time.ZoneId;, +    public SqlQueryRequest(String query, List<SqlTypedParamValue> params, QueryBuilder filter, ZoneId zoneId,, +        super(query, params, filter, zoneId, fetchSize, requestTimeout, pageTimeout, requestInfo);, +        return new org.elasticsearch.xpack.sql.proto.SqlQueryRequest(query(), params(), zoneId(), fetchSize(), requestTimeout(),, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcConfiguration.java, +import java.time.ZoneId;, +    private ZoneId zoneId;, +        this.zoneId = parseValue(TIME_ZONE, props.getProperty(TIME_ZONE, TIME_ZONE_DEFAULT),, +                s -> TimeZone.getTimeZone(s).toZoneId().normalized());, +        return zoneId != null ? TimeZone.getTimeZone(zoneId) : null;, +        this.zoneId = timeZone != null ? timeZone.toZoneId() : null;, +++ b/x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/AbstractSqlQueryRequest.java, +import java.time.ZoneId;, +    private ZoneId zoneId = Protocol.TIME_ZONE;, +    public AbstractSqlQueryRequest(String query, List<SqlTypedParamValue> params, QueryBuilder filter, ZoneId zoneId,, +        this.zoneId = zoneId;, +        parser.declareString((request, zoneId) -> request.zoneId(ZoneId.of(zoneId)), TIME_ZONE);, +    public ZoneId zoneId() {, +        return zoneId;, +    public AbstractSqlQueryRequest zoneId(ZoneId zoneId) {, +        if (zoneId == null) {, +        this.zoneId = zoneId;, +        zoneId = ZoneId.of(in.readString());, +        out.writeString(zoneId.getId());, +                Objects.equals(zoneId, that.zoneId) &&, +        return Objects.hash(super.hashCode(), query, zoneId, fetchSize, requestTimeout, pageTimeout, filter);, +++ b/x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/SqlQueryRequest.java, +import java.time.ZoneId;, +    public SqlQueryRequest(String query, List<SqlTypedParamValue> params, QueryBuilder filter, ZoneId zoneId,, +        super(query, params, filter, zoneId, fetchSize, requestTimeout, pageTimeout, requestInfo);, +        return new org.elasticsearch.xpack.sql.proto.SqlQueryRequest(query(), params(), zoneId(), fetchSize(), requestTimeout(),, +++ b/x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/SqlQueryRequestBuilder.java, +import java.time.ZoneId;, +            QueryBuilder filter, ZoneId zoneId, int fetchSize, TimeValue requestTimeout,, +        super(client, action, new SqlQueryRequest(query, params, filter, zoneId, fetchSize, requestTimeout, pageTimeout, nextPageInfo,, +    public SqlQueryRequestBuilder zoneId(ZoneId zoneId) {, +        request.zoneId(zoneId);, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcConfiguration.java, +import java.time.ZoneId;, +    private ZoneId zoneId;, +        this.zoneId = parseValue(TIME_ZONE, props.getProperty(TIME_ZONE, TIME_ZONE_DEFAULT),, +                s -> TimeZone.getTimeZone(s).toZoneId().normalized());, +        return zoneId != null ? TimeZone.getTimeZone(zoneId) : null;, +        this.zoneId = timeZone != null ? timeZone.toZoneId() : null;, +++ b/x-pack/plugin/sql/sql-action/src/main/java/org/elasticsearch/xpack/sql/action/AbstractSqlQueryRequest.java, +import java.time.ZoneId;, +    private ZoneId zoneId = Protocol.TIME_ZONE;, +    public AbstractSqlQueryRequest(String query, List<SqlTypedParamValue> params, QueryBuilder filter, ZoneId zoneId,]