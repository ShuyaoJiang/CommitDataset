[+++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== The count api internally uses the search api, +, +The count api is now a shortcut to the search api with `size` set to 0. As a, +result, a total failure will result in an exception being returned rather, +than a normal response with `count` set to `0` and shard failures., +, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== The count api internally uses the search api, +, +The count api is now a shortcut to the search api with `size` set to 0. As a, +result, a total failure will result in an exception being returned rather, +than a normal response with `count` set to `0` and shard failures., +, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== The count api internally uses the search api, +, +The count api is now a shortcut to the search api with `size` set to 0. As a, +result, a total failure will result in an exception being returned rather, +than a normal response with `count` set to `0` and shard failures., +, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +    public void execute(ActionListener<Response> listener) {, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== The count api internally uses the search api, +, +The count api is now a shortcut to the search api with `size` set to 0. As a, +result, a total failure will result in an exception being returned rather, +than a normal response with `count` set to `0` and shard failures., +, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +    public void execute(ActionListener<Response> listener) {, +++ b/src/main/java/org/elasticsearch/action/count/CountAction.java, + * Action that shortcuts to the search api with size set to 0. It doesn't have a corresponding, + * transport action, it just runs the search api internally., +        throw new UnsupportedOperationException("CountAction doesn't have its own transport action, gets executed as a SearchAction internally");, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== The count api internally uses the search api, +, +The count api is now a shortcut to the search api with `size` set to 0. As a, +result, a total failure will result in an exception being returned rather, +than a normal response with `count` set to `0` and shard failures., +, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +    public void execute(ActionListener<Response> listener) {, +++ b/src/main/java/org/elasticsearch/action/count/CountAction.java, + * Action that shortcuts to the search api with size set to 0. It doesn't have a corresponding, + * transport action, it just runs the search api internally., +        throw new UnsupportedOperationException("CountAction doesn't have its own transport action, gets executed as a SearchAction internally");, +++ b/src/main/java/org/elasticsearch/action/count/CountRequest.java, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +    @SuppressWarnings("unchecked"), +        throw new UnsupportedOperationException("CountRequest doesn't support being sent over the wire, just a shortcut to the search api");, +        throw new UnsupportedOperationException("CountRequest doesn't support being sent over the wire, just a shortcut to the search api");, +, +    public SearchRequest toSearchRequest() {, +        SearchRequest searchRequest = new SearchRequest(indices());, +        searchRequest.indicesOptions(indicesOptions());, +        searchRequest.types(types());, +        searchRequest.routing(routing());, +        searchRequest.preference(preference());, +        searchRequest.source(source());, +        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +        searchSourceBuilder.size(0);, +        if (minScore() != DEFAULT_MIN_SCORE) {, +            searchSourceBuilder.minScore(minScore());, +        }, +        if (terminateAfter() != DEFAULT_TERMINATE_AFTER) {, +            searchSourceBuilder.terminateAfter(terminateAfter());, +        }, +        searchRequest.extraSource(searchSourceBuilder);, +        return searchRequest;, +    }, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== The count api internally uses the search api, +, +The count api is now a shortcut to the search api with `size` set to 0. As a, +result, a total failure will result in an exception being returned rather, +than a normal response with `count` set to `0` and shard failures., +, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +    public void execute(ActionListener<Response> listener) {, +++ b/src/main/java/org/elasticsearch/action/count/CountAction.java, + * Action that shortcuts to the search api with size set to 0. It doesn't have a corresponding, + * transport action, it just runs the search api internally., +        throw new UnsupportedOperationException("CountAction doesn't have its own transport action, gets executed as a SearchAction internally");, +++ b/src/main/java/org/elasticsearch/action/count/CountRequest.java, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +    @SuppressWarnings("unchecked"), +        throw new UnsupportedOperationException("CountRequest doesn't support being sent over the wire, just a shortcut to the search api");, +        throw new UnsupportedOperationException("CountRequest doesn't support being sent over the wire, just a shortcut to the search api");, +, +    public SearchRequest toSearchRequest() {]