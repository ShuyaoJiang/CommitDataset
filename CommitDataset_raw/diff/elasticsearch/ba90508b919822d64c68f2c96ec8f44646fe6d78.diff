[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]indices[/\\]analysis[/\\]AnalysisModule.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]indices[/\\]analysis[/\\]HunspellService.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]AnalysisModuleTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]AnalysisServiceTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]CompoundAnalysisTests.java" checks="LineLength" />, +  <suppress files="plugins[/\\]analysis-smartcn[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]SimpleSmartChineseAnalysisTests.java" checks="LineLength" />, +  <suppress files="plugins[/\\]analysis-stempel[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]PolishAnalysisTests.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]indices[/\\]analysis[/\\]AnalysisModule.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]indices[/\\]analysis[/\\]HunspellService.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]AnalysisModuleTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]AnalysisServiceTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]CompoundAnalysisTests.java" checks="LineLength" />, +  <suppress files="plugins[/\\]analysis-smartcn[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]SimpleSmartChineseAnalysisTests.java" checks="LineLength" />, +  <suppress files="plugins[/\\]analysis-stempel[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]PolishAnalysisTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +        RestHeadAction.Document.class,, +        RestHeadAction.Source.class,, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]indices[/\\]analysis[/\\]AnalysisModule.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]indices[/\\]analysis[/\\]HunspellService.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]AnalysisModuleTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]AnalysisServiceTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]CompoundAnalysisTests.java" checks="LineLength" />, +  <suppress files="plugins[/\\]analysis-smartcn[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]SimpleSmartChineseAnalysisTests.java" checks="LineLength" />, +  <suppress files="plugins[/\\]analysis-stempel[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]analysis[/\\]PolishAnalysisTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +        RestHeadAction.Document.class,, +        RestHeadAction.Source.class,, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.index.analysis.compound.DictionaryCompoundWordTokenFilterFactory;, +import org.elasticsearch.index.analysis.compound.HyphenationCompoundWordTokenFilterFactory;, +import org.elasticsearch.indices.analysis.HunspellService;, +    private final Map<String, AnalysisModule.AnalysisProvider<CharFilterFactory>> charFilters;, +    private final Map<String, AnalysisModule.AnalysisProvider<TokenFilterFactory>> tokenFilters;, +    private final Map<String, AnalysisModule.AnalysisProvider<TokenizerFactory>> tokenizers;, +    private final Map<String, AnalysisModule.AnalysisProvider<AnalyzerProvider>> analyzers;, +    private final PrebuiltAnalysis prebuiltAnalysis;, +    private final HunspellService hunspellService;, +    public AnalysisRegistry(HunspellService hunspellService, Environment environment) {, +        this(hunspellService, environment, Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap());, +    }, +, +    public AnalysisRegistry(HunspellService hunspellService, Environment environment,, +                            Map<String, AnalysisModule.AnalysisProvider<CharFilterFactory>> charFilters,, +                            Map<String, AnalysisModule.AnalysisProvider<TokenFilterFactory>> tokenFilters,, +                            Map<String, AnalysisModule.AnalysisProvider<TokenizerFactory>> tokenizers,, +                            Map<String, AnalysisModule.AnalysisProvider<AnalyzerProvider>> analyzers) {, +        prebuiltAnalysis = new PrebuiltAnalysis();, +        this.hunspellService = hunspellService;, +        final Map<String, AnalysisModule.AnalysisProvider<CharFilterFactory>> charFilterBuilder = new HashMap<>(charFilters);, +        final Map<String, AnalysisModule.AnalysisProvider<TokenFilterFactory>> tokenFilterBuilder = new HashMap<>(tokenFilters);, +        final Map<String, AnalysisModule.AnalysisProvider<TokenizerFactory>> tokenizerBuilder = new HashMap<>(tokenizers);, +        final Map<String, AnalysisModule.AnalysisProvider<AnalyzerProvider>> analyzerBuilder= new HashMap<>(analyzers);, +        registerBuiltInAnalyzer(analyzerBuilder);, +        registerBuiltInCharFilter(charFilterBuilder);, +        registerBuiltInTokenizer(tokenizerBuilder);, +        registerBuiltInTokenFilters(tokenFilterBuilder);, +        this.tokenFilters = Collections.unmodifiableMap(tokenFilterBuilder);, +        this.tokenizers = Collections.unmodifiableMap(tokenizerBuilder);, +        this.charFilters = Collections.unmodifiableMap(charFilterBuilder);, +        this.analyzers = Collections.unmodifiableMap(analyzerBuilder);, +    }, +, +    public HunspellService getHunspellService() {, +        return hunspellService;, +        AnalysisModule.AnalysisProvider<AnalyzerProvider> analyzerProvider = this.prebuiltAnalysis.getAnalyzerProvider(analyzer);, +            AnalysisModule.AnalysisProvider<AnalyzerProvider> provider = analyzers.get(analyzer);, +        final Map<String, AnalyzerProvider> analyzierFactories = buildMapping(true, "analyzer", indexSettings, analyzersSettings, analyzers, prebuiltAnalysis.analyzerProviderFactories);, +    private void registerBuiltInCharFilter(Map<String, AnalysisModule.AnalysisProvider<CharFilterFactory>> charFilters) {, +        charFilters.put("html_strip", HtmlStripCharFilterFactory::new);, +        charFilters.put("pattern_replace", requriesAnalysisSettings(PatternReplaceCharFilterFactory::new));, +        charFilters.put("mapping", requriesAnalysisSettings(MappingCharFilterFactory::new));, +    }, +, +    private void registerBuiltInTokenizer(Map<String, AnalysisModule.AnalysisProvider<TokenizerFactory>> tokenizers) {, +        tokenizers.put("standard", StandardTokenizerFactory::new);, +        tokenizers.put("uax_url_email", UAX29URLEmailTokenizerFactory::new);, +        tokenizers.put("path_hierarchy", PathHierarchyTokenizerFactory::new);, +        tokenizers.put("PathHierarchy", PathHierarchyTokenizerFactory::new);, +        tokenizers.put("keyword", KeywordTokenizerFactory::new);, +        tokenizers.put("letter", LetterTokenizerFactory::new);, +        tokenizers.put("lowercase", LowerCaseTokenizerFactory::new);, +        tokenizers.put("whitespace", WhitespaceTokenizerFactory::new);, +        tokenizers.put("nGram", NGramTokenizerFactory::new);, +        tokenizers.put("ngram", NGramTokenizerFactory::new);, +        tokenizers.put("edgeNGram", EdgeNGramTokenizerFactory::new);, +        tokenizers.put("edge_ngram", EdgeNGramTokenizerFactory::new);, +        tokenizers.put("pattern", PatternTokenizerFactory::new);, +        tokenizers.put("classic", ClassicTokenizerFactory::new);, +        tokenizers.put("thai", ThaiTokenizerFactory::new);, +    }, +, +    private void registerBuiltInTokenFilters(Map<String, AnalysisModule.AnalysisProvider<TokenFilterFactory>> tokenFilters) {, +        tokenFilters.put("stop", StopTokenFilterFactory::new);, +        tokenFilters.put("reverse", ReverseTokenFilterFactory::new);, +        tokenFilters.put("asciifolding", ASCIIFoldingTokenFilterFactory::new);, +        tokenFilters.put("length", LengthTokenFilterFactory::new);]