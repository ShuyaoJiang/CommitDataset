[+++ b/plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +        final License license = getLicense(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, +    License getLicense(final LicensesMetaData metaData) {, +++ b/plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +        final License license = getLicense(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, +    License getLicense(final LicensesMetaData metaData) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +public class XPackPlugin extends Plugin implements ScriptPlugin, ActionPlugin, IngestPlugin, NetworkPlugin, ClusterPlugin {, +++ b/plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +        final License license = getLicense(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, +    License getLicense(final LicensesMetaData metaData) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +public class XPackPlugin extends Plugin implements ScriptPlugin, ActionPlugin, IngestPlugin, NetworkPlugin, ClusterPlugin {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackSettings.java, +    private static final Setting<Boolean> TRANSPORT_SSL_ENABLED =, +++ b/plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +        final License license = getLicense(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, +    License getLicense(final LicensesMetaData metaData) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +public class XPackPlugin extends Plugin implements ScriptPlugin, ActionPlugin, IngestPlugin, NetworkPlugin, ClusterPlugin {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackSettings.java, +    private static final Setting<Boolean> TRANSPORT_SSL_ENABLED =, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlDailyMaintenanceService.java, +import org.elasticsearch.cluster.ClusterName;, +import java.util.Random;, +    private static final int MAX_TIME_OFFSET_MINUTES = 120;, +, +    public MlDailyMaintenanceService(ClusterName clusterName, ThreadPool threadPool, Client client) {, +        this(threadPool, client, () -> delayToNextTime(clusterName));, +    /**, +     * Calculates the delay until the next time the maintenance should be triggered., +     * The next time is 30 minutes past midnight of the following day plus a random, +     * offset. The random offset is added in order to avoid multiple clusters, +     * running the maintenance tasks at the same time. A cluster with a given name, +     * shall have the same offset throughout its life., +     *, +     * @param clusterName the cluster name is used to seed the random offset, +     * @return the delay to the next time the maintenance should be triggered, +     */, +    private static TimeValue delayToNextTime(ClusterName clusterName) {, +        Random random = new Random(clusterName.hashCode());, +        int minutesOffset = random.ints(0, MAX_TIME_OFFSET_MINUTES).findFirst().getAsInt();, +        DateTime next = now.plusDays(1).withTimeAtStartOfDay().plusMinutes(30).plusMinutes(minutesOffset);, +++ b/plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +        final License license = getLicense(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, +    License getLicense(final LicensesMetaData metaData) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +public class XPackPlugin extends Plugin implements ScriptPlugin, ActionPlugin, IngestPlugin, NetworkPlugin, ClusterPlugin {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackSettings.java, +    private static final Setting<Boolean> TRANSPORT_SSL_ENABLED =, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlDailyMaintenanceService.java, +import org.elasticsearch.cluster.ClusterName;, +import java.util.Random;, +    private static final int MAX_TIME_OFFSET_MINUTES = 120;, +, +    public MlDailyMaintenanceService(ClusterName clusterName, ThreadPool threadPool, Client client) {, +        this(threadPool, client, () -> delayToNextTime(clusterName));, +    /**, +     * Calculates the delay until the next time the maintenance should be triggered., +     * The next time is 30 minutes past midnight of the following day plus a random, +     * offset. The random offset is added in order to avoid multiple clusters, +     * running the maintenance tasks at the same time. A cluster with a given name, +     * shall have the same offset throughout its life., +     *, +     * @param clusterName the cluster name is used to seed the random offset, +     * @return the delay to the next time the maintenance should be triggered, +     */, +    private static TimeValue delayToNextTime(ClusterName clusterName) {, +        Random random = new Random(clusterName.hashCode());, +        int minutesOffset = random.ints(0, MAX_TIME_OFFSET_MINUTES).findFirst().getAsInt();, +        DateTime next = now.plusDays(1).withTimeAtStartOfDay().plusMinutes(30).plusMinutes(minutesOffset);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlInitializationService.java, +                threadPool.executor(ThreadPool.Names.GENERIC).execute(() ->, +                    }), +                );, +            mlDailyMaintenanceService = new MlDailyMaintenanceService(clusterService.getClusterName(), threadPool, client);, +++ b/plugin/src/main/java/org/elasticsearch/license/LicenseService.java, +        final License license = getLicense(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, +    License getLicense(final LicensesMetaData metaData) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +public class XPackPlugin extends Plugin implements ScriptPlugin, ActionPlugin, IngestPlugin, NetworkPlugin, ClusterPlugin {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackSettings.java, +    private static final Setting<Boolean> TRANSPORT_SSL_ENABLED =, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlDailyMaintenanceService.java, +import org.elasticsearch.cluster.ClusterName;, +import java.util.Random;, +    private static final int MAX_TIME_OFFSET_MINUTES = 120;, +, +    public MlDailyMaintenanceService(ClusterName clusterName, ThreadPool threadPool, Client client) {, +        this(threadPool, client, () -> delayToNextTime(clusterName));, +    /**, +     * Calculates the delay until the next time the maintenance should be triggered., +     * The next time is 30 minutes past midnight of the following day plus a random, +     * offset. The random offset is added in order to avoid multiple clusters, +     * running the maintenance tasks at the same time. A cluster with a given name, +     * shall have the same offset throughout its life., +     *, +     * @param clusterName the cluster name is used to seed the random offset, +     * @return the delay to the next time the maintenance should be triggered, +     */]