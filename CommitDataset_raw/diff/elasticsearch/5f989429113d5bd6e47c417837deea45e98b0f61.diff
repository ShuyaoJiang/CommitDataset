[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPingService.java, +        if (componentSettings.get("unicast.hosts") != null || componentSettings.getAsArray("unicast.hosts").length > 0) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPingService.java, +        if (componentSettings.get("unicast.hosts") != null || componentSettings.getAsArray("unicast.hosts").length > 0) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +import org.elasticsearch.util.Strings;, +import org.elasticsearch.util.gcommon.collect.Lists;, +import org.elasticsearch.util.transport.TransportAddress;, +        List<String> hosts = Lists.newArrayList(componentSettings.getAsArray("hosts"));, +        if (componentSettings.get("hosts") != null) {, +            hosts.addAll(Strings.commaDelimitedListToSet(componentSettings.get("hosts")));, +        }, +        List<DiscoveryNode> nodes = Lists.newArrayList();, +        int idCounter = 0;, +        for (String host : hosts) {, +                for (TransportAddress address : transportService.addressesFromString(host)) {, +                    nodes.add(new DiscoveryNode("#zen_unicast_" + (++idCounter) + "#", address));, +                }, +                throw new ElasticSearchIllegalArgumentException("Failed to resolve address for [" + host + "]", e);, +        this.nodes = nodes.toArray(new DiscoveryNode[nodes.size()]);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPingService.java, +        if (componentSettings.get("unicast.hosts") != null || componentSettings.getAsArray("unicast.hosts").length > 0) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +import org.elasticsearch.util.Strings;, +import org.elasticsearch.util.gcommon.collect.Lists;, +import org.elasticsearch.util.transport.TransportAddress;, +        List<String> hosts = Lists.newArrayList(componentSettings.getAsArray("hosts"));, +        if (componentSettings.get("hosts") != null) {, +            hosts.addAll(Strings.commaDelimitedListToSet(componentSettings.get("hosts")));, +        }, +        List<DiscoveryNode> nodes = Lists.newArrayList();, +        int idCounter = 0;, +        for (String host : hosts) {, +                for (TransportAddress address : transportService.addressesFromString(host)) {, +                    nodes.add(new DiscoveryNode("#zen_unicast_" + (++idCounter) + "#", address));, +                }, +                throw new ElasticSearchIllegalArgumentException("Failed to resolve address for [" + host + "]", e);, +        this.nodes = nodes.toArray(new DiscoveryNode[nodes.size()]);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/Transport.java, +    TransportAddress[] addressesFromString(String address) throws Exception;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPingService.java, +        if (componentSettings.get("unicast.hosts") != null || componentSettings.getAsArray("unicast.hosts").length > 0) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +import org.elasticsearch.util.Strings;, +import org.elasticsearch.util.gcommon.collect.Lists;, +import org.elasticsearch.util.transport.TransportAddress;, +        List<String> hosts = Lists.newArrayList(componentSettings.getAsArray("hosts"));, +        if (componentSettings.get("hosts") != null) {, +            hosts.addAll(Strings.commaDelimitedListToSet(componentSettings.get("hosts")));, +        }, +        List<DiscoveryNode> nodes = Lists.newArrayList();, +        int idCounter = 0;, +        for (String host : hosts) {, +                for (TransportAddress address : transportService.addressesFromString(host)) {, +                    nodes.add(new DiscoveryNode("#zen_unicast_" + (++idCounter) + "#", address));, +                }, +                throw new ElasticSearchIllegalArgumentException("Failed to resolve address for [" + host + "]", e);, +        this.nodes = nodes.toArray(new DiscoveryNode[nodes.size()]);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/Transport.java, +    TransportAddress[] addressesFromString(String address) throws Exception;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportService.java, +    public TransportAddress[] addressesFromString(String address) throws Exception {, +        return transport.addressesFromString(address);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPingService.java, +        if (componentSettings.get("unicast.hosts") != null || componentSettings.getAsArray("unicast.hosts").length > 0) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +import org.elasticsearch.util.Strings;, +import org.elasticsearch.util.gcommon.collect.Lists;, +import org.elasticsearch.util.transport.TransportAddress;, +        List<String> hosts = Lists.newArrayList(componentSettings.getAsArray("hosts"));, +        if (componentSettings.get("hosts") != null) {, +            hosts.addAll(Strings.commaDelimitedListToSet(componentSettings.get("hosts")));, +        }, +        List<DiscoveryNode> nodes = Lists.newArrayList();, +        int idCounter = 0;, +        for (String host : hosts) {, +                for (TransportAddress address : transportService.addressesFromString(host)) {, +                    nodes.add(new DiscoveryNode("#zen_unicast_" + (++idCounter) + "#", address));, +                }, +                throw new ElasticSearchIllegalArgumentException("Failed to resolve address for [" + host + "]", e);, +        this.nodes = nodes.toArray(new DiscoveryNode[nodes.size()]);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/Transport.java, +    TransportAddress[] addressesFromString(String address) throws Exception;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportService.java, +    public TransportAddress[] addressesFromString(String address) throws Exception {, +        return transport.addressesFromString(address);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +    @Override public TransportAddress[] addressesFromString(String address) {, +        return new TransportAddress[] {new LocalTransportAddress(address)};, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPingService.java, +        if (componentSettings.get("unicast.hosts") != null || componentSettings.getAsArray("unicast.hosts").length > 0) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +import org.elasticsearch.util.Strings;, +import org.elasticsearch.util.gcommon.collect.Lists;, +import org.elasticsearch.util.transport.TransportAddress;, +        List<String> hosts = Lists.newArrayList(componentSettings.getAsArray("hosts"));, +        if (componentSettings.get("hosts") != null) {, +            hosts.addAll(Strings.commaDelimitedListToSet(componentSettings.get("hosts")));, +        }, +        List<DiscoveryNode> nodes = Lists.newArrayList();]