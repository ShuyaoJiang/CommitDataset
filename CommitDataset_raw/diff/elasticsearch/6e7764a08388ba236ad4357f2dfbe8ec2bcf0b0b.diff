[+++ b/src/main/java/org/elasticsearch/common/bloom/BloomFilter.java, +++ b/src/main/java/org/elasticsearch/common/bloom/BloomFilter.java, +++ b/src/main/java/org/elasticsearch/common/bloom/ObsBloomFilter.java, +        // inline the hash buckets so we don't have to create the int[] each time..., +        long hash1 = MurmurHash.hash64(key, offset, length, 0L);, +        long hash2 = MurmurHash.hash64(key, offset, length, hash1);, +        for (int i = 0; i < hashCount; ++i) {, +            long bucketIndex = Math.abs((hash1 + (long) i * hash2) % size);, +        // inline the hash buckets so we don't have to create the int[] each time..., +        long hash1 = MurmurHash.hash64(key, offset, length, 0L);, +        long hash2 = MurmurHash.hash64(key, offset, length, hash1);, +        for (int i = 0; i < hashCount; ++i) {, +            long bucketIndex = Math.abs((hash1 + (long) i * hash2) % size);, +++ b/src/main/java/org/elasticsearch/common/bloom/BloomFilter.java, +++ b/src/main/java/org/elasticsearch/common/bloom/ObsBloomFilter.java, +        // inline the hash buckets so we don't have to create the int[] each time..., +        long hash1 = MurmurHash.hash64(key, offset, length, 0L);, +        long hash2 = MurmurHash.hash64(key, offset, length, hash1);, +        for (int i = 0; i < hashCount; ++i) {, +            long bucketIndex = Math.abs((hash1 + (long) i * hash2) % size);, +        // inline the hash buckets so we don't have to create the int[] each time..., +        long hash1 = MurmurHash.hash64(key, offset, length, 0L);, +        long hash2 = MurmurHash.hash64(key, offset, length, hash1);, +        for (int i = 0; i < hashCount; ++i) {, +            long bucketIndex = Math.abs((hash1 + (long) i * hash2) % size);, +++ b/src/test/java/org/elasticsearch/test/unit/common/bloom/BoomFilterTests.java, +        filter.add(wrap("1"), 0, wrap("1").length);, +        assertThat(filter.isPresent(wrap("1"), 0, wrap("1").length), equalTo(true));, +        assertThat(filter.isPresent(wrap("2"), 0, wrap("2").length), equalTo(false));, +        filter.add(wrap("2"), 0, wrap("2").length);, +        assertThat(filter.isPresent(wrap("1"), 0, wrap("1").length), equalTo(true));, +        assertThat(filter.isPresent(wrap("2"), 0, wrap("2").length), equalTo(true));, +    private byte[] wrap(String key) {, +        return key.getBytes(Charsets.UTF_8);]