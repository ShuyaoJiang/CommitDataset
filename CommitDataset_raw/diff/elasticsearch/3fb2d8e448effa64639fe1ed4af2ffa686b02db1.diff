[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +public class ClusterInfo {, +    public long getShardSize(ShardRouting shardRouting, long defaultValue) {, +        Long shardSize = getShardSize(shardRouting);, +        return shardSize == null ? defaultValue : shardSize;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +public class ClusterInfo {, +    public long getShardSize(ShardRouting shardRouting, long defaultValue) {, +        Long shardSize = getShardSize(shardRouting);, +        return shardSize == null ? defaultValue : shardSize;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +import java.util.concurrent.atomic.AtomicReference;, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +public class ClusterInfo {, +    public long getShardSize(ShardRouting shardRouting, long defaultValue) {, +        Long shardSize = getShardSize(shardRouting);, +        return shardSize == null ? defaultValue : shardSize;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +import java.util.concurrent.atomic.AtomicReference;, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public void initialize(ShardRouting shard, String nodeId, long expectedSize) {, +        shard.initialize(nodeId, expectedSize);, +    public ShardRouting relocate(ShardRouting shard, String nodeId, long expectedShardSize) {, +        shard.relocate(nodeId, expectedShardSize);, +            public void initialize(String nodeId, long version, long expectedShardSize) {, +                nodes.initialize(new ShardRouting(current, version), nodeId, expectedShardSize);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +public class ClusterInfo {, +    public long getShardSize(ShardRouting shardRouting, long defaultValue) {, +        Long shardSize = getShardSize(shardRouting);, +        return shardSize == null ? defaultValue : shardSize;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +import java.util.concurrent.atomic.AtomicReference;, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public void initialize(ShardRouting shard, String nodeId, long expectedSize) {, +        shard.initialize(nodeId, expectedSize);, +    public ShardRouting relocate(ShardRouting shard, String nodeId, long expectedShardSize) {, +        shard.relocate(nodeId, expectedShardSize);, +            public void initialize(String nodeId, long version, long expectedShardSize) {, +                nodes.initialize(new ShardRouting(current, version), nodeId, expectedShardSize);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +    /**, +     * Used if shard size is not available, +     */, +    public static final long UNAVAILABLE_EXPECTED_SHARD_SIZE = -1;, +, +    private long expectedShardSize = UNAVAILABLE_EXPECTED_SHARD_SIZE;, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.relocatingNodeId(), copy.restoreSource(), copy.primary(), copy.state(), version, copy.unassignedInfo(), copy.allocationId(), true, copy.getExpectedShardSize());, +                 UnassignedInfo unassignedInfo, AllocationId allocationId, boolean internal, long expectedShardSize) {, +        this.expectedShardSize = expectedShardSize;, +        assert expectedShardSize == UNAVAILABLE_EXPECTED_SHARD_SIZE || state == ShardRoutingState.INITIALIZING || state == ShardRoutingState.RELOCATING : expectedShardSize + " state: " + state;, +        assert expectedShardSize >= 0 || state != ShardRoutingState.INITIALIZING || state != ShardRoutingState.RELOCATING : expectedShardSize + " state: " + state;, +, +        return new ShardRouting(index, shardId, null, null, restoreSource, primary, ShardRoutingState.UNASSIGNED, 0, unassignedInfo, null, true, UNAVAILABLE_EXPECTED_SHARD_SIZE);, +                AllocationId.newTargetRelocation(allocationId), true, expectedShardSize);, +        if (relocating() || initializing()) {, +            expectedShardSize = in.readLong();, +        } else {, +            expectedShardSize = UNAVAILABLE_EXPECTED_SHARD_SIZE;, +        }, +        if (relocating() || initializing()) {, +            out.writeLong(expectedShardSize);, +        }, +, +        expectedShardSize = UNAVAILABLE_EXPECTED_SHARD_SIZE;, +    void initialize(String nodeId, long expectedShardSize) {, +        this.expectedShardSize = expectedShardSize;, +    void relocate(String relocatingNodeId, long expectedShardSize) {, +        this.expectedShardSize = expectedShardSize;, +        expectedShardSize = UNAVAILABLE_EXPECTED_SHARD_SIZE;, +        expectedShardSize = UNAVAILABLE_EXPECTED_SHARD_SIZE;, +        if (expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE) {, +            sb.append(", expected_shard_size[").append(expectedShardSize).append("]");, +        }, +        if (expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE){, +            builder.field("expected_shard_size_in_bytes", expectedShardSize);, +        }, +, +    /**, +     * Returns the expected shard size for {@link ShardRoutingState#RELOCATING} and {@link ShardRoutingState#INITIALIZING}, +     * shards. If it's size is not available {@value #UNAVAILABLE_EXPECTED_SHARD_SIZE} will be returned., +     */, +    public long getExpectedShardSize() {, +        return expectedShardSize;, +    }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java]