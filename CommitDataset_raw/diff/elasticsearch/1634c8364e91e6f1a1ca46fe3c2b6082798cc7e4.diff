[+++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                    FilterFunction filterFunction = filterFunctions[i];, +            FiltersFunctionFactorScorer scorer = (FiltersFunctionFactorScorer)scorer(context);, +            int actualDoc = scorer.advance(doc);, +            assert (actualDoc == doc);, +            double score = scorer.computeScore(doc, subQueryExpl.getValue());, +                    CombineFunction.toFloat(score),, +            double factor = computeScore(docId, subQueryScore);, +            return scoreCombiner.combine(subQueryScore, factor, maxBoost);, +        }, +, +        protected double computeScore(int docId, float subQueryScore) {, +            double factor = 1d;, +                    double weightSum = 0;, +                                weightSum += 1.0;, +            return factor;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                    FilterFunction filterFunction = filterFunctions[i];, +            FiltersFunctionFactorScorer scorer = (FiltersFunctionFactorScorer)scorer(context);, +            int actualDoc = scorer.advance(doc);, +            assert (actualDoc == doc);, +            double score = scorer.computeScore(doc, subQueryExpl.getValue());, +                    CombineFunction.toFloat(score),, +            double factor = computeScore(docId, subQueryScore);, +            return scoreCombiner.combine(subQueryScore, factor, maxBoost);, +        }, +, +        protected double computeScore(int docId, float subQueryScore) {, +            double factor = 1d;, +                    double weightSum = 0;, +                                weightSum += 1.0;, +            return factor;, +++ b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreTests.java, +import static org.hamcrest.core.Is.is;, +        return getExplanation(searcher, filtersFunctionScoreQuery).getDetails()[1];, +    }, +, +    protected Explanation getExplanation(IndexSearcher searcher, FiltersFunctionScoreQuery filtersFunctionScoreQuery) throws IOException {, +        return weight.explain(searcher.getIndexReader().leaves().get(0), 0);, +        float[] values = new float[size];, +        for (int i = 0; i < values.length; i++) {, +            values[i] = randomFloat() * (randomBoolean() ? 1.0f : -1.0f) * randomInt(100) + 1.e-5f;, +        return values;, +    }, +, +    private static double[] randomDoubles(int size) {, +        double[] values = new double[size];, +        for (int i = 0; i < values.length; i++) {, +            values[i] = randomDouble() * (randomBoolean() ? 1.0d : -1.0d) * randomInt(100) + 1.e-5d;, +        }, +        return values;, +        private double score;, +        ScoreFunctionStub(double score) {, +                    return Explanation.match((float) score, "a random score for testing");, +        double[] scores = randomDoubles(numFunctions);, +        assertThat(scoreWithWeight / (float) score, is(1f));, +        float explainedScore = getExplanation(searcher, filtersFunctionScoreQueryWithWeights).getValue();, +        assertThat(explainedScore / scoreWithWeight, is(1f));, +        assertThat(scoreWithWeight / (float) sum, is(1f));, +        explainedScore = getExplanation(searcher, filtersFunctionScoreQueryWithWeights).getValue();, +        assertThat(explainedScore / scoreWithWeight, is(1f));, +        assertThat(scoreWithWeight / (float) (sum / norm), is(1f));, +        explainedScore = getExplanation(searcher, filtersFunctionScoreQueryWithWeights).getValue();, +        assertThat(explainedScore / scoreWithWeight, is(1f));, +        assertThat(scoreWithWeight / (float) min, is(1f));, +        explainedScore = getExplanation(searcher, filtersFunctionScoreQueryWithWeights).getValue();, +        assertThat(explainedScore / scoreWithWeight, is(1f));, +        assertThat(scoreWithWeight / (float) max, is(1f));, +        explainedScore = getExplanation(searcher, filtersFunctionScoreQueryWithWeights).getValue();, +        assertThat(explainedScore / scoreWithWeight, is(1f));]