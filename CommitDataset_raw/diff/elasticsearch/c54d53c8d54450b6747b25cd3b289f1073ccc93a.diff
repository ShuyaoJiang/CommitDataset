[+++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +    private final HdfsRepository repository;, +    HdfsBlobContainer(BlobPath blobPath, HdfsRepository repository, Path path) {, +        this.repository = repository;, +            return SecurityUtils.execute(repository, new FcCallback<Boolean>() {, +            SecurityUtils.execute(repository, new FcCallback<Boolean>() {, +        SecurityUtils.execute(repository, new FcCallback<Void>() {, +        return SecurityUtils.execute(repository, new FcCallback<InputStream>() {, +                return fc.open(new Path(path, blobName), repository.bufferSizeInBytes);, +        SecurityUtils.execute(repository, new FcCallback<Void>() {, +                CreateOpts[] opts = { CreateOpts.bufferSize(repository.bufferSizeInBytes) };, +                    byte[] buffer = new byte[repository.bufferSizeInBytes];, +        FileStatus[] files = SecurityUtils.execute(repository, new FcCallback<FileStatus[]>() {, +        FileStatus[] files = SecurityUtils.execute(repository, new FcCallback<FileStatus[]>() {, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +    private final HdfsRepository repository;, +    HdfsBlobContainer(BlobPath blobPath, HdfsRepository repository, Path path) {, +        this.repository = repository;, +            return SecurityUtils.execute(repository, new FcCallback<Boolean>() {, +            SecurityUtils.execute(repository, new FcCallback<Boolean>() {, +        SecurityUtils.execute(repository, new FcCallback<Void>() {, +        return SecurityUtils.execute(repository, new FcCallback<InputStream>() {, +                return fc.open(new Path(path, blobName), repository.bufferSizeInBytes);, +        SecurityUtils.execute(repository, new FcCallback<Void>() {, +                CreateOpts[] opts = { CreateOpts.bufferSize(repository.bufferSizeInBytes) };, +                    byte[] buffer = new byte[repository.bufferSizeInBytes];, +        FileStatus[] files = SecurityUtils.execute(repository, new FcCallback<FileStatus[]>() {, +        FileStatus[] files = SecurityUtils.execute(repository, new FcCallback<FileStatus[]>() {, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobStore.java, +final class HdfsBlobStore implements BlobStore {, +    HdfsBlobStore(HdfsRepository repository, Path root) throws IOException {, +        return new HdfsBlobContainer(path, repository, buildHdfsPath(path));, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +    private final HdfsRepository repository;, +    HdfsBlobContainer(BlobPath blobPath, HdfsRepository repository, Path path) {, +        this.repository = repository;, +            return SecurityUtils.execute(repository, new FcCallback<Boolean>() {, +            SecurityUtils.execute(repository, new FcCallback<Boolean>() {, +        SecurityUtils.execute(repository, new FcCallback<Void>() {, +        return SecurityUtils.execute(repository, new FcCallback<InputStream>() {, +                return fc.open(new Path(path, blobName), repository.bufferSizeInBytes);, +        SecurityUtils.execute(repository, new FcCallback<Void>() {, +                CreateOpts[] opts = { CreateOpts.bufferSize(repository.bufferSizeInBytes) };, +                    byte[] buffer = new byte[repository.bufferSizeInBytes];, +        FileStatus[] files = SecurityUtils.execute(repository, new FcCallback<FileStatus[]>() {, +        FileStatus[] files = SecurityUtils.execute(repository, new FcCallback<FileStatus[]>() {, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobStore.java, +final class HdfsBlobStore implements BlobStore {, +    HdfsBlobStore(HdfsRepository repository, Path root) throws IOException {, +        return new HdfsBlobContainer(path, repository, buildHdfsPath(path));, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsRepository.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, +    final int bufferSizeInBytes;, +        this.bufferSizeInBytes = (int) repositorySettings.settings().getAsBytesSize("buffer_size", new ByteSizeValue(100, ByteSizeUnit.KB)).bytes();, +            blobStore = new HdfsBlobStore(this, hdfsPath);]