[+++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                logger.warn("failed to validate incoming join request from node [{}]", e, node);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                logger.warn("failed to validate incoming join request from node [{}]", e, node);, +++ b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java, +        assertHitCount(searchResponse, 0L);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                logger.warn("failed to validate incoming join request from node [{}]", e, node);, +++ b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java, +        assertHitCount(searchResponse, 0L);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +        addMethod("List", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<Object>", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<String>", "getLength", "size", false, intType, new Type[] {}, null, null);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                logger.warn("failed to validate incoming join request from node [{}]", e, node);, +++ b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java, +        assertHitCount(searchResponse, 0L);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +        addMethod("List", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<Object>", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<String>", "getLength", "size", false, intType, new Type[] {}, null, null);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DynamicCallSite.java, + * Has 3 flavors (passed as static bootstrap parameters): dynamic method call,, + * dynamic field load (getter), and dynamic field store (setter)., +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                logger.warn("failed to validate incoming join request from node [{}]", e, node);, +++ b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java, +        assertHitCount(searchResponse, 0L);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +        addMethod("List", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<Object>", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<String>", "getLength", "size", false, intType, new Type[] {}, null, null);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DynamicCallSite.java, + * Has 3 flavors (passed as static bootstrap parameters): dynamic method call,, + * dynamic field load (getter), and dynamic field store (setter)., +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                logger.warn("failed to validate incoming join request from node [{}]", e, node);, +++ b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java, +        assertHitCount(searchResponse, 0L);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +        addMethod("List", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<Object>", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<String>", "getLength", "size", false, intType, new Type[] {}, null, null);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DynamicCallSite.java, + * Has 3 flavors (passed as static bootstrap parameters): dynamic method call,, + * dynamic field load (getter), and dynamic field store (setter)., +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngineService.java, +             * @return Always true as it's assumed score is needed., +                return true;, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                logger.warn("failed to validate incoming join request from node [{}]", e, node);, +++ b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java, +        assertHitCount(searchResponse, 0L);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +        addMethod("List", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<Object>", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<String>", "getLength", "size", false, intType, new Type[] {}, null, null);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DynamicCallSite.java, + * Has 3 flavors (passed as static bootstrap parameters): dynamic method call,, + * dynamic field load (getter), and dynamic field store (setter)., +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngineService.java, +             * @return Always true as it's assumed score is needed., +                return true;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Writer.java, +import static org.elasticsearch.painless.WriterConstants.SIGNATURE;, +        execute = new GeneratorAdapter(Opcodes.ACC_PUBLIC, EXECUTE, SIGNATURE, null, writer);, +        writer.visit(version, access, name, null, base, null);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                logger.warn("failed to validate incoming join request from node [{}]", e, node);, +++ b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java, +        assertHitCount(searchResponse, 0L);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +        addMethod("List", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<Object>", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<String>", "getLength", "size", false, intType, new Type[] {}, null, null);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DynamicCallSite.java, + * Has 3 flavors (passed as static bootstrap parameters): dynamic method call,, + * dynamic field load (getter), and dynamic field store (setter)., +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngineService.java, +             * @return Always true as it's assumed score is needed., +                return true;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Writer.java, +import static org.elasticsearch.painless.WriterConstants.SIGNATURE;, +        execute = new GeneratorAdapter(Opcodes.ACC_PUBLIC, EXECUTE, SIGNATURE, null, writer);, +        writer.visit(version, access, name, null, base, null);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +    final static String SIGNATURE   = "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ljava/lang/Object;";, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                logger.warn("failed to validate incoming join request from node [{}]", e, node);, +++ b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java, +        assertHitCount(searchResponse, 0L);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +        addMethod("List", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<Object>", "getLength", "size", false, intType, new Type[] {}, null, null);, +        addMethod("List<String>", "getLength", "size", false, intType, new Type[] {}, null, null);]