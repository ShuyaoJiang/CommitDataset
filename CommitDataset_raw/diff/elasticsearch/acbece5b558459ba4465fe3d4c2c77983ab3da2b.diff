[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        String distroConfigName = "${task.name}_elasticsearchDistro", +        Configuration distro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, distro, VersionProperties.elasticsearch), +                distro = project.configurations.elasticsearchBwcDistro, +            startTasks.add(configureNode(project, task, cleanup, node, distro)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        String distroConfigName = "${task.name}_elasticsearchDistro", +        Configuration distro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, distro, VersionProperties.elasticsearch), +                distro = project.configurations.elasticsearchBwcDistro, +            startTasks.add(configureNode(project, task, cleanup, node, distro)), +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Sets no fields to be loaded, resulting in only id and type to be returned per field., +     */, +    public SearchRequestBuilder setNoStoredFields() {, +        sourceBuilder().noStoredFields();, +        return this;, +    }, +, +    /**, +     * If none are specified, the source of the document will be return., +     * Sets the stored fields to load and return as part of the search request. If none, +     * are specified, the source of the document will be returned., +     *, +     * Sets the fields to load and return as part of the search request. If none, +     * are specified, the source of the document will be returned., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        String distroConfigName = "${task.name}_elasticsearchDistro", +        Configuration distro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, distro, VersionProperties.elasticsearch), +                distro = project.configurations.elasticsearchBwcDistro, +            startTasks.add(configureNode(project, task, cleanup, node, distro)), +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Sets no fields to be loaded, resulting in only id and type to be returned per field., +     */, +    public SearchRequestBuilder setNoStoredFields() {, +        sourceBuilder().noStoredFields();, +        return this;, +    }, +, +    /**, +     * If none are specified, the source of the document will be return., +     * Sets the stored fields to load and return as part of the search request. If none, +     * are specified, the source of the document will be returned., +     *, +     * Sets the fields to load and return as part of the search request. If none, +     * are specified, the source of the document will be returned., +++ b/core/src/main/java/org/elasticsearch/index/query/InnerHitBuilder.java, +    private List<String> storedFieldNames;, +        if (other.storedFieldNames != null) {, +            storedFieldNames = new ArrayList<>(other.storedFieldNames);, +        storedFieldNames = (List<String>) in.readGenericValue();, +        out.writeGenericValue(storedFieldNames);, +                scriptField.writeTo(out);;, +     * @deprecated Use {@link InnerHitBuilder#getStoredFieldNames()} instead., +        return storedFieldNames;, +     * Sets the stored fields to load and return. If none, +     * are specified, the source of the document will be returned., +        this.storedFieldNames = fieldNames;, +        return this;, +     * Gets the stored fields to load and return., +    public List<String> getStoredFieldNames() {, +        return storedFieldNames;, +     * Sets the stored fields to load and return. If none, +     * are specified, the source of the document will be returned., +        this.storedFieldNames = fieldNames;, +        if (storedFieldNames != null) {, +            if (storedFieldNames.isEmpty()) {, +                innerHitsContext.emptyFieldNames();, +            } else {, +                for (String fieldName : storedFieldNames) {, +                    innerHitsContext.fieldNames().add(fieldName);, +                }, +            }, +        if (storedFieldNames != null) {, +            if (storedFieldNames.size() == 1) {, +                builder.field(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), storedFieldNames.get(0));, +            } else {, +                builder.startArray(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName());, +                for (String fieldName : storedFieldNames) {, +                    builder.value(fieldName);, +                }, +                builder.endArray();, +            }, +                Objects.equals(storedFieldNames, that.storedFieldNames) &&, +        return Objects.hash(name, nestedPath, parentChildType, from, size, explain, version, trackScores, storedFieldNames,, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        String distroConfigName = "${task.name}_elasticsearchDistro", +        Configuration distro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, distro, VersionProperties.elasticsearch), +                distro = project.configurations.elasticsearchBwcDistro, +            startTasks.add(configureNode(project, task, cleanup, node, distro)), +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Sets no fields to be loaded, resulting in only id and type to be returned per field., +     */, +    public SearchRequestBuilder setNoStoredFields() {, +        sourceBuilder().noStoredFields();, +        return this;, +    }]