[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +        Map<String, FieldCapabilities> userResponse = response.getField("user");  // <1>, +        boolean isSearchable = textCapabilities.isSearchable();, +        boolean isAggregatable = textCapabilities.isAggregatable();, +        String[] indices = textCapabilities.indices(); // <2>, +        String[] nonSearchableIndices = textCapabilities.nonSearchableIndices(); // <3>, +        String[] nonAggregatableIndices = textCapabilities.nonAggregatableIndices();//<4>, +        assertThat(userResponse.keySet(), containsInAnyOrder("keyword", "text"));, +, +        assertTrue(isSearchable);, +        assertFalse(isAggregatable);, +, +        assertArrayEquals(indices, new String[]{"authors", "contributors"});, +        assertNull(nonSearchableIndices);, +        assertArrayEquals(nonAggregatableIndices, new String[]{"authors"});, +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +        Map<String, FieldCapabilities> userResponse = response.getField("user");  // <1>, +        boolean isSearchable = textCapabilities.isSearchable();, +        boolean isAggregatable = textCapabilities.isAggregatable();, +        String[] indices = textCapabilities.indices(); // <2>, +        String[] nonSearchableIndices = textCapabilities.nonSearchableIndices(); // <3>, +        String[] nonAggregatableIndices = textCapabilities.nonAggregatableIndices();//<4>, +        assertThat(userResponse.keySet(), containsInAnyOrder("keyword", "text"));, +, +        assertTrue(isSearchable);, +        assertFalse(isAggregatable);, +, +        assertArrayEquals(indices, new String[]{"authors", "contributors"});, +        assertNull(nonSearchableIndices);, +        assertArrayEquals(nonAggregatableIndices, new String[]{"authors"});, +, +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestTests.java, +import org.apache.http.entity.ByteArrayEntity;, +import org.elasticsearch.client.HttpAsyncResponseConsumerFactory.HeapBufferedResponseConsumerFactory;, +import static org.junit.Assert.assertNotEquals;, +    public void testEqualsAndHashCode() {, +        Request request = randomRequest();, +        assertEquals(request, request);, +        Request copy = copy(request);, +        assertEquals(request, copy);, +        assertEquals(copy, request);, +        assertEquals(request.hashCode(), copy.hashCode());, +, +        Request mutant = mutate(request);, +        assertNotEquals(request, mutant);, +        assertNotEquals(mutant, request);, +    }, +, +    private Request randomRequest() {, +        Request request = new Request(, +            randomFrom(new String[] {"GET", "PUT", "DELETE", "POST", "HEAD", "OPTIONS"}),, +            randomAsciiAlphanumOfLength(5));, +, +        int parameterCount = between(0, 5);, +        for (int i = 0; i < parameterCount; i++) {, +            request.addParameter(randomAsciiAlphanumOfLength(i), randomAsciiLettersOfLength(3));, +        }, +, +        if (randomBoolean()) {, +            if (randomBoolean()) {, +                request.setJsonEntity(randomAsciiAlphanumOfLength(10));, +            } else {, +                request.setEntity(randomFrom(new HttpEntity[] {, +                    new StringEntity(randomAsciiAlphanumOfLength(10), ContentType.APPLICATION_JSON),, +                    new NStringEntity(randomAsciiAlphanumOfLength(10), ContentType.APPLICATION_JSON),, +                    new ByteArrayEntity(randomBytesOfLength(40), ContentType.APPLICATION_JSON), +                }));, +            }, +        }, +, +        if (randomBoolean()) {, +            int headerCount = between(1, 5);, +            Header[] headers = new Header[headerCount];, +            for (int i = 0; i < headerCount; i++) {, +                headers[i] = new BasicHeader(randomAsciiAlphanumOfLength(3), randomAsciiAlphanumOfLength(3));, +            }, +            request.setHeaders(headers);, +        }, +, +        if (randomBoolean()) {, +            request.setHttpAsyncResponseConsumerFactory(new HeapBufferedResponseConsumerFactory(1));, +        }, +, +        return request;, +    }, +, +    private Request copy(Request request) {, +        Request copy = new Request(request.getMethod(), request.getEndpoint());, +        copyMutables(request, copy);, +        return copy;, +    }, +, +    private Request mutate(Request request) {, +        if (randomBoolean()) {, +            // Mutate request or method but keep everything else constant, +            Request mutant = randomBoolean(), +                ? new Request(request.getMethod() + "m", request.getEndpoint()), +                : new Request(request.getMethod(), request.getEndpoint() + "m");, +            copyMutables(request, mutant);]