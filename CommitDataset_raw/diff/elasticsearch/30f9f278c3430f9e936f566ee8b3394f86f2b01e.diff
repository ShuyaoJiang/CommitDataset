[+++ b/src/main/java/org/elasticsearch/common/regex/Regex.java, +import java.util.Locale;, +     * This Regex / {@link Pattern} flag is supported from Java 7 on., +     * If set on a Java6 JVM the flag will be ignored., +     * , +     */, +    public static final int UNICODE_CHARACTER_CLASS = 0x100; // supported in JAVA7, +, +    /**, +            s = s.toUpperCase(Locale.ROOT);, +            if ("CASE_INSENSITIVE".equals(s)) {, +            } else if ("MULTILINE".equals(s)) {, +            } else if ("DOTALL".equals(s)) {, +            } else if ("UNICODE_CASE".equals(s)) {, +            } else if ("CANON_EQ".equals(s)) {, +            } else if ("UNIX_LINES".equals(s)) {, +            } else if ("LITERAL".equals(s)) {, +            } else if ("COMMENTS".equals(s)) {, +            } else if ("UNICODE_CHAR_CLASS".equals(s)) {, +                pFlags |= UNICODE_CHARACTER_CLASS;, +        if ((flags & UNICODE_CHARACTER_CLASS) != 0) {, +            sb.append("UNICODE_CHAR_CLASS|");, +        }, +++ b/src/main/java/org/elasticsearch/common/regex/Regex.java, +import java.util.Locale;, +     * This Regex / {@link Pattern} flag is supported from Java 7 on., +     * If set on a Java6 JVM the flag will be ignored., +     * , +     */, +    public static final int UNICODE_CHARACTER_CLASS = 0x100; // supported in JAVA7, +, +    /**, +            s = s.toUpperCase(Locale.ROOT);, +            if ("CASE_INSENSITIVE".equals(s)) {, +            } else if ("MULTILINE".equals(s)) {, +            } else if ("DOTALL".equals(s)) {, +            } else if ("UNICODE_CASE".equals(s)) {, +            } else if ("CANON_EQ".equals(s)) {, +            } else if ("UNIX_LINES".equals(s)) {, +            } else if ("LITERAL".equals(s)) {, +            } else if ("COMMENTS".equals(s)) {, +            } else if ("UNICODE_CHAR_CLASS".equals(s)) {, +                pFlags |= UNICODE_CHARACTER_CLASS;, +        if ((flags & UNICODE_CHARACTER_CLASS) != 0) {, +            sb.append("UNICODE_CHAR_CLASS|");, +        }, +++ b/src/test/java/org/elasticsearch/test/unit/common/regex/RegexTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.test.unit.common.regex;, +, +import java.util.Random;, +import java.util.regex.Pattern;, +, +import org.elasticsearch.common.regex.Regex;, +import org.testng.annotations.Test;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.equalTo;, +public class RegexTests {, +, +    @Test, +    public void testFlags() {, +        String[] supportedFlags = new String[] { "CASE_INSENSITIVE", "MULTILINE", "DOTALL", "UNICODE_CASE", "CANON_EQ", "UNIX_LINES",, +                "LITERAL", "COMMENTS", "UNICODE_CHAR_CLASS" };, +        int[] flags = new int[] { Pattern.CASE_INSENSITIVE, Pattern.MULTILINE, Pattern.DOTALL, Pattern.UNICODE_CASE, Pattern.CANON_EQ,, +                Pattern.UNIX_LINES, Pattern.LITERAL, Pattern.COMMENTS, Regex.UNICODE_CHARACTER_CLASS };, +        long seed = System.currentTimeMillis();, +        Random random = new Random(seed);, +        int num = 10 + random.nextInt(100);, +        for (int i = 0; i < num; i++) {, +            int numFlags = random.nextInt(flags.length+1);, +            int current = 0;, +            StringBuilder builder = new StringBuilder();, +            for (int j = 0; j < numFlags; j++) {, +                int index = random.nextInt(flags.length);, +                current |= flags[index];, +                builder.append(supportedFlags[index]);, +                if (j < numFlags-1) {, +                    builder.append("|");, +                }, +            }, +            String flagsToString = Regex.flagsToString(current);, +            assertThat(Regex.flagsFromString(builder.toString()), equalTo(current));]