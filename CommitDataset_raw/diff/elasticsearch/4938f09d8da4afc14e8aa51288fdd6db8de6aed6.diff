[+++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +        if (origin != null) {, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +        if (origin != null) {, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionParser.java, +            throw new ElasticSearchParseException(DecayFunctionBuilder.SCALE + "must be set for date fields.");, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +        if (origin != null) {, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionParser.java, +            throw new ElasticSearchParseException(DecayFunctionBuilder.SCALE + "must be set for date fields.");, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/ScoreFunctionBuilders.java, +   , +    public static ExponentialDecayFunctionBuilder exponentialDecayFunction(String fieldName, Object scale) {, +        return new ExponentialDecayFunctionBuilder(fieldName, null, scale);, +    public static GaussDecayFunctionBuilder gaussDecayFunction(String fieldName, Object scale) {, +        return new GaussDecayFunctionBuilder(fieldName, null, scale);, +    public static LinearDecayFunctionBuilder linearDecayFunction(String fieldName, Object scale) {, +        return new LinearDecayFunctionBuilder(fieldName, null, scale);, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +        if (origin != null) {, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionParser.java, +            throw new ElasticSearchParseException(DecayFunctionBuilder.SCALE + "must be set for date fields.");, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/ScoreFunctionBuilders.java, +   , +    public static ExponentialDecayFunctionBuilder exponentialDecayFunction(String fieldName, Object scale) {, +        return new ExponentialDecayFunctionBuilder(fieldName, null, scale);, +    public static GaussDecayFunctionBuilder gaussDecayFunction(String fieldName, Object scale) {, +        return new GaussDecayFunctionBuilder(fieldName, null, scale);, +    public static LinearDecayFunctionBuilder linearDecayFunction(String fieldName, Object scale) {, +        return new LinearDecayFunctionBuilder(fieldName, null, scale);, +++ b/src/test/java/org/elasticsearch/search/functionscore/DecayFunctionScoreTests.java, +import org.elasticsearch.index.query.QueryBuilders;, +import org.joda.time.DateTime;, +        assertAcked(prepareCreate("test").addMapping(, +                "type1",, +                jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "string"), +                        .endObject().startObject("loc").field("type", "geo_point").endObject().endObject().endObject().endObject()));, +        assertAcked(prepareCreate("test").addMapping(, +                "type1",, +                jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "string"), +                        .endObject().startObject("num").field("type", "double").endObject().endObject().endObject().endObject()));, +        assertAcked(prepareCreate("test").addMapping(, +                "type1",, +                jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "string"), +                        .endObject().startObject("loc").field("type", "geo_point").endObject().endObject().endObject().endObject()));, +        assertAcked(prepareCreate("test").addMapping(, +                "type1",, +                jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "string"), +                        .endObject().startObject("loc").field("type", "geo_point").endObject().endObject().endObject().endObject()));, +        assertAcked(prepareCreate("test").addMapping(, +                "type1",, +                jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "string"), +                        .endObject().startObject("num").field("type", "double").endObject().endObject().endObject().endObject()));, +        assertAcked(prepareCreate("test").addMapping(, +                "type1",, +                jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "string"), +                        .endObject().startObject("num1").field("type", "date").endObject().endObject().endObject().endObject()));, +        assertAcked(prepareCreate("test").addMapping(, +                "type1",, +                jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "string"), +                        .endObject().startObject("num1").field("type", "date").endObject().startObject("num2").field("type", "double"), +                        .endObject().endObject().endObject().endObject()));, +                                functionScoreQuery(termQuery("test", "value")).add(linearDecayFunction("num1", "2013-05-28", "+3d")), +    public void testDateWithoutOrigin() throws Exception {, +        DateTime dt = new DateTime();, +, +        assertAcked(prepareCreate("test").addMapping(, +                "type1",, +                jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "string"), +                        .endObject().startObject("num1").field("type", "date").endObject().endObject().endObject().endObject()));, +        ensureYellow();, +, +        DateTime docDate = dt.minusDays(1);, +        String docDateString = docDate.getYear() + "-" + docDate.getMonthOfYear() + "-" + docDate.getDayOfMonth();, +        client().index(, +                indexRequest("test").type("type1").id("1"), +                        .source(jsonBuilder().startObject().field("test", "value").field("num1", docDateString).endObject())).actionGet();, +        docDate = dt.minusDays(2);, +        docDateString = docDate.getYear() + "-" + docDate.getMonthOfYear() + "-" + docDate.getDayOfMonth();, +        client().index(, +                indexRequest("test").type("type1").id("2"), +                        .source(jsonBuilder().startObject().field("test", "value").field("num1", docDateString).endObject())).actionGet();, +        docDate = dt.minusDays(3);, +        docDateString = docDate.getYear() + "-" + docDate.getMonthOfYear() + "-" + docDate.getDayOfMonth();, +        client().index(, +                indexRequest("test").type("type1").id("3"), +                        .source(jsonBuilder().startObject().field("test", "value").field("num1", docDateString).endObject())).actionGet();, +, +        refresh();, +, +        ActionFuture<SearchResponse> response = client().search(, +                searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(, +                        searchSource().explain(false).query(, +                                functionScoreQuery(QueryBuilders.matchAllQuery()).add(linearDecayFunction("num1", "1000w")), +                                        .add(gaussDecayFunction("num1", "1d")).add(exponentialDecayFunction("num1", "1000w")), +                                        .scoreMode("multiply"))));]