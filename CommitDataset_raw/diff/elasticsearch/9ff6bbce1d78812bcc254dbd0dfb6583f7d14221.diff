[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/WaitForNoFollowersStep.java, +import java.util.Collection;, +import java.util.Optional;, +                .map(Optional::ofNullable), +                .map(o -> o.flatMap(stats -> Optional.ofNullable(stats.retentionLeases()))), +                .map(o -> o.flatMap(leases -> Optional.ofNullable(leases.leases()))), +                .map(o -> o.map(Collection::stream)), +                .anyMatch(lease -> lease.isPresent() && lease.get().anyMatch(l -> CCR_LEASE_KEY.equals(l.source())));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/WaitForNoFollowersStep.java, +import java.util.Collection;, +import java.util.Optional;, +                .map(Optional::ofNullable), +                .map(o -> o.flatMap(stats -> Optional.ofNullable(stats.retentionLeases()))), +                .map(o -> o.flatMap(leases -> Optional.ofNullable(leases.leases()))), +                .map(o -> o.map(Collection::stream)), +                .anyMatch(lease -> lease.isPresent() && lease.get().anyMatch(l -> CCR_LEASE_KEY.equals(l.source())));, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexlifecycle/WaitForNoFollowersStepTests.java, +    public void testNoShardStats() {, +        WaitForNoFollowersStep step = createRandomInstance();, +, +        String indexName = randomAlphaOfLengthBetween(5,10);, +, +        int numberOfShards = randomIntBetween(1, 100);, +        final IndexMetaData indexMetaData = IndexMetaData.builder(indexName), +            .settings(settings(Version.CURRENT)), +            .numberOfShards(numberOfShards), +            .numberOfReplicas(randomIntBetween(1, 10)), +            .build();, +, +        ShardStats sStats = new ShardStats(null, mockShardPath(), null, null, null, null);, +        ShardStats[] shardStats = new ShardStats[1];, +        shardStats[0] = sStats;, +        mockIndexStatsCall(step.getClient(), indexName, new IndexStats(indexName, "uuid", shardStats));, +, +        final SetOnce<Boolean> conditionMetHolder = new SetOnce<>();, +        final SetOnce<ToXContentObject> stepInfoHolder = new SetOnce<>();, +        step.evaluateCondition(indexMetaData, new AsyncWaitStep.Listener() {, +            @Override, +            public void onResponse(boolean conditionMet, ToXContentObject infomationContext) {, +                conditionMetHolder.set(conditionMet);, +                stepInfoHolder.set(infomationContext);, +            }, +, +            @Override, +            public void onFailure(Exception e) {, +                fail("onFailure should not be called in this test, called with exception: " + e.getMessage());, +            }, +        });, +, +        assertTrue(conditionMetHolder.get());, +        assertNull(stepInfoHolder.get());, +    }, +]