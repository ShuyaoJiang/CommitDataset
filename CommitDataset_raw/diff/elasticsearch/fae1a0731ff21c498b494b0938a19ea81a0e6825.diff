[+++ b/src/test/java/org/elasticsearch/search/query/ExistsMissingTests.java, +import org.elasticsearch.action.search.SearchPhaseExecutionException;, +import java.util.ArrayList;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;, +            SearchResponse resp = client().prepareSearch("idx").setQuery(QueryBuilders.existsQuery(fieldName)).execute().actionGet();, +                    final ExplainResponse explanation = client().prepareExplain(index, type, id).setQuery(QueryBuilders.existsQuery(fieldName)).get();, +            resp = client().prepareSearch("idx").setQuery(QueryBuilders.missingQuery(fieldName)).execute().actionGet();, +    public void testNullValueUnset() throws Exception {, +        assertAcked(client().admin().indices().prepareCreate("idx").addMapping("type", "f", "type=string,index=not_analyzed"));, +        indexRandom(true,, +                client().prepareIndex("idx", "type", "1").setSource("f", "foo"),, +                client().prepareIndex("idx", "type", "2").setSource("f", null),, +                client().prepareIndex("idx", "type", "3").setSource("g", "bar"),, +                client().prepareIndex("idx", "type", "4").setSource("f", "bar"));, +, +        SearchResponse resp = client().prepareSearch("idx").setQuery(QueryBuilders.missingQuery("f").existence(true).nullValue(true)).get();, +        assertSearchHits(resp, "2", "3");, +, +        resp = client().prepareSearch("idx").setQuery(QueryBuilders.missingQuery("f").existence(true).nullValue(false)).get();, +        assertSearchHits(resp, "2", "3");, +, +        resp = client().prepareSearch("idx").setQuery(QueryBuilders.missingQuery("f").existence(false).nullValue(true)).get();, +        assertSearchHits(resp);, +, +        try {, +            client().prepareSearch("idx").setQuery(QueryBuilders.missingQuery("f").existence(false).nullValue(false)).get();, +            fail("both existence and null_value can't be false");, +        } catch (SearchPhaseExecutionException e) {, +            // expected, +        }, +    }, +, +    public void testNullValueSet() throws Exception {, +        assertAcked(client().admin().indices().prepareCreate("idx").addMapping("type", "f", "type=string,index=not_analyzed,null_value=bar"));, +        indexRandom(true,, +                client().prepareIndex("idx", "type", "1").setSource("f", "foo"),, +                client().prepareIndex("idx", "type", "2").setSource("f", null),, +                client().prepareIndex("idx", "type", "3").setSource("g", "bar"),, +                client().prepareIndex("idx", "type", "4").setSource("f", "bar"));, +, +        SearchResponse resp = client().prepareSearch("idx").setQuery(QueryBuilders.missingQuery("f").existence(true).nullValue(true)).get();, +        assertSearchHits(resp, "2", "3", "4");, +, +        resp = client().prepareSearch("idx").setQuery(QueryBuilders.missingQuery("f").existence(true).nullValue(false)).get();, +        assertSearchHits(resp, "3");, +, +        resp = client().prepareSearch("idx").setQuery(QueryBuilders.missingQuery("f").existence(false).nullValue(true)).get();, +        assertSearchHits(resp, "2", "4");, +, +        try {, +            client().prepareSearch("idx").setQuery(QueryBuilders.missingQuery("f").existence(false).nullValue(false)).get();, +            fail("both existence and null_value can't be false");, +        } catch (SearchPhaseExecutionException e) {, +            // expected, +        }, +    }, +]