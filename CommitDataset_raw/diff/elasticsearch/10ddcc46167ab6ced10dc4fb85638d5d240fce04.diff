[+++ b/core/src/main/java/org/elasticsearch/common/Table.java, +    public Map<String, String> getAliasMap() {, +        Map<String, String> headerAliasMap = new HashMap<>();, +        for (int i = 0; i < headers.size(); i++) {, +            Cell headerCell = headers.get(i);, +            String headerName = headerCell.value.toString();, +            if (headerCell.attr.containsKey("alias")) {, +                String[] aliases = Strings.splitStringByCommaToArray(headerCell.attr.get("alias"));, +                for (String alias : aliases) {, +                    headerAliasMap.put(alias, headerName);, +                }, +            }, +            headerAliasMap.put(headerName, headerName);, +        }, +        return headerAliasMap;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/Table.java, +    public Map<String, String> getAliasMap() {, +        Map<String, String> headerAliasMap = new HashMap<>();, +        for (int i = 0; i < headers.size(); i++) {, +            Cell headerCell = headers.get(i);, +            String headerName = headerCell.value.toString();, +            if (headerCell.attr.containsKey("alias")) {, +                String[] aliases = Strings.splitStringByCommaToArray(headerCell.attr.get("alias"));, +                for (String alias : aliases) {, +                    headerAliasMap.put(alias, headerName);, +                }, +            }, +            headerAliasMap.put(headerName, headerName);, +        }, +        return headerAliasMap;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeUnit.java, +++ b/core/src/main/java/org/elasticsearch/common/Table.java, +    public Map<String, String> getAliasMap() {, +        Map<String, String> headerAliasMap = new HashMap<>();, +        for (int i = 0; i < headers.size(); i++) {, +            Cell headerCell = headers.get(i);, +            String headerName = headerCell.value.toString();, +            if (headerCell.attr.containsKey("alias")) {, +                String[] aliases = Strings.splitStringByCommaToArray(headerCell.attr.get("alias"));, +                for (String alias : aliases) {, +                    headerAliasMap.put(alias, headerName);, +                }, +            }, +            headerAliasMap.put(headerName, headerName);, +        }, +        return headerAliasMap;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeUnit.java, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +public class ByteSizeValue implements Writeable, Comparable<ByteSizeValue> {, +        return compareTo((ByteSizeValue) o) == 0;, +        return Double.hashCode(((double) size) * unit.toBytes(1));, +    }, +, +    @Override, +    public int compareTo(ByteSizeValue other) {, +        double thisValue = ((double) size) * unit.toBytes(1);, +        double otherValue = ((double) other.size) * other.unit.toBytes(1);, +        return Double.compare(thisValue, otherValue);, +++ b/core/src/main/java/org/elasticsearch/common/Table.java, +    public Map<String, String> getAliasMap() {, +        Map<String, String> headerAliasMap = new HashMap<>();, +        for (int i = 0; i < headers.size(); i++) {, +            Cell headerCell = headers.get(i);, +            String headerName = headerCell.value.toString();, +            if (headerCell.attr.containsKey("alias")) {, +                String[] aliases = Strings.splitStringByCommaToArray(headerCell.attr.get("alias"));, +                for (String alias : aliases) {, +                    headerAliasMap.put(alias, headerName);, +                }, +            }, +            headerAliasMap.put(headerName, headerName);, +        }, +        return headerAliasMap;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeUnit.java, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +public class ByteSizeValue implements Writeable, Comparable<ByteSizeValue> {, +        return compareTo((ByteSizeValue) o) == 0;, +        return Double.hashCode(((double) size) * unit.toBytes(1));, +    }, +, +    @Override, +    public int compareTo(ByteSizeValue other) {, +        double thisValue = ((double) size) * unit.toBytes(1);, +        double otherValue = ((double) other.size) * other.unit.toBytes(1);, +        return Double.compare(thisValue, otherValue);, +++ b/core/src/main/java/org/elasticsearch/common/unit/SizeValue.java, +public class SizeValue implements Writeable, Comparable<SizeValue> {, +        return compareTo((SizeValue) o) == 0;, +        return Double.hashCode(((double) size) * sizeUnit.toSingles(1));, +    }, +, +    @Override]