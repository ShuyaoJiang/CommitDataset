[+++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +    private final Version indexVersionCreated;, +        assert indexSettings.get(IndexMetaData.SETTING_UUID) == null // if the UUDI is there the index has actually been created otherwise this might be a test, +                || indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, null) != null : IndexMetaData.SETTING_VERSION_CREATED + " not set in IndexSettings";, +        indexVersionCreated = indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT);, +        return new Mapper.TypeParser.ParserContext(postingsFormatService, docValuesFormatService, analysisService, similarityLookupService, typeParsers, indexVersionCreated);, +        Mapper.TypeParser.ParserContext parserContext = parserContext();, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +    private final Version indexVersionCreated;, +        assert indexSettings.get(IndexMetaData.SETTING_UUID) == null // if the UUDI is there the index has actually been created otherwise this might be a test, +                || indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, null) != null : IndexMetaData.SETTING_VERSION_CREATED + " not set in IndexSettings";, +        indexVersionCreated = indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT);, +        return new Mapper.TypeParser.ParserContext(postingsFormatService, docValuesFormatService, analysisService, similarityLookupService, typeParsers, indexVersionCreated);, +        Mapper.TypeParser.ParserContext parserContext = parserContext();, +++ b/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            private final Version indexVersionCreated;, +, +                                 ImmutableMap<String, TypeParser> typeParsers, Version indexVersionCreated) {, +                this.indexVersionCreated = indexVersionCreated;, +, +            public Version indexVersionCreated() {, +                return indexVersionCreated;, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +    private final Version indexVersionCreated;, +        assert indexSettings.get(IndexMetaData.SETTING_UUID) == null // if the UUDI is there the index has actually been created otherwise this might be a test, +                || indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, null) != null : IndexMetaData.SETTING_VERSION_CREATED + " not set in IndexSettings";, +        indexVersionCreated = indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT);, +        return new Mapper.TypeParser.ParserContext(postingsFormatService, docValuesFormatService, analysisService, similarityLookupService, typeParsers, indexVersionCreated);, +        Mapper.TypeParser.ParserContext parserContext = parserContext();, +++ b/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            private final Version indexVersionCreated;, +, +                                 ImmutableMap<String, TypeParser> typeParsers, Version indexVersionCreated) {, +                this.indexVersionCreated = indexVersionCreated;, +, +            public Version indexVersionCreated() {, +                return indexVersionCreated;, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +import org.elasticsearch.Version;, +                final IndexOptions op = nodeBooleanValue(propNode) ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;, +                if (parserContext.indexVersionCreated().onOrAfter(Version.V_1_0_0)) {, +                    throw new ElasticsearchParseException("'omit_term_freq_and_positions' is not supported anymore - use ['index_options' : '" + op.name() + "']  instead");, +                }, +                builder.indexOptions(op);, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +    private final Version indexVersionCreated;, +        assert indexSettings.get(IndexMetaData.SETTING_UUID) == null // if the UUDI is there the index has actually been created otherwise this might be a test, +                || indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, null) != null : IndexMetaData.SETTING_VERSION_CREATED + " not set in IndexSettings";, +        indexVersionCreated = indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT);, +        return new Mapper.TypeParser.ParserContext(postingsFormatService, docValuesFormatService, analysisService, similarityLookupService, typeParsers, indexVersionCreated);, +        Mapper.TypeParser.ParserContext parserContext = parserContext();, +++ b/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            private final Version indexVersionCreated;, +, +                                 ImmutableMap<String, TypeParser> typeParsers, Version indexVersionCreated) {, +                this.indexVersionCreated = indexVersionCreated;, +, +            public Version indexVersionCreated() {, +                return indexVersionCreated;, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +import org.elasticsearch.Version;, +                final IndexOptions op = nodeBooleanValue(propNode) ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;, +                if (parserContext.indexVersionCreated().onOrAfter(Version.V_1_0_0)) {, +                    throw new ElasticsearchParseException("'omit_term_freq_and_positions' is not supported anymore - use ['index_options' : '" + op.name() + "']  instead");, +                }, +                builder.indexOptions(op);, +++ b/src/test/java/org/elasticsearch/count/query/SimpleQueryTests.java, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +    private final Version indexVersionCreated;, +        assert indexSettings.get(IndexMetaData.SETTING_UUID) == null // if the UUDI is there the index has actually been created otherwise this might be a test, +                || indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, null) != null : IndexMetaData.SETTING_VERSION_CREATED + " not set in IndexSettings";, +        indexVersionCreated = indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT);, +        return new Mapper.TypeParser.ParserContext(postingsFormatService, docValuesFormatService, analysisService, similarityLookupService, typeParsers, indexVersionCreated);, +        Mapper.TypeParser.ParserContext parserContext = parserContext();, +++ b/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            private final Version indexVersionCreated;, +, +                                 ImmutableMap<String, TypeParser> typeParsers, Version indexVersionCreated) {, +                this.indexVersionCreated = indexVersionCreated;, +, +            public Version indexVersionCreated() {, +                return indexVersionCreated;, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +import org.elasticsearch.Version;, +                final IndexOptions op = nodeBooleanValue(propNode) ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;, +                if (parserContext.indexVersionCreated().onOrAfter(Version.V_1_0_0)) {]