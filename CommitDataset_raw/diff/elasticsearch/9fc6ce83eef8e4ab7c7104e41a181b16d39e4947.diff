[+++ b/dev-tools/checkstyle_suppressions.xml, +  <suppress files="plugin[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]persistent[/\\]AllocatedPersistentTask.java" checks="LineLength" />, +++ b/dev-tools/checkstyle_suppressions.xml, +  <suppress files="plugin[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]persistent[/\\]AllocatedPersistentTask.java" checks="LineLength" />, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.elasticsearch.xpack.persistent.AllocatedPersistentTask;, +    public static class JobTask extends AllocatedPersistentTask {, +        protected void nodeOperation(AllocatedPersistentTask task, Request request, ActionListener<TransportResponse.Empty> listener) {, +++ b/dev-tools/checkstyle_suppressions.xml, +  <suppress files="plugin[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]persistent[/\\]AllocatedPersistentTask.java" checks="LineLength" />, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.elasticsearch.xpack.persistent.AllocatedPersistentTask;, +    public static class JobTask extends AllocatedPersistentTask {, +        protected void nodeOperation(AllocatedPersistentTask task, Request request, ActionListener<TransportResponse.Empty> listener) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.xpack.persistent.AllocatedPersistentTask;, +    public static class DatafeedTask extends AllocatedPersistentTask {, +        protected void nodeOperation(AllocatedPersistentTask allocatedPersistentTask, Request request,, +            DatafeedTask datafeedTask = (DatafeedTask) allocatedPersistentTask;, +++ b/dev-tools/checkstyle_suppressions.xml, +  <suppress files="plugin[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]xpack[/\\]persistent[/\\]AllocatedPersistentTask.java" checks="LineLength" />, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.elasticsearch.xpack.persistent.AllocatedPersistentTask;, +    public static class JobTask extends AllocatedPersistentTask {, +        protected void nodeOperation(AllocatedPersistentTask task, Request request, ActionListener<TransportResponse.Empty> listener) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.xpack.persistent.AllocatedPersistentTask;, +    public static class DatafeedTask extends AllocatedPersistentTask {, +        protected void nodeOperation(AllocatedPersistentTask allocatedPersistentTask, Request request,, +            DatafeedTask datafeedTask = (DatafeedTask) allocatedPersistentTask;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/AllocatedPersistentTask.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.persistent;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.tasks.CancellableTask;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.tasks.TaskId;, +, +import java.util.concurrent.atomic.AtomicReference;, +, +/**, + * Represents a executor node operation that corresponds to a persistent task, + */, +public class AllocatedPersistentTask extends CancellableTask {, +    private long persistentTaskId;, +, +    private final AtomicReference<State> state;, +    @Nullable, +    private Exception failure;, +, +    private PersistentTasksService persistentTasksService;, +, +, +    public AllocatedPersistentTask(long id, String type, String action, String description, TaskId parentTask) {, +        super(id, type, action, description, parentTask);, +        this.state = new AtomicReference<>(State.STARTED);, +    }, +, +    @Override, +    public boolean shouldCancelChildrenOnCancellation() {, +        return true;, +    }, +, +    // In case of persistent tasks we always need to return: `false`, +    // because in case of persistent task the parent task isn't a task in the task manager, but in cluster state., +    // This instructs the task manager not to try to kill this persistent task when the task manager cannot find, +    // a fake parent node id "cluster" in the cluster state, +    @Override, +    public final boolean cancelOnParentLeaving() {, +        return false;, +    }, +, +    @Override, +    public Status getStatus() {, +        return new PersistentTasksNodeService.Status(state.get());, +    }, +, +    /**, +     * Updates the persistent state for the corresponding persistent task. , +     * , +     * This doesn't affect the status of this allocated task. , +     */, +    public void updatePersistentStatus(Task.Status status, PersistentTasksService.PersistentTaskOperationListener listener) {, +        persistentTasksService.updateStatus(persistentTaskId, status, listener);, +    }, +, +    public long getPersistentTaskId() {, +        return persistentTaskId;, +    }, +, +    void init(PersistentTasksService persistentTasksService, long persistentTaskId) {, +        this.persistentTasksService = persistentTasksService;, +        this.persistentTaskId = persistentTaskId;]