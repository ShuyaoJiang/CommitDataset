[+++ b/core/src/main/java/org/elasticsearch/action/ActionWriteResponse.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action;, +, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.bootstrap.Elasticsearch;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Streamable;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.rest.RestStatus;, +, +import java.io.IOException;, +import java.util.Collections;, +, +/**, + * Base class for write action responses., + */, +public class ActionWriteResponse extends ActionResponse {, +, +    public final static ActionWriteResponse.ShardInfo.Failure[] EMPTY = new ActionWriteResponse.ShardInfo.Failure[0];, +, +    private ShardInfo shardInfo;, +, +    @Override, +    public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +        shardInfo = ActionWriteResponse.ShardInfo.readShardInfo(in);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);, +        shardInfo.writeTo(out);, +    }, +, +    public ShardInfo getShardInfo() {, +        return shardInfo;, +    }, +, +    public void setShardInfo(ShardInfo shardInfo) {, +        this.shardInfo = shardInfo;, +    }, +, +    public static class ShardInfo implements Streamable, ToXContent {, +, +        private int total;, +        private int successful;, +        private Failure[] failures = EMPTY;, +, +        public ShardInfo() {, +        }, +, +        public ShardInfo(int total, int successful, Failure... failures) {, +            assert total >= 0 && successful >= 0;, +            this.total = total;, +            this.successful = successful;, +            this.failures = failures;, +        }, +, +        /**, +         * @return the total number of shards the write should go to (replicas and primaries). This includes relocating shards, so this number can be higher than the number of shards., +         */, +        public int getTotal() {, +            return total;, +        }, +, +        /**, +         * @return the total number of shards the write succeeded on (replicas and primaries). This includes relocating shards, so this number can be higher than the number of shards., +         */, +        public int getSuccessful() {, +            return successful;, +        }, +, +        /**, +         * @return The total number of replication failures.]