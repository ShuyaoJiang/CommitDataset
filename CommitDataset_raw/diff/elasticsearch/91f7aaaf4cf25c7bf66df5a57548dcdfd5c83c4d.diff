[+++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +        // TODO: needsScores, +        // if we dont need scores, just return the underlying Weight?, +        Weight subQueryWeight = subQuery.createWeight(searcher, needsScores);, +        return new CustomBoostFactorWeight(this, subQueryWeight, filterWeights);, +        public CustomBoostFactorWeight(Query parent, Weight subQueryWeight, Weight[] filterWeights) throws IOException {, +            return new FiltersFunctionFactorScorer(this, subQueryScorer, scoreMode, filterFunctions, maxBoost, functions, docSets, combineFunction, minScore);, +                                            float maxBoost, LeafScoreFunction[] functions, Bits[] docSets, CombineFunction scoreCombiner, Float minScore) throws IOException {, +            float subQueryScore = scorer.score();, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +        // TODO: needsScores, +        // if we dont need scores, just return the underlying Weight?, +        Weight subQueryWeight = subQuery.createWeight(searcher, needsScores);, +        return new CustomBoostFactorWeight(this, subQueryWeight, filterWeights);, +        public CustomBoostFactorWeight(Query parent, Weight subQueryWeight, Weight[] filterWeights) throws IOException {, +            return new FiltersFunctionFactorScorer(this, subQueryScorer, scoreMode, filterFunctions, maxBoost, functions, docSets, combineFunction, minScore);, +                                            float maxBoost, LeafScoreFunction[] functions, Bits[] docSets, CombineFunction scoreCombiner, Float minScore) throws IOException {, +            float subQueryScore = scorer.score();, +++ b/dev-tools/src/main/resources/ant/integration-tests.xml, +      <attribute name="jvm.args" default="${tests.jvm.argline}"/>, +      <echo>JAVA=${java.home}</echo>, +      <echo>ARGS=@{jvm.args}</echo>, +, +          <env key="JAVA_HOME" value="${java.home}"/>, +          <!-- we pass these as gc options, even if they arent, to avoid conflicting gc options -->, +          <env key="ES_GC_OPTS" value="@{jvm.args}"/>, +      <startup-elasticsearch spawn="false" home="${home}", +                             jvm.args="${tests.jvm.argline} -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000"/>, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +        // TODO: needsScores, +        // if we dont need scores, just return the underlying Weight?, +        Weight subQueryWeight = subQuery.createWeight(searcher, needsScores);, +        return new CustomBoostFactorWeight(this, subQueryWeight, filterWeights);, +        public CustomBoostFactorWeight(Query parent, Weight subQueryWeight, Weight[] filterWeights) throws IOException {, +            return new FiltersFunctionFactorScorer(this, subQueryScorer, scoreMode, filterFunctions, maxBoost, functions, docSets, combineFunction, minScore);, +                                            float maxBoost, LeafScoreFunction[] functions, Bits[] docSets, CombineFunction scoreCombiner, Float minScore) throws IOException {, +            float subQueryScore = scorer.score();, +++ b/dev-tools/src/main/resources/ant/integration-tests.xml, +      <attribute name="jvm.args" default="${tests.jvm.argline}"/>, +      <echo>JAVA=${java.home}</echo>, +      <echo>ARGS=@{jvm.args}</echo>, +, +          <env key="JAVA_HOME" value="${java.home}"/>, +          <!-- we pass these as gc options, even if they arent, to avoid conflicting gc options -->, +          <env key="ES_GC_OPTS" value="@{jvm.args}"/>, +      <startup-elasticsearch spawn="false" home="${home}", +                             jvm.args="${tests.jvm.argline} -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000"/>, +++ b/distribution/deb/pom.xml, +                                <ant antfile="${elasticsearch.integ.antfile}" target="start-external-cluster-deb">, +                                    <property name="tests.jvm.argline" value="${tests.jvm.argline}"/>, +                                </ant>, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +        // TODO: needsScores, +        // if we dont need scores, just return the underlying Weight?, +        Weight subQueryWeight = subQuery.createWeight(searcher, needsScores);, +        return new CustomBoostFactorWeight(this, subQueryWeight, filterWeights);, +        public CustomBoostFactorWeight(Query parent, Weight subQueryWeight, Weight[] filterWeights) throws IOException {, +            return new FiltersFunctionFactorScorer(this, subQueryScorer, scoreMode, filterFunctions, maxBoost, functions, docSets, combineFunction, minScore);, +                                            float maxBoost, LeafScoreFunction[] functions, Bits[] docSets, CombineFunction scoreCombiner, Float minScore) throws IOException {, +            float subQueryScore = scorer.score();, +++ b/dev-tools/src/main/resources/ant/integration-tests.xml, +      <attribute name="jvm.args" default="${tests.jvm.argline}"/>, +      <echo>JAVA=${java.home}</echo>, +      <echo>ARGS=@{jvm.args}</echo>, +, +          <env key="JAVA_HOME" value="${java.home}"/>, +          <!-- we pass these as gc options, even if they arent, to avoid conflicting gc options -->, +          <env key="ES_GC_OPTS" value="@{jvm.args}"/>, +      <startup-elasticsearch spawn="false" home="${home}", +                             jvm.args="${tests.jvm.argline} -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000"/>, +++ b/distribution/deb/pom.xml, +                                <ant antfile="${elasticsearch.integ.antfile}" target="start-external-cluster-deb">, +                                    <property name="tests.jvm.argline" value="${tests.jvm.argline}"/>, +                                </ant>, +++ b/distribution/rpm/pom.xml, +                                <ant antfile="${elasticsearch.integ.antfile}" target="start-external-cluster-rpm">, +                                    <property name="tests.jvm.argline" value="${tests.jvm.argline}"/>, +                                </ant>, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +        // TODO: needsScores, +        // if we dont need scores, just return the underlying Weight?, +        Weight subQueryWeight = subQuery.createWeight(searcher, needsScores);, +        return new CustomBoostFactorWeight(this, subQueryWeight, filterWeights);, +        public CustomBoostFactorWeight(Query parent, Weight subQueryWeight, Weight[] filterWeights) throws IOException {, +            return new FiltersFunctionFactorScorer(this, subQueryScorer, scoreMode, filterFunctions, maxBoost, functions, docSets, combineFunction, minScore);, +                                            float maxBoost, LeafScoreFunction[] functions, Bits[] docSets, CombineFunction scoreCombiner, Float minScore) throws IOException {, +            float subQueryScore = scorer.score();, +++ b/dev-tools/src/main/resources/ant/integration-tests.xml, +      <attribute name="jvm.args" default="${tests.jvm.argline}"/>, +      <echo>JAVA=${java.home}</echo>, +      <echo>ARGS=@{jvm.args}</echo>, +, +          <env key="JAVA_HOME" value="${java.home}"/>, +          <!-- we pass these as gc options, even if they arent, to avoid conflicting gc options -->, +          <env key="ES_GC_OPTS" value="@{jvm.args}"/>, +      <startup-elasticsearch spawn="false" home="${home}", +                             jvm.args="${tests.jvm.argline} -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000"/>, +++ b/distribution/deb/pom.xml, +                                <ant antfile="${elasticsearch.integ.antfile}" target="start-external-cluster-deb">, +                                    <property name="tests.jvm.argline" value="${tests.jvm.argline}"/>]