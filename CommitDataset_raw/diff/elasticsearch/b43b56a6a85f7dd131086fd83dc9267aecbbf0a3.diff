[+++ b/docs/reference/modules/scripting.asciidoc, +++ b/docs/reference/modules/scripting.asciidoc, +++ b/src/main/java/org/elasticsearch/script/groovy/GroovySandboxExpressionChecker.java, +            java.math.BigDecimal.class.getName(),, +++ b/docs/reference/modules/scripting.asciidoc, +++ b/src/main/java/org/elasticsearch/script/groovy/GroovySandboxExpressionChecker.java, +            java.math.BigDecimal.class.getName(),, +++ b/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java, +import org.codehaus.groovy.ast.ClassCodeExpressionTransformer;, +import org.codehaus.groovy.ast.ClassNode;, +import org.codehaus.groovy.ast.expr.ConstantExpression;, +import org.codehaus.groovy.ast.expr.Expression;, +import org.codehaus.groovy.classgen.GeneratorContext;, +import org.codehaus.groovy.control.CompilationFailedException;, +import org.codehaus.groovy.control.CompilePhase;, +import org.codehaus.groovy.control.SourceUnit;, +import org.codehaus.groovy.control.customizers.CompilationCustomizer;, +import java.math.BigDecimal;, +        // Add BigDecimal -> Double transformer, +        config.addCompilationCustomizers(new GroovyBigDecimalTransformer(CompilePhase.CONVERSION));, +    }, +    /**, +     * A compilation customizer that is used to transform a number like 1.23,, +     * which would normally be a BigDecimal, into a double value., +     */, +    private class GroovyBigDecimalTransformer extends CompilationCustomizer {, +, +        private GroovyBigDecimalTransformer(CompilePhase phase) {, +            super(phase);, +        }, +, +        @Override, +        public void call(final SourceUnit source, final GeneratorContext context, final ClassNode classNode) throws CompilationFailedException {, +            new BigDecimalExpressionTransformer(source).visitClass(classNode);, +        }, +    }, +, +    /**, +     * Groovy expression transformer that converts BigDecimals to doubles, +     */, +    private class BigDecimalExpressionTransformer extends ClassCodeExpressionTransformer {, +, +        private final SourceUnit source;, +, +        private BigDecimalExpressionTransformer(SourceUnit source) {, +            this.source = source;, +        }, +, +        @Override, +        protected SourceUnit getSourceUnit() {, +            return this.source;, +        }, +, +        @Override, +        public Expression transform(Expression expr) {, +            Expression newExpr = expr;, +            if (expr instanceof ConstantExpression) {, +                ConstantExpression constExpr = (ConstantExpression) expr;, +                Object val = constExpr.getValue();, +                if (val != null && val instanceof BigDecimal) {, +                    newExpr = new ConstantExpression(((BigDecimal) val).doubleValue());, +                }, +            }, +            return super.transform(newExpr);, +        }, +++ b/docs/reference/modules/scripting.asciidoc, +++ b/src/main/java/org/elasticsearch/script/groovy/GroovySandboxExpressionChecker.java, +            java.math.BigDecimal.class.getName(),, +++ b/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java, +import org.codehaus.groovy.ast.ClassCodeExpressionTransformer;, +import org.codehaus.groovy.ast.ClassNode;, +import org.codehaus.groovy.ast.expr.ConstantExpression;, +import org.codehaus.groovy.ast.expr.Expression;, +import org.codehaus.groovy.classgen.GeneratorContext;, +import org.codehaus.groovy.control.CompilationFailedException;, +import org.codehaus.groovy.control.CompilePhase;, +import org.codehaus.groovy.control.SourceUnit;, +import org.codehaus.groovy.control.customizers.CompilationCustomizer;, +import java.math.BigDecimal;, +        // Add BigDecimal -> Double transformer, +        config.addCompilationCustomizers(new GroovyBigDecimalTransformer(CompilePhase.CONVERSION));, +    }, +    /**, +     * A compilation customizer that is used to transform a number like 1.23,, +     * which would normally be a BigDecimal, into a double value., +     */, +    private class GroovyBigDecimalTransformer extends CompilationCustomizer {, +, +        private GroovyBigDecimalTransformer(CompilePhase phase) {, +            super(phase);, +        }, +, +        @Override, +        public void call(final SourceUnit source, final GeneratorContext context, final ClassNode classNode) throws CompilationFailedException {, +            new BigDecimalExpressionTransformer(source).visitClass(classNode);, +        }, +    }, +, +    /**, +     * Groovy expression transformer that converts BigDecimals to doubles]