[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.persistent.StartPersistentTaskAction;, +    public static final String ML_ENABLED_NODE_ATTR = "ml.enabled";, +            additionalSettings.put("node.attr." + ML_ENABLED_NODE_ATTR, "true");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.persistent.StartPersistentTaskAction;, +    public static final String ML_ENABLED_NODE_ATTR = "ml.enabled";, +            additionalSettings.put("node.attr." + ML_ENABLED_NODE_ATTR, "true");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        private final int maxNumberOfOpenJobs;, +            this.maxNumberOfOpenJobs = AutodetectProcessManager.MAX_RUNNING_JOBS_PER_NODE.get(settings);, +            return selectLeastLoadedMlNode(request.getJobId(), clusterState, maxConcurrentJobAllocations, maxNumberOfOpenJobs, logger);, +                Assignment assignment = selectLeastLoadedMlNode(request.getJobId(), clusterState, maxConcurrentJobAllocations,, +                        maxNumberOfOpenJobs, logger);, +                                              long maxNumberOfOpenJobs, Logger logger) {, +            String enabled = nodeAttributes.get(MachineLearning.ML_ENABLED_NODE_ATTR);, +            if (Boolean.valueOf(enabled) == false) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.persistent.StartPersistentTaskAction;, +    public static final String ML_ENABLED_NODE_ATTR = "ml.enabled";, +            additionalSettings.put("node.attr." + ML_ENABLED_NODE_ATTR, "true");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        private final int maxNumberOfOpenJobs;, +            this.maxNumberOfOpenJobs = AutodetectProcessManager.MAX_RUNNING_JOBS_PER_NODE.get(settings);, +            return selectLeastLoadedMlNode(request.getJobId(), clusterState, maxConcurrentJobAllocations, maxNumberOfOpenJobs, logger);, +                Assignment assignment = selectLeastLoadedMlNode(request.getJobId(), clusterState, maxConcurrentJobAllocations,, +                        maxNumberOfOpenJobs, logger);, +                                              long maxNumberOfOpenJobs, Logger logger) {, +            String enabled = nodeAttributes.get(MachineLearning.ML_ENABLED_NODE_ATTR);, +            if (Boolean.valueOf(enabled) == false) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +, +    // WARNING: This setting cannot be made DYNAMIC, because it is tied to several threadpools, +    // and a threadpool's size can't be changed at runtime., +    // See MachineLearning#getExecutorBuilders(...), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.persistent.StartPersistentTaskAction;, +    public static final String ML_ENABLED_NODE_ATTR = "ml.enabled";, +            additionalSettings.put("node.attr." + ML_ENABLED_NODE_ATTR, "true");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        private final int maxNumberOfOpenJobs;, +            this.maxNumberOfOpenJobs = AutodetectProcessManager.MAX_RUNNING_JOBS_PER_NODE.get(settings);, +            return selectLeastLoadedMlNode(request.getJobId(), clusterState, maxConcurrentJobAllocations, maxNumberOfOpenJobs, logger);, +                Assignment assignment = selectLeastLoadedMlNode(request.getJobId(), clusterState, maxConcurrentJobAllocations,, +                        maxNumberOfOpenJobs, logger);, +                                              long maxNumberOfOpenJobs, Logger logger) {, +            String enabled = nodeAttributes.get(MachineLearning.ML_ENABLED_NODE_ATTR);, +            if (Boolean.valueOf(enabled) == false) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +, +    // WARNING: This setting cannot be made DYNAMIC, because it is tied to several threadpools, +    // and a threadpool's size can't be changed at runtime., +    // See MachineLearning#getExecutorBuilders(...), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/notifications/Auditor.java, +                        LOGGER.debug(new ParameterizedMessage("Error writing {}", new Object[]{type}, e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.persistent.StartPersistentTaskAction;, +    public static final String ML_ENABLED_NODE_ATTR = "ml.enabled";, +            additionalSettings.put("node.attr." + ML_ENABLED_NODE_ATTR, "true");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        private final int maxNumberOfOpenJobs;, +            this.maxNumberOfOpenJobs = AutodetectProcessManager.MAX_RUNNING_JOBS_PER_NODE.get(settings);, +            return selectLeastLoadedMlNode(request.getJobId(), clusterState, maxConcurrentJobAllocations, maxNumberOfOpenJobs, logger);, +                Assignment assignment = selectLeastLoadedMlNode(request.getJobId(), clusterState, maxConcurrentJobAllocations,, +                        maxNumberOfOpenJobs, logger);, +                                              long maxNumberOfOpenJobs, Logger logger) {, +            String enabled = nodeAttributes.get(MachineLearning.ML_ENABLED_NODE_ATTR);, +            if (Boolean.valueOf(enabled) == false) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +, +    // WARNING: This setting cannot be made DYNAMIC, because it is tied to several threadpools, +    // and a threadpool's size can't be changed at runtime., +    // See MachineLearning#getExecutorBuilders(...), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/notifications/Auditor.java, +                        LOGGER.debug(new ParameterizedMessage("Error writing {}", new Object[]{type}, e));, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/action/OpenJobActionTests.java, +import org.elasticsearch.xpack.ml.MachineLearning;, +        nodeAttr.put(MachineLearning.ML_ENABLED_NODE_ATTR, "true");, +        Assignment result = OpenJobAction.selectLeastLoadedMlNode("job_id4", cs.build(), 2, 10, logger);, +        nodeAttr.put(MachineLearning.ML_ENABLED_NODE_ATTR, "true");, +        Assignment result = OpenJobAction.selectLeastLoadedMlNode("job_id2", cs.build(), 2, maxRunningJobsPerNode, logger);, +        Assignment result = OpenJobAction.selectLeastLoadedMlNode("job_id2", cs.build(), 2, 10, logger);, +        nodeAttr.put(MachineLearning.ML_ENABLED_NODE_ATTR, "true");, +        Assignment result = OpenJobAction.selectLeastLoadedMlNode("job_id6", cs, 2, 10, logger);, +        result = OpenJobAction.selectLeastLoadedMlNode("job_id7", cs, 2, 10, logger);, +        result = OpenJobAction.selectLeastLoadedMlNode("job_id7", cs, 2, 10, logger);, +        result = OpenJobAction.selectLeastLoadedMlNode("job_id7", cs, 2, 10, logger);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.persistent.StartPersistentTaskAction;, +    public static final String ML_ENABLED_NODE_ATTR = "ml.enabled";, +            additionalSettings.put("node.attr." + ML_ENABLED_NODE_ATTR, "true");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        private final int maxNumberOfOpenJobs;, +            this.maxNumberOfOpenJobs = AutodetectProcessManager.MAX_RUNNING_JOBS_PER_NODE.get(settings);, +            return selectLeastLoadedMlNode(request.getJobId(), clusterState, maxConcurrentJobAllocations, maxNumberOfOpenJobs, logger);, +                Assignment assignment = selectLeastLoadedMlNode(request.getJobId(), clusterState, maxConcurrentJobAllocations,, +                        maxNumberOfOpenJobs, logger);, +                                              long maxNumberOfOpenJobs, Logger logger) {, +            String enabled = nodeAttributes.get(MachineLearning.ML_ENABLED_NODE_ATTR);, +            if (Boolean.valueOf(enabled) == false) {]