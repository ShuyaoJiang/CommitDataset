[+++ b/dev-tools/build_release.py, +PLUGINS = [('bigdesk', 'lukas-vlcek/bigdesk'),, +           ('paramedic', 'karmi/elasticsearch-paramedic'),, +           ('segmentspy', 'polyfractal/elasticsearch-segmentspy'),, +           ('inquisitor', 'polyfractal/elasticsearch-inquisitor'),, +           ('head', 'mobz/elasticsearch-head')], +, +  return os.popen(' git rev-parse --verify HEAD 2>&1').read().strip(), +# Returns the hash of the given tag revision, +def get_tag_hash(tag):, +  return os.popen('git show-ref --tags %s --hash 2>&1' % (tag)).read().strip(), +# runs get fetch on the given remote, +def fetch(remote):, +  run('git fetch %s' % remote), +, +def download_and_verify(release, files, plugins=None, base_url='https://download.elasticsearch.org/elasticsearch/elasticsearch'):, +    smoke_test_release(release, downloaded_files, get_tag_hash('v%s' % release), plugins), +    print('  SUCCESS'), +def smoke_test_release(release, files, expected_hash, plugins):, +    es_plugin_path = os.path.join(tmp_dir, 'elasticsearch-%s' % (release),'bin/plugin'), +    plugin_names = {}, +    for name, plugin  in plugins:, +      print('  Install plugin [%s] from [%s]' % (name, plugin)), +      run('%s %s %s' % (es_plugin_path, '-install', plugin)), +      plugin_names[name] = True, +, +    if release.startswith("0.90."):, +      background = '' # 0.90.x starts in background automatically, +    else:, +      background = '-d', +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false %s', +         % (java_exe(), es_run_path, background)), +            raise RuntimeError('HEAD hash does not match expected [%s] but got [%s]' % (expected_hash, version['build_hash'])), +          print('  Verify if plugins are listed in _nodes'), +          conn.request('GET', '/_nodes?plugin=true&pretty=true'), +          res = conn.getresponse(), +          if res.status == 200:, +            nodes = json.loads(res.read().decode("utf-8"))['nodes'], +            for _, node in nodes.items():, +              node_plugins = node['plugins'], +              for node_plugin in node_plugins:, +                if not plugin_names.get(node_plugin['name'], False):, +                  raise RuntimeError('Unexpeced plugin %s' % node_plugin['name']), +                del plugin_names[node_plugin['name']], +            if plugin_names:, +              raise RuntimeError('Plugins not loaded %s' % list(plugin_names.keys())), +, +          else:, +           raise RuntimeError('Expected HTTP 200 but got %s' % res.status), +    release_version = find_release_version(src_branch), +    if not dry_run:, +      smoke_test_version = release_version, +      if not dry_run:, +      else:, +        print('  Running maven builds now run-tests [%s]' % run_tests), +      smoke_test_release(release_version, artifacts, get_head_hash(), PLUGINS), +  else:, +    print("Skipping build - smoketest only against version %s" % smoke_test_version), +    run_mvn('clean') # clean the env!, +    , +    fetch(remote), +    download_and_verify(smoke_test_version, artifact_names(smoke_test_version), plugins=PLUGINS), +++ b/dev-tools/build_release.py, +PLUGINS = [('bigdesk', 'lukas-vlcek/bigdesk'),, +           ('paramedic', 'karmi/elasticsearch-paramedic'),, +           ('segmentspy', 'polyfractal/elasticsearch-segmentspy'),, +           ('inquisitor', 'polyfractal/elasticsearch-inquisitor'),, +           ('head', 'mobz/elasticsearch-head')], +, +  return os.popen(' git rev-parse --verify HEAD 2>&1').read().strip(), +# Returns the hash of the given tag revision, +def get_tag_hash(tag):, +  return os.popen('git show-ref --tags %s --hash 2>&1' % (tag)).read().strip(), +# runs get fetch on the given remote, +def fetch(remote):, +  run('git fetch %s' % remote), +, +def download_and_verify(release, files, plugins=None, base_url='https://download.elasticsearch.org/elasticsearch/elasticsearch'):, +    smoke_test_release(release, downloaded_files, get_tag_hash('v%s' % release), plugins), +    print('  SUCCESS'), +def smoke_test_release(release, files, expected_hash, plugins):, +    es_plugin_path = os.path.join(tmp_dir, 'elasticsearch-%s' % (release),'bin/plugin'), +    plugin_names = {}, +    for name, plugin  in plugins:, +      print('  Install plugin [%s] from [%s]' % (name, plugin)), +      run('%s %s %s' % (es_plugin_path, '-install', plugin)), +      plugin_names[name] = True, +, +    if release.startswith("0.90."):, +      background = '' # 0.90.x starts in background automatically, +    else:, +      background = '-d', +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false %s', +         % (java_exe(), es_run_path, background)), +            raise RuntimeError('HEAD hash does not match expected [%s] but got [%s]' % (expected_hash, version['build_hash'])), +          print('  Verify if plugins are listed in _nodes'), +          conn.request('GET', '/_nodes?plugin=true&pretty=true'), +          res = conn.getresponse(), +          if res.status == 200:, +            nodes = json.loads(res.read().decode("utf-8"))['nodes']]