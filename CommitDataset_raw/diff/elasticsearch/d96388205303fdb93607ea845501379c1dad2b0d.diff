[+++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +        Setting.timeSetting("index.translog.retention.age", TimeValue.timeValueHours(12), TimeValue.timeValueMillis(-1), Property.Dynamic,, +        Setting.byteSizeSetting("index.translog.retention.size", new ByteSizeValue(512, ByteSizeUnit.MB), Property.Dynamic,, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +        Setting.timeSetting("index.translog.retention.age", TimeValue.timeValueHours(12), TimeValue.timeValueMillis(-1), Property.Dynamic,, +        Setting.byteSizeSetting("index.translog.retention.size", new ByteSizeValue(512, ByteSizeUnit.MB), Property.Dynamic,, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Rolls the translog generation and cleans unneeded., +     */, +    public abstract void rollTranslogGeneration() throws EngineException;, +, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +        Setting.timeSetting("index.translog.retention.age", TimeValue.timeValueHours(12), TimeValue.timeValueMillis(-1), Property.Dynamic,, +        Setting.byteSizeSetting("index.translog.retention.size", new ByteSizeValue(512, ByteSizeUnit.MB), Property.Dynamic,, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Rolls the translog generation and cleans unneeded., +     */, +    public abstract void rollTranslogGeneration() throws EngineException;, +, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            if (syncId != null && translog.uncommittedOperations() == 0 && indexWriter.hasUncommittedChanges()) {, +    @Override, +    public void rollTranslogGeneration() throws EngineException {, +        try (ReleasableLock ignored = readLock.acquire()) {, +            ensureOpen();, +            translog.rollGeneration();, +            translog.trimUnreferencedReaders();, +        } catch (AlreadyClosedException e) {, +            failOnTragicEvent(e);, +            throw e;, +        } catch (Exception e) {, +            try {, +                failEngine("translog trimming failed", e);, +            } catch (Exception inner) {, +                e.addSuppressed(inner);, +            }, +            throw new EngineException(shardId, "failed to roll translog", e);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +        Setting.timeSetting("index.translog.retention.age", TimeValue.timeValueHours(12), TimeValue.timeValueMillis(-1), Property.Dynamic,, +        Setting.byteSizeSetting("index.translog.retention.size", new ByteSizeValue(512, ByteSizeUnit.MB), Property.Dynamic,, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Rolls the translog generation and cleans unneeded., +     */, +    public abstract void rollTranslogGeneration() throws EngineException;, +, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            if (syncId != null && translog.uncommittedOperations() == 0 && indexWriter.hasUncommittedChanges()) {, +    @Override, +    public void rollTranslogGeneration() throws EngineException {, +        try (ReleasableLock ignored = readLock.acquire()) {, +            ensureOpen();, +            translog.rollGeneration();, +            translog.trimUnreferencedReaders();, +        } catch (AlreadyClosedException e) {, +            failOnTragicEvent(e);, +            throw e;, +        } catch (Exception e) {, +            try {, +                failEngine("translog trimming failed", e);, +            } catch (Exception inner) {, +                e.addSuppressed(inner);, +            }, +            throw new EngineException(shardId, "failed to roll translog", e);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +     * Rolls the tranlog generation and cleans unneeded., +    private void rollTranslogGeneration() {, +        engine.rollTranslogGeneration();, +                        protected void doRun() throws Exception {, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +        Setting.timeSetting("index.translog.retention.age", TimeValue.timeValueHours(12), TimeValue.timeValueMillis(-1), Property.Dynamic,, +        Setting.byteSizeSetting("index.translog.retention.size", new ByteSizeValue(512, ByteSizeUnit.MB), Property.Dynamic,, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Rolls the translog generation and cleans unneeded., +     */, +    public abstract void rollTranslogGeneration() throws EngineException;, +, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            if (syncId != null && translog.uncommittedOperations() == 0 && indexWriter.hasUncommittedChanges()) {, +    @Override, +    public void rollTranslogGeneration() throws EngineException {, +        try (ReleasableLock ignored = readLock.acquire()) {, +            ensureOpen();, +            translog.rollGeneration();, +            translog.trimUnreferencedReaders();, +        } catch (AlreadyClosedException e) {, +            failOnTragicEvent(e);]