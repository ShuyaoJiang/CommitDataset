[+++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +    public static final String LATEST_DOC_VALUES_FORMAT = "Lucene50";, +    public static final String LATEST_CODEC = "Lucene53";, +++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +    public static final String LATEST_DOC_VALUES_FORMAT = "Lucene50";, +    public static final String LATEST_CODEC = "Lucene53";, +++ b/core/src/main/java/org/elasticsearch/index/codec/CodecService.java, +import org.apache.lucene.codecs.lucene53.Lucene53Codec;, +            codecs.put(DEFAULT_CODEC, new Lucene53Codec());, +            codecs.put(BEST_COMPRESSION_CODEC, new Lucene53Codec(Mode.BEST_COMPRESSION));, +++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +    public static final String LATEST_DOC_VALUES_FORMAT = "Lucene50";, +    public static final String LATEST_CODEC = "Lucene53";, +++ b/core/src/main/java/org/elasticsearch/index/codec/CodecService.java, +import org.apache.lucene.codecs.lucene53.Lucene53Codec;, +            codecs.put(DEFAULT_CODEC, new Lucene53Codec());, +            codecs.put(BEST_COMPRESSION_CODEC, new Lucene53Codec(Mode.BEST_COMPRESSION));, +++ b/core/src/main/java/org/elasticsearch/index/codec/PerFieldMappingPostingFormatCodec.java, +import org.apache.lucene.codecs.lucene53.Lucene53Codec;, +public class PerFieldMappingPostingFormatCodec extends Lucene53Codec {, +++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +    public static final String LATEST_DOC_VALUES_FORMAT = "Lucene50";, +    public static final String LATEST_CODEC = "Lucene53";, +++ b/core/src/main/java/org/elasticsearch/index/codec/CodecService.java, +import org.apache.lucene.codecs.lucene53.Lucene53Codec;, +            codecs.put(DEFAULT_CODEC, new Lucene53Codec());, +            codecs.put(BEST_COMPRESSION_CODEC, new Lucene53Codec(Mode.BEST_COMPRESSION));, +++ b/core/src/main/java/org/elasticsearch/index/codec/PerFieldMappingPostingFormatCodec.java, +import org.apache.lucene.codecs.lucene53.Lucene53Codec;, +public class PerFieldMappingPostingFormatCodec extends Lucene53Codec {, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java, +        if (minimumShouldMatch != null && query instanceof BooleanQuery) {, +            // treat special case for one term query and more than one field, +            // we need to wrap this in additional BooleanQuery so minimum_should_match is applied correctly, +            query = Queries.applyMinimumShouldMatch(booleanQuery, minimumShouldMatch);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +    public static final String LATEST_DOC_VALUES_FORMAT = "Lucene50";, +    public static final String LATEST_CODEC = "Lucene53";, +++ b/core/src/main/java/org/elasticsearch/index/codec/CodecService.java, +import org.apache.lucene.codecs.lucene53.Lucene53Codec;, +            codecs.put(DEFAULT_CODEC, new Lucene53Codec());, +            codecs.put(BEST_COMPRESSION_CODEC, new Lucene53Codec(Mode.BEST_COMPRESSION));, +++ b/core/src/main/java/org/elasticsearch/index/codec/PerFieldMappingPostingFormatCodec.java, +import org.apache.lucene.codecs.lucene53.Lucene53Codec;, +public class PerFieldMappingPostingFormatCodec extends Lucene53Codec {, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java, +        if (minimumShouldMatch != null && query instanceof BooleanQuery) {, +            // treat special case for one term query and more than one field, +            // we need to wrap this in additional BooleanQuery so minimum_should_match is applied correctly, +            query = Queries.applyMinimumShouldMatch(booleanQuery, minimumShouldMatch);, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +grant codeBase "${codebase.lucene-core-5.4.0-snapshot-1708254.jar}" {, +++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +    public static final String LATEST_DOC_VALUES_FORMAT = "Lucene50";, +    public static final String LATEST_CODEC = "Lucene53";, +++ b/core/src/main/java/org/elasticsearch/index/codec/CodecService.java, +import org.apache.lucene.codecs.lucene53.Lucene53Codec;, +            codecs.put(DEFAULT_CODEC, new Lucene53Codec());, +            codecs.put(BEST_COMPRESSION_CODEC, new Lucene53Codec(Mode.BEST_COMPRESSION));, +++ b/core/src/main/java/org/elasticsearch/index/codec/PerFieldMappingPostingFormatCodec.java, +import org.apache.lucene.codecs.lucene53.Lucene53Codec;, +public class PerFieldMappingPostingFormatCodec extends Lucene53Codec {, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java, +        if (minimumShouldMatch != null && query instanceof BooleanQuery) {, +            // treat special case for one term query and more than one field, +            // we need to wrap this in additional BooleanQuery so minimum_should_match is applied correctly, +            query = Queries.applyMinimumShouldMatch(booleanQuery, minimumShouldMatch);, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +grant codeBase "${codebase.lucene-core-5.4.0-snapshot-1708254.jar}" {, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/test-framework.policy, +grant codeBase "${codebase.lucene-test-framework-5.4.0-snapshot-1708254.jar}" {, +++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +    public static final String LATEST_DOC_VALUES_FORMAT = "Lucene50";, +    public static final String LATEST_CODEC = "Lucene53";, +++ b/core/src/main/java/org/elasticsearch/index/codec/CodecService.java, +import org.apache.lucene.codecs.lucene53.Lucene53Codec;, +            codecs.put(DEFAULT_CODEC, new Lucene53Codec());, +            codecs.put(BEST_COMPRESSION_CODEC, new Lucene53Codec(Mode.BEST_COMPRESSION));, +++ b/core/src/main/java/org/elasticsearch/index/codec/PerFieldMappingPostingFormatCodec.java, +import org.apache.lucene.codecs.lucene53.Lucene53Codec;, +public class PerFieldMappingPostingFormatCodec extends Lucene53Codec {, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java, +        if (minimumShouldMatch != null && query instanceof BooleanQuery) {, +            // treat special case for one term query and more than one field, +            // we need to wrap this in additional BooleanQuery so minimum_should_match is applied correctly, +            query = Queries.applyMinimumShouldMatch(booleanQuery, minimumShouldMatch);, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +grant codeBase "${codebase.lucene-core-5.4.0-snapshot-1708254.jar}" {, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/test-framework.policy, +grant codeBase "${codebase.lucene-test-framework-5.4.0-snapshot-1708254.jar}" {, +++ b/core/src/test/java/org/elasticsearch/common/cache/CacheTests.java, +import java.lang.management.ManagementFactory;, +import java.lang.management.ThreadMXBean;, +import java.util.concurrent.*;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.stream.Collectors;, +    public void testDependentKeyDeadlock() throws InterruptedException {, +        class Key {, +            private final int key;, +]