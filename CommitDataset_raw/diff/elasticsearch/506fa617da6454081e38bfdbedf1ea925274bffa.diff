[+++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +++ b/modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionPlugin.java, +import org.apache.lucene.expressions.js.JavascriptCompiler;, +import org.elasticsearch.SpecialPermission;, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +import java.text.ParseException;, +, +    // lucene expressions has crazy checks in its clinit for the functions map, +    // it violates rules of classloaders to detect accessibility, +    // TODO: clean that up, +    static {, +        SecurityManager sm = System.getSecurityManager();, +        if (sm != null) {, +            sm.checkPermission(new SpecialPermission());, +        }, +        AccessController.doPrivileged(new PrivilegedAction<Void>() {, +            @Override, +            public Void run() {, +                try {, +                    JavascriptCompiler.compile("0");, +                } catch (ParseException e) {, +                    throw new RuntimeException(e);, +                }, +                return null;, +            }, +        });, +    }, +, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +++ b/modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionPlugin.java, +import org.apache.lucene.expressions.js.JavascriptCompiler;, +import org.elasticsearch.SpecialPermission;, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +import java.text.ParseException;, +, +    // lucene expressions has crazy checks in its clinit for the functions map, +    // it violates rules of classloaders to detect accessibility, +    // TODO: clean that up, +    static {, +        SecurityManager sm = System.getSecurityManager();, +        if (sm != null) {, +            sm.checkPermission(new SpecialPermission());, +        }, +        AccessController.doPrivileged(new PrivilegedAction<Void>() {, +            @Override, +            public Void run() {, +                try {, +                    JavascriptCompiler.compile("0");, +                } catch (ParseException e) {, +                    throw new RuntimeException(e);, +                }, +                return null;, +            }, +        });, +    }, +, +++ b/modules/lang-expression/src/main/plugin-metadata/plugin-security.policy, +  // needed because of security problems in JavascriptCompiler, +  permission java.lang.RuntimePermission "getClassLoader";, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +++ b/modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionPlugin.java, +import org.apache.lucene.expressions.js.JavascriptCompiler;, +import org.elasticsearch.SpecialPermission;, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +import java.text.ParseException;, +, +    // lucene expressions has crazy checks in its clinit for the functions map, +    // it violates rules of classloaders to detect accessibility, +    // TODO: clean that up, +    static {, +        SecurityManager sm = System.getSecurityManager();, +        if (sm != null) {, +            sm.checkPermission(new SpecialPermission());, +        }, +        AccessController.doPrivileged(new PrivilegedAction<Void>() {, +            @Override, +            public Void run() {, +                try {, +                    JavascriptCompiler.compile("0");, +                } catch (ParseException e) {, +                    throw new RuntimeException(e);, +                }, +                return null;, +            }, +        });, +    }, +, +++ b/modules/lang-expression/src/main/plugin-metadata/plugin-security.policy, +  // needed because of security problems in JavascriptCompiler, +  permission java.lang.RuntimePermission "getClassLoader";, +++ b/modules/lang-groovy/src/main/java/org/elasticsearch/script/groovy/GroovyScriptEngineService.java, +            return AccessController.doPrivileged(new PrivilegedAction<Object>() {, +                public Class<?> run() {, +                    GroovyCodeSource gcs = new GroovyCodeSource(script, fake, BootstrapInfo.UNTRUSTED_CODEBASE);, +                    gcs.setCachable(false);, +                    // TODO: we could be more complicated and paranoid, and move this to separate block, to]