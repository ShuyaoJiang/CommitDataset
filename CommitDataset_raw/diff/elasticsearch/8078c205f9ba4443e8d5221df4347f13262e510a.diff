[+++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +++ b/core/src/test/java/org/elasticsearch/aliases/IndexAliasesIT.java, +        assertAcked(prepareCreate("my-index").addMapping("my-type", "_timestamp", "enabled=true"));, +        assertAcked(admin().indices().prepareAliases().addAlias("my-index", "filter1", rangeQuery("_timestamp").from("now-1d").to("now")));, +        assertAcked(admin().indices().prepareAliases().addAlias("my-index", "filter2", rangeQuery("_timestamp").from("now-1d").to("now")));, +            client().prepareIndex("my-index", "my-type").setCreate(true).setSource("{}").get();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +++ b/core/src/test/java/org/elasticsearch/aliases/IndexAliasesIT.java, +        assertAcked(prepareCreate("my-index").addMapping("my-type", "_timestamp", "enabled=true"));, +        assertAcked(admin().indices().prepareAliases().addAlias("my-index", "filter1", rangeQuery("_timestamp").from("now-1d").to("now")));, +        assertAcked(admin().indices().prepareAliases().addAlias("my-index", "filter2", rangeQuery("_timestamp").from("now-1d").to("now")));, +            client().prepareIndex("my-index", "my-type").setCreate(true).setSource("{}").get();, +++ b/core/src/test/java/org/elasticsearch/cluster/SpecificMasterNodesIT.java, +        assertAcked(client().admin().indices().preparePutMapping("test").setType("_default_").setSource("_timestamp", "enabled=true"));, +        assertThat(defaultMapping.getSourceAsMap().get("_timestamp"), notNullValue());, +        assertAcked(client().admin().indices().preparePutMapping("test").setType("_default_").setSource("_timestamp", "enabled=true"));, +        assertThat(type1Mapping.getSourceAsMap().get("_timestamp"), notNullValue());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +++ b/core/src/test/java/org/elasticsearch/aliases/IndexAliasesIT.java, +        assertAcked(prepareCreate("my-index").addMapping("my-type", "_timestamp", "enabled=true"));, +        assertAcked(admin().indices().prepareAliases().addAlias("my-index", "filter1", rangeQuery("_timestamp").from("now-1d").to("now")));, +        assertAcked(admin().indices().prepareAliases().addAlias("my-index", "filter2", rangeQuery("_timestamp").from("now-1d").to("now")));, +            client().prepareIndex("my-index", "my-type").setCreate(true).setSource("{}").get();, +++ b/core/src/test/java/org/elasticsearch/cluster/SpecificMasterNodesIT.java, +        assertAcked(client().admin().indices().preparePutMapping("test").setType("_default_").setSource("_timestamp", "enabled=true"));, +        assertThat(defaultMapping.getSourceAsMap().get("_timestamp"), notNullValue());, +        assertAcked(client().admin().indices().preparePutMapping("test").setType("_default_").setSource("_timestamp", "enabled=true"));, +        assertThat(type1Mapping.getSourceAsMap().get("_timestamp"), notNullValue());, +++ b/core/src/test/java/org/elasticsearch/get/GetActionIT.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.test.InternalSettingsPlugin;, +import java.util.Collection;, +import java.util.Map;, +import static org.hamcrest.Matchers.is;, +                .addMapping("my-type1", "_timestamp", "enabled=true", "_ttl", "enabled=true", "_parent", "type=parent"), +        assertThat(getResponse.getField("_timestamp").isMetadataField(), equalTo(true));, +        assertThat(getResponse.getField("_timestamp").getValue().toString(), equalTo("205097"));, +        assertThat(getResponse.getField("_ttl").isMetadataField(), equalTo(true));, +        // TODO: _ttl should return the original value, but it does not work today because, +        // it would use now() instead of the value of _timestamp to rebase, +        // assertThat(getResponse.getField("_ttl").getValue().toString(), equalTo("10000000205097"));, +        assertThat(getResponse.getField("_timestamp").isMetadataField(), equalTo(true));, +        assertThat(getResponse.getField("_timestamp").getValue().toString(), equalTo("205097"));, +        assertThat(getResponse.getField("_ttl").isMetadataField(), equalTo(true));, +        // TODO: _ttl should return the original value, but it does not work today because, +        // it would use now() instead of the value of _timestamp to rebase, +        //assertThat(getResponse.getField("_ttl").getValue().toString(), equalTo("10000000000000"));, +                "      \"_ttl\": {\n" +, +                "        \"enabled\": true\n" +, +                "      }\n" +, +                "      },\n" +, +                "      \"_ttl\": {\n" +, +                "        \"enabled\": true\n" +, +        String[] fieldsList = {"_ttl", "_parent"};, +            "  },\n" +, +            "  \"mappings\": {\n" +, +            "    \"parentdoc\": {},\n" +, +            "    \"doc\": {\n" +, +            "      \"_timestamp\": {\n" +, +            "        \"enabled\": true\n" +, +            "      }\n" +, +            "    }\n" +, +        String[] fieldsList = {"_timestamp", "_routing"};, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +++ b/core/src/test/java/org/elasticsearch/aliases/IndexAliasesIT.java, +        assertAcked(prepareCreate("my-index").addMapping("my-type", "_timestamp", "enabled=true"));, +        assertAcked(admin().indices().prepareAliases().addAlias("my-index", "filter1", rangeQuery("_timestamp").from("now-1d").to("now")));, +        assertAcked(admin().indices().prepareAliases().addAlias("my-index", "filter2", rangeQuery("_timestamp").from("now-1d").to("now")));, +            client().prepareIndex("my-index", "my-type").setCreate(true).setSource("{}").get();, +++ b/core/src/test/java/org/elasticsearch/cluster/SpecificMasterNodesIT.java, +        assertAcked(client().admin().indices().preparePutMapping("test").setType("_default_").setSource("_timestamp", "enabled=true"));, +        assertThat(defaultMapping.getSourceAsMap().get("_timestamp"), notNullValue());, +        assertAcked(client().admin().indices().preparePutMapping("test").setType("_default_").setSource("_timestamp", "enabled=true"));, +        assertThat(type1Mapping.getSourceAsMap().get("_timestamp"), notNullValue());, +++ b/core/src/test/java/org/elasticsearch/get/GetActionIT.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.test.InternalSettingsPlugin;, +import java.util.Collection;, +import java.util.Map;, +import static org.hamcrest.Matchers.is;, +                .addMapping("my-type1", "_timestamp", "enabled=true", "_ttl", "enabled=true", "_parent", "type=parent"), +        assertThat(getResponse.getField("_timestamp").isMetadataField(), equalTo(true));, +        assertThat(getResponse.getField("_timestamp").getValue().toString(), equalTo("205097"));, +        assertThat(getResponse.getField("_ttl").isMetadataField(), equalTo(true));, +        // TODO: _ttl should return the original value, but it does not work today because, +        // it would use now() instead of the value of _timestamp to rebase, +        // assertThat(getResponse.getField("_ttl").getValue().toString(), equalTo("10000000205097"));, +        assertThat(getResponse.getField("_timestamp").isMetadataField(), equalTo(true));, +        assertThat(getResponse.getField("_timestamp").getValue().toString(), equalTo("205097"));]