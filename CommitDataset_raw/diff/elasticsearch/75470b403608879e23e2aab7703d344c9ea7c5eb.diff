[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +import org.elasticsearch.xpack.ml.utils.JobStateObserver;, +        private final JobStateObserver observer;, +                               TransportCancelTasksAction cancelTasksAction) {, +            this.observer = new JobStateObserver(threadPool, clusterService);, +                    threadPool.executor(ThreadPool.Names.GENERIC).execute(new AbstractRunnable() {, +                        @Override, +                        public void onFailure(Exception e) {, +                            listener.onFailure(e);, +                        }, +, +                        @Override, +                        protected void doRun() throws Exception {, +                                            observer.waitForState(request.getJobId(), request.getTimeout(), JobState.CLOSED, e -> {, +                                                if (e == null) {, +                                                    listener.onResponse(new CloseJobAction.Response(true));, +                                                } else {, +                                                    listener.onFailure(e);, +                                                }, +                                            });, +            });, +        }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +import org.elasticsearch.xpack.ml.utils.JobStateObserver;, +        private final JobStateObserver observer;, +                               TransportCancelTasksAction cancelTasksAction) {, +            this.observer = new JobStateObserver(threadPool, clusterService);, +                    threadPool.executor(ThreadPool.Names.GENERIC).execute(new AbstractRunnable() {, +                        @Override, +                        public void onFailure(Exception e) {, +                            listener.onFailure(e);, +                        }, +, +                        @Override, +                        protected void doRun() throws Exception {, +                                            observer.waitForState(request.getJobId(), request.getTimeout(), JobState.CLOSED, e -> {, +                                                if (e == null) {, +                                                    listener.onResponse(new CloseJobAction.Response(true));, +                                                } else {, +                                                    listener.onFailure(e);, +                                                }, +                                            });, +            });, +        }, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/BasicDistributedJobsIT.java, +        logger.info("stop the only running ml node");, +        logger.info("start ml node");, +        cleanupWorkaround(3);]