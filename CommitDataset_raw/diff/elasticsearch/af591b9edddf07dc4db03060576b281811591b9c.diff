[+++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +import org.elasticsearch.xpack.sql.jdbc.jdbc.JdbcConnection;, +import java.util.TimeZone;, +, +            // make sure ES uses UTC (otherwise JDBC driver picks up the JVM timezone per spec/convention), +            ((JdbcConnection) es).setTimeZone(TimeZone.getTimeZone("UTC"));, +, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +import org.elasticsearch.xpack.sql.jdbc.jdbc.JdbcConnection;, +import java.util.TimeZone;, +, +            // make sure ES uses UTC (otherwise JDBC driver picks up the JVM timezone per spec/convention), +            ((JdbcConnection) es).setTimeZone(TimeZone.getTimeZone("UTC"));, +, +++ b/sql/cli/src/main/java/org/elasticsearch/xpack/sql/cli/CliHttpClient.java, +import java.time.Instant;, +    private final CliConfiguration cfg;, +        this.cfg = cfg;, +        this.http = new HttpClient(cfg);, +        QueryInitRequest request = new QueryInitRequest(query, fetchSize, TimeZone.getTimeZone("UTC"), timeout());, +        QueryPageRequest request = new QueryPageRequest(cursor, timeout());, +    private TimeoutInfo timeout() {, +        long clientTime = Instant.now().toEpochMilli();, +        return new TimeoutInfo(clientTime, cfg.queryTimeout(), cfg.pageTimeout());, +    }, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +import org.elasticsearch.xpack.sql.jdbc.jdbc.JdbcConnection;, +import java.util.TimeZone;, +, +            // make sure ES uses UTC (otherwise JDBC driver picks up the JVM timezone per spec/convention), +            ((JdbcConnection) es).setTimeZone(TimeZone.getTimeZone("UTC"));, +, +++ b/sql/cli/src/main/java/org/elasticsearch/xpack/sql/cli/CliHttpClient.java, +import java.time.Instant;, +    private final CliConfiguration cfg;, +        this.cfg = cfg;, +        this.http = new HttpClient(cfg);, +        QueryInitRequest request = new QueryInitRequest(query, fetchSize, TimeZone.getTimeZone("UTC"), timeout());, +        QueryPageRequest request = new QueryPageRequest(cursor, timeout());, +    private TimeoutInfo timeout() {, +        long clientTime = Instant.now().toEpochMilli();, +        return new TimeoutInfo(clientTime, cfg.queryTimeout(), cfg.pageTimeout());, +    }, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConfiguration.java, +    private TimeZone timeZone;, +    public void timeZone(TimeZone tz) {, +        timeZone = tz;, +    }, +, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +import org.elasticsearch.xpack.sql.jdbc.jdbc.JdbcConnection;, +import java.util.TimeZone;, +, +            // make sure ES uses UTC (otherwise JDBC driver picks up the JVM timezone per spec/convention), +            ((JdbcConnection) es).setTimeZone(TimeZone.getTimeZone("UTC"));, +, +++ b/sql/cli/src/main/java/org/elasticsearch/xpack/sql/cli/CliHttpClient.java, +import java.time.Instant;, +    private final CliConfiguration cfg;, +        this.cfg = cfg;, +        this.http = new HttpClient(cfg);, +        QueryInitRequest request = new QueryInitRequest(query, fetchSize, TimeZone.getTimeZone("UTC"), timeout());, +        QueryPageRequest request = new QueryPageRequest(cursor, timeout());, +    private TimeoutInfo timeout() {, +        long clientTime = Instant.now().toEpochMilli();, +        return new TimeoutInfo(clientTime, cfg.queryTimeout(), cfg.pageTimeout());, +    }, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConfiguration.java, +    private TimeZone timeZone;, +    public void timeZone(TimeZone tz) {, +        timeZone = tz;, +    }, +, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConnection.java, +import java.util.TimeZone;, +        userName = connectionInfo.authUser();, +, +    public void setTimeZone(TimeZone tz) {, +        cfg.timeZone(tz);, +    }, +, +++ b/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/CsvSpecTestCase.java, +import org.elasticsearch.xpack.sql.jdbc.jdbc.JdbcConnection;, +import java.util.TimeZone;, +, +            // make sure ES uses UTC (otherwise JDBC driver picks up the JVM timezone per spec/convention), +            ((JdbcConnection) es).setTimeZone(TimeZone.getTimeZone("UTC"));, +, +++ b/sql/cli/src/main/java/org/elasticsearch/xpack/sql/cli/CliHttpClient.java, +import java.time.Instant;, +    private final CliConfiguration cfg;, +        this.cfg = cfg;, +        this.http = new HttpClient(cfg);, +        QueryInitRequest request = new QueryInitRequest(query, fetchSize, TimeZone.getTimeZone("UTC"), timeout());, +        QueryPageRequest request = new QueryPageRequest(cursor, timeout());, +    private TimeoutInfo timeout() {, +        long clientTime = Instant.now().toEpochMilli();, +        return new TimeoutInfo(clientTime, cfg.queryTimeout(), cfg.pageTimeout());, +    }, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConfiguration.java]