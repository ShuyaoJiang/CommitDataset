[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningTemplateRegistry.java, +import org.elasticsearch.ElasticsearchException;, +            listener.accept(false,, +                    new ElasticsearchException("Error creating the template mappings for the notification message indices", e));, +            listener.accept(false, new ElasticsearchException("Error creating template mappings for the " +, +                                        AnomalyDetectorsIndex.jobStateIndexName() + " indices", e));, +            listener.accept(false, new ElasticsearchException("Error creating template mappings for the ", +                    + AnomalyDetectorsIndex.jobResultsIndexPrefix() + " index", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningTemplateRegistry.java, +import org.elasticsearch.ElasticsearchException;, +            listener.accept(false,, +                    new ElasticsearchException("Error creating the template mappings for the notification message indices", e));, +            listener.accept(false, new ElasticsearchException("Error creating template mappings for the " +, +                                        AnomalyDetectorsIndex.jobStateIndexName() + " indices", e));, +            listener.accept(false, new ElasticsearchException("Error creating template mappings for the ", +                    + AnomalyDetectorsIndex.jobResultsIndexPrefix() + " index", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutFilterAction.java, +import org.elasticsearch.action.bulk.BulkRequest;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.action.bulk.TransportBulkAction;, +, +        private final TransportBulkAction transportBulkAction;, +                               TransportBulkAction transportBulkAction) {, +            this.transportBulkAction = transportBulkAction;, +            BulkRequest bulkRequest = new BulkRequest().add(indexRequest);, +, +            transportBulkAction.execute(bulkRequest, new ActionListener<BulkResponse>() {, +                public void onResponse(BulkResponse indexResponse) {, +                    listener.onFailure(new ResourceNotFoundException("Could not create filter with ID [" + filterId + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningTemplateRegistry.java, +import org.elasticsearch.ElasticsearchException;, +            listener.accept(false,, +                    new ElasticsearchException("Error creating the template mappings for the notification message indices", e));, +            listener.accept(false, new ElasticsearchException("Error creating template mappings for the " +, +                                        AnomalyDetectorsIndex.jobStateIndexName() + " indices", e));, +            listener.accept(false, new ElasticsearchException("Error creating template mappings for the ", +                    + AnomalyDetectorsIndex.jobResultsIndexPrefix() + " index", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutFilterAction.java, +import org.elasticsearch.action.bulk.BulkRequest;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.action.bulk.TransportBulkAction;, +, +        private final TransportBulkAction transportBulkAction;, +                               TransportBulkAction transportBulkAction) {, +            this.transportBulkAction = transportBulkAction;, +            BulkRequest bulkRequest = new BulkRequest().add(indexRequest);, +, +            transportBulkAction.execute(bulkRequest, new ActionListener<BulkResponse>() {, +                public void onResponse(BulkResponse indexResponse) {, +                    listener.onFailure(new ResourceNotFoundException("Could not create filter with ID [" + filterId + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +                            // we could return 'success && r.isAcknowledged()' instead of 'true', but that makes, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningTemplateRegistry.java, +import org.elasticsearch.ElasticsearchException;, +            listener.accept(false,, +                    new ElasticsearchException("Error creating the template mappings for the notification message indices", e));, +            listener.accept(false, new ElasticsearchException("Error creating template mappings for the " +, +                                        AnomalyDetectorsIndex.jobStateIndexName() + " indices", e));, +            listener.accept(false, new ElasticsearchException("Error creating template mappings for the ", +                    + AnomalyDetectorsIndex.jobResultsIndexPrefix() + " index", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutFilterAction.java, +import org.elasticsearch.action.bulk.BulkRequest;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.action.bulk.TransportBulkAction;, +, +        private final TransportBulkAction transportBulkAction;, +                               TransportBulkAction transportBulkAction) {, +            this.transportBulkAction = transportBulkAction;, +            BulkRequest bulkRequest = new BulkRequest().add(indexRequest);, +, +            transportBulkAction.execute(bulkRequest, new ActionListener<BulkResponse>() {, +                public void onResponse(BulkResponse indexResponse) {, +                    listener.onFailure(new ResourceNotFoundException("Could not create filter with ID [" + filterId + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +                            // we could return 'success && r.isAcknowledged()' instead of 'true', but that makes, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobProviderTests.java, +        clientBuilder.createIndexRequest(captor);, +        clientBuilder.createIndexRequest(captor);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningTemplateRegistry.java, +import org.elasticsearch.ElasticsearchException;, +            listener.accept(false,, +                    new ElasticsearchException("Error creating the template mappings for the notification message indices", e));, +            listener.accept(false, new ElasticsearchException("Error creating template mappings for the " +, +                                        AnomalyDetectorsIndex.jobStateIndexName() + " indices", e));, +            listener.accept(false, new ElasticsearchException("Error creating template mappings for the ", +                    + AnomalyDetectorsIndex.jobResultsIndexPrefix() + " index", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutFilterAction.java, +import org.elasticsearch.action.bulk.BulkRequest;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.action.bulk.TransportBulkAction;, +, +        private final TransportBulkAction transportBulkAction;, +                               TransportBulkAction transportBulkAction) {, +            this.transportBulkAction = transportBulkAction;, +            BulkRequest bulkRequest = new BulkRequest().add(indexRequest);, +, +            transportBulkAction.execute(bulkRequest, new ActionListener<BulkResponse>() {, +                public void onResponse(BulkResponse indexResponse) {, +                    listener.onFailure(new ResourceNotFoundException("Could not create filter with ID [" + filterId + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java]