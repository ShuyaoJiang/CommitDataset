[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/fs/FsGateway.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.DynamicExecutors;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import java.util.concurrent.ExecutorService;, +    private final ExecutorService concurrentStreamPool;, +, +, +        int concurrentStreams = componentSettings.getAsInt("concurrent_streams", 5);, +        this.concurrentStreamPool = DynamicExecutors.newScalingThreadPool(1, concurrentStreams, TimeValue.timeValueSeconds(5).millis(), EsExecutors.daemonThreadFactory(settings, "[s3_stream]"));, +, +        initialize(new FsBlobStore(componentSettings, concurrentStreamPool, gatewayFile), clusterName, null);, +, +    @Override protected void doClose() throws ElasticSearchException {, +        super.doClose();, +        concurrentStreamPool.shutdown();, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/fs/FsGateway.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.DynamicExecutors;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import java.util.concurrent.ExecutorService;, +    private final ExecutorService concurrentStreamPool;, +, +, +        int concurrentStreams = componentSettings.getAsInt("concurrent_streams", 5);, +        this.concurrentStreamPool = DynamicExecutors.newScalingThreadPool(1, concurrentStreams, TimeValue.timeValueSeconds(5).millis(), EsExecutors.daemonThreadFactory(settings, "[s3_stream]"));, +, +        initialize(new FsBlobStore(componentSettings, concurrentStreamPool, gatewayFile), clusterName, null);, +, +    @Override protected void doClose() throws ElasticSearchException {, +        super.doClose();, +        concurrentStreamPool.shutdown();, +    }, +++ b/plugins/cloud/aws/src/main/java/org/elasticsearch/gateway/s3/S3Gateway.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.DynamicExecutors;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import java.util.concurrent.ExecutorService;, +    private final ExecutorService concurrentStreamPool;, +, +        int concurrentStreams = componentSettings.getAsInt("concurrent_streams", 5);, +        this.concurrentStreamPool = DynamicExecutors.newScalingThreadPool(1, concurrentStreams, TimeValue.timeValueSeconds(5).millis(), EsExecutors.daemonThreadFactory(settings, "[s3_stream]"));, +        logger.debug("using bucket [{}], region [{}], chunk_size [{}], concurrent_streams [{}]", bucket, region, chunkSize, concurrentStreams);, +, +        initialize(new S3BlobStore(settings, s3Service.client(), bucket, region, concurrentStreamPool), clusterName, chunkSize);, +    @Override protected void doClose() throws ElasticSearchException {, +        super.doClose();, +        concurrentStreamPool.shutdown();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/fs/FsGateway.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.DynamicExecutors;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import java.util.concurrent.ExecutorService;, +    private final ExecutorService concurrentStreamPool;, +, +, +        int concurrentStreams = componentSettings.getAsInt("concurrent_streams", 5);, +        this.concurrentStreamPool = DynamicExecutors.newScalingThreadPool(1, concurrentStreams, TimeValue.timeValueSeconds(5).millis(), EsExecutors.daemonThreadFactory(settings, "[s3_stream]"));, +, +        initialize(new FsBlobStore(componentSettings, concurrentStreamPool, gatewayFile), clusterName, null);, +, +    @Override protected void doClose() throws ElasticSearchException {, +        super.doClose();, +        concurrentStreamPool.shutdown();, +    }, +++ b/plugins/cloud/aws/src/main/java/org/elasticsearch/gateway/s3/S3Gateway.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.DynamicExecutors;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import java.util.concurrent.ExecutorService;, +    private final ExecutorService concurrentStreamPool;, +, +        int concurrentStreams = componentSettings.getAsInt("concurrent_streams", 5);, +        this.concurrentStreamPool = DynamicExecutors.newScalingThreadPool(1, concurrentStreams, TimeValue.timeValueSeconds(5).millis(), EsExecutors.daemonThreadFactory(settings, "[s3_stream]"));, +        logger.debug("using bucket [{}], region [{}], chunk_size [{}], concurrent_streams [{}]", bucket, region, chunkSize, concurrentStreams);, +, +        initialize(new S3BlobStore(settings, s3Service.client(), bucket, region, concurrentStreamPool), clusterName, chunkSize);, +    @Override protected void doClose() throws ElasticSearchException {, +        super.doClose();, +        concurrentStreamPool.shutdown();, +++ b/plugins/hadoop/src/main/java/org/elasticsearch/gateway/hdfs/HdfsGateway.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.DynamicExecutors;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import java.util.concurrent.ExecutorService;, +    private final ExecutorService concurrentStreamPool;, +, +        int concurrentStreams = componentSettings.getAsInt("concurrent_streams", 5);, +        this.concurrentStreamPool = DynamicExecutors.newScalingThreadPool(1, concurrentStreams, TimeValue.timeValueSeconds(5).millis(), EsExecutors.daemonThreadFactory(settings, "[s3_stream]"));, +, +        logger.debug("Using uri [{}], path [{}], concurrent_streams [{}]", uri, hPath, concurrentStreams);, +        initialize(new HdfsBlobStore(settings, fileSystem, concurrentStreamPool, hPath), clusterName, null);, +        concurrentStreamPool.shutdown();]