[+++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkResponse.java, +import org.elasticsearch.common.xcontent.StatusToXContentObject;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.rest.RestStatus;, +import java.util.ArrayList;, +import java.util.List;, +, +import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.throwUnknownField;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.throwUnknownToken;, +public class BulkResponse extends ActionResponse implements Iterable<BulkItemResponse>, StatusToXContentObject {, +, +    private static final String ITEMS = "items";, +    private static final String ERRORS = "errors";, +    private static final String TOOK = "took";, +    private static final String INGEST_TOOK = "ingest_took";, +, +    @Override, +    public RestStatus status() {, +        return RestStatus.OK;, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        builder.field(TOOK, tookInMillis);, +        if (ingestTookInMillis != BulkResponse.NO_INGEST_TOOK) {, +            builder.field(INGEST_TOOK, ingestTookInMillis);, +        }, +        builder.field(ERRORS, hasFailures());, +        builder.startArray(ITEMS);, +        for (BulkItemResponse item : this) {, +            item.toXContent(builder, params);, +        }, +        builder.endArray();, +        builder.endObject();, +        return builder;, +    }, +, +    public static BulkResponse fromXContent(XContentParser parser) throws IOException {, +        XContentParser.Token token = parser.nextToken();, +        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation);, +, +        long took = -1L;, +        long ingestTook = NO_INGEST_TOOK;, +        List<BulkItemResponse> items = new ArrayList<>();, +, +        String currentFieldName = parser.currentName();, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if (TOOK.equals(currentFieldName)) {, +                    took = parser.longValue();, +                } else if (INGEST_TOOK.equals(currentFieldName)) {, +                    ingestTook = parser.longValue();, +                } else if (ERRORS.equals(currentFieldName) == false) {, +                    throwUnknownField(currentFieldName, parser.getTokenLocation());, +                }, +            } else if (token == XContentParser.Token.START_ARRAY) {, +                if (ITEMS.equals(currentFieldName)) {, +                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                        items.add(BulkItemResponse.fromXContent(parser, items.size()));, +                    }, +                } else {, +                    throwUnknownField(currentFieldName, parser.getTokenLocation());, +                }, +            } else {, +                throwUnknownToken(token, parser.getTokenLocation());, +            }, +        }, +        return new BulkResponse(items.toArray(new BulkItemResponse[items.size()]), took, ingestTook);, +    }, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkResponse.java, +import org.elasticsearch.common.xcontent.StatusToXContentObject;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.rest.RestStatus;, +import java.util.ArrayList;, +import java.util.List;, +, +import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.throwUnknownField;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.throwUnknownToken;, +public class BulkResponse extends ActionResponse implements Iterable<BulkItemResponse>, StatusToXContentObject {, +, +    private static final String ITEMS = "items";, +    private static final String ERRORS = "errors";, +    private static final String TOOK = "took";, +    private static final String INGEST_TOOK = "ingest_took";, +, +    @Override, +    public RestStatus status() {, +        return RestStatus.OK;, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();]