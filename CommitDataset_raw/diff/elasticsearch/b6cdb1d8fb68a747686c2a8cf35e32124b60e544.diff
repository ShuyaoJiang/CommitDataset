[+++ b/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +import com.google.common.base.Objects;, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +import static org.elasticsearch.common.settings.ImmutableSettings.builder;, +import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;, +import static org.elasticsearch.common.xcontent.support.XContentMapValues.nodeMapValue;, +        protected Settings fieldDataSettings;, +        public Builder fieldDataSettings(Settings settings) {, +            this.fieldDataSettings = settings;, +            return builder;, +        }, +, +            return new ParentFieldMapper(name, indexName, type, postingsFormat, fieldDataSettings, context.indexSettings());, +                } else if (fieldName.equals("fielddata")) {, +                    // Only take over `loading`, since that is the only option now that is configurable:, +                    Map<String, String> fieldDataSettings = SettingsLoader.Helper.loadNestedFromMap(nodeMapValue(fieldNode, "fielddata"));, +                    if (fieldDataSettings.containsKey(Loading.KEY)) {, +                        Settings settings = settingsBuilder().put(Loading.KEY, fieldDataSettings.get(Loading.KEY)).build();, +                        builder.fieldDataSettings(settings);, +                    }, +        this.fieldDataType = new FieldDataType("_parent", settingsBuilder().put(Loading.KEY, Loading.LAZY_VALUE));, +        return new FieldDataType("_parent", settingsBuilder().put(Loading.KEY, Loading.EAGER_VALUE));, +        boolean includeDefaults = params.paramAsBoolean("include_defaults", false);, +        if (customFieldDataSettings != null) {, +            builder.field("fielddata", (Map) customFieldDataSettings.getAsMap());, +        } else if (includeDefaults) {, +            builder.field("fielddata", (Map) fieldDataType.getSettings().getAsMap());, +        }, +        if (!Objects.equal(type, other.type)) {, +            mergeContext.addConflict("The _parent field's type option can't be changed");, +        if (!mergeContext.mergeFlags().simulate()) {, +            ParentFieldMapper fieldMergeWith = (ParentFieldMapper) mergeWith;, +            if (fieldMergeWith.customFieldDataSettings != null) {, +                if (!Objects.equal(fieldMergeWith.customFieldDataSettings, this.customFieldDataSettings)) {, +                    this.customFieldDataSettings = fieldMergeWith.customFieldDataSettings;, +                    this.fieldDataType = new FieldDataType(defaultFieldDataType().getType(),, +                            builder().put(defaultFieldDataType().getSettings()).put(this.customFieldDataSettings), +                    );, +                }, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +import com.google.common.base.Objects;, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +import static org.elasticsearch.common.settings.ImmutableSettings.builder;, +import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;, +import static org.elasticsearch.common.xcontent.support.XContentMapValues.nodeMapValue;, +        protected Settings fieldDataSettings;, +        public Builder fieldDataSettings(Settings settings) {, +            this.fieldDataSettings = settings;, +            return builder;, +        }, +, +            return new ParentFieldMapper(name, indexName, type, postingsFormat, fieldDataSettings, context.indexSettings());, +                } else if (fieldName.equals("fielddata")) {, +                    // Only take over `loading`, since that is the only option now that is configurable:, +                    Map<String, String> fieldDataSettings = SettingsLoader.Helper.loadNestedFromMap(nodeMapValue(fieldNode, "fielddata"));, +                    if (fieldDataSettings.containsKey(Loading.KEY)) {, +                        Settings settings = settingsBuilder().put(Loading.KEY, fieldDataSettings.get(Loading.KEY)).build();, +                        builder.fieldDataSettings(settings);, +                    }, +        this.fieldDataType = new FieldDataType("_parent", settingsBuilder().put(Loading.KEY, Loading.LAZY_VALUE));, +        return new FieldDataType("_parent", settingsBuilder().put(Loading.KEY, Loading.EAGER_VALUE));, +        boolean includeDefaults = params.paramAsBoolean("include_defaults", false);, +        if (customFieldDataSettings != null) {, +            builder.field("fielddata", (Map) customFieldDataSettings.getAsMap());, +        } else if (includeDefaults) {, +            builder.field("fielddata", (Map) fieldDataType.getSettings().getAsMap());, +        }, +        if (!Objects.equal(type, other.type)) {, +            mergeContext.addConflict("The _parent field's type option can't be changed");, +        if (!mergeContext.mergeFlags().simulate()) {, +            ParentFieldMapper fieldMergeWith = (ParentFieldMapper) mergeWith;, +            if (fieldMergeWith.customFieldDataSettings != null) {, +                if (!Objects.equal(fieldMergeWith.customFieldDataSettings, this.customFieldDataSettings)) {, +                    this.customFieldDataSettings = fieldMergeWith.customFieldDataSettings;, +                    this.fieldDataType = new FieldDataType(defaultFieldDataType().getType(),, +                            builder().put(defaultFieldDataType().getSettings()).put(this.customFieldDataSettings), +                    );, +                }, +            }, +++ b/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.index.fielddata.IndexFieldData;, +import org.elasticsearch.search.internal.DefaultSearchContext;, +import org.elasticsearch.search.internal.InternalScrollSearchRequest;, +import org.elasticsearch.search.internal.SearchContext;, +import org.elasticsearch.search.internal.ShardSearchRequest;, +                            IndexFieldData.Global ifd = indexFieldDataService.getForField(fieldMapper);, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +import com.google.common.base.Objects;, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +import static org.elasticsearch.common.settings.ImmutableSettings.builder;, +import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;, +import static org.elasticsearch.common.xcontent.support.XContentMapValues.nodeMapValue;, +        protected Settings fieldDataSettings;, +        public Builder fieldDataSettings(Settings settings) {, +            this.fieldDataSettings = settings;, +            return builder;, +        }, +, +            return new ParentFieldMapper(name, indexName, type, postingsFormat, fieldDataSettings, context.indexSettings());]