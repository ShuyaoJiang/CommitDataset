[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/internal/InternalFacets.java, +import org.elasticsearch.search.facets.range.InternalRangeFacet;, +                    facets.add(InternalRangeFacet.readRangeFacet(in));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/internal/InternalFacets.java, +import org.elasticsearch.search.facets.range.InternalRangeFacet;, +                    facets.add(InternalRangeFacet.readRangeFacet(in));, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/internal/InternalFacets.java, +import org.elasticsearch.search.facets.range.InternalRangeFacet;, +                    facets.add(InternalRangeFacet.readRangeFacet(in));, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/range/InternalRangeFacet.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.facets.range;, +, +import org.elasticsearch.common.collect.ImmutableList;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.builder.XContentBuilder;, +import org.elasticsearch.search.facets.Facet;, +import org.elasticsearch.search.facets.internal.InternalFacet;, +, +import java.io.IOException;, +import java.util.Iterator;, +import java.util.List;, +, +/**, + * @author kimchy (shay.banon), + */, +public class InternalRangeFacet implements RangeFacet, InternalFacet {, +, +    private String name;, +, +    private String keyFieldName;, +, +    private String valueFieldName;, +, +    private Entry[] entries;, +, +    InternalRangeFacet() {, +    }, +, +    public InternalRangeFacet(String name, String keyFieldName, String valueFieldName, Entry[] entries) {, +        this.name = name;, +        this.keyFieldName = keyFieldName;, +        this.valueFieldName = valueFieldName;, +        this.entries = entries;, +    }, +, +    @Override public String name() {, +        return this.name;, +    }, +, +    @Override public String getName() {, +        return name();, +    }, +, +    @Override public Type type() {, +        return Type.RANGE;, +    }, +, +    @Override public Type getType() {, +        return type();, +    }, +, +    @Override public String keyFieldName() {, +        return this.keyFieldName;, +    }, +, +    @Override public String getKeyFieldName() {, +        return keyFieldName();, +    }, +, +    @Override public String valueFieldName() {, +        return this.valueFieldName;, +    }, +, +    @Override public String getValueFieldName() {, +        return valueFieldName();, +    }, +, +    @Override public List<Entry> entries() {]