[+++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +        if (parser.currentToken() == XContentParser.Token.FIELD_NAME) {, +            throw new ParsingException(parser.getTokenLocation(),, +                    "[" + queryName + "] malformed query, unexpected [FIELD_NAME] found [" + parser.currentName() + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +        if (parser.currentToken() == XContentParser.Token.FIELD_NAME) {, +            throw new ParsingException(parser.getTokenLocation(),, +                    "[" + queryName + "] malformed query, unexpected [FIELD_NAME] found [" + parser.currentName() + "]");, +        }, +++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +        if (parser.currentToken() == XContentParser.Token.FIELD_NAME) {, +            throw new ParsingException(parser.getTokenLocation(),, +                    "[" + queryName + "] malformed query, unexpected [FIELD_NAME] found [" + parser.currentName() + "]");, +        }, +++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +++ b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java, +        assertEquals("[match] malformed query, unexpected [FIELD_NAME] found [match]", ex.getMessage());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +        if (parser.currentToken() == XContentParser.Token.FIELD_NAME) {, +            throw new ParsingException(parser.getTokenLocation(),, +                    "[" + queryName + "] malformed query, unexpected [FIELD_NAME] found [" + parser.currentName() + "]");, +        }, +++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +++ b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java, +        assertEquals("[match] malformed query, unexpected [FIELD_NAME] found [match]", ex.getMessage());, +++ b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java, +        expectParsingException(json, equalTo("[bool] malformed query, unexpected [FIELD_NAME] found [ignored_field_name]"));, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +        if (parser.currentToken() == XContentParser.Token.FIELD_NAME) {, +            throw new ParsingException(parser.getTokenLocation(),, +                    "[" + queryName + "] malformed query, unexpected [FIELD_NAME] found [" + parser.currentName() + "]");, +        }, +++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +++ b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java, +        assertEquals("[match] malformed query, unexpected [FIELD_NAME] found [match]", ex.getMessage());, +++ b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java, +        expectParsingException(json, equalTo("[bool] malformed query, unexpected [FIELD_NAME] found [ignored_field_name]"));, +++ b/core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java, +import org.elasticsearch.common.ParsingException;, +    public void testInvalid() throws Exception {, +        String restContent = " { \"query\": {\n" +, +                "    \"multi_match\": {\n" +, +                "      \"query\": \"workd\",\n" +, +                "      \"fields\": [\"title^5\", \"plain_body\"]\n" +, +                "    },\n" +, +                "    \"filters\": {\n" +, +                "      \"terms\": {\n" +, +                "        \"status\": [ 3 ]\n" +, +                "      }\n" +, +                "    }\n" +, +                "  } }";, +        try (XContentParser parser = XContentFactory.xContent(restContent).createParser(restContent)) {, +            SearchSourceBuilder.fromXContent(createParseContext(parser),, +                    searchRequestParsers.aggParsers, searchRequestParsers.suggesters, searchRequestParsers.searchExtParsers);, +            fail("invalid query syntax multiple keys under query");, +        } catch (ParsingException e) {, +            assertThat(e.getMessage(), containsString("filters"));, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +        if (parser.currentToken() == XContentParser.Token.FIELD_NAME) {, +            throw new ParsingException(parser.getTokenLocation(),, +                    "[" + queryName + "] malformed query, unexpected [FIELD_NAME] found [" + parser.currentName() + "]");, +        }, +++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +++ b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java, +        assertEquals("[match] malformed query, unexpected [FIELD_NAME] found [match]", ex.getMessage());, +++ b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java, +        expectParsingException(json, equalTo("[bool] malformed query, unexpected [FIELD_NAME] found [ignored_field_name]"));, +++ b/core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java, +import org.elasticsearch.common.ParsingException;, +    public void testInvalid() throws Exception {, +        String restContent = " { \"query\": {\n" +, +                "    \"multi_match\": {\n" +, +                "      \"query\": \"workd\",\n" +, +                "      \"fields\": [\"title^5\", \"plain_body\"]\n" +, +                "    },\n" +, +                "    \"filters\": {\n" +, +                "      \"terms\": {\n" +, +                "        \"status\": [ 3 ]\n" +, +                "      }\n" +, +                "    }\n" +, +                "  } }";, +        try (XContentParser parser = XContentFactory.xContent(restContent).createParser(restContent)) {, +            SearchSourceBuilder.fromXContent(createParseContext(parser),, +                    searchRequestParsers.aggParsers, searchRequestParsers.suggesters, searchRequestParsers.searchExtParsers);, +            fail("invalid query syntax multiple keys under query");, +        } catch (ParsingException e) {, +            assertThat(e.getMessage(), containsString("filters"));, +        }, +    }, +, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/snapshot.get/10_basic.yaml, +teardown:, +, +  - do:, +      snapshot.delete_repository:]