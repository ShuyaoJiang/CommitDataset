[+++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +, +    // Like Objects.requireNotNull(...) but instead throws a IllegalArgumentException, +    protected static <T> T requireValue(T value, String message) {, +        if (value == null) {, +            throw new IllegalArgumentException(message);, +        }, +        return value;, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +, +    // Like Objects.requireNotNull(...) but instead throws a IllegalArgumentException, +    protected static <T> T requireValue(T value, String message) {, +        if (value == null) {, +            throw new IllegalArgumentException(message);, +        }, +        return value;, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, + * A query builder for <tt>has_child</tt> query., +    private final ScoreMode scoreMode;, +    private int minChildren = DEFAULT_MIN_CHILDREN;, +    private int maxChildren = DEFAULT_MAX_CHILDREN;, +    public HasChildQueryBuilder(String type, QueryBuilder<?> query, ScoreMode scoreMode) {, +        this(type, query, DEFAULT_MIN_CHILDREN, DEFAULT_MAX_CHILDREN, scoreMode, null);, +    }, +    private HasChildQueryBuilder(String type, QueryBuilder<?> query, int minChildren, int maxChildren, ScoreMode scoreMode,, +        this.type = requireValue(type, "[" + NAME + "] requires 'type' field");, +        this.query = requireValue(query, "[" + NAME + "] requires 'query' field");, +        this.scoreMode = requireValue(scoreMode, "[" + NAME + "] requires 'score_mode' field");, +        this.minChildren = minChildren;, +        this.maxChildren = maxChildren;, +        out.writeInt(minChildren);, +        out.writeInt(maxChildren);, +     * Defines the minimum number of children that are required to match for the parent to be considered a match and, +     * the maximum number of children that are required to match for the parent to be considered a match., +    public HasChildQueryBuilder minMaxChildren(int minChildren, int maxChildren) {, +        if (maxChildren < minChildren) {, +            throw new IllegalArgumentException("[" + NAME + "] 'max_children' is less than 'min_children'");, +        this.minChildren = minChildren;, +        this.maxChildren = maxChildren;, +    public HasChildQueryBuilder innerHit(InnerHitBuilder innerHit) {, +        innerHit.setParentChildType(type);, +        innerHit.setQuery(query);, +        this.innerHitBuilder = innerHit;, +        return this;, +    }, +, +        ScoreMode scoreMode = ScoreMode.None;, +        HasChildQueryBuilder hasChildQueryBuilder = new HasChildQueryBuilder(childType, iqb, minChildren, maxChildren,, +            return new HasChildQueryBuilder(type, rewrite, minChildren, minChildren, scoreMode, innerHitBuilder);, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +, +    // Like Objects.requireNotNull(...) but instead throws a IllegalArgumentException, +    protected static <T> T requireValue(T value, String message) {, +        if (value == null) {, +            throw new IllegalArgumentException(message);, +        }, +        return value;, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, + * A query builder for <tt>has_child</tt> query., +    private final ScoreMode scoreMode;, +    private int minChildren = DEFAULT_MIN_CHILDREN;, +    private int maxChildren = DEFAULT_MAX_CHILDREN;, +    public HasChildQueryBuilder(String type, QueryBuilder<?> query, ScoreMode scoreMode) {, +        this(type, query, DEFAULT_MIN_CHILDREN, DEFAULT_MAX_CHILDREN, scoreMode, null);, +    }, +    private HasChildQueryBuilder(String type, QueryBuilder<?> query, int minChildren, int maxChildren, ScoreMode scoreMode,, +        this.type = requireValue(type, "[" + NAME + "] requires 'type' field");, +        this.query = requireValue(query, "[" + NAME + "] requires 'query' field");, +        this.scoreMode = requireValue(scoreMode, "[" + NAME + "] requires 'score_mode' field");, +        this.minChildren = minChildren;, +        this.maxChildren = maxChildren;, +        out.writeInt(minChildren);, +        out.writeInt(maxChildren);, +     * Defines the minimum number of children that are required to match for the parent to be considered a match and, +     * the maximum number of children that are required to match for the parent to be considered a match., +    public HasChildQueryBuilder minMaxChildren(int minChildren, int maxChildren) {, +        if (maxChildren < minChildren) {, +            throw new IllegalArgumentException("[" + NAME + "] 'max_children' is less than 'min_children'");, +        this.minChildren = minChildren;, +        this.maxChildren = maxChildren;, +    public HasChildQueryBuilder innerHit(InnerHitBuilder innerHit) {, +        innerHit.setParentChildType(type);, +        innerHit.setQuery(query);, +        this.innerHitBuilder = innerHit;, +        return this;, +    }, +, +        ScoreMode scoreMode = ScoreMode.None;, +        HasChildQueryBuilder hasChildQueryBuilder = new HasChildQueryBuilder(childType, iqb, minChildren, maxChildren,, +            return new HasChildQueryBuilder(type, rewrite, minChildren, minChildren, scoreMode, innerHitBuilder);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java, +    private final boolean score;, +    public HasParentQueryBuilder(String type, QueryBuilder<?> query, boolean score) {, +        this(type, query, score, null);, +    private HasParentQueryBuilder(String type, QueryBuilder<?> query, boolean score, InnerHitBuilder innerHit) {, +        this.type = requireValue(type, "[" + NAME + "] requires 'type' field");, +        this.query = requireValue(query, "[" + NAME + "] requires 'query' field");]