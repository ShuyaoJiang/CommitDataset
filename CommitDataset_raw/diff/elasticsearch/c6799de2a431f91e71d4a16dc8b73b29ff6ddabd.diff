[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.discovery.DiscoveryModule;, +            return new ValidateTLSOnJoin(XPackSettings.TRANSPORT_SSL_ENABLED.get(settings),, +                    DiscoveryModule.DISCOVERY_TYPE_SETTING.get(settings)), +        private final String discoveryType;, +        ValidateTLSOnJoin(boolean isTLSEnabled, String discoveryType) {, +            this.discoveryType = discoveryType;, +            if (license != null && license.isProductionLicense() &&, +                    isTLSEnabled == false && "single-node".equals(discoveryType) == false) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.discovery.DiscoveryModule;, +            return new ValidateTLSOnJoin(XPackSettings.TRANSPORT_SSL_ENABLED.get(settings),, +                    DiscoveryModule.DISCOVERY_TYPE_SETTING.get(settings)), +        private final String discoveryType;, +        ValidateTLSOnJoin(boolean isTLSEnabled, String discoveryType) {, +            this.discoveryType = discoveryType;, +            if (license != null && license.isProductionLicense() &&, +                    isTLSEnabled == false && "single-node".equals(discoveryType) == false) {, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/SecurityTests.java, +            String discoveryType = randomFrom("single-node", "zen", randomAlphaOfLength(4));, +            Security.ValidateTLSOnJoin validator = new Security.ValidateTLSOnJoin(tlsOn, discoveryType);, +            if (productionModes.contains(license.operationMode()) && tlsOn == false && "single-node".equals(discoveryType) == false) {]