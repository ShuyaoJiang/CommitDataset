[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.env.NodeEnvironment;, +                    ESLoggerFactory.LOG_LEVEL_SETTING,, +                    NodeEnvironment.MAX_LOCAL_STORAGE_NODES_SETTING,, +                    NodeEnvironment.ENABLE_LUCENE_SEGMENT_INFOS_TRACE_SETTING,, +                    NodeEnvironment.ADD_NODE_ID_TO_CUSTOM_PATH)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.env.NodeEnvironment;, +                    ESLoggerFactory.LOG_LEVEL_SETTING,, +                    NodeEnvironment.MAX_LOCAL_STORAGE_NODES_SETTING,, +                    NodeEnvironment.ENABLE_LUCENE_SEGMENT_INFOS_TRACE_SETTING,, +                    NodeEnvironment.ADD_NODE_ID_TO_CUSTOM_PATH)));, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Scope;, +    /**, +     * Maximum number of data nodes that should run in an environment., +     */, +    public static final Setting<Integer> MAX_LOCAL_STORAGE_NODES_SETTING = Setting.intSetting("node.max_local_storage_nodes", 50, 1, false,, +            Scope.CLUSTER);, +    /**, +     * If true automatically append node id to custom data paths., +     */, +    public static final Setting<Boolean> ADD_NODE_ID_TO_CUSTOM_PATH = Setting.boolSetting("node.add_id_to_custom_path", true, false,, +            Scope.CLUSTER);, +, +    /**, +     * If true the [verbose] SegmentInfos.infoStream logging is sent to System.out., +     */, +    public static final Setting<Boolean> ENABLE_LUCENE_SEGMENT_INFOS_TRACE_SETTING = Setting, +            .boolSetting("node.enable_lucene_segment_infos_trace", false, false, Scope.CLUSTER);, +        this.addNodeId = ADD_NODE_ID_TO_CUSTOM_PATH.get(settings);, +        int maxLocalStorageNodes = MAX_LOCAL_STORAGE_NODES_SETTING.get(settings);, +        applySegmentInfosTrace(settings);, +    @SuppressForbidden(reason = "System.out.*"), +    static void applySegmentInfosTrace(Settings settings) {, +        if (ENABLE_LUCENE_SEGMENT_INFOS_TRACE_SETTING.get(settings)) {, +            SegmentInfos.setInfoStream(System.out);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.env.NodeEnvironment;, +                    ESLoggerFactory.LOG_LEVEL_SETTING,, +                    NodeEnvironment.MAX_LOCAL_STORAGE_NODES_SETTING,, +                    NodeEnvironment.ENABLE_LUCENE_SEGMENT_INFOS_TRACE_SETTING,, +                    NodeEnvironment.ADD_NODE_ID_TO_CUSTOM_PATH)));, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Scope;, +    /**, +     * Maximum number of data nodes that should run in an environment., +     */, +    public static final Setting<Integer> MAX_LOCAL_STORAGE_NODES_SETTING = Setting.intSetting("node.max_local_storage_nodes", 50, 1, false,, +            Scope.CLUSTER);, +    /**, +     * If true automatically append node id to custom data paths., +     */, +    public static final Setting<Boolean> ADD_NODE_ID_TO_CUSTOM_PATH = Setting.boolSetting("node.add_id_to_custom_path", true, false,, +            Scope.CLUSTER);, +, +    /**, +     * If true the [verbose] SegmentInfos.infoStream logging is sent to System.out., +     */, +    public static final Setting<Boolean> ENABLE_LUCENE_SEGMENT_INFOS_TRACE_SETTING = Setting, +            .boolSetting("node.enable_lucene_segment_infos_trace", false, false, Scope.CLUSTER);, +        this.addNodeId = ADD_NODE_ID_TO_CUSTOM_PATH.get(settings);, +        int maxLocalStorageNodes = MAX_LOCAL_STORAGE_NODES_SETTING.get(settings);, +        applySegmentInfosTrace(settings);, +    @SuppressForbidden(reason = "System.out.*"), +    static void applySegmentInfosTrace(Settings settings) {, +        if (ENABLE_LUCENE_SEGMENT_INFOS_TRACE_SETTING.get(settings)) {, +            SegmentInfos.setInfoStream(System.out);, +        }, +    }, +, +++ b/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java, +import org.apache.lucene.index.SegmentInfos;, +import org.elasticsearch.common.SuppressForbidden;, +import static org.hamcrest.Matchers.arrayWithSize;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.empty;, +    public void testNodeLockSillySettings() {, +        try {, +            NodeEnvironment.MAX_LOCAL_STORAGE_NODES_SETTING.get(Settings.builder(), +                    .put(NodeEnvironment.MAX_LOCAL_STORAGE_NODES_SETTING.getKey(), between(Integer.MIN_VALUE, 0)).build());, +            fail("expected failure");, +        } catch (IllegalArgumentException e) {, +            assertThat(e.getMessage(), containsString("must be >= 1"));, +        }, +, +        // Even though its silly MAXINT nodes is a-ok!, +        int value = between(1, Integer.MAX_VALUE);, +        int max = NodeEnvironment.MAX_LOCAL_STORAGE_NODES_SETTING.get(, +                Settings.builder().put(NodeEnvironment.MAX_LOCAL_STORAGE_NODES_SETTING.getKey(), value).build());, +        assertEquals(value, max);, +    }, +, +                .put(NodeEnvironment.MAX_LOCAL_STORAGE_NODES_SETTING.getKey(), 1).build());, +            // Reuse the same location and attempt to lock again]