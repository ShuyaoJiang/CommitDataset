[+++ b/src/test/java/org/elasticsearch/percolator/PercolatorTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +        assertAcked(client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", 1)));, +        assertAcked(client().admin().indices().prepareDeleteMapping("test1").setType(PercolatorService.TYPE_NAME));, +        assertAcked(client().admin().indices().prepareDeleteMapping("test2").setType(PercolatorService.TYPE_NAME));, +        // Percolate api should return 0 matches, because all docs in _percolate type have been removed., +++ b/src/test/java/org/elasticsearch/percolator/PercolatorTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +        assertAcked(client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", 1)));, +        assertAcked(client().admin().indices().prepareDeleteMapping("test1").setType(PercolatorService.TYPE_NAME));, +        assertAcked(client().admin().indices().prepareDeleteMapping("test2").setType(PercolatorService.TYPE_NAME));, +        // Percolate api should return 0 matches, because all docs in _percolate type have been removed., +++ b/src/test/java/org/elasticsearch/percolator/RecoveryPercolatorTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +        assertAcked(client().admin().indices().prepareClose("test"));, +        assertAcked(client().admin().indices().prepareOpen("test"));]