[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.license;, +, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.support.ContextPreservingActionListener;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import org.elasticsearch.protocol.xpack.XPackInfoRequest;, +import org.elasticsearch.protocol.xpack.XPackInfoResponse;, +import org.elasticsearch.protocol.xpack.license.LicenseStatus;, +import org.elasticsearch.transport.RemoteClusterAware;, +import org.elasticsearch.xpack.core.action.XPackInfoAction;, +, +import java.util.EnumSet;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Locale;, +import java.util.concurrent.atomic.AtomicReference;, +import java.util.function.Predicate;, +import java.util.stream.Collectors;, +, +/**, + * Checks remote clusters for license compatibility with a specified license predicate., + */, +public final class RemoteClusterLicenseChecker {, +, +    /**, +     * Encapsulates the license info of a remote cluster., +     */, +    public static final class RemoteClusterLicenseInfo {, +, +        private final String clusterAlias;, +, +        /**, +         * The alias of the remote cluster., +         *, +         * @return the cluster alias, +         */, +        public String clusterAlias() {, +            return clusterAlias;, +        }, +, +        private final XPackInfoResponse.LicenseInfo licenseInfo;, +, +        /**, +         * The license info of the remote cluster., +         *, +         * @return the license info, +         */, +        public XPackInfoResponse.LicenseInfo licenseInfo() {, +            return licenseInfo;, +        }, +, +        RemoteClusterLicenseInfo(final String clusterAlias, final XPackInfoResponse.LicenseInfo licenseInfo) {, +            this.clusterAlias = clusterAlias;, +            this.licenseInfo = licenseInfo;, +        }, +, +    }, +, +    /**, +     * Encapsulates a remote cluster license check. The check is either successful if the license of the remote cluster is compatible with, +     * the predicate used to check license compatibility, or the check is a failure., +     */, +    public static final class LicenseCheck {, +, +        private final RemoteClusterLicenseInfo remoteClusterLicenseInfo;, +, +        /**, +         * The remote cluster license info. This method should only be invoked if this instance represents a failing license check., +         *, +         * @return the remote cluster license info, +         */, +        public RemoteClusterLicenseInfo remoteClusterLicenseInfo() {, +            assert isSuccess() == false;, +            return remoteClusterLicenseInfo;, +        }, +, +        private static final LicenseCheck SUCCESS = new LicenseCheck(null);, +, +        /**, +         * A successful license check., +         *, +         * @return a successful license check instance, +         */, +        public static LicenseCheck success() {, +            return SUCCESS;, +        }, +, +        /**, +         * Test if this instance represents a successful license check., +         *, +         * @return true if this instance represents a successful license check, otherwise false]