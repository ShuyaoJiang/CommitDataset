[+++ b/src/main/java/org/elasticsearch/license/plugin/LicensePlugin.java, +, +, +    }, +++ b/src/main/java/org/elasticsearch/license/plugin/LicensePlugin.java, +, +, +    }, +++ b/src/main/java/org/elasticsearch/license/plugin/action/delete/TransportDeleteLicenseAction.java, +        licensesService.unregisteredLicenses(clusterService, "delete_licenses []", request, new ActionListener<ClusterStateUpdateResponse>() {, +++ b/src/main/java/org/elasticsearch/license/plugin/LicensePlugin.java, +, +, +    }, +++ b/src/main/java/org/elasticsearch/license/plugin/action/delete/TransportDeleteLicenseAction.java, +        licensesService.unregisteredLicenses(clusterService, "delete_licenses []", request, new ActionListener<ClusterStateUpdateResponse>() {, +++ b/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +import org.elasticsearch.node.Node;, +        licensesService.registerLicenses(clusterService, "put_licenses []",request, new ActionListener<ClusterStateUpdateResponse>() {, +++ b/src/main/java/org/elasticsearch/license/plugin/LicensePlugin.java, +, +, +    }, +++ b/src/main/java/org/elasticsearch/license/plugin/action/delete/TransportDeleteLicenseAction.java, +        licensesService.unregisteredLicenses(clusterService, "delete_licenses []", request, new ActionListener<ClusterStateUpdateResponse>() {, +++ b/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +import org.elasticsearch.node.Node;, +        licensesService.registerLicenses(clusterService, "put_licenses []",request, new ActionListener<ClusterStateUpdateResponse>() {, +++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +import java.util.concurrent.atomic.AtomicBoolean;, +, +    //private final ClusterService clusterService;, +    private AtomicBoolean registerClusterStateListener = new AtomicBoolean(false);, +, +    public LicensesService(Settings settings /*ClusterService clusterService, Injector injector*/) {, +        //this.clusterService = clusterService;, +        //if (DiscoveryNode.dataNode(settings) || DiscoveryNode.masterNode(settings)) {, +        //    clusterService.add(this);, +        //}, +    public void registerLicenses(ClusterService clusterService, String source, final PutLicenseRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {, +        if (registerClusterStateListener.compareAndSet(false, true)) {, +            if (DiscoveryNode.dataNode(settings) || DiscoveryNode.masterNode(settings)) {, +                clusterService.add(this);, +            }, +        }, +    public void unregisteredLicenses(ClusterService clusterService, String source, final DeleteLicenseRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {]