[+++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +    /**, +     * Returns the registered remote cluster names., +     */, +    public Set<String> getRegisteredRemoteClusterNames() {, +        // remoteClusters is unmodifiable so its key set will be unmodifiable too, +        return remoteClusters.keySet();, +    }, +, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +    /**, +     * Returns the registered remote cluster names., +     */, +    public Set<String> getRegisteredRemoteClusterNames() {, +        // remoteClusters is unmodifiable so its key set will be unmodifiable too, +        return remoteClusters.keySet();, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java, +import org.elasticsearch.cluster.metadata.ClusterNameExpressionResolver;, +import java.util.Set;, +    private static final ClusterNameExpressionResolver clusterNameExpressionResolver = new ClusterNameExpressionResolver();, +     * {@code cluster_alias:index_name} and the cluster_alias is extracted (and expanded if it is a wildcard) for, +     * each index name that represents a remote index., +     * @param remoteClusters the aliases for remote clusters, +    public static List<String> remoteClusterAliases(final Set<String> remoteClusters, final List<String> indices) {, +                .flatMap(clusterExpression -> clusterNameExpressionResolver.resolveClusterNames(remoteClusters, clusterExpression).stream()), +                .distinct(), +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +    /**, +     * Returns the registered remote cluster names., +     */, +    public Set<String> getRegisteredRemoteClusterNames() {, +        // remoteClusters is unmodifiable so its key set will be unmodifiable too, +        return remoteClusters.keySet();, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java, +import org.elasticsearch.cluster.metadata.ClusterNameExpressionResolver;, +import java.util.Set;, +    private static final ClusterNameExpressionResolver clusterNameExpressionResolver = new ClusterNameExpressionResolver();, +     * {@code cluster_alias:index_name} and the cluster_alias is extracted (and expanded if it is a wildcard) for, +     * each index name that represents a remote index., +     * @param remoteClusters the aliases for remote clusters, +    public static List<String> remoteClusterAliases(final Set<String> remoteClusters, final List<String> indices) {, +                .flatMap(clusterExpression -> clusterNameExpressionResolver.resolveClusterNames(remoteClusters, clusterExpression).stream()), +                .distinct(), +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/RemoteClusterLicenseCheckerTests.java, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Set;, +        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");, +        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices), empty());, +        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");, +        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices), contains("remote-cluster1"));, +        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");, +        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices),, +                containsInAnyOrder("remote-cluster1", "remote-cluster2"));, +        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");, +        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices),, +                containsInAnyOrder("remote-cluster1", "remote-cluster2"));, +    }, +, +    public void testSimpleWildcardRemoteClusterAlias() {, +        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");, +        final List<String> indices = Arrays.asList("*:remote-index1", "local-index1");, +        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices),, +                containsInAnyOrder("remote-cluster1", "remote-cluster2"));, +    }, +, +    public void testPartialWildcardRemoteClusterAlias() {, +        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");, +        final List<String> indices = Arrays.asList("*2:remote-index1", "local-index1");, +        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices), contains("remote-cluster2"));, +    }, +, +    public void testNonMatchingWildcardRemoteClusterAlias() {, +        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");, +        final List<String> indices = Arrays.asList("*3:remote-index1", "local-index1");, +        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices), empty());, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +    /**, +     * Returns the registered remote cluster names., +     */, +    public Set<String> getRegisteredRemoteClusterNames() {, +        // remoteClusters is unmodifiable so its key set will be unmodifiable too, +        return remoteClusters.keySet();, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java, +import org.elasticsearch.cluster.metadata.ClusterNameExpressionResolver;, +import java.util.Set;, +    private static final ClusterNameExpressionResolver clusterNameExpressionResolver = new ClusterNameExpressionResolver();, +     * {@code cluster_alias:index_name} and the cluster_alias is extracted (and expanded if it is a wildcard) for, +     * each index name that represents a remote index., +     * @param remoteClusters the aliases for remote clusters, +    public static List<String> remoteClusterAliases(final Set<String> remoteClusters, final List<String> indices) {, +                .flatMap(clusterExpression -> clusterNameExpressionResolver.resolveClusterNames(remoteClusters, clusterExpression).stream()), +                .distinct(), +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/RemoteClusterLicenseCheckerTests.java, +import org.elasticsearch.common.util.set.Sets;]