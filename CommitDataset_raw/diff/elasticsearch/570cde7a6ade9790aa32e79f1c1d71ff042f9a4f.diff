[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.action.CloseJobAction;, +import org.elasticsearch.xpack.prelert.action.OpenJobAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestCloseJobAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestOpenJobAction;, +                        UsageReporter.UPDATE_INTERVAL_SETTING,, +                        AutodetectProcessManager.MAX_RUNNING_JOBS_PER_NODE));, +                jobResultsPersister, jobDataCountsPersister, autodetectResultsParser, processFactory, clusterService.getClusterSettings());, +                RestOpenJobAction.class,, +                RestCloseJobAction.class,, +                new ActionHandler<>(OpenJobAction.INSTANCE, OpenJobAction.TransportAction.class),, +                new ActionHandler<>(CloseJobAction.INSTANCE, CloseJobAction.TransportAction.class),, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.action.CloseJobAction;, +import org.elasticsearch.xpack.prelert.action.OpenJobAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestCloseJobAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestOpenJobAction;, +                        UsageReporter.UPDATE_INTERVAL_SETTING,, +                        AutodetectProcessManager.MAX_RUNNING_JOBS_PER_NODE));, +                jobResultsPersister, jobDataCountsPersister, autodetectResultsParser, processFactory, clusterService.getClusterSettings());, +                RestOpenJobAction.class,, +                RestCloseJobAction.class,, +                new ActionHandler<>(OpenJobAction.INSTANCE, OpenJobAction.TransportAction.class),, +                new ActionHandler<>(CloseJobAction.INSTANCE, CloseJobAction.TransportAction.class),, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/CloseJobAction.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.prelert.action;, +, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.master.AcknowledgedRequest;, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +import org.elasticsearch.action.support.master.MasterNodeOperationRequestBuilder;, +import org.elasticsearch.action.support.master.TransportMasterNodeAction;, +import org.elasticsearch.client.ElasticsearchClient;, +import org.elasticsearch.cluster.ClusterChangedEvent;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ClusterStateObserver;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.TransportService;, +import org.elasticsearch.xpack.prelert.job.Job;, +import org.elasticsearch.xpack.prelert.job.JobStatus;, +import org.elasticsearch.xpack.prelert.job.manager.JobManager;, +import org.elasticsearch.xpack.prelert.job.metadata.Allocation;, +import org.elasticsearch.xpack.prelert.job.metadata.PrelertMetadata;, +import org.elasticsearch.xpack.prelert.utils.ExceptionsHelper;, +, +import java.io.IOException;, +import java.util.Objects;, +, +public class CloseJobAction extends Action<CloseJobAction.Request, CloseJobAction.Response, CloseJobAction.RequestBuilder> {, +, +    public static final CloseJobAction INSTANCE = new CloseJobAction();, +    public static final String NAME = "cluster:admin/prelert/job/close";, +, +    private CloseJobAction() {, +        super(NAME);, +    }, +, +    @Override, +    public RequestBuilder newRequestBuilder(ElasticsearchClient client) {, +        return new RequestBuilder(client, this);, +    }, +, +    @Override, +    public Response newResponse() {, +        return new Response();, +    }, +, +    public static class Request extends AcknowledgedRequest<Request> {, +, +        private String jobId;, +        private TimeValue closeTimeout = TimeValue.timeValueMinutes(30);, +, +        Request() {}, +, +        public Request(String jobId) {, +            this.jobId = ExceptionsHelper.requireNonNull(jobId, Job.ID.getPreferredName());, +        }, +, +        public String getJobId() {, +            return jobId;, +        }, +, +        public TimeValue getCloseTimeout() {]