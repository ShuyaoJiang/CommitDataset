[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/deprecation/DeprecationInfoAction.java, +    private static List<DeprecationIssue> mergeNodeIssues(NodesDeprecationCheckResponse response) {, +        Map<DeprecationIssue, List<String>> issueListMap = new HashMap<>();, +        for (NodesDeprecationCheckAction.NodeResponse resp : response.getNodes()) {, +            for (DeprecationIssue issue : resp.getDeprecationIssues()) {, +                issueListMap.computeIfAbsent(issue, (key) -> new ArrayList<>()).add(resp.getNode().getName());, +            }, +        }, +, +        return issueListMap.entrySet().stream(), +            .map(entry -> {, +                DeprecationIssue issue = entry.getKey();, +                String details = issue.getDetails() != null ? issue.getDetails() + " " : "";, +                return new DeprecationIssue(issue.getLevel(), issue.getMessage(), issue.getUrl(),, +                    details + "(nodes impacted: " + entry.getValue() + ")");, +            }).collect(Collectors.toList());, +    }, +, +         * @param nodeDeprecationResponse The response containing the deprecation issues found on each node, +         * @param clusterSettingsChecks The list of cluster-level checks, +        public static DeprecationInfoAction.Response from(ClusterState state,, +                                                          NodesDeprecationCheckResponse nodeDeprecationResponse,, +                                                          List<Function<ClusterState, DeprecationIssue>> clusterSettingsChecks,, +            List<DeprecationIssue> nodeSettingsIssues = mergeNodeIssues(nodeDeprecationResponse);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/deprecation/DeprecationInfoAction.java, +    private static List<DeprecationIssue> mergeNodeIssues(NodesDeprecationCheckResponse response) {, +        Map<DeprecationIssue, List<String>> issueListMap = new HashMap<>();, +        for (NodesDeprecationCheckAction.NodeResponse resp : response.getNodes()) {, +            for (DeprecationIssue issue : resp.getDeprecationIssues()) {, +                issueListMap.computeIfAbsent(issue, (key) -> new ArrayList<>()).add(resp.getNode().getName());, +            }, +        }, +, +        return issueListMap.entrySet().stream(), +            .map(entry -> {, +                DeprecationIssue issue = entry.getKey();, +                String details = issue.getDetails() != null ? issue.getDetails() + " " : "";, +                return new DeprecationIssue(issue.getLevel(), issue.getMessage(), issue.getUrl(),, +                    details + "(nodes impacted: " + entry.getValue() + ")");, +            }).collect(Collectors.toList());, +    }, +, +         * @param nodeDeprecationResponse The response containing the deprecation issues found on each node, +         * @param clusterSettingsChecks The list of cluster-level checks, +        public static DeprecationInfoAction.Response from(ClusterState state,, +                                                          NodesDeprecationCheckResponse nodeDeprecationResponse,, +                                                          List<Function<ClusterState, DeprecationIssue>> clusterSettingsChecks,, +            List<DeprecationIssue> nodeSettingsIssues = mergeNodeIssues(nodeDeprecationResponse);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/deprecation/NodesDeprecationCheckAction.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.core.deprecation;, +, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.support.nodes.BaseNodeRequest;, +import org.elasticsearch.action.support.nodes.BaseNodeResponse;, +import org.elasticsearch.action.support.nodes.NodesOperationRequestBuilder;, +import org.elasticsearch.client.ElasticsearchClient;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +import java.io.IOException;, +import java.util.List;, +import java.util.Objects;, +, +/**, + * Runs deprecation checks on each node. Deprecation checks are performed locally so that filtered settings, + * can be accessed in the deprecation checks., + */, +public class NodesDeprecationCheckAction extends Action<NodesDeprecationCheckResponse> {, +    public static final NodesDeprecationCheckAction INSTANCE = new NodesDeprecationCheckAction();, +    public static final String NAME = "cluster:admin/xpack/deprecation/nodes/info";, +, +    private NodesDeprecationCheckAction() {, +        super(NAME);, +    }, +, +    @Override, +    public NodesDeprecationCheckResponse newResponse() {, +        return new NodesDeprecationCheckResponse();, +    }, +, +    public static class NodeRequest extends BaseNodeRequest {, +, +        NodesDeprecationCheckRequest request;, +, +        public NodeRequest() {}, +        public NodeRequest(String nodeId, NodesDeprecationCheckRequest request) {, +            super(nodeId);, +            this.request = request;, +        }, +, +        @Override, +        public void readFrom(StreamInput in) throws IOException {, +            super.readFrom(in);]