[+++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true -Des.script.disable_dynamic=false %s', +++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true -Des.script.disable_dynamic=false %s', +++ b/dev-tools/es_release_notes.pl, +my $User_Repo  = 'elasticsearch/elasticsearch/';, +my @Groups       = qw(breaking feature enhancement bug regression doc test);, +        my $header = $issue->{title} =~ s/^([^:]+):\s+// ? $1 : '';, +++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true -Des.script.disable_dynamic=false %s', +++ b/dev-tools/es_release_notes.pl, +my $User_Repo  = 'elasticsearch/elasticsearch/';, +my @Groups       = qw(breaking feature enhancement bug regression doc test);, +        my $header = $issue->{title} =~ s/^([^:]+):\s+// ? $1 : '';, +++ b/docs/community/monitoring.asciidoc, +++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true -Des.script.disable_dynamic=false %s', +++ b/dev-tools/es_release_notes.pl, +my $User_Repo  = 'elasticsearch/elasticsearch/';, +my @Groups       = qw(breaking feature enhancement bug regression doc test);, +        my $header = $issue->{title} =~ s/^([^:]+):\s+// ? $1 : '';, +++ b/docs/community/monitoring.asciidoc, +++ b/docs/reference/api-conventions.asciidoc, +The *elasticsearch* REST APIs are exposed using:, +, +* <<modules-http,JSON over HTTP>>,, +* <<modules-thrift,thrift>>,, +* <<modules-memcached,memcached>>., +++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true -Des.script.disable_dynamic=false %s', +++ b/dev-tools/es_release_notes.pl, +my $User_Repo  = 'elasticsearch/elasticsearch/';, +my @Groups       = qw(breaking feature enhancement bug regression doc test);, +        my $header = $issue->{title} =~ s/^([^:]+):\s+// ? $1 : '';, +++ b/docs/community/monitoring.asciidoc, +++ b/docs/reference/api-conventions.asciidoc, +The *elasticsearch* REST APIs are exposed using:, +, +* <<modules-http,JSON over HTTP>>,, +* <<modules-thrift,thrift>>,, +* <<modules-memcached,memcached>>., +++ b/docs/reference/docs/delete-by-query.asciidoc, +[[replication-type]], +=== Replication Type, +, +The replication of the operation can be done in an asynchronous manner, +to the replicas (the operation will return once it has be executed on, +the primary shard). The `replication` parameter can be set to `async`, +(defaults to `sync`) in order to enable it., +, +[float], +++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true -Des.script.disable_dynamic=false %s', +++ b/dev-tools/es_release_notes.pl, +my $User_Repo  = 'elasticsearch/elasticsearch/';, +my @Groups       = qw(breaking feature enhancement bug regression doc test);, +        my $header = $issue->{title} =~ s/^([^:]+):\s+// ? $1 : '';, +++ b/docs/community/monitoring.asciidoc, +++ b/docs/reference/api-conventions.asciidoc, +The *elasticsearch* REST APIs are exposed using:, +, +* <<modules-http,JSON over HTTP>>,, +* <<modules-thrift,thrift>>,, +* <<modules-memcached,memcached>>., +++ b/docs/reference/docs/delete-by-query.asciidoc, +[[replication-type]], +=== Replication Type, +, +The replication of the operation can be done in an asynchronous manner, +to the replicas (the operation will return once it has be executed on, +the primary shard). The `replication` parameter can be set to `async`, +(defaults to `sync`) in order to enable it., +, +[float], +++ b/docs/reference/docs/delete.asciidoc, +[[delete-replication]], +=== Replication Type, +, +The replication of the operation can be done in an asynchronous manner, +to the replicas (the operation will return once it has be executed on, +the primary shard). The `replication` parameter can be set to `async`, +(defaults to `sync`) in order to enable it., +, +[float], +++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true -Des.script.disable_dynamic=false %s', +++ b/dev-tools/es_release_notes.pl, +my $User_Repo  = 'elasticsearch/elasticsearch/';, +my @Groups       = qw(breaking feature enhancement bug regression doc test);, +        my $header = $issue->{title} =~ s/^([^:]+):\s+// ? $1 : '';, +++ b/docs/community/monitoring.asciidoc, +++ b/docs/reference/api-conventions.asciidoc, +The *elasticsearch* REST APIs are exposed using:, +, +* <<modules-http,JSON over HTTP>>,, +* <<modules-thrift,thrift>>,, +* <<modules-memcached,memcached>>., +++ b/docs/reference/docs/delete-by-query.asciidoc, +[[replication-type]], +=== Replication Type]