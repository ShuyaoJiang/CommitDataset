[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +, +        if (System.getProperty("tests.rest.cluster") == null) {, +            if (System.getProperty("tests.cluster") != null) {, +                throw new IllegalArgumentException("tests.rest.cluster and tests.cluster must both be null or non-null"), +            }, +        } else {, +            if (System.getProperty("tests.cluster") == null) {, +                throw new IllegalArgumentException("tests.rest.cluster and tests.cluster must both be null or non-null"), +            }, +            // an external cluster was specified and all responsibility for cluster configuration is taken by the user, +            runner.systemProperty('tests.rest.cluster', System.getProperty("tests.rest.cluster")), +            runner.systemProperty('test.cluster', System.getProperty("tests.cluster")), +        }, +            // only create the cluster if needed as otherwise an external cluster to use was specified, +            if (System.getProperty("tests.rest.cluster") == null) {, +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +, +        if (System.getProperty("tests.rest.cluster") == null) {, +            if (System.getProperty("tests.cluster") != null) {, +                throw new IllegalArgumentException("tests.rest.cluster and tests.cluster must both be null or non-null"), +            }, +        } else {, +            if (System.getProperty("tests.cluster") == null) {, +                throw new IllegalArgumentException("tests.rest.cluster and tests.cluster must both be null or non-null"), +            }, +            // an external cluster was specified and all responsibility for cluster configuration is taken by the user, +            runner.systemProperty('tests.rest.cluster', System.getProperty("tests.rest.cluster")), +            runner.systemProperty('test.cluster', System.getProperty("tests.cluster")), +        }, +            // only create the cluster if needed as otherwise an external cluster to use was specified, +            if (System.getProperty("tests.rest.cluster") == null) {, +            }, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +import java.io.ByteArrayInputStream;, +                // pin is a input stream to the public key in ASCII-Armor format (RFC4880); the Armor data is in RFC2045 format, +                InputStream pin = getPublicKey()) {, +            final List<String> lines =, +                    new BufferedReader(new InputStreamReader(pin, StandardCharsets.UTF_8)).lines().collect(Collectors.toList());, +            // skip armor headers and possible blank line, +            int index = 1;, +            for (; index < lines.size(); index++) {, +                if (lines.get(index).matches(".*: .*") == false && lines.get(index).matches("\\s*") == false) {, +                    break;, +                }, +            }, +            final byte[] armoredData =, +                    lines.subList(index, lines.size() - 1).stream().collect(Collectors.joining("\n")).getBytes(StandardCharsets.UTF_8);, +            final InputStream ain = Base64.getMimeDecoder().wrap(new ByteArrayInputStream(armoredData));, +            final PGPPublicKeyRingCollection collection = new PGPPublicKeyRingCollection(ain, new JcaKeyFingerprintCalculator());, +        return InstallPluginCommand.class.getResourceAsStream("/public_key.asc");, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +, +        if (System.getProperty("tests.rest.cluster") == null) {, +            if (System.getProperty("tests.cluster") != null) {, +                throw new IllegalArgumentException("tests.rest.cluster and tests.cluster must both be null or non-null"), +            }, +        } else {, +            if (System.getProperty("tests.cluster") == null) {, +                throw new IllegalArgumentException("tests.rest.cluster and tests.cluster must both be null or non-null"), +            }, +            // an external cluster was specified and all responsibility for cluster configuration is taken by the user, +            runner.systemProperty('tests.rest.cluster', System.getProperty("tests.rest.cluster")), +            runner.systemProperty('test.cluster', System.getProperty("tests.cluster")), +        }, +            // only create the cluster if needed as otherwise an external cluster to use was specified, +            if (System.getProperty("tests.rest.cluster") == null) {, +            }, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +import java.io.ByteArrayInputStream;, +                // pin is a input stream to the public key in ASCII-Armor format (RFC4880); the Armor data is in RFC2045 format, +                InputStream pin = getPublicKey()) {, +            final List<String> lines =, +                    new BufferedReader(new InputStreamReader(pin, StandardCharsets.UTF_8)).lines().collect(Collectors.toList());, +            // skip armor headers and possible blank line, +            int index = 1;, +            for (; index < lines.size(); index++) {, +                if (lines.get(index).matches(".*: .*") == false && lines.get(index).matches("\\s*") == false) {, +                    break;, +                }, +            }, +            final byte[] armoredData =, +                    lines.subList(index, lines.size() - 1).stream().collect(Collectors.joining("\n")).getBytes(StandardCharsets.UTF_8);, +            final InputStream ain = Base64.getMimeDecoder().wrap(new ByteArrayInputStream(armoredData));, +            final PGPPublicKeyRingCollection collection = new PGPPublicKeyRingCollection(ain, new JcaKeyFingerprintCalculator());, +        return InstallPluginCommand.class.getResourceAsStream("/public_key.asc");, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +, +        if (System.getProperty("tests.rest.cluster") == null) {, +            if (System.getProperty("tests.cluster") != null) {, +                throw new IllegalArgumentException("tests.rest.cluster and tests.cluster must both be null or non-null"), +            }, +        } else {, +            if (System.getProperty("tests.cluster") == null) {, +                throw new IllegalArgumentException("tests.rest.cluster and tests.cluster must both be null or non-null"), +            }, +            // an external cluster was specified and all responsibility for cluster configuration is taken by the user, +            runner.systemProperty('tests.rest.cluster', System.getProperty("tests.rest.cluster"))]