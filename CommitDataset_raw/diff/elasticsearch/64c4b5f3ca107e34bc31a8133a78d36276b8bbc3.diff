[+++ b/docs/reference/query-dsl/function-score-query.asciidoc, +++ b/docs/reference/query-dsl/function-score-query.asciidoc, +++ b/test/build.gradle, +  // the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/docs/reference/query-dsl/function-score-query.asciidoc, +++ b/test/build.gradle, +  // the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/build.gradle, +// the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/docs/reference/query-dsl/function-score-query.asciidoc, +++ b/test/build.gradle, +  // the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/build.gradle, +// the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/src/main/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +     * we don't know which codesources belong to which plugin, so just remove the permission from key codebases, +++ b/docs/reference/query-dsl/function-score-query.asciidoc, +++ b/test/build.gradle, +  // the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/build.gradle, +// the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/src/main/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +     * we don't know which codesources belong to which plugin, so just remove the permission from key codebases, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java, +    @SuppressWarnings("varargs") // due to type erasure, the varargs type is non-reifiable, which causes this warning, +     * the cluster. These settings will also override any other settings the internal cluster might, +            return "a test plugin that registers index.tests.seed as an index setting";, +        // Deleting indices is going to clear search contexts implicitly so we, +++ b/docs/reference/query-dsl/function-score-query.asciidoc, +++ b/test/build.gradle, +  // the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/build.gradle, +// the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/src/main/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +     * we don't know which codesources belong to which plugin, so just remove the permission from key codebases, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java, +    @SuppressWarnings("varargs") // due to type erasure, the varargs type is non-reifiable, which causes this warning, +     * the cluster. These settings will also override any other settings the internal cluster might, +            return "a test plugin that registers index.tests.seed as an index setting";, +        // Deleting indices is going to clear search contexts implicitly so we, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java, +        // only the cluster name. This allows us to have overridden properties for plugins and the version to use., +    @SuppressWarnings("varargs") // due to type erasure, the varargs type is non-reifiable, which causes this warning, +++ b/docs/reference/query-dsl/function-score-query.asciidoc, +++ b/test/build.gradle, +  // the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/build.gradle, +// the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/src/main/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +     * we don't know which codesources belong to which plugin, so just remove the permission from key codebases, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java, +    @SuppressWarnings("varargs") // due to type erasure, the varargs type is non-reifiable, which causes this warning, +     * the cluster. These settings will also override any other settings the internal cluster might, +            return "a test plugin that registers index.tests.seed as an index setting";, +        // Deleting indices is going to clear search contexts implicitly so we, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java, +        // only the cluster name. This allows us to have overridden properties for plugins and the version to use., +    @SuppressWarnings("varargs") // due to type erasure, the varargs type is non-reifiable, which causes this warning, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java, +    /** called after a test is finished, but only if successful */, +++ b/docs/reference/query-dsl/function-score-query.asciidoc, +++ b/test/build.gradle, +  // the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/build.gradle, +// the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/src/main/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +     * we don't know which codesources belong to which plugin, so just remove the permission from key codebases, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java, +    @SuppressWarnings("varargs") // due to type erasure, the varargs type is non-reifiable, which causes this warning, +     * the cluster. These settings will also override any other settings the internal cluster might, +            return "a test plugin that registers index.tests.seed as an index setting";, +        // Deleting indices is going to clear search contexts implicitly so we, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java, +        // only the cluster name. This allows us to have overridden properties for plugins and the version to use., +    @SuppressWarnings("varargs") // due to type erasure, the varargs type is non-reifiable, which causes this warning, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java, +    /** called after a test is finished, but only if successful */, +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalSettingsPlugin.java, +        return "a plugin that allows to set values for internal settings which are can't be set via the ordinary API without this plugin installed";, +++ b/docs/reference/query-dsl/function-score-query.asciidoc, +++ b/test/build.gradle, +  // the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/build.gradle, +// the main files are actually test files, so use the appropriate forbidden api sigs, +++ b/test/framework/src/main/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +     * we don't know which codesources belong to which plugin, so just remove the permission from key codebases, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java, +    @SuppressWarnings("varargs") // due to type erasure, the varargs type is non-reifiable, which causes this warning, +     * the cluster. These settings will also override any other settings the internal cluster might, +            return "a test plugin that registers index.tests.seed as an index setting";, +        // Deleting indices is going to clear search contexts implicitly so we, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java, +        // only the cluster name. This allows us to have overridden properties for plugins and the version to use., +    @SuppressWarnings("varargs") // due to type erasure, the varargs type is non-reifiable, which causes this warning, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java, +    /** called after a test is finished, but only if successful */, +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalSettingsPlugin.java, +        return "a plugin that allows to set values for internal settings which are can't be set via the ordinary API without this plugin installed";, +++ b/test/framework/src/main/java/org/elasticsearch/test/disruption/BlockClusterStateProcessing.java, +        assert success : "startDisrupting called without waiting on stopDisrupting to complete";]