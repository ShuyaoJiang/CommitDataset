[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +, +import org.elasticsearch.search.aggregations.AggregationParseElement;, +import org.elasticsearch.search.aggregations.AggregationPhase;, +import org.elasticsearch.search.aggregations.Aggregator;, +import org.elasticsearch.search.aggregations.AggregatorParsers;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristicParser;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristicParserMapper;, +import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristicStreams;, +import org.elasticsearch.search.aggregations.bucket.terms.DoubleTerms;, +import org.elasticsearch.search.aggregations.bucket.terms.LongTerms;, +import org.elasticsearch.search.aggregations.bucket.terms.StringTerms;, +import org.elasticsearch.search.aggregations.bucket.terms.TermsParser;, +import org.elasticsearch.search.aggregations.bucket.terms.UnmappedTerms;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.MovAvgModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.MovAvgModelParserMapper;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.MovAvgModelStreams;, +import org.elasticsearch.search.highlight.HighlightPhase;, +import org.elasticsearch.search.highlight.Highlighter;, +import org.elasticsearch.search.highlight.Highlighters;, +import org.elasticsearch.search.suggest.SuggestParseElement;, +import org.elasticsearch.search.suggest.SuggestPhase;, +import org.elasticsearch.search.suggest.Suggester;, +import org.elasticsearch.search.suggest.Suggesters;, +        configureSearch();, +        configureAggs();, +        configureHighlighters();, +        configureSuggesters();, +        configureFunctionScore();, +        configureFetchSubPhase();, +    protected void configureFetchSubPhase() {, +        Multibinder<FetchSubPhase> fetchSubPhaseMultibinder = Multibinder.newSetBinder(binder(), FetchSubPhase.class);, +        fetchSubPhaseMultibinder.addBinding().to(ExplainFetchSubPhase.class);, +        fetchSubPhaseMultibinder.addBinding().to(FieldDataFieldsFetchSubPhase.class);, +        fetchSubPhaseMultibinder.addBinding().to(ScriptFieldsFetchSubPhase.class);, +        fetchSubPhaseMultibinder.addBinding().to(FetchSourceSubPhase.class);, +        fetchSubPhaseMultibinder.addBinding().to(VersionFetchSubPhase.class);, +        fetchSubPhaseMultibinder.addBinding().to(MatchedQueriesFetchSubPhase.class);, +        fetchSubPhaseMultibinder.addBinding().to(HighlightPhase.class);, +        for (Class<? extends FetchSubPhase> clazz : fetchSubPhases) {, +            fetchSubPhaseMultibinder.addBinding().to(clazz);, +        }, +        bind(InnerHitsFetchSubPhase.class).asEagerSingleton();, +    }, +, +    protected void configureSuggesters() {, +        Multibinder<Suggester> suggesterMultibinder = Multibinder.newSetBinder(binder(), Suggester.class);, +        for (Class<? extends Suggester> clazz : suggesters) {, +            suggesterMultibinder.addBinding().to(clazz);, +        }, +, +        bind(SuggestParseElement.class).asEagerSingleton();, +        bind(SuggestPhase.class).asEagerSingleton();, +        bind(Suggesters.class).asEagerSingleton();, +    }, +, +    protected void configureFunctionScore() {, +        Multibinder<ScoreFunctionParser> parserMapBinder = Multibinder.newSetBinder(binder(), ScoreFunctionParser.class);, +        for (Class<? extends ScoreFunctionParser> clazz : functionScoreParsers) {, +            parserMapBinder.addBinding().to(clazz);, +        }, +        bind(ScoreFunctionParserMapper.class);, +    }, +, +    protected void configureHighlighters() {, +        Multibinder<Highlighter> multibinder = Multibinder.newSetBinder(binder(), Highlighter.class);, +        for (Class<? extends Highlighter> highlighter : highlighters) {, +            multibinder.addBinding().to(highlighter);, +        }, +        bind(Highlighters.class).asEagerSingleton();, +    }, +, +    protected void configureAggs() {, +    protected void configureSearch() {, +        // configure search private classes..., +        bind(DfsPhase.class).asEagerSingleton();, +        bind(QueryPhase.class).asEagerSingleton();, +        bind(SearchPhaseController.class).asEagerSingleton();, +        bind(FetchPhase.class).asEagerSingleton();, +        bind(SearchServiceTransportAction.class).asEagerSingleton();, +        bind(MoreLikeThisFetchService.class).asEagerSingleton();, +        // search service -- testing only!, +        String impl = settings.get(SEARCH_SERVICE_IMPL);, +        if (impl == null) {, +            bind(SearchService.class).asEagerSingleton();, +        } else {, +            Class<? extends SearchService> implClass = Classes.loadClass(getClass().getClassLoader(), impl);, +            bind(SearchService.class).to(implClass).asEagerSingleton();]