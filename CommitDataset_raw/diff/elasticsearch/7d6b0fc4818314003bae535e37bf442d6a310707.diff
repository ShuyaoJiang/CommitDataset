[+++ /dev/null, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search.aggregations.metrics;, +, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.search.Scorer;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.script.*;, +import org.elasticsearch.script.ScriptService.ScriptType;, +import org.elasticsearch.search.aggregations.bucket.global.Global;, +import org.elasticsearch.search.aggregations.metrics.valuecount.ValueCount;, +import org.elasticsearch.search.lookup.LeafSearchLookup;, +import org.elasticsearch.search.lookup.SearchLookup;, +import org.elasticsearch.test.ESIntegTestCase;, +, +import java.io.IOException;, +import java.util.*;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.count;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.global;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.notNullValue;, +, +/**, + *, + */, +@ESIntegTestCase.SuiteScopeTestCase, +public class ValueCountIT extends ESIntegTestCase {, +    @Override, +    public void setupSuiteScopeCluster() throws Exception {, +        createIndex("idx");, +        createIndex("idx_unmapped");, +        for (int i = 0; i < 10; i++) {, +            client().prepareIndex("idx", "type", ""+i).setSource(jsonBuilder(), +                    .startObject(), +                    .field("value", i+1), +                    .startArray("values").value(i+2).value(i+3).endArray(), +                    .endObject()), +                    .execute().actionGet();, +        }, +        client().admin().indices().prepareFlush().execute().actionGet();, +        client().admin().indices().prepareRefresh().execute().actionGet();, +        ensureSearchable();, +    }, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return Collections.singletonList(FieldValueScriptPlugin.class);, +    }, +, +    public void testUnmapped() throws Exception {, +        SearchResponse searchResponse = client().prepareSearch("idx_unmapped"), +                .setQuery(matchAllQuery()), +                .addAggregation(count("count").field("value")), +                .execute().actionGet();, +, +        assertThat(searchResponse.getHits().getTotalHits(), equalTo(0l));, +, +        ValueCount valueCount = searchResponse.getAggregations().get("count");, +        assertThat(valueCount, notNullValue());, +        assertThat(valueCount.getName(), equalTo("count"));, +        assertThat(valueCount.getValue(), equalTo(0l));, +    }, +, +    public void testSingleValuedField() throws Exception {, +        SearchResponse searchResponse = client().prepareSearch("idx"), +                .setQuery(matchAllQuery()), +                .addAggregation(count("count").field("value")), +                .execute().actionGet();, +, +        assertHitCount(searchResponse, 10);, +, +        ValueCount valueCount = searchResponse.getAggregations().get("count");, +        assertThat(valueCount, notNullValue());, +        assertThat(valueCount.getName(), equalTo("count"));, +        assertThat(valueCount.getValue(), equalTo(10l));, +    }]