[+++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +*   Attempts to generate multi-term phrase queries against non-text fields, +    with a custom analyzer will now throw an exception, +, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +*   Attempts to generate multi-term phrase queries against non-text fields, +    with a custom analyzer will now throw an exception, +, +++ b/server/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +            try {, +                checkForPositions(field);, +            catch (IllegalArgumentException | IllegalStateException e) {, +        @Override, +        protected Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {, +            try {, +                checkForPositions(field);, +                return mapper.multiPhraseQuery(field, stream, slop, enablePositionIncrements);, +            catch (IllegalArgumentException | IllegalStateException e) {, +                if (lenient) {, +                    return newLenientFieldQuery(field, e);, +                }, +                throw e;, +            }, +        }, +, +        private void checkForPositions(String field) {, +            if (hasPositions(mapper) == false) {, +                throw new IllegalStateException("field:[" + field + "] was indexed without position data; cannot run PhraseQuery");, +            }, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +*   Attempts to generate multi-term phrase queries against non-text fields, +    with a custom analyzer will now throw an exception, +, +++ b/server/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +            try {, +                checkForPositions(field);, +            catch (IllegalArgumentException | IllegalStateException e) {, +        @Override, +        protected Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {, +            try {, +                checkForPositions(field);, +                return mapper.multiPhraseQuery(field, stream, slop, enablePositionIncrements);, +            catch (IllegalArgumentException | IllegalStateException e) {, +                if (lenient) {, +                    return newLenientFieldQuery(field, e);, +                }, +                throw e;, +            }, +        }, +, +        private void checkForPositions(String field) {, +            if (hasPositions(mapper) == false) {, +                throw new IllegalStateException("field:[" + field + "] was indexed without position data; cannot run PhraseQuery");, +            }, +++ b/server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java, +        if (randomBoolean() && fieldName.equals(STRING_FIELD_NAME)) {, +    public void testPhraseOnFieldWithNoTerms() {, +        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(DATE_FIELD_NAME, "three term phrase");, +        matchQuery.analyzer("whitespace");, +        expectThrows(IllegalArgumentException.class, () -> matchQuery.doToQuery(createShardContext()));, +    }, +, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +*   Attempts to generate multi-term phrase queries against non-text fields, +    with a custom analyzer will now throw an exception, +, +++ b/server/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +            try {, +                checkForPositions(field);, +            catch (IllegalArgumentException | IllegalStateException e) {, +        @Override, +        protected Query analyzeMultiPhrase(String field, TokenStream stream, int slop) throws IOException {, +            try {, +                checkForPositions(field);, +                return mapper.multiPhraseQuery(field, stream, slop, enablePositionIncrements);, +            catch (IllegalArgumentException | IllegalStateException e) {, +                if (lenient) {, +                    return newLenientFieldQuery(field, e);, +                }, +                throw e;, +            }, +        }, +, +        private void checkForPositions(String field) {, +            if (hasPositions(mapper) == false) {, +                throw new IllegalStateException("field:[" + field + "] was indexed without position data; cannot run PhraseQuery");, +            }, +++ b/server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java, +        if (randomBoolean() && fieldName.equals(STRING_FIELD_NAME)) {, +    public void testPhraseOnFieldWithNoTerms() {, +        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(DATE_FIELD_NAME, "three term phrase");, +        matchQuery.analyzer("whitespace");, +        expectThrows(IllegalArgumentException.class, () -> matchQuery.doToQuery(createShardContext()));, +    }, +, +++ b/server/src/test/java/org/elasticsearch/index/query/MatchPhraseQueryBuilderTests.java, +        if (randomBoolean() && fieldName.equals(STRING_FIELD_NAME)) {, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +*   Attempts to generate multi-term phrase queries against non-text fields, +    with a custom analyzer will now throw an exception]