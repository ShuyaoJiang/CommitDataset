[+++ b/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +    /**, +     * Check that a directory exists, is a directory and is readable, +     * by the current user, +     */, +    public static boolean isAccessibleDirectory(File directory, ESLogger logger) {, +        assert directory != null && logger != null;, +, +        if (!directory.exists()) {, +            logger.debug("[{}] directory does not exist.", directory.getAbsolutePath());, +            return false;, +        }, +        if (!directory.isDirectory()) {, +            logger.debug("[{}] should be a directory but is not.", directory.getAbsolutePath());, +            return false;, +        }, +        if (!directory.canRead()) {, +            logger.debug("[{}] directory is not readable.", directory.getAbsolutePath());, +            return false;, +        }, +        return true;, +    }, +, +++ b/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +    /**, +     * Check that a directory exists, is a directory and is readable, +     * by the current user, +     */, +    public static boolean isAccessibleDirectory(File directory, ESLogger logger) {, +        assert directory != null && logger != null;, +, +        if (!directory.exists()) {, +            logger.debug("[{}] directory does not exist.", directory.getAbsolutePath());, +            return false;, +        }, +        if (!directory.isDirectory()) {, +            logger.debug("[{}] should be a directory but is not.", directory.getAbsolutePath());, +            return false;, +        }, +        if (!directory.canRead()) {, +            logger.debug("[{}] directory is not readable.", directory.getAbsolutePath());, +            return false;, +        }, +        return true;, +    }, +, +++ b/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import static org.elasticsearch.common.io.FileSystemUtils.isAccessibleDirectory;, +, +        File pluginsDirectory = environment.pluginsFile();, +        if (!isAccessibleDirectory(pluginsDirectory, logger)) {, +        for (File plugin : pluginsDirectory.listFiles()) {, +            // We check that subdirs are directories and readable, +            if (!isAccessibleDirectory(plugin, logger)) {, +                continue;, +, +            logger.trace("--- adding plugin [{}]", plugin.getAbsolutePath());, +, +                addURL.invoke(classLoader, plugin.toURI().toURL());, +                if (plugin.listFiles() != null) {, +                    libFiles.addAll(Arrays.asList(plugin.listFiles()));, +                File libLocation = new File(plugin, "lib");, +                logger.warn("failed to add plugin [" + plugin + "]", e);, +                    boolean isSite = isAccessibleDirectory(siteFile, logger);, +                if (isAccessibleDirectory(sitePluginDir, logger)) {, +        return isAccessibleDirectory(sitePluginDir, logger);]