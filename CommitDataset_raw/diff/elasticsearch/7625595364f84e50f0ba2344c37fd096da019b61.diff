[+++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/cloud/aws/AwsEc2Service.java, +import org.elasticsearch.common.component.LifecycleComponent;, +public interface AwsEc2Service extends LifecycleComponent<AwsEc2Service> {, +    final class CLOUD_AWS {, +        public static final String KEY = "cloud.aws.access_key";, +        public static final String SECRET = "cloud.aws.secret_key";, +        public static final String PROTOCOL = "cloud.aws.protocol";, +        public static final String PROXY_HOST = "cloud.aws.proxy.host";, +        public static final String PROXY_PORT = "cloud.aws.proxy.port";, +        public static final String PROXY_USERNAME = "cloud.aws.proxy.username";, +        public static final String PROXY_PASSWORD = "cloud.aws.proxy.password";, +        public static final String SIGNER = "cloud.aws.signer";, +        public static final String REGION = "cloud.aws.region";, +    final class CLOUD_EC2 {, +        public static final String KEY = "cloud.aws.ec2.access_key";, +        public static final String SECRET = "cloud.aws.ec2.secret_key";, +        public static final String PROTOCOL = "cloud.aws.ec2.protocol";, +        public static final String PROXY_HOST = "cloud.aws.ec2.proxy.host";, +        public static final String PROXY_PORT = "cloud.aws.ec2.proxy.port";, +        public static final String PROXY_USERNAME = "cloud.aws.ec2.proxy.username";, +        public static final String PROXY_PASSWORD = "cloud.aws.ec2.proxy.password";, +        public static final String SIGNER = "cloud.aws.ec2.signer";, +        public static final String ENDPOINT = "cloud.aws.ec2.endpoint";, +    final class DISCOVERY_EC2 {, +        public static final String HOST_TYPE = "discovery.ec2.host_type";, +        public static final String ANY_GROUP = "discovery.ec2.any_group";, +        public static final String GROUPS = "discovery.ec2.groups";, +        public static final String TAG_PREFIX = "discovery.ec2.tag.";, +        public static final String AVAILABILITY_ZONES = "discovery.ec2.availability_zones";, +        public static final String NODE_CACHE_TIME = "discovery.ec2.node_cache_time";, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/cloud/aws/AwsEc2Service.java, +import org.elasticsearch.common.component.LifecycleComponent;, +public interface AwsEc2Service extends LifecycleComponent<AwsEc2Service> {, +    final class CLOUD_AWS {, +        public static final String KEY = "cloud.aws.access_key";, +        public static final String SECRET = "cloud.aws.secret_key";, +        public static final String PROTOCOL = "cloud.aws.protocol";, +        public static final String PROXY_HOST = "cloud.aws.proxy.host";, +        public static final String PROXY_PORT = "cloud.aws.proxy.port";, +        public static final String PROXY_USERNAME = "cloud.aws.proxy.username";, +        public static final String PROXY_PASSWORD = "cloud.aws.proxy.password";, +        public static final String SIGNER = "cloud.aws.signer";, +        public static final String REGION = "cloud.aws.region";, +    final class CLOUD_EC2 {, +        public static final String KEY = "cloud.aws.ec2.access_key";, +        public static final String SECRET = "cloud.aws.ec2.secret_key";, +        public static final String PROTOCOL = "cloud.aws.ec2.protocol";, +        public static final String PROXY_HOST = "cloud.aws.ec2.proxy.host";, +        public static final String PROXY_PORT = "cloud.aws.ec2.proxy.port";, +        public static final String PROXY_USERNAME = "cloud.aws.ec2.proxy.username";, +        public static final String PROXY_PASSWORD = "cloud.aws.ec2.proxy.password";, +        public static final String SIGNER = "cloud.aws.ec2.signer";, +        public static final String ENDPOINT = "cloud.aws.ec2.endpoint";, +    final class DISCOVERY_EC2 {, +        public static final String HOST_TYPE = "discovery.ec2.host_type";, +        public static final String ANY_GROUP = "discovery.ec2.any_group";, +        public static final String GROUPS = "discovery.ec2.groups";, +        public static final String TAG_PREFIX = "discovery.ec2.tag.";, +        public static final String AVAILABILITY_ZONES = "discovery.ec2.availability_zones";, +        public static final String NODE_CACHE_TIME = "discovery.ec2.node_cache_time";, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/cloud/aws/AwsEc2ServiceImpl.java, +import com.amazonaws.Protocol;, +, +import java.util.Locale;, +        String protocol = settings.get(CLOUD_EC2.PROTOCOL, settings.get(CLOUD_AWS.PROTOCOL, "https")).toLowerCase(Locale.ROOT);, +        if ("http".equals(protocol)) {, +            clientConfiguration.setProtocol(Protocol.HTTP);, +        } else if ("https".equals(protocol)) {, +            clientConfiguration.setProtocol(Protocol.HTTPS);, +        } else {, +            throw new IllegalArgumentException("No protocol supported [" + protocol + "], can either be [http] or [https]");, +        }, +        String account = settings.get(CLOUD_EC2.KEY, settings.get(CLOUD_AWS.KEY));, +        String key = settings.get(CLOUD_EC2.SECRET, settings.get(CLOUD_AWS.SECRET));, +        String proxyHost = settings.get(CLOUD_AWS.PROXY_HOST);, +        proxyHost = settings.get(CLOUD_EC2.PROXY_HOST, proxyHost);, +            String portString = settings.get(CLOUD_AWS.PROXY_PORT, "80");, +            portString = settings.get(CLOUD_EC2.PROXY_PORT, portString);, +            Integer proxyPort;, +            try {, +                proxyPort = Integer.parseInt(portString, 10);, +            } catch (NumberFormatException ex) {, +                throw new IllegalArgumentException("The configured proxy port value [" + portString + "] is invalid", ex);, +            }, +            String proxyUsername = settings.get(CLOUD_EC2.PROXY_USERNAME, settings.get(CLOUD_AWS.PROXY_USERNAME));, +            String proxyPassword = settings.get(CLOUD_EC2.PROXY_PASSWORD, settings.get(CLOUD_AWS.PROXY_PASSWORD));, +        String awsSigner = settings.get(CLOUD_EC2.SIGNER, settings.get(CLOUD_AWS.SIGNER));, +        if (awsSigner != null) {, +            try {, +            } catch (IllegalArgumentException e) {, +                logger.warn("wrong signer set for [{}] or [{}]: [{}]",, +                        CLOUD_EC2.SIGNER, CLOUD_AWS.SIGNER, awsSigner);, +            }, +        if (account == null && key == null) {, +                    new StaticCredentialsProvider(new BasicAWSCredentials(account, key)), +        if (settings.get(CLOUD_EC2.ENDPOINT) != null) {, +            String endpoint = settings.get(CLOUD_EC2.ENDPOINT);, +        } else if (settings.get(CLOUD_AWS.REGION) != null) {, +            String region = settings.get(CLOUD_AWS.REGION).toLowerCase(Locale.ROOT);, +            String endpoint;]