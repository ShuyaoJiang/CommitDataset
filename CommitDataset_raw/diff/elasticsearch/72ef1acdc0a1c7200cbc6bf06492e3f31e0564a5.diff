[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/scroll/ScrollDataExtractor.java, +import org.elasticsearch.script.Script;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.xpack.ml.utils.DomainSplitFunction;, +import java.util.HashMap;, +import java.util.Map;, +        context.scriptFields.forEach(f -> searchRequestBuilder.addScriptField(, +                f.fieldName(), injectDomainSplit(f.script())));, +    private Script injectDomainSplit(Script script) {, +        String code = script.getIdOrCode();, +        if (code.contains("domainSplit(")) {, +            String modifiedCode = DomainSplitFunction.function + "\n" + script;, +            Map<String, Object> modifiedParams = new HashMap<>(script.getParams().size(), +                    + DomainSplitFunction.params.size());, +, +            modifiedParams.putAll(script.getParams());, +            modifiedParams.putAll(DomainSplitFunction.params);, +, +            return new Script(script.getType(), script.getLang(),, +                    modifiedCode, modifiedParams);, +        }, +        return script;, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/scroll/ScrollDataExtractor.java, +import org.elasticsearch.script.Script;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.xpack.ml.utils.DomainSplitFunction;, +import java.util.HashMap;, +import java.util.Map;, +        context.scriptFields.forEach(f -> searchRequestBuilder.addScriptField(, +                f.fieldName(), injectDomainSplit(f.script())));, +    private Script injectDomainSplit(Script script) {, +        String code = script.getIdOrCode();, +        if (code.contains("domainSplit(")) {, +            String modifiedCode = DomainSplitFunction.function + "\n" + script;, +            Map<String, Object> modifiedParams = new HashMap<>(script.getParams().size(), +                    + DomainSplitFunction.params.size());, +, +            modifiedParams.putAll(script.getParams());, +            modifiedParams.putAll(DomainSplitFunction.params);, +, +            return new Script(script.getType(), script.getLang(),, +                    modifiedCode, modifiedParams);, +        }, +        return script;, +    }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfigTests.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/scroll/ScrollDataExtractor.java, +import org.elasticsearch.script.Script;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.xpack.ml.utils.DomainSplitFunction;, +import java.util.HashMap;, +import java.util.Map;, +        context.scriptFields.forEach(f -> searchRequestBuilder.addScriptField(, +                f.fieldName(), injectDomainSplit(f.script())));, +    private Script injectDomainSplit(Script script) {, +        String code = script.getIdOrCode();, +        if (code.contains("domainSplit(")) {, +            String modifiedCode = DomainSplitFunction.function + "\n" + script;, +            Map<String, Object> modifiedParams = new HashMap<>(script.getParams().size(), +                    + DomainSplitFunction.params.size());, +, +            modifiedParams.putAll(script.getParams());, +            modifiedParams.putAll(DomainSplitFunction.params);, +, +            return new Script(script.getType(), script.getLang(),, +                    modifiedCode, modifiedParams);, +        }, +        return script;, +    }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfigTests.java, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/datafeed/extractor/scroll/ScrollDataExtractorTests.java, +import org.elasticsearch.script.Script;, +            this(createContext(start, end));, +        }, +, +        TestDataExtractor(ScrollDataExtractorContext context) {, +            super(client, context);, +    public void testDomainSplitScriptField() throws IOException {, +, +        SearchSourceBuilder.ScriptField withoutSplit = new SearchSourceBuilder.ScriptField(, +                "script1", new Script("return 1+1;"), false);, +        SearchSourceBuilder.ScriptField withSplit = new SearchSourceBuilder.ScriptField(, +                "script2", new Script("return domainSplit('foo.com', params);"), false);, +, +        List<SearchSourceBuilder.ScriptField> sFields = Arrays.asList(withoutSplit, withSplit);, +        ScrollDataExtractorContext context =  new ScrollDataExtractorContext(jobId, extractedFields, indexes,, +                types, query, sFields, scrollSize, 1000, 2000);, +, +        TestDataExtractor extractor = new TestDataExtractor(context);, +, +        SearchResponse response1 = createSearchResponse(, +                Arrays.asList(1100L, 1200L),]