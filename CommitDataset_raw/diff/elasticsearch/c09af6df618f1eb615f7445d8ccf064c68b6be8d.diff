[+++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java, +import org.apache.lucene.store.IOContext;, +import org.apache.lucene.store.IndexInput;, +import org.apache.lucene.store.IndexOutput;, +import org.apache.lucene.store.RateLimiter;, +import org.elasticsearch.common.blobstore.BlobContainer;, +import org.elasticsearch.common.blobstore.BlobMetaData;, +import org.elasticsearch.common.blobstore.BlobPath;, +import org.elasticsearch.common.blobstore.BlobStore;, +import java.io.FilterInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +        public void restore() throws IOException {, +                final Store.MetadataSnapshot recoveryTargetMetadata;, +                    recoveryTargetMetadata = store.getMetadataOrEmpty();, +++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java, +import org.apache.lucene.store.IOContext;, +import org.apache.lucene.store.IndexInput;, +import org.apache.lucene.store.IndexOutput;, +import org.apache.lucene.store.RateLimiter;, +import org.elasticsearch.common.blobstore.BlobContainer;, +import org.elasticsearch.common.blobstore.BlobMetaData;, +import org.elasticsearch.common.blobstore.BlobPath;, +import org.elasticsearch.common.blobstore.BlobStore;, +import java.io.FilterInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +        public void restore() throws IOException {, +                final Store.MetadataSnapshot recoveryTargetMetadata;, +                    recoveryTargetMetadata = store.getMetadataOrEmpty();, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +     * Returns a new MetadataSnapshot for the latest commit in this store or, +     * an empty snapshot if no index exists or can not be opened., +     * @throws CorruptIndexException if the lucene index is corrupted. This can be caused by a checksum mismatch or an, +     * unexpected exception when opening the index reading the segments file., +     */, +    public MetadataSnapshot getMetadataOrEmpty() throws IOException {, +        try {, +            return getMetadata(null);, +        } catch (IndexNotFoundException ex) {, +           // that's fine - happens all the time no need to log, +        } catch (FileNotFoundException | NoSuchFileException ex) {, +           logger.info("Failed to open / find files while reading metadata snapshot");, +        }, +        return MetadataSnapshot.EMPTY;, +    }, +, +    /**, +     *, +     * @throws CorruptIndexException if the lucene index is corrupted. This can be caused by a checksum mismatch or an, +     * unexpected exception when opening the index reading the segments file., +     * @throws FileNotFoundException if one or more files referenced by a commit are not present., +     * @throws NoSuchFileException if one or more files referenced by a commit are not present., +     * @throws IndexNotFoundException if no index / valid commit-point can be found in this store, +     *, +     * @throws CorruptIndexException if the lucene index is corrupted. This can be caused by a checksum mismatch or an, +     * unexpected exception when opening the index reading the segments file., +     * @throws FileNotFoundException if one or more files referenced by a commit are not present., +     * @throws NoSuchFileException if one or more files referenced by a commit are not present., +     * @throws IndexNotFoundException if the commit point can't be found in this store, +    /**, +     * Reads a MetadataSnapshot from the given index locations or returns an empty snapshot if it can't be read., +     * @throws IOException if the index we try to read is corrupted, +     */, +        } catch (IndexNotFoundException ex) {, +            // that's fine - happens all the time no need to log, +        } catch (FileNotFoundException | NoSuchFileException ex) {, +            logger.info("Failed to open / find files while reading metadata snapshot");, +        return MetadataSnapshot.EMPTY;, +++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java, +import org.apache.lucene.store.IOContext;, +import org.apache.lucene.store.IndexInput;, +import org.apache.lucene.store.IndexOutput;, +import org.apache.lucene.store.RateLimiter;, +import org.elasticsearch.common.blobstore.BlobContainer;, +import org.elasticsearch.common.blobstore.BlobMetaData;, +import org.elasticsearch.common.blobstore.BlobPath;, +import org.elasticsearch.common.blobstore.BlobStore;, +import java.io.FilterInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +        public void restore() throws IOException {, +                final Store.MetadataSnapshot recoveryTargetMetadata;, +                    recoveryTargetMetadata = store.getMetadataOrEmpty();, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +     * Returns a new MetadataSnapshot for the latest commit in this store or, +     * an empty snapshot if no index exists or can not be opened., +     * @throws CorruptIndexException if the lucene index is corrupted. This can be caused by a checksum mismatch or an, +     * unexpected exception when opening the index reading the segments file., +     */, +    public MetadataSnapshot getMetadataOrEmpty() throws IOException {, +        try {, +            return getMetadata(null);, +        } catch (IndexNotFoundException ex) {, +           // that's fine - happens all the time no need to log, +        } catch (FileNotFoundException | NoSuchFileException ex) {, +           logger.info("Failed to open / find files while reading metadata snapshot");]