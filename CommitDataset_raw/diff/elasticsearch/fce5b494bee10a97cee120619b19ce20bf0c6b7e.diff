[+++ b/sql/cli/src/main/java/org/elasticsearch/xpack/sql/cli/CliHttpClient.java, +                        SqlExceptionType type = SqlExceptionType.fromRemoteFailureType(failure.type());, +                        if (type == null) {, +                            return new ErrorResponse((RequestType) request.requestType(),, +                                "Sent bad type [" + failure.type() + "]. Original message is [" + failure.reason() + "]",, +                                failure.type(), failure.remoteTrace());, +                        }, +                            failure.type(), type);, +++ b/sql/cli/src/main/java/org/elasticsearch/xpack/sql/cli/CliHttpClient.java, +                        SqlExceptionType type = SqlExceptionType.fromRemoteFailureType(failure.type());, +                        if (type == null) {, +                            return new ErrorResponse((RequestType) request.requestType(),, +                                "Sent bad type [" + failure.type() + "]. Original message is [" + failure.reason() + "]",, +                                failure.type(), failure.remoteTrace());, +                        }, +                            failure.type(), type);, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/HttpClient.java, +                            SqlExceptionType type = SqlExceptionType.fromRemoteFailureType(failure.type());, +                            if (type == null) {, +                                return new ErrorResponse((RequestType) request.requestType(),, +                                    "Sent bad type [" + failure.type() + "]. Original message is [" + failure.reason() + "]",, +                                    failure.type(), failure.remoteTrace());, +                            }, +                                failure.type(), type);, +++ b/sql/cli/src/main/java/org/elasticsearch/xpack/sql/cli/CliHttpClient.java, +                        SqlExceptionType type = SqlExceptionType.fromRemoteFailureType(failure.type());, +                        if (type == null) {, +                            return new ErrorResponse((RequestType) request.requestType(),, +                                "Sent bad type [" + failure.type() + "]. Original message is [" + failure.reason() + "]",, +                                failure.type(), failure.remoteTrace());, +                        }, +                            failure.type(), type);, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/HttpClient.java, +                            SqlExceptionType type = SqlExceptionType.fromRemoteFailureType(failure.type());, +                            if (type == null) {, +                                return new ErrorResponse((RequestType) request.requestType(),, +                                    "Sent bad type [" + failure.type() + "]. Original message is [" + failure.reason() + "]",, +                                    failure.type(), failure.remoteTrace());, +                            }, +                                failure.type(), type);, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/JdbcHttpClient.java, +            throw new JdbcSQLException("Server returned error: [" + error.message + "][" + error.stack + "]");, +++ b/sql/cli/src/main/java/org/elasticsearch/xpack/sql/cli/CliHttpClient.java, +                        SqlExceptionType type = SqlExceptionType.fromRemoteFailureType(failure.type());, +                        if (type == null) {, +                            return new ErrorResponse((RequestType) request.requestType(),, +                                "Sent bad type [" + failure.type() + "]. Original message is [" + failure.reason() + "]",, +                                failure.type(), failure.remoteTrace());, +                        }, +                            failure.type(), type);, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/HttpClient.java, +                            SqlExceptionType type = SqlExceptionType.fromRemoteFailureType(failure.type());, +                            if (type == null) {, +                                return new ErrorResponse((RequestType) request.requestType(),, +                                    "Sent bad type [" + failure.type() + "]. Original message is [" + failure.reason() + "]",, +                                    failure.type(), failure.remoteTrace());, +                            }, +                                failure.type(), type);, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/JdbcHttpClient.java, +            throw new JdbcSQLException("Server returned error: [" + error.message + "][" + error.stack + "]");, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/plugin/AbstractSqlProtocolRestAction.java, +import org.elasticsearch.rest.RestResponse;, +import org.elasticsearch.rest.action.RestResponseListener;, +    protected <T> ActionListener<T> toActionListener(RestChannel channel, Function<T, Response> responseBuilder) {, +        return new RestResponseListener<T>(channel) {, +            public RestResponse buildResponse(T response) throws Exception {, +                try (BytesStreamOutput bytesStreamOutput = new BytesStreamOutput()) {, +                    try (DataOutputStream dataOutputStream = new DataOutputStream(bytesStreamOutput)) {, +                        // NOCOMMIT use the version from the client, +                        proto.writeResponse(responseBuilder.apply(response), Proto.CURRENT_VERSION, dataOutputStream);, +                    return new BytesRestResponse(OK, TEXT_CONTENT_TYPE, bytesStreamOutput.bytes());, +++ b/sql/cli/src/main/java/org/elasticsearch/xpack/sql/cli/CliHttpClient.java, +                        SqlExceptionType type = SqlExceptionType.fromRemoteFailureType(failure.type());, +                        if (type == null) {, +                            return new ErrorResponse((RequestType) request.requestType(),, +                                "Sent bad type [" + failure.type() + "]. Original message is [" + failure.reason() + "]",, +                                failure.type(), failure.remoteTrace());, +                        }, +                            failure.type(), type);, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/HttpClient.java, +                            SqlExceptionType type = SqlExceptionType.fromRemoteFailureType(failure.type());, +                            if (type == null) {, +                                return new ErrorResponse((RequestType) request.requestType(),, +                                    "Sent bad type [" + failure.type() + "]. Original message is [" + failure.reason() + "]",, +                                    failure.type(), failure.remoteTrace());, +                            }, +                                failure.type(), type);, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/JdbcHttpClient.java, +            throw new JdbcSQLException("Server returned error: [" + error.message + "][" + error.stack + "]");, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/plugin/AbstractSqlProtocolRestAction.java, +import org.elasticsearch.rest.RestResponse;, +import org.elasticsearch.rest.action.RestResponseListener;, +    protected <T> ActionListener<T> toActionListener(RestChannel channel, Function<T, Response> responseBuilder) {, +        return new RestResponseListener<T>(channel) {, +            public RestResponse buildResponse(T response) throws Exception {, +                try (BytesStreamOutput bytesStreamOutput = new BytesStreamOutput()) {, +                    try (DataOutputStream dataOutputStream = new DataOutputStream(bytesStreamOutput)) {, +                        // NOCOMMIT use the version from the client, +                        proto.writeResponse(responseBuilder.apply(response), Proto.CURRENT_VERSION, dataOutputStream);, +                    return new BytesRestResponse(OK, TEXT_CONTENT_TYPE, bytesStreamOutput.bytes());]