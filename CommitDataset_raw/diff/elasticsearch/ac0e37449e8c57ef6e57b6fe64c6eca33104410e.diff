[+++ b/docs/reference/mapping/types/geo-shape-type.asciidoc, +In GeoJSON, and therefore Elasticsearch, the correct *coordinate, +*IMPORTANT NOTE:* GeoJSON does not mandate a specific order for vertices thus ambiguous, +polygons around the dateline and poles are possible. To alleviate ambiguity, +the Open Geospatial Consortium (OGC), +http://www.opengeospatial.org/standards/sfa[Simple Feature Access] specification, +defines the following vertex ordering:, +, +* Outer Ring - Counterclockwise, +* Inner Ring(s) / Holes - Clockwise, +, +For polygons that do not cross the dateline, vertex order will not matter in, +Elasticsearch. For polygons that do cross the dateline, Elasticsearch requires, +vertex orderinging comply with the OGC specification. Otherwise, an unintended polygon, +may be created and unexpected query/filter results will be returned., +, +The following provides an example of an ambiguous polygon.  Elasticsearch will apply, +OGC standards to eliminate ambiguity resulting in a polygon that crosses the dateline., +, +[source,js], +--------------------------------------------------, +{, +    "location" : {, +        "type" : "polygon",, +        "coordinates" : [, +            [ [-177.0, 10.0], [176.0, 15.0], [172.0, 0.0], [176.0, -15.0], [-177.0, -10.0], [-177.0, 10.0] ],, +            [ [178.2, 8.2], [-178.8, 8.2], [-180.8, -8.8], [178.2, 8.8] ], +        ], +    }, +}, +--------------------------------------------------, +, +++ b/docs/reference/mapping/types/geo-shape-type.asciidoc, +In GeoJSON, and therefore Elasticsearch, the correct *coordinate, +*IMPORTANT NOTE:* GeoJSON does not mandate a specific order for vertices thus ambiguous, +polygons around the dateline and poles are possible. To alleviate ambiguity, +the Open Geospatial Consortium (OGC), +http://www.opengeospatial.org/standards/sfa[Simple Feature Access] specification, +defines the following vertex ordering:, +, +* Outer Ring - Counterclockwise, +* Inner Ring(s) / Holes - Clockwise, +, +For polygons that do not cross the dateline, vertex order will not matter in, +Elasticsearch. For polygons that do cross the dateline, Elasticsearch requires, +vertex orderinging comply with the OGC specification. Otherwise, an unintended polygon, +may be created and unexpected query/filter results will be returned., +, +The following provides an example of an ambiguous polygon.  Elasticsearch will apply, +OGC standards to eliminate ambiguity resulting in a polygon that crosses the dateline., +, +[source,js], +--------------------------------------------------, +{, +    "location" : {, +        "type" : "polygon",, +        "coordinates" : [, +            [ [-177.0, 10.0], [176.0, 15.0], [172.0, 0.0], [176.0, -15.0], [-177.0, -10.0], [-177.0, 10.0] ],, +            [ [178.2, 8.2], [-178.8, 8.2], [-180.8, -8.8], [178.2, 8.8] ], +        ], +    }, +}, +--------------------------------------------------, +, +++ b/src/test/java/org/elasticsearch/common/geo/GeoJSONShapeParserTests.java, +import com.spatial4j.core.exception.InvalidShapeException;, +    public void testParse_selfCrossingPolygon() throws IOException {, +        // test self crossing ccw poly not crossing dateline, +        String polygonGeoJson = XContentFactory.jsonBuilder().startObject().field("type", "Polygon"), +                .startArray("coordinates"), +                .startArray(), +                .startArray().value(176.0).value(15.0).endArray(), +                .startArray().value(-177.0).value(10.0).endArray(), +                .startArray().value(-177.0).value(-10.0).endArray(), +                .startArray().value(176.0).value(-15.0).endArray(), +                .startArray().value(-177.0).value(15.0).endArray(), +                .startArray().value(172.0).value(0.0).endArray(), +                .startArray().value(176.0).value(15.0).endArray(), +                .endArray(), +                .endArray(), +                .endObject().string();, +, +        XContentParser parser = JsonXContent.jsonXContent.createParser(polygonGeoJson);, +        parser.nextToken();, +        ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);, +    }, +, +    @Test, +++ b/docs/reference/mapping/types/geo-shape-type.asciidoc, +In GeoJSON, and therefore Elasticsearch, the correct *coordinate, +*IMPORTANT NOTE:* GeoJSON does not mandate a specific order for vertices thus ambiguous, +polygons around the dateline and poles are possible. To alleviate ambiguity, +the Open Geospatial Consortium (OGC), +http://www.opengeospatial.org/standards/sfa[Simple Feature Access] specification, +defines the following vertex ordering:, +, +* Outer Ring - Counterclockwise, +* Inner Ring(s) / Holes - Clockwise, +, +For polygons that do not cross the dateline, vertex order will not matter in]