[+++ b/src/main/java/org/elasticsearch/node/Node.java, +        try {, +        } catch(IOException e) {, +            logger.warn("ScriptService close failed", e);, +        }, +++ b/src/main/java/org/elasticsearch/node/Node.java, +        try {, +        } catch(IOException e) {, +            logger.warn("ScriptService close failed", e);, +        }, +++ b/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +import java.io.Closeable;, +public interface ScriptEngineService extends Closeable {, +++ b/src/main/java/org/elasticsearch/node/Node.java, +        try {, +        } catch(IOException e) {, +            logger.warn("ScriptService close failed", e);, +        }, +++ b/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +import java.io.Closeable;, +public interface ScriptEngineService extends Closeable {, +++ b/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.apache.lucene.util.IOUtils;, +import java.io.Closeable;, +public class ScriptService extends AbstractComponent implements Closeable {, +    private final Set<ScriptEngineService> scriptEngines;, +    private final ImmutableMap<String, ScriptEngineService> scriptEnginesByLang;, +    private final ImmutableMap<String, ScriptEngineService> scriptEnginesByExt;, +    private final ConcurrentMap<CacheKey, CompiledScript> staticCache = ConcurrentCollections.newConcurrentMap();, +        this.scriptEngines = scriptEngines;, +        ImmutableMap.Builder<String, ScriptEngineService> enginesByLangBuilder = ImmutableMap.builder();, +        ImmutableMap.Builder<String, ScriptEngineService> enginesByExtBuilder = ImmutableMap.builder();, +                enginesByLangBuilder.put(type, scriptEngine);, +            }, +            for (String ext : scriptEngine.extensions()) {, +                enginesByExtBuilder.put(ext, scriptEngine);, +        this.scriptEnginesByLang = enginesByLangBuilder.build();, +        this.scriptEnginesByExt = enginesByExtBuilder.build();, +    @Override, +    public void close() throws IOException {, +        IOUtils.close(scriptEngines);, +    private ScriptEngineService getScriptEngineServiceForLang(String lang) {, +        ScriptEngineService scriptEngineService = scriptEnginesByLang.get(lang);, +    private ScriptEngineService getScriptEngineServiceForFileExt(String fileExtension) {, +        ScriptEngineService scriptEngineService = scriptEnginesByExt.get(fileExtension);, +        if (scriptEngineService == null) {, +            throw new ElasticsearchIllegalArgumentException("script file extension not supported [" + fileExtension + "]");, +        }, +        return scriptEngineService;, +    }, +, +        ScriptEngineService scriptEngineService = getScriptEngineServiceForLang(lang);, +        CacheKey cacheKey = newCacheKey(scriptEngineService, script);, +, +            CompiledScript compiled = staticCache.get(cacheKey); //On disk scripts will be loaded into the staticCache by the listener, +        } else if (scriptEnginesByLang.containsKey(scriptLang) == false) {, +        return getScriptEngineServiceForLang(compiledScript.lang()).executable(compiledScript.compiled(), vars);, +        return getScriptEngineServiceForLang(compiledScript.lang()).search(compiledScript.compiled(), lookup, vars);, +            for (ScriptEngineService service : scriptEngines) {, +                ScriptEngineService engineService = getScriptEngineServiceForFileExt(scriptNameExt.v2());, +                if (engineService == null) {, +                    logger.warn("no script engine found for [{}]", scriptNameExt.v2());, +                } else {, +                        try(InputStreamReader reader = new InputStreamReader(Files.newInputStream(file), Charsets.UTF_8)) {, +                            String script = Streams.copyToString(reader);, +                            CacheKey cacheKey = newCacheKey(engineService, scriptNameExt.v1());, +                            staticCache.put(cacheKey, new CompiledScript(engineService.types()[0], engineService.compile(script)));, +                        }, +                ScriptEngineService engineService = getScriptEngineServiceForFileExt(scriptNameExt.v2());, +                assert engineService != null;, +                staticCache.remove(newCacheKey(engineService, scriptNameExt.v1()));, +    private static CacheKey newCacheKey(ScriptEngineService engineService, String script) {, +        return new CacheKey(engineService.types()[0], script);, +    }, +, +            GroovyScriptEngineService engine = (GroovyScriptEngineService) ScriptService.this.scriptEnginesByLang.get(GroovyScriptEngineService.NAME);, +++ b/src/main/java/org/elasticsearch/node/Node.java, +        try {, +        } catch(IOException e) {, +            logger.warn("ScriptService close failed", e);, +        }, +++ b/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +import java.io.Closeable;, +public interface ScriptEngineService extends Closeable {, +++ b/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.apache.lucene.util.IOUtils;, +import java.io.Closeable;, +public class ScriptService extends AbstractComponent implements Closeable {, +    private final Set<ScriptEngineService> scriptEngines;, +    private final ImmutableMap<String, ScriptEngineService> scriptEnginesByLang;, +    private final ImmutableMap<String, ScriptEngineService> scriptEnginesByExt;, +    private final ConcurrentMap<CacheKey, CompiledScript> staticCache = ConcurrentCollections.newConcurrentMap();, +        this.scriptEngines = scriptEngines;, +        ImmutableMap.Builder<String, ScriptEngineService> enginesByLangBuilder = ImmutableMap.builder();, +        ImmutableMap.Builder<String, ScriptEngineService> enginesByExtBuilder = ImmutableMap.builder();, +                enginesByLangBuilder.put(type, scriptEngine);, +            }, +            for (String ext : scriptEngine.extensions()) {, +                enginesByExtBuilder.put(ext, scriptEngine);, +        this.scriptEnginesByLang = enginesByLangBuilder.build();]