[+++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                        // after refresh documents can be retrieved from the index so we can now commit the translog, +                        translog.commit();, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                        // after refresh documents can be retrieved from the index so we can now commit the translog, +                        translog.commit();, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +import java.util.concurrent.atomic.AtomicBoolean;, +    /* */, +    public void testConcurrentGetAndFlush() throws Exception {, +        ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocumentWithTextField(), B_1, null);, +        engine.create(new Engine.Create(newUid("1"), doc));, +        final AtomicReference<Engine.GetResult> latestGetResult = new AtomicReference<>();, +        final AtomicBoolean flushFinished = new AtomicBoolean(false);, +        Thread getThread = new Thread() {, +            @Override, +            public void run() {, +                while (flushFinished.get() == false) {, +                    Engine.GetResult previousGetResult = latestGetResult.get();, +                    if (previousGetResult != null) {, +                        previousGetResult.release();, +                    }, +                    latestGetResult.set(engine.get(new Engine.Get(true, newUid("1"))));, +                    if (latestGetResult.get().exists() == false) {, +                        break;, +                    }, +                }, +            }, +        };, +        getThread.start();, +        engine.flush();, +        flushFinished.set(true);, +        getThread.join();, +        assertTrue(latestGetResult.get().exists());, +        latestGetResult.get().release();, +    }, +, +    @Test]