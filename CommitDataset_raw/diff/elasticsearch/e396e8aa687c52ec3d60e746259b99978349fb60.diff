[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.action.JobDataAction;, +import org.elasticsearch.xpack.prelert.action.FlushJobAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestJobDataAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestFlushJobAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestPutJobAction;, +                RestPutJobAction.class,, +                RestJobDataAction.class,, +                RestFlushJobAction.class,, +                new ActionHandler<>(JobDataAction.INSTANCE, JobDataAction.TransportAction.class),, +                new ActionHandler<>(FlushJobAction.INSTANCE, FlushJobAction.TransportAction.class),, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.action.JobDataAction;, +import org.elasticsearch.xpack.prelert.action.FlushJobAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestJobDataAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestFlushJobAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestPutJobAction;, +                RestPutJobAction.class,, +                RestJobDataAction.class,, +                RestFlushJobAction.class,, +                new ActionHandler<>(JobDataAction.INSTANCE, JobDataAction.TransportAction.class),, +                new ActionHandler<>(FlushJobAction.INSTANCE, FlushJobAction.TransportAction.class),, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/FlushJobAction.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.prelert.action;, +, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionRequestBuilder;, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +import org.elasticsearch.action.support.master.MasterNodeRequest;, +import org.elasticsearch.client.ElasticsearchClient;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParseFieldMatcherSupplier;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.TransportService;, +import org.elasticsearch.xpack.prelert.PrelertPlugin;, +import org.elasticsearch.xpack.prelert.job.Job;, +import org.elasticsearch.xpack.prelert.job.manager.AutodetectProcessManager;, +import org.elasticsearch.xpack.prelert.job.process.autodetect.params.InterimResultsParams;, +import org.elasticsearch.xpack.prelert.job.process.autodetect.params.TimeRange;, +import org.elasticsearch.xpack.prelert.utils.ExceptionsHelper;, +, +import java.io.IOException;, +import java.util.Objects;, +, +public class FlushJobAction extends Action<FlushJobAction.Request, FlushJobAction.Response, FlushJobAction.RequestBuilder> {, +, +    public static final FlushJobAction INSTANCE = new FlushJobAction();, +    public static final String NAME = "cluster:admin/prelert/job/flush";, +, +    private FlushJobAction() {, +        super(NAME);, +    }, +, +    @Override, +    public RequestBuilder newRequestBuilder(ElasticsearchClient client) {, +        return new RequestBuilder(client, this);, +    }, +, +    @Override, +    public Response newResponse() {, +        return new Response();, +    }, +, +    public static class Request extends MasterNodeRequest<Request> implements ToXContent {, +, +        public static final ParseField CALC_INTERIM = new ParseField("calc_interim");, +        public static final ParseField START = new ParseField("start");, +        public static final ParseField END = new ParseField("end");, +        public static final ParseField ADVANCE_TIME = new ParseField("advance_time");, +, +        private static final ObjectParser<Request, ParseFieldMatcherSupplier> PARSER = new ObjectParser<>(NAME, Request::new);, +, +        static {, +            PARSER.declareString((request, jobId) -> request.jobId = jobId, Job.ID);, +            PARSER.declareBoolean(Request::setCalcInterim, CALC_INTERIM);, +            PARSER.declareString(Request::setStart, START);, +            PARSER.declareString(Request::setEnd, END);, +            PARSER.declareString(Request::setAdvanceTime, ADVANCE_TIME);, +        }, +, +        public static Request parseRequest(String jobId, XContentParser parser, ParseFieldMatcherSupplier parseFieldMatcherSupplier) {, +            Request request = PARSER.apply(parser, parseFieldMatcherSupplier);]