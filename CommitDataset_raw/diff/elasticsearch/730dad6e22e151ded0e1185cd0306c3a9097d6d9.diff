[+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ClusterBootstrapService.java, +import org.elasticsearch.discovery.DiscoveryModule;, +import org.elasticsearch.node.Node;, +import java.util.Collections;, +        if (DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE.equals(DiscoveryModule.DISCOVERY_TYPE_SETTING.get(settings))) {, +            if (INITIAL_MASTER_NODES_SETTING.exists(settings)) {, +                throw new IllegalArgumentException("setting [" + INITIAL_MASTER_NODES_SETTING.getKey() +, +                    "] is not allowed when [" + DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey() + "] is set to [" +, +                    DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE + "]");, +            }, +            if (DiscoveryNode.isMasterNode(settings) == false) {, +                throw new IllegalArgumentException("node with [" + DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey() + "] set to [" +, +                    DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE +  "] must be master-eligible");, +            }, +            bootstrapRequirements = Collections.singleton(Node.NODE_NAME_SETTING.get(settings));, +            unconfiguredBootstrapTimeout = null;, +        } else {, +        }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ClusterBootstrapService.java, +import org.elasticsearch.discovery.DiscoveryModule;, +import org.elasticsearch.node.Node;, +import java.util.Collections;, +        if (DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE.equals(DiscoveryModule.DISCOVERY_TYPE_SETTING.get(settings))) {, +            if (INITIAL_MASTER_NODES_SETTING.exists(settings)) {, +                throw new IllegalArgumentException("setting [" + INITIAL_MASTER_NODES_SETTING.getKey() +, +                    "] is not allowed when [" + DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey() + "] is set to [" +, +                    DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE + "]");, +            }, +            if (DiscoveryNode.isMasterNode(settings) == false) {, +                throw new IllegalArgumentException("node with [" + DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey() + "] set to [" +, +                    DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE +  "] must be master-eligible");, +            }, +            bootstrapRequirements = Collections.singleton(Node.NODE_NAME_SETTING.get(settings));, +            unconfiguredBootstrapTimeout = null;, +        } else {, +        }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.discovery.DiscoveryModule;, +import java.util.Collections;, +    private final boolean singleNodeDiscovery;, +        this.singleNodeDiscovery = DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE.equals(DiscoveryModule.DISCOVERY_TYPE_SETTING.get(settings));, +, +        if (singleNodeDiscovery && joinRequest.getSourceNode().equals(getLocalNode()) == false) {, +            joinCallback.onFailure(new IllegalStateException("cannot join node with [" + DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey() +, +                "] set to [" + DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE  + "] discovery"));, +            return;, +        }, +, +            VotingConfiguration votingConfiguration = coordinationState.get().getLastAcceptedState().getLastCommittedConfiguration();, +            if (singleNodeDiscovery &&, +                votingConfiguration.isEmpty() == false &&, +                votingConfiguration.hasQuorum(Collections.singleton(getLocalNode().getId())) == false) {, +                throw new IllegalStateException("cannot start with [" + DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey() + "] set to [" +, +                    DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE + "] when local node " + getLocalNode() +, +                    " does not have quorum in voting configuration " + votingConfiguration);, +            }, +            super(settings, transportService, transportAddressConnector,, +                singleNodeDiscovery ? hostsResolver -> Collections.emptyList() : configuredHostsResolver);, +        protected void startProbe(TransportAddress transportAddress) {, +            if (singleNodeDiscovery == false) {, +                super.startProbe(transportAddress);, +            }, +        }, +, +        @Override, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ClusterBootstrapService.java, +import org.elasticsearch.discovery.DiscoveryModule;, +import org.elasticsearch.node.Node;, +import java.util.Collections;, +        if (DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE.equals(DiscoveryModule.DISCOVERY_TYPE_SETTING.get(settings))) {, +            if (INITIAL_MASTER_NODES_SETTING.exists(settings)) {, +                throw new IllegalArgumentException("setting [" + INITIAL_MASTER_NODES_SETTING.getKey() +, +                    "] is not allowed when [" + DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey() + "] is set to [" +, +                    DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE + "]");, +            }, +            if (DiscoveryNode.isMasterNode(settings) == false) {, +                throw new IllegalArgumentException("node with [" + DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey() + "] set to [" +, +                    DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE +  "] must be master-eligible");, +            }, +            bootstrapRequirements = Collections.singleton(Node.NODE_NAME_SETTING.get(settings));, +            unconfiguredBootstrapTimeout = null;, +        } else {, +        }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.discovery.DiscoveryModule;, +import java.util.Collections;, +    private final boolean singleNodeDiscovery;, +        this.singleNodeDiscovery = DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE.equals(DiscoveryModule.DISCOVERY_TYPE_SETTING.get(settings));, +, +        if (singleNodeDiscovery && joinRequest.getSourceNode().equals(getLocalNode()) == false) {, +            joinCallback.onFailure(new IllegalStateException("cannot join node with [" + DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey() +, +                "] set to [" + DiscoveryModule.SINGLE_NODE_DISCOVERY_TYPE  + "] discovery"));, +            return;, +        }, +]