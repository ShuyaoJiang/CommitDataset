[+++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +                            fromTo[1] == MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +                            fromTo[1] == MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public static final List<String> TYPES = Collections.singletonList(NAME);, +, +    public List<String> getTypes() {, +        return TYPES;, +    public boolean isSandboxed() {, +        return false;, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +                            fromTo[1] == MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public static final List<String> TYPES = Collections.singletonList(NAME);, +, +    public List<String> getTypes() {, +        return TYPES;, +    public boolean isSandboxed() {, +        return false;, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineRegistry.java, +    private final Map<Class<? extends ScriptEngineService>, List<String>> registeredScriptEngineServices;, +        Map<Class<? extends ScriptEngineService>, List<String>> registeredScriptEngineServices = new HashMap<>();, +            List<String> languages =, +                registeredScriptEngineServices.putIfAbsent(registration.getScriptEngineService(), Collections.unmodifiableList(registration.getScriptEngineLanguages()));, +            if (languages != null) {, +                throw new IllegalArgumentException("script engine service [" + registration.getScriptEngineService() + "] already registered for languages [" + String.join(",", languages) + "]");, +, +            for (String language : registration.getScriptEngineLanguages()) {, +                    throw new IllegalArgumentException("scripting language [" + language + "] already registered for script engine service [" + scriptEngineServiceClazz.getCanonicalName() + "]");, +            }, +    List<String> getLanguages(Class<? extends ScriptEngineService> scriptEngineService) {, +        private final List<String> scriptEngineLanguages;, +        public ScriptEngineRegistration(Class<? extends ScriptEngineService> scriptEngineService, List<String> scriptEngineLanguages) {, +            Objects.requireNonNull(scriptEngineLanguages);, +            if (scriptEngineLanguages.isEmpty()) {, +                throw new IllegalArgumentException("languages for script engine service [" + scriptEngineService.getCanonicalName() + "] should be non-empty");, +            this.scriptEngineLanguages = scriptEngineLanguages;, +        List<String> getScriptEngineLanguages() {, +            return scriptEngineLanguages;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +                            fromTo[1] == MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public static final List<String> TYPES = Collections.singletonList(NAME);, +, +    public List<String> getTypes() {, +        return TYPES;, +    public boolean isSandboxed() {, +        return false;, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineRegistry.java, +    private final Map<Class<? extends ScriptEngineService>, List<String>> registeredScriptEngineServices;, +        Map<Class<? extends ScriptEngineService>, List<String>> registeredScriptEngineServices = new HashMap<>();, +            List<String> languages =, +                registeredScriptEngineServices.putIfAbsent(registration.getScriptEngineService(), Collections.unmodifiableList(registration.getScriptEngineLanguages()));, +            if (languages != null) {, +                throw new IllegalArgumentException("script engine service [" + registration.getScriptEngineService() + "] already registered for languages [" + String.join(",", languages) + "]");, +, +            for (String language : registration.getScriptEngineLanguages()) {, +                    throw new IllegalArgumentException("scripting language [" + language + "] already registered for script engine service [" + scriptEngineServiceClazz.getCanonicalName() + "]");, +            }, +    List<String> getLanguages(Class<? extends ScriptEngineService> scriptEngineService) {, +        private final List<String> scriptEngineLanguages;, +        public ScriptEngineRegistration(Class<? extends ScriptEngineService> scriptEngineService, List<String> scriptEngineLanguages) {, +            Objects.requireNonNull(scriptEngineLanguages);, +            if (scriptEngineLanguages.isEmpty()) {, +                throw new IllegalArgumentException("languages for script engine service [" + scriptEngineService.getCanonicalName() + "] should be non-empty");, +            this.scriptEngineLanguages = scriptEngineLanguages;, +        List<String> getScriptEngineLanguages() {, +            return scriptEngineLanguages;, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +    List<String> getTypes();, +    boolean isSandboxed();, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +                            fromTo[1] == MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public static final List<String> TYPES = Collections.singletonList(NAME);, +, +    public List<String> getTypes() {, +        return TYPES;, +    public boolean isSandboxed() {, +        return false;, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineRegistry.java, +    private final Map<Class<? extends ScriptEngineService>, List<String>> registeredScriptEngineServices;, +        Map<Class<? extends ScriptEngineService>, List<String>> registeredScriptEngineServices = new HashMap<>();, +            List<String> languages =, +                registeredScriptEngineServices.putIfAbsent(registration.getScriptEngineService(), Collections.unmodifiableList(registration.getScriptEngineLanguages()));, +            if (languages != null) {]