[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +            checkJavaVersion(jar.toString(), targetVersion);, +        }, +, +        // give a nice error if jar is compiled against different es version, +        String systemESVersion = Version.CURRENT.toString();, +        String targetESVersion = manifest.getMainAttributes().getValue("X-Compile-Elasticsearch-Version");, +        if (targetESVersion != null && targetESVersion.equals(systemESVersion) == false) {, +            throw new IllegalStateException(jar + " requires Elasticsearch " + targetESVersion, +                    + ", your system: " + systemESVersion);, +        }, +    }, +, +    /**, +     * Checks that the java specification version {@code targetVersion}, +     * required by {@code resource} is compatible with the current installation., +     */, +    public static void checkJavaVersion(String resource, String targetVersion) {, +        String systemVersion = System.getProperty("java.specification.version");, +            throw new IllegalStateException(resource + " requires Java " + targetVersion, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +            checkJavaVersion(jar.toString(), targetVersion);, +        }, +, +        // give a nice error if jar is compiled against different es version, +        String systemESVersion = Version.CURRENT.toString();, +        String targetESVersion = manifest.getMainAttributes().getValue("X-Compile-Elasticsearch-Version");, +        if (targetESVersion != null && targetESVersion.equals(systemESVersion) == false) {, +            throw new IllegalStateException(jar + " requires Elasticsearch " + targetESVersion, +                    + ", your system: " + systemESVersion);, +        }, +    }, +, +    /**, +     * Checks that the java specification version {@code targetVersion}, +     * required by {@code resource} is compatible with the current installation., +     */, +    public static void checkJavaVersion(String resource, String targetVersion) {, +        String systemVersion = System.getProperty("java.specification.version");, +            throw new IllegalStateException(resource + " requires Java " + targetVersion, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +import org.elasticsearch.bootstrap.JarHell;, +            String javaVersionString = props.getProperty("java.version");, +            if (javaVersionString == null) {, +                throw new IllegalArgumentException("Property [java.version] is missing for jvm plugin [" + name + "]");, +            }, +            JarHell.checkJavaVersion(name, javaVersionString);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +            checkJavaVersion(jar.toString(), targetVersion);, +        }, +, +        // give a nice error if jar is compiled against different es version, +        String systemESVersion = Version.CURRENT.toString();, +        String targetESVersion = manifest.getMainAttributes().getValue("X-Compile-Elasticsearch-Version");, +        if (targetESVersion != null && targetESVersion.equals(systemESVersion) == false) {, +            throw new IllegalStateException(jar + " requires Elasticsearch " + targetESVersion, +                    + ", your system: " + systemESVersion);, +        }, +    }, +, +    /**, +     * Checks that the java specification version {@code targetVersion}, +     * required by {@code resource} is compatible with the current installation., +     */, +    public static void checkJavaVersion(String resource, String targetVersion) {, +        String systemVersion = System.getProperty("java.specification.version");, +            throw new IllegalStateException(resource + " requires Java " + targetVersion, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +import org.elasticsearch.bootstrap.JarHell;, +            String javaVersionString = props.getProperty("java.version");, +            if (javaVersionString == null) {, +                throw new IllegalArgumentException("Property [java.version] is missing for jvm plugin [" + name + "]");, +            }, +            JarHell.checkJavaVersion(name, javaVersionString);, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginInfoTests.java, +            "java.version", System.getProperty("java.specification.version"),, +    public void testReadFromPropertiesJavaVersionMissing() throws Exception {, +        Path pluginDir = createTempDir().resolve("fake-plugin");, +        writeProperties(pluginDir,, +            "description", "fake desc",, +            "elasticsearch.version", Version.CURRENT.toString(),, +            "version", "1.0",, +            "jvm", "true");, +        try {, +            PluginInfo.readFromProperties(pluginDir);, +            fail("expected missing java version exception");, +        } catch (IllegalArgumentException e) {, +            assertTrue(e.getMessage().contains("[java.version] is missing"));, +        }, +    }, +, +    public void testReadFromPropertiesJavaVersionIncompatible() throws Exception {, +        Path pluginDir = createTempDir().resolve("fake-plugin");, +        writeProperties(pluginDir,, +            "description", "fake desc",, +            "elasticsearch.version", Version.CURRENT.toString(),, +            "java.version", "1000000.0",, +            "classname", "FakePlugin",, +            "version", "1.0",, +            "jvm", "true");]