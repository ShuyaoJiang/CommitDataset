[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +            throw location.createError(new ClassCastException("Cannot cast from " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +            throw location.createError(new ClassCastException("Cannot cast from " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import org.elasticsearch.painless.lookup.PainlessLookup;, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +import org.elasticsearch.painless.lookup.PainlessMethod;, +                                                              PainlessLookupUtility.anyTypeToPainlessTypeName(interfaceType));, +                         "to [" + PainlessLookupUtility.anyTypeToPainlessTypeName(clazz) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +            throw location.createError(new ClassCastException("Cannot cast from " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import org.elasticsearch.painless.lookup.PainlessLookup;, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +import org.elasticsearch.painless.lookup.PainlessMethod;, +                                                              PainlessLookupUtility.anyTypeToPainlessTypeName(interfaceType));, +                         "to [" + PainlessLookupUtility.anyTypeToPainlessTypeName(clazz) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +                    "to [" + PainlessLookupUtility.anyTypeToPainlessTypeName(expected) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +            throw location.createError(new ClassCastException("Cannot cast from " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import org.elasticsearch.painless.lookup.PainlessLookup;, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +import org.elasticsearch.painless.lookup.PainlessMethod;, +                                                              PainlessLookupUtility.anyTypeToPainlessTypeName(interfaceType));, +                         "to [" + PainlessLookupUtility.anyTypeToPainlessTypeName(clazz) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +                    "to [" + PainlessLookupUtility.anyTypeToPainlessTypeName(expected) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +import org.elasticsearch.painless.ScriptClassInfo.MethodArgument;, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +            b.append("Variable[type=").append(PainlessLookupUtility.anyTypeToPainlessTypeName(clazz));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +            throw location.createError(new ClassCastException("Cannot cast from " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import org.elasticsearch.painless.lookup.PainlessLookup;, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +import org.elasticsearch.painless.lookup.PainlessMethod;, +                                                              PainlessLookupUtility.anyTypeToPainlessTypeName(interfaceType));, +                         "to [" + PainlessLookupUtility.anyTypeToPainlessTypeName(clazz) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +                    "to [" + PainlessLookupUtility.anyTypeToPainlessTypeName(expected) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +import org.elasticsearch.painless.ScriptClassInfo.MethodArgument;, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +            b.append("Variable[type=").append(PainlessLookupUtility.anyTypeToPainlessTypeName(clazz));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +        type = PainlessLookupUtility.javaObjectTypeToPainlessDefType(type);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +            throw location.createError(new ClassCastException("Cannot cast from " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import org.elasticsearch.painless.lookup.PainlessLookup;, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +import org.elasticsearch.painless.lookup.PainlessMethod;, +                                                              PainlessLookupUtility.anyTypeToPainlessTypeName(interfaceType));, +                         "to [" + PainlessLookupUtility.anyTypeToPainlessTypeName(clazz) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +                    "to [" + PainlessLookupUtility.anyTypeToPainlessTypeName(expected) + "], not a functional interface");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +import org.elasticsearch.painless.ScriptClassInfo.MethodArgument;, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +            b.append("Variable[type=").append(PainlessLookupUtility.anyTypeToPainlessTypeName(clazz));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +        type = PainlessLookupUtility.javaObjectTypeToPainlessDefType(type);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/EnhancedPainlessLexer.java, +import org.elasticsearch.painless.lookup.PainlessLookup;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;, +            throw location.createError(new ClassCastException("Cannot cast from " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(actual) + "] to " +, +                    "[" + PainlessLookupUtility.anyTypeToPainlessTypeName(expected) + "]."));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import org.elasticsearch.painless.lookup.PainlessLookup;, +import org.elasticsearch.painless.lookup.PainlessLookupUtility;]