[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +                logger.info("[{}] creating index, cause [{}], shards [{}]/[{}], mappings {}", index, cause, indexMetaData.numberOfShards(), indexMetaData.numberOfReplicas(), fMappings.keySet());, +        logger.info("[{}] deleting index", index);, +            logger.debug("[{}] update mapping [{}] (dynamic) with source [{}]", index, type, updatedMappingSource);, +            logger.info("[{}] update mapping [{}] (dynamic)", index, type);, +                logger.debug("[{}] put_mapping [{}] with source [{}]", index, mapping.v1(), mapping.v2());, +                logger.info("[{}] put_mapping [{}]", index, mapping.v1());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +                logger.info("[{}] creating index, cause [{}], shards [{}]/[{}], mappings {}", index, cause, indexMetaData.numberOfShards(), indexMetaData.numberOfReplicas(), fMappings.keySet());, +        logger.info("[{}] deleting index", index);, +            logger.debug("[{}] update mapping [{}] (dynamic) with source [{}]", index, type, updatedMappingSource);, +            logger.info("[{}] update mapping [{}] (dynamic)", index, type);, +                logger.debug("[{}] put_mapping [{}] with source [{}]", index, mapping.v1(), mapping.v2());, +                logger.info("[{}] put_mapping [{}]", index, mapping.v1());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.elasticsearch.common.collect.ImmutableMap;, +     * Attributes of this type mappings., +     */, +    ImmutableMap<String, Object> attributes();, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +                logger.info("[{}] creating index, cause [{}], shards [{}]/[{}], mappings {}", index, cause, indexMetaData.numberOfShards(), indexMetaData.numberOfReplicas(), fMappings.keySet());, +        logger.info("[{}] deleting index", index);, +            logger.debug("[{}] update mapping [{}] (dynamic) with source [{}]", index, type, updatedMappingSource);, +            logger.info("[{}] update mapping [{}] (dynamic)", index, type);, +                logger.debug("[{}] put_mapping [{}] with source [{}]", index, mapping.v1(), mapping.v2());, +                logger.info("[{}] put_mapping [{}]", index, mapping.v1());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.elasticsearch.common.collect.ImmutableMap;, +     * Attributes of this type mappings., +     */, +    ImmutableMap<String, Object> attributes();, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, + * @author kimchy (shay.banon), +                dynamicMappingUrl = indexSettings.getClassLoader().getResource("org/elasticsearch/index/mapper/xcontent/dynamic-mapping.json");, +        logger.debug("using dynamic[{}] with location[{}] and source[{}]", dynamic, dynamicMappingLocation, dynamicMappingSource);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +                logger.info("[{}] creating index, cause [{}], shards [{}]/[{}], mappings {}", index, cause, indexMetaData.numberOfShards(), indexMetaData.numberOfReplicas(), fMappings.keySet());, +        logger.info("[{}] deleting index", index);, +            logger.debug("[{}] update mapping [{}] (dynamic) with source [{}]", index, type, updatedMappingSource);, +            logger.info("[{}] update mapping [{}] (dynamic)", index, type);, +                logger.debug("[{}] put_mapping [{}] with source [{}]", index, mapping.v1(), mapping.v2());, +                logger.info("[{}] put_mapping [{}]", index, mapping.v1());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.elasticsearch.common.collect.ImmutableMap;, +     * Attributes of this type mappings., +     */, +    ImmutableMap<String, Object> attributes();, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, + * @author kimchy (shay.banon), +                dynamicMappingUrl = indexSettings.getClassLoader().getResource("org/elasticsearch/index/mapper/xcontent/dynamic-mapping.json");, +        logger.debug("using dynamic[{}] with location[{}] and source[{}]", dynamic, dynamicMappingLocation, dynamicMappingSource);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDocumentMapper.java, +import org.elasticsearch.common.collect.ImmutableMap;, +        private ImmutableMap<String, Object> attributes = ImmutableMap.of();, +, +        public Builder attributes(ImmutableMap<String, Object> attributes) {, +            this.attributes = attributes;, +            return this;, +        }, +, +            return new XContentDocumentMapper(rootObjectMapper, attributes, uidFieldMapper, idFieldMapper, typeFieldMapper,, +    private volatile ImmutableMap<String, Object> attributes;, +, +                                  ImmutableMap<String, Object> attributes,, +        this.attributes = attributes;, +    @Override public ImmutableMap<String, Object> attributes() {, +        return this.attributes;, +    }, +, +            // let the merge with attributes to override the attributes, +            attributes = mergeWith.attributes();, +            // update the source of the merged one, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +                logger.info("[{}] creating index, cause [{}], shards [{}]/[{}], mappings {}", index, cause, indexMetaData.numberOfShards(), indexMetaData.numberOfReplicas(), fMappings.keySet());, +        logger.info("[{}] deleting index", index);, +            logger.debug("[{}] update mapping [{}] (dynamic) with source [{}]", index, type, updatedMappingSource);, +            logger.info("[{}] update mapping [{}] (dynamic)", index, type);, +                logger.debug("[{}] put_mapping [{}] with source [{}]", index, mapping.v1(), mapping.v2());, +                logger.info("[{}] put_mapping [{}]", index, mapping.v1());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.elasticsearch.common.collect.ImmutableMap;, +     * Attributes of this type mappings., +     */, +    ImmutableMap<String, Object> attributes();, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, + * @author kimchy (shay.banon), +                dynamicMappingUrl = indexSettings.getClassLoader().getResource("org/elasticsearch/index/mapper/xcontent/dynamic-mapping.json");, +        logger.debug("using dynamic[{}] with location[{}] and source[{}]", dynamic, dynamicMappingLocation, dynamicMappingSource);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDocumentMapper.java, +import org.elasticsearch.common.collect.ImmutableMap;, +        private ImmutableMap<String, Object> attributes = ImmutableMap.of();, +]