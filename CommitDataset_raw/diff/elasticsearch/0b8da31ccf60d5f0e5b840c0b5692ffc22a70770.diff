[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +     * Netty wants to do some unsafe things like use unsafe and replace a private field. This method disables these things by default, but, +     * can be overridden by setting the corresponding system properties., +    @SuppressForbidden(reason = "set system properties to configure Netty"), +        final String noUnsafeKey = "io.netty.noUnsafe";, +        final String noUnsafe = System.getProperty(noUnsafeKey);, +        if (noUnsafe == null) {, +            // disable Netty from using unsafe, +            // while permissions are needed to set this, if a security exception is thrown the permission needed can either be granted or, +            // the system property can be set directly before starting the JVM; therefore, we do not catch a security exception here, +            System.setProperty(noUnsafeKey, Boolean.toString(true));, +        final String noKeySetOptimizationKey = "io.netty.noKeySetOptimization";, +        final String noKeySetOptimization = System.getProperty(noKeySetOptimizationKey);, +        if (noKeySetOptimization == null) {, +            // disable Netty from replacing the selector key set, +            // while permissions are needed to set this, if a security exception is thrown the permission needed can either be granted or, +            // the system property can be set directly before starting the JVM; therefore, we do not catch a security exception here, +            System.setProperty(noKeySetOptimizationKey, Boolean.toString(true));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +     * Netty wants to do some unsafe things like use unsafe and replace a private field. This method disables these things by default, but, +     * can be overridden by setting the corresponding system properties., +    @SuppressForbidden(reason = "set system properties to configure Netty"), +        final String noUnsafeKey = "io.netty.noUnsafe";, +        final String noUnsafe = System.getProperty(noUnsafeKey);, +        if (noUnsafe == null) {, +            // disable Netty from using unsafe, +            // while permissions are needed to set this, if a security exception is thrown the permission needed can either be granted or, +            // the system property can be set directly before starting the JVM; therefore, we do not catch a security exception here, +            System.setProperty(noUnsafeKey, Boolean.toString(true));, +        final String noKeySetOptimizationKey = "io.netty.noKeySetOptimization";, +        final String noKeySetOptimization = System.getProperty(noKeySetOptimizationKey);, +        if (noKeySetOptimization == null) {, +            // disable Netty from replacing the selector key set, +            // while permissions are needed to set this, if a security exception is thrown the permission needed can either be granted or, +            // the system property can be set directly before starting the JVM; therefore, we do not catch a security exception here, +            System.setProperty(noKeySetOptimizationKey, Boolean.toString(true));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.search.profile.SearchProfileShardResults;, +import java.util.ArrayList;, +import java.util.List;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.throwUnknownField;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.throwUnknownToken;, +, +    private static final ParseField SCROLL_ID = new ParseField("_scroll_id");, +    private static final ParseField TOOK = new ParseField("took");, +    private static final ParseField TIMED_OUT = new ParseField("timed_out");, +    private static final ParseField TERMINATED_EARLY = new ParseField("terminated_early");, +    private static final ParseField NUM_REDUCE_PHASES = new ParseField("num_reduce_phases");, +, +    private SearchResponseSections internalResponse;, +    public SearchResponse(SearchResponseSections internalResponse, String scrollId, int totalShards, int successfulShards,, +    @Nullable, +    public Map<String, ProfileShardResult> getProfileResults() {, +            builder.field(SCROLL_ID.getPreferredName(), scrollId);, +        builder.field(TOOK.getPreferredName(), tookInMillis);, +        builder.field(TIMED_OUT.getPreferredName(), isTimedOut());, +            builder.field(TERMINATED_EARLY.getPreferredName(), isTerminatedEarly());, +            builder.field(NUM_REDUCE_PHASES.getPreferredName(), getNumReducePhases());, +    public static SearchResponse fromXContent(XContentParser parser) throws IOException {, +        ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);, +        XContentParser.Token token;, +        String currentFieldName = null;, +        SearchHits hits = null;, +        Aggregations aggs = null;, +        Suggest suggest = null;, +        SearchProfileShardResults profile = null;, +        boolean timedOut = false;, +        Boolean terminatedEarly = null;, +        int numReducePhases = 1;, +        long tookInMillis = -1;, +        int successfulShards = -1;, +        int totalShards = -1;, +        String scrollId = null;, +        List<ShardSearchFailure> failures = new ArrayList<>();, +        while((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if (SCROLL_ID.match(currentFieldName)) {, +                    scrollId = parser.text();, +                } else if (TOOK.match(currentFieldName)) {, +                    tookInMillis = parser.longValue();, +                } else if (TIMED_OUT.match(currentFieldName)) {, +                    timedOut = parser.booleanValue();, +                } else if (TERMINATED_EARLY.match(currentFieldName)) {, +                    terminatedEarly = parser.booleanValue();, +                } else if (NUM_REDUCE_PHASES.match(currentFieldName)) {, +                    numReducePhases = parser.intValue();, +                } else {, +                    throwUnknownField(currentFieldName, parser.getTokenLocation());, +                }, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (SearchHits.Fields.HITS.equals(currentFieldName)) {, +                    hits = SearchHits.fromXContent(parser);]