[+++ b/build.gradle, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar', +, +++ b/build.gradle, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar', +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/build.gradle, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar', +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.Copy, +import org.gradle.api.tasks.Delete, +import org.gradle.api.tasks.Exec, +            File configFile = new File(node.homeDir, 'config/elasticsearch.yml'), +            Closure delayedSrc = {, +                return srcConfigFile, +            copyConfig.from(delayedSrc), +                      .into(destConfigFile.canonicalFile.parentFile), +            // we must add debug options inside the closure so the config is read at execution time, as, +            // gradle task options are not processed until the end of the configuration phase, +            if (node.config.debug) {, +                println 'Running elasticsearch in debug mode, suspending until connected on port 8000', +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +            }, +, +                if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +                  arg(value: '/C'), +                }, +++ b/build.gradle, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar', +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.Copy, +import org.gradle.api.tasks.Delete, +import org.gradle.api.tasks.Exec, +            File configFile = new File(node.homeDir, 'config/elasticsearch.yml'), +            Closure delayedSrc = {, +                return srcConfigFile, +            copyConfig.from(delayedSrc), +                      .into(destConfigFile.canonicalFile.parentFile), +            // we must add debug options inside the closure so the config is read at execution time, as, +            // gradle task options are not processed until the end of the configuration phase, +            if (node.config.debug) {, +                println 'Running elasticsearch in debug mode, suspending until connected on port 8000', +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +            }, +, +                if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +                  arg(value: '/C'), +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +                break;, +++ b/build.gradle, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar', +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.Copy, +import org.gradle.api.tasks.Delete, +import org.gradle.api.tasks.Exec, +            File configFile = new File(node.homeDir, 'config/elasticsearch.yml'), +            Closure delayedSrc = {, +                return srcConfigFile, +            copyConfig.from(delayedSrc), +                      .into(destConfigFile.canonicalFile.parentFile), +            // we must add debug options inside the closure so the config is read at execution time, as, +            // gradle task options are not processed until the end of the configuration phase, +            if (node.config.debug) {, +                println 'Running elasticsearch in debug mode, suspending until connected on port 8000', +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +            }, +, +                if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +                  arg(value: '/C'), +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +                break;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, +++ b/build.gradle, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar', +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.Copy, +import org.gradle.api.tasks.Delete, +import org.gradle.api.tasks.Exec, +            File configFile = new File(node.homeDir, 'config/elasticsearch.yml'), +            Closure delayedSrc = {, +                return srcConfigFile, +            copyConfig.from(delayedSrc), +                      .into(destConfigFile.canonicalFile.parentFile), +            // we must add debug options inside the closure so the config is read at execution time, as, +            // gradle task options are not processed until the end of the configuration phase, +            if (node.config.debug) {, +                println 'Running elasticsearch in debug mode, suspending until connected on port 8000', +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +            }]