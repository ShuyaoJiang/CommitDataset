[+++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +++ b/distribution/build.gradle, +ext.dependencyFiles = project(':core').configurations.runtime.copyRecursive().exclude(module: 'slf4j-api'), +, +/*****************************************************************************, + *                                  Modules                                  *, + *****************************************************************************/, +, +task buildModules(type: Copy) {, +  into 'build/modules', +, +// we create the buildModules task above so the distribution subprojects can, +// depend on it, but we don't actually configure it until projects are evaluated, +// so it can depend on the bundling of plugins (ie modules must have been configured), +project.gradle.projectsEvaluated {, +  project.rootProject.subprojects.findAll { it.path.startsWith(':modules:') }.each { Project module ->, +    buildModules {, +      dependsOn(module.bundlePlugin), +      into(module.name) {, +        from { zipTree(module.bundlePlugin.outputs.files.singleFile) }, +      }, +    }, +  }, +}, +, +// make sure we have a clean task since we aren't a java project, but we have tasks that, +// put stuff in the build dir, +task clean(type: Delete) {, +  delete 'build', +    dependsOn(project.assemble), +    cluster {, +      distribution = project.name, +    }, +      from project(':distribution').dependencyFiles, +    }, +, +    modulesFiles = copySpec {, +      into 'modules', +      from project(':distribution').buildModules, +    with modulesFiles, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +++ b/distribution/build.gradle, +ext.dependencyFiles = project(':core').configurations.runtime.copyRecursive().exclude(module: 'slf4j-api'), +, +/*****************************************************************************, + *                                  Modules                                  *, + *****************************************************************************/, +, +task buildModules(type: Copy) {, +  into 'build/modules', +, +// we create the buildModules task above so the distribution subprojects can, +// depend on it, but we don't actually configure it until projects are evaluated, +// so it can depend on the bundling of plugins (ie modules must have been configured), +project.gradle.projectsEvaluated {, +  project.rootProject.subprojects.findAll { it.path.startsWith(':modules:') }.each { Project module ->, +    buildModules {, +      dependsOn(module.bundlePlugin), +      into(module.name) {, +        from { zipTree(module.bundlePlugin.outputs.files.singleFile) }, +      }, +    }, +  }, +}, +, +// make sure we have a clean task since we aren't a java project, but we have tasks that, +// put stuff in the build dir, +task clean(type: Delete) {, +  delete 'build', +    dependsOn(project.assemble), +    cluster {, +      distribution = project.name, +    }, +      from project(':distribution').dependencyFiles, +    }, +, +    modulesFiles = copySpec {, +      into 'modules', +      from project(':distribution').buildModules, +    with modulesFiles, +++ b/distribution/deb/build.gradle, +  dependsOn preparePackagingFiles, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +++ b/distribution/build.gradle, +ext.dependencyFiles = project(':core').configurations.runtime.copyRecursive().exclude(module: 'slf4j-api'), +, +/*****************************************************************************, + *                                  Modules                                  *, + *****************************************************************************/, +, +task buildModules(type: Copy) {, +  into 'build/modules', +, +// we create the buildModules task above so the distribution subprojects can, +// depend on it, but we don't actually configure it until projects are evaluated, +// so it can depend on the bundling of plugins (ie modules must have been configured), +project.gradle.projectsEvaluated {, +  project.rootProject.subprojects.findAll { it.path.startsWith(':modules:') }.each { Project module ->, +    buildModules {]