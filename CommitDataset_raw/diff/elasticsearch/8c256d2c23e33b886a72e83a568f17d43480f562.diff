[+++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/DenseVectorFieldMapper.java, +            if (dim++ >= MAX_DIMS_COUNT) {, +                    "] has exceeded the maximum allowed number of dimensions of [" + MAX_DIMS_COUNT + "]");, +++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/DenseVectorFieldMapper.java, +            if (dim++ >= MAX_DIMS_COUNT) {, +                    "] has exceeded the maximum allowed number of dimensions of [" + MAX_DIMS_COUNT + "]");, +++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SparseVectorFieldMapper.java, +                if (dimCount++ >= MAX_DIMS_COUNT) {, +                        "] has exceeded the maximum allowed number of dimensions of [" + MAX_DIMS_COUNT + "]");, +++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/DenseVectorFieldMapper.java, +            if (dim++ >= MAX_DIMS_COUNT) {, +                    "] has exceeded the maximum allowed number of dimensions of [" + MAX_DIMS_COUNT + "]");, +++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SparseVectorFieldMapper.java, +                if (dimCount++ >= MAX_DIMS_COUNT) {, +                        "] has exceeded the maximum allowed number of dimensions of [" + MAX_DIMS_COUNT + "]");, +++ b/modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/DenseVectorFieldMapperTests.java, +import org.junit.Before;, +import java.io.IOException;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.instanceOf;, +, +    private DocumentMapper mapper;, +    @Before, +    public void setUpMapper() throws Exception {, +        mapper = parser.parse("_doc", new CompressedXContent(mapping));, +    }, +    @Override, +    protected Collection<Class<? extends Plugin>> getPlugins() {, +        return pluginList(MapperExtrasPlugin.class);, +    }, +    public void testDefaults() throws Exception {, +        assertThat(fields[0], instanceOf(BinaryDocValuesField.class));, +, +    public void testDimensionLimit() throws IOException {, +        float[] validVector = new float[DenseVectorFieldMapper.MAX_DIMS_COUNT];, +        BytesReference validDoc = BytesReference.bytes(, +            XContentFactory.jsonBuilder().startObject(), +                .array("my-dense-vector", validVector), +            .endObject());, +        mapper.parse(new SourceToParse("test-index", "_doc", "1", validDoc, XContentType.JSON));, +, +        float[] invalidVector = new float[DenseVectorFieldMapper.MAX_DIMS_COUNT + 1];, +        BytesReference invalidDoc = BytesReference.bytes(, +            XContentFactory.jsonBuilder().startObject(), +                .array("my-dense-vector", invalidVector), +                .endObject());, +        MapperParsingException e = expectThrows(MapperParsingException.class, () -> mapper.parse(, +            new SourceToParse("test-index", "_doc", "1", invalidDoc, XContentType.JSON)));, +        assertThat(e.getDetailedMessage(), containsString("has exceeded the maximum allowed number of dimensions"));, +    }, +++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/DenseVectorFieldMapper.java, +            if (dim++ >= MAX_DIMS_COUNT) {, +                    "] has exceeded the maximum allowed number of dimensions of [" + MAX_DIMS_COUNT + "]");, +++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SparseVectorFieldMapper.java, +                if (dimCount++ >= MAX_DIMS_COUNT) {, +                        "] has exceeded the maximum allowed number of dimensions of [" + MAX_DIMS_COUNT + "]");, +++ b/modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/DenseVectorFieldMapperTests.java, +import org.junit.Before;, +import java.io.IOException;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.instanceOf;, +, +    private DocumentMapper mapper;, +    @Before, +    public void setUpMapper() throws Exception {, +        mapper = parser.parse("_doc", new CompressedXContent(mapping));, +    }, +    @Override, +    protected Collection<Class<? extends Plugin>> getPlugins() {, +        return pluginList(MapperExtrasPlugin.class);, +    }, +    public void testDefaults() throws Exception {, +        assertThat(fields[0], instanceOf(BinaryDocValuesField.class));, +, +    public void testDimensionLimit() throws IOException {, +        float[] validVector = new float[DenseVectorFieldMapper.MAX_DIMS_COUNT];, +        BytesReference validDoc = BytesReference.bytes(, +            XContentFactory.jsonBuilder().startObject(), +                .array("my-dense-vector", validVector), +            .endObject());, +        mapper.parse(new SourceToParse("test-index", "_doc", "1", validDoc, XContentType.JSON));, +, +        float[] invalidVector = new float[DenseVectorFieldMapper.MAX_DIMS_COUNT + 1];, +        BytesReference invalidDoc = BytesReference.bytes(, +            XContentFactory.jsonBuilder().startObject(), +                .array("my-dense-vector", invalidVector), +                .endObject());, +        MapperParsingException e = expectThrows(MapperParsingException.class, () -> mapper.parse(, +            new SourceToParse("test-index", "_doc", "1", invalidDoc, XContentType.JSON)));, +        assertThat(e.getDetailedMessage(), containsString("has exceeded the maximum allowed number of dimensions"));, +    }, +++ b/modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SparseVectorFieldMapperTests.java, +import java.io.IOException;, +import java.util.Map;, +import java.util.function.Function;, +import java.util.stream.Collectors;, +import java.util.stream.IntStream;, +    public void setUpMapper() throws Exception {, +    public void testDimensionNumberValidation() {, +]