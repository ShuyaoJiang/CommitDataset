[+++ b/core/src/main/java/org/elasticsearch/action/CompositeIndicesRequest.java, + * through all the subrequests and delegates their execution to the appropriate transport action (e.g., +++ b/core/src/main/java/org/elasticsearch/action/CompositeIndicesRequest.java, + * through all the subrequests and delegates their execution to the appropriate transport action (e.g., +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/MultiSearchTemplateRequest.java, +        List<IndicesRequest> indicesRequests = new ArrayList<>();, +        for (SearchTemplateRequest request : requests) {, +            indicesRequests.addAll(request.subRequests());, +        }, +        return indicesRequests;, +++ b/core/src/main/java/org/elasticsearch/action/CompositeIndicesRequest.java, + * through all the subrequests and delegates their execution to the appropriate transport action (e.g., +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/MultiSearchTemplateRequest.java, +        List<IndicesRequest> indicesRequests = new ArrayList<>();, +        for (SearchTemplateRequest request : requests) {, +            indicesRequests.addAll(request.subRequests());, +        }, +        return indicesRequests;, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/SearchTemplateRequest.java, +import org.elasticsearch.action.CompositeIndicesRequest;, +import java.util.Collections;, +import java.util.List;, +public class SearchTemplateRequest extends ActionRequest implements CompositeIndicesRequest {, +    public List<? extends IndicesRequest> subRequests() {, +        //if we are simulating no index is involved in the request, +        if (simulate) {, +            assert request == null;, +            return Collections.emptyList();, +        //composite request as it delegates to search, but it holds one single action (search itself), +        return Collections.singletonList(request);, +++ b/core/src/main/java/org/elasticsearch/action/CompositeIndicesRequest.java, + * through all the subrequests and delegates their execution to the appropriate transport action (e.g., +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/MultiSearchTemplateRequest.java, +        List<IndicesRequest> indicesRequests = new ArrayList<>();, +        for (SearchTemplateRequest request : requests) {, +            indicesRequests.addAll(request.subRequests());, +        }, +        return indicesRequests;, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/SearchTemplateRequest.java, +import org.elasticsearch.action.CompositeIndicesRequest;, +import java.util.Collections;, +import java.util.List;, +public class SearchTemplateRequest extends ActionRequest implements CompositeIndicesRequest {, +    public List<? extends IndicesRequest> subRequests() {, +        //if we are simulating no index is involved in the request, +        if (simulate) {, +            assert request == null;, +            return Collections.emptyList();, +        //composite request as it delegates to search, but it holds one single action (search itself), +        return Collections.singletonList(request);, +++ b/modules/lang-mustache/src/test/java/org/elasticsearch/script/mustache/MultiSearchTemplateRequestTests.java, +        assertThat(request.requests().get(0).getRequest().indices(), arrayContaining("test0", "test1"));, +        assertThat(request.requests().get(1).getRequest().indices()[0], equalTo("test2"));, +        assertThat(request.requests().get(1).getRequest().indices()[1], equalTo("test3"));, +        assertThat(request.requests().get(2).getRequest().indices()[0], equalTo("test4"));, +        assertThat(request.requests().get(2).getRequest().indices()[1], equalTo("test1"));]