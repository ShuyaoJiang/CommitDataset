[+++ b/src/test/java/org/elasticsearch/search/geo/GeoShapeIntegrationTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;, +        assertAcked(prepareCreate("test").addMapping("type1", mapping));, +        indexRandom(false, client().prepareIndex("test", "type1", "aNullshape").setSource("{\"location\": null}"));, +        assertAcked(prepareCreate("test").addMapping("type1", mapping));, +        indexRandom(true,, +, +                        .endObject()),, +                        .endObject()));, +        assertSearchResponse(searchResponse);, +        assertSearchResponse(searchResponse);, +        assertAcked(prepareCreate("test").addMapping("type1", mapping));, +        indexRandom(true, client().prepareIndex("test", "type1", "blakely").setSource(jsonBuilder().startObject(), +                .endObject()));, +        assertSearchResponse(searchResponse);, +        assertAcked(prepareCreate("test").addMapping("type1", mapping));, +        createIndex("shapes");, +        ShapeBuilder shape = ShapeBuilder.newEnvelope().topLeft(-45, 45).bottomRight(45, -45);, +, +        indexRandom(true,, +            client().prepareIndex("shapes", "shape_type", "Big_Rectangle").setSource(jsonBuilder().startObject(), +                .field("shape", shape).endObject()),, +                .endObject()));, +        assertSearchResponse(searchResponse);, +        searchResponse = client().prepareSearch("test"), +        assertSearchResponse(searchResponse);, +    public void testParsingMultipleShapes() throws Exception {, +        assertAcked(prepareCreate("test").addMapping("type1", mapping));, +        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource(o1));, +        assertSearchResponse(result);, +    public void testShapeFetching_path() throws Exception {, +        createIndex("shapes");, +        assertAcked(prepareCreate("test").addMapping("type", "location", "type=geo_shape"));, +, +        indexRandom(true,, +                ),, +                        .endObject().endObject()));, +        ensureSearchable("test", "shapes");, +        assertSearchResponse(result);, +        assertSearchResponse(result);, +        assertSearchResponse(result);, +        assertSearchResponse(result);, +        assertSearchResponse(result);, +        assertSearchResponse(result);, +        assertSearchResponse(result);, +        assertSearchResponse(result);, +        assertAcked(prepareCreate("test").addMapping("type1", mapping));, +, +        indexRandom(true,, +                    .endObject()));]