[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +import org.elasticsearch.action.LatchedActionListener;, +import java.util.concurrent.CountDownLatch;, +    @SuppressWarnings({"unchecked", "rawtypes"}), +            // tag::index-execute-listener, +            ActionListener<IndexResponse> listener = new ActionListener<IndexResponse>() {, +            };, +            // end::index-execute-listener, +, +            // Replace the empty listener by a blocking listener in test, +            final CountDownLatch latch = new CountDownLatch(1);, +            listener = new LatchedActionListener(listener, latch);, +, +            // tag::index-execute-async, +            client.indexAsync(request, listener); // <1>, +            assertTrue(latch.await(30L, TimeUnit.SECONDS));, +    @SuppressWarnings({"unchecked", "rawtypes"}), +            // tag::update-execute-listener, +            ActionListener<UpdateResponse> listener = new ActionListener<UpdateResponse>() {, +            };, +            // end::update-execute-listener, +, +            // Replace the empty listener by a blocking listener in test, +            final CountDownLatch latch = new CountDownLatch(1);, +            listener = new LatchedActionListener(listener, latch);, +, +            // tag::update-execute-async, +            client.updateAsync(request, listener); // <1>, +            assertTrue(latch.await(30L, TimeUnit.SECONDS));, +    @SuppressWarnings({"unchecked", "rawtypes"}), +            // tag::delete-execute-listener, +            ActionListener<DeleteResponse> listener = new ActionListener<DeleteResponse>() {, +            };, +            // end::delete-execute-listener, +, +            // Replace the empty listener by a blocking listener in test, +            final CountDownLatch latch = new CountDownLatch(1);, +            listener = new LatchedActionListener(listener, latch);, +, +            // tag::delete-execute-async, +            client.deleteAsync(request, listener); // <1>, +            assertTrue(latch.await(30L, TimeUnit.SECONDS));, +    @SuppressWarnings({"unchecked", "rawtypes"}), +    public void testBulk() throws Exception {, +            // tag::bulk-execute-listener, +            ActionListener<BulkResponse> listener = new ActionListener<BulkResponse>() {, +            };, +            // end::bulk-execute-listener, +, +            // Replace the empty listener by a blocking listener in test, +            final CountDownLatch latch = new CountDownLatch(1);, +            listener = new LatchedActionListener(listener, latch);, +, +            // tag::bulk-execute-async, +            client.bulkAsync(request, listener); // <1>, +, +            assertTrue(latch.await(30L, TimeUnit.SECONDS));, +    @SuppressWarnings({"unchecked", "rawtypes"}), +    public void testGet() throws Exception {, +, +            // tag::get-execute-listener, +            ActionListener<GetResponse> listener = new ActionListener<GetResponse>() {, +            };, +            // end::get-execute-listener, +, +            // Replace the empty listener by a blocking listener in test, +            final CountDownLatch latch = new CountDownLatch(1);, +            listener = new LatchedActionListener(listener, latch);, +, +            //tag::get-execute-async, +            client.getAsync(request, listener); // <1>, +, +            assertTrue(latch.await(30L, TimeUnit.SECONDS));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +import org.elasticsearch.action.LatchedActionListener;, +import java.util.concurrent.CountDownLatch;, +    @SuppressWarnings({"unchecked", "rawtypes"}), +            // tag::index-execute-listener, +            ActionListener<IndexResponse> listener = new ActionListener<IndexResponse>() {, +            };, +            // end::index-execute-listener, +, +            // Replace the empty listener by a blocking listener in test, +            final CountDownLatch latch = new CountDownLatch(1);, +            listener = new LatchedActionListener(listener, latch);, +, +            // tag::index-execute-async, +            client.indexAsync(request, listener); // <1>, +            assertTrue(latch.await(30L, TimeUnit.SECONDS));, +    @SuppressWarnings({"unchecked", "rawtypes"}), +            // tag::update-execute-listener, +            ActionListener<UpdateResponse> listener = new ActionListener<UpdateResponse>() {, +            };, +            // end::update-execute-listener, +, +            // Replace the empty listener by a blocking listener in test, +            final CountDownLatch latch = new CountDownLatch(1);, +            listener = new LatchedActionListener(listener, latch);, +, +            // tag::update-execute-async]