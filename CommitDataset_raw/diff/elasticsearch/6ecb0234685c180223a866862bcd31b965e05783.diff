[+++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsThreadPoolExecutor.java, +    @Override, +    protected void afterExecute(Runnable r, Throwable t) {, +        super.afterExecute(r, t);, +        assert contextHolder.isDefaultContext() : "the thread context is not the default context and the thread [" +, +            Thread.currentThread().getName() + "] is being returned to the pool after executing [" + r + "]";, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsThreadPoolExecutor.java, +    @Override, +    protected void afterExecute(Runnable r, Throwable t) {, +        super.afterExecute(r, t);, +        assert contextHolder.isDefaultContext() : "the thread context is not the default context and the thread [" +, +            Thread.currentThread().getName() + "] is being returned to the pool after executing [" + r + "]";, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedEsThreadPoolExecutor.java, +        super.afterExecute(r, t);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsThreadPoolExecutor.java, +    @Override, +    protected void afterExecute(Runnable r, Throwable t) {, +        super.afterExecute(r, t);, +        assert contextHolder.isDefaultContext() : "the thread context is not the default context and the thread [" +, +            Thread.currentThread().getName() + "] is being returned to the pool after executing [" + r + "]";, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedEsThreadPoolExecutor.java, +        super.afterExecute(r, t);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java, +    /**, +     * Returns true if the current context is the default context., +     */, +    boolean isDefaultContext() {, +        return threadLocal.get() == DEFAULT_CONTEXT;, +    }, +, +        private final ThreadContext.StoredContext creatorsContext;, +, +        private ThreadContext.StoredContext threadsOriginalContext = null;, +            creatorsContext = newStoredContext();, +            try {, +            } finally {, +                if (threadsOriginalContext != null) {, +                    threadsOriginalContext.restore();, +                }, +            }, +            threadsOriginalContext = stashContext();, +            try {, +                creatorsContext.restore();, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsThreadPoolExecutor.java, +    @Override, +    protected void afterExecute(Runnable r, Throwable t) {, +        super.afterExecute(r, t);, +        assert contextHolder.isDefaultContext() : "the thread context is not the default context and the thread [" +, +            Thread.currentThread().getName() + "] is being returned to the pool after executing [" + r + "]";, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedEsThreadPoolExecutor.java, +        super.afterExecute(r, t);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java, +    /**, +     * Returns true if the current context is the default context., +     */, +    boolean isDefaultContext() {, +        return threadLocal.get() == DEFAULT_CONTEXT;, +    }, +, +        private final ThreadContext.StoredContext creatorsContext;, +, +        private ThreadContext.StoredContext threadsOriginalContext = null;, +            creatorsContext = newStoredContext();, +            try {, +            } finally {, +                if (threadsOriginalContext != null) {, +                    threadsOriginalContext.restore();, +                }, +            }, +            threadsOriginalContext = stashContext();, +            try {, +                creatorsContext.restore();, +++ b/core/src/test/java/org/elasticsearch/common/util/concurrent/ThreadContextTests.java, +, +            // but not after, +            assertNull(threadContext.getHeader("foo"));, +    public void testPreservesThreadsOriginalContextOnRunException() throws IOException {, +        try (ThreadContext threadContext = new ThreadContext(Settings.EMPTY)) {, +            Runnable withContext;, +, +            // create a abstract runnable, add headers and transient objects and verify in the methods, +            try (ThreadContext.StoredContext ignored = threadContext.stashContext()) {, +                threadContext.putHeader("foo", "bar");, +                threadContext.putTransient("foo", "bar_transient");, +                withContext = threadContext.preserveContext(new AbstractRunnable() {, +, +                    @Override, +                    public void onAfter() {, +                        assertEquals("bar", threadContext.getHeader("foo"));, +                        assertEquals("bar_transient", threadContext.getTransient("foo"));, +                        assertNotNull(threadContext.getTransient("failure"));, +                        assertEquals("exception from doRun", ((RuntimeException)threadContext.getTransient("failure")).getMessage());]