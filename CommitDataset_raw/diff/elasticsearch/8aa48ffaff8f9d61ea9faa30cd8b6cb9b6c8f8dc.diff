[+++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/License.java, +, +, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeString(label);, +        }, +, +        public static Status readFrom(StreamInput in) throws IOException {, +            String value = in.readString();, +            switch (value) {, +                case "active":, +                    return ACTIVE;, +                case "invalid":, +                    return INVALID;, +                case "expired":, +                    return EXPIRED;, +                default:, +                    throw new IllegalArgumentException("unknown license status [" + value + "]");, +            }, +        }, +++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/License.java, +, +, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeString(label);, +        }, +, +        public static Status readFrom(StreamInput in) throws IOException {, +            String value = in.readString();, +            switch (value) {, +                case "active":, +                    return ACTIVE;, +                case "invalid":, +                    return INVALID;, +                case "expired":, +                    return EXPIRED;, +                default:, +                    throw new IllegalArgumentException("unknown license status [" + value + "]");, +            }, +        }, +++ b/elasticsearch/qa/smoke-test-watcher-with-shield/src/test/resources/rest-api-spec/test/watcher/watcher_and_shield/10_insufficient_shield_privs.yaml, +    watcher.stats: {}, +    watcher.stats: {}, +  - match: { watcher_state: started }, +++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/License.java, +, +, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeString(label);, +        }, +, +        public static Status readFrom(StreamInput in) throws IOException {, +            String value = in.readString();, +            switch (value) {, +                case "active":, +                    return ACTIVE;, +                case "invalid":, +                    return INVALID;, +                case "expired":, +                    return EXPIRED;, +                default:, +                    throw new IllegalArgumentException("unknown license status [" + value + "]");, +            }, +        }, +++ b/elasticsearch/qa/smoke-test-watcher-with-shield/src/test/resources/rest-api-spec/test/watcher/watcher_and_shield/10_insufficient_shield_privs.yaml, +    watcher.stats: {}, +    watcher.stats: {}, +  - match: { watcher_state: started }, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/LicensingClient.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.license.plugin;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.client.ElasticsearchClient;, +import org.elasticsearch.license.core.License;, +import org.elasticsearch.license.plugin.action.delete.DeleteLicenseAction;, +import org.elasticsearch.license.plugin.action.delete.DeleteLicenseRequest;, +import org.elasticsearch.license.plugin.action.delete.DeleteLicenseRequestBuilder;, +import org.elasticsearch.license.plugin.action.delete.DeleteLicenseResponse;, +import org.elasticsearch.license.plugin.action.get.GetLicenseAction;, +import org.elasticsearch.license.plugin.action.get.GetLicenseRequest;, +import org.elasticsearch.license.plugin.action.get.GetLicenseRequestBuilder;, +import org.elasticsearch.license.plugin.action.get.GetLicenseResponse;, +import org.elasticsearch.license.plugin.action.put.PutLicenseAction;, +import org.elasticsearch.license.plugin.action.put.PutLicenseRequest;, +import org.elasticsearch.license.plugin.action.put.PutLicenseRequestBuilder;, +import org.elasticsearch.license.plugin.action.put.PutLicenseResponse;, +, +/**, + *, + */, +public class LicensingClient {, +, +    private final ElasticsearchClient client;, +, +    public LicensingClient(ElasticsearchClient client) {]