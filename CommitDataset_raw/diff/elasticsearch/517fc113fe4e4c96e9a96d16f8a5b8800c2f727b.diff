[+++ b/TESTING.asciidoc, +gradle :distribution:tar:integTest   \, +gradle :distribution:tar:integTest \, +++ b/TESTING.asciidoc, +gradle :distribution:tar:integTest   \, +gradle :distribution:tar:integTest \, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoresResponse.java, +        private Allocation allocation;, +        public enum Allocation {, +            Allocation(byte id) {, +            private static Allocation fromId(byte id) {, +                    default: throw new IllegalArgumentException("unknown id for allocation [" + id + "]");, +                    default: throw new IllegalArgumentException("unknown id for allocation [" + id + "]");, +            private static Allocation readFrom(StreamInput in) throws IOException {, +        public StoreStatus(DiscoveryNode node, long version, Allocation allocation, Throwable storeException) {, +            this.allocation = allocation;, +         * Version of the store, used to select the store that will be, +         * used as a primary., +         * The allocation status of the store., +         * {@link Allocation#PRIMARY} indicates a primary shard copy, +         * {@link Allocation#REPLICA} indicates a replica shard copy, +         * {@link Allocation#UNUSED} indicates an unused shard copy, +        public Allocation getAllocation() {, +            return allocation;, +            allocation = Allocation.readFrom(in);, +            allocation.writeTo(out);, +            builder.field(Fields.ALLOCATED, allocation.value());, +                    return Integer.compare(allocation.id, other.allocation.id);, +++ b/TESTING.asciidoc, +gradle :distribution:tar:integTest   \, +gradle :distribution:tar:integTest \, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoresResponse.java, +        private Allocation allocation;, +        public enum Allocation {, +            Allocation(byte id) {, +            private static Allocation fromId(byte id) {, +                    default: throw new IllegalArgumentException("unknown id for allocation [" + id + "]");, +                    default: throw new IllegalArgumentException("unknown id for allocation [" + id + "]");, +            private static Allocation readFrom(StreamInput in) throws IOException {, +        public StoreStatus(DiscoveryNode node, long version, Allocation allocation, Throwable storeException) {, +            this.allocation = allocation;, +         * Version of the store, used to select the store that will be, +         * used as a primary., +         * The allocation status of the store., +         * {@link Allocation#PRIMARY} indicates a primary shard copy, +         * {@link Allocation#REPLICA} indicates a replica shard copy, +         * {@link Allocation#UNUSED} indicates an unused shard copy, +        public Allocation getAllocation() {, +            return allocation;, +            allocation = Allocation.readFrom(in);, +            allocation.writeTo(out);, +            builder.field(Fields.ALLOCATED, allocation.value());, +                    return Integer.compare(allocation.id, other.allocation.id);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +                            IndicesShardStoresResponse.StoreStatus.Allocation allocation = getAllocation(fetchResponse.shardId.getIndex(), fetchResponse.shardId.id(), response.getNode());, +                            storeStatuses.add(new IndicesShardStoresResponse.StoreStatus(response.getNode(), response.version(), allocation, response.storeException()));, +            private IndicesShardStoresResponse.StoreStatus.Allocation getAllocation(String index, int shardID, DiscoveryNode node) {, +                            return IndicesShardStoresResponse.StoreStatus.Allocation.PRIMARY;, +                            return IndicesShardStoresResponse.StoreStatus.Allocation.REPLICA;, +                            return IndicesShardStoresResponse.StoreStatus.Allocation.UNUSED;, +                return IndicesShardStoresResponse.StoreStatus.Allocation.UNUSED;, +                return response.storeException() != null || response.version() != -1;, +++ b/TESTING.asciidoc, +gradle :distribution:tar:integTest   \, +gradle :distribution:tar:integTest \, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoresResponse.java, +        private Allocation allocation;, +        public enum Allocation {, +            Allocation(byte id) {, +            private static Allocation fromId(byte id) {, +                    default: throw new IllegalArgumentException("unknown id for allocation [" + id + "]");, +                    default: throw new IllegalArgumentException("unknown id for allocation [" + id + "]");, +            private static Allocation readFrom(StreamInput in) throws IOException {, +        public StoreStatus(DiscoveryNode node, long version, Allocation allocation, Throwable storeException) {, +            this.allocation = allocation;, +         * Version of the store, used to select the store that will be, +         * used as a primary., +         * The allocation status of the store., +         * {@link Allocation#PRIMARY} indicates a primary shard copy, +         * {@link Allocation#REPLICA} indicates a replica shard copy, +         * {@link Allocation#UNUSED} indicates an unused shard copy, +        public Allocation getAllocation() {, +            return allocation;, +            allocation = Allocation.readFrom(in);, +            allocation.writeTo(out);, +            builder.field(Fields.ALLOCATED, allocation.value());, +                    return Integer.compare(allocation.id, other.allocation.id);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +                            IndicesShardStoresResponse.StoreStatus.Allocation allocation = getAllocation(fetchResponse.shardId.getIndex(), fetchResponse.shardId.id(), response.getNode());, +                            storeStatuses.add(new IndicesShardStoresResponse.StoreStatus(response.getNode(), response.version(), allocation, response.storeException()));, +            private IndicesShardStoresResponse.StoreStatus.Allocation getAllocation(String index, int shardID, DiscoveryNode node) {, +                            return IndicesShardStoresResponse.StoreStatus.Allocation.PRIMARY;, +                            return IndicesShardStoresResponse.StoreStatus.Allocation.REPLICA;, +                            return IndicesShardStoresResponse.StoreStatus.Allocation.UNUSED;, +                return IndicesShardStoresResponse.StoreStatus.Allocation.UNUSED;, +                return response.storeException() != null || response.version() != -1;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +        private BackoffPolicy backoffPolicy = BackoffPolicy.noBackoff();, +         * The default is to not back off, i.e. failing immediately., +++ b/TESTING.asciidoc]