[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalWriteable(Template::new);, +        out.writeOptionalWriteable(template);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalWriteable(Template::new);, +        out.writeOptionalWriteable(template);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +            script = new Script(in);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalWriteable(Template::new);, +        out.writeOptionalWriteable(template);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +            script = new Script(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +        script = new Script(in);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalWriteable(Template::new);, +        out.writeOptionalWriteable(template);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +            script = new Script(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +        script = new Script(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreFunctionBuilder.java, +        script = new Script(in);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalWriteable(Template::new);, +        out.writeOptionalWriteable(template);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +            script = new Script(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +        script = new Script(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreFunctionBuilder.java, +        script = new Script(in);, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +            Set<PosixFilePermission> perms = new HashSet<>();, +            perms.add(PosixFilePermission.OWNER_EXECUTE);, +            perms.add(PosixFilePermission.OWNER_READ);, +            perms.add(PosixFilePermission.OWNER_WRITE);, +            perms.add(PosixFilePermission.GROUP_READ);, +            perms.add(PosixFilePermission.GROUP_EXECUTE);, +            perms.add(PosixFilePermission.OTHERS_READ);, +            perms.add(PosixFilePermission.OTHERS_EXECUTE);, +            return Files.createTempDirectory(pluginsDir, ".installing-", PosixFilePermissions.asFileAttribute(perms));, +, +        // setup file attributes for the installed files to those of the parent dir, +        final Set<PosixFilePermission> perms = new HashSet<>();, +        final PosixFileAttributeView binAttributeView = Files.getFileAttributeView(destBinDir.getParent(), PosixFileAttributeView.class);, +        if (binAttributeView != null) {, +            perms.addAll(binAttributeView.readAttributes().permissions());, +            // setting execute bits, since this just means "the file is executable", and actual execution requires read, +            perms.add(PosixFilePermission.OWNER_EXECUTE);, +            perms.add(PosixFilePermission.GROUP_EXECUTE);, +            perms.add(PosixFilePermission.OTHERS_EXECUTE);, +        }, +, +                final PosixFileAttributeView view = Files.getFileAttributeView(destFile, PosixFileAttributeView.class);, +                if (view != null) {, +                    view.setPermissions(perms);, +                }, +        // create the plugin's config dir "if necessary", +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalWriteable(Template::new);, +        out.writeOptionalWriteable(template);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +            script = new Script(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +        script = new Script(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreFunctionBuilder.java, +        script = new Script(in);, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +            Set<PosixFilePermission> perms = new HashSet<>();, +            perms.add(PosixFilePermission.OWNER_EXECUTE);, +            perms.add(PosixFilePermission.OWNER_READ);, +            perms.add(PosixFilePermission.OWNER_WRITE);, +            perms.add(PosixFilePermission.GROUP_READ);, +            perms.add(PosixFilePermission.GROUP_EXECUTE);, +            perms.add(PosixFilePermission.OTHERS_READ);, +            perms.add(PosixFilePermission.OTHERS_EXECUTE);, +            return Files.createTempDirectory(pluginsDir, ".installing-", PosixFilePermissions.asFileAttribute(perms));, +, +        // setup file attributes for the installed files to those of the parent dir, +        final Set<PosixFilePermission> perms = new HashSet<>();, +        final PosixFileAttributeView binAttributeView = Files.getFileAttributeView(destBinDir.getParent(), PosixFileAttributeView.class);, +        if (binAttributeView != null) {, +            perms.addAll(binAttributeView.readAttributes().permissions());, +            // setting execute bits, since this just means "the file is executable", and actual execution requires read, +            perms.add(PosixFilePermission.OWNER_EXECUTE);, +            perms.add(PosixFilePermission.GROUP_EXECUTE);, +            perms.add(PosixFilePermission.OTHERS_EXECUTE);, +        }, +, +                final PosixFileAttributeView view = Files.getFileAttributeView(destFile, PosixFileAttributeView.class);, +                if (view != null) {, +                    view.setPermissions(perms);, +                }, +        // create the plugin's config dir "if necessary", +++ b/core/src/main/java/org/elasticsearch/script/Script.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class Script implements ToXContent, Writeable<Script> {, +    public final Script readFrom(StreamInput in) throws IOException {]