[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/EvenShardsCountAllocator.java, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.common.trove.map.hash.TObjectIntHashMap;, +import java.util.Arrays;, +import java.util.Comparator;, +        RoutingNode[] nodes = sortedNodesLeastToHigh(allocation);, +            for (int i = 0; i < nodes.length; i++) {, +                RoutingNode node = nodes[lastNode];, +                if (lastNode == nodes.length) {, +            for (RoutingNode routingNode : sortedNodesLeastToHigh(allocation)) {, +        RoutingNode[] sortedNodesLeastToHigh = sortedNodesLeastToHigh(allocation);, +        if (sortedNodesLeastToHigh.length == 0) {, +        int highIndex = sortedNodesLeastToHigh.length - 1;, +                RoutingNode lowRoutingNode = sortedNodesLeastToHigh[lowIndex];, +                RoutingNode highRoutingNode = sortedNodesLeastToHigh[highIndex];, +        RoutingNode[] sortedNodesLeastToHigh = sortedNodesLeastToHigh(allocation);, +        if (sortedNodesLeastToHigh.length == 0) {, +, +    private RoutingNode[] sortedNodesLeastToHigh(RoutingAllocation allocation) {, +        // create count per node id, taking into account relocations, +        final TObjectIntHashMap<String> nodeCounts = new TObjectIntHashMap<String>();, +        for (RoutingNode node : allocation.routingNodes()) {, +            for (int i = 0; i < node.shards().size(); i++) {, +                ShardRouting shardRouting = node.shards().get(i);, +                String nodeId = shardRouting.relocating() ? shardRouting.relocatingNodeId() : shardRouting.currentNodeId();, +                nodeCounts.adjustOrPutValue(nodeId, 1, 1);, +            }, +        }, +        RoutingNode[] nodes = allocation.routingNodes().nodesToShards().values().toArray(new RoutingNode[allocation.routingNodes().nodesToShards().values().size()]);, +        Arrays.sort(nodes, new Comparator<RoutingNode>() {, +            @Override public int compare(RoutingNode o1, RoutingNode o2) {, +                return nodeCounts.get(o1.nodeId()) - nodeCounts.get(o2.nodeId());, +            }, +        });, +        return nodes;, +    }]