[+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/190_index_prefix_search.yml, +        body:, +          query:, +            query_string:, +              default_field: text, +              query: s*, +              boost: 2, +, +  - match: {hits.total: 1}, +  - match: {hits.max_score: 2}, +  - match: {hits.hits.0._score: 2}, +, +  - do:, +      search:, +        rest_total_hits_as_int: true, +        index: test, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/190_index_prefix_search.yml, +        body:, +          query:, +            query_string:, +              default_field: text, +              query: s*, +              boost: 2, +, +  - match: {hits.total: 1}, +  - match: {hits.max_score: 2}, +  - match: {hits.hits.0._score: 2}, +, +  - do:, +      search:, +        rest_total_hits_as_int: true, +        index: test, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.search.AutomatonQuery;, +import org.apache.lucene.util.automaton.Automata;, +import org.apache.lucene.util.automaton.Automaton;, +import org.apache.lucene.util.automaton.Operations;, +            return length >= minChars - 1 && length <= maxChars;, +        public Query prefixQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {, +            if (value.length() >= minChars) {, +                return super.termQuery(value, context);, +            }, +            List<Automaton> automata = new ArrayList<>();, +            automata.add(Automata.makeString(value));, +            for (int i = value.length(); i < minChars; i++) {, +                automata.add(Automata.makeAnyChar());, +            }, +            Automaton automaton = Operations.concatenate(automata);, +            AutomatonQuery query = new AutomatonQuery(new Term(name(), value + "*"), automaton);, +            query.setRewriteMethod(method);, +            return query;, +        }, +, +        @Override, +            Query tq = prefixFieldType.prefixQuery(value, method, context);, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/190_index_prefix_search.yml, +        body:, +          query:, +            query_string:, +              default_field: text, +              query: s*, +              boost: 2, +, +  - match: {hits.total: 1}, +  - match: {hits.max_score: 2}, +  - match: {hits.hits.0._score: 2}, +, +  - do:, +      search:, +        rest_total_hits_as_int: true, +        index: test, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.search.AutomatonQuery;, +import org.apache.lucene.util.automaton.Automata;, +import org.apache.lucene.util.automaton.Automaton;, +import org.apache.lucene.util.automaton.Operations;, +            return length >= minChars - 1 && length <= maxChars;, +        public Query prefixQuery(String value, MultiTermQuery.RewriteMethod method, QueryShardContext context) {, +            if (value.length() >= minChars) {, +                return super.termQuery(value, context);, +            }, +            List<Automaton> automata = new ArrayList<>();, +            automata.add(Automata.makeString(value));, +            for (int i = value.length(); i < minChars; i++) {, +                automata.add(Automata.makeAnyChar());, +            }, +            Automaton automaton = Operations.concatenate(automata);, +            AutomatonQuery query = new AutomatonQuery(new Term(name(), value + "*"), automaton);, +            query.setRewriteMethod(method);, +            return query;, +        }, +, +        @Override, +            Query tq = prefixFieldType.prefixQuery(value, method, context);, +++ b/server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java, +                .field("min_chars", 2), +            assertThat(mapper.mappers().getMapper("field._index_prefix").toString(), containsString("prefixChars=2:10"));, +            assertThat(mapper.mappers().getMapper("field._index_prefix").toString(), containsString("prefixChars=2:5"));, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () ->, +                indexService.mapperService().merge("type", new CompressedXContent(illegalMapping), MergeReason.MAPPING_UPDATE));]