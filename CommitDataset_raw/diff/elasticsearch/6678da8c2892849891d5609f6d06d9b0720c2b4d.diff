[+++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true %s', +++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true %s', +++ b/rest-api-spec/test/abort_benchmark/10_basic.yaml, +        features:    "benchmark", +++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true %s', +++ b/rest-api-spec/test/abort_benchmark/10_basic.yaml, +        features:    "benchmark", +++ b/rest-api-spec/test/benchmark/10_basic.yaml, +        features:    "benchmark", +  - match: { status: COMPLETE }, +++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true %s', +++ b/rest-api-spec/test/abort_benchmark/10_basic.yaml, +        features:    "benchmark", +++ b/rest-api-spec/test/benchmark/10_basic.yaml, +        features:    "benchmark", +  - match: { status: COMPLETE }, +++ b/rest-api-spec/test/list_benchmarks/10_basic.yaml, +        features:    "benchmark", +++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true %s', +++ b/rest-api-spec/test/abort_benchmark/10_basic.yaml, +        features:    "benchmark", +++ b/rest-api-spec/test/benchmark/10_basic.yaml, +        features:    "benchmark", +  - match: { status: COMPLETE }, +++ b/rest-api-spec/test/list_benchmarks/10_basic.yaml, +        features:    "benchmark", +++ b/src/test/java/org/elasticsearch/action/bench/BenchmarkNegativeTest.java, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.*;, +, +@ClusterScope(scope = Scope.SUITE, enableRandomBenchNodes = false), +++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true %s', +++ b/rest-api-spec/test/abort_benchmark/10_basic.yaml, +        features:    "benchmark", +++ b/rest-api-spec/test/benchmark/10_basic.yaml, +        features:    "benchmark", +  - match: { status: COMPLETE }, +++ b/rest-api-spec/test/list_benchmarks/10_basic.yaml, +        features:    "benchmark", +++ b/src/test/java/org/elasticsearch/action/bench/BenchmarkNegativeTest.java, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.*;, +, +@ClusterScope(scope = Scope.SUITE, enableRandomBenchNodes = false), +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +         * Returns whether the ability to randomly have benchmark (client) nodes as part of the cluster needs to be enabled., +         * Default is {@link org.elasticsearch.test.TestCluster#DEFAULT_ENABLE_RANDOM_BENCH_NODES}., +         */, +        boolean enableRandomBenchNodes() default TestCluster.DEFAULT_ENABLE_RANDOM_BENCH_NODES;, +, +        /**, +    private boolean enableRandomBenchNodes() {, +        ClusterScope annotation = getAnnotation(this.getClass());, +        return annotation == null ? TestCluster.DEFAULT_ENABLE_RANDOM_BENCH_NODES : annotation.enableRandomBenchNodes();, +    }, +, +        boolean enableRandomBenchNodes = enableRandomBenchNodes();, +        return new TestCluster(currentClusterSeed, minNumDataNodes, maxNumDataNodes, clusterName(scope.name(), ElasticsearchTestCase.CHILD_VM_ID, currentClusterSeed), nodeSettingsSource, numClientNodes, enableRandomBenchNodes);, +++ b/dev-tools/build_release.py, +    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true %s', +++ b/rest-api-spec/test/abort_benchmark/10_basic.yaml, +        features:    "benchmark", +++ b/rest-api-spec/test/benchmark/10_basic.yaml, +        features:    "benchmark", +  - match: { status: COMPLETE }, +++ b/rest-api-spec/test/list_benchmarks/10_basic.yaml, +        features:    "benchmark", +++ b/src/test/java/org/elasticsearch/action/bench/BenchmarkNegativeTest.java, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.*;, +, +@ClusterScope(scope = Scope.SUITE, enableRandomBenchNodes = false), +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +         * Returns whether the ability to randomly have benchmark (client) nodes as part of the cluster needs to be enabled., +         * Default is {@link org.elasticsearch.test.TestCluster#DEFAULT_ENABLE_RANDOM_BENCH_NODES}., +         */, +        boolean enableRandomBenchNodes() default TestCluster.DEFAULT_ENABLE_RANDOM_BENCH_NODES;, +, +        /**, +    private boolean enableRandomBenchNodes() {, +        ClusterScope annotation = getAnnotation(this.getClass());, +        return annotation == null ? TestCluster.DEFAULT_ENABLE_RANDOM_BENCH_NODES : annotation.enableRandomBenchNodes();, +    }, +, +        boolean enableRandomBenchNodes = enableRandomBenchNodes();, +        return new TestCluster(currentClusterSeed, minNumDataNodes, maxNumDataNodes, clusterName(scope.name(), ElasticsearchTestCase.CHILD_VM_ID, currentClusterSeed), nodeSettingsSource, numClientNodes, enableRandomBenchNodes);, +++ b/src/test/java/org/elasticsearch/test/ExternalTestCluster.java, +    private final int numBenchNodes;, +        int benchNodes = 0;, +            if (nodeInfo.getSettings().getAsBoolean("node.bench", false)) {, +                benchNodes++;, +            }, +        this.numBenchNodes = benchNodes;, +    public int numBenchNodes() {, +        return numBenchNodes;, +    }, +]