[+++ b/client/build.gradle, +  //jackson is only needed in the sniff package, +++ b/client/build.gradle, +  //jackson is only needed in the sniff package, +++ b/client/src/main/java/org/elasticsearch/client/sniff/SniffingConnectionPool.java, +                                  CloseableHttpClient client, RequestConfig sniffRequestConfig, int sniffRequestTimeout, String scheme,, +        if (scheme.equals("http") == false && scheme.equals("https") == false) {, +            throw new IllegalArgumentException("scheme must be either http or https");, +        }, +        this.sniffer = new Sniffer(client, sniffRequestConfig, sniffRequestTimeout, scheme);, +++ b/client/build.gradle, +  //jackson is only needed in the sniff package, +++ b/client/src/main/java/org/elasticsearch/client/sniff/SniffingConnectionPool.java, +                                  CloseableHttpClient client, RequestConfig sniffRequestConfig, int sniffRequestTimeout, String scheme,, +        if (scheme.equals("http") == false && scheme.equals("https") == false) {, +            throw new IllegalArgumentException("scheme must be either http or https");, +        }, +        this.sniffer = new Sniffer(client, sniffRequestConfig, sniffRequestTimeout, scheme);, +++ b/client/src/test/java/org/elasticsearch/client/sniff/SnifferTests.java, +import java.util.Arrays;, +    private String scheme;, +        this.scheme = RandomPicks.randomFrom(random(), Arrays.asList("http", "https"));, +    private static SniffResponse buildSniffResponse(String scheme) throws IOException {, +++ b/client/build.gradle, +  //jackson is only needed in the sniff package, +++ b/client/src/main/java/org/elasticsearch/client/sniff/SniffingConnectionPool.java, +                                  CloseableHttpClient client, RequestConfig sniffRequestConfig, int sniffRequestTimeout, String scheme,, +        if (scheme.equals("http") == false && scheme.equals("https") == false) {, +            throw new IllegalArgumentException("scheme must be either http or https");, +        }, +        this.sniffer = new Sniffer(client, sniffRequestConfig, sniffRequestTimeout, scheme);, +++ b/client/src/test/java/org/elasticsearch/client/sniff/SnifferTests.java, +import java.util.Arrays;, +    private String scheme;, +        this.scheme = RandomPicks.randomFrom(random(), Arrays.asList("http", "https"));, +    private static SniffResponse buildSniffResponse(String scheme) throws IOException {, +++ b/client/src/test/java/org/elasticsearch/client/sniff/SniffingConnectionPoolTests.java, +        String[] schemes = new String[]{"http", "https"};, +                RandomPicks.randomFrom(random(), schemes), hosts)) {, +                RandomPicks.randomFrom(random(), schemes), hosts)) {, +                RandomPicks.randomFrom(random(), schemes), hosts)) {, +                RandomPicks.randomFrom(random(), schemes), hosts)) {, +                RandomPicks.randomFrom(random(), schemes), hosts)) {, +                RandomInts.randomIntBetween(random(), Integer.MIN_VALUE, 0),, +                null, hosts)) {, +            fail("pool creation should have failed " + connectionPool);, +        } catch(NullPointerException e) {, +            assertEquals(e.getMessage(), "scheme cannot be null");, +        }, +, +        try (SniffingConnectionPool connectionPool = new SniffingConnectionPool(, +                RandomInts.randomIntBetween(random(), 1, Integer.MAX_VALUE), random().nextBoolean(),, +                RandomInts.randomIntBetween(random(), 1, Integer.MAX_VALUE), httpClient, RequestConfig.DEFAULT,, +                RandomInts.randomIntBetween(random(), Integer.MIN_VALUE, 0),, +                "whatever", hosts)) {, +            fail("pool creation should have failed " + connectionPool);, +        } catch(IllegalArgumentException e) {, +            assertEquals(e.getMessage(), "scheme must be either http or https");, +        }, +, +        try (SniffingConnectionPool connectionPool = new SniffingConnectionPool(, +                RandomInts.randomIntBetween(random(), 1, Integer.MAX_VALUE), random().nextBoolean(),, +                RandomInts.randomIntBetween(random(), 1, Integer.MAX_VALUE), httpClient, RequestConfig.DEFAULT,, +                RandomPicks.randomFrom(random(), schemes), (HttpHost[])null)) {, +                RandomPicks.randomFrom(random(), schemes), (HttpHost) null)) {, +                RandomPicks.randomFrom(random(), schemes))) {, +                RandomPicks.randomFrom(random(), schemes), hosts)) {]