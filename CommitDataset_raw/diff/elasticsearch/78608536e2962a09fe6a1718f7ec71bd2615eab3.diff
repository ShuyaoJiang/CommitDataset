[+++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.xcontent.XContentHelper;, +        if (sourceBuilder != null) {, +            return sourceBuilder.toString();, +        }, +        if (request.source() != null) {, +            try {, +                return XContentHelper.convertToJson(request.source().toBytesArray(), false, true);, +            } catch(Exception e) {, +                return "{ \"error\" : \"" + ExceptionsHelper.detailedMessage(e) + "\"}";, +            }, +        }, +        return new SearchSourceBuilder().toString();, +++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.xcontent.XContentHelper;, +        if (sourceBuilder != null) {, +            return sourceBuilder.toString();, +        }, +        if (request.source() != null) {, +            try {, +                return XContentHelper.convertToJson(request.source().toBytesArray(), false, true);, +            } catch(Exception e) {, +                return "{ \"error\" : \"" + ExceptionsHelper.detailedMessage(e) + "\"}";, +            }, +        }, +        return new SearchSourceBuilder().toString();, +++ b/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +import org.elasticsearch.ExceptionsHelper;, +            return "{ \"error\" : \"" + ExceptionsHelper.detailedMessage(e) + "\"}";, +++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.xcontent.XContentHelper;, +        if (sourceBuilder != null) {, +            return sourceBuilder.toString();, +        }, +        if (request.source() != null) {, +            try {, +                return XContentHelper.convertToJson(request.source().toBytesArray(), false, true);, +            } catch(Exception e) {, +                return "{ \"error\" : \"" + ExceptionsHelper.detailedMessage(e) + "\"}";, +            }, +        }, +        return new SearchSourceBuilder().toString();, +++ b/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +import org.elasticsearch.ExceptionsHelper;, +            return "{ \"error\" : \"" + ExceptionsHelper.detailedMessage(e) + "\"}";, +++ b/src/test/java/org/elasticsearch/action/search/SearchRequestBuilderTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.search;, +, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.transport.TransportClient;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +import org.junit.Test;, +, +import java.io.IOException;, +, +import static org.hamcrest.CoreMatchers.equalTo;, +, +public class SearchRequestBuilderTests extends ElasticsearchTestCase {, +, +    private static Client client;, +, +    @BeforeClass, +    public static void initClient() {, +        //this client will not be hit by any request, but it needs to be a non null proper client, +        //that is why we create it but we don't add any transport address to it, +        client = new TransportClient();, +    }, +, +    @AfterClass, +    public static void closeClient() {]