[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SHRINK_SOURCE_UUID_KEY = "index.shrink.source.uuid";, +    public static final String INDEX_SHRINK_SOURCE_NAME_KEY = "index.shrink.source.name";, +    public static final Setting<String> INDEX_SHRINK_SOURCE_UUID = Setting.simpleString(INDEX_SHRINK_SOURCE_UUID_KEY);, +    public static final Setting<String> INDEX_SHRINK_SOURCE_NAME = Setting.simpleString(INDEX_SHRINK_SOURCE_NAME_KEY);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SHRINK_SOURCE_UUID_KEY = "index.shrink.source.uuid";, +    public static final String INDEX_SHRINK_SOURCE_NAME_KEY = "index.shrink.source.name";, +    public static final Setting<String> INDEX_SHRINK_SOURCE_UUID = Setting.simpleString(INDEX_SHRINK_SOURCE_UUID_KEY);, +    public static final Setting<String> INDEX_SHRINK_SOURCE_NAME = Setting.simpleString(INDEX_SHRINK_SOURCE_NAME_KEY);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +            .put(IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING.getKey() + "_id",, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SHRINK_SOURCE_UUID_KEY = "index.shrink.source.uuid";, +    public static final String INDEX_SHRINK_SOURCE_NAME_KEY = "index.shrink.source.name";, +    public static final Setting<String> INDEX_SHRINK_SOURCE_UUID = Setting.simpleString(INDEX_SHRINK_SOURCE_UUID_KEY);, +    public static final Setting<String> INDEX_SHRINK_SOURCE_NAME = Setting.simpleString(INDEX_SHRINK_SOURCE_NAME_KEY);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +            .put(IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING.getKey() + "_id",, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +                if (shardRouting.primary() && shardRouting.initializing() &&, +                    shardRouting.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE &&, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SHRINK_SOURCE_UUID_KEY = "index.shrink.source.uuid";, +    public static final String INDEX_SHRINK_SOURCE_NAME_KEY = "index.shrink.source.name";, +    public static final Setting<String> INDEX_SHRINK_SOURCE_UUID = Setting.simpleString(INDEX_SHRINK_SOURCE_UUID_KEY);, +    public static final Setting<String> INDEX_SHRINK_SOURCE_NAME = Setting.simpleString(INDEX_SHRINK_SOURCE_NAME_KEY);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +            .put(IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING.getKey() + "_id",, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +                if (shardRouting.primary() && shardRouting.initializing() &&, +                    shardRouting.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE &&, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SHRINK_SOURCE_UUID_KEY = "index.shrink.source.uuid";, +    public static final String INDEX_SHRINK_SOURCE_NAME_KEY = "index.shrink.source.name";, +    public static final Setting<String> INDEX_SHRINK_SOURCE_UUID = Setting.simpleString(INDEX_SHRINK_SOURCE_UUID_KEY);, +    public static final Setting<String> INDEX_SHRINK_SOURCE_NAME = Setting.simpleString(INDEX_SHRINK_SOURCE_NAME_KEY);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +            .put(IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING.getKey() + "_id",, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +                if (shardRouting.primary() && shardRouting.initializing() &&, +                    shardRouting.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE &&, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, +import java.util.EnumSet;, +, +    /**, +     * The set of {@link RecoverySource.Type} values for which the, +     * {@link IndexMetaData#INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING} should apply., +     * Note that we do not include the {@link RecoverySource.Type#SNAPSHOT} type here, +     * because if the snapshot is restored to a different cluster that does not contain, +     * the initial recovery node id, or to the same cluster where the initial recovery node, +     * id has been decommissioned, then the primary shards will never be allocated., +     */, +    static EnumSet<RecoverySource.Type> INITIAL_RECOVERY_TYPES =, +        EnumSet.of(RecoverySource.Type.EMPTY_STORE, RecoverySource.Type.LOCAL_SHARDS);, +, +                INITIAL_RECOVERY_TYPES.contains(shardRouting.recoverySource().getType()) &&, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SHRINK_SOURCE_UUID_KEY = "index.shrink.source.uuid";, +    public static final String INDEX_SHRINK_SOURCE_NAME_KEY = "index.shrink.source.name";, +    public static final Setting<String> INDEX_SHRINK_SOURCE_UUID = Setting.simpleString(INDEX_SHRINK_SOURCE_UUID_KEY);, +    public static final Setting<String> INDEX_SHRINK_SOURCE_NAME = Setting.simpleString(INDEX_SHRINK_SOURCE_NAME_KEY);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +            .put(IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING.getKey() + "_id",, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +                if (shardRouting.primary() && shardRouting.initializing() &&, +                    shardRouting.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE &&, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, +import java.util.EnumSet;, +, +    /**, +     * The set of {@link RecoverySource.Type} values for which the, +     * {@link IndexMetaData#INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING} should apply., +     * Note that we do not include the {@link RecoverySource.Type#SNAPSHOT} type here, +     * because if the snapshot is restored to a different cluster that does not contain, +     * the initial recovery node id, or to the same cluster where the initial recovery node, +     * id has been decommissioned, then the primary shards will never be allocated., +     */, +    static EnumSet<RecoverySource.Type> INITIAL_RECOVERY_TYPES =, +        EnumSet.of(RecoverySource.Type.EMPTY_STORE, RecoverySource.Type.LOCAL_SHARDS);, +, +                INITIAL_RECOVERY_TYPES.contains(shardRouting.recoverySource().getType()) &&, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +            case IndexMetaData.INDEX_SHRINK_SOURCE_UUID_KEY:, +            case IndexMetaData.INDEX_SHRINK_SOURCE_NAME_KEY:, +                return IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING.getRawKey().match(key);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SHRINK_SOURCE_UUID_KEY = "index.shrink.source.uuid";, +    public static final String INDEX_SHRINK_SOURCE_NAME_KEY = "index.shrink.source.name";, +    public static final Setting<String> INDEX_SHRINK_SOURCE_UUID = Setting.simpleString(INDEX_SHRINK_SOURCE_UUID_KEY);, +    public static final Setting<String> INDEX_SHRINK_SOURCE_NAME = Setting.simpleString(INDEX_SHRINK_SOURCE_NAME_KEY);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +            .put(IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING.getKey() + "_id",, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +                if (shardRouting.primary() && shardRouting.initializing() &&, +                    shardRouting.recoverySource().getType() == RecoverySource.Type.EXISTING_STORE &&, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java]