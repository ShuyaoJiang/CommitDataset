[+++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +        RestHeadAction.Document.class,, +        RestHeadAction.Source.class,, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +        RestHeadAction.Document.class,, +        RestHeadAction.Source.class,, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java, +        if (response.isSourceEmpty()) {, +            throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() + "] source disabled");, +        }, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +        RestHeadAction.Document.class,, +        RestHeadAction.Source.class,, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java, +        if (response.isSourceEmpty()) {, +            throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() + "] source disabled");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java, +        if (getResponse.isSourceEmpty() == false) { // extract terms only if the doc source exists, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +        RestHeadAction.Document.class,, +        RestHeadAction.Source.class,, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java, +        if (response.isSourceEmpty()) {, +            throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() + "] source disabled");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java, +        if (getResponse.isSourceEmpty() == false) { // extract terms only if the doc source exists, +++ b/core/src/main/java/org/elasticsearch/rest/action/get/RestGetSourceAction.java, +                if (response.isSourceEmpty()) { // check if doc source (or doc itself) is missing, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +        RestHeadAction.Document.class,, +        RestHeadAction.Source.class,, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java, +        if (response.isSourceEmpty()) {, +            throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() + "] source disabled");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java, +        if (getResponse.isSourceEmpty() == false) { // extract terms only if the doc source exists, +++ b/core/src/main/java/org/elasticsearch/rest/action/get/RestGetSourceAction.java, +                if (response.isSourceEmpty()) { // check if doc source (or doc itself) is missing, +++ b/core/src/main/java/org/elasticsearch/rest/action/get/RestHeadAction.java, + * Base class for {@code HEAD} request handlers for a single document., +public abstract class RestHeadAction extends BaseRestHandler {, +, +    /**, +     * Handler to check for document existence., +     */, +    public static class Document extends RestHeadAction {, +        public Document(Settings settings, RestController controller, Client client) {, +            super(settings, client, false);, +        }, +    }, +, +    /**, +     * Handler to check for document source existence (may be disabled in the mapping)., +     */, +    public static class Source extends RestHeadAction {, +, +        @Inject, +        public Source(Settings settings, RestController controller, Client client) {, +            super(settings, client, true);, +    }, +, +    private final boolean source;, +, +    /**, +     * All subclasses must be registered in {@link org.elasticsearch.common.network.NetworkModule}., +     *, +     * @param settings injected settings, +     * @param client   injected client, +     * @param source   {@code false} to check for {@link GetResponse#isExists()}., +     *                 {@code true} to also check for {@link GetResponse#isSourceEmpty()}., +     */, +    public RestHeadAction(Settings settings, Client client, boolean source) {, +        super(settings, client);, +        this.source = source;, +    }, +                } else if (source && response.isSourceEmpty()) { // doc exists, but source might not (disabled in the mapping), +                    return new BytesRestResponse(NOT_FOUND, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY);, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +        RestHeadAction.Document.class,, +        RestHeadAction.Source.class,, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java, +        if (response.isSourceEmpty()) {, +            throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type [" + getRequest.type() + "] source disabled");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java, +        if (getResponse.isSourceEmpty() == false) { // extract terms only if the doc source exists, +++ b/core/src/main/java/org/elasticsearch/rest/action/get/RestGetSourceAction.java, +                if (response.isSourceEmpty()) { // check if doc source (or doc itself) is missing, +++ b/core/src/main/java/org/elasticsearch/rest/action/get/RestHeadAction.java, + * Base class for {@code HEAD} request handlers for a single document., +public abstract class RestHeadAction extends BaseRestHandler {, +, +    /**, +     * Handler to check for document existence., +     */, +    public static class Document extends RestHeadAction {, +        public Document(Settings settings, RestController controller, Client client) {]