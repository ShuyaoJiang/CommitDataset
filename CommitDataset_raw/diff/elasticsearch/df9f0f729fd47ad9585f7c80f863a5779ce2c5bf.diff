[+++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * @see #reinitializeMaxSeqNoOfUpdatesOrDeletes(), +     * A primary shard calls this method to re-initialize the max_seq_no_of_updates marker using the, +    public abstract void reinitializeMaxSeqNoOfUpdatesOrDeletes();, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * @see #reinitializeMaxSeqNoOfUpdatesOrDeletes(), +     * A primary shard calls this method to re-initialize the max_seq_no_of_updates marker using the, +    public abstract void reinitializeMaxSeqNoOfUpdatesOrDeletes();, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public void reinitializeMaxSeqNoOfUpdatesOrDeletes() {, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * @see #reinitializeMaxSeqNoOfUpdatesOrDeletes(), +     * A primary shard calls this method to re-initialize the max_seq_no_of_updates marker using the, +    public abstract void reinitializeMaxSeqNoOfUpdatesOrDeletes();, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public void reinitializeMaxSeqNoOfUpdatesOrDeletes() {, +++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +    public void reinitializeMaxSeqNoOfUpdatesOrDeletes() {, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * @see #reinitializeMaxSeqNoOfUpdatesOrDeletes(), +     * A primary shard calls this method to re-initialize the max_seq_no_of_updates marker using the, +    public abstract void reinitializeMaxSeqNoOfUpdatesOrDeletes();, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public void reinitializeMaxSeqNoOfUpdatesOrDeletes() {, +++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +    public void reinitializeMaxSeqNoOfUpdatesOrDeletes() {, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +                                // in case we previously reset engine, we need to forward MSU before replaying translog., +                                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * @see #reinitializeMaxSeqNoOfUpdatesOrDeletes(), +     * A primary shard calls this method to re-initialize the max_seq_no_of_updates marker using the, +    public abstract void reinitializeMaxSeqNoOfUpdatesOrDeletes();, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public void reinitializeMaxSeqNoOfUpdatesOrDeletes() {, +++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +    public void reinitializeMaxSeqNoOfUpdatesOrDeletes() {, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +                                // in case we previously reset engine, we need to forward MSU before replaying translog., +                                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +++ b/server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            recoveringEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            recoveringEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            recoveringEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            recoveringEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                    engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            recoveringEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            noOpEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            recoveringEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            recoveringEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * @see #reinitializeMaxSeqNoOfUpdatesOrDeletes(), +     * A primary shard calls this method to re-initialize the max_seq_no_of_updates marker using the, +    public abstract void reinitializeMaxSeqNoOfUpdatesOrDeletes();, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public void reinitializeMaxSeqNoOfUpdatesOrDeletes() {, +++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +    public void reinitializeMaxSeqNoOfUpdatesOrDeletes() {, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +                                // in case we previously reset engine, we need to forward MSU before replaying translog., +                                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +++ b/server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            recoveringEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            recoveringEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            recoveringEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            recoveringEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                    engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +                engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +        engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            engine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            recoveringEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();, +            noOpEngine.reinitializeMaxSeqNoOfUpdatesOrDeletes();]