[+++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    public IngestService(Settings settings, ThreadPool threadPool, ClusterService clusterService, ProcessorsRegistry processorsRegistry) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistry, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    public IngestService(Settings settings, ThreadPool threadPool, ClusterService clusterService, ProcessorsRegistry processorsRegistry) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistry, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +import org.elasticsearch.action.ingest.DeletePipelineRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +import java.util.function.Function;, +    public void buildProcessorFactoryRegistry(ProcessorsRegistry processorsRegistry, ScriptService scriptService) {, +        for (Map.Entry<String, Function<TemplateService, Processor.Factory<?>>> entry : processorsRegistry.entrySet()) {, +            Processor.Factory processorFactory = entry.getValue().apply(templateService);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    public IngestService(Settings settings, ThreadPool threadPool, ClusterService clusterService, ProcessorsRegistry processorsRegistry) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistry, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +import org.elasticsearch.action.ingest.DeletePipelineRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +import java.util.function.Function;, +    public void buildProcessorFactoryRegistry(ProcessorsRegistry processorsRegistry, ScriptService scriptService) {, +        for (Map.Entry<String, Function<TemplateService, Processor.Factory<?>>> entry : processorsRegistry.entrySet()) {, +            Processor.Factory processorFactory = entry.getValue().apply(templateService);, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +import java.util.function.Function;, +    private final Map<String, Function<TemplateService, Processor.Factory<?>>> processorFactoryProviders = new HashMap<>();, +    public void registerProcessor(String name, Function<TemplateService, Processor.Factory<?>> processorFactoryProvider) {, +        Function<TemplateService, Processor.Factory<?>> provider = processorFactoryProviders.putIfAbsent(name, processorFactoryProvider);, +    public Set<Map.Entry<String, Function<TemplateService, Processor.Factory<?>>>> entrySet() {, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    public IngestService(Settings settings, ThreadPool threadPool, ClusterService clusterService, ProcessorsRegistry processorsRegistry) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistry, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +import org.elasticsearch.action.ingest.DeletePipelineRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +import java.util.function.Function;, +    public void buildProcessorFactoryRegistry(ProcessorsRegistry processorsRegistry, ScriptService scriptService) {, +        for (Map.Entry<String, Function<TemplateService, Processor.Factory<?>>> entry : processorsRegistry.entrySet()) {, +            Processor.Factory processorFactory = entry.getValue().apply(templateService);, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +import java.util.function.Function;, +    private final Map<String, Function<TemplateService, Processor.Factory<?>>> processorFactoryProviders = new HashMap<>();, +    public void registerProcessor(String name, Function<TemplateService, Processor.Factory<?>> processorFactoryProvider) {, +        Function<TemplateService, Processor.Factory<?>> provider = processorFactoryProviders.putIfAbsent(name, processorFactoryProvider);, +    public Set<Map.Entry<String, Function<TemplateService, Processor.Factory<?>>>> entrySet() {, +++ b/core/src/main/java/org/elasticsearch/node/NodeModule.java, +import java.util.function.Function;, +        registerProcessor(DateProcessor.TYPE, (templateService) -> new DateProcessor.Factory());, +        registerProcessor(SetProcessor.TYPE, SetProcessor.Factory::new);, +        registerProcessor(AppendProcessor.TYPE, AppendProcessor.Factory::new);, +        registerProcessor(RenameProcessor.TYPE, (templateService) -> new RenameProcessor.Factory());, +        registerProcessor(RemoveProcessor.TYPE, RemoveProcessor.Factory::new);, +        registerProcessor(SplitProcessor.TYPE, (templateService) -> new SplitProcessor.Factory());, +        registerProcessor(JoinProcessor.TYPE, (templateService) -> new JoinProcessor.Factory());, +        registerProcessor(UppercaseProcessor.TYPE, (templateService) -> new UppercaseProcessor.Factory());, +        registerProcessor(LowercaseProcessor.TYPE, (templateService) -> new LowercaseProcessor.Factory());, +        registerProcessor(TrimProcessor.TYPE, (templateService) -> new TrimProcessor.Factory());, +        registerProcessor(ConvertProcessor.TYPE, (templateService) -> new ConvertProcessor.Factory());, +        registerProcessor(GsubProcessor.TYPE, (templateService) -> new GsubProcessor.Factory());, +        registerProcessor(FailProcessor.TYPE, FailProcessor.Factory::new);, +    public void registerProcessor(String type, Function<TemplateService, Processor.Factory<?>> processorFactoryProvider) {, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    public IngestService(Settings settings, ThreadPool threadPool, ClusterService clusterService, ProcessorsRegistry processorsRegistry) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistry, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +import org.elasticsearch.action.ingest.DeletePipelineRequest;, +import org.elasticsearch.action.ingest.PutPipelineRequest;, +import java.util.function.Function;, +    public void buildProcessorFactoryRegistry(ProcessorsRegistry processorsRegistry, ScriptService scriptService) {, +        for (Map.Entry<String, Function<TemplateService, Processor.Factory<?>>> entry : processorsRegistry.entrySet()) {, +            Processor.Factory processorFactory = entry.getValue().apply(templateService);, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +import java.util.function.Function;, +    private final Map<String, Function<TemplateService, Processor.Factory<?>>> processorFactoryProviders = new HashMap<>();, +    public void registerProcessor(String name, Function<TemplateService, Processor.Factory<?>> processorFactoryProvider) {, +        Function<TemplateService, Processor.Factory<?>> provider = processorFactoryProviders.putIfAbsent(name, processorFactoryProvider);, +    public Set<Map.Entry<String, Function<TemplateService, Processor.Factory<?>>>> entrySet() {, +++ b/core/src/main/java/org/elasticsearch/node/NodeModule.java, +import java.util.function.Function;, +        registerProcessor(DateProcessor.TYPE, (templateService) -> new DateProcessor.Factory());, +        registerProcessor(SetProcessor.TYPE, SetProcessor.Factory::new);, +        registerProcessor(AppendProcessor.TYPE, AppendProcessor.Factory::new);, +        registerProcessor(RenameProcessor.TYPE, (templateService) -> new RenameProcessor.Factory());, +        registerProcessor(RemoveProcessor.TYPE, RemoveProcessor.Factory::new);, +        registerProcessor(SplitProcessor.TYPE, (templateService) -> new SplitProcessor.Factory());, +        registerProcessor(JoinProcessor.TYPE, (templateService) -> new JoinProcessor.Factory());, +        registerProcessor(UppercaseProcessor.TYPE, (templateService) -> new UppercaseProcessor.Factory());, +        registerProcessor(LowercaseProcessor.TYPE, (templateService) -> new LowercaseProcessor.Factory());, +        registerProcessor(TrimProcessor.TYPE, (templateService) -> new TrimProcessor.Factory());, +        registerProcessor(ConvertProcessor.TYPE, (templateService) -> new ConvertProcessor.Factory());, +        registerProcessor(GsubProcessor.TYPE, (templateService) -> new GsubProcessor.Factory());, +        registerProcessor(FailProcessor.TYPE, FailProcessor.Factory::new);, +    public void registerProcessor(String type, Function<TemplateService, Processor.Factory<?>> processorFactoryProvider) {, +++ b/core/src/main/java/org/elasticsearch/node/service/NodeService.java, +        this.ingestService = new IngestService(settings, threadPool, clusterService, processorsRegistry);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    public IngestService(Settings settings, ThreadPool threadPool, ClusterService clusterService, ProcessorsRegistry processorsRegistry) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistry, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +import org.elasticsearch.action.ingest.DeletePipelineRequest;]