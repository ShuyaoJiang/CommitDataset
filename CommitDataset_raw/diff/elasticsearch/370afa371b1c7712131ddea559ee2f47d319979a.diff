[+++ b/core/src/main/java/org/elasticsearch/common/xcontent/AbstractObjectParser.java, +        if (parser == null) {, +            throw new IllegalArgumentException("[parser] is required");, +        }, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/AbstractObjectParser.java, +        if (parser == null) {, +            throw new IllegalArgumentException("[parser] is required");, +        }, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java, +        this(name, false, builder);, +    }, +, +    /**, +     * Build the parser., +     *, +     * @param name The name given to the delegate ObjectParser for error identification. Use what you'd use if the object worked with, +     *        ObjectParser., +     * @param ignoreUnknownFields Should this parser ignore unknown fields? This should generally be set to true only when parsing responses, +     *        from external systems, never when parsing requests from users., +     * @param builder A function that builds the object from an array of Objects. Declare this inline with the parser, casting the elements, +     *        of the array to the arguments so they work with your favorite constructor. The objects in the array will be in the same order, +     *        that you declared the {{@link #constructorArg()}s and none will be null. If any of the constructor arguments aren't defined in, +     *        the XContent then parsing will throw an error. We use an array here rather than a {@code Map<String, Object>} to save on, +     *        allocations., +     */, +    public ConstructingObjectParser(String name, boolean ignoreUnknownFields, Function<Object[], Value> builder) {, +        objectParser = new ObjectParser<>(name, ignoreUnknownFields, null);, +        if (consumer == null) {, +            throw new IllegalArgumentException("[consumer] is required");, +        }, +        if (parser == null) {, +            throw new IllegalArgumentException("[parser] is required");, +        }, +        if (parseField == null) {, +            throw new IllegalArgumentException("[parseField] is required");, +        }, +        if (type == null) {, +            throw new IllegalArgumentException("[type] is required");, +        }, +, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/AbstractObjectParser.java, +        if (parser == null) {, +            throw new IllegalArgumentException("[parser] is required");, +        }, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ConstructingObjectParser.java, +        this(name, false, builder);, +    }, +, +    /**, +     * Build the parser., +     *, +     * @param name The name given to the delegate ObjectParser for error identification. Use what you'd use if the object worked with, +     *        ObjectParser., +     * @param ignoreUnknownFields Should this parser ignore unknown fields? This should generally be set to true only when parsing responses, +     *        from external systems, never when parsing requests from users., +     * @param builder A function that builds the object from an array of Objects. Declare this inline with the parser, casting the elements, +     *        of the array to the arguments so they work with your favorite constructor. The objects in the array will be in the same order, +     *        that you declared the {{@link #constructorArg()}s and none will be null. If any of the constructor arguments aren't defined in, +     *        the XContent then parsing will throw an error. We use an array here rather than a {@code Map<String, Object>} to save on, +     *        allocations., +     */, +    public ConstructingObjectParser(String name, boolean ignoreUnknownFields, Function<Object[], Value> builder) {, +        objectParser = new ObjectParser<>(name, ignoreUnknownFields, null);, +        if (consumer == null) {, +            throw new IllegalArgumentException("[consumer] is required");, +        }, +        if (parser == null) {, +            throw new IllegalArgumentException("[parser] is required");, +        }, +        if (parseField == null) {, +            throw new IllegalArgumentException("[parseField] is required");, +        }, +        if (type == null) {, +            throw new IllegalArgumentException("[type] is required");, +        }, +, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +import org.elasticsearch.common.Nullable;, +    /**, +     * Should this parser ignore unknown fields? This should generally be set to true only when parsing responses from external systems,, +     * never when parsing requests from users., +     */, +    private final boolean ignoreUnknownFields;, +    public ObjectParser(String name, @Nullable Supplier<Value> valueSupplier) {, +        this(name, false, valueSupplier);, +    }, +, +    /**, +     * Creates a new ObjectParser instance which a name., +     * @param name the parsers name, used to reference the parser in exceptions and messages., +     * @param ignoreUnknownFields Should this parser ignore unknown fields? This should generally be set to true only when parsing, +     *      responses from external systems, never when parsing requests from users., +     * @param valueSupplier a supplier that creates a new Value instance used when the parser is used as an inner object parser., +     */, +    public ObjectParser(String name, boolean ignoreUnknownFields, @Nullable Supplier<Value> valueSupplier) {, +        this.ignoreUnknownFields = ignoreUnknownFields;, +                if (fieldParser == null) {, +                    assert ignoreUnknownFields : "this should only be possible if configured to ignore known fields";, +                    parser.skipChildren(); // noop if parser points to a value, skips children if parser is start object or start array, +                } else {]