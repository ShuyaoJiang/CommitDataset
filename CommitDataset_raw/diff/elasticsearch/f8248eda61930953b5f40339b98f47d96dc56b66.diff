[+++ b/core/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayStartedShards.java, +                        IndexSettings indexSettings = new IndexSettings(shardId.index(), Settings.settingsBuilder().put(settings).put(metaData.getSettings()).build(), Collections.EMPTY_LIST);, +++ b/core/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayStartedShards.java, +                        IndexSettings indexSettings = new IndexSettings(shardId.index(), Settings.settingsBuilder().put(settings).put(metaData.getSettings()).build(), Collections.EMPTY_LIST);, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +     * Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node., +++ b/core/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayStartedShards.java, +                        IndexSettings indexSettings = new IndexSettings(shardId.index(), Settings.settingsBuilder().put(settings).put(metaData.getSettings()).build(), Collections.EMPTY_LIST);, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +     * Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node., +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        if (this.indexSettings.updateIndexSettings(metadata.getSettings())) {, +++ b/core/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayStartedShards.java, +                        IndexSettings indexSettings = new IndexSettings(shardId.index(), Settings.settingsBuilder().put(settings).put(metaData.getSettings()).build(), Collections.EMPTY_LIST);, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +     * Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node., +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        if (this.indexSettings.updateIndexSettings(metadata.getSettings())) {, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +    synchronized boolean updateIndexSettings(Settings newSettings) {, +        if (Version.indexCreated(newSettings) != version) {, +            throw new IllegalArgumentException("version mismatch on settings update expected: " + version + " but was: " + Version.indexCreated(newSettings));, +        final String newUUID = newSettings.get(IndexMetaData.SETTING_INDEX_UUID, IndexMetaData.INDEX_UUID_NA_VALUE);, +        final Settings existingSettings = this.settings;, +        if (existingSettings.getByPrefix(IndexMetaData.INDEX_SETTING_PREFIX).getAsMap().equals(newSettings.getByPrefix(IndexMetaData.INDEX_SETTING_PREFIX).getAsMap())) {, +        this.settings = Settings.builder().put(existingSettings).put(newSettings).build();, +        final Settings mergedSettings = this.settings;, +                consumer.accept(mergedSettings);, +                logger.warn("failed to refresh index settings for [{}]", e, mergedSettings);, +++ b/core/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayStartedShards.java, +                        IndexSettings indexSettings = new IndexSettings(shardId.index(), Settings.settingsBuilder().put(settings).put(metaData.getSettings()).build(), Collections.EMPTY_LIST);, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +     * Listeners can't be unregistered they will stay alive for the entire time the index is allocated on a node., +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        if (this.indexSettings.updateIndexSettings(metadata.getSettings())) {, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +    synchronized boolean updateIndexSettings(Settings newSettings) {, +        if (Version.indexCreated(newSettings) != version) {, +            throw new IllegalArgumentException("version mismatch on settings update expected: " + version + " but was: " + Version.indexCreated(newSettings));, +        final String newUUID = newSettings.get(IndexMetaData.SETTING_INDEX_UUID, IndexMetaData.INDEX_UUID_NA_VALUE);, +        final Settings existingSettings = this.settings;, +        if (existingSettings.getByPrefix(IndexMetaData.INDEX_SETTING_PREFIX).getAsMap().equals(newSettings.getByPrefix(IndexMetaData.INDEX_SETTING_PREFIX).getAsMap())) {, +        this.settings = Settings.builder().put(existingSettings).put(newSettings).build();, +        final Settings mergedSettings = this.settings;, +                consumer.accept(mergedSettings);, +                logger.warn("failed to refresh index settings for [{}]", e, mergedSettings);, +++ b/core/src/test/java/org/elasticsearch/index/IndexSettingsTests.java, +        assertFalse(settings.updateIndexSettings(theSettings));, +        assertTrue(settings.updateIndexSettings(Settings.builder().put(theSettings).put("index.test.setting.int", 42).build()));, +    public void testMergedSettingsArePassed() {, +        Version version = VersionUtils.getPreviousVersion();, +        Settings theSettings = Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED, version), +                .put(IndexMetaData.SETTING_INDEX_UUID, "0xdeadbeef").build();, +        final AtomicInteger integer = new AtomicInteger(0);, +        final StringBuilder builder = new StringBuilder();, +        Consumer<Settings> settingsConsumer = (s) -> {, +            integer.set(s.getAsInt("index.test.setting.int", -1));, +            builder.append(s.get("not.updated", ""));, +        };, +        IndexSettings settings = new IndexSettings(new Index("index"), theSettings, Collections.singleton(settingsConsumer));, +        assertEquals(0, integer.get());, +        assertEquals("", builder.toString());, +        assertTrue(settings.updateIndexSettings(Settings.builder().put(theSettings).put("index.test.setting.int", 42).build()));, +        assertEquals(42, integer.get());, +        assertEquals("", builder.toString());, +        integer.set(0);, +        assertTrue(settings.updateIndexSettings(Settings.builder().put(theSettings).put("not.updated", "boom").build()));, +        assertEquals("boom", builder.toString());, +        assertEquals(42, integer.get());, +, +    }, +, +        assertTrue(settings.updateIndexSettings(Settings.builder().put(theSettings).put("index.test.setting.int", 42).build()));, +            settings.updateIndexSettings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put("index.test.setting.int", 42).build());, +            settings.updateIndexSettings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put("index.test.setting.int", 42).build());]