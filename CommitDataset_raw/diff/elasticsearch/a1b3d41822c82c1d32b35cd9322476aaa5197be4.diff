[+++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/HashWheelScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/HashWheelScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/QuartzScheduleTriggerEngine.java, +    protected void notifyListeners(String name, JobExecutionContext ctx) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/HashWheelScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/QuartzScheduleTriggerEngine.java, +    protected void notifyListeners(String name, JobExecutionContext ctx) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/SchedulerScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/HashWheelScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/QuartzScheduleTriggerEngine.java, +    protected void notifyListeners(String name, JobExecutionContext ctx) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/SchedulerScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/SimpleTickerScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/HashWheelScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/QuartzScheduleTriggerEngine.java, +    protected void notifyListeners(String name, JobExecutionContext ctx) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/SchedulerScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/SimpleTickerScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/TimerTickerScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/HashWheelScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/QuartzScheduleTriggerEngine.java, +    protected void notifyListeners(String name, JobExecutionContext ctx) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/SchedulerScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/SimpleTickerScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/TimerTickerScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/HashWheelScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/QuartzScheduleTriggerEngine.java, +    protected void notifyListeners(String name, JobExecutionContext ctx) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/SchedulerScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/SimpleTickerScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/schedule/engine/TimerTickerScheduleTriggerEngine.java, +    protected void notifyListeners(String name, long triggeredTime, long scheduledTime) {, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/watcher/test/bench/ScheduleEngineTriggerBenchmark.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.watcher.test.bench;, +, +import org.elasticsearch.common.metrics.MeanMetric;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.watcher.support.clock.SystemClock;, +import org.elasticsearch.watcher.trigger.Trigger;, +import org.elasticsearch.watcher.trigger.TriggerEngine;, +import org.elasticsearch.watcher.trigger.schedule.Schedule;, +import org.elasticsearch.watcher.trigger.schedule.ScheduleRegistry;, +import org.elasticsearch.watcher.trigger.schedule.ScheduleTrigger;, +import org.elasticsearch.watcher.trigger.schedule.ScheduleTriggerEngine;, +import org.elasticsearch.watcher.trigger.schedule.engine.*;, +import org.quartz.JobExecutionContext;, +, +import java.util.*;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import static org.elasticsearch.watcher.trigger.schedule.Schedules.interval;, +, +/**, + *, + */, +public class ScheduleEngineTriggerBenchmark {, +, +    public static void main(String[] args) throws Exception {, +        int numWatches = 1000;, +        int interval = 2;, +        int benchTime = 60000;, +, +        if (args.length % 2 != 0) {, +            throw new IllegalArgumentException("Uneven number of arguments");, +        }, +        for (int i = 0; i < args.length; i += 2) {, +            String value = args[i + 1];, +            if ("--num_watches".equals(args[i])) {, +                numWatches = Integer.valueOf(value);, +            } else if ("--bench_time".equals(args[i])) {, +                benchTime = Integer.valueOf(value);, +            } else if ("--interval".equals(args[i])) {]