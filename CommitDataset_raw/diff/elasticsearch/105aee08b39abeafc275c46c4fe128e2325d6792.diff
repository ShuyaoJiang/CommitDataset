[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotResponse.java, +            snapshotInfo.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotResponse.java, +            snapshotInfo.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/GetSnapshotsResponse.java, +            snapshotInfo.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotResponse.java, +            snapshotInfo.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/GetSnapshotsResponse.java, +            snapshotInfo.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreFormat.java, +import org.elasticsearch.snapshots.SnapshotInfo;, +        // serialize SnapshotInfo using the SNAPSHOT mode, +        snapshotOnlyParams.put(SnapshotInfo.CONTEXT_MODE_PARAM, SnapshotInfo.CONTEXT_MODE_SNAPSHOT);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotResponse.java, +            snapshotInfo.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/GetSnapshotsResponse.java, +            snapshotInfo.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreFormat.java, +import org.elasticsearch.snapshots.SnapshotInfo;, +        // serialize SnapshotInfo using the SNAPSHOT mode, +        snapshotOnlyParams.put(SnapshotInfo.CONTEXT_MODE_PARAM, SnapshotInfo.CONTEXT_MODE_SNAPSHOT);, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java, +    public static final String CONTEXT_MODE_PARAM = "context_mode";, +    public static final String CONTEXT_MODE_SNAPSHOT = "SNAPSHOT";, +        // write snapshot info to repository snapshot blob format, +        if (CONTEXT_MODE_SNAPSHOT.equals(params.param(CONTEXT_MODE_PARAM))) {, +            return toXContentSnapshot(builder, params);, +        // write snapshot info for the API and any other situations, +    private XContentBuilder toXContentSnapshot(final XContentBuilder builder, final ToXContent.Params params) throws IOException {, +        builder.startObject(SNAPSHOT);, +        builder.field(NAME, name);, +        builder.field(VERSION_ID, version.id);, +        builder.startArray(INDICES);, +        for (String index : indices) {, +            builder.value(index);, +        }, +        builder.endArray();, +        builder.field(STATE, state);, +        if (reason != null) {, +            builder.field(REASON, reason);, +        }, +        builder.field(START_TIME, startTime);, +        builder.field(END_TIME, endTime);, +        builder.field(TOTAL_SHARDS, totalShards);, +        builder.field(SUCCESSFUL_SHARDS, successfulShards);, +        builder.startArray(FAILURES);, +        for (SnapshotShardFailure shardFailure : shardFailures) {, +            builder.startObject();, +            shardFailure.toXContent(builder, params);, +            builder.endObject();, +        }, +        builder.endArray();, +        builder.endObject();, +        return builder;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotResponse.java, +            snapshotInfo.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/GetSnapshotsResponse.java, +            snapshotInfo.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreFormat.java, +import org.elasticsearch.snapshots.SnapshotInfo;, +        // serialize SnapshotInfo using the SNAPSHOT mode, +        snapshotOnlyParams.put(SnapshotInfo.CONTEXT_MODE_PARAM, SnapshotInfo.CONTEXT_MODE_SNAPSHOT);, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java, +    public static final String CONTEXT_MODE_PARAM = "context_mode";, +    public static final String CONTEXT_MODE_SNAPSHOT = "SNAPSHOT";, +        // write snapshot info to repository snapshot blob format, +        if (CONTEXT_MODE_SNAPSHOT.equals(params.param(CONTEXT_MODE_PARAM))) {, +            return toXContentSnapshot(builder, params);, +        // write snapshot info for the API and any other situations, +    private XContentBuilder toXContentSnapshot(final XContentBuilder builder, final ToXContent.Params params) throws IOException {, +        builder.startObject(SNAPSHOT);, +        builder.field(NAME, name);, +        builder.field(VERSION_ID, version.id);, +        builder.startArray(INDICES);, +        for (String index : indices) {, +            builder.value(index);, +        }, +        builder.endArray();, +        builder.field(STATE, state);, +        if (reason != null) {, +            builder.field(REASON, reason);, +        }, +        builder.field(START_TIME, startTime);, +        builder.field(END_TIME, endTime);, +        builder.field(TOTAL_SHARDS, totalShards);, +        builder.field(SUCCESSFUL_SHARDS, successfulShards);, +        builder.startArray(FAILURES);, +        for (SnapshotShardFailure shardFailure : shardFailures) {, +            builder.startObject();, +            shardFailure.toXContent(builder, params);, +            builder.endObject();, +        }, +        builder.endArray();, +        builder.endObject();, +        return builder;, +    }, +]