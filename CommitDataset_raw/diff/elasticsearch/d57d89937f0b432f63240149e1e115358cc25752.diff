[+++ b/src/main/java/org/elasticsearch/common/CacheRecycler.java, +        objectFloatHashMap.clear();, +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    // ------ TObjectFloatHashMap -----, +, +    private static SoftWrapper<Queue<TObjectFloatHashMap>> objectFloatHashMap = new SoftWrapper<Queue<TObjectFloatHashMap>>();, +, +    @SuppressWarnings({"unchecked"}), +    public static <T> TObjectFloatHashMap<T> popObjectFloatMap() {, +        Queue<TObjectFloatHashMap> ref = objectFloatHashMap.get();, +        if (ref == null) {, +            return new TObjectFloatHashMap();, +        }, +        TObjectFloatHashMap map = ref.poll();, +        if (map == null) {, +            return new TObjectFloatHashMap();, +        }, +        return map;, +    }, +, +    public static <T> void pushObjectFloatMap(TObjectFloatHashMap<T> map) {, +        Queue<TObjectFloatHashMap> ref = objectFloatHashMap.get();, +        if (ref == null) {, +            ref = ConcurrentCollections.newQueue();, +            objectFloatHashMap.set(ref);, +        }, +        map.clear();, +        ref.add(map);, +    }, +, +++ b/src/main/java/org/elasticsearch/common/CacheRecycler.java, +        objectFloatHashMap.clear();, +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    // ------ TObjectFloatHashMap -----, +, +    private static SoftWrapper<Queue<TObjectFloatHashMap>> objectFloatHashMap = new SoftWrapper<Queue<TObjectFloatHashMap>>();, +, +    @SuppressWarnings({"unchecked"}), +    public static <T> TObjectFloatHashMap<T> popObjectFloatMap() {, +        Queue<TObjectFloatHashMap> ref = objectFloatHashMap.get();, +        if (ref == null) {, +            return new TObjectFloatHashMap();, +        }, +        TObjectFloatHashMap map = ref.poll();, +        if (map == null) {, +            return new TObjectFloatHashMap();, +        }, +        return map;, +    }, +, +    public static <T> void pushObjectFloatMap(TObjectFloatHashMap<T> map) {, +        Queue<TObjectFloatHashMap> ref = objectFloatHashMap.get();, +        if (ref == null) {, +            ref = ConcurrentCollections.newQueue();, +            objectFloatHashMap.set(ref);, +        }, +        map.clear();, +        ref.add(map);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +    private String scoreType;, +, +     * Defines how the scores from the matching child documents are mapped into the parent document., +     */, +    public HasChildQueryBuilder scoreType(String executionType) {, +        this.scoreType = executionType;, +        return this;, +    }, +, +    /**, +     * Only applicable when score_type is set to none., +     * <p/>, +        if (scoreType != null) {, +            builder.field("score_type", scoreType);, +++ b/src/main/java/org/elasticsearch/common/CacheRecycler.java, +        objectFloatHashMap.clear();, +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    @SuppressWarnings("unchecked"), +    // ------ TObjectFloatHashMap -----, +, +    private static SoftWrapper<Queue<TObjectFloatHashMap>> objectFloatHashMap = new SoftWrapper<Queue<TObjectFloatHashMap>>();, +, +    @SuppressWarnings({"unchecked"}), +    public static <T> TObjectFloatHashMap<T> popObjectFloatMap() {, +        Queue<TObjectFloatHashMap> ref = objectFloatHashMap.get();, +        if (ref == null) {, +            return new TObjectFloatHashMap();, +        }, +        TObjectFloatHashMap map = ref.poll();, +        if (map == null) {, +            return new TObjectFloatHashMap();]