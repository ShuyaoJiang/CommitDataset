[+++ b/docs/reference/mapping/types/geo-point.asciidoc, +<<null-value,`null_value`>>::, +, +    Accepts an geopoint value which is substituted for any explicit `null` values., +    Defaults to `null`, which means the field is treated as missing., +, +++ b/docs/reference/mapping/types/geo-point.asciidoc, +<<null-value,`null_value`>>::, +, +    Accepts an geopoint value which is substituted for any explicit `null` values., +    Defaults to `null`, which means the field is treated as missing., +, +++ b/server/src/main/java/org/elasticsearch/common/geo/GeoUtils.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import java.io.InputStream;, +     * Parses the value as a geopoint. The following types of values are supported:, +     * <p>, +     * Object: has to contain either lat and lon or geohash fields, +     * <p>, +     * String: expected to be in "latitude, longitude" format or a geohash, +     * <p>, +     * Array: two or more elements, the first element is longitude, the second is latitude, the rest is ignored if ignoreZValue is true, +     */, +    public static GeoPoint parseGeoPoint(Object value, final boolean ignoreZValue) throws ElasticsearchParseException {, +        try {, +            XContentBuilder content = JsonXContent.contentBuilder();, +            content.startObject();, +            content.field("null_value", value);, +            content.endObject();, +, +            try (InputStream stream = BytesReference.bytes(content).streamInput();, +                 XContentParser parser = JsonXContent.jsonXContent.createParser(, +                     NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {, +                parser.nextToken(); // start object, +                parser.nextToken(); // field name, +                parser.nextToken(); // field value, +                return parseGeoPoint(parser, new GeoPoint(), ignoreZValue);, +            }, +, +        } catch (IOException ex) {, +            throw new ElasticsearchParseException("error parsing geopoint", ex);, +        }, +    }, +, +    /**, +++ b/docs/reference/mapping/types/geo-point.asciidoc, +<<null-value,`null_value`>>::, +, +    Accepts an geopoint value which is substituted for any explicit `null` values., +    Defaults to `null`, which means the field is treated as missing., +, +++ b/server/src/main/java/org/elasticsearch/common/geo/GeoUtils.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import java.io.InputStream;, +     * Parses the value as a geopoint. The following types of values are supported:, +     * <p>, +     * Object: has to contain either lat and lon or geohash fields, +     * <p>, +     * String: expected to be in "latitude, longitude" format or a geohash, +     * <p>, +     * Array: two or more elements, the first element is longitude, the second is latitude, the rest is ignored if ignoreZValue is true, +     */, +    public static GeoPoint parseGeoPoint(Object value, final boolean ignoreZValue) throws ElasticsearchParseException {, +        try {, +            XContentBuilder content = JsonXContent.contentBuilder();, +            content.startObject();, +            content.field("null_value", value);, +            content.endObject();, +, +            try (InputStream stream = BytesReference.bytes(content).streamInput();, +                 XContentParser parser = JsonXContent.jsonXContent.createParser(, +                     NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {, +                parser.nextToken(); // start object, +                parser.nextToken(); // field name, +                parser.nextToken(); // field value, +                return parseGeoPoint(parser, new GeoPoint(), ignoreZValue);, +            }, +, +        } catch (IOException ex) {, +            throw new ElasticsearchParseException("error parsing geopoint", ex);, +        }, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java, +        public static final String NULL_VALUE = "null_value";, +            Object nullValue = null;, +                } else if (propName.equals(Names.NULL_VALUE)) {, +                    if (propNode == null) {, +                        throw new MapperParsingException("Property [null_value] cannot be null.");, +                    }, +                    nullValue = propNode;]