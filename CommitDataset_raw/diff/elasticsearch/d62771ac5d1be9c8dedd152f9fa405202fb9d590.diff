[+++ b/docs/java-api/client.asciidoc, +Client client = TransportClient.builder().build(), +Client client = TransportClient.builder().settings(settings).build();, +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/docs/java-api/client.asciidoc, +Client client = TransportClient.builder().build(), +Client client = TransportClient.builder().settings(settings).build();, +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +, +=== Java API Transport API construction, +, +The `TransportClient` construction code has changed, it now uses the builder, +pattern. Instead of using:, +, +[source,java], +--------------------------------------------------, +Settings settings = ImmutableSettings.settingsBuilder(), +        .put("cluster.name", "myClusterName").build();, +Client client = new TransportClient(settings);, +, +Use:, +, +[source,java], +--------------------------------------------------, +Settings settings = ImmutableSettings.settingsBuilder(), +        .put("cluster.name", "myClusterName").build();, +Client client = TransportClient.builder().settings(settings).build();, +--------------------------------------------------, +++ b/docs/java-api/client.asciidoc, +Client client = TransportClient.builder().build(), +Client client = TransportClient.builder().settings(settings).build();, +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +, +=== Java API Transport API construction, +, +The `TransportClient` construction code has changed, it now uses the builder, +pattern. Instead of using:, +, +[source,java], +--------------------------------------------------, +Settings settings = ImmutableSettings.settingsBuilder(), +        .put("cluster.name", "myClusterName").build();, +Client client = new TransportClient(settings);, +, +Use:, +, +[source,java], +--------------------------------------------------, +Settings settings = ImmutableSettings.settingsBuilder(), +        .put("cluster.name", "myClusterName").build();, +Client client = TransportClient.builder().settings(settings).build();, +--------------------------------------------------, +++ b/src/main/java/org/elasticsearch/action/Action.java, +public abstract class Action<Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>>, +    public abstract RequestBuilder newRequestBuilder(ElasticsearchClient client);, +++ b/docs/java-api/client.asciidoc, +Client client = TransportClient.builder().build(), +Client client = TransportClient.builder().settings(settings).build();, +TransportClient client = TransportClient.builder().settings(settings).build();, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +, +=== Java API Transport API construction, +, +The `TransportClient` construction code has changed, it now uses the builder, +pattern. Instead of using:, +, +[source,java], +--------------------------------------------------, +Settings settings = ImmutableSettings.settingsBuilder(), +        .put("cluster.name", "myClusterName").build();, +Client client = new TransportClient(settings);, +, +Use:, +, +[source,java], +--------------------------------------------------, +Settings settings = ImmutableSettings.settingsBuilder(), +        .put("cluster.name", "myClusterName").build();, +Client client = TransportClient.builder().settings(settings).build();, +--------------------------------------------------, +++ b/src/main/java/org/elasticsearch/action/Action.java, +public abstract class Action<Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>>, +    public abstract RequestBuilder newRequestBuilder(ElasticsearchClient client);, +++ b/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +import com.google.common.base.Preconditions;, +import org.elasticsearch.search.aggregations.reducers.ReducerBuilder;, +public abstract class ActionRequestBuilder<Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> {, +    protected final Action<Request, Response, RequestBuilder> action;, +    protected final ElasticsearchClient client;, +    protected ActionRequestBuilder(ElasticsearchClient client, Action<Request, Response, RequestBuilder> action, Request request) {, +        Preconditions.checkNotNull(action, "action must not be null");, +        this.action = action;, +    public final void execute(ActionListener<Response> listener) {, +        client.execute(action, beforeExecute(request), listener);, +    /**, +     * A callback to additionally process the request before its executed, +     */, +    protected Request beforeExecute(Request request) {]