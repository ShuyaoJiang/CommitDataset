[+++ b/core/src/main/java/org/elasticsearch/tasks/TaskInfo.java, +            "task_info", true, a -> {, +                TaskId parentTaskId = parentTaskIdString == null ? TaskId.EMPTY_TASK_ID : new TaskId(parentTaskIdString);, +        // Note for the future: this has to be backwards and forwards compatible with all changes to the task storage format, +++ b/core/src/main/java/org/elasticsearch/tasks/TaskInfo.java, +            "task_info", true, a -> {, +                TaskId parentTaskId = parentTaskIdString == null ? TaskId.EMPTY_TASK_ID : new TaskId(parentTaskIdString);, +        // Note for the future: this has to be backwards and forwards compatible with all changes to the task storage format, +++ b/core/src/test/java/org/elasticsearch/tasks/TaskResultTests.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +    public void testTaskInfoIsForwardCompatible() throws IOException {, +        TaskInfo taskInfo = randomTaskInfo();, +        TaskInfo read;, +        try (XContentBuilder builder = XContentBuilder.builder(randomFrom(XContentType.values()).xContent())) {, +            builder.startObject();, +            taskInfo.toXContent(builder, ToXContent.EMPTY_PARAMS);, +            builder.endObject();, +            try (XContentBuilder withExtraFields = addRandomUnknownFields(builder)) {, +                try (XContentBuilder shuffled = shuffleXContent(withExtraFields)) {, +                    try (XContentParser parser = createParser(shuffled)) {, +                        read = TaskInfo.PARSER.apply(parser, null);, +                    }, +                }, +            }, +        } catch (IOException e) {, +            throw new IOException("Error processing [" + taskInfo + "]", e);, +        }, +        assertEquals(taskInfo, read);, +    }, +, +    private XContentBuilder addRandomUnknownFields(XContentBuilder builder) throws IOException {, +        try (XContentParser parser = createParser(builder)) {, +            Map<String, Object> map = parser.mapOrdered();, +            int numberOfNewFields = randomIntBetween(2, 10);, +            for (int i = 0; i < numberOfNewFields; i++) {, +                if (randomBoolean()) {, +                    map.put("unknown_field" + i, randomAlphaOfLength(20));, +                } else {, +                    map.put("unknown_field" + i, Collections.singletonMap("inner", randomAlphaOfLength(20)));, +                }, +            }, +            XContentBuilder xContentBuilder = XContentFactory.contentBuilder(parser.contentType());, +            return xContentBuilder.map(map);, +        }, +    }, +]