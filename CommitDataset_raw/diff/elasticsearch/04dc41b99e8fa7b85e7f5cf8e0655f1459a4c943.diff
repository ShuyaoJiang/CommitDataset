[+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +    /**, +     * If there is any current committed publication, this method cancels it., +     * This method is used exclusively by tests., +     * @return true if publication was cancelled, false if there is no current committed publication., +     */, +    boolean cancelCommittedPublication() {, +        synchronized (mutex) {, +            if (currentPublication.isPresent() && currentPublication.get().isCommitted()) {, +                currentPublication.get().cancel("cancelCommittedPublication");, +                return true;, +            }, +            return false;, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +    /**, +     * If there is any current committed publication, this method cancels it., +     * This method is used exclusively by tests., +     * @return true if publication was cancelled, false if there is no current committed publication., +     */, +    boolean cancelCommittedPublication() {, +        synchronized (mutex) {, +            if (currentPublication.isPresent() && currentPublication.get().isCommitted()) {, +                currentPublication.get().cancel("cancelCommittedPublication");, +                return true;, +            }, +            return false;, +        }, +    }, +, +++ b/server/src/test/java/org/elasticsearch/cluster/coordination/RareClusterStateIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.coordination;, +, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.Version;, +import org.elasticsearch.action.ActionFuture;, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionRequestBuilder;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ClusterStateUpdateTask;, +import org.elasticsearch.cluster.block.ClusterBlocks;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.MappingMetaData;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.cluster.routing.RoutingTable;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.cluster.routing.allocation.AllocationService;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.discovery.Discovery;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.indices.IndicesService;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.elasticsearch.test.discovery.TestZenDiscovery;, +import org.elasticsearch.test.disruption.BlockClusterStateProcessing;, +import org.elasticsearch.test.junit.annotations.TestLogging;, +, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.TimeUnit;, +, +import static java.util.Collections.emptyMap;, +import static java.util.Collections.emptySet;, +import static org.elasticsearch.action.DocWriteResponse.Result.CREATED;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.hasItem;, +import static org.hamcrest.Matchers.hasSize;]