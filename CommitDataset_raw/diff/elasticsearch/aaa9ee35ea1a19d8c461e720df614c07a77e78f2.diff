[+++ b/core/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java, +        XContentParser.Token token = parser.currentToken();, +        if (token == XContentParser.Token.FIELD_NAME) {, +            token = parser.nextToken();, +        }, +        if (token == XContentParser.Token.START_ARRAY) {, +            token = parser.nextToken();, +        }, +        for (; token != XContentParser.Token.END_ARRAY; token = parser.nextToken()) {, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java, +        XContentParser.Token token = parser.currentToken();, +        if (token == XContentParser.Token.FIELD_NAME) {, +            token = parser.nextToken();, +        }, +        if (token == XContentParser.Token.START_ARRAY) {, +            token = parser.nextToken();, +        }, +        for (; token != XContentParser.Token.END_ARRAY; token = parser.nextToken()) {, +++ b/core/src/test/java/org/elasticsearch/common/xcontent/support/XContentMapValuesTests.java, +import com.google.common.collect.ImmutableMap;, +, +import java.io.IOException;, +import java.util.Collections;, +, +    public void testEmptyList() throws IOException {, +        XContentBuilder builder = XContentFactory.jsonBuilder().startObject(), +                .startArray("some_array"), +                .endArray().endObject();, +, +        try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) {, +            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken());, +            assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken());, +            assertEquals("some_array", parser.currentName());, +            if (random().nextBoolean()) {, +                // sometimes read the start array token, sometimes not, +                assertEquals(XContentParser.Token.START_ARRAY, parser.nextToken());, +            }, +            assertEquals(Collections.emptyList(), parser.list());, +        }, +    }, +, +    public void testSimpleList() throws IOException {, +        XContentBuilder builder = XContentFactory.jsonBuilder().startObject(), +                .startArray("some_array"), +                    .value(1), +                    .value(3), +                    .value(0), +                .endArray().endObject();, +, +        try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) {, +            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken());, +            assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken());, +            assertEquals("some_array", parser.currentName());, +            if (random().nextBoolean()) {, +                // sometimes read the start array token, sometimes not, +                assertEquals(XContentParser.Token.START_ARRAY, parser.nextToken());, +            }, +            assertEquals(Arrays.asList(1, 3, 0), parser.list());, +        }, +    }, +, +    public void testNestedList() throws IOException {, +        XContentBuilder builder = XContentFactory.jsonBuilder().startObject(), +                .startArray("some_array"), +                    .startArray().endArray(), +                    .startArray().value(1).value(3).endArray(), +                    .startArray().value(2).endArray(), +                .endArray().endObject();, +, +        try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) {, +            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken());, +            assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken());, +            assertEquals("some_array", parser.currentName());, +            if (random().nextBoolean()) {, +                // sometimes read the start array token, sometimes not, +                assertEquals(XContentParser.Token.START_ARRAY, parser.nextToken());, +            }, +            assertEquals(, +                    Arrays.asList(Collections.<Integer>emptyList(), Arrays.asList(1, 3), Arrays.asList(2)),, +                    parser.list());, +        }, +    }, +, +    public void testNestedMapInList() throws IOException {, +        XContentBuilder builder = XContentFactory.jsonBuilder().startObject(), +                .startArray("some_array"), +                    .startObject().field("foo", "bar").endObject(), +                    .startObject().endObject(), +                .endArray().endObject();, +, +        try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) {, +            assertEquals(XContentParser.Token.START_OBJECT, parser.nextToken());, +            assertEquals(XContentParser.Token.FIELD_NAME, parser.nextToken());, +            assertEquals("some_array", parser.currentName());, +            if (random().nextBoolean()) {, +                // sometimes read the start array token, sometimes not, +                assertEquals(XContentParser.Token.START_ARRAY, parser.nextToken());, +            }, +            assertEquals(, +                    Arrays.asList(ImmutableMap.of("foo", "bar"), Collections.<String, Object>emptyMap()),]