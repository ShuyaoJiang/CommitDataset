[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +import org.elasticsearch.search.aggregations.Aggregation;, +import org.elasticsearch.search.aggregations.AggregationBuilders;, +import org.elasticsearch.search.aggregations.Aggregations;, +import org.elasticsearch.search.aggregations.bucket.range.Range;, +import org.elasticsearch.search.aggregations.bucket.terms.Terms;, +import org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket;, +import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.avg.Avg;, +            request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);, +            SearchRequest searchRequest = new SearchRequest("posts"); // <1>, +            searchRequest.types("doc"); // <2>, +    @SuppressWarnings({ "unused", "unchecked" }), +    public void testSearchRequestAggregations() throws IOException {, +        RestHighLevelClient client = highLevelClient();, +        {, +            BulkRequest request = new BulkRequest();, +            request.add(new IndexRequest("posts", "doc", "1"), +                    .source(XContentType.JSON, "company", "Elastic", "age", 20));, +            request.add(new IndexRequest("posts", "doc", "2"), +                    .source(XContentType.JSON, "company", "Elastic", "age", 30));, +            request.add(new IndexRequest("posts", "doc", "3"), +                    .source(XContentType.JSON, "company", "Elastic", "age", 40));, +            request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);, +            BulkResponse bulkResponse = client.bulk(request);, +            assertSame(bulkResponse.status(), RestStatus.OK);, +            assertFalse(bulkResponse.hasFailures());, +        }, +        {, +            SearchRequest searchRequest = new SearchRequest();, +            // tag::search-request-aggregations, +            SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +            TermsAggregationBuilder aggregation = AggregationBuilders.terms("by_company"), +                    .field("company.keyword");, +            aggregation.subAggregation(AggregationBuilders.avg("average_age"), +                    .field("age"));, +            searchSourceBuilder.aggregation(aggregation);, +            // end::search-request-aggregations, +            searchSourceBuilder.query(QueryBuilders.matchAllQuery());, +            searchRequest.source(searchSourceBuilder);, +            SearchResponse searchResponse = client.search(searchRequest);, +            {, +                // tag::search-request-aggregations-get, +                Aggregations aggregations = searchResponse.getAggregations();, +                Terms byCompanyAggregation = aggregations.get("by_company"); // <1>, +                Bucket elasticBucket = byCompanyAggregation.getBucketByKey("Elastic"); // <2>, +                Avg averageAge = elasticBucket.getAggregations().get("average_age"); // <3>, +                double avg = averageAge.getValue();, +                // end::search-request-aggregations-get, +, +                try {, +                    // tag::search-request-aggregations-get-wrongCast, +                    Range range = aggregations.get("by_company"); // <1>, +                    // end::search-request-aggregations-get-wrongCast, +                } catch (ClassCastException ex) {, +                    assertEquals("org.elasticsearch.search.aggregations.bucket.terms.ParsedStringTerms", +                            + " cannot be cast to org.elasticsearch.search.aggregations.bucket.range.Range", ex.getMessage());, +                }, +                assertEquals(3, elasticBucket.getDocCount());, +                assertEquals(30, avg, 0.0);, +            }, +            Aggregations aggregations = searchResponse.getAggregations();, +            {, +                // tag::search-request-aggregations-asMap, +                Map<String, Aggregation> aggregationMap = aggregations.getAsMap();, +                Terms companyAggregation = (Terms) aggregationMap.get("by_company");, +                // end::search-request-aggregations-asMap, +            }, +            {, +                // tag::search-request-aggregations-asList, +                List<Aggregation> aggregationList = aggregations.asList();, +                // end::search-request-aggregations-asList, +            }, +            {, +                // tag::search-request-aggregations-iterator, +                for (Aggregation agg : aggregations) {, +                    String type = agg.getType();, +                    if (type.equals(TermsAggregationBuilder.NAME)) {, +                        Bucket elasticBucket = ((Terms) agg).getBucketByKey("Elastic");, +                        long numberOfDocs = elasticBucket.getDocCount();, +                    }, +                }, +                // end::search-request-aggregations-iterator, +            }, +        }, +    }, +, +            request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/SearchDocumentationIT.java, +import org.elasticsearch.search.aggregations.Aggregation;, +import org.elasticsearch.search.aggregations.AggregationBuilders;, +import org.elasticsearch.search.aggregations.Aggregations;, +import org.elasticsearch.search.aggregations.bucket.range.Range;, +import org.elasticsearch.search.aggregations.bucket.terms.Terms;, +import org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket;, +import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.avg.Avg;, +            request.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);, +            SearchRequest searchRequest = new SearchRequest("posts"); // <1>, +            searchRequest.types("doc"); // <2>]