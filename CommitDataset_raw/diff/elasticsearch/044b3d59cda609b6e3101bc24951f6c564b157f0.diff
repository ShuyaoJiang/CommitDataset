[+++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                if (oldState != newState && newState.getRoutingNodes().unassigned().size() > 0) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                if (oldState != newState && newState.getRoutingNodes().unassigned().size() > 0) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public <T extends ClusterState.Custom> T custom(String type) { return (T) customs.get(type); }, +    /**, +     * Returns <code>true</code> iff this {@link RoutingNodes} instance has any unassigned primaries even if the, +     * primaries are marked as temporarily ignored., +     */, +        return unassignedShards.getNumPrimaries() + unassignedShards.getNumIgnoredPrimaries() > 0;, +    /**, +     * Returns <code>true</code> iff this {@link RoutingNodes} instance has any unassigned shards even if the, +     * shards are marked as temporarily ignored., +     * @see UnassignedShards#isEmpty(), +     * @see UnassignedShards#isIgnoredEmpty(), +     */, +        return unassignedShards.isEmpty() == false || unassignedShards.isIgnoredEmpty() == false;, +        private int ignoredPrimaries = 0;, +        /**, +         * Returns the size of the non-ignored unassigned shards, +         */, +        public int size() { return unassigned.size(); }, +        /**, +         * Returns the size of the temporarily marked as ignored unassigned shards, +         */, +        public int ignoredSize() { return ignored.size(); }, +, +        /**, +         * Returns the number of non-ignored unassigned primaries, +         */, +        public int getNumPrimaries() {, +        /**, +         * Returns the number of temporarily marked as ignored unassigned primaries, +         */, +        public int getNumIgnoredPrimaries() { return ignoredPrimaries; }, +, +         * Marks a shard as temporarily ignored and adds it to the ignore unassigned list., +         * Should be used with caution, typically,, +         * @see #ignored(), +         * @see UnassignedIterator#removeAndIgnore(), +         * @see #isIgnoredEmpty(), +            if (shard.primary()) {, +                ignoredPrimaries++;, +            }, +             * Typically this is used when an allocation decision prevents a shard from being allocated such, +             * that subsequent consumers of this API won't try to allocate this shard again., +        /**, +         * Returns <code>true</code> iff this collection contains one or more non-ignored unassigned shards., +         */, +        /**, +         * Returns <code>true</code> iff any unassigned shards are marked as temporarily ignored., +         * @see UnassignedShards#ignoreShard(ShardRouting), +         * @see UnassignedIterator#removeAndIgnore(), +         */, +        public boolean isIgnoredEmpty() {, +            return ignored.isEmpty();, +        }, +, +        /**, +         * Drains all unassigned shards and returns it., +         * This method will not drain ignored shards., +         */, +        int unassignedIgnoredPrimaryCount = 0;, +        for (ShardRouting shard : routingNodes.unassigned().ignored()) {, +            if (shard.primary()) {, +                unassignedIgnoredPrimaryCount++;, +            }, +        }, +, +        assert unassignedPrimaryCount == routingNodes.unassignedShards.getNumPrimaries() :, +                "Unassigned primaries is [" + unassignedPrimaryCount + "] but RoutingNodes returned unassigned primaries [" + routingNodes.unassigned().getNumPrimaries() + "]";, +        assert unassignedIgnoredPrimaryCount == routingNodes.unassignedShards.getNumIgnoredPrimaries() :, +                "Unassigned ignored primaries is [" + unassignedIgnoredPrimaryCount + "] but RoutingNodes returned unassigned ignored primaries [" + routingNodes.unassigned().getNumIgnoredPrimaries() + "]";, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +                if (oldState != newState && newState.getRoutingNodes().unassigned().size() > 0) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public <T extends ClusterState.Custom> T custom(String type) { return (T) customs.get(type); }, +    /**, +     * Returns <code>true</code> iff this {@link RoutingNodes} instance has any unassigned primaries even if the, +     * primaries are marked as temporarily ignored., +     */, +        return unassignedShards.getNumPrimaries() + unassignedShards.getNumIgnoredPrimaries() > 0;, +    /**, +     * Returns <code>true</code> iff this {@link RoutingNodes} instance has any unassigned shards even if the, +     * shards are marked as temporarily ignored., +     * @see UnassignedShards#isEmpty(), +     * @see UnassignedShards#isIgnoredEmpty(), +     */, +        return unassignedShards.isEmpty() == false || unassignedShards.isIgnoredEmpty() == false;, +        private int ignoredPrimaries = 0;, +        /**, +         * Returns the size of the non-ignored unassigned shards, +         */, +        public int size() { return unassigned.size(); }, +        /**, +         * Returns the size of the temporarily marked as ignored unassigned shards, +         */, +        public int ignoredSize() { return ignored.size(); }, +]