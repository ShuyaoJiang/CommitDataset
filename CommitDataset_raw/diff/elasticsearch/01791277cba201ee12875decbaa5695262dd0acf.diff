[+++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +    private static final ConstructingObjectParser<DiscountedCumulativeGain, Void> PARSER = new ConstructingObjectParser<>("dcg_at", false,, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +    private static final ConstructingObjectParser<DiscountedCumulativeGain, Void> PARSER = new ConstructingObjectParser<>("dcg_at", false,, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvaluationMetric.java, +import org.elasticsearch.common.xcontent.ToXContentObject;, +public interface EvaluationMetric extends ToXContentObject, NamedWriteable {, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +    private static final ConstructingObjectParser<DiscountedCumulativeGain, Void> PARSER = new ConstructingObjectParser<>("dcg_at", false,, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvaluationMetric.java, +import org.elasticsearch.common.xcontent.ToXContentObject;, +public interface EvaluationMetric extends ToXContentObject, NamedWriteable {, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RatedRequest.java, +    private static final ConstructingObjectParser<RatedRequest, Void> PARSER = new ConstructingObjectParser<>("request",, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +    private static final ConstructingObjectParser<DiscountedCumulativeGain, Void> PARSER = new ConstructingObjectParser<>("dcg_at", false,, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvaluationMetric.java, +import org.elasticsearch.common.xcontent.ToXContentObject;, +public interface EvaluationMetric extends ToXContentObject, NamedWriteable {, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RatedRequest.java, +    private static final ConstructingObjectParser<RatedRequest, Void> PARSER = new ConstructingObjectParser<>("request",, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainTests.java, +import org.elasticsearch.common.bytes.BytesReference;, +import static org.elasticsearch.test.XContentTestUtils.insertRandomFields;, +import static org.hamcrest.Matchers.startsWith;, +    public void testXContentParsingIsNotLenient() throws IOException {, +        DiscountedCumulativeGain testItem = createTestItem();, +        XContentType xContentType = randomFrom(XContentType.values());, +        BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean());, +        BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random());, +        try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {, +            parser.nextToken();, +            parser.nextToken();, +            IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,, +                    () -> DiscountedCumulativeGain.fromXContent(parser));, +            assertThat(exception.getMessage(), startsWith("[dcg_at] unknown field"));, +        }, +    }, +, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +    private static final ConstructingObjectParser<DiscountedCumulativeGain, Void> PARSER = new ConstructingObjectParser<>("dcg_at", false,, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvaluationMetric.java, +import org.elasticsearch.common.xcontent.ToXContentObject;, +public interface EvaluationMetric extends ToXContentObject, NamedWriteable {, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RatedRequest.java, +    private static final ConstructingObjectParser<RatedRequest, Void> PARSER = new ConstructingObjectParser<>("request",, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainTests.java, +import org.elasticsearch.common.bytes.BytesReference;, +import static org.elasticsearch.test.XContentTestUtils.insertRandomFields;, +import static org.hamcrest.Matchers.startsWith;, +    public void testXContentParsingIsNotLenient() throws IOException {, +        DiscountedCumulativeGain testItem = createTestItem();, +        XContentType xContentType = randomFrom(XContentType.values());, +        BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean());, +        BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random());, +        try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {, +            parser.nextToken();, +            parser.nextToken();, +            IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,, +                    () -> DiscountedCumulativeGain.fromXContent(parser));, +            assertThat(exception.getMessage(), startsWith("[dcg_at] unknown field"));, +        }, +    }, +, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/MeanReciprocalRankTests.java, +import org.elasticsearch.common.bytes.BytesReference;, +import static org.elasticsearch.test.XContentTestUtils.insertRandomFields;, +import static org.hamcrest.Matchers.startsWith;, +    public void testXContentParsingIsNotLenient() throws IOException {, +        MeanReciprocalRank testItem = createTestItem();, +        XContentType xContentType = randomFrom(XContentType.values());, +        BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean());, +        BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random());, +        try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {, +            parser.nextToken();, +            parser.nextToken();, +            IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,, +                    () -> MeanReciprocalRank.fromXContent(parser));, +            assertThat(exception.getMessage(), startsWith("[reciprocal_rank] unknown field"));, +        }, +    }, +, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +    private static final ConstructingObjectParser<DiscountedCumulativeGain, Void> PARSER = new ConstructingObjectParser<>("dcg_at", false,, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvaluationMetric.java, +import org.elasticsearch.common.xcontent.ToXContentObject;, +public interface EvaluationMetric extends ToXContentObject, NamedWriteable {, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RatedRequest.java, +    private static final ConstructingObjectParser<RatedRequest, Void> PARSER = new ConstructingObjectParser<>("request",, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainTests.java, +import org.elasticsearch.common.bytes.BytesReference;, +import static org.elasticsearch.test.XContentTestUtils.insertRandomFields;, +import static org.hamcrest.Matchers.startsWith;, +    public void testXContentParsingIsNotLenient() throws IOException {, +        DiscountedCumulativeGain testItem = createTestItem();, +        XContentType xContentType = randomFrom(XContentType.values());, +        BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean());, +        BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random());, +        try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {, +            parser.nextToken();]