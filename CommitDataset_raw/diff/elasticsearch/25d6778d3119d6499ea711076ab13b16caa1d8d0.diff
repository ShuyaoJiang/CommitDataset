[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +                /* We set SO_LINGER timeout to 0 to ensure that when we shutdown the node we don't have a gazillion connections sitting, +                 * in TIME_WAIT to free up resources quickly. This is really the only part where we close the connection from the server, +                 * side otherwise the client (node) initiates the TCP closing sequence which doesn't cause these issues. Setting this, +                 * by default from the beginning can have unexpected side-effects an should be avoided, our protocol is designed, +                 * in a way that clients close connection which is how it should be*/, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +                /* We set SO_LINGER timeout to 0 to ensure that when we shutdown the node we don't have a gazillion connections sitting, +                 * in TIME_WAIT to free up resources quickly. This is really the only part where we close the connection from the server, +                 * side otherwise the client (node) initiates the TCP closing sequence which doesn't cause these issues. Setting this, +                 * by default from the beginning can have unexpected side-effects an should be avoided, our protocol is designed, +                 * in a way that clients close connection which is how it should be*/, +++ b/test/framework/src/main/java/org/elasticsearch/transport/MockTcpTransport.java, +                    /* We set SO_LINGER timeout to 0 to ensure that when we shutdown the node we don't have a gazillion connections sitting, +                     * in TIME_WAIT to free up resources quickly. This is really the only part where we close the connection from the server, +                     * side otherwise the client (node) initiates the TCP closing sequence which doesn't cause these issues. Setting this, +                     * by default from the beginning can have unexpected side-effects an should be avoided, our protocol is designed, +                     * in a way that clients close connection which is how it should be*/, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +                /* We set SO_LINGER timeout to 0 to ensure that when we shutdown the node we don't have a gazillion connections sitting, +                 * in TIME_WAIT to free up resources quickly. This is really the only part where we close the connection from the server, +                 * side otherwise the client (node) initiates the TCP closing sequence which doesn't cause these issues. Setting this, +                 * by default from the beginning can have unexpected side-effects an should be avoided, our protocol is designed, +                 * in a way that clients close connection which is how it should be*/, +++ b/test/framework/src/main/java/org/elasticsearch/transport/MockTcpTransport.java, +                    /* We set SO_LINGER timeout to 0 to ensure that when we shutdown the node we don't have a gazillion connections sitting, +                     * in TIME_WAIT to free up resources quickly. This is really the only part where we close the connection from the server, +                     * side otherwise the client (node) initiates the TCP closing sequence which doesn't cause these issues. Setting this, +                     * by default from the beginning can have unexpected side-effects an should be avoided, our protocol is designed, +                     * in a way that clients close connection which is how it should be*/, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/NioTransport.java, +                /* We set SO_LINGER timeout to 0 to ensure that when we shutdown the node we don't have a gazillion connections sitting, +                 * in TIME_WAIT to free up resources quickly. This is really the only part where we close the connection from the server, +                 * side otherwise the client (node) initiates the TCP closing sequence which doesn't cause these issues. Setting this, +                 * by default from the beginning can have unexpected side-effects an should be avoided, our protocol is designed, +                 * in a way that clients close connection which is how it should be*/]