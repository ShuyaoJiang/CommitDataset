[+++ b/core/src/main/java/org/elasticsearch/cluster/Diff.java, +     * Applies difference to the specified part and returns the resulted part, +++ b/core/src/main/java/org/elasticsearch/cluster/Diff.java, +     * Applies difference to the specified part and returns the resulted part, +++ b/core/src/main/java/org/elasticsearch/cluster/DiffableUtils.java, +import com.carrotsearch.hppc.cursors.IntCursor;, +import com.carrotsearch.hppc.cursors.IntObjectCursor;, +import org.elasticsearch.common.collect.ImmutableOpenIntMap;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +     * Returns a map key serializer for String keys, +     */, +    public static KeySerializer<String> getStringKeySerializer() {, +        return StringKeySerializer.INSTANCE;, +    }, +, +    /**, +     * Returns a map key serializer for Integer keys. Encodes as Int., +     */, +    public static KeySerializer<Integer> getIntKeySerializer() {, +        return IntKeySerializer.INSTANCE;, +    }, +, +    /**, +     * Returns a map key serializer for Integer keys. Encodes as VInt., +     */, +    public static KeySerializer<Integer> getVIntKeySerializer() {, +        return VIntKeySerializer.INSTANCE;, +    }, +, +    /**, +    public static <K, T extends Diffable<T>> MapDiff<K, T, ImmutableOpenMap<K, T>> diff(ImmutableOpenMap<K, T> before, ImmutableOpenMap<K, T> after, KeySerializer<K> keySerializer) {, +        return new ImmutableOpenMapDiff<>(before, after, keySerializer, DiffableValueSerializer.getWriteOnlyInstance());, +    }, +, +    /**, +     * Calculates diff between two ImmutableOpenMaps of non-diffable objects, +     */, +    public static <K, T> MapDiff<K, T, ImmutableOpenMap<K, T>> diff(ImmutableOpenMap<K, T> before, ImmutableOpenMap<K, T> after, KeySerializer<K> keySerializer, NonDiffableValueSerializer<K, T> valueSerializer) {, +        assert after != null && before != null;, +        return new ImmutableOpenMapDiff<>(before, after, keySerializer, valueSerializer);, +    }, +, +    /**, +     * Calculates diff between two ImmutableOpenIntMaps of Diffable objects, +     */, +    public static <T extends Diffable<T>> MapDiff<Integer, T, ImmutableOpenIntMap<T>> diff(ImmutableOpenIntMap<T> before, ImmutableOpenIntMap<T> after, KeySerializer<Integer> keySerializer) {, +        assert after != null && before != null;, +        return new ImmutableOpenIntMapDiff<>(before, after, keySerializer, DiffableValueSerializer.getWriteOnlyInstance());, +    }, +, +    /**, +     * Calculates diff between two ImmutableOpenIntMaps of non-diffable objects, +     */, +    public static <T> MapDiff<Integer, T, ImmutableOpenIntMap<T>> diff(ImmutableOpenIntMap<T> before, ImmutableOpenIntMap<T> after, KeySerializer<Integer> keySerializer, NonDiffableValueSerializer<Integer, T> valueSerializer) {, +        assert after != null && before != null;, +        return new ImmutableOpenIntMapDiff<>(before, after, keySerializer, valueSerializer);, +    public static <K, T extends Diffable<T>> MapDiff<K, T, Map<K, T>> diff(Map<K, T> before, Map<K, T> after, KeySerializer<K> keySerializer) {, +        return new JdkMapDiff<>(before, after, keySerializer, DiffableValueSerializer.getWriteOnlyInstance());, +    }, +, +    /**, +     * Calculates diff between two Maps of non-diffable objects, +     */, +    public static <K, T> MapDiff<K, T, Map<K, T>> diff(Map<K, T> before, Map<K, T> after, KeySerializer<K> keySerializer, NonDiffableValueSerializer<K, T> valueSerializer) {, +        assert after != null && before != null;, +        return new JdkMapDiff<>(before, after, keySerializer, valueSerializer);, +    public static <K, T> MapDiff<K, T, ImmutableOpenMap<K, T>> readImmutableOpenMapDiff(StreamInput in, KeySerializer<K> keySerializer, ValueSerializer<K, T> valueSerializer) throws IOException {, +        return new ImmutableOpenMapDiff<>(in, keySerializer, valueSerializer);, +    public static <T> MapDiff<Integer, T, ImmutableOpenIntMap<T>> readImmutableOpenIntMapDiff(StreamInput in, KeySerializer<Integer> keySerializer, ValueSerializer<Integer, T> valueSerializer) throws IOException {, +        return new ImmutableOpenIntMapDiff<>(in, keySerializer, valueSerializer);, +     * Loads an object that represents difference between two Maps of Diffable objects, +    public static <K, T> MapDiff<K, T, Map<K, T>> readJdkMapDiff(StreamInput in, KeySerializer<K> keySerializer, ValueSerializer<K, T> valueSerializer) throws IOException {, +        return new JdkMapDiff<>(in, keySerializer, valueSerializer);, +     * Loads an object that represents difference between two ImmutableOpenMaps of Diffable objects using Diffable proto object, +    public static <K, T extends Diffable<T>> MapDiff<K, T, ImmutableOpenMap<K, T>> readImmutableOpenMapDiff(StreamInput in, KeySerializer<K> keySerializer, T proto) throws IOException {, +        return new ImmutableOpenMapDiff<>(in, keySerializer, new DiffablePrototypeValueReader<>(proto));, +    }, +     * Loads an object that represents difference between two ImmutableOpenIntMaps of Diffable objects using Diffable proto object, +    public static <T extends Diffable<T>> MapDiff<Integer, T, ImmutableOpenIntMap<T>> readImmutableOpenIntMapDiff(StreamInput in, KeySerializer<Integer> keySerializer, T proto) throws IOException {, +        return new ImmutableOpenIntMapDiff<>(in, keySerializer, new DiffablePrototypeValueReader<>(proto));, +    }, +     * Loads an object that represents difference between two Maps of Diffable objects using Diffable proto object, +    public static <K, T extends Diffable<T>> MapDiff<K, T, Map<K, T>> readJdkMapDiff(StreamInput in, KeySerializer<K> keySerializer, T proto) throws IOException {, +        return new JdkMapDiff<>(in, keySerializer, new DiffablePrototypeValueReader<>(proto));, +     * Represents differences between two Maps of (possibly diffable) objects., +    private static class JdkMapDiff<K, T> extends MapDiff<K, T, Map<K, T>> {, +        protected JdkMapDiff(StreamInput in, KeySerializer<K> keySerializer, ValueSerializer<K, T> valueSerializer) throws IOException {, +            super(in, keySerializer, valueSerializer);, +        public JdkMapDiff(Map<K, T> before, Map<K, T> after,, +                          KeySerializer<K> keySerializer, ValueSerializer<K, T> valueSerializer) {, +            super(keySerializer, valueSerializer);, +, +            for (K key : before.keySet()) {, +, +            for (Map.Entry<K, T> partIter : after.entrySet()) {, +                    upserts.put(partIter.getKey(), partIter.getValue());, +                    if (valueSerializer.supportsDiffableValues()) {]