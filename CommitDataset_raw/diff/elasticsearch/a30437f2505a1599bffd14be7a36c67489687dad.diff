[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.indices.rollover.RolloverAction;, +import org.elasticsearch.action.admin.indices.rollover.TransportRolloverAction;, +        registerAction(RolloverAction.INSTANCE, TransportRolloverAction.class);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.indices.rollover.RolloverAction;, +import org.elasticsearch.action.admin.indices.rollover.TransportRolloverAction;, +        registerAction(RolloverAction.INSTANCE, TransportRolloverAction.class);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +import org.elasticsearch.cluster.metadata.SnapshotId;, +                new SnapshotsService.SnapshotRequest("create_snapshot [" + request.snapshot() + "]", request.snapshot(), request.repository()), +                        SnapshotId snapshotId = new SnapshotId(request.repository(), request.snapshot());, +, +                        public void onSnapshotCompletion(SnapshotId snapshotId, SnapshotInfo snapshot) {, +                            if (this.snapshotId.equals(snapshotId)) {, +                                listener.onResponse(new CreateSnapshotResponse(snapshot));, +                        public void onSnapshotFailure(SnapshotId snapshotId, Throwable t) {, +                            if (this.snapshotId.equals(snapshotId)) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.indices.rollover.RolloverAction;, +import org.elasticsearch.action.admin.indices.rollover.TransportRolloverAction;, +        registerAction(RolloverAction.INSTANCE, TransportRolloverAction.class);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +import org.elasticsearch.cluster.metadata.SnapshotId;, +                new SnapshotsService.SnapshotRequest("create_snapshot [" + request.snapshot() + "]", request.snapshot(), request.repository()), +                        SnapshotId snapshotId = new SnapshotId(request.repository(), request.snapshot());, +, +                        public void onSnapshotCompletion(SnapshotId snapshotId, SnapshotInfo snapshot) {, +                            if (this.snapshotId.equals(snapshotId)) {, +                                listener.onResponse(new CreateSnapshotResponse(snapshot));, +                        public void onSnapshotFailure(SnapshotId snapshotId, Throwable t) {, +                            if (this.snapshotId.equals(snapshotId)) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +import org.elasticsearch.cluster.metadata.SnapshotId;, +        SnapshotId snapshotIds = new SnapshotId(request.repository(), request.snapshot());, +        snapshotsService.deleteSnapshot(snapshotIds, new SnapshotsService.DeleteSnapshotListener() {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.indices.rollover.RolloverAction;, +import org.elasticsearch.action.admin.indices.rollover.TransportRolloverAction;, +        registerAction(RolloverAction.INSTANCE, TransportRolloverAction.class);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +import org.elasticsearch.cluster.metadata.SnapshotId;, +                new SnapshotsService.SnapshotRequest("create_snapshot [" + request.snapshot() + "]", request.snapshot(), request.repository()), +                        SnapshotId snapshotId = new SnapshotId(request.repository(), request.snapshot());, +, +                        public void onSnapshotCompletion(SnapshotId snapshotId, SnapshotInfo snapshot) {, +                            if (this.snapshotId.equals(snapshotId)) {, +                                listener.onResponse(new CreateSnapshotResponse(snapshot));, +                        public void onSnapshotFailure(SnapshotId snapshotId, Throwable t) {, +                            if (this.snapshotId.equals(snapshotId)) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +import org.elasticsearch.cluster.metadata.SnapshotId;, +        SnapshotId snapshotIds = new SnapshotId(request.repository(), request.snapshot());, +        snapshotsService.deleteSnapshot(snapshotIds, new SnapshotsService.DeleteSnapshotListener() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/GetSnapshotsResponse.java, +        this.snapshots = snapshots;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.indices.rollover.RolloverAction;, +import org.elasticsearch.action.admin.indices.rollover.TransportRolloverAction;, +        registerAction(RolloverAction.INSTANCE, TransportRolloverAction.class);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +import org.elasticsearch.cluster.metadata.SnapshotId;, +                new SnapshotsService.SnapshotRequest("create_snapshot [" + request.snapshot() + "]", request.snapshot(), request.repository()), +                        SnapshotId snapshotId = new SnapshotId(request.repository(), request.snapshot());, +, +                        public void onSnapshotCompletion(SnapshotId snapshotId, SnapshotInfo snapshot) {, +                            if (this.snapshotId.equals(snapshotId)) {, +                                listener.onResponse(new CreateSnapshotResponse(snapshot));, +                        public void onSnapshotFailure(SnapshotId snapshotId, Throwable t) {, +                            if (this.snapshotId.equals(snapshotId)) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +import org.elasticsearch.cluster.metadata.SnapshotId;, +        SnapshotId snapshotIds = new SnapshotId(request.repository(), request.snapshot());, +        snapshotsService.deleteSnapshot(snapshotIds, new SnapshotsService.DeleteSnapshotListener() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/GetSnapshotsResponse.java, +        this.snapshots = snapshots;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/TransportGetSnapshotsAction.java, +import org.elasticsearch.cluster.metadata.SnapshotId;, +import java.util.Collections;, +        super(settings, GetSnapshotsAction.NAME, transportService, clusterService, threadPool, actionFilters, indexNameExpressionResolver, GetSnapshotsRequest::new);, +    protected void masterOperation(final GetSnapshotsRequest request, ClusterState state, final ActionListener<GetSnapshotsResponse> listener) {, +                snapshotInfoBuilder.addAll(snapshotsService.snapshots(request.repository(), request.ignoreUnavailable()));, +                snapshotInfoBuilder.addAll(snapshotsService.currentSnapshots(request.repository()));, +                Set<String> snapshotsToGet = new LinkedHashSet<>(); // to keep insertion order, +                List<SnapshotInfo> snapshots = null;, +                        snapshotsToGet.add(snapshotOrPattern);, +                        if (snapshots == null) { // lazily load snapshots, +                            snapshots = snapshotsService.snapshots(request.repository(), request.ignoreUnavailable());, +                        }, +                        for (SnapshotInfo snapshot : snapshots) {, +                            if (Regex.simpleMatch(snapshotOrPattern, snapshot.name())) {, +                                snapshotsToGet.add(snapshot.name());, +                for (String snapshot : snapshotsToGet) {, +                    SnapshotId snapshotId = new SnapshotId(request.repository(), snapshot);]