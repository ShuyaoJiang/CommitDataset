[+++ b/src/main/java/org/elasticsearch/indices/warmer/IndicesWarmer.java, +import org.elasticsearch.threadpool.ThreadPool;, +    public abstract class Listener {, +        public String executor() {, +            return ThreadPool.Names.WARMER;, +        }, +        public abstract void warm(IndexShard indexShard, IndexMetaData indexMetaData, WarmerContext context);, +++ b/src/main/java/org/elasticsearch/indices/warmer/IndicesWarmer.java, +import org.elasticsearch.threadpool.ThreadPool;, +    public abstract class Listener {, +        public String executor() {, +            return ThreadPool.Names.WARMER;, +        }, +        public abstract void warm(IndexShard indexShard, IndexMetaData indexMetaData, WarmerContext context);, +++ b/src/main/java/org/elasticsearch/search/SearchService.java, +    class SearchWarmer extends IndicesWarmer.Listener {, +++ b/src/main/java/org/elasticsearch/indices/warmer/IndicesWarmer.java, +import org.elasticsearch.threadpool.ThreadPool;, +    public abstract class Listener {, +        public String executor() {, +            return ThreadPool.Names.WARMER;, +        }, +        public abstract void warm(IndexShard indexShard, IndexMetaData indexMetaData, WarmerContext context);, +++ b/src/main/java/org/elasticsearch/search/SearchService.java, +    class SearchWarmer extends IndicesWarmer.Listener {, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +        public static final String WARMER = "warmer";, +        // TODO figure out the best defaults for *all* thread pools, +                .put(Names.WARMER, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", Math.min(Runtime.getRuntime().availableProcessors() / 2, 5)).build())]