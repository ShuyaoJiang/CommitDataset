[+++ b/TESTING.asciidoc, +cd $TESTROOT, +vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +++ b/TESTING.asciidoc, +cd $TESTROOT, +vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/NamingConventionsTask.groovy, +                args('-Djna.nosys=true'), +++ b/TESTING.asciidoc, +cd $TESTROOT, +vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/NamingConventionsTask.groovy, +                args('-Djna.nosys=true'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                'node.attr.testattr'                : 'test',, +    /** Surround strings that contains a comma with double quotes **/, +    private static String escapeComma(Object o) {, +        if (o instanceof String) {, +            String s = (String)o, +            if (s.indexOf(',') != -1) {, +                return "\"${s}\"", +            }, +        }, +        return o, +    }, +, +                // On Windows the comma character is considered a parameter separator:, +                // argument that contains a comma must be quoted, +                args execArgs.collect { a -> escapeComma(a) }, +    }, +++ b/TESTING.asciidoc, +cd $TESTROOT, +vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/NamingConventionsTask.groovy, +                args('-Djna.nosys=true'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                'node.attr.testattr'                : 'test',, +    /** Surround strings that contains a comma with double quotes **/, +    private static String escapeComma(Object o) {, +        if (o instanceof String) {, +            String s = (String)o, +            if (s.indexOf(',') != -1) {, +                return "\"${s}\"", +            }, +        }, +        return o, +    }, +, +                // On Windows the comma character is considered a parameter separator:, +                // argument that contains a comma must be quoted, +                args execArgs.collect { a -> escapeComma(a) }, +    }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/TESTING.asciidoc, +cd $TESTROOT, +vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/NamingConventionsTask.groovy, +                args('-Djna.nosys=true'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                'node.attr.testattr'                : 'test',, +    /** Surround strings that contains a comma with double quotes **/, +    private static String escapeComma(Object o) {, +        if (o instanceof String) {, +            String s = (String)o, +            if (s.indexOf(',') != -1) {, +                return "\"${s}\"", +            }, +        }, +        return o, +    }, +, +                // On Windows the comma character is considered a parameter separator:, +                // argument that contains a comma must be quoted, +                args execArgs.collect { a -> escapeComma(a) }, +    }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_2_2_ID = 2020299;, +    public static final Version V_2_2_2 = new Version(V_2_2_2_ID, org.apache.lucene.util.Version.LUCENE_5_4_1);, +            case V_2_2_2_ID:, +                return V_2_2_2;, +++ b/TESTING.asciidoc, +cd $TESTROOT, +vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/NamingConventionsTask.groovy, +                args('-Djna.nosys=true'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                'node.attr.testattr'                : 'test',, +    /** Surround strings that contains a comma with double quotes **/, +    private static String escapeComma(Object o) {, +        if (o instanceof String) {, +            String s = (String)o, +            if (s.indexOf(',') != -1) {, +                return "\"${s}\"", +            }, +        }, +        return o, +    }, +, +                // On Windows the comma character is considered a parameter separator:]