[+++ b/TESTING.asciidoc, +* ubuntu-1604 aka xenial, +++ b/TESTING.asciidoc, +* ubuntu-1604 aka xenial, +++ b/Vagrantfile, +  config.vm.define "ubuntu-1604" do |config|, +    config.vm.box = "elastic/ubuntu-16.04-x86_64", +    ubuntu_common config, extra: <<-SHELL, +      # Install Jayatana so we can work around it being present., +      [ -f /usr/share/java/jayatanaag.jar ] || install jayatana, +    SHELL, +  end, +++ b/TESTING.asciidoc, +* ubuntu-1604 aka xenial, +++ b/Vagrantfile, +  config.vm.define "ubuntu-1604" do |config|, +    config.vm.box = "elastic/ubuntu-16.04-x86_64", +    ubuntu_common config, extra: <<-SHELL, +      # Install Jayatana so we can work around it being present., +      [ -f /usr/share/java/jayatanaag.jar ] || install jayatana, +    SHELL, +  end, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            if (System.getProperty("idea.active") != null || System.getProperty("eclipse.launcher") != null) {, +                    // hack until gradle supports java 9's new "--release" arg, +                    options.compilerArgs << '--release' << '8', +++ b/TESTING.asciidoc, +* ubuntu-1604 aka xenial, +++ b/Vagrantfile, +  config.vm.define "ubuntu-1604" do |config|, +    config.vm.box = "elastic/ubuntu-16.04-x86_64", +    ubuntu_common config, extra: <<-SHELL, +      # Install Jayatana so we can work around it being present., +      [ -f /usr/share/java/jayatanaag.jar ] || install jayatana, +    SHELL, +  end, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            if (System.getProperty("idea.active") != null || System.getProperty("eclipse.launcher") != null) {, +                    // hack until gradle supports java 9's new "--release" arg, +                    options.compilerArgs << '--release' << '8', +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.lease.Releasables;, +import org.elasticsearch.index.query.ParsedQuery;, +    private final SearchService searchService;, +            TransportService transportService, SearchService searchService, ActionFilters actionFilters,, +            IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.searchService = searchService;, +        ShardSearchLocalRequest shardSearchLocalRequest = new ShardSearchLocalRequest(request.shardId(), request.types(),, +            request.nowInMillis(), request.filteringAliases());, +        SearchContext searchContext = searchService.createSearchContext(shardSearchLocalRequest, SearchService.NO_TIMEOUT, null);, +            ParsedQuery parsedQuery = searchContext.getQueryShardContext().toQuery(request.query());, +            searchContext.parsedQuery(parsedQuery);, +            searchContext.preProcess(request.rewrite());, +            explanation = explain(searchContext, request.rewrite());, +            Releasables.close(searchContext, () -> SearchContext.removeCurrent());, +    private String explain(SearchContext context, boolean rewritten) throws IOException {, +        Query query = context.query();, +        if (rewritten && query instanceof MatchNoDocsQuery) {, +            return context.parsedQuery().query().toString();, +            return query.toString();, +++ b/TESTING.asciidoc, +* ubuntu-1604 aka xenial, +++ b/Vagrantfile, +  config.vm.define "ubuntu-1604" do |config|, +    config.vm.box = "elastic/ubuntu-16.04-x86_64", +    ubuntu_common config, extra: <<-SHELL, +      # Install Jayatana so we can work around it being present., +      [ -f /usr/share/java/jayatanaag.jar ] || install jayatana, +    SHELL, +  end, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            if (System.getProperty("idea.active") != null || System.getProperty("eclipse.launcher") != null) {, +                    // hack until gradle supports java 9's new "--release" arg, +                    options.compilerArgs << '--release' << '8', +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.lease.Releasables;, +import org.elasticsearch.index.query.ParsedQuery;, +    private final SearchService searchService;, +            TransportService transportService, SearchService searchService, ActionFilters actionFilters,, +            IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.searchService = searchService;, +        ShardSearchLocalRequest shardSearchLocalRequest = new ShardSearchLocalRequest(request.shardId(), request.types(),, +            request.nowInMillis(), request.filteringAliases());, +        SearchContext searchContext = searchService.createSearchContext(shardSearchLocalRequest, SearchService.NO_TIMEOUT, null);, +            ParsedQuery parsedQuery = searchContext.getQueryShardContext().toQuery(request.query());, +            searchContext.parsedQuery(parsedQuery);, +            searchContext.preProcess(request.rewrite());, +            explanation = explain(searchContext, request.rewrite());, +            Releasables.close(searchContext, () -> SearchContext.removeCurrent());, +    private String explain(SearchContext context, boolean rewritten) throws IOException {, +        Query query = context.query();, +        if (rewritten && query instanceof MatchNoDocsQuery) {, +            return context.parsedQuery().query().toString();, +            return query.toString();, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +import org.elasticsearch.common.lease.Releasables;, +    private final SearchService searchService;, +                                  TransportService transportService, SearchService searchService, ActionFilters actionFilters,, +                                  IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.searchService = searchService;]