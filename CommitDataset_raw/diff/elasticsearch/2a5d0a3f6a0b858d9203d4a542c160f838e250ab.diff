[+++ b/x-pack/plugin/sql/qa/src/main/resources/docs.csv-spec, +Alejandro      |McAlpine, +Alejandro      |McAlpine, +++ b/x-pack/plugin/sql/qa/src/main/resources/docs.csv-spec, +Alejandro      |McAlpine, +Alejandro      |McAlpine, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +                target = nameOf(inexact ? fa.exactAttribute() : fa);, +++ b/x-pack/plugin/sql/qa/src/main/resources/docs.csv-spec, +Alejandro      |McAlpine, +Alejandro      |McAlpine, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +                target = nameOf(inexact ? fa.exactAttribute() : fa);, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java, +import org.elasticsearch.xpack.sql.querydsl.query.QueryStringQuery;, +    public void testLikeOnInexact() {, +        LogicalPlan p = plan("SELECT * FROM test WHERE some.string LIKE '%a%'");, +        assertTrue(p instanceof Project);, +        p = ((Project) p).child();, +        assertTrue(p instanceof Filter);, +        Expression condition = ((Filter) p).condition();, +        QueryTranslation qt = QueryTranslator.toQuery(condition, false);, +        assertEquals(QueryStringQuery.class, qt.query.getClass());, +        QueryStringQuery qsq = ((QueryStringQuery) qt.query);, +        assertEquals(1, qsq.fields().size());, +        assertEquals("some.string.typical", qsq.fields().keySet().iterator().next());, +    }, +    ]