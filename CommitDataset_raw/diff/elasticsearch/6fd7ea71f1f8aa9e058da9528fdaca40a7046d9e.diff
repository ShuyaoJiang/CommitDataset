[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                switch (bulkItemResponse.getOpType()) {, +                case INDEX:    // <3>, +                case CREATE:, +                    break;, +                case UPDATE:   // <4>, +                    break;, +                case DELETE:   // <5>, +                    BulkItemResponse.Failure failure =, +                            bulkItemResponse.getFailure(); // <2>, +                    "https", "localhost", 9002, null,, +                    new BytesArray(new MatchAllQueryBuilder().toString()),, +                    "user", "pass", Collections.emptyMap(),, +                    new TimeValue(100, TimeUnit.MILLISECONDS),, +            BulkByScrollResponse bulkResponse =, +                    client.reindex(request, RequestOptions.DEFAULT);, +            TimeValue throttledUntilMillis =, +                    bulkResponse.getStatus().getThrottledUntil(); // <13>, +            List<ScrollableHitSource.SearchFailure> searchFailures =, +                    bulkResponse.getSearchFailures(); // <14>, +            List<BulkItemResponse.Failure> bulkFailures =, +                    bulkResponse.getBulkFailures(); // <15>, +            ActionListener<BulkByScrollResponse> listener;, +            listener = new ActionListener<BulkByScrollResponse>() {, +        ActionListener<ListTasksResponse> listener;, +        listener = new ActionListener<ListTasksResponse>() {, +        client.reindexRethrottleAsync(request,, +                RequestOptions.DEFAULT, listener); // <1>, +        client.updateByQueryRethrottleAsync(request,, +                RequestOptions.DEFAULT, listener); // <2>, +        client.deleteByQueryRethrottleAsync(request,, +                RequestOptions.DEFAULT, listener); // <3>, +            UpdateByQueryRequest request =, +                    new UpdateByQueryRequest("source1", "source2"); // <1>, +            BulkByScrollResponse bulkResponse =, +                    client.updateByQuery(request, RequestOptions.DEFAULT);, +            TimeValue throttledUntilMillis =, +                    bulkResponse.getStatus().getThrottledUntil(); // <12>, +            List<ScrollableHitSource.SearchFailure> searchFailures =, +                    bulkResponse.getSearchFailures(); // <13>, +            List<BulkItemResponse.Failure> bulkFailures =, +                    bulkResponse.getBulkFailures(); // <14>, +            ActionListener<BulkByScrollResponse> listener;, +            listener = new ActionListener<BulkByScrollResponse>() {, +            DeleteByQueryRequest request =, +                    new DeleteByQueryRequest("source1", "source2"); // <1>, +            BulkByScrollResponse bulkResponse =, +                    client.deleteByQuery(request, RequestOptions.DEFAULT);, +            TimeValue throttledUntilMillis =, +                    bulkResponse.getStatus().getThrottledUntil(); // <11>, +            List<ScrollableHitSource.SearchFailure> searchFailures =, +                    bulkResponse.getSearchFailures(); // <12>, +            List<BulkItemResponse.Failure> bulkFailures =, +                    bulkResponse.getBulkFailures(); // <13>, +            ActionListener<BulkByScrollResponse> listener;, +            listener = new ActionListener<BulkByScrollResponse>() {, +                public void afterBulk(long executionId, BulkRequest request,, +                        Throwable failure) {, +                    (request, bulkListener) ->, +                        client.bulkAsync(request, RequestOptions.DEFAULT, bulkListener),, +                public void afterBulk(long executionId, BulkRequest request,, +                        Throwable failure) {, +                    (request, bulkListener) ->, +                        client.bulkAsync(request, RequestOptions.DEFAULT, bulkListener),, +                    listener);, +        TermVectorsResponse response =, +                client.termvectors(request, RequestOptions.DEFAULT);, +            // tag::term-vectors-term-vectors, +            for (TermVectorsResponse.TermVector tv : response.getTermVectorsList()) {, +                long sumTotalTermFreq =, +                        tv.getFieldStatistics().getSumTotalTermFreq(); // <3>, +                    List<TermVectorsResponse.TermVector.Term> terms =, +                            tv.getTerms(); // <5>, +                            List<TermVectorsResponse.TermVector.Token> tokens =, +                                    term.getTokens(); // <11>, +        }, +        ActionListener<TermVectorsResponse> listener;, +        listener = new ActionListener<TermVectorsResponse>() {, +            ActionListener<MultiGetResponse> listener;, +            listener = new ActionListener<MultiGetResponse>() {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                switch (bulkItemResponse.getOpType()) {, +                case INDEX:    // <3>, +                case CREATE:, +                    break;, +                case UPDATE:   // <4>, +                    break;, +                case DELETE:   // <5>, +                    BulkItemResponse.Failure failure =, +                            bulkItemResponse.getFailure(); // <2>, +                    "https", "localhost", 9002, null,, +                    new BytesArray(new MatchAllQueryBuilder().toString()),, +                    "user", "pass", Collections.emptyMap(),, +                    new TimeValue(100, TimeUnit.MILLISECONDS),, +            BulkByScrollResponse bulkResponse =, +                    client.reindex(request, RequestOptions.DEFAULT);, +            TimeValue throttledUntilMillis =]