[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/BinaryPipe.java, +        return left.supportedByAggsOnlyQuery() || right.supportedByAggsOnlyQuery();, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/BinaryPipe.java, +        return left.supportedByAggsOnlyQuery() || right.supportedByAggsOnlyQuery();, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/ConstantInput.java, +        return false;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/BinaryPipe.java, +        return left.supportedByAggsOnlyQuery() || right.supportedByAggsOnlyQuery();, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/ConstantInput.java, +        return false;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +import org.elasticsearch.xpack.sql.plan.logical.EsRelation;, +                if (values.size() == p.projections().size() && !(p.child() instanceof EsRelation)) {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/BinaryPipe.java, +        return left.supportedByAggsOnlyQuery() || right.supportedByAggsOnlyQuery();, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/ConstantInput.java, +        return false;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +import org.elasticsearch.xpack.sql.plan.logical.EsRelation;, +                if (values.size() == p.projections().size() && !(p.child() instanceof EsRelation)) {, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/BinaryPipesTests.java, +        assertTrue(new DummyBinaryPipe(unsupported, supported).supportedByAggsOnlyQuery());, +        assertTrue(new DummyBinaryPipe(supported, unsupported).supportedByAggsOnlyQuery());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/BinaryPipe.java, +        return left.supportedByAggsOnlyQuery() || right.supportedByAggsOnlyQuery();, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/ConstantInput.java, +        return false;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +import org.elasticsearch.xpack.sql.plan.logical.EsRelation;, +                if (values.size() == p.projections().size() && !(p.child() instanceof EsRelation)) {, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/BinaryPipesTests.java, +        assertTrue(new DummyBinaryPipe(unsupported, supported).supportedByAggsOnlyQuery());, +        assertTrue(new DummyBinaryPipe(supported, unsupported).supportedByAggsOnlyQuery());, +++ b/x-pack/qa/sql/src/main/resources/select.sql-spec, +//, +// SELECT constant literals with FROM, +//, +, +constantWithLimit, +SELECT 3 FROM "test_emp" LIMIT 5;, +constantAndColumnWithLimit, +SELECT 3, first_name, last_name FROM "test_emp" ORDER BY emp_no LIMIT 5;, +constantComparisonWithLimit, +SELECT 1=1 AS bool FROM "test_emp" LIMIT 5;, +constantComparisonAndColumnWithLimit, +SELECT 1=1 AS bool, first_name, last_name FROM "test_emp" ORDER BY emp_no LIMIT 5;, +castWithLiteralWithFrom, +SELECT CAST(1 AS INT) AS constant FROM "test_emp" LIMIT 5;, +castWithLiteralAndColumnWithFrom, +SELECT CAST((CAST(languages AS BIT) OR CAST(1 AS BIT)) AS INT) AS bool FROM test_emp LIMIT 5;, +castWithColumnAndLiteralCombinedAndSelectColumnWithFrom, +SELECT CAST((CAST(languages AS BIT) OR CAST(1 AS BIT)) AS INT) AS bool, languages FROM test_emp ORDER BY languages LIMIT 5;]