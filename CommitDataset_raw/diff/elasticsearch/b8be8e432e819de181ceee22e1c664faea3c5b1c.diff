[+++ b/src/main/java/org/elasticsearch/common/joda/DateMathParser.java, +import java.util.concurrent.Callable;, +    public long parse(String text, Callable<Long> now) {, +    // Note: we take a callable here for the timestamp in order to be able to figure out, +    // if it has been used. For instance, the query cache does not cache queries that make, +    // use of `now`., +    public long parse(String text, Callable<Long> now, boolean roundUp, DateTimeZone timeZone) {, +            try {, +                time = now.call();, +            } catch (Exception e) {, +                throw new ElasticsearchParseException("Could not read the current timestamp", e);, +            }, +++ b/src/main/java/org/elasticsearch/common/joda/DateMathParser.java, +import java.util.concurrent.Callable;, +    public long parse(String text, Callable<Long> now) {, +    // Note: we take a callable here for the timestamp in order to be able to figure out, +    // if it has been used. For instance, the query cache does not cache queries that make, +    // use of `now`., +    public long parse(String text, Callable<Long> now, boolean roundUp, DateTimeZone timeZone) {, +            try {, +                time = now.call();, +            } catch (Exception e) {, +                throw new ElasticsearchParseException("Could not read the current timestamp", e);, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +import java.util.concurrent.Callable;, +    private static Callable<Long> now() {, +        return new Callable<Long>() {, +            @Override, +            public Long call() {, +                final SearchContext context = SearchContext.current();, +                return context != null, +                    ? context.nowInMillis(), +                    : System.currentTimeMillis();, +            }, +        };, +    }, +, +        long iValue = dateMathParser.parse(value, now());, +        return dateParser.parse(value, now(), inclusive, zone);, +++ b/src/main/java/org/elasticsearch/common/joda/DateMathParser.java, +import java.util.concurrent.Callable;, +    public long parse(String text, Callable<Long> now) {, +    // Note: we take a callable here for the timestamp in order to be able to figure out, +    // if it has been used. For instance, the query cache does not cache queries that make, +    // use of `now`., +    public long parse(String text, Callable<Long> now, boolean roundUp, DateTimeZone timeZone) {, +            try {, +                time = now.call();, +            } catch (Exception e) {, +                throw new ElasticsearchParseException("Could not read the current timestamp", e);, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +import java.util.concurrent.Callable;, +    private static Callable<Long> now() {, +        return new Callable<Long>() {, +            @Override, +            public Long call() {, +                final SearchContext context = SearchContext.current();, +                return context != null, +                    ? context.nowInMillis(), +                    : System.currentTimeMillis();, +            }, +        };, +    }, +, +        long iValue = dateMathParser.parse(value, now());, +        return dateParser.parse(value, now(), inclusive, zone);, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueParser.java, +import java.util.concurrent.Callable;, +        public long parseLong(String value, final SearchContext searchContext) {, +            final Callable<Long> now = new Callable<Long>() {, +                @Override, +                public Long call() throws Exception {, +                    return searchContext.nowInMillis();, +                }, +            };, +            return parser.parse(value, now);, +++ b/src/main/java/org/elasticsearch/common/joda/DateMathParser.java, +import java.util.concurrent.Callable;, +    public long parse(String text, Callable<Long> now) {, +    // Note: we take a callable here for the timestamp in order to be able to figure out, +    // if it has been used. For instance, the query cache does not cache queries that make, +    // use of `now`., +    public long parse(String text, Callable<Long> now, boolean roundUp, DateTimeZone timeZone) {, +            try {, +                time = now.call();, +            } catch (Exception e) {, +                throw new ElasticsearchParseException("Could not read the current timestamp", e);, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +import java.util.concurrent.Callable;, +    private static Callable<Long> now() {, +        return new Callable<Long>() {, +            @Override, +            public Long call() {, +                final SearchContext context = SearchContext.current();, +                return context != null, +                    ? context.nowInMillis(), +                    : System.currentTimeMillis();]