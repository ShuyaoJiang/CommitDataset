[+++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +     * Handle action response. This response may constitute a failure or a, +     * success but it is up to the listener to make that decision., +     * A failure caused by an exception at some phase of the task., +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +     * Handle action response. This response may constitute a failure or a, +     * success but it is up to the listener to make that decision., +     * A failure caused by an exception at some phase of the task., +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.xcontent.ToXContent;, +    public static class Failure implements Writeable<Failure>, ToXContent {, +        static final String INDEX_FIELD = "index";, +        static final String TYPE_FIELD = "type";, +        static final String ID_FIELD = "id";, +        static final String CAUSE_FIELD = "cause";, +        static final String STATUS_FIELD = "status";, +, +        public static final Failure PROTOTYPE = new Failure(null, null, null, null);, +, +        /**, +         * The actual cause of the failure., +         */, +, +        @Override, +        public Failure readFrom(StreamInput in) throws IOException {, +            return new Failure(in.readString(), in.readString(), in.readOptionalString(), in.readThrowable());, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeString(getIndex());, +            out.writeString(getType());, +            out.writeOptionalString(getId());, +            out.writeThrowable(getCause());, +        }, +, +        @Override, +        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +            builder.field(INDEX_FIELD, index);, +            builder.field(TYPE_FIELD, type);, +            if (id != null) {, +                builder.field(ID_FIELD, id);, +            }, +            builder.startObject(CAUSE_FIELD);, +            ElasticsearchException.toXContent(builder, params, cause);, +            builder.endObject();, +            builder.field(STATUS_FIELD, status.getStatus());, +            return builder;, +        }, +            failure = Failure.PROTOTYPE.readFrom(in);, +            failure.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +     * Handle action response. This response may constitute a failure or a, +     * success but it is up to the listener to make that decision., +     * A failure caused by an exception at some phase of the task., +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.xcontent.ToXContent;, +    public static class Failure implements Writeable<Failure>, ToXContent {, +        static final String INDEX_FIELD = "index";, +        static final String TYPE_FIELD = "type";, +        static final String ID_FIELD = "id";, +        static final String CAUSE_FIELD = "cause";, +        static final String STATUS_FIELD = "status";, +, +        public static final Failure PROTOTYPE = new Failure(null, null, null, null);, +, +        /**, +         * The actual cause of the failure., +         */, +, +        @Override, +        public Failure readFrom(StreamInput in) throws IOException {, +            return new Failure(in.readString(), in.readString(), in.readOptionalString(), in.readThrowable());, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeString(getIndex());, +            out.writeString(getType());, +            out.writeOptionalString(getId());, +            out.writeThrowable(getCause());, +        }, +, +        @Override, +        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +            builder.field(INDEX_FIELD, index);, +            builder.field(TYPE_FIELD, type);, +            if (id != null) {, +                builder.field(ID_FIELD, id);, +            }, +            builder.startObject(CAUSE_FIELD);, +            ElasticsearchException.toXContent(builder, params, cause);, +            builder.endObject();, +            builder.field(STATUS_FIELD, status.getStatus());, +            return builder;, +        }, +            failure = Failure.PROTOTYPE.readFrom(in);, +            failure.writeTo(out);]