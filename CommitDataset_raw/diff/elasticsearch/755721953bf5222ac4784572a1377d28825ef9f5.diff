[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalOrder.java, +    private static final byte TERM_DESC_ID = 2;, +    private static final byte TERM_ASC_ID = 3;, +    public static boolean isCountOrder(Terms.Order order) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalOrder.java, +    private static final byte TERM_DESC_ID = 2;, +    private static final byte TERM_ASC_ID = 3;, +    public static boolean isCountOrder(Terms.Order order) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalTerms.java, +            } else if (InternalOrder.isCountOrder(this.order)) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalOrder.java, +    private static final byte TERM_DESC_ID = 2;, +    private static final byte TERM_ASC_ID = 3;, +    public static boolean isCountOrder(Terms.Order order) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalTerms.java, +            } else if (InternalOrder.isCountOrder(this.order)) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/Terms.java, +         * @return a bucket ordering strategy that sorts buckets by their document counts (descending), +        public static Order count() {, +            return InternalOrder.COUNT_DESC;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalOrder.java, +    private static final byte TERM_DESC_ID = 2;, +    private static final byte TERM_ASC_ID = 3;, +    public static boolean isCountOrder(Terms.Order order) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalTerms.java, +            } else if (InternalOrder.isCountOrder(this.order)) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/Terms.java, +         * @return a bucket ordering strategy that sorts buckets by their document counts (descending), +        public static Order count() {, +            return InternalOrder.COUNT_DESC;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregationBuilder.java, +    private Terms.Order order = Terms.Order.compound(Terms.Order.count(), Terms.Order.term(true));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalOrder.java, +    private static final byte TERM_DESC_ID = 2;, +    private static final byte TERM_ASC_ID = 3;, +    public static boolean isCountOrder(Terms.Order order) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalTerms.java, +            } else if (InternalOrder.isCountOrder(this.order)) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/Terms.java, +         * @return a bucket ordering strategy that sorts buckets by their document counts (descending), +        public static Order count() {, +            return InternalOrder.COUNT_DESC;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregationBuilder.java, +    private Terms.Order order = Terms.Order.compound(Terms.Order.count(), Terms.Order.term(true));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsParser.java, +        if (token == Token.VALUE_STRING) {, +                if ("_count".equals(parser.text())) {, +                    otherOptions.put(TermsAggregationBuilder.ORDER_FIELD,, +                        Collections.singletonList(new OrderElement(parser.text(), false)));, +                    return true;, +                }, +            }, +            return false;, +        } else if (token == XContentParser.Token.START_OBJECT) {, +            if (parseFieldMatcher.match(currentFieldName, TermsAggregationBuilder.ORDER_FIELD)) {, +                otherOptions.put(TermsAggregationBuilder.ORDER_FIELD,, +                    Collections.singletonList(parseOrderParam(aggregationName, parser)));, +                    if ("_count".equals(orderKey)) {, +                        throw new ParsingException(parser.getTokenLocation(),, +                            "Sort by ascending _count is not supported in [" + aggregationName + "].");, +                    }, +            return Order.count();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalOrder.java, +    private static final byte TERM_DESC_ID = 2;, +    private static final byte TERM_ASC_ID = 3;, +    public static boolean isCountOrder(Terms.Order order) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalTerms.java, +            } else if (InternalOrder.isCountOrder(this.order)) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/Terms.java, +         * @return a bucket ordering strategy that sorts buckets by their document counts (descending), +        public static Order count() {, +            return InternalOrder.COUNT_DESC;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregationBuilder.java, +    private Terms.Order order = Terms.Order.compound(Terms.Order.count(), Terms.Order.term(true));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsParser.java, +        if (token == Token.VALUE_STRING) {, +                if ("_count".equals(parser.text())) {, +                    otherOptions.put(TermsAggregationBuilder.ORDER_FIELD,, +                        Collections.singletonList(new OrderElement(parser.text(), false)));, +                    return true;, +                }, +            }, +            return false;, +        } else if (token == XContentParser.Token.START_OBJECT) {, +            if (parseFieldMatcher.match(currentFieldName, TermsAggregationBuilder.ORDER_FIELD)) {, +                otherOptions.put(TermsAggregationBuilder.ORDER_FIELD,, +                    Collections.singletonList(parseOrderParam(aggregationName, parser)));, +                    if ("_count".equals(orderKey)) {, +                        throw new ParsingException(parser.getTokenLocation(),, +                            "Sort by ascending _count is not supported in [" + aggregationName + "].");, +                    }, +            return Order.count();, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/ShardSizeTermsIT.java, +                        .collectMode(randomFrom(SubAggCollectionMode.values())).order(Terms.Order.count())), +                        .collectMode(randomFrom(SubAggCollectionMode.values())).order(Terms.Order.count())), +                        .collectMode(randomFrom(SubAggCollectionMode.values())).shardSize(5).order(Terms.Order.count())), +                        .collectMode(randomFrom(SubAggCollectionMode.values())).shardSize(5).order(Terms.Order.count())), +                        .collectMode(randomFrom(SubAggCollectionMode.values())).order(Terms.Order.count())), +                        .collectMode(randomFrom(SubAggCollectionMode.values())).order(Terms.Order.count())), +                        .collectMode(randomFrom(SubAggCollectionMode.values())).shardSize(5).order(Terms.Order.count()))]