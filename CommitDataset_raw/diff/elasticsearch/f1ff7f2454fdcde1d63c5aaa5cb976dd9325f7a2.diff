[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +                        randomFunction()),                           // <2>, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +                        randomFunction()),                           // <2>, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/RandomScoreFunction.java, +import com.carrotsearch.hppc.BitMixer;, +, +    private final int originalSeed;, +    private final int saltedSeed;, +    private final IndexFieldData<?> fieldData;, +        this.saltedSeed = BitMixer.mix(seed, salt);, +        this.fieldData = uidFieldData;, +        final SortedBinaryDocValues values;, +        if (fieldData != null) {, +            AtomicFieldData leafData = fieldData.load(ctx);, +            values = leafData.getBytesValues();, +            if (values == null) throw new NullPointerException("failed to get fielddata");, +        } else {, +            values = null;, +        }, +                int hash;, +                if (values == null) {, +                    hash = BitMixer.mix(ctx.docBase + docId);, +                } else if (values.advanceExact(docId)) {, +                    hash = StringHelper.murmurhash3_x86_32(values.nextValue(), saltedSeed);, +                } else {, +                    // field has no value, +                    hash = saltedSeed;, +                String field = fieldData == null ? null : fieldData.getFieldName();, +                        "random score function (seed: " + originalSeed + ", field: " + field + ")");, +        return this.originalSeed == randomScoreFunction.originalSeed, +                && this.saltedSeed == randomScoreFunction.saltedSeed;, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +                        randomFunction()),                           // <2>, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/RandomScoreFunction.java, +import com.carrotsearch.hppc.BitMixer;, +, +    private final int originalSeed;, +    private final int saltedSeed;, +    private final IndexFieldData<?> fieldData;, +        this.saltedSeed = BitMixer.mix(seed, salt);, +        this.fieldData = uidFieldData;, +        final SortedBinaryDocValues values;, +        if (fieldData != null) {, +            AtomicFieldData leafData = fieldData.load(ctx);, +            values = leafData.getBytesValues();, +            if (values == null) throw new NullPointerException("failed to get fielddata");, +        } else {, +            values = null;, +        }, +                int hash;, +                if (values == null) {, +                    hash = BitMixer.mix(ctx.docBase + docId);, +                } else if (values.advanceExact(docId)) {, +                    hash = StringHelper.murmurhash3_x86_32(values.nextValue(), saltedSeed);, +                } else {, +                    // field has no value, +                    hash = saltedSeed;, +                String field = fieldData == null ? null : fieldData.getFieldName();, +                        "random score function (seed: " + originalSeed + ", field: " + field + ")");, +        return this.originalSeed == randomScoreFunction.originalSeed, +                && this.saltedSeed == randomScoreFunction.saltedSeed;, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public Index index() {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +                        randomFunction()),                           // <2>, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/RandomScoreFunction.java, +import com.carrotsearch.hppc.BitMixer;, +, +    private final int originalSeed;, +    private final int saltedSeed;, +    private final IndexFieldData<?> fieldData;, +        this.saltedSeed = BitMixer.mix(seed, salt);, +        this.fieldData = uidFieldData;, +        final SortedBinaryDocValues values;, +        if (fieldData != null) {, +            AtomicFieldData leafData = fieldData.load(ctx);, +            values = leafData.getBytesValues();, +            if (values == null) throw new NullPointerException("failed to get fielddata");, +        } else {, +            values = null;, +        }, +                int hash;, +                if (values == null) {, +                    hash = BitMixer.mix(ctx.docBase + docId);, +                } else if (values.advanceExact(docId)) {, +                    hash = StringHelper.murmurhash3_x86_32(values.nextValue(), saltedSeed);, +                } else {, +                    // field has no value, +                    hash = saltedSeed;, +                String field = fieldData == null ? null : fieldData.getFieldName();, +                        "random score function (seed: " + originalSeed + ", field: " + field + ")");, +        return this.originalSeed == randomScoreFunction.originalSeed, +                && this.saltedSeed == randomScoreFunction.saltedSeed;, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public Index index() {, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/RandomScoreFunctionBuilder.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;]