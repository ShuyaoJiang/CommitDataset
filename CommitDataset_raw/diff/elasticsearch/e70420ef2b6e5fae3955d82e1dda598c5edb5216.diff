[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.watcher.ResourceWatcherService;, +                    IndexingMemoryController.SHARD_MEMORY_INTERVAL_TIME_SETTING,, +                    ResourceWatcherService.ENABLED,, +                    ResourceWatcherService.RELOAD_INTERVAL_HIGH,, +                    ResourceWatcherService.RELOAD_INTERVAL_MEDIUM,, +                    ResourceWatcherService.RELOAD_INTERVAL_LOW, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.watcher.ResourceWatcherService;, +                    IndexingMemoryController.SHARD_MEMORY_INTERVAL_TIME_SETTING,, +                    ResourceWatcherService.ENABLED,, +                    ResourceWatcherService.RELOAD_INTERVAL_HIGH,, +                    ResourceWatcherService.RELOAD_INTERVAL_MEDIUM,, +                    ResourceWatcherService.RELOAD_INTERVAL_LOW, +++ b/core/src/main/java/org/elasticsearch/watcher/ResourceWatcherService.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Property;, +    public static final Setting<Boolean> ENABLED = Setting.boolSetting("resource.reload.enabled", true, Property.NodeScope);, +    public static final Setting<TimeValue> RELOAD_INTERVAL_HIGH =, +        Setting.timeSetting("resource.reload.interval.high", Frequency.HIGH.interval, Property.NodeScope);, +    public static final Setting<TimeValue> RELOAD_INTERVAL_MEDIUM = Setting.timeSetting("resource.reload.interval.medium",, +        Setting.timeSetting("resource.reload.interval", Frequency.MEDIUM.interval), Property.NodeScope);, +    public static final Setting<TimeValue> RELOAD_INTERVAL_LOW =, +        Setting.timeSetting("resource.reload.interval.low", Frequency.LOW.interval, Property.NodeScope);, +, +        this.enabled = ENABLED.get(settings);, +        TimeValue interval = RELOAD_INTERVAL_LOW.get(settings);, +        interval = RELOAD_INTERVAL_MEDIUM.get(settings);, +        interval = RELOAD_INTERVAL_HIGH.get(settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.watcher.ResourceWatcherService;, +                    IndexingMemoryController.SHARD_MEMORY_INTERVAL_TIME_SETTING,, +                    ResourceWatcherService.ENABLED,, +                    ResourceWatcherService.RELOAD_INTERVAL_HIGH,, +                    ResourceWatcherService.RELOAD_INTERVAL_MEDIUM,, +                    ResourceWatcherService.RELOAD_INTERVAL_LOW, +++ b/core/src/main/java/org/elasticsearch/watcher/ResourceWatcherService.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Property;, +    public static final Setting<Boolean> ENABLED = Setting.boolSetting("resource.reload.enabled", true, Property.NodeScope);, +    public static final Setting<TimeValue> RELOAD_INTERVAL_HIGH =, +        Setting.timeSetting("resource.reload.interval.high", Frequency.HIGH.interval, Property.NodeScope);, +    public static final Setting<TimeValue> RELOAD_INTERVAL_MEDIUM = Setting.timeSetting("resource.reload.interval.medium",, +        Setting.timeSetting("resource.reload.interval", Frequency.MEDIUM.interval), Property.NodeScope);, +    public static final Setting<TimeValue> RELOAD_INTERVAL_LOW =, +        Setting.timeSetting("resource.reload.interval.low", Frequency.LOW.interval, Property.NodeScope);, +, +        this.enabled = ENABLED.get(settings);, +        TimeValue interval = RELOAD_INTERVAL_LOW.get(settings);, +        interval = RELOAD_INTERVAL_MEDIUM.get(settings);, +        interval = RELOAD_INTERVAL_HIGH.get(settings);, +++ b/docs/reference/migration/migrate_5_0/index-apis.asciidoc, +stats response. This object is called `cpu` and includes percent` and]