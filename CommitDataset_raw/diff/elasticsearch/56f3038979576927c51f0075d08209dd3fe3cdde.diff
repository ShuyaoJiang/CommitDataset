[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameMessages.java, +    public static final String REST_PUT_DATA_FRAME_FAILED_TO_DEDUCE_DEST_MAPPINGS = "Failed to deduce dest mappings";, +    public static final String REST_PUT_DATA_FRAME_FAILED_TO_CREATE_DEST_INDEX = "Failed to create dest index";, +    public static final String REST_PUT_DATA_FRAME_DEST_INDEX_ALREADY_EXISTS = "dest index [{0}] already exists";, +    public static final String REST_PUT_DATA_FRAME_SOURCE_INDEX_MISSING = "Source index [{0}] does not exist";, +    public static final String DATA_FRAME_CONFIG_INVALID = "Data frame transform configuration is invalid [{0}]";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameMessages.java, +    public static final String REST_PUT_DATA_FRAME_FAILED_TO_DEDUCE_DEST_MAPPINGS = "Failed to deduce dest mappings";, +    public static final String REST_PUT_DATA_FRAME_FAILED_TO_CREATE_DEST_INDEX = "Failed to create dest index";, +    public static final String REST_PUT_DATA_FRAME_DEST_INDEX_ALREADY_EXISTS = "dest index [{0}] already exists";, +    public static final String REST_PUT_DATA_FRAME_SOURCE_INDEX_MISSING = "Source index [{0}] does not exist";, +    public static final String DATA_FRAME_CONFIG_INVALID = "Data frame transform configuration is invalid [{0}]";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/action/GetDataFrameTransformsAction.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionResponse;, +    public static class Request extends ActionRequest implements ToXContent {, +        public Request() {, +        }, +    public static class Response extends ActionResponse implements Writeable, ToXContentObject {, +            this.transformConfigurations = Collections.emptyList();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameMessages.java, +    public static final String REST_PUT_DATA_FRAME_FAILED_TO_DEDUCE_DEST_MAPPINGS = "Failed to deduce dest mappings";, +    public static final String REST_PUT_DATA_FRAME_FAILED_TO_CREATE_DEST_INDEX = "Failed to create dest index";, +    public static final String REST_PUT_DATA_FRAME_DEST_INDEX_ALREADY_EXISTS = "dest index [{0}] already exists";, +    public static final String REST_PUT_DATA_FRAME_SOURCE_INDEX_MISSING = "Source index [{0}] does not exist";, +    public static final String DATA_FRAME_CONFIG_INVALID = "Data frame transform configuration is invalid [{0}]";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/action/GetDataFrameTransformsAction.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionResponse;, +    public static class Request extends ActionRequest implements ToXContent {, +        public Request() {, +        }, +    public static class Response extends ActionResponse implements Writeable, ToXContentObject {, +            this.transformConfigurations = Collections.emptyList();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/action/StartDataFrameTransformAction.java, +import org.elasticsearch.action.support.master.AcknowledgedRequest;, +    public static class Request extends AcknowledgedRequest<Request> implements ToXContent {, +, +        public Request() {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameMessages.java, +    public static final String REST_PUT_DATA_FRAME_FAILED_TO_DEDUCE_DEST_MAPPINGS = "Failed to deduce dest mappings";, +    public static final String REST_PUT_DATA_FRAME_FAILED_TO_CREATE_DEST_INDEX = "Failed to create dest index";, +    public static final String REST_PUT_DATA_FRAME_DEST_INDEX_ALREADY_EXISTS = "dest index [{0}] already exists";, +    public static final String REST_PUT_DATA_FRAME_SOURCE_INDEX_MISSING = "Source index [{0}] does not exist";, +    public static final String DATA_FRAME_CONFIG_INVALID = "Data frame transform configuration is invalid [{0}]";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/action/GetDataFrameTransformsAction.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionResponse;, +    public static class Request extends ActionRequest implements ToXContent {, +        public Request() {, +        }, +    public static class Response extends ActionResponse implements Writeable, ToXContentObject {, +            this.transformConfigurations = Collections.emptyList();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/action/StartDataFrameTransformAction.java, +import org.elasticsearch.action.support.master.AcknowledgedRequest;, +    public static class Request extends AcknowledgedRequest<Request> implements ToXContent {, +, +        public Request() {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/action/StartDataFrameTransformTaskAction.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.core.dataframe.action;, +, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.ActionRequestBuilder;, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.support.tasks.BaseTasksRequest;, +import org.elasticsearch.action.support.tasks.BaseTasksResponse;, +import org.elasticsearch.client.ElasticsearchClient;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.ToXContentObject;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.xpack.core.dataframe.DataFrameField;, +import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;, +, +import java.io.IOException;, +import java.util.Collections;, +import java.util.Objects;, +, +public class StartDataFrameTransformTaskAction extends Action<StartDataFrameTransformTaskAction.Response> {, +, +    public static final StartDataFrameTransformTaskAction INSTANCE = new StartDataFrameTransformTaskAction();, +    public static final String NAME = "cluster:admin/data_frame/start_task";, +, +    private StartDataFrameTransformTaskAction() {, +        super(NAME);, +    }, +, +    @Override, +    public Response newResponse() {, +        return new Response();, +    }, +]