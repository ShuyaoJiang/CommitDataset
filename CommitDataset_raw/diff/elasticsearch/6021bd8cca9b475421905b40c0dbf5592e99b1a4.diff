[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;, +import org.elasticsearch.common.logging.support.LoggerMessageFormat;, +     * The message can be parameterized using {@code {}} as placeholders for the given, +     * arguments, +     *, +     * @param args the arguments for the message, +    public ElasticsearchException(String msg, Object... args) {, +        super(LoggerMessageFormat.format(msg, args));, +     * The message can be parameterized using {@code {}} as placeholders for the given, +     * arguments, +     *, +     * @param args  the arguments for the message, +    public ElasticsearchException(String msg, Throwable cause, Object... args) {, +        super(LoggerMessageFormat.format(msg, args), cause);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;, +import org.elasticsearch.common.logging.support.LoggerMessageFormat;, +     * The message can be parameterized using {@code {}} as placeholders for the given, +     * arguments, +     *, +     * @param args the arguments for the message, +    public ElasticsearchException(String msg, Object... args) {, +        super(LoggerMessageFormat.format(msg, args));, +     * The message can be parameterized using {@code {}} as placeholders for the given, +     * arguments, +     *, +     * @param args  the arguments for the message, +    public ElasticsearchException(String msg, Throwable cause, Object... args) {, +        super(LoggerMessageFormat.format(msg, args), cause);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchParseException.java, +    public ElasticsearchParseException(String msg, Object... args) {, +        super(msg, args);, +    public ElasticsearchParseException(String msg, Throwable cause, Object... args) {, +        super(msg, cause, args);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;, +import org.elasticsearch.common.logging.support.LoggerMessageFormat;, +     * The message can be parameterized using {@code {}} as placeholders for the given, +     * arguments, +     *, +     * @param args the arguments for the message, +    public ElasticsearchException(String msg, Object... args) {, +        super(LoggerMessageFormat.format(msg, args));, +     * The message can be parameterized using {@code {}} as placeholders for the given, +     * arguments, +     *, +     * @param args  the arguments for the message, +    public ElasticsearchException(String msg, Throwable cause, Object... args) {, +        super(LoggerMessageFormat.format(msg, args), cause);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchParseException.java, +    public ElasticsearchParseException(String msg, Object... args) {, +        super(msg, args);, +    public ElasticsearchParseException(String msg, Throwable cause, Object... args) {, +        super(msg, cause, args);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchTimeoutException.java, +    public ElasticsearchTimeoutException(String message, Object... args) {, +    public ElasticsearchTimeoutException(String message, Throwable cause, Object... args) {, +        super(message, cause, args);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;, +import org.elasticsearch.common.logging.support.LoggerMessageFormat;, +     * The message can be parameterized using {@code {}} as placeholders for the given, +     * arguments, +     *, +     * @param args the arguments for the message, +    public ElasticsearchException(String msg, Object... args) {, +        super(LoggerMessageFormat.format(msg, args));, +     * The message can be parameterized using {@code {}} as placeholders for the given, +     * arguments, +     *, +     * @param args  the arguments for the message, +    public ElasticsearchException(String msg, Throwable cause, Object... args) {, +        super(LoggerMessageFormat.format(msg, args), cause);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchParseException.java, +    public ElasticsearchParseException(String msg, Object... args) {, +        super(msg, args);, +    public ElasticsearchParseException(String msg, Throwable cause, Object... args) {, +        super(msg, cause, args);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchTimeoutException.java, +    public ElasticsearchTimeoutException(String message, Object... args) {, +    public ElasticsearchTimeoutException(String message, Throwable cause, Object... args) {, +        super(message, cause, args);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/reroute/ClusterRerouteRequest.java, +                        throw new ElasticsearchParseException("failed to parse reroute request, got start array with wrong field name [{}]", currentFieldName);, +                        throw new ElasticsearchParseException("failed to parse reroute request, got value with wrong field name [{}]", currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;, +import org.elasticsearch.common.logging.support.LoggerMessageFormat;, +     * The message can be parameterized using {@code {}} as placeholders for the given, +     * arguments, +     *, +     * @param args the arguments for the message, +    public ElasticsearchException(String msg, Object... args) {, +        super(LoggerMessageFormat.format(msg, args));, +     * The message can be parameterized using {@code {}} as placeholders for the given, +     * arguments, +     *, +     * @param args  the arguments for the message, +    public ElasticsearchException(String msg, Throwable cause, Object... args) {]