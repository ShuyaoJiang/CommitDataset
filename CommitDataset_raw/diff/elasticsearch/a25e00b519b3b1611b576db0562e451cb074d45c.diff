[+++ b/README.md, +## Licensing Test Plan [PRIVATE], +, +see [Licensing Test Plan] (https://github.com/elasticsearch/elasticsearch-license/blob/es_integration/docs/private/license-plugin-guarantees.asciidoc), +++ b/README.md, +## Licensing Test Plan [PRIVATE], +, +see [Licensing Test Plan] (https://github.com/elasticsearch/elasticsearch-license/blob/es_integration/docs/private/license-plugin-guarantees.asciidoc), +++ /dev/null, +++ b/README.md, +## Licensing Test Plan [PRIVATE], +, +see [Licensing Test Plan] (https://github.com/elasticsearch/elasticsearch-license/blob/es_integration/docs/private/license-plugin-guarantees.asciidoc), +++ /dev/null, +++ b/src/test/java/org/elasticsearch/license/plugin/LicensesTransportTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.license.plugin;, +, +import org.elasticsearch.action.ActionFuture;, +import org.elasticsearch.common.collect.Sets;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.license.TestUtils;, +import org.elasticsearch.license.core.ESLicense;, +import org.elasticsearch.license.core.ESLicenses;, +import org.elasticsearch.license.plugin.action.delete.DeleteLicenseRequest;, +import org.elasticsearch.license.plugin.action.delete.DeleteLicenseRequestBuilder;, +import org.elasticsearch.license.plugin.action.delete.DeleteLicenseResponse;, +import org.elasticsearch.license.plugin.action.get.GetLicenseRequestBuilder;, +import org.elasticsearch.license.plugin.action.get.GetLicenseResponse;, +import org.elasticsearch.license.plugin.action.put.PutLicenseRequestBuilder;, +import org.elasticsearch.license.plugin.action.put.PutLicenseResponse;, +import org.elasticsearch.license.plugin.core.LicensesStatus;, +import org.junit.After;, +import org.junit.Test;, +, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope.TEST;, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.hamcrest.CoreMatchers.notNullValue;, +, +@ClusterScope(scope = TEST, numDataNodes = 10), +public class LicensesTransportTests extends AbstractLicensesIntegrationTests {, +, +    @After, +    public void beforeTest() throws Exception {, +        wipeAllLicenses();, +    }, +, +    @Test, +    public void testEmptyGetLicense() throws Exception {, +        final ActionFuture<GetLicenseResponse> getLicenseFuture = new GetLicenseRequestBuilder(client().admin().cluster()).execute();, +        final GetLicenseResponse getLicenseResponse = getLicenseFuture.get();, +        assertThat("expected 0 licenses; but got: " + getLicenseResponse.licenses().size(), getLicenseResponse.licenses().size(), equalTo(0));, +    }, +, +    @Test, +    public void testPutLicense() throws Exception {, +        ESLicense signedLicense = generateSignedLicense("shield", TimeValue.timeValueMinutes(2));, +        List<ESLicense> actualLicenses = Collections.singletonList(signedLicense);, +, +        // put license, +        PutLicenseRequestBuilder putLicenseRequestBuilder = new PutLicenseRequestBuilder(client().admin().cluster()), +                .setLicense(actualLicenses);, +        PutLicenseResponse putLicenseResponse = putLicenseRequestBuilder.get();, +        assertThat(putLicenseResponse.isAcknowledged(), equalTo(true));, +        assertThat(putLicenseResponse.status(), equalTo(LicensesStatus.VALID));, +, +        // get license, +        GetLicenseResponse getLicenseResponse = new GetLicenseRequestBuilder(client().admin().cluster()).get();, +        assertThat(getLicenseResponse.licenses(), notNullValue());, +        assertThat(getLicenseResponse.licenses().size(), equalTo(1));, +, +        // check license, +        TestUtils.isSame(signedLicense, getLicenseResponse.licenses().get(0));, +    }, +, +    @Test, +    public void testPutLicenseFromString() throws Exception {, +        ESLicense signedLicense = generateSignedLicense("shield", TimeValue.timeValueMinutes(2));, +        String licenseString = TestUtils.dumpLicense(signedLicense);, +, +        // put license source, +        PutLicenseRequestBuilder putLicenseRequestBuilder = new PutLicenseRequestBuilder(client().admin().cluster()), +                .setLicense(licenseString);, +        PutLicenseResponse putLicenseResponse = putLicenseRequestBuilder.get();, +        assertThat(putLicenseResponse.isAcknowledged(), equalTo(true));, +        assertThat(putLicenseResponse.status(), equalTo(LicensesStatus.VALID));, +, +        // get license, +        GetLicenseResponse getLicenseResponse = new GetLicenseRequestBuilder(client().admin().cluster()).get();, +        assertThat(getLicenseResponse.licenses(), notNullValue());, +        assertThat(getLicenseResponse.licenses().size(), equalTo(1));]