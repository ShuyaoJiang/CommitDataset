[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/common/Numbers.java, +        return (bytes.bytes[bytes.offset] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int high = (bytes.bytes[bytes.offset + 0] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int low = (bytes.bytes[bytes.offset + 4] << 24) | ((bytes.bytes[bytes.offset + 5] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 6] & 0xff) << 8) | (bytes.bytes[bytes.offset + 7] & 0xff);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/common/Numbers.java, +        return (bytes.bytes[bytes.offset] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int high = (bytes.bytes[bytes.offset + 0] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int low = (bytes.bytes[bytes.offset + 4] << 24) | ((bytes.bytes[bytes.offset + 5] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 6] & 0xff) << 8) | (bytes.bytes[bytes.offset + 7] & 0xff);, +++ b/server/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +        this.bufferSizeInBytes = (int) settings.getAsBytesSize("repositories.fs.buffer_size",, +            new ByteSizeValue(100, ByteSizeUnit.KB)).getBytes();, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/common/Numbers.java, +        return (bytes.bytes[bytes.offset] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int high = (bytes.bytes[bytes.offset + 0] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int low = (bytes.bytes[bytes.offset + 4] << 24) | ((bytes.bytes[bytes.offset + 5] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 6] & 0xff) << 8) | (bytes.bytes[bytes.offset + 7] & 0xff);, +++ b/server/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +        this.bufferSizeInBytes = (int) settings.getAsBytesSize("repositories.fs.buffer_size",, +            new ByteSizeValue(100, ByteSizeUnit.KB)).getBytes();, +++ b/server/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +            throw new IllegalArgumentException("can't slice a buffer with length [" + this.length +, +                "], with slice parameters from [" + from + "], length [" + length + "]");, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/common/Numbers.java, +        return (bytes.bytes[bytes.offset] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int high = (bytes.bytes[bytes.offset + 0] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int low = (bytes.bytes[bytes.offset + 4] << 24) | ((bytes.bytes[bytes.offset + 5] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 6] & 0xff) << 8) | (bytes.bytes[bytes.offset + 7] & 0xff);, +++ b/server/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +        this.bufferSizeInBytes = (int) settings.getAsBytesSize("repositories.fs.buffer_size",, +            new ByteSizeValue(100, ByteSizeUnit.KB)).getBytes();, +++ b/server/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +            throw new IllegalArgumentException("can't slice a buffer with length [" + this.length +, +                "], with slice parameters from [" + from + "], length [" + length + "]");, +++ b/server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +            throw new IllegalArgumentException("can't slice a buffer with length [" + length() +, +                "], with slice parameters from [" + from + "], length [" + length + "]");, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/common/Numbers.java, +        return (bytes.bytes[bytes.offset] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int high = (bytes.bytes[bytes.offset + 0] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int low = (bytes.bytes[bytes.offset + 4] << 24) | ((bytes.bytes[bytes.offset + 5] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 6] & 0xff) << 8) | (bytes.bytes[bytes.offset + 7] & 0xff);, +++ b/server/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +        this.bufferSizeInBytes = (int) settings.getAsBytesSize("repositories.fs.buffer_size",, +            new ByteSizeValue(100, ByteSizeUnit.KB)).getBytes();, +++ b/server/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +            throw new IllegalArgumentException("can't slice a buffer with length [" + this.length +, +                "], with slice parameters from [" + from + "], length [" + length + "]");, +++ b/server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +            throw new IllegalArgumentException("can't slice a buffer with length [" + length() +, +                "], with slice parameters from [" + from + "], length [" + length + "]");, +++ b/server/src/main/java/org/elasticsearch/common/cache/Cache.java, +            removalListener.onRemoval(new RemovalNotification<>(tuple.v2().key, tuple.v2().value,, +                RemovalNotification.RemovalReason.REPLACED));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/common/Numbers.java, +        return (bytes.bytes[bytes.offset] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int high = (bytes.bytes[bytes.offset + 0] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int low = (bytes.bytes[bytes.offset + 4] << 24) | ((bytes.bytes[bytes.offset + 5] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 6] & 0xff) << 8) | (bytes.bytes[bytes.offset + 7] & 0xff);, +++ b/server/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +        this.bufferSizeInBytes = (int) settings.getAsBytesSize("repositories.fs.buffer_size",, +            new ByteSizeValue(100, ByteSizeUnit.KB)).getBytes();, +++ b/server/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +            throw new IllegalArgumentException("can't slice a buffer with length [" + this.length +, +                "], with slice parameters from [" + from + "], length [" + length + "]");, +++ b/server/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +            throw new IllegalArgumentException("can't slice a buffer with length [" + length() +, +                "], with slice parameters from [" + from + "], length [" + length + "]");, +++ b/server/src/main/java/org/elasticsearch/common/cache/Cache.java, +            removalListener.onRemoval(new RemovalNotification<>(tuple.v2().key, tuple.v2().value,, +                RemovalNotification.RemovalReason.REPLACED));, +++ b/server/src/main/java/org/elasticsearch/common/collect/ImmutableOpenIntMap.java, + * Can be constructed using a {@link #builder()}, or using {@link #builder(org.elasticsearch.common.collect.ImmutableOpenIntMap)}, + * (which is an optimized option to copy over existing content and modify it)., +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/common/Numbers.java, +        return (bytes.bytes[bytes.offset] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);, +        int high = (bytes.bytes[bytes.offset + 0] << 24) | ((bytes.bytes[bytes.offset + 1] & 0xff) << 16) |, +            ((bytes.bytes[bytes.offset + 2] & 0xff) << 8) | (bytes.bytes[bytes.offset + 3] & 0xff);]