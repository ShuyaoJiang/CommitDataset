[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +        String endpoint = endpoint(rankEvalRequest.indices(), Strings.EMPTY_ARRAY, "_rank_eval");, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +        String endpoint = endpoint(rankEvalRequest.indices(), Strings.EMPTY_ARRAY, "_rank_eval");, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalRequest.java, +import org.elasticsearch.action.IndicesRequest;, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.support.IndicesOptions;, +import java.util.Arrays;, +public class RankEvalRequest extends ActionRequest implements IndicesRequest.Replaceable {, +, +    private IndicesOptions indicesOptions  = SearchRequest.DEFAULT_INDICES_OPTIONS;, +        this.rankingEvaluationSpec = Objects.requireNonNull(rankingEvaluationSpec, "ranking evaluation specification must not be null");, +        indices(indices);, +    }, +, +    RankEvalRequest(StreamInput in) throws IOException {, +        super.readFrom(in);, +        rankingEvaluationSpec = new RankEvalSpec(in);, +        if (in.getVersion().onOrAfter(Version.V_6_3_0)) {, +            indices = in.readStringArray();, +            indicesOptions = IndicesOptions.readIndicesOptions(in);, +        } else {, +            // readStringArray uses readVInt for size, we used readInt in 6.2, +            int indicesSize = in.readInt();, +            String[] indices = new String[indicesSize];, +            for (int i = 0; i < indicesSize; i++) {, +                indices[i] = in.readString();, +            }, +            // no indices options yet, +        }, +    @Override, +    public RankEvalRequest indices(String... indices) {, +    @Override, +    public String[] indices() {, +    public IndicesOptions indicesOptions() {, +        return indicesOptions;, +    }, +, +    public void indicesOptions(IndicesOptions indicesOptions) {, +        this.indicesOptions = Objects.requireNonNull(indicesOptions, "indicesOptions must not be null");, +    }, +, +    @Override, +        throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable");, +            indicesOptions.writeIndicesOptions(out);, +            // no indices options yet, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +        RankEvalRequest that = (RankEvalRequest) o;, +        return Objects.equals(indicesOptions, that.indicesOptions) &&, +                Arrays.equals(indices, that.indices) &&, +                Objects.equals(rankingEvaluationSpec, that.rankingEvaluationSpec);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(indicesOptions, Arrays.hashCode(indices), rankingEvaluationSpec);, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +        String endpoint = endpoint(rankEvalRequest.indices(), Strings.EMPTY_ARRAY, "_rank_eval");, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalRequest.java, +import org.elasticsearch.action.IndicesRequest;, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.support.IndicesOptions;, +import java.util.Arrays;, +public class RankEvalRequest extends ActionRequest implements IndicesRequest.Replaceable {, +, +    private IndicesOptions indicesOptions  = SearchRequest.DEFAULT_INDICES_OPTIONS;, +        this.rankingEvaluationSpec = Objects.requireNonNull(rankingEvaluationSpec, "ranking evaluation specification must not be null");, +        indices(indices);, +    }, +, +    RankEvalRequest(StreamInput in) throws IOException {, +        super.readFrom(in);, +        rankingEvaluationSpec = new RankEvalSpec(in);, +        if (in.getVersion().onOrAfter(Version.V_6_3_0)) {, +            indices = in.readStringArray();, +            indicesOptions = IndicesOptions.readIndicesOptions(in);, +        } else {, +            // readStringArray uses readVInt for size, we used readInt in 6.2, +            int indicesSize = in.readInt();, +            String[] indices = new String[indicesSize];, +            for (int i = 0; i < indicesSize; i++) {, +                indices[i] = in.readString();, +            }, +            // no indices options yet, +        }, +    @Override, +    public RankEvalRequest indices(String... indices) {, +    @Override, +    public String[] indices() {, +    public IndicesOptions indicesOptions() {]