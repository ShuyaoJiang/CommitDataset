[+++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +        this.settingUpdaters.add(setting.newUpdater(consumer, logger, validator));, +        this.settingUpdaters.add(Setting.compoundUpdater(consumer, a, b, logger));, +                return entry.getValue();, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +        this.settingUpdaters.add(setting.newUpdater(consumer, logger, validator));, +        this.settingUpdaters.add(Setting.compoundUpdater(consumer, a, b, logger));, +                return entry.getValue();, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import java.util.Map;, +    public ClusterSettings(Settings settings, Set<Setting<?>> settingsSet) {, +        super(settings, settingsSet, Setting.Scope.CLUSTER);, +    public synchronized Settings applySettings(Settings newSettings) {, +        Settings settings = super.applySettings(newSettings);, +        try {, +            for (Map.Entry<String, String> entry : settings.getAsMap().entrySet()) {, +                if (entry.getKey().startsWith("logger.")) {, +                    String component = entry.getKey().substring("logger.".length());, +                        ESLoggerFactory.getRootLogger().setLevel(entry.getValue());, +                        ESLoggerFactory.getLogger(component).setLevel(entry.getValue());, +        } catch (Exception e) {, +            logger.warn("failed to refresh settings for [{}]", e, "logger");, +        }, +        return settings;, +    }, +, +    @Override, +    public boolean hasDynamicSetting(String key) {, +        return isLoggerSetting(key) || super.hasDynamicSetting(key);, +    }, +, +    /**, +     * Returns <code>true</code> if the settings is a logger setting., +     */, +    public boolean isLoggerSetting(String key) {, +        return key.startsWith("logger.");, +    }, +, +        EsExecutors.PROCESSORS_SETTING)));, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +        this.settingUpdaters.add(setting.newUpdater(consumer, logger, validator));, +        this.settingUpdaters.add(Setting.compoundUpdater(consumer, a, b, logger));, +                return entry.getValue();, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import java.util.Map;, +    public ClusterSettings(Settings settings, Set<Setting<?>> settingsSet) {, +        super(settings, settingsSet, Setting.Scope.CLUSTER);, +    public synchronized Settings applySettings(Settings newSettings) {, +        Settings settings = super.applySettings(newSettings);, +        try {, +            for (Map.Entry<String, String> entry : settings.getAsMap().entrySet()) {, +                if (entry.getKey().startsWith("logger.")) {, +                    String component = entry.getKey().substring("logger.".length());, +                        ESLoggerFactory.getRootLogger().setLevel(entry.getValue());, +                        ESLoggerFactory.getLogger(component).setLevel(entry.getValue());, +        } catch (Exception e) {, +            logger.warn("failed to refresh settings for [{}]", e, "logger");, +        }, +        return settings;, +    }, +, +    @Override, +    public boolean hasDynamicSetting(String key) {, +        return isLoggerSetting(key) || super.hasDynamicSetting(key);, +    }, +, +    /**, +     * Returns <code>true</code> if the settings is a logger setting., +     */, +    public boolean isLoggerSetting(String key) {, +        return key.startsWith("logger.");, +    }, +, +        EsExecutors.PROCESSORS_SETTING)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    boolean isGroupSetting() {, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +        this.settingUpdaters.add(setting.newUpdater(consumer, logger, validator));, +        this.settingUpdaters.add(Setting.compoundUpdater(consumer, a, b, logger));, +                return entry.getValue();, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import java.util.Map;, +    public ClusterSettings(Settings settings, Set<Setting<?>> settingsSet) {, +        super(settings, settingsSet, Setting.Scope.CLUSTER);, +    public synchronized Settings applySettings(Settings newSettings) {, +        Settings settings = super.applySettings(newSettings);, +        try {, +            for (Map.Entry<String, String> entry : settings.getAsMap().entrySet()) {, +                if (entry.getKey().startsWith("logger.")) {, +                    String component = entry.getKey().substring("logger.".length());, +                        ESLoggerFactory.getRootLogger().setLevel(entry.getValue());, +                        ESLoggerFactory.getLogger(component).setLevel(entry.getValue());, +        } catch (Exception e) {, +            logger.warn("failed to refresh settings for [{}]", e, "logger");, +        }]