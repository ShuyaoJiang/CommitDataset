[+++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        if (info.hasNativeController()) {, +            throw new IllegalStateException("plugins can not have native controllers");, +        }, +        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch);, +        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch);, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        if (info.hasNativeController()) {, +            throw new IllegalStateException("plugins can not have native controllers");, +        }, +        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch);, +        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch);, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java, +    public void testPluginWithNativeController() throws Exception {, +        final IllegalStateException e = expectThrows(IllegalStateException.class, () -> installPlugin(pluginZip, env.v1()));, +        assertThat(e, hasToString(containsString("plugins can not have native controllers")));, +    public void testMetaPluginWithNativeController() throws Exception {, +        final IllegalStateException e = expectThrows(IllegalStateException.class, () -> installPlugin(pluginZip, env.v1()));, +        assertThat(e, hasToString(containsString("plugins can not have native controllers")));, +, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        if (info.hasNativeController()) {, +            throw new IllegalStateException("plugins can not have native controllers");, +        }, +        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch);, +        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch);, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java, +    public void testPluginWithNativeController() throws Exception {, +        final IllegalStateException e = expectThrows(IllegalStateException.class, () -> installPlugin(pluginZip, env.v1()));, +        assertThat(e, hasToString(containsString("plugins can not have native controllers")));, +    public void testMetaPluginWithNativeController() throws Exception {, +        final IllegalStateException e = expectThrows(IllegalStateException.class, () -> installPlugin(pluginZip, env.v1()));, +        assertThat(e, hasToString(containsString("plugins can not have native controllers")));, +, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/plugins/PluginSecurityTests.java, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        if (info.hasNativeController()) {, +            throw new IllegalStateException("plugins can not have native controllers");, +        }, +        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch);, +        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch);, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java, +    public void testPluginWithNativeController() throws Exception {, +        final IllegalStateException e = expectThrows(IllegalStateException.class, () -> installPlugin(pluginZip, env.v1()));, +        assertThat(e, hasToString(containsString("plugins can not have native controllers")));, +    public void testMetaPluginWithNativeController() throws Exception {, +        final IllegalStateException e = expectThrows(IllegalStateException.class, () -> installPlugin(pluginZip, env.v1()));, +        assertThat(e, hasToString(containsString("plugins can not have native controllers")));, +, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/plugins/PluginSecurityTests.java, +++ b/qa/no-bootstrap-tests/src/test/java/org/elasticsearch/bootstrap/SpawnerNoBootstrapTests.java, +     * Simplest case: a module with no controller daemon., +        Path plugin = environment.modulesFile().resolve("a_plugin");, +        assertControllerSpawns(Environment::pluginsFile, false);, +        assertControllerSpawns(Environment::modulesFile, true);, +    private void assertControllerSpawns(final Function<Environment, Path> pluginsDirFinder, boolean expectSpawn) throws Exception {, +, +        if (expectSpawn) {, +             // as there should only be a reference in the list for the module that had the controller daemon, we expect one here, +            final InputStreamReader in = new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8);, +                // fail if the process does not die within one second; usually it will be even quicker but it depends on OS scheduling, +        } else {, +            assertThat(processes, hasSize(0));, +        }, +     * Two plugins in a meta module - one with a controller daemon and one without., +    public void testControllerSpawnMeta() throws Exception {, +        runTestControllerSpawnMeta(Environment::pluginsFile, false);, +        runTestControllerSpawnMeta(Environment::modulesFile, true);, +    }, +, +, +    private void runTestControllerSpawnMeta(, +            final Function<Environment, Path> pluginsDirFinder, final boolean expectSpawn) throws Exception {, +        Path metaModule = pluginsDirFinder.apply(environment).resolve("meta_module");, +        Files.createDirectories(metaModule);, +                metaModule,, +        Path plugin = metaModule.resolve("test_plugin");, +        Path otherPlugin = metaModule.resolve("other_plugin");, +, +        if (expectSpawn) {, +             // as there should only be a reference in the list for the plugin that had the controller daemon, we expect one here, +                // fail if the process does not die within one second; usually it will be even quicker but it depends on OS scheduling, +        } else {, +            assertThat(processes, hasSize(0));, +        }, +        Path plugin = environment.modulesFile().resolve("test_plugin");, +                equalTo("module [test_plugin] does not have permission to fork native controller"));, +        final Path desktopServicesStore = environment.modulesFile().resolve(".DS_Store");, +            final FileSystemException e = expectThrows(FileSystemException.class, () -> spawner.spawnNativeControllers(environment));, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        if (info.hasNativeController()) {, +            throw new IllegalStateException("plugins can not have native controllers");, +        }, +        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch);, +        PluginSecurity.confirmPolicyExceptions(terminal, permissions, isBatch);, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java, +    public void testPluginWithNativeController() throws Exception {, +        final IllegalStateException e = expectThrows(IllegalStateException.class, () -> installPlugin(pluginZip, env.v1()));, +        assertThat(e, hasToString(containsString("plugins can not have native controllers")));, +    public void testMetaPluginWithNativeController() throws Exception {]