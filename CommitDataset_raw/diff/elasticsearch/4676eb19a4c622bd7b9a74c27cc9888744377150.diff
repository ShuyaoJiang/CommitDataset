[+++ b/core/src/main/java/org/elasticsearch/index/shard/IndexSearcherWrapper.java, +import java.io.IOException;, +, +    DirectoryReader wrap(DirectoryReader reader) throws IOException;, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws IOException;, +    default Engine.Searcher wrap(EngineConfig engineConfig, Engine.Searcher engineSearcher) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexSearcherWrapper.java, +import java.io.IOException;, +, +    DirectoryReader wrap(DirectoryReader reader) throws IOException;, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws IOException;, +    default Engine.Searcher wrap(EngineConfig engineConfig, Engine.Searcher engineSearcher) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.bootstrap.Elasticsearch;, +        try {, +        } catch (IOException ex) {, +            throw new ElasticsearchException("failed to wrap searcher", ex);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexSearcherWrapper.java, +import java.io.IOException;, +, +    DirectoryReader wrap(DirectoryReader reader) throws IOException;, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws IOException;, +    default Engine.Searcher wrap(EngineConfig engineConfig, Engine.Searcher engineSearcher) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.bootstrap.Elasticsearch;, +        try {, +        } catch (IOException ex) {, +            throw new ElasticsearchException("failed to wrap searcher", ex);, +        }, +++ b/core/src/test/java/org/elasticsearch/common/inject/ModuleTestCase.java, +//    /** Configures the module and asserts "instance" is bound to "to". */, +//    public void assertInstanceBinding(Module module, Class to, Object instance) {, +//        List<Element> elements = Elements.getElements(module);, +//        for (Element element : elements) {, +//            if (element instanceof ProviderInstanceBinding) {, +//                assertEquals(instance, ((ProviderInstanceBinding) element).getProviderInstance().get());, +//                return;, +//            }, +//        }, +//        StringBuilder s = new StringBuilder();, +//        for (Element element : elements) {, +//            s.append(element + "\n");, +//        }, +//        fail("Did not find any binding to " + to.getName() + ". Found these bindings:\n" + s);, +//    }, +, +            } else  if (element instanceof ProviderInstanceBinding) {, +                ProviderInstanceBinding binding = (ProviderInstanceBinding) element;, +                assertTrue(tester.test(to.cast(binding.getProviderInstance().get())));, +                return;, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexSearcherWrapper.java, +import java.io.IOException;, +, +    DirectoryReader wrap(DirectoryReader reader) throws IOException;, +    IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws IOException;, +    default Engine.Searcher wrap(EngineConfig engineConfig, Engine.Searcher engineSearcher) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.bootstrap.Elasticsearch;, +        try {, +        } catch (IOException ex) {, +            throw new ElasticsearchException("failed to wrap searcher", ex);, +        }, +++ b/core/src/test/java/org/elasticsearch/common/inject/ModuleTestCase.java, +//    /** Configures the module and asserts "instance" is bound to "to". */, +//    public void assertInstanceBinding(Module module, Class to, Object instance) {, +//        List<Element> elements = Elements.getElements(module);, +//        for (Element element : elements) {, +//            if (element instanceof ProviderInstanceBinding) {, +//                assertEquals(instance, ((ProviderInstanceBinding) element).getProviderInstance().get());, +//                return;, +//            }, +//        }, +//        StringBuilder s = new StringBuilder();, +//        for (Element element : elements) {, +//            s.append(element + "\n");, +//        }, +//        fail("Did not find any binding to " + to.getName() + ". Found these bindings:\n" + s);, +//    }, +, +            } else  if (element instanceof ProviderInstanceBinding) {, +                ProviderInstanceBinding binding = (ProviderInstanceBinding) element;, +                assertTrue(tester.test(to.cast(binding.getProviderInstance().get())));, +                return;, +++ b/core/src/test/java/org/elasticsearch/index/IndexModuleTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the]