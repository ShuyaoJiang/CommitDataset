[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndexRecoveryCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndexRecoveryCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndexStatsCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndexRecoveryCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndexStatsCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndicesStatsCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndexRecoveryCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndexStatsCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndicesStatsCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java, +, +        //security plugin is the only responsible for the presence of "-*", as wildcards just got resolved., +        //'-*' matches no indices, hence we can simply let it go through, it will yield an empty response., +        if (indexNames.size() == 1 && indexNames.contains(DefaultIndicesAndAliasesResolver.NO_INDEX)) {, +            setIndicesAccessControl(IndicesAccessControl.ALLOW_NO_INDICES);, +            grant(authentication, action, request);, +            return;, +        }, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndexRecoveryCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndexStatsCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndicesStatsCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java, +, +        //security plugin is the only responsible for the presence of "-*", as wildcards just got resolved., +        //'-*' matches no indices, hence we can simply let it go through, it will yield an empty response., +        if (indexNames.size() == 1 && indexNames.contains(DefaultIndicesAndAliasesResolver.NO_INDEX)) {, +            setIndicesAccessControl(IndicesAccessControl.ALLOW_NO_INDICES);, +            grant(authentication, action, request);, +            return;, +        }, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authz/accesscontrol/IndicesAccessControl.java, +import org.elasticsearch.xpack.security.authz.indicesresolver.DefaultIndicesAndAliasesResolver;, +    public static final IndicesAccessControl ALLOW_NO_INDICES = new IndicesAccessControl(true,, +            Collections.singletonMap(DefaultIndicesAndAliasesResolver.NO_INDEX,, +                    new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(), null)));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndexRecoveryCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndexStatsCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/collector/indices/IndicesStatsCollector.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java, +, +        //security plugin is the only responsible for the presence of "-*", as wildcards just got resolved., +        //'-*' matches no indices, hence we can simply let it go through, it will yield an empty response., +        if (indexNames.size() == 1 && indexNames.contains(DefaultIndicesAndAliasesResolver.NO_INDEX)) {, +            setIndicesAccessControl(IndicesAccessControl.ALLOW_NO_INDICES);, +            grant(authentication, action, request);, +            return;, +        }, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authz/accesscontrol/IndicesAccessControl.java, +import org.elasticsearch.xpack.security.authz.indicesresolver.DefaultIndicesAndAliasesResolver;, +    public static final IndicesAccessControl ALLOW_NO_INDICES = new IndicesAccessControl(true,, +            Collections.singletonMap(DefaultIndicesAndAliasesResolver.NO_INDEX,, +                    new IndicesAccessControl.IndexAccessControl(true, new FieldPermissions(), null)));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/security/authz/indicesresolver/DefaultIndicesAndAliasesResolver.java, +import org.elasticsearch.action.admin.indices.alias.get.GetAliasesRequest;, +    public static final String NO_INDEX = "-*";, +    private static final List<String> NO_INDICES = Collections.singletonList(NO_INDEX);, +, +        boolean indicesReplacedWithNoIndices = false;, +, +            List<String> replacedIndices = new ArrayList<>();, +            // check for all and return list of authorized indices, +            if (IndexNameExpressionResolver.isAllIndices(indicesList(indicesRequest.indices()))) {, +                if (replaceWildcards) {, +                    for (String authorizedIndex : authorizedIndicesAndAliases) {, +                        if (isIndexVisible(authorizedIndex, indicesRequest.indicesOptions(), metaData)) {, +                            replacedIndices.add(authorizedIndex);, +                        }, +                    }, +                }, +                // if we cannot replace wildcards the indices list stays empty. Same if there are no authorized indices., +                // we honour allow_no_indices like es core does., +            } else {, +                replacedIndices = replaceWildcardsWithAuthorizedIndices(indicesRequest.indices(),, +                }, +            }, +            if (replacedIndices.isEmpty()) {, +                if (indicesRequest.indicesOptions().allowNoIndices()) {, +                    //this is how we tell es core to return an empty response, we can let the request through being sure, +                    //that the '-*' wildcard expression will be resolved to no indices. We can't let empty indices through, +                    //as that would be resolved to _all by es core., +                    replacedIndices = NO_INDICES;, +                    indicesReplacedWithNoIndices = true;, +                } else {, +                    throw new IndexNotFoundException(Arrays.toString(indicesRequest.indices()));, +                }, +            indices = Sets.newHashSet(replacedIndices);, +            //special treatment for AliasesRequest since we need to replace wildcards among the specified aliases too., +            if (indicesReplacedWithNoIndices) {, +                assert indicesRequest instanceof GetAliasesRequest : GetAliasesRequest.class.getSimpleName() + " is the only known " +, +                        "request implementing " + AliasesRequest.class.getSimpleName() + " that may allow no indices. Found [" +, +                        indicesRequest.getClass().getName() + "] which ended up with an empty set of indices.";, +            } else {, +                //if we are returning '-*' we shouldn't be adding the aliases to the list or the request will not get authorized., +                //Leave only '-*' and ignore the rest, result will anyway be empty., +        }, +    //TODO Investigate reusing code from vanilla es to resolve index names and wildcards, +                Set<String> resolvedIndices = new HashSet<>();]