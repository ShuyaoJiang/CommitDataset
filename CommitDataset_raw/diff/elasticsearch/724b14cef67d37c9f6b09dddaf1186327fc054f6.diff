[+++ b/src/main/java/org/elasticsearch/index/mapper/ip/IpFieldMapper.java, +import com.google.common.net.InetAddresses;, +            if (!InetAddresses.isInetAddress(ip)) {, +                throw new ElasticsearchIllegalArgumentException("failed to parse ip [" + ip + "], not a valid ip address");, +            }, +                throw new ElasticsearchIllegalArgumentException("failed to parse ip [" + ip + "], not a valid ipv4 address (4 dots)");, +++ b/src/main/java/org/elasticsearch/index/mapper/ip/IpFieldMapper.java, +import com.google.common.net.InetAddresses;, +            if (!InetAddresses.isInetAddress(ip)) {, +                throw new ElasticsearchIllegalArgumentException("failed to parse ip [" + ip + "], not a valid ip address");, +            }, +                throw new ElasticsearchIllegalArgumentException("failed to parse ip [" + ip + "], not a valid ipv4 address (4 dots)");, +++ b/src/test/java/org/elasticsearch/index/mapper/ip/SimpleIpMappingTests.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.bootstrap.Elasticsearch;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.mapper.ParsedDocument;, +import org.elasticsearch.test.ElasticsearchSingleNodeTest;, +import org.junit.Test;, +, +import static org.hamcrest.Matchers.*;, +public class SimpleIpMappingTests extends ElasticsearchSingleNodeTest {, +    @Test, +    public void testSimpleMapping() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("ip").field("type", "ip").endObject().endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);, +, +        ParsedDocument doc = defaultMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("ip", "127.0.0.1"), +                .endObject(), +                .bytes());, +, +        assertThat(doc.rootDoc().getField("ip").numericValue().longValue(), is(2130706433L));, +        assertThat(doc.rootDoc().get("ip"), is(nullValue()));, +    }, +, +    @Test, +    public void testThatValidIpCanBeConvertedToLong() throws Exception {, +        assertThat(IpFieldMapper.ipToLong("127.0.0.1"), is(2130706433L));, +    }, +, +    @Test, +    public void testThatInvalidIpThrowsException() throws Exception {, +        try {, +            IpFieldMapper.ipToLong("127.0.011.1111111");, +            fail("Expected ip address parsing to fail but did not happen");, +        } catch (ElasticsearchIllegalArgumentException e) {, +            assertThat(e.getMessage(), containsString("not a valid ip address"));, +        }, +    }, +, +    @Test, +    public void testThatIpv6AddressThrowsException() throws Exception {, +        try {, +            IpFieldMapper.ipToLong("2001:db8:0:8d3:0:8a2e:70:7344");, +            fail("Expected ip address parsing to fail but did not happen");, +        } catch (ElasticsearchIllegalArgumentException e) {, +            assertThat(e.getMessage(), containsString("not a valid ipv4 address"));, +        }, +    }, +]