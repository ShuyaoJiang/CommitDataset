[+++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +            return Queries.newMatchNoDocsQuery("No terms supplied for " + MultiPhrasePrefixQuery.class.getName());, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +            return Queries.newMatchNoDocsQuery("No terms supplied for " + MultiPhrasePrefixQuery.class.getName());, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +    public static Query newMatchNoDocsQuery(String reason) {, +        return new MatchNoDocsQuery(reason);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +            return Queries.newMatchNoDocsQuery("No terms supplied for " + MultiPhrasePrefixQuery.class.getName());, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +    public static Query newMatchNoDocsQuery(String reason) {, +        return new MatchNoDocsQuery(reason);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +                return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.index().getName() + " vs. " + value);, +            return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.index().getName() + " vs. " + values);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +            return Queries.newMatchNoDocsQuery("No terms supplied for " + MultiPhrasePrefixQuery.class.getName());, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +    public static Query newMatchNoDocsQuery(String reason) {, +        return new MatchNoDocsQuery(reason);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +                return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.index().getName() + " vs. " + value);, +            return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.index().getName() + " vs. " + values);, +++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +            return Queries.newMatchNoDocsQuery("Missing types in \"" + NAME + "\" query.");, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +            return Queries.newMatchNoDocsQuery("No terms supplied for " + MultiPhrasePrefixQuery.class.getName());, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +    public static Query newMatchNoDocsQuery(String reason) {, +        return new MatchNoDocsQuery(reason);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +                return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.index().getName() + " vs. " + value);, +            return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.index().getName() + " vs. " + values);, +++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +            return Queries.newMatchNoDocsQuery("Missing types in \"" + NAME + "\" query.");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoBoundingBoxQueryBuilder.java, +    private static final ParseField IGNORE_MALFORMED_FIELD = new ParseField("ignore_malformed");, +    private static final ParseField COERCE_FIELD = new ParseField("coerce", "normalize");, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +            return Queries.newMatchNoDocsQuery("No terms supplied for " + MultiPhrasePrefixQuery.class.getName());, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +    public static Query newMatchNoDocsQuery(String reason) {, +        return new MatchNoDocsQuery(reason);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +                return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.index().getName() + " vs. " + value);, +            return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.index().getName() + " vs. " + values);, +++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +            return Queries.newMatchNoDocsQuery("Missing types in \"" + NAME + "\" query.");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoBoundingBoxQueryBuilder.java, +    private static final ParseField IGNORE_MALFORMED_FIELD = new ParseField("ignore_malformed");, +    private static final ParseField COERCE_FIELD = new ParseField("coerce", "normalize");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryBuilder.java, +    private static final ParseField IGNORE_MALFORMED_FIELD = new ParseField("ignore_malformed");, +    private static final ParseField COERCE_FIELD = new ParseField("coerce", "normalize");, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +            return Queries.newMatchNoDocsQuery("No terms supplied for " + MultiPhrasePrefixQuery.class.getName());, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +    public static Query newMatchNoDocsQuery(String reason) {, +        return new MatchNoDocsQuery(reason);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +                return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.index().getName() + " vs. " + value);, +            return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.index().getName() + " vs. " + values);, +++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +            return Queries.newMatchNoDocsQuery("Missing types in \"" + NAME + "\" query.");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoBoundingBoxQueryBuilder.java, +    private static final ParseField IGNORE_MALFORMED_FIELD = new ParseField("ignore_malformed");, +    private static final ParseField COERCE_FIELD = new ParseField("coerce", "normalize");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryBuilder.java, +    private static final ParseField IGNORE_MALFORMED_FIELD = new ParseField("ignore_malformed");, +    private static final ParseField COERCE_FIELD = new ParseField("coerce", "normalize");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryBuilder.java, +    private static final ParseField COERCE_FIELD = new ParseField("coerce", "normalize");, +    private static final ParseField IGNORE_MALFORMED_FIELD = new ParseField("ignore_malformed");, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +            return Queries.newMatchNoDocsQuery("No terms supplied for " + MultiPhrasePrefixQuery.class.getName());, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +    public static Query newMatchNoDocsQuery(String reason) {, +        return new MatchNoDocsQuery(reason);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +                return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.index().getName() + " vs. " + value);, +            return Queries.newMatchNoDocsQuery("Index didn't match. Index queried: " + context.index().getName() + " vs. " + values);, +++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +            return Queries.newMatchNoDocsQuery("Missing types in \"" + NAME + "\" query.");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoBoundingBoxQueryBuilder.java, +    private static final ParseField IGNORE_MALFORMED_FIELD = new ParseField("ignore_malformed");, +    private static final ParseField COERCE_FIELD = new ParseField("coerce", "normalize");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryBuilder.java, +    private static final ParseField IGNORE_MALFORMED_FIELD = new ParseField("ignore_malformed");, +    private static final ParseField COERCE_FIELD = new ParseField("coerce", "normalize");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryBuilder.java, +    private static final ParseField COERCE_FIELD = new ParseField("coerce", "normalize");, +    private static final ParseField IGNORE_MALFORMED_FIELD = new ParseField("ignore_malformed");, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java, +    private static final ParseField COERCE_FIELD = new ParseField("coerce", "normalize");, +    private static final ParseField IGNORE_MALFORMED_FIELD = new ParseField("ignore_malformed");, +        builder.field(COERCE_FIELD.getPreferredName(), GeoValidationMethod.isCoerce(validationMethod));, +        builder.field(IGNORE_MALFORMED_FIELD.getPreferredName(),, +                GeoValidationMethod.isIgnoreMalformed(validationMethod));, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +            return Queries.newMatchNoDocsQuery("No terms supplied for " + MultiPhrasePrefixQuery.class.getName());]