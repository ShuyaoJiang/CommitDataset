[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EAssignment.java, +            if (!(rhs instanceof EBinary) || !((EBinary)rhs).cat) { // check to see if the rhs has already done a concatenation, +                writer.writeAppendStrings(rhs.actual); // append the rhs's value since it's hasn't already, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EAssignment.java, +            if (!(rhs instanceof EBinary) || !((EBinary)rhs).cat) { // check to see if the rhs has already done a concatenation, +                writer.writeAppendStrings(rhs.actual); // append the rhs's value since it's hasn't already, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/StringTests.java, +import java.util.HashMap;, +import java.util.Map;, +    public void testComplexCompoundAssignment() {, +        Map<String, Object> params = new HashMap<>();, +        Map<String, Object> ctx = new HashMap<>();, +        ctx.put("_id", "somerandomid");, +        params.put("ctx", ctx);, +, +        assertEquals("somerandomid.somerandomid", exec("ctx._id += '.' + ctx._id", params, false));, +        assertEquals("somerandomid.somerandomid", exec("String x = 'somerandomid'; x += '.' + x"));, +        assertEquals("somerandomid.somerandomid", exec("def x = 'somerandomid'; x += '.' + x"));, +    }, +]