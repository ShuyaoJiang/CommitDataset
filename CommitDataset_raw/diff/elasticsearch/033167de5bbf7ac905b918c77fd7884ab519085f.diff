[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +        if (options.nonOptionArguments().isEmpty() == false) {, +            throw new UserError(ExitCodes.USAGE, "Positional arguments not allowed, found " + options.nonOptionArguments());, +        }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +        if (options.nonOptionArguments().isEmpty() == false) {, +            throw new UserError(ExitCodes.USAGE, "Positional arguments not allowed, found " + options.nonOptionArguments());, +        }, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +    public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {, +        Objects.requireNonNull(value, "Argument 'value' must not be null.");, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +        if (options.nonOptionArguments().isEmpty() == false) {, +            throw new UserError(ExitCodes.USAGE, "Positional arguments not allowed, found " + options.nonOptionArguments());, +        }, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +    public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {, +        Objects.requireNonNull(value, "Argument 'value' must not be null.");, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, ByteSizeValue value, ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return byteSizeSetting(key, (s) -> value.toString(), minValue, maxValue, properties);, +    }, +, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, Function<Settings, String> defaultValue,, +                                                         ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return new Setting<>(key, defaultValue, (s) -> parseByteSize(s, minValue, maxValue, key), properties);, +    }, +, +    public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, ByteSizeValue maxValue, String key) {, +        ByteSizeValue value = ByteSizeValue.parseBytesSizeValue(s, key);, +        if (value.bytes() < minValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be >= " + minValue);, +        }, +        if (value.bytes() > maxValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +        }, +        return value;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +        if (options.nonOptionArguments().isEmpty() == false) {, +            throw new UserError(ExitCodes.USAGE, "Positional arguments not allowed, found " + options.nonOptionArguments());, +        }, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +    public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {, +        Objects.requireNonNull(value, "Argument 'value' must not be null.");, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, ByteSizeValue value, ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return byteSizeSetting(key, (s) -> value.toString(), minValue, maxValue, properties);, +    }, +, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, Function<Settings, String> defaultValue,, +                                                         ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return new Setting<>(key, defaultValue, (s) -> parseByteSize(s, minValue, maxValue, key), properties);, +    }, +, +    public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, ByteSizeValue maxValue, String key) {, +        ByteSizeValue value = ByteSizeValue.parseBytesSizeValue(s, key);, +        if (value.bytes() < minValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be >= " + minValue);, +        }, +        if (value.bytes() > maxValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +        }, +        return value;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +                String value = propertyPlaceholder.replacePlaceholders(entry.getValue(), placeholderResolver);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +        if (options.nonOptionArguments().isEmpty() == false) {, +            throw new UserError(ExitCodes.USAGE, "Positional arguments not allowed, found " + options.nonOptionArguments());, +        }, +++ b/core/src/main/java/org/elasticsearch/common/property/PropertyPlaceholder.java, +    public String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {, +        Objects.requireNonNull(value, "Argument 'value' must not be null.");, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, ByteSizeValue value, ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return byteSizeSetting(key, (s) -> value.toString(), minValue, maxValue, properties);, +    }, +, +    public static Setting<ByteSizeValue> byteSizeSetting(String key, Function<Settings, String> defaultValue,, +                                                         ByteSizeValue minValue, ByteSizeValue maxValue,, +                                                         Property... properties) {, +        return new Setting<>(key, defaultValue, (s) -> parseByteSize(s, minValue, maxValue, key), properties);, +    }, +, +    public static ByteSizeValue parseByteSize(String s, ByteSizeValue minValue, ByteSizeValue maxValue, String key) {, +        ByteSizeValue value = ByteSizeValue.parseBytesSizeValue(s, key);, +        if (value.bytes() < minValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be >= " + minValue);, +        }, +        if (value.bytes() > maxValue.bytes()) {, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +        }]