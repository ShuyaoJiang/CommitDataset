[+++ b/src/test/java/org/elasticsearch/test/integration/count/query/SimpleQueryTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.integration.count.query;, +, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.action.count.CountResponse;, +import org.elasticsearch.action.search.SearchPhaseExecutionException;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.query.*;, +import org.elasticsearch.index.query.CommonTermsQueryBuilder.Operator;, +import org.elasticsearch.index.query.MatchQueryBuilder.Type;, +import org.elasticsearch.test.integration.AbstractSharedClusterTest;, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +import org.joda.time.format.ISODateTimeFormat;, +import org.junit.Test;, +, +import java.io.IOException;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.index.query.FilterBuilders.*;, +import static org.elasticsearch.index.query.QueryBuilders.*;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;, +, +/**, + *, + */, +public class SimpleQueryTests extends AbstractSharedClusterTest {, +, +    @Test, +    public void passQueryAsStringTest() throws Exception {, +        client().admin().indices().prepareCreate("test").setSettings("index.number_of_shards", 1).execute().actionGet();, +, +        client().prepareIndex("test", "type1", "1").setSource("field1", "value1_1", "field2", "value2_1").setRefresh(true).execute().actionGet();, +, +        CountResponse countResponse = client().prepareCount().setQuery(new BytesArray("{ \"term\" : { \"field1\" : \"value1_1\" }}").array()).execute().actionGet();, +        assertHitCount(countResponse, 1l);, +    }, +, +    @Test, +    public void testIndexOptions() throws Exception {, +        client().admin().indices().prepareCreate("test"), +                .addMapping("type1", "field1", "type=string,index_options=docs"), +                .setSettings("index.number_of_shards", 1).get();, +, +        client().prepareIndex("test", "type1", "1").setSource("field1", "quick brown fox", "field2", "quick brown fox").execute().actionGet();, +        client().prepareIndex("test", "type1", "2").setSource("field1", "quick lazy huge brown fox", "field2", "quick lazy huge brown fox").setRefresh(true).execute().actionGet();, +, +        CountResponse countResponse = client().prepareCount().setQuery(QueryBuilders.matchQuery("field2", "quick brown").type(Type.PHRASE).slop(0)).get();, +        assertHitCount(countResponse, 1l);, +        try {, +            client().prepareCount().setQuery(QueryBuilders.matchQuery("field1", "quick brown").type(Type.PHRASE).slop(0)).get();, +        } catch (SearchPhaseExecutionException e) {, +            assertTrue("wrong exception message " + e.getMessage(), e.getMessage().endsWith("IllegalStateException[field \"field1\" was indexed without position data; cannot run PhraseQuery (term=quick)]; }"));, +        }, +    }, +, +    @Test, +    public void testCommonTermsQuery() throws Exception {, +        client().admin().indices().prepareCreate("test"), +                .addMapping("type1", "field1", "type=string,analyzer=whitespace"), +                .setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 1)).execute().actionGet();, +        indexRandom("test", true,, +                client().prepareIndex("test", "type1", "3").setSource("field1", "quick lazy huge brown pidgin", "field2", "the quick lazy huge brown fox jumps over the tree"),, +                client().prepareIndex("test", "type1", "1").setSource("field1", "the quick brown fox"),, +                client().prepareIndex("test", "type1", "2").setSource("field1", "the quick lazy huge brown fox jumps over the tree"), +        );, +, +        CountResponse countResponse = client().prepareCount().setQuery(QueryBuilders.commonTerms("field1", "the quick brown").cutoffFrequency(3).lowFreqOperator(Operator.OR)).execute().actionGet();, +        assertHitCount(countResponse, 3l);, +, +        countResponse = client().prepareCount().setQuery(QueryBuilders.commonTerms("field1", "the quick brown").cutoffFrequency(3).lowFreqOperator(Operator.AND)).execute().actionGet();, +        assertHitCount(countResponse, 2l);, +, +        // Default, +        countResponse = client().prepareCount().setQuery(QueryBuilders.commonTerms("field1", "the quick brown").cutoffFrequency(3)).execute().actionGet();, +        assertHitCount(countResponse, 3l);, +]