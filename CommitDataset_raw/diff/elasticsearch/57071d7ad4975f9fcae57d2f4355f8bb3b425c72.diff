[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +import java.util.concurrent.*;, + * @author kimchy (shay.banon), +public interface ThreadPool {, +    /**, +     * Attempts to stop all actively executing tasks, halts the, +     * processing of waiting tasks, and returns a list of the tasks that were, +     * awaiting execution., +     *, +     * <p>There are no guarantees beyond best-effort attempts to stop, +     * processing actively executing tasks.  For example, typical, +     * implementations will cancel via {@link Thread#interrupt}, so any, +     * task that fails to respond to interrupts may never terminate., +     */, +    void shutdownNow();, +, +    /**, +     * Initiates an orderly shutdown in which previously submitted, +     * tasks are executed, but no new tasks will be accepted., +     * Invocation has no additional effect if already shut down., +     */, +    void shutdown();, +, +    boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;, +, +    void execute(Runnable command);, +, +    /**, +     * Submits a value-returning task for execution and returns a, +     * Future representing the pending results of the task. The, +     * Future's <tt>get</tt> method will return the task's result upon, +     * successful completion., +     *, +     * <p>, +     * If you would like to immediately block waiting, +     * for a task, you can use constructions of the form, +     * <tt>result = exec.submit(aCallable).get();</tt>, +     *, +     * <p> Note: The {@link Executors} class includes a set of methods, +     * that can convert some other common closure-like objects,, +     * for example, {@link java.security.PrivilegedAction} to, +     * {@link Callable} form so they can be submitted., +     *, +     * @param task the task to submit, +     * @return a Future representing pending completion of the task, +     * @throws RejectedExecutionException if the task cannot be, +     *                                    scheduled for execution, +     * @throws NullPointerException       if the task is null, +     */, +    <T> Future<T> submit(Callable<T> task);, +, +    /**, +     * Submits a Runnable task for execution and returns a Future, +     * representing that task. The Future's <tt>get</tt> method will, +     * return the given result upon successful completion., +     *, +     * @param task   the task to submit, +     * @param result the result to return, +     * @return a Future representing pending completion of the task, +     * @throws RejectedExecutionException if the task cannot be, +     *                                    scheduled for execution, +     * @throws NullPointerException       if the task is null, +     */, +    <T> Future<T> submit(Runnable task, T result);, +, +    /**, +     * Submits a Runnable task for execution and returns a Future, +     * representing that task. The Future's <tt>get</tt> method will, +     * return <tt>null</tt> upon <em>successful</em> completion., +     *, +     * @param task the task to submit, +     * @return a Future representing pending completion of the task, +     * @throws RejectedExecutionException if the task cannot be, +     *                                    scheduled for execution, +     * @throws NullPointerException       if the task is null, +     */, +    Future<?> submit(Runnable task);, +, +    /**, +     * Creates and executes a one-shot action that becomes enabled, +     * after the given delay., +     *, +     * @param command the task to execute, +     * @param delay   the time from now to delay execution, +     * @param unit    the time unit of the delay parameter, +     * @return a ScheduledFuture representing pending completion of, +     *         the task and whose <tt>get()</tt> method will return, +     *         <tt>null</tt> upon completion, +     * @throws java.util.concurrent.RejectedExecutionException, +     *                              if the task cannot be, +     *                              scheduled for execution, +     * @throws NullPointerException if command is null, +     */, +    public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit);, +, +    /**, +     * Creates and executes a ScheduledFuture that becomes enabled after the, +     * given delay., +     *, +     * @param callable the function to execute]