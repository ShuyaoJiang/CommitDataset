[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDateFieldMapper.java, +import org.elasticsearch.index.mapper.MergeMappingException;, +    private String nullValue;, +    @Override public void merge(XContentMapper mergeWith, MergeContext mergeContext) throws MergeMappingException {, +        super.merge(mergeWith, mergeContext);, +        if (!mergeContext.mergeFlags().simulate()) {, +            this.nullValue = ((XContentDateFieldMapper) mergeWith).nullValue;, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDateFieldMapper.java, +import org.elasticsearch.index.mapper.MergeMappingException;, +    private String nullValue;, +    @Override public void merge(XContentMapper mergeWith, MergeContext mergeContext) throws MergeMappingException {, +        super.merge(mergeWith, mergeContext);, +        if (!mergeContext.mergeFlags().simulate()) {, +            this.nullValue = ((XContentDateFieldMapper) mergeWith).nullValue;, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDoubleFieldMapper.java, +import org.elasticsearch.index.mapper.MergeMappingException;, +    private Double nullValue;, +    private String nullValueAsString;, +    @Override public void merge(XContentMapper mergeWith, MergeContext mergeContext) throws MergeMappingException {, +        super.merge(mergeWith, mergeContext);, +        if (!mergeContext.mergeFlags().simulate()) {, +            this.nullValue = ((XContentDoubleFieldMapper) mergeWith).nullValue;, +            this.nullValueAsString = ((XContentDoubleFieldMapper) mergeWith).nullValueAsString;, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDateFieldMapper.java, +import org.elasticsearch.index.mapper.MergeMappingException;, +    private String nullValue;, +    @Override public void merge(XContentMapper mergeWith, MergeContext mergeContext) throws MergeMappingException {, +        super.merge(mergeWith, mergeContext);, +        if (!mergeContext.mergeFlags().simulate()) {, +            this.nullValue = ((XContentDateFieldMapper) mergeWith).nullValue;, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDoubleFieldMapper.java, +import org.elasticsearch.index.mapper.MergeMappingException;, +    private Double nullValue;, +    private String nullValueAsString;, +    @Override public void merge(XContentMapper mergeWith, MergeContext mergeContext) throws MergeMappingException {, +        super.merge(mergeWith, mergeContext);, +        if (!mergeContext.mergeFlags().simulate()) {, +            this.nullValue = ((XContentDoubleFieldMapper) mergeWith).nullValue;, +            this.nullValueAsString = ((XContentDoubleFieldMapper) mergeWith).nullValueAsString;, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentFieldMapper.java, +    protected float boost;, +    protected boolean omitNorms;, +    protected boolean omitTermFreqAndPositions;, +        if (!this.getClass().equals(mergeWith.getClass())) {, +            mergeContext.addConflict("mapper [" + names.fullName() + "] of different type");, +        }, +        XContentFieldMapper fieldMergeWith = (XContentFieldMapper) mergeWith;, +        if (!this.index.equals(fieldMergeWith.index)) {, +            mergeContext.addConflict("mapper [" + names.fullName() + "] has different index values");, +        }, +        if (!this.store.equals(fieldMergeWith.store)) {, +            mergeContext.addConflict("mapper [" + names.fullName() + "] has different store values");, +        }, +        if (!this.termVector.equals(fieldMergeWith.termVector)) {, +            mergeContext.addConflict("mapper [" + names.fullName() + "] has different term_vector values");, +        }, +        if (this.indexAnalyzer == null) {, +            if (fieldMergeWith.indexAnalyzer != null) {, +                mergeContext.addConflict("mapper [" + names.fullName() + "] has different index_analyzer");, +            }, +        } else if (!this.indexAnalyzer.name().equals(fieldMergeWith.indexAnalyzer.name())) {, +            mergeContext.addConflict("mapper [" + names.fullName() + "] has different index_analyzer");, +        }, +        if (this.searchAnalyzer == null) {, +            if (fieldMergeWith.searchAnalyzer != null) {, +                mergeContext.addConflict("mapper [" + names.fullName() + "] has different search_analyzer");, +            }, +        } else if (!this.searchAnalyzer.name().equals(fieldMergeWith.searchAnalyzer.name())) {, +            mergeContext.addConflict("mapper [" + names.fullName() + "] has different search_analyzer");, +        }, +        if (!mergeContext.mergeFlags().simulate()) {, +            // apply changeable values, +            this.boost = fieldMergeWith.boost;, +            this.omitNorms = fieldMergeWith.omitNorms;, +            this.omitTermFreqAndPositions = fieldMergeWith.omitTermFreqAndPositions;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDateFieldMapper.java, +import org.elasticsearch.index.mapper.MergeMappingException;, +    private String nullValue;, +    @Override public void merge(XContentMapper mergeWith, MergeContext mergeContext) throws MergeMappingException {, +        super.merge(mergeWith, mergeContext);, +        if (!mergeContext.mergeFlags().simulate()) {, +            this.nullValue = ((XContentDateFieldMapper) mergeWith).nullValue;, +        }, +    }]