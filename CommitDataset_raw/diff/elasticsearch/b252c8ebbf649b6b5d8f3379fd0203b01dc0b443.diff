[+++ b/CONTRIBUTING.md, +++ b/CONTRIBUTING.md, +++ b/TESTING.asciidoc, +=== BWC Testing against a specific branch, +To test the changes, you can instruct gradle to build the BWC version from a local branch instead of, +pulling the release branch from GitHub. You do so using the `tests.bwc.refspec` system property:, +gradle check -Dtests.bwc.refspec=origin/index_req_bwc_5.x, +The branch needs to be available on the local clone that the BWC makes of the repository you run the, +tests from. Using the `origin` remote is a handy trick to make sure that a branch is available, +and is up to date in the case of multiple runs., +Say you need to make a change to `master` and have a BWC layer in `5.x`. You will need to:, +. Create a branch called `index_req_change` off `master`. This will contain your change., +. If not running the tests locally, push both branches to your remote repository., +. Run the tests with `gradle check -Dtests.bwc.refspec=origin/index_req_bwc_5.x`, +++ b/CONTRIBUTING.md, +++ b/TESTING.asciidoc, +=== BWC Testing against a specific branch, +To test the changes, you can instruct gradle to build the BWC version from a local branch instead of, +pulling the release branch from GitHub. You do so using the `tests.bwc.refspec` system property:, +gradle check -Dtests.bwc.refspec=origin/index_req_bwc_5.x, +The branch needs to be available on the local clone that the BWC makes of the repository you run the, +tests from. Using the `origin` remote is a handy trick to make sure that a branch is available, +and is up to date in the case of multiple runs., +Say you need to make a change to `master` and have a BWC layer in `5.x`. You will need to:, +. Create a branch called `index_req_change` off `master`. This will contain your change., +. If not running the tests locally, push both branches to your remote repository., +. Run the tests with `gradle check -Dtests.bwc.refspec=origin/index_req_bwc_5.x`, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +     * if <code>true</code> each node will be configured with <tt>discovery.zen.minimum_master_nodes</tt> set, +     * to the total number of nodes in the cluster. This will also cause that each node has `0s` state recovery, +     * timeout which can lead to issues if for instance an existing clusterstate is expected to be recovered, +     * before any tests start, +    boolean useMinimumMasterNodes = true, +++ b/CONTRIBUTING.md, +++ b/TESTING.asciidoc, +=== BWC Testing against a specific branch, +To test the changes, you can instruct gradle to build the BWC version from a local branch instead of, +pulling the release branch from GitHub. You do so using the `tests.bwc.refspec` system property:, +gradle check -Dtests.bwc.refspec=origin/index_req_bwc_5.x, +The branch needs to be available on the local clone that the BWC makes of the repository you run the, +tests from. Using the `origin` remote is a handy trick to make sure that a branch is available, +and is up to date in the case of multiple runs., +Say you need to make a change to `master` and have a BWC layer in `5.x`. You will need to:, +. Create a branch called `index_req_change` off `master`. This will contain your change., +. If not running the tests locally, push both branches to your remote repository., +. Run the tests with `gradle check -Dtests.bwc.refspec=origin/index_req_bwc_5.x`, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +     * if <code>true</code> each node will be configured with <tt>discovery.zen.minimum_master_nodes</tt> set, +     * to the total number of nodes in the cluster. This will also cause that each node has `0s` state recovery, +     * timeout which can lead to issues if for instance an existing clusterstate is expected to be recovered, +     * before any tests start, +    boolean useMinimumMasterNodes = true, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        // we set min master nodes to the total number of nodes in the cluster and, +        // basically skip initial state recovery to allow the cluster to form using a realistic master election, +        // this means all nodes must be up, join the seed node and do a master election. This will also allow new and, +        // old nodes in the BWC case to become the master, +        if (node.config.useMinimumMasterNodes && node.config.numNodes > 1) {, +            esConfig['discovery.zen.minimum_master_nodes'] = node.config.numNodes, +            esConfig['discovery.initial_state_timeout'] = '0s' // don't wait for state.. just start up quickly, +++ b/CONTRIBUTING.md, +++ b/TESTING.asciidoc, +=== BWC Testing against a specific branch, +To test the changes, you can instruct gradle to build the BWC version from a local branch instead of, +pulling the release branch from GitHub. You do so using the `tests.bwc.refspec` system property:, +gradle check -Dtests.bwc.refspec=origin/index_req_bwc_5.x, +The branch needs to be available on the local clone that the BWC makes of the repository you run the, +tests from. Using the `origin` remote is a handy trick to make sure that a branch is available, +and is up to date in the case of multiple runs., +Say you need to make a change to `master` and have a BWC layer in `5.x`. You will need to:, +. Create a branch called `index_req_change` off `master`. This will contain your change., +. If not running the tests locally, push both branches to your remote repository., +. Run the tests with `gradle check -Dtests.bwc.refspec=origin/index_req_bwc_5.x`, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +     * if <code>true</code> each node will be configured with <tt>discovery.zen.minimum_master_nodes</tt> set, +     * to the total number of nodes in the cluster. This will also cause that each node has `0s` state recovery, +     * timeout which can lead to issues if for instance an existing clusterstate is expected to be recovered, +     * before any tests start, +    boolean useMinimumMasterNodes = true, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        // we set min master nodes to the total number of nodes in the cluster and, +        // basically skip initial state recovery to allow the cluster to form using a realistic master election, +        // this means all nodes must be up, join the seed node and do a master election. This will also allow new and, +        // old nodes in the BWC case to become the master, +        if (node.config.useMinimumMasterNodes && node.config.numNodes > 1) {, +            esConfig['discovery.zen.minimum_master_nodes'] = node.config.numNodes, +            esConfig['discovery.initial_state_timeout'] = '0s' // don't wait for state.. just start up quickly, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +     * <tt>_local</tt> to prefer local shards, <tt>_primary</tt> to execute only on primary shards, or, +     * a custom value, which guarantees that the same order will be used across different requests., +++ b/CONTRIBUTING.md, +++ b/TESTING.asciidoc, +=== BWC Testing against a specific branch, +To test the changes, you can instruct gradle to build the BWC version from a local branch instead of, +pulling the release branch from GitHub. You do so using the `tests.bwc.refspec` system property:, +gradle check -Dtests.bwc.refspec=origin/index_req_bwc_5.x, +The branch needs to be available on the local clone that the BWC makes of the repository you run the, +tests from. Using the `origin` remote is a handy trick to make sure that a branch is available, +and is up to date in the case of multiple runs., +Say you need to make a change to `master` and have a BWC layer in `5.x`. You will need to:]