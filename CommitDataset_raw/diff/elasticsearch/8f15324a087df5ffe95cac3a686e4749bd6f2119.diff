[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/NativeUsersStore.java, +, +                                listener.onResponse((enabled ? ReservedRealm.ENABLED_DEFAULT_USER_INFO : ReservedRealm, +                                        .DISABLED_DEFAULT_USER_INFO).deepClone());, +    static final class ReservedUserInfo {, +, +        ReservedUserInfo deepClone() {, +            return new ReservedUserInfo(Arrays.copyOf(passwordHash, passwordHash.length), enabled, hasEmptyPassword);, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/NativeUsersStore.java, +, +                                listener.onResponse((enabled ? ReservedRealm.ENABLED_DEFAULT_USER_INFO : ReservedRealm, +                                        .DISABLED_DEFAULT_USER_INFO).deepClone());, +    static final class ReservedUserInfo {, +, +        ReservedUserInfo deepClone() {, +            return new ReservedUserInfo(Arrays.copyOf(passwordHash, passwordHash.length), enabled, hasEmptyPassword);, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/ReservedRealm.java, +    private final ReservedUserInfo bootstrapUserInfo;, +    static final char[] EMPTY_PASSWORD_HASH = Hasher.BCRYPT.hash(new SecureString("".toCharArray()));, +    static final ReservedUserInfo DISABLED_DEFAULT_USER_INFO = new ReservedUserInfo(EMPTY_PASSWORD_HASH, false, true);, +    static final ReservedUserInfo ENABLED_DEFAULT_USER_INFO = new ReservedUserInfo(EMPTY_PASSWORD_HASH, true, true);, +        final char[] hash = BOOTSTRAP_ELASTIC_PASSWORD.get(settings).length() == 0 ? EMPTY_PASSWORD_HASH :, +                Hasher.BCRYPT.hash(BOOTSTRAP_ELASTIC_PASSWORD.get(settings));, +        bootstrapUserInfo = new ReservedUserInfo(hash, true, hash == EMPTY_PASSWORD_HASH);, +                        } else if (Hasher.BCRYPT.verify(token.credentials(), userInfo.passwordHash)) {, +                        assert userInfo.passwordHash != DISABLED_DEFAULT_USER_INFO.passwordHash : "default user info must be cloned";, +                        assert userInfo.passwordHash != bootstrapUserInfo.passwordHash : "bootstrap user info must be cloned";, +, +            listener.onResponse(DISABLED_DEFAULT_USER_INFO.deepClone());, +            listener.onResponse(bootstrapUserInfo.deepClone());, +                    if (ElasticUser.NAME.equals(username)) {, +                        listener.onResponse(bootstrapUserInfo.deepClone());, +                    } else {, +                        listener.onResponse(ENABLED_DEFAULT_USER_INFO.deepClone());, +                    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/NativeUsersStore.java, +, +                                listener.onResponse((enabled ? ReservedRealm.ENABLED_DEFAULT_USER_INFO : ReservedRealm, +                                        .DISABLED_DEFAULT_USER_INFO).deepClone());, +    static final class ReservedUserInfo {, +, +        ReservedUserInfo deepClone() {, +            return new ReservedUserInfo(Arrays.copyOf(passwordHash, passwordHash.length), enabled, hasEmptyPassword);, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/ReservedRealm.java, +    private final ReservedUserInfo bootstrapUserInfo;, +    static final char[] EMPTY_PASSWORD_HASH = Hasher.BCRYPT.hash(new SecureString("".toCharArray()));, +    static final ReservedUserInfo DISABLED_DEFAULT_USER_INFO = new ReservedUserInfo(EMPTY_PASSWORD_HASH, false, true);, +    static final ReservedUserInfo ENABLED_DEFAULT_USER_INFO = new ReservedUserInfo(EMPTY_PASSWORD_HASH, true, true);, +        final char[] hash = BOOTSTRAP_ELASTIC_PASSWORD.get(settings).length() == 0 ? EMPTY_PASSWORD_HASH :, +                Hasher.BCRYPT.hash(BOOTSTRAP_ELASTIC_PASSWORD.get(settings));, +        bootstrapUserInfo = new ReservedUserInfo(hash, true, hash == EMPTY_PASSWORD_HASH);, +                        } else if (Hasher.BCRYPT.verify(token.credentials(), userInfo.passwordHash)) {, +                        assert userInfo.passwordHash != DISABLED_DEFAULT_USER_INFO.passwordHash : "default user info must be cloned";, +                        assert userInfo.passwordHash != bootstrapUserInfo.passwordHash : "bootstrap user info must be cloned";, +, +            listener.onResponse(DISABLED_DEFAULT_USER_INFO.deepClone());, +            listener.onResponse(bootstrapUserInfo.deepClone());, +                    if (ElasticUser.NAME.equals(username)) {, +                        listener.onResponse(bootstrapUserInfo.deepClone());, +                    } else {, +                        listener.onResponse(ENABLED_DEFAULT_USER_INFO.deepClone());, +                    }, +++ /dev/null, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/NativeUsersStore.java, +, +                                listener.onResponse((enabled ? ReservedRealm.ENABLED_DEFAULT_USER_INFO : ReservedRealm, +                                        .DISABLED_DEFAULT_USER_INFO).deepClone());, +    static final class ReservedUserInfo {, +, +        ReservedUserInfo deepClone() {, +            return new ReservedUserInfo(Arrays.copyOf(passwordHash, passwordHash.length), enabled, hasEmptyPassword);, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/ReservedRealm.java, +    private final ReservedUserInfo bootstrapUserInfo;, +    static final char[] EMPTY_PASSWORD_HASH = Hasher.BCRYPT.hash(new SecureString("".toCharArray()));, +    static final ReservedUserInfo DISABLED_DEFAULT_USER_INFO = new ReservedUserInfo(EMPTY_PASSWORD_HASH, false, true);, +    static final ReservedUserInfo ENABLED_DEFAULT_USER_INFO = new ReservedUserInfo(EMPTY_PASSWORD_HASH, true, true);, +        final char[] hash = BOOTSTRAP_ELASTIC_PASSWORD.get(settings).length() == 0 ? EMPTY_PASSWORD_HASH :, +                Hasher.BCRYPT.hash(BOOTSTRAP_ELASTIC_PASSWORD.get(settings));, +        bootstrapUserInfo = new ReservedUserInfo(hash, true, hash == EMPTY_PASSWORD_HASH);, +                        } else if (Hasher.BCRYPT.verify(token.credentials(), userInfo.passwordHash)) {, +                        assert userInfo.passwordHash != DISABLED_DEFAULT_USER_INFO.passwordHash : "default user info must be cloned";, +                        assert userInfo.passwordHash != bootstrapUserInfo.passwordHash : "bootstrap user info must be cloned";, +, +            listener.onResponse(DISABLED_DEFAULT_USER_INFO.deepClone());, +            listener.onResponse(bootstrapUserInfo.deepClone());, +                    if (ElasticUser.NAME.equals(username)) {, +                        listener.onResponse(bootstrapUserInfo.deepClone());]