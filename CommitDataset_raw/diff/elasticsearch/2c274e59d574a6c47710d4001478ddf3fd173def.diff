[+++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.index.indexing.ShardIndexingService;, +    private final ShardIndexingService indexingService;, +, +                       IndexSettingsService indexSettingsService, ShardIndexingService indexingService, @Nullable IndicesWarmer warmer,, +        this.indexingService = indexingService;, +, +            indexingService.postCreateUnderLock(create);, +, +            indexingService.postIndexUnderLock(index);, +, +            indexingService.postDeleteUnderLock(delete);, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.index.indexing.ShardIndexingService;, +    private final ShardIndexingService indexingService;, +, +                       IndexSettingsService indexSettingsService, ShardIndexingService indexingService, @Nullable IndicesWarmer warmer,, +        this.indexingService = indexingService;, +, +            indexingService.postCreateUnderLock(create);, +, +            indexingService.postIndexUnderLock(index);, +, +            indexingService.postDeleteUnderLock(delete);, +++ b/src/main/java/org/elasticsearch/index/indexing/IndexingOperationListener.java, + * An indexing listener for indexing, delete, events., +    /**, +     * Called before the indexing occurs., +     */, +    /**, +     * Called after the indexing occurs, under a locking scheme to maintain, +     * concurrent updates to the same doc., +     * <p/>, +     * Note, long operations should not occur under this callback., +     */, +    public void postCreateUnderLock(Engine.Create create) {, +, +    }, +, +    /**, +     * Called after the indexing operation occurred., +     */, +    /**, +     * Called before the indexing occurs., +     */, +    /**, +     * Called after the indexing occurs, under a locking scheme to maintain, +     * concurrent updates to the same doc., +     * <p/>, +     * Note, long operations should not occur under this callback., +     */, +    public void postIndexUnderLock(Engine.Index index) {, +, +    }, +, +    /**, +     * Called after the indexing operation occurred., +     */, +    /**, +     * Called before the delete occurs., +     */, +    /**, +     * Called after the delete occurs, under a locking scheme to maintain, +     * concurrent updates to the same doc., +     * <p/>, +     * Note, long operations should not occur under this callback., +     */, +    public void postDeleteUnderLock(Engine.Delete delete) {, +, +    }, +, +    /**, +     * Called after the delete operation occurred., +     */, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.index.indexing.ShardIndexingService;, +    private final ShardIndexingService indexingService;, +, +                       IndexSettingsService indexSettingsService, ShardIndexingService indexingService, @Nullable IndicesWarmer warmer,, +        this.indexingService = indexingService;, +, +            indexingService.postCreateUnderLock(create);, +, +            indexingService.postIndexUnderLock(index);, +, +            indexingService.postDeleteUnderLock(delete);, +++ b/src/main/java/org/elasticsearch/index/indexing/IndexingOperationListener.java, + * An indexing listener for indexing, delete, events., +    /**, +     * Called before the indexing occurs., +     */, +    /**, +     * Called after the indexing occurs, under a locking scheme to maintain, +     * concurrent updates to the same doc., +     * <p/>, +     * Note, long operations should not occur under this callback., +     */, +    public void postCreateUnderLock(Engine.Create create) {, +, +    }]