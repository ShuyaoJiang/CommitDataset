[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-painless[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]painless[/\\]antlr[/\\]PainlessLexer\.java" checks="." />, +  <suppress files="modules[/\\]lang-painless[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]painless[/\\]antlr[/\\]PainlessParser(|BaseVisitor|Visitor)\.java" checks="." />, +  <suppress files="modules[/\\]reindex[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]client[/\\]documentation[/\\]ReindexDocumentationIT.java" id="SnippetLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-painless[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]painless[/\\]antlr[/\\]PainlessLexer\.java" checks="." />, +  <suppress files="modules[/\\]lang-painless[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]painless[/\\]antlr[/\\]PainlessParser(|BaseVisitor|Visitor)\.java" checks="." />, +  <suppress files="modules[/\\]reindex[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]client[/\\]documentation[/\\]ReindexDocumentationIT.java" id="SnippetLength" />, +++ b/client/rest-high-level/build.gradle, +File nodeCert = file("./testnode.crt"), +File nodeTrustStore = file("./testnode.jks"), +  systemProperty 'es.scripting.update.ctx_in_params', 'false', +  // Truststore settings are not used since TLS is not enabled. Included for testing the get certificates API, +  setting 'xpack.ssl.certificate_authorities', 'testnode.crt', +  setting 'xpack.security.transport.ssl.truststore.path', 'testnode.jks', +  setting 'xpack.security.transport.ssl.truststore.password', 'testnode', +  extraConfigFile nodeCert.name, nodeCert, +  extraConfigFile nodeTrustStore.name, nodeTrustStore, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-painless[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]painless[/\\]antlr[/\\]PainlessLexer\.java" checks="." />, +  <suppress files="modules[/\\]lang-painless[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]painless[/\\]antlr[/\\]PainlessParser(|BaseVisitor|Visitor)\.java" checks="." />, +  <suppress files="modules[/\\]reindex[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]client[/\\]documentation[/\\]ReindexDocumentationIT.java" id="SnippetLength" />, +++ b/client/rest-high-level/build.gradle, +File nodeCert = file("./testnode.crt"), +File nodeTrustStore = file("./testnode.jks"), +  systemProperty 'es.scripting.update.ctx_in_params', 'false', +  // Truststore settings are not used since TLS is not enabled. Included for testing the get certificates API, +  setting 'xpack.ssl.certificate_authorities', 'testnode.crt', +  setting 'xpack.security.transport.ssl.truststore.path', 'testnode.jks', +  setting 'xpack.security.transport.ssl.truststore.password', 'testnode', +  extraConfigFile nodeCert.name, nodeCert, +  extraConfigFile nodeTrustStore.name, nodeTrustStore, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.client.license.StartBasicRequest;, +import org.elasticsearch.client.license.StartBasicResponse;, +     * Initiates an indefinite basic license., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startBasic, options,, +            StartBasicResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously initiates an indefinite basic license., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void startBasicAsync(StartBasicRequest request, RequestOptions options,, +                                ActionListener<StartBasicResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startBasic, options,, +            StartBasicResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-painless[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]painless[/\\]antlr[/\\]PainlessLexer\.java" checks="." />, +  <suppress files="modules[/\\]lang-painless[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]painless[/\\]antlr[/\\]PainlessParser(|BaseVisitor|Visitor)\.java" checks="." />, +  <suppress files="modules[/\\]reindex[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]client[/\\]documentation[/\\]ReindexDocumentationIT.java" id="SnippetLength" />, +++ b/client/rest-high-level/build.gradle, +File nodeCert = file("./testnode.crt"), +File nodeTrustStore = file("./testnode.jks"), +  systemProperty 'es.scripting.update.ctx_in_params', 'false', +  // Truststore settings are not used since TLS is not enabled. Included for testing the get certificates API, +  setting 'xpack.ssl.certificate_authorities', 'testnode.crt', +  setting 'xpack.security.transport.ssl.truststore.path', 'testnode.jks', +  setting 'xpack.security.transport.ssl.truststore.password', 'testnode', +  extraConfigFile nodeCert.name, nodeCert, +  extraConfigFile nodeTrustStore.name, nodeTrustStore, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.client.license.StartBasicRequest;, +import org.elasticsearch.client.license.StartBasicResponse;, +     * Initiates an indefinite basic license., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startBasic, options,, +            StartBasicResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously initiates an indefinite basic license., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void startBasicAsync(StartBasicRequest request, RequestOptions options,, +                                ActionListener<StartBasicResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startBasic, options,, +            StartBasicResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseRequestConverters.java, +import org.apache.http.client.methods.HttpPost;, +import org.elasticsearch.client.license.StartBasicRequest;, +]