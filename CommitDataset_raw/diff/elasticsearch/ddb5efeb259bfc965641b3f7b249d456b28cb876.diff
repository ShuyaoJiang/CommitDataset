[+++ b/src/main/java/org/elasticsearch/watcher/input/InputRegistry.java, +        if (parser.currentToken() != XContentParser.Token.START_OBJECT) {, +            throw new InputException("could not parse input for watch [{}]. expected an object representing the input, but found [{}] instead", watchId, parser.currentToken());, +        }, +, +            } else if (type == null) {, +                throw new InputException("could not parse input for watch [{}]. expected field indicating the input type, but found [{}] instead", watchId, token);, +            } else if (token == XContentParser.Token.START_OBJECT) {, +            } else {, +                throw new InputException("could not parse input for watch [{}]. expected an object representing input [{}], but found [{}] instead", watchId, type, token);, +, +        if (input == null) {, +            throw new InputException("could not parse input for watch [{}]. expected field indicating the input type, but found an empty object instead", watchId, token);, +        }, +, +++ b/src/main/java/org/elasticsearch/watcher/input/InputRegistry.java, +        if (parser.currentToken() != XContentParser.Token.START_OBJECT) {, +            throw new InputException("could not parse input for watch [{}]. expected an object representing the input, but found [{}] instead", watchId, parser.currentToken());, +        }, +, +            } else if (type == null) {, +                throw new InputException("could not parse input for watch [{}]. expected field indicating the input type, but found [{}] instead", watchId, token);, +            } else if (token == XContentParser.Token.START_OBJECT) {, +            } else {, +                throw new InputException("could not parse input for watch [{}]. expected an object representing input [{}], but found [{}] instead", watchId, type, token);, +, +        if (input == null) {, +            throw new InputException("could not parse input for watch [{}]. expected field indicating the input type, but found an empty object instead", watchId, token);, +        }, +, +++ b/src/test/java/org/elasticsearch/watcher/input/InputRegistryTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.watcher.input;, +, +import org.elasticsearch.common.collect.ImmutableMap;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.junit.Test;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +, +/**, + *, + */, +public class InputRegistryTests extends ElasticsearchTestCase {, +, +    @Test(expected = InputException.class), +    public void testParse_EmptyInput() throws Exception {, +        InputRegistry registry = new InputRegistry(ImmutableMap.<String, InputFactory>of());, +        XContentParser parser = JsonXContent.jsonXContent.createParser(, +                jsonBuilder().startObject().endObject().bytes());, +        parser.nextToken();, +        registry.parse("_id", parser);, +        fail("expecting an exception when trying to parse an empty input");, +    }, +, +    @Test(expected = InputException.class), +    public void testParse_ArrayInput() throws Exception {, +        InputRegistry registry = new InputRegistry(ImmutableMap.<String, InputFactory>of());, +        XContentParser parser = JsonXContent.jsonXContent.createParser(, +                jsonBuilder().startArray().endArray().bytes());, +        parser.nextToken();, +        registry.parse("_id", parser);, +        fail("expecting an exception when trying to parse an input that is not an object");, +    }, +}]