[+++ b/core/src/main/java/org/elasticsearch/action/ingest/TrackingResultProcessor.java, +import java.util.Collections;, +    private final boolean ignoreFailure;, +    public TrackingResultProcessor(boolean ignoreFailure, Processor actualProcessor, List<SimulateProcessorResult> processorResultList) {, +        this.ignoreFailure = ignoreFailure;, +            if (ignoreFailure) {, +                processorResultList.add(new SimulateProcessorResult(actualProcessor.getTag(), new IngestDocument(ingestDocument)));, +            } else {, +            }, +                processors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +                onFailureProcessors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +        return new CompoundProcessor(compoundProcessor.isIgnoreFailure(), processors, onFailureProcessors);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/TrackingResultProcessor.java, +import java.util.Collections;, +    private final boolean ignoreFailure;, +    public TrackingResultProcessor(boolean ignoreFailure, Processor actualProcessor, List<SimulateProcessorResult> processorResultList) {, +        this.ignoreFailure = ignoreFailure;, +            if (ignoreFailure) {, +                processorResultList.add(new SimulateProcessorResult(actualProcessor.getTag(), new IngestDocument(ingestDocument)));, +            } else {, +            }, +                processors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +                onFailureProcessors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +        return new CompoundProcessor(compoundProcessor.isIgnoreFailure(), processors, onFailureProcessors);, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +, +, +            if (onFailureProcessorConfigs != null && onFailureProcessors.isEmpty()) {, +                throw newConfigurationException(processor.getType(), processor.getTag(), Pipeline.ON_FAILURE_KEY,, +                    "processors list cannot be empty");, +            }, +            if (config.isEmpty() == false) {, +++ b/core/src/main/java/org/elasticsearch/action/ingest/TrackingResultProcessor.java, +import java.util.Collections;, +    private final boolean ignoreFailure;, +    public TrackingResultProcessor(boolean ignoreFailure, Processor actualProcessor, List<SimulateProcessorResult> processorResultList) {, +        this.ignoreFailure = ignoreFailure;, +            if (ignoreFailure) {, +                processorResultList.add(new SimulateProcessorResult(actualProcessor.getTag(), new IngestDocument(ingestDocument)));, +            } else {, +            }, +                processors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +                onFailureProcessors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +        return new CompoundProcessor(compoundProcessor.isIgnoreFailure(), processors, onFailureProcessors);, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +, +, +            if (onFailureProcessorConfigs != null && onFailureProcessors.isEmpty()) {, +                throw newConfigurationException(processor.getType(), processor.getTag(), Pipeline.ON_FAILURE_KEY,, +                    "processors list cannot be empty");, +            }, +            if (config.isEmpty() == false) {, +++ b/core/src/main/java/org/elasticsearch/ingest/Pipeline.java, +            if (onFailureProcessorConfigs != null && onFailureProcessors.isEmpty()) {, +                throw new ElasticsearchParseException("pipeline [" + id + "] cannot have an empty on_failure option defined");, +            }, +++ b/core/src/main/java/org/elasticsearch/action/ingest/TrackingResultProcessor.java, +import java.util.Collections;, +    private final boolean ignoreFailure;, +    public TrackingResultProcessor(boolean ignoreFailure, Processor actualProcessor, List<SimulateProcessorResult> processorResultList) {, +        this.ignoreFailure = ignoreFailure;, +            if (ignoreFailure) {, +                processorResultList.add(new SimulateProcessorResult(actualProcessor.getTag(), new IngestDocument(ingestDocument)));, +            } else {, +            }, +                processors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +                onFailureProcessors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +        return new CompoundProcessor(compoundProcessor.isIgnoreFailure(), processors, onFailureProcessors);, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +, +, +            if (onFailureProcessorConfigs != null && onFailureProcessors.isEmpty()) {, +                throw newConfigurationException(processor.getType(), processor.getTag(), Pipeline.ON_FAILURE_KEY,, +                    "processors list cannot be empty");, +            }, +            if (config.isEmpty() == false) {, +++ b/core/src/main/java/org/elasticsearch/ingest/Pipeline.java, +            if (onFailureProcessorConfigs != null && onFailureProcessors.isEmpty()) {, +                throw new ElasticsearchParseException("pipeline [" + id + "] cannot have an empty on_failure option defined");, +            }, +++ b/core/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java, +    public void testExecuteVerboseItemExceptionWithIgnoreFailure() throws Exception {, +        TestProcessor testProcessor = new TestProcessor("processor_0", "mock", ingestDocument -> { throw new RuntimeException("processor failed"); });, +        CompoundProcessor processor = new CompoundProcessor(true, Collections.singletonList(testProcessor), Collections.emptyList());, +        Pipeline pipeline = new Pipeline("_id", "_description", new CompoundProcessor(processor));, +        SimulateDocumentResult actualItemResponse = executionService.executeDocument(pipeline, ingestDocument, true);, +        assertThat(testProcessor.getInvokedCounter(), equalTo(1));, +        assertThat(actualItemResponse, instanceOf(SimulateDocumentVerboseResult.class));, +        SimulateDocumentVerboseResult simulateDocumentVerboseResult = (SimulateDocumentVerboseResult) actualItemResponse;, +        assertThat(simulateDocumentVerboseResult.getProcessorResults().size(), equalTo(1));, +        assertThat(simulateDocumentVerboseResult.getProcessorResults().get(0).getProcessorTag(), equalTo("processor_0"));, +        assertThat(simulateDocumentVerboseResult.getProcessorResults().get(0).getFailure(), nullValue());, +        assertThat(simulateDocumentVerboseResult.getProcessorResults().get(0).getIngestDocument(), not(sameInstance(ingestDocument)));, +        assertIngestDocument(simulateDocumentVerboseResult.getProcessorResults().get(0).getIngestDocument(), ingestDocument);, +        assertThat(simulateDocumentVerboseResult.getProcessorResults().get(0).getIngestDocument().getSourceAndMetadata(), not(sameInstance(ingestDocument.getSourceAndMetadata())));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/ingest/TrackingResultProcessor.java, +import java.util.Collections;, +    private final boolean ignoreFailure;]