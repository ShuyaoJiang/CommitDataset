[+++ b/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java, +        this.connectOnNetworkDisconnect = componentSettings.getAsBoolean("connect_on_network_disconnect", false);, +++ b/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java, +        this.connectOnNetworkDisconnect = componentSettings.getAsBoolean("connect_on_network_disconnect", false);, +++ b/src/main/java/org/elasticsearch/discovery/zen/fd/NodesFaultDetection.java, +        this.connectOnNetworkDisconnect = componentSettings.getAsBoolean("connect_on_network_disconnect", false);, +++ b/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java, +        this.connectOnNetworkDisconnect = componentSettings.getAsBoolean("connect_on_network_disconnect", false);, +++ b/src/main/java/org/elasticsearch/discovery/zen/fd/NodesFaultDetection.java, +        this.connectOnNetworkDisconnect = componentSettings.getAsBoolean("connect_on_network_disconnect", false);, +++ b/src/test/java/org/elasticsearch/discovery/ZenFaultDetectionTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.discovery;, +, +import com.google.common.collect.ImmutableMap;, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.discovery.zen.DiscoveryNodesProvider;, +import org.elasticsearch.discovery.zen.fd.MasterFaultDetection;, +import org.elasticsearch.discovery.zen.fd.NodesFaultDetection;, +import org.elasticsearch.node.service.NodeService;, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.elasticsearch.test.transport.MockTransportService;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.TransportConnectionListener;, +import org.elasticsearch.transport.local.LocalTransport;, +import org.hamcrest.Matcher;, +import org.hamcrest.Matchers;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +, +import static org.hamcrest.Matchers.equalTo;, +, +public class ZenFaultDetectionTests extends ElasticsearchTestCase {, +, +    protected ThreadPool threadPool;, +, +    protected static final Version version0 = Version.fromId(/*0*/99);, +    protected DiscoveryNode nodeA;, +    protected MockTransportService serviceA;, +, +    protected static final Version version1 = Version.fromId(199);, +    protected DiscoveryNode nodeB;, +    protected MockTransportService serviceB;, +, +    @Before, +    public void setUp() throws Exception {, +        super.setUp();, +        threadPool = new ThreadPool();, +        serviceA = build(ImmutableSettings.builder().put("name", "TS_A").build(), version0);, +        nodeA = new DiscoveryNode("TS_A", "TS_A", serviceA.boundAddress().publishAddress(), ImmutableMap.<String, String>of(), version0);, +        serviceB = build(ImmutableSettings.builder().put("name", "TS_B").build(), version1);, +        nodeB = new DiscoveryNode("TS_B", "TS_B", serviceB.boundAddress().publishAddress(), ImmutableMap.<String, String>of(), version1);, +, +        // wait till all nodes are properly connected and the event has been sent, so tests in this class, +        // will not get this callback called on the connections done in this setup, +        final CountDownLatch latch = new CountDownLatch(4);, +        TransportConnectionListener waitForConnection = new TransportConnectionListener() {, +            @Override, +            public void onNodeConnected(DiscoveryNode node) {, +                latch.countDown();, +            }, +, +            @Override, +            public void onNodeDisconnected(DiscoveryNode node) {, +                fail("disconnect should not be called " + node);, +            }, +        };, +        serviceA.addConnectionListener(waitForConnection);, +        serviceB.addConnectionListener(waitForConnection);, +, +        serviceA.connectToNode(nodeB);, +        serviceA.connectToNode(nodeA);, +        serviceB.connectToNode(nodeA);, +        serviceB.connectToNode(nodeB);]