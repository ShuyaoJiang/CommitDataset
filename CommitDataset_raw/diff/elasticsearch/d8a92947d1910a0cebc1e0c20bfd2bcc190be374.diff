[+++ b/src/test/java/org/elasticsearch/gateway/MetaStateServiceTests.java, +import org.elasticsearch.common.xcontent.XContentType;, +            builder.put(MetaStateService.FORMAT_SETTING, randomFrom(XContentType.values()).shortName());, +++ b/src/test/java/org/elasticsearch/gateway/MetaStateServiceTests.java, +import org.elasticsearch.common.xcontent.XContentType;, +            builder.put(MetaStateService.FORMAT_SETTING, randomFrom(XContentType.values()).shortName());, +++ b/src/test/java/org/elasticsearch/mlt/MoreLikeThisActionTests.java, +        final String[] numericTypes = new String[]{"byte", "short", "integer", "long"};, +                        .startObject("int_value").field("type", randomFrom(numericTypes)).endObject(), +++ b/src/test/java/org/elasticsearch/gateway/MetaStateServiceTests.java, +import org.elasticsearch.common.xcontent.XContentType;, +            builder.put(MetaStateService.FORMAT_SETTING, randomFrom(XContentType.values()).shortName());, +++ b/src/test/java/org/elasticsearch/mlt/MoreLikeThisActionTests.java, +        final String[] numericTypes = new String[]{"byte", "short", "integer", "long"};, +                        .startObject("int_value").field("type", randomFrom(numericTypes)).endObject(), +++ b/src/test/java/org/elasticsearch/test/ElasticsearchTestCase.java, +    private static Thread.UncaughtExceptionHandler defaultHandler;, +    , +    protected final ESLogger logger = Loggers.getLogger(getClass());, +    , +    @BeforeClass, +    public static void setBeforeClass() throws Exception {, +        closeAfterSuite(new Closeable() {, +            @Override, +            public void close() throws IOException {, +                assertAllFilesClosed();, +            }, +        });, +        closeAfterSuite(new Closeable() {, +            @Override, +            public void close() throws IOException {, +                assertAllSearchersClosed();, +            }, +        });, +        defaultHandler = Thread.getDefaultUncaughtExceptionHandler();, +        Thread.setDefaultUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler(defaultHandler));, +        Requests.CONTENT_TYPE = randomFrom(XContentType.values());, +        Requests.INDEX_CONTENT_TYPE = randomFrom(XContentType.values());, +    }, +, +    @AfterClass, +    public static void resetAfterClass() {, +        Thread.setDefaultUncaughtExceptionHandler(defaultHandler);, +        Requests.CONTENT_TYPE = XContentType.SMILE;, +        Requests.INDEX_CONTENT_TYPE = XContentType.JSON;, +    }, +    , +    @After, +    public void ensureAllPagesReleased() throws Exception {, +        MockPageCacheRecycler.ensureAllPagesAreReleased();, +    }, +, +    @After, +    public void ensureAllArraysReleased() throws Exception {, +        MockBigArrays.ensureAllArraysAreReleased();, +    }, +, +    @After, +    public void ensureAllSearchContextsReleased() throws Exception {, +        assertBusy(new Runnable() {, +            @Override, +            public void run() {, +                MockSearchService.assertNoInFLightContext();, +            }, +        });, +    }, +, +     * Shortcut for {@link RandomizedContext#getRandom()}. Even though this method, +     * is static, it returns per-thread {@link Random} instance, so no race conditions, +     * can occur., +     *, +     * <p>It is recommended that specific methods are used to pick random values., +     */, +    public static Random getRandom() {, +        return random();, +    }, +    , +    /**, +     * Shortcut for {@link RandomizedContext#current()}. , +     */, +    public static RandomizedContext getContext() {, +        return RandomizedTest.getContext();, +    }, +    , +    /**, +++ b/src/test/java/org/elasticsearch/gateway/MetaStateServiceTests.java, +import org.elasticsearch.common.xcontent.XContentType;, +            builder.put(MetaStateService.FORMAT_SETTING, randomFrom(XContentType.values()).shortName());, +++ b/src/test/java/org/elasticsearch/mlt/MoreLikeThisActionTests.java, +        final String[] numericTypes = new String[]{"byte", "short", "integer", "long"};, +                        .startObject("int_value").field("type", randomFrom(numericTypes)).endObject(), +++ b/src/test/java/org/elasticsearch/test/ElasticsearchTestCase.java, +    private static Thread.UncaughtExceptionHandler defaultHandler;, +    , +    protected final ESLogger logger = Loggers.getLogger(getClass());, +    , +    @BeforeClass, +    public static void setBeforeClass() throws Exception {, +        closeAfterSuite(new Closeable() {, +            @Override]