[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/open/OpenIndexClusterStateUpdateRequest.java, +import org.elasticsearch.action.support.ActiveShardCount;, +    private ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +, +, +    public ActiveShardCount waitForActiveShards() {, +        return waitForActiveShards;, +    }, +, +    public OpenIndexClusterStateUpdateRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {, +        this.waitForActiveShards = waitForActiveShards;, +        return this;, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/open/OpenIndexClusterStateUpdateRequest.java, +import org.elasticsearch.action.support.ActiveShardCount;, +    private ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +, +, +    public ActiveShardCount waitForActiveShards() {, +        return waitForActiveShards;, +    }, +, +    public OpenIndexClusterStateUpdateRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {, +        this.waitForActiveShards = waitForActiveShards;, +        return this;, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/open/OpenIndexRequest.java, +import org.elasticsearch.Version;, +import org.elasticsearch.action.support.ActiveShardCount;, +    private ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +    public ActiveShardCount waitForActiveShards() {, +        return waitForActiveShards;, +    }, +, +    /**, +     * Sets the number of shard copies that should be active for indices opening to return., +     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy, +     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to, +     * wait for all shards (primary and all replicas) to be active before returning., +     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any, +     * non-negative integer, up to the number of copies per shard (number of replicas + 1),, +     * to wait for the desired amount of shard copies to become active before returning., +     * Indices opening will only wait up until the timeout value for the number of shard copies, +     * to be active before returning.  Check {@link OpenIndexResponse#isShardsAcknowledged()} to, +     * determine if the requisite shard copies were all started before returning or timing out., +     *, +     * @param waitForActiveShards number of active shard copies to wait on, +     */, +    public OpenIndexRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {, +        this.waitForActiveShards = waitForActiveShards;, +        return this;, +    }, +, +    /**, +     * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public OpenIndexRequest waitForActiveShards(final int waitForActiveShards) {, +        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            waitForActiveShards = ActiveShardCount.readFrom(in);, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            waitForActiveShards.writeTo(out);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/open/OpenIndexClusterStateUpdateRequest.java, +import org.elasticsearch.action.support.ActiveShardCount;, +    private ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +, +, +    public ActiveShardCount waitForActiveShards() {, +        return waitForActiveShards;, +    }, +, +    public OpenIndexClusterStateUpdateRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {, +        this.waitForActiveShards = waitForActiveShards;, +        return this;, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/open/OpenIndexRequest.java, +import org.elasticsearch.Version;, +import org.elasticsearch.action.support.ActiveShardCount;, +    private ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +    public ActiveShardCount waitForActiveShards() {, +        return waitForActiveShards;, +    }, +, +    /**, +     * Sets the number of shard copies that should be active for indices opening to return., +     * Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy, +     * (the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to, +     * wait for all shards (primary and all replicas) to be active before returning., +     * Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any, +     * non-negative integer, up to the number of copies per shard (number of replicas + 1),, +     * to wait for the desired amount of shard copies to become active before returning., +     * Indices opening will only wait up until the timeout value for the number of shard copies, +     * to be active before returning.  Check {@link OpenIndexResponse#isShardsAcknowledged()} to, +     * determine if the requisite shard copies were all started before returning or timing out.]