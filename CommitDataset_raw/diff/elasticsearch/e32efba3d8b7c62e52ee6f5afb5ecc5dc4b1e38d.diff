[+++ b/src/test/java/org/elasticsearch/test/integration/AbstractNodesTests.java, +import com.google.common.collect.ImmutableSet;, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.Iterator;, +import java.util.Set;, +import static com.google.common.collect.Sets.newHashSet;, +, +    public boolean waitForNodesToShutdown(TimeValue timeout, String... nodes) throws InterruptedException {, +        long start = System.currentTimeMillis();, +        Set<String> activeNodes = newHashSet(nodes);, +        do {, +            Thread.sleep(100);, +            Iterator<String> nodeToCheck = activeNodes.iterator();, +            while (nodeToCheck.hasNext()) {, +                String id = nodeToCheck.next();, +                if (node(id).isClosed()) {, +                    nodeToCheck.remove();, +                } else {, +                    break;, +                }, +            }, +        } while (!activeNodes.isEmpty() && (System.currentTimeMillis() - start) < timeout.millis());, +        return activeNodes.isEmpty();, +    }, +, +    public ImmutableSet<ClusterBlock> waitForNoBlocks(TimeValue timeout, String node) throws InterruptedException {, +        long start = System.currentTimeMillis();, +        ImmutableSet<ClusterBlock> blocks;, +        do {, +            blocks = client(node).admin().cluster().prepareState().setLocal(true).execute().actionGet(), +                    .state().blocks().global(ClusterBlockLevel.METADATA);, +        }, +        while (!blocks.isEmpty() && (System.currentTimeMillis() - start) < timeout.millis());, +        return blocks;, +    }, +++ b/src/test/java/org/elasticsearch/test/integration/AbstractNodesTests.java, +import com.google.common.collect.ImmutableSet;, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.Iterator;, +import java.util.Set;, +import static com.google.common.collect.Sets.newHashSet;, +, +    public boolean waitForNodesToShutdown(TimeValue timeout, String... nodes) throws InterruptedException {, +        long start = System.currentTimeMillis();, +        Set<String> activeNodes = newHashSet(nodes);, +        do {, +            Thread.sleep(100);, +            Iterator<String> nodeToCheck = activeNodes.iterator();, +            while (nodeToCheck.hasNext()) {, +                String id = nodeToCheck.next();, +                if (node(id).isClosed()) {, +                    nodeToCheck.remove();, +                } else {, +                    break;, +                }, +            }, +        } while (!activeNodes.isEmpty() && (System.currentTimeMillis() - start) < timeout.millis());, +        return activeNodes.isEmpty();, +    }, +, +    public ImmutableSet<ClusterBlock> waitForNoBlocks(TimeValue timeout, String node) throws InterruptedException {, +        long start = System.currentTimeMillis();, +        ImmutableSet<ClusterBlock> blocks;, +        do {, +            blocks = client(node).admin().cluster().prepareState().setLocal(true).execute().actionGet(), +                    .state().blocks().global(ClusterBlockLevel.METADATA);, +        }, +        while (!blocks.isEmpty() && (System.currentTimeMillis() - start) < timeout.millis());, +        return blocks;, +    }, +++ b/src/test/java/org/elasticsearch/test/integration/gateway/local/SimpleRecoveryLocalGatewayTests.java, +        assertThat(waitForNodesToShutdown(TimeValue.timeValueSeconds(30), "node1", "node2", "node3", "node4"), equalTo(true));, +        assertThat(waitForNodesToShutdown(TimeValue.timeValueSeconds(30), "node1", "node2", "node3", "node4"), equalTo(true));, +++ b/src/test/java/org/elasticsearch/test/integration/AbstractNodesTests.java, +import com.google.common.collect.ImmutableSet;, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.Iterator;, +import java.util.Set;, +import static com.google.common.collect.Sets.newHashSet;, +, +    public boolean waitForNodesToShutdown(TimeValue timeout, String... nodes) throws InterruptedException {, +        long start = System.currentTimeMillis();, +        Set<String> activeNodes = newHashSet(nodes);, +        do {, +            Thread.sleep(100);, +            Iterator<String> nodeToCheck = activeNodes.iterator();, +            while (nodeToCheck.hasNext()) {, +                String id = nodeToCheck.next();, +                if (node(id).isClosed()) {, +                    nodeToCheck.remove();, +                } else {, +                    break;, +                }, +            }]