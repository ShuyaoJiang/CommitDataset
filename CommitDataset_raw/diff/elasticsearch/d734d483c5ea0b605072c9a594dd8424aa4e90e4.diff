[+++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphLicensee.java, +        return licensed && localStatus.isActive();, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphLicensee.java, +        return licensed && localStatus.isActive();, +++ /dev/null, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphLicensee.java, +        return licensed && localStatus.isActive();, +++ /dev/null, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicenseService.java, +    /**, +     * Duration of grace period after a license has expired, +     */, +    public static final TimeValue GRACE_PERIOD_DURATION = days(7);, +, +    public Licensee.Status licenseeStatus(License license) {, +            return new Licensee.Status(License.OperationMode.MISSING, false);, +        long time = clock.millis();, +        boolean active = time >= license.issueDate() &&, +            time < license.expiryDate() + GRACE_PERIOD_DURATION.getMillis();, +, +        return new Licensee.Status(license.operationMode(), active);, +            long time = clock.millis();, +            boolean active = time >= license.issueDate() &&, +                time < license.expiryDate() + GRACE_PERIOD_DURATION.getMillis();, +, +            Licensee.Status status = new Licensee.Status(license.operationMode(), active);, +            if (active) {, +                if (time < license.expiryDate()) {, +                    logger.debug("license [{}] - valid", license.uid());, +                } else {, +                    logger.warn("license [{}] - grace", license.uid());, +                }, +            } else {, +                logger.warn("license [{}] - expired", license.uid());, +                scheduler.add(new SchedulerEngine.Job(LICENSE_JOB, nextLicenseCheck(license)));, +    // pkg private for tests, +    static SchedulerEngine.Schedule nextLicenseCheck(License license) {, +        return (startTime, time) -> {, +            if (time < license.issueDate()) {, +                // when we encounter a license with a future issue date, +                // which can happen with autogenerated license,, +                // we want to schedule a notification on the license issue date, +                // so the license is notificed once it is valid, +                // see https://github.com/elastic/x-plugins/issues/983, +                return license.issueDate();, +            } else if (time < license.expiryDate()) {, +                return license.expiryDate();, +            } else if (time < license.expiryDate() + GRACE_PERIOD_DURATION.getMillis()) {, +                return license.expiryDate() + GRACE_PERIOD_DURATION.getMillis();, +            }, +            return -1; // license is expired, no need to check again, +        };, +    }, +, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/GraphLicensee.java, +        return licensed && localStatus.isActive();, +++ /dev/null, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicenseService.java, +    /**, +     * Duration of grace period after a license has expired, +     */, +    public static final TimeValue GRACE_PERIOD_DURATION = days(7);, +, +    public Licensee.Status licenseeStatus(License license) {, +            return new Licensee.Status(License.OperationMode.MISSING, false);, +        long time = clock.millis();, +        boolean active = time >= license.issueDate() &&, +            time < license.expiryDate() + GRACE_PERIOD_DURATION.getMillis();, +, +        return new Licensee.Status(license.operationMode(), active);, +            long time = clock.millis();, +            boolean active = time >= license.issueDate() &&, +                time < license.expiryDate() + GRACE_PERIOD_DURATION.getMillis();, +, +            Licensee.Status status = new Licensee.Status(license.operationMode(), active);, +            if (active) {, +                if (time < license.expiryDate()) {, +                    logger.debug("license [{}] - valid", license.uid());, +                } else {, +                    logger.warn("license [{}] - grace", license.uid());, +                }, +            } else {, +                logger.warn("license [{}] - expired", license.uid());, +                scheduler.add(new SchedulerEngine.Job(LICENSE_JOB, nextLicenseCheck(license)));, +    // pkg private for tests, +    static SchedulerEngine.Schedule nextLicenseCheck(License license) {, +        return (startTime, time) -> {, +            if (time < license.issueDate()) {, +                // when we encounter a license with a future issue date, +                // which can happen with autogenerated license,, +                // we want to schedule a notification on the license issue date, +                // so the license is notificed once it is valid, +                // see https://github.com/elastic/x-plugins/issues/983, +                return license.issueDate();, +            } else if (time < license.expiryDate()) {, +                return license.expiryDate();, +            } else if (time < license.expiryDate() + GRACE_PERIOD_DURATION.getMillis()) {, +                return license.expiryDate() + GRACE_PERIOD_DURATION.getMillis();, +            }, +            return -1; // license is expired, no need to check again]