[+++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +import static org.elasticsearch.index.rankeval.EvaluationMetric.joinHitsWithRatings;, +public class DiscountedCumulativeGain implements EvaluationMetric {, +    private final boolean normalize;, +, +    private final Integer unknownDocRating;, +        this(false, null);, +            // unknownDocRating might be null, which means it will be unrated docs are, +            // ignored in the dcg calculation, +            // we still need to add them as a placeholder so the rank of the subsequent, +            // ratings is correct, +    private static final ConstructingObjectParser<DiscountedCumulativeGain, Void> PARSER = new ConstructingObjectParser<>("dcg_at",, +            args -> {, +                Boolean normalized = (Boolean) args[0];, +                return new DiscountedCumulativeGain(normalized == null ? false : normalized, (Integer) args[1]);, +            });, +        PARSER.declareBoolean(optionalConstructorArg(), NORMALIZE_FIELD);, +        PARSER.declareInt(optionalConstructorArg(), UNKNOWN_DOC_RATING_FIELD);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +import static org.elasticsearch.index.rankeval.EvaluationMetric.joinHitsWithRatings;, +public class DiscountedCumulativeGain implements EvaluationMetric {, +    private final boolean normalize;, +, +    private final Integer unknownDocRating;, +        this(false, null);, +            // unknownDocRating might be null, which means it will be unrated docs are, +            // ignored in the dcg calculation, +            // we still need to add them as a placeholder so the rank of the subsequent, +            // ratings is correct, +    private static final ConstructingObjectParser<DiscountedCumulativeGain, Void> PARSER = new ConstructingObjectParser<>("dcg_at",, +            args -> {, +                Boolean normalized = (Boolean) args[0];, +                return new DiscountedCumulativeGain(normalized == null ? false : normalized, (Integer) args[1]);, +            });, +        PARSER.declareBoolean(optionalConstructorArg(), NORMALIZE_FIELD);, +        PARSER.declareInt(optionalConstructorArg(), UNKNOWN_DOC_RATING_FIELD);, +++ /dev/null, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +import static org.elasticsearch.index.rankeval.EvaluationMetric.joinHitsWithRatings;, +public class DiscountedCumulativeGain implements EvaluationMetric {, +    private final boolean normalize;, +, +    private final Integer unknownDocRating;, +        this(false, null);, +            // unknownDocRating might be null, which means it will be unrated docs are, +            // ignored in the dcg calculation, +            // we still need to add them as a placeholder so the rank of the subsequent, +            // ratings is correct, +    private static final ConstructingObjectParser<DiscountedCumulativeGain, Void> PARSER = new ConstructingObjectParser<>("dcg_at",, +            args -> {, +                Boolean normalized = (Boolean) args[0];, +                return new DiscountedCumulativeGain(normalized == null ? false : normalized, (Integer) args[1]);, +            });, +        PARSER.declareBoolean(optionalConstructorArg(), NORMALIZE_FIELD);, +        PARSER.declareInt(optionalConstructorArg(), UNKNOWN_DOC_RATING_FIELD);, +++ /dev/null, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +import org.elasticsearch.index.rankeval.RatedDocument.DocumentKey;, +        for (DocumentKey key : EvaluationMetric.filterUnknownDocuments(hits)) {, +            builder.startObject();, +            builder.field(RatedDocument.INDEX_FIELD.getPreferredName(), key.getIndex());, +            builder.field(RatedDocument.DOC_ID_FIELD.getPreferredName(), key.getDocId());, +            builder.endObject();, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +import org.elasticsearch.common.xcontent.ConstructingObjectParser;, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.optionalConstructorArg;, +import static org.elasticsearch.index.rankeval.EvaluationMetric.joinHitsWithRatings;, +public class DiscountedCumulativeGain implements EvaluationMetric {, +    private final boolean normalize;, +, +    private final Integer unknownDocRating;, +        this(false, null);, +            // unknownDocRating might be null, which means it will be unrated docs are, +            // ignored in the dcg calculation, +            // we still need to add them as a placeholder so the rank of the subsequent, +            // ratings is correct, +    private static final ConstructingObjectParser<DiscountedCumulativeGain, Void> PARSER = new ConstructingObjectParser<>("dcg_at",, +            args -> {, +                Boolean normalized = (Boolean) args[0];, +                return new DiscountedCumulativeGain(normalized == null ? false : normalized, (Integer) args[1]);, +            });, +        PARSER.declareBoolean(optionalConstructorArg(), NORMALIZE_FIELD);, +        PARSER.declareInt(optionalConstructorArg(), UNKNOWN_DOC_RATING_FIELD);, +++ /dev/null, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +import org.elasticsearch.index.rankeval.RatedDocument.DocumentKey;, +        for (DocumentKey key : EvaluationMetric.filterUnknownDocuments(hits)) {, +            builder.startObject();, +            builder.field(RatedDocument.INDEX_FIELD.getPreferredName(), key.getIndex());, +            builder.field(RatedDocument.DOC_ID_FIELD.getPreferredName(), key.getDocId());, +            builder.endObject();, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvaluationMetric.java, +/*, + * Licensed to Elasticsearch under one or more contributor]