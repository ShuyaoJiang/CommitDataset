[+++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +    private final List<RatedSearchHit> ratedHits = new ArrayList<>();, +        this.ratedHits.addAll(in.readList(RatedSearchHit::new));, +        out.writeList(ratedHits);, +        this.ratedHits.addAll(hits);, +        return this.ratedHits;, +        for (DocumentKey key : EvaluationMetric.filterUnknownDocuments(ratedHits)) {, +        for (RatedSearchHit hit : ratedHits) {, +                Objects.equals(ratedHits, other.ratedHits) &&, +        return Objects.hash(queryId, evaluationResult, ratedHits, optionalMetricDetails);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +    private final List<RatedSearchHit> ratedHits = new ArrayList<>();, +        this.ratedHits.addAll(in.readList(RatedSearchHit::new));, +        out.writeList(ratedHits);, +        this.ratedHits.addAll(hits);, +        return this.ratedHits;, +        for (DocumentKey key : EvaluationMetric.filterUnknownDocuments(ratedHits)) {, +        for (RatedSearchHit hit : ratedHits) {, +                Objects.equals(ratedHits, other.ratedHits) &&, +        return Objects.hash(queryId, evaluationResult, ratedHits, optionalMetricDetails);, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalResponseTests.java, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.text.Text;, +import org.elasticsearch.common.xcontent.XContentLocation;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.SearchShardTarget;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Optional;, +            int numberOfDocs = randomIntBetween(0, 5);, +            List<RatedSearchHit> ratedHits = new ArrayList<>(numberOfDocs);, +            for (int d = 0; d < numberOfDocs; d++) {, +                ratedHits.add(searchHit(randomAlphaOfLength(10), randomIntBetween(0, 1000), randomIntBetween(0, 10)));, +            }, +            evalQuality.addHitsAndRatings(ratedHits);, +        EvalQueryQuality coffeeQueryQuality = new EvalQueryQuality("coffee_query", 0.1);, +        coffeeQueryQuality.addHitsAndRatings(Arrays.asList(searchHit("index", 123, 5), searchHit("index", 456, null)));, +        RankEvalResponse response = new RankEvalResponse(0.123, Collections.singletonMap("coffee_query", coffeeQueryQuality),, +                Collections.singletonMap("beer_query", new ParsingException(new XContentLocation(0, 0), "someMsg")));, +        String xContent = response.toXContent(builder, ToXContent.EMPTY_PARAMS).bytes().utf8ToString();, +        assertEquals(("{" +, +                "    \"rank_eval\": {" +, +                "        \"quality_level\": 0.123," +, +                "        \"details\": {" +, +                "            \"coffee_query\": {" +, +                "                \"quality_level\": 0.1," +, +                "                \"unknown_docs\": [{\"_index\":\"index\",\"_id\":\"456\"}]," +, +                "                \"hits\":[{\"hit\":{\"_index\":\"index\",\"_type\":\"\",\"_id\":\"123\",\"_score\":1.0}," +, +                "                           \"rating\":5}," +, +                "                          {\"hit\":{\"_index\":\"index\",\"_type\":\"\",\"_id\":\"456\",\"_score\":1.0}," +, +                "                           \"rating\":null}" +, +                "                         ]" +, +                "            }" +, +                "        }," +, +                "        \"failures\": {" +, +                "            \"beer_query\": {" +, +                "                \"error\": \"ParsingException[someMsg]\"" +, +                "            }" +, +                "        }" +, +                "    }" +, +                "}").replaceAll("\\s+", ""), xContent);, +, +    private static RatedSearchHit searchHit(String index, int docId, Integer rating) {, +        SearchHit hit = new SearchHit(docId, docId + "", new Text(""), Collections.emptyMap());, +        hit.shard(new SearchShardTarget("testnode", new Index(index, "uuid"), 0, null));, +        hit.score(1.0f);, +        return new RatedSearchHit(hit, rating != null ? Optional.of(rating) : Optional.empty());]