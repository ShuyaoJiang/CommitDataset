[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]InternalRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]date[/\\]InternalDateRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]ipv4[/\\]InternalIPv4Range.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]InternalRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]date[/\\]InternalDateRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]ipv4[/\\]InternalIPv4Range.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                TransportClient transportClient = new TransportClient(injector, nodesService, proxy);, +    private TransportClient(Injector injector, TransportClientNodesService nodesService, TransportProxyClient proxy) {, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {, +            closeables.add(injector.getInstance(plugin));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]InternalRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]date[/\\]InternalDateRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]ipv4[/\\]InternalIPv4Range.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                TransportClient transportClient = new TransportClient(injector, nodesService, proxy);, +    private TransportClient(Injector injector, TransportClientNodesService nodesService, TransportProxyClient proxy) {, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {, +            closeables.add(injector.getInstance(plugin));, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]InternalRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]date[/\\]InternalDateRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]ipv4[/\\]InternalIPv4Range.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                TransportClient transportClient = new TransportClient(injector, nodesService, proxy);, +    private TransportClient(Injector injector, TransportClientNodesService nodesService, TransportProxyClient proxy) {, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {, +            closeables.add(injector.getInstance(plugin));, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +/**, + *, + */, +                        throw new IllegalArgumentException("task [" + existing.task + "] is already queued");, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]InternalRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]date[/\\]InternalDateRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]ipv4[/\\]InternalIPv4Range.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                TransportClient transportClient = new TransportClient(injector, nodesService, proxy);, +    private TransportClient(Injector injector, TransportClientNodesService nodesService, TransportProxyClient proxy) {, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {, +            closeables.add(injector.getInstance(plugin));, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +/**, + *, + */, +                        throw new IllegalArgumentException("task [" + existing.task + "] is already queued");, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoHashUtils.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]InternalRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]date[/\\]InternalDateRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]ipv4[/\\]InternalIPv4Range.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                TransportClient transportClient = new TransportClient(injector, nodesService, proxy);, +    private TransportClient(Injector injector, TransportClientNodesService nodesService, TransportProxyClient proxy) {, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {, +            closeables.add(injector.getInstance(plugin));, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +/**, + *, + */, +                        throw new IllegalArgumentException("task [" + existing.task + "] is already queued");, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoHashUtils.java, +++ b/core/src/main/java/org/elasticsearch/common/transport/NetworkExceptionHelper.java, +            if (e.getMessage().contains("Connection reset by peer")) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]InternalRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]date[/\\]InternalDateRange.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]range[/\\]ipv4[/\\]InternalIPv4Range.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                TransportClient transportClient = new TransportClient(injector, nodesService, proxy);, +    private TransportClient(Injector injector, TransportClientNodesService nodesService, TransportProxyClient proxy) {, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).nodeServices()) {, +            closeables.add(injector.getInstance(plugin));, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +/**, + *, + */, +                        throw new IllegalArgumentException("task [" + existing.task + "] is already queued");, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoHashUtils.java, +++ b/core/src/main/java/org/elasticsearch/common/transport/NetworkExceptionHelper.java, +            if (e.getMessage().contains("Connection reset by peer")) {, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +/**, + *, + */, +            clusterService.submitStateUpdateTask("zen-disco-node-left(" + node + ")", new ClusterStateUpdateTask(Priority.IMMEDIATE) {, +                @Override, +                public ClusterState execute(ClusterState currentState) {, +                    DiscoveryNodes.Builder builder = DiscoveryNodes.builder(currentState.nodes()).remove(node.getId());, +                    currentState = ClusterState.builder(currentState).nodes(builder).build();, +                    // check if we have enough master nodes, if not, we need to move into joining the cluster again]