[+++ b/plugins/transport/memcached/src/main/java/org/elasticsearch/memcached/netty/MemcachedDecoder.java, +import org.elasticsearch.Version;, +    private volatile boolean ending = false;, +                if (buffer.readableBytes() < 23) {, +                    buffer.resetReaderIndex(); // but back magic, +                    return null;, +                }, +                    if (!ending && next == CR) {, +                        ending = true;, +                    } else if (ending && next == LF) {, +                        ending = false;, +                    } else if (ending) {, +                        logger.error("Corrupt stream, expected LF, found [0x{}]", Integer.toHexString(next));, +                        throw new StreamCorruptedException("Expecting LF after CR");, +                    // let's keep the buffer and bytes read, +//                    buffer.discardReadBytes();, +                    buffer.markReaderIndex();, +                    request = new MemcachedRestRequest(RestRequest.Method.GET, args[1], null, -1, false);, +                    request = new MemcachedRestRequest(RestRequest.Method.DELETE, args[1], null, -1, false);, +                    this.request = new MemcachedRestRequest(RestRequest.Method.POST, args[1], null, Integer.parseInt(args[4]), false);, +                } else if ("version".equals(cmd)) { // sent as a noop, +                    byte[] bytes = Version.full().getBytes();, +                    ChannelBuffer writeBuffer = ChannelBuffers.dynamicBuffer(bytes.length);, +                    writeBuffer.writeBytes(bytes);, +                    channel.write(writeBuffer);, +                    return MemcachedDispatcher.IGNORE_REQUEST;, +                    if (channel.isConnected()) { // we maybe in the process of clearing the queued bits, +                    }, +                    if (channel.isConnected()) { // we maybe in the process of clearing the queued bits, +                    }, +        this.ending = false;, +        this.sb.setLength(0);, +, +        if (ctx.getChannel().isConnected()) {, +            ctx.getChannel().disconnect();, +        }, +, +        logger.error("caught exception on memcached decoder", e);]