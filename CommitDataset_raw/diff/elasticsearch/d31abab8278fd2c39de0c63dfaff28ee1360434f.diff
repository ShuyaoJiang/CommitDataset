[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +, +, +    public ActionModule(boolean proxy) {, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +, +, +    public ActionModule(boolean proxy) {, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, BasicReplicationRequest, ReplicationResponse> {, +    protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new BasicReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +, +, +    public ActionModule(boolean proxy) {, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, BasicReplicationRequest, ReplicationResponse> {, +    protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new BasicReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, BasicReplicationRequest::new, BasicReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, BasicReplicationRequest> shardOperationOnPrimary(MetaData metaData, BasicReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(BasicReplicationRequest request) {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +, +, +    public ActionModule(boolean proxy) {, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, BasicReplicationRequest, ReplicationResponse> {, +    protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new BasicReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, BasicReplicationRequest::new, BasicReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, BasicReplicationRequest> shardOperationOnPrimary(MetaData metaData, BasicReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(BasicReplicationRequest request) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +    private final ScheduledFuture<?> scheduledFuture;, +        return add((ActionRequest<?>) request);, +        return add((ActionRequest<?>) request);, +    public BulkProcessor add(ActionRequest<?> request) {, +    public BulkProcessor add(ActionRequest<?> request, @Nullable Object payload) {, +    private synchronized void internalAdd(ActionRequest<?> request, @Nullable Object payload) {, +        return add(data, defaultIndex, defaultType, null);, +    public synchronized BulkProcessor add(BytesReference data, @Nullable String defaultIndex, @Nullable String defaultType, @Nullable Object payload) throws Exception {, +        bulkRequest.add(data, defaultIndex, defaultType, null, null, payload, true);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +, +, +    public ActionModule(boolean proxy) {, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, BasicReplicationRequest, ReplicationResponse> {, +    protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new BasicReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, BasicReplicationRequest::new, BasicReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, BasicReplicationRequest> shardOperationOnPrimary(MetaData metaData, BasicReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(BasicReplicationRequest request) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +    private final ScheduledFuture<?> scheduledFuture;, +        return add((ActionRequest<?>) request);, +        return add((ActionRequest<?>) request);, +    public BulkProcessor add(ActionRequest<?> request) {, +    public BulkProcessor add(ActionRequest<?> request, @Nullable Object payload) {, +    private synchronized void internalAdd(ActionRequest<?> request, @Nullable Object payload) {, +        return add(data, defaultIndex, defaultType, null);, +    public synchronized BulkProcessor add(BytesReference data, @Nullable String defaultIndex, @Nullable String defaultType, @Nullable Object payload) throws Exception {, +        bulkRequest.add(data, defaultIndex, defaultType, null, null, payload, true);]