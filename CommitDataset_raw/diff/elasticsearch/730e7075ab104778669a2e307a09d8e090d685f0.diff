[+++ b/docs/en/release-notes/xpack-breaking.asciidoc, +* The legacy `XPackExtension` extension mechanism has been removed and replaced, +with an SPI based extension mechanism that is installed and built as an elasticsearch, +plugin., +, +++ b/docs/en/release-notes/xpack-breaking.asciidoc, +* The legacy `XPackExtension` extension mechanism has been removed and replaced, +with an SPI based extension mechanism that is installed and built as an elasticsearch, +plugin., +, +++ b/docs/en/security/authentication/custom-realm.asciidoc, +users. You implement a custom realm as an SPI loaded security extension, +as part of an ordinary elasticsearch plugin., +  `org.elasticsearch.xpack.core.security.SecurityExtension`. There you need to, +The `Plugin#getSettingsFilter` method returns a list of setting names that should be, +filtered from the settings APIs as they may contain sensitive credentials. Note this method is not, +part of the `SecurityExtension` interface, it's available as part of the elasticsearch plugin main class., +. Create a `META-INF/services/org.elasticsearch.xpack.core.security.SecurityExtension` descriptor file for the, +  extension that contains the fully qualified class name of your `org.elasticsearch.xpack.core.security.SecurityExtension` implementation, +  `bin/elasticsearch-plugin` with the `install` sub-command and specify the URL, +bin/elasticsearch-plugin install file:///<path>/my-realm-1.0.zip, +++ b/docs/en/release-notes/xpack-breaking.asciidoc, +* The legacy `XPackExtension` extension mechanism has been removed and replaced, +with an SPI based extension mechanism that is installed and built as an elasticsearch, +plugin., +, +++ b/docs/en/security/authentication/custom-realm.asciidoc, +users. You implement a custom realm as an SPI loaded security extension, +as part of an ordinary elasticsearch plugin., +  `org.elasticsearch.xpack.core.security.SecurityExtension`. There you need to, +The `Plugin#getSettingsFilter` method returns a list of setting names that should be, +filtered from the settings APIs as they may contain sensitive credentials. Note this method is not, +part of the `SecurityExtension` interface, it's available as part of the elasticsearch plugin main class., +. Create a `META-INF/services/org.elasticsearch.xpack.core.security.SecurityExtension` descriptor file for the, +  extension that contains the fully qualified class name of your `org.elasticsearch.xpack.core.security.SecurityExtension` implementation, +  `bin/elasticsearch-plugin` with the `install` sub-command and specify the URL, +bin/elasticsearch-plugin install file:///<path>/my-realm-1.0.zip, +++ b/docs/en/security/authorization/custom-roles-provider.asciidoc, +roles. You implement a custom roles provider as an SPI loaded security extension, +as part of an ordinary elasticsearch plugin., +. Implement an extension class for your roles provider that implements, +  `org.elasticsearch.xpack.core.security.SecurityExtension`. There you need to, +The `Plugin#getSettingsFilter` method returns a list of setting names that should be, +filtered from the settings APIs as they may contain sensitive credentials. Note this method is not, +part of the `SecurityExtension` interface, it's available as part of the elasticsearch plugin main class., +. Create a `META-INF/services/org.elasticsearch.xpack.core.security.SecurityExtension` descriptor file for the, +  extension that contains the fully qualified class name of your `org.elasticsearch.xpack.core.security.SecurityExtension` implementation, +  `bin/elasticsearch-plugin` with the `install` sub-command and specify the URL, +bin/elasticsearch-plugin install file:///<path>/my-roles-provider-1.0.zip, +++ b/docs/en/release-notes/xpack-breaking.asciidoc, +* The legacy `XPackExtension` extension mechanism has been removed and replaced, +with an SPI based extension mechanism that is installed and built as an elasticsearch, +plugin., +, +++ b/docs/en/security/authentication/custom-realm.asciidoc, +users. You implement a custom realm as an SPI loaded security extension, +as part of an ordinary elasticsearch plugin., +  `org.elasticsearch.xpack.core.security.SecurityExtension`. There you need to, +The `Plugin#getSettingsFilter` method returns a list of setting names that should be, +filtered from the settings APIs as they may contain sensitive credentials. Note this method is not, +part of the `SecurityExtension` interface, it's available as part of the elasticsearch plugin main class., +. Create a `META-INF/services/org.elasticsearch.xpack.core.security.SecurityExtension` descriptor file for the, +  extension that contains the fully qualified class name of your `org.elasticsearch.xpack.core.security.SecurityExtension` implementation, +  `bin/elasticsearch-plugin` with the `install` sub-command and specify the URL, +bin/elasticsearch-plugin install file:///<path>/my-realm-1.0.zip, +++ b/docs/en/security/authorization/custom-roles-provider.asciidoc, +roles. You implement a custom roles provider as an SPI loaded security extension, +as part of an ordinary elasticsearch plugin., +. Implement an extension class for your roles provider that implements, +  `org.elasticsearch.xpack.core.security.SecurityExtension`. There you need to, +The `Plugin#getSettingsFilter` method returns a list of setting names that should be, +filtered from the settings APIs as they may contain sensitive credentials. Note this method is not, +part of the `SecurityExtension` interface, it's available as part of the elasticsearch plugin main class., +. Create a `META-INF/services/org.elasticsearch.xpack.core.security.SecurityExtension` descriptor file for the, +  extension that contains the fully qualified class name of your `org.elasticsearch.xpack.core.security.SecurityExtension` implementation, +  `bin/elasticsearch-plugin` with the `install` sub-command and specify the URL, +bin/elasticsearch-plugin install file:///<path>/my-roles-provider-1.0.zip, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackPlugin.java, +++ b/docs/en/release-notes/xpack-breaking.asciidoc, +* The legacy `XPackExtension` extension mechanism has been removed and replaced, +with an SPI based extension mechanism that is installed and built as an elasticsearch, +plugin., +, +++ b/docs/en/security/authentication/custom-realm.asciidoc, +users. You implement a custom realm as an SPI loaded security extension, +as part of an ordinary elasticsearch plugin., +  `org.elasticsearch.xpack.core.security.SecurityExtension`. There you need to, +The `Plugin#getSettingsFilter` method returns a list of setting names that should be, +filtered from the settings APIs as they may contain sensitive credentials. Note this method is not, +part of the `SecurityExtension` interface, it's available as part of the elasticsearch plugin main class., +. Create a `META-INF/services/org.elasticsearch.xpack.core.security.SecurityExtension` descriptor file for the, +  extension that contains the fully qualified class name of your `org.elasticsearch.xpack.core.security.SecurityExtension` implementation, +  `bin/elasticsearch-plugin` with the `install` sub-command and specify the URL, +bin/elasticsearch-plugin install file:///<path>/my-realm-1.0.zip, +++ b/docs/en/security/authorization/custom-roles-provider.asciidoc, +roles. You implement a custom roles provider as an SPI loaded security extension, +as part of an ordinary elasticsearch plugin., +. Implement an extension class for your roles provider that implements, +  `org.elasticsearch.xpack.core.security.SecurityExtension`. There you need to, +The `Plugin#getSettingsFilter` method returns a list of setting names that should be]