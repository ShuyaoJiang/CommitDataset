[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    <T> T snapshot(SnapshotHandler<T> snapshotHandler) throws EngineException;, +    static interface SnapshotHandler<T> {, +        T snapshot(SnapshotIndexCommit snapshotIndexCommit, Translog.Snapshot translogSnapshot) throws EngineException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    <T> T snapshot(SnapshotHandler<T> snapshotHandler) throws EngineException;, +    static interface SnapshotHandler<T> {, +        T snapshot(SnapshotIndexCommit snapshotIndexCommit, Translog.Snapshot translogSnapshot) throws EngineException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    @Override public <T> T snapshot(SnapshotHandler<T> snapshotHandler) throws EngineException {, +            return snapshotHandler.snapshot(snapshotIndexCommit, traslogSnapshot);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    <T> T snapshot(SnapshotHandler<T> snapshotHandler) throws EngineException;, +    static interface SnapshotHandler<T> {, +        T snapshot(SnapshotIndexCommit snapshotIndexCommit, Translog.Snapshot translogSnapshot) throws EngineException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    @Override public <T> T snapshot(SnapshotHandler<T> snapshotHandler) throws EngineException {, +            return snapshotHandler.snapshot(snapshotIndexCommit, traslogSnapshot);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +import org.elasticsearch.util.SizeValue;, +import org.elasticsearch.util.TimeValue;, +import static org.elasticsearch.util.TimeValue.*;, +, + * @author kimchy (shay.banon), +    SnapshotStatus snapshot(Snapshot snapshot);, +, +    class SnapshotStatus {, +, +        public static SnapshotStatus NA = new SnapshotStatus(timeValueMillis(0), new Index(0, new SizeValue(0), timeValueMillis(0)), new Translog(0, timeValueMillis(0)));, +, +        private TimeValue totalTime;, +, +        private Index index;, +, +        private Translog translog;, +, +        public SnapshotStatus(TimeValue totalTime, Index index, Translog translog) {, +            this.index = index;, +            this.translog = translog;, +            this.totalTime = totalTime;, +        }, +, +        public TimeValue totalTime() {, +            return this.totalTime;, +        }, +, +        public Index index() {, +            return index;, +        }, +, +        public Translog translog() {, +            return translog;, +        }, +, +        public static class Translog {, +            private int numberOfOperations;, +            private TimeValue time;, +, +            public Translog(int numberOfOperations, TimeValue time) {, +                this.numberOfOperations = numberOfOperations;, +                this.time = time;, +            }, +, +            public int numberOfOperations() {, +                return numberOfOperations;, +            }, +, +            public TimeValue time() {, +                return time;, +            }, +        }, +, +        public static class Index {, +            private int numberOfFiles;, +            private SizeValue totalSize;, +            private TimeValue time;, +, +            public Index(int numberOfFiles, SizeValue totalSize, TimeValue time) {, +                this.numberOfFiles = numberOfFiles;, +                this.totalSize = totalSize;, +                this.time = time;, +            }, +, +            public TimeValue time() {, +                return this.time;, +            }, +, +            public int numberOfFiles() {, +                return numberOfFiles;, +            }, +, +            public SizeValue totalSize() {, +                return totalSize;, +            }, +        }, +    }, +, +    class RecoveryStatus {, +, +        private Index index;]