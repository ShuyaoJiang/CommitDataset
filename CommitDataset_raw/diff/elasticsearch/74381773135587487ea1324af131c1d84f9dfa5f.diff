[+++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/agent/collector/AbstractCollectorTestCase.java, +import java.io.IOException;, +        public InternalXPackPlugin(Settings settings) throws IOException {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/agent/collector/AbstractCollectorTestCase.java, +import java.io.IOException;, +        public InternalXPackPlugin(Settings settings) throws IOException {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/license/LicenseIntegrationTests.java, +import java.io.IOException;, +        public InternalXPackPlugin(Settings settings) throws IOException {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/agent/collector/AbstractCollectorTestCase.java, +import java.io.IOException;, +        public InternalXPackPlugin(Settings settings) throws IOException {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/license/LicenseIntegrationTests.java, +import java.io.IOException;, +        public InternalXPackPlugin(Settings settings) throws IOException {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/test/MonitoringIntegTestCase.java, +import org.elasticsearch.xpack.security.crypto.CryptoService;, +                        .put(CryptoService.FILE_SETTING.getKey(), writeFile(folder, "system_key.yml", systemKey)), +                return CryptoService.generateKey();, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/agent/collector/AbstractCollectorTestCase.java, +import java.io.IOException;, +        public InternalXPackPlugin(Settings settings) throws IOException {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/license/LicenseIntegrationTests.java, +import java.io.IOException;, +        public InternalXPackPlugin(Settings settings) throws IOException {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/test/MonitoringIntegTestCase.java, +import org.elasticsearch.xpack.security.crypto.CryptoService;, +                        .put(CryptoService.FILE_SETTING.getKey(), writeFile(folder, "system_key.yml", systemKey)), +                return CryptoService.generateKey();, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import java.util.Optional;, +import java.util.function.Function;, +, +import org.elasticsearch.common.inject.util.Providers;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.xpack.security.crypto.CryptoService;, +    private final CryptoService cryptoService;, +    public Security(Settings settings, Environment env) throws IOException {, +        if (enabled && transportClientMode == false) {, +            cryptoService = new CryptoService(settings, env);, +        } else {, +            cryptoService = null;, +            modules.add(b -> b.bind(CryptoService.class).toProvider(Providers.of(null)));, +        modules.add(b -> b.bind(CryptoService.class).toInstance(cryptoService));, +        return additionalSettings(settings);, +    }, +, +    // pkg private for testing, +    static Settings additionalSettings(Settings settings) {, +        addUserSettings(settings, settingsBuilder);, +        addTribeSettings(settings, settingsBuilder);, +        CryptoService.addSettings(settingsList);, +    private static void addUserSettings(Settings settings, Settings.Builder settingsBuilder) {, +    private static void addTribeSettings(Settings settings, Settings.Builder settingsBuilder) {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/agent/collector/AbstractCollectorTestCase.java, +import java.io.IOException;, +        public InternalXPackPlugin(Settings settings) throws IOException {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/license/LicenseIntegrationTests.java, +import java.io.IOException;, +        public InternalXPackPlugin(Settings settings) throws IOException {, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/test/MonitoringIntegTestCase.java, +import org.elasticsearch.xpack.security.crypto.CryptoService;, +                        .put(CryptoService.FILE_SETTING.getKey(), writeFile(folder, "system_key.yml", systemKey)), +                return CryptoService.generateKey();, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import java.util.Optional;, +import java.util.function.Function;, +, +import org.elasticsearch.common.inject.util.Providers;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.xpack.security.crypto.CryptoService;, +    private final CryptoService cryptoService;, +    public Security(Settings settings, Environment env) throws IOException {, +        if (enabled && transportClientMode == false) {, +            cryptoService = new CryptoService(settings, env);, +        } else {, +            cryptoService = null;, +            modules.add(b -> b.bind(CryptoService.class).toProvider(Providers.of(null)));, +        modules.add(b -> b.bind(CryptoService.class).toInstance(cryptoService));, +        return additionalSettings(settings);, +    }, +, +    // pkg private for testing, +    static Settings additionalSettings(Settings settings) {, +        addUserSettings(settings, settingsBuilder);, +        addTribeSettings(settings, settingsBuilder);]