[+++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(shardId, mapperService, queryParserService,, +                indexAliasesService, indexCache, logger) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(shardId, mapperService, queryParserService,, +                indexAliasesService, indexCache, logger) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.index.mapper.*;, +    private final ESLogger logger;, +    protected TranslogRecoveryPerformer(ShardId shardId, MapperService mapperService, IndexQueryParserService queryParserService,, +                                        IndexAliasesService indexAliasesService, IndexCache indexCache, ESLogger logger) {, +        this.logger = logger;, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[translog] recover [create] op of [{}][{}]", create.type(), create.id());, +                    }, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[translog] recover [index] op of [{}][{}]", index.type(), index.id());, +                    }, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[translog] recover [delete] op of [{}][{}]", uid.type(), uid.id());, +                    }, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(shardId, mapperService, queryParserService,, +                indexAliasesService, indexCache, logger) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.index.mapper.*;, +    private final ESLogger logger;, +    protected TranslogRecoveryPerformer(ShardId shardId, MapperService mapperService, IndexQueryParserService queryParserService,, +                                        IndexAliasesService indexAliasesService, IndexCache indexCache, ESLogger logger) {, +        this.logger = logger;, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[translog] recover [create] op of [{}][{}]", create.type(), create.id());, +                    }, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[translog] recover [index] op of [{}][{}]", index.type(), index.id());, +                    }, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[translog] recover [delete] op of [{}][{}]", uid.type(), uid.id());, +                    }, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +                    channel.sendResponse(TransportResponse.Empty.INSTANCE);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(shardId, mapperService, queryParserService,, +                indexAliasesService, indexCache, logger) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.index.mapper.*;, +    private final ESLogger logger;, +    protected TranslogRecoveryPerformer(ShardId shardId, MapperService mapperService, IndexQueryParserService queryParserService,, +                                        IndexAliasesService indexAliasesService, IndexCache indexCache, ESLogger logger) {, +        this.logger = logger;, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[translog] recover [create] op of [{}][{}]", create.type(), create.id());, +                    }, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[translog] recover [index] op of [{}][{}]", index.type(), index.id());, +                    }, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[translog] recover [delete] op of [{}][{}]", uid.type(), uid.id());, +                    }, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +                    channel.sendResponse(TransportResponse.Empty.INSTANCE);, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +import org.elasticsearch.common.logging.ESLogger;, +        }, new TranslogHandler(shardId.index().getName(), logger), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy(), new IndexSearcherWrappingService(new HashSet<>(Arrays.asList(wrappers))), translogConfig);, +        public TranslogHandler(String indexName, ESLogger logger) {, +            super(new ShardId("test", 0), null, null, null, null, logger);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(shardId, mapperService, queryParserService,, +                indexAliasesService, indexCache, logger) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/TranslogRecoveryPerformer.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.index.mapper.*;, +    private final ESLogger logger;, +    protected TranslogRecoveryPerformer(ShardId shardId, MapperService mapperService, IndexQueryParserService queryParserService,, +                                        IndexAliasesService indexAliasesService, IndexCache indexCache, ESLogger logger) {, +        this.logger = logger;, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[translog] recover [create] op of [{}][{}]", create.type(), create.id());, +                    }, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[translog] recover [index] op of [{}][{}]", index.type(), index.id());, +                    }, +                    if (logger.isTraceEnabled()) {, +                        logger.trace("[translog] recover [delete] op of [{}][{}]", uid.type(), uid.id());, +                    }, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +                    channel.sendResponse(TransportResponse.Empty.INSTANCE);, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +import org.elasticsearch.common.logging.ESLogger;, +        }, new TranslogHandler(shardId.index().getName(), logger), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy(), new IndexSearcherWrappingService(new HashSet<>(Arrays.asList(wrappers))), translogConfig);, +        public TranslogHandler(String indexName, ESLogger logger) {, +            super(new ShardId("test", 0), null, null, null, null, logger);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;, +     * <p/>, +     * <p/>, +        assertSearchHits(response, "0", "1", "2", "3", "4");]