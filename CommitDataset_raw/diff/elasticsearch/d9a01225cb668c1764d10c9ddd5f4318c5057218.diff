[+++ b/core/src/main/java/org/elasticsearch/action/support/TransportAction.java, +    public final Task execute(Request request, ActionListener<Response> listener) {, +        return task;, +++ b/core/src/main/java/org/elasticsearch/action/support/TransportAction.java, +    public final Task execute(Request request, ActionListener<Response> listener) {, +        return task;, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TransportTasksActionTests.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.support.PlainActionFuture;, +import java.util.concurrent.atomic.AtomicReference;, +import static org.elasticsearch.action.support.PlainActionFuture.newFuture;, +        PlainActionFuture<NodesResponse> future = newFuture();, +        startBlockingTestNodesAction(checkLatch, request, future);, +        return future;, +    }, +, +    private Task startBlockingTestNodesAction(CountDownLatch checkLatch, ActionListener<NodesResponse> listener) throws InterruptedException {, +        return startBlockingTestNodesAction(checkLatch, new NodesRequest("Test Request"), listener);, +    }, +, +    private Task startBlockingTestNodesAction(CountDownLatch checkLatch, NodesRequest request,  ActionListener<NodesResponse> listener) throws InterruptedException {, +        Task task = actions[0].execute(request, listener);, +        return task;, +        CountDownLatch responseLatch = new CountDownLatch(1);, +        final AtomicReference<NodesResponse> responseReference = new AtomicReference<>();, +        Task mainTask = startBlockingTestNodesAction(checkLatch, new ActionListener<NodesResponse>() {, +            @Override, +            public void onResponse(NodesResponse listTasksResponse) {, +                responseReference.set(listTasksResponse);, +                responseLatch.countDown();, +            }, +, +            @Override, +            public void onFailure(Throwable e) {, +                logger.warn("Couldn't get list of tasks", e);, +                responseLatch.countDown();, +            }, +        });, +        // Make sure that the main task on coordinating node is the task that was returned to us by execute(), +        listTasksRequest.actions("testAction"); // only pick the main task, +        response = testNode.transportListTasksAction.execute(listTasksRequest).get();, +        assertEquals(1, response.getTasks().size());, +        assertEquals(mainTask.getId(), response.getTasks().get(0).getId());, +, +        assertTrue(responseLatch.await(10, TimeUnit.SECONDS));, +, +        NodesResponse responses = responseReference.get();]