[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.lucene.store.AlreadyClosedException;, +import org.elasticsearch.ElasticsearchSecurityException;, +import org.elasticsearch.action.NoShardAvailableActionException;, +import org.elasticsearch.action.UnavailableShardsException;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.index.shard.IllegalIndexShardStateException;, +import org.elasticsearch.index.shard.ShardNotFoundException;, +import org.elasticsearch.indices.IndexClosedException;, +    private static final Logger LOGGER = LogManager.getLogger(ShardFollowNodeTask.class);, +        if (NetworkExceptionHelper.isConnectException(e)) {, +            return true;, +        } else if (NetworkExceptionHelper.isCloseConnectionException(e)) {, +            return true;, +        }, +, +        final Throwable actual = ExceptionsHelper.unwrapCause(e);, +        return actual instanceof ShardNotFoundException ||, +            actual instanceof IllegalIndexShardStateException ||, +            actual instanceof NoShardAvailableActionException ||, +            actual instanceof UnavailableShardsException ||, +            actual instanceof AlreadyClosedException ||, +            actual instanceof ElasticsearchSecurityException || // If user does not have sufficient privileges, +            actual instanceof ClusterBlockException || // If leader index is closed or no elected master, +            actual instanceof IndexClosedException; // If follow index is closed, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.lucene.store.AlreadyClosedException;, +import org.elasticsearch.ElasticsearchSecurityException;, +import org.elasticsearch.action.NoShardAvailableActionException;, +import org.elasticsearch.action.UnavailableShardsException;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.index.shard.IllegalIndexShardStateException;, +import org.elasticsearch.index.shard.ShardNotFoundException;, +import org.elasticsearch.indices.IndexClosedException;, +    private static final Logger LOGGER = LogManager.getLogger(ShardFollowNodeTask.class);, +        if (NetworkExceptionHelper.isConnectException(e)) {, +            return true;, +        } else if (NetworkExceptionHelper.isCloseConnectionException(e)) {, +            return true;, +        }, +, +        final Throwable actual = ExceptionsHelper.unwrapCause(e);, +        return actual instanceof ShardNotFoundException ||, +            actual instanceof IllegalIndexShardStateException ||, +            actual instanceof NoShardAvailableActionException ||, +            actual instanceof UnavailableShardsException ||, +            actual instanceof AlreadyClosedException ||, +            actual instanceof ElasticsearchSecurityException || // If user does not have sufficient privileges, +            actual instanceof ClusterBlockException || // If leader index is closed or no elected master, +            actual instanceof IndexClosedException; // If follow index is closed, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/ShardChangesIT.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;, +import org.elasticsearch.action.admin.indices.open.OpenIndexRequest;, +import org.elasticsearch.xpack.core.ccr.action.CcrStatsAction;, +import org.elasticsearch.xpack.core.ccr.action.CcrStatsAction.StatsRequest;, +import org.elasticsearch.xpack.core.ccr.action.CcrStatsAction.StatsResponses;, +import static org.hamcrest.Matchers.empty;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +import static org.hamcrest.Matchers.hasSize;, +    public void testCloseLeaderIndex() throws Exception {, +        assertAcked(client().admin().indices().prepareCreate("index1"), +            .setSettings(Settings.builder(), +                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true), +                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1), +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0), +                .build()));, +, +        final ResumeFollowAction.Request followRequest = createFollowRequest("index1", "index2");, +        final PutFollowAction.Request createAndFollowRequest = new PutFollowAction.Request(followRequest);, +        client().execute(PutFollowAction.INSTANCE, createAndFollowRequest).get();, +, +        client().prepareIndex("index1", "doc", "1").setSource("{}", XContentType.JSON).get();, +        assertBusy(() -> assertThat(client().prepareSearch("index2").get().getHits().totalHits, equalTo(1L)));, +, +        client().admin().indices().close(new CloseIndexRequest("index1")).actionGet();, +        assertBusy(() -> {, +            StatsResponses response = client().execute(CcrStatsAction.INSTANCE, new StatsRequest()).actionGet();, +            assertThat(response.getNodeFailures(), empty());, +            assertThat(response.getTaskFailures(), empty());, +            assertThat(response.getStatsResponses(), hasSize(1));, +            assertThat(response.getStatsResponses().get(0).status().numberOfFailedFetches(), greaterThanOrEqualTo(1L));, +            assertThat(response.getStatsResponses().get(0).status().fetchExceptions().size(), equalTo(1));, +            ElasticsearchException exception = response.getStatsResponses().get(0).status(), +                .fetchExceptions().entrySet().iterator().next().getValue().v2();, +            assertThat(exception.getMessage(), equalTo("blocked by: [FORBIDDEN/4/index closed];"));, +        });, +, +        client().admin().indices().open(new OpenIndexRequest("index1")).actionGet();, +        client().prepareIndex("index1", "doc", "2").setSource("{}", XContentType.JSON).get();, +        assertBusy(() -> assertThat(client().prepareSearch("index2").get().getHits().totalHits, equalTo(2L)));, +, +        unfollowIndex("index2");, +    }, +, +    public void testCloseFollowIndex() throws Exception {, +        assertAcked(client().admin().indices().prepareCreate("index1"), +            .setSettings(Settings.builder()]