[+++ b/plugins/repository-s3/qa/amazon-s3/src/test/java/org/elasticsearch/repositories/s3/AmazonS3Fixture.java, +                bucket.objects.remove(objectName);, +                return new Response(RestStatus.NO_CONTENT.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE);, +++ b/plugins/repository-s3/qa/amazon-s3/src/test/java/org/elasticsearch/repositories/s3/AmazonS3Fixture.java, +                bucket.objects.remove(objectName);, +                return new Response(RestStatus.NO_CONTENT.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java, +        deleteBlobIgnoringIfNotExists(blobName);, +    }, +    @Override, +    public void deleteBlobIgnoringIfNotExists(String blobName) throws IOException {, +            // There is no way to know if an non-versioned object existed before the deletion, +++ b/plugins/repository-s3/qa/amazon-s3/src/test/java/org/elasticsearch/repositories/s3/AmazonS3Fixture.java, +                bucket.objects.remove(objectName);, +                return new Response(RestStatus.NO_CONTENT.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java, +        deleteBlobIgnoringIfNotExists(blobName);, +    }, +    @Override, +    public void deleteBlobIgnoringIfNotExists(String blobName) throws IOException {, +            // There is no way to know if an non-versioned object existed before the deletion, +++ b/plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/MockAmazonS3.java, +        blobs.remove(request.getKey());, +++ b/plugins/repository-s3/qa/amazon-s3/src/test/java/org/elasticsearch/repositories/s3/AmazonS3Fixture.java, +                bucket.objects.remove(objectName);, +                return new Response(RestStatus.NO_CONTENT.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java, +        deleteBlobIgnoringIfNotExists(blobName);, +    }, +    @Override, +    public void deleteBlobIgnoringIfNotExists(String blobName) throws IOException {, +            // There is no way to know if an non-versioned object existed before the deletion, +++ b/plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/MockAmazonS3.java, +        blobs.remove(request.getKey());, +++ b/server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java, +++ b/plugins/repository-s3/qa/amazon-s3/src/test/java/org/elasticsearch/repositories/s3/AmazonS3Fixture.java, +                bucket.objects.remove(objectName);, +                return new Response(RestStatus.NO_CONTENT.getStatus(), TEXT_PLAIN_CONTENT_TYPE, EMPTY_BYTE);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java, +        deleteBlobIgnoringIfNotExists(blobName);, +    }, +    @Override, +    public void deleteBlobIgnoringIfNotExists(String blobName) throws IOException {, +            // There is no way to know if an non-versioned object existed before the deletion, +++ b/plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/MockAmazonS3.java, +        blobs.remove(request.getKey());, +++ b/server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java, +++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +            snapshotsBlobContainer.deleteBlobIgnoringIfNotExists(oldSnapshotIndexFile);, +        snapshotsBlobContainer.deleteBlobIgnoringIfNotExists(INDEX_LATEST_BLOB);, +        snapshotsBlobContainer.deleteBlobIgnoringIfNotExists(INCOMPATIBLE_SNAPSHOTS_BLOB);]