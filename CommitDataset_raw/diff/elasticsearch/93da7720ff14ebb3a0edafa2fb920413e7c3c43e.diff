[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ /dev/null, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/CustomDocValuesField.java, +// used for binary, geo and range fields, +public abstract class CustomDocValuesField implements IndexableField {, +    protected CustomDocValuesField(String  name) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/CustomDocValuesField.java, +// used for binary, geo and range fields, +public abstract class CustomDocValuesField implements IndexableField {, +    protected CustomDocValuesField(String  name) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java, +    public static final Setting<Boolean> COERCE_SETTING =, +            public Float parse(Object value, boolean coerce) {, +            public Float parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {, +            public Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +            public Float parse(Object value, boolean coerce) {, +            public Float parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {, +            public Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +            public Double parse(Object value, boolean coerce) {, +            public Double parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {, +            public Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +            public Byte parse(Object value, boolean coerce) {, +            public Short parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {, +            public Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +            public Short parse(Object value, boolean coerce) {, +            public Short parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {, +            public Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +            public Integer parse(Object value, boolean coerce) {, +            public Integer parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {, +            public Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +            public Long parse(Object value, boolean coerce) {, +            public Long parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {, +            public Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +        public abstract Query termQuery(String field, Object value);, +        public abstract Query termsQuery(String field, List<Object> values);, +        public abstract Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +        public abstract Number parse(XContentParser parser, boolean coerce) throws IOException;, +        public abstract Number parse(Object value, boolean coerce);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/CustomDocValuesField.java, +// used for binary, geo and range fields, +public abstract class CustomDocValuesField implements IndexableField {, +    protected CustomDocValuesField(String  name) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java, +    public static final Setting<Boolean> COERCE_SETTING =, +            public Float parse(Object value, boolean coerce) {, +            public Float parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {, +            public Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +            public Float parse(Object value, boolean coerce) {, +            public Float parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {, +            public Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +            public Double parse(Object value, boolean coerce) {, +            public Double parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {, +            public Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +            public Byte parse(Object value, boolean coerce) {, +            public Short parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {, +            public Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +            public Short parse(Object value, boolean coerce) {, +            public Short parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {, +            public Query rangeQuery(String field, Object lowerTerm, Object upperTerm,, +            public Integer parse(Object value, boolean coerce) {, +            public Integer parse(XContentParser parser, boolean coerce) throws IOException {, +            public Query termQuery(String field, Object value) {, +            public Query termsQuery(String field, List<Object> values) {]