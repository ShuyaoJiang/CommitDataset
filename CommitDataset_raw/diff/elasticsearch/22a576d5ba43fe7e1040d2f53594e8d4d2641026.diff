[+++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +            XContentBuilder builder = XContentFactory.jsonBuilder();, +            if (params.paramAsBoolean("pretty", true)) {, +                builder.prettyPrint();, +            }, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +            XContentBuilder builder = XContentFactory.jsonBuilder();, +            if (params.paramAsBoolean("pretty", true)) {, +                builder.prettyPrint();, +            }, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +import org.apache.lucene.util.Accountable;, +import org.apache.lucene.util.Accountables;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.index.shard.IllegalIndexShardStateException;, +            int left = onGoingRecoveries.decrementAndGet();, +            if (left == 0) {, +                try {, +                    flush(FlushType.COMMIT_TRANSLOG, false, false);, +                } catch (IllegalIndexShardStateException e) {, +                    // we are being closed, or in created state, ignore, +                } catch (FlushNotAllowedEngineException e) {, +                    // ignore this exception, we are not allowed to perform flush, +                } catch (Throwable e) {, +                    logger.warn("failed to flush shard post recovery", e);, +                }, +            }, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +            XContentBuilder builder = XContentFactory.jsonBuilder();, +            if (params.paramAsBoolean("pretty", true)) {, +                builder.prettyPrint();, +            }, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +import org.apache.lucene.util.Accountable;, +import org.apache.lucene.util.Accountables;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.index.shard.IllegalIndexShardStateException;, +            int left = onGoingRecoveries.decrementAndGet();, +            if (left == 0) {, +                try {, +                    flush(FlushType.COMMIT_TRANSLOG, false, false);, +                } catch (IllegalIndexShardStateException e) {, +                    // we are being closed, or in created state, ignore, +                } catch (FlushNotAllowedEngineException e) {, +                    // ignore this exception, we are not allowed to perform flush, +                } catch (Throwable e) {, +                    logger.warn("failed to flush shard post recovery", e);, +                }, +            }, +++ b/src/test/java/org/elasticsearch/benchmark/recovery/ReplicaRecoveryBenchmark.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.benchmark.recovery;, +, +import org.elasticsearch.action.admin.indices.recovery.RecoveryResponse;, +import org.elasticsearch.action.admin.indices.recovery.ShardRecoveryResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +import org.elasticsearch.common.jna.Natives;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.SizeValue;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.indices.IndexMissingException;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.test.BackgroundIndexer;, +import org.elasticsearch.transport.TransportModule;, +, +import java.util.List;, +import java.util.Random;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;, +import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;, +import static org.elasticsearch.node.NodeBuilder.nodeBuilder;, +, +/**, + *, + */]