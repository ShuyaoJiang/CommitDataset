[+++ b/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchAndIndexingBenchmark.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.benchmark.search.child;, +, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;, +import org.elasticsearch.action.bulk.BulkRequestBuilder;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.common.StopWatch;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.SizeValue;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.node.Node;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Random;, +, +import static org.elasticsearch.client.Requests.createIndexRequest;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;, +import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.index.query.FilterBuilders.hasChildFilter;, +import static org.elasticsearch.index.query.QueryBuilders.*;, +import static org.elasticsearch.node.NodeBuilder.nodeBuilder;, +, +/**, + *, + */, +public class ChildSearchAndIndexingBenchmark {, +, +    static long COUNT = SizeValue.parseSizeValue("1m").singles();, +    static int CHILD_COUNT = 5;, +    static int BATCH = 100;, +    static int QUERY_COUNT = 50;, +    static String indexName = "test";, +    static Random random = new Random();, +, +    public static void main(String[] args) throws Exception {, +        Settings settings = settingsBuilder(), +                .put("index.engine.robin.refreshInterval", "-1"), +                .put("gateway.type", "local"), +                .put(SETTING_NUMBER_OF_SHARDS, 1), +                .put(SETTING_NUMBER_OF_REPLICAS, 0), +                .build();, +, +        Node node1 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "node1")).node();, +        Client client = node1.client();, +, +        client.admin().cluster().prepareHealth(indexName).setWaitForGreenStatus().setTimeout("10s").execute().actionGet();, +        try {, +            client.admin().indices().create(createIndexRequest(indexName)).actionGet();, +            client.admin().indices().preparePutMapping(indexName).setType("child").setSource(XContentFactory.jsonBuilder().startObject().startObject("type"), +                    .startObject("_parent").field("type", "parent").endObject(), +                    .endObject().endObject()).execute().actionGet();, +            Thread.sleep(5000);, +, +            StopWatch stopWatch = new StopWatch().start();, +, +            System.out.println("--> Indexing [" + COUNT + "] parent document and [" + (COUNT * CHILD_COUNT) + " child documents");, +            long ITERS = COUNT / BATCH;, +            long i = 1;, +            int counter = 0;, +            for (; i <= ITERS; i++) {, +                BulkRequestBuilder request = client.prepareBulk();, +                for (int j = 0; j < BATCH; j++) {, +                    counter++;, +                    request.add(Requests.indexRequest(indexName).type("parent").id(Integer.toString(counter)), +                            .source(parentSource(Integer.toString(counter), "test" + counter)));, +                    for (int k = 0; k < CHILD_COUNT; k++) {, +                        request.add(Requests.indexRequest(indexName).type("child").id(Integer.toString(counter) + "_" + k), +                                .parent(Integer.toString(counter)), +                                .source(childSource(Integer.toString(counter), "tag" + k)));, +                    }, +                }, +                BulkResponse response = request.execute().actionGet();, +                if (response.hasFailures()) {]