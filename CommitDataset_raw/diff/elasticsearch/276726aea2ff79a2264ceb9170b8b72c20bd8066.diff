[+++ b/docs/reference/aggregations/pipeline/percentiles-bucket-aggregation.asciidoc, +|`keyed` |Flag which returns the range as an hash instead of an array of key-value pairs |Optional | `true`, +++ b/docs/reference/aggregations/pipeline/percentiles-bucket-aggregation.asciidoc, +|`keyed` |Flag which returns the range as an hash instead of an array of key-value pairs |Optional | `true`, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/InternalPercentilesBucket.java, +import org.elasticsearch.Version;, +    private boolean keyed = true;, +    InternalPercentilesBucket(String name, double[] percents, double[] percentiles, boolean keyed,, +        this.keyed = keyed;, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            keyed = in.readBoolean();, +        }, +, +, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeBoolean(keyed);, +        }, +        if (keyed) {, +        } else {, +            builder.startArray("values");, +            for (double percent : percents) {, +                double value = percentile(percent);, +                boolean hasValue = !(Double.isInfinite(value) || Double.isNaN(value));, +                builder.startObject();, +                builder.field("key", percent);, +                builder.field("value", hasValue ? value : null);, +                if (hasValue && format != DocValueFormat.RAW) {, +                    builder.field(String.valueOf(percent) + "_as_string", percentileAsString(percent));, +                }, +                builder.endObject();, +            }, +            builder.endArray();, +        }, +++ b/docs/reference/aggregations/pipeline/percentiles-bucket-aggregation.asciidoc, +|`keyed` |Flag which returns the range as an hash instead of an array of key-value pairs |Optional | `true`, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/InternalPercentilesBucket.java, +import org.elasticsearch.Version;, +    private boolean keyed = true;, +    InternalPercentilesBucket(String name, double[] percents, double[] percentiles, boolean keyed,, +        this.keyed = keyed;, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            keyed = in.readBoolean();, +        }, +, +, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeBoolean(keyed);, +        }, +        if (keyed) {, +        } else {, +            builder.startArray("values");, +            for (double percent : percents) {, +                double value = percentile(percent);, +                boolean hasValue = !(Double.isInfinite(value) || Double.isNaN(value));, +                builder.startObject();, +                builder.field("key", percent);, +                builder.field("value", hasValue ? value : null);, +                if (hasValue && format != DocValueFormat.RAW) {, +                    builder.field(String.valueOf(percent) + "_as_string", percentileAsString(percent));, +                }, +                builder.endObject();, +            }, +            builder.endArray();, +        }, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/pipeline/PercentilesBucketPipelineAggregationBuilder.java, +import org.elasticsearch.Version;, +    static final ParseField KEYED_FIELD = new ParseField("keyed");, +    private boolean keyed = true;, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            keyed = in.readBoolean();, +        }, +, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeBoolean(keyed);, +        }, +    public double[] getPercents() {, +    public PercentilesBucketPipelineAggregationBuilder setPercents(double[] percents) {, +    /**, +     * Set whether the XContent should be keyed, +     */, +    public PercentilesBucketPipelineAggregationBuilder setKeyed(boolean keyed) {, +        this.keyed = keyed;, +        return this;, +    }, +, +    /**, +     * Get whether the XContent should be keyed, +     */, +    public boolean getKeyed() {, +        return keyed;, +    }, +, +        return new PercentilesBucketPipelineAggregator(name, percents, keyed, bucketsPaths, gapPolicy(), formatter(), metaData);, +        builder.field(KEYED_FIELD.getPreferredName(), keyed);, +                factory.setPercents(percents);, +            }, +            Boolean keyed = (Boolean) params.get(KEYED_FIELD.getPreferredName());]