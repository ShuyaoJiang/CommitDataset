[+++ b/core/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +import org.elasticsearch.common.io.Channels;, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.buffer.ChannelBuffers;, +import java.nio.channels.GatheringByteChannel;, +    public void writeTo(GatheringByteChannel channel) throws IOException {, +        Channels.writeToChannel(bytes, offset, length(), channel);, +    }, +, +    @Override, +    public ChannelBuffer toChannelBuffer() {, +        return ChannelBuffers.wrappedBuffer(bytes, offset, length);, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +import org.elasticsearch.common.io.Channels;, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.buffer.ChannelBuffers;, +import java.nio.channels.GatheringByteChannel;, +    public void writeTo(GatheringByteChannel channel) throws IOException {, +        Channels.writeToChannel(bytes, offset, length(), channel);, +    }, +, +    @Override, +    public ChannelBuffer toChannelBuffer() {, +        return ChannelBuffers.wrappedBuffer(bytes, offset, length);, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/common/bytes/BytesReference.java, +import org.jboss.netty.buffer.ChannelBuffer;, +import java.nio.channels.GatheringByteChannel;, +    public static class Helper {, +    /**, +     * Writes the bytes directly to the channel., +     */, +    void writeTo(GatheringByteChannel channel) throws IOException;, +     * Returns the bytes as a channel buffer., +     */, +    ChannelBuffer toChannelBuffer();, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +import org.elasticsearch.common.io.Channels;, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.buffer.ChannelBuffers;, +import java.nio.channels.GatheringByteChannel;, +    public void writeTo(GatheringByteChannel channel) throws IOException {, +        Channels.writeToChannel(bytes, offset, length(), channel);, +    }, +, +    @Override, +    public ChannelBuffer toChannelBuffer() {, +        return ChannelBuffers.wrappedBuffer(bytes, offset, length);, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/common/bytes/BytesReference.java, +import org.jboss.netty.buffer.ChannelBuffer;, +import java.nio.channels.GatheringByteChannel;, +    public static class Helper {, +    /**, +     * Writes the bytes directly to the channel., +     */, +    void writeTo(GatheringByteChannel channel) throws IOException;, +     * Returns the bytes as a channel buffer., +     */, +    ChannelBuffer toChannelBuffer();, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/bytes/ChannelBufferBytesReference.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.common.bytes;, +, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.common.io.Channels;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.transport.netty.ChannelBufferStreamInputFactory;, +import org.jboss.netty.buffer.ChannelBuffer;, +, +import java.io.IOException;, +import java.io.OutputStream;]