[+++ b/qa/sql/src/main/resources/math.sql-spec, +// constants, +mathConstantPI, +SELECT ABS(emp_no) m, PI() as pi, first_name FROM "test_emp" WHERE emp_no < 10010 ORDER BY emp_no;, +mathConstant, +SELECT 5 + 2 * 3 / 2 % 2 AS c, PI() as e, first_name FROM "test_emp" WHERE emp_no < 10010 ORDER BY emp_no;, +++ b/qa/sql/src/main/resources/math.sql-spec, +// constants, +mathConstantPI, +SELECT ABS(emp_no) m, PI() as pi, first_name FROM "test_emp" WHERE emp_no < 10010 ORDER BY emp_no;, +mathConstant, +SELECT 5 + 2 * 3 / 2 % 2 AS c, PI() as e, first_name FROM "test_emp" WHERE emp_no < 10010 ORDER BY emp_no;, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +        if (e instanceof NamedExpression) {, +            return ((NamedExpression) e).toAttribute();, +        }, +        if (e != null && e.foldable()) {, +            return new LiteralAttribute(Literal.of(e));, +        }, +        return null;, +++ b/qa/sql/src/main/resources/math.sql-spec, +// constants, +mathConstantPI, +SELECT ABS(emp_no) m, PI() as pi, first_name FROM "test_emp" WHERE emp_no < 10010 ORDER BY emp_no;, +mathConstant, +SELECT 5 + 2 * 3 / 2 % 2 AS c, PI() as e, first_name FROM "test_emp" WHERE emp_no < 10010 ORDER BY emp_no;, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +        if (e instanceof NamedExpression) {, +            return ((NamedExpression) e).toAttribute();, +        }, +        if (e != null && e.foldable()) {, +            return new LiteralAttribute(Literal.of(e));, +        }, +        return null;, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/Literal.java, +import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;, +    @Override, +    @Override, +, +    public static Literal of(Expression foldable) {, +        if (foldable instanceof Literal) {, +            return (Literal) foldable;, +        }, +, +        if (!foldable.foldable()) {, +            throw new SqlIllegalArgumentException("Foldable expression required for Literal creation; received unfoldable " + foldable);, +        }, +, +        return new Literal(foldable.location(), foldable.fold(), foldable.dataType());, +    }, +++ b/qa/sql/src/main/resources/math.sql-spec, +// constants, +mathConstantPI, +SELECT ABS(emp_no) m, PI() as pi, first_name FROM "test_emp" WHERE emp_no < 10010 ORDER BY emp_no;, +mathConstant, +SELECT 5 + 2 * 3 / 2 % 2 AS c, PI() as e, first_name FROM "test_emp" WHERE emp_no < 10010 ORDER BY emp_no;, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +        if (e instanceof NamedExpression) {, +            return ((NamedExpression) e).toAttribute();, +        }, +        if (e != null && e.foldable()) {, +            return new LiteralAttribute(Literal.of(e));, +        }, +        return null;, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/Literal.java, +import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;, +    @Override, +    @Override, +, +    public static Literal of(Expression foldable) {, +        if (foldable instanceof Literal) {, +            return (Literal) foldable;, +        }, +, +        if (!foldable.foldable()) {, +            throw new SqlIllegalArgumentException("Foldable expression required for Literal creation; received unfoldable " + foldable);, +        }, +, +        return new Literal(foldable.location(), foldable.fold(), foldable.dataType());, +    }, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/LiteralAttribute.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.sql.expression;, +, +import org.elasticsearch.xpack.sql.expression.function.scalar.processor.definition.ConstantInput;, +import org.elasticsearch.xpack.sql.expression.function.scalar.processor.definition.ProcessorDefinition;, +import org.elasticsearch.xpack.sql.tree.Location;, +import org.elasticsearch.xpack.sql.type.DataType;, +, +public class LiteralAttribute extends TypedAttribute {, +, +    private final Literal literal;, +, +    public LiteralAttribute(Literal literal) {, +        this(literal.location(), String.valueOf(literal.fold()), null, false, null, false, literal.dataType(), literal);, +    }]