[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/SecurityIndexSearcherWrapper.java, +import org.elasticsearch.index.search.NestedHelper;, +import static org.apache.lucene.search.BooleanClause.Occur.FILTER;, +                            NestedHelper nestedHelper = new NestedHelper(queryShardContext.getMapperService());, +                            if (nestedHelper.mightMatchNestedDocs(roleQuery)) {, +                                roleQuery = new BooleanQuery.Builder(), +                                    .add(roleQuery, FILTER), +                                    .add(Queries.newNonNestedFilter(queryShardContext.indexVersionCreated()), FILTER), +                                    .build();, +                            }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/accesscontrol/SecurityIndexSearcherWrapper.java, +import org.elasticsearch.index.search.NestedHelper;, +import static org.apache.lucene.search.BooleanClause.Occur.FILTER;, +                            NestedHelper nestedHelper = new NestedHelper(queryShardContext.getMapperService());, +                            if (nestedHelper.mightMatchNestedDocs(roleQuery)) {, +                                roleQuery = new BooleanQuery.Builder(), +                                    .add(roleQuery, FILTER), +                                    .add(Queries.newNonNestedFilter(queryShardContext.indexVersionCreated()), FILTER), +                                    .build();, +                            }, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/integration/DocumentLevelSecurityTests.java, +            "user3:" + usersPasswdHashed + "\n" +, +            "user4:" + usersPasswdHashed + "\n";, +                "role3:user2,user3\n" +, +                "role4:user4\n";, +                "      query: '{\"term\" : {\"field2\" : \"value2\"}}'\n" + // <-- query defined as json in a string, +                "role4:\n" +, +                "  cluster: [ all ]\n" +, +                "  indices:\n" +, +                "    - names: '*'\n" +, +                "      privileges: [ ALL ]\n" +, +                // query that can match nested documents, +                "      query: '{\"bool\": { \"must_not\": { \"term\" : {\"field1\" : \"value2\"}}}}'";, +                .filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue("user4", USERS_PASSWD)))]