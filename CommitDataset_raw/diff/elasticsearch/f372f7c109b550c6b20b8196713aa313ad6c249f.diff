[+++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/StringScriptDataComparator.java, +import org.apache.lucene.util.BytesRef;, +public class StringScriptDataComparator extends FieldComparator<BytesRef> {, +    private BytesRef[] values;, +    private BytesRef bottom;, +    , +    private BytesRef spare = new BytesRef();, +    , +    private int spareDoc = -1;, +        values = new BytesRef[numHits];, +    public FieldComparator<BytesRef> setNextReader(AtomicReaderContext context) throws IOException {, +        spareDoc = -1;, +        final BytesRef val1 = values[slot1];, +        final BytesRef val2 = values[slot2];, +      , +        return bottom.compareTo(spare);, +    public int compareDocToValue(int doc, BytesRef val2) throws IOException {, +        setSpare(doc);, +        return spare.compareTo(val2);, +    }, +    , +    private void setSpare(int doc) {, +        if (spareDoc == doc) {, +            return;, +        }, +        , +        script.setNextDocId(doc);, +        spare.copyChars(script.run().toString());, +        spareDoc = doc;, +        setSpare(doc);, +        if (values[slot] == null) {, +           values[slot] = BytesRef.deepCopyOf(spare);, +        } else {, +            values[slot].copyBytes(spare);, +        }, +    public BytesRef value(int slot) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/StringScriptDataComparator.java, +import org.apache.lucene.util.BytesRef;, +public class StringScriptDataComparator extends FieldComparator<BytesRef> {, +    private BytesRef[] values;, +    private BytesRef bottom;, +    , +    private BytesRef spare = new BytesRef();, +    , +    private int spareDoc = -1;, +        values = new BytesRef[numHits];, +    public FieldComparator<BytesRef> setNextReader(AtomicReaderContext context) throws IOException {, +        spareDoc = -1;, +        final BytesRef val1 = values[slot1];, +        final BytesRef val2 = values[slot2];, +      , +        return bottom.compareTo(spare);, +    public int compareDocToValue(int doc, BytesRef val2) throws IOException {, +        setSpare(doc);, +        return spare.compareTo(val2);, +    }, +    , +    private void setSpare(int doc) {, +        if (spareDoc == doc) {, +            return;, +        }, +        , +        script.setNextDocId(doc);, +        spare.copyChars(script.run().toString());, +        spareDoc = doc;, +        setSpare(doc);, +        if (values[slot] == null) {, +           values[slot] = BytesRef.deepCopyOf(spare);, +        } else {, +            values[slot].copyBytes(spare);, +        }, +    public BytesRef value(int slot) {, +++ b/src/test/java/org/elasticsearch/test/integration/search/sort/SimpleSortTests.java, +    public void testSortScript() throws IOException {, +        try {, +            client.admin().indices().prepareDelete("test").execute().actionGet();, +        } catch (Exception e) {, +            // ignore, +        }, +        , +        String mapping = jsonBuilder().startObject().startObject("profile").field("dynamic", "strict"), +                .startObject("properties"), +                .startObject("id").field("type", "integer").field("index", "not_analyzed").field("store", true).endObject(), +                .startObject("groups_code").startObject("properties").field("type", "integer").field("index", "not_analyzed").endObject().endObject(), +                .startObject("date").field("type", "date").field("index", "not_analyzed").field("format", "date_time_no_millis").endObject(), +                .endObject().endObject().endObject().string();, +        client.admin().indices().prepareCreate("test"), +                .setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 2).put("index.number_of_replicas", 0)).addMapping("test", mapping);, +        , +        client.prepareIndex("test", "test", "1").setSource(jsonBuilder().startObject(), +                .startArray("groups_code").startObject().field("id", 47642).field("date", "2010-08-12T07:54:55Z").endObject().endArray(), +                .endObject()).execute().actionGet();, +        client.prepareIndex("test", "test", "2").setSource(jsonBuilder().startObject(), +                .startArray("groups_code").startObject().field("id", 47642).field("date", "2010-05-04T12:10:54Z").endObject().endArray(), +                .endObject()).execute().actionGet();, +        client.admin().indices().prepareRefresh("test").execute().actionGet();, +, +        SearchResponse searchResponse = client.prepareSearch(), +                .setQuery(matchAllQuery()), +                .addSort(SortBuilders.scriptSort("\u0027\u0027", "string")).setSize(10)]