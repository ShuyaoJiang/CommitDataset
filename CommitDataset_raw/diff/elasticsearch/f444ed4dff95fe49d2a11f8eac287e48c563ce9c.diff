[+++ b/src/main/java/org/elasticsearch/common/lucene/all/AllField.java, +import org.apache.lucene.document.FieldType;, +public class AllField extends Field {, +    public AllField(String name, AllEntries allEntries, Analyzer analyzer, FieldType fieldType) {, +        super(name, fieldType);, +        if (fieldType().stored()) {, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllField.java, +import org.apache.lucene.document.FieldType;, +public class AllField extends Field {, +    public AllField(String name, AllEntries allEntries, Analyzer analyzer, FieldType fieldType) {, +        super(name, fieldType);, +        if (fieldType().stored()) {, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.apache.lucene.document.FieldType;, +                    FieldType fieldType = new FieldType(IdFieldMapper.Defaults.ID_FIELD_TYPE);, +                    fieldType.setTokenized(false);, +                    idFieldMapper = new IdFieldMapper(fieldType);, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllField.java, +import org.apache.lucene.document.FieldType;, +public class AllField extends Field {, +    public AllField(String name, AllEntries allEntries, Analyzer analyzer, FieldType fieldType) {, +        super(name, fieldType);, +        if (fieldType().stored()) {, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.apache.lucene.document.FieldType;, +                    FieldType fieldType = new FieldType(IdFieldMapper.Defaults.ID_FIELD_TYPE);, +                    fieldType.setTokenized(false);, +                    idFieldMapper = new IdFieldMapper(fieldType);, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            return new Term(indexName, value);, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllField.java, +import org.apache.lucene.document.FieldType;, +public class AllField extends Field {, +    public AllField(String name, AllEntries allEntries, Analyzer analyzer, FieldType fieldType) {, +        super(name, fieldType);, +        if (fieldType().stored()) {, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.apache.lucene.document.FieldType;, +                    FieldType fieldType = new FieldType(IdFieldMapper.Defaults.ID_FIELD_TYPE);, +                    fieldType.setTokenized(false);, +                    idFieldMapper = new IdFieldMapper(fieldType);, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            return new Term(indexName, value);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +        public T storeTermVectors(boolean termVectors) {, +        public T storeTermVectorOffsets(boolean termVectorOffsets) {, +        public T storeTermVectorPositions(boolean termVectorPositions) {, +        public T storeTermVectorPayloads(boolean termVectorPayloads) {, +        public T tokenized(boolean tokenized) {, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllField.java, +import org.apache.lucene.document.FieldType;, +public class AllField extends Field {, +    public AllField(String name, AllEntries allEntries, Analyzer analyzer, FieldType fieldType) {, +        super(name, fieldType);, +        if (fieldType().stored()) {, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.apache.lucene.document.FieldType;, +                    FieldType fieldType = new FieldType(IdFieldMapper.Defaults.ID_FIELD_TYPE);, +                    fieldType.setTokenized(false);, +                    idFieldMapper = new IdFieldMapper(fieldType);, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            return new Term(indexName, value);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +        public T storeTermVectors(boolean termVectors) {, +        public T storeTermVectorOffsets(boolean termVectorOffsets) {, +        public T storeTermVectorPositions(boolean termVectorPositions) {, +        public T storeTermVectorPayloads(boolean termVectorPayloads) {, +        public T tokenized(boolean tokenized) {, +++ b/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +import org.apache.lucene.document.FieldType;, +        public static final boolean STORE = false;, +, +        public static final FieldType GEO_STRING_FIELD_TYPE = new FieldType(StringFieldMapper.Defaults.STRING_FIELD_TYPE);, +, +        static {, +            GEO_STRING_FIELD_TYPE.setIndexed(true);, +            GEO_STRING_FIELD_TYPE.setTokenized(false);, +            GEO_STRING_FIELD_TYPE.setOmitNorms(true);, +            GEO_STRING_FIELD_TYPE.setIndexOptions(IndexOptions.DOCS_ONLY);, +            GEO_STRING_FIELD_TYPE.freeze();, +        }, +        private boolean store = Defaults.STORE;, +        public Builder store(boolean store) {, +                    .includeInAll(false).store(store).build(context);, +                geohashMapper = stringField(Names.GEOHASH).index(true).tokenized(false).includeInAll(false).omitNorms(true).indexOptions(IndexOptions.DOCS_ONLY).build(context);, +        if (geoStringMapper.stored() != Defaults.STORE) {, +            builder.field("store", geoStringMapper.stored());, +                super(name, new FieldType(GeoPointFieldMapper.Defaults.GEO_STRING_FIELD_TYPE));, +                        boost, fieldType, nullValue,, +        public GeoStringFieldMapper(Names names, float boost, FieldType fieldType, String nullValue, NamedAnalyzer indexAnalyzer, NamedAnalyzer searchAnalyzer) {, +            super(names, boost, fieldType, nullValue, indexAnalyzer, searchAnalyzer);, +++ b/src/main/java/org/elasticsearch/common/lucene/all/AllField.java, +import org.apache.lucene.document.FieldType;, +public class AllField extends Field {, +    public AllField(String name, AllEntries allEntries, Analyzer analyzer, FieldType fieldType) {, +        super(name, fieldType);, +        if (fieldType().stored()) {, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.apache.lucene.document.FieldType;, +                    FieldType fieldType = new FieldType(IdFieldMapper.Defaults.ID_FIELD_TYPE);]