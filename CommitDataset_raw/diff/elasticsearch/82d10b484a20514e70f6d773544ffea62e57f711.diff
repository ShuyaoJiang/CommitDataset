[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +import org.gradle.api.artifacts.Configuration, +            configureForbiddenApisCli(project),, +        Configuration forbiddenApisConfiguration = project.configurations.create("forbiddenApisCliJar"), +            forbiddenApisCliJar ('de.thetaphi:forbiddenapis:2.5'), +        Task forbiddenApisCli = project.tasks.create('forbiddenApis'), +                project.tasks.create(sourceSet.getTaskName('forbiddenApis', null), ForbiddenApisCliTask) {, +                    execAction = { spec ->, +                        spec.classpath = project.files(, +                        spec.executable = "${project.runtimeJavaHome}/bin/java", +                    }, +                    inputs.files(, +                            forbiddenApisConfiguration,, +                            sourceSet.compileClasspath,, +                            sourceSet.runtimeClasspath, +                    ), +, +                    targetCompatibility = project.compilerJavaVersion, +                    bundledSignatures = [, +                       "jdk-unsafe", "jdk-deprecated", "jdk-non-portable", "jdk-system-out", +                    ], +                    signaturesFiles = project.files(, +                            buildResources.copy("forbidden/jdk-signatures.txt"),, +                            buildResources.copy("forbidden/es-all-signatures.txt"), +                    ), +                    suppressAnnotations = ['**.SuppressForbidden'], +                        signaturesFiles += project.files(, +                                buildResources.copy("forbidden/es-test-signatures.txt"),, +                                buildResources.copy("forbidden/http-signatures.txt"), +                        ), +                        signaturesFiles += project.files(buildResources.copy("forbidden/es-server-signatures.txt")), +                    classesDirs = sourceSet.output.classesDirs, +                    ext.replaceSignatureFiles = { String... names ->, +                        signaturesFiles = project.files(, +                                names.collect { buildResources.copy("forbidden/${it}.txt") }, +                        ), +                    ext.addSignatureFiles = { String... names ->, +                        signaturesFiles += project.files(, +                                names.collect { buildResources.copy("forbidden/${it}.txt") }, +                        ), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +import org.gradle.api.artifacts.Configuration, +            configureForbiddenApisCli(project),, +        Configuration forbiddenApisConfiguration = project.configurations.create("forbiddenApisCliJar"), +            forbiddenApisCliJar ('de.thetaphi:forbiddenapis:2.5'), +        Task forbiddenApisCli = project.tasks.create('forbiddenApis'), +                project.tasks.create(sourceSet.getTaskName('forbiddenApis', null), ForbiddenApisCliTask) {, +                    execAction = { spec ->, +                        spec.classpath = project.files(, +                        spec.executable = "${project.runtimeJavaHome}/bin/java", +                    }, +                    inputs.files(, +                            forbiddenApisConfiguration,, +                            sourceSet.compileClasspath,, +                            sourceSet.runtimeClasspath, +                    ), +, +                    targetCompatibility = project.compilerJavaVersion, +                    bundledSignatures = [, +                       "jdk-unsafe", "jdk-deprecated", "jdk-non-portable", "jdk-system-out", +                    ], +                    signaturesFiles = project.files(, +                            buildResources.copy("forbidden/jdk-signatures.txt"),, +                            buildResources.copy("forbidden/es-all-signatures.txt"), +                    ), +                    suppressAnnotations = ['**.SuppressForbidden'], +                        signaturesFiles += project.files(, +                                buildResources.copy("forbidden/es-test-signatures.txt"),, +                                buildResources.copy("forbidden/http-signatures.txt"), +                        ), +                        signaturesFiles += project.files(buildResources.copy("forbidden/es-server-signatures.txt")), +                    classesDirs = sourceSet.output.classesDirs, +                    ext.replaceSignatureFiles = { String... names ->, +                        signaturesFiles = project.files(, +                                names.collect { buildResources.copy("forbidden/${it}.txt") }, +                        ), +                    ext.addSignatureFiles = { String... names ->, +                        signaturesFiles += project.files(, +                                names.collect { buildResources.copy("forbidden/${it}.txt") }, +                        ), +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/ExportElasticsearchBuildResourcesTask.java, +import java.nio.file.StandardCopyOption;, +                    Files.copy(is, destination, StandardCopyOption.REPLACE_EXISTING);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +import org.gradle.api.artifacts.Configuration, +            configureForbiddenApisCli(project),, +        Configuration forbiddenApisConfiguration = project.configurations.create("forbiddenApisCliJar"), +            forbiddenApisCliJar ('de.thetaphi:forbiddenapis:2.5'), +        Task forbiddenApisCli = project.tasks.create('forbiddenApis'), +                project.tasks.create(sourceSet.getTaskName('forbiddenApis', null), ForbiddenApisCliTask) {, +                    execAction = { spec ->, +                        spec.classpath = project.files(, +                        spec.executable = "${project.runtimeJavaHome}/bin/java", +                    }, +                    inputs.files(, +                            forbiddenApisConfiguration,, +                            sourceSet.compileClasspath,, +                            sourceSet.runtimeClasspath, +                    ), +]