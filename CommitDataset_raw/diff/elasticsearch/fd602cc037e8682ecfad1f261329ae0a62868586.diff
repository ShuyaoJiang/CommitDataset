[+++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/blobstore/AzureBlobContainer.java, +        logger.trace("blobExists({})", blobName);, +        logger.trace("readBlob({})", blobName);, +        logger.trace("writeBlob({}, stream, {})", blobName, blobSize);, +        logger.trace("writeBlob({}, bytes)", blobName);, +        logger.trace("deleteBlob({})", blobName);, +        logger.trace("listBlobsByPrefix({})", prefix);, +        logger.trace("move({}, {})", sourceBlobName, targetBlobName);, +        } catch (URISyntaxException | StorageException e) {, +        logger.trace("listBlobs()");, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/blobstore/AzureBlobContainer.java, +        logger.trace("blobExists({})", blobName);, +        logger.trace("readBlob({})", blobName);, +        logger.trace("writeBlob({}, stream, {})", blobName, blobSize);, +        logger.trace("writeBlob({}, bytes)", blobName);, +        logger.trace("deleteBlob({})", blobName);, +        logger.trace("listBlobsByPrefix({})", prefix);, +        logger.trace("move({}, {})", sourceBlobName, targetBlobName);, +        } catch (URISyntaxException | StorageException e) {, +        logger.trace("listBlobs()");, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/storage/AzureStorageService.java, +import java.util.function.Function;, +            new Setting<>("repositories.azure.container", "elasticsearch-snapshots", Function.identity(), Property.NodeScope);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/blobstore/AzureBlobContainer.java, +        logger.trace("blobExists({})", blobName);, +        logger.trace("readBlob({})", blobName);, +        logger.trace("writeBlob({}, stream, {})", blobName, blobSize);, +        logger.trace("writeBlob({}, bytes)", blobName);, +        logger.trace("deleteBlob({})", blobName);, +        logger.trace("listBlobsByPrefix({})", prefix);, +        logger.trace("move({}, {})", sourceBlobName, targetBlobName);, +        } catch (URISyntaxException | StorageException e) {, +        logger.trace("listBlobs()");, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/storage/AzureStorageService.java, +import java.util.function.Function;, +            new Setting<>("repositories.azure.container", "elasticsearch-snapshots", Function.identity(), Property.NodeScope);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/storage/AzureStorageServiceImpl.java, +            // We list the blobs using a flat blob listing mode, +            for (ListBlobItem blobItem : blob_container.listBlobs(path, true)) {, +                String blobName = blobNameFromUri(blobItem.getUri());, +                logger.trace("removing blob [{}] full URI was [{}]", blobName, blobItem.getUri());, +                deleteBlob(account, mode, container, blobName);, +    /**, +     * Extract the blob name from a URI like https://myservice.azure.net/container/path/to/myfile, +     * It should remove the container part (first part of the path) and gives path/to/myfile, +     * @param uri URI to parse, +     * @return The blob name relative to the container, +     */, +    public static String blobNameFromUri(URI uri) {, +        String path = uri.getPath();, +, +        // We remove the container name from the path, +        // The 3 magic number cames from the fact we have // in the first part of the URI (protocol), +        // Then a / after the server address, +        // And we finally split after the container/, +        String[] splits = path.split("/", 3);, +, +        // We return the remaining end of the string, +        return splits[2];, +    }, +, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/blobstore/AzureBlobContainer.java, +        logger.trace("blobExists({})", blobName);, +        logger.trace("readBlob({})", blobName);, +        logger.trace("writeBlob({}, stream, {})", blobName, blobSize);, +        logger.trace("writeBlob({}, bytes)", blobName);, +        logger.trace("deleteBlob({})", blobName);, +        logger.trace("listBlobsByPrefix({})", prefix);, +        logger.trace("move({}, {})", sourceBlobName, targetBlobName);, +        } catch (URISyntaxException | StorageException e) {, +        logger.trace("listBlobs()");, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/storage/AzureStorageService.java, +import java.util.function.Function;, +            new Setting<>("repositories.azure.container", "elasticsearch-snapshots", Function.identity(), Property.NodeScope);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/cloud/azure/storage/AzureStorageServiceImpl.java, +            // We list the blobs using a flat blob listing mode, +            for (ListBlobItem blobItem : blob_container.listBlobs(path, true)) {, +                String blobName = blobNameFromUri(blobItem.getUri());, +                logger.trace("removing blob [{}] full URI was [{}]", blobName, blobItem.getUri());, +                deleteBlob(account, mode, container, blobName);, +    /**, +     * Extract the blob name from a URI like https://myservice.azure.net/container/path/to/myfile, +     * It should remove the container part (first part of the path) and gives path/to/myfile, +     * @param uri URI to parse, +     * @return The blob name relative to the container, +     */, +    public static String blobNameFromUri(URI uri) {, +        String path = uri.getPath();, +, +        // We remove the container name from the path, +        // The 3 magic number cames from the fact we have // in the first part of the URI (protocol), +        // Then a / after the server address, +        // And we finally split after the container/, +        String[] splits = path.split("/", 3);, +, +        // We return the remaining end of the string, +        return splits[2];, +    }, +, +++ b/plugins/repository-azure/src/test/java/org/elasticsearch/cloud/azure/AbstractAzureIntegTestCase.java]