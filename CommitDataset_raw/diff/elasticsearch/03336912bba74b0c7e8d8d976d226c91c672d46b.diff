[+++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authc/Realms.java, +            addInternalRealms(internalRealms);, +        // there is no "realms" configuration, add the defaults, +        addInternalRealms(realms);, +    private void addInternalRealms(List<Realm> realms) {, +        Realm.Factory indexRealmFactory = factories.get(ESNativeRealm.TYPE);, +        if (indexRealmFactory != null) {, +            realms.add(indexRealmFactory.createDefault("default_" + ESNativeRealm.TYPE));, +        }, +        Realm.Factory esUsersRealm = factories.get(ESUsersRealm.TYPE);, +        if (esUsersRealm != null) {, +            realms.add(esUsersRealm.createDefault("default_" + ESUsersRealm.TYPE));, +        }, +    }, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authc/Realms.java, +            addInternalRealms(internalRealms);, +        // there is no "realms" configuration, add the defaults, +        addInternalRealms(realms);, +    private void addInternalRealms(List<Realm> realms) {, +        Realm.Factory indexRealmFactory = factories.get(ESNativeRealm.TYPE);, +        if (indexRealmFactory != null) {, +            realms.add(indexRealmFactory.createDefault("default_" + ESNativeRealm.TYPE));, +        }, +        Realm.Factory esUsersRealm = factories.get(ESUsersRealm.TYPE);, +        if (esUsersRealm != null) {, +            realms.add(esUsersRealm.createDefault("default_" + ESUsersRealm.TYPE));, +        }, +    }, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/shield/authc/RealmsTests.java, +import org.elasticsearch.shield.authc.esnative.ESNativeRealm;, +import static org.hamcrest.Matchers.isOneOf;, +        factories.put(ESUsersRealm.TYPE, new DummyRealm.Factory(ESUsersRealm.TYPE, true));, +        factories.put(ESNativeRealm.TYPE, new DummyRealm.Factory(ESNativeRealm.TYPE, true));, +        List<Integer> orders = new ArrayList<>(factories.size() - 2);, +        for (int i = 0; i < factories.size() - 2; i++) {, +        for (int i = 0; i < factories.size() - 2; i++) {, +        assertThat(realm.type(), equalTo(ESNativeRealm.TYPE));, +        assertThat(realm.name(), equalTo("default_" + ESNativeRealm.TYPE));, +        assertThat(iter.hasNext(), is(true));, +        realm = iter.next();, +        List<Integer> orders = new ArrayList<>(factories.size() - 2);, +        for (int i = 0; i < factories.size() - 2; i++) {, +        for (int i = 0; i < factories.size() - 2; i++) {, +            assertThat(realm.type, isOneOf(ESUsersRealm.TYPE, ESNativeRealm.TYPE));, +        assertThat(i, is(2));, +        List<Integer> orders = new ArrayList<>(factories.size() - 2);, +        for (int i = 0; i < factories.size() - 2; i++) {, +        for (int i = 0; i < factories.size() - 2; i++) {, +                // Default realms are inserted when factories size is 1 and enabled is false, +                assertThat(realm.type(), equalTo(ESNativeRealm.TYPE));, +                assertThat(realm.name(), equalTo("default_" + ESNativeRealm.TYPE));, +                assertThat(iterator.hasNext(), is(true));, +                realm = iterator.next();, +                if (type().equals(ESNativeRealm.TYPE) || type().equals(ESUsersRealm.TYPE)) {, +                    return new DummyRealm(type(), new RealmConfig(name, Settings.EMPTY,]