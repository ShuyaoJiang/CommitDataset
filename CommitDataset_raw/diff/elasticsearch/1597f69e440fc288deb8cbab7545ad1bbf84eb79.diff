[+++ b/docs/reference/migration/migrate_8_0.asciidoc, +* <<breaking_80_java_changes>>, +include::migrate_8_0/java.asciidoc[], +++ b/docs/reference/migration/migrate_8_0.asciidoc, +* <<breaking_80_java_changes>>, +include::migrate_8_0/java.asciidoc[], +++ b/docs/reference/migration/migrate_8_0/java.asciidoc, +[float], +[[breaking_80_java_changes]], +=== Java API changes, +, +[float], +==== Changes to Fuzziness, +, +To create `Fuzziness` instances, use the `fromString` and `fromEdits` method, +instead of the `build` method that used to accept both Strings and numeric, +values. Several fuzziness setters on query builders (e.g., +MatchQueryBuilder#fuzziness) now accept only a `Fuzziness`instance instead of, +an Object. You should preferably use the available constants (e.g., +Fuzziness.ONE, Fuzziness.AUTO) or build your own instance using the above, +mentioned factory methods., +, +Fuzziness used to be lenient when it comes to parsing arbitrary numeric values, +while silently truncating them to one of the three allowed edit distances 0, 1, +or 2. This leniency is now removed and the class will throw errors when trying, +to construct an instance with another value (e.g. floats like 1.3 used to get, +accepted but truncated to 1). You should use one of the allowed values., +++ b/docs/reference/migration/migrate_8_0.asciidoc, +* <<breaking_80_java_changes>>, +include::migrate_8_0/java.asciidoc[], +++ b/docs/reference/migration/migrate_8_0/java.asciidoc, +[float], +[[breaking_80_java_changes]], +=== Java API changes, +, +[float], +==== Changes to Fuzziness, +, +To create `Fuzziness` instances, use the `fromString` and `fromEdits` method, +instead of the `build` method that used to accept both Strings and numeric, +values. Several fuzziness setters on query builders (e.g., +MatchQueryBuilder#fuzziness) now accept only a `Fuzziness`instance instead of, +an Object. You should preferably use the available constants (e.g., +Fuzziness.ONE, Fuzziness.AUTO) or build your own instance using the above, +mentioned factory methods., +, +Fuzziness used to be lenient when it comes to parsing arbitrary numeric values, +while silently truncating them to one of the three allowed edit distances 0, 1, +or 2. This leniency is now removed and the class will throw errors when trying, +to construct an instance with another value (e.g. floats like 1.3 used to get, +accepted but truncated to 1). You should use one of the allowed values., +++ b/server/src/main/java/org/elasticsearch/common/unit/Fuzziness.java, +import org.elasticsearch.common.Strings;, +    static final String X_FIELD_NAME = "fuzziness";, +, +    public static final Fuzziness ZERO = new Fuzziness("0");, +    public static final Fuzziness ONE = new Fuzziness("1");, +    public static final Fuzziness TWO = new Fuzziness("2");, +    public static final Fuzziness AUTO = new Fuzziness("AUTO");, +, +    static final int DEFAULT_LOW_DISTANCE = 3;, +    static final int DEFAULT_HIGH_DISTANCE = 6;, +        this.fuzziness = fuzziness;, +    /**, +     * Creates a {@link Fuzziness} instance from an edit distance. The value must be one of {@code [0, 1, 2]}, +     * Note: Using this method only makes sense if the field you are applying Fuzziness to is some sort of string., +     * @throws IllegalArgumentException if the edit distance is not in [0, 1, 2], +     */, +    public static Fuzziness fromEdits(int edits) {, +        switch (edits) {, +        case 0: return Fuzziness.ZERO;, +        case 1: return Fuzziness.ONE;, +        case 2: return Fuzziness.TWO;, +        default:, +            throw new IllegalArgumentException("Valid edit distances are [0, 1, 2] but was [" + edits + "]");, +    }, +, +    /**, +     * Creates a {@link Fuzziness} instance from a String representation. This can, +     * either be an edit distance where the value must be one of, +     * {@code ["0", "1", "2"]} or "AUTO" for a fuzziness that depends on the term, +     * length. Using the "AUTO" fuzziness, you can optionally supply low and high, +     * distance arguments in the format {@code "AUTO:[low],[high]"}. See the query, +     * DSL documentation for more information about how these values affect the, +     * fuzziness value., +     * Note: Using this method only makes sense if the field you, +     * are applying Fuzziness to is some sort of string., +     */, +    public static Fuzziness fromString(String fuzzinessString) {, +        if (Strings.isEmpty(fuzzinessString)) {, +            throw new IllegalArgumentException("fuzziness cannot be null or empty.");, +        }, +        String upperCase = fuzzinessString.toUpperCase(Locale.ROOT);, +        // check if it is one of the "AUTO" variants, +        if (upperCase.equals("AUTO")) {, +            return Fuzziness.AUTO;, +        } else if (upperCase.startsWith("AUTO:")) {, +            return parseCustomAuto(upperCase);, +        } else {, +            // should be a float or int representing a valid edit distance, otherwise throw error]