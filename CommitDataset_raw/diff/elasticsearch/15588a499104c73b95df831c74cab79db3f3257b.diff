[+++ b/build.gradle, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalHistogram.java, +    private void addEmptyBuckets(List<B> list, ReduceContext reduceContext) {, +        InternalAggregations reducedEmptySubAggs = InternalAggregations.reduce(Collections.singletonList(emptyBucketInfo.subAggregations),, +                reduceContext);, +                        iter.add(getFactory().createBucket(key, 0,, +                                reducedEmptySubAggs,, +                                keyed, formatter));, +                            iter.add(getFactory().createBucket(key, 0,, +                                    reducedEmptySubAggs,, +                                    keyed, formatter));, +                    iter.add(getFactory().createBucket(key, 0,, +                            reducedEmptySubAggs, keyed,, +                            formatter));, +                iter.add(getFactory().createBucket(key, 0,, +                        reducedEmptySubAggs, keyed,, +                        formatter));, +            addEmptyBuckets(reducedBuckets, reduceContext);, +++ b/build.gradle, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalHistogram.java, +    private void addEmptyBuckets(List<B> list, ReduceContext reduceContext) {, +        InternalAggregations reducedEmptySubAggs = InternalAggregations.reduce(Collections.singletonList(emptyBucketInfo.subAggregations),, +                reduceContext);, +                        iter.add(getFactory().createBucket(key, 0,, +                                reducedEmptySubAggs,, +                                keyed, formatter));, +                            iter.add(getFactory().createBucket(key, 0,, +                                    reducedEmptySubAggs,, +                                    keyed, formatter));, +                    iter.add(getFactory().createBucket(key, 0,, +                            reducedEmptySubAggs, keyed,, +                            formatter));, +                iter.add(getFactory().createBucket(key, 0,, +                        reducedEmptySubAggs, keyed,, +                        formatter));, +            addEmptyBuckets(reducedBuckets, reduceContext);, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/BucketSelectorTests.java, +import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.derivative;, +import static org.hamcrest.Matchers.nullValue;, +        createIndex("idx_with_gaps");, +        builders.add(client().prepareIndex("idx_with_gaps", "type").setSource(newDocBuilder(1, 1, 0, 0)));, +        builders.add(client().prepareIndex("idx_with_gaps", "type").setSource(newDocBuilder(1, 2, 0, 0)));, +        builders.add(client().prepareIndex("idx_with_gaps", "type").setSource(newDocBuilder(3, 1, 0, 0)));, +        builders.add(client().prepareIndex("idx_with_gaps", "type").setSource(newDocBuilder(3, 3, 0, 0)));, +        return newDocBuilder(randomIntBetween(minNumber, maxNumber), randomIntBetween(minNumber, maxNumber),, +                randomIntBetween(minNumber, maxNumber), randomIntBetween(minNumber, maxNumber));, +    }, +, +    private XContentBuilder newDocBuilder(int field1Value, int field2Value, int field3Value, int field4Value) throws IOException {, +        jsonBuilder.field(FIELD_1_NAME, field1Value);, +        jsonBuilder.field(FIELD_2_NAME, field2Value);, +        jsonBuilder.field(FIELD_3_NAME, field3Value);, +        jsonBuilder.field(FIELD_4_NAME, field4Value);, +, +    public void testEmptyBuckets() {, +        SearchResponse response = client().prepareSearch("idx_with_gaps"), +                .addAggregation(histogram("histo").field(FIELD_1_NAME).interval(1), +                        .subAggregation(histogram("inner_histo").field(FIELD_1_NAME).interval(1).extendedBounds(1l, 4l).minDocCount(0), +                                .subAggregation(derivative("derivative").setBucketsPaths("_count").gapPolicy(GapPolicy.INSERT_ZEROS)))), +                .execute().actionGet();, +, +        assertSearchResponse(response);, +, +        InternalHistogram<Bucket> histo = response.getAggregations().get("histo");, +        assertThat(histo, notNullValue());, +        assertThat(histo.getName(), equalTo("histo"));, +        List<? extends Bucket> buckets = histo.getBuckets();, +        assertThat(buckets.size(), equalTo(3));, +, +        Histogram.Bucket bucket = buckets.get(0);, +        assertThat(bucket, notNullValue());, +        assertThat(bucket.getKeyAsString(), equalTo("1"));, +        Histogram innerHisto = bucket.getAggregations().get("inner_histo");, +        assertThat(innerHisto, notNullValue());, +        List<? extends Histogram.Bucket> innerBuckets = innerHisto.getBuckets();, +        assertThat(innerBuckets, notNullValue());, +        assertThat(innerBuckets.size(), equalTo(4));, +        for (int i = 0; i < innerBuckets.size(); i++) {, +            Histogram.Bucket innerBucket = innerBuckets.get(i);, +            if (i == 0) {, +                assertThat(innerBucket.getAggregations().get("derivative"), nullValue());, +            } else {, +                assertThat(innerBucket.getAggregations().get("derivative"), notNullValue());, +            }, +        }, +, +        bucket = buckets.get(1);, +        assertThat(bucket, notNullValue());, +        assertThat(bucket.getKeyAsString(), equalTo("2"));, +        innerHisto = bucket.getAggregations().get("inner_histo");, +        assertThat(innerHisto, notNullValue());, +        innerBuckets = innerHisto.getBuckets();, +        assertThat(innerBuckets, notNullValue());, +        assertThat(innerBuckets.size(), equalTo(4));, +        for (int i = 0; i < innerBuckets.size(); i++) {, +            Histogram.Bucket innerBucket = innerBuckets.get(i);, +            if (i == 0) {, +                assertThat(innerBucket.getAggregations().get("derivative"), nullValue());, +            } else {]