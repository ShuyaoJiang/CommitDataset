[+++ b/core/src/main/java/org/elasticsearch/Version.java, +     * Returns the minimum version between the 2., +    public static Version min(Version version1, Version version2) {, +     * Returns the maximum version between the 2, +     */, +    public static Version max(Version version1, Version version2) { return version1.id > version2.id ? version1 : version2; }, +, +    /**, +        return Version.min(this, fromId(bwcMajor * 1000000 + bwcMinor * 10000 + 99));, +    }, +, +    /**, +     * Returns the minimum created index version that this version supports. Indices created with lower versions, +     * can't be used with this version., +     */, +    public Version minimumIndexCompatibilityVersion() {, +        final int bwcMajor;, +        if (major == 5) {, +            bwcMajor = 2; // we jumped from 2 to 5, +        } else {, +            bwcMajor = major - 1;, +        }, +        final int bwcMinor = 0;, +        return Version.min(this, fromId(bwcMajor * 1000000 + bwcMinor * 10000 + 99));, +++ b/core/src/main/java/org/elasticsearch/Version.java, +     * Returns the minimum version between the 2., +    public static Version min(Version version1, Version version2) {, +     * Returns the maximum version between the 2, +     */, +    public static Version max(Version version1, Version version2) { return version1.id > version2.id ? version1 : version2; }, +, +    /**, +        return Version.min(this, fromId(bwcMajor * 1000000 + bwcMinor * 10000 + 99));, +    }, +, +    /**, +     * Returns the minimum created index version that this version supports. Indices created with lower versions, +     * can't be used with this version., +     */, +    public Version minimumIndexCompatibilityVersion() {, +        final int bwcMajor;, +        if (major == 5) {, +            bwcMajor = 2; // we jumped from 2 to 5, +        } else {, +            bwcMajor = major - 1;, +        }, +        final int bwcMinor = 0;, +        return Version.min(this, fromId(bwcMajor * 1000000 + bwcMinor * 10000 + 99));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                final Version createdVersion = Version.min(Version.CURRENT, nodes.getSmallestNonClientNodeVersion());, +++ b/core/src/main/java/org/elasticsearch/Version.java, +     * Returns the minimum version between the 2., +    public static Version min(Version version1, Version version2) {, +     * Returns the maximum version between the 2, +     */, +    public static Version max(Version version1, Version version2) { return version1.id > version2.id ? version1 : version2; }, +, +    /**, +        return Version.min(this, fromId(bwcMajor * 1000000 + bwcMinor * 10000 + 99));, +    }, +, +    /**, +     * Returns the minimum created index version that this version supports. Indices created with lower versions, +     * can't be used with this version., +     */, +    public Version minimumIndexCompatibilityVersion() {, +        final int bwcMajor;, +        if (major == 5) {, +            bwcMajor = 2; // we jumped from 2 to 5, +        } else {, +            bwcMajor = major - 1;, +        }, +        final int bwcMinor = 0;, +        return Version.min(this, fromId(bwcMajor * 1000000 + bwcMinor * 10000 + 99));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                final Version createdVersion = Version.min(Version.CURRENT, nodes.getSmallestNonClientNodeVersion());, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexStateService.java, +import org.elasticsearch.Version;, +                final Version minIndexCompatibilityVersion = currentState.getNodes().getMaxNodeVersion(), +                    .minimumIndexCompatibilityVersion();, +                    indexMetaData = metaDataIndexUpgradeService.upgradeIndexMetaData(indexMetaData, minIndexCompatibilityVersion);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +     * Returns the minimum version between the 2., +    public static Version min(Version version1, Version version2) {, +     * Returns the maximum version between the 2, +     */, +    public static Version max(Version version1, Version version2) { return version1.id > version2.id ? version1 : version2; }, +, +    /**, +        return Version.min(this, fromId(bwcMajor * 1000000 + bwcMinor * 10000 + 99));, +    }, +, +    /**, +     * Returns the minimum created index version that this version supports. Indices created with lower versions, +     * can't be used with this version., +     */, +    public Version minimumIndexCompatibilityVersion() {, +        final int bwcMajor;, +        if (major == 5) {, +            bwcMajor = 2; // we jumped from 2 to 5]