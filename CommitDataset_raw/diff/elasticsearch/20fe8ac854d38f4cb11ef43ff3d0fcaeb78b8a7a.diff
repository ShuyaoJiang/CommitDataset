[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +     * Returns an object that will resolve at execution time of the given task to a uri for the cluster., +    static Object setup(Project project, Task task, ClusterConfiguration config) {, +        return "${-> nodes[0].transportUri()}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +     * Returns an object that will resolve at execution time of the given task to a uri for the cluster., +    static Object setup(Project project, Task task, ClusterConfiguration config) {, +        return "${-> nodes[0].transportUri()}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +import org.gradle.api.GradleException, +            Object clusterUri = ClusterFormationTasks.setup(project, this, clusterConfig), +            systemProperty('tests.cluster', clusterUri), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +     * Returns an object that will resolve at execution time of the given task to a uri for the cluster., +    static Object setup(Project project, Task task, ClusterConfiguration config) {, +        return "${-> nodes[0].transportUri()}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +import org.gradle.api.GradleException, +            Object clusterUri = ClusterFormationTasks.setup(project, this, clusterConfig), +            systemProperty('tests.cluster', clusterUri), +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +     * Returns an object that will resolve at execution time of the given task to a uri for the cluster., +    static Object setup(Project project, Task task, ClusterConfiguration config) {, +        return "${-> nodes[0].transportUri()}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +import org.gradle.api.GradleException, +            Object clusterUri = ClusterFormationTasks.setup(project, this, clusterConfig), +            systemProperty('tests.cluster', clusterUri), +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +     * Returns an object that will resolve at execution time of the given task to a uri for the cluster., +    static Object setup(Project project, Task task, ClusterConfiguration config) {, +        return "${-> nodes[0].transportUri()}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +import org.gradle.api.GradleException, +            Object clusterUri = ClusterFormationTasks.setup(project, this, clusterConfig), +            systemProperty('tests.cluster', clusterUri), +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, ReplicationRequest, ReplicationResponse> {, +    protected ReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new ReplicationRequest(request, shardId);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +     * Returns an object that will resolve at execution time of the given task to a uri for the cluster., +    static Object setup(Project project, Task task, ClusterConfiguration config) {, +        return "${-> nodes[0].transportUri()}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +import org.gradle.api.GradleException, +            Object clusterUri = ClusterFormationTasks.setup(project, this, clusterConfig), +            systemProperty('tests.cluster', clusterUri), +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, ReplicationRequest, ReplicationResponse> {, +    protected ReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new ReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<ReplicationRequest, ReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, ReplicationRequest::new, ReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, ReplicationRequest> shardOperationOnPrimary(MetaData metaData, ReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(ReplicationRequest request) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +     * Returns an object that will resolve at execution time of the given task to a uri for the cluster., +    static Object setup(Project project, Task task, ClusterConfiguration config) {, +        return "${-> nodes[0].transportUri()}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +import org.gradle.api.GradleException, +            Object clusterUri = ClusterFormationTasks.setup(project, this, clusterConfig), +            systemProperty('tests.cluster', clusterUri), +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, ReplicationRequest, ReplicationResponse> {, +    protected ReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new ReplicationRequest(request, shardId);]