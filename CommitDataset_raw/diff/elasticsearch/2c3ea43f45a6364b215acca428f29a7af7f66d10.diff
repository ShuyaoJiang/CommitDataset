[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.protocol.xpack.XPackUsageRequest;, +    static Request xpackUsage(XPackUsageRequest usageRequest) {, +        Request request = new Request(HttpGet.METHOD_NAME, "/_xpack/usage");, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(usageRequest.masterNodeTimeout());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.protocol.xpack.XPackUsageRequest;, +    static Request xpackUsage(XPackUsageRequest usageRequest) {, +        Request request = new Request(HttpGet.METHOD_NAME, "/_xpack/usage");, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(usageRequest.masterNodeTimeout());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/XPackClient.java, +import org.elasticsearch.protocol.xpack.XPackUsageRequest;, +import org.elasticsearch.protocol.xpack.XPackUsageResponse;, +, +    /**, +     * Fetch usage information about X-Pack features from the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public XPackUsageResponse usage(XPackUsageRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::xpackUsage, options,, +            XPackUsageResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously fetch usage information about X-Pack features from the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void usageAsync(XPackUsageRequest request, RequestOptions options, ActionListener<XPackUsageResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::xpackUsage, options,, +            XPackUsageResponse::fromXContent, listener, emptySet());, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.protocol.xpack.XPackUsageRequest;, +    static Request xpackUsage(XPackUsageRequest usageRequest) {, +        Request request = new Request(HttpGet.METHOD_NAME, "/_xpack/usage");, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(usageRequest.masterNodeTimeout());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/XPackClient.java, +import org.elasticsearch.protocol.xpack.XPackUsageRequest;, +import org.elasticsearch.protocol.xpack.XPackUsageResponse;, +, +    /**, +     * Fetch usage information about X-Pack features from the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public XPackUsageResponse usage(XPackUsageRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::xpackUsage, options,, +            XPackUsageResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously fetch usage information about X-Pack features from the cluster., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void usageAsync(XPackUsageRequest request, RequestOptions options, ActionListener<XPackUsageResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::xpackUsage, options,, +            XPackUsageResponse::fromXContent, listener, emptySet());, +    }, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/MiscellaneousDocumentationIT.java, +import org.elasticsearch.protocol.xpack.XPackUsageRequest;, +import org.elasticsearch.protocol.xpack.XPackUsageResponse;, +import java.util.Map;, +import static org.hamcrest.Matchers.is;, +, +    public void testXPackUsage() throws Exception {, +        RestHighLevelClient client = highLevelClient();, +        {, +            //tag::x-pack-usage-execute, +            XPackUsageRequest request = new XPackUsageRequest();, +            XPackUsageResponse response = client.xpack().usage(request, RequestOptions.DEFAULT);, +            //end::x-pack-usage-execute, +, +            //tag::x-pack-usage-response, +            Map<String, Map<String, Object>> usages = response.getUsages();, +            Map<String, Object> monitoringUsage = usages.get("monitoring");, +            assertThat(monitoringUsage.get("available"), is(true));, +            assertThat(monitoringUsage.get("enabled"), is(true));, +            assertThat(monitoringUsage.get("collection_enabled"), is(false));, +            //end::x-pack-usage-response, +        }, +        {, +            XPackUsageRequest request = new XPackUsageRequest();, +            // tag::x-pack-usage-execute-listener]