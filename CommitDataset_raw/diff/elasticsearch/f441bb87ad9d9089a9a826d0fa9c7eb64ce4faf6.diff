[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +        if (e instanceof NamedExpression) {, +            return ((NamedExpression) e).name();, +        } else if (e instanceof Literal) {, +            return e.toString();, +        } else {, +            return e.nodeName();, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +        if (e instanceof NamedExpression) {, +            return ((NamedExpression) e).name();, +        } else if (e instanceof Literal) {, +            return e.toString();, +        } else {, +            return e.nodeName();, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/ScalarFunction.java, +import org.elasticsearch.xpack.sql.expression.LiteralAttribute;, +            if (attr instanceof LiteralAttribute) {, +                return asScriptFrom((LiteralAttribute) attr);, +            }, +    protected ScriptTemplate asScriptFrom(LiteralAttribute literal) {, +        return new ScriptTemplate(formatScript("{}"),, +            paramsBuilder().variable(literal.literal()).build(),, +            literal.dataType());, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +        if (e instanceof NamedExpression) {, +            return ((NamedExpression) e).name();, +        } else if (e instanceof Literal) {, +            return e.toString();, +        } else {, +            return e.nodeName();, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/ScalarFunction.java, +import org.elasticsearch.xpack.sql.expression.LiteralAttribute;, +            if (attr instanceof LiteralAttribute) {, +                return asScriptFrom((LiteralAttribute) attr);, +            }, +    protected ScriptTemplate asScriptFrom(LiteralAttribute literal) {, +        return new ScriptTemplate(formatScript("{}"),, +            paramsBuilder().variable(literal.literal()).build(),, +            literal.dataType());, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/arithmetic/ArithmeticFunction.java, +import org.elasticsearch.xpack.sql.expression.Expressions;, +        sb.append(Expressions.name(left()));, +        sb.append(Expressions.name(right()));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +        if (e instanceof NamedExpression) {, +            return ((NamedExpression) e).name();, +        } else if (e instanceof Literal) {, +            return e.toString();, +        } else {, +            return e.nodeName();, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/ScalarFunction.java, +import org.elasticsearch.xpack.sql.expression.LiteralAttribute;, +            if (attr instanceof LiteralAttribute) {, +                return asScriptFrom((LiteralAttribute) attr);, +            }, +    protected ScriptTemplate asScriptFrom(LiteralAttribute literal) {, +        return new ScriptTemplate(formatScript("{}"),, +            paramsBuilder().variable(literal.literal()).build(),, +            literal.dataType());, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/arithmetic/ArithmeticFunction.java, +import org.elasticsearch.xpack.sql.expression.Expressions;, +        sb.append(Expressions.name(left()));, +        sb.append(Expressions.name(right()));, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/NamedExpressionTests.java, +import org.elasticsearch.xpack.sql.expression.FieldAttribute;, +import org.elasticsearch.xpack.sql.type.DataType;, +import org.elasticsearch.xpack.sql.type.EsField;, +import static java.util.Collections.emptyMap;, +    public void testNameForArithmeticFunctionAppliedOnTableColumn() {, +        FieldAttribute fa = new FieldAttribute(EMPTY, "myField", new EsField("myESField", DataType.INTEGER, emptyMap(), true));, +        Add add = new Add(EMPTY, fa, l(10));, +        assertEquals("((myField) + 10)", add.name());, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +        if (e instanceof NamedExpression) {, +            return ((NamedExpression) e).name();, +        } else if (e instanceof Literal) {, +            return e.toString();, +        } else {, +            return e.nodeName();, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/ScalarFunction.java, +import org.elasticsearch.xpack.sql.expression.LiteralAttribute;, +            if (attr instanceof LiteralAttribute) {, +                return asScriptFrom((LiteralAttribute) attr);, +            }, +    protected ScriptTemplate asScriptFrom(LiteralAttribute literal) {, +        return new ScriptTemplate(formatScript("{}"),, +            paramsBuilder().variable(literal.literal()).build(),]