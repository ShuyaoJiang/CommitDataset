[+++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import com.google.common.collect.Sets;, +import java.util.Set;, +    public Set<ShardId> findAllShardIds() throws Exception {, +        if (nodeFiles == null || locks == null) {, +            throw new ElasticSearchIllegalStateException("node is not configured to store local location");, +        }, +        Set<ShardId> shardIds = Sets.newHashSet();, +        for (File indicesLocation : nodeIndicesLocations) {, +            File[] indicesList = indicesLocation.listFiles();, +            if (indicesList == null) {, +                continue;, +            }, +            for (File indexLocation : indicesList) {, +                if (!indexLocation.isDirectory()) {, +                    continue;, +                }, +                String indexName = indexLocation.getName();, +                File[] shardsList = indexLocation.listFiles();, +                if (shardsList == null) {, +                    continue;, +                }, +                for (File shardLocation : shardsList) {, +                    if (!shardLocation.isDirectory()) {, +                        continue;, +                    }, +                    shardIds.add(new ShardId(indexName, Integer.parseInt(shardLocation.getName())));, +                }, +            }, +        }, +        return shardIds;, +    }, +, +++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import com.google.common.collect.Sets;, +import java.util.Set;, +    public Set<ShardId> findAllShardIds() throws Exception {, +        if (nodeFiles == null || locks == null) {, +            throw new ElasticSearchIllegalStateException("node is not configured to store local location");, +        }, +        Set<ShardId> shardIds = Sets.newHashSet();, +        for (File indicesLocation : nodeIndicesLocations) {, +            File[] indicesList = indicesLocation.listFiles();, +            if (indicesList == null) {, +                continue;, +            }, +            for (File indexLocation : indicesList) {, +                if (!indexLocation.isDirectory()) {, +                    continue;, +                }, +                String indexName = indexLocation.getName();, +                File[] shardsList = indexLocation.listFiles();, +                if (shardsList == null) {, +                    continue;, +                }, +                for (File shardLocation : shardsList) {, +                    if (!shardLocation.isDirectory()) {, +                        continue;, +                    }, +                    shardIds.add(new ShardId(indexName, Integer.parseInt(shardLocation.getName())));, +                }, +            }, +        }, +        return shardIds;, +    }, +, +++ b/src/main/java/org/elasticsearch/gateway/local/LocalGateway.java, +import org.elasticsearch.gateway.local.state.shards.LocalGatewayShardsState;, +    private final LocalGatewayShardsState shardsState;, +, +    public LocalGateway(Settings settings, ClusterService clusterService, NodeEnvironment nodeEnv, LocalGatewayShardsState shardsState,, +                        TransportNodesListGatewayMetaState listGatewayMetaState) {, +, +        this.shardsState = shardsState;, +        clusterService.addLast(this);, +        shardsState.clusterChanged(event);, +++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import com.google.common.collect.Sets;, +import java.util.Set;, +    public Set<ShardId> findAllShardIds() throws Exception {, +        if (nodeFiles == null || locks == null) {, +            throw new ElasticSearchIllegalStateException("node is not configured to store local location");, +        }, +        Set<ShardId> shardIds = Sets.newHashSet();, +        for (File indicesLocation : nodeIndicesLocations) {, +            File[] indicesList = indicesLocation.listFiles();, +            if (indicesList == null) {, +                continue;, +            }, +            for (File indexLocation : indicesList) {, +                if (!indexLocation.isDirectory()) {, +                    continue;, +                }, +                String indexName = indexLocation.getName();, +                File[] shardsList = indexLocation.listFiles();, +                if (shardsList == null) {, +                    continue;, +                }, +                for (File shardLocation : shardsList) {, +                    if (!shardLocation.isDirectory()) {]