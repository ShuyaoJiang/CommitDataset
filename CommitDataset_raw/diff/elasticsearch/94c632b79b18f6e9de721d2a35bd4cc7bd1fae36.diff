[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +     * Sets a raw (xcontent) binary representation of facets to use., +     */, +    public SearchRequestBuilder setFacets(byte[] facets) {, +        sourceBuilder().facets(facets);, +        return this;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +     * Sets a raw (xcontent) binary representation of facets to use., +     */, +    public SearchRequestBuilder setFacets(byte[] facets) {, +        sourceBuilder().facets(facets);, +        return this;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +    private byte[] facetsBinary;, +, +    /**, +     * Sets a raw (xcontent / json) facets., +     */, +    public SearchSourceBuilder facets(byte[] facetsBinary) {, +        this.facetsBinary = facetsBinary;, +        return this;, +    }, +, +        if (facetsBinary != null) {, +            if (XContentFactory.xContentType(facetsBinary) == builder.contentType()) {, +                builder.rawField("facets", facetsBinary);, +            } else {, +                builder.field("facets_binary", facetsBinary);, +            }, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +     * Sets a raw (xcontent) binary representation of facets to use., +     */, +    public SearchRequestBuilder setFacets(byte[] facets) {, +        sourceBuilder().facets(facets);, +        return this;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +    private byte[] facetsBinary;, +, +    /**, +     * Sets a raw (xcontent / json) facets., +     */, +    public SearchSourceBuilder facets(byte[] facetsBinary) {, +        this.facetsBinary = facetsBinary;, +        return this;, +    }, +, +        if (facetsBinary != null) {, +            if (XContentFactory.xContentType(facetsBinary) == builder.contentType()) {, +                builder.rawField("facets", facetsBinary);, +            } else {, +                builder.field("facets_binary", facetsBinary);, +            }, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/FacetBinaryParseElement.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.facet;, +, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.search.internal.SearchContext;, +, +/**, + * @author kimchy (shay.banon), + */, +public class FacetBinaryParseElement extends FacetParseElement {, +, +    @Inject public FacetBinaryParseElement(FacetProcessors facetProcessors) {, +        super(facetProcessors);, +    }]