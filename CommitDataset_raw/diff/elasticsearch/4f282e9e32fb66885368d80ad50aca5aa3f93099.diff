[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.execution.TaskExecutionGraph, +    /** Add a check before gradle execution phase which ensures java home for the given java version is set. */, +    static void requireJavaHome(Task task, int version) {, +        Project rootProject = task.project.rootProject // use root project for global accounting, +        if (rootProject.hasProperty('requiredJavaVersions') == false) {, +            rootProject.rootProject.ext.requiredJavaVersions = [:].withDefault{key -> return []}, +            rootProject.gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->, +                List<String> messages = [], +                for (entry in rootProject.requiredJavaVersions) {, +                    if (rootProject.javaVersions.get(entry.key) != null) {, +                        continue, +                    List<String> tasks = entry.value.findAll { taskGraph.hasTask(it) }.collect { "  ${it.path}" }, +                    if (tasks.isEmpty() == false) {, +                        messages.add("JAVA${entry.key}_HOME required to run tasks:\n${tasks.join('\n')}"), +                    }, +                }, +                if (messages.isEmpty() == false) {, +                    throw new GradleException(messages.join('\n')), +                }, +            }, +        }, +        rootProject.requiredJavaVersions.get(version).add(task), +    }, +, +    /** A convenience method for getting java home for a version of java and requiring that version for the given task to execute */, +    static String getJavaHome(final Task task, final int version) {, +        requireJavaHome(task, version), +        return task.project.javaVersions.get(version), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.execution.TaskExecutionGraph, +    /** Add a check before gradle execution phase which ensures java home for the given java version is set. */, +    static void requireJavaHome(Task task, int version) {, +        Project rootProject = task.project.rootProject // use root project for global accounting, +        if (rootProject.hasProperty('requiredJavaVersions') == false) {, +            rootProject.rootProject.ext.requiredJavaVersions = [:].withDefault{key -> return []}, +            rootProject.gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->, +                List<String> messages = [], +                for (entry in rootProject.requiredJavaVersions) {, +                    if (rootProject.javaVersions.get(entry.key) != null) {, +                        continue, +                    List<String> tasks = entry.value.findAll { taskGraph.hasTask(it) }.collect { "  ${it.path}" }, +                    if (tasks.isEmpty() == false) {, +                        messages.add("JAVA${entry.key}_HOME required to run tasks:\n${tasks.join('\n')}"), +                    }, +                }, +                if (messages.isEmpty() == false) {, +                    throw new GradleException(messages.join('\n')), +                }, +            }, +        }, +        rootProject.requiredJavaVersions.get(version).add(task), +    }, +, +    /** A convenience method for getting java home for a version of java and requiring that version for the given task to execute */, +    static String getJavaHome(final Task task, final int version) {, +        requireJavaHome(task, version), +        return task.project.javaVersions.get(version), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.elasticsearch.gradle.BuildPlugin, +        if (node.javaVersion != null) {, +            BuildPlugin.requireJavaHome(start, node.javaVersion), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.execution.TaskExecutionGraph, +    /** Add a check before gradle execution phase which ensures java home for the given java version is set. */, +    static void requireJavaHome(Task task, int version) {, +        Project rootProject = task.project.rootProject // use root project for global accounting, +        if (rootProject.hasProperty('requiredJavaVersions') == false) {, +            rootProject.rootProject.ext.requiredJavaVersions = [:].withDefault{key -> return []}, +            rootProject.gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->, +                List<String> messages = [], +                for (entry in rootProject.requiredJavaVersions) {, +                    if (rootProject.javaVersions.get(entry.key) != null) {, +                        continue, +                    List<String> tasks = entry.value.findAll { taskGraph.hasTask(it) }.collect { "  ${it.path}" }, +                    if (tasks.isEmpty() == false) {, +                        messages.add("JAVA${entry.key}_HOME required to run tasks:\n${tasks.join('\n')}"), +                    }, +                }, +                if (messages.isEmpty() == false) {, +                    throw new GradleException(messages.join('\n')), +                }, +            }, +        }, +        rootProject.requiredJavaVersions.get(version).add(task), +    }, +, +    /** A convenience method for getting java home for a version of java and requiring that version for the given task to execute */, +    static String getJavaHome(final Task task, final int version) {, +        requireJavaHome(task, version), +        return task.project.javaVersions.get(version), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.elasticsearch.gradle.BuildPlugin, +        if (node.javaVersion != null) {, +            BuildPlugin.requireJavaHome(start, node.javaVersion), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +    /** Gradle project this node is part of */, +    Project project]