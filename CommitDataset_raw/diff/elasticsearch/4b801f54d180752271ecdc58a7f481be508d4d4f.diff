[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        env = [ 'JAVA_HOME' : project.javaHome ], +        String collectedSystemProperties = config.systemProperties.collect { key, value -> "-D${key}=${value}" }.join(" "), +        String esJavaOpts = config.jvmArgs.isEmpty() ? collectedSystemProperties : collectedSystemProperties + " " + config.jvmArgs, +        env.put('ES_JAVA_OPTS', esJavaOpts), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        env = [ 'JAVA_HOME' : project.javaHome ], +        String collectedSystemProperties = config.systemProperties.collect { key, value -> "-D${key}=${value}" }.join(" "), +        String esJavaOpts = config.jvmArgs.isEmpty() ? collectedSystemProperties : collectedSystemProperties + " " + config.jvmArgs, +        env.put('ES_JAVA_OPTS', esJavaOpts), +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +            if (clauses.size() == 0)  // happens for stopwords, +                return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        env = [ 'JAVA_HOME' : project.javaHome ], +        String collectedSystemProperties = config.systemProperties.collect { key, value -> "-D${key}=${value}" }.join(" "), +        String esJavaOpts = config.jvmArgs.isEmpty() ? collectedSystemProperties : collectedSystemProperties + " " + config.jvmArgs, +        env.put('ES_JAVA_OPTS', esJavaOpts), +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +            if (clauses.size() == 0)  // happens for stopwords, +                return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JavaVersion.java, +public class JavaVersion implements Comparable<JavaVersion> {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        env = [ 'JAVA_HOME' : project.javaHome ], +        String collectedSystemProperties = config.systemProperties.collect { key, value -> "-D${key}=${value}" }.join(" "), +        String esJavaOpts = config.jvmArgs.isEmpty() ? collectedSystemProperties : collectedSystemProperties + " " + config.jvmArgs, +        env.put('ES_JAVA_OPTS', esJavaOpts), +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +            if (clauses.size() == 0)  // happens for stopwords, +                return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JavaVersion.java, +public class JavaVersion implements Comparable<JavaVersion> {, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +            throw new QueryShardException(context, "[" + NAME + "] Type [" + type + "] points to a non existent parent type [", +                    + parentType + "]");, +                && Objects.equals(innerHitBuilder, that.innerHitBuilder);, +        return Objects.hash(query, type, scoreMode, minChildren, maxChildren, innerHitBuilder);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        env = [ 'JAVA_HOME' : project.javaHome ], +        String collectedSystemProperties = config.systemProperties.collect { key, value -> "-D${key}=${value}" }.join(" "), +        String esJavaOpts = config.jvmArgs.isEmpty() ? collectedSystemProperties : collectedSystemProperties + " " + config.jvmArgs, +        env.put('ES_JAVA_OPTS', esJavaOpts), +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +            if (clauses.size() == 0)  // happens for stopwords, +                return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JavaVersion.java, +public class JavaVersion implements Comparable<JavaVersion> {, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +            throw new QueryShardException(context, "[" + NAME + "] Type [" + type + "] points to a non existent parent type [", +                    + parentType + "]");, +                && Objects.equals(innerHitBuilder, that.innerHitBuilder);, +        return Objects.hash(query, type, scoreMode, minChildren, maxChildren, innerHitBuilder);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java, +            throw new QueryShardException(context, "[" + NAME + "] query configured 'parent_type' [" + type, +                    + "] is not a valid type");, +        return new HasParentQueryBuilder(parentType, iqb, score, innerHits).queryName(queryName).boost(boost);, +                && Objects.equals(innerHit, that.innerHit);, +        return Objects.hash(query, type, score, innerHit);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy]