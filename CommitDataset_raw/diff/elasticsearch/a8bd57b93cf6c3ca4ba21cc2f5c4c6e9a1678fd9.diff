[+++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +import org.elasticsearch.ExceptionsHelper;, +import java.util.ArrayList;, +import java.util.List;, +, +    /**, +     * Notifies every given listener with the response passed to {@link #onResponse(Object)}. If a listener itself throws an exception, +     * the exception is forwarded to {@link #onFailure(Exception)}. If in turn {@link #onFailure(Exception)} fails all remaining, +     * listeners will be processed and the caught exception will be re-thrown., +     */, +    static <Response> void onResponse(Iterable<ActionListener<Response>> listeners, Response response) {, +        List<Exception> exceptionList = new ArrayList<>();, +        for (ActionListener<Response> listener : listeners) {, +            try {, +                listener.onResponse(response);, +            } catch (Exception ex) {, +                try {, +                    listener.onFailure(ex);, +                } catch (Exception ex1) {, +                    exceptionList.add(ex1);, +                }, +            }, +        }, +        ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList);, +    }, +, +    /**, +     * Notifies every given listener with the failure passed to {@link #onFailure(Exception)}. If a listener itself throws an exception, +     * all remaining listeners will be processed and the caught exception will be re-thrown., +     */, +    static <Response> void onFailure(Iterable<ActionListener<Response>> listeners, Exception failure) {, +        List<Exception> exceptionList = new ArrayList<>();, +        for (ActionListener<Response> listener : listeners) {, +            try {, +                listener.onFailure(failure);, +            } catch (Exception ex) {, +                exceptionList.add(ex);, +            }, +        }, +        ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList);, +    }, +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +import org.elasticsearch.ExceptionsHelper;, +import java.util.ArrayList;, +import java.util.List;, +, +    /**, +     * Notifies every given listener with the response passed to {@link #onResponse(Object)}. If a listener itself throws an exception, +     * the exception is forwarded to {@link #onFailure(Exception)}. If in turn {@link #onFailure(Exception)} fails all remaining, +     * listeners will be processed and the caught exception will be re-thrown., +     */, +    static <Response> void onResponse(Iterable<ActionListener<Response>> listeners, Response response) {, +        List<Exception> exceptionList = new ArrayList<>();, +        for (ActionListener<Response> listener : listeners) {, +            try {, +                listener.onResponse(response);, +            } catch (Exception ex) {, +                try {, +                    listener.onFailure(ex);, +                } catch (Exception ex1) {, +                    exceptionList.add(ex1);, +                }, +            }, +        }, +        ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList);, +    }, +, +    /**, +     * Notifies every given listener with the failure passed to {@link #onFailure(Exception)}. If a listener itself throws an exception, +     * all remaining listeners will be processed and the caught exception will be re-thrown., +     */, +    static <Response> void onFailure(Iterable<ActionListener<Response>> listeners, Exception failure) {, +        List<Exception> exceptionList = new ArrayList<>();, +        for (ActionListener<Response> listener : listeners) {, +            try {, +                listener.onFailure(failure);, +            } catch (Exception ex) {, +                exceptionList.add(ex);, +            }, +        }, +        ExceptionsHelper.maybeThrowRuntimeAndSuppress(exceptionList);, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsGroup.java, +    public ClusterSearchShardsGroup(ShardId shardId, ShardRouting[] shards) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +import org.elasticsearch.ExceptionsHelper;, +import java.util.ArrayList;, +import java.util.List;, +, +    /**, +     * Notifies every given listener with the response passed to {@link #onResponse(Object)}. If a listener itself throws an exception, +     * the exception is forwarded to {@link #onFailure(Exception)}. If in turn {@link #onFailure(Exception)} fails all remaining, +     * listeners will be processed and the caught exception will be re-thrown., +     */, +    static <Response> void onResponse(Iterable<ActionListener<Response>> listeners, Response response) {, +        List<Exception> exceptionList = new ArrayList<>();, +        for (ActionListener<Response> listener : listeners) {, +            try {, +                listener.onResponse(response);, +            } catch (Exception ex) {]