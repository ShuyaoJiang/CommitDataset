[+++ b/client/rest-high-level/build.gradle, +  compile "org.elasticsearch.plugin:lang-mustache-client:${version}", +++ b/client/rest-high-level/build.gradle, +  compile "org.elasticsearch.plugin:lang-mustache-client:${version}", +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;, +import org.elasticsearch.script.mustache.SearchTemplateRequest;, +        addSearchRequestParams(params, searchRequest);, +, +        if (searchRequest.source() != null) {, +            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE));, +        }, +        return request;, +    }, +, +    private static void addSearchRequestParams(Params params, SearchRequest searchRequest) {, +    static Request searchTemplate(SearchTemplateRequest searchTemplateRequest) throws IOException {, +        Request request;, +, +        if (searchTemplateRequest.isSimulate()) {, +            request = new Request(HttpGet.METHOD_NAME, "_render/template");, +        } else {, +            SearchRequest searchRequest = searchTemplateRequest.getRequest();, +            String endpoint = endpoint(searchRequest.indices(), searchRequest.types(), "_search/template");, +            request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +            Params params = new Params(request);, +            addSearchRequestParams(params, searchRequest);, +        }, +, +        request.setEntity(createEntity(searchTemplateRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +    static Request createRepository(PutRepositoryRequest putRepositoryRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPart("_snapshot").addPathPart(putRepositoryRequest.name()).build();, +        Request request = new Request(HttpPut.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(putRepositoryRequest.masterNodeTimeout());, +        parameters.withTimeout(putRepositoryRequest.timeout());, +        parameters.withVerify(putRepositoryRequest.verify());, +, +        request.setEntity(createEntity(putRepositoryRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +, +        Params withVerify(boolean verify) {, +            if (verify) {, +                return putParam("verify", Boolean.TRUE.toString());, +            }, +            return this;, +        }, +++ b/client/rest-high-level/build.gradle, +  compile "org.elasticsearch.plugin:lang-mustache-client:${version}", +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;, +import org.elasticsearch.script.mustache.SearchTemplateRequest;, +        addSearchRequestParams(params, searchRequest);, +, +        if (searchRequest.source() != null) {, +            request.setEntity(createEntity(searchRequest.source(), REQUEST_BODY_CONTENT_TYPE));, +        }, +        return request;, +    }, +, +    private static void addSearchRequestParams(Params params, SearchRequest searchRequest) {, +    static Request searchTemplate(SearchTemplateRequest searchTemplateRequest) throws IOException {, +        Request request;, +, +        if (searchTemplateRequest.isSimulate()) {, +            request = new Request(HttpGet.METHOD_NAME, "_render/template");, +        } else {, +            SearchRequest searchRequest = searchTemplateRequest.getRequest();, +            String endpoint = endpoint(searchRequest.indices(), searchRequest.types(), "_search/template");, +            request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +            Params params = new Params(request);, +            addSearchRequestParams(params, searchRequest);, +        }, +, +        request.setEntity(createEntity(searchTemplateRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +    static Request createRepository(PutRepositoryRequest putRepositoryRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPart("_snapshot").addPathPart(putRepositoryRequest.name()).build();, +        Request request = new Request(HttpPut.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(putRepositoryRequest.masterNodeTimeout());, +        parameters.withTimeout(putRepositoryRequest.timeout());, +        parameters.withVerify(putRepositoryRequest.verify());, +, +        request.setEntity(createEntity(putRepositoryRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +]