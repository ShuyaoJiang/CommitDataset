[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.PrintStream;, +import java.nio.file.Path;, +import java.util.Locale;, +import java.util.concurrent.CountDownLatch;, +, +import org.elasticsearch.cli.ExitCodes;, +import org.elasticsearch.cli.Terminal;, +    static void init(String[] args) throws Throwable {, +        BootstrapCliParser parser = new BootstrapCliParser();, +        int status = parser.main(args, Terminal.DEFAULT);, +, +        if (parser.shouldRun() == false || status != ExitCodes.OK) {, +            exit(status);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.PrintStream;, +import java.nio.file.Path;, +import java.util.Locale;, +import java.util.concurrent.CountDownLatch;, +, +import org.elasticsearch.cli.ExitCodes;, +import org.elasticsearch.cli.Terminal;, +    static void init(String[] args) throws Throwable {, +        BootstrapCliParser parser = new BootstrapCliParser();, +        int status = parser.main(args, Terminal.DEFAULT);, +, +        if (parser.shouldRun() == false || status != ExitCodes.OK) {, +            exit(status);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +            Bootstrap.init(args);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.PrintStream;, +import java.nio.file.Path;, +import java.util.Locale;, +import java.util.concurrent.CountDownLatch;, +, +import org.elasticsearch.cli.ExitCodes;, +import org.elasticsearch.cli.Terminal;, +    static void init(String[] args) throws Throwable {, +        BootstrapCliParser parser = new BootstrapCliParser();, +        int status = parser.main(args, Terminal.DEFAULT);, +, +        if (parser.shouldRun() == false || status != ExitCodes.OK) {, +            exit(status);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +            Bootstrap.init(args);, +++ b/core/src/test/java/org/elasticsearch/cli/MultiCommandTests.java, +import joptsimple.OptionSet;, +import org.junit.Before;, +, +    static class DummyMultiCommand extends MultiCommand {, +        DummyMultiCommand() {, +            super("A dummy multi command");, +        }, +    }, +, +    static class DummySubCommand extends Command {, +        DummySubCommand() {, +            super("A dummy subcommand");, +        }, +        @Override, +        protected void execute(Terminal terminal, OptionSet options) throws Exception {, +            terminal.println("Arguments: " + options.nonOptionArguments().toString());, +        }, +    }, +, +    DummyMultiCommand multiCommand;, +, +    @Before, +    public void setupCommand() {, +        multiCommand = new DummyMultiCommand();, +    }, +, +        return multiCommand;, +    }, +, +    public void testNoCommandsConfigured() throws Exception {, +        IllegalStateException e = expectThrows(IllegalStateException.class, () -> {, +            execute();, +        });, +        assertEquals("No subcommands configured", e.getMessage());, +    }, +, +    public void testUnknownCommand() throws Exception {, +        multiCommand.subcommands.put("something", new DummySubCommand());, +        UserError e = expectThrows(UserError.class, () -> {, +            execute("somethingelse");, +        });]