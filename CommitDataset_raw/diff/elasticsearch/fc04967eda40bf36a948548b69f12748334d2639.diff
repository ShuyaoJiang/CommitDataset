[+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +, +        if (aliasesOrIndices == null || aliasesOrIndices.length == 0) {, +            if (!indicesOptions.allowNoIndices()) {, +                throw new ElasticsearchIllegalArgumentException("no indices were specified and wildcard expansion is disabled.");, +            } else {, +                return Strings.EMPTY_ARRAY;, +            }, +        }, +, +    public static boolean isAllTypes(String[] types) {, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +, +        if (aliasesOrIndices == null || aliasesOrIndices.length == 0) {, +            if (!indicesOptions.allowNoIndices()) {, +                throw new ElasticsearchIllegalArgumentException("no indices were specified and wildcard expansion is disabled.");, +            } else {, +                return Strings.EMPTY_ARRAY;, +            }, +        }, +, +    public static boolean isAllTypes(String[] types) {, +++ b/src/test/java/org/elasticsearch/cluster/metadata/MetaDataTests.java, +, +import org.apache.tools.ant.taskdefs.condition.IsTrue;, +        results = md.concreteIndices(IndicesOptions.strictExpandOpen(), null);, +        assertEquals(3, results.length);, +, +        results = md.concreteIndices(IndicesOptions.strictExpand(), null);, +        assertEquals(4, results.length);, +, +, +            results = md.concreteIndices(noExpandLenient, null);, +            assertEquals(0, results.length);, +, +            results = md.concreteIndices(noExpandLenient, Strings.EMPTY_ARRAY);, +            assertEquals(0, results.length);, +    public void testConvertWildcardsJustIndicesTests() {, +    public void testConvertWildcardsTests() {, +    public void testConvertWildcardsOpenClosedIndicesTests() {, +    public void testConcreteIndicesIgnoreIndicesOneMissingIndex() {, +    public void testConcreteIndicesIgnoreIndicesOneMissingIndexOtherFound() {, +    public void testConcreteIndicesIgnoreIndicesAllMissing() {, +    public void testConcreteIndicesIgnoreIndicesEmptyRequest() {, +    public void testConcreteIndicesWildcardExpansion() {, +    /**, +     * test resolving _all pattern (null, empty array or "_all") for random IndicesOptions, +     */, +    @Test, +    public void testConcreteIndicesAllPatternRandom() {, +        for (int i = 0; i < 10; i++) {, +            String[] allIndices = null;, +            switch (randomIntBetween(0, 2)) {, +            case 0:, +                break;, +            case 1:, +                allIndices = new String[0];, +                break;, +            case 2:, +                allIndices = new String[] { MetaData.ALL };, +                break;, +            }, +, +            IndicesOptions indicesOptions = IndicesOptions.fromOptions(randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean());, +            MetaData metadata = MetaData.builder().build();, +, +            // with no indices, asking for all indices should return empty list or exception, depending on indices options, +            if (indicesOptions.allowNoIndices()) {, +                String[] concreteIndices = metadata.concreteIndices(indicesOptions, allIndices);, +                assertThat(concreteIndices, notNullValue());, +                assertThat(concreteIndices.length, equalTo(0));, +            } else {, +                checkCorrectException(metadata, indicesOptions, allIndices);, +            }, +, +            // with existing indices, asking for all indices should return all open/closed indices depending on options, +            metadata = MetaData.builder(), +                    .put(indexBuilder("aaa").state(State.OPEN).putAlias(AliasMetaData.builder("aaa_alias1"))), +                    .put(indexBuilder("bbb").state(State.OPEN).putAlias(AliasMetaData.builder("bbb_alias1"))), +                    .put(indexBuilder("ccc").state(State.CLOSE).putAlias(AliasMetaData.builder("ccc_alias1"))), +                    .build();, +            if (indicesOptions.expandWildcardsOpen() || indicesOptions.expandWildcardsClosed() || indicesOptions.allowNoIndices()) {, +                String[] concreteIndices = metadata.concreteIndices(indicesOptions, allIndices);, +                assertThat(concreteIndices, notNullValue());, +                int expectedNumberOfIndices = 0;, +                if (indicesOptions.expandWildcardsOpen()) {, +                    expectedNumberOfIndices += 2;, +                }, +                if (indicesOptions.expandWildcardsClosed()) {, +                    expectedNumberOfIndices += 1;, +                }, +                assertThat(concreteIndices.length, equalTo(expectedNumberOfIndices));, +            } else {, +                checkCorrectException(metadata, indicesOptions, allIndices);, +            }, +        }, +    }, +, +    /**, +     * check for correct exception type depending on indicesOptions and provided index name list]