[+++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +                return loadClass(prefixValue, sValue, suffixClassName, setting);, +            } catch (NoClassDefFoundError e1) {, +                return loadClass(prefixValue, sValue, suffixClassName, setting);, +            }, +        }, +    }, +, +    private <T> Class<? extends T> loadClass(String prefixValue, String sValue, String suffixClassName, String setting) {, +        String fullClassName = prefixValue + toCamelCase(sValue).toLowerCase() + "." + Strings.capitalize(toCamelCase(sValue)) + suffixClassName;, +++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +                return loadClass(prefixValue, sValue, suffixClassName, setting);, +            } catch (NoClassDefFoundError e1) {, +                return loadClass(prefixValue, sValue, suffixClassName, setting);, +            }, +        }, +    }, +, +    private <T> Class<? extends T> loadClass(String prefixValue, String sValue, String suffixClassName, String setting) {, +        String fullClassName = prefixValue + toCamelCase(sValue).toLowerCase() + "." + Strings.capitalize(toCamelCase(sValue)) + suffixClassName;, +++ b/src/test/java/org/elasticsearch/test/unit/common/settings/ImmutableSettingsTests.java, +    @Test(expectedExceptions = NoClassSettingsException.class), +    public void testThatAllClassNotFoundExceptionsAreCaught() {, +        // this should be nGram in order to really work, but for sure not not throw a NoClassDefFoundError, +        Settings settings = settingsBuilder().put("type", "ngram").build();, +        settings.getAsClass("type", null, "org.elasticsearch.index.analysis.", "TokenFilterFactory");, +    }]