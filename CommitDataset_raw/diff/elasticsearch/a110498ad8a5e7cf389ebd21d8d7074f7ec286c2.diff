[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]support[/\\]IndicesOptionsTests.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]support[/\\]IndicesOptionsTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +        autoCreateIndex = transportClient ? null : new AutoCreateIndex(settings, clusterSettings, resolver);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]support[/\\]IndicesOptionsTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +        autoCreateIndex = transportClient ? null : new AutoCreateIndex(settings, clusterSettings, resolver);, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +import org.elasticsearch.common.settings.ClusterSettings;, +        new Setting<>("action.auto_create_index", "true", AutoCreate::new, Property.NodeScope, Setting.Property.Dynamic);, +    private volatile AutoCreate autoCreate;, +    public AutoCreateIndex(Settings settings, ClusterSettings clusterSettings, IndexNameExpressionResolver resolver) {, +        clusterSettings.addSettingsUpdateConsumer(AUTO_CREATE_INDEX_SETTING, this::setAutoCreate);, +        // One volatile read, so that all checks are done against the same instance:, +        final AutoCreate autoCreate = this.autoCreate;, +    AutoCreate getAutoCreate() {, +        return autoCreate;, +    }, +, +    void setAutoCreate(AutoCreate autoCreate) {, +        this.autoCreate = autoCreate;, +    }, +, +    static class AutoCreate {, +, +        boolean isAutoCreateIndex() {, +            return autoCreateIndex;, +        }, +, +        List<Tuple<String, Boolean>> getExpressions() {, +            return expressions;, +        }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]support[/\\]IndicesOptionsTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +        autoCreateIndex = transportClient ? null : new AutoCreateIndex(settings, clusterSettings, resolver);, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +import org.elasticsearch.common.settings.ClusterSettings;, +        new Setting<>("action.auto_create_index", "true", AutoCreate::new, Property.NodeScope, Setting.Property.Dynamic);, +    private volatile AutoCreate autoCreate;, +    public AutoCreateIndex(Settings settings, ClusterSettings clusterSettings, IndexNameExpressionResolver resolver) {, +        clusterSettings.addSettingsUpdateConsumer(AUTO_CREATE_INDEX_SETTING, this::setAutoCreate);, +        // One volatile read, so that all checks are done against the same instance:, +        final AutoCreate autoCreate = this.autoCreate;, +    AutoCreate getAutoCreate() {, +        return autoCreate;, +    }, +, +    void setAutoCreate(AutoCreate autoCreate) {, +        this.autoCreate = autoCreate;, +    }, +, +    static class AutoCreate {, +, +        boolean isAutoCreateIndex() {, +            return autoCreateIndex;, +        }, +, +        List<Tuple<String, Boolean>> getExpressions() {, +            return expressions;, +        }, +++ b/core/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java, +import org.elasticsearch.common.settings.ClusterSettings;, +            Settings settings = Settings.builder().put("action.auto_create_index", ",,,").build();, +            newAutoCreateIndex(settings);, +            assertEquals("Can't parse [,,,] for setting [action.auto_create_index] must be either [true, false, or a " +, +                    "comma separated list of index patterns]", ex.getMessage());, +            newAutoCreateIndex(settings);, +            assertEquals("Can't parse [" + prefix + "] for setting [action.auto_create_index] must contain an index name after [", +                    + prefix + "]", ex.getMessage());, +        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);, +        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);, +        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(Settings.EMPTY);, +        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), randomFrom(true, false,, +                randomAsciiOfLengthBetween(7, 10))).build();, +        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);, +        assertThat(autoCreateIndex.shouldAutoCreate(randomFrom("index1", "index2", "index3"),, +                buildClusterState("index1", "index2", "index3")), equalTo(false));, +        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), randomFrom(true,, +                randomAsciiOfLengthBetween(1, 10))), +        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);, +        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), randomFrom("+index*", "index*")), +                .build();, +        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);, +        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);, +        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(),, +                randomFrom("+test*,-index*", "test*,-index*")).build();, +        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);, +        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);, +        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);, +        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(),, +                "+test1,-test1,-test2,+test2").build();, +        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);, +    public void testUpdate() {, +        boolean value = randomBoolean();, +        Settings settings;, +        if (value && randomBoolean()) {]