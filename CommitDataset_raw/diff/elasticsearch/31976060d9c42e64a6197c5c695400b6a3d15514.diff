[+++ b/x-pack/plugin/index-lifecycle/src/main/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleRunner.java, +import com.carrotsearch.hppc.cursors.ObjectCursor;, +, +    /**, +     * Returns <code>true</code> if the provided policy is allowed to be updated, +     * given the current {@link ClusterState}. In practice this method checks, +     * that all the indexes using the provided <code>policyName</code> is in a, +     * state where it is able to deal with the policy being updated to, +     * <code>newPolicy</code>. If any of these indexes is not in a state wheree, +     * it can deal with the update the method will return <code>false</code>., +     * , +     * @param policyName, +     *            the name of the policy being updated, +     * @param newPolicy, +     *            the new version of the {@link LifecyclePolicy}, +     * @param currentState, +     *            the current {@link ClusterState}, +     */, +    public static boolean canUpdatePolicy(String policyName, LifecyclePolicy newPolicy, ClusterState currentState) {, +        for (ObjectCursor<IndexMetaData> cursor : currentState.getMetaData().indices().values()) {, +            IndexMetaData idxMetadata = cursor.value;, +            Settings idxSettings = idxMetadata.getSettings();, +            String currentPolicyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxSettings);, +            if (policyName.equals(currentPolicyName)) {, +                StepKey currentStepKey = IndexLifecycleRunner.getCurrentStepKey(idxSettings);, +                if (canSetPolicy(currentStepKey, policyName, newPolicy) == false) {, +                    return false;, +                }, +            }, +        }, +        return true;, +    }, +, +++ b/x-pack/plugin/index-lifecycle/src/main/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleRunner.java, +import com.carrotsearch.hppc.cursors.ObjectCursor;, +, +    /**, +     * Returns <code>true</code> if the provided policy is allowed to be updated, +     * given the current {@link ClusterState}. In practice this method checks, +     * that all the indexes using the provided <code>policyName</code> is in a, +     * state where it is able to deal with the policy being updated to, +     * <code>newPolicy</code>. If any of these indexes is not in a state wheree, +     * it can deal with the update the method will return <code>false</code>., +     * , +     * @param policyName, +     *            the name of the policy being updated, +     * @param newPolicy, +     *            the new version of the {@link LifecyclePolicy}, +     * @param currentState, +     *            the current {@link ClusterState}, +     */, +    public static boolean canUpdatePolicy(String policyName, LifecyclePolicy newPolicy, ClusterState currentState) {, +        for (ObjectCursor<IndexMetaData> cursor : currentState.getMetaData().indices().values()) {, +            IndexMetaData idxMetadata = cursor.value;, +            Settings idxSettings = idxMetadata.getSettings();, +            String currentPolicyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxSettings);, +            if (policyName.equals(currentPolicyName)) {, +                StepKey currentStepKey = IndexLifecycleRunner.getCurrentStepKey(idxSettings);, +                if (canSetPolicy(currentStepKey, policyName, newPolicy) == false) {, +                    return false;, +                }, +            }, +        }, +        return true;, +    }, +, +++ b/x-pack/plugin/index-lifecycle/src/main/java/org/elasticsearch/xpack/indexlifecycle/action/TransportPutLifecycleAction.java, +import org.elasticsearch.xpack.indexlifecycle.IndexLifecycleRunner;, +                        if (currentMetadata.getPolicyMetadatas().containsKey(request.getPolicy().getName()) && IndexLifecycleRunner, +                                .canUpdatePolicy(request.getPolicy().getName(), request.getPolicy(), currentState) == false) {, +++ b/x-pack/plugin/index-lifecycle/src/main/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleRunner.java, +import com.carrotsearch.hppc.cursors.ObjectCursor;, +, +    /**, +     * Returns <code>true</code> if the provided policy is allowed to be updated, +     * given the current {@link ClusterState}. In practice this method checks, +     * that all the indexes using the provided <code>policyName</code> is in a, +     * state where it is able to deal with the policy being updated to, +     * <code>newPolicy</code>. If any of these indexes is not in a state wheree, +     * it can deal with the update the method will return <code>false</code>., +     * , +     * @param policyName, +     *            the name of the policy being updated, +     * @param newPolicy, +     *            the new version of the {@link LifecyclePolicy}, +     * @param currentState, +     *            the current {@link ClusterState}, +     */, +    public static boolean canUpdatePolicy(String policyName, LifecyclePolicy newPolicy, ClusterState currentState) {, +        for (ObjectCursor<IndexMetaData> cursor : currentState.getMetaData().indices().values()) {, +            IndexMetaData idxMetadata = cursor.value;, +            Settings idxSettings = idxMetadata.getSettings();, +            String currentPolicyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxSettings);, +            if (policyName.equals(currentPolicyName)) {, +                StepKey currentStepKey = IndexLifecycleRunner.getCurrentStepKey(idxSettings);, +                if (canSetPolicy(currentStepKey, policyName, newPolicy) == false) {, +                    return false;, +                }, +            }, +        }]