[+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected PrimaryResult<BasicReplicationRequest, ReplicationResponse> shardOperationOnPrimary(, +            BasicReplicationRequest shardRequest, IndexShard primary) {, +        return new PrimaryResult<>(shardRequest, new ReplicationResponse());, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected PrimaryResult<BasicReplicationRequest, ReplicationResponse> shardOperationOnPrimary(, +            BasicReplicationRequest shardRequest, IndexShard primary) {, +        return new PrimaryResult<>(shardRequest, new ReplicationResponse());, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +        transportService.registerRequestHandler(actionName, request, ThreadPool.Names.SAME, this::handleOperationRequest);, +            this::handlePrimaryRequest);, +            this::handleReplicaRequest);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected PrimaryResult<BasicReplicationRequest, ReplicationResponse> shardOperationOnPrimary(, +            BasicReplicationRequest shardRequest, IndexShard primary) {, +        return new PrimaryResult<>(shardRequest, new ReplicationResponse());, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +        transportService.registerRequestHandler(actionName, request, ThreadPool.Names.SAME, this::handleOperationRequest);, +            this::handlePrimaryRequest);, +            this::handleReplicaRequest);, +++ b/server/src/main/java/org/elasticsearch/action/support/ChannelActionListener.java, +            e1.addSuppressed(e);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected PrimaryResult<BasicReplicationRequest, ReplicationResponse> shardOperationOnPrimary(, +            BasicReplicationRequest shardRequest, IndexShard primary) {, +        return new PrimaryResult<>(shardRequest, new ReplicationResponse());, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +        transportService.registerRequestHandler(actionName, request, ThreadPool.Names.SAME, this::handleOperationRequest);, +            this::handlePrimaryRequest);, +            this::handleReplicaRequest);, +++ b/server/src/main/java/org/elasticsearch/action/support/ChannelActionListener.java, +            e1.addSuppressed(e);, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.action.support.ChannelActionListener;, +        transportService.registerRequestHandler(actionName, request, ThreadPool.Names.SAME, this::handleOperationRequest);, +            this::handlePrimaryRequest);, +        transportService.registerRequestHandler(, +            transportReplicaAction, () -> new ConcreteReplicaRequest<>(replicaRequest), executor, true, true, this::handleReplicaRequest);, +    protected void handleOperationRequest(final Request request, final TransportChannel channel, Task task) {, +        execute(task, request, new ChannelActionListener<>(channel, actionName, request));, +    protected void handlePrimaryRequest(final ConcreteShardRequest<Request> request, final TransportChannel channel, final Task task) {, +        new AsyncPrimaryAction(, +            request, new ChannelActionListener<>(channel, transportPrimaryAction, request), (ReplicationTask) task).run();, +        private final ActionListener<Response> onCompletionListener;, +        private final ConcreteShardRequest<Request> primaryRequest;, +        AsyncPrimaryAction(ConcreteShardRequest<Request> primaryRequest, ActionListener<Response> onCompletionListener,, +            this.primaryRequest = primaryRequest;, +            this.onCompletionListener = onCompletionListener;, +            final ShardId shardId = primaryRequest.getRequest().shardId();, +            if (actualAllocationId.equals(primaryRequest.getTargetAllocationID()) == false) {, +                throw new ShardNotFoundException(shardId, "expected allocation id [{}] but found [{}]",, +                    primaryRequest.getTargetAllocationID(), actualAllocationId);, +            if (actualTerm != primaryRequest.getPrimaryTerm()) {, +                throw new ShardNotFoundException(shardId, "expected allocation id [{}] with term [{}] but found [{}]",, +                    primaryRequest.getTargetAllocationID(), primaryRequest.getPrimaryTerm(), actualTerm);, +            acquirePrimaryOperationPermit(indexShard, primaryRequest.getRequest(), ActionListener.wrap(, +                        new ConcreteShardRequest<>(primaryRequest.getRequest(), primary.allocationId().getRelocationId(),, +                            primaryRequest.getPrimaryTerm()),, +                        new ActionListenerResponseHandler<Response>(onCompletionListener, reader) {, +                    createReplicatedOperation(primaryRequest.getRequest(),, +            onCompletionListener.onFailure(e);, +                    onCompletionListener.onResponse(response);, +                    onCompletionListener.onFailure(e);, +                    newReplicasProxy(primaryRequest.getPrimaryTerm()), logger, actionName);, +    protected void handleReplicaRequest(final ConcreteReplicaRequest<ReplicaRequest> replicaRequest,, +                                        final TransportChannel channel, final Task task) {, +            replicaRequest, new ChannelActionListener<>(channel, transportReplicaAction, replicaRequest), (ReplicationTask) task).run();, +        private final ActionListener<ReplicaResponse> onCompletionListener;, +        private final ConcreteReplicaRequest<ReplicaRequest> replicaRequest;, +        AsyncReplicaAction(ConcreteReplicaRequest<ReplicaRequest> replicaRequest, ActionListener<ReplicaResponse> onCompletionListener,, +            this.replicaRequest = replicaRequest;, +            this.onCompletionListener = onCompletionListener;, +            final ShardId shardId = replicaRequest.getRequest().shardId();, +                final ReplicaResult replicaResult = shardOperationOnReplica(replicaRequest.getRequest(), replica);, +                            replicaRequest.getRequest()),, +                replicaRequest.getRequest().onRetry();, +                            replicaRequest,, +                            new ActionListenerResponseHandler<>(onCompletionListener, in -> new ReplicaResponse()));, +            onCompletionListener.onFailure(e);, +            if (actualAllocationId.equals(replicaRequest.getTargetAllocationID()) == false) {, +                throw new ShardNotFoundException(this.replica.shardId(), "expected allocation id [{}] but found [{}]",, +                    replicaRequest.getTargetAllocationID(), actualAllocationId);, +            acquireReplicaOperationPermit(replica, replicaRequest.getRequest(), this, replicaRequest.getPrimaryTerm(),, +                replicaRequest.getGlobalCheckpoint(), replicaRequest.getMaxSeqNoOfUpdatesOrDeletes());, +                    logger.trace("action [{}] completed on shard [{}] for request [{}]", transportReplicaAction,, +                        replicaRequest.getRequest().shardId(),, +                        replicaRequest.getRequest());, +                onCompletionListener.onResponse(replicaResponse);, +    class PrimaryShardReference implements Releasable,, +            ReplicationOperation.Primary<Request, ReplicaRequest, PrimaryResult<ReplicaRequest, Response>> {, +        PrimaryShardReference(IndexShard indexShard, Releasable operationLock) {, +        public PrimaryResult<ReplicaRequest, Response> perform(Request request) throws Exception {, +            PrimaryResult<ReplicaRequest, Response> result = shardOperationOnPrimary(request, indexShard);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected PrimaryResult<BasicReplicationRequest, ReplicationResponse> shardOperationOnPrimary(, +            BasicReplicationRequest shardRequest, IndexShard primary) {, +        return new PrimaryResult<>(shardRequest, new ReplicationResponse());, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +        transportService.registerRequestHandler(actionName, request, ThreadPool.Names.SAME, this::handleOperationRequest);, +            this::handlePrimaryRequest);]