[+++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        final boolean created = indexShard.index(operation);, +        IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.version(), created);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        final boolean created = indexShard.index(operation);, +        IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.version(), created);, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +        this.enabled = DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING, this::setEnabled);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        final boolean created = indexShard.index(operation);, +        IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.version(), created);, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +        this.enabled = DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING, this::setEnabled);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +                                    DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_REROUTE_INTERVAL_SETTING.getKey(),, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        final boolean created = indexShard.index(operation);, +        IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.version(), created);, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +        this.enabled = DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING, this::setEnabled);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +                                    DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_REROUTE_INTERVAL_SETTING.getKey(),, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public static void validateIndexName(String index, ClusterState state) {, +        if (index.charAt(0) == '_' || index.charAt(0) == '-' || index.charAt(0) == '+') {, +            throw new InvalidIndexNameException(index, "must not start with '_', '-', or '+'");, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        final boolean created = indexShard.index(operation);, +        IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.version(), created);, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +        this.enabled = DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING, this::setEnabled);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +                                    DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_REROUTE_INTERVAL_SETTING.getKey(),, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public static void validateIndexName(String index, ClusterState state) {, +        if (index.charAt(0) == '_' || index.charAt(0) == '-' || index.charAt(0) == '+') {, +            throw new InvalidIndexNameException(index, "must not start with '_', '-', or '+'");, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        final boolean created = indexShard.index(operation);, +        IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.version(), created);, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +        this.enabled = DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING, this::setEnabled);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +                                    DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_REROUTE_INTERVAL_SETTING.getKey(),, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public static void validateIndexName(String index, ClusterState state) {, +        if (index.charAt(0) == '_' || index.charAt(0) == '-' || index.charAt(0) == '+') {, +            throw new InvalidIndexNameException(index, "must not start with '_', '-', or '+'");, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        final boolean created = indexShard.index(operation);, +        IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.version(), created);, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +        this.enabled = DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING, this::setEnabled);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +                                    DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_REROUTE_INTERVAL_SETTING.getKey(),, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public static void validateIndexName(String index, ClusterState state) {, +        if (index.charAt(0) == '_' || index.charAt(0) == '-' || index.charAt(0) == '+') {, +            throw new InvalidIndexNameException(index, "must not start with '_', '-', or '+'");, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +import com.carrotsearch.hppc.ObjectLookupContainer;, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.ClusterInfoService;, +import org.elasticsearch.cluster.EmptyClusterInfoService;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Property;, +import org.elasticsearch.common.unit.RatioValue;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Set;, +, +    private volatile Double freeDiskThresholdLow;, +    private volatile Double freeDiskThresholdHigh;, +    private volatile ByteSizeValue freeBytesThresholdLow;, +    private volatile ByteSizeValue freeBytesThresholdHigh;, +    private volatile boolean includeRelocations;]