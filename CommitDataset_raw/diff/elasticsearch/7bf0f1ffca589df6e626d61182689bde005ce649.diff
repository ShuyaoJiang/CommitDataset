[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/Action.java, +    ActionFuture<Response> execute(Request request) throws ElasticSearchException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/Action.java, +    ActionFuture<Response> execute(Request request) throws ElasticSearchException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/BaseAction.java, + * @author kimchy (shay.banon), +    @Override public ActionFuture<Response> execute(Request request) throws ElasticSearchException {, +        PlainActionFuture<Response> future = newFuture();, +    protected abstract void doExecute(Request request, ActionListener<Response> listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/Action.java, +    ActionFuture<Response> execute(Request request) throws ElasticSearchException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/BaseAction.java, + * @author kimchy (shay.banon), +    @Override public ActionFuture<Response> execute(Request request) throws ElasticSearchException {, +        PlainActionFuture<Response> future = newFuture();, +    protected abstract void doExecute(Request request, ActionListener<Response> listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/PlainActionFuture.java, + * @author kimchy (shay.banon), +        return new PlainActionFuture<T>();, +    public PlainActionFuture() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/Action.java, +    ActionFuture<Response> execute(Request request) throws ElasticSearchException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/BaseAction.java, + * @author kimchy (shay.banon), +    @Override public ActionFuture<Response> execute(Request request) throws ElasticSearchException {, +        PlainActionFuture<Response> future = newFuture();, +    protected abstract void doExecute(Request request, ActionListener<Response> listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/PlainActionFuture.java, + * @author kimchy (shay.banon), +        return new PlainActionFuture<T>();, +    public PlainActionFuture() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/Client.java, + * <p>All operations performed are asynchronous by nature. Each action/operation has two flavors, the first, + * simply returns an {@link org.elasticsearch.action.ActionFuture}, while the second accepts an, + * {@link org.elasticsearch.action.ActionListener}., +    void index(IndexRequest request, ActionListener<IndexResponse> listener);, +    void delete(DeleteRequest request, ActionListener<DeleteResponse> listener);, +    void deleteByQuery(DeleteByQueryRequest request, ActionListener<DeleteByQueryResponse> listener);, +    void get(GetRequest request, ActionListener<GetResponse> listener);, +    void count(CountRequest request, ActionListener<CountResponse> listener);, +    void search(SearchRequest request, ActionListener<SearchResponse> listener);, +    void searchScroll(SearchScrollRequest request, ActionListener<SearchResponse> listener);, +    void terms(TermsRequest request, ActionListener<TermsResponse> listener);, +    void moreLikeThis(MoreLikeThisRequest request, ActionListener<SearchResponse> listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/Action.java, +    ActionFuture<Response> execute(Request request) throws ElasticSearchException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/BaseAction.java, + * @author kimchy (shay.banon), +    @Override public ActionFuture<Response> execute(Request request) throws ElasticSearchException {, +        PlainActionFuture<Response> future = newFuture();, +    protected abstract void doExecute(Request request, ActionListener<Response> listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/PlainActionFuture.java, + * @author kimchy (shay.banon), +        return new PlainActionFuture<T>();, +    public PlainActionFuture() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/Client.java, + * <p>All operations performed are asynchronous by nature. Each action/operation has two flavors, the first, + * simply returns an {@link org.elasticsearch.action.ActionFuture}, while the second accepts an, + * {@link org.elasticsearch.action.ActionListener}., +    void index(IndexRequest request, ActionListener<IndexResponse> listener);, +    void delete(DeleteRequest request, ActionListener<DeleteResponse> listener);, +    void deleteByQuery(DeleteByQueryRequest request, ActionListener<DeleteByQueryResponse> listener);, +    void get(GetRequest request, ActionListener<GetResponse> listener);, +    void count(CountRequest request, ActionListener<CountResponse> listener);, +    void search(SearchRequest request, ActionListener<SearchResponse> listener);, +    void searchScroll(SearchScrollRequest request, ActionListener<SearchResponse> listener);, +    void terms(TermsRequest request, ActionListener<TermsResponse> listener);, +    void moreLikeThis(MoreLikeThisRequest request, ActionListener<SearchResponse> listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/ClusterAdminClient.java, +    void health(ClusterHealthRequest request, ActionListener<ClusterHealthResponse> listener);, +    void state(ClusterStateRequest request, ActionListener<ClusterStateResponse> listener);, +    void nodesInfo(NodesInfoRequest request, ActionListener<NodesInfoResponse> listener);, +    void ping(SinglePingRequest request, ActionListener<SinglePingResponse> listener);, +    void ping(BroadcastPingRequest request, ActionListener<BroadcastPingResponse> listener);, +    void ping(ReplicationPingRequest request, ActionListener<ReplicationPingResponse> listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/Action.java, +    ActionFuture<Response> execute(Request request) throws ElasticSearchException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/BaseAction.java, + * @author kimchy (shay.banon), +    @Override public ActionFuture<Response> execute(Request request) throws ElasticSearchException {, +        PlainActionFuture<Response> future = newFuture();, +    protected abstract void doExecute(Request request, ActionListener<Response> listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/PlainActionFuture.java, + * @author kimchy (shay.banon), +        return new PlainActionFuture<T>();, +    public PlainActionFuture() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/Client.java, + * <p>All operations performed are asynchronous by nature. Each action/operation has two flavors, the first, + * simply returns an {@link org.elasticsearch.action.ActionFuture}, while the second accepts an, + * {@link org.elasticsearch.action.ActionListener}., +    void index(IndexRequest request, ActionListener<IndexResponse> listener);, +    void delete(DeleteRequest request, ActionListener<DeleteResponse> listener);, +    void deleteByQuery(DeleteByQueryRequest request, ActionListener<DeleteByQueryResponse> listener);, +    void get(GetRequest request, ActionListener<GetResponse> listener);, +    void count(CountRequest request, ActionListener<CountResponse> listener);, +    void search(SearchRequest request, ActionListener<SearchResponse> listener);, +    void searchScroll(SearchScrollRequest request, ActionListener<SearchResponse> listener);, +    void terms(TermsRequest request, ActionListener<TermsResponse> listener);, +    void moreLikeThis(MoreLikeThisRequest request, ActionListener<SearchResponse> listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/ClusterAdminClient.java]