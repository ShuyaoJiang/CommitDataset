[+++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class RecoveryState implements ToXContentFragment, Streamable, Writeable {, +    private final Index index;, +    private final Translog translog;, +    private final VerifyIndex verifyIndex;, +    private final Timer timer;, +    private boolean primary;, +        index = new Index();, +        translog = new Translog();, +        verifyIndex = new VerifyIndex();, +        timer = new Timer();, +    public RecoveryState(StreamInput in) throws IOException {, +        timer = new Timer(in);, +        stage = Stage.fromId(in.readByte());, +        shardId = ShardId.readShardId(in);, +        recoverySource = RecoverySource.readFrom(in);, +        targetNode = new DiscoveryNode(in);, +        sourceNode = in.readOptionalWriteable(DiscoveryNode::new);, +        index = new Index(in);, +        translog = new Translog(in);, +        verifyIndex = new VerifyIndex(in);, +        primary = in.readBoolean();, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        timer.writeTo(out);, +        out.writeByte(stage.id());, +        shardId.writeTo(out);, +        recoverySource.writeTo(out);, +        targetNode.writeTo(out);, +        out.writeOptionalWriteable(sourceNode);, +        index.writeTo(out);, +        translog.writeTo(out);, +        verifyIndex.writeTo(out);, +        out.writeBoolean(primary);, +    }, +, +        return new RecoveryState(in);, +        throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable");, +    public static class Timer implements Writeable {, +        public Timer() {, +        }, +, +        public Timer(StreamInput in) throws IOException {, +            startTime = in.readVLong();, +            startNanoTime = in.readVLong();, +            stopTime = in.readVLong();, +            time = in.readVLong();, +        }, +, +        @Override, +        public synchronized void writeTo(StreamOutput out) throws IOException {, +            out.writeVLong(startTime);, +            out.writeVLong(startNanoTime);, +            out.writeVLong(stopTime);, +            // write a snapshot of current time, which is not per se the time field, +            out.writeVLong(time());, +        }, +, +    public static class VerifyIndex extends Timer implements ToXContentFragment, Writeable {, +        public VerifyIndex() {, +        }, +, +        public VerifyIndex(StreamInput in) throws IOException {, +            super(in);, +            checkIndexTime = in.readVLong();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            super.writeTo(out);, +            out.writeVLong(checkIndexTime);, +        }, +    public static class Translog extends Timer implements ToXContentFragment, Writeable {, +        public Translog() {, +        }, +, +        public Translog(StreamInput in) throws IOException {, +            super(in);, +            recovered = in.readVInt();, +            total = in.readVInt();, +            totalOnStart = in.readVInt();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            super.writeTo(out);, +            out.writeVInt(recovered);, +            out.writeVInt(total);, +            out.writeVInt(totalOnStart);, +        }, +, +    public static class File implements ToXContentObject, Writeable {, +        public File(StreamInput in) throws IOException {, +            name = in.readString();, +            length = in.readVLong();, +            recovered = in.readVLong();, +            reused = in.readBoolean();]