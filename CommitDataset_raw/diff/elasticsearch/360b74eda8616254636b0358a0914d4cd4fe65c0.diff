[+++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4HeadBodyIsEmptyIT.java, +import org.apache.http.entity.StringEntity;, +import org.elasticsearch.client.Response;, +import org.elasticsearch.test.rest.ESRestTestCase;, +import org.hamcrest.Matcher;, +, +import java.io.IOException;, +import java.util.Map;, +, +import static java.util.Collections.emptyMap;, +import static java.util.Collections.singletonMap;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +, +public class Netty4HeadBodyIsEmptyIT extends ESRestTestCase {, +, +    public void testHeadRoot() throws IOException {, +        headTestCase("/", emptyMap(), greaterThan(0));, +        headTestCase("/", singletonMap("pretty", ""), greaterThan(0));, +        headTestCase("/", singletonMap("pretty", "true"), greaterThan(0));, +    }, +, +    private void createTestDoc() throws IOException {, +        client().performRequest("PUT", "test/test/1", emptyMap(), new StringEntity("{\"test\": \"test\"}"));, +    }, +, +    public void testDocumentExists() throws IOException {, +        createTestDoc();, +        headTestCase("test/test/1", emptyMap(), equalTo(0));, +        headTestCase("test/test/1", singletonMap("pretty", "true"), equalTo(0));, +    }, +, +    public void testIndexExists() throws IOException {, +        createTestDoc();, +        headTestCase("test", emptyMap(), equalTo(0));, +        headTestCase("test", singletonMap("pretty", "true"), equalTo(0));, +    }, +, +    public void testTypeExists() throws IOException {, +        createTestDoc();, +        headTestCase("test/test", emptyMap(), equalTo(0));, +        headTestCase("test/test", singletonMap("pretty", "true"), equalTo(0));, +    }, +, +    private void headTestCase(String url, Map<String, String> params, Matcher<Integer> matcher) throws IOException {, +        Response response = client().performRequest("HEAD", url, params);, +        assertEquals(200, response.getStatusLine().getStatusCode());, +        assertThat(Integer.valueOf(response.getHeader("Content-Length")), matcher);, +        assertNull("HEAD requests shouldn't have a response body but " + url + " did", response.getEntity());, +    }, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4HeadBodyIsEmptyIT.java, +import org.apache.http.entity.StringEntity;, +import org.elasticsearch.client.Response;, +import org.elasticsearch.test.rest.ESRestTestCase;, +import org.hamcrest.Matcher;, +, +import java.io.IOException;, +import java.util.Map;, +, +import static java.util.Collections.emptyMap;, +import static java.util.Collections.singletonMap;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +, +public class Netty4HeadBodyIsEmptyIT extends ESRestTestCase {, +, +    public void testHeadRoot() throws IOException {, +        headTestCase("/", emptyMap(), greaterThan(0));, +        headTestCase("/", singletonMap("pretty", ""), greaterThan(0));, +        headTestCase("/", singletonMap("pretty", "true"), greaterThan(0));, +    }, +, +    private void createTestDoc() throws IOException {, +        client().performRequest("PUT", "test/test/1", emptyMap(), new StringEntity("{\"test\": \"test\"}"));, +    }, +, +    public void testDocumentExists() throws IOException {, +        createTestDoc();, +        headTestCase("test/test/1", emptyMap(), equalTo(0));, +        headTestCase("test/test/1", singletonMap("pretty", "true"), equalTo(0));, +    }, +, +    public void testIndexExists() throws IOException {, +        createTestDoc();, +        headTestCase("test", emptyMap(), equalTo(0));, +        headTestCase("test", singletonMap("pretty", "true"), equalTo(0));, +    }, +, +    public void testTypeExists() throws IOException {, +        createTestDoc();, +        headTestCase("test/test", emptyMap(), equalTo(0));, +        headTestCase("test/test", singletonMap("pretty", "true"), equalTo(0));, +    }, +, +    private void headTestCase(String url, Map<String, String> params, Matcher<Integer> matcher) throws IOException {, +        Response response = client().performRequest("HEAD", url, params);, +        assertEquals(200, response.getStatusLine().getStatusCode());, +        assertThat(Integer.valueOf(response.getHeader("Content-Length")), matcher);, +        assertNull("HEAD requests shouldn't have a response body but " + url + " did", response.getEntity());, +    }]