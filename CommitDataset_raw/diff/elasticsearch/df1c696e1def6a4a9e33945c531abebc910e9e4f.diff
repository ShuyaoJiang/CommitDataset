[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/LambdaBootstrap.java, +     * of either a lot more code or requiring many {@link Class}es to be looked, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/LambdaBootstrap.java, +     * of either a lot more code or requiring many {@link Class}es to be looked, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +    public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,, +            locals.addVariable(parameter.location, parameter.clazz, parameter.name, isCapture);, +            locals.defineVariable(null, int.class, LOOP, true);, +    public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter) {, +            locals.addVariable(parameter.location, parameter.clazz, parameter.name, false);, +            locals.defineVariable(null, int.class, LOOP, true);, +        Locals locals = new Locals(, +            programScope, programScope.definition, scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS);, +        locals.defineVariable(null, Object.class, THIS, true);, +            locals.defineVariable(null, arg.getClazz(), arg.getName(), true);, +            locals.defineVariable(null, int.class, LOOP, true);, +    public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly) {, +        return defineVariable(location, clazz, name, readonly);, +    public Class<?> getReturnType() {, +    private final Class<?> returnType;, +    private Locals(Locals parent, Definition definition, Class<?> returnType, Set<String> keywords) {, +    private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly) {, +        nextSlotNumber += MethodWriter.getType(type).getSize();, +        public final Class<?> clazz;, +        public Variable(Location location, String name, Class<?> clazz, int slot, boolean readonly) {, +            this.clazz = clazz;, +            b.append("Variable[type=").append(Definition.ClassToName(clazz));, +        public final Class<?> clazz;, +        public Parameter(Location location, String name, Class<?> clazz) {, +            this.clazz = clazz;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/LambdaBootstrap.java, +     * of either a lot more code or requiring many {@link Class}es to be looked, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +    public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,, +            locals.addVariable(parameter.location, parameter.clazz, parameter.name, isCapture);, +            locals.defineVariable(null, int.class, LOOP, true);, +    public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter) {, +            locals.addVariable(parameter.location, parameter.clazz, parameter.name, false);, +            locals.defineVariable(null, int.class, LOOP, true);, +        Locals locals = new Locals(, +            programScope, programScope.definition, scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS);, +        locals.defineVariable(null, Object.class, THIS, true);, +            locals.defineVariable(null, arg.getClazz(), arg.getName(), true);, +            locals.defineVariable(null, int.class, LOOP, true);, +    public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly) {, +        return defineVariable(location, clazz, name, readonly);, +    public Class<?> getReturnType() {, +    private final Class<?> returnType;, +    private Locals(Locals parent, Definition definition, Class<?> returnType, Set<String> keywords) {, +    private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly) {, +        nextSlotNumber += MethodWriter.getType(type).getSize();, +        public final Class<?> clazz;, +        public Variable(Location location, String name, Class<?> clazz, int slot, boolean readonly) {, +            this.clazz = clazz;, +            b.append("Variable[type=").append(Definition.ClassToName(clazz));, +        public final Class<?> clazz;, +        public Parameter(Location location, String name, Class<?> clazz) {, +            this.clazz = clazz;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java, +    private final Class<?> executeMethodReturnType;, +    private final List<Class<?>> getReturns;, +        List<Class<?>> getReturns = new ArrayList<>();, +            if (m.getName().startsWith("needs") && m.getReturnType() == boolean.class && m.getParameterTypes().length == 0) {, +     * The Painless {@link Class} or the return type of the {@code execute} method. This is used to generate the appropriate, +    public Class<?> getExecuteMethodReturnType() {, +     * Painless {@link Class}s and names of the arguments to the {@code execute} method. The names are exposed to the Painless, +    public List<Class<?>> getGetReturns() {, +     * Painless {@link Class}es and name of the argument to the {@code execute} method., +        private final Class<?> clazz;, +        public MethodArgument(Class<?> clazz, String name) {, +            this.clazz = clazz;, +        public Class<?> getClazz() {, +            return clazz;, +    private MethodArgument methodArgument(Definition definition, Class<?> clazz, String argName) {, +        Class<?> defClass = definitionTypeForClass(definition, clazz, componentType -> "[" + argName + "] is of unknown type [", +        return new MethodArgument(defClass, argName);, +    private static Class<?> definitionTypeForClass(Definition definition, Class<?> type,, +        if (componentType == Object.class) {, +            struct = definition.getType("def").struct;, +        return Definition.TypeToClass(definition.getType(struct, dimensions));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/LambdaBootstrap.java, +     * of either a lot more code or requiring many {@link Class}es to be looked, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +    public static Locals newLambdaScope(Locals programScope, Class<?> returnType, List<Parameter> parameters,, +            locals.addVariable(parameter.location, parameter.clazz, parameter.name, isCapture);, +            locals.defineVariable(null, int.class, LOOP, true);, +    public static Locals newFunctionScope(Locals programScope, Class<?> returnType, List<Parameter> parameters, int maxLoopCounter) {, +            locals.addVariable(parameter.location, parameter.clazz, parameter.name, false);, +            locals.defineVariable(null, int.class, LOOP, true);, +        Locals locals = new Locals(, +            programScope, programScope.definition, scriptClassInfo.getExecuteMethodReturnType(), KEYWORDS);, +        locals.defineVariable(null, Object.class, THIS, true);, +            locals.defineVariable(null, arg.getClazz(), arg.getName(), true);, +            locals.defineVariable(null, int.class, LOOP, true);, +    public Variable addVariable(Location location, Class<?> clazz, String name, boolean readonly) {, +        return defineVariable(location, clazz, name, readonly);, +    public Class<?> getReturnType() {, +    private final Class<?> returnType;, +    private Locals(Locals parent, Definition definition, Class<?> returnType, Set<String> keywords) {, +    private Variable defineVariable(Location location, Class<?> type, String name, boolean readonly) {]