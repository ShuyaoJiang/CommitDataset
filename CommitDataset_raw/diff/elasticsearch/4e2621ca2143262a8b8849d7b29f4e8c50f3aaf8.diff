[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;, +    private static final Map<String, Constructor<? extends ElasticsearchException>> MAPPING;, +     * Retruns <code>true</code> iff the given name is a registered for an exception to be read., +     */, +    static boolean isRegistered(String name) {, +        return MAPPING.containsKey(name);, +    }, +, +    static Set<String> getRegisteredKeys() { // for testing, +        return MAPPING.keySet();, +    }, +, +    /**, +                NotSerializableExceptionWrapper.class, +        Map<String, Constructor<? extends ElasticsearchException>> mapping = new HashMap<>(exceptions.length);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;, +    private static final Map<String, Constructor<? extends ElasticsearchException>> MAPPING;, +     * Retruns <code>true</code> iff the given name is a registered for an exception to be read., +     */, +    static boolean isRegistered(String name) {, +        return MAPPING.containsKey(name);, +    }, +, +    static Set<String> getRegisteredKeys() { // for testing, +        return MAPPING.keySet();, +    }, +, +    /**, +                NotSerializableExceptionWrapper.class, +        Map<String, Constructor<? extends ElasticsearchException>> mapping = new HashMap<>(exceptions.length);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.io.stream;, +, +import org.elasticsearch.ElasticsearchException;, +, +import java.io.IOException;, +, +/**, + * This exception can be used to wrap a given, not serializable exception, + * to serialize via {@link StreamOutput#writeThrowable(Throwable)}, + */, +public final class NotSerializableExceptionWrapper extends ElasticsearchException {, +, +    private final String name;, +, +    public NotSerializableExceptionWrapper(Throwable other) {, +        super(other.getMessage(), other.getCause());, +        this.name = ElasticsearchException.getExceptionName(other);, +    }, +, +    public NotSerializableExceptionWrapper(StreamInput in) throws IOException {, +        super(in);, +        name = in.readString();, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);, +        out.writeString(name);, +    }, +, +    @Override, +    protected String getExceptionName() {, +        return name;, +    }, +}, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;, +    private static final Map<String, Constructor<? extends ElasticsearchException>> MAPPING;, +     * Retruns <code>true</code> iff the given name is a registered for an exception to be read., +     */, +    static boolean isRegistered(String name) {, +        return MAPPING.containsKey(name);, +    }, +, +    static Set<String> getRegisteredKeys() { // for testing, +        return MAPPING.keySet();, +    }, +]