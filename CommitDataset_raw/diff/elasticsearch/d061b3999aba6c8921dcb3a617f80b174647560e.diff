[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +    public AcknowledgedResponse retryLifecyclePolicy(RetryLifecyclePolicyRequest request, RequestOptions options) throws IOException {, +    public void retryLifecyclePolicyAsync(RetryLifecyclePolicyRequest request, RequestOptions options,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +    public AcknowledgedResponse retryLifecyclePolicy(RetryLifecyclePolicyRequest request, RequestOptions options) throws IOException {, +    public void retryLifecyclePolicyAsync(RetryLifecyclePolicyRequest request, RequestOptions options,, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +                retryRequest, highLevelClient().indexLifecycle()::retryLifecyclePolicy,, +                highLevelClient().indexLifecycle()::retryLifecyclePolicyAsync, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +    public AcknowledgedResponse retryLifecyclePolicy(RetryLifecyclePolicyRequest request, RequestOptions options) throws IOException {, +    public void retryLifecyclePolicyAsync(RetryLifecyclePolicyRequest request, RequestOptions options,, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +                retryRequest, highLevelClient().indexLifecycle()::retryLifecyclePolicy,, +                highLevelClient().indexLifecycle()::retryLifecyclePolicyAsync, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/ILMDocumentationIT.java, +import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;, +import org.elasticsearch.client.indexlifecycle.ExplainLifecycleRequest;, +import org.elasticsearch.client.indexlifecycle.RetryLifecyclePolicyRequest;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.Settings;, +    public void testRetryPolicy() throws Exception {, +        RestHighLevelClient client = highLevelClient();, +, +        // setup policy to immediately fail on index, +        {, +            Map<String, Phase> phases = new HashMap<>();, +            Map<String, LifecycleAction> warmActions = new HashMap<>();, +            warmActions.put(ShrinkAction.NAME, new ShrinkAction(1));, +            phases.put("warm", new Phase("warm", TimeValue.ZERO, warmActions));, +, +            LifecyclePolicy policy = new LifecyclePolicy("my_policy",, +                phases);, +            PutLifecyclePolicyRequest putRequest =, +                new PutLifecyclePolicyRequest(policy);, +            client.indexLifecycle().putLifecyclePolicy(putRequest, RequestOptions.DEFAULT);, +, +            CreateIndexRequest createIndexRequest = new CreateIndexRequest("my_index",, +                Settings.builder(), +                    .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1), +                    .put("index.lifecycle.name", "my_policy"), +                    .build());, +            client.indices().create(createIndexRequest, RequestOptions.DEFAULT);, +            assertBusy(() -> assertNotNull(client.indexLifecycle(), +                .explainLifecycle(new ExplainLifecycleRequest().indices("my_index"), RequestOptions.DEFAULT), +                .getIndexResponses().get("my_index").getFailedStep()));, +        }, +, +        // tag::ilm-retry-lifecycle-policy-request, +        RetryLifecyclePolicyRequest request =, +            new RetryLifecyclePolicyRequest("my_index"); // <1>, +        // end::ilm-retry-lifecycle-policy-request, +, +, +        // tag::ilm-retry-lifecycle-policy-execute, +        AcknowledgedResponse response = client.indexLifecycle(), +            .retryLifecyclePolicy(request, RequestOptions.DEFAULT);, +        // end::ilm-retry-lifecycle-policy-execute, +, +        // tag::ilm-retry-lifecycle-policy-response, +        boolean acknowledged = response.isAcknowledged(); // <1>, +        // end::ilm-retry-lifecycle-policy-response, +, +        assertTrue(acknowledged);, +, +        // tag::ilm-retry-lifecycle-policy-execute-listener, +        ActionListener<AcknowledgedResponse> listener =, +            new ActionListener<AcknowledgedResponse>() {, +                @Override, +                public void onResponse(AcknowledgedResponse response) {, +                    boolean acknowledged = response.isAcknowledged(); // <1>, +                }, +, +                @Override, +                public void onFailure(Exception e) {, +                    // <2>, +                }, +            };, +        // end::ilm-retry-lifecycle-policy-execute-listener, +, +        // Replace the empty listener by a blocking listener in test, +        final CountDownLatch latch = new CountDownLatch(1);, +        listener = new LatchedActionListener<>(listener, latch);, +, +        // tag::ilm-retry-lifecycle-policy-execute-async, +        client.indexLifecycle().retryLifecyclePolicyAsync(request,, +            RequestOptions.DEFAULT, listener); // <1>, +        // end::ilm-retry-lifecycle-policy-execute-async, +, +        assertTrue(latch.await(30L, TimeUnit.SECONDS));, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +    public AcknowledgedResponse retryLifecyclePolicy(RetryLifecyclePolicyRequest request, RequestOptions options) throws IOException {, +    public void retryLifecyclePolicyAsync(RetryLifecyclePolicyRequest request, RequestOptions options,, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +                retryRequest, highLevelClient().indexLifecycle()::retryLifecyclePolicy,, +                highLevelClient().indexLifecycle()::retryLifecyclePolicyAsync, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/ILMDocumentationIT.java, +import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;]