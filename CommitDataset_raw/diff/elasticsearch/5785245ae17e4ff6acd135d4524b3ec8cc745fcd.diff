[+++ b/.gitignore, +# vscode stuff, +.vscode/, +++ b/.gitignore, +# vscode stuff, +.vscode/, +++ b/CONTRIBUTING.md, +### Configuring IDEs And Running Tests, +, +, +### Java Language Formatting Guidelines, +, +### License Headers, +, +We require license headers on all Java files. You will notice that all the Java files in, +the top-level `x-pack` directory contain a separate license from the rest of the repository. This, +directory contains commercial code that is associated with a separate license. It can be helpful, +to have the IDE automatically insert the appropriate license header depending which part of the project, +contributions are made to., +, +#### IntelliJ: Copyright & Scope Profiles, +, +To have IntelliJ insert the correct license, it is necessary to create to copyright profiles., +These may potentially be called `apache2` and `commercial`. These can be created in, +`Preferences/Settings->Editor->Copyright->Copyright Profiles`. To associate these profiles to, +their respective directories, two "Scopes" will need to be created. These can be created in, +`Preferences/Settings->Appearances & Behavior->Scopes`. When creating scopes, be sure to choose, +the `shared` scope type. Create a scope, `apache2`, with, +the associated pattern of `!file[group:x-pack]:*/`. This pattern will exclude all the files contained in, +the `x-pack` directory. The other scope, `commercial`, will have the inverse pattern of `file[group:x-pack]:*/`., +The two scopes, together, should account for all the files in the project. To associate the scopes, +with their copyright-profiles, go into `Preferences/Settings->Editor>Copyright` and use the `+` to add, +the associations `apache2/apache2` and `commercial/commercial`., +, +Configuring these options in IntelliJ can be quite buggy, so do not be alarmed if you have to open/close, +the settings window and/or restart IntelliJ to see your changes take effect., +, +### Creating A Distribution, +, +### Running The Full Test Suite, +, +++ b/.gitignore, +# vscode stuff, +.vscode/, +++ b/CONTRIBUTING.md, +### Configuring IDEs And Running Tests, +, +, +### Java Language Formatting Guidelines, +, +### License Headers, +, +We require license headers on all Java files. You will notice that all the Java files in, +the top-level `x-pack` directory contain a separate license from the rest of the repository. This, +directory contains commercial code that is associated with a separate license. It can be helpful, +to have the IDE automatically insert the appropriate license header depending which part of the project, +contributions are made to., +, +#### IntelliJ: Copyright & Scope Profiles, +, +To have IntelliJ insert the correct license, it is necessary to create to copyright profiles., +These may potentially be called `apache2` and `commercial`. These can be created in, +`Preferences/Settings->Editor->Copyright->Copyright Profiles`. To associate these profiles to, +their respective directories, two "Scopes" will need to be created. These can be created in, +`Preferences/Settings->Appearances & Behavior->Scopes`. When creating scopes, be sure to choose, +the `shared` scope type. Create a scope, `apache2`, with, +the associated pattern of `!file[group:x-pack]:*/`. This pattern will exclude all the files contained in, +the `x-pack` directory. The other scope, `commercial`, will have the inverse pattern of `file[group:x-pack]:*/`., +The two scopes, together, should account for all the files in the project. To associate the scopes, +with their copyright-profiles, go into `Preferences/Settings->Editor>Copyright` and use the `+` to add, +the associations `apache2/apache2` and `commercial/commercial`., +, +Configuring these options in IntelliJ can be quite buggy, so do not be alarmed if you have to open/close, +the settings window and/or restart IntelliJ to see your changes take effect., +, +### Creating A Distribution, +, +### Running The Full Test Suite, +, +++ b/build.gradle, +import org.elasticsearch.gradle.LoggedExec, +import java.nio.file.Files, +static void assertLinesInFile(final Path path, final List<String> expectedLines) {, +  final List<String> actualLines = Files.readAllLines(path), +  int line = 0, +  for (final String expectedLine : expectedLines) {, +    final String actualLine = actualLines.get(line), +    if (expectedLine != actualLine) {, +      throw new GradleException("expected line [${line + 1}] in [${path}] to be [${expectedLine}] but was [${actualLine}]"), +    }, +    line++, +  }, +}, +, +/*, + * Check that all generated JARs have our NOTICE.txt and an appropriate, + * LICENSE.txt in them. We configurate this in gradle but we'd like to, + * be extra paranoid., + */, +subprojects { project ->]