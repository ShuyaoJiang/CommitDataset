[+++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/command/AllocateAllocationCommand.java, +import org.elasticsearch.ElasticSearchParseException;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import java.io.IOException;, +    public static final String NAME = "allocate";, +, +    public static class Factory implements AllocationCommand.Factory<AllocateAllocationCommand> {, +, +        @Override, +        public AllocateAllocationCommand readFrom(StreamInput in) throws IOException {, +            return new AllocateAllocationCommand(ShardId.readShardId(in), in.readString(), in.readBoolean());, +        }, +, +        @Override, +        public void writeTo(AllocateAllocationCommand command, StreamOutput out) throws IOException {, +            command.shardId().writeTo(out);, +            out.writeString(command.node());, +            out.writeBoolean(command.allowPrimary());, +        }, +, +        @Override, +        public AllocateAllocationCommand fromXContent(XContentParser parser) throws IOException {, +            String index = null;, +            int shardId = -1;, +            String nodeId = null;, +            boolean allowPrimary = false;, +, +            String currentFieldName = null;, +            XContentParser.Token token;, +            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                if (token == XContentParser.Token.FIELD_NAME) {, +                    currentFieldName = parser.currentName();, +                } else if (token.isValue()) {, +                    if ("index".equals(currentFieldName)) {, +                        index = parser.text();, +                    } else if ("shard".equals(currentFieldName)) {, +                        shardId = parser.intValue();, +                    } else if ("node".equals(currentFieldName)) {, +                        nodeId = parser.text();, +                    } else if ("allow_primary".equals(currentFieldName) || "allowPrimary".equals(currentFieldName)) {, +                        allowPrimary = parser.booleanValue();, +                    } else {, +                        throw new ElasticSearchParseException("[allocate] command does not support field [" + currentFieldName + "]");, +                    }, +                } else {, +                    throw new ElasticSearchParseException("[allocate] command does not support complex json tokens [" + token + "]");, +                }, +            }, +            if (index == null) {, +                throw new ElasticSearchParseException("[allocate] command missing the index parameter");, +            }, +            if (shardId == -1) {, +                throw new ElasticSearchParseException("[allocate] command missing the shard parameter");, +            }, +            if (nodeId == null) {, +                throw new ElasticSearchParseException("[allocate] command missing the node parameter");, +            }, +            return new AllocateAllocationCommand(new ShardId(index, shardId), nodeId, allowPrimary);, +        }, +, +        @Override, +        public void toXContent(AllocateAllocationCommand command, XContentBuilder builder, ToXContent.Params params) throws IOException {, +            builder.startObject();, +            builder.field("index", command.shardId().index());, +            builder.field("shard", command.shardId().id());, +            builder.field("node", command.node());, +            builder.field("allow_primary", command.allowPrimary());, +            builder.endObject();, +        }, +    }, +, +    private final String node;, +    public AllocateAllocationCommand(ShardId shardId, String node, boolean allowPrimary) {, +        this.node = node;, +    public String name() {, +        return NAME;, +    }, +, +    public ShardId shardId() {, +        return this.shardId;, +    }, +, +    public String node() {, +        return this.node;, +    }, +, +    public boolean allowPrimary() {, +        return this.allowPrimary;, +    }, +, +    @Override, +        DiscoveryNode discoNode = allocation.nodes().resolveNode(node);, +        RoutingNode routingNode = allocation.routingNodes().node(discoNode.id());, +            throw new ElasticSearchIllegalArgumentException("[allocate] allocation of " + shardId + " on node " + discoNode + " is not allowed");, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/command/AllocateAllocationCommand.java, +import org.elasticsearch.ElasticSearchParseException;]