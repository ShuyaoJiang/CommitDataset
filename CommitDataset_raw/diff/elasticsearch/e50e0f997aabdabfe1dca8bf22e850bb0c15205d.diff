[+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosTicketValidator.java, +    static final Oid SPNEGO_OID = getOid("1.3.6.1.5.5.2");, +    static final Oid KERBEROS_V5_OID = getOid("1.2.840.113554.1.2.2");, +    static final Oid[] SUPPORTED_OIDS = new Oid[] { SPNEGO_OID, KERBEROS_V5_OID };, +    private static Oid getOid(final String id) {, +            oid = new Oid(id);, +                GSSCredential.DEFAULT_LIFETIME, SUPPORTED_OIDS, GSSCredential.ACCEPT_ONLY));, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosTicketValidator.java, +    static final Oid SPNEGO_OID = getOid("1.3.6.1.5.5.2");, +    static final Oid KERBEROS_V5_OID = getOid("1.2.840.113554.1.2.2");, +    static final Oid[] SUPPORTED_OIDS = new Oid[] { SPNEGO_OID, KERBEROS_V5_OID };, +    private static Oid getOid(final String id) {, +            oid = new Oid(id);, +                GSSCredential.DEFAULT_LIFETIME, SUPPORTED_OIDS, GSSCredential.ACCEPT_ONLY));, +++ b/x-pack/qa/evil-tests/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosTicketValidatorTests.java, +        try (SpnegoClient spnegoClient = new SpnegoClient(principalName(clientUserName), new SecureString("pwd".toCharArray()),, +                principalName("differentServer"), randomFrom(KerberosTicketValidator.SUPPORTED_OIDS))) {, +                principalName(randomFrom(serviceUserNames)), randomFrom(KerberosTicketValidator.SUPPORTED_OIDS));) {, +        try (SpnegoClient spnegoClient = new SpnegoClient(principalName(clientUserName), password, servicePrincipalName,, +                randomFrom(KerberosTicketValidator.SUPPORTED_OIDS))) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosTicketValidator.java, +    static final Oid SPNEGO_OID = getOid("1.3.6.1.5.5.2");, +    static final Oid KERBEROS_V5_OID = getOid("1.2.840.113554.1.2.2");, +    static final Oid[] SUPPORTED_OIDS = new Oid[] { SPNEGO_OID, KERBEROS_V5_OID };, +    private static Oid getOid(final String id) {, +            oid = new Oid(id);, +                GSSCredential.DEFAULT_LIFETIME, SUPPORTED_OIDS, GSSCredential.ACCEPT_ONLY));, +++ b/x-pack/qa/evil-tests/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosTicketValidatorTests.java, +        try (SpnegoClient spnegoClient = new SpnegoClient(principalName(clientUserName), new SecureString("pwd".toCharArray()),, +                principalName("differentServer"), randomFrom(KerberosTicketValidator.SUPPORTED_OIDS))) {, +                principalName(randomFrom(serviceUserNames)), randomFrom(KerberosTicketValidator.SUPPORTED_OIDS));) {, +        try (SpnegoClient spnegoClient = new SpnegoClient(principalName(clientUserName), password, servicePrincipalName,, +                randomFrom(KerberosTicketValidator.SUPPORTED_OIDS))) {, +++ b/x-pack/qa/evil-tests/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/SimpleKdcLdapServerTests.java, +        try (SpnegoClient spnegoClient = new SpnegoClient(principalName(clientUserName), new SecureString("pwd".toCharArray()),, +                principalName(serviceUserName), randomFrom(KerberosTicketValidator.SUPPORTED_OIDS));) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosTicketValidator.java, +    static final Oid SPNEGO_OID = getOid("1.3.6.1.5.5.2");, +    static final Oid KERBEROS_V5_OID = getOid("1.2.840.113554.1.2.2");, +    static final Oid[] SUPPORTED_OIDS = new Oid[] { SPNEGO_OID, KERBEROS_V5_OID };, +    private static Oid getOid(final String id) {, +            oid = new Oid(id);, +                GSSCredential.DEFAULT_LIFETIME, SUPPORTED_OIDS, GSSCredential.ACCEPT_ONLY));, +++ b/x-pack/qa/evil-tests/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosTicketValidatorTests.java, +        try (SpnegoClient spnegoClient = new SpnegoClient(principalName(clientUserName), new SecureString("pwd".toCharArray()),, +                principalName("differentServer"), randomFrom(KerberosTicketValidator.SUPPORTED_OIDS))) {, +                principalName(randomFrom(serviceUserNames)), randomFrom(KerberosTicketValidator.SUPPORTED_OIDS));) {, +        try (SpnegoClient spnegoClient = new SpnegoClient(principalName(clientUserName), password, servicePrincipalName,, +                randomFrom(KerberosTicketValidator.SUPPORTED_OIDS))) {, +++ b/x-pack/qa/evil-tests/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/SimpleKdcLdapServerTests.java, +        try (SpnegoClient spnegoClient = new SpnegoClient(principalName(clientUserName), new SecureString("pwd".toCharArray()),, +                principalName(serviceUserName), randomFrom(KerberosTicketValidator.SUPPORTED_OIDS));) {, +++ b/x-pack/qa/evil-tests/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/SpnegoClient.java, +import org.apache.logging.log4j.Logger;, +import org.ietf.jgss.Oid;, + * It supports Kerberos V5 and Spnego mechanism.<br>, +     *, +     * @param mechanism the Oid of the desired mechanism. Use (Oid) null to request, +     * the default mechanism., +    SpnegoClient(final String userPrincipalName, final SecureString password, final String servicePrincipalName, final Oid mechanism), +                            GSSCredential.DEFAULT_LIFETIME, mechanism, GSSCredential.INITIATE_ONLY));, +            gssContext = gssManager.createContext(gssServicePrincipalName.canonicalize(mechanism),, +                    mechanism, userCreds, GSSCredential.DEFAULT_LIFETIME);]