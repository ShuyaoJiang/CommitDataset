[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        Engine engine = new RobinEngine(shardId, settings, new IndexSettingsService(shardId.index(), settings), store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        Engine engine = new RobinEngine(shardId, settings, new IndexSettingsService(shardId.index(), settings), store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.index.settings.IndexSettingsService;, +    private volatile int termIndexInterval;, +    private volatile int termIndexDivisor;, +    private final IndexSettingsService indexSettingsService;, +, +    private final ApplySettings applySettings = new ApplySettings();, +, +    @Inject public RobinEngine(ShardId shardId, @IndexSettings Settings indexSettings, IndexSettingsService indexSettingsService,, +                               Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog,, +        this.indexSettingsService = indexSettingsService;, +, +        this.indexSettingsService.addListener(applySettings);, +        indexSettingsService.removeListener(applySettings);, +    class ApplySettings implements IndexSettingsService.Listener {, +        @Override public void onRefreshSettings(Settings settings) {, +            int termIndexInterval = settings.getAsInt("index.term_index_interval", RobinEngine.this.termIndexInterval);, +            int termIndexDivisor = settings.getAsInt("index.term_index_divisor", RobinEngine.this.termIndexDivisor); // IndexReader#DEFAULT_TERMS_INDEX_DIVISOR, +, +            if (termIndexInterval != RobinEngine.this.termIndexInterval || termIndexDivisor != RobinEngine.this.termIndexDivisor) {, +                rwl.readLock().lock();, +                try {, +                    if (termIndexInterval != RobinEngine.this.termIndexInterval) {, +                        logger.info("updating term_index_interval from [{}] to [{}]", RobinEngine.this.termIndexInterval, termIndexInterval);, +                        RobinEngine.this.termIndexInterval = termIndexInterval;, +                    }, +                    if (termIndexDivisor != RobinEngine.this.termIndexDivisor) {, +                        logger.info("updating term_index_divisor from [{}] to [{}]", RobinEngine.this.termIndexDivisor, termIndexDivisor);, +                        RobinEngine.this.termIndexDivisor = termIndexDivisor;, +                    }, +                } finally {, +                    rwl.readLock().unlock();, +                }, +                // we need to do a full flush in order to have the new settings taken affect, +                flush(new Flush().full(true));, +            }, +        }, +    }, +, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        Engine engine = new RobinEngine(shardId, settings, new IndexSettingsService(shardId.index(), settings), store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.index.settings.IndexSettingsService;, +    private volatile int termIndexInterval;, +    private volatile int termIndexDivisor;, +    private final IndexSettingsService indexSettingsService;, +, +    private final ApplySettings applySettings = new ApplySettings();, +, +    @Inject public RobinEngine(ShardId shardId, @IndexSettings Settings indexSettings, IndexSettingsService indexSettingsService,, +                               Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog,, +        this.indexSettingsService = indexSettingsService;, +, +        this.indexSettingsService.addListener(applySettings);, +        indexSettingsService.removeListener(applySettings);, +    class ApplySettings implements IndexSettingsService.Listener {, +        @Override public void onRefreshSettings(Settings settings) {, +            int termIndexInterval = settings.getAsInt("index.term_index_interval", RobinEngine.this.termIndexInterval);, +            int termIndexDivisor = settings.getAsInt("index.term_index_divisor", RobinEngine.this.termIndexDivisor); // IndexReader#DEFAULT_TERMS_INDEX_DIVISOR, +, +            if (termIndexInterval != RobinEngine.this.termIndexInterval || termIndexDivisor != RobinEngine.this.termIndexDivisor) {, +                rwl.readLock().lock();, +                try {, +                    if (termIndexInterval != RobinEngine.this.termIndexInterval) {, +                        logger.info("updating term_index_interval from [{}] to [{}]", RobinEngine.this.termIndexInterval, termIndexInterval);, +                        RobinEngine.this.termIndexInterval = termIndexInterval;, +                    }, +                    if (termIndexDivisor != RobinEngine.this.termIndexDivisor) {, +                        logger.info("updating term_index_divisor from [{}] to [{}]", RobinEngine.this.termIndexDivisor, termIndexDivisor);, +                        RobinEngine.this.termIndexDivisor = termIndexDivisor;, +                    }, +                } finally {, +                    rwl.readLock().unlock();, +                }, +                // we need to do a full flush in order to have the new settings taken affect, +                flush(new Flush().full(true));, +            }, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/settings/IndexSettingsService.java, +        // this.settings include also the node settings, +        if (this.settings.getByPrefix("index.").getAsMap().equals(settings.getByPrefix("index.").getAsMap())) {, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        Engine engine = new RobinEngine(shardId, settings, new IndexSettingsService(shardId.index(), settings), store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.index.settings.IndexSettingsService;, +    private volatile int termIndexInterval;, +    private volatile int termIndexDivisor;, +    private final IndexSettingsService indexSettingsService;, +, +    private final ApplySettings applySettings = new ApplySettings();, +, +    @Inject public RobinEngine(ShardId shardId, @IndexSettings Settings indexSettings, IndexSettingsService indexSettingsService,, +                               Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog,, +        this.indexSettingsService = indexSettingsService;]