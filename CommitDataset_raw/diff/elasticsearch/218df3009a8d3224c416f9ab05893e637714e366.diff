[+++ b/docs/reference/docs/index_.asciidoc, +++ b/docs/reference/docs/index_.asciidoc, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +    public AbstractAsyncBulkByScrollAction(BulkByScrollTask task, boolean needsSourceDocumentVersions,, +                                           boolean needsSourceDocumentSeqNoAndPrimaryTerm, Logger logger, ParentTaskAssigningClient client,, +                                           ThreadPool threadPool, Request mainRequest, ScriptService scriptService,, +        final SearchSourceBuilder sourceBuilder = mainRequest.getSearchRequest().source();, +        List<SortBuilder<?>> sorts = sourceBuilder.sorts();, +            sourceBuilder.sort(fieldSort("_doc"));, +        sourceBuilder.version(needsSourceDocumentVersions);, +        sourceBuilder.seqNoAndPrimaryTerm(needsSourceDocumentSeqNoAndPrimaryTerm);, +++ b/docs/reference/docs/index_.asciidoc, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +    public AbstractAsyncBulkByScrollAction(BulkByScrollTask task, boolean needsSourceDocumentVersions,, +                                           boolean needsSourceDocumentSeqNoAndPrimaryTerm, Logger logger, ParentTaskAssigningClient client,, +                                           ThreadPool threadPool, Request mainRequest, ScriptService scriptService,, +        final SearchSourceBuilder sourceBuilder = mainRequest.getSearchRequest().source();, +        List<SortBuilder<?>> sorts = sourceBuilder.sorts();, +            sourceBuilder.sort(fieldSort("_doc"));, +        sourceBuilder.version(needsSourceDocumentVersions);, +        sourceBuilder.seqNoAndPrimaryTerm(needsSourceDocumentSeqNoAndPrimaryTerm);, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AsyncDeleteByQueryAction.java, +import org.elasticsearch.Version;, +    private final boolean useSeqNoForCAS;, +, +        super(task,, +            // not all nodes support sequence number powered optimistic concurrency control, we fall back to version, +            clusterState.nodes().getMinNodeVersion().onOrAfter(Version.V_6_7_0) == false,, +            // all nodes support sequence number powered optimistic concurrency control and we can use it, +            clusterState.nodes().getMinNodeVersion().onOrAfter(Version.V_6_7_0),, +            logger, client, threadPool, request, scriptService, listener);, +        useSeqNoForCAS = clusterState.nodes().getMinNodeVersion().onOrAfter(Version.V_6_7_0);, +        if (useSeqNoForCAS) {, +            delete.setIfSeqNo(doc.getSeqNo());, +            delete.setIfPrimaryTerm(doc.getPrimaryTerm());, +        } else {, +        }, +++ b/docs/reference/docs/index_.asciidoc, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +    public AbstractAsyncBulkByScrollAction(BulkByScrollTask task, boolean needsSourceDocumentVersions,, +                                           boolean needsSourceDocumentSeqNoAndPrimaryTerm, Logger logger, ParentTaskAssigningClient client,, +                                           ThreadPool threadPool, Request mainRequest, ScriptService scriptService,, +        final SearchSourceBuilder sourceBuilder = mainRequest.getSearchRequest().source();, +        List<SortBuilder<?>> sorts = sourceBuilder.sorts();, +            sourceBuilder.sort(fieldSort("_doc"));, +        sourceBuilder.version(needsSourceDocumentVersions);, +        sourceBuilder.seqNoAndPrimaryTerm(needsSourceDocumentSeqNoAndPrimaryTerm);, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AsyncDeleteByQueryAction.java, +import org.elasticsearch.Version;, +    private final boolean useSeqNoForCAS;, +, +        super(task,, +            // not all nodes support sequence number powered optimistic concurrency control, we fall back to version, +            clusterState.nodes().getMinNodeVersion().onOrAfter(Version.V_6_7_0) == false,, +            // all nodes support sequence number powered optimistic concurrency control and we can use it, +            clusterState.nodes().getMinNodeVersion().onOrAfter(Version.V_6_7_0),, +            logger, client, threadPool, request, scriptService, listener);, +        useSeqNoForCAS = clusterState.nodes().getMinNodeVersion().onOrAfter(Version.V_6_7_0);, +        if (useSeqNoForCAS) {, +            delete.setIfSeqNo(doc.getSeqNo());, +            delete.setIfPrimaryTerm(doc.getPrimaryTerm());, +        } else {, +        }, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportReindexAction.java, +            super(task,, +                request.getDestination().versionType() != VersionType.INTERNAL,, +                false, logger, client, threadPool, request, scriptService, listener);, +++ b/docs/reference/docs/index_.asciidoc, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +    public AbstractAsyncBulkByScrollAction(BulkByScrollTask task, boolean needsSourceDocumentVersions,, +                                           boolean needsSourceDocumentSeqNoAndPrimaryTerm, Logger logger, ParentTaskAssigningClient client,, +                                           ThreadPool threadPool, Request mainRequest, ScriptService scriptService,, +        final SearchSourceBuilder sourceBuilder = mainRequest.getSearchRequest().source();, +        List<SortBuilder<?>> sorts = sourceBuilder.sorts();, +            sourceBuilder.sort(fieldSort("_doc"));, +        sourceBuilder.version(needsSourceDocumentVersions);, +        sourceBuilder.seqNoAndPrimaryTerm(needsSourceDocumentSeqNoAndPrimaryTerm);, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AsyncDeleteByQueryAction.java, +import org.elasticsearch.Version;, +    private final boolean useSeqNoForCAS;, +, +        super(task,, +            // not all nodes support sequence number powered optimistic concurrency control, we fall back to version, +            clusterState.nodes().getMinNodeVersion().onOrAfter(Version.V_6_7_0) == false,, +            // all nodes support sequence number powered optimistic concurrency control and we can use it, +            clusterState.nodes().getMinNodeVersion().onOrAfter(Version.V_6_7_0),, +            logger, client, threadPool, request, scriptService, listener);, +        useSeqNoForCAS = clusterState.nodes().getMinNodeVersion().onOrAfter(Version.V_6_7_0);, +        if (useSeqNoForCAS) {, +            delete.setIfSeqNo(doc.getSeqNo());, +            delete.setIfPrimaryTerm(doc.getPrimaryTerm());, +        } else {, +        }, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportReindexAction.java, +            super(task,, +                request.getDestination().versionType() != VersionType.INTERNAL,]