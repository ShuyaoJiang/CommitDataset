[+++ b/build.gradle, +  // For reasons we don't fully understand yet, external dependencies are not picked up by Ant's optional tasks., +  // But you can easily do it in another way., +  // Only if your buildscript and Ant's optional task need the same library would you have to define it twice., +  // https://docs.gradle.org/current/userguide/organizing_build_logic.html, +  configurations {, +    forbiddenApis, +  }, +  dependencies {, +    forbiddenApis 'de.thetaphi:forbiddenapis:2.0', +  }, +++ b/build.gradle, +  // For reasons we don't fully understand yet, external dependencies are not picked up by Ant's optional tasks., +  // But you can easily do it in another way., +  // Only if your buildscript and Ant's optional task need the same library would you have to define it twice., +  // https://docs.gradle.org/current/userguide/organizing_build_logic.html, +  configurations {, +    forbiddenApis, +  }, +  dependencies {, +    forbiddenApis 'de.thetaphi:forbiddenapis:2.0', +  }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            project.tasks.create('jarHell', JarHellTask.class),, +            project.tasks.create('thirdPartyAudit', ThirdPartyAuditTask.class)], +++ b/build.gradle, +  // For reasons we don't fully understand yet, external dependencies are not picked up by Ant's optional tasks., +  // But you can easily do it in another way., +  // Only if your buildscript and Ant's optional task need the same library would you have to define it twice., +  // https://docs.gradle.org/current/userguide/organizing_build_logic.html, +  configurations {, +    forbiddenApis, +  }, +  dependencies {, +    forbiddenApis 'de.thetaphi:forbiddenapis:2.0', +  }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            project.tasks.create('jarHell', JarHellTask.class),, +            project.tasks.create('thirdPartyAudit', ThirdPartyAuditTask.class)], +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.gradle.precommit, +, +import org.gradle.api.DefaultTask, +import org.gradle.api.artifacts.UnknownConfigurationException, +import org.gradle.api.file.FileCollection, +import org.gradle.api.tasks.TaskAction, +, +import org.apache.tools.ant.BuildLogger, +import org.apache.tools.ant.Project, +, +import org.slf4j.Logger, +import org.slf4j.LoggerFactory, +, +/**, + * Basic static checking to keep tabs on third party JARs, + */, +public class ThirdPartyAuditTask extends DefaultTask {, +, +    // true to be lenient about MISSING CLASSES, +    private boolean lenient;, +    , +    // patterns for classes to exclude, because we understand their issues, +    private String[] excludes = new String[0];, +    , +    ThirdPartyAuditTask() {, +        dependsOn(project.configurations.testCompile), +        description = "Checks third party JAR bytecode for missing classes, use of internal APIs, and other horrors'", +    }, +, +    /** , +     * Set to true to be lenient with dependencies. By default this check will fail if it finds, +     * MISSING CLASSES. This means the set of jars is incomplete. However, in some cases, +     * this can be due to intentional exclusions that are well-tested and understood., +     */      , +    public void setLenient(boolean value) {, +        lenient = value;, +    }, +    , +    /**, +     * Returns true if leniency about missing classes is enabled., +     */, +    public boolean isLenient() {]