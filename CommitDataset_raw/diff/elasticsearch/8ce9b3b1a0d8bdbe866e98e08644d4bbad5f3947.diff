[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/strategy/DefaultShardsRoutingStrategy.java, +                if (routingNode != null) {, +            }, +            if (currentRoutingNode == null) {, +                // already failed (might be called several times for the same shard), +                continue;, +            }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/strategy/DefaultShardsRoutingStrategy.java, +                if (routingNode != null) {, +            }, +            if (currentRoutingNode == null) {, +                // already failed (might be called several times for the same shard), +                continue;, +            }, +, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/cluster/routing/strategy/FailedShardsRoutingTests.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.routing.strategy;, +, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.routing.MutableShardRouting;, +import org.elasticsearch.cluster.routing.RoutingNodes;, +import org.elasticsearch.cluster.routing.RoutingTable;, +import org.elasticsearch.util.logging.Loggers;, +import org.elasticsearch.util.transport.DummyTransportAddress;, +import org.slf4j.Logger;, +import org.testng.annotations.Test;, +, +import java.util.List;, +, +import static org.elasticsearch.cluster.ClusterState.*;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.*;, +import static org.elasticsearch.cluster.metadata.MetaData.*;, +import static org.elasticsearch.cluster.node.DiscoveryNodes.*;, +import static org.elasticsearch.cluster.routing.RoutingBuilders.*;, +import static org.elasticsearch.cluster.routing.ShardRoutingState.*;, +import static org.hamcrest.MatcherAssert.*;, +import static org.hamcrest.Matchers.*;, +, +/**, + * @author kimchy (shay.banon), + */, +@Test, +public class FailedShardsRoutingTests {, +, +    private final Logger logger = Loggers.getLogger(FailedShardsRoutingTests.class);, +, +    @Test public void testFailures() {, +        DefaultShardsRoutingStrategy strategy = new DefaultShardsRoutingStrategy();, +, +        logger.info("Building initial routing table");, +, +        MetaData metaData = newMetaDataBuilder(), +                .put(newIndexMetaDataBuilder("test").numberOfShards(3).numberOfReplicas(1)), +                .build();, +, +        RoutingTable routingTable = routingTable(), +                .add(indexRoutingTable("test").initializeEmpty(metaData.index("test"))), +                .build();, +, +        ClusterState clusterState = newClusterStateBuilder().metaData(metaData).routingTable(routingTable).build();, +, +        logger.info("Adding two nodes and performing rerouting");, +        clusterState = newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().put(newNode("node1")).put(newNode("node2"))).build();, +        RoutingTable prevRoutingTable = routingTable;, +        routingTable = strategy.reroute(clusterState);, +        clusterState = newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();, +, +        logger.info("Start the primary shard (on node1)");, +        RoutingNodes routingNodes = routingTable.routingNodes(clusterState.metaData());, +        prevRoutingTable = routingTable;, +        routingTable = strategy.applyStartedShards(clusterState, routingNodes.node("node1").shardsWithState(INITIALIZING));, +        clusterState = newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();, +, +        logger.info("Start the backup shard (on node2)");, +        routingNodes = routingTable.routingNodes(clusterState.metaData());, +        prevRoutingTable = routingTable;, +        routingTable = strategy.applyStartedShards(clusterState, routingNodes.node("node2").shardsWithState(INITIALIZING));, +        clusterState = newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();]