[+++ b/core/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryController.java, +    /**, +     * ask this shard to check now whether it is inactive, and reduces its indexing and translog buffers if so., +     * return false if the shard is not idle, otherwise true, +     */, +    protected boolean checkIdle(IndexShard shard) {, +            boolean idle = shard.checkIdle();, +            if (idle && logger.isDebugEnabled()) {, +            return idle;, +        } catch (EngineClosedException | FlushNotAllowedEngineException e) {, +            logger.trace("ignore [{}] while marking shard {} as inactive", e.getClass().getSimpleName(), shard.shardId());, +            return true;, +++ b/core/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryController.java, +    /**, +     * ask this shard to check now whether it is inactive, and reduces its indexing and translog buffers if so., +     * return false if the shard is not idle, otherwise true, +     */, +    protected boolean checkIdle(IndexShard shard) {, +            boolean idle = shard.checkIdle();, +            if (idle && logger.isDebugEnabled()) {, +            return idle;, +        } catch (EngineClosedException | FlushNotAllowedEngineException e) {, +            logger.trace("ignore [{}] while marking shard {} as inactive", e.getClass().getSimpleName(), shard.shardId());, +            return true;, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // needed by lucene SPI currently , +  permission java.lang.RuntimePermission "getClassLoader";, +, +++ b/core/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryController.java, +    /**, +     * ask this shard to check now whether it is inactive, and reduces its indexing and translog buffers if so., +     * return false if the shard is not idle, otherwise true, +     */, +    protected boolean checkIdle(IndexShard shard) {, +            boolean idle = shard.checkIdle();, +            if (idle && logger.isDebugEnabled()) {, +            return idle;, +        } catch (EngineClosedException | FlushNotAllowedEngineException e) {, +            logger.trace("ignore [{}] while marking shard {} as inactive", e.getClass().getSimpleName(), shard.shardId());, +            return true;, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // needed by lucene SPI currently , +  permission java.lang.RuntimePermission "getClassLoader";, +, +++ b/core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java, +        protected boolean checkIdle(IndexShard shard) {, +                return true;, +++ b/core/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryController.java, +    /**, +     * ask this shard to check now whether it is inactive, and reduces its indexing and translog buffers if so., +     * return false if the shard is not idle, otherwise true, +     */, +    protected boolean checkIdle(IndexShard shard) {, +            boolean idle = shard.checkIdle();, +            if (idle && logger.isDebugEnabled()) {, +            return idle;, +        } catch (EngineClosedException | FlushNotAllowedEngineException e) {, +            logger.trace("ignore [{}] while marking shard {} as inactive", e.getClass().getSimpleName(), shard.shardId());, +            return true;, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // needed by lucene SPI currently , +  permission java.lang.RuntimePermission "getClassLoader";, +, +++ b/core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java, +        protected boolean checkIdle(IndexShard shard) {, +                return true;, +++ b/modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionPlugin.java, +++ b/core/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryController.java, +    /**, +     * ask this shard to check now whether it is inactive, and reduces its indexing and translog buffers if so., +     * return false if the shard is not idle, otherwise true, +     */, +    protected boolean checkIdle(IndexShard shard) {, +            boolean idle = shard.checkIdle();, +            if (idle && logger.isDebugEnabled()) {, +            return idle;, +        } catch (EngineClosedException | FlushNotAllowedEngineException e) {, +            logger.trace("ignore [{}] while marking shard {} as inactive", e.getClass().getSimpleName(), shard.shardId());, +            return true;, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // needed by lucene SPI currently , +  permission java.lang.RuntimePermission "getClassLoader";, +, +++ b/core/src/test/java/org/elasticsearch/indices/memory/IndexingMemoryControllerTests.java, +        protected boolean checkIdle(IndexShard shard) {, +                return true;, +++ b/modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionPlugin.java, +++ b/modules/lang-expression/src/main/plugin-metadata/plugin-security.policy, +++ b/core/src/main/java/org/elasticsearch/indices/memory/IndexingMemoryController.java, +    /**, +     * ask this shard to check now whether it is inactive, and reduces its indexing and translog buffers if so., +     * return false if the shard is not idle, otherwise true, +     */, +    protected boolean checkIdle(IndexShard shard) {, +            boolean idle = shard.checkIdle();, +            if (idle && logger.isDebugEnabled()) {, +            return idle;, +        } catch (EngineClosedException | FlushNotAllowedEngineException e) {, +            logger.trace("ignore [{}] while marking shard {} as inactive", e.getClass().getSimpleName(), shard.shardId());, +            return true;]