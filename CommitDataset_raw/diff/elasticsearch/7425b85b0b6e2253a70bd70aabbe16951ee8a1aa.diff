[+++ b/src/test/java/org/apache/lucene/analysis/miscellaneous/UniqueTokenFilterTests.java, +import org.elasticsearch.ElasticsearchTestCase;, +++ b/src/test/java/org/apache/lucene/analysis/miscellaneous/UniqueTokenFilterTests.java, +import org.elasticsearch.ElasticsearchTestCase;, +++ b/src/test/java/org/elasticsearch/AbstractNodesTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch;, +, +import com.google.common.collect.ImmutableSet;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.common.network.NetworkUtils;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.indices.IndexMissingException;, +import org.elasticsearch.node.Node;, +import org.junit.AfterClass;, +import org.junit.Before;, +import org.junit.BeforeClass;, +import org.junit.Ignore;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +, +import static com.google.common.collect.Maps.newHashMap;, +import static org.elasticsearch.common.settings.ImmutableSettings.Builder.EMPTY_SETTINGS;, +import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;, +import static org.elasticsearch.node.NodeBuilder.nodeBuilder;, +, +@Ignore, +public abstract class AbstractNodesTests extends ElasticsearchTestCase {, +    private static Map<String, Node> nodes = newHashMap();, +, +    private static Map<String, Client> clients = newHashMap();, +    , +    private static final Settings defaultSettings = ImmutableSettings, +            .settingsBuilder(), +            .put("cluster.name", "test-cluster-" + NetworkUtils.getLocalAddress().getHostName() + "CHILD_VM=[" + CHILD_VM_ID +"]"), +            .build();, +, +, +    public Node startNode(String id) {, +        return buildNode(id).start();, +    }, +, +    public Node startNode(String id, Settings.Builder settings) {, +        return startNode(id, settings.build());, +    }, +, +    public Node startNode(String id, Settings settings) {, +        return buildNode(id, settings).start();, +    }, +, +    public Node buildNode(String id) {, +        return buildNode(id, EMPTY_SETTINGS);, +    }, +, +    public Node buildNode(String id, Settings.Builder settings) {, +        return buildNode(id, settings.build());, +    }, +, +    public Node buildNode(String id, Settings settings) {, +        synchronized (AbstractNodesTests.class) {, +            if (nodes.containsKey(id)) {, +                throw new IllegalArgumentException("Node with id ["+ id + "] already exists");, +            }, +            assert !nodes.containsKey(id);, +            assert !clients.containsKey(id);, +                , +            String settingsSource = getClass().getName().replace('.', '/') + ".yml";, +            Settings finalSettings = settingsBuilder(), +                    .loadFromClasspath(settingsSource), +                    .put(defaultSettings), +                    .put(getClassDefaultSettings()), +                    .put(settings), +                    .put("name", id), +                    .put("discovery.id.seed", randomLong()), +                    .build();, +            ]