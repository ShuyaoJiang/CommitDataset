[+++ b/src/main/java/org/elasticsearch/http/HttpServerModule.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.http.netty.NettyHttpServerTransport;, +import org.elasticsearch.plugins.Plugin;, +, +import static org.elasticsearch.common.Preconditions.checkNotNull;, +public class HttpServerModule extends AbstractModule {, +    private final ESLogger logger;, +, +    private Class<? extends HttpServerTransport> configuredHttpServerTransport;, +    private String configuredHttpServerTransportSource;, +        this.logger = Loggers.getLogger(getClass(), settings);, +        if (configuredHttpServerTransport != null) {, +            logger.info("Using [{}] as http transport, overridden by [{}]", configuredHttpServerTransport.getName(), configuredHttpServerTransportSource);, +            bind(HttpServerTransport.class).to(configuredHttpServerTransport).asEagerSingleton();, +        } else {, +            Class<? extends HttpServerTransport> defaultHttpServerTransport = NettyHttpServerTransport.class;, +            Class<? extends HttpServerTransport> httpServerTransport = settings.getAsClass("http.type", defaultHttpServerTransport, "org.elasticsearch.http.", "HttpServerTransport");, +            bind(HttpServerTransport.class).to(httpServerTransport).asEagerSingleton();, +        }, +, +, +    public void setHttpServerTransport(Class<? extends HttpServerTransport> httpServerTransport, String source) {, +        checkNotNull(httpServerTransport, "Configured http server transport may not be null");, +        checkNotNull(source, "Plugin, that changes transport may not be null");, +        this.configuredHttpServerTransport = httpServerTransport;, +        this.configuredHttpServerTransportSource = source;, +    }, +++ b/src/main/java/org/elasticsearch/http/HttpServerModule.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.http.netty.NettyHttpServerTransport;, +import org.elasticsearch.plugins.Plugin;, +, +import static org.elasticsearch.common.Preconditions.checkNotNull;, +public class HttpServerModule extends AbstractModule {, +    private final ESLogger logger;, +, +    private Class<? extends HttpServerTransport> configuredHttpServerTransport;, +    private String configuredHttpServerTransportSource;, +        this.logger = Loggers.getLogger(getClass(), settings);, +        if (configuredHttpServerTransport != null) {, +            logger.info("Using [{}] as http transport, overridden by [{}]", configuredHttpServerTransport.getName(), configuredHttpServerTransportSource);, +            bind(HttpServerTransport.class).to(configuredHttpServerTransport).asEagerSingleton();, +        } else {, +            Class<? extends HttpServerTransport> defaultHttpServerTransport = NettyHttpServerTransport.class;, +            Class<? extends HttpServerTransport> httpServerTransport = settings.getAsClass("http.type", defaultHttpServerTransport, "org.elasticsearch.http.", "HttpServerTransport");, +            bind(HttpServerTransport.class).to(httpServerTransport).asEagerSingleton();, +        }, +, +, +    public void setHttpServerTransport(Class<? extends HttpServerTransport> httpServerTransport, String source) {, +        checkNotNull(httpServerTransport, "Configured http server transport may not be null");, +        checkNotNull(source, "Plugin, that changes transport may not be null");, +        this.configuredHttpServerTransport = httpServerTransport;, +        this.configuredHttpServerTransportSource = source;, +    }, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/http/HttpServerModule.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.http.netty.NettyHttpServerTransport;, +import org.elasticsearch.plugins.Plugin;, +, +import static org.elasticsearch.common.Preconditions.checkNotNull;, +public class HttpServerModule extends AbstractModule {, +    private final ESLogger logger;, +, +    private Class<? extends HttpServerTransport> configuredHttpServerTransport;, +    private String configuredHttpServerTransportSource;, +        this.logger = Loggers.getLogger(getClass(), settings);, +        if (configuredHttpServerTransport != null) {, +            logger.info("Using [{}] as http transport, overridden by [{}]", configuredHttpServerTransport.getName(), configuredHttpServerTransportSource);, +            bind(HttpServerTransport.class).to(configuredHttpServerTransport).asEagerSingleton();, +        } else {, +            Class<? extends HttpServerTransport> defaultHttpServerTransport = NettyHttpServerTransport.class;, +            Class<? extends HttpServerTransport> httpServerTransport = settings.getAsClass("http.type", defaultHttpServerTransport, "org.elasticsearch.http.", "HttpServerTransport");, +            bind(HttpServerTransport.class).to(httpServerTransport).asEagerSingleton();, +        }, +, +, +    public void setHttpServerTransport(Class<? extends HttpServerTransport> httpServerTransport, String source) {, +        checkNotNull(httpServerTransport, "Configured http server transport may not be null");, +        checkNotNull(source, "Plugin, that changes transport may not be null");, +        this.configuredHttpServerTransport = httpServerTransport;, +        this.configuredHttpServerTransportSource = source;, +    }, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/transport/TransportModule.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.transport.local.LocalTransport;, +import org.elasticsearch.transport.netty.NettyTransport;, +, +import static org.elasticsearch.common.Preconditions.checkNotNull;, +public class TransportModule extends AbstractModule {, +    private final ESLogger logger;, +    private final Settings settings;]