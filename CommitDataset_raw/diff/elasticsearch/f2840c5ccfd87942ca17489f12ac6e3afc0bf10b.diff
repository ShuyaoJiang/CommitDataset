[+++ b/dev-tools/build_release.py, +import fnmatch, +# Verifies the java version. We guarantee that we run with Java 1.6, +# If 1.6 is not available fail the build!, +# Returns the hash of the current git HEAD revision, +# Returns the name of the current branch, +# Utility that returns the name of the release branch for a given version, +def release_branch(version):, +  return 'release_branch_%s' % version, +# Creates a new release branch from the given source branch, +# and rebases the source branch from the remote before creating, +# the release branch. Note: This fails if the source branch, +# doesn't exist on the provided remote., +  run('git checkout %s' % src_branch), +# Reads the given file and applies the, +# callback to it. If the callback changed, +# a line the given file is replaced with, +# the modified input., +  modified = False, +        new_line = line_callback(line), +        modified = modified or (new_line != line), +        new_file.write(new_line), +  if modified:, +    return True, +  else:, +    # nothing to do - just remove the tmp file, +    os.remove(abs_path), +    return False, +# Walks the given directory path (defaults to 'docs'), +# and replaces all 'coming[$version]' tags with, +# 'added[$version]'. This method only accesses asciidoc files., +def update_reference_docs(release_version, path='docs'):, +  pattern = 'coming[%s' % (release_version), +  replacement = 'added[%s' % (release_version), +  pending_files = [], +  def callback(line):, +    return line.replace(pattern, replacement), +  for root, _, file_names in os.walk(path):, +    for file_name in fnmatch.filter(file_names, '*.asciidoc'):, +      full_path = os.path.join(root, file_name), +      if process_file(full_path, callback):, +        pending_files.append(os.path.join(root, file_name)), +  return pending_files, +# Moves the pom.xml file from a snapshot to a release, +# Moves the Version.java file from a snapshot to a release, +# Stages the given files for the next git commit, +# Executes a git commit with 'release [version]' as the commit message, +, +      log('Waiting until node becomes available for 1 second'), +      log('Check if node is available'), +    except Exception as e:, +      log("Failed while waiting for node - Exception: [%s]" % (e.message)), +      #that is ok it might not be there yet, +# Checks the pom.xml for the release version., +# This method fails if the pom file has no SNAPSHOT version set ie., +# if the version is already on a release version we fail., +# Returns the next version string ie. 0.90.7, +  run('git checkout %s' % src_branch), +    raise RuntimeError('Could not find release version in branch %s' % src_branch), +# Generates sha1 checsums for all files, +# and returns the checksum files as well, +# as the given files in a list, +    pending_files = [POM_FILE, VERSION_FILE], +    pending_files = pending_files + update_reference_docs(release_version), +    add_pending_files(*pending_files) # expects var args use * to expand, +    print('  Committed release version [%s]' % release_version)]