[+++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +                return this;, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +                return this;, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/JvmStats.java, +    private final static ClassLoadingMXBean classLoadingMXBean;, +        classLoadingMXBean = ManagementFactory.getClassLoadingMXBean();, +        stats.classes = new Classes();, +        stats.classes.loadedClassCount = classLoadingMXBean.getLoadedClassCount();, +        stats.classes.totalLoadedClassCount = classLoadingMXBean.getTotalLoadedClassCount();, +        stats.classes.unloadedClassCount = classLoadingMXBean.getUnloadedClassCount();, +, +    Classes classes;, +    public List<BufferPool> getBufferPools() {, +        return bufferPools;, +    }, +, +    public Classes getClasses() {, +        return classes;, +    }, +, +        if (classes != null) {, +            builder.startObject(Fields.CLASSES);, +            builder.field(Fields.CURRENT_LOADED_COUNT, classes.getLoadedClassCount());, +            builder.field(Fields.TOTAL_LOADED_COUNT, classes.getTotalLoadedClassCount());, +            builder.field(Fields.TOTAL_UNLOADED_COUNT, classes.getUnloadedClassCount());, +            builder.endObject();, +        }, +, +, +        static final XContentBuilderString CLASSES = new XContentBuilderString("classes");, +        static final XContentBuilderString CURRENT_LOADED_COUNT = new XContentBuilderString("current_loaded_count");, +        static final XContentBuilderString TOTAL_LOADED_COUNT = new XContentBuilderString("total_loaded_count");, +        static final XContentBuilderString TOTAL_UNLOADED_COUNT = new XContentBuilderString("total_unloaded_count");, +, +    public static class Classes implements Streamable {, +, +        long loadedClassCount;, +        long totalLoadedClassCount;, +        long unloadedClassCount;, +, +        Classes() {, +        }, +, +        public Classes(long loadedClassCount, long totalLoadedClassCount, long unloadedClassCount) {, +            this.loadedClassCount = loadedClassCount;, +            this.totalLoadedClassCount = totalLoadedClassCount;, +            this.unloadedClassCount = unloadedClassCount;, +        }, +, +        public long getLoadedClassCount() {, +            return loadedClassCount;, +        }, +, +        public long getTotalLoadedClassCount() {, +            return totalLoadedClassCount;, +        }, +, +        public long getUnloadedClassCount() {, +            return unloadedClassCount;, +        }, +, +        @Override, +        public void readFrom(StreamInput in) throws IOException {, +            loadedClassCount = in.readLong();, +            totalLoadedClassCount = in.readLong();, +            unloadedClassCount = in.readLong();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeLong(loadedClassCount);, +            out.writeLong(totalLoadedClassCount);, +            out.writeLong(unloadedClassCount);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +                return this;, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/JvmStats.java, +    private final static ClassLoadingMXBean classLoadingMXBean;, +        classLoadingMXBean = ManagementFactory.getClassLoadingMXBean();, +        stats.classes = new Classes();, +        stats.classes.loadedClassCount = classLoadingMXBean.getLoadedClassCount();, +        stats.classes.totalLoadedClassCount = classLoadingMXBean.getTotalLoadedClassCount();, +        stats.classes.unloadedClassCount = classLoadingMXBean.getUnloadedClassCount();, +, +    Classes classes;, +    public List<BufferPool> getBufferPools() {, +        return bufferPools;, +    }, +, +    public Classes getClasses() {, +        return classes;, +    }, +, +        if (classes != null) {, +            builder.startObject(Fields.CLASSES);, +            builder.field(Fields.CURRENT_LOADED_COUNT, classes.getLoadedClassCount());, +            builder.field(Fields.TOTAL_LOADED_COUNT, classes.getTotalLoadedClassCount());, +            builder.field(Fields.TOTAL_UNLOADED_COUNT, classes.getUnloadedClassCount());]