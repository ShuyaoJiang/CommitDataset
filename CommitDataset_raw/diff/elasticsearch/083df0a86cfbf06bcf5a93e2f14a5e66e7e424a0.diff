[+++ b/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +        TMap<Term, TermStatistics> termStatistics = new ExtTHashMap<Term, TermStatistics>(Constants.DEFAULT_CAPACITY, Constants.DEFAULT_LOAD_FACTOR);, +        TMap<String, CollectionStatistics> fieldStatistics = new ExtTHashMap<String, CollectionStatistics>(Constants.DEFAULT_CAPACITY, Constants.DEFAULT_LOAD_FACTOR);, +                TermStatistics existing = termStatistics.get(result.terms()[i]);, +                    termStatistics.put(result.terms()[i], new TermStatistics(existing.term(), existing.docFreq() + result.termStatistics()[i].docFreq(), existing.totalTermFreq() + result.termStatistics()[i].totalTermFreq()));, +                    termStatistics.put(result.terms()[i], result.termStatistics()[i]);, +            for (Map.Entry<String, CollectionStatistics> entry : result.fieldStatistics().entrySet()) {, +                CollectionStatistics existing = fieldStatistics.get(entry.getKey());, +                if (existing != null) {, +                    CollectionStatistics merged = new CollectionStatistics(, +                            entry.getKey(), existing.maxDoc() + entry.getValue().maxDoc(),, +                            existing.docCount() + entry.getValue().docCount(),, +                            existing.sumTotalTermFreq() + entry.getValue().sumTotalTermFreq(),, +                            existing.sumDocFreq() + entry.getValue().sumDocFreq(), +                    );, +                    fieldStatistics.put(entry.getKey(), merged);, +                } else {, +                    fieldStatistics.put(entry.getKey(), entry.getValue());, +                }, +            }, +        return new AggregatedDfs(termStatistics, fieldStatistics, aggMaxDoc);, +++ b/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +        TMap<Term, TermStatistics> termStatistics = new ExtTHashMap<Term, TermStatistics>(Constants.DEFAULT_CAPACITY, Constants.DEFAULT_LOAD_FACTOR);, +        TMap<String, CollectionStatistics> fieldStatistics = new ExtTHashMap<String, CollectionStatistics>(Constants.DEFAULT_CAPACITY, Constants.DEFAULT_LOAD_FACTOR);, +                TermStatistics existing = termStatistics.get(result.terms()[i]);, +                    termStatistics.put(result.terms()[i], new TermStatistics(existing.term(), existing.docFreq() + result.termStatistics()[i].docFreq(), existing.totalTermFreq() + result.termStatistics()[i].totalTermFreq()));, +                    termStatistics.put(result.terms()[i], result.termStatistics()[i]);, +            for (Map.Entry<String, CollectionStatistics> entry : result.fieldStatistics().entrySet()) {, +                CollectionStatistics existing = fieldStatistics.get(entry.getKey());, +                if (existing != null) {, +                    CollectionStatistics merged = new CollectionStatistics(, +                            entry.getKey(), existing.maxDoc() + entry.getValue().maxDoc(),, +                            existing.docCount() + entry.getValue().docCount(),, +                            existing.sumTotalTermFreq() + entry.getValue().sumTotalTermFreq(),, +                            existing.sumDocFreq() + entry.getValue().sumDocFreq(), +                    );, +                    fieldStatistics.put(entry.getKey(), merged);, +                } else {, +                    fieldStatistics.put(entry.getKey(), entry.getValue());, +                }, +            }, +        return new AggregatedDfs(termStatistics, fieldStatistics, aggMaxDoc);, +++ b/src/main/java/org/elasticsearch/search/dfs/AggregatedDfs.java, +import org.apache.lucene.search.CollectionStatistics;, +    private TMap<Term, TermStatistics> termStatistics;, +    private TMap<String, CollectionStatistics> fieldStatistics;, +    public AggregatedDfs(TMap<Term, TermStatistics> termStatistics, TMap<String, CollectionStatistics> fieldStatistics, long maxDoc) {, +        this.termStatistics = termStatistics;, +        this.fieldStatistics = fieldStatistics;, +    public TMap<Term, TermStatistics> termStatistics() {, +        return termStatistics;, +    }, +, +    public TMap<String, CollectionStatistics> fieldStatistics() {, +        return fieldStatistics;, +        termStatistics = new ExtTHashMap<Term, TermStatistics>(size, Constants.DEFAULT_LOAD_FACTOR);, +            termStatistics.put(term, stats);, +        }, +        size = in.readVInt();, +        fieldStatistics = new ExtTHashMap<String, CollectionStatistics>(size, Constants.DEFAULT_LOAD_FACTOR);, +        for (int i = 0; i < size; i++) {, +            String field = in.readString();, +            CollectionStatistics stats = new CollectionStatistics(field, in.readVLong(), in.readVLong(), in.readVLong(), in.readVLong());, +            fieldStatistics.put(field, stats);, +        out.writeVInt(termStatistics.size());, +        for (Map.Entry<Term, TermStatistics> termTermStatisticsEntry : termStatistics.entrySet()) {, +        out.writeVInt(fieldStatistics.size());, +        for (Map.Entry<String, CollectionStatistics> entry : fieldStatistics.entrySet()) {, +            out.writeString(entry.getKey());, +            out.writeVLong(entry.getValue().maxDoc());, +            out.writeVLong(entry.getValue().docCount());, +            out.writeVLong(entry.getValue().sumTotalTermFreq());, +            out.writeVLong(entry.getValue().sumDocFreq());, +        }, +, +++ b/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +        TMap<Term, TermStatistics> termStatistics = new ExtTHashMap<Term, TermStatistics>(Constants.DEFAULT_CAPACITY, Constants.DEFAULT_LOAD_FACTOR);, +        TMap<String, CollectionStatistics> fieldStatistics = new ExtTHashMap<String, CollectionStatistics>(Constants.DEFAULT_CAPACITY, Constants.DEFAULT_LOAD_FACTOR);, +                TermStatistics existing = termStatistics.get(result.terms()[i]);, +                    termStatistics.put(result.terms()[i], new TermStatistics(existing.term(), existing.docFreq() + result.termStatistics()[i].docFreq(), existing.totalTermFreq() + result.termStatistics()[i].totalTermFreq()));, +                    termStatistics.put(result.terms()[i], result.termStatistics()[i]);, +            for (Map.Entry<String, CollectionStatistics> entry : result.fieldStatistics().entrySet()) {, +                CollectionStatistics existing = fieldStatistics.get(entry.getKey());, +                if (existing != null) {, +                    CollectionStatistics merged = new CollectionStatistics(, +                            entry.getKey(), existing.maxDoc() + entry.getValue().maxDoc(),, +                            existing.docCount() + entry.getValue().docCount(),, +                            existing.sumTotalTermFreq() + entry.getValue().sumTotalTermFreq(),, +                            existing.sumDocFreq() + entry.getValue().sumDocFreq(), +                    );, +                    fieldStatistics.put(entry.getKey(), merged);, +                } else {, +                    fieldStatistics.put(entry.getKey(), entry.getValue());, +                }, +            }, +        return new AggregatedDfs(termStatistics, fieldStatistics, aggMaxDoc);, +++ b/src/main/java/org/elasticsearch/search/dfs/AggregatedDfs.java, +import org.apache.lucene.search.CollectionStatistics;, +    private TMap<Term, TermStatistics> termStatistics;, +    private TMap<String, CollectionStatistics> fieldStatistics;]