[+++ b/core/pom.xml, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) {, +        String stage = "Settings";, +, +        Settings settings = null;, +        Environment environment = null;, +        try {, +            settings = tuple.v1();, +            environment = tuple.v2();, +                stage = "Pid";, +            stage = "Logging";, +        } catch (Exception e) {, +            String errorMessage = buildErrorMessage(stage, e);, +            sysError(errorMessage, true);, +            System.exit(3);, +        }, +        stage = "Initialization";, +            stage = "Startup";, +            String errorMessage = buildErrorMessage(stage, e);, +            if (foreground) {, +                sysError(errorMessage, true);, +                Loggers.disableConsoleLogging();, +            }, +            System.exit(3);, +, +    private static String buildErrorMessage(String stage, Throwable e) {, +        StringBuilder errorMessage = new StringBuilder("{").append(Version.CURRENT).append("}: ");, +        errorMessage.append(stage).append(" Failed ...\n");, +        if (e instanceof CreationException) {, +            CreationException createException = (CreationException) e;, +            Set<String> seenMessages = newHashSet();, +            int counter = 1;, +            for (Message message : createException.getErrorMessages()) {, +                String detailedMessage;, +                if (message.getCause() == null) {, +                    detailedMessage = message.getMessage();, +                } else {, +                    detailedMessage = ExceptionsHelper.detailedMessage(message.getCause(), true, 0);, +                }, +                if (detailedMessage == null) {, +                    detailedMessage = message.getMessage();, +                }, +                if (seenMessages.contains(detailedMessage)) {, +                    continue;, +                }, +                seenMessages.add(detailedMessage);, +                errorMessage.append("").append(counter++).append(") ").append(detailedMessage);, +            }, +        } else {, +            errorMessage.append("- ").append(ExceptionsHelper.detailedMessage(e, true, 0));, +        }, +        if (Loggers.getLogger(Bootstrap.class).isDebugEnabled()) {, +            errorMessage.append("\n").append(ExceptionsHelper.stackTrace(e));, +        }, +        return errorMessage.toString();, +    }, +    , +, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) {, +        String stage = "Settings";, +, +        Settings settings = null;, +        Environment environment = null;, +        try {, +            settings = tuple.v1();, +            environment = tuple.v2();, +                stage = "Pid";, +            stage = "Logging";, +        } catch (Exception e) {, +            String errorMessage = buildErrorMessage(stage, e);, +            sysError(errorMessage, true);, +            System.exit(3);, +        }, +        stage = "Initialization";, +            stage = "Startup";, +            String errorMessage = buildErrorMessage(stage, e);, +            if (foreground) {, +                sysError(errorMessage, true);, +                Loggers.disableConsoleLogging();, +            }, +            System.exit(3);, +, +    private static String buildErrorMessage(String stage, Throwable e) {, +        StringBuilder errorMessage = new StringBuilder("{").append(Version.CURRENT).append("}: ");, +        errorMessage.append(stage).append(" Failed ...\n");, +        if (e instanceof CreationException) {, +            CreationException createException = (CreationException) e;, +            Set<String> seenMessages = newHashSet();, +            int counter = 1;, +            for (Message message : createException.getErrorMessages()) {, +                String detailedMessage;, +                if (message.getCause() == null) {, +                    detailedMessage = message.getMessage();, +                } else {, +                    detailedMessage = ExceptionsHelper.detailedMessage(message.getCause(), true, 0);, +                }]