[+++ b/docs/reference/docs/termvectors.asciidoc, +[[docs-termvectors-artificial-doc]], +++ b/docs/reference/docs/termvectors.asciidoc, +[[docs-termvectors-artificial-doc]], +++ b/docs/reference/query-dsl/queries/mlt-query.asciidoc, +        "like" : "text like this one",, +the <<docs-multi-get,Multi GET API>>., +        "like" : [, +        },, +        "and also some text like this one!", +Additionally, <<docs-termvectors-artificial-doc,artificial documents>> are also supported., +This is useful in order to specify one or more documents not present in the index., +        "like" : [, +are extracted from the text in `like` and analyzed by the analyzer associated, +When a search for multiple documents is issued, More Like This generates a, +specified as a top level parameter or within each document request., +using `like` with documents, the fields must be either `stored`, store `term_vector`, +Defaults to the `_all` field for text and to all possible fields, +for documents., +|`like`|coming[1.5.0], +Can either be some text, some documents or a combination of all, *required*., +A document request follows the same syntax as the, +<<docs-multi-get,Multi Get API>> or <<docs-multi-termvectors,Multi Term Vectors API>>., +In this case, the text is fetched from `fields` unless specified otherwise in each document request., +The text is analyzed by the default analyzer at the field, unless overridden by the, +`per_field_analyzer` parameter of the <<docs-termvectors-per-field-analyzer,Term Vectors API>>., +, +|`like_text` |deprecated[1.5.0,Replaced by `like`], +The text to find documents like it, *required* if `ids` or `docs` are, +|`ids` or `docs` |deprecated[1.5.0,Replaced by `like`], +A list of documents following the same syntax as the, +<<docs-multi-get,Multi GET API>> or <<docs-multi-termvectors,Multi termvectors API>>., +|`include` |When using `like` with document requests, specifies whether the documents should be, +++ b/docs/reference/docs/termvectors.asciidoc, +[[docs-termvectors-artificial-doc]], +++ b/docs/reference/query-dsl/queries/mlt-query.asciidoc, +        "like" : "text like this one",, +the <<docs-multi-get,Multi GET API>>., +        "like" : [, +        },, +        "and also some text like this one!", +Additionally, <<docs-termvectors-artificial-doc,artificial documents>> are also supported., +This is useful in order to specify one or more documents not present in the index., +        "like" : [, +are extracted from the text in `like` and analyzed by the analyzer associated, +When a search for multiple documents is issued, More Like This generates a, +specified as a top level parameter or within each document request., +using `like` with documents, the fields must be either `stored`, store `term_vector`, +Defaults to the `_all` field for text and to all possible fields, +for documents., +|`like`|coming[1.5.0], +Can either be some text, some documents or a combination of all, *required*., +A document request follows the same syntax as the, +<<docs-multi-get,Multi Get API>> or <<docs-multi-termvectors,Multi Term Vectors API>>., +In this case, the text is fetched from `fields` unless specified otherwise in each document request., +The text is analyzed by the default analyzer at the field, unless overridden by the, +`per_field_analyzer` parameter of the <<docs-termvectors-per-field-analyzer,Term Vectors API>>., +, +|`like_text` |deprecated[1.5.0,Replaced by `like`], +The text to find documents like it, *required* if `ids` or `docs` are, +|`ids` or `docs` |deprecated[1.5.0,Replaced by `like`], +A list of documents following the same syntax as the, +<<docs-multi-get,Multi GET API>> or <<docs-multi-termvectors,Multi termvectors API>>., +|`include` |When using `like` with document requests, specifies whether the documents should be, +++ b/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java, +import com.google.common.collect.Lists;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ElasticsearchParseException;, +        private String likeText;, +        public Item(String likeText) {, +            this.likeText = likeText;, +        }, +, +            if (this.likeText != null) {, +                return builder.value(this.likeText);, +            }, +            if (this.type() != null) {, +                builder.field("_type", this.type());, +            }, +    public MoreLikeThisQueryBuilder like(Item... docs) {, +    public MoreLikeThisQueryBuilder like(String... likeText) {, +        this.docs = new ArrayList<>();, +        for (String text : likeText) {, +            this.docs.add(new Item(text));, +        }, +        return this;, +    }, +, +    public MoreLikeThisQueryBuilder addLikeText(String likeText) {, +        this.docs.add(new Item(likeText));, +        return this;, +    }, +, +    /**, +     * The text to use in order to find documents that are "like" this., +     */, +    @Deprecated, +    public MoreLikeThisQueryBuilder likeText(String likeText) {, +        return like(likeText);, +    }]