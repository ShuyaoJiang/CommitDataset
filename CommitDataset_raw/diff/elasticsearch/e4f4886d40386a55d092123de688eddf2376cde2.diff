[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +                    //the exception is ignored as we now try to parse the response as an error., +                    //this covers cases like get where 404 can either be a valid document not found response,, +                    //or an error for which parsing is completely different. We try to consider the 404 response as a valid one, +                    //first. If parsing of the response breaks, we fall back to parsing it as an error., +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +                    //the exception is ignored as we now try to parse the response as an error., +                    //this covers cases like get where 404 can either be a valid document not found response,, +                    //or an error for which parsing is completely different. We try to consider the 404 response as a valid one, +                    //first. If parsing of the response breaks, we fall back to parsing it as an error., +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +                parser.skipChildren(); // skip potential inner objects for forward compatibility, +        } else if (token == XContentParser.Token.START_ARRAY) {, +            parser.skipChildren(); // skip potential inner arrays for forward compatibility, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +                    //the exception is ignored as we now try to parse the response as an error., +                    //this covers cases like get where 404 can either be a valid document not found response,, +                    //or an error for which parsing is completely different. We try to consider the 404 response as a valid one, +                    //first. If parsing of the response breaks, we fall back to parsing it as an error., +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +                parser.skipChildren(); // skip potential inner objects for forward compatibility, +        } else if (token == XContentParser.Token.START_ARRAY) {, +            parser.skipChildren(); // skip potential inner arrays for forward compatibility, +++ b/core/src/main/java/org/elasticsearch/action/get/GetResponse.java, +import org.elasticsearch.common.ParsingException;, +import java.util.Locale;, +    /**, +     * This method can be used to parse a {@link GetResponse} object when it has been printed out, +     * as a xcontent using the {@link #toXContent(XContentBuilder, Params)} method., +     * <p>, +     * For forward compatibility reason this method might not fail if it tries to parse a field it, +     * doesn't know. But before returning the result it will check that enough information were, +     * parsed to return a valid {@link GetResponse} instance and throws a {@link ParsingException}, +     * otherwise. This is the case when we get a 404 back, which can be parsed as a normal, +     * {@link GetResponse} with found set to false, or as an elasticsearch exception. The caller, +     * of this method needs a way to figure out whether we got back a valid get response, which, +     * can be done by catching ParsingException., +     *, +     * @param parser {@link XContentParser} to parse the response from, +     * @return a {@link GetResponse}, +     * @throws IOException is an I/O exception occurs during the parsing, +     */, +, +        // At this stage we ensure that we parsed enough information to return, +        // a valid GetResponse instance. If it's not the case, we throw an, +        // exception so that callers know it and can handle it correctly., +        if (getResult.getIndex() == null && getResult.getType() == null && getResult.getId() == null) {, +            throw new ParsingException(parser.getTokenLocation(),, +                    String.format(Locale.ROOT, "Missing required fields [%s,%s,%s]", GetResult._INDEX, GetResult._TYPE, GetResult._ID));, +        }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +                    //the exception is ignored as we now try to parse the response as an error., +                    //this covers cases like get where 404 can either be a valid document not found response,, +                    //or an error for which parsing is completely different. We try to consider the 404 response as a valid one, +                    //first. If parsing of the response breaks, we fall back to parsing it as an error., +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +                parser.skipChildren(); // skip potential inner objects for forward compatibility, +        } else if (token == XContentParser.Token.START_ARRAY) {, +            parser.skipChildren(); // skip potential inner arrays for forward compatibility, +++ b/core/src/main/java/org/elasticsearch/action/get/GetResponse.java, +import org.elasticsearch.common.ParsingException;, +import java.util.Locale;, +    /**, +     * This method can be used to parse a {@link GetResponse} object when it has been printed out, +     * as a xcontent using the {@link #toXContent(XContentBuilder, Params)} method., +     * <p>, +     * For forward compatibility reason this method might not fail if it tries to parse a field it, +     * doesn't know. But before returning the result it will check that enough information were, +     * parsed to return a valid {@link GetResponse} instance and throws a {@link ParsingException}, +     * otherwise. This is the case when we get a 404 back, which can be parsed as a normal, +     * {@link GetResponse} with found set to false, or as an elasticsearch exception. The caller, +     * of this method needs a way to figure out whether we got back a valid get response, which, +     * can be done by catching ParsingException., +     *, +     * @param parser {@link XContentParser} to parse the response from, +     * @return a {@link GetResponse}, +     * @throws IOException is an I/O exception occurs during the parsing, +     */, +, +        // At this stage we ensure that we parsed enough information to return, +        // a valid GetResponse instance. If it's not the case, we throw an, +        // exception so that callers know it and can handle it correctly., +        if (getResult.getIndex() == null && getResult.getType() == null && getResult.getId() == null) {, +            throw new ParsingException(parser.getTokenLocation(),, +                    String.format(Locale.ROOT, "Missing required fields [%s,%s,%s]", GetResult._INDEX, GetResult._TYPE, GetResult._ID));, +        }, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationResponse.java, +                    } else {, +                        parser.skipChildren();, +                        parser.skipChildren(); // skip potential inner arrays for forward compatibility, +                } else if (token == XContentParser.Token.START_OBJECT) {, +                    parser.skipChildren(); // skip potential inner arrays for forward compatibility, +                            parser.skipChildren(); // skip potential inner objects for forward compatibility, +                    } else if (token == XContentParser.Token.START_ARRAY) {, +                        parser.skipChildren(); // skip potential inner arrays for forward compatibility, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +                    //the exception is ignored as we now try to parse the response as an error., +                    //this covers cases like get where 404 can either be a valid document not found response,, +                    //or an error for which parsing is completely different. We try to consider the 404 response as a valid one, +                    //first. If parsing of the response breaks, we fall back to parsing it as an error.]