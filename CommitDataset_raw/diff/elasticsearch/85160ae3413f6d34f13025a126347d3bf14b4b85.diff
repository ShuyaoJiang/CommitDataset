[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentMultiFieldMapper.java, +        if (!(mergeWith instanceof XContentMultiFieldMapper) && !(mergeWith instanceof XContentFieldMapper)) {, +            mergeContext.addConflict("Can't merge a non multi_field / non simple mapping [" + mergeWith.name() + "] with a multi_field mapping [" + name() + "]");, +            if (mergeWith instanceof XContentFieldMapper) {, +                // its a single field mapper, upgraded into a multi field mapper, just update the default mapper, +                if (defaultMapper == null) {, +                    if (!mergeContext.mergeFlags().simulate()) {, +                        defaultMapper = mergeWith;, +                        mergeContext.docMapper().addFieldMapper((FieldMapper) defaultMapper);, +                    }, +                }, +            } else {, +                XContentMultiFieldMapper mergeWithMultiField = (XContentMultiFieldMapper) mergeWith;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentMultiFieldMapper.java, +        if (!(mergeWith instanceof XContentMultiFieldMapper) && !(mergeWith instanceof XContentFieldMapper)) {, +            mergeContext.addConflict("Can't merge a non multi_field / non simple mapping [" + mergeWith.name() + "] with a multi_field mapping [" + name() + "]");, +            if (mergeWith instanceof XContentFieldMapper) {, +                // its a single field mapper, upgraded into a multi field mapper, just update the default mapper, +                if (defaultMapper == null) {, +                    if (!mergeContext.mergeFlags().simulate()) {, +                        defaultMapper = mergeWith;, +                        mergeContext.docMapper().addFieldMapper((FieldMapper) defaultMapper);, +                    }, +                }, +            } else {, +                XContentMultiFieldMapper mergeWithMultiField = (XContentMultiFieldMapper) mergeWith;, +    }, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/index/mapper/xcontent/multifield/merge/JavaMultiFieldMergeTests.java, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.mapper.xcontent.XContentDocumentMapperParser;, +import java.util.Arrays;, +, +        XContentDocumentMapperParser parser = XContentMapperTests.newParser();, +, +        XContentDocumentMapper docMapper = parser.parse(mapping);, +        XContentDocumentMapper docMapper2 = parser.parse(mapping);, +        DocumentMapper.MergeResult mergeResult = docMapper.merge(docMapper2, mergeFlags().simulate(true));, +        assertThat(Arrays.toString(mergeResult.conflicts()), mergeResult.hasConflicts(), equalTo(false));, +        assertThat(docMapper.mappers().fullName("name.not_indexed").mapper(), notNullValue());, +        assertThat(docMapper.mappers().fullName("name.not_indexed2"), nullValue());, +        assertThat(docMapper.mappers().fullName("name.not_indexed3"), nullValue());, +, +        mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/xcontent/multifield/merge/test-mapping3.json");, +        XContentDocumentMapper docMapper3 = parser.parse(mapping);, +, +        mergeResult = docMapper.merge(docMapper3, mergeFlags().simulate(true));, +        assertThat(Arrays.toString(mergeResult.conflicts()), mergeResult.hasConflicts(), equalTo(false));, +, +        docMapper.merge(docMapper3, mergeFlags().simulate(false));, +, +        assertThat(docMapper.mappers().name("name").mapper().indexed(), equalTo(true));, +, +        assertThat(docMapper.mappers().fullName("name").mapper().indexed(), equalTo(true));, +        assertThat(docMapper.mappers().fullName("name.indexed").mapper(), notNullValue());, +        assertThat(docMapper.mappers().fullName("name.not_indexed").mapper(), notNullValue());, +        assertThat(docMapper.mappers().fullName("name.not_indexed2").mapper(), notNullValue());, +        assertThat(docMapper.mappers().fullName("name.not_indexed3"), nullValue());, +, +, +        mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/xcontent/multifield/merge/test-mapping4.json");, +        XContentDocumentMapper docMapper4 = parser.parse(mapping);, +, +        mergeResult = docMapper.merge(docMapper4, mergeFlags().simulate(true));, +        assertThat(Arrays.toString(mergeResult.conflicts()), mergeResult.hasConflicts(), equalTo(false));, +, +        docMapper.merge(docMapper4, mergeFlags().simulate(false));, +, +        assertThat(docMapper.mappers().name("name").mapper().indexed(), equalTo(true));, +, +        assertThat(docMapper.mappers().fullName("name").mapper().indexed(), equalTo(true));, +        assertThat(docMapper.mappers().fullName("name.indexed").mapper(), notNullValue());, +        assertThat(docMapper.mappers().fullName("name.not_indexed").mapper(), notNullValue());, +        assertThat(docMapper.mappers().fullName("name.not_indexed2").mapper(), notNullValue());, +        assertThat(docMapper.mappers().fullName("name.not_indexed3").mapper(), notNullValue());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentMultiFieldMapper.java, +        if (!(mergeWith instanceof XContentMultiFieldMapper) && !(mergeWith instanceof XContentFieldMapper)) {, +            mergeContext.addConflict("Can't merge a non multi_field / non simple mapping [" + mergeWith.name() + "] with a multi_field mapping [" + name() + "]");, +            if (mergeWith instanceof XContentFieldMapper) {, +                // its a single field mapper, upgraded into a multi field mapper, just update the default mapper, +                if (defaultMapper == null) {, +                    if (!mergeContext.mergeFlags().simulate()) {, +                        defaultMapper = mergeWith;, +                        mergeContext.docMapper().addFieldMapper((FieldMapper) defaultMapper);, +                    }, +                }, +            } else {, +                XContentMultiFieldMapper mergeWithMultiField = (XContentMultiFieldMapper) mergeWith;, +    }, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/index/mapper/xcontent/multifield/merge/JavaMultiFieldMergeTests.java, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.mapper.xcontent.XContentDocumentMapperParser;, +import java.util.Arrays;, +, +        XContentDocumentMapperParser parser = XContentMapperTests.newParser();, +, +        XContentDocumentMapper docMapper = parser.parse(mapping);, +        XContentDocumentMapper docMapper2 = parser.parse(mapping);, +        DocumentMapper.MergeResult mergeResult = docMapper.merge(docMapper2, mergeFlags().simulate(true));, +        assertThat(Arrays.toString(mergeResult.conflicts()), mergeResult.hasConflicts(), equalTo(false));]