[+++ b/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.watcher.WatcherException;, +import org.elasticsearch.watcher.WatcherSettingsException;, +import static org.elasticsearch.watcher.support.WatcherDateUtils.formatDate;, +    static final ParseField INDICES_FIELD = new ParseField("indices");, +    static final ParseField TYPES_FIELD = new ParseField("types");, +    static final ParseField BODY_FIELD = new ParseField("body");, +    static final ParseField SEARCH_TYPE_FIELD = new ParseField("search_type");, +    static final ParseField INDICES_OPTIONS_FIELD = new ParseField("indices_options");, +    static final ParseField EXPAND_WILDCARDS_FIELD = new ParseField("expand_wildcards");, +    static final ParseField IGNORE_UNAVAILABLE_FIELD = new ParseField("ignore_unavailable");, +    static final ParseField ALLOW_NO_INDICES_FIELD = new ParseField("allow_no_indices");, +    static final ParseField TEMPLATE_FIELD = new ParseField("template");, +    static final ParseField TEMPLATE_NAME_FIELD = new ParseField("name");, +    static final ParseField TEMPLATE_TYPE_FIELD = new ParseField("type");, +    static final ParseField TEMPLATE_PARAMS_FIELD = new ParseField("params");, +, +                if (INDICES_FIELD.match(currentFieldName)) {, +                            throw new WatcherSettingsException("could not read search request. expected string values in [" + currentFieldName + "] field, but instead found [" + token + "]");, +                } else if (TYPES_FIELD.match(currentFieldName)) {, +                    List<String> types = new ArrayList<>();, +                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                        if (token == XContentParser.Token.VALUE_STRING) {, +                            types.add(parser.textOrNull());, +                        } else {, +                            throw new WatcherSettingsException("could not read search request. expected string values in [" + currentFieldName + "] field, but instead found [" + token + "]");, +                        }, +                    }, +                    searchRequest.types(types.toArray(new String[types.size()]));, +                } else {, +                    throw new WatcherSettingsException("could not read search request. unexpected array field [" + currentFieldName + "]");, +                if (BODY_FIELD.match(currentFieldName)) {, +                } else if (INDICES_OPTIONS_FIELD.match(currentFieldName)) {, +                            currentFieldName = parser.currentName();, +                            if (EXPAND_WILDCARDS_FIELD.match(currentFieldName)) {, +                                        throw new WatcherSettingsException("could not read search request. unknown value [" + parser.text() + "] for [" + currentFieldName + "] field ");, +                            } else if (IGNORE_UNAVAILABLE_FIELD.match(currentFieldName)) {, +                            } else if (ALLOW_NO_INDICES_FIELD.match(currentFieldName)) {, +                            } else {, +                                throw new WatcherSettingsException("could not read search request. unexpected index option [" + currentFieldName + "]");, +                            throw new WatcherSettingsException("could not read search request. unexpected object field [" + currentFieldName + "]");, +                } else if (TEMPLATE_FIELD.match(currentFieldName)) {, +                            if (TEMPLATE_NAME_FIELD.match(currentFieldName)) {, +                            } else if (TEMPLATE_TYPE_FIELD.match(currentFieldName)) {, +                            } else {, +                                throw new WatcherSettingsException("could not read search request. unexpected template field [" + currentFieldName + "]");, +                        } else {, +                            throw new WatcherSettingsException("could not read search request. unexpected template token [" + token + "]");, +                    throw new WatcherSettingsException("could not read search request. unexpected object field [" + currentFieldName + "]");, +                }, +            } else if (token == XContentParser.Token.VALUE_STRING) {, +                if (INDICES_FIELD.match(currentFieldName)) {, +                    String indicesStr = parser.text();, +                    searchRequest.indices(Strings.delimitedListToStringArray(indicesStr, ",", " \t"));, +                } else if (TYPES_FIELD.match(currentFieldName)) {, +                    String typesStr = parser.text();, +                    searchRequest.types(Strings.delimitedListToStringArray(typesStr, ",", " \t"));, +                } else if (SEARCH_TYPE_FIELD.match(currentFieldName)) {, +                    searchType = SearchType.fromString(parser.text().toLowerCase(Locale.ROOT));, +                } else {, +                    throw new WatcherSettingsException("could not read search request. unexpected string field [" + currentFieldName + "]");, +                }, +            } else {, +                throw new WatcherSettingsException("could not read search request. unexpected token [" + token + "]");, +            builder.field(SEARCH_TYPE_FIELD.getPreferredName(), searchRequest.searchType().toString().toLowerCase(Locale.ENGLISH));, +            builder.array(INDICES_FIELD.getPreferredName(), searchRequest.indices());, +        }, +        if (searchRequest.types() != null) {, +            builder.array(TYPES_FIELD.getPreferredName(), searchRequest.types());, +            XContentHelper.writeRawField(BODY_FIELD.getPreferredName(), searchRequest.source(), builder, params);, +            builder.startObject(TEMPLATE_FIELD.getPreferredName()), +                    .field(TEMPLATE_NAME_FIELD.getPreferredName(), searchRequest.templateName());, +                builder.field(TEMPLATE_TYPE_FIELD.getPreferredName(), searchRequest.templateType().name().toLowerCase(Locale.ROOT));, +                builder.field(TEMPLATE_PARAMS_FIELD.getPreferredName(), searchRequest.templateParams());, +            builder.startObject(INDICES_OPTIONS_FIELD.getPreferredName());, +            builder.field(EXPAND_WILDCARDS_FIELD.getPreferredName(), value);, +            builder.field(IGNORE_UNAVAILABLE_FIELD.getPreferredName(), options.ignoreUnavailable());, +            builder.field(ALLOW_NO_INDICES_FIELD.getPreferredName(), options.allowNoIndices());, +++ b/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.watcher.WatcherException;, +import org.elasticsearch.watcher.WatcherSettingsException;, +import static org.elasticsearch.watcher.support.WatcherDateUtils.formatDate;, +    static final ParseField INDICES_FIELD = new ParseField("indices");, +    static final ParseField TYPES_FIELD = new ParseField("types");, +    static final ParseField BODY_FIELD = new ParseField("body");, +    static final ParseField SEARCH_TYPE_FIELD = new ParseField("search_type");, +    static final ParseField INDICES_OPTIONS_FIELD = new ParseField("indices_options");, +    static final ParseField EXPAND_WILDCARDS_FIELD = new ParseField("expand_wildcards");, +    static final ParseField IGNORE_UNAVAILABLE_FIELD = new ParseField("ignore_unavailable");, +    static final ParseField ALLOW_NO_INDICES_FIELD = new ParseField("allow_no_indices");, +    static final ParseField TEMPLATE_FIELD = new ParseField("template");, +    static final ParseField TEMPLATE_NAME_FIELD = new ParseField("name");, +    static final ParseField TEMPLATE_TYPE_FIELD = new ParseField("type");, +    static final ParseField TEMPLATE_PARAMS_FIELD = new ParseField("params");, +, +                if (INDICES_FIELD.match(currentFieldName)) {, +                            throw new WatcherSettingsException("could not read search request. expected string values in [" + currentFieldName + "] field, but instead found [" + token + "]");, +                } else if (TYPES_FIELD.match(currentFieldName)) {]