[+++ b/x-pack/plugin/sql/src/main/antlr/SqlBase.g4, +    | NOT? kind=IN '(' valueExpression (',' valueExpression)* ')', +++ b/x-pack/plugin/sql/src/main/antlr/SqlBase.g4, +    | NOT? kind=IN '(' valueExpression (',' valueExpression)* ')', +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java, +                e = new In(loc, exp, expressions(pCtx.valueExpression()));, +++ b/x-pack/plugin/sql/src/main/antlr/SqlBase.g4, +    | NOT? kind=IN '(' valueExpression (',' valueExpression)* ')', +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java, +                e = new In(loc, exp, expressions(pCtx.valueExpression()));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java, +        valueExpression(0);, +          valueExpression(0);, +    "\2\2\u01f9\u01fe\5<\37\2\u01fa\u01fb\7\5\2\2\u01fb\u01fd\5<\37\2\u01fc"+, +++ b/x-pack/plugin/sql/src/main/antlr/SqlBase.g4, +    | NOT? kind=IN '(' valueExpression (',' valueExpression)* ')', +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java, +                e = new In(loc, exp, expressions(pCtx.valueExpression()));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java, +        valueExpression(0);, +          valueExpression(0);, +    "\2\2\u01f9\u01fe\5<\37\2\u01fa\u01fb\7\5\2\2\u01fb\u01fd\5<\37\2\u01fc"+, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlParser.java, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.BackQuotedIdentifierContext;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.BooleanDefaultContext;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.BooleanExpressionContext;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.PrimaryExpressionContext;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.QueryPrimaryDefaultContext;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.QueryTermContext;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.QuoteIdentifierContext;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.StatementContext;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.StatementDefaultContext;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.UnquoteIdentifierContext;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.ValueExpressionContext;, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.ValueExpressionDefaultContext;, +    static class CircuitBreakerListener extends SqlBaseBaseListener {, +        /**, +         * Due to the structure of the grammar and our custom handling in {@link ExpressionBuilder}, +         * some expressions can exit with a different class than they entered:, +         * e.g.: ValueExpressionContext can exit as ValueExpressionDefaultContext, +         */, +        private static final Map<String, String> ENTER_EXIT_RULE_MAPPING = new HashMap<>();, +, +        static {, +            ENTER_EXIT_RULE_MAPPING.put(StatementDefaultContext.class.getSimpleName(), StatementContext.class.getSimpleName());, +            ENTER_EXIT_RULE_MAPPING.put(QueryPrimaryDefaultContext.class.getSimpleName(), QueryTermContext.class.getSimpleName());, +            ENTER_EXIT_RULE_MAPPING.put(BooleanDefaultContext.class.getSimpleName(), BooleanExpressionContext.class.getSimpleName());, +            ENTER_EXIT_RULE_MAPPING.put(ValueExpressionDefaultContext.class.getSimpleName(), ValueExpressionContext.class.getSimpleName());, +        }, +, +        private boolean insideIn = false;, +, +            if (inDetected(ctx)) {, +                insideIn = true;, +            }, +, +            // Skip PrimaryExpressionContext for IN as it's not visited on exit due to, +            // the grammar's peculiarity rule with "predicated" and "predicate"., +            // Also skip the Identifiers as they are "cheap"., +            if (ctx.getClass() != UnquoteIdentifierContext.class &&, +                ctx.getClass() != QuoteIdentifierContext.class &&, +                ctx.getClass() != BackQuotedIdentifierContext.class &&, +                (insideIn == false || ctx.getClass() != PrimaryExpressionContext.class)) {, +, +            if (inDetected(ctx)) {, +                insideIn = false;, +, +            decrementCounter(ctx);, +, +        ObjectShortHashMap<String> depthCounts() {, +            return depthCounts;, +        }, +, +        private void decrementCounter(ParserRuleContext ctx) {, +            String className = ctx.getClass().getSimpleName();, +            String classNameToDecrement = ENTER_EXIT_RULE_MAPPING.getOrDefault(className, className);, +, +            // Avoid having negative numbers, +            if (depthCounts.containsKey(classNameToDecrement)) {, +                depthCounts.putOrAdd(classNameToDecrement, (short) 0, (short) -1);, +            }, +        }, +, +        private boolean inDetected(ParserRuleContext ctx) {, +            if (ctx.getParent() != null && ctx.getParent().getClass() == SqlBaseParser.PredicateContext.class) {, +                SqlBaseParser.PredicateContext pc = (SqlBaseParser.PredicateContext) ctx.getParent();, +                return pc.kind != null && pc.kind.getType() == SqlBaseParser.IN;, +            }, +            return false;, +        }, +++ b/x-pack/plugin/sql/src/main/antlr/SqlBase.g4, +    | NOT? kind=IN '(' valueExpression (',' valueExpression)* ')', +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/ExpressionBuilder.java, +                e = new In(loc, exp, expressions(pCtx.valueExpression()));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java, +        valueExpression(0);, +          valueExpression(0);, +    "\2\2\u01f9\u01fe\5<\37\2\u01fa\u01fb\7\5\2\2\u01fb\u01fd\5<\37\2\u01fc"+, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlParser.java, +import org.elasticsearch.xpack.sql.parser.SqlBaseParser.BackQuotedIdentifierContext;]