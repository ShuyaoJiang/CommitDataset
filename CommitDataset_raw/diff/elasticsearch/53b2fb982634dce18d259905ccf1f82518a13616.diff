[+++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/Exporters.java, +    private volatile CurrentExporters exporters = CurrentExporters.EMPTY;, +        CurrentExporters existing = exporters;, +    CurrentExporters initExporters(Settings settings) {, +        return new CurrentExporters(settings, exporters);, +    static class CurrentExporters implements Iterable<Exporter> {, +        static final CurrentExporters EMPTY = new CurrentExporters(Settings.EMPTY, Collections.emptyMap());, +        public CurrentExporters(Settings settings, Map<String, Exporter> exporters) {, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/Exporters.java, +    private volatile CurrentExporters exporters = CurrentExporters.EMPTY;, +        CurrentExporters existing = exporters;, +    CurrentExporters initExporters(Settings settings) {, +        return new CurrentExporters(settings, exporters);, +    static class CurrentExporters implements Iterable<Exporter> {, +        static final CurrentExporters EMPTY = new CurrentExporters(Settings.EMPTY, Collections.emptyMap());, +        public CurrentExporters(Settings settings, Map<String, Exporter> exporters) {, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/exporter/ExportersTests.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import java.util.*;, +import java.util.concurrent.atomic.AtomicReference;, +import static org.mockito.Mockito.*;, +        Exporter.Factory factory = new TestFactory("_type", true);, +        Exporters.CurrentExporters internalExporters = exporters.initExporters(Settings.builder(), +        Exporter.Factory factory = new TestFactory("_type", true);, +        Exporters.CurrentExporters internalExporters = exporters.initExporters(Settings.builder(), +        Exporter.Factory factory = new TestFactory("_type", true);, +        Exporters.CurrentExporters internalExporters = exporters.initExporters(Settings.builder(), +    public void testInitExporters_Multiple_SameType() throws Exception {, +        Exporter.Factory factory = new TestFactory("_type", false);, +        Exporters.CurrentExporters internalExporters = exporters.initExporters(Settings.builder(), +    public void testInitExporters_Multiple_SameType_Singletons() throws Exception {, +        Exporter.Factory factory = new TestFactory("_type", true);, +    @Test, +    public void testSettingsUpdate() throws Exception {, +        Exporter.Factory factory = spy(new TestFactory("_type", false));, +        factories.put("_type", factory);, +        TestNodeSettingsService nodeSettingsService = new TestNodeSettingsService();, +, +        final AtomicReference<Settings> settingsHolder = new AtomicReference<>();, +, +        exporters = new Exporters(Settings.builder(), +                .put("marvel.agent.exporters._name0.type", "_type"), +                .put("marvel.agent.exporters._name1.type", "_type"), +                .build(), factories, settingsFilter, clusterService, nodeSettingsService) {, +            @Override, +            CurrentExporters initExporters(Settings settings) {, +                settingsHolder.set(settings);, +                return super.initExporters(settings);, +            }, +        };, +        exporters.start();, +, +        assertThat(settingsHolder.get(), notNullValue());, +        Map<String, String> settings = settingsHolder.get().getAsMap();, +        assertThat(settings.size(), is(2));, +        assertThat(settings, hasEntry("_name0.type", "_type"));, +        assertThat(settings, hasEntry("_name1.type", "_type"));, +, +        Settings update = Settings.builder(), +                .put("marvel.agent.exporters._name0.foo", "bar"), +                .put("marvel.agent.exporters._name1.foo", "bar"), +                .build();, +        nodeSettingsService.updateSettings(update);, +, +        assertThat(settingsHolder.get(), notNullValue());, +        settings = settingsHolder.get().getAsMap();, +        assertThat(settings.size(), is(4));, +        assertThat(settings, hasEntry("_name0.type", "_type"));, +        assertThat(settings, hasEntry("_name0.foo", "bar"));, +        assertThat(settings, hasEntry("_name1.type", "_type"));, +        assertThat(settings, hasEntry("_name1.foo", "bar"));, +    }, +, +    @Test, +    public void testExport_OnMaster() throws Exception {, +        Exporter.Factory factory = new MockFactory("mock", false);, +        Exporter.Factory masterOnlyFactory = new MockFactory("mock_master_only", true);, +        factories.put("mock", factory);, +        factories.put("mock_master_only", masterOnlyFactory);, +        Exporters exporters = new Exporters(Settings.builder(), +                .put("marvel.agent.exporters._name0.type", "mock"), +                .put("marvel.agent.exporters._name1.type", "mock_master_only"), +                .build(), factories, settingsFilter, clusterService, nodeSettingsService);, +        exporters.start();, +, +        DiscoveryNode localNode = mock(DiscoveryNode.class);, +        when(localNode.masterNode()).thenReturn(true);, +        when(clusterService.localNode()).thenReturn(localNode);, +, +        MarvelDoc doc = mock(MarvelDoc.class);, +        MarvelDoc[] docs = new MarvelDoc[randomIntBetween(1, 3)];, +        for (int i = 0; i < docs.length; i++) {, +            docs[i] = doc;, +        }, +        List<MarvelDoc> docsList = Arrays.asList(docs);, +        exporters.export(docsList);, +, +        verify(exporters.getExporter("_name0"), times(1)).masterOnly();, +        verify(exporters.getExporter("_name0"), times(1)).export(docsList);, +        verify(exporters.getExporter("_name1"), times(1)).masterOnly();]