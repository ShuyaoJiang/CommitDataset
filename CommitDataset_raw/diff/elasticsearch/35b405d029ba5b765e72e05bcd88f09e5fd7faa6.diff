[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/MonitoringTemplateUtils.java, +    public static final String[] NEW_DATA_TYPES = { "kibana", "logstash" };, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/MonitoringTemplateUtils.java, +    public static final String[] NEW_DATA_TYPES = { "kibana", "logstash" };, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporterIT.java, +        for (final String type : MonitoringTemplateUtils.NEW_DATA_TYPES) {, +        for (final String type : MonitoringTemplateUtils.NEW_DATA_TYPES) {, +        for (final String type : MonitoringTemplateUtils.NEW_DATA_TYPES) {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/MonitoringTemplateUtils.java, +    public static final String[] NEW_DATA_TYPES = { "kibana", "logstash" };, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporterIT.java, +        for (final String type : MonitoringTemplateUtils.NEW_DATA_TYPES) {, +        for (final String type : MonitoringTemplateUtils.NEW_DATA_TYPES) {, +        for (final String type : MonitoringTemplateUtils.NEW_DATA_TYPES) {, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporterResourceTests.java, +import org.elasticsearch.xpack.monitoring.exporter.MonitoringTemplateUtils;, +     * kibana, logstash, beats, +    private final int EXPECTED_TYPES = MonitoringTemplateUtils.NEW_DATA_TYPES.length;, +        final boolean firstSucceeds = randomBoolean();, +        if (firstSucceeds) {, +            final boolean successfulFirst = randomBoolean();, +            // -2 from one success + a necessary failure after it!, +            final int extraPasses = Math.max(randomIntBetween(0, EXPECTED_TYPES - 2), 0);, +            final int successful = randomIntBetween(0, extraPasses);, +            final int unsuccessful = extraPasses - successful;, +, +            final Response first = successfulFirst ? successfulGetTypeMappingResponse() : unsuccessfulGetTypeMappingResponse();, +, +            final List<Response> otherResponses = getTypeMappingResponses(successful, unsuccessful);, +, +            // last check fails implies that N - 2 publishes succeeded!, +            when(client.performRequest(eq("GET"), startsWith("/" + DATA_INDEX + "/_mapping/"), anyMapOf(String.class, String.class))), +                    .thenReturn(first, otherResponses.toArray(new Response[otherResponses.size()])), +                    .thenThrow(exception);, +            whenSuccessfulPutTypeMappings(otherResponses.size() + 1);, +, +            expectedGets += 1 + successful + unsuccessful;, +            expectedPuts = (successfulFirst ? 0 : 1) + unsuccessful;, +        } else {, +        }, +        final boolean firstSucceeds = randomBoolean();, +        if (firstSucceeds) {, +            final Response firstSuccess = successfulPutResponse();, +            // -2 from one success + a necessary failure after it!, +            final int extraPasses = randomIntBetween(0, EXPECTED_TYPES - 2);, +            final int successful = randomIntBetween(0, extraPasses);, +            final int unsuccessful = extraPasses - successful;, +, +            final List<Response> otherResponses = successfulPutResponses(unsuccessful);, +, +            // first one passes for sure, so we need an extra "unsuccessful" GET, +            whenGetTypeMappingResponse(successful, unsuccessful + 2);, +, +            // previous publishes must have succeeded, +            when(client.performRequest(eq("PUT"),, +                                       startsWith("/" + DATA_INDEX + "/_mapping/"),, +                                       anyMapOf(String.class, String.class),, +                                       any(HttpEntity.class))), +                    .thenReturn(firstSuccess, otherResponses.toArray(new Response[otherResponses.size()])), +                    .thenThrow(exception);, +, +            // GETs required for each PUT attempt (first is guaranteed "unsuccessful"), +            expectedGets += successful + unsuccessful + 1;, +            // unsuccessful are PUT attempts + the guaranteed successful PUT (first), +            expectedPuts += unsuccessful + 1;, +        } else {, +        }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/MonitoringTemplateUtils.java, +    public static final String[] NEW_DATA_TYPES = { "kibana", "logstash" };, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporterIT.java, +        for (final String type : MonitoringTemplateUtils.NEW_DATA_TYPES) {, +        for (final String type : MonitoringTemplateUtils.NEW_DATA_TYPES) {, +        for (final String type : MonitoringTemplateUtils.NEW_DATA_TYPES) {, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExporterResourceTests.java, +import org.elasticsearch.xpack.monitoring.exporter.MonitoringTemplateUtils;, +     * kibana, logstash, beats, +    private final int EXPECTED_TYPES = MonitoringTemplateUtils.NEW_DATA_TYPES.length;, +        final boolean firstSucceeds = randomBoolean();, +        if (firstSucceeds) {, +            final boolean successfulFirst = randomBoolean();, +            // -2 from one success + a necessary failure after it!, +            final int extraPasses = Math.max(randomIntBetween(0, EXPECTED_TYPES - 2), 0);, +            final int successful = randomIntBetween(0, extraPasses);, +            final int unsuccessful = extraPasses - successful;, +, +            final Response first = successfulFirst ? successfulGetTypeMappingResponse() : unsuccessfulGetTypeMappingResponse();, +, +            final List<Response> otherResponses = getTypeMappingResponses(successful, unsuccessful);, +, +            // last check fails implies that N - 2 publishes succeeded!, +            when(client.performRequest(eq("GET"), startsWith("/" + DATA_INDEX + "/_mapping/"), anyMapOf(String.class, String.class))), +                    .thenReturn(first, otherResponses.toArray(new Response[otherResponses.size()])), +                    .thenThrow(exception);, +            whenSuccessfulPutTypeMappings(otherResponses.size() + 1);, +, +            expectedGets += 1 + successful + unsuccessful;, +            expectedPuts = (successfulFirst ? 0 : 1) + unsuccessful;, +        } else {, +        }, +        final boolean firstSucceeds = randomBoolean();]