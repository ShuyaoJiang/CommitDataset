[+++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +            Task test = project.getTasks().findByName("test"), +            if (test != null && (test instanceof RandomizedTestingTask) == false) {, +                throw new IllegalStateException("Test task was not replaced in project ${project.path}. Found ${test.getClass()}"), +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +            Task test = project.getTasks().findByName("test"), +            if (test != null && (test instanceof RandomizedTestingTask) == false) {, +                throw new IllegalStateException("Test task was not replaced in project ${project.path}. Found ${test.getClass()}"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +            Task test = project.getTasks().findByName("test"), +            if (test != null && (test instanceof RandomizedTestingTask) == false) {, +                throw new IllegalStateException("Test task was not replaced in project ${project.path}. Found ${test.getClass()}"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ /dev/null, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +            Task test = project.getTasks().findByName("test"), +            if (test != null && (test instanceof RandomizedTestingTask) == false) {, +                throw new IllegalStateException("Test task was not replaced in project ${project.path}. Found ${test.getClass()}"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +            Task test = project.getTasks().findByName("test"), +            if (test != null && (test instanceof RandomizedTestingTask) == false) {, +                throw new IllegalStateException("Test task was not replaced in project ${project.path}. Found ${test.getClass()}"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ /dev/null, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +import com.github.jengelman.gradle.plugins.shadow.ShadowPlugin, +        // We want to get any compilation error before running the pre-commit checks., +        project.sourceSets.all { sourceSet ->, +            precommitTasks.each { task ->, +                task.shouldRunAfter(sourceSet.getClassesTaskName()), +            }, +        }, +        return project.tasks.create([, +        ]), +        if (project.plugins.hasPlugin(ShadowPlugin)) {, +            task.classpath += project.configurations.bundle, +        }, +        task.dependsOn(project.sourceSets.test.classesTaskName), +        task.javaHome = project.runtimeJavaHome, +            Task namingConventionsTask = project.tasks.create('namingConventions', NamingConventionsTask), +            namingConventionsTask.javaHome = project.runtimeJavaHome, +            return namingConventionsTask, +        return project.tasks.create('loggerUsageCheck', LoggerUsageTask.class) {, +            javaHome = project.runtimeJavaHome, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingPlugin.groovy, +            Task test = project.getTasks().findByName("test"), +            if (test != null && (test instanceof RandomizedTestingTask) == false) {, +                throw new IllegalStateException("Test task was not replaced in project ${project.path}. Found ${test.getClass()}"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ /dev/null, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +import com.github.jengelman.gradle.plugins.shadow.ShadowPlugin, +        // We want to get any compilation error before running the pre-commit checks., +        project.sourceSets.all { sourceSet ->, +            precommitTasks.each { task ->, +                task.shouldRunAfter(sourceSet.getClassesTaskName()), +            }, +        }, +        return project.tasks.create([, +        ]), +        if (project.plugins.hasPlugin(ShadowPlugin)) {, +            task.classpath += project.configurations.bundle, +        }, +        task.dependsOn(project.sourceSets.test.classesTaskName), +        task.javaHome = project.runtimeJavaHome, +            Task namingConventionsTask = project.tasks.create('namingConventions', NamingConventionsTask), +            namingConventionsTask.javaHome = project.runtimeJavaHome, +            return namingConventionsTask, +        return project.tasks.create('loggerUsageCheck', LoggerUsageTask.class) {, +            javaHome = project.runtimeJavaHome, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/LoggedExec.java, +import org.gradle.api.Action;, +import org.gradle.api.Project;]