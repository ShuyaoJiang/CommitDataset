[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/x-pack/watcher/src/test/java/org/elasticsearch/xpack/watcher/test/integration/HipChatServiceIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.watcher.test.integration;, +, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.test.junit.annotations.Network;, +import org.elasticsearch.test.junit.annotations.TestLogging;, +import org.elasticsearch.xpack.watcher.actions.hipchat.HipChatAction;, +import org.elasticsearch.xpack.notification.hipchat.HipChatAccount;, +import org.elasticsearch.xpack.notification.hipchat.HipChatMessage;, +import org.elasticsearch.xpack.notification.hipchat.HipChatService;, +import org.elasticsearch.xpack.notification.hipchat.SentMessages;, +import org.elasticsearch.xpack.watcher.test.AbstractWatcherIntegrationTestCase;, +import org.elasticsearch.xpack.watcher.transport.actions.put.PutWatchResponse;, +, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +import static org.elasticsearch.search.builder.SearchSourceBuilder.searchSource;, +import static org.elasticsearch.xpack.watcher.actions.ActionBuilders.hipchatAction;, +import static org.elasticsearch.xpack.watcher.client.WatchSourceBuilders.watchBuilder;, +import static org.elasticsearch.xpack.watcher.condition.ConditionBuilders.alwaysCondition;, +import static org.elasticsearch.xpack.watcher.input.InputBuilders.simpleInput;, +import static org.elasticsearch.xpack.watcher.trigger.TriggerBuilders.schedule;, +import static org.elasticsearch.xpack.watcher.trigger.schedule.Schedules.interval;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.lessThan;, +import static org.hamcrest.Matchers.notNullValue;, +, +@Network, +@TestLogging("watcher.support.http:TRACE"), +public class HipChatServiceIT extends AbstractWatcherIntegrationTestCase {, +    @Override, +    protected boolean timeWarped() {, +        return true;, +    }, +, +    @Override, +    protected boolean enableSecurity() {, +        return false;, +    }, +, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        return Settings.builder(), +                .put(super.nodeSettings(nodeOrdinal)), +, +                // this is for the `test-watcher-integration` group level integration in HipChat, +                .put("xpack.notification.hipchat.account.integration_account.profile", "integration"), +                .put("xpack.notification.hipchat.account.integration_account.auth_token",, +                        "huuS9v7ccuOy3ZBWWWr1vt8Lqu3sQnLUE81nrLZU"), +                .put("xpack.notification.hipchat.account.integration_account.room", "test-watcher"), +, +                // this is for the Watcher Test account in HipChat, +                .put("xpack.notification.hipchat.account.user_account.profile", "user"), +                .put("xpack.notification.hipchat.account.user_account.auth_token", "FYVx16oDH78ZW9r13wtXbcszyoyA7oX5tiMWg9X0"), +, +                // this is for the `test-watcher-v1` notification token, +                .put("xpack.notification.hipchat.account.v1_account.profile", "v1"), +                .put("xpack.notification.hipchat.account.v1_account.auth_token", "a734baf62df618b96dda55b323fc30"), +                .build();, +    }, +, +    public void testSendMessageV1Account() throws Exception {, +        HipChatService service = getInstanceFromMaster(HipChatService.class);, +        HipChatMessage hipChatMessage = new HipChatMessage(, +                "HipChatServiceTests#testSendMessage_V1Account",, +                new String[] { "test-watcher", "test-watcher-2" },, +                null, // users are unsupported in v1, +                "watcher-tests",, +                HipChatMessage.Format.TEXT,, +                randomFrom(HipChatMessage.Color.values()),, +                true);, +, +        HipChatAccount account = service.getAccount("v1_account");, +        assertThat(account, notNullValue());]