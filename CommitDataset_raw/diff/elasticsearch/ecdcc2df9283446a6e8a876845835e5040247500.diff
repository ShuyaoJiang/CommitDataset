[+++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java, +import org.apache.lucene.util.RamUsageEstimator;, +            final long ordinalsMemoryUsage = OrdinalsCollector.memoryOverhead(maxOrd);, +            final long countsMemoryUsage = HyperLogLogPlusPlus.memoryUsage(precision);, +            // only use ordinals if they don't increase memory usage by more than 25%, +            if (ordinalsMemoryUsage < countsMemoryUsage / 4) {, +        private static final long SHALLOW_FIXEDBITSET_SIZE = RamUsageEstimator.shallowSizeOfInstance(FixedBitSet.class);, +, +        /**, +         * Return an approximate memory overhead per bucket for this collector., +         */, +        public static long memoryOverhead(long maxOrd) {, +            return RamUsageEstimator.NUM_BYTES_OBJECT_REF + SHALLOW_FIXEDBITSET_SIZE + (maxOrd + 7) / 8; // 1 bit per ord, +        }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java, +import org.apache.lucene.util.RamUsageEstimator;, +            final long ordinalsMemoryUsage = OrdinalsCollector.memoryOverhead(maxOrd);, +            final long countsMemoryUsage = HyperLogLogPlusPlus.memoryUsage(precision);, +            // only use ordinals if they don't increase memory usage by more than 25%, +            if (ordinalsMemoryUsage < countsMemoryUsage / 4) {, +        private static final long SHALLOW_FIXEDBITSET_SIZE = RamUsageEstimator.shallowSizeOfInstance(FixedBitSet.class);, +, +        /**, +         * Return an approximate memory overhead per bucket for this collector., +         */, +        public static long memoryOverhead(long maxOrd) {, +            return RamUsageEstimator.NUM_BYTES_OBJECT_REF + SHALLOW_FIXEDBITSET_SIZE + (maxOrd + 7) / 8; // 1 bit per ord, +        }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregatorFactory.java, +            if (parent.bucketAggregationMode() == BucketAggregationMode.PER_BUCKET) {, +                // if the parent is a per-bucket aggregator, we substract 5 to the precision,, +++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java, +import org.apache.lucene.util.RamUsageEstimator;, +            final long ordinalsMemoryUsage = OrdinalsCollector.memoryOverhead(maxOrd);, +            final long countsMemoryUsage = HyperLogLogPlusPlus.memoryUsage(precision);, +            // only use ordinals if they don't increase memory usage by more than 25%, +            if (ordinalsMemoryUsage < countsMemoryUsage / 4) {, +        private static final long SHALLOW_FIXEDBITSET_SIZE = RamUsageEstimator.shallowSizeOfInstance(FixedBitSet.class);, +, +        /**, +         * Return an approximate memory overhead per bucket for this collector., +         */, +        public static long memoryOverhead(long maxOrd) {, +            return RamUsageEstimator.NUM_BYTES_OBJECT_REF + SHALLOW_FIXEDBITSET_SIZE + (maxOrd + 7) / 8; // 1 bit per ord, +        }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregatorFactory.java, +            if (parent.bucketAggregationMode() == BucketAggregationMode.PER_BUCKET) {, +                // if the parent is a per-bucket aggregator, we substract 5 to the precision,, +++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/HyperLogLogPlusPlus.java, +    /**, +     * Return the expected per-bucket memory usage for the given precision., +     */, +    public static long memoryUsage(int precision) {, +        return 1L << precision;, +    }, +]