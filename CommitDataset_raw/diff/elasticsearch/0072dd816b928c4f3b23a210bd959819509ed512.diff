[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/support/ImmutableAppendableBlobContainer.java, +import java.io.ByteArrayInputStream;, +                // use teh sync one, +                ByteArrayInputStream is = new ByteArrayInputStream(out.unsafeByteArray(), 0, out.size());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/support/ImmutableAppendableBlobContainer.java, +import java.io.ByteArrayInputStream;, +                // use teh sync one, +                ByteArrayInputStream is = new ByteArrayInputStream(out.unsafeByteArray(), 0, out.size());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/GatewayService.java, +import org.elasticsearch.common.StopWatch;, +                logger.debug("writing to gateway {} ...", gateway);, +                StopWatch stopWatch = new StopWatch().start();, +                    logger.debug("wrote to gateway {}, took {}", gateway, stopWatch.stop().totalTime());, +        logger.debug("reading state from gateway {} ...", gateway);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/support/ImmutableAppendableBlobContainer.java, +import java.io.ByteArrayInputStream;, +                // use teh sync one, +                ByteArrayInputStream is = new ByteArrayInputStream(out.unsafeByteArray(), 0, out.size());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/GatewayService.java, +import org.elasticsearch.common.StopWatch;, +                logger.debug("writing to gateway {} ...", gateway);, +                StopWatch stopWatch = new StopWatch().start();, +                    logger.debug("wrote to gateway {}, took {}", gateway, stopWatch.stop().totalTime());, +        logger.debug("reading state from gateway {} ...", gateway);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +    public synchronized void snapshot(final String reason) throws IndexShardGatewaySnapshotFailedException {, +                        logger.debug("snapshot ({}) to {} ...", reason, shardGateway);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/support/ImmutableAppendableBlobContainer.java, +import java.io.ByteArrayInputStream;, +                // use teh sync one, +                ByteArrayInputStream is = new ByteArrayInputStream(out.unsafeByteArray(), 0, out.size());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/GatewayService.java, +import org.elasticsearch.common.StopWatch;, +                logger.debug("writing to gateway {} ...", gateway);, +                StopWatch stopWatch = new StopWatch().start();, +                    logger.debug("wrote to gateway {}, took {}", gateway, stopWatch.stop().totalTime());, +        logger.debug("reading state from gateway {} ...", gateway);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +    public synchronized void snapshot(final String reason) throws IndexShardGatewaySnapshotFailedException {, +                        logger.debug("snapshot ({}) to {} ...", reason, shardGateway);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +import java.io.ByteArrayInputStream;, +                            indexContainer.writeBlob(fileMetaData.name() + ".md5", new ByteArrayInputStream(md5), md5.length, new ImmutableBlobContainer.WriterListener() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/support/ImmutableAppendableBlobContainer.java, +import java.io.ByteArrayInputStream;, +                // use teh sync one, +                ByteArrayInputStream is = new ByteArrayInputStream(out.unsafeByteArray(), 0, out.size());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/GatewayService.java, +import org.elasticsearch.common.StopWatch;, +                logger.debug("writing to gateway {} ...", gateway);, +                StopWatch stopWatch = new StopWatch().start();, +                    logger.debug("wrote to gateway {}, took {}", gateway, stopWatch.stop().totalTime());, +        logger.debug("reading state from gateway {} ...", gateway);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +    public synchronized void snapshot(final String reason) throws IndexShardGatewaySnapshotFailedException {, +                        logger.debug("snapshot ({}) to {} ...", reason, shardGateway);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +import java.io.ByteArrayInputStream;, +                            indexContainer.writeBlob(fileMetaData.name() + ".md5", new ByteArrayInputStream(md5), md5.length, new ImmutableBlobContainer.WriterListener() {, +++ b/plugins/cloud/src/main/java/org/elasticsearch/cloud/blobstore/CloudImmutableBlobContainer.java, +        Blob blob = cloudBlobStore.async().newBlob(buildBlobPath(blobName));]