[+++ b/src/main/java/org/elasticsearch/index/search/child/ChildrenConstantScoreQuery.java, +            if (!DocIdSets.isEmpty(parentDocIdSet)) {, +                // We can't be sure of the fact that liveDocs have been applied, so we apply it here. The "remaining", +                // count down (short circuit) logic will then work as expected., +                parentDocIdSet = BitsFilteredDocIdSet.wrap(parentDocIdSet, context.reader().getLiveDocs());, +            }, +++ b/src/main/java/org/elasticsearch/index/search/child/ChildrenConstantScoreQuery.java, +            if (!DocIdSets.isEmpty(parentDocIdSet)) {, +                // We can't be sure of the fact that liveDocs have been applied, so we apply it here. The "remaining", +                // count down (short circuit) logic will then work as expected., +                parentDocIdSet = BitsFilteredDocIdSet.wrap(parentDocIdSet, context.reader().getLiveDocs());, +            }, +++ b/src/main/java/org/elasticsearch/index/search/child/ChildrenQuery.java, +        this.parentFilter = parentFilter;, +            this.parentFilter = new ApplyAcceptedDocsFilter(parentFilter);, +            // We can't be sure of the fact that liveDocs have been applied, so we apply it here. The "remaining", +            // count down (short circuit) logic will then work as expected., +            DocIdSetIterator parentsIterator = BitsFilteredDocIdSet.wrap(parentsSet, context.reader().getLiveDocs()).iterator();, +                    return currentDocId = NO_MORE_DOCS;, +                    return currentDocId = NO_MORE_DOCS;, +                    return currentDocId = NO_MORE_DOCS;, +                    return currentDocId = NO_MORE_DOCS;, +++ b/src/main/java/org/elasticsearch/index/search/child/ChildrenConstantScoreQuery.java, +            if (!DocIdSets.isEmpty(parentDocIdSet)) {, +                // We can't be sure of the fact that liveDocs have been applied, so we apply it here. The "remaining", +                // count down (short circuit) logic will then work as expected., +                parentDocIdSet = BitsFilteredDocIdSet.wrap(parentDocIdSet, context.reader().getLiveDocs());, +            }, +++ b/src/main/java/org/elasticsearch/index/search/child/ChildrenQuery.java, +        this.parentFilter = parentFilter;, +            this.parentFilter = new ApplyAcceptedDocsFilter(parentFilter);, +            // We can't be sure of the fact that liveDocs have been applied, so we apply it here. The "remaining", +            // count down (short circuit) logic will then work as expected., +            DocIdSetIterator parentsIterator = BitsFilteredDocIdSet.wrap(parentsSet, context.reader().getLiveDocs()).iterator();, +                    return currentDocId = NO_MORE_DOCS;, +                    return currentDocId = NO_MORE_DOCS;, +                    return currentDocId = NO_MORE_DOCS;, +                    return currentDocId = NO_MORE_DOCS;, +++ b/src/test/java/org/elasticsearch/index/search/child/ChildrenConstantScoreQueryTests.java, +import org.elasticsearch.common.lucene.search.NotFilter;, +import org.elasticsearch.common.lucene.search.XFilteredQuery;, +        IntOpenHashSet filteredOrDeletedDocs = new IntOpenHashSet();, +            boolean filterMe = rarely();, +                filteredOrDeletedDocs.add(parentDocId);, +            if (filterMe) {, +                filteredOrDeletedDocs.add(parentDocId);, +                document.add(new StringField("filter", "me", Field.Store.NO));, +            }, +                    if (!markParentAsDeleted && !filterMe) {, +        Filter rawFilterMe = new NotFilter(new TermFilter(new Term("filter", "me")));, +            // Using this in FQ, will invoke / test the Scorer#advance(..) and also let the Weight#scorer not get live docs as acceptedDocs, +            Filter filterMe;, +            if (random().nextBoolean()) {, +                filterMe = SearchContext.current().filterCache().cache(rawFilterMe);, +            } else {, +                filterMe = rawFilterMe;, +            }, +, +                    } while (filteredOrDeletedDocs.contains(parentId));, +            query = new XFilteredQuery(query, filterMe);, +++ b/src/main/java/org/elasticsearch/index/search/child/ChildrenConstantScoreQuery.java, +            if (!DocIdSets.isEmpty(parentDocIdSet)) {, +                // We can't be sure of the fact that liveDocs have been applied, so we apply it here. The "remaining", +                // count down (short circuit) logic will then work as expected., +                parentDocIdSet = BitsFilteredDocIdSet.wrap(parentDocIdSet, context.reader().getLiveDocs());, +            }, +++ b/src/main/java/org/elasticsearch/index/search/child/ChildrenQuery.java, +        this.parentFilter = parentFilter;, +            this.parentFilter = new ApplyAcceptedDocsFilter(parentFilter);, +            // We can't be sure of the fact that liveDocs have been applied, so we apply it here. The "remaining", +            // count down (short circuit) logic will then work as expected., +            DocIdSetIterator parentsIterator = BitsFilteredDocIdSet.wrap(parentsSet, context.reader().getLiveDocs()).iterator();, +                    return currentDocId = NO_MORE_DOCS;, +                    return currentDocId = NO_MORE_DOCS;, +                    return currentDocId = NO_MORE_DOCS;, +                    return currentDocId = NO_MORE_DOCS;, +++ b/src/test/java/org/elasticsearch/index/search/child/ChildrenConstantScoreQueryTests.java, +import org.elasticsearch.common.lucene.search.NotFilter;, +import org.elasticsearch.common.lucene.search.XFilteredQuery;, +        IntOpenHashSet filteredOrDeletedDocs = new IntOpenHashSet();, +            boolean filterMe = rarely();, +                filteredOrDeletedDocs.add(parentDocId);, +            if (filterMe) {, +                filteredOrDeletedDocs.add(parentDocId);, +                document.add(new StringField("filter", "me", Field.Store.NO));, +            }, +                    if (!markParentAsDeleted && !filterMe) {, +        Filter rawFilterMe = new NotFilter(new TermFilter(new Term("filter", "me")));, +            // Using this in FQ, will invoke / test the Scorer#advance(..) and also let the Weight#scorer not get live docs as acceptedDocs, +            Filter filterMe;, +            if (random().nextBoolean()) {, +                filterMe = SearchContext.current().filterCache().cache(rawFilterMe);, +            } else {, +                filterMe = rawFilterMe;, +            }, +, +                    } while (filteredOrDeletedDocs.contains(parentId));, +            query = new XFilteredQuery(query, filterMe);, +++ b/src/test/java/org/elasticsearch/index/search/child/ChildrenQueryTests.java, +            // Using this in FQ, will invoke / test the Scorer#advance(..) and also let the Weight#scorer not get live docs as acceptedDocs]