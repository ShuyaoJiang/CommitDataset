[+++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +    public float getMaxTermFrequency() {, +        return this.maxTermFrequency;, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +    public float getMaxTermFrequency() {, +        return this.maxTermFrequency;, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +import org.elasticsearch.index.query.QueryShardContext;, +    public Query query(QueryShardContext context, String queryText) {, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(context, queryText));, +++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +    public float getMaxTermFrequency() {, +        return this.maxTermFrequency;, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +import org.elasticsearch.index.query.QueryShardContext;, +    public Query query(QueryShardContext context, String queryText) {, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(context, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/FieldQueryExtension.java, +import org.elasticsearch.index.query.QueryShardContext;, +    Query query(QueryShardContext context, String queryText);, +++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +    public float getMaxTermFrequency() {, +        return this.maxTermFrequency;, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +import org.elasticsearch.index.query.QueryShardContext;, +    public Query query(QueryShardContext context, String queryText) {, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(context, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/FieldQueryExtension.java, +import org.elasticsearch.index.query.QueryShardContext;, +    Query query(QueryShardContext context, String queryText);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.*;, +import org.elasticsearch.index.query.QueryShardContext;, + * <p>, + * Also breaks fields with [type].[name] into a boolean query that must include the type, +    private final QueryShardContext context;, +    public MapperQueryParser(QueryShardContext context) {, +        this.context = context;, +        if (settings.fieldsAndWeights().isEmpty()) {, +        } else if (settings.fieldsAndWeights().size() == 1) {, +            this.field = settings.fieldsAndWeights().keySet().iterator().next();, +        setAnalyzer(settings.analyzer());, +        setFuzzyMinSim(settings.fuzziness().asFloat());, +            return fieldQueryExtension.query(context, queryText);, +                setAnalyzer(settings.quoteAnalyzer());, +                if (settings.quoteFieldSuffix() != null) {, +                    currentFieldType = context.fieldMapper(field + settings.quoteFieldSuffix());, +                currentFieldType = context.fieldMapper(field);, +                    if (!settings.forceQuoteAnalyzer()) {, +                        setAnalyzer(context.getSearchQuoteAnalyzer(currentFieldType));, +                    if (!settings.forceAnalyzer()) {, +                        setAnalyzer(context.getSearchAnalyzer(currentFieldType));, +                            query = currentFieldType.termQuery(queryText, context);, +        currentFieldType = context.fieldMapper(field);, +        currentFieldType = context.fieldMapper(field);, +            currentFieldType = context.fieldMapper(field);, +                if (!settings.forceAnalyzer()) {, +                    setAnalyzer(context.getSearchAnalyzer(currentFieldType));, +                    query = currentFieldType.prefixQuery(termStr, multiTermRewriteMethod, context);, +        if (!settings.analyzeWildcard()) {, +                return fieldQueryExtensions.get(ExistsFieldQueryExtension.NAME).query(context, actualField);, +            currentFieldType = context.fieldMapper(field);, +                if (!settings.forceAnalyzer()) {, +                    setAnalyzer(context.getSearchAnalyzer(currentFieldType));, +        if (!settings.analyzeWildcard()) {, +            currentFieldType = context.fieldMapper(field);, +                if (!settings.forceAnalyzer()) {, +                    setAnalyzer(context.getSearchAnalyzer(currentFieldType));, +                    query = currentFieldType.regexpQuery(termStr, RegExp.ALL, maxDeterminizedStates, multiTermRewriteMethod, context);, +        Float fieldBoost = settings.fieldsAndWeights().get(field);, +        if (fieldBoost != null) {, +            q.setBoost(fieldBoost);, +        Collection<String> fields;, +            fields = context.simpleMatchToIndexNames(field);, +            fields = settings.fieldsAndWeights().keySet();, +++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +    public float getMaxTermFrequency() {, +        return this.maxTermFrequency;, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +import org.elasticsearch.index.query.QueryShardContext;, +    public Query query(QueryShardContext context, String queryText) {, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(context, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/FieldQueryExtension.java, +import org.elasticsearch.index.query.QueryShardContext;, +    Query query(QueryShardContext context, String queryText);]