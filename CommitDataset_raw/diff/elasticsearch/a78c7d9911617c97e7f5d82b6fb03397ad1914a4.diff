[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.aggregations.PipelineAggregatorBuilder;, +    public SearchRequestBuilder addAggregation(AggregationBuilder aggregation) {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.aggregations.PipelineAggregatorBuilder;, +    public SearchRequestBuilder addAggregation(AggregationBuilder aggregation) {, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.PipelineAggregatorBuilder;, +    public void registerAggregation(Writeable.Reader<? extends AggregationBuilder> reader, Aggregator.Parser aggregationParser,, +    public void registerPipelineAggregation(Writeable.Reader<? extends PipelineAggregatorBuilder> reader,, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.aggregations.PipelineAggregatorBuilder;, +    public SearchRequestBuilder addAggregation(AggregationBuilder aggregation) {, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.PipelineAggregatorBuilder;, +    public void registerAggregation(Writeable.Reader<? extends AggregationBuilder> reader, Aggregator.Parser aggregationParser,, +    public void registerPipelineAggregation(Writeable.Reader<? extends PipelineAggregatorBuilder> reader,, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AbstractAggregationBuilder.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search.aggregations;, +, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.search.aggregations.InternalAggregation.Type;, +import org.elasticsearch.search.aggregations.support.AggregationContext;, +, +import java.io.IOException;, +import java.util.Map;, +import java.util.Objects;, +, +/**, + * Base implementation of a {@link AggregationBuilder}., + */, +public abstract class AbstractAggregationBuilder<AB extends AbstractAggregationBuilder<AB>>, +    extends AggregationBuilder {, +, +    protected Map<String, Object> metaData;, +, +    /**, +     * Constructs a new aggregation builder., +     *, +     * @param name  The aggregation name, +     * @param type  The aggregation type, +     */, +    public AbstractAggregationBuilder(String name, Type type) {, +        super(name, type);, +    }, +, +    /**, +     * Read from a stream., +     */, +    protected AbstractAggregationBuilder(StreamInput in, Type type) throws IOException {, +        super(in.readString(), type);, +        factoriesBuilder = new AggregatorFactories.Builder(in);, +        metaData = in.readMap();, +    }, +, +    @Override, +    public final void writeTo(StreamOutput out) throws IOException {, +        out.writeString(name);, +        factoriesBuilder.writeTo(out);, +        out.writeMap(metaData);, +        doWriteTo(out);, +    }, +, +    protected abstract void doWriteTo(StreamOutput out) throws IOException;, +, +    @SuppressWarnings("unchecked"), +    @Override, +    public AB subAggregation(AggregationBuilder aggregation) {, +        if (aggregation == null) {, +            throw new IllegalArgumentException("[aggregation] must not be null: [" + name + "]");, +        }, +        factoriesBuilder.addAggregator(aggregation);, +        return (AB) this;, +    }, +, +    /**, +     * Add a sub aggregation to this aggregation., +     */, +    @SuppressWarnings("unchecked"), +    @Override]