[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                .put("byte", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.BYTE)), +                .put("short", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.SHORT)), +                .put("int", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.INT)), +                .put("long", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.LONG)), +                .put(Tuple.tuple("byte", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.BYTE)), +                .put(Tuple.tuple("short", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.SHORT)), +                .put(Tuple.tuple("int", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.INT)), +                .put(Tuple.tuple("long", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.LONG)), +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                .put("byte", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.BYTE)), +                .put("short", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.SHORT)), +                .put("int", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.INT)), +                .put("long", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.LONG)), +                .put(Tuple.tuple("byte", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.BYTE)), +                .put(Tuple.tuple("short", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.SHORT)), +                .put(Tuple.tuple("int", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.INT)), +                .put(Tuple.tuple("long", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.LONG)), +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexNumericFieldData.java, +import org.apache.lucene.index.TermsEnum;, +import org.elasticsearch.index.fielddata.ordinals.OrdinalsBuilder;, +        public final TermsEnum wrapTermsEnum(TermsEnum termsEnum) {, +            if (requiredBits() > 32) {, +                return OrdinalsBuilder.wrapNumeric64Bit(termsEnum);, +            } else {, +                return OrdinalsBuilder.wrapNumeric32Bit(termsEnum);, +            }, +        }, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                .put("byte", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.BYTE)), +                .put("short", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.SHORT)), +                .put("int", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.INT)), +                .put("long", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.LONG)), +                .put(Tuple.tuple("byte", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.BYTE)), +                .put(Tuple.tuple("short", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.SHORT)), +                .put(Tuple.tuple("int", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.INT)), +                .put(Tuple.tuple("long", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.LONG)), +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexNumericFieldData.java, +import org.apache.lucene.index.TermsEnum;, +import org.elasticsearch.index.fielddata.ordinals.OrdinalsBuilder;, +        public final TermsEnum wrapTermsEnum(TermsEnum termsEnum) {, +            if (requiredBits() > 32) {, +                return OrdinalsBuilder.wrapNumeric64Bit(termsEnum);, +            } else {, +                return OrdinalsBuilder.wrapNumeric32Bit(termsEnum);, +            }, +        }, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/OrdinalsBuilder.java, + * <tt>1</tt> based monotonically increasing positive integers. <tt>0</tt>, +    public OrdinalsBuilder(Terms terms, boolean preDefineBitsRequired, int maxDoc, Allocator allocator, float acceptableOverheadRatio) throws IOException {, +        this(null, false, maxDoc, PackedInts.DEFAULT);, +    public OrdinalsBuilder(Terms terms, boolean preDefineBitsRequired, int maxDoc, float acceptableOverheadRatio) throws IOException {, +        this(terms, preDefineBitsRequired, maxDoc, new DirectAllocator(), acceptableOverheadRatio);, +    public OrdinalsBuilder(Terms terms, int maxDoc, float acceptableOverheadRatio) throws IOException {, +        this(terms, true, maxDoc, new DirectAllocator(), acceptableOverheadRatio);, +    public static TermsEnum wrapNumeric64Bit(TermsEnum termsEnum) {, +    public static TermsEnum wrapNumeric32Bit(TermsEnum termsEnum) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                .put("byte", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.BYTE)), +                .put("short", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.SHORT)), +                .put("int", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.INT)), +                .put("long", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.LONG)), +                .put(Tuple.tuple("byte", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.BYTE)), +                .put(Tuple.tuple("short", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.SHORT)), +                .put(Tuple.tuple("int", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.INT)), +                .put(Tuple.tuple("long", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.LONG)), +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexNumericFieldData.java, +import org.apache.lucene.index.TermsEnum;, +import org.elasticsearch.index.fielddata.ordinals.OrdinalsBuilder;, +        public final TermsEnum wrapTermsEnum(TermsEnum termsEnum) {, +            if (requiredBits() > 32) {, +                return OrdinalsBuilder.wrapNumeric64Bit(termsEnum);, +            } else {, +                return OrdinalsBuilder.wrapNumeric32Bit(termsEnum);, +            }, +        }, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/OrdinalsBuilder.java, + * <tt>1</tt> based monotonically increasing positive integers. <tt>0</tt>, +    public OrdinalsBuilder(Terms terms, boolean preDefineBitsRequired, int maxDoc, Allocator allocator, float acceptableOverheadRatio) throws IOException {, +        this(null, false, maxDoc, PackedInts.DEFAULT);, +    public OrdinalsBuilder(Terms terms, boolean preDefineBitsRequired, int maxDoc, float acceptableOverheadRatio) throws IOException {, +        this(terms, preDefineBitsRequired, maxDoc, new DirectAllocator(), acceptableOverheadRatio);, +    public OrdinalsBuilder(Terms terms, int maxDoc, float acceptableOverheadRatio) throws IOException {, +        this(terms, true, maxDoc, new DirectAllocator(), acceptableOverheadRatio);, +    public static TermsEnum wrapNumeric64Bit(TermsEnum termsEnum) {, +    public static TermsEnum wrapNumeric32Bit(TermsEnum termsEnum) {, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +                .put("byte", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.BYTE)), +                .put("short", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.SHORT)), +                .put("int", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.INT)), +                .put("long", new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.LONG)), +                .put(Tuple.tuple("byte", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.BYTE)), +                .put(Tuple.tuple("short", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.SHORT)), +                .put(Tuple.tuple("int", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.INT)), +                .put(Tuple.tuple("long", "array"), new PackedArrayIndexFieldData.Builder().setNumericType(IndexNumericFieldData.NumericType.LONG)), +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexNumericFieldData.java, +import org.apache.lucene.index.TermsEnum;, +import org.elasticsearch.index.fielddata.ordinals.OrdinalsBuilder;, +        public final TermsEnum wrapTermsEnum(TermsEnum termsEnum) {]