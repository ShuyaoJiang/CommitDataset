[+++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +            if (readerOrds.getMaxOrd() > Long.MAX_VALUE / 4) {, +        assert termsIndex.ordinals() != null;, +        assert termsIndex.ordinals() != null;, +        return binarySearch(a, key, Ordinals.MIN_ORDINAL, a.ordinals().getMaxOrd() - 1);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +            if (readerOrds.getMaxOrd() > Long.MAX_VALUE / 4) {, +        assert termsIndex.ordinals() != null;, +        assert termsIndex.ordinals() != null;, +        return binarySearch(a, key, Ordinals.MIN_ORDINAL, a.ordinals().getMaxOrd() - 1);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/DocIdOrdinals.java, +        return Ordinals.MIN_ORDINAL + numDocs;, +    public static class Docs extends Ordinals.AbstractDocs {, +            super(parent);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +            if (readerOrds.getMaxOrd() > Long.MAX_VALUE / 4) {, +        assert termsIndex.ordinals() != null;, +        assert termsIndex.ordinals() != null;, +        return binarySearch(a, key, Ordinals.MIN_ORDINAL, a.ordinals().getMaxOrd() - 1);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/DocIdOrdinals.java, +        return Ordinals.MIN_ORDINAL + numDocs;, +    public static class Docs extends Ordinals.AbstractDocs {, +            super(parent);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +public enum EmptyOrdinals implements Ordinals {, +    INSTANCE;, +    public static class Docs extends Ordinals.AbstractDocs {, +            super(parent);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +            if (readerOrds.getMaxOrd() > Long.MAX_VALUE / 4) {, +        assert termsIndex.ordinals() != null;, +        assert termsIndex.ordinals() != null;, +        return binarySearch(a, key, Ordinals.MIN_ORDINAL, a.ordinals().getMaxOrd() - 1);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/DocIdOrdinals.java, +        return Ordinals.MIN_ORDINAL + numDocs;, +    public static class Docs extends Ordinals.AbstractDocs {, +            super(parent);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +public enum EmptyOrdinals implements Ordinals {, +    INSTANCE;, +    public static class Docs extends Ordinals.AbstractDocs {, +            super(parent);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsIndexFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +            if (readerOrds.getMaxOrd() > Long.MAX_VALUE / 4) {, +        assert termsIndex.ordinals() != null;, +        assert termsIndex.ordinals() != null;, +        return binarySearch(a, key, Ordinals.MIN_ORDINAL, a.ordinals().getMaxOrd() - 1);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/DocIdOrdinals.java, +        return Ordinals.MIN_ORDINAL + numDocs;, +    public static class Docs extends Ordinals.AbstractDocs {, +            super(parent);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +public enum EmptyOrdinals implements Ordinals {, +    INSTANCE;, +    public static class Docs extends Ordinals.AbstractDocs {, +            super(parent);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsIndexFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/InternalGlobalOrdinalsBuilder.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +            if (readerOrds.getMaxOrd() > Long.MAX_VALUE / 4) {, +        assert termsIndex.ordinals() != null;, +        assert termsIndex.ordinals() != null;, +        return binarySearch(a, key, Ordinals.MIN_ORDINAL, a.ordinals().getMaxOrd() - 1);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/DocIdOrdinals.java, +        return Ordinals.MIN_ORDINAL + numDocs;, +    public static class Docs extends Ordinals.AbstractDocs {, +            super(parent);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +public enum EmptyOrdinals implements Ordinals {, +    INSTANCE;, +    public static class Docs extends Ordinals.AbstractDocs {, +            super(parent);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsIndexFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/InternalGlobalOrdinalsBuilder.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/MultiOrdinals.java, +    static class MultiDocs extends Ordinals.AbstractDocs {, +            super(ordinals);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +            if (readerOrds.getMaxOrd() > Long.MAX_VALUE / 4) {, +        assert termsIndex.ordinals() != null;, +        assert termsIndex.ordinals() != null;, +        return binarySearch(a, key, Ordinals.MIN_ORDINAL, a.ordinals().getMaxOrd() - 1);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/DocIdOrdinals.java, +        return Ordinals.MIN_ORDINAL + numDocs;, +    public static class Docs extends Ordinals.AbstractDocs {, +            super(parent);, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +public enum EmptyOrdinals implements Ordinals {, +    INSTANCE;, +    public static class Docs extends Ordinals.AbstractDocs {, +            super(parent);]