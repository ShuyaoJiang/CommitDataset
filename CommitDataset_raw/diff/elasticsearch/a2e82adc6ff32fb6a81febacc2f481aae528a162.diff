[+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/core/src/main/java/org/elasticsearch/action/DocumentRequest.java, + * Generic interface to group ActionRequest, which work on single document level, + *, + * Forces this class return index/type/id getters, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/core/src/main/java/org/elasticsearch/action/DocumentRequest.java, + * Generic interface to group ActionRequest, which work on single document level, + *, + * Forces this class return index/type/id getters, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected PrimaryResult shardOperationOnPrimary(ShardFlushRequest shardRequest, IndexShard primary) {, +        primary.flush(shardRequest.getRequest());, +        logger.trace("{} flush request executed on primary", primary.shardId());, +    protected ReplicaResult shardOperationOnReplica(ShardFlushRequest request, IndexShard replica) {, +        replica.flush(request.getRequest());, +        logger.trace("{} flush request executed on replica", replica.shardId());, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/core/src/main/java/org/elasticsearch/action/DocumentRequest.java, + * Generic interface to group ActionRequest, which work on single document level, + *, + * Forces this class return index/type/id getters, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected PrimaryResult shardOperationOnPrimary(ShardFlushRequest shardRequest, IndexShard primary) {, +        primary.flush(shardRequest.getRequest());, +        logger.trace("{} flush request executed on primary", primary.shardId());, +    protected ReplicaResult shardOperationOnReplica(ShardFlushRequest request, IndexShard replica) {, +        replica.flush(request.getRequest());, +        logger.trace("{} flush request executed on replica", replica.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected PrimaryResult shardOperationOnPrimary(BasicReplicationRequest shardRequest, IndexShard primary) {, +        primary.refresh("api");, +        logger.trace("{} refresh request executed on primary", primary.shardId());, +    protected ReplicaResult shardOperationOnReplica(BasicReplicationRequest request, IndexShard replica) {, +        replica.refresh("api");, +        logger.trace("{} refresh request executed on replica", replica.shardId());, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/core/src/main/java/org/elasticsearch/action/DocumentRequest.java, + * Generic interface to group ActionRequest, which work on single document level, + *, + * Forces this class return index/type/id getters, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected PrimaryResult shardOperationOnPrimary(ShardFlushRequest shardRequest, IndexShard primary) {, +        primary.flush(shardRequest.getRequest());, +        logger.trace("{} flush request executed on primary", primary.shardId());, +    protected ReplicaResult shardOperationOnReplica(ShardFlushRequest request, IndexShard replica) {, +        replica.flush(request.getRequest());, +        logger.trace("{} flush request executed on replica", replica.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected PrimaryResult shardOperationOnPrimary(BasicReplicationRequest shardRequest, IndexShard primary) {, +        primary.refresh("api");, +        logger.trace("{} refresh request executed on primary", primary.shardId());, +    protected ReplicaResult shardOperationOnReplica(BasicReplicationRequest request, IndexShard replica) {, +        replica.refresh("api");, +        logger.trace("{} refresh request executed on replica", replica.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemRequest.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.IndicesRequest;, +    private ActionRequest request;, +    public BulkItemRequest(int id, ActionRequest request) {, +        assert request instanceof IndicesRequest;, +    public ActionRequest request() {, +        IndicesRequest indicesRequest = (IndicesRequest) request;, +        assert indicesRequest.indices().length == 1;, +        return indicesRequest.indices()[0];, +            request = new IndexRequest();, +            request = new DeleteRequest();, +            request = new UpdateRequest();, +        request.readFrom(in);, +        request.writeTo(out);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/core/src/main/java/org/elasticsearch/action/DocumentRequest.java, + * Generic interface to group ActionRequest, which work on single document level, + *, + * Forces this class return index/type/id getters, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected PrimaryResult shardOperationOnPrimary(ShardFlushRequest shardRequest, IndexShard primary) {, +        primary.flush(shardRequest.getRequest());, +        logger.trace("{} flush request executed on primary", primary.shardId());]