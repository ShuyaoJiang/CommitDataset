[+++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/InternalAwsS3Service.java, +        logger.debug("creating S3 client with client_name [{}], endpoint [{}], path_style_access [{}]",, +            clientName, clientSettings.endpoint, pathStyleAccess);, +        ClientConfiguration configuration = buildConfiguration(clientSettings, repositorySettings);, +    static ClientConfiguration buildConfiguration(S3ClientSettings clientSettings, Settings repositorySettings) {, +        Integer maxRetries = getRepoValue(repositorySettings, S3Repository.Repository.MAX_RETRIES_SETTING, clientSettings.maxRetries);, +        boolean useThrottleRetries = getRepoValue(repositorySettings,, +            S3Repository.Repository.USE_THROTTLE_RETRIES_SETTING, clientSettings.throttleRetries);, +    /** Returns the value for a given setting from the repository, or returns the fallback value. */, +    private static <T> T getRepoValue(Settings repositorySettings, Setting<T> repositorySetting, T fallback) {, +        if (repositorySetting.exists(repositorySettings)) {, +            return repositorySetting.get(repositorySettings);, +        }, +        return fallback;, +    }, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/InternalAwsS3Service.java, +        logger.debug("creating S3 client with client_name [{}], endpoint [{}], path_style_access [{}]",, +            clientName, clientSettings.endpoint, pathStyleAccess);, +        ClientConfiguration configuration = buildConfiguration(clientSettings, repositorySettings);, +    static ClientConfiguration buildConfiguration(S3ClientSettings clientSettings, Settings repositorySettings) {, +        Integer maxRetries = getRepoValue(repositorySettings, S3Repository.Repository.MAX_RETRIES_SETTING, clientSettings.maxRetries);, +        boolean useThrottleRetries = getRepoValue(repositorySettings,, +            S3Repository.Repository.USE_THROTTLE_RETRIES_SETTING, clientSettings.throttleRetries);, +    /** Returns the value for a given setting from the repository, or returns the fallback value. */, +    private static <T> T getRepoValue(Settings repositorySettings, Setting<T> repositorySetting, T fallback) {, +        if (repositorySetting.exists(repositorySettings)) {, +            return repositorySetting.get(repositorySettings);, +        }, +        return fallback;, +    }, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3ClientSettings.java, +import org.elasticsearch.common.settings.Setting.Property;, +        key -> new Setting<>(key, "", s -> s.toLowerCase(Locale.ROOT), Property.NodeScope));, +        key -> new Setting<>(key, "https", s -> Protocol.valueOf(s.toUpperCase(Locale.ROOT)), Property.NodeScope));, +        key -> Setting.simpleString(key, Property.NodeScope));, +        key -> Setting.intSetting(key, 80, 0, 1<<16, Property.NodeScope));, +        key -> Setting.timeSetting(key, TimeValue.timeValueMillis(ClientConfiguration.DEFAULT_SOCKET_TIMEOUT), Property.NodeScope));, +, +    /** The number of retries to use when an s3 request fails. */, +    static final Setting.AffixSetting<Integer> MAX_RETRIES_SETTING = Setting.affixKeySetting(PREFIX, "max_retries",, +        key -> Setting.intSetting(key, S3Repository.Repositories.MAX_RETRIES_SETTING, 0, Property.NodeScope));, +, +    /** Whether retries should be throttled (ie use backoff). */, +    static final Setting.AffixSetting<Boolean> USE_THROTTLE_RETRIES_SETTING = Setting.affixKeySetting(PREFIX, "use_throttle_retries",, +        key -> Setting.boolSetting(key, S3Repository.Repositories.USE_THROTTLE_RETRIES_SETTING, Property.NodeScope));, +    /** The number of retries to use for the s3 client. */, +    final int maxRetries;, +, +    /** Whether the s3 client should use an exponential backoff retry policy. */, +    final boolean throttleRetries;, +, +                             String proxyHost, int proxyPort, String proxyUsername, String proxyPassword,, +                             int readTimeoutMillis, int maxRetries, boolean throttleRetries) {, +        this.maxRetries = maxRetries;, +        this.throttleRetries = throttleRetries;, +                (int)getConfigValue(settings, clientName, READ_TIMEOUT_SETTING).millis(),, +                getConfigValue(settings, clientName, MAX_RETRIES_SETTING),, +                getConfigValue(settings, clientName, USE_THROTTLE_RETRIES_SETTING), +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/InternalAwsS3Service.java, +        logger.debug("creating S3 client with client_name [{}], endpoint [{}], path_style_access [{}]",, +            clientName, clientSettings.endpoint, pathStyleAccess);, +        ClientConfiguration configuration = buildConfiguration(clientSettings, repositorySettings);, +    static ClientConfiguration buildConfiguration(S3ClientSettings clientSettings, Settings repositorySettings) {, +        Integer maxRetries = getRepoValue(repositorySettings, S3Repository.Repository.MAX_RETRIES_SETTING, clientSettings.maxRetries);, +        boolean useThrottleRetries = getRepoValue(repositorySettings,, +            S3Repository.Repository.USE_THROTTLE_RETRIES_SETTING, clientSettings.throttleRetries);, +    /** Returns the value for a given setting from the repository, or returns the fallback value. */, +    private static <T> T getRepoValue(Settings repositorySettings, Setting<T> repositorySetting, T fallback) {, +        if (repositorySetting.exists(repositorySettings)) {, +            return repositorySetting.get(repositorySettings);, +        }, +        return fallback;, +    }, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3ClientSettings.java, +import org.elasticsearch.common.settings.Setting.Property;, +        key -> new Setting<>(key, "", s -> s.toLowerCase(Locale.ROOT), Property.NodeScope));, +        key -> new Setting<>(key, "https", s -> Protocol.valueOf(s.toUpperCase(Locale.ROOT)), Property.NodeScope));, +        key -> Setting.simpleString(key, Property.NodeScope));, +        key -> Setting.intSetting(key, 80, 0, 1<<16, Property.NodeScope));, +        key -> Setting.timeSetting(key, TimeValue.timeValueMillis(ClientConfiguration.DEFAULT_SOCKET_TIMEOUT), Property.NodeScope));, +, +    /** The number of retries to use when an s3 request fails. */, +    static final Setting.AffixSetting<Integer> MAX_RETRIES_SETTING = Setting.affixKeySetting(PREFIX, "max_retries",, +        key -> Setting.intSetting(key, S3Repository.Repositories.MAX_RETRIES_SETTING, 0, Property.NodeScope));, +, +    /** Whether retries should be throttled (ie use backoff). */, +    static final Setting.AffixSetting<Boolean> USE_THROTTLE_RETRIES_SETTING = Setting.affixKeySetting(PREFIX, "use_throttle_retries",, +        key -> Setting.boolSetting(key, S3Repository.Repositories.USE_THROTTLE_RETRIES_SETTING, Property.NodeScope));, +    /** The number of retries to use for the s3 client. */, +    final int maxRetries;, +, +    /** Whether the s3 client should use an exponential backoff retry policy. */, +    final boolean throttleRetries;, +, +                             String proxyHost, int proxyPort, String proxyUsername, String proxyPassword,, +                             int readTimeoutMillis, int maxRetries, boolean throttleRetries) {, +        this.maxRetries = maxRetries;]