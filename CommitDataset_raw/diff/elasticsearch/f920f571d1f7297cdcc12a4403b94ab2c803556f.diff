[+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/TestingConventionsTasks.java, +import java.util.Collections;, +            final Map<String, Set<File>> classFilesPerTask = classFilesPerTask(allTestClassFiles);, +            Map<String, Set<Class<?>>> testClassesPerTask = classFilesPerTask.entrySet().stream(), +                        classFilesPerTask.keySet().stream(), +                            .collect(Collectors.joining(",")) + ")",, +                            classFilesPerTask.values().stream(), +    public Map<String, Set<File>> classFilesPerTask(FileTree testClassFiles) {, +        Map<String, Set<File>> collector = new HashMap<>();, +        // RandomizedTestingTask, +        collector.putAll(, +            )), +        );, +        // Gradle Test, +        collector.putAll(, +            Stream.concat(, +                )), +        );, +        return Collections.unmodifiableMap(collector);, +            // Include the message to get more info to get more a more useful message when running Gradle without -s, +            throw new IllegalStateException(, +                "Failed to inspect class " + clazz.getName() + ". Missing class? " + e.getMessage(),, +                e);, +        // Loading the classes depends on the classpath, so we could make this an input annotated with @Classpath., +        // The reason we don't is that test classes are already inputs and while the dependencies are needed to load, +        // the classes these don't influence the checks done by this task., +        // A side effect is that we could mark as up-to-date with missing dependencies, but these will be found when, +        // running the tests., +            getProject().getConfigurations().getByName("testRuntime").resolve(),]