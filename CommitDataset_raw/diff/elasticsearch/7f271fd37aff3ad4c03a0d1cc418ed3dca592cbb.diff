[+++ b/README.md, +* `access_key`: The access key to use for authentication. Defaults to value of `cloud.aws.access_key`., +* `secret_key`: The secret key to use for authentication. Defaults to value of `cloud.aws.secret_key`., +Multiple S3 repositories can be created. If the buckets require different credentials, then define them as part of the repository settings., +Integrations tests in this plugin require working AWS configuration and therefore disabled by default. Three buckets and two iam users have to be created. The first iam user needs access to two buckets in different regions and the final bucket is exclusive for the other iam user. To enable tests prepare a config file elasticsearch.yml with the following content:, +        private-bucket:, +            bucket: <bucket not accessible by default key>, +            access_key: <access key>, +            secret_key: <access key>, +        remote-bucket:, +            bucket: <bucket in other region>, +            region: <region>, +Replace all occurrences of `access_key`, `secret_key`, `bucket` and `region` with your settings. Please, note that the test will delete all snapshot/restore related files in the specified buckets., +++ b/README.md, +* `access_key`: The access key to use for authentication. Defaults to value of `cloud.aws.access_key`., +* `secret_key`: The secret key to use for authentication. Defaults to value of `cloud.aws.secret_key`., +Multiple S3 repositories can be created. If the buckets require different credentials, then define them as part of the repository settings., +Integrations tests in this plugin require working AWS configuration and therefore disabled by default. Three buckets and two iam users have to be created. The first iam user needs access to two buckets in different regions and the final bucket is exclusive for the other iam user. To enable tests prepare a config file elasticsearch.yml with the following content:, +        private-bucket:, +            bucket: <bucket not accessible by default key>, +            access_key: <access key>, +            secret_key: <access key>, +        remote-bucket:, +            bucket: <bucket in other region>, +            region: <region>, +Replace all occurrences of `access_key`, `secret_key`, `bucket` and `region` with your settings. Please, note that the test will delete all snapshot/restore related files in the specified buckets., +++ b/src/main/java/org/elasticsearch/cloud/aws/AwsS3Service.java, +import java.util.HashMap;, +import java.util.Map;, +, +import org.elasticsearch.common.collect.Tuple;, +    /**, +     * (acceskey, endpoint) -> client, +     */, +    private Map<Tuple<String, String>, AmazonS3Client> clients = new HashMap<Tuple<String,String>, AmazonS3Client>();, +        String endpoint = getDefaultEndpoint();, +        String account = componentSettings.get("access_key", settings.get("cloud.account"));, +        String key = componentSettings.get("secret_key", settings.get("cloud.key"));, +, +        return getClient(endpoint, account, key);, +    }, +, +    public synchronized AmazonS3 client(String region, String account, String key) {, +        String endpoint;, +        if (region == null) {, +            endpoint = getDefaultEndpoint();, +        } else {, +            endpoint = getEndpoint(region);, +            logger.debug("using s3 region [{}], with endpoint [{}]", region, endpoint);, +        }, +        if (account == null || key == null) {, +            account = componentSettings.get("access_key", settings.get("cloud.account"));, +            key = componentSettings.get("secret_key", settings.get("cloud.key"));, +        }, +, +        return getClient(endpoint, account, key);, +    }, +, +, +    private synchronized AmazonS3 getClient(String endpoint, String account, String key) {, +        Tuple<String, String> clientDescriptor = new Tuple<String, String>(endpoint, account);, +        AmazonS3Client client = clients.get(clientDescriptor);, +        client = new AmazonS3Client(credentials, clientConfiguration);, +        if (endpoint != null) {, +        }, +        clients.put(clientDescriptor, client);, +        return client;, +    }, +, +    private String getDefaultEndpoint() {, +        String endpoint = null;, +        if (componentSettings.get("s3.endpoint") != null) {, +            endpoint = componentSettings.get("s3.endpoint");, +            logger.debug("using explicit s3 endpoint [{}]", endpoint);, +            endpoint = getEndpoint(region);, +            logger.debug("using s3 region [{}], with endpoint [{}]", region, endpoint);, +        }, +        return endpoint;, +    }, +, +    private static String getEndpoint(String region) {, +            return "s3.amazonaws.com";, +            return "s3.amazonaws.com";, +            return "s3-us-west-1.amazonaws.com";, +            return "s3-us-west-1.amazonaws.com";, +            return "s3-us-west-2.amazonaws.com";, +            return "s3-ap-southeast-1.amazonaws.com";, +            return "s3-ap-southeast-1.amazonaws.com";, +            return "s3-ap-southeast-2.amazonaws.com";, +            return "s3-ap-northeast-1.amazonaws.com";, +            return "s3-ap-northeast-1.amazonaws.com";, +            return "s3-eu-west-1.amazonaws.com";, +            return "s3-eu-west-1.amazonaws.com";, +            return "s3-sa-east-1.amazonaws.com";, +            return "s3-sa-east-1.amazonaws.com";, +        for (AmazonS3Client client : clients.values()) {, +++ b/README.md, +* `access_key`: The access key to use for authentication. Defaults to value of `cloud.aws.access_key`., +* `secret_key`: The secret key to use for authentication. Defaults to value of `cloud.aws.secret_key`., +Multiple S3 repositories can be created. If the buckets require different credentials, then define them as part of the repository settings.]