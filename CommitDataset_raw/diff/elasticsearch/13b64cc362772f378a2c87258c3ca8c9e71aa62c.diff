[+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java, +        assert bucketOrd == 0;, +        final int prevParentDoc = parentDocs.prevSetBit(parentDoc - 1);, +        int childDocId = childDocs.docID();, +        if (childDocId <= prevParentDoc) {, +            childDocId = childDocs.advance(prevParentDoc + 1);, +        int numChildren = 0;, +        for (; childDocId < parentDoc; childDocId = childDocs.nextDoc()) {, +            collectBucketNoCounts(childDocId, bucketOrd);, +            numChildren += 1;, +        }, +        incrementBucketDocCount(bucketOrd, numChildren);, +            if (collectsFromSingleBucket == false) {, +                return asMultiBucketAggregator(this, context, parent);, +            }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java, +        assert bucketOrd == 0;, +        final int prevParentDoc = parentDocs.prevSetBit(parentDoc - 1);, +        int childDocId = childDocs.docID();, +        if (childDocId <= prevParentDoc) {, +            childDocId = childDocs.advance(prevParentDoc + 1);, +        int numChildren = 0;, +        for (; childDocId < parentDoc; childDocId = childDocs.nextDoc()) {, +            collectBucketNoCounts(childDocId, bucketOrd);, +            numChildren += 1;, +        }, +        incrementBucketDocCount(bucketOrd, numChildren);, +            if (collectsFromSingleBucket == false) {, +                return asMultiBucketAggregator(this, context, parent);, +            }, +++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/ReverseNestedTests.java]