[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import java.util.Objects;, +import java.util.function.Supplier;, +    final ShardsAllocator shardsAllocator;, +        this.shardsAllocator = createShardsAllocator(settings, clusterService.getClusterSettings(), clusterPlugins);, +    private static ShardsAllocator createShardsAllocator(Settings settings, ClusterSettings clusterSettings,, +                                                         List<ClusterPlugin> clusterPlugins) {, +        Map<String, Supplier<ShardsAllocator>> allocators = new HashMap<>();, +        allocators.put(BALANCED_ALLOCATOR, () -> new BalancedShardsAllocator(settings, clusterSettings));, +, +        for (ClusterPlugin plugin : clusterPlugins) {, +            plugin.getShardsAllocators(settings, clusterSettings).forEach((k, v) -> {, +                if (allocators.put(k, v) != null) {, +                    throw new IllegalArgumentException("ShardsAllocator [" + k + "] already defined");, +                }, +            });, +        }, +        String allocatorName = SHARDS_ALLOCATOR_TYPE_SETTING.get(settings);, +        Supplier<ShardsAllocator> allocatorSupplier = allocators.get(allocatorName);, +        if (allocatorSupplier == null) {, +            throw new IllegalArgumentException("Unknown ShardsAllocator [" + allocatorName + "]");, +        }, +        return Objects.requireNonNull(allocatorSupplier.get(),, +            "ShardsAllocator factory for [" + allocatorName + "] returned null");, +    }, +, +        bind(ShardsAllocator.class).toInstance(shardsAllocator);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import java.util.Objects;, +import java.util.function.Supplier;, +    final ShardsAllocator shardsAllocator;, +        this.shardsAllocator = createShardsAllocator(settings, clusterService.getClusterSettings(), clusterPlugins);, +    private static ShardsAllocator createShardsAllocator(Settings settings, ClusterSettings clusterSettings,, +                                                         List<ClusterPlugin> clusterPlugins) {, +        Map<String, Supplier<ShardsAllocator>> allocators = new HashMap<>();, +        allocators.put(BALANCED_ALLOCATOR, () -> new BalancedShardsAllocator(settings, clusterSettings));, +, +        for (ClusterPlugin plugin : clusterPlugins) {, +            plugin.getShardsAllocators(settings, clusterSettings).forEach((k, v) -> {, +                if (allocators.put(k, v) != null) {, +                    throw new IllegalArgumentException("ShardsAllocator [" + k + "] already defined");, +                }, +            });, +        }, +        String allocatorName = SHARDS_ALLOCATOR_TYPE_SETTING.get(settings);, +        Supplier<ShardsAllocator> allocatorSupplier = allocators.get(allocatorName);, +        if (allocatorSupplier == null) {, +            throw new IllegalArgumentException("Unknown ShardsAllocator [" + allocatorName + "]");, +        }, +        return Objects.requireNonNull(allocatorSupplier.get(),, +            "ShardsAllocator factory for [" + allocatorName + "] returned null");, +    }, +, +        bind(ShardsAllocator.class).toInstance(shardsAllocator);, +++ b/core/src/main/java/org/elasticsearch/plugins/ClusterPlugin.java, +import java.util.Map;, +import java.util.function.Supplier;, +import org.elasticsearch.cluster.routing.allocation.allocator.ShardsAllocator;, +, +    /**, +     * Return {@link ShardsAllocator} implementations added by this plugin., +     *, +     * The key of the returned {@link Map} is the name of the allocator, and the value, +     * is a function to construct the allocator., +     *, +     * @param settings Settings for the node, +     * @param clusterSettings Settings for the cluster, +     * @return A map of allocator implementations, +     */, +    default Map<String, Supplier<ShardsAllocator>> getShardsAllocators(Settings settings, ClusterSettings clusterSettings) {, +        return Collections.emptyMap();, +    }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import java.util.Objects;, +import java.util.function.Supplier;, +    final ShardsAllocator shardsAllocator;, +        this.shardsAllocator = createShardsAllocator(settings, clusterService.getClusterSettings(), clusterPlugins);, +    private static ShardsAllocator createShardsAllocator(Settings settings, ClusterSettings clusterSettings,, +                                                         List<ClusterPlugin> clusterPlugins) {, +        Map<String, Supplier<ShardsAllocator>> allocators = new HashMap<>();, +        allocators.put(BALANCED_ALLOCATOR, () -> new BalancedShardsAllocator(settings, clusterSettings));, +, +        for (ClusterPlugin plugin : clusterPlugins) {, +            plugin.getShardsAllocators(settings, clusterSettings).forEach((k, v) -> {, +                if (allocators.put(k, v) != null) {, +                    throw new IllegalArgumentException("ShardsAllocator [" + k + "] already defined");, +                }, +            });, +        }, +        String allocatorName = SHARDS_ALLOCATOR_TYPE_SETTING.get(settings);, +        Supplier<ShardsAllocator> allocatorSupplier = allocators.get(allocatorName);, +        if (allocatorSupplier == null) {, +            throw new IllegalArgumentException("Unknown ShardsAllocator [" + allocatorName + "]");, +        }, +        return Objects.requireNonNull(allocatorSupplier.get(),, +            "ShardsAllocator factory for [" + allocatorName + "] returned null");, +    }, +, +        bind(ShardsAllocator.class).toInstance(shardsAllocator);, +++ b/core/src/main/java/org/elasticsearch/plugins/ClusterPlugin.java]