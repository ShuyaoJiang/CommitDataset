[+++ b/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +        QuerySearchResultProvider firstResult = results.get(0).value;, +        int queueSize = firstResult.queryResult().from() + firstResult.queryResult().size();, +        if (firstResult.includeFetch()) {, +, +        // we don't use TopDocs#merge here because with TopDocs#merge, when pagination, we need to ask for "from + size" topN, +        // hits, which ends up creating a "from + size" ScoreDoc[], while in our implementation, we can actually get away with, +        // just create "size" ScoreDoc (the reverse order in the queue). would be nice to improve TopDocs#merge to allow for, +        // it in which case we won't need this logic..., +, +        if (firstResult.queryResult().topDocs() instanceof TopFieldDocs) {, +            TopFieldDocs fieldDocs = (TopFieldDocs) firstResult.queryResult().topDocs();, +        int resultDocsSize = firstResult.queryResult().size();, +        if (firstResult.includeFetch()) {, +            resultDocsSize = totalNumDocs - firstResult.queryResult().from();]