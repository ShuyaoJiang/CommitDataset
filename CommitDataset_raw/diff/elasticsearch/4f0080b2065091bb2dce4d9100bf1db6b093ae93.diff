[+++ b/src/main/java/org/elasticsearch/index/analysis/HunspellTokenFilterFactory.java, +    private final int recursionLevel;, +, +        recursionLevel = settings.getAsInt("recursion_level", 2);, +        if (recursionLevel < 0) {, +            throw new ElasticSearchIllegalArgumentException(String.format(Locale.ROOT, "Negative recursion level not allowed for hunspell [%d]", recursionLevel));, +        }, +        return new HunspellStemFilter(tokenStream, dictionary, dedup, recursionLevel);, +    public int recursionLevel() {, +        return recursionLevel;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/analysis/HunspellTokenFilterFactory.java, +    private final int recursionLevel;, +, +        recursionLevel = settings.getAsInt("recursion_level", 2);, +        if (recursionLevel < 0) {, +            throw new ElasticSearchIllegalArgumentException(String.format(Locale.ROOT, "Negative recursion level not allowed for hunspell [%d]", recursionLevel));, +        }, +        return new HunspellStemFilter(tokenStream, dictionary, dedup, recursionLevel);, +    public int recursionLevel() {, +        return recursionLevel;, +    }, +, +++ b/src/main/java/org/elasticsearch/indices/analysis/HunspellService.java, +    private final Map<String, HunspellDictionary> knownDictionaries;, +    public HunspellService(final Settings settings, final Environment env, final Map<String, HunspellDictionary> knownDictionaries) {, +        this.knownDictionaries = knownDictionaries;, +                HunspellDictionary dictionary = knownDictionaries.get(locale);, +     * @throws Exception when loading fails (due to IO errors or malformed dictionary files), +++ b/src/main/java/org/elasticsearch/index/analysis/HunspellTokenFilterFactory.java, +    private final int recursionLevel;, +, +        recursionLevel = settings.getAsInt("recursion_level", 2);, +        if (recursionLevel < 0) {, +            throw new ElasticSearchIllegalArgumentException(String.format(Locale.ROOT, "Negative recursion level not allowed for hunspell [%d]", recursionLevel));, +        }, +        return new HunspellStemFilter(tokenStream, dictionary, dedup, recursionLevel);, +    public int recursionLevel() {, +        return recursionLevel;, +    }, +, +++ b/src/main/java/org/elasticsearch/indices/analysis/HunspellService.java, +    private final Map<String, HunspellDictionary> knownDictionaries;, +    public HunspellService(final Settings settings, final Environment env, final Map<String, HunspellDictionary> knownDictionaries) {, +        this.knownDictionaries = knownDictionaries;, +                HunspellDictionary dictionary = knownDictionaries.get(locale);, +     * @throws Exception when loading fails (due to IO errors or malformed dictionary files), +++ b/src/test/java/org/elasticsearch/test/unit/index/analysis/HunspellTokenFilterFactoryTests.java, +import org.elasticsearch.common.inject.ProvisionException;, +    @Test, +    public void testDefaultRecursionLevel() throws IOException {, +        Settings settings = settingsBuilder(), +                .put("path.conf", getClass().getResource("/indices/analyze/conf_dir").getFile()), +                .put("index.analysis.filter.en_US.type", "hunspell"), +                .put("index.analysis.filter.en_US.locale", "en_US"), +                .build();, +, +        AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settings);, +        TokenFilterFactory tokenFilter = analysisService.tokenFilter("en_US");, +        assertThat(tokenFilter, instanceOf(HunspellTokenFilterFactory.class));, +        HunspellTokenFilterFactory hunspellTokenFilter = (HunspellTokenFilterFactory) tokenFilter;, +        assertThat(hunspellTokenFilter.recursionLevel(), is(2));, +    }, +, +    @Test, +    public void testCustomRecursionLevel() throws IOException {, +        Settings settings = settingsBuilder(), +                .put("path.conf", getClass().getResource("/indices/analyze/conf_dir").getFile()), +                .put("index.analysis.filter.en_US.type", "hunspell"), +                .put("index.analysis.filter.en_US.recursion_level", 0), +                .put("index.analysis.filter.en_US.locale", "en_US"), +                .build();, +, +        AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settings);, +        TokenFilterFactory tokenFilter = analysisService.tokenFilter("en_US");, +        assertThat(tokenFilter, instanceOf(HunspellTokenFilterFactory.class));, +        HunspellTokenFilterFactory hunspellTokenFilter = (HunspellTokenFilterFactory) tokenFilter;, +        assertThat(hunspellTokenFilter.recursionLevel(), is(0));, +    }, +, +    @Test(expected = ProvisionException.class), +    public void negativeRecursionLevelShouldFail() throws IOException {, +        Settings settings = settingsBuilder(), +                .put("path.conf", getClass().getResource("/indices/analyze/conf_dir").getFile()), +                .put("index.analysis.filter.en_US.type", "hunspell"), +                .put("index.analysis.filter.en_US.recursion_level", -1), +                .put("index.analysis.filter.en_US.locale", "en_US"), +                .build();, +        AnalysisTestsHelper.createAnalysisServiceFromSettings(settings);, +    }, +]