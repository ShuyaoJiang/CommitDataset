[+++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public IndexingOperation(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime, boolean canHaveDuplicates) {, +        public IndexingOperation(Term uid, ParsedDocument doc) {, +            this(uid, doc, Versions.MATCH_ANY, VersionType.INTERNAL, Origin.PRIMARY, System.nanoTime(), true);, +        public Create(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime, boolean canHaveDuplicates, boolean autoGeneratedId) {, +            super(uid, doc, version, versionType, origin, startTime, canHaveDuplicates);, +        public Create(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime) {, +            this(uid, doc, version, versionType, origin, startTime, true, false);, +        public Create(Term uid, ParsedDocument doc) {, +            super(uid, doc);, +        public Index(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime, boolean canHaveDuplicates) {, +            super(uid, doc, version, versionType, origin, startTime, canHaveDuplicates);, +        public Index(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime) {, +            super(uid, doc, version, versionType, origin, startTime, true);, +        public Index(Term uid, ParsedDocument doc) {, +            super(uid, doc);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public IndexingOperation(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime, boolean canHaveDuplicates) {, +        public IndexingOperation(Term uid, ParsedDocument doc) {, +            this(uid, doc, Versions.MATCH_ANY, VersionType.INTERNAL, Origin.PRIMARY, System.nanoTime(), true);, +        public Create(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime, boolean canHaveDuplicates, boolean autoGeneratedId) {, +            super(uid, doc, version, versionType, origin, startTime, canHaveDuplicates);, +        public Create(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime) {, +            this(uid, doc, version, versionType, origin, startTime, true, false);, +        public Create(Term uid, ParsedDocument doc) {, +            super(uid, doc);, +        public Index(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime, boolean canHaveDuplicates) {, +            super(uid, doc, version, versionType, origin, startTime, canHaveDuplicates);, +        public Index(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime) {, +            super(uid, doc, version, versionType, origin, startTime, true);, +        public Index(Term uid, ParsedDocument doc) {, +            super(uid, doc);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        return new Engine.Create(docMapper.v1().uidMapper().term(doc.uid().stringValue()), doc, version, versionType, origin, startTime, canHaveDuplicates, autoGeneratedId);, +        return new Engine.Index(docMapper.v1().uidMapper().term(doc.uid().stringValue()), doc, version, versionType, origin, startTime, canHaveDuplicates);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public IndexingOperation(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime, boolean canHaveDuplicates) {, +        public IndexingOperation(Term uid, ParsedDocument doc) {, +            this(uid, doc, Versions.MATCH_ANY, VersionType.INTERNAL, Origin.PRIMARY, System.nanoTime(), true);, +        public Create(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime, boolean canHaveDuplicates, boolean autoGeneratedId) {, +            super(uid, doc, version, versionType, origin, startTime, canHaveDuplicates);, +        public Create(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime) {, +            this(uid, doc, version, versionType, origin, startTime, true, false);, +        public Create(Term uid, ParsedDocument doc) {, +            super(uid, doc);, +        public Index(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime, boolean canHaveDuplicates) {, +            super(uid, doc, version, versionType, origin, startTime, canHaveDuplicates);, +        public Index(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime) {, +            super(uid, doc, version, versionType, origin, startTime, true);, +        public Index(Term uid, ParsedDocument doc) {, +            super(uid, doc);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        return new Engine.Create(docMapper.v1().uidMapper().term(doc.uid().stringValue()), doc, version, versionType, origin, startTime, canHaveDuplicates, autoGeneratedId);, +        return new Engine.Index(docMapper.v1().uidMapper().term(doc.uid().stringValue()), doc, version, versionType, origin, startTime, canHaveDuplicates);, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +            engine.create(new Engine.Create(newUid("1"), doc));, +            engine.create(new Engine.Create(newUid("2"), doc2));, +            engine.create(new Engine.Create(newUid("3"), doc3));, +            engine.create(new Engine.Create(newUid("4"), doc4));, +            engine.create(new Engine.Create(newUid("1"), doc));, +            engine.create(new Engine.Create(newUid("2"), doc2));, +            engine.create(new Engine.Create(newUid("3"), doc3));, +            Engine.Index index = new Engine.Index(newUid("1"), doc);, +            index = new Engine.Index(newUid("2"), doc);, +            index = new Engine.Index(newUid("3"), doc);, +            index = new Engine.Index(newUid("4"), doc);, +        engine.create(new Engine.Create(newUid("1"), doc));, +        engine.create(new Engine.Create(newUid("1"), doc));, +        engine.index(new Engine.Index(newUid("1"), doc));, +        engine.create(new Engine.Create(newUid("1"), doc));, +        engine.index(new Engine.Index(newUid("1"), doc));, +        engine.create(new Engine.Create(newUid("1"), doc));, +            engine.create(new Engine.Create(newUid("1"), doc));, +            engine.create(new Engine.Create(newUid("2"), doc));, +        engine.create(new Engine.Create(newUid("1"), doc));, +        engine.create(new Engine.Create(newUid("1"), doc));, +        engine.create(new Engine.Create(newUid("2"), doc));, +        Engine.Create create = new Engine.Create(newUid("1"), doc);, +        create = new Engine.Create(newUid("1"), doc, create.version(), create.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0);, +        Engine.Create create = new Engine.Create(newUid("1"), doc, 12, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, 0);, +        create = new Engine.Create(newUid("1"), doc, create.version(), create.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0);, +        Engine.Index index = new Engine.Index(newUid("1"), doc);, +        index = new Engine.Index(newUid("1"), doc, index.version(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0);, +        Engine.Index index = new Engine.Index(newUid("1"), doc, 12, VersionType.EXTERNAL, PRIMARY, 0);, +        index = new Engine.Index(newUid("1"), doc, index.version(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0);, +        Engine.Index index = new Engine.Index(newUid("1"), doc);, +        index = new Engine.Index(newUid("1"), doc);, +        index = new Engine.Index(newUid("1"), doc, 1l, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, 0);, +        index = new Engine.Index(newUid("1"), doc, 3l, VersionType.INTERNAL, PRIMARY, 0);, +        Engine.Index index = new Engine.Index(newUid("1"), doc, 12, VersionType.EXTERNAL, PRIMARY, 0);, +        index = new Engine.Index(newUid("1"), doc, 14, VersionType.EXTERNAL, PRIMARY, 0);, +        index = new Engine.Index(newUid("1"), doc, 13, VersionType.EXTERNAL, PRIMARY, 0);, +        Engine.Index index = new Engine.Index(newUid("1"), doc);, +        index = new Engine.Index(newUid("1"), doc);, +        index = new Engine.Index(newUid("1"), doc, 1l, VersionType.INTERNAL, PRIMARY, 0);, +        index = new Engine.Index(newUid("1"), doc, 3l, VersionType.INTERNAL, PRIMARY, 0);, +        Engine.Index index = new Engine.Index(newUid("1"), doc, 12, VersionType.EXTERNAL, PRIMARY, 0);, +        index = new Engine.Index(newUid("1"), doc, 14, VersionType.EXTERNAL, PRIMARY, 0);, +        index = new Engine.Index(newUid("1"), doc, 13, VersionType.EXTERNAL, PRIMARY, 0);, +                Engine.Index index = new Engine.Index(newUid(Integer.toString(i)), doc);]