[+++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +            IndexMetaData metaData = clusterService.state().metaData().index(index);, +, +            final MappingUpdatedAction.MappingUpdatedRequest request = new MappingUpdatedAction.MappingUpdatedRequest(index, metaData.uuid(), type, documentMapper.mappingSource());, +            mappingUpdatedAction.execute(request, new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {, +                    logger.warn("failed to update master on updated mapping for {}", e, request);, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +            IndexMetaData metaData = clusterService.state().metaData().index(index);, +, +            final MappingUpdatedAction.MappingUpdatedRequest request = new MappingUpdatedAction.MappingUpdatedRequest(index, metaData.uuid(), type, documentMapper.mappingSource());, +            mappingUpdatedAction.execute(request, new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {, +                    logger.warn("failed to update master on updated mapping for {}", e, request);, +++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +        IndexMetaData indexMetaData = clusterState.metaData().index(request.index());, +        MappingMetaData mappingMd = indexMetaData.mappingOrDefault(request.type());, +                updateMappingOnMaster(request, indexMetaData);, +                updateMappingOnMaster(request, indexMetaData);, +    private void updateMappingOnMaster(final IndexRequest request, IndexMetaData indexMetaData) {, +            final MapperService mapperService = indicesService.indexServiceSafe(request.index()).mapperService();, +            final MappingUpdatedAction.MappingUpdatedRequest mappingRequest =, +                    new MappingUpdatedAction.MappingUpdatedRequest(request.index(), indexMetaData.uuid(), request.type(), documentMapper.mappingSource());, +            logger.trace("Sending mapping updated to master: {}", mappingRequest);, +            mappingUpdatedAction.execute(mappingRequest, new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {, +                    logger.warn("Failed to update master on updated mapping for {}", e, mappingRequest);, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +            IndexMetaData metaData = clusterService.state().metaData().index(index);, +, +            final MappingUpdatedAction.MappingUpdatedRequest request = new MappingUpdatedAction.MappingUpdatedRequest(index, metaData.uuid(), type, documentMapper.mappingSource());, +            mappingUpdatedAction.execute(request, new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {, +                    logger.warn("failed to update master on updated mapping for {}", e, request);, +++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +        IndexMetaData indexMetaData = clusterState.metaData().index(request.index());, +        MappingMetaData mappingMd = indexMetaData.mappingOrDefault(request.type());, +                updateMappingOnMaster(request, indexMetaData);, +                updateMappingOnMaster(request, indexMetaData);, +    private void updateMappingOnMaster(final IndexRequest request, IndexMetaData indexMetaData) {, +            final MapperService mapperService = indicesService.indexServiceSafe(request.index()).mapperService();, +            final MappingUpdatedAction.MappingUpdatedRequest mappingRequest =, +                    new MappingUpdatedAction.MappingUpdatedRequest(request.index(), indexMetaData.uuid(), request.type(), documentMapper.mappingSource());, +            logger.trace("Sending mapping updated to master: {}", mappingRequest);, +            mappingUpdatedAction.execute(mappingRequest, new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {, +                    logger.warn("Failed to update master on updated mapping for {}", e, mappingRequest);, +++ b/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +        metaDataMappingService.updateMapping(request.index(), request.indexUUID(), request.type(), request.mappingSource(), new MetaDataMappingService.Listener() {, +                logger.warn("[{}] update-mapping [{}] failed to dynamically update the mapping in cluster_state from shard", t, request.index(), request.type());, +        private String indexUUID = IndexMetaData.INDEX_UUID_NA_VALUE;, +        public MappingUpdatedRequest(String index, String indexUUID, String type, CompressedString mappingSource) {, +            this.indexUUID = indexUUID;, +        public String indexUUID() {, +            return indexUUID;, +        }, +, +            if (in.getVersion().onOrAfter(Version.V_0_90_6)) {, +                indexUUID = in.readString();, +            }, +            if (out.getVersion().onOrAfter(Version.V_0_90_6)) {, +                out.writeString(indexUUID);, +            }, +        }, +, +        @Override, +        public String toString() {, +            return "index [" + index + "], indexUUID [" + indexUUID + "], type [" + type + "] and source [" + mappingSource + "]";, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +            IndexMetaData metaData = clusterService.state().metaData().index(index);, +, +            final MappingUpdatedAction.MappingUpdatedRequest request = new MappingUpdatedAction.MappingUpdatedRequest(index, metaData.uuid(), type, documentMapper.mappingSource());, +            mappingUpdatedAction.execute(request, new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {, +                    logger.warn("failed to update master on updated mapping for {}", e, request);, +++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +        IndexMetaData indexMetaData = clusterState.metaData().index(request.index());, +        MappingMetaData mappingMd = indexMetaData.mappingOrDefault(request.type());, +                updateMappingOnMaster(request, indexMetaData);, +                updateMappingOnMaster(request, indexMetaData);, +    private void updateMappingOnMaster(final IndexRequest request, IndexMetaData indexMetaData) {, +            final MapperService mapperService = indicesService.indexServiceSafe(request.index()).mapperService();, +            final MappingUpdatedAction.MappingUpdatedRequest mappingRequest =, +                    new MappingUpdatedAction.MappingUpdatedRequest(request.index(), indexMetaData.uuid(), request.type(), documentMapper.mappingSource());, +            logger.trace("Sending mapping updated to master: {}", mappingRequest);, +            mappingUpdatedAction.execute(mappingRequest, new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {, +                    logger.warn("Failed to update master on updated mapping for {}", e, mappingRequest);, +++ b/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +        metaDataMappingService.updateMapping(request.index(), request.indexUUID(), request.type(), request.mappingSource(), new MetaDataMappingService.Listener() {, +                logger.warn("[{}] update-mapping [{}] failed to dynamically update the mapping in cluster_state from shard", t, request.index(), request.type());, +        private String indexUUID = IndexMetaData.INDEX_UUID_NA_VALUE;, +        public MappingUpdatedRequest(String index, String indexUUID, String type, CompressedString mappingSource) {, +            this.indexUUID = indexUUID;, +        public String indexUUID() {, +            return indexUUID;]