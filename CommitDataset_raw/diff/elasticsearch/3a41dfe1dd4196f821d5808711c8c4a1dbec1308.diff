[+++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import java.nio.file.AccessDeniedException;, +import java.nio.file.AtomicMoveNotSupportedException;, +import java.nio.file.DirectoryNotEmptyException;, +import java.nio.file.FileAlreadyExistsException;, +import java.nio.file.FileSystemException;, +import java.nio.file.FileSystemLoopException;, +import java.nio.file.NotDirectoryException;, +                    final int subclass = readVInt();, +                    final Throwable throwable;, +                    switch (subclass) {, +                        case 0:, +                            throwable = new NoSuchFileException(file, other, reason);, +                            break;, +                        case 1:, +                            throwable = new NotDirectoryException(file);, +                            break;, +                        case 2:, +                            throwable = new DirectoryNotEmptyException(file);, +                            break;, +                        case 3:, +                            throwable = new AtomicMoveNotSupportedException(file, other, reason);, +                            break;, +                        case 4:, +                            throwable = new FileAlreadyExistsException(file, other, reason);, +                            break;, +                        case 5:, +                            throwable = new AccessDeniedException(file, other, reason);, +                            break;, +                        case 6:, +                            throwable = new FileSystemLoopException(file);, +                            break;, +                        case 7:, +                            throwable = new FileSystemException(file, other, reason);, +                            break;, +                        default:, +                            throw new IllegalStateException("unknown FileSystemException with index " + subclass);, +                    }, +                    return (T) readStackTrace(throwable, this);, +                case 19:, +                    return (T) readStackTrace(new IOException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import java.nio.file.AccessDeniedException;, +import java.nio.file.AtomicMoveNotSupportedException;, +import java.nio.file.DirectoryNotEmptyException;, +import java.nio.file.FileAlreadyExistsException;, +import java.nio.file.FileSystemException;, +import java.nio.file.FileSystemLoopException;, +import java.nio.file.NotDirectoryException;, +                    final int subclass = readVInt();, +                    final Throwable throwable;, +                    switch (subclass) {, +                        case 0:, +                            throwable = new NoSuchFileException(file, other, reason);, +                            break;, +                        case 1:, +                            throwable = new NotDirectoryException(file);, +                            break;, +                        case 2:, +                            throwable = new DirectoryNotEmptyException(file);, +                            break;, +                        case 3:, +                            throwable = new AtomicMoveNotSupportedException(file, other, reason);, +                            break;, +                        case 4:, +                            throwable = new FileAlreadyExistsException(file, other, reason);, +                            break;, +                        case 5:, +                            throwable = new AccessDeniedException(file, other, reason);, +                            break;, +                        case 6:, +                            throwable = new FileSystemLoopException(file);, +                            break;, +                        case 7:, +                            throwable = new FileSystemException(file, other, reason);, +                            break;, +                        default:, +                            throw new IllegalStateException("unknown FileSystemException with index " + subclass);, +                    }, +                    return (T) readStackTrace(throwable, this);, +                case 19:, +                    return (T) readStackTrace(new IOException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import java.nio.channels.ClosedChannelException;, +import java.nio.file.AccessDeniedException;, +import java.nio.file.AtomicMoveNotSupportedException;, +import java.nio.file.DirectoryNotEmptyException;, +import java.nio.file.FileAlreadyExistsException;, +import java.nio.file.FileSystemException;, +import java.nio.file.FileSystemLoopException;, +import java.nio.file.NotDirectoryException;, +            } else if (throwable instanceof FileSystemException) {, +                if (throwable instanceof NoSuchFileException) {, +                    writeVInt(0);, +                } else if (throwable instanceof NotDirectoryException) {, +                    writeVInt(1);, +                } else if (throwable instanceof DirectoryNotEmptyException) {, +                    writeVInt(2);, +                } else if (throwable instanceof AtomicMoveNotSupportedException) {, +                    writeVInt(3);]