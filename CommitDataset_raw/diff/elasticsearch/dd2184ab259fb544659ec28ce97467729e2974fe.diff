[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalStreamable(Template::new);, +        out.writeOptionalStreamable(template);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalStreamable(Template::new);, +        out.writeOptionalStreamable(template);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +            script = Script.readScript(in);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalStreamable(Template::new);, +        out.writeOptionalStreamable(template);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +            script = Script.readScript(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +        script = Script.readScript(in);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalStreamable(Template::new);, +        out.writeOptionalStreamable(template);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +            script = Script.readScript(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +        script = Script.readScript(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreFunctionBuilder.java, +        script = Script.readScript(in);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalStreamable(Template::new);, +        out.writeOptionalStreamable(template);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +            script = Script.readScript(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +        script = Script.readScript(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreFunctionBuilder.java, +        script = Script.readScript(in);, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/DateProcessor.java, +    private final String field;, +    private final List<String> formats;, +    DateProcessor(String tag, DateTimeZone timezone, Locale locale, String field, List<String> formats, String targetField) {, +        this.field = field;, +        this.formats = formats;, +        for (String format : formats) {, +            DateFormat dateFormat = DateFormat.fromString(format);, +            dateParsers.add(dateFormat.getFunction(format, timezone, locale));, +        String value = ingestDocument.getFieldValue(field, String.class);, +    String getField() {, +        return field;, +    List<String> getFormats() {, +        return formats;, +            String field = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "field");, +            List<String> formats = ConfigurationUtils.readList(TYPE, processorTag, config, "formats");, +            return new DateProcessor(processorTag, timezone, locale, field, formats, targetField);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalStreamable(Template::new);, +        out.writeOptionalStreamable(template);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +            script = Script.readScript(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +        script = Script.readScript(in);, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreFunctionBuilder.java, +        script = Script.readScript(in);, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/DateProcessor.java, +    private final String field;, +    private final List<String> formats;, +    DateProcessor(String tag, DateTimeZone timezone, Locale locale, String field, List<String> formats, String targetField) {, +        this.field = field;, +        this.formats = formats;, +        for (String format : formats) {, +            DateFormat dateFormat = DateFormat.fromString(format);, +            dateParsers.add(dateFormat.getFunction(format, timezone, locale));, +        String value = ingestDocument.getFieldValue(field, String.class);, +    String getField() {, +        return field;, +    List<String> getFormats() {, +        return formats;, +            String field = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "field");, +            List<String> formats = ConfigurationUtils.readList(TYPE, processorTag, config, "formats");, +            return new DateProcessor(processorTag, timezone, locale, field, formats, targetField);, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/RenameProcessor.java, +    private final String field;, +    private final String targetField;, +    RenameProcessor(String tag, String field, String targetField) {, +        this.field = field;, +        this.targetField = targetField;, +    String getField() {, +        return field;, +    String getTargetField() {, +        return targetField;, +        if (document.hasField(field) == false) {, +            throw new IllegalArgumentException("field [" + field + "] doesn't exist");, +        if (document.hasField(targetField)) {, +            throw new IllegalArgumentException("field [" + targetField + "] already exists");, +        Object oldValue = document.getFieldValue(field, Object.class);, +        document.setFieldValue(targetField, oldValue);, +            document.removeField(field);, +            document.removeField(targetField);, +            String targetField = ConfigurationUtils.readStringProperty(TYPE, processorTag, config, "target_field");, +            return new RenameProcessor(processorTag, field, targetField);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        template = in.readOptionalStreamable(Template::new);, +        out.writeOptionalStreamable(template);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java]