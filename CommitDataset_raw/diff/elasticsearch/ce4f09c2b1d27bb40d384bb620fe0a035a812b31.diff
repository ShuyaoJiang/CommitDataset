[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/StrictDynamicMappingException.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper;, +, +/**, + * @author kimchy (shay.banon), + */, +public class StrictDynamicMappingException extends MapperException {, +, +    public StrictDynamicMappingException(String fieldName) {, +        super("mapping set to strict, dynamic introduction of [" + fieldName + "] is not allowed");, +    }, +}, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/StrictDynamicMappingException.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper;, +, +/**, + * @author kimchy (shay.banon), + */, +public class StrictDynamicMappingException extends MapperException {, +, +    public StrictDynamicMappingException(String fieldName) {, +        super("mapping set to strict, dynamic introduction of [" + fieldName + "] is not allowed");, +    }, +}, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/ObjectMapper.java, +        public static final Dynamic DYNAMIC = null; // not set, inherited from father, +    public static enum Dynamic {, +        TRUE,, +        FALSE,, +        STRICT, +    }, +, +        protected Dynamic dynamic = Defaults.DYNAMIC;, +        public T dynamic(Dynamic dynamic) {, +        protected ObjectMapper createMapper(String name, boolean enabled, Dynamic dynamic, ContentPath.Type pathType, Map<String, XContentMapper> mappers) {, +                    String value = fieldNode.toString();, +                    if (value.equals("strict")) {, +                        builder.dynamic(Dynamic.STRICT);, +                    } else {, +                        builder.dynamic(nodeBooleanValue(fieldNode) ? Dynamic.TRUE : Dynamic.FALSE);, +                    }, +    private final Dynamic dynamic;, +    protected ObjectMapper(String name, boolean enabled, Dynamic dynamic, ContentPath.Type pathType) {, +    ObjectMapper(String name, boolean enabled, Dynamic dynamic, ContentPath.Type pathType, Map<String, XContentMapper> mappers) {, +    public final Dynamic dynamic() {, +        return this.dynamic;, +    }, +, +            Dynamic dynamic = this.dynamic;, +            if (dynamic == null) {, +                dynamic = context.root().dynamic();, +            }, +            if (dynamic == Dynamic.STRICT) {, +                throw new StrictDynamicMappingException(currentFieldName);, +            } else if (dynamic == Dynamic.TRUE) {, +        Dynamic dynamic = this.dynamic;, +        if (dynamic == null) {, +            dynamic = context.root().dynamic();, +        }, +        if (dynamic == Dynamic.STRICT) {, +            throw new StrictDynamicMappingException(currentFieldName);, +        }]