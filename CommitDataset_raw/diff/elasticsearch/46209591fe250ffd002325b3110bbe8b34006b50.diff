[+++ b/benchmarks/build.gradle, +    annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/benchmarks/build.gradle, +    annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/build.gradle, +import org.gradle.api.tasks.options.Option, +import  org.gradle.util.GradleVersion, +import  org.gradle.util.DistributionLocator, +    id 'com.gradle.build-scan' version '2.0.2', +  @Option(, +++ b/benchmarks/build.gradle, +    annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/build.gradle, +import org.gradle.api.tasks.options.Option, +import  org.gradle.util.GradleVersion, +import  org.gradle.util.DistributionLocator, +    id 'com.gradle.build-scan' version '2.0.2', +  @Option(, +++ b/buildSrc/build.gradle, +  // only run tests as build-tools, +  test.enabled = false, +  test {, +    include "**/*Tests.class", +    exclude "**/*IT.class", +    // The test task is configured to runtimeJava version, but we build-tools doesn't support all of them, so test, +    // with compiler instead on the ones that are too old., +    if (project.runtimeJavaVersion <= JavaVersion.VERSION_1_10) {, +      jvm = "${project.compilerJavaHome}/bin/java", +    }, +  }, +, +  // This can't be an RandomizedTestingTask because we can't yet reference it, +++ b/benchmarks/build.gradle, +    annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/build.gradle, +import org.gradle.api.tasks.options.Option, +import  org.gradle.util.GradleVersion, +import  org.gradle.util.DistributionLocator, +    id 'com.gradle.build-scan' version '2.0.2', +  @Option(, +++ b/buildSrc/build.gradle, +  // only run tests as build-tools, +  test.enabled = false, +  test {, +    include "**/*Tests.class", +    exclude "**/*IT.class", +    // The test task is configured to runtimeJava version, but we build-tools doesn't support all of them, so test, +    // with compiler instead on the ones that are too old., +    if (project.runtimeJavaVersion <= JavaVersion.VERSION_1_10) {, +      jvm = "${project.compilerJavaHome}/bin/java", +    }, +  }, +, +  // This can't be an RandomizedTestingTask because we can't yet reference it, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestProgressLogger.groovy, +        String statusMessage, +++ b/benchmarks/build.gradle, +    annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/build.gradle, +import org.gradle.api.tasks.options.Option, +import  org.gradle.util.GradleVersion, +import  org.gradle.util.DistributionLocator, +    id 'com.gradle.build-scan' version '2.0.2', +  @Option(, +++ b/buildSrc/build.gradle, +  // only run tests as build-tools, +  test.enabled = false, +  test {, +    include "**/*Tests.class", +    exclude "**/*IT.class", +    // The test task is configured to runtimeJava version, but we build-tools doesn't support all of them, so test, +    // with compiler instead on the ones that are too old., +    if (project.runtimeJavaVersion <= JavaVersion.VERSION_1_10) {, +      jvm = "${project.compilerJavaHome}/bin/java", +    }, +  }, +, +  // This can't be an RandomizedTestingTask because we can't yet reference it, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestProgressLogger.groovy, +        String statusMessage, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        String minimumGradleVersion = null, +        String compilerJavaHome = System.getenv('JAVA_HOME'), +        project.tasks.withType(RandomizedTestingTask) {task ->, +            // Make sure all test tasks are configured properly, +            if (name != "test") {, +                project.tasks.matching { it.name == "test"}.all { testTask ->, +                    task.testClassesDirs = testTask.testClassesDirs, +                    task.classpath = testTask.classpath, +                    task.shouldRunAfter testTask, +                }, +            }, +            // no loose ends: check has to depend on all test tasks, +            project.tasks.matching {it.name == "check"}.all {, +                dependsOn(task), +            }, +, +++ b/benchmarks/build.gradle, +    annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/build.gradle]