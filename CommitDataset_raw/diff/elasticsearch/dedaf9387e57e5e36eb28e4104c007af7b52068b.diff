[+++ b/docs/reference/api-conventions.asciidoc, +setting is also applicable when `_all`, `*` or no index has been specified. This, +settings also applies for aliases, in case an alias points to a closed index., +++ b/docs/reference/api-conventions.asciidoc, +setting is also applicable when `_all`, `*` or no index has been specified. This, +settings also applies for aliases, in case an alias points to a closed index., +++ b/src/main/java/org/elasticsearch/action/support/IndicesOptions.java, +     *         Also when an alias points to a closed index this option decides if no concrete indices, +     *         are allowed., +++ b/docs/reference/api-conventions.asciidoc, +setting is also applicable when `_all`, `*` or no index has been specified. This, +settings also applies for aliases, in case an alias points to a closed index., +++ b/src/main/java/org/elasticsearch/action/support/IndicesOptions.java, +     *         Also when an alias points to a closed index this option decides if no concrete indices, +     *         are allowed., +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +            return concreteIndices(aliasesOrIndices[0], indicesOptions, !indicesOptions.allowNoIndices());, +            String[] indices = concreteIndices(aliasOrIndex, indicesOptions, !indicesOptions.ignoreUnavailable());, +        if (indices.length == 0 && failNoIndices) {, +        // No need to check whether indices referred by aliases are closed, because there are no closed indices., +        if (allClosedIndices.length == 0) {, +            return indices;, +        }, +, +        switch (indices.length) {, +            case 0:, +                return indices;, +            case 1:, +                indexMetaData = this.indices.get(indices[0]);, +                        throw new IndexClosedException(new Index(indexMetaData.getIndex()));, +            default:, +                ObjectArrayList<String> concreteIndices = new ObjectArrayList<>();, +                for (String index : indices) {, +                    indexMetaData = this.indices.get(index);, +                    if (indexMetaData != null) {, +                        if (indexMetaData.getState() == IndexMetaData.State.CLOSE) {, +                            if (failClosed) {, +                                throw new IndexClosedException(new Index(indexMetaData.getIndex()));, +                            } else if (!options.forbidClosedIndices()) {, +                                concreteIndices.add(index);, +                            }, +                        } else if (indexMetaData.getState() == IndexMetaData.State.OPEN) {, +                            concreteIndices.add(index);, +                        } else {, +                            throw new IllegalStateException("index state [" + indexMetaData.getState() + "] not supported");, +                        }, +                    }, +                }, +                return concreteIndices.toArray(String.class);, +        }, +++ b/docs/reference/api-conventions.asciidoc, +setting is also applicable when `_all`, `*` or no index has been specified. This, +settings also applies for aliases, in case an alias points to a closed index., +++ b/src/main/java/org/elasticsearch/action/support/IndicesOptions.java, +     *         Also when an alias points to a closed index this option decides if no concrete indices, +     *         are allowed., +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +            return concreteIndices(aliasesOrIndices[0], indicesOptions, !indicesOptions.allowNoIndices());, +            String[] indices = concreteIndices(aliasOrIndex, indicesOptions, !indicesOptions.ignoreUnavailable());, +        if (indices.length == 0 && failNoIndices) {, +        // No need to check whether indices referred by aliases are closed, because there are no closed indices., +        if (allClosedIndices.length == 0) {, +            return indices;, +        }, +, +        switch (indices.length) {, +            case 0:, +                return indices;, +            case 1:, +                indexMetaData = this.indices.get(indices[0]);, +                        throw new IndexClosedException(new Index(indexMetaData.getIndex()));, +            default:, +                ObjectArrayList<String> concreteIndices = new ObjectArrayList<>();, +                for (String index : indices) {, +                    indexMetaData = this.indices.get(index);, +                    if (indexMetaData != null) {, +                        if (indexMetaData.getState() == IndexMetaData.State.CLOSE) {, +                            if (failClosed) {, +                                throw new IndexClosedException(new Index(indexMetaData.getIndex()));, +                            } else if (!options.forbidClosedIndices()) {, +                                concreteIndices.add(index);, +                            }, +                        } else if (indexMetaData.getState() == IndexMetaData.State.OPEN) {, +                            concreteIndices.add(index);, +                        } else {, +                            throw new IllegalStateException("index state [" + indexMetaData.getState() + "] not supported");, +                        }, +                    }, +                }, +                return concreteIndices.toArray(String.class);, +        }, +++ b/src/test/java/org/elasticsearch/cluster/metadata/MetaDataTests.java, +    @Test, +    public void testIndexOptions_failClosedIndicesAndAliases() {, +        MetaData.Builder mdBuilder = MetaData.builder(), +                .put(indexBuilder("foo1-closed").state(IndexMetaData.State.CLOSE).putAlias(AliasMetaData.builder("foobar1-closed")).putAlias(AliasMetaData.builder("foobar2-closed"))), +                .put(indexBuilder("foo2-closed").state(IndexMetaData.State.CLOSE).putAlias(AliasMetaData.builder("foobar2-closed"))), +                .put(indexBuilder("foo3").putAlias(AliasMetaData.builder("foobar2-closed")));, +        MetaData md = mdBuilder.build();, +]