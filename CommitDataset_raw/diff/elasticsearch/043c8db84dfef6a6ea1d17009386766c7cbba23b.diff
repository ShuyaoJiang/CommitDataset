[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/indexlifecycle/ForceMergeAction.java, +                    r4 -> {, +                        if (isReadOnly) {, +                            updateBlockWriteSettingToReadWrite(index, client, listener);, +                        } else {, +                            listener.onSuccess(true);, +                        }, +                    });, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/indexlifecycle/ForceMergeAction.java, +                    r4 -> {, +                        if (isReadOnly) {, +                            updateBlockWriteSettingToReadWrite(index, client, listener);, +                        } else {, +                            listener.onSuccess(true);, +                        }, +                    });, +++ b/x-pack/plugin/src/test/java/org/elasticsearch/xpack/indexlifecycle/ForceMergeActionTests.java, +        assertEquals(true, actionCompleted.get());, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/indexlifecycle/ForceMergeAction.java, +                    r4 -> {, +                        if (isReadOnly) {, +                            updateBlockWriteSettingToReadWrite(index, client, listener);, +                        } else {, +                            listener.onSuccess(true);, +                        }, +                    });, +++ b/x-pack/plugin/src/test/java/org/elasticsearch/xpack/indexlifecycle/ForceMergeActionTests.java, +        assertEquals(true, actionCompleted.get());, +++ b/x-pack/plugin/src/test/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleInitialisationIT.java, +        Map<String, LifecycleAction> warmPhaseActions = Collections.singletonMap(ForceMergeAction.NAME, new ForceMergeAction(10000));, +        internalCluster().startMasterOnlyNode();, +        internalCluster().startNode();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/indexlifecycle/ForceMergeAction.java, +                    r4 -> {, +                        if (isReadOnly) {, +                            updateBlockWriteSettingToReadWrite(index, client, listener);, +                        } else {, +                            listener.onSuccess(true);, +                        }, +                    });, +++ b/x-pack/plugin/src/test/java/org/elasticsearch/xpack/indexlifecycle/ForceMergeActionTests.java, +        assertEquals(true, actionCompleted.get());, +++ b/x-pack/plugin/src/test/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleInitialisationIT.java, +        Map<String, LifecycleAction> warmPhaseActions = Collections.singletonMap(ForceMergeAction.NAME, new ForceMergeAction(10000));, +        internalCluster().startMasterOnlyNode();, +        internalCluster().startNode();, +++ b/x-pack/plugin/src/test/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleServiceTests.java, +            ActionListener<UpdateSettingsResponse> listener = (ActionListener<UpdateSettingsResponse>) invocationOnMock.getArguments()[1];, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/indexlifecycle/ForceMergeAction.java, +                    r4 -> {, +                        if (isReadOnly) {, +                            updateBlockWriteSettingToReadWrite(index, client, listener);, +                        } else {, +                            listener.onSuccess(true);, +                        }, +                    });, +++ b/x-pack/plugin/src/test/java/org/elasticsearch/xpack/indexlifecycle/ForceMergeActionTests.java, +        assertEquals(true, actionCompleted.get());, +++ b/x-pack/plugin/src/test/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleInitialisationIT.java, +        Map<String, LifecycleAction> warmPhaseActions = Collections.singletonMap(ForceMergeAction.NAME, new ForceMergeAction(10000));, +        internalCluster().startMasterOnlyNode();, +        internalCluster().startNode();, +++ b/x-pack/plugin/src/test/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleServiceTests.java, +            ActionListener<UpdateSettingsResponse> listener = (ActionListener<UpdateSettingsResponse>) invocationOnMock.getArguments()[1];, +++ b/x-pack/plugin/src/test/resources/rest-api-spec/test/index_lifecycle/10_basic.yml, +                     "forcemerge": {, +                       "max_num_segments": 10000, +                     }]