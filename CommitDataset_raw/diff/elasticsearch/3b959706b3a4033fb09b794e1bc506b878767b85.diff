[+++ b/src/test/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzerIntegrationTests.java, +import org.elasticsearch.test.ElasticsearchTestCase;, +@ElasticsearchTestCase.CompatibilityVersion(version = Version.V_1_2_0_ID) // we throw an exception if we create an index with _field_names that is 1.3, +++ b/src/test/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzerIntegrationTests.java, +import org.elasticsearch.test.ElasticsearchTestCase;, +@ElasticsearchTestCase.CompatibilityVersion(version = Version.V_1_2_0_ID) // we throw an exception if we create an index with _field_names that is 1.3, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +                if (globalCompatibilityVersion().before(Version.V_1_2_0)) {, +++ b/src/test/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzerIntegrationTests.java, +import org.elasticsearch.test.ElasticsearchTestCase;, +@ElasticsearchTestCase.CompatibilityVersion(version = Version.V_1_2_0_ID) // we throw an exception if we create an index with _field_names that is 1.3, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +                if (globalCompatibilityVersion().before(Version.V_1_2_0)) {, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchTestCase.java, +import org.junit.Ignore;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +    /**, +     * Property that allows to adapt the tests behaviour to older features/bugs based on the input version, +     */, +    private static final String TESTS_COMPATIBILITY = "tests.compatibility";, +, +    private static final Version GLOABL_COMPATIBILITY_VERSION = Version.fromString(compatibilityVersionProperty());, +, +        if (globalCompatibilityVersion().onOrAfter(Version.V_1_2_0)) {, +        } else {, +            // CBOR was added in 1.2.0 earlier version can't derive the format, +            XContentType type = randomFrom(XContentType.values());, +            while(type == XContentType.CBOR) {, +                type = randomFrom(XContentType.values());, +            }, +            return type;, +        }, +, +, +    /**, +     * If a test is annotated with {@link org.elasticsearch.test.ElasticsearchTestCase.CompatibilityVersion}, +     * all randomized settings will only contain settings or mappings which are compatible with the specified version ID., +     */, +    @Retention(RetentionPolicy.RUNTIME), +    @Target({ElementType.TYPE}), +    @Ignore, +    public @interface CompatibilityVersion {, +        int version();, +    }, +, +    /**, +     * Returns a global compatibility version that is set via the, +     * {@value #TESTS_COMPATIBILITY} or {@value #TESTS_BACKWARDS_COMPATIBILITY_VERSION} system property., +     * If both are unset the current version is used as the global compatibility version. This, +     * compatibility version is used for static randomization. For per-suite compatibility version see, +     * {@link #compatibilityVersion()}, +     */, +    public static Version globalCompatibilityVersion() {, +        return GLOABL_COMPATIBILITY_VERSION;, +    }, +, +    /**, +     * Retruns the tests compatibility version., +     */, +    public Version compatibilityVersion() {, +        return compatibiltyVersion(getClass());, +    }, +, +    private Version compatibiltyVersion(Class<?> clazz) {, +        if (clazz == Object.class || clazz == ElasticsearchIntegrationTest.class) {, +            return globalCompatibilityVersion();, +        }, +        CompatibilityVersion annotation = clazz.getAnnotation(CompatibilityVersion.class);, +        if (annotation != null) {, +            return  Version.smallest(Version.fromId(annotation.version()), compatibiltyVersion(clazz.getSuperclass()));, +        }, +        return compatibiltyVersion(clazz.getSuperclass());, +    }, +, +    private static String compatibilityVersionProperty() {, +        final String version = System.getProperty(TESTS_COMPATIBILITY);, +        if (Strings.hasLength(version)) {, +            return version;, +        }, +        return System.getProperty(TESTS_BACKWARDS_COMPATIBILITY_VERSION);, +    }, +]