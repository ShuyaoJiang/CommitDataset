[+++ b/core/src/main/java/org/elasticsearch/index/query/OrQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/query/OrQueryParser.java, +++ b/core/src/test/java/org/elasticsearch/index/query/AndQueryBuilderTest.java, +import java.util.*;, +import static org.hamcrest.CoreMatchers.*;, +    @Override, +    protected Map<String, AndQueryBuilder> getAlternateVersions() {, +        Map<String, AndQueryBuilder> alternateVersions = new HashMap<>();, +        QueryBuilder innerQuery = createTestQueryBuilder().innerQueries().get(0);, +        AndQueryBuilder expectedQuery = new AndQueryBuilder(innerQuery);, +        String contentString =  "{ \"and\" : [ " + innerQuery + "] }";, +        alternateVersions.put(contentString, expectedQuery);, +        return alternateVersions;, +++ b/core/src/main/java/org/elasticsearch/index/query/OrQueryParser.java, +++ b/core/src/test/java/org/elasticsearch/index/query/AndQueryBuilderTest.java, +import java.util.*;, +import static org.hamcrest.CoreMatchers.*;, +    @Override, +    protected Map<String, AndQueryBuilder> getAlternateVersions() {, +        Map<String, AndQueryBuilder> alternateVersions = new HashMap<>();, +        QueryBuilder innerQuery = createTestQueryBuilder().innerQueries().get(0);, +        AndQueryBuilder expectedQuery = new AndQueryBuilder(innerQuery);, +        String contentString =  "{ \"and\" : [ " + innerQuery + "] }";, +        alternateVersions.put(contentString, expectedQuery);, +        return alternateVersions;, +++ b/core/src/test/java/org/elasticsearch/index/query/BaseQueryTestCase.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import java.util.Collections;, +import java.util.Map;, +        assertParsedQuery(testQuery.toString(), testQuery);, +        for (Map.Entry<String, QB> alternateVersion : getAlternateVersions().entrySet()) {, +            assertParsedQuery(alternateVersion.getKey(), alternateVersion.getValue());, +        }, +    }, +    /**, +     * Returns alternate string representation of the query that need to be tested as they are never used as output, +     * of {@link QueryBuilder#toXContent(XContentBuilder, ToXContent.Params)}. By default there are no alternate versions., +     */, +    protected Map<String, QB> getAlternateVersions() {, +        return Collections.emptyMap();, +    }, +, +    /**, +     * Parses the query provided as string argument and compares it with the expected result provided as argument as a {@link QueryBuilder}, +     */, +    protected void assertParsedQuery(String queryAsString, QueryBuilder<?> expectedQuery) throws IOException {, +        XContentParser parser = XContentFactory.xContent(queryAsString).createParser(queryAsString);, +        QueryParseContext context = createParseContext();, +        context.reset(parser);, +        assertQueryHeader(parser, expectedQuery.getName());, +        QueryBuilder newQuery = queryParser(expectedQuery).fromXContent(context);, +        assertNotSame(newQuery, expectedQuery);, +        assertEquals(expectedQuery, newQuery);, +        assertEquals(expectedQuery.hashCode(), newQuery.hashCode());, +                QueryBuilder<?> prototype = queryParser(testQuery).getBuilderPrototype();, +    protected QueryParser<?> queryParser(QueryBuilder query) {, +        return queryParserService.queryParser(query.getName());, +    }, +, +                QueryBuilder<?> prototype = queryParser(query).getBuilderPrototype();, +        assertThat(parser.nextToken(), either(is(XContentParser.Token.START_OBJECT)).or(is(XContentParser.Token.START_ARRAY)));, +++ b/core/src/main/java/org/elasticsearch/index/query/OrQueryParser.java, +++ b/core/src/test/java/org/elasticsearch/index/query/AndQueryBuilderTest.java, +import java.util.*;, +import static org.hamcrest.CoreMatchers.*;, +    @Override, +    protected Map<String, AndQueryBuilder> getAlternateVersions() {, +        Map<String, AndQueryBuilder> alternateVersions = new HashMap<>();, +        QueryBuilder innerQuery = createTestQueryBuilder().innerQueries().get(0);, +        AndQueryBuilder expectedQuery = new AndQueryBuilder(innerQuery);, +        String contentString =  "{ \"and\" : [ " + innerQuery + "] }";, +        alternateVersions.put(contentString, expectedQuery);, +        return alternateVersions;, +++ b/core/src/test/java/org/elasticsearch/index/query/BaseQueryTestCase.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import java.util.Collections;, +import java.util.Map;, +        assertParsedQuery(testQuery.toString(), testQuery);, +        for (Map.Entry<String, QB> alternateVersion : getAlternateVersions().entrySet()) {, +            assertParsedQuery(alternateVersion.getKey(), alternateVersion.getValue());, +        }, +    }, +    /**, +     * Returns alternate string representation of the query that need to be tested as they are never used as output, +     * of {@link QueryBuilder#toXContent(XContentBuilder, ToXContent.Params)}. By default there are no alternate versions., +     */, +    protected Map<String, QB> getAlternateVersions() {, +        return Collections.emptyMap();, +    }, +, +    /**, +     * Parses the query provided as string argument and compares it with the expected result provided as argument as a {@link QueryBuilder}, +     */, +    protected void assertParsedQuery(String queryAsString, QueryBuilder<?> expectedQuery) throws IOException {, +        XContentParser parser = XContentFactory.xContent(queryAsString).createParser(queryAsString);, +        QueryParseContext context = createParseContext();, +        context.reset(parser);, +        assertQueryHeader(parser, expectedQuery.getName());]