[+++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +        ImmutableList<String> indices = ImmutableList.of();, +        try {, +            indices = readSnapshot(snapshotId).indices();, +        } catch (SnapshotMissingException ex) {, +            throw ex;, +        } catch (SnapshotException | ElasticsearchParseException ex) {, +            logger.warn("cannot read snapshot file [{}]", ex, snapshotId);, +        }, +            metaData = readSnapshotMetaData(snapshotId, indices, true);, +            for (String index : indices) {, +++ b/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +        ImmutableList<String> indices = ImmutableList.of();, +        try {, +            indices = readSnapshot(snapshotId).indices();, +        } catch (SnapshotMissingException ex) {, +            throw ex;, +        } catch (SnapshotException | ElasticsearchParseException ex) {, +            logger.warn("cannot read snapshot file [{}]", ex, snapshotId);, +        }, +            metaData = readSnapshotMetaData(snapshotId, indices, true);, +            for (String index : indices) {, +++ b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java, +import java.io.FileOutputStream;, +import java.nio.channels.FileChannel;, +import java.nio.channels.SeekableByteChannel;, +import java.nio.file.OpenOption;, +import java.nio.file.StandardOpenOption;, +    public void deleteSnapshotWithCorruptedSnapshotFileTest() throws Exception {, +        Client client = client();, +, +        Path repo = newTempDirPath();, +        logger.info("-->  creating repository at " + repo.toAbsolutePath());, +        assertAcked(client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder(), +                        .put("location", repo), +                        .put("compress", false), +                        .put("chunk_size", randomIntBetween(100, 1000))));, +, +        createIndex("test-idx-1", "test-idx-2");, +        ensureYellow();, +        logger.info("--> indexing some data");, +        indexRandom(true,, +                client().prepareIndex("test-idx-1", "doc").setSource("foo", "bar"),, +                client().prepareIndex("test-idx-2", "doc").setSource("foo", "bar"));, +, +        logger.info("--> creating snapshot");, +        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get();, +        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));, +        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));, +, +        logger.info("--> truncate snapshot file to make it unreadable");, +        Path snapshotPath = repo.resolve("snapshot-test-snap-1");, +        try(SeekableByteChannel outChan = Files.newByteChannel(snapshotPath, StandardOpenOption.WRITE)) {, +            outChan.truncate(randomInt(10));, +        }, +        logger.info("--> delete snapshot");, +        client.admin().cluster().prepareDeleteSnapshot("test-repo", "test-snap-1").get();, +, +        logger.info("--> make sure snapshot doesn't exist");, +        assertThrows(client.admin().cluster().prepareGetSnapshots("test-repo").addSnapshots("test-snap-1"), SnapshotMissingException.class);, +, +        logger.info("--> make sure that we can create the snapshot again");, +        createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get();, +        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));, +        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));, +    }, +, +, +    @Test]