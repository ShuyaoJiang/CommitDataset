[+++ b/core/src/main/java/org/elasticsearch/rest/BaseRestHandler.java, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.common.collect.Tuple;, +import java.util.ArrayList;, +import java.util.SortedSet;, +import java.util.TreeSet;, +        // use a sorted set so the unconsumed parameters appear in a reliable sorted order, +        final SortedSet<String> unconsumedParams =, +            request.unconsumedParams().stream().filter(p -> !responseParams().contains(p)).collect(Collectors.toCollection(TreeSet::new));, +            String message = String.format(, +                "request [%s] contains unrecognized parameter%s: ",, +                unconsumedParams.size() > 1 ? "s" : "");, +            boolean first = true;, +            for (final String unconsumedParam : unconsumedParams) {, +                final LevensteinDistance ld = new LevensteinDistance();, +                final List<Tuple<Float, String>> scoredParams = new ArrayList<>();, +                for (String consumedParam : request.consumedParams()) {, +                    final float distance = ld.getDistance(unconsumedParam, consumedParam);, +                    if (distance > 0.5f) {, +                        scoredParams.add(new Tuple<>(distance, consumedParam));, +                    }, +                }, +                CollectionUtil.timSort(scoredParams, (a, b) -> {, +                    // sort by distance in reverse order, then parameter name for equal distances, +                    int compare = a.v1().compareTo(b.v1());, +                    if (compare != 0) return -compare;, +                    else return a.v2().compareTo(b.v2());, +                });, +                if (first == false) {, +                    message += ", ";, +                }, +                message += "[" + unconsumedParam + "]";, +                final List<String> keys = scoredParams.stream().map(Tuple::v2).collect(Collectors.toList());, +                if (keys.isEmpty() == false) {, +                    message += " -> did you mean " + (keys.size() == 1 ? "[" + keys.get(0) + "]": "any of " + keys.toString()) + "?";, +                }, +                first = false;, +            }, +, +++ b/core/src/main/java/org/elasticsearch/rest/BaseRestHandler.java, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.common.collect.Tuple;, +import java.util.ArrayList;, +import java.util.SortedSet;, +import java.util.TreeSet;, +        // use a sorted set so the unconsumed parameters appear in a reliable sorted order, +        final SortedSet<String> unconsumedParams =, +            request.unconsumedParams().stream().filter(p -> !responseParams().contains(p)).collect(Collectors.toCollection(TreeSet::new));, +            String message = String.format(, +                "request [%s] contains unrecognized parameter%s: ",, +                unconsumedParams.size() > 1 ? "s" : "");, +            boolean first = true;, +            for (final String unconsumedParam : unconsumedParams) {, +                final LevensteinDistance ld = new LevensteinDistance();, +                final List<Tuple<Float, String>> scoredParams = new ArrayList<>();, +                for (String consumedParam : request.consumedParams()) {, +                    final float distance = ld.getDistance(unconsumedParam, consumedParam);, +                    if (distance > 0.5f) {, +                        scoredParams.add(new Tuple<>(distance, consumedParam));, +                    }, +                }, +                CollectionUtil.timSort(scoredParams, (a, b) -> {, +                    // sort by distance in reverse order, then parameter name for equal distances, +                    int compare = a.v1().compareTo(b.v1());, +                    if (compare != 0) return -compare;, +                    else return a.v2().compareTo(b.v2());, +                });, +                if (first == false) {, +                    message += ", ";, +                }, +                message += "[" + unconsumedParam + "]";, +                final List<String> keys = scoredParams.stream().map(Tuple::v2).collect(Collectors.toList());, +                if (keys.isEmpty() == false) {, +                    message += " -> did you mean " + (keys.size() == 1 ? "[" + keys.get(0) + "]": "any of " + keys.toString()) + "?";, +                }, +                first = false;, +            }, +, +++ b/core/src/main/java/org/elasticsearch/rest/RestRequest.java, +     * Returns a list of parameters that have been consumed. This method returns a copy, callers, +     * are free to modify the returned list., +     *, +     * @return the list of currently consumed parameters., +     */, +    List<String> consumedParams() {, +        return consumedParams.stream().collect(Collectors.toList());, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/rest/BaseRestHandler.java, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.common.collect.Tuple;, +import java.util.ArrayList;, +import java.util.SortedSet;, +import java.util.TreeSet;, +        // use a sorted set so the unconsumed parameters appear in a reliable sorted order, +        final SortedSet<String> unconsumedParams =]