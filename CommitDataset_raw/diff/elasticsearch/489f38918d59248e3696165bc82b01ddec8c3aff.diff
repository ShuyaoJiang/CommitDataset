[+++ b/core/build.gradle, +  compile 'org.hdrhistogram:HdrHistogram:2.1.9', +++ b/core/build.gradle, +  compile 'org.hdrhistogram:HdrHistogram:2.1.9', +++ /dev/null, +++ b/core/build.gradle, +  compile 'org.hdrhistogram:HdrHistogram:2.1.9', +++ /dev/null, +++ b/core/licenses/HdrHistogram-2.1.9.jar.sha1, +e4631ce165eb400edecfa32e03d3f1be53dee754, +++ b/core/build.gradle, +  compile 'org.hdrhistogram:HdrHistogram:2.1.9', +++ /dev/null, +++ b/core/licenses/HdrHistogram-2.1.9.jar.sha1, +e4631ce165eb400edecfa32e03d3f1be53dee754, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +    protected static void parseInnerToXContent(XContentParser parser, Builder context) throws IOException {, +     * Base class of all {@link DocWriteResponse} builders. These {@link DocWriteResponse.Builder} are used during, +     * xcontent parsing to temporarily store the parsed values, then the {@link Builder#build()} method is called to, +     * instantiate the appropriate {@link DocWriteResponse} with the parsed values., +    public abstract static class Builder {, +++ b/core/build.gradle, +  compile 'org.hdrhistogram:HdrHistogram:2.1.9', +++ /dev/null, +++ b/core/licenses/HdrHistogram-2.1.9.jar.sha1, +e4631ce165eb400edecfa32e03d3f1be53dee754, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +    protected static void parseInnerToXContent(XContentParser parser, Builder context) throws IOException {, +     * Base class of all {@link DocWriteResponse} builders. These {@link DocWriteResponse.Builder} are used during, +     * xcontent parsing to temporarily store the parsed values, then the {@link Builder#build()} method is called to, +     * instantiate the appropriate {@link DocWriteResponse} with the parsed values., +    public abstract static class Builder {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +        DocWriteResponse.Builder builder = null;, +            final IndexResponse.Builder indexResponseBuilder = new IndexResponse.Builder();, +            final UpdateResponse.Builder updateResponseBuilder = new UpdateResponse.Builder();, +            final DeleteResponse.Builder deleteResponseBuilder = new DeleteResponse.Builder();, +++ b/core/build.gradle, +  compile 'org.hdrhistogram:HdrHistogram:2.1.9', +++ /dev/null, +++ b/core/licenses/HdrHistogram-2.1.9.jar.sha1, +e4631ce165eb400edecfa32e03d3f1be53dee754, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +    protected static void parseInnerToXContent(XContentParser parser, Builder context) throws IOException {, +     * Base class of all {@link DocWriteResponse} builders. These {@link DocWriteResponse.Builder} are used during, +     * xcontent parsing to temporarily store the parsed values, then the {@link Builder#build()} method is called to, +     * instantiate the appropriate {@link DocWriteResponse} with the parsed values., +    public abstract static class Builder {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +        DocWriteResponse.Builder builder = null;, +            final IndexResponse.Builder indexResponseBuilder = new IndexResponse.Builder();, +            final UpdateResponse.Builder updateResponseBuilder = new UpdateResponse.Builder();, +            final DeleteResponse.Builder deleteResponseBuilder = new DeleteResponse.Builder();, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkResponse.java, +import org.elasticsearch.common.xcontent.StatusToXContentObject;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.rest.RestStatus;, +import java.util.ArrayList;, +import java.util.List;, +, +import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.throwUnknownField;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.throwUnknownToken;, +public class BulkResponse extends ActionResponse implements Iterable<BulkItemResponse>, StatusToXContentObject {, +, +    private static final String ITEMS = "items";, +    private static final String ERRORS = "errors";, +    private static final String TOOK = "took";, +    private static final String INGEST_TOOK = "ingest_took";, +, +    @Override, +    public RestStatus status() {, +        return RestStatus.OK;, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        builder.field(TOOK, tookInMillis);, +        if (ingestTookInMillis != BulkResponse.NO_INGEST_TOOK) {, +            builder.field(INGEST_TOOK, ingestTookInMillis);, +        }, +        builder.field(ERRORS, hasFailures());, +        builder.startArray(ITEMS);, +        for (BulkItemResponse item : this) {, +            item.toXContent(builder, params);, +        }, +        builder.endArray();, +        builder.endObject();, +        return builder;, +    }, +, +    public static BulkResponse fromXContent(XContentParser parser) throws IOException {, +        XContentParser.Token token = parser.nextToken();, +        ensureExpectedToken(XContentParser.Token.START_OBJECT, token, parser::getTokenLocation);, +, +        long took = -1L;, +        long ingestTook = NO_INGEST_TOOK;, +        List<BulkItemResponse> items = new ArrayList<>();]