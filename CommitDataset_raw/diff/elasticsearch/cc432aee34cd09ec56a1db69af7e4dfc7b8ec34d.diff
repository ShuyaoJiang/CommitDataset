[+++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +import org.elasticsearch.xpack.ml.MLMetadataField;, +import org.elasticsearch.xpack.ml.MlMetadata;, +    public void updateCalendar(String calendarId, Set<String> jobIdsToAdd, Set<String> jobIdsToRemove, ClusterState clusterState,, +, +                    for (String jobToAdd : jobIdsToAdd) {, +                        MlMetadata mlMetadata = clusterState.getMetaData().custom(MLMetadataField.TYPE);, +                        if (mlMetadata.isGroupOrJob(jobToAdd) == false) {, +                            errorHandler.accept(ExceptionsHelper.missingJobException(jobToAdd));, +                            return;, +                        }, +                    }, +, +                    for (String jobToRemove : jobIdsToRemove) {, +                        if (currentJobs.contains(jobToRemove) == false) {, +                            errorHandler.accept(ExceptionsHelper.badRequestException("Cannot remove [" + jobToRemove, +                                    + "] as it is not present in calendar [" + calendarId + "]"));, +                            return;, +                        }, +                    }, +, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +import org.elasticsearch.xpack.ml.MLMetadataField;, +import org.elasticsearch.xpack.ml.MlMetadata;, +    public void updateCalendar(String calendarId, Set<String> jobIdsToAdd, Set<String> jobIdsToRemove, ClusterState clusterState,, +, +                    for (String jobToAdd : jobIdsToAdd) {, +                        MlMetadata mlMetadata = clusterState.getMetaData().custom(MLMetadataField.TYPE);, +                        if (mlMetadata.isGroupOrJob(jobToAdd) == false) {, +                            errorHandler.accept(ExceptionsHelper.missingJobException(jobToAdd));, +                            return;, +                        }, +                    }, +, +                    for (String jobToRemove : jobIdsToRemove) {, +                        if (currentJobs.contains(jobToRemove) == false) {, +                            errorHandler.accept(ExceptionsHelper.badRequestException("Cannot remove [" + jobToRemove, +                                    + "] as it is not present in calendar [" + calendarId + "]"));, +                            return;, +                        }, +                    }, +, +++ b/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateCalendarJobAction.java, +        jobProvider.updateCalendar(request.getCalendarId(), request.getJobIdsToAdd(), request.getJobIdsToRemove(), clusterService.state(),, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +import org.elasticsearch.xpack.ml.MLMetadataField;, +import org.elasticsearch.xpack.ml.MlMetadata;, +    public void updateCalendar(String calendarId, Set<String> jobIdsToAdd, Set<String> jobIdsToRemove, ClusterState clusterState,, +, +                    for (String jobToAdd : jobIdsToAdd) {, +                        MlMetadata mlMetadata = clusterState.getMetaData().custom(MLMetadataField.TYPE);, +                        if (mlMetadata.isGroupOrJob(jobToAdd) == false) {, +                            errorHandler.accept(ExceptionsHelper.missingJobException(jobToAdd));, +                            return;, +                        }, +                    }, +, +                    for (String jobToRemove : jobIdsToRemove) {, +                        if (currentJobs.contains(jobToRemove) == false) {, +                            errorHandler.accept(ExceptionsHelper.badRequestException("Cannot remove [" + jobToRemove, +                                    + "] as it is not present in calendar [" + calendarId + "]"));, +                            return;, +                        }, +                    }, +, +++ b/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateCalendarJobAction.java, +        jobProvider.updateCalendar(request.getCalendarId(), request.getJobIdsToAdd(), request.getJobIdsToRemove(), clusterService.state(),, +++ b/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/JobProviderIT.java, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.xpack.ml.MLMetadataField;, +import org.elasticsearch.xpack.ml.MlMetadata;, +import org.elasticsearch.xpack.ml.MlSingleNodeTestCase;, +        MlMetadata.Builder mlBuilder = new MlMetadata.Builder();, +        mlBuilder.putJob(createJob("foo").build(), false);, +        mlBuilder.putJob(createJob("bar").build(), false);, +, +        ClusterState clusterState = ClusterState.builder(new ClusterName("_name")), +                .metaData(new MetaData.Builder().putCustom(MLMetadataField.TYPE, mlBuilder.build())), +                .build();, +, +        updateCalendar(calendarId, addedIds, Collections.emptySet(), clusterState);, +        updateCalendar(calendarId, Collections.emptySet(), removedIds, clusterState);, +    private void updateCalendar(String calendarId, Set<String> idsToAdd, Set<String> idsToRemove, ClusterState clusterState) throws Exception {, +        jobProvider.updateCalendar(calendarId, idsToAdd, idsToRemove, clusterState,, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +import org.elasticsearch.xpack.ml.MLMetadataField;, +import org.elasticsearch.xpack.ml.MlMetadata;, +    public void updateCalendar(String calendarId, Set<String> jobIdsToAdd, Set<String> jobIdsToRemove, ClusterState clusterState,, +, +                    for (String jobToAdd : jobIdsToAdd) {, +                        MlMetadata mlMetadata = clusterState.getMetaData().custom(MLMetadataField.TYPE);, +                        if (mlMetadata.isGroupOrJob(jobToAdd) == false) {, +                            errorHandler.accept(ExceptionsHelper.missingJobException(jobToAdd));, +                            return;, +                        }, +                    }, +, +                    for (String jobToRemove : jobIdsToRemove) {, +                        if (currentJobs.contains(jobToRemove) == false) {]