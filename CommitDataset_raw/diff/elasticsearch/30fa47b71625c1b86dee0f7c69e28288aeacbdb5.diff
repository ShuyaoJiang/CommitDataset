[+++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import java.util.Objects;, +    private final EngineFactory engineFactory;, +    /**, +     * Construct the index module for the index with the specified index settings. The index module contains extension points for plugins, +     * via {@link org.elasticsearch.plugins.PluginsService#onIndexModule(IndexModule)}., +     *, +     * @param indexSettings    the index settings, +     * @param analysisRegistry the analysis registry, +     * @param engineFactory    the engine factory, +     */, +    public IndexModule(final IndexSettings indexSettings, final AnalysisRegistry analysisRegistry, final EngineFactory engineFactory) {, +        this.engineFactory = Objects.requireNonNull(engineFactory);, +     * The engine factory provided during construction of this index module., +     *, +     * @return the engine factory, +     */, +    EngineFactory getEngineFactory() {, +        return engineFactory;, +    }, +, +    /**, +                shardStoreDeleter, analysisRegistry, engineFactory, circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import java.util.Objects;, +    private final EngineFactory engineFactory;, +    /**, +     * Construct the index module for the index with the specified index settings. The index module contains extension points for plugins, +     * via {@link org.elasticsearch.plugins.PluginsService#onIndexModule(IndexModule)}., +     *, +     * @param indexSettings    the index settings, +     * @param analysisRegistry the analysis registry, +     * @param engineFactory    the engine factory, +     */, +    public IndexModule(final IndexSettings indexSettings, final AnalysisRegistry analysisRegistry, final EngineFactory engineFactory) {, +        this.engineFactory = Objects.requireNonNull(engineFactory);, +     * The engine factory provided during construction of this index module., +     *, +     * @return the engine factory, +     */, +    EngineFactory getEngineFactory() {, +        return engineFactory;, +    }, +, +    /**, +                shardStoreDeleter, analysisRegistry, engineFactory, circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            EngineFactory engineFactory,, +        this.engineFactory = Objects.requireNonNull(engineFactory);, +    public final EngineFactory getEngineFactory() {, +    }, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import java.util.Objects;, +    private final EngineFactory engineFactory;, +    /**, +     * Construct the index module for the index with the specified index settings. The index module contains extension points for plugins, +     * via {@link org.elasticsearch.plugins.PluginsService#onIndexModule(IndexModule)}., +     *, +     * @param indexSettings    the index settings, +     * @param analysisRegistry the analysis registry, +     * @param engineFactory    the engine factory, +     */, +    public IndexModule(final IndexSettings indexSettings, final AnalysisRegistry analysisRegistry, final EngineFactory engineFactory) {, +        this.engineFactory = Objects.requireNonNull(engineFactory);, +     * The engine factory provided during construction of this index module., +     *, +     * @return the engine factory, +     */, +    EngineFactory getEngineFactory() {, +        return engineFactory;, +    }, +, +    /**, +                shardStoreDeleter, analysisRegistry, engineFactory, circuitBreakerService, bigArrays, threadPool, scriptService,, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            EngineFactory engineFactory,, +        this.engineFactory = Objects.requireNonNull(engineFactory);, +    public final EngineFactory getEngineFactory() {, +    }, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.index.shard.IndexingStats;, +            try (Translog.Snapshot snapshot = getTranslog().newSnapshotFrom(localCheckpoint + 1)) {, +                    assertPrimaryCanOptimizeAddDocument(index);, +    protected boolean assertPrimaryCanOptimizeAddDocument(final Index index) {, +        assert (index.version() == Versions.MATCH_ANY && index.versionType() == VersionType.INTERNAL), +                : "version: " + index.version() + " type: " + index.versionType();, +        return true;, +    }, +, +            assertPrimaryIncomingSequenceNumber(origin, seqNo);, +    protected boolean assertPrimaryIncomingSequenceNumber(final Engine.Operation.Origin origin, final long seqNo) {, +    long doGenerateSeqNoForOperation(final Operation operation) {, +                final IndexingStrategy plan = indexingStrategyForOperation(index);, +    protected final IndexingStrategy planIndexingAsNonPrimary(Index index) throws IOException {, +        assertNonPrimaryOrigin(index);, +    protected IndexingStrategy indexingStrategyForOperation(final Index index) throws IOException {, +        if (index.origin() == Operation.Origin.PRIMARY) {, +            return planIndexingAsPrimary(index);, +        } else {, +            // non-primary mode (i.e., replica or recovery)]