[+++ b/.idea/dictionaries/kimchy.xml, +      <w>retryable</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>retryable</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.common.collect.Sets;, +import java.util.Set;, +    @Override protected ClusterBlockException checkBlock(IndicesAliasesRequest request, ClusterState state) {, +        Set<String> indices = Sets.newHashSet();, +            indices.add(aliasAction.index());, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA, indices.toArray(new String[indices.size()]));, +++ b/.idea/dictionaries/kimchy.xml, +      <w>retryable</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.common.collect.Sets;, +import java.util.Set;, +    @Override protected ClusterBlockException checkBlock(IndicesAliasesRequest request, ClusterState state) {, +        Set<String> indices = Sets.newHashSet();, +            indices.add(aliasAction.index());, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA, indices.toArray(new String[indices.size()]));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    @Override protected ClusterBlockException checkBlock(CloseIndexRequest request, ClusterState state) {, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA, request.index());, +++ b/.idea/dictionaries/kimchy.xml, +      <w>retryable</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.common.collect.Sets;, +import java.util.Set;, +    @Override protected ClusterBlockException checkBlock(IndicesAliasesRequest request, ClusterState state) {, +        Set<String> indices = Sets.newHashSet();, +            indices.add(aliasAction.index());, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA, indices.toArray(new String[indices.size()]));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    @Override protected ClusterBlockException checkBlock(CloseIndexRequest request, ClusterState state) {, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA, request.index());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/TransportCreateIndexAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    @Override protected ClusterBlockException checkBlock(CreateIndexRequest request, ClusterState state) {, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA, request.index());, +++ b/.idea/dictionaries/kimchy.xml, +      <w>retryable</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.common.collect.Sets;, +import java.util.Set;, +    @Override protected ClusterBlockException checkBlock(IndicesAliasesRequest request, ClusterState state) {, +        Set<String> indices = Sets.newHashSet();, +            indices.add(aliasAction.index());, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA, indices.toArray(new String[indices.size()]));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    @Override protected ClusterBlockException checkBlock(CloseIndexRequest request, ClusterState state) {, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA, request.index());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/TransportCreateIndexAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    @Override protected ClusterBlockException checkBlock(CreateIndexRequest request, ClusterState state) {, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA, request.index());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    @Override protected ClusterBlockException checkBlock(DeleteIndexRequest request, ClusterState state) {, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA, request.index());, +++ b/.idea/dictionaries/kimchy.xml, +      <w>retryable</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.common.collect.Sets;, +import java.util.Set;, +    @Override protected ClusterBlockException checkBlock(IndicesAliasesRequest request, ClusterState state) {, +        Set<String> indices = Sets.newHashSet();, +            indices.add(aliasAction.index());, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA, indices.toArray(new String[indices.size()]));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    @Override protected ClusterBlockException checkBlock(CloseIndexRequest request, ClusterState state) {, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA, request.index());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/TransportCreateIndexAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    @Override protected ClusterBlockException checkBlock(CreateIndexRequest request, ClusterState state) {, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA, request.index());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    @Override protected ClusterBlockException checkBlock(DeleteIndexRequest request, ClusterState state) {, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA, request.index());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;, +    @Override protected void doExecute(DeleteMappingRequest request, ActionListener<DeleteMappingResponse> listener) {, +        request.indices(clusterService.state().metaData().concreteIndices(request.indices()));, +        super.doExecute(request, listener);, +, +    @Override protected ClusterBlockException checkBlock(DeleteMappingRequest request, ClusterState state) {, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA, request.indices());, +++ b/.idea/dictionaries/kimchy.xml, +      <w>retryable</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java, +import org.elasticsearch.cluster.block.ClusterBlockException;]