[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/having/BucketSelectorParser.java, +import java.util.Collections;, +        GapPolicy gapPolicy = null;, +        BucketSelectorPipelineAggregator.Factory factory = new BucketSelectorPipelineAggregator.Factory(reducerName, bucketsPathsMap,, +                script);, +        if (gapPolicy != null) {, +            factory.gapPolicy(gapPolicy);, +        }, +        return factory;, +, +        return new BucketSelectorPipelineAggregator.Factory(null, Collections.emptyMap(), null);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/having/BucketSelectorParser.java, +import java.util.Collections;, +        GapPolicy gapPolicy = null;, +        BucketSelectorPipelineAggregator.Factory factory = new BucketSelectorPipelineAggregator.Factory(reducerName, bucketsPathsMap,, +                script);, +        if (gapPolicy != null) {, +            factory.gapPolicy(gapPolicy);, +        }, +        return factory;, +, +        return new BucketSelectorPipelineAggregator.Factory(null, Collections.emptyMap(), null);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/having/BucketSelectorPipelineAggregator.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.script.Script.ScriptField;, +import org.elasticsearch.search.aggregations.pipeline.bucketscript.BucketScriptParser;, +import java.util.Map.Entry;, +import java.util.Objects;, +        private GapPolicy gapPolicy = GapPolicy.SKIP;, +        public Factory(String name, Map<String, String> bucketsPathsMap, Script script) {, +        }, +, +        /**, +         * Sets the gap policy to use for this aggregation., +         */, +        public void gapPolicy(GapPolicy gapPolicy) {, +        /**, +         * Gets the gap policy to use for this aggregation., +         */, +        public GapPolicy gapPolicy() {, +            return gapPolicy;, +        }, +, +, +        @Override, +        protected XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {, +            builder.field(BucketScriptParser.BUCKETS_PATH.getPreferredName(), bucketsPathsMap);, +            builder.field(ScriptField.SCRIPT.getPreferredName(), script);, +            builder.field(BucketScriptParser.GAP_POLICY.getPreferredName(), gapPolicy.getName());, +            return builder;, +        }, +, +        @Override, +        protected boolean overrideBucketsPath() {, +            return true;, +        }, +, +        @Override, +        protected PipelineAggregatorFactory doReadFrom(String name, String[] bucketsPaths, StreamInput in) throws IOException {, +            Map<String, String> bucketsPathsMap = new HashMap<String, String>();, +            int mapSize = in.readVInt();, +            for (int i = 0; i < mapSize; i++) {, +                bucketsPathsMap.put(in.readString(), in.readString());, +            }, +            Script script = Script.readScript(in);, +            Factory factory = new Factory(name, bucketsPathsMap, script);, +            factory.gapPolicy = GapPolicy.readFrom(in);, +            return factory;, +        }, +, +        @Override, +        protected void doWriteTo(StreamOutput out) throws IOException {, +            out.writeVInt(bucketsPathsMap.size());, +            for (Entry<String, String> e : bucketsPathsMap.entrySet()) {, +                out.writeString(e.getKey());, +                out.writeString(e.getValue());, +            }, +            script.writeTo(out);, +            gapPolicy.writeTo(out);, +        }, +, +        @Override, +        protected int doHashCode() {, +            return Objects.hash(bucketsPathsMap, script, gapPolicy);, +        }, +, +        @Override, +        protected boolean doEquals(Object obj) {, +            Factory other = (Factory) obj;, +            return Objects.equals(bucketsPathsMap, other.bucketsPathsMap) && Objects.equals(script, other.script), +                    && Objects.equals(gapPolicy, other.gapPolicy);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/having/BucketSelectorParser.java, +import java.util.Collections;, +        GapPolicy gapPolicy = null;, +        BucketSelectorPipelineAggregator.Factory factory = new BucketSelectorPipelineAggregator.Factory(reducerName, bucketsPathsMap,, +                script);, +        if (gapPolicy != null) {, +            factory.gapPolicy(gapPolicy);]