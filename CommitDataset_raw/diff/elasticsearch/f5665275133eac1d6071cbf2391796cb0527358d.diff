[+++ b/src/main/java/org/elasticsearch/action/get/GetResponse.java, +     * Returns the internal source bytes, as they are returned without munging (for example,, +     * might still be compressed)., +     */, +    public BytesReference getSourceInternal() {, +        return getResult.internalSourceRef();, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/get/GetResponse.java, +     * Returns the internal source bytes, as they are returned without munging (for example,, +     * might still be compressed)., +     */, +    public BytesReference getSourceInternal() {, +        return getResult.internalSourceRef();, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/rest/action/RestActionModule.java, +import org.elasticsearch.rest.action.get.RestGetSourceAction;, +        bind(RestGetSourceAction.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/action/get/GetResponse.java, +     * Returns the internal source bytes, as they are returned without munging (for example,, +     * might still be compressed)., +     */, +    public BytesReference getSourceInternal() {, +        return getResult.internalSourceRef();, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/rest/action/RestActionModule.java, +import org.elasticsearch.rest.action.get.RestGetSourceAction;, +        bind(RestGetSourceAction.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/rest/action/admin/indices/analyze/RestAnalyzeAction.java, +                    XContentBuilder builder = restContentBuilder(request, null);, +++ b/src/main/java/org/elasticsearch/action/get/GetResponse.java, +     * Returns the internal source bytes, as they are returned without munging (for example,, +     * might still be compressed)., +     */, +    public BytesReference getSourceInternal() {, +        return getResult.internalSourceRef();, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/rest/action/RestActionModule.java, +import org.elasticsearch.rest.action.get.RestGetSourceAction;, +        bind(RestGetSourceAction.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/rest/action/admin/indices/analyze/RestAnalyzeAction.java, +                    XContentBuilder builder = restContentBuilder(request, null);, +++ b/src/main/java/org/elasticsearch/rest/action/get/RestGetSourceAction.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.rest.action.get;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.get.GetRequest;, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.rest.*;, +import org.elasticsearch.rest.action.support.RestXContentBuilder;, +, +import java.io.IOException;, +, +import static org.elasticsearch.rest.RestRequest.Method.GET;, +import static org.elasticsearch.rest.RestStatus.NOT_FOUND;, +import static org.elasticsearch.rest.RestStatus.OK;, +import static org.elasticsearch.rest.action.support.RestXContentBuilder.restContentBuilder;, +, +/**, + *, + */, +public class RestGetSourceAction extends BaseRestHandler {, +, +    @Inject, +    public RestGetSourceAction(Settings settings, Client client, RestController controller) {, +        super(settings, client);, +        controller.registerHandler(GET, "/{index}/{type}/{id}/_source", this);, +    }, +, +    @Override]