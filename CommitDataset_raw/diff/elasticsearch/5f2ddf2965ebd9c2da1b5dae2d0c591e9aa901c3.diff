[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRepository.java, +                for (FileInfo fileInfo : filesToRecover) {, +                    final long fileLength = fileInfo.length();, +                    long offset = 0;, +                    while (offset < fileLength && error.get() == null) {, +                            requestSeqIdTracker.waitForOpsToComplete(requestSeqId - ccrSettings.getMaxConcurrentFileChunks());, +, +                            if (error.get() != null) {, +                                requestSeqIdTracker.markSeqNoAsCompleted(requestSeqId);, +                                break;, +, +                            final int bytesRequested = Math.toIntExact(, +                                Math.min(ccrSettings.getChunkSize().getBytes(), fileLength - offset));, +                            offset += bytesRequested;, +, +                                new GetCcrRestoreFileChunkRequest(node, sessionUUID, fileInfo.name(), bytesRequested);, +                                fileInfo.name(), offset, bytesRequested);, +                                            error.compareAndSet(null, Tuple.tuple(fileInfo.metadata(), e));, +                                                snapshotId, fileInfo.name(), r.getOffset(), actualChunkSize);, +                                            final boolean lastChunk = r.getOffset() + actualChunkSize >= fileLength;, +                                            multiFileWriter.writeFileChunk(fileInfo.metadata(), r.getOffset(), r.getChunk(), lastChunk);, +                                        error.compareAndSet(null, Tuple.tuple(fileInfo.metadata(), e));, +                            error.compareAndSet(null, Tuple.tuple(fileInfo.metadata(), e));, +                    }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRepository.java, +                for (FileInfo fileInfo : filesToRecover) {, +                    final long fileLength = fileInfo.length();, +                    long offset = 0;, +                    while (offset < fileLength && error.get() == null) {, +                            requestSeqIdTracker.waitForOpsToComplete(requestSeqId - ccrSettings.getMaxConcurrentFileChunks());, +, +                            if (error.get() != null) {, +                                requestSeqIdTracker.markSeqNoAsCompleted(requestSeqId);, +                                break;, +, +                            final int bytesRequested = Math.toIntExact(, +                                Math.min(ccrSettings.getChunkSize().getBytes(), fileLength - offset));, +                            offset += bytesRequested;, +, +                                new GetCcrRestoreFileChunkRequest(node, sessionUUID, fileInfo.name(), bytesRequested);, +                                fileInfo.name(), offset, bytesRequested);, +                                            error.compareAndSet(null, Tuple.tuple(fileInfo.metadata(), e));, +                                                snapshotId, fileInfo.name(), r.getOffset(), actualChunkSize);, +                                            final boolean lastChunk = r.getOffset() + actualChunkSize >= fileLength;, +                                            multiFileWriter.writeFileChunk(fileInfo.metadata(), r.getOffset(), r.getChunk(), lastChunk);, +                                        error.compareAndSet(null, Tuple.tuple(fileInfo.metadata(), e));, +                            error.compareAndSet(null, Tuple.tuple(fileInfo.metadata(), e));, +                    }, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRestoreSourceService.java, +            try (Releasable ignored = keyedLock.acquire(fileName)) {]