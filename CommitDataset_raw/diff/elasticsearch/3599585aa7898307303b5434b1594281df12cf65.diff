[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        this.slowLog = new IndexingSlowLog(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        this.slowLog = new IndexingSlowLog(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/index/IndexingSlowLog.java, +import com.sun.org.apache.xpath.internal.operations.Bool;, +import org.elasticsearch.common.settings.Setting;, +import java.util.logging.Level;, +    private volatile boolean reformat;, +    private volatile long indexWarnThreshold;, +    private volatile long indexInfoThreshold;, +    private volatile long indexDebugThreshold;, +    private volatile long indexTraceThreshold;, +    private volatile Level level;, +    public static final Setting<TimeValue> INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN_SETTING = Setting.timeSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".threshold.index.warn", TimeValue.timeValueNanos(-1), TimeValue.timeValueNanos(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO_SETTING = Setting.timeSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".threshold.index.info", TimeValue.timeValueNanos(-1), TimeValue.timeValueNanos(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG_SETTING = Setting.timeSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".threshold.index.debug", TimeValue.timeValueNanos(-1), TimeValue.timeValueNanos(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE_SETTING = Setting.timeSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".threshold.index.trace", TimeValue.timeValueNanos(-1), TimeValue.timeValueNanos(-1), true, Setting.Scope.INDEX);, +    public static final Setting<Boolean> INDEX_INDEXING_SLOWLOG_REFORMAT_SETTING = Setting.boolSetting(INDEX_INDEXING_SLOWLOG_PREFIX +".reformat", true, true, Setting.Scope.INDEX);, +    public static final Setting<Level> INDEX_INDEXING_SLOWLOG_LEVEL_SETTING = new Setting<>(INDEX_INDEXING_SLOWLOG_PREFIX +".level", Level.TRACE.name(), Level::parse, true, Setting.Scope.INDEX);, +    /**, +     * Reads how much of the source to log. The user can specify any value they, +     * like and numbers are interpreted the maximum number of characters to log, +     * and everything else is interpreted as Elasticsearch interprets booleans, +     * which is then converted to 0 for false and Integer.MAX_VALUE for true., +     */, +    public static final Setting<Integer> INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG_SETTING = new Setting<>(INDEX_INDEXING_SLOWLOG_PREFIX + ".source", "1000", (value) -> {, +        try {, +            return Integer.parseInt(value, 10);, +        } catch (NumberFormatException e) {, +            return Booleans.parseBoolean(value, true) ? Integer.MAX_VALUE : 0;, +        }, +    }, true, Setting.Scope.INDEX);, +    IndexingSlowLog(IndexSettings indexSettings) {, +    IndexingSlowLog(IndexSettings indexSettings, ESLogger indexLogger, ESLogger deleteLogger) {, +        indexSettings.addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_REFORMAT_SETTING, this::setReformat);, +        this.reformat = indexSettings.getValue(INDEX_INDEXING_SLOWLOG_REFORMAT_SETTING);, +        indexSettings.addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN_SETTING, this::setWarnThreshold);, +        this.indexWarnThreshold = indexSettings.getValue(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN_SETTING).nanos();, +        indexSettings.addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO_SETTING, this::setInfoThreshold);, +        this.indexInfoThreshold = indexSettings.getValue(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO_SETTING).nanos();, +        indexSettings.addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG_SETTING, this::setDebugThreshold);, +        this.indexDebugThreshold = indexSettings.getValue(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG_SETTING).nanos();, +        indexSettings.addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE_SETTING, this::setTraceThreshold);, +        this.indexTraceThreshold = indexSettings.getValue(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE_SETTING).nanos();, +        indexSettings.addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_LEVEL_SETTING, this::setLevel);, +        setLevel(indexSettings.getValue(INDEX_INDEXING_SLOWLOG_LEVEL_SETTING));, +        indexSettings.addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG_SETTING, this::setMaxSourceCharsToLog);, +        this.maxSourceCharsToLog = indexSettings.getValue(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG_SETTING);, +    private void setMaxSourceCharsToLog(int maxSourceCharsToLog) {, +        this.maxSourceCharsToLog = maxSourceCharsToLog;, +    private void setLevel(Level level) {, +        this.indexLogger.setLevel(level.name());, +        this.deleteLogger.setLevel(level.name());, +    private void setWarnThreshold(TimeValue warnThreshold) {, +        this.indexWarnThreshold = warnThreshold.nanos();, +    }, +, +    private void setInfoThreshold(TimeValue infoThreshold) {, +        this.indexInfoThreshold = infoThreshold.nanos();, +    }, +    private void setDebugThreshold(TimeValue debugThreshold) {, +        this.indexDebugThreshold = debugThreshold.nanos();, +    }, +    private void setTraceThreshold(TimeValue traceThreshold) {, +        this.indexTraceThreshold = traceThreshold.nanos();, +    }, +    private void setReformat(boolean reformat) {, +, +    public enum Level {, +        WARN, TRACE, INFO, DEBUG;, +, +        public static Level parse(String level) {, +            return valueOf(level.toUpperCase(Locale.ROOT));, +        }, +    }]