[+++ b/core/src/main/java/org/elasticsearch/common/path/PathTrie.java, +import java.util.ArrayList;, +import java.util.List;, +    public static interface Decoder {, +    public static final Decoder NO_DECODER = new Decoder() {, +        @Override, +        public String decode(String value) {, +            return value;, +        }, +    };, +, +    public PathTrie() {, +        this('/', "*", NO_DECODER);, +    }, +, +                params.put(node.namedWildcard(), value);, +        String[] strings = splitPath(decoder.decode(path));, +, +    /*, +      Splits up the url path up by '/' and is aware of, +      index name expressions that appear between '<' and '>'., +     */, +    String[] splitPath(final String path) {, +        if (path == null || path.length() == 0) {, +            return Strings.EMPTY_ARRAY;, +        }, +        int count = 1;, +        boolean splitAllowed = true;, +        for (int i = 0; i < path.length(); i++) {, +            final char currentC = path.charAt(i);, +            if ('<' == currentC) {, +                splitAllowed = false;, +            } else if (currentC == '>') {, +                splitAllowed = true;, +            } else if (splitAllowed && currentC == separator) {, +                count++;, +            }, +        }, +, +        final List<String> result = new ArrayList<>(count);, +        final StringBuilder builder = new StringBuilder();, +, +        splitAllowed = true;, +        for (int i = 0; i < path.length(); i++) {, +            final char currentC = path.charAt(i);, +            if ('<' == currentC) {, +                splitAllowed = false;, +            } else if (currentC == '>') {, +                splitAllowed = true;, +            } else  if (splitAllowed && currentC == separator) {, +                if (builder.length() > 0) {, +                    result.add(builder.toString());, +                    builder.setLength(0);, +                }, +                continue;, +            }, +            builder.append(currentC);, +        }, +        if (builder.length() > 0) {, +            result.add(builder.toString());, +        }, +        return result.toArray(new String[result.size()]);, +    }, +++ b/core/src/main/java/org/elasticsearch/common/path/PathTrie.java, +import java.util.ArrayList;, +import java.util.List;, +    public static interface Decoder {, +    public static final Decoder NO_DECODER = new Decoder() {, +        @Override, +        public String decode(String value) {, +            return value;, +        }, +    };, +, +    public PathTrie() {, +        this('/', "*", NO_DECODER);, +    }, +, +                params.put(node.namedWildcard(), value);, +        String[] strings = splitPath(decoder.decode(path));, +, +    /*, +      Splits up the url path up by '/' and is aware of, +      index name expressions that appear between '<' and '>'., +     */, +    String[] splitPath(final String path) {, +        if (path == null || path.length() == 0) {, +            return Strings.EMPTY_ARRAY;, +        }, +        int count = 1;, +        boolean splitAllowed = true;, +        for (int i = 0; i < path.length(); i++) {, +            final char currentC = path.charAt(i);, +            if ('<' == currentC) {, +                splitAllowed = false;, +            } else if (currentC == '>') {, +                splitAllowed = true;, +            } else if (splitAllowed && currentC == separator) {, +                count++;, +            }]