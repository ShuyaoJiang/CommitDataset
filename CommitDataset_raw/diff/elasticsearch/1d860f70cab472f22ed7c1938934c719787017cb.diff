[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/tasks/PendingClusterTasksResponse.java, +            builder.field(Fields.INSERT_ORDER, pendingClusterTask.getInsertOrder());, +            builder.field(Fields.PRIORITY, pendingClusterTask.getPriority());, +            builder.field(Fields.SOURCE, pendingClusterTask.getSource());, +            builder.field(Fields.EXECUTING, pendingClusterTask.isExecuting());, +            builder.field(Fields.TIME_IN_QUEUE_MILLIS, pendingClusterTask.getTimeInQueueInMillis());, +        static final XContentBuilderString EXECUTING = new XContentBuilderString("executing");, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/tasks/PendingClusterTasksResponse.java, +            builder.field(Fields.INSERT_ORDER, pendingClusterTask.getInsertOrder());, +            builder.field(Fields.PRIORITY, pendingClusterTask.getPriority());, +            builder.field(Fields.SOURCE, pendingClusterTask.getSource());, +            builder.field(Fields.EXECUTING, pendingClusterTask.isExecuting());, +            builder.field(Fields.TIME_IN_QUEUE_MILLIS, pendingClusterTask.getTimeInQueueInMillis());, +        static final XContentBuilderString EXECUTING = new XContentBuilderString("executing");, +++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +            pendingClusterTasks.add(new PendingClusterTask(pending.insertionOrder, pending.priority, new StringText(source), timeInQueue, pending.executing));, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/tasks/PendingClusterTasksResponse.java, +            builder.field(Fields.INSERT_ORDER, pendingClusterTask.getInsertOrder());, +            builder.field(Fields.PRIORITY, pendingClusterTask.getPriority());, +            builder.field(Fields.SOURCE, pendingClusterTask.getSource());, +            builder.field(Fields.EXECUTING, pendingClusterTask.isExecuting());, +            builder.field(Fields.TIME_IN_QUEUE_MILLIS, pendingClusterTask.getTimeInQueueInMillis());, +        static final XContentBuilderString EXECUTING = new XContentBuilderString("executing");, +++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +            pendingClusterTasks.add(new PendingClusterTask(pending.insertionOrder, pending.priority, new StringText(source), timeInQueue, pending.executing));, +++ b/src/main/java/org/elasticsearch/cluster/service/PendingClusterTask.java, +import org.elasticsearch.Version;, +    private boolean executing;, +    public PendingClusterTask(long insertOrder, Priority priority, Text source, long timeInQueue, boolean executing) {, +        this.executing = executing;, +        return insertOrder;, +        return priority;, +        return source;, +        return timeInQueue;, +    public boolean isExecuting() {, +        return executing;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_1_3_0)) {, +            executing = in.readBoolean();, +        }, +        if (out.getVersion().onOrAfter(Version.V_1_3_0)) {, +            out.writeBoolean(executing);, +        }, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/tasks/PendingClusterTasksResponse.java, +            builder.field(Fields.INSERT_ORDER, pendingClusterTask.getInsertOrder());, +            builder.field(Fields.PRIORITY, pendingClusterTask.getPriority());, +            builder.field(Fields.SOURCE, pendingClusterTask.getSource());, +            builder.field(Fields.EXECUTING, pendingClusterTask.isExecuting());, +            builder.field(Fields.TIME_IN_QUEUE_MILLIS, pendingClusterTask.getTimeInQueueInMillis());, +        static final XContentBuilderString EXECUTING = new XContentBuilderString("executing");, +++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +            pendingClusterTasks.add(new PendingClusterTask(pending.insertionOrder, pending.priority, new StringText(source), timeInQueue, pending.executing));, +++ b/src/main/java/org/elasticsearch/cluster/service/PendingClusterTask.java, +import org.elasticsearch.Version;, +    private boolean executing;, +    public PendingClusterTask(long insertOrder, Priority priority, Text source, long timeInQueue, boolean executing) {, +        this.executing = executing;, +        return insertOrder;, +        return priority;, +        return source;, +        return timeInQueue;, +    public boolean isExecuting() {, +        return executing;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_1_3_0)) {, +            executing = in.readBoolean();, +        }, +        if (out.getVersion().onOrAfter(Version.V_1_3_0)) {, +            out.writeBoolean(executing);, +        }, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedEsThreadPoolExecutor.java, +import com.google.common.collect.Lists;, +import java.util.List;, +import java.util.Queue;, +    private Queue<Runnable> current = ConcurrentCollections.newQueue();, +        List<Pending> pending = Lists.newArrayList();, +        addPending(Lists.newArrayList(current), pending, true);, +        addPending(Lists.newArrayList(getQueue()), pending, false);, +        return pending.toArray(new Pending[pending.size()]);, +    }, +, +    private void addPending(List<Runnable> runnables, List<Pending> pending, boolean executing) {, +        for (Runnable runnable : runnables) {, +            if (runnable instanceof TieBreakingPrioritizedRunnable) {, +                TieBreakingPrioritizedRunnable t = (TieBreakingPrioritizedRunnable) runnable;, +                pending.add(new Pending(t.runnable, t.priority(), t.insertionOrder, executing));, +            } else if (runnable instanceof PrioritizedFutureTask) {, +                PrioritizedFutureTask t = (PrioritizedFutureTask) runnable;, +                pending.add(new Pending(t.task, t.priority, t.insertionOrder, executing));, +    }, +, +    @Override, +    protected void beforeExecute(Thread t, Runnable r) {, +        current.add(r);, +    }, +, +    @Override, +    protected void afterExecute(Runnable r, Throwable t) {]