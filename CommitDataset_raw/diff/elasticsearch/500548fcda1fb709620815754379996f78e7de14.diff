[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +        DiscoveryNodes childNodes = clusterService.state().nodes();, +        final BanLock banLock = new BanLock(childNodes.getSize(), () -> removeBanOnNodes(cancellableTask, childNodes));, +        boolean canceled = taskManager.cancel(cancellableTask, request.getReason(), banLock::onTaskFinished);, +        if (canceled) {, +            if (cancellableTask.shouldCancelChildrenOnCancellation()) {, +                // /In case the task has some child tasks, we need to wait for until ban is set on all nodes, +                logger.trace("cancelling task {} on child nodes", cancellableTask.getId());, +                AtomicInteger responses = new AtomicInteger(childNodes.getSize());, +            } else {, +                logger.trace("task {} doesn't have any children that should be cancelled", cancellableTask.getId());, +    private void setBanOnNodes(String reason, CancellableTask task, DiscoveryNodes nodes, ActionListener<Void> listener) {, +    private void removeBanOnNodes(CancellableTask task, DiscoveryNodes nodes) {, +    private void sendSetBanRequest(DiscoveryNodes nodes, BanParentTaskRequest request, ActionListener<Void> listener) {, +        for (ObjectObjectCursor<String, DiscoveryNode> node : nodes.getNodes()) {, +            logger.trace("Sending ban for tasks with the parent [{}] to the node [{}], ban [{}]", request.parentTaskId, node.key,, +            transportService.sendRequest(node.value, BAN_PARENT_ACTION_NAME, request,, +                        logger.warn("Cannot send ban for tasks with the parent [{}] to the node [{}]", request.parentTaskId, node.key);, +    private void sendRemoveBanRequest(DiscoveryNodes nodes, BanParentTaskRequest request) {, +        for (ObjectObjectCursor<String, DiscoveryNode> node : nodes.getNodes()) {, +            logger.debug("Sending remove ban for tasks with the parent [{}] to the node [{}]", request.parentTaskId, node.key);, +            transportService.sendRequest(node.value, BAN_PARENT_ACTION_NAME, request, EmptyTransportResponseHandler, +        private final Runnable finish;, +        private final int nodesSize;, +        public BanLock(int nodesSize, Runnable finish) {, +            this.nodesSize = nodesSize;, +        public void onTaskFinished() {, +            if (counter.addAndGet(nodesSize) == 0) {, +            finish.run();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +        DiscoveryNodes childNodes = clusterService.state().nodes();, +        final BanLock banLock = new BanLock(childNodes.getSize(), () -> removeBanOnNodes(cancellableTask, childNodes));, +        boolean canceled = taskManager.cancel(cancellableTask, request.getReason(), banLock::onTaskFinished);, +        if (canceled) {, +            if (cancellableTask.shouldCancelChildrenOnCancellation()) {, +                // /In case the task has some child tasks, we need to wait for until ban is set on all nodes, +                logger.trace("cancelling task {} on child nodes", cancellableTask.getId());, +                AtomicInteger responses = new AtomicInteger(childNodes.getSize());, +            } else {, +                logger.trace("task {} doesn't have any children that should be cancelled", cancellableTask.getId());, +    private void setBanOnNodes(String reason, CancellableTask task, DiscoveryNodes nodes, ActionListener<Void> listener) {, +    private void removeBanOnNodes(CancellableTask task, DiscoveryNodes nodes) {, +    private void sendSetBanRequest(DiscoveryNodes nodes, BanParentTaskRequest request, ActionListener<Void> listener) {, +        for (ObjectObjectCursor<String, DiscoveryNode> node : nodes.getNodes()) {, +            logger.trace("Sending ban for tasks with the parent [{}] to the node [{}], ban [{}]", request.parentTaskId, node.key,, +            transportService.sendRequest(node.value, BAN_PARENT_ACTION_NAME, request,, +                        logger.warn("Cannot send ban for tasks with the parent [{}] to the node [{}]", request.parentTaskId, node.key);, +    private void sendRemoveBanRequest(DiscoveryNodes nodes, BanParentTaskRequest request) {, +        for (ObjectObjectCursor<String, DiscoveryNode> node : nodes.getNodes()) {, +            logger.debug("Sending remove ban for tasks with the parent [{}] to the node [{}]", request.parentTaskId, node.key);, +            transportService.sendRequest(node.value, BAN_PARENT_ACTION_NAME, request, EmptyTransportResponseHandler, +        private final Runnable finish;, +        private final int nodesSize;, +        public BanLock(int nodesSize, Runnable finish) {, +            this.nodesSize = nodesSize;, +        public void onTaskFinished() {, +            if (counter.addAndGet(nodesSize) == 0) {, +            finish.run();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +        DiscoveryNodes childNodes = clusterService.state().nodes();, +        final BanLock banLock = new BanLock(childNodes.getSize(), () -> removeBanOnNodes(cancellableTask, childNodes));, +        boolean canceled = taskManager.cancel(cancellableTask, request.getReason(), banLock::onTaskFinished);, +        if (canceled) {, +            if (cancellableTask.shouldCancelChildrenOnCancellation()) {, +                // /In case the task has some child tasks, we need to wait for until ban is set on all nodes, +                logger.trace("cancelling task {} on child nodes", cancellableTask.getId());, +                AtomicInteger responses = new AtomicInteger(childNodes.getSize());, +            } else {, +                logger.trace("task {} doesn't have any children that should be cancelled", cancellableTask.getId());, +    private void setBanOnNodes(String reason, CancellableTask task, DiscoveryNodes nodes, ActionListener<Void> listener) {, +    private void removeBanOnNodes(CancellableTask task, DiscoveryNodes nodes) {, +    private void sendSetBanRequest(DiscoveryNodes nodes, BanParentTaskRequest request, ActionListener<Void> listener) {, +        for (ObjectObjectCursor<String, DiscoveryNode> node : nodes.getNodes()) {, +            logger.trace("Sending ban for tasks with the parent [{}] to the node [{}], ban [{}]", request.parentTaskId, node.key,, +            transportService.sendRequest(node.value, BAN_PARENT_ACTION_NAME, request,, +                        logger.warn("Cannot send ban for tasks with the parent [{}] to the node [{}]", request.parentTaskId, node.key);, +    private void sendRemoveBanRequest(DiscoveryNodes nodes, BanParentTaskRequest request) {, +        for (ObjectObjectCursor<String, DiscoveryNode> node : nodes.getNodes()) {, +            logger.debug("Sending remove ban for tasks with the parent [{}] to the node [{}]", request.parentTaskId, node.key);, +            transportService.sendRequest(node.value, BAN_PARENT_ACTION_NAME, request, EmptyTransportResponseHandler, +        private final Runnable finish;, +        private final int nodesSize;, +        public BanLock(int nodesSize, Runnable finish) {, +            this.nodesSize = nodesSize;, +        public void onTaskFinished() {, +            if (counter.addAndGet(nodesSize) == 0) {, +            finish.run();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTask.java, +    @Override, +    public boolean shouldCancelChildrenOnCancellation() {, +        return true;, +    }]