[+++ b/docs/reference/query-dsl/filters/geo-distance-filter.asciidoc, +    How to compute the distance. Can either be `arc` (better precision),, +    `sloppy_arc` (faster but less precise) or `plane` (fastest). Defaults, +    to `sloppy_arc`., +++ b/docs/reference/query-dsl/filters/geo-distance-filter.asciidoc, +    How to compute the distance. Can either be `arc` (better precision),, +    `sloppy_arc` (faster but less precise) or `plane` (fastest). Defaults, +    to `sloppy_arc`., +++ b/docs/reference/search/aggregations/bucket/geodistance-aggregation.asciidoc, +There are two distance calculation modes: `sloppy_arc` (the default), `arc` (most accurate) and `plane` (fastest). The `arc` calculation is the most accurate one but also the more expensive one in terms of performance. The `sloppy_arc` is faster but less accurate. The `plane` is the fastest but least accurate distance function. Consider using `plane` when your search context is "narrow" and spans smaller geographical areas (like cities or even countries). `plane` may return higher error mergins for searches across very large areas (e.g. cross continent search). The distance calculation type can be set using the `distance_type` parameter:, +++ b/docs/reference/query-dsl/filters/geo-distance-filter.asciidoc, +    How to compute the distance. Can either be `arc` (better precision),, +    `sloppy_arc` (faster but less precise) or `plane` (fastest). Defaults, +    to `sloppy_arc`., +++ b/docs/reference/search/aggregations/bucket/geodistance-aggregation.asciidoc, +There are two distance calculation modes: `sloppy_arc` (the default), `arc` (most accurate) and `plane` (fastest). The `arc` calculation is the most accurate one but also the more expensive one in terms of performance. The `sloppy_arc` is faster but less accurate. The `plane` is the fastest but least accurate distance function. Consider using `plane` when your search context is "narrow" and spans smaller geographical areas (like cities or even countries). `plane` may return higher error mergins for searches across very large areas (e.g. cross continent search). The distance calculation type can be set using the `distance_type` parameter:, +++ b/docs/reference/search/facets/geo-distance-facet.asciidoc, +(better precision), `sloppy_arc` (faster) or `plane` (fastest). Defaults to `sloppy_arc`., +++ b/docs/reference/query-dsl/filters/geo-distance-filter.asciidoc, +    How to compute the distance. Can either be `arc` (better precision),, +    `sloppy_arc` (faster but less precise) or `plane` (fastest). Defaults, +    to `sloppy_arc`., +++ b/docs/reference/search/aggregations/bucket/geodistance-aggregation.asciidoc, +There are two distance calculation modes: `sloppy_arc` (the default), `arc` (most accurate) and `plane` (fastest). The `arc` calculation is the most accurate one but also the more expensive one in terms of performance. The `sloppy_arc` is faster but less accurate. The `plane` is the fastest but least accurate distance function. Consider using `plane` when your search context is "narrow" and spans smaller geographical areas (like cities or even countries). `plane` may return higher error mergins for searches across very large areas (e.g. cross continent search). The distance calculation type can be set using the `distance_type` parameter:, +++ b/docs/reference/search/facets/geo-distance-facet.asciidoc, +(better precision), `sloppy_arc` (faster) or `plane` (fastest). Defaults to `sloppy_arc`., +++ b/src/main/java/org/elasticsearch/common/geo/GeoDistance.java, +import java.util.Locale;, +, +, +     * Calculates distance as points on a globe., +            double longitudeDifference = targetLongitude - sourceLongitude;, +            double a = Math.toRadians(90D - sourceLatitude);, +            double c = Math.toRadians(90D - targetLatitude);, +            double factor = (Math.cos(a) * Math.cos(c)) + (Math.sin(a) * Math.sin(c) * Math.cos(Math.toRadians(longitudeDifference)));, +, +            if (factor < -1D) {, +                return unit.fromMeters(Math.PI * GeoUtils.EARTH_MEAN_RADIUS);, +            } else if (factor >= 1D) {, +                return 0;, +            } else {, +                return unit.fromMeters(Math.acos(factor) * GeoUtils.EARTH_MEAN_RADIUS);, +            }, +    },, +    /**, +     * Calculates distance as points on a globe in a sloppy way. Close to the pole areas the accuracy, +     * of this function decreases., +     */, +    SLOPPY_ARC() {, +, +        @Override, +        public double normalize(double distance, DistanceUnit unit) {, +            return distance;, +        }, +, +        @Override, +        public double calculate(double sourceLatitude, double sourceLongitude, double targetLatitude, double targetLongitude, DistanceUnit unit) {, +            return unit.fromMeters(SloppyMath.haversin(sourceLatitude, sourceLongitude, targetLatitude, targetLongitude) * 1000.0);, +        }, +, +        @Override, +        public FixedSourceDistance fixedSourceDistance(double sourceLatitude, double sourceLongitude, DistanceUnit unit) {, +            return new SloppyArcFixedSourceDistance(sourceLatitude, sourceLongitude, unit);, +        }, +    /**, +     * Default {@link GeoDistance} function. This method should be used, If no specific function has been selected., +     * This is an alias for <code>SLOPPY_ARC</code>, +     */, +    public static final GeoDistance DEFAULT = SLOPPY_ARC; , +    , +    /**, +     * Get a {@link GeoDistance} according to a given name. Valid values are, +     * , +     * <ul>, +     *     <li><b>plane</b> for <code>GeoDistance.PLANE</code></li>, +     *     <li><b>sloppy_arc</b> for <code>GeoDistance.SLOPPY_ARC</code></li>, +     *     <li><b>factor</b> for <code>GeoDistance.FACTOR</code></li>, +     *     <li><b>arc</b> for <code>GeoDistance.ARC</code></li>, +     * </ul>, +     * , +     * @param name name of the {@link GeoDistance}, +     * @return a {@link GeoDistance}, +     */, +    public static GeoDistance fromString(String name) {, +        name = name.toLowerCase(Locale.ROOT);, +        if ("plane".equals(name)) {, +        } else if ("arc".equals(name)) {, +        } else if ("sloppy_arc".equals(name)) {, +            return SLOPPY_ARC;, +        } else if ("factor".equals(name)) {, +        throw new ElasticSearchIllegalArgumentException("No geo distance for [" + name + "]");, +    /**, +     * Basic implementation of {@link FixedSourceDistance}. This class keeps the basic parameters for a distance, +     * functions based on a fixed source. Namely latitude, longitude and unit. , +     */, +    public static abstract class FixedSourceDistanceBase implements FixedSourceDistance {, +        protected final double sourceLatitude;, +        protected final double sourceLongitude;, +        protected final DistanceUnit unit;, +        public FixedSourceDistanceBase(double sourceLatitude, double sourceLongitude, DistanceUnit unit) {]