[+++ b/src/main/java/org/elasticsearch/common/compress/CompressedIndexInput.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.compress;, +, +import org.apache.lucene.store.IndexInput;, +, +import java.io.EOFException;, +import java.io.IOException;, +, +/**, + */, +public abstract class CompressedIndexInput extends IndexInput {, +, +    private IndexInput in;, +, +    private int version;, +    private long uncompressedLength;, +    private long[] offsets;, +, +    private boolean closed;, +, +    protected byte[] uncompressed;, +    private int position = 0;, +    private int valid = 0;, +    private long headerLength;, +    private int currentOffsetIdx;, +    private long currentOffset;, +    private long currentOffsetFilePointer;, +    private long metaDataPosition;, +, +    public CompressedIndexInput(IndexInput in) throws IOException {, +        super("compressed(" + in.toString() + ")");, +        this.in = in;, +        readHeader(in);, +        this.version = in.readInt();, +        metaDataPosition = in.readLong();, +        headerLength = in.getFilePointer();, +        in.seek(metaDataPosition);, +        this.uncompressedLength = in.readVLong();, +        int size = in.readVInt();, +        offsets = new long[size];, +        for (int i = 0; i < offsets.length; i++) {, +            offsets[i] = in.readVLong();, +        }, +        this.currentOffsetIdx = -1;, +        this.currentOffset = 0;, +        this.currentOffsetFilePointer = 0;, +        in.seek(headerLength);, +    }, +, +    /**, +     * Method is overridden to report number of bytes that can now be read, +     * from decoded data buffer, without reading bytes from the underlying, +     * stream., +     * Never throws an exception; returns number of bytes available without, +     * further reads from underlying source; -1 if stream has been closed, or, +     * 0 if an actual read (and possible blocking) is needed to find out., +     */, +    public int available() throws IOException {, +        // if closed, return -1;, +        if (closed) {, +            return -1;, +        }, +        int left = (valid - position);, +        return (left <= 0) ? 0 : left;, +    }, +, +    @Override, +    public byte readByte() throws IOException {, +        if (!readyBuffer()) {, +            throw new EOFException();, +        }, +        return uncompressed[position++];, +    }, +, +    public int read(byte[] buffer, int offset, int length, boolean fullRead) throws IOException {, +        if (length < 1) {, +            return 0;, +        }, +        if (!readyBuffer()) {, +            return -1;, +        }]