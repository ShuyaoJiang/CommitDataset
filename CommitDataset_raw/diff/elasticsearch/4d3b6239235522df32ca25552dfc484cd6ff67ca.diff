[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +    public Document rootDoc() {, +        return documents.get(0);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +    public Document rootDoc() {, +        return documents.get(0);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +    public static class Nested {, +        public static final Nested NO = new Nested(false, false, false);, +, +        public static Nested newNested(boolean includeInParent, boolean includeInRoot) {, +            return new Nested(true, includeInParent, includeInRoot);, +        }, +, +        private final boolean nested;, +, +        private final boolean includeInParent;, +, +        private final boolean includeInRoot;, +, +        private Nested(boolean nested, boolean includeInParent, boolean includeInRoot) {, +            this.nested = nested;, +            this.includeInParent = includeInParent;, +            this.includeInRoot = includeInRoot;, +        }, +, +        public boolean isNested() {, +            return nested;, +        }, +, +        public boolean isIncludeInParent() {, +            return includeInParent;, +        }, +, +        public boolean isIncludeInRoot() {, +            return includeInRoot;, +        }, +            boolean nested = false;, +            boolean nestedIncludeInParent = false;, +            boolean nestedIncludeInRoot = false;, +                        nested = true;, +                } else if (fieldName.equals("include_in_parent")) {, +                    nestedIncludeInParent = nodeBooleanValue(fieldNode);, +                } else if (fieldName.equals("include_in_root")) {, +                    nestedIncludeInRoot = nodeBooleanValue(fieldNode);, +, +            if (nested) {, +                builder.nested = Nested.newNested(nestedIncludeInParent, nestedIncludeInRoot);, +            }, +, +            if (nested.isIncludeInParent()) {, +            }, +            if (nested.isIncludeInRoot()) {, +                // don't add it twice, if its included in parent, and we are handling the master doc..., +                if (!(nested.isIncludeInParent() && context.doc() == context.rootDoc())) {, +                            context.rootDoc().add(field);, +                        }, +            if (nested.isIncludeInParent()) {, +                builder.field("include_in_parent", true);, +            }, +            if (nested.isIncludeInRoot()) {, +                builder.field("include_in_root", true);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +    public Document rootDoc() {, +        return documents.get(0);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +    public static class Nested {, +        public static final Nested NO = new Nested(false, false, false);, +, +        public static Nested newNested(boolean includeInParent, boolean includeInRoot) {, +            return new Nested(true, includeInParent, includeInRoot);, +        }, +, +        private final boolean nested;, +, +        private final boolean includeInParent;, +, +        private final boolean includeInRoot;, +, +        private Nested(boolean nested, boolean includeInParent, boolean includeInRoot) {, +            this.nested = nested;, +            this.includeInParent = includeInParent;, +            this.includeInRoot = includeInRoot;, +        }, +, +        public boolean isNested() {, +            return nested;, +        }, +, +        public boolean isIncludeInParent() {]