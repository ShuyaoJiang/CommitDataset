[+++ b/elasticsearch/qa/smoke-test-plugins-ssl/build.gradle, +    setupCommand 'setupMonitoringUser',, +++ b/elasticsearch/qa/smoke-test-plugins-ssl/build.gradle, +    setupCommand 'setupMonitoringUser',, +++ b/elasticsearch/x-pack/build.gradle, +for (String module : ['', 'license-plugin/', 'security/', 'watcher/', 'monitoring/', 'graph/']) {, +++ b/elasticsearch/qa/smoke-test-plugins-ssl/build.gradle, +    setupCommand 'setupMonitoringUser',, +++ b/elasticsearch/x-pack/build.gradle, +for (String module : ['', 'license-plugin/', 'security/', 'watcher/', 'monitoring/', 'graph/']) {, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.plugins.ActionPlugin;, +import org.elasticsearch.plugins.ActionPlugin.ActionHandler;, +import static java.util.Collections.emptyList;, +import static java.util.Collections.singletonList;, +, +public class Graph extends Plugin implements ActionPlugin {, +    @Override, +    public List<ActionHandler<? extends ActionRequest<?>, ? extends ActionResponse>> getActions() {, +            return singletonList(new ActionHandler<>(GraphExploreAction.INSTANCE, TransportGraphExploreAction.class));, +        return emptyList();, +++ b/elasticsearch/qa/smoke-test-plugins-ssl/build.gradle, +    setupCommand 'setupMonitoringUser',, +++ b/elasticsearch/x-pack/build.gradle, +for (String module : ['', 'license-plugin/', 'security/', 'watcher/', 'monitoring/', 'graph/']) {, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.plugins.ActionPlugin;, +import org.elasticsearch.plugins.ActionPlugin.ActionHandler;, +import static java.util.Collections.emptyList;, +import static java.util.Collections.singletonList;, +, +public class Graph extends Plugin implements ActionPlugin {, +    @Override, +    public List<ActionHandler<? extends ActionRequest<?>, ? extends ActionResponse>> getActions() {, +            return singletonList(new ActionHandler<>(GraphExploreAction.INSTANCE, TransportGraphExploreAction.class));, +        return emptyList();, +++ b/elasticsearch/x-pack/graph/src/test/java/org/elasticsearch/xpack/graph/test/GraphTests.java, +import org.elasticsearch.xpack.monitoring.Monitoring;, +++ b/elasticsearch/qa/smoke-test-plugins-ssl/build.gradle, +    setupCommand 'setupMonitoringUser',, +++ b/elasticsearch/x-pack/build.gradle, +for (String module : ['', 'license-plugin/', 'security/', 'watcher/', 'monitoring/', 'graph/']) {, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.plugins.ActionPlugin;, +import org.elasticsearch.plugins.ActionPlugin.ActionHandler;, +import static java.util.Collections.emptyList;, +import static java.util.Collections.singletonList;, +, +public class Graph extends Plugin implements ActionPlugin {, +    @Override, +    public List<ActionHandler<? extends ActionRequest<?>, ? extends ActionResponse>> getActions() {, +            return singletonList(new ActionHandler<>(GraphExploreAction.INSTANCE, TransportGraphExploreAction.class));, +        return emptyList();, +++ b/elasticsearch/x-pack/graph/src/test/java/org/elasticsearch/xpack/graph/test/GraphTests.java, +import org.elasticsearch.xpack.monitoring.Monitoring;, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/Licensing.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.plugins.ActionPlugin;, +import java.util.Arrays;, +import static java.util.Collections.emptyList;, +public class Licensing implements ActionPlugin {, +    @Override, +    public List<ActionHandler<? extends ActionRequest<?>, ? extends ActionResponse>> getActions() {, +        if (isTribeNode) {, +            return emptyList();, +        return Arrays.asList(new ActionHandler<>(PutLicenseAction.INSTANCE, TransportPutLicenseAction.class),, +                new ActionHandler<>(GetLicenseAction.INSTANCE, TransportGetLicenseAction.class),, +                new ActionHandler<>(DeleteLicenseAction.INSTANCE, TransportDeleteLicenseAction.class));, +++ b/elasticsearch/qa/smoke-test-plugins-ssl/build.gradle, +    setupCommand 'setupMonitoringUser',, +++ b/elasticsearch/x-pack/build.gradle, +for (String module : ['', 'license-plugin/', 'security/', 'watcher/', 'monitoring/', 'graph/']) {, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/xpack/graph/Graph.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.plugins.ActionPlugin;, +import org.elasticsearch.plugins.ActionPlugin.ActionHandler;, +import static java.util.Collections.emptyList;, +import static java.util.Collections.singletonList;, +, +public class Graph extends Plugin implements ActionPlugin {, +    @Override, +    public List<ActionHandler<? extends ActionRequest<?>, ? extends ActionResponse>> getActions() {, +            return singletonList(new ActionHandler<>(GraphExploreAction.INSTANCE, TransportGraphExploreAction.class));, +        return emptyList();, +++ b/elasticsearch/x-pack/graph/src/test/java/org/elasticsearch/xpack/graph/test/GraphTests.java, +import org.elasticsearch.xpack.monitoring.Monitoring;, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/Licensing.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.plugins.ActionPlugin;, +import java.util.Arrays;, +import static java.util.Collections.emptyList;]