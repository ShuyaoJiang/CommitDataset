[+++ b/src/test/java/org/elasticsearch/broadcast/BroadcastActionsTests.java, +import static org.elasticsearch.client.Requests.countRequest;, +import static org.elasticsearch.client.Requests.indexRequest;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +    @Override, +    protected int maximumNumberOfReplicas() {, +        return 1;, +    }, +, +        assertAcked(prepareCreate("test", 1).execute().actionGet(5000));, +        ensureYellow();, +++ b/src/test/java/org/elasticsearch/broadcast/BroadcastActionsTests.java, +import static org.elasticsearch.client.Requests.countRequest;, +import static org.elasticsearch.client.Requests.indexRequest;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +    @Override, +    protected int maximumNumberOfReplicas() {, +        return 1;, +    }, +, +        assertAcked(prepareCreate("test", 1).execute().actionGet(5000));, +        ensureYellow();, +++ b/src/test/java/org/elasticsearch/cluster/ClusterHealthTests.java, +        healthResponse = client().admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10s").execute().actionGet();, +        createIndex("test1");, +        healthResponse = client().admin().cluster().prepareHealth("test1").setWaitForGreenStatus().setTimeout("10s").execute().actionGet();, +++ b/src/test/java/org/elasticsearch/broadcast/BroadcastActionsTests.java, +import static org.elasticsearch.client.Requests.countRequest;, +import static org.elasticsearch.client.Requests.indexRequest;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +    @Override, +    protected int maximumNumberOfReplicas() {, +        return 1;, +    }, +, +        assertAcked(prepareCreate("test", 1).execute().actionGet(5000));, +        ensureYellow();, +++ b/src/test/java/org/elasticsearch/cluster/ClusterHealthTests.java, +        healthResponse = client().admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10s").execute().actionGet();, +        createIndex("test1");, +        healthResponse = client().admin().cluster().prepareHealth("test1").setWaitForGreenStatus().setTimeout("10s").execute().actionGet();, +++ b/src/test/java/org/elasticsearch/cluster/ack/AckClusterUpdateSettingsTests.java, +                        .put("number_of_shards", between(cluster().dataNodes(), DEFAULT_MAX_NUM_SHARDS)), +++ b/src/test/java/org/elasticsearch/broadcast/BroadcastActionsTests.java, +import static org.elasticsearch.client.Requests.countRequest;, +import static org.elasticsearch.client.Requests.indexRequest;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +    @Override, +    protected int maximumNumberOfReplicas() {, +        return 1;, +    }, +, +        assertAcked(prepareCreate("test", 1).execute().actionGet(5000));, +        ensureYellow();, +++ b/src/test/java/org/elasticsearch/cluster/ClusterHealthTests.java, +        healthResponse = client().admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10s").execute().actionGet();, +        createIndex("test1");, +        healthResponse = client().admin().cluster().prepareHealth("test1").setWaitForGreenStatus().setTimeout("10s").execute().actionGet();, +++ b/src/test/java/org/elasticsearch/cluster/ack/AckClusterUpdateSettingsTests.java, +                        .put("number_of_shards", between(cluster().dataNodes(), DEFAULT_MAX_NUM_SHARDS)), +++ b/src/test/java/org/elasticsearch/cluster/ack/AckTests.java, +                .put(SETTING_NUMBER_OF_SHARDS, between(cluster().dataNodes(), DEFAULT_MAX_NUM_SHARDS)), +                        .put(SETTING_NUMBER_OF_SHARDS, between(cluster().dataNodes(), DEFAULT_MAX_NUM_SHARDS)), +                        .put(SETTING_NUMBER_OF_SHARDS, between(cluster().dataNodes(), DEFAULT_MAX_NUM_SHARDS)), +                        .put(SETTING_NUMBER_OF_SHARDS, between(cluster().dataNodes(), DEFAULT_MAX_NUM_SHARDS)), +++ b/src/test/java/org/elasticsearch/broadcast/BroadcastActionsTests.java, +import static org.elasticsearch.client.Requests.countRequest;, +import static org.elasticsearch.client.Requests.indexRequest;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +    @Override, +    protected int maximumNumberOfReplicas() {, +        return 1;, +    }, +, +        assertAcked(prepareCreate("test", 1).execute().actionGet(5000));, +        ensureYellow();, +++ b/src/test/java/org/elasticsearch/cluster/ClusterHealthTests.java, +        healthResponse = client().admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10s").execute().actionGet();, +        createIndex("test1");, +        healthResponse = client().admin().cluster().prepareHealth("test1").setWaitForGreenStatus().setTimeout("10s").execute().actionGet();, +++ b/src/test/java/org/elasticsearch/cluster/ack/AckClusterUpdateSettingsTests.java, +                        .put("number_of_shards", between(cluster().dataNodes(), DEFAULT_MAX_NUM_SHARDS)), +++ b/src/test/java/org/elasticsearch/cluster/ack/AckTests.java, +                .put(SETTING_NUMBER_OF_SHARDS, between(cluster().dataNodes(), DEFAULT_MAX_NUM_SHARDS)), +                        .put(SETTING_NUMBER_OF_SHARDS, between(cluster().dataNodes(), DEFAULT_MAX_NUM_SHARDS)), +                        .put(SETTING_NUMBER_OF_SHARDS, between(cluster().dataNodes(), DEFAULT_MAX_NUM_SHARDS)), +                        .put(SETTING_NUMBER_OF_SHARDS, between(cluster().dataNodes(), DEFAULT_MAX_NUM_SHARDS)), +++ b/src/test/java/org/elasticsearch/cluster/allocation/AwarenessAllocationTests.java, +    @Override, +    protected int numberOfReplicas() {, +        return 1;, +    }, +, +        ensureGreen();, +++ b/src/test/java/org/elasticsearch/broadcast/BroadcastActionsTests.java, +import static org.elasticsearch.client.Requests.countRequest;, +import static org.elasticsearch.client.Requests.indexRequest;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +    @Override, +    protected int maximumNumberOfReplicas() {]