[+++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +    public AwarenessAllocationDecider() {, +        this(ImmutableSettings.Builder.EMPTY_SETTINGS);, +    }, +, +    public AwarenessAllocationDecider(Settings settings) {, +        this(settings, new NodeSettingsService(settings));, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +    public AwarenessAllocationDecider() {, +        this(ImmutableSettings.Builder.EMPTY_SETTINGS);, +    }, +, +    public AwarenessAllocationDecider(Settings settings) {, +        this(settings, new NodeSettingsService(settings));, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/routing/operation/plain/PlainOperationRouting.java, +import org.elasticsearch.common.Strings;, +                        ShardIterator iterator = preferenceActiveShardIterator(indexShard, clusterState.nodes().localNodeId(), clusterState.nodes(), preference);, +                        if (iterator != null) {, +                            set.add(iterator);, +                        }, +                    ShardIterator iterator = preferenceActiveShardIterator(indexShard, clusterState.nodes().localNodeId(), clusterState.nodes(), preference);, +                    if (iterator != null) {, +                        set.add(iterator);, +                    }, +            if (preference.startsWith("_shards:")) {, +                // starts with _shards, so execute on specific ones, +                int index = preference.indexOf(';');, +                String shards;, +                if (index == -1) {, +                    shards = preference.substring("_shards:".length());, +                } else {, +                    shards = preference.substring("_shards:".length(), index);, +                }, +                String[] ids = Strings.splitStringByCommaToArray(shards);, +                boolean found = false;, +                for (String id : ids) {, +                    if (Integer.parseInt(id) == indexShard.shardId().id()) {, +                        found = true;, +                        break;, +                    }, +                }, +                if (!found) {, +                    return null;, +                }, +                // no more preference, +                if (index == -1 || index == preference.length() - 1) {, +                    String[] awarenessAttributes = awarenessAllocationDecider.awarenessAttributes();, +                    if (awarenessAttributes.length == 0) {, +                        return indexShard.activeShardsRandomIt();, +                    } else {, +                        return indexShard.preferAttributesActiveShardsIt(awarenessAttributes, nodes);, +                    }, +                } else {, +                    // update the preference and continue, +                    preference = preference.substring(index + 1);, +                }, +            }, +            if (preference.startsWith("_prefer_node:")) {, +                return indexShard.preferNodeActiveShardsIt(preference.substring("_prefer_node:".length()));, +            }, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/AwarenessAllocationDecider.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +    public AwarenessAllocationDecider() {, +        this(ImmutableSettings.Builder.EMPTY_SETTINGS);, +    }, +, +    public AwarenessAllocationDecider(Settings settings) {, +        this(settings, new NodeSettingsService(settings));, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/routing/operation/plain/PlainOperationRouting.java, +import org.elasticsearch.common.Strings;, +                        ShardIterator iterator = preferenceActiveShardIterator(indexShard, clusterState.nodes().localNodeId(), clusterState.nodes(), preference);, +                        if (iterator != null) {, +                            set.add(iterator);, +                        }, +                    ShardIterator iterator = preferenceActiveShardIterator(indexShard, clusterState.nodes().localNodeId(), clusterState.nodes(), preference);, +                    if (iterator != null) {, +                        set.add(iterator);, +                    }, +            if (preference.startsWith("_shards:")) {, +                // starts with _shards, so execute on specific ones, +                int index = preference.indexOf(';');, +                String shards;, +                if (index == -1) {, +                    shards = preference.substring("_shards:".length());, +                } else {, +                    shards = preference.substring("_shards:".length(), index);, +                }, +                String[] ids = Strings.splitStringByCommaToArray(shards);, +                boolean found = false;, +                for (String id : ids) {, +                    if (Integer.parseInt(id) == indexShard.shardId().id()) {, +                        found = true;]