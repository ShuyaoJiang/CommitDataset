[+++ b/src/main/java/org/elasticsearch/shield/authz/Privilege.java, +    static final String SUB_ACTION_SUFFIX_PATTERN = "*";, +                "internal:*", +        public static final Index ALL =             new Index(Name.ALL,         "indices:*");, +        public static final Index MANAGE =          new Index("manage",         "indices:monitor/*", "indices:admin/*");, +        public static final Index MONITOR =         new Index("monitor",        "indices:monitor/*");, +        public static final Index DATA_ACCESS =     new Index("data_access",    "indices:data/*");, +        public static final Index CRUD =            new Index("crud",           "indices:data/write/*", "indices:data/read/*");, +        public static final Index READ =            new Index("read",           "indices:data/read/*");, +        public static final Index SEARCH =          new Index("search",         SearchAction.NAME + "*", GetAction.NAME + "*");, +        public static final Index GET =             new Index("get",            GetAction.NAME + "*");, +        public static final Index INDEX =           new Index("index",          "indices:data/write/index*", "indices:data/write/update");, +        public static final Index DELETE =          new Index("delete",         "indices:data/write/delete*");, +        public static final Index WRITE =           new Index("write",          "indices:data/write/*");, +        public static final Cluster ALL     = new Cluster(Name.ALL,     "cluster:*", "indices:admin/template/*");, +        public static final Cluster MONITOR = new Cluster("monitor",    "cluster:monitor/*");, +        return text + SUB_ACTION_SUFFIX_PATTERN;, +++ b/src/main/java/org/elasticsearch/shield/authz/Privilege.java, +    static final String SUB_ACTION_SUFFIX_PATTERN = "*";, +                "internal:*", +        public static final Index ALL =             new Index(Name.ALL,         "indices:*");, +        public static final Index MANAGE =          new Index("manage",         "indices:monitor/*", "indices:admin/*");, +        public static final Index MONITOR =         new Index("monitor",        "indices:monitor/*");, +        public static final Index DATA_ACCESS =     new Index("data_access",    "indices:data/*");, +        public static final Index CRUD =            new Index("crud",           "indices:data/write/*", "indices:data/read/*");, +        public static final Index READ =            new Index("read",           "indices:data/read/*");, +        public static final Index SEARCH =          new Index("search",         SearchAction.NAME + "*", GetAction.NAME + "*");, +        public static final Index GET =             new Index("get",            GetAction.NAME + "*");, +        public static final Index INDEX =           new Index("index",          "indices:data/write/index*", "indices:data/write/update");, +        public static final Index DELETE =          new Index("delete",         "indices:data/write/delete*");, +        public static final Index WRITE =           new Index("write",          "indices:data/write/*");, +        public static final Cluster ALL     = new Cluster(Name.ALL,     "cluster:*", "indices:admin/template/*");, +        public static final Cluster MONITOR = new Cluster("monitor",    "cluster:monitor/*");, +        return text + SUB_ACTION_SUFFIX_PATTERN;, +++ b/src/main/java/org/elasticsearch/shield/support/Automatons.java, +import org.apache.lucene.util.automaton.Operations;, +import java.util.ArrayList;, +import java.util.List;, +    static final char WILDCARD_STRING = '*';     // String equality with support for wildcards, +    static final char WILDCARD_CHAR = '?';       // Char equality with support for wildcards, +    static final char WILDCARD_ESCAPE = '\\';    // Escape character, +, +    /**, +     * Builds and returns an automaton that will represent the union of all the given patterns., +     */, +        Automaton automaton = pattern(patterns[0]);, +            automaton = union(automaton, pattern(pattern));, +    /**, +     * Builds and returns an automaton that will represent the union of all the given patterns., +     */, +                automaton = pattern(pattern);, +                automaton = union(automaton, pattern(pattern));, +    /**, +     * Builds and returns an automaton that represents the given pattern., +     */, +    static Automaton pattern(String pattern) {, +        if (pattern.startsWith("/")) { // it's a lucene regexp, +            if (pattern.length() == 1 || !pattern.endsWith("/")) {, +                throw new IllegalArgumentException("Invalid pattern [" + pattern + "]. Patterns starting with '/' " +, +                        "indicate regular expression pattern and therefore must also end with '/'." +, +                        " Other patterns (those that do not start with '/') will be treated as simple wildcard patterns");, +            }, +            String regex = pattern.substring(1, pattern.length() - 1);, +            return new RegExp(regex).toAutomaton();, +        }, +        return wildcard(pattern);, +    }, +, +    /**, +     * Builds and returns an automaton that represents the given pattern., +     */, +    static Automaton wildcard(String text) {, +        List<Automaton> automata = new ArrayList<>();, +        for (int i = 0; i < text.length();) {, +            final int c = text.codePointAt(i);, +            int length = Character.charCount(c);, +            switch(c) {, +                case WILDCARD_STRING:, +                    automata.add(Automata.makeAnyString());, +                    break;, +                case WILDCARD_CHAR:, +                    automata.add(Automata.makeAnyChar());, +                    break;, +                case WILDCARD_ESCAPE:, +                    // add the next codepoint instead, if it exists, +                    if (i + length < text.length()) {, +                        final int nextChar = text.codePointAt(i + length);, +                        length += Character.charCount(nextChar);, +                        automata.add(Automata.makeChar(nextChar));, +                        break;, +                    } // else fallthru, lenient parsing with a trailing \, +                default:, +                    automata.add(Automata.makeChar(c));, +            }, +            i += length;, +        }, +        return Operations.concatenate(automata);, +    }, +, +++ b/src/main/java/org/elasticsearch/shield/authz/Privilege.java]