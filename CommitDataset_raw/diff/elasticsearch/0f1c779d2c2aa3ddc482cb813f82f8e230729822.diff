[+++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            Releasables.closeWhileHandlingException(phase1Snapshot, onGoingRecoveries);, +            Releasables.closeWhileHandlingException(phase1Snapshot, onGoingRecoveries);, +            Releasables.closeWhileHandlingException(phase1Snapshot, phase2Snapshot, onGoingRecoveries);, +            Releasables.close(success, phase1Snapshot, phase2Snapshot, phase3Snapshot,, +                    onGoingRecoveries, writeLock); // hmm why can't we use try-with here?, +++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            Releasables.closeWhileHandlingException(phase1Snapshot, onGoingRecoveries);, +            Releasables.closeWhileHandlingException(phase1Snapshot, onGoingRecoveries);, +            Releasables.closeWhileHandlingException(phase1Snapshot, phase2Snapshot, onGoingRecoveries);, +            Releasables.close(success, phase1Snapshot, phase2Snapshot, phase3Snapshot,, +                    onGoingRecoveries, writeLock); // hmm why can't we use try-with here?, +++ b/src/main/java/org/elasticsearch/index/translog/Translog.java, +     *, +     * @return the number of clean up files, +    int clearUnreferenced();, +++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            Releasables.closeWhileHandlingException(phase1Snapshot, onGoingRecoveries);, +            Releasables.closeWhileHandlingException(phase1Snapshot, onGoingRecoveries);, +            Releasables.closeWhileHandlingException(phase1Snapshot, phase2Snapshot, onGoingRecoveries);, +            Releasables.close(success, phase1Snapshot, phase2Snapshot, phase3Snapshot,, +                    onGoingRecoveries, writeLock); // hmm why can't we use try-with here?, +++ b/src/main/java/org/elasticsearch/index/translog/Translog.java, +     *, +     * @return the number of clean up files, +    int clearUnreferenced();, +++ b/src/main/java/org/elasticsearch/index/translog/fs/FsTranslog.java, +import java.nio.file.*;, +    public int clearUnreferenced() {, +        int deleted = 0;, +                                deleted++;, +        return deleted;, +++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +            Releasables.closeWhileHandlingException(phase1Snapshot, onGoingRecoveries);, +            Releasables.closeWhileHandlingException(phase1Snapshot, onGoingRecoveries);, +            Releasables.closeWhileHandlingException(phase1Snapshot, phase2Snapshot, onGoingRecoveries);, +            Releasables.close(success, phase1Snapshot, phase2Snapshot, phase3Snapshot,, +                    onGoingRecoveries, writeLock); // hmm why can't we use try-with here?, +++ b/src/main/java/org/elasticsearch/index/translog/Translog.java, +     *, +     * @return the number of clean up files, +    int clearUnreferenced();, +++ b/src/main/java/org/elasticsearch/index/translog/fs/FsTranslog.java, +import java.nio.file.*;, +    public int clearUnreferenced() {, +        int deleted = 0;, +                                deleted++;, +        return deleted;, +++ b/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +import org.apache.lucene.util.IOUtils;, +    public static final String TRANSLOG_PRIMARY_LOCATION = "work/fs-translog/primary";, +    public static final String TRANSLOG_REPLICA_LOCATION = "work/fs-translog/replica";, +    protected InternalEngine engine;, +    protected InternalEngine replicaEngine;, +        // clean up shared directory, +        IOUtils.rm(Paths.get(TRANSLOG_PRIMARY_LOCATION));, +        IOUtils.rm(Paths.get(TRANSLOG_REPLICA_LOCATION));, +        LiveIndexWriterConfig currentIndexWriterConfig = engine.getCurrentIndexWriterConfig();, +        assertEquals(engine.config().getCodec().getName(), codecService.codec(codecName).getName());, +            engine.config().setEnableGcDeletes(false);, +        currentIndexWriterConfig = replicaEngine.getCurrentIndexWriterConfig();, +        assertEquals(replicaEngine.config().getCodec().getName(), codecService.codec(codecName).getName());, +            engine.config().setEnableGcDeletes(false);, +        return new FsTranslog(shardId, EMPTY_SETTINGS, Paths.get(TRANSLOG_PRIMARY_LOCATION));, +        return new FsTranslog(shardId, EMPTY_SETTINGS, Paths.get(TRANSLOG_REPLICA_LOCATION));, +        // and we should not leak files, +        assertThat("there are unreferenced translog files left", translog.clearUnreferenced(), equalTo(0));, +, +        assertThat("there are unreferenced translog files left, post flush", translog.clearUnreferenced(), equalTo(0));, +, +        engine.config().setEnableGcDeletes(false);]