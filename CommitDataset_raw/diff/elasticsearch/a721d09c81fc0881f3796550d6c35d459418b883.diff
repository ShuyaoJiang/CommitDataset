[+++ b/server/src/main/java/org/elasticsearch/common/regex/Regex.java, +    /**, +     * Similar to {@link #simpleMatch(String[], String)}, but accepts a list of strings instead of an array of strings for the patterns to, +     * match., +     */, +    public static boolean simpleMatch(final List<String> patterns, final String str) {, +        // #simpleMatch(String[], String) is likely to be inlined into this method, +        return patterns != null && simpleMatch(patterns.toArray(Strings.EMPTY_ARRAY), str);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/common/regex/Regex.java, +    /**, +     * Similar to {@link #simpleMatch(String[], String)}, but accepts a list of strings instead of an array of strings for the patterns to, +     * match., +     */, +    public static boolean simpleMatch(final List<String> patterns, final String str) {, +        // #simpleMatch(String[], String) is likely to be inlined into this method, +        return patterns != null && simpleMatch(patterns.toArray(Strings.EMPTY_ARRAY), str);, +    }, +, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +    public void testAutoFollowPatterns() throws Exception {, +        assumeFalse("Test should only run when both clusters are running", runningAgainstLeaderCluster);, +, +        Request request = new Request("PUT", "/_ccr/_auto_follow/leader_cluster");, +        request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"]}");, +        assertOK(client().performRequest(request));, +, +        try (RestClient leaderClient = buildLeaderClient()) {, +            Settings settings = Settings.builder(), +                .put("index.soft_deletes.enabled", true), +                .build();, +            request = new Request("PUT", "/logs-20190101");, +            request.setJsonEntity("{\"settings\": " + Strings.toString(settings) +, +                ", \"mappings\": {\"_doc\": {\"properties\": {\"field\": {\"type\": \"keyword\"}}}} }");, +            assertOK(leaderClient.performRequest(request));, +, +            for (int i = 0; i < 5; i++) {, +                String id = Integer.toString(i);, +                index(leaderClient, "logs-20190101", id, "field", i, "filtered_field", "true");, +            }, +        }, +, +        assertBusy(() -> {, +            ensureYellow("logs-20190101");, +            verifyDocuments("logs-20190101", 5);, +        });, +    }, +, +    private static void ensureYellow(String index) throws IOException {, +        Request request = new Request("GET", "/_cluster/health/" + index);, +        request.addParameter("wait_for_status", "yellow");, +        request.addParameter("wait_for_no_relocating_shards", "true");, +        request.addParameter("timeout", "70s");, +        request.addParameter("level", "shards");, +        client().performRequest(request);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/common/regex/Regex.java, +    /**, +     * Similar to {@link #simpleMatch(String[], String)}, but accepts a list of strings instead of an array of strings for the patterns to, +     * match., +     */, +    public static boolean simpleMatch(final List<String> patterns, final String str) {, +        // #simpleMatch(String[], String) is likely to be inlined into this method, +        return patterns != null && simpleMatch(patterns.toArray(Strings.EMPTY_ARRAY), str);, +    }, +, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +    public void testAutoFollowPatterns() throws Exception {, +        assumeFalse("Test should only run when both clusters are running", runningAgainstLeaderCluster);, +, +        Request request = new Request("PUT", "/_ccr/_auto_follow/leader_cluster");, +        request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"]}");, +        assertOK(client().performRequest(request));, +, +        try (RestClient leaderClient = buildLeaderClient()) {, +            Settings settings = Settings.builder(), +                .put("index.soft_deletes.enabled", true), +                .build();, +            request = new Request("PUT", "/logs-20190101");, +            request.setJsonEntity("{\"settings\": " + Strings.toString(settings) +, +                ", \"mappings\": {\"_doc\": {\"properties\": {\"field\": {\"type\": \"keyword\"}}}} }");, +            assertOK(leaderClient.performRequest(request));, +, +            for (int i = 0; i < 5; i++) {, +                String id = Integer.toString(i);, +                index(leaderClient, "logs-20190101", id, "field", i, "filtered_field", "true");, +            }, +        }, +, +        assertBusy(() -> {, +            ensureYellow("logs-20190101");, +            verifyDocuments("logs-20190101", 5);, +        });, +    }, +, +    private static void ensureYellow(String index) throws IOException {, +        Request request = new Request("GET", "/_cluster/health/" + index);, +        request.addParameter("wait_for_status", "yellow");]