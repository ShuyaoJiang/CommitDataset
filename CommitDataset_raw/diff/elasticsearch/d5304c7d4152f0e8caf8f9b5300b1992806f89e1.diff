[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    HttpTransportSettings.SETTING_HTTP_HOST,, +                    HttpTransportSettings.SETTING_HTTP_PUBLISH_HOST,, +                    HttpTransportSettings.SETTING_HTTP_BIND_HOST,, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    HttpTransportSettings.SETTING_HTTP_HOST,, +                    HttpTransportSettings.SETTING_HTTP_PUBLISH_HOST,, +                    HttpTransportSettings.SETTING_HTTP_BIND_HOST,, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +    public static final Setting<Integer> SETTING_HTTP_PUBLISH_PORT = Setting.intSetting("http.publish_port", -1, -1, false, Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    HttpTransportSettings.SETTING_HTTP_HOST,, +                    HttpTransportSettings.SETTING_HTTP_PUBLISH_HOST,, +                    HttpTransportSettings.SETTING_HTTP_BIND_HOST,, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +    public static final Setting<Integer> SETTING_HTTP_PUBLISH_PORT = Setting.intSetting("http.publish_port", -1, -1, false, Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import com.carrotsearch.hppc.IntHashSet;, +import com.carrotsearch.hppc.IntSet;, +        this.boundAddress = createBoundHttpAddress();, +    }, +    private BoundTransportAddress createBoundHttpAddress() {, +        final int publishPort = resolvePublishPort(settings, boundAddresses, publishInetAddress);, +        final InetSocketAddress publishAddress = new InetSocketAddress(publishInetAddress, publishPort);, +        return new BoundTransportAddress(boundAddresses.toArray(new TransportAddress[boundAddresses.size()]), new InetSocketTransportAddress(publishAddress));, +    }, +, +    // package private for tests, +    static int resolvePublishPort(Settings settings, List<InetSocketTransportAddress> boundAddresses, InetAddress publishInetAddress) {, +        int publishPort = SETTING_HTTP_PUBLISH_PORT.get(settings);, +, +        if (publishPort < 0) {, +        // if no matching boundAddress found, check if there is a unique port for all bound addresses, +        if (publishPort < 0) {, +            final IntSet ports = new IntHashSet();, +            for (InetSocketTransportAddress boundAddress : boundAddresses) {, +                ports.add(boundAddress.getPort());, +            }, +            if (ports.size() == 1) {, +                publishPort = ports.iterator().next().value;, +            }, +        if (publishPort < 0) {, +            throw new BindHttpException("Failed to auto-resolve http publish port, multiple bound addresses " + boundAddresses +, +                " with distinct ports and none of them matched the publish address (" + publishInetAddress + "). " +, +                "Please specify a unique port by setting " + SETTING_HTTP_PORT.getKey() + " or " + SETTING_HTTP_PUBLISH_PORT.getKey());, +        }, +        return publishPort;, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    HttpTransportSettings.SETTING_HTTP_HOST,, +                    HttpTransportSettings.SETTING_HTTP_PUBLISH_HOST,, +                    HttpTransportSettings.SETTING_HTTP_BIND_HOST,, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +    public static final Setting<Integer> SETTING_HTTP_PUBLISH_PORT = Setting.intSetting("http.publish_port", -1, -1, false, Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import com.carrotsearch.hppc.IntHashSet;, +import com.carrotsearch.hppc.IntSet;, +        this.boundAddress = createBoundHttpAddress();, +    }, +    private BoundTransportAddress createBoundHttpAddress() {, +        final int publishPort = resolvePublishPort(settings, boundAddresses, publishInetAddress);, +        final InetSocketAddress publishAddress = new InetSocketAddress(publishInetAddress, publishPort);, +        return new BoundTransportAddress(boundAddresses.toArray(new TransportAddress[boundAddresses.size()]), new InetSocketTransportAddress(publishAddress));, +    }, +, +    // package private for tests, +    static int resolvePublishPort(Settings settings, List<InetSocketTransportAddress> boundAddresses, InetAddress publishInetAddress) {, +        int publishPort = SETTING_HTTP_PUBLISH_PORT.get(settings);, +, +        if (publishPort < 0) {, +        // if no matching boundAddress found, check if there is a unique port for all bound addresses, +        if (publishPort < 0) {, +            final IntSet ports = new IntHashSet();, +            for (InetSocketTransportAddress boundAddress : boundAddresses) {, +                ports.add(boundAddress.getPort());, +            }, +            if (ports.size() == 1) {, +                publishPort = ports.iterator().next().value;, +            }, +        if (publishPort < 0) {, +            throw new BindHttpException("Failed to auto-resolve http publish port, multiple bound addresses " + boundAddresses +, +                " with distinct ports and none of them matched the publish address (" + publishInetAddress + "). " +, +                "Please specify a unique port by setting " + SETTING_HTTP_PORT.getKey() + " or " + SETTING_HTTP_PUBLISH_PORT.getKey());, +        }, +        return publishPort;, +++ b/core/src/main/java/org/elasticsearch/transport/BindTransportException.java, +, +    public BindTransportException(String message) {, +        super(message);, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    HttpTransportSettings.SETTING_HTTP_HOST,, +                    HttpTransportSettings.SETTING_HTTP_PUBLISH_HOST,, +                    HttpTransportSettings.SETTING_HTTP_BIND_HOST,, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +    public static final Setting<Integer> SETTING_HTTP_PUBLISH_PORT = Setting.intSetting("http.publish_port", -1, -1, false, Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import com.carrotsearch.hppc.IntHashSet;, +import com.carrotsearch.hppc.IntSet;, +        this.boundAddress = createBoundHttpAddress();, +    }]