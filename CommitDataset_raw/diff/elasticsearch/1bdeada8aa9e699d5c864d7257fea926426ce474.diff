[+++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnPrimary;, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnReplica;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnPrimary;, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnReplica;, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        primary.execute(delete);, +        replica.execute(delete);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnPrimary;, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnReplica;, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        primary.execute(delete);, +        replica.execute(delete);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +    public static ReplicaOperationResult executeIndexRequestOnReplica(IndexRequest request, IndexShard replica) {, +        final ShardId shardId = replica.shardId();, +            operation = replica.prepareIndexOnReplica(sourceToParse, request.version(), request.versionType(), request.getAutoGeneratedTimestamp(), request.isRetry());, +        replica.execute(operation);, +    static Engine.Index prepareIndexOperationOnPrimary(IndexRequest request, IndexShard primary) {, +        return primary.prepareIndexOnPrimary(sourceToParse, request.version(), request.versionType(), request.getAutoGeneratedTimestamp(), request.isRetry());, +    public static PrimaryOperationResult<IndexResponse> executeIndexRequestOnPrimary(IndexRequest request, IndexShard primary,, +            operation = prepareIndexOperationOnPrimary(request, primary);, +        final ShardId shardId = primary.shardId();, +                operation = prepareIndexOperationOnPrimary(request, primary);, +        primary.execute(operation);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnPrimary;, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnReplica;, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        primary.execute(delete);, +        replica.execute(delete);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +    public static ReplicaOperationResult executeIndexRequestOnReplica(IndexRequest request, IndexShard replica) {, +        final ShardId shardId = replica.shardId();, +            operation = replica.prepareIndexOnReplica(sourceToParse, request.version(), request.versionType(), request.getAutoGeneratedTimestamp(), request.isRetry());, +        replica.execute(operation);, +    static Engine.Index prepareIndexOperationOnPrimary(IndexRequest request, IndexShard primary) {, +        return primary.prepareIndexOnPrimary(sourceToParse, request.version(), request.versionType(), request.getAutoGeneratedTimestamp(), request.isRetry());, +    public static PrimaryOperationResult<IndexResponse> executeIndexRequestOnPrimary(IndexRequest request, IndexShard primary,, +            operation = prepareIndexOperationOnPrimary(request, primary);, +        final ShardId shardId = primary.shardId();, +                operation = prepareIndexOperationOnPrimary(request, primary);, +        primary.execute(operation);, +++ b/core/src/main/java/org/elasticsearch/index/IndexingSlowLog.java, +    public void postOperation(Engine.Operation operation) {, +        if (operation.operationType() == Engine.Operation.TYPE.INDEX) {, +            final long tookInNanos = operation.endTime() - operation.startTime();, +            ParsedDocument doc = ((Engine.Index) operation).parsedDoc();, +    }, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnPrimary;, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnReplica;, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        primary.execute(delete);, +        replica.execute(delete);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +    public static ReplicaOperationResult executeIndexRequestOnReplica(IndexRequest request, IndexShard replica) {, +        final ShardId shardId = replica.shardId();, +            operation = replica.prepareIndexOnReplica(sourceToParse, request.version(), request.versionType(), request.getAutoGeneratedTimestamp(), request.isRetry());, +        replica.execute(operation);, +    static Engine.Index prepareIndexOperationOnPrimary(IndexRequest request, IndexShard primary) {, +        return primary.prepareIndexOnPrimary(sourceToParse, request.version(), request.versionType(), request.getAutoGeneratedTimestamp(), request.isRetry());, +    public static PrimaryOperationResult<IndexResponse> executeIndexRequestOnPrimary(IndexRequest request, IndexShard primary,, +            operation = prepareIndexOperationOnPrimary(request, primary);, +        final ShardId shardId = primary.shardId();, +                operation = prepareIndexOperationOnPrimary(request, primary);, +        primary.execute(operation);, +++ b/core/src/main/java/org/elasticsearch/index/IndexingSlowLog.java, +    public void postOperation(Engine.Operation operation) {, +        if (operation.operationType() == Engine.Operation.TYPE.INDEX) {, +            final long tookInNanos = operation.endTime() - operation.startTime();, +            ParsedDocument doc = ((Engine.Index) operation).parsedDoc();, +    }, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public abstract String type();, +        public abstract TYPE operationType();, +, +        public abstract String toString();, +        public TYPE operationType() {, +        @Override, +        public String toString() {, +            return "index [{" + type() + "}][{" + id()+ "}] [{" + docs() + "}]";, +        }, +        public TYPE operationType() {, +        @Override, +        public String toString() {, +            return "delete [{"+ uid().text() +"}]";, +        }, +, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnPrimary;, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnReplica;, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        primary.execute(delete);, +        replica.execute(delete);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +    public static ReplicaOperationResult executeIndexRequestOnReplica(IndexRequest request, IndexShard replica) {, +        final ShardId shardId = replica.shardId();]