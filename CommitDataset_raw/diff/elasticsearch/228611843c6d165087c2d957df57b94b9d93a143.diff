[+++ b/server/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.node.Node;, +, +            if (DiscoveryNode.isDataNode(settings) == false) {, +                ensureNoShardData(nodePaths);, +            }, +, +    private void ensureNoShardData(final NodePath[] nodePaths) throws IOException {, +        List<Path> shardDataPaths = new ArrayList<>();, +        for (NodePath nodePath : nodePaths) {, +            Path indicesPath = nodePath.indicesPath;, +            if (Files.isDirectory(indicesPath)) {, +                try (DirectoryStream<Path> indexStream = Files.newDirectoryStream(indicesPath)) {, +                    for (Path indexPath : indexStream) {, +                        if (Files.isDirectory(indexPath)) {, +                            try (Stream<Path> shardStream = Files.list(indexPath)) {, +                                shardStream.filter(this::isShardPath), +                                    .map(Path::toAbsolutePath), +                                    .forEach(shardDataPaths::add);, +                            }, +                        }, +                    }, +                }, +            }, +        }, +, +        if (shardDataPaths.isEmpty() == false) {, +            throw new IllegalStateException("Node is started with ", +                + Node.NODE_DATA_SETTING.getKey(), +                + "=false, but has shard data: ", +                + shardDataPaths);, +        }, +    }, +, +    private boolean isShardPath(Path path) {, +        return Files.isDirectory(path), +            && path.getFileName().toString().chars().allMatch(Character::isDigit);, +    }, +, +, +++ b/server/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.node.Node;, +, +            if (DiscoveryNode.isDataNode(settings) == false) {, +                ensureNoShardData(nodePaths);, +            }, +, +    private void ensureNoShardData(final NodePath[] nodePaths) throws IOException {, +        List<Path> shardDataPaths = new ArrayList<>();, +        for (NodePath nodePath : nodePaths) {, +            Path indicesPath = nodePath.indicesPath;, +            if (Files.isDirectory(indicesPath)) {, +                try (DirectoryStream<Path> indexStream = Files.newDirectoryStream(indicesPath)) {, +                    for (Path indexPath : indexStream) {, +                        if (Files.isDirectory(indexPath)) {, +                            try (Stream<Path> shardStream = Files.list(indexPath)) {, +                                shardStream.filter(this::isShardPath), +                                    .map(Path::toAbsolutePath), +                                    .forEach(shardDataPaths::add);, +                            }, +                        }, +                    }, +                }, +            }, +        }, +, +        if (shardDataPaths.isEmpty() == false) {, +            throw new IllegalStateException("Node is started with ", +                + Node.NODE_DATA_SETTING.getKey(), +                + "=false, but has shard data: ", +                + shardDataPaths);, +        }, +    }, +, +    private boolean isShardPath(Path path) {, +        return Files.isDirectory(path), +            && path.getFileName().toString().chars().allMatch(Character::isDigit);, +    }, +, +, +++ b/server/src/test/java/org/elasticsearch/env/NodeEnvironmentIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +]