[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.metrics.ParsedWeightedAvg;, +import org.elasticsearch.search.aggregations.metrics.WeightedAvgAggregationBuilder;, +        map.put(WeightedAvgAggregationBuilder.NAME, (p, c) -> ParsedWeightedAvg.fromXContent(p, (String) c));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.metrics.ParsedWeightedAvg;, +import org.elasticsearch.search.aggregations.metrics.WeightedAvgAggregationBuilder;, +        map.put(WeightedAvgAggregationBuilder.NAME, (p, c) -> ParsedWeightedAvg.fromXContent(p, (String) c));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java, +import org.elasticsearch.search.aggregations.metrics.WeightedAvg;, +import org.elasticsearch.search.aggregations.metrics.WeightedAvgAggregationBuilder;, +import org.elasticsearch.search.aggregations.support.MultiValuesSourceFieldConfig;, +    public void testSearchWithTermsAndWeightedAvg() throws IOException {, +        SearchRequest searchRequest = new SearchRequest("index");, +        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +        TermsAggregationBuilder agg = new TermsAggregationBuilder("agg1", ValueType.STRING).field("type.keyword");, +        agg.subAggregation(new WeightedAvgAggregationBuilder("subagg"), +            .value(new MultiValuesSourceFieldConfig.Builder().setFieldName("num").build()), +            .weight(new MultiValuesSourceFieldConfig.Builder().setFieldName("num2").build()), +        );, +        searchSourceBuilder.aggregation(agg);, +        searchSourceBuilder.size(0);, +        searchRequest.source(searchSourceBuilder);, +        SearchResponse searchResponse = execute(searchRequest, highLevelClient()::search, highLevelClient()::searchAsync);, +        assertSearchHeader(searchResponse);, +        assertNull(searchResponse.getSuggest());, +        assertEquals(Collections.emptyMap(), searchResponse.getProfileResults());, +        assertEquals(0, searchResponse.getHits().getHits().length);, +        assertEquals(Float.NaN, searchResponse.getHits().getMaxScore(), 0f);, +        Terms termsAgg = searchResponse.getAggregations().get("agg1");, +        assertEquals("agg1", termsAgg.getName());, +        assertEquals(2, termsAgg.getBuckets().size());, +        Terms.Bucket type1 = termsAgg.getBucketByKey("type1");, +        assertEquals(3, type1.getDocCount());, +        assertEquals(1, type1.getAggregations().asList().size());, +        {, +            WeightedAvg weightedAvg = type1.getAggregations().get("subagg");, +            assertEquals(24.4, weightedAvg.getValue(), 0f);, +        }, +        Terms.Bucket type2 = termsAgg.getBucketByKey("type2");, +        assertEquals(2, type2.getDocCount());, +        assertEquals(1, type2.getAggregations().asList().size());, +        {, +            WeightedAvg weightedAvg = type2.getAggregations().get("subagg");, +            assertEquals(100, weightedAvg.getValue(), 0f);, +        }, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.metrics.ParsedWeightedAvg;, +import org.elasticsearch.search.aggregations.metrics.WeightedAvgAggregationBuilder;, +        map.put(WeightedAvgAggregationBuilder.NAME, (p, c) -> ParsedWeightedAvg.fromXContent(p, (String) c));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java, +import org.elasticsearch.search.aggregations.metrics.WeightedAvg;, +import org.elasticsearch.search.aggregations.metrics.WeightedAvgAggregationBuilder;, +import org.elasticsearch.search.aggregations.support.MultiValuesSourceFieldConfig;, +    public void testSearchWithTermsAndWeightedAvg() throws IOException {, +        SearchRequest searchRequest = new SearchRequest("index");, +        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +        TermsAggregationBuilder agg = new TermsAggregationBuilder("agg1", ValueType.STRING).field("type.keyword");, +        agg.subAggregation(new WeightedAvgAggregationBuilder("subagg"), +            .value(new MultiValuesSourceFieldConfig.Builder().setFieldName("num").build()), +            .weight(new MultiValuesSourceFieldConfig.Builder().setFieldName("num2").build()), +        );, +        searchSourceBuilder.aggregation(agg);, +        searchSourceBuilder.size(0);, +        searchRequest.source(searchSourceBuilder);, +        SearchResponse searchResponse = execute(searchRequest, highLevelClient()::search, highLevelClient()::searchAsync);, +        assertSearchHeader(searchResponse);, +        assertNull(searchResponse.getSuggest());, +        assertEquals(Collections.emptyMap(), searchResponse.getProfileResults());, +        assertEquals(0, searchResponse.getHits().getHits().length);, +        assertEquals(Float.NaN, searchResponse.getHits().getMaxScore(), 0f);, +        Terms termsAgg = searchResponse.getAggregations().get("agg1");, +        assertEquals("agg1", termsAgg.getName());, +        assertEquals(2, termsAgg.getBuckets().size());, +        Terms.Bucket type1 = termsAgg.getBucketByKey("type1");, +        assertEquals(3, type1.getDocCount());, +        assertEquals(1, type1.getAggregations().asList().size());, +        {, +            WeightedAvg weightedAvg = type1.getAggregations().get("subagg");, +            assertEquals(24.4, weightedAvg.getValue(), 0f);, +        }, +        Terms.Bucket type2 = termsAgg.getBucketByKey("type2");, +        assertEquals(2, type2.getDocCount());, +        assertEquals(1, type2.getAggregations().asList().size());, +        {, +            WeightedAvg weightedAvg = type2.getAggregations().get("subagg");, +            assertEquals(100, weightedAvg.getValue(), 0f);, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ParsedWeightedAvg.java, +public class ParsedWeightedAvg extends ParsedSingleValueNumericMetricsAggregation implements WeightedAvg {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.metrics.ParsedWeightedAvg;, +import org.elasticsearch.search.aggregations.metrics.WeightedAvgAggregationBuilder;, +        map.put(WeightedAvgAggregationBuilder.NAME, (p, c) -> ParsedWeightedAvg.fromXContent(p, (String) c));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java, +import org.elasticsearch.search.aggregations.metrics.WeightedAvg;]