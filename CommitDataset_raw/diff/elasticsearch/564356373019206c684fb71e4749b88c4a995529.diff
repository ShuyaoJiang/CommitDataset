[+++ b/src/main/java/org/elasticsearch/index/analysis/DelimitedPayloadTokenFilterFactory.java, +    public static final char DEFAULT_DELIMITER = '|';, +    public static final PayloadEncoder DEFAULT_ENCODER = new FloatEncoder();, +++ b/src/main/java/org/elasticsearch/index/analysis/DelimitedPayloadTokenFilterFactory.java, +    public static final char DEFAULT_DELIMITER = '|';, +    public static final PayloadEncoder DEFAULT_ENCODER = new FloatEncoder();, +++ b/src/main/java/org/elasticsearch/index/analysis/LimitTokenCountFilterFactory.java, +    public static final int DEFAULT_MAX_TOKEN_COUNT = 1;, +    public static final boolean DEFAULT_CONSUME_ALL_TOKENS = false;, +, +        this.maxTokenCount = settings.getAsInt("max_token_count", DEFAULT_MAX_TOKEN_COUNT);, +        this.consumeAllTokens = settings.getAsBoolean("consume_all_tokens", DEFAULT_CONSUME_ALL_TOKENS);, +++ b/src/main/java/org/elasticsearch/index/analysis/DelimitedPayloadTokenFilterFactory.java, +    public static final char DEFAULT_DELIMITER = '|';, +    public static final PayloadEncoder DEFAULT_ENCODER = new FloatEncoder();, +++ b/src/main/java/org/elasticsearch/index/analysis/LimitTokenCountFilterFactory.java, +    public static final int DEFAULT_MAX_TOKEN_COUNT = 1;, +    public static final boolean DEFAULT_CONSUME_ALL_TOKENS = false;, +, +        this.maxTokenCount = settings.getAsInt("max_token_count", DEFAULT_MAX_TOKEN_COUNT);, +        this.consumeAllTokens = settings.getAsBoolean("consume_all_tokens", DEFAULT_CONSUME_ALL_TOKENS);, +++ b/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +import org.apache.lucene.analysis.cjk.CJKBigramFilter;, +import org.apache.lucene.analysis.cjk.CJKWidthFilter;, +import org.apache.lucene.analysis.ckb.SoraniNormalizationFilter;, +import org.apache.lucene.analysis.de.GermanNormalizationFilter;, +import org.apache.lucene.analysis.hi.HindiNormalizationFilter;, +import org.apache.lucene.analysis.in.IndicNormalizationFilter;, +import org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilter;, +import org.apache.lucene.analysis.tr.ApostropheFilter;, +import org.elasticsearch.index.analysis.*;, +import org.elasticsearch.index.analysis.LimitTokenCountFilterFactory;, +, +, +    },, +, +    GERMAN_NORMALIZATION(CachingStrategy.ONE) {, +        @Override, +        public TokenStream create(TokenStream tokenStream, Version version) {, +            return new GermanNormalizationFilter(tokenStream);, +        }, +    },, +, +    HINDI_NORMALIZATION(CachingStrategy.ONE) {, +        @Override, +        public TokenStream create(TokenStream tokenStream, Version version) {, +            return new HindiNormalizationFilter(tokenStream);, +        }, +    },, +, +    INDIC_NORMALIZATION(CachingStrategy.ONE) {, +        @Override, +        public TokenStream create(TokenStream tokenStream, Version version) {, +            return new IndicNormalizationFilter(tokenStream);, +        }, +    },, +, +    SORANI_NORMALIZATION(CachingStrategy.ONE) {, +        @Override, +        public TokenStream create(TokenStream tokenStream, Version version) {, +            return new SoraniNormalizationFilter(tokenStream);, +        }, +    },, +, +    SCANDINAVIAN_NORMALIZATION(CachingStrategy.ONE) {, +        @Override, +        public TokenStream create(TokenStream tokenStream, Version version) {, +            return new ScandinavianNormalizationFilter(tokenStream);, +        }, +    },, +, +    SCANDINAVIAN_FOLDING(CachingStrategy.ONE) {, +        @Override, +        public TokenStream create(TokenStream tokenStream, Version version) {, +            return new ScandinavianFoldingFilter(tokenStream);, +        }, +    },, +, +    APOSTROPHE(CachingStrategy.ONE) {, +        @Override, +        public TokenStream create(TokenStream tokenStream, Version version) {, +            return new ApostropheFilter(tokenStream);, +        }, +    },, +, +    CJK_WIDTH(CachingStrategy.ONE) {, +        @Override, +        public TokenStream create(TokenStream tokenStream, Version version) {, +            return new CJKWidthFilter(tokenStream);, +        }, +    },, +, +    CJK_BIGRAM(CachingStrategy.ONE) {, +        @Override, +        public TokenStream create(TokenStream tokenStream, Version version) {, +            return new CJKBigramFilter(tokenStream);, +        }, +    },, +, +    DELIMITED_PAYLOAD_FILTER(CachingStrategy.ONE) {]