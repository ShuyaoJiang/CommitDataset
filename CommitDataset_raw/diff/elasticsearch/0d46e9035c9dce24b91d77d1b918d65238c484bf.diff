[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteFilterAction.java, +                            listener.onFailure(ExceptionsHelper.serverError("Could not delete filter with ID [" + filterId + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteFilterAction.java, +                            listener.onFailure(ExceptionsHelper.serverError("Could not delete filter with ID [" + filterId + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetFiltersAction.java, +import org.elasticsearch.action.get.GetAction;, +import org.elasticsearch.client.Client;, +import static org.elasticsearch.xpack.ClientHelper.ML_ORIGIN;, +import static org.elasticsearch.xpack.ClientHelper.executeAsyncWithOrigin;, +            if (pageParams != null && filterId != null) {, +                validationException = addValidationError("Params [" + PageParams.FROM.getPreferredName() +, +                        ", " + PageParams.SIZE.getPreferredName() + "] are incompatible with [", +                        + MlFilter.ID.getPreferredName() + "]", validationException);, +        private final Client client;, +                Client client) {, +            this.client = client;, +                PageParams pageParams = request.getPageParams();, +                if (pageParams == null) {, +                    pageParams = PageParams.defaultParams();, +                }, +                getFilters(pageParams, listener);, +            executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {, +            executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest, new ActionListener<SearchResponse>() {, +            },, +            client::search);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteFilterAction.java, +                            listener.onFailure(ExceptionsHelper.serverError("Could not delete filter with ID [" + filterId + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetFiltersAction.java, +import org.elasticsearch.action.get.GetAction;, +import org.elasticsearch.client.Client;, +import static org.elasticsearch.xpack.ClientHelper.ML_ORIGIN;, +import static org.elasticsearch.xpack.ClientHelper.executeAsyncWithOrigin;, +            if (pageParams != null && filterId != null) {, +                validationException = addValidationError("Params [" + PageParams.FROM.getPreferredName() +, +                        ", " + PageParams.SIZE.getPreferredName() + "] are incompatible with [", +                        + MlFilter.ID.getPreferredName() + "]", validationException);, +        private final Client client;, +                Client client) {, +            this.client = client;, +                PageParams pageParams = request.getPageParams();, +                if (pageParams == null) {, +                    pageParams = PageParams.defaultParams();, +                }, +                getFilters(pageParams, listener);, +            executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {, +            executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest, new ActionListener<SearchResponse>() {, +            },, +            client::search);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutCalendarAction.java, +                            listener.onFailure(, +                                    ExceptionsHelper.serverError("Error putting calendar with id [" + calendar.getId() + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteFilterAction.java, +                            listener.onFailure(ExceptionsHelper.serverError("Could not delete filter with ID [" + filterId + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetFiltersAction.java, +import org.elasticsearch.action.get.GetAction;, +import org.elasticsearch.client.Client;, +import static org.elasticsearch.xpack.ClientHelper.ML_ORIGIN;, +import static org.elasticsearch.xpack.ClientHelper.executeAsyncWithOrigin;, +            if (pageParams != null && filterId != null) {, +                validationException = addValidationError("Params [" + PageParams.FROM.getPreferredName() +, +                        ", " + PageParams.SIZE.getPreferredName() + "] are incompatible with [", +                        + MlFilter.ID.getPreferredName() + "]", validationException);, +        private final Client client;, +                Client client) {, +            this.client = client;, +                PageParams pageParams = request.getPageParams();, +                if (pageParams == null) {, +                    pageParams = PageParams.defaultParams();, +                }, +                getFilters(pageParams, listener);, +            executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {, +            executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest, new ActionListener<SearchResponse>() {, +            },, +            client::search);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutCalendarAction.java, +                            listener.onFailure(, +                                    ExceptionsHelper.serverError("Error putting calendar with id [" + calendar.getId() + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutFilterAction.java, +                            listener.onFailure(ExceptionsHelper.serverError("Error putting filter with id [" + filter.getId() + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteFilterAction.java, +                            listener.onFailure(ExceptionsHelper.serverError("Could not delete filter with ID [" + filterId + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetFiltersAction.java, +import org.elasticsearch.action.get.GetAction;, +import org.elasticsearch.client.Client;, +import static org.elasticsearch.xpack.ClientHelper.ML_ORIGIN;, +import static org.elasticsearch.xpack.ClientHelper.executeAsyncWithOrigin;, +            if (pageParams != null && filterId != null) {, +                validationException = addValidationError("Params [" + PageParams.FROM.getPreferredName() +, +                        ", " + PageParams.SIZE.getPreferredName() + "] are incompatible with [", +                        + MlFilter.ID.getPreferredName() + "]", validationException);, +        private final Client client;, +                Client client) {, +            this.client = client;, +                PageParams pageParams = request.getPageParams();, +                if (pageParams == null) {, +                    pageParams = PageParams.defaultParams();, +                }, +                getFilters(pageParams, listener);, +            executeAsyncWithOrigin(client, ML_ORIGIN, GetAction.INSTANCE, getRequest, new ActionListener<GetResponse>() {, +            executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, searchRequest, new ActionListener<SearchResponse>() {]