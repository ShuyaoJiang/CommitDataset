[+++ b/plugin/build.gradle, +forbiddenApisMain {, +  signaturesURLs += file('forbidden/ldap-signatures.txt').toURI().toURL(), +}, +, +++ b/plugin/build.gradle, +forbiddenApisMain {, +  signaturesURLs += file('forbidden/ldap-signatures.txt').toURI().toURL(), +}, +, +++ b/plugin/forbidden/ldap-signatures.txt, +@defaultMessage Bind operation is blocking and can lead to deadlocks if called inside LDAP Response handlers. Use LdapUtils methods., +com.unboundid.ldap.sdk.LDAPConnection#bind(com.unboundid.ldap.sdk.BindRequest), +com.unboundid.ldap.sdk.LDAPConnection#bind(java.lang.String, java.lang.String), +com.unboundid.ldap.sdk.LDAPConnectionPool#bindAndRevertAuthentication(com.unboundid.ldap.sdk.BindRequest), +com.unboundid.ldap.sdk.LDAPConnectionPool#bindAndRevertAuthentication(java.lang.String, java.lang.String, com.unboundid.ldap.sdk.Control[]), +++ b/plugin/build.gradle, +forbiddenApisMain {, +  signaturesURLs += file('forbidden/ldap-signatures.txt').toURI().toURL(), +}, +, +++ b/plugin/forbidden/ldap-signatures.txt, +@defaultMessage Bind operation is blocking and can lead to deadlocks if called inside LDAP Response handlers. Use LdapUtils methods., +com.unboundid.ldap.sdk.LDAPConnection#bind(com.unboundid.ldap.sdk.BindRequest), +com.unboundid.ldap.sdk.LDAPConnection#bind(java.lang.String, java.lang.String), +com.unboundid.ldap.sdk.LDAPConnectionPool#bindAndRevertAuthentication(com.unboundid.ldap.sdk.BindRequest), +com.unboundid.ldap.sdk.LDAPConnectionPool#bindAndRevertAuthentication(java.lang.String, java.lang.String, com.unboundid.ldap.sdk.Control[]), +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +import org.elasticsearch.action.ActionRunnable;, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +import org.elasticsearch.threadpool.ThreadPool;, +import java.util.Arrays;, +    ActiveDirectorySessionFactory(RealmConfig config, SSLService sslService, ThreadPool threadPool) throws LDAPException {, +        }, threadPool);, +                metaDataResolver, domainDN, threadPool);, +                metaDataResolver, domainDN, sslService, threadPool);, +                metaDataResolver, domainDN, threadPool);, +        getADAuthenticator(user).authenticate(connectionPool, user, password, threadPool, listener);, +            getADAuthenticator(username).authenticate(connection, username, password, ActionListener.wrap(listener::onResponse, e -> {, +            listener.onFailure(e);, +        if (BIND_DN.exists(config.settings()) == false) {, +            listener.onResponse(null);, +            return;, +        }, +            final LDAPConnection connection = LdapUtils.privilegedConnect(serverSet::getConnection);, +            final SimpleBindRequest bind = new SimpleBindRequest(getBindDN(config.settings()), BIND_PASSWORD.get(config.settings()));, +            LdapUtils.maybeForkThenBind(connection, bind, threadPool, new AbstractRunnable() {, +, +                @Override, +                public void onFailure(Exception e) {, +                    IOUtils.closeWhileHandlingException(connection);, +                    listener.onFailure(e);, +                }, +, +                @Override, +                protected void doRun() throws Exception {, +                    getADAuthenticator(user).searchForDN(connection, user, null, Math.toIntExact(timeout.getSeconds()),, +                                    IOUtils.close(connection);, +                                    listener.onResponse(new LdapSession(logger, config, connection, entry.getDN(), groupResolver,, +                                            metaDataResolver, timeout, null));, +                                IOUtils.closeWhileHandlingException(connection);, +, +                }, +            });, +        final ThreadPool threadPool;, +        ADAuthenticator(RealmConfig realm, TimeValue timeout, boolean ignoreReferralErrors, Logger logger, GroupsResolver groupsResolver,, +                LdapMetaDataResolver metaDataResolver, String domainDN, String userSearchFilterSetting, String defaultUserSearchFilter,, +                ThreadPool threadPool) {, +            this.threadPool = threadPool;, +        final void authenticate(LDAPConnection connection, String username, SecureString password, ActionListener<LdapSession> listener) {, +            final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars());, +            final SimpleBindRequest userBind = new SimpleBindRequest(bindUsername(username), passwordBytes,, +                    new AuthorizationIdentityRequestControl());, +            LdapUtils.maybeForkThenBind(connection, userBind, threadPool, new ActionRunnable<LdapSession>(listener) {, +                @Override, +                protected void doRun() throws Exception {, +                    final ActionRunnable<LdapSession> searchRunnable = new ActionRunnable<LdapSession>(listener) {, +                        @Override, +                        protected void doRun() throws Exception {, +                                    listener.onFailure(new ElasticsearchSecurityException(, +                                            "search for user [" + username + "] by principal name yielded no results"));, +                                    listener.onResponse(new LdapSession(logger, realm, connection, entry.getDN(), groupsResolver,, +                                            metaDataResolver, timeout, null));, +                                Arrays.fill(passwordBytes, (byte) 0);, +                            }, e -> {, +                                Arrays.fill(passwordBytes, (byte) 0);, +                        }, +                    };, +                    if (bindDN.isEmpty()) {, +                        searchRunnable.run();, +                    } else {, +                        final SimpleBindRequest bind = new SimpleBindRequest(bindDN, bindPassword);, +                        LdapUtils.maybeForkThenBind(connection, bind, threadPool, searchRunnable);, +            });, +        final void authenticate(LDAPConnectionPool pool, String username, SecureString password, ThreadPool threadPool,, +            final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars());, +            final SimpleBindRequest bind = new SimpleBindRequest(bindUsername(username), passwordBytes);, +            LdapUtils.maybeForkThenBind(pool, bind, threadPool, new ActionRunnable<LdapSession>(listener) {, +                @Override, +                protected void doRun() throws Exception {]