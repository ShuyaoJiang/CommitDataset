[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                    shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                    shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +    private final IndicesRequestCache indicesRequestCache;, +                                            TransportService transportService, IndicesService indicesService,, +                                            IndicesRequestCache indicesQueryCache, ActionFilters actionFilters,, +        this.indicesRequestCache = indicesQueryCache;, +                indicesRequestCache.clear(shard);, +                    indicesRequestCache.clear(shard);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                    shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +    private final IndicesRequestCache indicesRequestCache;, +                                            TransportService transportService, IndicesService indicesService,, +                                            IndicesRequestCache indicesQueryCache, ActionFilters actionFilters,, +        this.indicesRequestCache = indicesQueryCache;, +                indicesRequestCache.clear(shard);, +                    indicesRequestCache.clear(shard);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +    public CommonStats(IndexShard indexShard, CommonStatsFlags flags) {, +                    queryCache = indexShard.queryCacheStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                    shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +    private final IndicesRequestCache indicesRequestCache;, +                                            TransportService transportService, IndicesService indicesService,, +                                            IndicesRequestCache indicesQueryCache, ActionFilters actionFilters,, +        this.indicesRequestCache = indicesQueryCache;, +                indicesRequestCache.clear(shard);, +                    indicesRequestCache.clear(shard);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +    public CommonStats(IndexShard indexShard, CommonStatsFlags flags) {, +                    queryCache = indexShard.queryCacheStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java, +        return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, flags), indexShard.commitStats());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                    shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +    private final IndicesRequestCache indicesRequestCache;, +                                            TransportService transportService, IndicesService indicesService,, +                                            IndicesRequestCache indicesQueryCache, ActionFilters actionFilters,, +        this.indicesRequestCache = indicesQueryCache;, +                indicesRequestCache.clear(shard);, +                    indicesRequestCache.clear(shard);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +    public CommonStats(IndexShard indexShard, CommonStatsFlags flags) {, +                    queryCache = indexShard.queryCacheStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java, +        return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, flags), indexShard.commitStats());, +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +    /**, +     * Check if a setting has already been registered, +     */, +    public boolean exists(Setting<?> setting) {, +        switch (setting.getScope()) {, +            case CLUSTER:, +                return clusterSettings.containsKey(setting.getKey());, +            case INDEX:, +                return indexSettings.containsKey(setting.getKey());, +        }, +        throw new IllegalArgumentException("setting scope is unknown. This should never happen!");, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                    shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +    private final IndicesRequestCache indicesRequestCache;, +                                            TransportService transportService, IndicesService indicesService,, +                                            IndicesRequestCache indicesQueryCache, ActionFilters actionFilters,, +        this.indicesRequestCache = indicesQueryCache;, +                indicesRequestCache.clear(shard);, +                    indicesRequestCache.clear(shard);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +    public CommonStats(IndexShard indexShard, CommonStatsFlags flags) {, +                    queryCache = indexShard.queryCacheStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java, +        return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, flags), indexShard.commitStats());, +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +    /**, +     * Check if a setting has already been registered, +     */, +    public boolean exists(Setting<?> setting) {, +        switch (setting.getScope()) {, +            case CLUSTER:, +                return clusterSettings.containsKey(setting.getKey());, +            case INDEX:, +                return indexSettings.containsKey(setting.getKey());, +        }, +        throw new IllegalArgumentException("setting scope is unknown. This should never happen!");, +    }, +++ b/core/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java, +                    shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +    private final IndicesRequestCache indicesRequestCache;, +                                            TransportService transportService, IndicesService indicesService,, +                                            IndicesRequestCache indicesQueryCache, ActionFilters actionFilters,, +        this.indicesRequestCache = indicesQueryCache;, +                indicesRequestCache.clear(shard);]