[+++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +        return source(source.bytes());, +    public CreateIndexRequest source(byte[] source, int offset, int length) {, +        return source(new BytesArray(source, offset, length));, +    }, +, +    public CreateIndexRequest source(BytesReference source) {, +        XContentType xContentType = XContentFactory.xContentType(source);, +                source(XContentFactory.xContent(xContentType).createParser(source).mapAndClose());, +            settings(new String(source.toBytes(), Charsets.UTF_8));, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +        return source(source.bytes());, +    public CreateIndexRequest source(byte[] source, int offset, int length) {, +        return source(new BytesArray(source, offset, length));, +    }, +, +    public CreateIndexRequest source(BytesReference source) {, +        XContentType xContentType = XContentFactory.xContentType(source);, +                source(XContentFactory.xContent(xContentType).createParser(source).mapAndClose());, +            settings(new String(source.toBytes(), Charsets.UTF_8));, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilder.java, +import org.elasticsearch.common.bytes.BytesReference;, +    public CreateIndexRequestBuilder setSource(BytesReference source) {, +        request.source(source);, +        return this;, +    }, +, +    /**, +     * Sets the settings and mappings as a single source., +     */, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +        return source(source.bytes());, +    public CreateIndexRequest source(byte[] source, int offset, int length) {, +        return source(new BytesArray(source, offset, length));, +    }, +, +    public CreateIndexRequest source(BytesReference source) {, +        XContentType xContentType = XContentFactory.xContentType(source);, +                source(XContentFactory.xContent(xContentType).createParser(source).mapAndClose());, +            settings(new String(source.toBytes(), Charsets.UTF_8));, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilder.java, +import org.elasticsearch.common.bytes.BytesReference;, +    public CreateIndexRequestBuilder setSource(BytesReference source) {, +        request.source(source);, +        return this;, +    }, +, +    /**, +     * Sets the settings and mappings as a single source., +     */, +++ b/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequest.java, +import org.elasticsearch.common.bytes.BytesReference;, +            return source(templateBuilder.bytes());, +    /**, +     * The template source definition., +     */, +    public PutIndexTemplateRequest source(BytesReference source) {, +        try {, +            return source(XContentFactory.xContent(source).createParser(source).mapOrderedAndClose());, +        } catch (IOException e) {, +            throw new ElasticSearchIllegalArgumentException("failed to parse template source", e);, +        }, +    }, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +        return source(source.bytes());, +    public CreateIndexRequest source(byte[] source, int offset, int length) {, +        return source(new BytesArray(source, offset, length));, +    }, +, +    public CreateIndexRequest source(BytesReference source) {, +        XContentType xContentType = XContentFactory.xContentType(source);, +                source(XContentFactory.xContent(xContentType).createParser(source).mapAndClose());, +            settings(new String(source.toBytes(), Charsets.UTF_8));, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilder.java, +import org.elasticsearch.common.bytes.BytesReference;, +    public CreateIndexRequestBuilder setSource(BytesReference source) {, +        request.source(source);, +        return this;, +    }, +, +    /**, +     * Sets the settings and mappings as a single source., +     */, +++ b/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequest.java, +import org.elasticsearch.common.bytes.BytesReference;, +            return source(templateBuilder.bytes());, +    /**, +     * The template source definition., +     */, +    public PutIndexTemplateRequest source(BytesReference source) {, +        try {, +            return source(XContentFactory.xContent(source).createParser(source).mapOrderedAndClose());]