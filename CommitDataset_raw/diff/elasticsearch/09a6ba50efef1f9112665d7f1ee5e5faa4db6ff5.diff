[+++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +import org.elasticsearch.action.search.TransportSearchAction.SearchTimeProvider;, +    private final SearchTimeProvider timeProvider;, +                                        SearchTimeProvider timeProvider, long clusterStateVersion,, +        return timeProvider.buildTookInMillis();, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +import org.elasticsearch.action.search.TransportSearchAction.SearchTimeProvider;, +    private final SearchTimeProvider timeProvider;, +                                        SearchTimeProvider timeProvider, long clusterStateVersion,, +        return timeProvider.buildTookInMillis();, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +                topDocsStats.add(td, queryResult.searchTimedOut(), queryResult.terminatedEarly());, +            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),, +                false, null, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true);, +        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),, +            topDocsStats.timedOut, topDocsStats.terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,, +                topDocsStats.add(topDocs, querySearchResult.searchTimedOut(), querySearchResult.terminatedEarly());, +        private float maxScore = Float.NEGATIVE_INFINITY;, +        boolean timedOut;, +        Boolean terminatedEarly;, +        float getMaxScore() {, +            return Float.isInfinite(maxScore) ? Float.NaN : maxScore;, +        }, +, +                    /*, +        void add(TopDocsAndMaxScore topDocs, boolean timedOut, Boolean terminatedEarly) {, +            if (timedOut) {, +                this.timedOut = true;, +            }, +            if (terminatedEarly != null) {, +                if (this.terminatedEarly == null) {, +                    this.terminatedEarly = terminatedEarly;, +                } else if (terminatedEarly) {, +                    this.terminatedEarly = true;, +                }, +            }, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +import org.elasticsearch.action.search.TransportSearchAction.SearchTimeProvider;, +    private final SearchTimeProvider timeProvider;, +                                        SearchTimeProvider timeProvider, long clusterStateVersion,, +        return timeProvider.buildTookInMillis();, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +                topDocsStats.add(td, queryResult.searchTimedOut(), queryResult.terminatedEarly());, +            return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),, +                false, null, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true);, +        return new ReducedQueryPhase(totalHits, topDocsStats.fetchHits, topDocsStats.getMaxScore(),, +            topDocsStats.timedOut, topDocsStats.terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,, +                topDocsStats.add(topDocs, querySearchResult.searchTimedOut(), querySearchResult.terminatedEarly());, +        private float maxScore = Float.NEGATIVE_INFINITY;, +        boolean timedOut;, +        Boolean terminatedEarly;, +        float getMaxScore() {, +            return Float.isInfinite(maxScore) ? Float.NaN : maxScore;, +        }, +, +                    /*, +        void add(TopDocsAndMaxScore topDocs, boolean timedOut, Boolean terminatedEarly) {, +            if (timedOut) {, +                this.timedOut = true;, +            }, +            if (terminatedEarly != null) {, +                if (this.terminatedEarly == null) {, +                    this.terminatedEarly = terminatedEarly;, +                } else if (terminatedEarly) {, +                    this.terminatedEarly = true;, +                }, +            }, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchResponseMerger.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.search;, +, +import org.apache.lucene.search.FieldDoc;, +import org.apache.lucene.search.ScoreDoc;, +import org.apache.lucene.search.SortField;, +import org.apache.lucene.search.TopDocs;, +import org.apache.lucene.search.TopFieldDocs;, +import org.apache.lucene.search.TotalHits;, +import org.apache.lucene.search.grouping.CollapseTopFieldDocs;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.action.search.TransportSearchAction.SearchTimeProvider;, +import org.elasticsearch.common.lucene.search.TopDocsAndMaxScore;, +import org.elasticsearch.index.shard.ShardId;]