[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +import org.elasticsearch.cluster.service.ClusterStateStatus;, +        final ClusterServiceState observedState = observer.observedState();, +        final ClusterState state = observedState.getClusterState();, +            protected boolean validate(ClusterServiceState newState) {, +                return newState.getClusterStateStatus() == ClusterStateStatus.APPLIED && validateRequest(request, newState.getClusterState(), concreteWaitFor);, +        if (observedState.getClusterStateStatus() == ClusterStateStatus.APPLIED && validateRequest(request, state, concreteWaitFor)) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +import org.elasticsearch.cluster.service.ClusterStateStatus;, +        final ClusterServiceState observedState = observer.observedState();, +        final ClusterState state = observedState.getClusterState();, +            protected boolean validate(ClusterServiceState newState) {, +                return newState.getClusterStateStatus() == ClusterStateStatus.APPLIED && validateRequest(request, newState.getClusterState(), concreteWaitFor);, +        if (observedState.getClusterStateStatus() == ClusterStateStatus.APPLIED && validateRequest(request, state, concreteWaitFor)) {, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +        if (activeShardCount.enoughShardsActive(observer.observedState().getClusterState(), indexName)) {, +                    protected boolean validate(final ClusterServiceState newState) {, +                        return activeShardCount.enoughShardsActive(newState.getClusterState(), indexName);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +import org.elasticsearch.cluster.service.ClusterStateStatus;, +        final ClusterServiceState observedState = observer.observedState();, +        final ClusterState state = observedState.getClusterState();, +            protected boolean validate(ClusterServiceState newState) {, +                return newState.getClusterStateStatus() == ClusterStateStatus.APPLIED && validateRequest(request, newState.getClusterState(), concreteWaitFor);, +        if (observedState.getClusterStateStatus() == ClusterStateStatus.APPLIED && validateRequest(request, state, concreteWaitFor)) {, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +        if (activeShardCount.enoughShardsActive(observer.observedState().getClusterState(), indexName)) {, +                    protected boolean validate(final ClusterServiceState newState) {, +                        return activeShardCount.enoughShardsActive(newState.getClusterState(), indexName);, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeAction.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +            protected boolean validate(ClusterServiceState newState) {, +                ClusterBlockException blockException = checkBlock(request, newState.getClusterState());, +            final ClusterState clusterState = observer.observedState().getClusterState();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +import org.elasticsearch.cluster.service.ClusterStateStatus;, +        final ClusterServiceState observedState = observer.observedState();, +        final ClusterState state = observedState.getClusterState();, +            protected boolean validate(ClusterServiceState newState) {, +                return newState.getClusterStateStatus() == ClusterStateStatus.APPLIED && validateRequest(request, newState.getClusterState(), concreteWaitFor);, +        if (observedState.getClusterStateStatus() == ClusterStateStatus.APPLIED && validateRequest(request, state, concreteWaitFor)) {, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +        if (activeShardCount.enoughShardsActive(observer.observedState().getClusterState(), indexName)) {, +                    protected boolean validate(final ClusterServiceState newState) {, +                        return activeShardCount.enoughShardsActive(newState.getClusterState(), indexName);, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeAction.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +            protected boolean validate(ClusterServiceState newState) {, +                ClusterBlockException blockException = checkBlock(request, newState.getClusterState());, +            final ClusterState clusterState = observer.observedState().getClusterState();, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            final ClusterState state = observer.observedState().getClusterState();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +import org.elasticsearch.cluster.service.ClusterStateStatus;, +        final ClusterServiceState observedState = observer.observedState();, +        final ClusterState state = observedState.getClusterState();, +            protected boolean validate(ClusterServiceState newState) {, +                return newState.getClusterStateStatus() == ClusterStateStatus.APPLIED && validateRequest(request, newState.getClusterState(), concreteWaitFor);, +        if (observedState.getClusterStateStatus() == ClusterStateStatus.APPLIED && validateRequest(request, state, concreteWaitFor)) {, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +        if (activeShardCount.enoughShardsActive(observer.observedState().getClusterState(), indexName)) {, +                    protected boolean validate(final ClusterServiceState newState) {, +                        return activeShardCount.enoughShardsActive(newState.getClusterState(), indexName);, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeAction.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +            protected boolean validate(ClusterServiceState newState) {, +                ClusterBlockException blockException = checkBlock(request, newState.getClusterState());, +            final ClusterState clusterState = observer.observedState().getClusterState();, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            final ClusterState state = observer.observedState().getClusterState();, +++ b/core/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java, +            final ClusterState clusterState = observer.observedState().getClusterState();, +            nodes = clusterState.nodes();, +                ClusterBlockException blockException = checkGlobalBlock(clusterState);, +                request.concreteIndex(indexNameExpressionResolver.concreteSingleIndex(clusterState, request).getName());, +                resolveRequest(clusterState, request);, +                blockException = checkRequestBlock(clusterState, request);, +                shardIt = shards(clusterState, request);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +import org.elasticsearch.cluster.service.ClusterStateStatus;, +        final ClusterServiceState observedState = observer.observedState();, +        final ClusterState state = observedState.getClusterState();, +            protected boolean validate(ClusterServiceState newState) {, +                return newState.getClusterStateStatus() == ClusterStateStatus.APPLIED && validateRequest(request, newState.getClusterState(), concreteWaitFor);, +        if (observedState.getClusterStateStatus() == ClusterStateStatus.APPLIED && validateRequest(request, state, concreteWaitFor)) {, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardsObserver.java, +import org.elasticsearch.cluster.service.ClusterServiceState;, +        if (activeShardCount.enoughShardsActive(observer.observedState().getClusterState(), indexName)) {, +                    protected boolean validate(final ClusterServiceState newState) {, +                        return activeShardCount.enoughShardsActive(newState.getClusterState(), indexName);]