[+++ b/dev-tools/create-bwc-index.py, +# Licensed to Elasticsearch under one or more contributor, +# license agreements. See the NOTICE file distributed with, +# this work for additional information regarding copyright, +# ownership. Elasticsearch licenses this file to you under, +# the Apache License, Version 2.0 (the "License"); you may, +# not use this file except in compliance  with the License., +# You may obtain a copy of the License at, +#, +#     http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing,, +# software distributed under the License is distributed on, +# an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,, +# either express or implied. See the License for the specific, +# language governing permissions and limitations under the License., +, +import random, +import os, +import tempfile, +import shutil, +import subprocess, +import time, +import argparse, +import logging, +import sys, +import re, +, +if sys.version_info[0] > 2:, +  print('%s must use python 2.x (for the ES python client)' % sys.argv[0]), +, +from datetime import datetime, +try:, +  from elasticsearch import Elasticsearch, +  from elasticsearch.exceptions import ConnectionError, +  from elasticsearch.exceptions import TransportError, +except ImportError as e:, +  print('Can\'t import elasticsearch please install `sudo pip install elasticsearch`'), +  sys.exit(1), +, +BLACK_LIST = {'1.2.0' : { 'reason': 'Contains a major bug where routing hashes are not consistent with previous version',, +                          'issue': 'https://github.com/elasticsearch/elasticsearch/pull/6393'},, +              '1.3.0' : { 'reason': 'Lucene Related bug prevents upgrades from 0.90.7 and some earlier versions ',, +                          'issue' : 'https://github.com/elasticsearch/elasticsearch/pull/7055'}}, +# sometimes returns True, +def rarely():, +  return random.randint(0, 10) == 0, +, +# usually returns True, +def frequently():, +  return not rarely(), +, +# asserts the correctness of the given hits given they are sorted asc, +def assert_sort(hits):, +  values = [hit['sort'] for hit in hits['hits']['hits']], +  assert len(values) > 0, 'expected non emtpy result', +  val = min(values), +  for x in values:, +    assert x >= val, '%s >= %s' % (x, val), +    val = x, +, +# Indexes the given number of document into the given index, +# and randomly runs refresh, optimize and flush commands, +def index_documents(es, index_name, type, num_docs):, +  logging.info('Indexing %s docs' % num_docs), +  for id in range(0, num_docs):, +    es.index(index=index_name, doc_type=type, id=id, body={'string': str(random.randint(0, 100)),, +                                                           'long_sort': random.randint(0, 100),, +                                                           'double_sort' : float(random.randint(0, 100))}), +    if rarely():, +      es.indices.refresh(index=index_name), +    if rarely():, +      es.indices.flush(index=index_name, force=frequently()), +  if rarely():, +      es.indices.optimize(index=index_name), +  logging.info('Flushing index'), +  es.indices.flush(index=index_name), +, +def run_basic_asserts(es, index_name, type, num_docs):, +  count = es.count(index=index_name)['count'], +  assert count == num_docs, 'Expected %r but got %r documents' % (num_docs, count), +  for _ in range(0, num_docs):, +    random_doc_id = random.randint(0, num_docs-1), +    doc = es.get(index=index_name, doc_type=type, id=random_doc_id), +    assert doc, 'Expected document for id %s but got %s' % (random_doc_id, doc), +, +  assert_sort(es.search(index=index_name,, +                  body={, +                    'sort': [, +                      {'double_sort': {'order': 'asc'}}, +                    ], +                  })), +, +  assert_sort(es.search(index=index_name,, +                  body={, +                    'sort': [, +                      {'long_sort': {'order': 'asc'}}, +                    ], +                  })), +]