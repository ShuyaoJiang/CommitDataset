[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.cluster.routing.*;, +import java.util.*;, +                builder.startObject("primary_terms");, +                for (int shard = 0; shard < indexMetaData.getNumberOfShards(); shard++) {, +                    builder.field(Integer.toString(shard), indexMetaData.primaryTerm(shard));, +                }, +                builder.endObject();, +, +            this.metaData = routingResult.metaData();, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.cluster.routing.*;, +import java.util.*;, +                builder.startObject("primary_terms");, +                for (int shard = 0; shard < indexMetaData.getNumberOfShards(); shard++) {, +                    builder.field(Integer.toString(shard), indexMetaData.primaryTerm(shard));, +                }, +                builder.endObject();, +, +            this.metaData = routingResult.metaData();, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import com.carrotsearch.hppc.LongArrayList;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import java.util.*;, +, +    private final long[] primaryTerms;, +    private IndexMetaData(String index, long version, long[] primaryTerms, State state, Settings settings, ImmutableOpenMap<String, MappingMetaData> mappings, ImmutableOpenMap<String, AliasMetaData> aliases, ImmutableOpenMap<String, Custom> customs) {, +        this.settings = settings;, +        this.primaryTerms = primaryTerms;, +        assert primaryTerms.length == numberOfShards;, +, +    /**, +     * The term of the current selected primary. This is a non-negative number incremented when, +     * a primary shard is assigned after a full cluster restart (see {@link ShardRouting#initialize(java.lang.String, long)}, +     * or a replica shard is promoted to a primary (see {@link ShardRouting#moveToPrimary()})., +     **/, +    public long primaryTerm(int shardId) {, +        return this.primaryTerms[shardId];, +    }, +, +        if (version != that.version) {, +            return false;, +        }, +, +, +        if (Arrays.equals(primaryTerms, that.primaryTerms) == false) {, +            return false;, +        }, +        result = 31 * result + Long.hashCode(version);, +        result = 31 * result + customs.hashCode();, +        result = 31 * result + Arrays.hashCode(primaryTerms);, +, +        private final long[] primaryTerms;, +            primaryTerms = after.primaryTerms;, +            primaryTerms = in.readVLongArray();, +            out.writeVLongArray(primaryTerms);, +            builder.primaryTerms(primaryTerms);, +        builder.primaryTerms(in.readVLongArray());, +        out.writeVLongArray(primaryTerms);, +        private long[] primaryTerms = null;, +            this.primaryTerms = indexMetaData.primaryTerms.clone();, +            return settings(settings.build());, +        /**, +         * returns the primary term for the given shard., +         * See {@link IndexMetaData#primaryTerm(int)} for more information., +         */, +        public long primaryTerm(int shardId) {, +            if (primaryTerms == null) {, +                initializePrimaryTerms();, +            }, +            return this.primaryTerms[shardId];, +        }, +, +        /**, +         * sets the primary term for the given shard., +         * See {@link IndexMetaData#primaryTerm(int)} for more information., +         */, +        public Builder primaryTerm(int shardId, long primaryTerm) {, +            if (primaryTerms == null) {, +                initializePrimaryTerms();, +            }, +            this.primaryTerms[shardId] = primaryTerm;, +            return this;, +        }, +, +        private void primaryTerms(long[] primaryTerms) {, +            this.primaryTerms = primaryTerms.clone();, +        }, +, +        private void initializePrimaryTerms() {, +            assert primaryTerms == null;, +            if (numberOfShards() < 0) {, +                throw new IllegalStateException("you must set the number of shards before setting/reading primary terms");, +            }, +            primaryTerms = new long[numberOfShards()];, +        }, +, +, +            if (primaryTerms == null) {, +                initializePrimaryTerms();]