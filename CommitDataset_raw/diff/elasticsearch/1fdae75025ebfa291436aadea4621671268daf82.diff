[+++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +import org.apache.lucene.search.Query;, +import org.elasticsearch.index.mapper.MappedFieldType;, +    private final MappedFieldType fieldType;, +    public ExtendedCommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur, float maxTermFrequency, boolean disableCoord, MappedFieldType fieldType) {, +        this.fieldType = fieldType;, +        if (fieldType == null) {, +        final Query query = fieldType.queryStringTermQuery(term);, +++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +import org.apache.lucene.search.Query;, +import org.elasticsearch.index.mapper.MappedFieldType;, +    private final MappedFieldType fieldType;, +    public ExtendedCommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur, float maxTermFrequency, boolean disableCoord, MappedFieldType fieldType) {, +        this.fieldType = fieldType;, +        if (fieldType == null) {, +        final Query query = fieldType.queryStringTermQuery(term);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.elasticsearch.index.mapper.MappedFieldType;, +    private MappedFieldType currentFieldType;, +        if (currentFieldType != null) {, +            Query termQuery = currentFieldType.queryStringTermQuery(term);, +        currentFieldType = null;, +                    currentFieldType = parseContext.fieldMapper(field + quoteFieldSuffix);, +            if (currentFieldType == null) {, +                currentFieldType = parseContext.fieldMapper(field);, +            if (currentFieldType != null) {, +                        setAnalyzer(parseContext.getSearchQuoteAnalyzer(currentFieldType));, +                        setAnalyzer(parseContext.getSearchAnalyzer(currentFieldType));, +                if (currentFieldType != null) {, +                    if (currentFieldType.useTermQueryWithQueryString()) {, +                            query = currentFieldType.termQuery(queryText, parseContext);, +                        query = super.getFieldQuery(currentFieldType.names().indexName(), queryText, quoted);, +        currentFieldType = parseContext.fieldMapper(field);, +        if (currentFieldType != null) {, +            if (lowercaseExpandedTerms && !currentFieldType.isNumeric()) {, +                if (currentFieldType instanceof DateFieldMapper.DateFieldType && settings.timeZone() != null) {, +                    DateFieldMapper.DateFieldType dateFieldType = (DateFieldMapper.DateFieldType) this.currentFieldType;, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, parseContext);, +        currentFieldType = parseContext.fieldMapper(field);, +        if (currentFieldType != null) {, +                return currentFieldType.fuzzyQuery(termStr, Fuzziness.build(minSimilarity), fuzzyPrefixLength, settings.fuzzyMaxExpansions(), false);, +        currentFieldType = null;, +            currentFieldType = parseContext.fieldMapper(field);, +            if (currentFieldType != null) {, +                    setAnalyzer(parseContext.getSearchAnalyzer(currentFieldType));, +                if (currentFieldType.useTermQueryWithQueryString()) {, +                    query = currentFieldType.prefixQuery(termStr, multiTermRewriteMethod, parseContext);, +                    query = getPossiblyAnalyzedPrefixQuery(currentFieldType.names().indexName(), termStr);, +        currentFieldType = null;, +            currentFieldType = parseContext.fieldMapper(field);, +            if (currentFieldType != null) {, +                    setAnalyzer(parseContext.getSearchAnalyzer(currentFieldType));, +                indexedNameField = currentFieldType.names().indexName();, +        currentFieldType = null;, +            currentFieldType = parseContext.fieldMapper(field);, +            if (currentFieldType != null) {, +                    setAnalyzer(parseContext.getSearchAnalyzer(currentFieldType));, +                if (currentFieldType.useTermQueryWithQueryString()) {, +                    query = currentFieldType.regexpQuery(termStr, RegExp.ALL, maxDeterminizedStates, multiTermRewriteMethod, parseContext);, +++ b/core/src/main/java/org/apache/lucene/queries/ExtendedCommonTermsQuery.java, +import org.apache.lucene.search.Query;, +import org.elasticsearch.index.mapper.MappedFieldType;, +    private final MappedFieldType fieldType;, +    public ExtendedCommonTermsQuery(Occur highFreqOccur, Occur lowFreqOccur, float maxTermFrequency, boolean disableCoord, MappedFieldType fieldType) {, +        this.fieldType = fieldType;, +        if (fieldType == null) {, +        final Query query = fieldType.queryStringTermQuery(term);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.elasticsearch.index.mapper.MappedFieldType;, +    private MappedFieldType currentFieldType;, +        if (currentFieldType != null) {, +            Query termQuery = currentFieldType.queryStringTermQuery(term);, +        currentFieldType = null;, +                    currentFieldType = parseContext.fieldMapper(field + quoteFieldSuffix);, +            if (currentFieldType == null) {, +                currentFieldType = parseContext.fieldMapper(field);, +            if (currentFieldType != null) {, +                        setAnalyzer(parseContext.getSearchQuoteAnalyzer(currentFieldType));, +                        setAnalyzer(parseContext.getSearchAnalyzer(currentFieldType));, +                if (currentFieldType != null) {, +                    if (currentFieldType.useTermQueryWithQueryString()) {, +                            query = currentFieldType.termQuery(queryText, parseContext);, +                        query = super.getFieldQuery(currentFieldType.names().indexName(), queryText, quoted);, +        currentFieldType = parseContext.fieldMapper(field);, +        if (currentFieldType != null) {, +            if (lowercaseExpandedTerms && !currentFieldType.isNumeric()) {, +                if (currentFieldType instanceof DateFieldMapper.DateFieldType && settings.timeZone() != null) {, +                    DateFieldMapper.DateFieldType dateFieldType = (DateFieldMapper.DateFieldType) this.currentFieldType;, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, parseContext);, +        currentFieldType = parseContext.fieldMapper(field);, +        if (currentFieldType != null) {, +                return currentFieldType.fuzzyQuery(termStr, Fuzziness.build(minSimilarity), fuzzyPrefixLength, settings.fuzzyMaxExpansions(), false);, +        currentFieldType = null;, +            currentFieldType = parseContext.fieldMapper(field);, +            if (currentFieldType != null) {, +                    setAnalyzer(parseContext.getSearchAnalyzer(currentFieldType));, +                if (currentFieldType.useTermQueryWithQueryString()) {, +                    query = currentFieldType.prefixQuery(termStr, multiTermRewriteMethod, parseContext);]