[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    if (Version.CURRENT.snapshot()) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/snapshot/org/elasticsearch/plugin/%s/%s-SNAPSHOT/%s-%s-SNAPSHOT.zip", repo, version, repo, version));, +                    }, +                    addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    if (Version.CURRENT.snapshot()) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/snapshot/org/elasticsearch/plugin/%s/%s-SNAPSHOT/%s-%s-SNAPSHOT.zip", repo, version, repo, version));, +                    }, +                    addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +        scriptsDirectory = env.configFile().resolve("scripts");, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    if (Version.CURRENT.snapshot()) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/snapshot/org/elasticsearch/plugin/%s/%s-SNAPSHOT/%s-%s-SNAPSHOT.zip", repo, version, repo, version));, +                    }, +                    addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +        scriptsDirectory = env.configFile().resolve("scripts");, +++ b/core/src/test/java/org/elasticsearch/bootstrap/SecurityTests.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    if (Version.CURRENT.snapshot()) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/snapshot/org/elasticsearch/plugin/%s/%s-SNAPSHOT/%s-%s-SNAPSHOT.zip", repo, version, repo, version));, +                    }, +                    addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +        scriptsDirectory = env.configFile().resolve("scripts");, +++ b/core/src/test/java/org/elasticsearch/bootstrap/SecurityTests.java, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginManagerUnitTests.java, +import java.util.Iterator;, +import java.util.Locale;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +, +        assertThat(handle.urls(), hasSize(Version.CURRENT.snapshot() ? 2 : 1));, +, +        Iterator<URL> iterator = handle.urls().iterator();, +, +        if (Version.CURRENT.snapshot()) {, +            String expectedSnapshotUrl = String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/snapshot/org/elasticsearch/plugin/%s/%s-SNAPSHOT/%s-%s-SNAPSHOT.zip",, +                    pluginName, Version.CURRENT.number(), pluginName, Version.CURRENT.number());, +            assertThat(iterator.next(), is(new URL(expectedSnapshotUrl)));, +        }, +, +        URL expected = new URL("http", "download.elastic.co", "/elasticsearch/release/org/elasticsearch/plugin/" + pluginName + "/" + Version.CURRENT.number() + "/" +, +        assertThat(iterator.next(), is(expected));, +        String randomPluginName = randomFrom(PluginManager.OFFICIAL_PLUGINS.asList());, +        PluginManager.PluginHandle handle = PluginManager.PluginHandle.parse(randomPluginName);, +        assertThat(handle.name, is(randomPluginName.replaceAll("^elasticsearch-", "")));, +, +        assertThat(handle.urls(), hasSize(Version.CURRENT.snapshot() ? 2 : 1));, +        Iterator<URL> iterator = handle.urls().iterator();, +, +        if (Version.CURRENT.snapshot()) {, +            String expectedSnapshotUrl = String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/snapshot/org/elasticsearch/plugin/%s/%s-SNAPSHOT/%s-%s-SNAPSHOT.zip",, +                    randomPluginName, Version.CURRENT.number(), randomPluginName, Version.CURRENT.number());, +            assertThat(iterator.next(), is(new URL(expectedSnapshotUrl)));, +        }, +, +        String releaseUrl = String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%s/%s/%s-%s.zip",, +                randomPluginName, Version.CURRENT.number(), randomPluginName, Version.CURRENT.number());, +        assertThat(iterator.next(), is(new URL(releaseUrl)));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    if (Version.CURRENT.snapshot()) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/snapshot/org/elasticsearch/plugin/%s/%s-SNAPSHOT/%s-%s-SNAPSHOT.zip", repo, version, repo, version));, +                    }, +                    addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +        scriptsDirectory = env.configFile().resolve("scripts");, +++ b/core/src/test/java/org/elasticsearch/bootstrap/SecurityTests.java, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginManagerUnitTests.java, +import java.util.Iterator;, +import java.util.Locale;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +, +        assertThat(handle.urls(), hasSize(Version.CURRENT.snapshot() ? 2 : 1));, +, +        Iterator<URL> iterator = handle.urls().iterator();, +, +        if (Version.CURRENT.snapshot()) {, +            String expectedSnapshotUrl = String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/snapshot/org/elasticsearch/plugin/%s/%s-SNAPSHOT/%s-%s-SNAPSHOT.zip",, +                    pluginName, Version.CURRENT.number(), pluginName, Version.CURRENT.number());, +            assertThat(iterator.next(), is(new URL(expectedSnapshotUrl)));, +        }, +, +        URL expected = new URL("http", "download.elastic.co", "/elasticsearch/release/org/elasticsearch/plugin/" + pluginName + "/" + Version.CURRENT.number() + "/" +, +        assertThat(iterator.next(), is(expected));, +        String randomPluginName = randomFrom(PluginManager.OFFICIAL_PLUGINS.asList());]