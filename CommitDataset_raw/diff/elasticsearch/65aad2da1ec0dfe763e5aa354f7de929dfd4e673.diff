[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +            long ttl = -1;, +                    } else if ("_ttl".equals(currentFieldName) || "ttl".equals(currentFieldName)) {, +                        ttl = parser.longValue();, +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +                    internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +            long ttl = -1;, +                    } else if ("_ttl".equals(currentFieldName) || "ttl".equals(currentFieldName)) {, +                        ttl = parser.longValue();, +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +                    internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                            .routing(indexRequest.routing()).parent(indexRequest.parent()).timestamp(indexRequest.timestamp()).ttl(indexRequest.ttl());, +, +                            .routing(indexRequest.routing()).parent(indexRequest.parent()).timestamp(indexRequest.timestamp()).ttl(indexRequest.ttl());, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +            long ttl = -1;, +                    } else if ("_ttl".equals(currentFieldName) || "ttl".equals(currentFieldName)) {, +                        ttl = parser.longValue();, +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +                    internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                            .routing(indexRequest.routing()).parent(indexRequest.parent()).timestamp(indexRequest.timestamp()).ttl(indexRequest.ttl());, +, +                            .routing(indexRequest.routing()).parent(indexRequest.parent()).timestamp(indexRequest.timestamp()).ttl(indexRequest.ttl());, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +    private long ttl = -1;, +    // Sets the relative ttl value. It musts be > 0 as it makes little sense otherwise., +    public IndexRequest ttl(long ttl) throws ElasticSearchGenerationException {, +        if (ttl <= 0) {, +            throw new ElasticSearchIllegalArgumentException("TTL value must be > 0. Illegal value provided [" + ttl + "]");, +        }, +        this.ttl  = ttl;, +        return this;, +    }, +, +    public long ttl() {, +        return this.ttl;, +    }, +, +        ttl = in.readLong();, +        out.writeLong(ttl);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +            long ttl = -1;, +                    } else if ("_ttl".equals(currentFieldName) || "ttl".equals(currentFieldName)) {, +                        ttl = parser.longValue();, +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +                    internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                            .routing(indexRequest.routing()).parent(indexRequest.parent()).timestamp(indexRequest.timestamp()).ttl(indexRequest.ttl());, +, +                            .routing(indexRequest.routing()).parent(indexRequest.parent()).timestamp(indexRequest.timestamp()).ttl(indexRequest.ttl());, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +    private long ttl = -1;, +    // Sets the relative ttl value. It musts be > 0 as it makes little sense otherwise., +    public IndexRequest ttl(long ttl) throws ElasticSearchGenerationException {, +        if (ttl <= 0) {, +            throw new ElasticSearchIllegalArgumentException("TTL value must be > 0. Illegal value provided [" + ttl + "]");, +        }, +        this.ttl  = ttl;, +        return this;, +    }, +, +    public long ttl() {, +        return this.ttl;, +    }, +, +        ttl = in.readLong();, +        out.writeLong(ttl);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +                .routing(request.routing()).parent(request.parent()).timestamp(request.timestamp()).ttl(request.ttl());, +                .routing(request.routing()).parent(request.parent()).timestamp(request.timestamp()).ttl(request.ttl());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +            long ttl = -1;, +                    } else if ("_ttl".equals(currentFieldName) || "ttl".equals(currentFieldName)) {, +                        ttl = parser.longValue();, +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +                        internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +                    internalAdd(new IndexRequest(index, type, id).routing(routing).parent(parent).timestamp(timestamp).ttl(ttl).version(version).versionType(versionType), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                            .routing(indexRequest.routing()).parent(indexRequest.parent()).timestamp(indexRequest.timestamp()).ttl(indexRequest.ttl());, +, +                            .routing(indexRequest.routing()).parent(indexRequest.parent()).timestamp(indexRequest.timestamp()).ttl(indexRequest.ttl());, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +    private long ttl = -1;, +    // Sets the relative ttl value. It musts be > 0 as it makes little sense otherwise., +    public IndexRequest ttl(long ttl) throws ElasticSearchGenerationException {, +        if (ttl <= 0) {, +            throw new ElasticSearchIllegalArgumentException("TTL value must be > 0. Illegal value provided [" + ttl + "]");, +        }, +        this.ttl  = ttl;]