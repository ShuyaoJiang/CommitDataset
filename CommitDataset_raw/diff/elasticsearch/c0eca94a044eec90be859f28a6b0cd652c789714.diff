[+++ b/core/pom.xml, +                                <include>org/elasticsearch/index/MockEngineFactoryPlugin.class</include>, +++ b/core/pom.xml, +                                <include>org/elasticsearch/index/MockEngineFactoryPlugin.class</include>, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.engine.EngineFactory;, +import org.elasticsearch.index.engine.InternalEngineFactory;, +    // pkg private so tests can mock, +    Class<? extends EngineFactory> engineFactoryImpl = InternalEngineFactory.class;, +        bind(EngineFactory.class).to(engineFactoryImpl);, +        bind(IndexServicesProvider.class).asEagerSingleton();, +++ b/core/pom.xml, +                                <include>org/elasticsearch/index/MockEngineFactoryPlugin.class</include>, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.engine.EngineFactory;, +import org.elasticsearch.index.engine.InternalEngineFactory;, +    // pkg private so tests can mock, +    Class<? extends EngineFactory> engineFactoryImpl = InternalEngineFactory.class;, +        bind(EngineFactory.class).to(engineFactoryImpl);, +        bind(IndexServicesProvider.class).asEagerSingleton();, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.shard.*;, +    private volatile ImmutableMap<Integer, IndexShard> shards = ImmutableMap.of();, +        return shards.values().iterator();, +         return shards.get(shardId);, +        Store store = null;, +        IndexShard indexShard = null;, +            IndexStore indexStore = injector.getInstance(IndexStore.class);, +            store = new Store(shardId, indexSettings, indexStore.newDirectoryService(path), lock, new StoreCloseListener(shardId, canDeleteShardContent, () -> injector.getInstance(IndicesQueryCache.class).onClose(shardId)));, +            if (primary && IndexMetaData.isIndexUsingShadowReplicas(indexSettings)) {, +                indexShard = new ShadowIndexShard(shardId, indexSettings, path, store, injector.getInstance(IndexServicesProvider.class));, +            } else {, +                indexShard = new IndexShard(shardId, indexSettings, path, store, injector.getInstance(IndexServicesProvider.class));, +            shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();, +                closeShard("initialization failed", shardId, indexShard, store);, +        HashMap<Integer, IndexShard> tmpShardsMap = new HashMap<>(shards);, +        indexShard = tmpShardsMap.remove(shardId);, +        closeShard(reason, sId, indexShard, indexShard.store());, +    private void closeShard(String reason, ShardId sId, IndexShard indexShard, Store store) {, +                store.close();, +++ b/core/pom.xml, +                                <include>org/elasticsearch/index/MockEngineFactoryPlugin.class</include>, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.engine.EngineFactory;, +import org.elasticsearch.index.engine.InternalEngineFactory;, +    // pkg private so tests can mock, +    Class<? extends EngineFactory> engineFactoryImpl = InternalEngineFactory.class;, +        bind(EngineFactory.class).to(engineFactoryImpl);, +        bind(IndexServicesProvider.class).asEagerSingleton();, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.shard.*;, +    private volatile ImmutableMap<Integer, IndexShard> shards = ImmutableMap.of();, +        return shards.values().iterator();, +         return shards.get(shardId);, +        Store store = null;, +        IndexShard indexShard = null;, +            IndexStore indexStore = injector.getInstance(IndexStore.class);, +            store = new Store(shardId, indexSettings, indexStore.newDirectoryService(path), lock, new StoreCloseListener(shardId, canDeleteShardContent, () -> injector.getInstance(IndicesQueryCache.class).onClose(shardId)));, +            if (primary && IndexMetaData.isIndexUsingShadowReplicas(indexSettings)) {, +                indexShard = new ShadowIndexShard(shardId, indexSettings, path, store, injector.getInstance(IndexServicesProvider.class));, +            } else {, +                indexShard = new IndexShard(shardId, indexSettings, path, store, injector.getInstance(IndexServicesProvider.class));, +            shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();, +                closeShard("initialization failed", shardId, indexShard, store);, +        HashMap<Integer, IndexShard> tmpShardsMap = new HashMap<>(shards);, +        indexShard = tmpShardsMap.remove(shardId);, +        closeShard(reason, sId, indexShard, indexShard.store());, +    private void closeShard(String reason, ShardId sId, IndexShard indexShard, Store store) {, +                store.close();, +++ b/core/src/main/java/org/elasticsearch/index/IndexServicesProvider.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index;, +, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.util.BigArrays;, +import org.elasticsearch.index.aliases.IndexAliasesService;, +import org.elasticsearch.index.cache.IndexCache;, +import org.elasticsearch.index.codec.CodecService;, +import org.elasticsearch.index.engine.EngineFactory;, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.query.IndexQueryParserService;, +import org.elasticsearch.index.similarity.SimilarityService;]