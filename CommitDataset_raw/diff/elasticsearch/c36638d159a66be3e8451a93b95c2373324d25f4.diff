[+++ b/src/main/java/org/elasticsearch/common/lucene/search/DeletionAwareConstantScoreQuery.java, + * We still need sometimes to exclude deletes, because we don't remove them always with acceptDocs on filters, +++ b/src/main/java/org/elasticsearch/common/lucene/search/DeletionAwareConstantScoreQuery.java, + * We still need sometimes to exclude deletes, because we don't remove them always with acceptDocs on filters, +++ b/src/main/java/org/elasticsearch/common/lucene/search/NotDeletedFilter.java, +import org.apache.lucene.util.FixedBitSet;, +        public boolean isCacheable() {, +            return innerSet.isCacheable();, +        }, +, +        @Override, +        public Bits bits() throws IOException {, +            Bits bits = innerSet.bits();, +            if (bits == null) {, +                return null;, +            }, +            return new NotDeleteBits(bits, liveDocs);, +        }, +, +        @Override, +            if (!DocIdSets.isFastIterator(innerSet) && liveDocs instanceof FixedBitSet) {, +                // might as well iterate over the live docs..., since the iterator is not fast enough, +                // but we can only do that if we have Bits..., in short, we reverse the order..., +                Bits bits = innerSet.bits();, +                if (bits != null) {, +                    return new NotDeletedDocIdSetIterator(((FixedBitSet) liveDocs).iterator(), bits);, +                }, +            }, +    static class NotDeleteBits implements Bits {, +        private final Bits bits;, +        NotDeleteBits(Bits bits, Bits liveDocs) {, +            this.bits = bits;, +        public boolean get(int index) {, +            return liveDocs.get(index) && bits.get(index);, +        }, +, +        @Override, +        public int length() {, +            return bits.length();, +        }, +    }, +, +    static class NotDeletedDocIdSetIterator extends FilteredDocIdSetIterator {, +, +        private final Bits match;, +, +        NotDeletedDocIdSetIterator(DocIdSetIterator innerIter, Bits match) {, +            super(innerIter);, +            this.match = match;, +        }, +, +        @Override, +            return match.get(doc);]