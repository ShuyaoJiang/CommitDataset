[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.WatcherStatsRequest;, +import org.elasticsearch.client.watcher.WatcherStatsResponse;, +    /**, +     * Get the watcher stats, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public WatcherStatsResponse watcherStats(WatcherStatsRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::watcherStats, options,, +            WatcherStatsResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously get the watcher stats, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void watcherStatsAsync(WatcherStatsRequest request, RequestOptions options, ActionListener<WatcherStatsResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::watcherStats, options,, +            WatcherStatsResponse::fromXContent, listener, emptySet());, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.WatcherStatsRequest;, +import org.elasticsearch.client.watcher.WatcherStatsResponse;, +    /**, +     * Get the watcher stats, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public WatcherStatsResponse watcherStats(WatcherStatsRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::watcherStats, options,, +            WatcherStatsResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously get the watcher stats, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void watcherStatsAsync(WatcherStatsRequest request, RequestOptions options, ActionListener<WatcherStatsResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, WatcherRequestConverters::watcherStats, options,, +            WatcherStatsResponse::fromXContent, listener, emptySet());, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +import org.apache.http.client.methods.HttpGet;, +import org.elasticsearch.client.watcher.WatcherStatsRequest;, +, +    static Request watcherStats(WatcherStatsRequest watcherStatsRequest) {, +        RequestConverters.EndpointBuilder builder = new RequestConverters.EndpointBuilder().addPathPartAsIs("_xpack", "watcher", "stats");, +        String endpoint = builder.build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +        RequestConverters.Params parameters = new RequestConverters.Params(request);, +        StringBuilder metric = new StringBuilder();, +        if (watcherStatsRequest.includeCurrentWatches()) {, +            metric.append("current_watches");, +        }, +        if (watcherStatsRequest.includeQueuedWatches()) {, +            if (metric.length() > 0) {, +                metric.append(",");, +            }, +            metric.append("queued_watches");, +        }, +        if (metric.length() > 0) {, +            parameters.putParam("metric", metric.toString());, +        }, +        return request;, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +import org.elasticsearch.client.watcher.WatcherStatsRequest;, +import org.elasticsearch.client.watcher.WatcherStatsResponse;, +    /**, +     * Get the watcher stats, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public WatcherStatsResponse watcherStats(WatcherStatsRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, WatcherRequestConverters::watcherStats, options,, +            WatcherStatsResponse::fromXContent, emptySet());, +    }]