[+++ b/server/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +        if (in.getVersion().before(Version.V_7_0_0)) {, +            in.readOptionalBoolean(); // unused use_dis_max flag, +        }, +        if (out.getVersion().before(Version.V_7_0_0)) {, +            out.writeOptionalBoolean(null);, +        }, +                prefixLength, maxExpansions, minimumShouldMatch, fuzzyRewrite, tieBreaker, lenient,, +++ b/server/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +        if (in.getVersion().before(Version.V_7_0_0)) {, +            in.readOptionalBoolean(); // unused use_dis_max flag, +        }, +        if (out.getVersion().before(Version.V_7_0_0)) {, +            out.writeOptionalBoolean(null);, +        }, +                prefixLength, maxExpansions, minimumShouldMatch, fuzzyRewrite, tieBreaker, lenient,, +++ b/server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java, +        Query query = multiMatchQuery("test1 test2").field(STRING_FIELD_NAME).toQuery(createShardContext());, +        Query query = multiMatchQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).tieBreaker(1.0f), +        Query query = multiMatchQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).toQuery(createShardContext());, +        Query query = multiMatchQuery("test").field("mapped_str*").tieBreaker(1.0f).toQuery(createShardContext());, +++ b/server/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +        if (in.getVersion().before(Version.V_7_0_0)) {, +            in.readOptionalBoolean(); // unused use_dis_max flag, +        }, +        if (out.getVersion().before(Version.V_7_0_0)) {, +            out.writeOptionalBoolean(null);, +        }, +                prefixLength, maxExpansions, minimumShouldMatch, fuzzyRewrite, tieBreaker, lenient,, +++ b/server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java, +        Query query = multiMatchQuery("test1 test2").field(STRING_FIELD_NAME).toQuery(createShardContext());, +        Query query = multiMatchQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).tieBreaker(1.0f), +        Query query = multiMatchQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).toQuery(createShardContext());, +        Query query = multiMatchQuery("test").field("mapped_str*").tieBreaker(1.0f).toQuery(createShardContext());, +++ b/server/src/test/java/org/elasticsearch/search/query/MultiMatchQueryIT.java, +                        .operator(Operator.OR).type(type))).get();, +                        .operator(Operator.OR).cutoffFrequency(cutoffFrequency).type(type))).get();, +                        .operator(Operator.OR).type(type))).get();, +                                .operator(op).tieBreaker(1.0f).minimumShouldMatch(minShouldMatch).type(type))).get();, +                                .type(MatchQuery.Type.PHRASE_PREFIX).tieBreaker(1.0f).minimumShouldMatch(minShouldMatch))).get();, +                                    .type(MatchQuery.Type.PHRASE).minimumShouldMatch(minShouldMatch))).get();, +++ b/server/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +        if (in.getVersion().before(Version.V_7_0_0)) {, +            in.readOptionalBoolean(); // unused use_dis_max flag, +        }, +        if (out.getVersion().before(Version.V_7_0_0)) {, +            out.writeOptionalBoolean(null);, +        }, +                prefixLength, maxExpansions, minimumShouldMatch, fuzzyRewrite, tieBreaker, lenient,, +++ b/server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java, +        Query query = multiMatchQuery("test1 test2").field(STRING_FIELD_NAME).toQuery(createShardContext());, +        Query query = multiMatchQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).tieBreaker(1.0f), +        Query query = multiMatchQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).toQuery(createShardContext());, +        Query query = multiMatchQuery("test").field("mapped_str*").tieBreaker(1.0f).toQuery(createShardContext());, +++ b/server/src/test/java/org/elasticsearch/search/query/MultiMatchQueryIT.java, +                        .operator(Operator.OR).type(type))).get();, +                        .operator(Operator.OR).cutoffFrequency(cutoffFrequency).type(type))).get();, +                        .operator(Operator.OR).type(type))).get();, +                                .operator(op).tieBreaker(1.0f).minimumShouldMatch(minShouldMatch).type(type))).get();, +                                .type(MatchQuery.Type.PHRASE_PREFIX).tieBreaker(1.0f).minimumShouldMatch(minShouldMatch))).get();, +                                    .type(MatchQuery.Type.PHRASE).minimumShouldMatch(minShouldMatch))).get();, +++ b/server/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java, +                .setQuery(multiMatchQuery("value2", "field2").field("field1", 2).lenient(true)).get();, +                .setQuery(multiMatchQuery("value2", "field2").field("field1", 2).lenient(true)).get();, +++ b/server/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +        if (in.getVersion().before(Version.V_7_0_0)) {, +            in.readOptionalBoolean(); // unused use_dis_max flag, +        }, +        if (out.getVersion().before(Version.V_7_0_0)) {, +            out.writeOptionalBoolean(null);, +        }, +                prefixLength, maxExpansions, minimumShouldMatch, fuzzyRewrite, tieBreaker, lenient,, +++ b/server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java, +        Query query = multiMatchQuery("test1 test2").field(STRING_FIELD_NAME).toQuery(createShardContext());, +        Query query = multiMatchQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).tieBreaker(1.0f), +        Query query = multiMatchQuery("test").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2).toQuery(createShardContext());, +        Query query = multiMatchQuery("test").field("mapped_str*").tieBreaker(1.0f).toQuery(createShardContext());, +++ b/server/src/test/java/org/elasticsearch/search/query/MultiMatchQueryIT.java, +                        .operator(Operator.OR).type(type))).get();, +                        .operator(Operator.OR).cutoffFrequency(cutoffFrequency).type(type))).get();, +                        .operator(Operator.OR).type(type))).get();, +                                .operator(op).tieBreaker(1.0f).minimumShouldMatch(minShouldMatch).type(type))).get();, +                                .type(MatchQuery.Type.PHRASE_PREFIX).tieBreaker(1.0f).minimumShouldMatch(minShouldMatch))).get();, +                                    .type(MatchQuery.Type.PHRASE).minimumShouldMatch(minShouldMatch))).get();, +++ b/server/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java, +                .setQuery(multiMatchQuery("value2", "field2").field("field1", 2).lenient(true)).get();, +                .setQuery(multiMatchQuery("value2", "field2").field("field1", 2).lenient(true)).get();, +++ b/x-pack/plugin/sql/qa/src/main/resources/fulltext.csv-spec, +SELECT emp_no, first_name, gender, last_name FROM test_emp WHERE MATCH('first_name,last_name', 'Morton', 'slop=1;lenient=true;cutoff_frequency=2;tie_breaker=0.1;fuzzy_rewrite=scoring_boolean;minimum_should_match=1;operator=AND;max_expansions=30;prefix_length=1;analyzer=english;type=best_fields;auto_generate_synonyms_phrase_query=true;fuzzy_transpositions=true');, +SELECT emp_no, first_name, gender, last_name FROM test_emp WHERE MATCH('first_name,last_name', 'Morton', 'slop=1;lenient=true', 'cutoff_frequency=2','tie_breaker=0.1;fuzzy_rewrite=scoring_boolean','minimum_should_match=1;operator=AND;max_expansions=30;prefix_length=1;analyzer=english;type=best_fields;auto_generate_synonyms_phrase_query=true;fuzzy_transpositions=true');, +++ b/server/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +        if (in.getVersion().before(Version.V_7_0_0)) {, +            in.readOptionalBoolean(); // unused use_dis_max flag, +        }, +        if (out.getVersion().before(Version.V_7_0_0)) {, +            out.writeOptionalBoolean(null);, +        }, +                prefixLength, maxExpansions, minimumShouldMatch, fuzzyRewrite, tieBreaker, lenient,, +++ b/server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java, +        Query query = multiMatchQuery("test1 test2").field(STRING_FIELD_NAME).toQuery(createShardContext());]