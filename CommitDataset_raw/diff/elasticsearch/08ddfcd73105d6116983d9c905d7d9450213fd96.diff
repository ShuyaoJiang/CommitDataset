[+++ b/src/main/java/org/elasticsearch/common/Table.java, +import com.google.common.collect.Maps;, +import java.util.*;, +    protected Map<String,List<Cell>> map = Maps.newHashMap();, +, +, +        /* Create associative structure for columns that, +         * contain the same cells as the rows:, +         *, +         *     header1 => [Cell, Cell, ...], +         *     header2 => [Cell, Cell, ...], +         *     header3 => [Cell, Cell, ...], +         */, +        for (Cell header : headers) {, +            map.put((String) header.value, new ArrayList<Cell>());, +        }, +, +, +        // If we're in a value row, also populate the named column., +        if (!inHeaders) {, +            String hdr = (String) headers.get(currentCells.indexOf(cell)).value;, +            map.get(hdr).add(cell);, +        }, +, +        addCell(new Cell(value, mAttr));, +    public Iterable<List<Cell>> rowIterator() { return rows; }, +, +    public List<List<Cell>> getRows() {, +    public Map<String, List<Cell>> getAsMap() { return this.map; }, +, +    public List<Cell> getHeadersFromNames(List<String> headerNames) {, +        List<Cell> hdrs = new ArrayList<Cell>();, +        for (String hdrToFind : headerNames) {, +            for (Cell header : headers) {, +                if (((String) header.value).equalsIgnoreCase(hdrToFind)) {, +                    hdrs.add(header);, +                }, +            }, +        }, +        return hdrs;, +    }, +, +++ b/src/main/java/org/elasticsearch/common/Table.java, +import com.google.common.collect.Maps;, +import java.util.*;, +    protected Map<String,List<Cell>> map = Maps.newHashMap();, +, +, +        /* Create associative structure for columns that, +         * contain the same cells as the rows:, +         *, +         *     header1 => [Cell, Cell, ...], +         *     header2 => [Cell, Cell, ...], +         *     header3 => [Cell, Cell, ...], +         */, +        for (Cell header : headers) {, +            map.put((String) header.value, new ArrayList<Cell>());, +        }, +, +, +        // If we're in a value row, also populate the named column., +        if (!inHeaders) {, +            String hdr = (String) headers.get(currentCells.indexOf(cell)).value;, +            map.get(hdr).add(cell);, +        }, +, +        addCell(new Cell(value, mAttr));, +    public Iterable<List<Cell>> rowIterator() { return rows; }, +, +    public List<List<Cell>> getRows() {, +    public Map<String, List<Cell>> getAsMap() { return this.map; }, +, +    public List<Cell> getHeadersFromNames(List<String> headerNames) {, +        List<Cell> hdrs = new ArrayList<Cell>();, +        for (String hdrToFind : headerNames) {, +            for (Cell header : headers) {, +                if (((String) header.value).equalsIgnoreCase(hdrToFind)) {, +                    hdrs.add(header);, +                }, +            }, +        }, +        return hdrs;, +    }, +, +++ b/src/main/java/org/elasticsearch/rest/action/support/RestTable.java, +import java.util.*;, +        List<String> displayHeaders = buildDisplayHeaders(table, request);, +        for (int row = 0; row < table.getRows().size(); row++) {, +            for (String header : displayHeaders) {, +                builder.field(header, renderValue(request, table.getAsMap().get(header).get(row).value));, +, +        List<String> displayHeaders = buildDisplayHeaders(table, request);, +        int[] width = buildWidths(table, request, verbose, displayHeaders);, +        int col = 0;, +            for (Table.Cell header : table.getHeadersFromNames(displayHeaders)) {, +                pad(header, width[col], request, out);, +                col++;, +, +        for (int row = 0; row < table.getRows().size(); row++) {, +            for (String header : displayHeaders) {]