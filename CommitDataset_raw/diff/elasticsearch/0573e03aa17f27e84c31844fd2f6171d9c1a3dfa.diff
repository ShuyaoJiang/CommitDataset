[+++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            final TribeService tribeService = new TribeService(settings, clusterService, nodeEnvironment.nodeId(), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            final TribeService tribeService = new TribeService(settings, clusterService, nodeEnvironment.nodeId(), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeClientNode.java, +import java.util.Collection;, +    TribeClientNode(Settings settings, Collection<Class<? extends Plugin>> classpathPlugins) {, +        super(new Environment(settings), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            final TribeService tribeService = new TribeService(settings, clusterService, nodeEnvironment.nodeId(), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeClientNode.java, +import java.util.Collection;, +    TribeClientNode(Settings settings, Collection<Class<? extends Plugin>> classpathPlugins) {, +        super(new Environment(settings), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeService.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collection;, +    public TribeService(Settings settings, ClusterService clusterService, final String tribeNodeId,, +                        Collection<Class<? extends Plugin>> classpathPlugins) {, +            nodes.add(new TribeClientNode(clientSettings, classpathPlugins));, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            final TribeService tribeService = new TribeService(settings, clusterService, nodeEnvironment.nodeId(), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeClientNode.java, +import java.util.Collection;, +    TribeClientNode(Settings settings, Collection<Class<? extends Plugin>> classpathPlugins) {, +        super(new Environment(settings), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeService.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collection;, +    public TribeService(Settings settings, ClusterService clusterService, final String tribeNodeId,, +                        Collection<Class<? extends Plugin>> classpathPlugins) {, +            nodes.add(new TribeClientNode(clientSettings, classpathPlugins));, +++ b/docs/reference/mapping/types/percolator.asciidoc, +query evaluates these queries, the fetches terms, shapes etc. as the were upon index time will be used. Important to note, +is that fetching of terms that these queries do, happens both each time the percolator query gets indexed on both primary, +and replica shards, so the terms that are actually indexed can be different between shard copies, if the source index, +changed while indexing., +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            final TribeService tribeService = new TribeService(settings, clusterService, nodeEnvironment.nodeId(), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeClientNode.java, +import java.util.Collection;, +    TribeClientNode(Settings settings, Collection<Class<? extends Plugin>> classpathPlugins) {, +        super(new Environment(settings), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeService.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collection;, +    public TribeService(Settings settings, ClusterService clusterService, final String tribeNodeId,, +                        Collection<Class<? extends Plugin>> classpathPlugins) {, +            nodes.add(new TribeClientNode(clientSettings, classpathPlugins));, +++ b/docs/reference/mapping/types/percolator.asciidoc, +query evaluates these queries, the fetches terms, shapes etc. as the were upon index time will be used. Important to note, +is that fetching of terms that these queries do, happens both each time the percolator query gets indexed on both primary, +and replica shards, so the terms that are actually indexed can be different between shard copies, if the source index, +changed while indexing., +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            final TribeService tribeService = new TribeService(settings, clusterService, nodeEnvironment.nodeId(), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeClientNode.java, +import java.util.Collection;, +    TribeClientNode(Settings settings, Collection<Class<? extends Plugin>> classpathPlugins) {, +        super(new Environment(settings), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeService.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collection;, +    public TribeService(Settings settings, ClusterService clusterService, final String tribeNodeId,, +                        Collection<Class<? extends Plugin>> classpathPlugins) {, +            nodes.add(new TribeClientNode(clientSettings, classpathPlugins));, +++ b/docs/reference/mapping/types/percolator.asciidoc, +query evaluates these queries, the fetches terms, shapes etc. as the were upon index time will be used. Important to note, +is that fetching of terms that these queries do, happens both each time the percolator query gets indexed on both primary, +and replica shards, so the terms that are actually indexed can be different between shard copies, if the source index, +changed while indexing., +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            final TribeService tribeService = new TribeService(settings, clusterService, nodeEnvironment.nodeId(), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeClientNode.java, +import java.util.Collection;, +    TribeClientNode(Settings settings, Collection<Class<? extends Plugin>> classpathPlugins) {, +        super(new Environment(settings), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeService.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collection;, +    public TribeService(Settings settings, ClusterService clusterService, final String tribeNodeId,, +                        Collection<Class<? extends Plugin>> classpathPlugins) {, +            nodes.add(new TribeClientNode(clientSettings, classpathPlugins));, +++ b/docs/reference/mapping/types/percolator.asciidoc, +query evaluates these queries, the fetches terms, shapes etc. as the were upon index time will be used. Important to note, +is that fetching of terms that these queries do, happens both each time the percolator query gets indexed on both primary, +and replica shards, so the terms that are actually indexed can be different between shard copies, if the source index, +changed while indexing., +++ /dev/null]