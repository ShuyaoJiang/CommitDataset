[+++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +            builder.field("term_vector", termVectorOptionsToString(fieldType));, +    protected static String termVectorOptionsToString(FieldType fieldType) {, +        if (!fieldType.storeTermVectors()) {, +            return "no";, +        } else if(!fieldType.storeTermVectorOffsets() && !fieldType.storeTermVectorPositions()) {, +            return "yes";, +        } else if (fieldType.storeTermVectorOffsets() && !fieldType.storeTermVectorPositions()) {, +            return "with_offsets";, +        } else {, +            StringBuilder builder = new StringBuilder("with");, +            if (fieldType.storeTermVectorPositions()) {, +                builder.append("_positions");, +            }, +            if (fieldType.storeTermVectorOffsets()) {, +                builder.append("_offsets");, +            }, +            if (fieldType.storeTermVectorPayloads()) {, +                builder.append("_payloads");, +            }, +            return builder.toString();, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +            builder.field("term_vector", termVectorOptionsToString(fieldType));, +    protected static String termVectorOptionsToString(FieldType fieldType) {, +        if (!fieldType.storeTermVectors()) {, +            return "no";, +        } else if(!fieldType.storeTermVectorOffsets() && !fieldType.storeTermVectorPositions()) {, +            return "yes";, +        } else if (fieldType.storeTermVectorOffsets() && !fieldType.storeTermVectorPositions()) {, +            return "with_offsets";, +        } else {, +            StringBuilder builder = new StringBuilder("with");, +            if (fieldType.storeTermVectorPositions()) {, +                builder.append("_positions");, +            }, +            if (fieldType.storeTermVectorOffsets()) {, +                builder.append("_offsets");, +            }, +            if (fieldType.storeTermVectorPayloads()) {, +                builder.append("_payloads");, +            }, +            return builder.toString();, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +        } else if ("with_positions_offsets_payloads".equals(termVector)) {, +            builder.storeTermVectorPositions(true);, +            builder.storeTermVectorOffsets(true);, +            builder.storeTermVectorPayloads(true);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +            builder.field("term_vector", termVectorOptionsToString(fieldType));, +    protected static String termVectorOptionsToString(FieldType fieldType) {, +        if (!fieldType.storeTermVectors()) {, +            return "no";, +        } else if(!fieldType.storeTermVectorOffsets() && !fieldType.storeTermVectorPositions()) {, +            return "yes";, +        } else if (fieldType.storeTermVectorOffsets() && !fieldType.storeTermVectorPositions()) {, +            return "with_offsets";, +        } else {, +            StringBuilder builder = new StringBuilder("with");, +            if (fieldType.storeTermVectorPositions()) {, +                builder.append("_positions");, +            }, +            if (fieldType.storeTermVectorOffsets()) {, +                builder.append("_offsets");, +            }, +            if (fieldType.storeTermVectorPayloads()) {, +                builder.append("_payloads");, +            }, +            return builder.toString();, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +        } else if ("with_positions_offsets_payloads".equals(termVector)) {, +            builder.storeTermVectorPositions(true);, +            builder.storeTermVectorOffsets(true);, +            builder.storeTermVectorPayloads(true);, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/string/SimpleStringMappingTests.java, +        assertThat(doc.rootDoc().getField("field").fieldType().storeTermVectors(), equalTo(false));, +        assertThat(doc.rootDoc().getField("field").fieldType().storeTermVectorOffsets(), equalTo(false));, +        assertThat(doc.rootDoc().getField("field").fieldType().storeTermVectorPositions(), equalTo(false));, +        assertThat(doc.rootDoc().getField("field").fieldType().storeTermVectorPayloads(), equalTo(false));, +        assertThat(doc.rootDoc().getField("field").fieldType().storeTermVectors(), equalTo(false));, +        assertThat(doc.rootDoc().getField("field").fieldType().storeTermVectorOffsets(), equalTo(false));, +        assertThat(doc.rootDoc().getField("field").fieldType().storeTermVectorPositions(), equalTo(false));, +        assertThat(doc.rootDoc().getField("field").fieldType().storeTermVectorPayloads(), equalTo(false));, +        assertThat(doc.rootDoc().getField("field").fieldType().storeTermVectors(), equalTo(false));, +        assertThat(doc.rootDoc().getField("field").fieldType().storeTermVectorOffsets(), equalTo(false));, +        assertThat(doc.rootDoc().getField("field").fieldType().storeTermVectorPositions(), equalTo(false));, +        assertThat(doc.rootDoc().getField("field").fieldType().storeTermVectorPayloads(), equalTo(false));, +, +    @Test, +    public void testTermVectors() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties")]