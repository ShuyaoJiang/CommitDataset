[+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/TestUtils.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.time.ZoneId;, +, +import static org.elasticsearch.test.ESTestCase.randomAlphaOfLength;, +import static org.elasticsearch.test.ESTestCase.randomFrom;, +import static org.elasticsearch.test.ESTestCase.randomIntBetween;, +import static org.elasticsearch.test.ESTestCase.randomNonNegativeLong;, +import static org.elasticsearch.test.ESTestCase.randomZone;, +, +, +    public static Configuration randomConfiguration() {, +        return new Configuration(randomZone(),, +                randomIntBetween(0,  1000),, +                new TimeValue(randomNonNegativeLong()),, +                new TimeValue(randomNonNegativeLong()),, +                null,, +                randomFrom(Mode.values()),, +                randomAlphaOfLength(10),, +                randomAlphaOfLength(10),, +                randomAlphaOfLength(10));, +    }, +, +    public static Configuration randomConfiguration(ZoneId providedZoneId) {, +        return new Configuration(providedZoneId,, +                randomIntBetween(0,  1000),, +                new TimeValue(randomNonNegativeLong()),, +                new TimeValue(randomNonNegativeLong()),, +                null,, +                randomFrom(Mode.values()),, +                randomAlphaOfLength(10),, +                randomAlphaOfLength(10),, +                randomAlphaOfLength(10));, +    }, +, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/TestUtils.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.time.ZoneId;, +, +import static org.elasticsearch.test.ESTestCase.randomAlphaOfLength;, +import static org.elasticsearch.test.ESTestCase.randomFrom;, +import static org.elasticsearch.test.ESTestCase.randomIntBetween;, +import static org.elasticsearch.test.ESTestCase.randomNonNegativeLong;, +import static org.elasticsearch.test.ESTestCase.randomZone;, +, +, +    public static Configuration randomConfiguration() {, +        return new Configuration(randomZone(),, +                randomIntBetween(0,  1000),, +                new TimeValue(randomNonNegativeLong()),, +                new TimeValue(randomNonNegativeLong()),, +                null,, +                randomFrom(Mode.values()),, +                randomAlphaOfLength(10),, +                randomAlphaOfLength(10),, +                randomAlphaOfLength(10));, +    }, +, +    public static Configuration randomConfiguration(ZoneId providedZoneId) {, +        return new Configuration(providedZoneId,, +                randomIntBetween(0,  1000),, +                new TimeValue(randomNonNegativeLong()),, +                new TimeValue(randomNonNegativeLong()),, +                null,, +                randomFrom(Mode.values()),, +                randomAlphaOfLength(10),, +                randomAlphaOfLength(10),, +                randomAlphaOfLength(10));, +    }, +, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistryTests.java, +import static org.elasticsearch.xpack.sql.TestUtils.randomConfiguration;, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/TestUtils.java, +import org.elasticsearch.common.unit.TimeValue;, +import java.time.ZoneId;, +, +import static org.elasticsearch.test.ESTestCase.randomAlphaOfLength;, +import static org.elasticsearch.test.ESTestCase.randomFrom;, +import static org.elasticsearch.test.ESTestCase.randomIntBetween;, +import static org.elasticsearch.test.ESTestCase.randomNonNegativeLong;, +import static org.elasticsearch.test.ESTestCase.randomZone;, +, +, +    public static Configuration randomConfiguration() {, +        return new Configuration(randomZone(),, +                randomIntBetween(0,  1000),, +                new TimeValue(randomNonNegativeLong()),, +                new TimeValue(randomNonNegativeLong()),, +                null,, +                randomFrom(Mode.values()),, +                randomAlphaOfLength(10),, +                randomAlphaOfLength(10),, +                randomAlphaOfLength(10));, +    }, +, +    public static Configuration randomConfiguration(ZoneId providedZoneId) {, +        return new Configuration(providedZoneId,, +                randomIntBetween(0,  1000),, +                new TimeValue(randomNonNegativeLong()),, +                new TimeValue(randomNonNegativeLong()),]