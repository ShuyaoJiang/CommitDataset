[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/main/java/org/elasticsearch/watcher/actions/index/IndexAction.java, +    final String index;, +    final String type;, +        final Payload response;, +        final String reason;, +++ b/pom.xml, +++ b/src/main/java/org/elasticsearch/watcher/actions/index/IndexAction.java, +    final String index;, +    final String type;, +        final Payload response;, +        final String reason;, +++ b/src/main/java/org/elasticsearch/watcher/actions/webhook/WebhookAction.java, +import org.elasticsearch.common.base.Charsets;, +import java.io.UnsupportedEncodingException;, +import java.net.URLEncoder;, +import java.util.*;, +    final HttpMethod method;, +    final Template url;, +    final @Nullable Template body;, +        Map<String, Object> urlSafeModel = new HashMap<>(model.size());, +, +        for (Map.Entry<String, Object> entry : model.entrySet()) {, +            urlSafeModel.put(entry.getKey(), makeURLSafe(entry.getValue()));, +        }, +, +        String urlText = url.render(urlSafeModel);, +        String bodyText = body != null ? body.render(model) : ""; //If body is null send an empty body, +                return builder.field(SUCCESS_FIELD.getPreferredName(), success()), +            public String reason() {, +                return reason;, +            }, +, +, +            Result result = (reason == null) ? new Result.Executed(httpStatus, url, body) : new Result.Failure(reason);, +    private Object makeURLSafe(Object toSafe) throws UnsupportedEncodingException {, +        if (toSafe instanceof List) {, +            List<Object> returnObject = new ArrayList<>(((List) toSafe).size());, +            for (Object o : (List)toSafe) {, +                returnObject.add(makeURLSafe(o));, +            }, +            return returnObject;, +        } else if (toSafe instanceof Map) {, +            Map<Object, Object> returnObject = new HashMap<>(((Map) toSafe).size());, +            for (Object key : ((Map) toSafe).keySet()) {, +                returnObject.put(key, makeURLSafe(((Map) toSafe).get(key)));, +            }, +            return returnObject;, +        } else if (toSafe instanceof String) {, +            return URLEncoder.encode(toSafe.toString(), Charsets.UTF_8.name());, +        } else {, +            //Don't know how to convert anything else, +            return toSafe;, +        }, +    }, +, +, +++ b/pom.xml, +++ b/src/main/java/org/elasticsearch/watcher/actions/index/IndexAction.java, +    final String index;, +    final String type;, +        final Payload response;, +        final String reason;, +++ b/src/main/java/org/elasticsearch/watcher/actions/webhook/WebhookAction.java, +import org.elasticsearch.common.base.Charsets;, +import java.io.UnsupportedEncodingException;, +import java.net.URLEncoder;, +import java.util.*;, +    final HttpMethod method;, +    final Template url;, +    final @Nullable Template body;, +        Map<String, Object> urlSafeModel = new HashMap<>(model.size());, +, +        for (Map.Entry<String, Object> entry : model.entrySet()) {, +            urlSafeModel.put(entry.getKey(), makeURLSafe(entry.getValue()));, +        }, +, +        String urlText = url.render(urlSafeModel);, +        String bodyText = body != null ? body.render(model) : ""; //If body is null send an empty body, +                return builder.field(SUCCESS_FIELD.getPreferredName(), success()), +            public String reason() {, +                return reason;, +            }, +, +, +            Result result = (reason == null) ? new Result.Executed(httpStatus, url, body) : new Result.Failure(reason);, +    private Object makeURLSafe(Object toSafe) throws UnsupportedEncodingException {, +        if (toSafe instanceof List) {, +            List<Object> returnObject = new ArrayList<>(((List) toSafe).size());, +            for (Object o : (List)toSafe) {, +                returnObject.add(makeURLSafe(o));, +            }, +            return returnObject;, +        } else if (toSafe instanceof Map) {, +            Map<Object, Object> returnObject = new HashMap<>(((Map) toSafe).size());, +            for (Object key : ((Map) toSafe).keySet()) {, +                returnObject.put(key, makeURLSafe(((Map) toSafe).get(key)));, +            }, +            return returnObject;]