[+++ b/build.gradle, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar', +, +++ b/build.gradle, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar', +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.Copy, +import org.gradle.api.tasks.Delete, +import org.gradle.api.tasks.Exec, +            File configFile = new File(node.homeDir, 'config/elasticsearch.yml'), +            copyConfig.doFirst {, +                // make sure the copy won't be a no-op or act on a directory, +            copyConfig.into(destConfigFile.canonicalFile.parentFile), +                      .from({ extraConfigFile.getValue() }) // wrap in closure to delay resolution to execution time, +            // we must add debug options inside the closure so the config is read at execution time, as, +            // gradle task options are not processed until the end of the configuration phase, +            if (node.config.debug) {, +                println 'Running elasticsearch in debug mode, suspending until connected on port 8000', +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +            }, +, +++ b/build.gradle, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar', +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.Copy, +import org.gradle.api.tasks.Delete, +import org.gradle.api.tasks.Exec, +            File configFile = new File(node.homeDir, 'config/elasticsearch.yml'), +            copyConfig.doFirst {, +                // make sure the copy won't be a no-op or act on a directory, +            copyConfig.into(destConfigFile.canonicalFile.parentFile), +                      .from({ extraConfigFile.getValue() }) // wrap in closure to delay resolution to execution time, +            // we must add debug options inside the closure so the config is read at execution time, as, +            // gradle task options are not processed until the end of the configuration phase, +            if (node.config.debug) {, +                println 'Running elasticsearch in debug mode, suspending until connected on port 8000', +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +            }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +                break;, +++ b/build.gradle, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar', +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.Copy, +import org.gradle.api.tasks.Delete, +import org.gradle.api.tasks.Exec, +            File configFile = new File(node.homeDir, 'config/elasticsearch.yml'), +            copyConfig.doFirst {, +                // make sure the copy won't be a no-op or act on a directory, +            copyConfig.into(destConfigFile.canonicalFile.parentFile), +                      .from({ extraConfigFile.getValue() }) // wrap in closure to delay resolution to execution time, +            // we must add debug options inside the closure so the config is read at execution time, as, +            // gradle task options are not processed until the end of the configuration phase, +            if (node.config.debug) {, +                println 'Running elasticsearch in debug mode, suspending until connected on port 8000', +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +            }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +                break;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNAKernel32Library.java, +++ b/build.gradle, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar', +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.Copy, +import org.gradle.api.tasks.Delete, +import org.gradle.api.tasks.Exec, +            File configFile = new File(node.homeDir, 'config/elasticsearch.yml'), +            copyConfig.doFirst {, +                // make sure the copy won't be a no-op or act on a directory, +            copyConfig.into(destConfigFile.canonicalFile.parentFile), +                      .from({ extraConfigFile.getValue() }) // wrap in closure to delay resolution to execution time, +            // we must add debug options inside the closure so the config is read at execution time, as, +            // gradle task options are not processed until the end of the configuration phase, +            if (node.config.debug) {, +                println 'Running elasticsearch in debug mode, suspending until connected on port 8000', +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +            }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +                break;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNAKernel32Library.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Seccomp.java, + * This is only supported on the Linux, Solaris, FreeBSD, OpenBSD, and Mac OS X operating systems., +                if (errno == ENOSYS) {, +++ b/build.gradle, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar', +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.tasks.Copy, +import org.gradle.api.tasks.Delete, +import org.gradle.api.tasks.Exec, +            File configFile = new File(node.homeDir, 'config/elasticsearch.yml'), +            copyConfig.doFirst {, +                // make sure the copy won't be a no-op or act on a directory]