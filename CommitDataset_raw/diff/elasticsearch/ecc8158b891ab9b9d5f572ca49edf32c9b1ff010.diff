[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica", t);, +                    failReplicaIfNeeded(request.internalShardId.getIndex(), request.internalShardId.id(), t);, +                logger.trace("primary shard [{}] is not yet active, scheduling a retry.", primary.shardId());, +                logger.trace("operation failed", failure);, +            logger.warn("unexpected error during the primary phase for action [{}]", failure, actionName);, +                logger.trace("operation succeeded");, +                logger.trace("operation completed on primary [{}]", primary);, +                    logger.trace("had an error while performing operation on primary ({}), scheduling a retry.", e.getMessage());, +                logger.trace("not enough active copies of shard [{}] to meet write consistency of [{}] (have {}, needed {}), scheduling a retry.",, +                        shard.shardId(), consistencyLevel, sizeActive, requiredNumber);, +    private void failReplicaIfNeeded(String index, int shardId, Throwable t) {, +        logger.trace("failure on replica [{}][{}]", t, index, shardId);, +                                logger.trace("[{}] transport failure during replica request [{}] ", exp, node, replicaRequest);, +                                failReplicaIfNeeded(shard.index(), shard.id(), e);, +                    failReplicaIfNeeded(shard.index(), shard.id(), e);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica", t);, +                    failReplicaIfNeeded(request.internalShardId.getIndex(), request.internalShardId.id(), t);, +                logger.trace("primary shard [{}] is not yet active, scheduling a retry.", primary.shardId());, +                logger.trace("operation failed", failure);, +            logger.warn("unexpected error during the primary phase for action [{}]", failure, actionName);, +                logger.trace("operation succeeded");, +                logger.trace("operation completed on primary [{}]", primary);, +                    logger.trace("had an error while performing operation on primary ({}), scheduling a retry.", e.getMessage());, +                logger.trace("not enough active copies of shard [{}] to meet write consistency of [{}] (have {}, needed {}), scheduling a retry.",, +                        shard.shardId(), consistencyLevel, sizeActive, requiredNumber);, +    private void failReplicaIfNeeded(String index, int shardId, Throwable t) {, +        logger.trace("failure on replica [{}][{}]", t, index, shardId);, +                                logger.trace("[{}] transport failure during replica request [{}] ", exp, node, replicaRequest);, +                                failReplicaIfNeeded(shard.index(), shard.id(), e);, +                    failReplicaIfNeeded(shard.index(), shard.id(), e);, +++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica", t);, +                    failReplicaIfNeeded(request.internalShardId.getIndex(), request.internalShardId.id(), t);, +                logger.trace("primary shard [{}] is not yet active, scheduling a retry.", primary.shardId());, +                logger.trace("operation failed", failure);, +            logger.warn("unexpected error during the primary phase for action [{}]", failure, actionName);, +                logger.trace("operation succeeded");, +                logger.trace("operation completed on primary [{}]", primary);, +                    logger.trace("had an error while performing operation on primary ({}), scheduling a retry.", e.getMessage());, +                logger.trace("not enough active copies of shard [{}] to meet write consistency of [{}] (have {}, needed {}), scheduling a retry.",, +                        shard.shardId(), consistencyLevel, sizeActive, requiredNumber);, +    private void failReplicaIfNeeded(String index, int shardId, Throwable t) {, +        logger.trace("failure on replica [{}][{}]", t, index, shardId);, +                                logger.trace("[{}] transport failure during replica request [{}] ", exp, node, replicaRequest);, +                                failReplicaIfNeeded(shard.index(), shard.id(), e);, +                    failReplicaIfNeeded(shard.index(), shard.id(), e);, +++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/AllocationId.java, +        builder.startObject("allocation_id");, +        builder.field("id", id);, +            builder.field("relocation_id", relocationId);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica", t);, +                    failReplicaIfNeeded(request.internalShardId.getIndex(), request.internalShardId.id(), t);, +                logger.trace("primary shard [{}] is not yet active, scheduling a retry.", primary.shardId());, +                logger.trace("operation failed", failure);, +            logger.warn("unexpected error during the primary phase for action [{}]", failure, actionName);, +                logger.trace("operation succeeded");, +                logger.trace("operation completed on primary [{}]", primary);, +                    logger.trace("had an error while performing operation on primary ({}), scheduling a retry.", e.getMessage());, +                logger.trace("not enough active copies of shard [{}] to meet write consistency of [{}] (have {}, needed {}), scheduling a retry.",, +                        shard.shardId(), consistencyLevel, sizeActive, requiredNumber);, +    private void failReplicaIfNeeded(String index, int shardId, Throwable t) {, +        logger.trace("failure on replica [{}][{}]", t, index, shardId);, +                                logger.trace("[{}] transport failure during replica request [{}] ", exp, node, replicaRequest);, +                                failReplicaIfNeeded(shard.index(), shard.id(), e);, +                    failReplicaIfNeeded(shard.index(), shard.id(), e);, +++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/AllocationId.java, +        builder.startObject("allocation_id");, +        builder.field("id", id);, +            builder.field("relocation_id", relocationId);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java, +    private volatile long minDelaySettingAtLastScheduling = Long.MAX_VALUE;, +            long minDelaySetting = UnassignedInfo.findSmallestDelayedAllocationSetting(settings, event.state());, +                logger.trace("no need to schedule reroute - no delayed unassigned shards, minDelaySetting [{}], scheduled [{}]", minDelaySetting, minDelaySettingAtLastScheduling);, +                minDelaySettingAtLastScheduling = Long.MAX_VALUE;, +            } else if (minDelaySetting < minDelaySettingAtLastScheduling) {, +                minDelaySettingAtLastScheduling = minDelaySetting;, +                        minDelaySettingAtLastScheduling = Long.MAX_VALUE;, +                        minDelaySettingAtLastScheduling = Long.MAX_VALUE;, +                logger.trace("no need to schedule reroute - current schedule reroute is enough. minDelaySetting [{}], scheduled [{}]", minDelaySetting, minDelaySettingAtLastScheduling);, +    long getMinDelaySettingAtLastScheduling() {, +        return this.minDelaySettingAtLastScheduling;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica", t);, +                    failReplicaIfNeeded(request.internalShardId.getIndex(), request.internalShardId.id(), t);, +                logger.trace("primary shard [{}] is not yet active, scheduling a retry.", primary.shardId());, +                logger.trace("operation failed", failure);, +            logger.warn("unexpected error during the primary phase for action [{}]", failure, actionName);, +                logger.trace("operation succeeded");, +                logger.trace("operation completed on primary [{}]", primary);, +                    logger.trace("had an error while performing operation on primary ({}), scheduling a retry.", e.getMessage());, +                logger.trace("not enough active copies of shard [{}] to meet write consistency of [{}] (have {}, needed {}), scheduling a retry.",, +                        shard.shardId(), consistencyLevel, sizeActive, requiredNumber);, +    private void failReplicaIfNeeded(String index, int shardId, Throwable t) {, +        logger.trace("failure on replica [{}][{}]", t, index, shardId);]