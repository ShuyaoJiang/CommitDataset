[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilter.name);, +                        if (tokenFilterFactories[i] == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactory = analysisService.tokenizer(tokenizer.name);, +                if (tokenizerFactory == null) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilter.name);, +                        if (tokenFilterFactories[i] == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactory = analysisService.tokenizer(tokenizer.name);, +                if (tokenizerFactory == null) {, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +    @FunctionalInterface, +    private static final class ThreadContextStruct {, +    private class ContextPreservingRunnable implements Runnable {, +        private ContextPreservingRunnable(Runnable in) {, +    private class ContextPreservingAbstractRunnable extends AbstractRunnable {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilter.name);, +                        if (tokenFilterFactories[i] == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactory = analysisService.tokenizer(tokenizer.name);, +                if (tokenizerFactory == null) {, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +    @FunctionalInterface, +    private static final class ThreadContextStruct {, +    private class ContextPreservingRunnable implements Runnable {, +        private ContextPreservingRunnable(Runnable in) {, +    private class ContextPreservingAbstractRunnable extends AbstractRunnable {, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java, +        final Map<String, Settings> charFiltersSettings = indexSettings.getSettings().getGroups("index.analysis.char_filter");, +        final Map<String, Settings> tokenFiltersSettings = indexSettings.getSettings().getGroups("index.analysis.filter");, +        final Map<String, Settings> tokenizersSettings = indexSettings.getSettings().getGroups("index.analysis.tokenizer");, +        tokenFilters.put("synonym", requriesAnalysisSettings((is, env, name, settings) -> new SynonymTokenFilterFactory(is, env, tokenizerFactories, name, settings)));, +                if (typeName == null) {, +                    throw new IllegalArgumentException(toBuild + " [" + name + "] must specify either an analyzer type, or a tokenizer");, +                }, +                AnalysisModule.AnalysisProvider<T> type = providerMap.get(typeName);, +                if (type == null) {, +                    throw new IllegalArgumentException("Unknown " + toBuild + " type [" + typeName + "] for [" + name + "]");, +                }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilter.name);, +                        if (tokenFilterFactories[i] == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactory = analysisService.tokenizer(tokenizer.name);, +                if (tokenizerFactory == null) {, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +    @FunctionalInterface, +    private static final class ThreadContextStruct {, +    private class ContextPreservingRunnable implements Runnable {, +        private ContextPreservingRunnable(Runnable in) {, +    private class ContextPreservingAbstractRunnable extends AbstractRunnable {, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java, +        final Map<String, Settings> charFiltersSettings = indexSettings.getSettings().getGroups("index.analysis.char_filter");, +        final Map<String, Settings> tokenFiltersSettings = indexSettings.getSettings().getGroups("index.analysis.filter");, +        final Map<String, Settings> tokenizersSettings = indexSettings.getSettings().getGroups("index.analysis.tokenizer");, +        tokenFilters.put("synonym", requriesAnalysisSettings((is, env, name, settings) -> new SynonymTokenFilterFactory(is, env, tokenizerFactories, name, settings)));, +                if (typeName == null) {, +                    throw new IllegalArgumentException(toBuild + " [" + name + "] must specify either an analyzer type, or a tokenizer");, +                }, +                AnalysisModule.AnalysisProvider<T> type = providerMap.get(typeName);, +                if (type == null) {, +                    throw new IllegalArgumentException("Unknown " + toBuild + " type [" + typeName + "] for [" + name + "]");, +                }, +++ b/core/src/main/java/org/elasticsearch/index/analysis/SynonymTokenFilterFactory.java, +import java.util.Map;, +    public SynonymTokenFilterFactory(IndexSettings indexSettings, Environment env, Map<String, TokenizerFactory> tokenizerFactories,, +        final TokenizerFactory tokenizerFactory = tokenizerFactories.get(tokenizerName);, +        if (tokenizerFactory == null) {]