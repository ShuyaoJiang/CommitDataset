[+++ b/.idea/dictionaries/kimchy.xml, +      <w>lstag</w>, +      <w>ltag</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>lstag</w>, +      <w>ltag</w>, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/facet/terms/TermsFacetSearchBenchmark.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.benchmark.search.facet.terms;, +, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.client.action.bulk.BulkRequestBuilder;, +import org.elasticsearch.common.StopWatch;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.SizeValue;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.node.Node;, +, +import java.io.IOException;, +, +import static org.elasticsearch.client.Requests.*;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.*;, +import static org.elasticsearch.common.settings.ImmutableSettings.*;, +import static org.elasticsearch.common.xcontent.XContentFactory.*;, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +import static org.elasticsearch.node.NodeBuilder.*;, +import static org.elasticsearch.search.facet.FacetBuilders.*;, +, +/**, + * @author kimchy (shay.banon), + */, +public class TermsFacetSearchBenchmark {, +, +    public static void main(String[] args) throws Exception {, +        Settings settings = settingsBuilder(), +                .put("index.engine.robin.refreshInterval", "-1"), +                .put("gateway.type", "local"), +                .put(SETTING_NUMBER_OF_SHARDS, 2), +                .put(SETTING_NUMBER_OF_REPLICAS, 1), +                .build();, +, +        Node node1 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "node1")).node();, +        Node node2 = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "node2")).node();, +, +        Node clientNode = nodeBuilder().settings(settingsBuilder().put(settings).put("name", "client")).client(true).node();, +, +        Client client = clientNode.client();, +, +        long COUNT = SizeValue.parseSizeValue("1m").singles();, +        int BATCH = 100;, +        int QUERY_WARMUP = 20;, +        int QUERY_COUNT = 200;, +        int NUMBER_OF_TERMS = 10;, +, +        long[] lValues = new long[NUMBER_OF_TERMS];, +        for (int i = 0; i < NUMBER_OF_TERMS; i++) {, +            lValues[i] = i;, +        }, +        String[] sValues = new String[NUMBER_OF_TERMS];, +        for (int i = 0; i < NUMBER_OF_TERMS; i++) {, +            sValues[i] = Integer.toString(i);, +        }, +, +        Thread.sleep(10000);, +        try {, +            client.admin().indices().create(createIndexRequest("test")).actionGet();, +, +            StopWatch stopWatch = new StopWatch().start();, +, +            System.out.println("--> Indexing [" + COUNT + "] ...");, +            long ITERS = COUNT / BATCH;, +            long i = 1;, +            int counter = 0;, +            for (; i <= ITERS; i++) {, +                BulkRequestBuilder request = client.prepareBulk();, +                for (int j = 0; j < BATCH; j++) {, +                    counter++;, +                    request.add(Requests.indexRequest("test").type("type1").id(Integer.toString(counter))]