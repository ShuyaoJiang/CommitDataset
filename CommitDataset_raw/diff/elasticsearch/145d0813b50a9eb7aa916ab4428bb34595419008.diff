[+++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +        if (nodeJoinController == null) {, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +        if (nodeJoinController == null) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +            Set<String> blobKeys = blobs.keySet();, +            for (String name : blobKeys) {, +            } else if (blobKeys.isEmpty() == false) {, +                logger.debug("Could not find a readable index-N file in a non-empty shard snapshot directory [{}]", blobContainer.path());, +            for (String name : blobKeys) {, +                        snapshot = indexShardSnapshotFormat.readBlob(blobContainer, name);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +        if (nodeJoinController == null) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +            Set<String> blobKeys = blobs.keySet();, +            for (String name : blobKeys) {, +            } else if (blobKeys.isEmpty() == false) {, +                logger.debug("Could not find a readable index-N file in a non-empty shard snapshot directory [{}]", blobContainer.path());, +            for (String name : blobKeys) {, +                        snapshot = indexShardSnapshotFormat.readBlob(blobContainer, name);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +                } catch (ScriptException e) {, +                    try (XContentBuilder builder = JsonXContent.contentBuilder()) {, +                        builder.prettyPrint();, +                        builder.startObject();, +                        ElasticsearchException.toXContent(builder, ToXContent.EMPTY_PARAMS, e);, +                        builder.endObject();, +                        logger.warn("failed to load/compile script [{}]: {}", scriptNameExt.v1(), builder.string());, +                    } catch (IOException ioe) {, +                        ioe.addSuppressed(e);, +                        logger.warn((Supplier<?>) () -> new ParameterizedMessage(, +                                "failed to log an appropriate warning after failing to load/compile script [{}]", scriptNameExt.v1()), ioe);, +                    }, +                    /* Log at the whole exception at the debug level as well just in case the stack trace is important. That way you can, +                     * turn on the stack trace if you need it. */, +                    logger.debug((Supplier<?>) () -> new ParameterizedMessage("failed to load/compile script [{}]. full exception:",, +                            scriptNameExt.v1()), e);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +        if (nodeJoinController == null) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +            Set<String> blobKeys = blobs.keySet();, +            for (String name : blobKeys) {, +            } else if (blobKeys.isEmpty() == false) {, +                logger.debug("Could not find a readable index-N file in a non-empty shard snapshot directory [{}]", blobContainer.path());, +            for (String name : blobKeys) {, +                        snapshot = indexShardSnapshotFormat.readBlob(blobContainer, name);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +                } catch (ScriptException e) {, +                    try (XContentBuilder builder = JsonXContent.contentBuilder()) {, +                        builder.prettyPrint();, +                        builder.startObject();, +                        ElasticsearchException.toXContent(builder, ToXContent.EMPTY_PARAMS, e);, +                        builder.endObject();, +                        logger.warn("failed to load/compile script [{}]: {}", scriptNameExt.v1(), builder.string());, +                    } catch (IOException ioe) {, +                        ioe.addSuppressed(e);, +                        logger.warn((Supplier<?>) () -> new ParameterizedMessage(, +                                "failed to log an appropriate warning after failing to load/compile script [{}]", scriptNameExt.v1()), ioe);, +                    }, +                    /* Log at the whole exception at the debug level as well just in case the stack trace is important. That way you can, +                     * turn on the stack trace if you need it. */, +                    logger.debug((Supplier<?>) () -> new ParameterizedMessage("failed to load/compile script [{}]. full exception:",, +                            scriptNameExt.v1()), e);, +++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +        if (nodeJoinController == null) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +            Set<String> blobKeys = blobs.keySet();, +            for (String name : blobKeys) {, +            } else if (blobKeys.isEmpty() == false) {, +                logger.debug("Could not find a readable index-N file in a non-empty shard snapshot directory [{}]", blobContainer.path());, +            for (String name : blobKeys) {, +                        snapshot = indexShardSnapshotFormat.readBlob(blobContainer, name);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +                } catch (ScriptException e) {, +                    try (XContentBuilder builder = JsonXContent.contentBuilder()) {, +                        builder.prettyPrint();, +                        builder.startObject();, +                        ElasticsearchException.toXContent(builder, ToXContent.EMPTY_PARAMS, e);, +                        builder.endObject();, +                        logger.warn("failed to load/compile script [{}]: {}", scriptNameExt.v1(), builder.string());, +                    } catch (IOException ioe) {, +                        ioe.addSuppressed(e);, +                        logger.warn((Supplier<?>) () -> new ParameterizedMessage(, +                                "failed to log an appropriate warning after failing to load/compile script [{}]", scriptNameExt.v1()), ioe);, +                    }, +                    /* Log at the whole exception at the debug level as well just in case the stack trace is important. That way you can, +                     * turn on the stack trace if you need it. */]