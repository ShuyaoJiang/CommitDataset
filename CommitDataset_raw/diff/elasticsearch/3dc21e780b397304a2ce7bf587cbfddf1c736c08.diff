[+++ b/core/src/main/java/org/elasticsearch/index/SearchSlowLog.java, +    private final Index index;, +        this.index = indexSettings.getIndex();, +, +            queryLogger.warn("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            queryLogger.info("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            queryLogger.debug("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            queryLogger.trace("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            fetchLogger.warn("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            fetchLogger.info("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            fetchLogger.debug("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            fetchLogger.trace("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +    static final class SlowLogSearchContextPrinter {, +        private final Index index;, +        public SlowLogSearchContextPrinter(Index index, SearchContext context, long tookInNanos, boolean reformat) {, +            this.index = index;, +            sb.append(index).append(" ");, +++ b/core/src/main/java/org/elasticsearch/index/SearchSlowLog.java, +    private final Index index;, +        this.index = indexSettings.getIndex();, +, +            queryLogger.warn("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            queryLogger.info("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            queryLogger.debug("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            queryLogger.trace("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            fetchLogger.warn("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            fetchLogger.info("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            fetchLogger.debug("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +            fetchLogger.trace("{}", new SlowLogSearchContextPrinter(index, context, tookInNanos, reformat));, +    static final class SlowLogSearchContextPrinter {, +        private final Index index;, +        public SlowLogSearchContextPrinter(Index index, SearchContext context, long tookInNanos, boolean reformat) {, +            this.index = index;, +            sb.append(index).append(" ");, +++ b/core/src/test/java/org/elasticsearch/index/SearchSlowLogTests.java, +import org.elasticsearch.action.search.SearchType;, +import org.elasticsearch.cache.recycler.PageCacheRecycler;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.util.BigArrays;, +import org.elasticsearch.index.query.QueryShardContext;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.script.Template;, +import org.elasticsearch.search.Scroll;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.search.internal.SearchContext;, +import org.elasticsearch.search.internal.ShardSearchRequest;, +import org.elasticsearch.test.ESSingleNodeTestCase;, +import org.elasticsearch.test.TestSearchContext;, +import org.elasticsearch.threadpool.ThreadPool;, +, +import java.io.IOException;, +, +import static org.hamcrest.Matchers.startsWith;, +public class SearchSlowLogTests extends ESSingleNodeTestCase {, +    @Override, +    protected SearchContext createSearchContext(IndexService indexService) {, +        BigArrays bigArrays = indexService.getBigArrays();, +        ThreadPool threadPool = indexService.getThreadPool();, +        PageCacheRecycler pageCacheRecycler = node().injector().getInstance(PageCacheRecycler.class);, +        ScriptService scriptService = node().injector().getInstance(ScriptService.class);, +        return new TestSearchContext(threadPool, pageCacheRecycler, bigArrays, scriptService, indexService) {, +            @Override, +            public ShardSearchRequest request() {, +                return new ShardSearchRequest() {, +                    @Override, +                    public ShardId shardId() {, +                        return null;, +                    }, +, +                    @Override, +                    public String[] types() {, +                        return new String[0];, +                    }, +, +                    @Override, +                    public SearchSourceBuilder source() {, +                        return null;, +                    }, +, +                    @Override, +                    public void source(SearchSourceBuilder source) {, +, +                    }, +, +                    @Override, +                    public int numberOfShards() {, +                        return 0;, +                    }, +, +                    @Override, +                    public SearchType searchType() {, +                        return null;, +                    }, +, +                    @Override, +                    public String[] filteringAliases() {, +                        return new String[0];, +                    }, +]