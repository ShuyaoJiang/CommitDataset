[+++ b/core/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +import java.util.HashSet;, + * Utilities for network interfaces / addresses binding and publishing., + * Its only intended for that purpose, not general purpose usage!!!!, +    static void sortAddresses(List<InetAddress> list) {, +    static InetAddress[] getLoopbackAddresses() throws SocketException {, +    static InetAddress[] getFirstNonLoopbackAddresses() throws SocketException {, +    static InetAddress[] getAddressesForInterface(String name) throws SocketException {, +    static InetAddress[] getAllByName(String host) throws UnknownHostException {, +        // deduplicate, in case of resolver misconfiguration, +        // stuff like https://bugzilla.redhat.com/show_bug.cgi?id=496300, +        List<InetAddress> unique = new ArrayList<>(new HashSet<>(Arrays.asList(addresses)));, +        sortAddresses(unique);, +        return unique.toArray(new InetAddress[unique.size()]);, +    static InetAddress[] filterIPV4(InetAddress addresses[]) {, +    static InetAddress[] filterIPV6(InetAddress addresses[]) {, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +import java.util.HashSet;, + * Utilities for network interfaces / addresses binding and publishing., + * Its only intended for that purpose, not general purpose usage!!!!, +    static void sortAddresses(List<InetAddress> list) {, +    static InetAddress[] getLoopbackAddresses() throws SocketException {, +    static InetAddress[] getFirstNonLoopbackAddresses() throws SocketException {, +    static InetAddress[] getAddressesForInterface(String name) throws SocketException {, +    static InetAddress[] getAllByName(String host) throws UnknownHostException {, +        // deduplicate, in case of resolver misconfiguration, +        // stuff like https://bugzilla.redhat.com/show_bug.cgi?id=496300, +        List<InetAddress> unique = new ArrayList<>(new HashSet<>(Arrays.asList(addresses)));, +        sortAddresses(unique);, +        return unique.toArray(new InetAddress[unique.size()]);, +    static InetAddress[] filterIPV4(InetAddress addresses[]) {, +    static InetAddress[] filterIPV6(InetAddress addresses[]) {, +++ b/core/src/main/java/org/elasticsearch/repositories/uri/URLRepository.java, +                // We didn't match white list - try to resolve against path.repo, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +import java.util.HashSet;, + * Utilities for network interfaces / addresses binding and publishing., + * Its only intended for that purpose, not general purpose usage!!!!, +    static void sortAddresses(List<InetAddress> list) {, +    static InetAddress[] getLoopbackAddresses() throws SocketException {, +    static InetAddress[] getFirstNonLoopbackAddresses() throws SocketException {, +    static InetAddress[] getAddressesForInterface(String name) throws SocketException {, +    static InetAddress[] getAllByName(String host) throws UnknownHostException {, +        // deduplicate, in case of resolver misconfiguration, +        // stuff like https://bugzilla.redhat.com/show_bug.cgi?id=496300, +        List<InetAddress> unique = new ArrayList<>(new HashSet<>(Arrays.asList(addresses)));, +        sortAddresses(unique);, +        return unique.toArray(new InetAddress[unique.size()]);, +    static InetAddress[] filterIPV4(InetAddress addresses[]) {, +    static InetAddress[] filterIPV6(InetAddress addresses[]) {, +++ b/core/src/main/java/org/elasticsearch/repositories/uri/URLRepository.java, +                // We didn't match white list - try to resolve against path.repo, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +        context.searcher().setAggregatedDfs(request.dfs());, +        context.searcher().setAggregatedDfs(request.dfs());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +import java.util.HashSet;, + * Utilities for network interfaces / addresses binding and publishing., + * Its only intended for that purpose, not general purpose usage!!!!, +    static void sortAddresses(List<InetAddress> list) {, +    static InetAddress[] getLoopbackAddresses() throws SocketException {, +    static InetAddress[] getFirstNonLoopbackAddresses() throws SocketException {, +    static InetAddress[] getAddressesForInterface(String name) throws SocketException {, +    static InetAddress[] getAllByName(String host) throws UnknownHostException {, +        // deduplicate, in case of resolver misconfiguration, +        // stuff like https://bugzilla.redhat.com/show_bug.cgi?id=496300, +        List<InetAddress> unique = new ArrayList<>(new HashSet<>(Arrays.asList(addresses)));, +        sortAddresses(unique);, +        return unique.toArray(new InetAddress[unique.size()]);, +    static InetAddress[] filterIPV4(InetAddress addresses[]) {, +    static InetAddress[] filterIPV6(InetAddress addresses[]) {, +++ b/core/src/main/java/org/elasticsearch/repositories/uri/URLRepository.java, +                // We didn't match white list - try to resolve against path.repo, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +        context.searcher().setAggregatedDfs(request.dfs());, +        context.searcher().setAggregatedDfs(request.dfs());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueFormat.java, +            return new DateTime(format, new ValueFormatter.DateTime(format, timezone), new ValueParser.DateMath(format, timezone));, +            return new DateTime(fieldType.dateTimeFormatter().format(), ValueFormatter.DateTime.mapper(fieldType, timezone), ValueParser.DateMath.mapper(fieldType, timezone));, +        private DateTime(String pattern, ValueFormatter formatter, ValueParser parser) {, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +import java.util.HashSet;, + * Utilities for network interfaces / addresses binding and publishing., + * Its only intended for that purpose, not general purpose usage!!!!, +    static void sortAddresses(List<InetAddress> list) {, +    static InetAddress[] getLoopbackAddresses() throws SocketException {, +    static InetAddress[] getFirstNonLoopbackAddresses() throws SocketException {, +    static InetAddress[] getAddressesForInterface(String name) throws SocketException {, +    static InetAddress[] getAllByName(String host) throws UnknownHostException {, +        // deduplicate, in case of resolver misconfiguration, +        // stuff like https://bugzilla.redhat.com/show_bug.cgi?id=496300, +        List<InetAddress> unique = new ArrayList<>(new HashSet<>(Arrays.asList(addresses)));, +        sortAddresses(unique);, +        return unique.toArray(new InetAddress[unique.size()]);, +    static InetAddress[] filterIPV4(InetAddress addresses[]) {, +    static InetAddress[] filterIPV6(InetAddress addresses[]) {, +++ b/core/src/main/java/org/elasticsearch/repositories/uri/URLRepository.java, +                // We didn't match white list - try to resolve against path.repo, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +        context.searcher().setAggregatedDfs(request.dfs());]