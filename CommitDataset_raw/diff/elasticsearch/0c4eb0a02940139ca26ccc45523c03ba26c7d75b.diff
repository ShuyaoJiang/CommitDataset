[+++ b/core/src/main/java/org/elasticsearch/index/mapper/RangeFieldMapper.java, +import org.apache.lucene.document.InetAddressPoint;, +import org.apache.lucene.document.InetAddressRange;, +import org.elasticsearch.common.network.InetAddresses;, +import java.net.InetAddress;, +                Object from = rangeType.minValue();, +                Object to = rangeType.maxValue();, +        IP("ip_range") {, +            @Override, +            public Field getRangeField(String name, Range r) {, +                return new InetAddressRange(name, (InetAddress)r.from, (InetAddress)r.to);, +            }, +            @Override, +            public InetAddress parseFrom(RangeFieldType fieldType, XContentParser parser, boolean coerce, boolean included), +                    throws IOException {, +                InetAddress address = InetAddresses.forString(parser.text());, +                return included ? address : nextUp(address);, +            }, +            @Override, +            public InetAddress parseTo(RangeFieldType fieldType, XContentParser parser, boolean coerce, boolean included), +                    throws IOException {, +                InetAddress address = InetAddresses.forString(parser.text());, +                return included ? address : nextDown(address);, +            }, +            @Override, +            public InetAddress parse(Object value, boolean coerce) {, +                return value instanceof InetAddress ? (InetAddress) value : InetAddresses.forString((String) value);, +            }, +            @Override, +            public InetAddress minValue() {, +                return InetAddressPoint.MIN_VALUE;, +            }, +            @Override, +            public InetAddress maxValue() {, +                return InetAddressPoint.MAX_VALUE;, +            }, +            @Override, +            public InetAddress nextUp(Object value) {, +                return InetAddressPoint.nextUp((InetAddress)value);, +            }, +            @Override, +            public InetAddress nextDown(Object value) {, +                return InetAddressPoint.nextDown((InetAddress)value);, +            }, +            @Override, +            public Query withinQuery(String field, Object from, Object to, boolean includeLower, boolean includeUpper) {, +                InetAddress lower = (InetAddress)from;, +                InetAddress upper = (InetAddress)to;, +                return InetAddressRange.newWithinQuery(field,, +                    includeLower ? lower : nextUp(lower), includeUpper ? upper : nextDown(upper));, +            }, +            @Override, +            public Query containsQuery(String field, Object from, Object to, boolean includeLower, boolean includeUpper) {, +                InetAddress lower = (InetAddress)from;, +                InetAddress upper = (InetAddress)to;, +                return InetAddressRange.newContainsQuery(field,, +                    includeLower ? lower : nextUp(lower), includeUpper ? upper : nextDown(upper));, +            }, +            @Override, +            public Query intersectsQuery(String field, Object from, Object to, boolean includeLower, boolean includeUpper) {, +                InetAddress lower = (InetAddress)from;, +                InetAddress upper = (InetAddress)to;, +                return InetAddressRange.newIntersectsQuery(field,, +                    includeLower ? lower : nextUp(lower), includeUpper ? upper : nextDown(upper));, +            }, +            public String toString(InetAddress address) {, +                return InetAddresses.toAddrString(address);, +            }, +        },, +                return new LongRange(name, new long[] {((Number)r.from).longValue()}, new long[] {((Number)r.to).longValue()});, +            public Long nextUp(Object value) {, +                return (long) LONG.nextUp(value);, +            public Long nextDown(Object value) {, +                return (long) LONG.nextDown(value);, +            public Query withinQuery(String field, Object from, Object to, boolean includeLower, boolean includeUpper) {, +            public Query containsQuery(String field, Object from, Object to, boolean includeLower, boolean includeUpper) {, +            public Query intersectsQuery(String field, Object from, Object to, boolean includeLower, boolean includeUpper) {, +            public Float nextUp(Object value) {, +                return Math.nextUp(((Number)value).floatValue());, +            public Float nextDown(Object value) {, +                return Math.nextDown(((Number)value).floatValue());, +                return new FloatRange(name, new float[] {((Number)r.from).floatValue()}, new float[] {((Number)r.to).floatValue()});, +            public Query withinQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo) {, +            public Query containsQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo) {, +            public Query intersectsQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo) {, +            public Double nextUp(Object value) {, +                return Math.nextUp(((Number)value).doubleValue());, +            public Double nextDown(Object value) {, +                return Math.nextDown(((Number)value).doubleValue());, +                return new DoubleRange(name, new double[] {((Number)r.from).doubleValue()}, new double[] {((Number)r.to).doubleValue()});, +            public Query withinQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo) {, +            public Query containsQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo) {, +            public Query intersectsQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo) {, +            public Integer nextUp(Object value) {, +                return ((Number)value).intValue() + 1;, +            public Integer nextDown(Object value) {, +                return ((Number)value).intValue() - 1;, +                return new IntRange(name, new int[] {((Number)r.from).intValue()}, new int[] {((Number)r.to).intValue()});, +            public Query withinQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo) {, +            public Query containsQuery(String field, Object from, Object to, boolean includeFrom, boolean includeTo) {]