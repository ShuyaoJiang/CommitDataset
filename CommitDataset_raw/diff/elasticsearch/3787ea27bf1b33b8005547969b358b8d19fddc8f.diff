[+++ b/.gitignore, +/logs/, +++ b/.gitignore, +/logs/, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +    void validateAliasStandalone(String alias, String indexRouting) {, +        MetaDataCreateIndexService.validateIndexOrAliasName(alias, InvalidAliasNameException::new);, +++ b/.gitignore, +/logs/, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +    void validateAliasStandalone(String alias, String indexRouting) {, +        MetaDataCreateIndexService.validateIndexOrAliasName(alias, InvalidAliasNameException::new);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.util.function.BiFunction;, +    /**, +     * Validate the name for an index against some static rules and a cluster state., +     */, +        validateIndexOrAliasName(index, InvalidIndexNameException::new);, +        if (!index.toLowerCase(Locale.ROOT).equals(index)) {, +            throw new InvalidIndexNameException(index, "must be lowercase");, +        }, +        if (state.metaData().hasAlias(index)) {, +            throw new InvalidIndexNameException(index, "already exists as alias");, +        }, +    }, +, +    /**, +     * Validate the name for an index or alias against some static rules., +     */, +    public static void validateIndexOrAliasName(String index, BiFunction<String, String, ? extends RuntimeException> exceptionCtor) {, +            throw exceptionCtor.apply(index, "must not contain the following characters " + Strings.INVALID_FILENAME_CHARS);, +            throw exceptionCtor.apply(index, "must not contain '#'");, +            throw exceptionCtor.apply(index, "must not start with '_', '-', or '+'");, +            throw exceptionCtor.apply(index, "index name is too long, (" + byteCount + " > " + MAX_INDEX_NAME_BYTES + ")");, +            throw exceptionCtor.apply(index, "must not be '.' or '..'");, +++ b/.gitignore, +/logs/, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +    void validateAliasStandalone(String alias, String indexRouting) {, +        MetaDataCreateIndexService.validateIndexOrAliasName(alias, InvalidAliasNameException::new);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.util.function.BiFunction;, +    /**, +     * Validate the name for an index against some static rules and a cluster state., +     */, +        validateIndexOrAliasName(index, InvalidIndexNameException::new);, +        if (!index.toLowerCase(Locale.ROOT).equals(index)) {, +            throw new InvalidIndexNameException(index, "must be lowercase");, +        }, +        if (state.metaData().hasAlias(index)) {, +            throw new InvalidIndexNameException(index, "already exists as alias");, +        }, +    }, +, +    /**, +     * Validate the name for an index or alias against some static rules., +     */, +    public static void validateIndexOrAliasName(String index, BiFunction<String, String, ? extends RuntimeException> exceptionCtor) {, +            throw exceptionCtor.apply(index, "must not contain the following characters " + Strings.INVALID_FILENAME_CHARS);, +            throw exceptionCtor.apply(index, "must not contain '#'");, +            throw exceptionCtor.apply(index, "must not start with '_', '-', or '+'");, +            throw exceptionCtor.apply(index, "index name is too long, (" + byteCount + " > " + MAX_INDEX_NAME_BYTES + ")");, +            throw exceptionCtor.apply(index, "must not be '.' or '..'");, +++ b/core/src/main/java/org/elasticsearch/indices/InvalidAliasNameException.java, +    public InvalidAliasNameException(String name, String description) {, +        super("Invalid alias name [{}]: {}", name, description);, +    }, +, +++ b/.gitignore, +/logs/, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +    void validateAliasStandalone(String alias, String indexRouting) {, +        MetaDataCreateIndexService.validateIndexOrAliasName(alias, InvalidAliasNameException::new);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.util.function.BiFunction;, +    /**, +     * Validate the name for an index against some static rules and a cluster state., +     */, +        validateIndexOrAliasName(index, InvalidIndexNameException::new);, +        if (!index.toLowerCase(Locale.ROOT).equals(index)) {, +            throw new InvalidIndexNameException(index, "must be lowercase");, +        }, +        if (state.metaData().hasAlias(index)) {, +            throw new InvalidIndexNameException(index, "already exists as alias");, +        }, +    }, +, +    /**, +     * Validate the name for an index or alias against some static rules., +     */, +    public static void validateIndexOrAliasName(String index, BiFunction<String, String, ? extends RuntimeException> exceptionCtor) {, +            throw exceptionCtor.apply(index, "must not contain the following characters " + Strings.INVALID_FILENAME_CHARS);, +            throw exceptionCtor.apply(index, "must not contain '#'");, +            throw exceptionCtor.apply(index, "must not start with '_', '-', or '+'");, +            throw exceptionCtor.apply(index, "index name is too long, (" + byteCount + " > " + MAX_INDEX_NAME_BYTES + ")");, +            throw exceptionCtor.apply(index, "must not be '.' or '..'");, +++ b/core/src/main/java/org/elasticsearch/indices/InvalidAliasNameException.java, +    public InvalidAliasNameException(String name, String description) {, +        super("Invalid alias name [{}]: {}", name, description);, +    }]