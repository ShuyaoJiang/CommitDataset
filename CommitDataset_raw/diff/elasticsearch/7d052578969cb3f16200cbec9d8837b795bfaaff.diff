[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/RealmConfig.java, +    private final Settings settings;, +    public RealmConfig(RealmIdentifier identifier, Settings settings, Environment env, ThreadContext threadContext) {, +        this.settings = settings;, +        this.enabled = getSetting(RealmSettings.ENABLED_SETTING);, +        this.order = getSetting(RealmSettings.ORDER_SETTING);, +    /**, +     * @return The settings for the current node., +     * This will include the settings for this realm (as well as other realms, and other non-security settings)., +     * @see #getConcreteSetting(Setting.AffixSetting), +     */, +    public Settings settings() {, +        return settings;, +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +        return getConcreteSetting(setting).get(settings);, +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +        if (concrete.exists(settings)) {, +            return concrete.get(settings);, +     * Determines whether the provided {@code setting} has an explicit value in the node's {@link #settings global settings}., +        return getConcreteSetting(settingFactory).exists(settings);, +     * Determines whether the provided {@code setting} has an explicit value in the node's {@link #settings global settings}., +        return getConcreteSetting(setting).exists(settings);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/RealmConfig.java, +    private final Settings settings;, +    public RealmConfig(RealmIdentifier identifier, Settings settings, Environment env, ThreadContext threadContext) {, +        this.settings = settings;, +        this.enabled = getSetting(RealmSettings.ENABLED_SETTING);, +        this.order = getSetting(RealmSettings.ORDER_SETTING);, +    /**, +     * @return The settings for the current node., +     * This will include the settings for this realm (as well as other realms, and other non-security settings)., +     * @see #getConcreteSetting(Setting.AffixSetting), +     */, +    public Settings settings() {, +        return settings;, +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +        return getConcreteSetting(setting).get(settings);, +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +        if (concrete.exists(settings)) {, +            return concrete.get(settings);, +     * Determines whether the provided {@code setting} has an explicit value in the node's {@link #settings global settings}., +        return getConcreteSetting(settingFactory).exists(settings);, +     * Determines whether the provided {@code setting} has an explicit value in the node's {@link #settings global settings}., +        return getConcreteSetting(setting).exists(settings);, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/esnative/ReservedRealm.java, +        } else if (ClientReservedRealm.isReserved(token.principal(), config.settings()) == false) {, +            if (anonymousEnabled && AnonymousUser.isAnonymousUsername(username, config.settings())) {, +        } else if (ClientReservedRealm.isReserved(username, config.settings()) == false) {, +        } else if (AnonymousUser.isAnonymousUsername(username, config.settings())) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/RealmConfig.java, +    private final Settings settings;, +    public RealmConfig(RealmIdentifier identifier, Settings settings, Environment env, ThreadContext threadContext) {, +        this.settings = settings;, +        this.enabled = getSetting(RealmSettings.ENABLED_SETTING);, +        this.order = getSetting(RealmSettings.ORDER_SETTING);, +    /**, +     * @return The settings for the current node., +     * This will include the settings for this realm (as well as other realms, and other non-security settings)., +     * @see #getConcreteSetting(Setting.AffixSetting), +     */, +    public Settings settings() {, +        return settings;, +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +        return getConcreteSetting(setting).get(settings);, +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +        if (concrete.exists(settings)) {, +            return concrete.get(settings);, +     * Determines whether the provided {@code setting} has an explicit value in the node's {@link #settings global settings}., +        return getConcreteSetting(settingFactory).exists(settings);, +     * Determines whether the provided {@code setting} has an explicit value in the node's {@link #settings global settings}., +        return getConcreteSetting(setting).exists(settings);, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/esnative/ReservedRealm.java, +        } else if (ClientReservedRealm.isReserved(token.principal(), config.settings()) == false) {, +            if (anonymousEnabled && AnonymousUser.isAnonymousUsername(username, config.settings())) {, +        } else if (ClientReservedRealm.isReserved(username, config.settings()) == false) {, +        } else if (AnonymousUser.isAnonymousUsername(username, config.settings())) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/file/FileUserPasswdStore.java, +        settings = config.settings();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/RealmConfig.java, +    private final Settings settings;, +    public RealmConfig(RealmIdentifier identifier, Settings settings, Environment env, ThreadContext threadContext) {, +        this.settings = settings;, +        this.enabled = getSetting(RealmSettings.ENABLED_SETTING);, +        this.order = getSetting(RealmSettings.ORDER_SETTING);, +    /**, +     * @return The settings for the current node., +     * This will include the settings for this realm (as well as other realms, and other non-security settings)., +     * @see #getConcreteSetting(Setting.AffixSetting), +     */, +    public Settings settings() {, +        return settings;, +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}., +        return getConcreteSetting(setting).get(settings);, +     * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}.]