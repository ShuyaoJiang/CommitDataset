[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/ExceptionsHelper.java, +    public static String detailedMessage(Throwable t) {, +        return detailedMessage(t, false, 0);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/ExceptionsHelper.java, +    public static String detailedMessage(Throwable t) {, +        return detailedMessage(t, false, 0);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.action.search.ShardSearchFailure.*;, +    private ShardSearchFailure[] shardFailures;, +, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards, ShardSearchFailure[] shardFailures) {, +        this.shardFailures = shardFailures;, +    public ShardSearchFailure[] shardFailures() {, +        return this.shardFailures;, +    }, +, +, +        if (shardFailures.length > 0) {, +            builder.startArray("failures");, +            for (ShardSearchFailure shardFailure : shardFailures) {, +                builder.startObject();, +                if (shardFailure.shard() != null) {, +                    builder.field("index", shardFailure.shard().index());, +                    builder.field("shardId", shardFailure.shard().shardId());, +                }, +                builder.field("reason", shardFailure.reason());, +                builder.endObject();, +            }, +            builder.endArray();, +        }, +, +        int size = in.readInt();, +        if (size == 0) {, +            shardFailures = ShardSearchFailure.EMPTY_ARRAY;, +        } else {, +            shardFailures = new ShardSearchFailure[size];, +            for (int i = 0; i < shardFailures.length; i++) {, +                shardFailures[i] = readShardSearchFailure(in);, +            }, +        }, +, +        out.writeInt(shardFailures.length);, +        for (ShardSearchFailure shardSearchFailure : shardFailures) {, +            shardSearchFailure.writeTo(out);, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/ExceptionsHelper.java, +    public static String detailedMessage(Throwable t) {, +        return detailedMessage(t, false, 0);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.action.search.ShardSearchFailure.*;, +    private ShardSearchFailure[] shardFailures;, +, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards, ShardSearchFailure[] shardFailures) {, +        this.shardFailures = shardFailures;, +    public ShardSearchFailure[] shardFailures() {, +        return this.shardFailures;, +    }, +, +, +        if (shardFailures.length > 0) {, +            builder.startArray("failures");, +            for (ShardSearchFailure shardFailure : shardFailures) {, +                builder.startObject();, +                if (shardFailure.shard() != null) {, +                    builder.field("index", shardFailure.shard().index());, +                    builder.field("shardId", shardFailure.shard().shardId());, +                }, +                builder.field("reason", shardFailure.reason());, +                builder.endObject();, +            }, +            builder.endArray();, +        }, +, +        int size = in.readInt();, +        if (size == 0) {, +            shardFailures = ShardSearchFailure.EMPTY_ARRAY;, +        } else {, +            shardFailures = new ShardSearchFailure[size];, +            for (int i = 0; i < shardFailures.length; i++) {, +                shardFailures[i] = readShardSearchFailure(in);, +            }, +        }, +, +        out.writeInt(shardFailures.length);, +        for (ShardSearchFailure shardSearchFailure : shardFailures) {, +            shardSearchFailure.writeTo(out);, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information]