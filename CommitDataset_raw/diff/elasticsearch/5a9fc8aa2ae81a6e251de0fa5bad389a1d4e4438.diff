[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        if (nodeVersion.startsWith("5.")) {, +        } else {, +            args.addAll("--path.conf", "${confDir}"), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        if (nodeVersion.startsWith("5.")) {, +        } else {, +            args.addAll("--path.conf", "${confDir}"), +        }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    private static Environment createEnvironment(, +            final boolean foreground,, +            final Path pidFile,, +            final SecureSettings secureSettings,, +            final Settings initialSettings,, +            final Path configPath) {, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal, Collections.emptyMap(), configPath);, +        final Environment environment = createEnvironment(foreground, pidFile, keystore, initialEnv.settings(), initialEnv.configFile());, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        if (nodeVersion.startsWith("5.")) {, +        } else {, +            args.addAll("--path.conf", "${confDir}"), +        }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    private static Environment createEnvironment(, +            final boolean foreground,, +            final Path pidFile,, +            final SecureSettings secureSettings,, +            final Settings initialSettings,, +            final Path configPath) {, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal, Collections.emptyMap(), configPath);, +        final Environment environment = createEnvironment(foreground, pidFile, keystore, initialEnv.settings(), initialEnv.configFile());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        addPath(policy, "path.conf'", environment.configFile(), "read,readlink");, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        if (nodeVersion.startsWith("5.")) {, +        } else {, +            args.addAll("--path.conf", "${confDir}"), +        }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    private static Environment createEnvironment(, +            final boolean foreground,, +            final Path pidFile,, +            final SecureSettings secureSettings,, +            final Settings initialSettings,, +            final Path configPath) {, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal, Collections.emptyMap(), configPath);, +        final Environment environment = createEnvironment(foreground, pidFile, keystore, initialEnv.settings(), initialEnv.configFile());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        addPath(policy, "path.conf'", environment.configFile(), "read,readlink");, +++ b/core/src/main/java/org/elasticsearch/cli/EnvironmentAwareCommand.java, +import org.elasticsearch.common.SuppressForbidden;, +import java.nio.file.Path;, +import java.nio.file.Paths;, +import java.util.Arrays;, +    private final OptionSpec<String> pathConfOption;, +        this.pathConfOption =, +                parser.acceptsAll(Arrays.asList("c", "path.conf"), "Configure config path").withRequiredArg().ofType(String.class);, +        final String pathConf = pathConfOption.value(options);, +        execute(terminal, options, createEnv(terminal, settings, getConfigPath(pathConf)));, +    }, +, +    @SuppressForbidden(reason = "need path to construct environment"), +    private static Path getConfigPath(final String pathConf) {, +        return pathConf == null ? null : Paths.get(pathConf);, +    protected Environment createEnv(Terminal terminal, Map<String, String> settings, Path configPath) {, +        return InternalSettingsPreparer.prepareEnvironment(Settings.EMPTY, terminal, settings, configPath);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        if (nodeVersion.startsWith("5.")) {, +        } else {, +            args.addAll("--path.conf", "${confDir}"), +        }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    private static Environment createEnvironment(, +            final boolean foreground,, +            final Path pidFile,, +            final SecureSettings secureSettings,, +            final Settings initialSettings,, +            final Path configPath) {, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal, Collections.emptyMap(), configPath);, +        final Environment environment = createEnvironment(foreground, pidFile, keystore, initialEnv.settings(), initialEnv.configFile());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        addPath(policy, "path.conf'", environment.configFile(), "read,readlink");, +++ b/core/src/main/java/org/elasticsearch/cli/EnvironmentAwareCommand.java, +import org.elasticsearch.common.SuppressForbidden;, +import java.nio.file.Path;, +import java.nio.file.Paths;, +import java.util.Arrays;, +    private final OptionSpec<String> pathConfOption;, +        this.pathConfOption =, +                parser.acceptsAll(Arrays.asList("c", "path.conf"), "Configure config path").withRequiredArg().ofType(String.class);, +        final String pathConf = pathConfOption.value(options);, +        execute(terminal, options, createEnv(terminal, settings, getConfigPath(pathConf)));, +    }, +, +    @SuppressForbidden(reason = "need path to construct environment"), +    private static Path getConfigPath(final String pathConf) {, +        return pathConf == null ? null : Paths.get(pathConf);, +    protected Environment createEnv(Terminal terminal, Map<String, String> settings, Path configPath) {]