[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(ChildrenAggregatorBuilder::new, ChildrenAggregatorBuilder::parse,, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(ChildrenAggregatorBuilder::new, ChildrenAggregatorBuilder::parse,, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +     * Read from a stream., +     */, +    protected AggregatorBuilder(StreamInput in, Type type) throws IOException {, +        name = in.readString();, +        this.type = type;, +        factoriesBuilder = AggregatorFactories.Builder.PROTOTYPE.readFrom(in);, +        metaData = in.readMap();, +    }, +, +    protected boolean usesNewStyleSerialization() {, +        return false;, +    }, +, +    @Override, +    public final void writeTo(StreamOutput out) throws IOException {, +        out.writeString(name);, +        if (false == usesNewStyleSerialization()) {, +            doWriteTo(out);, +        }, +        factoriesBuilder.writeTo(out);, +        out.writeMap(metaData);, +        if (usesNewStyleSerialization()) {, +            doWriteTo(out);, +        }, +    }, +, +    protected abstract void doWriteTo(StreamOutput out) throws IOException;, +, +    @Override, +    public final AB readFrom(StreamInput in) throws IOException {, +        // NORELEASE remove when all aggregations have StreamInput constructor, +        String name = in.readString();, +        AB factory = doReadFrom(name, in);, +        factory.factoriesBuilder = AggregatorFactories.Builder.PROTOTYPE.readFrom(in);, +        factory.metaData = in.readMap();, +        return factory;, +    }, +, +    protected abstract AB doReadFrom(String name, StreamInput in) throws IOException;, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(ChildrenAggregatorBuilder::new, ChildrenAggregatorBuilder::parse,, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +     * Read from a stream., +     */, +    protected AggregatorBuilder(StreamInput in, Type type) throws IOException {, +        name = in.readString();, +        this.type = type;, +        factoriesBuilder = AggregatorFactories.Builder.PROTOTYPE.readFrom(in);, +        metaData = in.readMap();, +    }, +, +    protected boolean usesNewStyleSerialization() {, +        return false;, +    }, +, +    @Override, +    public final void writeTo(StreamOutput out) throws IOException {, +        out.writeString(name);, +        if (false == usesNewStyleSerialization()) {, +            doWriteTo(out);, +        }, +        factoriesBuilder.writeTo(out);, +        out.writeMap(metaData);, +        if (usesNewStyleSerialization()) {, +            doWriteTo(out);, +        }, +    }, +, +    protected abstract void doWriteTo(StreamOutput out) throws IOException;, +, +    @Override, +    public final AB readFrom(StreamInput in) throws IOException {, +        // NORELEASE remove when all aggregations have StreamInput constructor, +        String name = in.readString();, +        AB factory = doReadFrom(name, in);, +        factory.factoriesBuilder = AggregatorFactories.Builder.PROTOTYPE.readFrom(in);, +        factory.metaData = in.readMap();, +        return factory;, +    }, +, +    protected abstract AB doReadFrom(String name, StreamInput in) throws IOException;, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ChildrenAggregatorBuilder.java, +    /**, +     * Read from a stream., +     */, +    public ChildrenAggregatorBuilder(StreamInput in) throws IOException {, +        super(in, InternalChildren.TYPE, ValuesSourceType.BYTES, ValueType.STRING);, +        childType = in.readString();, +    }, +, +    @Override]