[+++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.store.IndexStore;, +import org.elasticsearch.indices.store.IndicesStore;, +import java.util.*;, +import java.util.function.BiFunction;, +    public static final String STORE_TYPE = "index.store.type";, +    private final IndicesStore indicesStore;, +    private final Map<String, BiFunction<IndexSettings, IndicesStore, IndexStore>> storeTypes = new HashMap<>();, +    public IndexModule(IndexSettings indexSettings, IndicesStore indicesStore) {, +        this.indicesStore = indicesStore;, +    /**, +     * Adds an {@link IndexStore} type to this index module. Typically stores are registered with a refrence to, +     * it's constructor:, +     * <pre>, +     *     indexModule.addIndexStore("my_store_type", MyStore::new);, +     * </pre>, +     *, +     * @param type the type to register, +     * @param provider the instance provider / factory method, +     */, +    public void addIndexStore(String type, BiFunction<IndexSettings, IndicesStore, IndexStore> provider) {, +        if (storeTypes.containsKey(type)) {, +            throw new IllegalArgumentException("key [" + type +"] already registerd");, +        }, +        storeTypes.put(type, provider);, +    }, +, +    private static boolean isBuiltinType(String storeType) {, +        for (Type type : Type.values()) {, +            if (type.match(storeType)) {, +                return true;, +            }, +        }, +        return false;, +    }, +, +        final IndexSettings settings = new IndexSettings(indexSettings.getIndexMetaData(), indexSettings.getNodeSettings(), settingsConsumers);, +        bind(IndexSettings.class).toInstance(settings);, +, +        final String storeType = settings.getSettings().get(STORE_TYPE);, +        final IndexStore store;, +        if (storeType == null || isBuiltinType(storeType)) {, +            store = new IndexStore(settings, indicesStore);, +        } else {, +            BiFunction<IndexSettings, IndicesStore, IndexStore> factory = storeTypes.get(storeType);, +            if (factory == null) {, +                throw new IllegalArgumentException("Unknown store type [" + storeType + "]");, +            }, +            store = factory.apply(settings, indicesStore);, +            if (store == null) {, +                throw new IllegalStateException("store must not be null");, +            }, +        }, +        bind(IndexStore.class).toInstance(store);, +    public enum Type {, +        NIOFS,, +        MMAPFS,, +        SIMPLEFS,, +        FS,, +        DEFAULT;, +, +        public String getSettingsKey() {, +            return this.name().toLowerCase(Locale.ROOT);, +        }, +        /**, +         * Returns true iff this settings matches the type., +         */, +        public boolean match(String setting) {, +            return getSettingsKey().equals(setting);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.store.IndexStore;, +import org.elasticsearch.indices.store.IndicesStore;, +import java.util.*;, +import java.util.function.BiFunction;, +    public static final String STORE_TYPE = "index.store.type";, +    private final IndicesStore indicesStore;, +    private final Map<String, BiFunction<IndexSettings, IndicesStore, IndexStore>> storeTypes = new HashMap<>();, +    public IndexModule(IndexSettings indexSettings, IndicesStore indicesStore) {, +        this.indicesStore = indicesStore;, +    /**, +     * Adds an {@link IndexStore} type to this index module. Typically stores are registered with a refrence to, +     * it's constructor:, +     * <pre>, +     *     indexModule.addIndexStore("my_store_type", MyStore::new);, +     * </pre>, +     *, +     * @param type the type to register, +     * @param provider the instance provider / factory method, +     */, +    public void addIndexStore(String type, BiFunction<IndexSettings, IndicesStore, IndexStore> provider) {, +        if (storeTypes.containsKey(type)) {, +            throw new IllegalArgumentException("key [" + type +"] already registerd");, +        }, +        storeTypes.put(type, provider);, +    }, +, +    private static boolean isBuiltinType(String storeType) {, +        for (Type type : Type.values()) {]