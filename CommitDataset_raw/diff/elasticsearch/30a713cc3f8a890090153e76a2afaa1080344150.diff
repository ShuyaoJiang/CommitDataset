[+++ b/docs/reference/ilm/index.asciidoc, +include::policy-definitions.asciidoc[], +include::using-policies-rollover.asciidoc[], +, +++ b/docs/reference/ilm/index.asciidoc, +include::policy-definitions.asciidoc[], +include::using-policies-rollover.asciidoc[], +, +++ b/docs/reference/ilm/policy-definitions.asciidoc, +[role="xpack"], +[testenv="basic"], +[[ilm-policy-definition]], +== Policy Phases and Actions, +, +There are four stages in the index lifecycle, in the order, +they are executed., +, +[options="header"], +|======, +| Name     | Description, +| `hot`    | The index is actively being written to, +| `warm`   | The index is generally not being written to, but is still queried, +| `cold`   | The index is no longer being updated and is seldom queried. The, +information still needs to be searchable, but it's okay if those queries are, +slower., +| `delete` | The index is no longer needed and can safely be deleted, +|======, +, +Each of these stages is called a "phase". A policy does not need to configure, +each phase for an index. For example, one policy may define only the hot, +phase and the delete phase, while another may define all four phases., +, +=== Timing, +, +Indices enter phases based on a phase's `min_age` parameter., +The index will not enter the phase until the index's age is older than that, +of the `min_age`. The parameter is configured using a time, +duration format (see <<time-units, Time Units>>)., +, +`min_age` defaults to zero seconds `0s` for each phase if not specified., +, +[source,js], +--------------------------------------------------, +PUT _ilm/policy/my_policy, +{, +  "policy": {, +    "phases": {, +      "warm": {, +        "min_age": "1d",, +        "actions": {, +          "allocate": {, +            "number_of_replicas": 1, +          }, +        }, +      },, +      "delete": {, +        "min_age": "30d",, +        "actions": {, +          "delete": {}, +        }, +      }, +    }, +  }, +}, +--------------------------------------------------, +// CONSOLE, +, +The Above example configures a policy that moves the index into the warm, +phase after one day. Until then, the index is in a waiting state. After, +moving into the warm phase, it will wait until 30 days have elapsed before, +moving to the delete phase and deleting the index., +, +`min_age` is usually the time elapsed from the time the index is created. If the, +index is rolled over, then `min_age` is the time elapsed from the time the index, +is rolled over. The intention here is to execute following phases and actions, +relative to when data was written last to a rolled over index., +, +=== Actions, +, +The below list shows the actions which are available in each phase., +, +* Hot, +  - <<ilm-rollover-action,Rollover>>, +* Warm, +  - <<ilm-allocate-action,Allocate>>, +  - <<ilm-readonly-action,Read-Only>>, +  - <<ilm-forcemerge-action,Force Merge>>, +  - <<ilm-shrink-action,Shrink>>, +* Cold, +  - <<ilm-allocate-action,Allocate>>, +* Delete, +  - <<ilm-delete-action,Delete>>, +, +[[ilm-allocate-action]], +==== Allocate, +, +Phases allowed: warm, cold., +, +The Allocate action allows you to specify which nodes are allowed to host the, +shards of the index and set the number of replicas.]