[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/InternalTermsFacet.java, +    @Override public ComparatorType comparatorType() {, +        return comparatorType;, +    }, +, +    @Override public ComparatorType getComparatorType() {, +        return comparatorType();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/InternalTermsFacet.java, +    @Override public ComparatorType comparatorType() {, +        return comparatorType;, +    }, +, +    @Override public ComparatorType getComparatorType() {, +        return comparatorType();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacet.java, + * Terms facet allows to return facets of the most popular terms within the search query., + *, +    /**, +     * Controls how the terms facets are ordered., +     */, +        /**, +         * Order by the count of each term., +         */, +        /**, +         * Order by the count of each term., +         */, +                int i = o1.term().compareTo(o2.term());, +                    i = o1.count() - o2.count();, +                        i = System.identityHashCode(o1) - System.identityHashCode(o2);, +            throw new ElasticSearchIllegalArgumentException("No type argument match for terms facet comparator [" + id + "]");, +        }, +, +        public static ComparatorType fromString(String type) {, +            if ("count".equals(type)) {, +                return COUNT;, +            } else if ("term".equals(type)) {, +                return TERM;, +            }, +            throw new ElasticSearchIllegalArgumentException("No type argument match for terms facet comparator [" + type + "]");, +    /**, +     * The field name the terms were extracted from., +     */, +    /**, +     * The field name the terms were extracted from., +     */, +    /**, +     * The ordering of the results., +     */, +    ComparatorType comparatorType();, +, +    /**, +     * The ordering of the results., +     */, +    ComparatorType getComparatorType();, +, +    /**, +     * The terms and counts., +     */, +    /**, +     * The terms and counts., +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/InternalTermsFacet.java, +    @Override public ComparatorType comparatorType() {, +        return comparatorType;, +    }, +, +    @Override public ComparatorType getComparatorType() {, +        return comparatorType();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacet.java, + * Terms facet allows to return facets of the most popular terms within the search query., + *, +    /**, +     * Controls how the terms facets are ordered., +     */, +        /**, +         * Order by the count of each term., +         */, +        /**, +         * Order by the count of each term., +         */, +                int i = o1.term().compareTo(o2.term());, +                    i = o1.count() - o2.count();, +                        i = System.identityHashCode(o1) - System.identityHashCode(o2);, +            throw new ElasticSearchIllegalArgumentException("No type argument match for terms facet comparator [" + id + "]");, +        }, +, +        public static ComparatorType fromString(String type) {, +            if ("count".equals(type)) {, +                return COUNT;, +            } else if ("term".equals(type)) {, +                return TERM;, +            }, +            throw new ElasticSearchIllegalArgumentException("No type argument match for terms facet comparator [" + type + "]");, +    /**]