[+++ b/build.gradle, +    register as though they were external to resolve internally. We register, +    "org.elasticsearch:elasticsearch-ssl-config:${version}": ':libs:elasticsearch-ssl-config',, +++ b/build.gradle, +    register as though they were external to resolve internally. We register, +    "org.elasticsearch:elasticsearch-ssl-config:${version}": ':libs:elasticsearch-ssl-config',, +++ b/modules/reindex/build.gradle, +  compile "org.elasticsearch:elasticsearch-ssl-config:${version}", +forbiddenPatterns {, +    // PKCS#12 file are not UTF-8, +    exclude '**/*.p12', +}, +, +++ b/build.gradle, +    register as though they were external to resolve internally. We register, +    "org.elasticsearch:elasticsearch-ssl-config:${version}": ':libs:elasticsearch-ssl-config',, +++ b/modules/reindex/build.gradle, +  compile "org.elasticsearch:elasticsearch-ssl-config:${version}", +forbiddenPatterns {, +    // PKCS#12 file are not UTF-8, +    exclude '**/*.p12', +}, +, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, +import org.elasticsearch.action.support.TransportAction;, +public abstract class AbstractAsyncBulkByScrollAction<Request extends AbstractBulkByScrollRequest<Request>,, +    Action extends TransportAction<Request, ?>> {, +, +    protected final Action mainAction;, +                                           ThreadPool threadPool, Action mainAction, Request mainRequest, , +        this.mainAction = mainAction;, +++ b/build.gradle, +    register as though they were external to resolve internally. We register, +    "org.elasticsearch:elasticsearch-ssl-config:${version}": ':libs:elasticsearch-ssl-config',, +++ b/modules/reindex/build.gradle, +  compile "org.elasticsearch:elasticsearch-ssl-config:${version}", +forbiddenPatterns {, +    // PKCS#12 file are not UTF-8, +    exclude '**/*.p12', +}, +, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, +import org.elasticsearch.action.support.TransportAction;, +public abstract class AbstractAsyncBulkByScrollAction<Request extends AbstractBulkByScrollRequest<Request>,, +    Action extends TransportAction<Request, ?>> {, +, +    protected final Action mainAction;, +                                           ThreadPool threadPool, Action mainAction, Request mainRequest, , +        this.mainAction = mainAction;, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AsyncDeleteByQueryAction.java, +public class AsyncDeleteByQueryAction extends AbstractAsyncBulkByScrollAction<DeleteByQueryRequest, TransportDeleteByQueryAction> {, +, +                                    ThreadPool threadPool, TransportDeleteByQueryAction action, DeleteByQueryRequest request,, +                                    ScriptService scriptService, ClusterState clusterState, ActionListener<BulkByScrollResponse> listener) {, +            logger, client, threadPool, action, request, listener);, +++ b/build.gradle, +    register as though they were external to resolve internally. We register, +    "org.elasticsearch:elasticsearch-ssl-config:${version}": ':libs:elasticsearch-ssl-config',, +++ b/modules/reindex/build.gradle, +  compile "org.elasticsearch:elasticsearch-ssl-config:${version}", +forbiddenPatterns {, +    // PKCS#12 file are not UTF-8, +    exclude '**/*.p12', +}, +, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java, +import org.elasticsearch.action.support.TransportAction;, +public abstract class AbstractAsyncBulkByScrollAction<Request extends AbstractBulkByScrollRequest<Request>,, +    Action extends TransportAction<Request, ?>> {, +, +    protected final Action mainAction;, +                                           ThreadPool threadPool, Action mainAction, Request mainRequest, , +        this.mainAction = mainAction;, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AsyncDeleteByQueryAction.java, +public class AsyncDeleteByQueryAction extends AbstractAsyncBulkByScrollAction<DeleteByQueryRequest, TransportDeleteByQueryAction> {, +, +                                    ThreadPool threadPool, TransportDeleteByQueryAction action, DeleteByQueryRequest request,, +                                    ScriptService scriptService, ClusterState clusterState, ActionListener<BulkByScrollResponse> listener) {, +            logger, client, threadPool, action, request, listener);, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/ReindexPlugin.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.env.NodeEnvironment;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.watcher.ResourceWatcherService;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +    public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool,, +                                               ResourceWatcherService resourceWatcherService, ScriptService scriptService,, +                                               NamedXContentRegistry xContentRegistry, Environment environment,, +                                               NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry) {, +        return Collections.singletonList(new ReindexSslConfig(environment.settings(), environment, resourceWatcherService));, +    }, +, +    @Override, +        final List<Setting<?>> settings = new ArrayList<>();]