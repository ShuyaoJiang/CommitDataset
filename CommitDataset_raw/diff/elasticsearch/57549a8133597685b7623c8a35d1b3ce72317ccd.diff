[+++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +import org.elasticsearch.Version;, +import org.elasticsearch.percolator.PercolatorService;, +            // try to parse the next token, this should be null if the object is ended properly, +            // but will throw a JSON exception if the extra tokens is not valid JSON (this will be handled by the catch), +            if (Version.indexCreated(indexSettings).onOrAfter(Version.V_2_0_0_beta1), +                && source.parser() == null && parser != null) {, +                // only check for end of tokens if we created the parser here, +                token = parser.nextToken();, +                assert token == null; // double check, in tests, that we didn't end parsing early, +            }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +import org.elasticsearch.Version;, +import org.elasticsearch.percolator.PercolatorService;, +            // try to parse the next token, this should be null if the object is ended properly, +            // but will throw a JSON exception if the extra tokens is not valid JSON (this will be handled by the catch), +            if (Version.indexCreated(indexSettings).onOrAfter(Version.V_2_0_0_beta1), +                && source.parser() == null && parser != null) {, +                // only check for end of tokens if we created the parser here, +                token = parser.nextToken();, +                assert token == null; // double check, in tests, that we didn't end parsing early, +            }, +, +++ b/core/src/test/java/org/elasticsearch/index/mapper/source/DefaultSourceMappingTests.java, +, +    public void testSourceObjectContainsExtraTokens() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").endObject().endObject().string();, +        DocumentMapper documentMapper = createIndex("test").mapperService().documentMapperParser().parse(mapping);, +, +        try {, +            documentMapper.parse("test", "type", "1", new BytesArray("{}}")); // extra end object (invalid JSON), +            fail("Expected parse exception");, +        } catch (MapperParsingException e) {, +            assertNotNull(e.getRootCause());, +            String message = e.getRootCause().getMessage();, +            assertTrue(message, message.contains("Unexpected close marker '}'"));, +        }, +    }]