[+++ b/src/main/java/org/elasticsearch/plugins/PluginManager.java, +import org.elasticsearch.ElasticsearchIllegalStateException;, +        if (name == null) {, +            throw new ElasticsearchIllegalArgumentException("plugin name must be supplied with --install [name].");, +        }, +            throw new IOException("plugin directory " + extractLocation.getAbsolutePath() + " already exists. To update the plugin, uninstall it first using --remove " + name + " command");, +            throw new IOException("failed to download out of all possible locations..., use --verbose to get detailed information");, +        if (name == null) {, +            throw new ElasticsearchIllegalArgumentException("plugin name must be supplied with --remove [name].");, +        }, +                switch (command) {, +                    case "-u":, +                    case "--url":, +                    // deprecated versions:, +                    case "url":, +                    case "-url":, +                        url = getCommandValue(args, ++c, "--url");, +                        // Until update is supported, then supplying a URL implies installing, +                        // By specifying this action, we also avoid silently failing without, +                        //  dubious checks., +                        break;, +                    case "-v":, +                    case "--verbose":, +                    // deprecated versions:, +                    case "verbose":, +                    case "-verbose":, +                        outputMode = OutputMode.VERBOSE;, +                        break;, +                    case "-s":, +                    case "--silent":, +                    // deprecated versions:, +                    case "silent":, +                    case "-silent":, +                        outputMode = OutputMode.SILENT;, +                        break;, +                    case "-i":, +                    case "--install":, +                    // deprecated versions:, +                    case "install":, +                    case "-install":, +                        pluginName = getCommandValue(args, ++c, "--install");, +                        action = ACTION.INSTALL;, +                        break;, +                    case "-r":, +                    case "--remove":, +                    // deprecated versions:, +                    case "remove":, +                    case "-remove":, +                        pluginName = getCommandValue(args, ++c, "--remove");, +                        break;, +                    case "-t":, +                    case "--timeout":, +                    // deprecated versions:, +                    case "timeout":, +                    case "-timeout":, +                        String timeoutValue = getCommandValue(args, ++c, "--timeout");, +                        timeout = TimeValue.parseTimeValue(timeoutValue, DEFAULT_TIMEOUT);, +                        break;, +                    case "-l":, +                    case "--list":, +                        break;, +                    case "-h":, +                    case "--help":, +                        break;, +                    default:, +                        displayHelp("Command [" + command + "] unknown.");, +                        pluginManager.log("-> Installing " + Strings.nullToEmpty(pluginName) + "...");, +                        pluginManager.log("-> Removing " + Strings.nullToEmpty(pluginName) + "...");, +    /**, +     * Get the value for the {@code flag} at the specified {@code arg} of the command line {@code args}., +     * <p />, +     * This is useful to avoid having to check for multiple forms of unset (e.g., "   " versus "" versus {@code null})., +     * @param args Incoming command line arguments., +     * @param arg Expected argument containing the value., +     * @param flag The flag whose value is being retrieved., +     * @return Never {@code null}. The trimmed value., +     * @throws NullPointerException if {@code args} is {@code null}., +     * @throws ArrayIndexOutOfBoundsException if {@code arg} is negative., +     * @throws ElasticsearchIllegalStateException if {@code arg} is &gt;= {@code args.length}., +     * @throws ElasticsearchIllegalArgumentException if the value evaluates to blank ({@code null} or only whitespace), +     */, +    private static String getCommandValue(String[] args, int arg, String flag) {, +        if (arg >= args.length) {, +            throw new ElasticsearchIllegalStateException("missing value for " + flag + ". Usage: " + flag + " [value]");, +        }, +, +        // avoid having to interpret multiple forms of unset, +        String trimmedValue = Strings.emptyToNull(args[arg].trim());, +, +        // If we had a value that is blank, then fail immediately, +        if (trimmedValue == null) {, +            throw new ElasticsearchIllegalArgumentException(, +                    "value for " + flag + "('" + args[arg] + "') must be set. Usage: " + flag + " [value]");, +        }, +, +        return trimmedValue;, +    }, +, +++ b/src/main/java/org/elasticsearch/plugins/PluginManager.java, +import org.elasticsearch.ElasticsearchIllegalStateException;]