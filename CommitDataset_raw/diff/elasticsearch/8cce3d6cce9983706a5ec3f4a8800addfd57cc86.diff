[+++ b/plugins/river/rabbitmq/src/main/java/org/elasticsearch/river/rabbitmq/RabbitmqRiver.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.river.rabbitmq;, +, +import com.rabbitmq.client.Channel;, +import com.rabbitmq.client.Connection;, +import com.rabbitmq.client.ConnectionFactory;, +import com.rabbitmq.client.QueueingConsumer;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.action.bulk.BulkRequestBuilder;, +import org.elasticsearch.common.collect.Lists;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +import org.elasticsearch.river.AbstractRiverComponent;, +import org.elasticsearch.river.River;, +import org.elasticsearch.river.RiverName;, +import org.elasticsearch.river.RiverSettings;, +, +import java.io.IOException;, +import java.util.List;, +, +/**, + * @author kimchy (shay.banon), + */, +public class RabbitmqRiver extends AbstractRiverComponent implements River {, +, +    private final Client client;, +, +    private volatile boolean closed = false;, +, +    private volatile Thread thread;, +, +    private volatile ConnectionFactory connectionFactory;, +, +    @Inject public RabbitmqRiver(RiverName riverName, RiverSettings settings, Client client) {, +        super(riverName, settings);, +        this.client = client;, +    }, +, +    @Override public void start() {, +        connectionFactory = new ConnectionFactory();, +        connectionFactory.setHost(XContentMapValues.nodeStringValue(settings.settings().get("host"), ConnectionFactory.DEFAULT_HOST));, +        connectionFactory.setPort(XContentMapValues.nodeIntegerValue(settings.settings().get("port"), ConnectionFactory.DEFAULT_AMQP_PORT));, +        connectionFactory.setUsername(XContentMapValues.nodeStringValue(settings.settings().get("user"), ConnectionFactory.DEFAULT_USER));, +        connectionFactory.setPassword(XContentMapValues.nodeStringValue(settings.settings().get("password"), ConnectionFactory.DEFAULT_PASS));, +        connectionFactory.setVirtualHost(XContentMapValues.nodeStringValue(settings.settings().get("vhost"), ConnectionFactory.DEFAULT_VHOST));, +, +        logger.info("creating rabbitmq river, host [{}], port [{}], user [{}], vhost [{}]", connectionFactory.getHost(), connectionFactory.getPort(), connectionFactory.getUsername(), connectionFactory.getVirtualHost());, +, +        thread = EsExecutors.daemonThreadFactory(settings.globalSettings(), "rabbitmq_river").newThread(new Consumer());, +        thread.start();, +    }, +, +    @Override public void close() {, +        if (closed) {, +            return;, +        }, +        logger.info("closing rabbitmq river");, +        closed = true;, +        thread.interrupt();, +    }, +, +    private class Consumer implements Runnable {, +, +        private Connection connection;, +, +        private Channel channel;, +, +        @Override public void run() {, +            while (true) {, +                if (closed) {, +                    return;, +                }, +                try {, +                    connection = connectionFactory.newConnection();, +                    channel = connection.createChannel();, +                } catch (Exception e) {, +                    if (!closed) {, +                        logger.warn("failed to created a connection / channel", e);]