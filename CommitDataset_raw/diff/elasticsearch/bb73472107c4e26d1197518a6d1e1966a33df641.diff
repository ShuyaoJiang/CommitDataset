[+++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<TimeValue> timeSetting(String key, Function<Settings, TimeValue> defaultValue, TimeValue minValue,, +        return new Setting<>(key, (s) -> defaultValue.apply(s).getStringRep(), (s) -> {, +        return timeSetting(key, (s) -> defaultValue, minValue, properties);, +        return new Setting<>(key, (s) -> defaultValue.getStringRep(), (s) -> TimeValue.parseTimeValue(s, key), properties);, +    public static Setting<TimeValue> positiveTimeSetting(String key, TimeValue defaultValue, Property... properties) {, +        return timeSetting(key, defaultValue, TimeValue.timeValueMillis(0), properties);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<TimeValue> timeSetting(String key, Function<Settings, TimeValue> defaultValue, TimeValue minValue,, +        return new Setting<>(key, (s) -> defaultValue.apply(s).getStringRep(), (s) -> {, +        return timeSetting(key, (s) -> defaultValue, minValue, properties);, +        return new Setting<>(key, (s) -> defaultValue.getStringRep(), (s) -> TimeValue.parseTimeValue(s, key), properties);, +    public static Setting<TimeValue> positiveTimeSetting(String key, TimeValue defaultValue, Property... properties) {, +        return timeSetting(key, defaultValue, TimeValue.timeValueMillis(0), properties);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/unit/TimeValue.java, +    /**, +     * Returns a {@link String} representation of the current {@link TimeValue}., +     *, +     * Note that this method might produce fractional time values (ex 1.6m) which cannot be, +     * parsed by method like {@link TimeValue#parse(String, String, int)}., +     */, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<TimeValue> timeSetting(String key, Function<Settings, TimeValue> defaultValue, TimeValue minValue,, +        return new Setting<>(key, (s) -> defaultValue.apply(s).getStringRep(), (s) -> {, +        return timeSetting(key, (s) -> defaultValue, minValue, properties);, +        return new Setting<>(key, (s) -> defaultValue.getStringRep(), (s) -> TimeValue.parseTimeValue(s, key), properties);, +    public static Setting<TimeValue> positiveTimeSetting(String key, TimeValue defaultValue, Property... properties) {, +        return timeSetting(key, defaultValue, TimeValue.timeValueMillis(0), properties);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/unit/TimeValue.java, +    /**, +     * Returns a {@link String} representation of the current {@link TimeValue}., +     *, +     * Note that this method might produce fractional time values (ex 1.6m) which cannot be, +     * parsed by method like {@link TimeValue#parse(String, String, int)}., +     */, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            settings -> TimeValue.timeValueMillis(PING_TIMEOUT_SETTING.get(settings).millis() * 20),, +            settings -> TimeValue.timeValueMillis(JOIN_TIMEOUT_SETTING.get(settings).millis() / 2), TimeValue.timeValueMillis(0),, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<TimeValue> timeSetting(String key, Function<Settings, TimeValue> defaultValue, TimeValue minValue,, +        return new Setting<>(key, (s) -> defaultValue.apply(s).getStringRep(), (s) -> {, +        return timeSetting(key, (s) -> defaultValue, minValue, properties);, +        return new Setting<>(key, (s) -> defaultValue.getStringRep(), (s) -> TimeValue.parseTimeValue(s, key), properties);, +    public static Setting<TimeValue> positiveTimeSetting(String key, TimeValue defaultValue, Property... properties) {, +        return timeSetting(key, defaultValue, TimeValue.timeValueMillis(0), properties);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/unit/TimeValue.java, +    /**, +     * Returns a {@link String} representation of the current {@link TimeValue}., +     *, +     * Note that this method might produce fractional time values (ex 1.6m) which cannot be, +     * parsed by method like {@link TimeValue#parse(String, String, int)}., +     */, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            settings -> TimeValue.timeValueMillis(PING_TIMEOUT_SETTING.get(settings).millis() * 20),, +            settings -> TimeValue.timeValueMillis(JOIN_TIMEOUT_SETTING.get(settings).millis() / 2), TimeValue.timeValueMillis(0),, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +            (s) -> TimeValue.timeValueMillis(INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT_SETTING.get(s).millis() * 2),, +                INDICES_RECOVERY_INTERNAL_LONG_ACTION_TIMEOUT_SETTING::get, TimeValue.timeValueSeconds(0),, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    public static Setting<TimeValue> timeSetting(String key, Function<Settings, TimeValue> defaultValue, TimeValue minValue,, +        return new Setting<>(key, (s) -> defaultValue.apply(s).getStringRep(), (s) -> {, +        return timeSetting(key, (s) -> defaultValue, minValue, properties);, +        return new Setting<>(key, (s) -> defaultValue.getStringRep(), (s) -> TimeValue.parseTimeValue(s, key), properties);, +    public static Setting<TimeValue> positiveTimeSetting(String key, TimeValue defaultValue, Property... properties) {, +        return timeSetting(key, defaultValue, TimeValue.timeValueMillis(0), properties);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/unit/TimeValue.java, +    /**, +     * Returns a {@link String} representation of the current {@link TimeValue}., +     *, +     * Note that this method might produce fractional time values (ex 1.6m) which cannot be, +     * parsed by method like {@link TimeValue#parse(String, String, int)}., +     */, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            settings -> TimeValue.timeValueMillis(PING_TIMEOUT_SETTING.get(settings).millis() * 20),, +            settings -> TimeValue.timeValueMillis(JOIN_TIMEOUT_SETTING.get(settings).millis() / 2), TimeValue.timeValueMillis(0),, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +            (s) -> TimeValue.timeValueMillis(INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT_SETTING.get(s).millis() * 2),, +                INDICES_RECOVERY_INTERNAL_LONG_ACTION_TIMEOUT_SETTING::get, TimeValue.timeValueSeconds(0),, +++ b/core/src/test/java/org/elasticsearch/common/settings/SettingTests.java, +import static org.hamcrest.Matchers.equalTo;, +, +    public void testTimeValue() {, +        final TimeValue random = TimeValue.parseTimeValue(randomTimeValue(), "test");, +, +        Setting<TimeValue> setting = Setting.timeSetting("foo", random);, +        assertThat(setting.get(Settings.EMPTY), equalTo(random));, +, +        final int factor = randomIntBetween(1, 10);, +        setting = Setting.timeSetting("foo", (s) -> TimeValue.timeValueMillis(random.getMillis() * factor), TimeValue.ZERO);, +        assertThat(setting.get(Settings.builder().put("foo", "12h").build()), equalTo(TimeValue.timeValueHours(12)));]