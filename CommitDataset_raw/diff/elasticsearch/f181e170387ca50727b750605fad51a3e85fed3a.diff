[+++ b/build.gradle, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/pull/37951" /* place a PR link here when committing bwc changes */, +++ b/build.gradle, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/pull/37951" /* place a PR link here when committing bwc changes */, +++ b/docs/reference/indices/flush.asciidoc, +                     "retention_leases" : "primary_term:1;version:1;id:replica-0;retaining_seq_no:0;timestamp:1547235588;source:replica", +// TESTRESPONSE[s/"retention_leases" : "primary_term:1;version:1;id:replica-0;retaining_seq_no:0;timestamp:1547235588;source:replica"/"retention_leases": $body.indices.twitter.shards.0.0.commit.user_data.retention_leases/], +++ b/build.gradle, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/pull/37951" /* place a PR link here when committing bwc changes */, +++ b/docs/reference/indices/flush.asciidoc, +                     "retention_leases" : "primary_term:1;version:1;id:replica-0;retaining_seq_no:0;timestamp:1547235588;source:replica", +// TESTRESPONSE[s/"retention_leases" : "primary_term:1;version:1;id:replica-0;retaining_seq_no:0;timestamp:1547235588;source:replica"/"retention_leases": $body.indices.twitter.shards.0.0.commit.user_data.retention_leases/], +++ b/server/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import org.elasticsearch.index.seqno.RetentionLeases;, +    private final Supplier<RetentionLeases> retentionLeasesSupplier;, +    public Supplier<RetentionLeases> retentionLeasesSupplier() {, +                        Supplier<RetentionLeases> retentionLeasesSupplier,, +++ b/build.gradle, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/pull/37951" /* place a PR link here when committing bwc changes */, +++ b/docs/reference/indices/flush.asciidoc, +                     "retention_leases" : "primary_term:1;version:1;id:replica-0;retaining_seq_no:0;timestamp:1547235588;source:replica", +// TESTRESPONSE[s/"retention_leases" : "primary_term:1;version:1;id:replica-0;retaining_seq_no:0;timestamp:1547235588;source:replica"/"retention_leases": $body.indices.twitter.shards.0.0.commit.user_data.retention_leases/], +++ b/server/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import org.elasticsearch.index.seqno.RetentionLeases;, +    private final Supplier<RetentionLeases> retentionLeasesSupplier;, +    public Supplier<RetentionLeases> retentionLeasesSupplier() {, +                        Supplier<RetentionLeases> retentionLeasesSupplier,, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.index.seqno.RetentionLeases;, +                    final Tuple<Long, RetentionLeases> retentionPolicy = softDeletesPolicy.getRetentionPolicy();, +                    commitData.put(Engine.RETENTION_LEASES, RetentionLeases.encodeRetentionLeases(retentionPolicy.v2()));, +++ b/build.gradle, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/pull/37951" /* place a PR link here when committing bwc changes */, +++ b/docs/reference/indices/flush.asciidoc, +                     "retention_leases" : "primary_term:1;version:1;id:replica-0;retaining_seq_no:0;timestamp:1547235588;source:replica", +// TESTRESPONSE[s/"retention_leases" : "primary_term:1;version:1;id:replica-0;retaining_seq_no:0;timestamp:1547235588;source:replica"/"retention_leases": $body.indices.twitter.shards.0.0.commit.user_data.retention_leases/], +++ b/server/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import org.elasticsearch.index.seqno.RetentionLeases;, +    private final Supplier<RetentionLeases> retentionLeasesSupplier;, +    public Supplier<RetentionLeases> retentionLeasesSupplier() {, +                        Supplier<RetentionLeases> retentionLeasesSupplier,, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.index.seqno.RetentionLeases;, +                    final Tuple<Long, RetentionLeases> retentionPolicy = softDeletesPolicy.getRetentionPolicy();, +                    commitData.put(Engine.RETENTION_LEASES, RetentionLeases.encodeRetentionLeases(retentionPolicy.v2()));, +++ b/server/src/main/java/org/elasticsearch/index/engine/SoftDeletesPolicy.java, +import org.elasticsearch.index.seqno.RetentionLeases;, +    private final Supplier<RetentionLeases> retentionLeasesSupplier;, +            final Supplier<RetentionLeases> retentionLeasesSupplier) {, +    public synchronized Tuple<Long, RetentionLeases> getRetentionPolicy() {, +        final RetentionLeases retentionLeases = retentionLeasesSupplier.get();, +                    .leases(), +++ b/build.gradle, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/pull/37951" /* place a PR link here when committing bwc changes */, +++ b/docs/reference/indices/flush.asciidoc, +                     "retention_leases" : "primary_term:1;version:1;id:replica-0;retaining_seq_no:0;timestamp:1547235588;source:replica", +// TESTRESPONSE[s/"retention_leases" : "primary_term:1;version:1;id:replica-0;retaining_seq_no:0;timestamp:1547235588;source:replica"/"retention_leases": $body.indices.twitter.shards.0.0.commit.user_data.retention_leases/], +++ b/server/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import org.elasticsearch.index.seqno.RetentionLeases;, +    private final Supplier<RetentionLeases> retentionLeasesSupplier;, +    public Supplier<RetentionLeases> retentionLeasesSupplier() {, +                        Supplier<RetentionLeases> retentionLeasesSupplier,, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.index.seqno.RetentionLeases;, +                    final Tuple<Long, RetentionLeases> retentionPolicy = softDeletesPolicy.getRetentionPolicy();, +                    commitData.put(Engine.RETENTION_LEASES, RetentionLeases.encodeRetentionLeases(retentionPolicy.v2()));, +++ b/server/src/main/java/org/elasticsearch/index/engine/SoftDeletesPolicy.java, +import org.elasticsearch.index.seqno.RetentionLeases;, +    private final Supplier<RetentionLeases> retentionLeasesSupplier;, +            final Supplier<RetentionLeases> retentionLeasesSupplier) {, +    public synchronized Tuple<Long, RetentionLeases> getRetentionPolicy() {, +        final RetentionLeases retentionLeases = retentionLeasesSupplier.get();, +                    .leases(), +++ b/server/src/main/java/org/elasticsearch/index/seqno/ReplicationTracker.java, +import java.util.List;, +import java.util.stream.Stream;, +    private final BiConsumer<RetentionLeases, ActionListener<ReplicationResponse>> onSyncRetentionLeases;, +    /**, +     * The current retention leases., +     */, +    private RetentionLeases retentionLeases = RetentionLeases.EMPTY;, +    public RetentionLeases getRetentionLeases() {, +        final RetentionLeases nonExpiredRetentionLeases;, +                final Map<Boolean, List<RetentionLease>> partitionByExpiration = retentionLeases, +                        .leases(), +                        .collect(Collectors.groupingBy(lease -> currentTimeMillis - lease.timestamp() > retentionLeaseMillis));, +                if (partitionByExpiration.get(true) == null) {, +                    return retentionLeases;, +                final Collection<RetentionLease> nonExpiredLeases =, +                        partitionByExpiration.get(false) != null ? partitionByExpiration.get(false) : Collections.emptyList();, +                retentionLeases = new RetentionLeases(operationPrimaryTerm, retentionLeases.version() + 1, nonExpiredLeases);, +            nonExpiredRetentionLeases = retentionLeases;, +        final RetentionLeases currentRetentionLeases;, +            if (retentionLeases.contains(id)) {, +            retentionLeases = new RetentionLeases(, +                    operationPrimaryTerm,, +                    retentionLeases.version() + 1,, +                    Stream.concat(retentionLeases.leases().stream(), Stream.of(retentionLease)).collect(Collectors.toList()));, +            currentRetentionLeases = retentionLeases;, +        if (retentionLeases.contains(id) == false) {]