[+++ b/core/src/test/java/org/elasticsearch/indices/recovery/RecoverySourceHandlerTests.java, +import java.util.Collections;, +        Settings settings = Settings.builder().put("indices.recovery.concurrent_streams", 1)., +                put("indices.recovery.concurrent_small_file_streams", 1).build();, +        final RecoverySettings recoverySettings = new RecoverySettings(settings, service);, +                return new IndexOutputOutputStream(targetStore.createVerifyingOutput(md.name(), md, IOContext.DEFAULT)) {, +                    @Override, +                    public void close() throws IOException {, +                        super.close();, +                        store.directory().sync(Collections.singleton(md.name())); // sync otherwise MDW will mess with it, +                    }, +                };, +        Settings settings = Settings.builder().put("indices.recovery.concurrent_streams", 1)., +                put("indices.recovery.concurrent_small_file_streams", 1).build();, +        final RecoverySettings recoverySettings = new RecoverySettings(settings, service);, +                    return new IndexOutputOutputStream(targetStore.createVerifyingOutput(md.name(), md, IOContext.DEFAULT)) {, +                        @Override, +                        public void close() throws IOException {, +                            super.close();, +                            store.directory().sync(Collections.singleton(md.name())); // sync otherwise MDW will mess with it, +                        }, +                    };, +        Settings settings = Settings.builder().put("indices.recovery.concurrent_streams", 1)., +                put("indices.recovery.concurrent_small_file_streams", 1).build();, +        final RecoverySettings recoverySettings = new RecoverySettings(settings, service);]