[+++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +        clusterDynamicSettings.addDynamicSetting(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC, Validator.BYTES_SIZE);, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +        clusterDynamicSettings.addDynamicSetting(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC, Validator.BYTES_SIZE);, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +    public static final String INDICES_RECOVERY_MAX_BYTES_PER_SEC = "indices.recovery.max_bytes_per_sec";, +    , +    /**, +     * Use {@link #INDICES_RECOVERY_MAX_BYTES_PER_SEC} instead, +     */, +    @Deprecated , +    private volatile ByteSizeValue maxBytesPerSec;, +        this.maxBytesPerSec = componentSettings.getAsBytesSize("max_bytes_per_sec", componentSettings.getAsBytesSize("max_size_per_sec", new ByteSizeValue(20, ByteSizeUnit.MB)));, +        if (maxBytesPerSec.bytes() <= 0) {, +            rateLimiter = new SimpleRateLimiter(maxBytesPerSec.mbFrac());, +        logger.debug("using max_bytes_per_sec[{}], concurrent_streams [{}], file_chunk_size [{}], translog_size [{}], translog_ops [{}], and compress [{}]",, +                maxBytesPerSec, concurrentStreams, fileChunkSize, translogSize, translogOps, compress);, +            ByteSizeValue maxSizePerSec = settings.getAsBytesSize(INDICES_RECOVERY_MAX_BYTES_PER_SEC, settings.getAsBytesSize(INDICES_RECOVERY_MAX_SIZE_PER_SEC, RecoverySettings.this.maxBytesPerSec));, +            if (!Objects.equal(maxSizePerSec, RecoverySettings.this.maxBytesPerSec)) {, +                logger.info("updating [{}] from [{}] to [{}]", INDICES_RECOVERY_MAX_BYTES_PER_SEC, RecoverySettings.this.maxBytesPerSec, maxSizePerSec);, +                RecoverySettings.this.maxBytesPerSec = maxSizePerSec;]