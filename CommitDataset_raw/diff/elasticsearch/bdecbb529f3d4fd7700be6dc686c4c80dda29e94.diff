[+++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +import java.io.IOException;, +     * Makes sure that current token is of type {@link XContentParser.Token#FIELD_NAME} and the the field name is equal to the provided one, +     * @throws ParsingException if the token is not of type {@link XContentParser.Token#FIELD_NAME} or is not equal to the given field name, +     */, +    public static void ensureFieldName(XContentParser parser, Token token, String fieldName) throws IOException {, +        ensureExpectedToken(Token.FIELD_NAME, token, parser::getTokenLocation);, +        String currentName = parser.currentName();, +        if (currentName.equals(fieldName) == false) {, +            String message = "Failed to parse object: expecting field with name [%s] but found [%s]";, +            throw new ParsingException(parser.getTokenLocation(), String.format(Locale.ROOT, message, fieldName, currentName));, +        }, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +import java.io.IOException;, +     * Makes sure that current token is of type {@link XContentParser.Token#FIELD_NAME} and the the field name is equal to the provided one, +     * @throws ParsingException if the token is not of type {@link XContentParser.Token#FIELD_NAME} or is not equal to the given field name, +     */, +    public static void ensureFieldName(XContentParser parser, Token token, String fieldName) throws IOException {, +        ensureExpectedToken(Token.FIELD_NAME, token, parser::getTokenLocation);, +        String currentName = parser.currentName();, +        if (currentName.equals(fieldName) == false) {, +            String message = "Failed to parse object: expecting field with name [%s] but found [%s]";, +            throw new ParsingException(parser.getTokenLocation(), String.format(Locale.ROOT, message, fieldName, currentName));, +        }, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/search/internal/InternalSearchHit.java, +    private SearchSortValues sortValues = SearchSortValues.EMPTY;, +        this.sortValues = new SearchSortValues(sortValues, sortValueFormats);, +        return sortValues.sortValues();, +        sortValues.toXContent(builder, params);, +        sortValues = new SearchSortValues(in);, +        sortValues.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +import java.io.IOException;, +     * Makes sure that current token is of type {@link XContentParser.Token#FIELD_NAME} and the the field name is equal to the provided one, +     * @throws ParsingException if the token is not of type {@link XContentParser.Token#FIELD_NAME} or is not equal to the given field name, +     */, +    public static void ensureFieldName(XContentParser parser, Token token, String fieldName) throws IOException {, +        ensureExpectedToken(Token.FIELD_NAME, token, parser::getTokenLocation);, +        String currentName = parser.currentName();, +        if (currentName.equals(fieldName) == false) {, +            String message = "Failed to parse object: expecting field with name [%s] but found [%s]";, +            throw new ParsingException(parser.getTokenLocation(), String.format(Locale.ROOT, message, fieldName, currentName));, +        }, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/search/internal/InternalSearchHit.java, +    private SearchSortValues sortValues = SearchSortValues.EMPTY;, +        this.sortValues = new SearchSortValues(sortValues, sortValueFormats);, +        return sortValues.sortValues();, +        sortValues.toXContent(builder, params);, +        sortValues = new SearchSortValues(in);, +        sortValues.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/search/internal/SearchSortValues.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.internal;, +, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentParserUtils;, +import org.elasticsearch.search.DocValueFormat;, +import org.elasticsearch.search.internal.InternalSearchHit.Fields;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Objects;, +, +public class SearchSortValues implements ToXContent, Writeable {, +, +    static final SearchSortValues EMPTY = new SearchSortValues(new Object[0]);, +    private final Object[] sortValues;]