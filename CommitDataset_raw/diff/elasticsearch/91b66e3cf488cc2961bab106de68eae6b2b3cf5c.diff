[+++ b/client/rest/build.gradle, +group = 'org.elasticsearch.client', +, +++ b/client/rest/build.gradle, +group = 'org.elasticsearch.client', +, +++ b/client/sniffer/build.gradle, +group = 'org.elasticsearch.client', +, +++ b/client/rest/build.gradle, +group = 'org.elasticsearch.client', +, +++ b/client/sniffer/build.gradle, +group = 'org.elasticsearch.client', +, +++ b/client/test/build.gradle, +install.enabled = false, +uploadArchives.enabled = false, +, +++ b/client/rest/build.gradle, +group = 'org.elasticsearch.client', +, +++ b/client/sniffer/build.gradle, +group = 'org.elasticsearch.client', +, +++ b/client/test/build.gradle, +install.enabled = false, +uploadArchives.enabled = false, +, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/client/rest/build.gradle, +group = 'org.elasticsearch.client', +, +++ b/client/sniffer/build.gradle, +group = 'org.elasticsearch.client', +, +++ b/client/test/build.gradle, +install.enabled = false, +uploadArchives.enabled = false, +, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.Aggregator;, +import org.elasticsearch.search.aggregations.bucket.range.InternalBinaryRange;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.avg.AvgBucketPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.max.MaxBucketPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.min.MinBucketPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.percentile.PercentilesBucketPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.stats.InternalStatsBucket;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.stats.StatsBucketPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.stats.extended.ExtendedStatsBucketPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.stats.extended.InternalExtendedStatsBucket;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.sum.SumBucketPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.bucketscript.BucketScriptPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.bucketselector.BucketSelectorPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.cumulativesum.CumulativeSumPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.derivative.DerivativePipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.movavg.MovAvgPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffPipelineAggregator;, +     * @param internalReader reads the {@link PipelineAggregator} from a stream, +     * @param internalReader reads the {@link InternalAggregation} that represents a bucket in this aggregation from a stream, +            Writeable.Reader<? extends PipelineAggregator> internalReader, Writeable.Reader<? extends InternalAggregation> bucketReader,, +        if (false == transportClient) {, +            namedWriteableRegistry.register(PipelineAggregationBuilder.class, aggregationName.getPreferredName(), reader);, +            pipelineAggregationParserRegistry.register(aggregationParser, aggregationName);, +        }, +        namedWriteableRegistry.register(PipelineAggregator.class, aggregationName.getPreferredName(), internalReader);, +        namedWriteableRegistry.register(InternalAggregation.class, aggregationName.getPreferredName(), bucketReader);, +    }, +, +    public void registerPipelineAggregation(Writeable.Reader<? extends PipelineAggregationBuilder> reader,, +            PipelineAggregator.Parser aggregationParser, ParseField aggregationName) {, +        // NORELEASE remove me in favor of the above method, +, +        registerAggregation(StatsAggregationBuilder::new, InternalStats::new, new StatsParser(),, +                StatsAggregationBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(ExtendedStatsAggregationBuilder::new, InternalExtendedStats::new, new ExtendedStatsParser(),, +, +        registerPipelineAggregation(StatsBucketPipelineAggregationBuilder::new, StatsBucketPipelineAggregator::new,, +                InternalStatsBucket::new, StatsBucketPipelineAggregationBuilder.PARSER,, +        registerPipelineAggregation(ExtendedStatsBucketPipelineAggregationBuilder::new, ExtendedStatsBucketPipelineAggregator::new,, +                InternalExtendedStatsBucket::new, new ExtendedStatsBucketParser(),, +++ b/client/rest/build.gradle, +group = 'org.elasticsearch.client', +, +++ b/client/sniffer/build.gradle, +group = 'org.elasticsearch.client', +, +++ b/client/test/build.gradle, +install.enabled = false, +uploadArchives.enabled = false, +, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.Aggregator;, +import org.elasticsearch.search.aggregations.bucket.range.InternalBinaryRange;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.avg.AvgBucketPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.max.MaxBucketPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.min.MinBucketPipelineAggregator;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.percentile.PercentilesBucketPipelineAggregator;]