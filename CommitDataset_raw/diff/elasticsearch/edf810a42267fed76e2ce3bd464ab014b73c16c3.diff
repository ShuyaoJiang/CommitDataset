[+++ b/dev-tools/checkstyle_suppressions.xml, +  <suppress files="qa[/\\]smoke-test-plugins-ssl[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]smoketest[/\\]SmokeTestMonitoringWithSecurityIT.java" checks="LineLength" />, +  <suppress files="qa[/\\]smoke-test-plugins-ssl[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]smoketest[/\\]SmokeTestPluginsSslClientYamlTestSuiteIT.java" checks="LineLength" />, +++ b/dev-tools/checkstyle_suppressions.xml, +  <suppress files="qa[/\\]smoke-test-plugins-ssl[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]smoketest[/\\]SmokeTestMonitoringWithSecurityIT.java" checks="LineLength" />, +  <suppress files="qa[/\\]smoke-test-plugins-ssl[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]smoketest[/\\]SmokeTestPluginsSslClientYamlTestSuiteIT.java" checks="LineLength" />, +++ b/license-tools/src/main/java/org/elasticsearch/license/licensor/LicenseSigner.java, +import java.util.Map;, + * Responsible for generating a license signature according to the signature spec and sign it with, + * the provided encrypted private key, +     * Generates a signature for the {@code licenseSpec}. Signature structure:, +     * <code>, +     * </code>, +        final Map<String, String> licenseSpecViewMode =, +                Collections.singletonMap(License.LICENSE_SPEC_VIEW_MODE, "true");, +        licenseSpec.toXContent(contentBuilder, new ToXContent.MapParams(licenseSpecViewMode));, +        } catch (InvalidKeyException, +                | IOException, +                | NoSuchAlgorithmException, +                | SignatureException e) {, +++ b/dev-tools/checkstyle_suppressions.xml, +  <suppress files="qa[/\\]smoke-test-plugins-ssl[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]smoketest[/\\]SmokeTestMonitoringWithSecurityIT.java" checks="LineLength" />, +  <suppress files="qa[/\\]smoke-test-plugins-ssl[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]smoketest[/\\]SmokeTestPluginsSslClientYamlTestSuiteIT.java" checks="LineLength" />, +++ b/license-tools/src/main/java/org/elasticsearch/license/licensor/LicenseSigner.java, +import java.util.Map;, + * Responsible for generating a license signature according to the signature spec and sign it with, + * the provided encrypted private key, +     * Generates a signature for the {@code licenseSpec}. Signature structure:, +     * <code>, +     * </code>, +        final Map<String, String> licenseSpecViewMode =, +                Collections.singletonMap(License.LICENSE_SPEC_VIEW_MODE, "true");, +        licenseSpec.toXContent(contentBuilder, new ToXContent.MapParams(licenseSpecViewMode));, +        } catch (InvalidKeyException, +                | IOException, +                | NoSuchAlgorithmException, +                | SignatureException e) {, +++ b/license-tools/src/main/java/org/elasticsearch/license/licensor/tools/KeyPairGeneratorTool.java, +        terminal.println("and privateKeyPath. The tool checks the existence of the provided key");, +        terminal.println("paths and will not override if any existing keys are found.");, +        terminal.println(, +                Terminal.Verbosity.VERBOSE,, +                "generating key pair [public key: ", +                        + publicKeyPath, +                        + ", private key: ", +, +++ b/dev-tools/checkstyle_suppressions.xml, +  <suppress files="qa[/\\]smoke-test-plugins-ssl[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]smoketest[/\\]SmokeTestMonitoringWithSecurityIT.java" checks="LineLength" />, +  <suppress files="qa[/\\]smoke-test-plugins-ssl[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]smoketest[/\\]SmokeTestPluginsSslClientYamlTestSuiteIT.java" checks="LineLength" />, +++ b/license-tools/src/main/java/org/elasticsearch/license/licensor/LicenseSigner.java, +import java.util.Map;, + * Responsible for generating a license signature according to the signature spec and sign it with, + * the provided encrypted private key, +     * Generates a signature for the {@code licenseSpec}. Signature structure:, +     * <code>, +     * </code>, +        final Map<String, String> licenseSpecViewMode =, +                Collections.singletonMap(License.LICENSE_SPEC_VIEW_MODE, "true");, +        licenseSpec.toXContent(contentBuilder, new ToXContent.MapParams(licenseSpecViewMode));, +        } catch (InvalidKeyException, +                | IOException, +                | NoSuchAlgorithmException, +                | SignatureException e) {, +++ b/license-tools/src/main/java/org/elasticsearch/license/licensor/tools/KeyPairGeneratorTool.java, +        terminal.println("and privateKeyPath. The tool checks the existence of the provided key");, +        terminal.println("paths and will not override if any existing keys are found.");, +        terminal.println(, +                Terminal.Verbosity.VERBOSE,, +                "generating key pair [public key: ", +                        + publicKeyPath, +                        + ", private key: ", +, +++ b/license-tools/src/main/java/org/elasticsearch/license/licensor/tools/LicenseGeneratorTool.java, +import org.elasticsearch.cli.UserException;, +import java.nio.charset.StandardCharsets;, +import java.nio.file.Files;, +import java.nio.file.Path;, +, +            final BytesArray bytes =, +                    new BytesArray(licenseOption.value(options).getBytes(StandardCharsets.UTF_8));, +                    License.fromSource(bytes, XContentType.JSON);, +            final BytesArray bytes = new BytesArray(Files.readAllBytes(licenseSpecPath));, +            licenseSpec = License.fromSource(bytes, XContentType.JSON);, +            throw new UserException(, +                    ExitCodes.USAGE,, +                    "Must specify either --license or --licenseFile");, +, +++ b/dev-tools/checkstyle_suppressions.xml, +  <suppress files="qa[/\\]smoke-test-plugins-ssl[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]smoketest[/\\]SmokeTestMonitoringWithSecurityIT.java" checks="LineLength" />, +  <suppress files="qa[/\\]smoke-test-plugins-ssl[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]smoketest[/\\]SmokeTestPluginsSslClientYamlTestSuiteIT.java" checks="LineLength" />, +++ b/license-tools/src/main/java/org/elasticsearch/license/licensor/LicenseSigner.java, +import java.util.Map;, + * Responsible for generating a license signature according to the signature spec and sign it with, + * the provided encrypted private key, +     * Generates a signature for the {@code licenseSpec}. Signature structure:, +     * <code>, +     * </code>, +        final Map<String, String> licenseSpecViewMode =, +                Collections.singletonMap(License.LICENSE_SPEC_VIEW_MODE, "true");, +        licenseSpec.toXContent(contentBuilder, new ToXContent.MapParams(licenseSpecViewMode));]