[+++ b/src/main/java/org/elasticsearch/common/geo/GeoPoint.java, +    public static final String GEOHASH = GeoPointFieldMapper.Names.GEOHASH;, +                    } else if (GEOHASH.equals(field)) {, +                        if(parser.nextToken() == Token.VALUE_STRING) {, +                            point.resetFromGeoHash(parser.text());, +                            throw new ElasticSearchParseException("geohash must be a string");, +                        }, +                    } else {, +                        throw new ElasticSearchParseException("field must be either '" + LATITUDE + "', '" + LONGITUDE + "' or '" + GEOHASH + "'");, +++ b/src/main/java/org/elasticsearch/common/geo/GeoPoint.java, +    public static final String GEOHASH = GeoPointFieldMapper.Names.GEOHASH;, +                    } else if (GEOHASH.equals(field)) {, +                        if(parser.nextToken() == Token.VALUE_STRING) {, +                            point.resetFromGeoHash(parser.text());, +                            throw new ElasticSearchParseException("geohash must be a string");, +                        }, +                    } else {, +                        throw new ElasticSearchParseException("field must be either '" + LATITUDE + "', '" + LONGITUDE + "' or '" + GEOHASH + "'");, +++ b/src/main/java/org/elasticsearch/index/query/GeoBoundingBoxFilterParser.java, +import org.elasticsearch.ElasticSearchParseException;, +, +    public static final String TOP_LEFT = "top_left";, +    public static final String TOPLEFT = "topLeft";, +    public static final String BOTTOM_RIGHT = "bottom_right";, +    public static final String BOTTOMRIGHT = "bottomRight";, +    public static final String FIELD = "field";, +                        if (FIELD.equals(currentFieldName)) {, +                        } else if (TOP_LEFT.equals(currentFieldName) || TOPLEFT.equals(currentFieldName)) {, +                            GeoPoint.parse(parser, topLeft);, +                        } else if ( BOTTOM_RIGHT.equals(currentFieldName) || BOTTOMRIGHT.equals(currentFieldName)) {, +                            GeoPoint.parse(parser, bottomRight);, +                            throw new ElasticSearchParseException("Unexpected field [" + currentFieldName + "]");, +                    } else {, +                        throw new ElasticSearchParseException("fieldname expected but [" + token + "] found");, +++ b/src/main/java/org/elasticsearch/common/geo/GeoPoint.java, +    public static final String GEOHASH = GeoPointFieldMapper.Names.GEOHASH;, +                    } else if (GEOHASH.equals(field)) {, +                        if(parser.nextToken() == Token.VALUE_STRING) {, +                            point.resetFromGeoHash(parser.text());, +                            throw new ElasticSearchParseException("geohash must be a string");, +                        }, +                    } else {, +                        throw new ElasticSearchParseException("field must be either '" + LATITUDE + "', '" + LONGITUDE + "' or '" + GEOHASH + "'");, +++ b/src/main/java/org/elasticsearch/index/query/GeoBoundingBoxFilterParser.java, +import org.elasticsearch.ElasticSearchParseException;, +, +    public static final String TOP_LEFT = "top_left";, +    public static final String TOPLEFT = "topLeft";, +    public static final String BOTTOM_RIGHT = "bottom_right";, +    public static final String BOTTOMRIGHT = "bottomRight";, +    public static final String FIELD = "field";, +                        if (FIELD.equals(currentFieldName)) {, +                        } else if (TOP_LEFT.equals(currentFieldName) || TOPLEFT.equals(currentFieldName)) {, +                            GeoPoint.parse(parser, topLeft);, +                        } else if ( BOTTOM_RIGHT.equals(currentFieldName) || BOTTOMRIGHT.equals(currentFieldName)) {, +                            GeoPoint.parse(parser, bottomRight);, +                            throw new ElasticSearchParseException("Unexpected field [" + currentFieldName + "]");, +                    } else {, +                        throw new ElasticSearchParseException("fieldname expected but [" + token + "] found");, +++ b/src/main/java/org/elasticsearch/index/query/GeoDistanceFilterParser.java, +                GeoPoint.parse(parser, point);, +++ b/src/main/java/org/elasticsearch/common/geo/GeoPoint.java, +    public static final String GEOHASH = GeoPointFieldMapper.Names.GEOHASH;, +                    } else if (GEOHASH.equals(field)) {, +                        if(parser.nextToken() == Token.VALUE_STRING) {, +                            point.resetFromGeoHash(parser.text());, +                            throw new ElasticSearchParseException("geohash must be a string");, +                        }, +                    } else {, +                        throw new ElasticSearchParseException("field must be either '" + LATITUDE + "', '" + LONGITUDE + "' or '" + GEOHASH + "'");, +++ b/src/main/java/org/elasticsearch/index/query/GeoBoundingBoxFilterParser.java, +import org.elasticsearch.ElasticSearchParseException;, +, +    public static final String TOP_LEFT = "top_left";, +    public static final String TOPLEFT = "topLeft";, +    public static final String BOTTOM_RIGHT = "bottom_right";, +    public static final String BOTTOMRIGHT = "bottomRight";, +    public static final String FIELD = "field";, +                        if (FIELD.equals(currentFieldName)) {, +                        } else if (TOP_LEFT.equals(currentFieldName) || TOPLEFT.equals(currentFieldName)) {, +                            GeoPoint.parse(parser, topLeft);, +                        } else if ( BOTTOM_RIGHT.equals(currentFieldName) || BOTTOMRIGHT.equals(currentFieldName)) {, +                            GeoPoint.parse(parser, bottomRight);, +                            throw new ElasticSearchParseException("Unexpected field [" + currentFieldName + "]");, +                    } else {, +                        throw new ElasticSearchParseException("fieldname expected but [" + token + "] found");, +++ b/src/main/java/org/elasticsearch/index/query/GeoDistanceFilterParser.java, +                GeoPoint.parse(parser, point);, +++ b/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeFilterParser.java, +                GeoPoint.parse(parser, point);, +                GeoPoint.parse(parser, point);, +++ b/src/main/java/org/elasticsearch/common/geo/GeoPoint.java, +    public static final String GEOHASH = GeoPointFieldMapper.Names.GEOHASH;, +                    } else if (GEOHASH.equals(field)) {, +                        if(parser.nextToken() == Token.VALUE_STRING) {, +                            point.resetFromGeoHash(parser.text());, +                            throw new ElasticSearchParseException("geohash must be a string");, +                        }, +                    } else {, +                        throw new ElasticSearchParseException("field must be either '" + LATITUDE + "', '" + LONGITUDE + "' or '" + GEOHASH + "'");]