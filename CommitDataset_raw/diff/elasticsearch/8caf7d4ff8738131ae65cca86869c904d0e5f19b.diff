[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +, +        try (BulkProcessor processor = BulkProcessor.builder(hlClient::bulkAsync, listener), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +, +        try (BulkProcessor processor = BulkProcessor.builder(hlClient::bulkAsync, listener), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +import org.elasticsearch.threadpool.Scheduler;, +            BulkProcessor.Listener listener = new BulkProcessor.Listener() { // <1>, +                    // <2>, +                    // <3>, +                    // <4>, +            BulkProcessor bulkProcessor = BulkProcessor.builder(client::bulkAsync, listener).build(); // <5>, +            BulkProcessor.Builder builder = BulkProcessor.builder(client::bulkAsync, listener);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +, +        try (BulkProcessor processor = BulkProcessor.builder(hlClient::bulkAsync, listener), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +import org.elasticsearch.threadpool.Scheduler;, +            BulkProcessor.Listener listener = new BulkProcessor.Listener() { // <1>, +                    // <2>, +                    // <3>, +                    // <4>, +            BulkProcessor bulkProcessor = BulkProcessor.builder(client::bulkAsync, listener).build(); // <5>, +            BulkProcessor.Builder builder = BulkProcessor.builder(client::bulkAsync, listener);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.threadpool.Scheduler;, +import java.util.concurrent.ScheduledThreadPoolExecutor;, +        private final Scheduler scheduler;, +        private final Runnable onClose;, +        private Builder(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer, Listener listener,, +                        Scheduler scheduler, Runnable onClose) {, +            this.scheduler = scheduler;, +            this.onClose = onClose;, +            return new BulkProcessor(consumer, backoffPolicy, listener, concurrentRequests, bulkActions, bulkSize, flushInterval,, +                    scheduler, onClose);, +        return new Builder(client::bulk, listener, client.threadPool(), () -> {});, +    }, +    public static Builder builder(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer, Listener listener) {, +        Objects.requireNonNull(consumer, "consumer");, +        Objects.requireNonNull(listener, "listener");, +        final ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = Scheduler.initScheduler(Settings.EMPTY);, +        return new Builder(consumer, listener,, +                (delay, executor, command) -> scheduledThreadPoolExecutor.schedule(command, delay.millis(), TimeUnit.MILLISECONDS),, +                () -> Scheduler.terminate(scheduledThreadPoolExecutor, 10, TimeUnit.SECONDS));, +    private final Scheduler.Cancellable cancellableFlushTask;, +    private final Scheduler scheduler;, +    private final Runnable onClose;, +                  Scheduler scheduler, Runnable onClose) {, +        this.scheduler = scheduler;, +        this.bulkRequestHandler = new BulkRequestHandler(consumer, backoffPolicy, listener, scheduler, concurrentRequests);, +        this.cancellableFlushTask = startFlushTask(flushInterval, scheduler);, +        this.onClose = onClose;, +        onClose.run();, +    private Scheduler.Cancellable startFlushTask(TimeValue flushInterval, Scheduler scheduler) {, +            return new Scheduler.Cancellable() {, +        final Runnable flushRunnable = scheduler.preserveContext(new Flush());, +        return scheduler.scheduleWithFixedDelay(flushRunnable, flushInterval, ThreadPool.Names.GENERIC);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +, +        try (BulkProcessor processor = BulkProcessor.builder(hlClient::bulkAsync, listener), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +import org.elasticsearch.threadpool.Scheduler;, +            BulkProcessor.Listener listener = new BulkProcessor.Listener() { // <1>, +                    // <2>, +                    // <3>, +                    // <4>, +            BulkProcessor bulkProcessor = BulkProcessor.builder(client::bulkAsync, listener).build(); // <5>, +            BulkProcessor.Builder builder = BulkProcessor.builder(client::bulkAsync, listener);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.threadpool.Scheduler;, +import java.util.concurrent.ScheduledThreadPoolExecutor;, +        private final Scheduler scheduler;, +        private final Runnable onClose;, +        private Builder(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer, Listener listener,, +                        Scheduler scheduler, Runnable onClose) {, +            this.scheduler = scheduler;, +            this.onClose = onClose;, +            return new BulkProcessor(consumer, backoffPolicy, listener, concurrentRequests, bulkActions, bulkSize, flushInterval,, +                    scheduler, onClose);, +        return new Builder(client::bulk, listener, client.threadPool(), () -> {});, +    }, +    public static Builder builder(BiConsumer<BulkRequest, ActionListener<BulkResponse>> consumer, Listener listener) {, +        Objects.requireNonNull(consumer, "consumer");, +        Objects.requireNonNull(listener, "listener");, +        final ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = Scheduler.initScheduler(Settings.EMPTY);, +        return new Builder(consumer, listener,, +                (delay, executor, command) -> scheduledThreadPoolExecutor.schedule(command, delay.millis(), TimeUnit.MILLISECONDS),, +                () -> Scheduler.terminate(scheduledThreadPoolExecutor, 10, TimeUnit.SECONDS));, +    private final Scheduler.Cancellable cancellableFlushTask;, +    private final Scheduler scheduler;, +    private final Runnable onClose;, +                  Scheduler scheduler, Runnable onClose) {, +        this.scheduler = scheduler;, +        this.bulkRequestHandler = new BulkRequestHandler(consumer, backoffPolicy, listener, scheduler, concurrentRequests);, +        this.cancellableFlushTask = startFlushTask(flushInterval, scheduler);, +        this.onClose = onClose;, +        onClose.run();]