[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java, +import org.elasticsearch.ResourceNotFoundException;, +                if (licenseInfo == null) {, +                    listener.onFailure(new ResourceNotFoundException("license info is missing for cluster [" + clusterAlias.get() + "]"));, +                    return;, +                }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java, +import org.elasticsearch.ResourceNotFoundException;, +                if (licenseInfo == null) {, +                    listener.onFailure(new ResourceNotFoundException("license info is missing for cluster [" + clusterAlias.get() + "]"));, +                    return;, +                }, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/RemoteClusterLicenseCheckerTests.java, +import org.elasticsearch.ResourceNotFoundException;, +    public void testCheckRemoteClusterLicencesNoLicenseMetadata() {, +        final ThreadPool threadPool = createMockThreadPool();, +        final Client client = createMockClient(threadPool);, +        doAnswer(invocationMock -> {, +            @SuppressWarnings("unchecked") ActionListener<XPackInfoResponse> listener =, +                (ActionListener<XPackInfoResponse>) invocationMock.getArguments()[2];, +            listener.onResponse(new XPackInfoResponse(null, null, null));, +            return null;, +        }).when(client).execute(same(XPackInfoAction.INSTANCE), any(), any());, +, +        final RemoteClusterLicenseChecker licenseChecker =, +            new RemoteClusterLicenseChecker(client, XPackLicenseState::isPlatinumOrTrialOperationMode);, +        final AtomicReference<Exception> exception = new AtomicReference<>();, +, +        licenseChecker.checkRemoteClusterLicenses(, +            Collections.singletonList("remote"),, +            doubleInvocationProtectingListener(new ActionListener<RemoteClusterLicenseChecker.LicenseCheck>() {, +, +                @Override, +                public void onResponse(final RemoteClusterLicenseChecker.LicenseCheck response) {, +                    fail();, +                }, +, +                @Override, +                public void onFailure(final Exception e) {, +                    exception.set(e);, +                }, +, +            }));, +, +        assertNotNull(exception.get());, +        assertThat(exception.get(), instanceOf(ResourceNotFoundException.class));, +        assertThat(exception.get().getMessage(), equalTo("license info is missing for cluster [remote]"));, +    }, +]