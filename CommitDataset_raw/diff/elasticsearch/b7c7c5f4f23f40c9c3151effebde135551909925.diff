[+++ b/core/pom.xml, +                        <exclude>src/test/java/org/elasticsearch/common/collect/EvictingQueueTests.java</exclude>, +++ b/core/pom.xml, +                        <exclude>src/test/java/org/elasticsearch/common/collect/EvictingQueueTests.java</exclude>, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +        private final ClusterState clusterState;, +            clusterState = clusterService.state();, +                final DiscoveryNode node = clusterState.nodes().nodes().get(nodeId);, +++ b/core/pom.xml, +                        <exclude>src/test/java/org/elasticsearch/common/collect/EvictingQueueTests.java</exclude>, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +        private final ClusterState clusterState;, +            clusterState = clusterService.state();, +                final DiscoveryNode node = clusterState.nodes().nodes().get(nodeId);, +++ b/core/src/main/java/org/elasticsearch/common/collect/EvictingQueue.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.collect;, +, +import java.util.ArrayDeque;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.Queue;, +, +public class EvictingQueue<T> implements Queue<T> {, +    private final int maximumSize;, +    private final ArrayDeque<T> queue;, +, +    public EvictingQueue(int maximumSize) {, +        if (maximumSize < 0) {, +            throw new IllegalArgumentException("maximumSize < 0");, +        }, +        this.maximumSize = maximumSize;, +        this.queue = new ArrayDeque<>(maximumSize);, +    }, +, +    public int remainingCapacity() {, +        return this.maximumSize - this.size();, +    }, +, +    @Override, +    public boolean add(T t) {, +        if (maximumSize == 0) {, +            return true;, +        }, +        if (queue.size() == maximumSize) {, +            queue.remove();, +        }, +        queue.add(t);, +        return true;, +    }, +, +    @Override, +    public boolean offer(T t) {, +        return add(t);, +    }, +, +    @Override, +    public T remove() {, +        return queue.remove();, +    }, +, +    @Override, +    public T poll() {, +        return queue.poll();, +    }, +, +    @Override, +    public T element() {, +        return queue.element();, +    }, +, +    @Override, +    public T peek() {, +        return queue.peek();, +    }, +, +    @Override, +    public int size() {, +        return queue.size();, +    }, +, +    @Override]