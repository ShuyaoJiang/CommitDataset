[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java, +            return ShapeBuilders.newPoint(node.coordinate);, +            return ShapeBuilders.newCircleBuilder().center(coordinates.coordinate).radius(radius);, +            return ShapeBuilders.newEnvelope(orientation).topLeft(uL).bottomRight(lR);, +            LineStringBuilder line = ShapeBuilders.newLineString();, +            MultiLineStringBuilder multiline = ShapeBuilders.newMultiLinestring();, +            MultiPolygonBuilder polygons = ShapeBuilders.newMultiPolygon(orientation);, +            GeometryCollectionBuilder geometryCollection = ShapeBuilders.newGeometryCollection( (mapper == null) ? Orientation.RIGHT : mapper, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        configureJarManifest(project), +        project.afterEvaluate {, +                manifest {, +                    attributes('X-Compile-Elasticsearch-Version': VersionProperties.elasticsearch,, +                               'X-Compile-Lucene-Version': VersionProperties.lucene), +                }, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java, +            return ShapeBuilders.newPoint(node.coordinate);, +            return ShapeBuilders.newCircleBuilder().center(coordinates.coordinate).radius(radius);, +            return ShapeBuilders.newEnvelope(orientation).topLeft(uL).bottomRight(lR);, +            LineStringBuilder line = ShapeBuilders.newLineString();, +            MultiLineStringBuilder multiline = ShapeBuilders.newMultiLinestring();, +            MultiPolygonBuilder polygons = ShapeBuilders.newMultiPolygon(orientation);, +            GeometryCollectionBuilder geometryCollection = ShapeBuilders.newGeometryCollection( (mapper == null) ? Orientation.RIGHT : mapper, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilders.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.geo.builders;, +, +import com.vividsolutions.jts.geom.Coordinate;, +, +/**, + * A collection of static methods for creating ShapeBuilders., + */, +public class ShapeBuilders {, +, +    /**, +     * Create a new point, +     *, +     * @param longitude longitude of the point, +     * @param latitude latitude of the point, +     * @return a new {@link PointBuilder}, +     */, +    public static PointBuilder newPoint(double longitude, double latitude) {, +        return ShapeBuilders.newPoint(new Coordinate(longitude, latitude));, +    }, +, +    /**, +     * Create a new {@link PointBuilder} from a {@link Coordinate}, +     * @param coordinate coordinate defining the position of the point, +     * @return a new {@link PointBuilder}, +     */, +    public static PointBuilder newPoint(Coordinate coordinate) {, +        return new PointBuilder().coordinate(coordinate);, +    }, +, +    /**, +     * Create a new set of points, +     * @return new {@link MultiPointBuilder}, +     */, +    public static MultiPointBuilder newMultiPoint() {, +        return new MultiPointBuilder();, +    }, +, +    /**, +     * Create a new lineString, +     * @return a new {@link LineStringBuilder}, +     */, +    public static LineStringBuilder newLineString() {, +        return new LineStringBuilder();]