[+++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +import org.apache.lucene.search.SortField;, +import org.elasticsearch.index.fielddata.IndexFieldData;, +import org.elasticsearch.index.fielddata.IndexFieldData.XFieldComparatorSource.Nested;, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.query.QueryShardContext;, +import org.elasticsearch.index.query.QueryShardException;, +import org.elasticsearch.search.MultiValueMode;, +    /**, +     * special field name to sort by index order, +     */, +    public static final String DOC_FIELD_NAME = "_doc";, +    private static final SortField SORT_DOC = new SortField(null, SortField.Type.DOC);, +    private static final SortField SORT_DOC_REVERSE = new SortField(null, SortField.Type.DOC, true);, +, +    public FieldSortBuilder setNestedFilter(QueryBuilder<?> nestedFilter) {, +    public QueryBuilder<?> getNestedFilter() {, +    public SortField build(QueryShardContext context) throws IOException {, +        if (DOC_FIELD_NAME.equals(fieldName)) {, +            if (order == SortOrder.DESC) {, +                return SORT_DOC_REVERSE;, +            } else {, +                return SORT_DOC;, +            }, +        } else {, +            MappedFieldType fieldType = context.fieldMapper(fieldName);, +            if (fieldType == null) {, +                if (unmappedType != null) {, +                    fieldType = context.getMapperService().unmappedFieldType(unmappedType);, +                } else {, +                    throw new QueryShardException(context, "No mapping found for [" + fieldName + "] in order to sort on");, +                }, +            }, +, +            if (!fieldType.isSortable()) {, +                throw new QueryShardException(context, "Sorting not supported for field[" + fieldName + "]");, +            }, +, +            MultiValueMode localSortMode = null;, +            if (sortMode != null) {, +                localSortMode = MultiValueMode.fromString(sortMode.toString());, +            }, +, +            if (fieldType.isNumeric() == false && (sortMode == SortMode.SUM || sortMode == SortMode.AVG || sortMode == SortMode.MEDIAN)) {, +                throw new QueryShardException(context, "we only support AVG, MEDIAN and SUM on number based fields");, +            }, +, +            boolean reverse = (order == SortOrder.DESC);, +            if (localSortMode == null) {, +                localSortMode = reverse ? MultiValueMode.MAX : MultiValueMode.MIN;, +            }, +, +            final Nested nested = resolveNested(context, nestedPath, nestedFilter);, +            IndexFieldData.XFieldComparatorSource fieldComparatorSource = context.getForField(fieldType), +                    .comparatorSource(missing, localSortMode, nested);, +            return new SortField(fieldType.name(), fieldComparatorSource, reverse);, +        }, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +import org.apache.lucene.search.SortField;, +import org.elasticsearch.index.fielddata.IndexFieldData;, +import org.elasticsearch.index.fielddata.IndexFieldData.XFieldComparatorSource.Nested;, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.query.QueryShardContext;, +import org.elasticsearch.index.query.QueryShardException;, +import org.elasticsearch.search.MultiValueMode;, +    /**, +     * special field name to sort by index order, +     */, +    public static final String DOC_FIELD_NAME = "_doc";, +    private static final SortField SORT_DOC = new SortField(null, SortField.Type.DOC);, +    private static final SortField SORT_DOC_REVERSE = new SortField(null, SortField.Type.DOC, true);, +, +    public FieldSortBuilder setNestedFilter(QueryBuilder<?> nestedFilter) {, +    public QueryBuilder<?> getNestedFilter() {, +    public SortField build(QueryShardContext context) throws IOException {, +        if (DOC_FIELD_NAME.equals(fieldName)) {, +            if (order == SortOrder.DESC) {, +                return SORT_DOC_REVERSE;, +            } else {, +                return SORT_DOC;, +            }, +        } else {, +            MappedFieldType fieldType = context.fieldMapper(fieldName);, +            if (fieldType == null) {, +                if (unmappedType != null) {, +                    fieldType = context.getMapperService().unmappedFieldType(unmappedType);, +                } else {, +                    throw new QueryShardException(context, "No mapping found for [" + fieldName + "] in order to sort on");, +                }, +            }, +, +            if (!fieldType.isSortable()) {, +                throw new QueryShardException(context, "Sorting not supported for field[" + fieldName + "]");, +            }, +, +            MultiValueMode localSortMode = null;, +            if (sortMode != null) {]