[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        final long startTime = System.currentTimeMillis();, +        if (autoCreateIndex.needToCheck()) {, +                if (autoCreateIndex.shouldAutoCreate(index, state)) {, +        final long startTime = System.currentTimeMillis();, +        executeBulk(bulkRequest, startTime, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTime) {, +        // protect ourselves against time going backwards, +        return Math.max(1, System.currentTimeMillis() - startTime);, +    private void executeBulk(final BulkRequest bulkRequest, final long startTime, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        final long startTime = System.currentTimeMillis();, +        if (autoCreateIndex.needToCheck()) {, +                if (autoCreateIndex.shouldAutoCreate(index, state)) {, +        final long startTime = System.currentTimeMillis();, +        executeBulk(bulkRequest, startTime, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTime) {, +        // protect ourselves against time going backwards, +        return Math.max(1, System.currentTimeMillis() - startTime);, +    private void executeBulk(final BulkRequest bulkRequest, final long startTime, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +    private class AsyncAction {, +        private AsyncAction(Task task, NodesRequest request, ActionListener<NodesResponse> listener) {, +        private void start() {, +                    } else if (!clusterService.localNode().shouldConnectTo(node) && !clusterService.localNode().equals(node)) {, +                        // the check "!clusterService.localNode().equals(node)" is to maintain backward comp. where before, +                        // we allowed to connect from "local" client node to itself, certain tests rely on it, if we remove it, we need to fix, +                        // those (and they randomize the client node usage, so tricky to find when), +                        onFailure(idx, nodeId, new NodeShouldNotConnectException(clusterService.localNode(), node));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +                    segments = indexShard.segmentStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStatsFlags.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        final long startTime = System.currentTimeMillis();, +        if (autoCreateIndex.needToCheck()) {, +                if (autoCreateIndex.shouldAutoCreate(index, state)) {, +        final long startTime = System.currentTimeMillis();, +        executeBulk(bulkRequest, startTime, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTime) {, +        // protect ourselves against time going backwards, +        return Math.max(1, System.currentTimeMillis() - startTime);, +    private void executeBulk(final BulkRequest bulkRequest, final long startTime, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +, +++ b/core/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesAction.java, +    private class AsyncAction {, +        private AsyncAction(Task task, NodesRequest request, ActionListener<NodesResponse> listener) {, +        private void start() {, +                    } else if (!clusterService.localNode().shouldConnectTo(node) && !clusterService.localNode().equals(node)) {, +                        // the check "!clusterService.localNode().equals(node)" is to maintain backward comp. where before, +                        // we allowed to connect from "local" client node to itself, certain tests rely on it, if we remove it, we need to fix, +                        // those (and they randomize the client node usage, so tricky to find when), +                        onFailure(idx, nodeId, new NodeShouldNotConnectException(clusterService.localNode(), node));, +++ b/core/src/main/java/org/elasticsearch/action/support/tasks/TransportTasksAction.java, +                        } else if (!clusterService.localNode().shouldConnectTo(node) && !clusterService.localNode().equals(node)) {, +                            // the check "!clusterService.localNode().equals(node)" is to maintain backward comp. where before, +                            // we allowed to connect from "local" client node to itself, certain tests rely on it, if we remove it, we, +                            // need to fix]