[+++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +            case 5:, +                return "geo_point";, +                throw new IllegalArgumentException("Unknown type 1. " + type);, +    protected void updateMinMax(T min, T max) {, +    public static class GeoPoint extends FieldStats<org.elasticsearch.common.geo.GeoPoint> {, +        public GeoPoint(long maxDoc, long docCount, long sumDocFreq, long sumTotalTermFreq,, +                  boolean isSearchable, boolean isAggregatable) {, +            super((byte) 5, maxDoc, docCount, sumDocFreq, sumTotalTermFreq,, +                isSearchable, isAggregatable);, +        }, +, +        public GeoPoint(long maxDoc, long docCount, long sumDocFreq, long sumTotalTermFreq,, +                        boolean isSearchable, boolean isAggregatable,, +                        org.elasticsearch.common.geo.GeoPoint minValue, org.elasticsearch.common.geo.GeoPoint maxValue) {, +            super((byte) 5, maxDoc, docCount, sumDocFreq, sumTotalTermFreq, isSearchable, isAggregatable,, +                minValue, maxValue);, +        }, +, +        @Override, +        public org.elasticsearch.common.geo.GeoPoint valueOf(String value, String fmt) {, +            return org.elasticsearch.common.geo.GeoPoint.parseFromLatLon(value);, +        }, +, +        @Override, +        protected void updateMinMax(org.elasticsearch.common.geo.GeoPoint min, org.elasticsearch.common.geo.GeoPoint max) {, +            minValue.reset(Math.min(min.lat(), minValue.lat()), Math.min(min.lon(), minValue.lon()));, +            maxValue.reset(Math.max(max.lat(), maxValue.lat()), Math.max(max.lon(), maxValue.lon()));, +        }, +, +        @Override, +        public int compare(org.elasticsearch.common.geo.GeoPoint p1, org.elasticsearch.common.geo.GeoPoint p2) {, +            throw new IllegalArgumentException("compare is not supported for geo_point field stats");, +        }, +, +        @Override, +        public void writeMinMax(StreamOutput out) throws IOException {, +            out.writeDouble(minValue.lat());, +            out.writeDouble(minValue.lon());, +            out.writeDouble(maxValue.lat());, +            out.writeDouble(maxValue.lon());, +        }, +, +        @Override, +        public String getMinValueAsString() {, +            return minValue.toString();, +        }, +, +        @Override, +        public String getMaxValueAsString() {, +            return maxValue.toString();, +        }, +    }, +, +            case 4: {, +            }, +            case 5: {, +                if (hasMinMax == false) {, +                    return new GeoPoint(maxDoc, docCount, sumDocFreq, sumTotalTermFreq,, +                        isSearchable, isAggregatable);, +                }, +                org.elasticsearch.common.geo.GeoPoint min = new org.elasticsearch.common.geo.GeoPoint(in.readDouble(), in.readDouble());, +                org.elasticsearch.common.geo.GeoPoint max = new org.elasticsearch.common.geo.GeoPoint(in.readDouble(), in.readDouble());, +                return new GeoPoint(maxDoc, docCount, sumDocFreq, sumTotalTermFreq,, +                    isSearchable, isAggregatable, min, max);, +            }, +                throw new IllegalArgumentException("Unknown type 2. " + type);, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +            case 5:, +                return "geo_point";, +                throw new IllegalArgumentException("Unknown type 1. " + type);, +    protected void updateMinMax(T min, T max) {, +    public static class GeoPoint extends FieldStats<org.elasticsearch.common.geo.GeoPoint> {, +        public GeoPoint(long maxDoc, long docCount, long sumDocFreq, long sumTotalTermFreq,, +                  boolean isSearchable, boolean isAggregatable) {, +            super((byte) 5, maxDoc, docCount, sumDocFreq, sumTotalTermFreq,, +                isSearchable, isAggregatable);, +        }, +, +        public GeoPoint(long maxDoc, long docCount, long sumDocFreq, long sumTotalTermFreq,, +                        boolean isSearchable, boolean isAggregatable,, +                        org.elasticsearch.common.geo.GeoPoint minValue, org.elasticsearch.common.geo.GeoPoint maxValue) {, +            super((byte) 5, maxDoc, docCount, sumDocFreq, sumTotalTermFreq, isSearchable, isAggregatable,, +                minValue, maxValue);, +        }, +, +        @Override, +        public org.elasticsearch.common.geo.GeoPoint valueOf(String value, String fmt) {, +            return org.elasticsearch.common.geo.GeoPoint.parseFromLatLon(value);, +        }, +, +        @Override, +        protected void updateMinMax(org.elasticsearch.common.geo.GeoPoint min, org.elasticsearch.common.geo.GeoPoint max) {, +            minValue.reset(Math.min(min.lat(), minValue.lat()), Math.min(min.lon(), minValue.lon()));, +            maxValue.reset(Math.max(max.lat(), maxValue.lat()), Math.max(max.lon(), maxValue.lon()));, +        }, +, +        @Override, +        public int compare(org.elasticsearch.common.geo.GeoPoint p1, org.elasticsearch.common.geo.GeoPoint p2) {, +            throw new IllegalArgumentException("compare is not supported for geo_point field stats");]