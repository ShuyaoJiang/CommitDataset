[+++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        return rangeFilter(lowerTerm, upperTerm, includeLower, includeUpper, null, context, null);, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable DateTimeZone timeZone, @Nullable QueryParseContext context, @Nullable Boolean explicitCaching) {, +        return rangeFilter(parseContext, lowerTerm, upperTerm, includeLower, includeUpper, null, context, null);, +    public Filter rangeFilter(QueryParseContext parseContext, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable DateTimeZone timeZone, @Nullable QueryParseContext context, @Nullable Boolean explicitCaching) {, +        boolean cache;, +        boolean cacheable = true;, +                cacheable = !hasDateExpressionWithNoRounding(value);, +                cacheable = cacheable && !hasDateExpressionWithNoRounding(value);, +        if (explicitCaching != null) {, +            if (explicitCaching) {, +                cache = cacheable;, +            } else {, +                cache = false;, +            }, +        } else {, +            cache = cacheable;, +        }, +, +    private boolean hasDateExpressionWithNoRounding(String value) {, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        return rangeFilter(lowerTerm, upperTerm, includeLower, includeUpper, null, context, null);, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable DateTimeZone timeZone, @Nullable QueryParseContext context, @Nullable Boolean explicitCaching) {, +        return rangeFilter(parseContext, lowerTerm, upperTerm, includeLower, includeUpper, null, context, null);, +    public Filter rangeFilter(QueryParseContext parseContext, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable DateTimeZone timeZone, @Nullable QueryParseContext context, @Nullable Boolean explicitCaching) {, +        boolean cache;, +        boolean cacheable = true;, +                cacheable = !hasDateExpressionWithNoRounding(value);, +                cacheable = cacheable && !hasDateExpressionWithNoRounding(value);, +        if (explicitCaching != null) {, +            if (explicitCaching) {, +                cache = cacheable;, +            } else {, +                cache = false;, +            }, +        } else {, +            cache = cacheable;, +        }, +, +    private boolean hasDateExpressionWithNoRounding(String value) {, +++ b/src/main/java/org/elasticsearch/index/query/RangeFilterParser.java, +        Boolean explicitlyCached = cache;, +        if (explicitlyCached == null || explicitlyCached) {, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        return rangeFilter(lowerTerm, upperTerm, includeLower, includeUpper, null, context, null);, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable DateTimeZone timeZone, @Nullable QueryParseContext context, @Nullable Boolean explicitCaching) {, +        return rangeFilter(parseContext, lowerTerm, upperTerm, includeLower, includeUpper, null, context, null);, +    public Filter rangeFilter(QueryParseContext parseContext, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable DateTimeZone timeZone, @Nullable QueryParseContext context, @Nullable Boolean explicitCaching) {, +        boolean cache;, +        boolean cacheable = true;, +                cacheable = !hasDateExpressionWithNoRounding(value);, +                cacheable = cacheable && !hasDateExpressionWithNoRounding(value);, +        if (explicitCaching != null) {, +            if (explicitCaching) {, +                cache = cacheable;, +            } else {, +                cache = false;, +            }, +        } else {, +            cache = cacheable;, +        }, +, +    private boolean hasDateExpressionWithNoRounding(String value) {, +++ b/src/main/java/org/elasticsearch/index/query/RangeFilterParser.java, +        Boolean explicitlyCached = cache;, +        if (explicitlyCached == null || explicitlyCached) {, +        }, +++ b/src/test/java/org/elasticsearch/index/query/IndexQueryParserFilterCachingTests.java, +    /**, +     * Runner to test our cache cases when using date range filter, +     * @param lte could be null, +     * @param gte could be null, +     * @param forcedCache true if we want to force the cache, false if we want to force no cache, null either, +     * @param expectedCache true if we expect a cached filter, +     */, +    private void testDateRangeFilterCache(IndexQueryParserService queryParser, Object gte, Object lte, Boolean forcedCache, boolean expectedCache) {, +        RangeFilterBuilder filterBuilder = FilterBuilders.rangeFilter("born"), +                .gte(gte), +                .lte(lte);, +        if (forcedCache != null) {, +            filterBuilder.cache(forcedCache);, +        }, +, +        Query parsedQuery = queryParser.parse(QueryBuilders.constantScoreQuery(filterBuilder)).query();, +        assertThat(parsedQuery, instanceOf(ConstantScoreQuery.class));, +, +, +        if (expectedCache) {, +            if (((ConstantScoreQuery)parsedQuery).getFilter() instanceof CachedFilter) {, +                logger.info("gte [{}], lte [{}], _cache [{}] is cached", gte, lte, forcedCache);, +            } else {, +                logger.warn("gte [{}], lte [{}], _cache [{}] should be cached", gte, lte, forcedCache);, +            }, +        } else {, +            if (((ConstantScoreQuery)parsedQuery).getFilter() instanceof NoCacheFilter) {, +                logger.info("gte [{}], lte [{}], _cache [{}] is not cached", gte, lte, forcedCache);, +            } else {, +                logger.warn("gte [{}], lte [{}], _cache [{}] should not be cached", gte, lte, forcedCache);, +            }]