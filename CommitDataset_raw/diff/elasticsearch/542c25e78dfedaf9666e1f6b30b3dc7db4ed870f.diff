[+++ b/core/src/main/java/org/elasticsearch/index/analysis/FieldNameAnalyzer.java, +    protected Analyzer getWrappedAnalyzer(String fieldName) {, +        Analyzer analyzer = analyzers.get(fieldName);, +        throw new IllegalArgumentException("Field [" + fieldName + "] has no associated analyzer");, +++ b/core/src/main/java/org/elasticsearch/index/analysis/FieldNameAnalyzer.java, +    protected Analyzer getWrappedAnalyzer(String fieldName) {, +        Analyzer analyzer = analyzers.get(fieldName);, +        throw new IllegalArgumentException("Field [" + fieldName + "] has no associated analyzer");, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/analysis/FieldNameAnalyzer.java, +    protected Analyzer getWrappedAnalyzer(String fieldName) {, +        Analyzer analyzer = analyzers.get(fieldName);, +        throw new IllegalArgumentException("Field [" + fieldName + "] has no associated analyzer");, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import java.util.function.Function;, +, +    private static final Function<MappedFieldType, Analyzer> INDEX_ANALYZER_EXTRACTOR = new Function<MappedFieldType, Analyzer>() {, +        public Analyzer apply(MappedFieldType fieldType) {, +            return fieldType.indexAnalyzer();, +        }, +    };, +    private static final Function<MappedFieldType, Analyzer> SEARCH_ANALYZER_EXTRACTOR = new Function<MappedFieldType, Analyzer>() {, +        public Analyzer apply(MappedFieldType fieldType) {, +            return fieldType.searchAnalyzer();, +        }, +    };, +    private static final Function<MappedFieldType, Analyzer> SEARCH_QUOTE_ANALYZER_EXTRACTOR = new Function<MappedFieldType, Analyzer>() {, +        public Analyzer apply(MappedFieldType fieldType) {, +            return fieldType.searchQuoteAnalyzer();, +        }, +    };, +, +    private final MapperAnalyzerWrapper indexAnalyzer;, +    private final MapperAnalyzerWrapper searchAnalyzer;, +    private final MapperAnalyzerWrapper searchQuoteAnalyzer;, +        this.indexAnalyzer = new MapperAnalyzerWrapper(analysisService.defaultIndexAnalyzer(), INDEX_ANALYZER_EXTRACTOR);, +        this.searchAnalyzer = new MapperAnalyzerWrapper(analysisService.defaultSearchAnalyzer(), SEARCH_ANALYZER_EXTRACTOR);, +        this.searchQuoteAnalyzer = new MapperAnalyzerWrapper(analysisService.defaultSearchQuoteAnalyzer(), SEARCH_QUOTE_ANALYZER_EXTRACTOR);, +    public Analyzer indexAnalyzer() {, +        return this.indexAnalyzer;, +    }, +, +    /** An analyzer wrapper that can lookup fields within the index mappings */, +    final class MapperAnalyzerWrapper extends DelegatingAnalyzerWrapper {, +        private final Function<MappedFieldType, Analyzer> extractAnalyzer;, +        MapperAnalyzerWrapper(Analyzer defaultAnalyzer, Function<MappedFieldType, Analyzer> extractAnalyzer) {, +            this.extractAnalyzer = extractAnalyzer;, +            if (fieldType != null) {, +                Analyzer analyzer = extractAnalyzer.apply(fieldType);, +                if (analyzer != null) {, +                    return analyzer;, +++ b/core/src/main/java/org/elasticsearch/index/analysis/FieldNameAnalyzer.java, +    protected Analyzer getWrappedAnalyzer(String fieldName) {, +        Analyzer analyzer = analyzers.get(fieldName);, +        throw new IllegalArgumentException("Field [" + fieldName + "] has no associated analyzer");, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import java.util.function.Function;, +, +    private static final Function<MappedFieldType, Analyzer> INDEX_ANALYZER_EXTRACTOR = new Function<MappedFieldType, Analyzer>() {, +        public Analyzer apply(MappedFieldType fieldType) {, +            return fieldType.indexAnalyzer();, +        }, +    };, +    private static final Function<MappedFieldType, Analyzer> SEARCH_ANALYZER_EXTRACTOR = new Function<MappedFieldType, Analyzer>() {, +        public Analyzer apply(MappedFieldType fieldType) {, +            return fieldType.searchAnalyzer();, +        }, +    };, +    private static final Function<MappedFieldType, Analyzer> SEARCH_QUOTE_ANALYZER_EXTRACTOR = new Function<MappedFieldType, Analyzer>() {, +        public Analyzer apply(MappedFieldType fieldType) {, +            return fieldType.searchQuoteAnalyzer();, +        }, +    };, +, +    private final MapperAnalyzerWrapper indexAnalyzer;, +    private final MapperAnalyzerWrapper searchAnalyzer;, +    private final MapperAnalyzerWrapper searchQuoteAnalyzer;, +        this.indexAnalyzer = new MapperAnalyzerWrapper(analysisService.defaultIndexAnalyzer(), INDEX_ANALYZER_EXTRACTOR);, +        this.searchAnalyzer = new MapperAnalyzerWrapper(analysisService.defaultSearchAnalyzer(), SEARCH_ANALYZER_EXTRACTOR);, +        this.searchQuoteAnalyzer = new MapperAnalyzerWrapper(analysisService.defaultSearchQuoteAnalyzer(), SEARCH_QUOTE_ANALYZER_EXTRACTOR);, +    public Analyzer indexAnalyzer() {, +        return this.indexAnalyzer;, +    }, +, +    /** An analyzer wrapper that can lookup fields within the index mappings */, +    final class MapperAnalyzerWrapper extends DelegatingAnalyzerWrapper {, +        private final Function<MappedFieldType, Analyzer> extractAnalyzer;, +        MapperAnalyzerWrapper(Analyzer defaultAnalyzer, Function<MappedFieldType, Analyzer> extractAnalyzer) {, +            this.extractAnalyzer = extractAnalyzer;, +            if (fieldType != null) {, +                Analyzer analyzer = extractAnalyzer.apply(fieldType);, +                if (analyzer != null) {, +                    return analyzer;, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final TranslogRecoveryPerformer translogRecoveryPerformer = new TranslogRecoveryPerformer(shardId, mapperService, queryParserService, indexAliasesService, indexCache) {, +                mapperService.indexAnalyzer(), similarityService.similarity(), codecService, failedEngineListener, translogRecoveryPerformer, indexCache.filter(), indexCache.filterPolicy(), translogConfig);, +++ b/core/src/main/java/org/elasticsearch/index/analysis/FieldNameAnalyzer.java, +    protected Analyzer getWrappedAnalyzer(String fieldName) {]