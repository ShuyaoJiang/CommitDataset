[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                        indexRequest.id(UUID.randomBase64UUID());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                        indexRequest.id(UUID.randomBase64UUID());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +                indexRequest.id(UUID.randomBase64UUID());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                        indexRequest.id(UUID.randomBase64UUID());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +                indexRequest.id(UUID.randomBase64UUID());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/Base64.java, +import java.nio.charset.Charset;, +, +    public final static Charset PREFERRED_ENCODING = Charset.forName("US-ASCII");, +        byte[] bytes = s.getBytes(PREFERRED_ENCODING);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                        indexRequest.id(UUID.randomBase64UUID());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +                indexRequest.id(UUID.randomBase64UUID());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/Base64.java, +import java.nio.charset.Charset;, +, +    public final static Charset PREFERRED_ENCODING = Charset.forName("US-ASCII");, +        byte[] bytes = s.getBytes(PREFERRED_ENCODING);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/UUID.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +, +import java.io.IOException;, +    public static String randomBase64UUID() {, +        SecureRandom ng = numberGenerator;, +        if (ng == null) {, +            numberGenerator = ng = new SecureRandom();, +        }, +, +        byte[] randomBytes = new byte[16];, +        ng.nextBytes(randomBytes);, +        randomBytes[6] &= 0x0f;  /* clear version        */, +        randomBytes[6] |= 0x40;  /* set to version 4     */, +        randomBytes[8] &= 0x3f;  /* clear variant        */, +        randomBytes[8] |= 0x80;  /* set to IETF variant  */, +, +, +        try {, +            byte[] encoded = Base64.encodeBytesToBytes(randomBytes, 0, randomBytes.length, Base64.URL_SAFE);, +            // we know the bytes are 16, and not a multi of 3, so remove the 2 padding chars that are added, +            assert encoded[encoded.length - 1] == '=';, +            assert encoded[encoded.length - 2] == '=';, +            // we always have padding of two at the end, encode it differently, +            return new String(encoded, 0, encoded.length - 2, Base64.PREFERRED_ENCODING);, +        } catch (IOException e) {, +            throw new ElasticSearchIllegalStateException("should not be thrown");, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                        indexRequest.id(UUID.randomBase64UUID());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +                indexRequest.id(UUID.randomBase64UUID());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/Base64.java, +import java.nio.charset.Charset;, +, +    public final static Charset PREFERRED_ENCODING = Charset.forName("US-ASCII");, +        byte[] bytes = s.getBytes(PREFERRED_ENCODING);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/UUID.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +, +import java.io.IOException;, +    public static String randomBase64UUID() {, +        SecureRandom ng = numberGenerator;, +        if (ng == null) {, +            numberGenerator = ng = new SecureRandom();, +        }, +, +        byte[] randomBytes = new byte[16];, +        ng.nextBytes(randomBytes);, +        randomBytes[6] &= 0x0f;  /* clear version        */, +        randomBytes[6] |= 0x40;  /* set to version 4     */, +        randomBytes[8] &= 0x3f;  /* clear variant        */, +        randomBytes[8] |= 0x80;  /* set to IETF variant  */, +, +, +        try {, +            byte[] encoded = Base64.encodeBytesToBytes(randomBytes, 0, randomBytes.length, Base64.URL_SAFE);, +            // we know the bytes are 16, and not a multi of 3, so remove the 2 padding chars that are added, +            assert encoded[encoded.length - 1] == '=';, +            assert encoded[encoded.length - 2] == '=';, +            // we always have padding of two at the end, encode it differently, +            return new String(encoded, 0, encoded.length - 2, Base64.PREFERRED_ENCODING);, +        } catch (IOException e) {, +            throw new ElasticSearchIllegalStateException("should not be thrown");, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +        String nodeId = UUID.randomBase64UUID();]