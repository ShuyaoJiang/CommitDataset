[+++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            searchSourceBuilder.parseXContent(context, aggParsers, null);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            searchSourceBuilder.parseXContent(context, aggParsers, null);, +++ b/core/src/main/java/org/elasticsearch/cluster/AbstractDiffable.java, +import org.elasticsearch.common.io.stream.StreamableReader;, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            searchSourceBuilder.parseXContent(context, aggParsers, null);, +++ b/core/src/main/java/org/elasticsearch/cluster/AbstractDiffable.java, +import org.elasticsearch.common.io.stream.StreamableReader;, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamableReader.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.common.io.stream;, +, +import java.io.IOException;, +, +/**, + * Implementers can be read from {@linkplain StreamInput} by calling their {@link #readFrom(StreamInput)} method., + *, + * Implementers of this interface that also implement {@link Writeable} should see advice there on how to do so., + */, +public interface StreamableReader<T> {, +    /**, +     * Reads an object of this type from the provided {@linkplain StreamInput}. The receiving instance remains unchanged., +     */, +    T readFrom(StreamInput in) throws IOException;, +}, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            searchSourceBuilder.parseXContent(context, aggParsers, null);, +++ b/core/src/main/java/org/elasticsearch/cluster/AbstractDiffable.java, +import org.elasticsearch.common.io.stream.StreamableReader;, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamableReader.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.common.io.stream;, +, +import java.io.IOException;, +, +/**, + * Implementers can be read from {@linkplain StreamInput} by calling their {@link #readFrom(StreamInput)} method., + *, + * Implementers of this interface that also implement {@link Writeable} should see advice there on how to do so., + */, +public interface StreamableReader<T> {, +    /**, +     * Reads an object of this type from the provided {@linkplain StreamInput}. The receiving instance remains unchanged., +     */, +    T readFrom(StreamInput in) throws IOException;, +}, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/Writeable.java, + *, + * The fact that this interface extends {@link StreamableReader} should be consider vestigial. Instead of using its, + * {@link #readFrom(StreamInput)} method you should prefer using the Reader interface as a reference to a constructor that takes, + * {@link StreamInput}. The reasoning behind this is that most "good" readFrom implementations just delegated to such a constructor anyway, + * and they required an unsightly PROTOTYPE object., +        // See class javadoc for reasoning, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +            searchSourceBuilder.parseXContent(context, aggParsers, null);, +++ b/core/src/main/java/org/elasticsearch/cluster/AbstractDiffable.java, +import org.elasticsearch.common.io.stream.StreamableReader;, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamableReader.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may]