[+++ b/server/src/main/java/org/elasticsearch/index/engine/CombinedDeletionPolicy.java, +     * Checks whether the deletion policy is holding on to snapshotted commits, +     */, +    synchronized boolean hasSnapshottedCommits() {, +        return snapshottedCommits.isEmpty() == false;, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/engine/CombinedDeletionPolicy.java, +     * Checks whether the deletion policy is holding on to snapshotted commits, +     */, +    synchronized boolean hasSnapshottedCommits() {, +        return snapshottedCommits.isEmpty() == false;, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    // Package private for testing purposes only, +    boolean hasSnapshottedCommits() {, +        return combinedDeletionPolicy.hasSnapshottedCommits();, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/CombinedDeletionPolicy.java, +     * Checks whether the deletion policy is holding on to snapshotted commits, +     */, +    synchronized boolean hasSnapshottedCommits() {, +        return snapshottedCommits.isEmpty() == false;, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    // Package private for testing purposes only, +    boolean hasSnapshottedCommits() {, +        return combinedDeletionPolicy.hasSnapshottedCommits();, +    }, +, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/MultiFileWriter.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.indices.recovery;, +, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.lucene.store.IOContext;, +import org.apache.lucene.store.IndexOutput;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.BytesRefIterator;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.lease.Releasable;, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import org.elasticsearch.index.store.Store;, +import org.elasticsearch.index.store.StoreFileMetaData;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.PriorityQueue;, +import java.util.concurrent.ConcurrentMap;, +, +public class MultiFileWriter implements Releasable {, +, +    public MultiFileWriter(Store store, RecoveryState.Index indexState, String tempFilePrefix, Logger logger, Runnable ensureOpen) {, +        this.store = store;, +        this.indexState = indexState;, +        this.tempFilePrefix = tempFilePrefix;, +        this.logger = logger;, +        this.ensureOpen = ensureOpen;, +    }, +, +    private final Runnable ensureOpen;, +    private final Logger logger;, +    private final Store store;, +    private final RecoveryState.Index indexState;, +    private final String tempFilePrefix;, +, +    private final ConcurrentMap<String, IndexOutput> openIndexOutputs = ConcurrentCollections.newConcurrentMap();, +    private final ConcurrentMap<String, FileChunkWriter> fileChunkWriters = ConcurrentCollections.newConcurrentMap();, +, +, +    final Map<String, String> tempFileNames = ConcurrentCollections.newConcurrentMap();]