[+++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeUnit.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +, +import java.io.IOException;, +, +public enum ByteSizeUnit implements Writeable {, +    public static ByteSizeUnit fromId(int id) {, +        if (id < 0 || id >= values().length) {, +            throw new IllegalArgumentException("No byte size unit found for id [" + id + "]");, +        }, +        return values()[id];, +    }, +, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVInt(this.ordinal());, +    }, +, +    /**, +     * Reads a {@link ByteSizeUnit} from a given {@link StreamInput}, +     */, +    public static ByteSizeUnit readFrom(StreamInput in) throws IOException {, +        return ByteSizeUnit.fromId(in.readVInt());, +    }, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeUnit.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +, +import java.io.IOException;, +, +public enum ByteSizeUnit implements Writeable {, +    public static ByteSizeUnit fromId(int id) {, +        if (id < 0 || id >= values().length) {, +            throw new IllegalArgumentException("No byte size unit found for id [" + id + "]");, +        }, +        return values()[id];, +    }, +, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVInt(this.ordinal());, +    }, +, +    /**, +     * Reads a {@link ByteSizeUnit} from a given {@link StreamInput}, +     */, +    public static ByteSizeUnit readFrom(StreamInput in) throws IOException {, +        return ByteSizeUnit.fromId(in.readVInt());, +    }, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +    private final ByteSizeUnit unit;, +        unit = ByteSizeUnit.BYTES;, +    public ByteSizeValue(long size, ByteSizeUnit unit) {, +        this.unit = unit;, +        return unit.toBytes(size);, +        return unit.toKB(size);, +        return unit.toMB(size);, +        return unit.toGB(size);, +        return unit.toTB(size);, +        return unit.toPB(size);, +        result = 31 * result + (unit != null ? unit.hashCode() : 0);, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeUnit.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +, +import java.io.IOException;, +, +public enum ByteSizeUnit implements Writeable {, +    public static ByteSizeUnit fromId(int id) {, +        if (id < 0 || id >= values().length) {, +            throw new IllegalArgumentException("No byte size unit found for id [" + id + "]");, +        }, +        return values()[id];, +    }, +, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVInt(this.ordinal());, +    }, +, +    /**, +     * Reads a {@link ByteSizeUnit} from a given {@link StreamInput}, +     */, +    public static ByteSizeUnit readFrom(StreamInput in) throws IOException {, +        return ByteSizeUnit.fromId(in.readVInt());, +    }, +++ b/core/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java, +    private final ByteSizeUnit unit;, +        unit = ByteSizeUnit.BYTES;, +    public ByteSizeValue(long size, ByteSizeUnit unit) {, +        this.unit = unit;, +        return unit.toBytes(size);, +        return unit.toKB(size);]