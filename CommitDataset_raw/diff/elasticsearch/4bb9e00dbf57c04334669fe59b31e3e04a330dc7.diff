[+++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/CreatePersistentTaskAction.java, +                    Objects.equals(request, request1.request);, +            return Objects.hash(action, request);, +            persistentTasksClusterService.createPersistentTask(request.action, request.request,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/CreatePersistentTaskAction.java, +                    Objects.equals(request, request1.request);, +            return Objects.hash(action, request);, +            persistentTasksClusterService.createPersistentTask(request.action, request.request,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/PersistentTasksClusterService.java, +    public <Request extends PersistentTaskRequest> void createPersistentTask(String action, Request request,, +                return update(currentState, builder(currentState).addTask(action, request, assignment));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/CreatePersistentTaskAction.java, +                    Objects.equals(request, request1.request);, +            return Objects.hash(action, request);, +            persistentTasksClusterService.createPersistentTask(request.action, request.request,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/PersistentTasksClusterService.java, +    public <Request extends PersistentTaskRequest> void createPersistentTask(String action, Request request,, +                return update(currentState, builder(currentState).addTask(action, request, assignment));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/PersistentTasksCustomMetaData.java, +        public PersistentTask(long id, String taskName, Request request, Assignment assignment) {, +            this(id, 0L, taskName, request, null, assignment, null);, +        public PersistentTask(PersistentTask<Request> task, Assignment assignment) {, +            this(task.id, task.allocationId + 1L, task.taskName, task.request, task.status,, +            this(task.id, task.allocationId, task.taskName, task.request, status,, +        private PersistentTask(long id, long allocationId, String taskName, Request request,, +            return Objects.hash(id, allocationId, taskName, request, status, assignment,, +            return (assignment.isAssigned() == false || nodes.nodeExists(assignment.getExecutorNode()) == false);, +            return new PersistentTask<>(id, allocationId, taskName, request, status,, +        public <Request extends PersistentTaskRequest> Builder addTask(String taskName, Request request, Assignment assignment) {, +            tasks.put(currentId, new PersistentTask<>(currentId, taskName, request, assignment));, +                tasks.put(taskId, new PersistentTask<>(taskInProgress, assignment));, +                if (assignment.isAssigned()) {, +                    tasks.put(taskId, new PersistentTask<>(taskInProgress, assignment));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/CreatePersistentTaskAction.java, +                    Objects.equals(request, request1.request);, +            return Objects.hash(action, request);, +            persistentTasksClusterService.createPersistentTask(request.action, request.request,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/PersistentTasksClusterService.java, +    public <Request extends PersistentTaskRequest> void createPersistentTask(String action, Request request,, +                return update(currentState, builder(currentState).addTask(action, request, assignment));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/PersistentTasksCustomMetaData.java, +        public PersistentTask(long id, String taskName, Request request, Assignment assignment) {, +            this(id, 0L, taskName, request, null, assignment, null);, +        public PersistentTask(PersistentTask<Request> task, Assignment assignment) {, +            this(task.id, task.allocationId + 1L, task.taskName, task.request, task.status,, +            this(task.id, task.allocationId, task.taskName, task.request, status,, +        private PersistentTask(long id, long allocationId, String taskName, Request request,, +            return Objects.hash(id, allocationId, taskName, request, status, assignment,, +            return (assignment.isAssigned() == false || nodes.nodeExists(assignment.getExecutorNode()) == false);, +            return new PersistentTask<>(id, allocationId, taskName, request, status,, +        public <Request extends PersistentTaskRequest> Builder addTask(String taskName, Request request, Assignment assignment) {, +            tasks.put(currentId, new PersistentTask<>(currentId, taskName, request, assignment));, +                tasks.put(taskId, new PersistentTask<>(taskInProgress, assignment));, +                if (assignment.isAssigned()) {, +                    tasks.put(taskId, new PersistentTask<>(taskInProgress, assignment));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/PersistentTasksService.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/CreatePersistentTaskAction.java, +                    Objects.equals(request, request1.request);, +            return Objects.hash(action, request);, +            persistentTasksClusterService.createPersistentTask(request.action, request.request,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/PersistentTasksClusterService.java, +    public <Request extends PersistentTaskRequest> void createPersistentTask(String action, Request request,, +                return update(currentState, builder(currentState).addTask(action, request, assignment));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/PersistentTasksCustomMetaData.java, +        public PersistentTask(long id, String taskName, Request request, Assignment assignment) {, +            this(id, 0L, taskName, request, null, assignment, null);, +        public PersistentTask(PersistentTask<Request> task, Assignment assignment) {, +            this(task.id, task.allocationId + 1L, task.taskName, task.request, task.status,, +            this(task.id, task.allocationId, task.taskName, task.request, status,, +        private PersistentTask(long id, long allocationId, String taskName, Request request,, +            return Objects.hash(id, allocationId, taskName, request, status, assignment,, +            return (assignment.isAssigned() == false || nodes.nodeExists(assignment.getExecutorNode()) == false);, +            return new PersistentTask<>(id, allocationId, taskName, request, status,, +        public <Request extends PersistentTaskRequest> Builder addTask(String taskName, Request request, Assignment assignment) {, +            tasks.put(currentId, new PersistentTask<>(currentId, taskName, request, assignment));, +                tasks.put(taskId, new PersistentTask<>(taskInProgress, assignment));, +                if (assignment.isAssigned()) {, +                    tasks.put(taskId, new PersistentTask<>(taskInProgress, assignment));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/PersistentTasksService.java, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/MlMetadataTests.java, +                new PersistentTask<>(0, StartDatafeedAction.NAME, request, INITIAL_ASSIGNMENT);, +                new PersistentTask<>(0, StartDatafeedAction.NAME, request, INITIAL_ASSIGNMENT);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/CreatePersistentTaskAction.java, +                    Objects.equals(request, request1.request);, +            return Objects.hash(action, request);, +            persistentTasksClusterService.createPersistentTask(request.action, request.request,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/PersistentTasksClusterService.java, +    public <Request extends PersistentTaskRequest> void createPersistentTask(String action, Request request,, +                return update(currentState, builder(currentState).addTask(action, request, assignment));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/persistent/PersistentTasksCustomMetaData.java, +        public PersistentTask(long id, String taskName, Request request, Assignment assignment) {, +            this(id, 0L, taskName, request, null, assignment, null);, +        public PersistentTask(PersistentTask<Request> task, Assignment assignment) {, +            this(task.id, task.allocationId + 1L, task.taskName, task.request, task.status,, +            this(task.id, task.allocationId, task.taskName, task.request, status,, +        private PersistentTask(long id, long allocationId, String taskName, Request request,, +            return Objects.hash(id, allocationId, taskName, request, status, assignment,, +            return (assignment.isAssigned() == false || nodes.nodeExists(assignment.getExecutorNode()) == false);, +            return new PersistentTask<>(id, allocationId, taskName, request, status,, +        public <Request extends PersistentTaskRequest> Builder addTask(String taskName, Request request, Assignment assignment) {]