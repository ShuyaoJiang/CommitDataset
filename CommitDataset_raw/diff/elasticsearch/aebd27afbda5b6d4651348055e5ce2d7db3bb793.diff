[+++ b/pom.xml, +, +        <dependency>, +            <groupId>com.ning</groupId>, +            <artifactId>compress-lzf</artifactId>, +            <version>0.9.5</version>, +            <scope>compile</scope>, +        </dependency>, +                            <include>com.ning:compress-lzf</include>, +                        <relocation>, +                            <pattern>com.ning.compress</pattern>, +                            <shadedPattern>org.elasticsearch.common.compress</shadedPattern>, +                        </relocation>, +++ b/pom.xml, +, +        <dependency>, +            <groupId>com.ning</groupId>, +            <artifactId>compress-lzf</artifactId>, +            <version>0.9.5</version>, +            <scope>compile</scope>, +        </dependency>, +                            <include>com.ning:compress-lzf</include>, +                        <relocation>, +                            <pattern>com.ning.compress</pattern>, +                            <shadedPattern>org.elasticsearch.common.compress</shadedPattern>, +                        </relocation>, +++ b/src/main/java/org/elasticsearch/common/CacheRecycler.java, +++ b/pom.xml, +, +        <dependency>, +            <groupId>com.ning</groupId>, +            <artifactId>compress-lzf</artifactId>, +            <version>0.9.5</version>, +            <scope>compile</scope>, +        </dependency>, +                            <include>com.ning:compress-lzf</include>, +                        <relocation>, +                            <pattern>com.ning.compress</pattern>, +                            <shadedPattern>org.elasticsearch.common.compress</shadedPattern>, +                        </relocation>, +++ b/src/main/java/org/elasticsearch/common/CacheRecycler.java, +++ b/src/main/java/org/elasticsearch/common/compress/CompressedStreamInput.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.compress;, +, +import org.elasticsearch.common.io.stream.StreamInput;, +, +import java.io.EOFException;, +import java.io.IOException;, +import java.io.InputStream;, +, +/**, + */, +public abstract class CompressedStreamInput extends StreamInput {, +, +    private final StreamInput in;, +, +    private boolean closed;, +, +    protected byte[] uncompressed;, +    private int position = 0;, +    private int valid = 0;, +, +    public CompressedStreamInput(StreamInput in) throws IOException {, +        this.in = in;, +        readHeader(in);, +    }, +, +    /**, +     * Expert!, resets to buffer start, without the need to decompress it again., +     */, +    public void resetToBufferStart() {, +        this.position = 0;, +    }, +, +    /**, +     * Method is overridden to report number of bytes that can now be read, +     * from decoded data buffer, without reading bytes from the underlying, +     * stream., +     * Never throws an exception; returns number of bytes available without, +     * further reads from underlying source; -1 if stream has been closed, or, +     * 0 if an actual read (and possible blocking) is needed to find out.]