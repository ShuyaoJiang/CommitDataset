[+++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeParsers.java, +        if (node instanceof String) {, +            return Joda.forPattern((String) node);, +        }, +        throw new IllegalArgumentException("Invalid format: [" + node.toString() + "]: expected string value");, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeParsers.java, +        if (node instanceof String) {, +            return Joda.forPattern((String) node);, +        }, +        throw new IllegalArgumentException("Invalid format: [" + node.toString() + "]: expected string value");, +++ b/server/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java, +, +    public void testIllegalFormatField() throws Exception {, +        String mapping =  Strings.toString(XContentFactory.jsonBuilder(), +            .startObject(), +                .startObject("type"), +                    .startObject("properties"), +                        .startObject("field"), +                            .field("type", "date"), +                            .array("format", "test_format"), +                        .endObject(), +                    .endObject(), +                .endObject(), +            .endObject());, +, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                () -> parser.parse("type", new CompressedXContent(mapping)));, +        assertEquals("Invalid format: [[test_format]]: expected string value", e.getMessage());, +    }, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeParsers.java, +        if (node instanceof String) {, +            return Joda.forPattern((String) node);, +        }, +        throw new IllegalArgumentException("Invalid format: [" + node.toString() + "]: expected string value");, +++ b/server/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java, +, +    public void testIllegalFormatField() throws Exception {, +        String mapping =  Strings.toString(XContentFactory.jsonBuilder(), +            .startObject(), +                .startObject("type"), +                    .startObject("properties"), +                        .startObject("field"), +                            .field("type", "date"), +                            .array("format", "test_format"), +                        .endObject(), +                    .endObject(), +                .endObject(), +            .endObject());, +, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                () -> parser.parse("type", new CompressedXContent(mapping)));, +        assertEquals("Invalid format: [[test_format]]: expected string value", e.getMessage());, +    }, +++ b/server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java, +    public void testIllegalFormatField() throws Exception {, +        String mapping = Strings.toString(XContentFactory.jsonBuilder(), +            .startObject(), +                .startObject("type"), +                    .startObject("properties"), +                        .startObject("field"), +                            .field("type", "date_range"), +                            .array("format", "test_format"), +                        .endObject(), +                    .endObject(), +                .endObject(), +            .endObject());, +, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                () -> parser.parse("type", new CompressedXContent(mapping)));, +        assertEquals("Invalid format: [[test_format]]: expected string value", e.getMessage());, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TypeParsers.java, +        if (node instanceof String) {, +            return Joda.forPattern((String) node);, +        }, +        throw new IllegalArgumentException("Invalid format: [" + node.toString() + "]: expected string value");, +++ b/server/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java, +, +    public void testIllegalFormatField() throws Exception {, +        String mapping =  Strings.toString(XContentFactory.jsonBuilder(), +            .startObject(), +                .startObject("type"), +                    .startObject("properties"), +                        .startObject("field"), +                            .field("type", "date"), +                            .array("format", "test_format"), +                        .endObject(), +                    .endObject(), +                .endObject(), +            .endObject());, +, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                () -> parser.parse("type", new CompressedXContent(mapping)));, +        assertEquals("Invalid format: [[test_format]]: expected string value", e.getMessage());, +    }, +++ b/server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java, +    public void testIllegalFormatField() throws Exception {, +        String mapping = Strings.toString(XContentFactory.jsonBuilder(), +            .startObject()]