[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +import org.elasticsearch.node.NodeClosedException;, +                            listener.onFailure(new NodeClosedException(nodes.localNode()));, +                                    listener.onFailure(new NodeClosedException(nodes.localNode()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +import org.elasticsearch.node.NodeClosedException;, +                            listener.onFailure(new NodeClosedException(nodes.localNode()));, +                                    listener.onFailure(new NodeClosedException(nodes.localNode()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.node.NodeClosedException;, +                                if (exp.unwrapCause() instanceof ConnectTransportException || exp.unwrapCause() instanceof NodeClosedException ||, +                        listener.onFailure(new NodeClosedException(nodes.localNode()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +import org.elasticsearch.node.NodeClosedException;, +                            listener.onFailure(new NodeClosedException(nodes.localNode()));, +                                    listener.onFailure(new NodeClosedException(nodes.localNode()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.node.NodeClosedException;, +                                if (exp.unwrapCause() instanceof ConnectTransportException || exp.unwrapCause() instanceof NodeClosedException ||, +                        listener.onFailure(new NodeClosedException(nodes.localNode()));, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +import org.elasticsearch.node.NodeClosedException;, +                            listener.onFailure(new NodeClosedException(nodes.localNode()));, +                                    listener.onFailure(new NodeClosedException(nodes.localNode()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.node.NodeClosedException;, +                                if (exp.unwrapCause() instanceof ConnectTransportException || exp.unwrapCause() instanceof NodeClosedException ||, +                        listener.onFailure(new NodeClosedException(nodes.localNode()));, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/node/NodeClosedException.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.node;, +, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +, +/**, + * An exception indicating that node is closed., + *, + * @author kimchy (shay.banon), + */, +public class NodeClosedException extends ElasticSearchException {, +, +    private final DiscoveryNode node;, +, +    public NodeClosedException(DiscoveryNode node) {, +        super("node closed " + node);, +        this.node = node;, +    }, +, +    public DiscoveryNode node() {, +        return node;, +    }, +}]