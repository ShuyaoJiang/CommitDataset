[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetBuilder.java, +    private Boolean allTerms;, +    /**, +     * Sets all possible terms to be loaded, even ones with 0 count. Note, this *should not* be used, +     * with a field that has many possible terms., +     */, +    public TermsFacetBuilder allTerms(boolean allTerms) {, +        this.allTerms = allTerms;, +        return this;, +    }, +, +        if (allTerms != null) {, +            builder.field("all_terms", allTerms);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetBuilder.java, +    private Boolean allTerms;, +    /**, +     * Sets all possible terms to be loaded, even ones with 0 count. Note, this *should not* be used, +     * with a field that has many possible terms., +     */, +    public TermsFacetBuilder allTerms(boolean allTerms) {, +        this.allTerms = allTerms;, +        return this;, +    }, +, +        if (allTerms != null) {, +            builder.field("all_terms", allTerms);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetProcessor.java, +        boolean allTerms = false;, +                } else if ("all_terms".equals(currentFieldName) || "allTerms".equals(currentFieldName)) {, +                    allTerms = parser.booleanValue();, +            return new FieldsTermsStringFacetCollector(facetName, fieldsNames, size, comparatorType, allTerms, context, excluded, pattern, scriptLang, script, params);, +                return new TermsLongFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +                return new TermsDoubleFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +                return new TermsIntFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +                return new TermsFloatFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +                return new TermsShortFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +                return new TermsByteFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +        return new TermsStringFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, pattern, scriptLang, script, params);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetBuilder.java, +    private Boolean allTerms;, +    /**, +     * Sets all possible terms to be loaded, even ones with 0 count. Note, this *should not* be used, +     * with a field that has many possible terms., +     */, +    public TermsFacetBuilder allTerms(boolean allTerms) {, +        this.allTerms = allTerms;, +        return this;, +    }, +, +        if (allTerms != null) {, +            builder.field("all_terms", allTerms);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetProcessor.java, +        boolean allTerms = false;, +                } else if ("all_terms".equals(currentFieldName) || "allTerms".equals(currentFieldName)) {, +                    allTerms = parser.booleanValue();, +            return new FieldsTermsStringFacetCollector(facetName, fieldsNames, size, comparatorType, allTerms, context, excluded, pattern, scriptLang, script, params);, +                return new TermsLongFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +                return new TermsDoubleFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +                return new TermsIntFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +                return new TermsFloatFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +                return new TermsShortFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +                return new TermsByteFacetCollector(facetName, field, size, comparatorType, allTerms, context, scriptLang, script, params);, +        return new TermsStringFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, pattern, scriptLang, script, params);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/bytes/TermsByteFacetCollector.java, +import org.elasticsearch.search.facet.FacetPhaseExecutionException;, +    public TermsByteFacetCollector(String facetName, String fieldName, int size, TermsFacet.ComparatorType comparatorType, boolean allTerms, SearchContext context,, +, +        if (allTerms) {, +            try {, +                for (IndexReader reader : context.searcher().subReaders()) {, +                    ByteFieldData fieldData = (ByteFieldData) fieldDataCache.cache(fieldDataType, reader, indexFieldName);, +                    fieldData.forEachValue(aggregator);, +                }, +            } catch (Exception e) {, +                throw new FacetPhaseExecutionException(facetName, "failed to load all terms", e);, +            }, +        }, +    public static class StaticAggregatorValueProc implements ByteFieldData.ValueInDocProc, ByteFieldData.ValueProc {, +        @Override public void onValue(byte value) {, +            facets.putIfAbsent(value, 0);, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetBuilder.java, +    private Boolean allTerms;, +    /**, +     * Sets all possible terms to be loaded, even ones with 0 count. Note, this *should not* be used, +     * with a field that has many possible terms., +     */, +    public TermsFacetBuilder allTerms(boolean allTerms) {, +        this.allTerms = allTerms;, +        return this;, +    }, +, +        if (allTerms != null) {, +            builder.field("all_terms", allTerms);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetProcessor.java]