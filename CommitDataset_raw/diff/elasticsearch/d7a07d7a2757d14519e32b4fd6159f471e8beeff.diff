[+++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +                if (v.equals(Version.V_2_0_0_beta1)) {, +                    assertTrue("Remove this once beta1 is released", v.snapshot());, +                    continue; // this is just a temporary fix until we have a snapshot for the beta since we now have 2 unreleased version of the same major.minor group, +                }, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +                if (v.equals(Version.V_2_0_0_beta1)) {, +                    assertTrue("Remove this once beta1 is released", v.snapshot());, +                    continue; // this is just a temporary fix until we have a snapshot for the beta since we now have 2 unreleased version of the same major.minor group, +                }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +                final Policy policy;, +                // if its an insecure plugin, we use a wrapper policy impl to try, +                // to simulate what happens with a real distribution, +                    policy = new MockPluginPolicy(perms, insecurePluginProp);, +                } else {, +                    policy = new ESPolicy(perms);, +                Policy.setPolicy(policy);, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +                if (v.equals(Version.V_2_0_0_beta1)) {, +                    assertTrue("Remove this once beta1 is released", v.snapshot());, +                    continue; // this is just a temporary fix until we have a snapshot for the beta since we now have 2 unreleased version of the same major.minor group, +                }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapForTesting.java, +                final Policy policy;, +                // if its an insecure plugin, we use a wrapper policy impl to try, +                // to simulate what happens with a real distribution, +                    policy = new MockPluginPolicy(perms, insecurePluginProp);, +                } else {, +                    policy = new ESPolicy(perms);, +                Policy.setPolicy(policy);, +++ b/core/src/test/java/org/elasticsearch/bootstrap/MockPluginPolicy.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.bootstrap;, +, +import com.carrotsearch.randomizedtesting.RandomizedRunner;, +, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.common.io.PathUtils;, +import org.elasticsearch.common.logging.Loggers;, +import org.junit.Assert;, +, +import java.net.URL;, +import java.nio.file.Path;, +import java.security.CodeSource;, +import java.security.Permission;, +import java.security.PermissionCollection;, +import java.security.Permissions;, +import java.security.Policy;, +import java.security.ProtectionDomain;, +import java.security.cert.Certificate;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +, +/**, + * Simulates in unit tests per-plugin permissions., + * Unit tests for plugins do not have a proper plugin structure,, + * so we don't know which codebases to apply the permission to.]