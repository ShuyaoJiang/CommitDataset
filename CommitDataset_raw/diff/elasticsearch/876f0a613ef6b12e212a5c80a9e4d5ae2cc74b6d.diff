[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    @Override, +    public void visitEnd() {, +        throw new AssertionError("Should never call this method on MethodWriter, use endMethod() instead");, +    }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    @Override, +    public void visitEnd() {, +        throw new AssertionError("Should never call this method on MethodWriter, use endMethod() instead");, +    }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java, +import org.objectweb.asm.ClassWriter;, +import java.util.BitSet;, +    /** Writes the function to given ClassWriter. */, +    void write (ClassWriter writer, BitSet statements) {, +        final MethodWriter function = new MethodWriter(Opcodes.ACC_PRIVATE | Opcodes.ACC_STATIC, method.method, writer, statements);, +        write(function);, +        function.endMethod();, +    }, +    @Override, +    void write(MethodWriter function) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    @Override, +    public void visitEnd() {, +        throw new AssertionError("Should never call this method on MethodWriter, use endMethod() instead");, +    }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java, +import org.objectweb.asm.ClassWriter;, +import java.util.BitSet;, +    /** Writes the function to given ClassWriter. */, +    void write (ClassWriter writer, BitSet statements) {, +        final MethodWriter function = new MethodWriter(Opcodes.ACC_PRIVATE | Opcodes.ACC_STATIC, method.method, writer, statements);, +        write(function);, +        function.endMethod();, +    }, +    @Override, +    void write(MethodWriter function) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SSource.java, +        // Write the constructor:, +        MethodWriter constructor = new MethodWriter(Opcodes.ACC_PUBLIC, CONSTRUCTOR, writer, expressions);, +        // Write the execute method:, +        MethodWriter execute = new MethodWriter(Opcodes.ACC_PUBLIC, EXECUTE, writer, expressions);, +        // Write all functions:, +        , +        for (SFunction function : functions) {, +            function.write(writer, expressions);, +        }, +]