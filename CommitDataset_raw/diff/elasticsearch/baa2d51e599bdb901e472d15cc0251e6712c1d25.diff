[+++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.shard.TranslogRecoveryPerformer;, +     * Request that this engine throttle incoming indexing requests to one thread.  Must be matched by a later call to {@link #deactivateThrottling()}., +, +    /**, +     * Performs recovery from the transaction log., +     * This operation will close the engine if the recovery fails., +     */, +    public abstract Engine recoverFromTranslog() throws IOException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.shard.TranslogRecoveryPerformer;, +     * Request that this engine throttle incoming indexing requests to one thread.  Must be matched by a later call to {@link #deactivateThrottling()}., +, +    /**, +     * Performs recovery from the transaction log., +     * This operation will close the engine if the recovery fails., +     */, +    public abstract Engine recoverFromTranslog() throws IOException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +    private final OpenMode openMode;, +    public EngineConfig(OpenMode openMode, ShardId shardId, ThreadPool threadPool,, +        if (openMode == null) {, +            throw new IllegalArgumentException("openMode must not be null");, +        }, +        this.openMode = openMode;, +    /**, +     * Returns the {@link OpenMode} for this engine config., +     */, +    public OpenMode getOpenMode() {, +        return openMode;, +    }, +, +    /**, +     * Engine open mode defines how the engine should be opened or in other words what the engine should expect, +     * to recover from. We either create a brand new engine with a new index and translog or we recover from an existing index., +     * If the index exists we also have the ability open only the index and create a new transaction log which happens, +     * during remote recovery since we have already transferred the index files but the translog is replayed from remote. The last, +     * and safest option opens the lucene index as well as it's referenced transaction log for a translog recovery., +     * See also {@link Engine#recoverFromTranslog()}, +     */, +    public enum OpenMode {, +        CREATE_INDEX_AND_TRANSLOG,, +        OPEN_INDEX_CREATE_TRANSLOG,, +        OPEN_INDEX_AND_TRANSLOG;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.shard.TranslogRecoveryPerformer;, +     * Request that this engine throttle incoming indexing requests to one thread.  Must be matched by a later call to {@link #deactivateThrottling()}., +, +    /**, +     * Performs recovery from the transaction log., +     * This operation will close the engine if the recovery fails., +     */, +    public abstract Engine recoverFromTranslog() throws IOException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +    private final OpenMode openMode;, +    public EngineConfig(OpenMode openMode, ShardId shardId, ThreadPool threadPool,, +        if (openMode == null) {, +            throw new IllegalArgumentException("openMode must not be null");, +        }, +        this.openMode = openMode;, +    /**, +     * Returns the {@link OpenMode} for this engine config., +     */, +    public OpenMode getOpenMode() {, +        return openMode;, +    }, +, +    /**, +     * Engine open mode defines how the engine should be opened or in other words what the engine should expect, +     * to recover from. We either create a brand new engine with a new index and translog or we recover from an existing index., +     * If the index exists we also have the ability open only the index and create a new transaction log which happens, +     * during remote recovery since we have already transferred the index files but the translog is replayed from remote. The last, +     * and safest option opens the lucene index as well as it's referenced transaction log for a translog recovery., +     * See also {@link Engine#recoverFromTranslog()}, +     */, +    public enum OpenMode {, +        CREATE_INDEX_AND_TRANSLOG,, +        OPEN_INDEX_CREATE_TRANSLOG,, +        OPEN_INDEX_AND_TRANSLOG;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineFactory.java, +    Engine newReadWriteEngine(EngineConfig config);, +    Engine newReadOnlyEngine(EngineConfig config);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.shard.TranslogRecoveryPerformer;, +     * Request that this engine throttle incoming indexing requests to one thread.  Must be matched by a later call to {@link #deactivateThrottling()}., +, +    /**, +     * Performs recovery from the transaction log., +     * This operation will close the engine if the recovery fails., +     */, +    public abstract Engine recoverFromTranslog() throws IOException;, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +    private final OpenMode openMode;, +    public EngineConfig(OpenMode openMode, ShardId shardId, ThreadPool threadPool,, +        if (openMode == null) {, +            throw new IllegalArgumentException("openMode must not be null");]