[+++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import java.net.URI;, +import java.net.URISyntaxException;, +     *, +    public String getLocation(@Nullable String routing) throws URISyntaxException {, +, +        URI uri = new URI(location.toString());, +        return uri.toASCIIString();, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import java.net.URI;, +import java.net.URISyntaxException;, +     *, +    public String getLocation(@Nullable String routing) throws URISyntaxException {, +, +        URI uri = new URI(location.toString());, +        return uri.toASCIIString();, +++ b/core/src/main/java/org/elasticsearch/rest/action/document/RestIndexAction.java, +import java.net.URISyntaxException;, +            client.index(indexRequest, new RestStatusToXContentListener<>(channel, r -> {, +                try {, +                    return r.getLocation(indexRequest.routing());, +                } catch (URISyntaxException ex) {, +                    logger.warn("Location string is not a valid URI.", ex);, +                    return null;, +                }, +            }));, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import java.net.URI;, +import java.net.URISyntaxException;, +     *, +    public String getLocation(@Nullable String routing) throws URISyntaxException {, +, +        URI uri = new URI(location.toString());, +        return uri.toASCIIString();, +++ b/core/src/main/java/org/elasticsearch/rest/action/document/RestIndexAction.java, +import java.net.URISyntaxException;, +            client.index(indexRequest, new RestStatusToXContentListener<>(channel, r -> {, +                try {, +                    return r.getLocation(indexRequest.routing());, +                } catch (URISyntaxException ex) {, +                    logger.warn("Location string is not a valid URI.", ex);, +                    return null;, +                }, +            }));, +++ b/core/src/main/java/org/elasticsearch/rest/action/document/RestUpdateAction.java, +import java.net.URISyntaxException;, +            client.update(updateRequest, new RestStatusToXContentListener<>(channel, r -> {, +                try {, +                    return r.getLocation(updateRequest.routing());, +                } catch (URISyntaxException ex) {, +                    logger.warn("Location string is not a valid URI.", ex);, +                    return null;, +                }, +            }));, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import java.net.URI;, +import java.net.URISyntaxException;, +     *, +    public String getLocation(@Nullable String routing) throws URISyntaxException {, +, +        URI uri = new URI(location.toString());, +        return uri.toASCIIString();, +++ b/core/src/main/java/org/elasticsearch/rest/action/document/RestIndexAction.java, +import java.net.URISyntaxException;, +            client.index(indexRequest, new RestStatusToXContentListener<>(channel, r -> {, +                try {, +                    return r.getLocation(indexRequest.routing());, +                } catch (URISyntaxException ex) {, +                    logger.warn("Location string is not a valid URI.", ex);, +                    return null;, +                }, +            }));, +++ b/core/src/main/java/org/elasticsearch/rest/action/document/RestUpdateAction.java, +import java.net.URISyntaxException;, +            client.update(updateRequest, new RestStatusToXContentListener<>(channel, r -> {, +                try {, +                    return r.getLocation(updateRequest.routing());, +                } catch (URISyntaxException ex) {, +                    logger.warn("Location string is not a valid URI.", ex);, +                    return null;, +                }, +            }));, +++ b/core/src/test/java/org/elasticsearch/action/DocWriteResponseTests.java, +import java.net.URISyntaxException;, +    public void testGetLocation() throws URISyntaxException {, +    public void testGetLocationNonAscii() throws URISyntaxException {, +        DocWriteResponse response =, +            new DocWriteResponse(, +                new ShardId("index", "uuid", 0),, +                "type",, +                "‚ù§",, +                SequenceNumbersService.UNASSIGNED_SEQ_NO,, +                0,, +                Result.CREATED) {, +            };, +        assertEquals("/index/type/%E2%9D%A4", response.getLocation(null));, +        assertEquals("/index/type/%E2%9D%A4?routing=%C3%A4", response.getLocation("%C3%A4"));, +    }, +, +    public void testInvalidGetLocation() {]