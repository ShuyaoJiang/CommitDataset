[+++ b/src/main/java/org/elasticsearch/cloud/azure/AzureStorageService.java, +    ImmutableMap<String,BlobMetaData> listBlobsByPrefix(String container, String keyPath, String prefix) throws URISyntaxException, StorageException, ServiceException;, +++ b/src/main/java/org/elasticsearch/cloud/azure/AzureStorageService.java, +    ImmutableMap<String,BlobMetaData> listBlobsByPrefix(String container, String keyPath, String prefix) throws URISyntaxException, StorageException, ServiceException;, +++ b/src/main/java/org/elasticsearch/cloud/azure/AzureStorageServiceImpl.java, +        // TODO Should we set some timeout and retry options?, +        /*, +        BlobRequestOptions options = new BlobRequestOptions();, +        options.setTimeoutIntervalInMs(1000);, +        options.setRetryPolicyFactory(new RetryNoRetry());, +        blob_container.deleteIfExists(options, null);, +        */, +        blob_container.deleteIfExists();, +    public ImmutableMap<String, BlobMetaData> listBlobsByPrefix(String container, String keyPath, String prefix) throws URISyntaxException, StorageException, ServiceException {, +        logger.debug("listBlobsByPrefix container [{}], keyPath [{}], prefix [{}]", container, keyPath, prefix);, +            Iterable<ListBlobItem> blobs = blob_container.listBlobs(keyPath + prefix);, +                String name = blobpath.substring(keyPath.length() + 1);, +++ b/src/main/java/org/elasticsearch/cloud/azure/AzureStorageService.java, +    ImmutableMap<String,BlobMetaData> listBlobsByPrefix(String container, String keyPath, String prefix) throws URISyntaxException, StorageException, ServiceException;, +++ b/src/main/java/org/elasticsearch/cloud/azure/AzureStorageServiceImpl.java, +        // TODO Should we set some timeout and retry options?, +        /*, +        BlobRequestOptions options = new BlobRequestOptions();, +        options.setTimeoutIntervalInMs(1000);, +        options.setRetryPolicyFactory(new RetryNoRetry());, +        blob_container.deleteIfExists(options, null);, +        */, +        blob_container.deleteIfExists();, +    public ImmutableMap<String, BlobMetaData> listBlobsByPrefix(String container, String keyPath, String prefix) throws URISyntaxException, StorageException, ServiceException {, +        logger.debug("listBlobsByPrefix container [{}], keyPath [{}], prefix [{}]", container, keyPath, prefix);, +            Iterable<ListBlobItem> blobs = blob_container.listBlobs(keyPath + prefix);, +                String name = blobpath.substring(keyPath.length() + 1);, +++ b/src/main/java/org/elasticsearch/cloud/azure/blobstore/AbstractAzureBlobContainer.java, +    public ImmutableMap<String, BlobMetaData> listBlobsByPrefix(@Nullable String prefix) throws IOException {, +            return blobStore.client().listBlobsByPrefix(blobStore.container(), keyPath, prefix);, +            logger.warn("can not access [{}] in container {{}}: {}", prefix, blobStore.container(), e.getMessage());, +            logger.warn("can not access [{}] in container {{}}: {}", prefix, blobStore.container(), e.getMessage());, +            logger.warn("can not access [{}] in container {{}}: {}", prefix, blobStore.container(), e.getMessage());, +++ b/src/main/java/org/elasticsearch/cloud/azure/AzureStorageService.java, +    ImmutableMap<String,BlobMetaData> listBlobsByPrefix(String container, String keyPath, String prefix) throws URISyntaxException, StorageException, ServiceException;, +++ b/src/main/java/org/elasticsearch/cloud/azure/AzureStorageServiceImpl.java, +        // TODO Should we set some timeout and retry options?, +        /*, +        BlobRequestOptions options = new BlobRequestOptions();, +        options.setTimeoutIntervalInMs(1000);, +        options.setRetryPolicyFactory(new RetryNoRetry());, +        blob_container.deleteIfExists(options, null);, +        */, +        blob_container.deleteIfExists();, +    public ImmutableMap<String, BlobMetaData> listBlobsByPrefix(String container, String keyPath, String prefix) throws URISyntaxException, StorageException, ServiceException {, +        logger.debug("listBlobsByPrefix container [{}], keyPath [{}], prefix [{}]", container, keyPath, prefix);, +            Iterable<ListBlobItem> blobs = blob_container.listBlobs(keyPath + prefix);, +                String name = blobpath.substring(keyPath.length() + 1);, +++ b/src/main/java/org/elasticsearch/cloud/azure/blobstore/AbstractAzureBlobContainer.java, +    public ImmutableMap<String, BlobMetaData> listBlobsByPrefix(@Nullable String prefix) throws IOException {, +            return blobStore.client().listBlobsByPrefix(blobStore.container(), keyPath, prefix);, +            logger.warn("can not access [{}] in container {{}}: {}", prefix, blobStore.container(), e.getMessage());, +            logger.warn("can not access [{}] in container {{}}: {}", prefix, blobStore.container(), e.getMessage());, +            logger.warn("can not access [{}] in container {{}}: {}", prefix, blobStore.container(), e.getMessage());, +++ b/src/test/java/org/elasticsearch/repositories/azure/AzureSnapshotRestoreITest.java, +import org.elasticsearch.client.ClusterAdminClient;, +        numDataNodes = 1,, +    private String getRepositoryPath() {, +        String testName = "/snapshot-itest/repo-".concat("" + randomIntBetween(1, 1000));, +        return testName.contains(" ") ? Strings.split(testName, " ")[0] : testName;, +    }, +    private String getContainerName() {, +        String testName = "it-".concat(Strings.toUnderscoreCase(getTestName()).replaceAll("_", "-"));, +        return testName.contains(" ") ? Strings.split(testName, " ")[0] : testName;, +        cleanRepositoryFiles(, +                getContainerName(),, +                getContainerName().concat("-1"),, +                getContainerName().concat("-2"));, +        cleanRepositoryFiles(, +                getContainerName(),, +                getContainerName().concat("-1"),, +                getContainerName().concat("-2"));, +        logger.info("-->  creating azure repository with path [{}]", getRepositoryPath());, +                        .put(AzureStorageService.Fields.CONTAINER, getContainerName()), +                        .put(AzureStorageService.Fields.BASE_PATH, getRepositoryPath()), +        logger.info("-->  creating azure repository with path [{}]", getRepositoryPath());, +                        .put(AzureStorageService.Fields.CONTAINER, getContainerName().concat("-1")), +                        .put(AzureStorageService.Fields.BASE_PATH, getRepositoryPath()), +                        .put(AzureStorageService.Fields.CONTAINER, getContainerName().concat("-2")), +                        .put(AzureStorageService.Fields.BASE_PATH, getRepositoryPath()), +     * For issue #26: https://github.com/elasticsearch/elasticsearch-cloud-azure/issues/26, +     */, +    @Test, +    public void testListBlobs_26() throws StorageException, ServiceException, URISyntaxException {, +        createIndex("test-idx-1", "test-idx-2", "test-idx-3");, +        ensureGreen();, +, +        logger.info("--> indexing some data");, +        for (int i = 0; i < 100; i++) {, +            index("test-idx-1", "doc", Integer.toString(i), "foo", "bar" + i);, +            index("test-idx-2", "doc", Integer.toString(i), "foo", "baz" + i);, +            index("test-idx-3", "doc", Integer.toString(i), "foo", "baz" + i);, +        }, +        refresh();, +]