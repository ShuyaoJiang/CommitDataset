[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +            List<MutableShardRouting> shards = routingNode.shards();, +            for (int i = 0; i < shards.size(); i++) {, +                MutableShardRouting shardRouting = shards.get(i);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +            List<MutableShardRouting> shards = routingNode.shards();, +            for (int i = 0; i < shards.size(); i++) {, +                MutableShardRouting shardRouting = shards.get(i);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java, +import java.util.List;, +, +        logger.debug("using [cluster.routing.allocation.allow_rebalance] with [{}]", type.toString().toLowerCase());, +                List<MutableShardRouting> shards = node.shards();, +                for (int i = 0; i < shards.size(); i++) {, +                    MutableShardRouting shard = shards.get(i);, +                List<MutableShardRouting> shards = node.shards();, +                for (int i = 0; i < shards.size(); i++) {, +                    MutableShardRouting shard = shards.get(i);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +            List<MutableShardRouting> shards = routingNode.shards();, +            for (int i = 0; i < shards.size(); i++) {, +                MutableShardRouting shardRouting = shards.get(i);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java, +import java.util.List;, +, +        logger.debug("using [cluster.routing.allocation.allow_rebalance] with [{}]", type.toString().toLowerCase());, +                List<MutableShardRouting> shards = node.shards();, +                for (int i = 0; i < shards.size(); i++) {, +                    MutableShardRouting shard = shards.get(i);, +                List<MutableShardRouting> shards = node.shards();, +                for (int i = 0; i < shards.size(); i++) {, +                    MutableShardRouting shard = shards.get(i);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ConcurrentRebalanceAllocationDecider.java, +import java.util.List;, +, +            List<MutableShardRouting> shards = node.shards();, +            for (int i = 0; i < shards.size(); i++) {, +                if (shards.get(i).state() == ShardRoutingState.RELOCATING) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +            List<MutableShardRouting> shards = routingNode.shards();, +            for (int i = 0; i < shards.size(); i++) {, +                MutableShardRouting shardRouting = shards.get(i);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java, +import java.util.List;, +, +        logger.debug("using [cluster.routing.allocation.allow_rebalance] with [{}]", type.toString().toLowerCase());, +                List<MutableShardRouting> shards = node.shards();, +                for (int i = 0; i < shards.size(); i++) {, +                    MutableShardRouting shard = shards.get(i);, +                List<MutableShardRouting> shards = node.shards();, +                for (int i = 0; i < shards.size(); i++) {, +                    MutableShardRouting shard = shards.get(i);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ConcurrentRebalanceAllocationDecider.java, +import java.util.List;, +, +            List<MutableShardRouting> shards = node.shards();, +            for (int i = 0; i < shards.size(); i++) {, +                if (shards.get(i).state() == ShardRoutingState.RELOCATING) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/RebalanceOnlyWhenActiveAllocationDecider.java, +        for (int i = 0; i < shards.size(); i++) {, +            if (!shards.get(i).active()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +            List<MutableShardRouting> shards = routingNode.shards();, +            for (int i = 0; i < shards.size(); i++) {, +                MutableShardRouting shardRouting = shards.get(i);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ClusterRebalanceAllocationDecider.java, +import java.util.List;, +, +        logger.debug("using [cluster.routing.allocation.allow_rebalance] with [{}]", type.toString().toLowerCase());, +                List<MutableShardRouting> shards = node.shards();, +                for (int i = 0; i < shards.size(); i++) {, +                    MutableShardRouting shard = shards.get(i);, +                List<MutableShardRouting> shards = node.shards();, +                for (int i = 0; i < shards.size(); i++) {, +                    MutableShardRouting shard = shards.get(i);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ConcurrentRebalanceAllocationDecider.java, +import java.util.List;, +, +            List<MutableShardRouting> shards = node.shards();, +            for (int i = 0; i < shards.size(); i++) {, +                if (shards.get(i).state() == ShardRoutingState.RELOCATING) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/RebalanceOnlyWhenActiveAllocationDecider.java, +        for (int i = 0; i < shards.size(); i++) {, +            if (!shards.get(i).active()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ThrottlingAllocationDecider.java, +import java.util.List;, +, +                List<MutableShardRouting> shards = node.shards();, +                for (int i = 0; i < shards.size(); i++) {, +                    MutableShardRouting shard = shards.get(i);, +        List<MutableShardRouting> shards = node.shards();, +        for (int i = 0; i < shards.size(); i++) {, +            MutableShardRouting shard = shards.get(i);]