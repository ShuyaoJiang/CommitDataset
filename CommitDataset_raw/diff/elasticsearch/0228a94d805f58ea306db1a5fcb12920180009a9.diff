[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/execution/TriggeredWatchStore.java, +import org.elasticsearch.index.IndexNotFoundException;, +import org.elasticsearch.xpack.watcher.watch.WatchStoreUtils;, +        try {, +            IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(INDEX_NAME, state.metaData());, +            return state.routingTable().index(indexMetaData.getIndex()).allPrimaryShardsActive();, +        } catch (IndexNotFoundException e) {, +        } catch (IllegalStateException e) {, +            logger.trace((Supplier<?>) () -> new ParameterizedMessage("error getting index meta data [{}]: ", INDEX_NAME), e);, +        IndexMetaData indexMetaData;, +        try {, +            indexMetaData = WatchStoreUtils.getConcreteIndex(INDEX_NAME, state.metaData());, +        } catch (IndexNotFoundException e) {, +        if (state.routingTable().index(indexMetaData.getIndex()).allPrimaryShardsActive() == false) {, +            throw illegalState("not all primary shards of the triggered watches index {} are started", indexMetaData.getIndex());, +                        logger.trace("loaded triggered watch [{}/{}/{}]", sh.index(), sh.type(), sh.id());, +        logger.debug("loaded [{}] triggered watches", triggeredWatches.size());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/execution/TriggeredWatchStore.java, +import org.elasticsearch.index.IndexNotFoundException;, +import org.elasticsearch.xpack.watcher.watch.WatchStoreUtils;, +        try {, +            IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(INDEX_NAME, state.metaData());, +            return state.routingTable().index(indexMetaData.getIndex()).allPrimaryShardsActive();, +        } catch (IndexNotFoundException e) {, +        } catch (IllegalStateException e) {, +            logger.trace((Supplier<?>) () -> new ParameterizedMessage("error getting index meta data [{}]: ", INDEX_NAME), e);, +        IndexMetaData indexMetaData;, +        try {, +            indexMetaData = WatchStoreUtils.getConcreteIndex(INDEX_NAME, state.metaData());, +        } catch (IndexNotFoundException e) {, +        if (state.routingTable().index(indexMetaData.getIndex()).allPrimaryShardsActive() == false) {, +            throw illegalState("not all primary shards of the triggered watches index {} are started", indexMetaData.getIndex());, +                        logger.trace("loaded triggered watch [{}/{}/{}]", sh.index(), sh.type(), sh.id());, +        logger.debug("loaded [{}] triggered watches", triggeredWatches.size());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/watch/WatchStore.java, +import org.elasticsearch.index.IndexNotFoundException;, +            IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(INDEX, state.metaData());, +            int count = loadWatches(indexMetaData.getNumberOfShards());, +            logger.debug("loaded [{}] watches from the watches index [{}]", count, indexMetaData.getIndex().getName());, +        } catch (IndexNotFoundException e) {, +, +        IndexMetaData watchesIndexMetaData;, +        try {, +            watchesIndexMetaData = WatchStoreUtils.getConcreteIndex(INDEX, state.metaData());, +        } catch (IndexNotFoundException e) {, +        } catch (IllegalStateException e) {, +            logger.trace((Supplier<?>) () -> new ParameterizedMessage("error getting index meta data [{}]: ", INDEX), e);, +, +        return state.routingTable().index(watchesIndexMetaData.getIndex().getName()).allPrimaryShardsActive();, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/execution/TriggeredWatchStore.java, +import org.elasticsearch.index.IndexNotFoundException;, +import org.elasticsearch.xpack.watcher.watch.WatchStoreUtils;, +        try {, +            IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(INDEX_NAME, state.metaData());, +            return state.routingTable().index(indexMetaData.getIndex()).allPrimaryShardsActive();, +        } catch (IndexNotFoundException e) {, +        } catch (IllegalStateException e) {, +            logger.trace((Supplier<?>) () -> new ParameterizedMessage("error getting index meta data [{}]: ", INDEX_NAME), e);, +        IndexMetaData indexMetaData;, +        try {, +            indexMetaData = WatchStoreUtils.getConcreteIndex(INDEX_NAME, state.metaData());, +        } catch (IndexNotFoundException e) {, +        if (state.routingTable().index(indexMetaData.getIndex()).allPrimaryShardsActive() == false) {, +            throw illegalState("not all primary shards of the triggered watches index {} are started", indexMetaData.getIndex());, +                        logger.trace("loaded triggered watch [{}/{}/{}]", sh.index(), sh.type(), sh.id());, +        logger.debug("loaded [{}] triggered watches", triggeredWatches.size());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/watch/WatchStore.java, +import org.elasticsearch.index.IndexNotFoundException;, +            IndexMetaData indexMetaData = WatchStoreUtils.getConcreteIndex(INDEX, state.metaData());, +            int count = loadWatches(indexMetaData.getNumberOfShards());, +            logger.debug("loaded [{}] watches from the watches index [{}]", count, indexMetaData.getIndex().getName());, +        } catch (IndexNotFoundException e) {, +, +        IndexMetaData watchesIndexMetaData;, +        try {, +            watchesIndexMetaData = WatchStoreUtils.getConcreteIndex(INDEX, state.metaData());, +        } catch (IndexNotFoundException e) {, +        } catch (IllegalStateException e) {, +            logger.trace((Supplier<?>) () -> new ParameterizedMessage("error getting index meta data [{}]: ", INDEX), e);, +, +        return state.routingTable().index(watchesIndexMetaData.getIndex().getName()).allPrimaryShardsActive();, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/watch/WatchStoreUtils.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.watcher.watch;, +, +import org.elasticsearch.cluster.metadata.AliasOrIndex;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.index.IndexNotFoundException;, +, +public class WatchStoreUtils {, +, +    /**, +     * Method to get indexmetadata of a index, that potentially is behind an alias., +     *, +     * @param name Name of the index or the alias]