[+++ b/core/pom.xml, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/PathUtils.java, +    /** can be changed by tests (via reflection) */, +    private static volatile FileSystem DEFAULT = ACTUAL_DEFAULT;, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/PathUtils.java, +    /** can be changed by tests (via reflection) */, +    private static volatile FileSystem DEFAULT = ACTUAL_DEFAULT;, +++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/PathUtils.java, +    /** can be changed by tests (via reflection) */, +    private static volatile FileSystem DEFAULT = ACTUAL_DEFAULT;, +++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +++ /dev/null, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/PathUtils.java, +    /** can be changed by tests (via reflection) */, +    private static volatile FileSystem DEFAULT = ACTUAL_DEFAULT;, +++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzerIntegrationIT.java, +import java.lang.reflect.Field;, +    // the close() method of a lucene analyzer sets the storedValue field to null, +    // we simply check this via reflection - ugly but works, +    private void assertLuceneAnalyzersAreNotClosed(Map<PreBuiltAnalyzers, List<Version>> loadedAnalyzers) throws IllegalAccessException, NoSuchFieldException {, +            PreBuiltAnalyzers preBuiltAnalyzer = preBuiltAnalyzerEntry.getKey();, +, +                Field field = getFieldFromClass("storedValue", analyzer);, +                boolean currentAccessible = field.isAccessible();, +                field.setAccessible(true);, +                Object storedValue = field.get(analyzer);, +                field.setAccessible(currentAccessible);, +, +                assertThat(String.format(Locale.ROOT, "Analyzer %s in version %s seems to be closed", preBuiltAnalyzer.name(), version), storedValue, is(notNullValue()));, +, +    /**, +     * Searches for a field until it finds, loops through all superclasses, +     */, +    private Field getFieldFromClass(String fieldName, Object obj) {, +        Field field = null;, +        boolean storedValueFieldFound = false;, +        Class clazz = obj.getClass();, +        while (!storedValueFieldFound) {, +            try {, +                field = clazz.getDeclaredField(fieldName);, +                storedValueFieldFound = true;, +            } catch (NoSuchFieldException e) {, +                clazz = clazz.getSuperclass();, +, +            if (Object.class.equals(clazz)) throw new RuntimeException("Could not find storedValue field in class" + clazz);, +        }, +, +        return field;, +    }, +, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/PathUtils.java, +    /** can be changed by tests (via reflection) */, +    private static volatile FileSystem DEFAULT = ACTUAL_DEFAULT;, +++ b/core/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzerIntegrationIT.java, +import java.lang.reflect.Field;, +    // the close() method of a lucene analyzer sets the storedValue field to null, +    // we simply check this via reflection - ugly but works, +    private void assertLuceneAnalyzersAreNotClosed(Map<PreBuiltAnalyzers, List<Version>> loadedAnalyzers) throws IllegalAccessException, NoSuchFieldException {, +            PreBuiltAnalyzers preBuiltAnalyzer = preBuiltAnalyzerEntry.getKey();, +, +                Field field = getFieldFromClass("storedValue", analyzer);, +                boolean currentAccessible = field.isAccessible();, +                field.setAccessible(true);, +                Object storedValue = field.get(analyzer);, +                field.setAccessible(currentAccessible);, +, +                assertThat(String.format(Locale.ROOT, "Analyzer %s in version %s seems to be closed", preBuiltAnalyzer.name(), version), storedValue, is(notNullValue()));, +, +    /**, +     * Searches for a field until it finds, loops through all superclasses, +     */, +    private Field getFieldFromClass(String fieldName, Object obj) {, +        Field field = null;, +        boolean storedValueFieldFound = false;, +        Class clazz = obj.getClass();, +        while (!storedValueFieldFound) {, +            try {, +                field = clazz.getDeclaredField(fieldName);, +                storedValueFieldFound = true;, +            } catch (NoSuchFieldException e) {, +                clazz = clazz.getSuperclass();, +, +            if (Object.class.equals(clazz)) throw new RuntimeException("Could not find storedValue field in class" + clazz);, +        }, +, +        return field;, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/query/MultiMatchQueryIT.java, +        Field field = MultiMatchQueryBuilder.class.getDeclaredField("type");]