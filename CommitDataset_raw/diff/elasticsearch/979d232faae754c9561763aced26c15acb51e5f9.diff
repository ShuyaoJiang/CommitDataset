[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +            autodetectProcessFactory = (jobDetails, modelSnapshot, quantiles, filters,, +                                        ignoreDowntime, executorService, onProcessCrash) ->, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +            autodetectProcessFactory = (jobDetails, modelSnapshot, quantiles, filters,, +                                        ignoreDowntime, executorService, onProcessCrash) ->, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessFactory.java, +     * @param onProcessCrash  Callback to execute if the process stops unexpectedly, +                                              boolean ignoreDowntime,, +                                              ExecutorService executorService,, +                                              Runnable onProcessCrash);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +            autodetectProcessFactory = (jobDetails, modelSnapshot, quantiles, filters,, +                                        ignoreDowntime, executorService, onProcessCrash) ->, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessFactory.java, +     * @param onProcessCrash  Callback to execute if the process stops unexpectedly, +                                              boolean ignoreDowntime,, +                                              ExecutorService executorService,, +                                              Runnable onProcessCrash);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +                    autodetectParams.quantiles(), autodetectParams.filters(), ignoreDowntime,, +                    executorService, () -> setJobState(taskId, jobId, JobState.FAILED));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +            autodetectProcessFactory = (jobDetails, modelSnapshot, quantiles, filters,, +                                        ignoreDowntime, executorService, onProcessCrash) ->, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessFactory.java, +     * @param onProcessCrash  Callback to execute if the process stops unexpectedly, +                                              boolean ignoreDowntime,, +                                              ExecutorService executorService,, +                                              Runnable onProcessCrash);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +                    autodetectParams.quantiles(), autodetectParams.filters(), ignoreDowntime,, +                    executorService, () -> setJobState(taskId, jobId, JobState.FAILED));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcess.java, +import java.util.Objects;, +    private final Runnable onProcessCrash;, +    private volatile boolean processCloseInitiated;, +    NativeAutodetectProcess(String jobId, InputStream logStream, OutputStream processInStream,, +                            InputStream processOutStream, int numberOfAnalysisFields,, +                            List<Path> filesToDelete, AutodetectResultsParser resultsParser,, +                            Runnable onProcessCrash) {, +        this.onProcessCrash = Objects.requireNonNull(onProcessCrash);, +                LOGGER.error(new ParameterizedMessage("[{}] Error tailing autodetect process logs",, +                        new Object[] { jobId }), e);, +            } finally {, +                if (processCloseInitiated == false) {, +                    // The log message doesn't say "crashed", as the process could have been killed, +                    // by a user or other process (e.g. the Linux OOM killer), +                    LOGGER.error("[{}] autodetect process stopped unexpectedly", jobId);, +                    onProcessCrash.run();, +                }, +            processCloseInitiated = true;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +            autodetectProcessFactory = (jobDetails, modelSnapshot, quantiles, filters,, +                                        ignoreDowntime, executorService, onProcessCrash) ->, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessFactory.java, +     * @param onProcessCrash  Callback to execute if the process stops unexpectedly, +                                              boolean ignoreDowntime,, +                                              ExecutorService executorService,, +                                              Runnable onProcessCrash);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +                    autodetectParams.quantiles(), autodetectParams.filters(), ignoreDowntime,, +                    executorService, () -> setJobState(taskId, jobId, JobState.FAILED));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcess.java, +import java.util.Objects;, +    private final Runnable onProcessCrash;, +    private volatile boolean processCloseInitiated;, +    NativeAutodetectProcess(String jobId, InputStream logStream, OutputStream processInStream,, +                            InputStream processOutStream, int numberOfAnalysisFields,, +                            List<Path> filesToDelete, AutodetectResultsParser resultsParser,, +                            Runnable onProcessCrash) {, +        this.onProcessCrash = Objects.requireNonNull(onProcessCrash);, +                LOGGER.error(new ParameterizedMessage("[{}] Error tailing autodetect process logs",, +                        new Object[] { jobId }), e);, +            } finally {, +                if (processCloseInitiated == false) {, +                    // The log message doesn't say "crashed", as the process could have been killed, +                    // by a user or other process (e.g. the Linux OOM killer), +                    LOGGER.error("[{}] autodetect process stopped unexpectedly", jobId);, +                    onProcessCrash.run();, +                }, +            processCloseInitiated = true;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcessFactory.java, +    public AutodetectProcess createAutodetectProcess(Job job, ModelSnapshot modelSnapshot,, +                                                     Quantiles quantiles, Set<MlFilter> filters,, +                                                     boolean ignoreDowntime,, +                                                     ExecutorService executorService,, +                                                     Runnable onProcessCrash) {, +                processPipes.getProcessOutStream().get(), numberOfAnalysisFields, filesToDelete,, +                resultsParser, onProcessCrash, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +            autodetectProcessFactory = (jobDetails, modelSnapshot, quantiles, filters,, +                                        ignoreDowntime, executorService, onProcessCrash) ->, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessFactory.java, +     * @param onProcessCrash  Callback to execute if the process stops unexpectedly, +                                              boolean ignoreDowntime,, +                                              ExecutorService executorService,, +                                              Runnable onProcessCrash);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +                    autodetectParams.quantiles(), autodetectParams.filters(), ignoreDowntime,]