[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    field = indexService.getIndexSettings().getDefaultField();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    field = indexService.getIndexSettings().getDefaultField();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryShardContext;, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +            searchContext.parsedQuery(queryShardContext.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    field = indexService.getIndexSettings().getDefaultField();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryShardContext;, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +            searchContext.parsedQuery(queryShardContext.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    field = indexService.getIndexSettings().getDefaultField();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryShardContext;, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +            searchContext.parsedQuery(queryShardContext.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.mapperService(), request.shardId().getIndex(), request.shardId().id(), request);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    field = indexService.getIndexSettings().getDefaultField();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryShardContext;, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +            searchContext.parsedQuery(queryShardContext.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.mapperService(), request.shardId().getIndex(), request.shardId().id(), request);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +     * provided {@link org.elasticsearch.index.query.QueryShardContext}, +    public void validateAliasFilter(String alias, String filter, QueryShardContext queryShardContext) {, +        assert queryShardContext != null;, +            validateAliasFilter(parser, queryShardContext);, +     * provided {@link org.elasticsearch.index.query.QueryShardContext}, +    public void validateAliasFilter(String alias, byte[] filter, QueryShardContext queryShardContext) {, +        assert queryShardContext != null;, +            validateAliasFilter(parser, queryShardContext);, +    private void validateAliasFilter(XContentParser parser, QueryShardContext queryShardContext) throws IOException {, +            queryShardContext.reset(parser);, +            queryShardContext.parseContext().parseInnerQueryBuilder().toFilter(queryShardContext);, +            queryShardContext.reset(null);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    field = indexService.getIndexSettings().getDefaultField();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryShardContext;, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +            searchContext.parsedQuery(queryShardContext.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.mapperService(), request.shardId().getIndex(), request.shardId().id(), request);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +     * provided {@link org.elasticsearch.index.query.QueryShardContext}, +    public void validateAliasFilter(String alias, String filter, QueryShardContext queryShardContext) {, +        assert queryShardContext != null;, +            validateAliasFilter(parser, queryShardContext);, +     * provided {@link org.elasticsearch.index.query.QueryShardContext}, +    public void validateAliasFilter(String alias, byte[] filter, QueryShardContext queryShardContext) {, +        assert queryShardContext != null;, +            validateAliasFilter(parser, queryShardContext);, +    private void validateAliasFilter(XContentParser parser, QueryShardContext queryShardContext) throws IOException {, +            queryShardContext.reset(parser);, +            queryShardContext.parseContext().parseInnerQueryBuilder().toFilter(queryShardContext);, +            queryShardContext.reset(null);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +    /**, +     * Returns <code>true</code> iff the given expression resolves to the given index name otherwise <code>false</code>, +     */, +    public final boolean matchesIndex(String indexName, String expression, ClusterState state) {, +        final String[] concreteIndices = concreteIndices(state, IndicesOptions.lenientExpandOpen(), expression);, +        for (String index : concreteIndices) {, +            if (Regex.simpleMatch(index, indexName)) {, +                return true;, +            }, +        }, +        return indexName.equals(expression);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                    field = indexService.getIndexSettings().getDefaultField();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryShardContext;, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +            searchContext.parsedQuery(queryShardContext.toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.mapperService(), request.shardId().getIndex(), request.shardId().id(), request);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +     * provided {@link org.elasticsearch.index.query.QueryShardContext}, +    public void validateAliasFilter(String alias, String filter, QueryShardContext queryShardContext) {, +        assert queryShardContext != null;]