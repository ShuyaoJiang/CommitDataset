[+++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/QueryAnalyzer.java, +        return (query, version) -> new Result(true, Collections.emptySet(), 0);, +            return new Result(true, terms, Math.min(1, terms.size()));, +            return new Result(true, terms, Math.min(1, terms.size()));, +            return new Result(false, terms, Math.min(1, terms.size()));, +            return new Result(true, terms, Math.min(1, terms.size()));, +                return new Result(true, Collections.emptySet(), 0);, +                return new Result(true, Collections.emptySet(), 0);, +            return new Result(false, terms, Math.min(1, terms.size()));, +            if (minimumShouldMatch > numOptionalClauses) {, +                return new Result(false, Collections.emptySet(), 0);, +            }, +                                Result subResult = analyze(clause.getQuery(), version);, +                                if (subResult.matchAllDocs == false && subResult.extractions.isEmpty()) {, +                                    // doesn't match anything, +                                    return subResult;, +                                }, +                                results.add(subResult);, +                            if (result.verified == false, +                                    // If some inner extractions are optional, the result can't be verified, +                                    || result.minimumShouldMatch < result.extractions.size()) {, +                                verified = false;, +                            }, +                return new Result(true, Collections.emptySet(), 0);, +            if (subResult.verified == false, +                    // one of the sub queries requires more than one term to match, we can't, +                    // verify it with a single top-level min_should_match, +                    || subResult.minimumShouldMatch > 1, +                    // One of the inner clauses has multiple extractions, we won't be able to, +                    // verify it with a single top-level min_should_match, +                    || (subResult.extractions.size() > 1 && requiredShouldClauses > 1)) {, +                verified = false;, +            }, +            if (minimumShouldMatch > extractions.size()) {, +                throw new IllegalArgumentException("minimumShouldMatch can't be greater than the number of extractions: ", +                        + minimumShouldMatch + " > " + extractions.size());, +            }, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/QueryAnalyzer.java, +        return (query, version) -> new Result(true, Collections.emptySet(), 0);, +            return new Result(true, terms, Math.min(1, terms.size()));, +            return new Result(true, terms, Math.min(1, terms.size()));, +            return new Result(false, terms, Math.min(1, terms.size()));, +            return new Result(true, terms, Math.min(1, terms.size()));, +                return new Result(true, Collections.emptySet(), 0);, +                return new Result(true, Collections.emptySet(), 0);, +            return new Result(false, terms, Math.min(1, terms.size()));, +            if (minimumShouldMatch > numOptionalClauses) {, +                return new Result(false, Collections.emptySet(), 0);, +            }, +                                Result subResult = analyze(clause.getQuery(), version);, +                                if (subResult.matchAllDocs == false && subResult.extractions.isEmpty()) {, +                                    // doesn't match anything, +                                    return subResult;, +                                }, +                                results.add(subResult);, +                            if (result.verified == false, +                                    // If some inner extractions are optional, the result can't be verified, +                                    || result.minimumShouldMatch < result.extractions.size()) {, +                                verified = false;, +                            }, +                return new Result(true, Collections.emptySet(), 0);, +            if (subResult.verified == false, +                    // one of the sub queries requires more than one term to match, we can't, +                    // verify it with a single top-level min_should_match, +                    || subResult.minimumShouldMatch > 1, +                    // One of the inner clauses has multiple extractions, we won't be able to, +                    // verify it with a single top-level min_should_match, +                    || (subResult.extractions.size() > 1 && requiredShouldClauses > 1)) {, +                verified = false;, +            }, +            if (minimumShouldMatch > extractions.size()) {, +                throw new IllegalArgumentException("minimumShouldMatch can't be greater than the number of extractions: ", +                        + minimumShouldMatch + " > " + extractions.size());, +            }, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +        // many iterations with boolean queries, which are the most complex queries to deal with when nested, +        int numRandomBoolQueries = 1000;, +            int numClauses = randomIntBetween(1, 1 << randomIntBetween(2, 4));, +        int numClauses = randomIntBetween(1, 1 << randomIntBetween(2, 4)); // use low numbers of clauses more often, +        builder.setMinimumNumberShouldMatch(randomIntBetween(0, numShouldClauses));, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/QueryAnalyzer.java, +        return (query, version) -> new Result(true, Collections.emptySet(), 0);, +            return new Result(true, terms, Math.min(1, terms.size()));, +            return new Result(true, terms, Math.min(1, terms.size()));, +            return new Result(false, terms, Math.min(1, terms.size()));, +            return new Result(true, terms, Math.min(1, terms.size()));, +                return new Result(true, Collections.emptySet(), 0);, +                return new Result(true, Collections.emptySet(), 0);, +            return new Result(false, terms, Math.min(1, terms.size()));, +            if (minimumShouldMatch > numOptionalClauses) {, +                return new Result(false, Collections.emptySet(), 0);, +            }, +                                Result subResult = analyze(clause.getQuery(), version);, +                                if (subResult.matchAllDocs == false && subResult.extractions.isEmpty()) {, +                                    // doesn't match anything, +                                    return subResult;, +                                }, +                                results.add(subResult);, +                            if (result.verified == false, +                                    // If some inner extractions are optional, the result can't be verified]