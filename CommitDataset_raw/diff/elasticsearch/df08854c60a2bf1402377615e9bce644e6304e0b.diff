[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +     * Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this, +     * only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and, +     * {@link StreamOutput#writeBytesReference(BytesReference)} if you do not., +     */, +    public BytesReference readOptionalBytesReference() throws IOException {, +        int length = readVInt() - 1;, +        if (length < 0) {, +            return null;, +        }, +        return readBytesReference(length);, +    }, +, +    /**, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +     * Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this, +     * only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and, +     * {@link StreamOutput#writeBytesReference(BytesReference)} if you do not., +     */, +    public BytesReference readOptionalBytesReference() throws IOException {, +        int length = readVInt() - 1;, +        if (length < 0) {, +            return null;, +        }, +        return readBytesReference(length);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +    /**, +     * Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes, +     * references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not., +     */, +    public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {, +        if (bytes == null) {, +            writeVInt(0);, +            return;, +        }, +        writeVInt(bytes.length() + 1);, +        bytes.writeTo(this);, +    }, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +     * Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this, +     * only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and, +     * {@link StreamOutput#writeBytesReference(BytesReference)} if you do not., +     */, +    public BytesReference readOptionalBytesReference() throws IOException {, +        int length = readVInt() - 1;, +        if (length < 0) {, +            return null;, +        }, +        return readBytesReference(length);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +    /**, +     * Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes, +     * references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not., +     */, +    public void writeOptionalBytesReference(@Nullable BytesReference bytes) throws IOException {, +        if (bytes == null) {, +            writeVInt(0);, +            return;, +        }, +        writeVInt(bytes.length() + 1);, +        bytes.writeTo(this);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/Writeable.java, +        throw new UnsupportedOperationException(, +                "Prefer calling a constructor or static method that takes a StreamInput to calling readFrom.");, +        /**, +         * Read R from a stream., +         */, +        R read(StreamInput in) throws IOException;, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +     * Reads an optional bytes reference from this stream. It might hold an actual reference to the underlying bytes of the stream. Use this, +     * only if you must differentiate null from empty. Use {@link StreamInput#readBytesReference()} and, +     * {@link StreamOutput#writeBytesReference(BytesReference)} if you do not., +     */, +    public BytesReference readOptionalBytesReference() throws IOException {, +        int length = readVInt() - 1;, +        if (length < 0) {, +            return null;, +        }, +        return readBytesReference(length);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +    /**, +     * Writes an optional bytes reference including a length header. Use this if you need to differentiate between null and empty bytes, +     * references. Use {@link #writeBytesReference(BytesReference)} and {@link StreamInput#readBytesReference()} if you do not.]