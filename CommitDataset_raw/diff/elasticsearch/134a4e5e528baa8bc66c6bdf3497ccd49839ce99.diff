[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/Condition.java, +            conditions.add(new MaxAgeCondition(TimeValue.parseTimeValue(s, MaxAgeCondition.NAME))), new ParseField(MaxAgeCondition.NAME));, +            conditions.add(new MaxDocsCondition(value)), new ParseField(MaxDocsCondition.NAME));, +    public abstract Result evaluate(final Stats stats);, +, +    public static class Stats {, +        public final long numDocs;, +        public final long indexCreated;, +, +        public Stats(long numDocs, long indexCreated) {, +            this.numDocs = numDocs;, +            this.indexCreated = indexCreated;, +        }, +    }, +, +    public static class Result {, +        public final Condition condition;, +        public final boolean matched;, +, +        protected Result(Condition condition, boolean matched) {, +            this.condition = condition;, +            this.matched = matched;, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/Condition.java, +            conditions.add(new MaxAgeCondition(TimeValue.parseTimeValue(s, MaxAgeCondition.NAME))), new ParseField(MaxAgeCondition.NAME));, +            conditions.add(new MaxDocsCondition(value)), new ParseField(MaxDocsCondition.NAME));, +    public abstract Result evaluate(final Stats stats);, +, +    public static class Stats {, +        public final long numDocs;, +        public final long indexCreated;, +, +        public Stats(long numDocs, long indexCreated) {, +            this.numDocs = numDocs;, +            this.indexCreated = indexCreated;, +        }, +    }, +, +    public static class Result {, +        public final Condition condition;, +        public final boolean matched;, +, +        protected Result(Condition condition, boolean matched) {, +            this.condition = condition;, +            this.matched = matched;, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/MaxAgeCondition.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.admin.indices.rollover;, +, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.unit.TimeValue;, +, +import java.io.IOException;, +, +public class MaxAgeCondition extends Condition<TimeValue> {, +    public final static String NAME = "max_age";, +, +    public MaxAgeCondition(TimeValue value) {, +        super(NAME);, +        this.value = value;, +    }, +, +    public MaxAgeCondition(StreamInput in) throws IOException {, +        super(NAME);, +        this.value = TimeValue.timeValueMillis(in.readLong());, +    }, +, +    @Override, +    public Result evaluate(final Stats stats) {, +        long indexAge = System.currentTimeMillis() - stats.indexCreated;, +        return new Result(this, this.value.getMillis() <= indexAge);, +    }, +, +    @Override, +    public String getWriteableName() {, +        return NAME;, +    }, +]