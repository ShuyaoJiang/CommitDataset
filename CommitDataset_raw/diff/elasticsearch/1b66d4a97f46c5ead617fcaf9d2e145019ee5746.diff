[+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/BulkByScrollTask.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +    private static final ESLogger logger = ESLoggerFactory.getLogger(BulkByScrollTask.class.getName());, +, +            if (logger.isDebugEnabled()) {, +                logger.debug("[{}]: Rethrottling to [{}] requests per second", getId(), newRequestsPerSecond);, +            }, +                if (logger.isDebugEnabled()) {, +                    logger.debug("[{}]: Skipping rescheduling because there is no scheduled task", getId());, +                }, +                if (logger.isDebugEnabled()) {, +                    logger.debug("[{}]: Skipping rescheduling because the new throttle [{}] is slower than the old one [{}].", getId(),, +                            newRequestsPerSecond, requestsPerSecond);, +                }, +                if (logger.isDebugEnabled()) {, +                    logger.debug("[{}]: Skipping rescheduling we couldn't cancel the task.", getId());, +                }, +            if (logger.isDebugEnabled()) {, +                logger.debug("[{}]: Rescheduling for [{}] in the future.", getId(), newDelay);, +            }, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/BulkByScrollTask.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +    private static final ESLogger logger = ESLoggerFactory.getLogger(BulkByScrollTask.class.getName());, +, +            if (logger.isDebugEnabled()) {, +                logger.debug("[{}]: Rethrottling to [{}] requests per second", getId(), newRequestsPerSecond);, +            }, +                if (logger.isDebugEnabled()) {, +                    logger.debug("[{}]: Skipping rescheduling because there is no scheduled task", getId());, +                }, +                if (logger.isDebugEnabled()) {, +                    logger.debug("[{}]: Skipping rescheduling because the new throttle [{}] is slower than the old one [{}].", getId(),, +                            newRequestsPerSecond, requestsPerSecond);, +                }, +                if (logger.isDebugEnabled()) {, +                    logger.debug("[{}]: Skipping rescheduling we couldn't cancel the task.", getId());, +                }, +            if (logger.isDebugEnabled()) {, +                logger.debug("[{}]: Rescheduling for [{}] in the future.", getId(), newDelay);, +            }, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RethrottleTests.java, +        request.setRequestsPerSecond(.000001f);  // Throttle "forever"]