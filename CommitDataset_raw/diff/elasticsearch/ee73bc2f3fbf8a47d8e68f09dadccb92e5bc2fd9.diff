[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/DefaultAuthenticationFailureHandler.java, +import java.util.ArrayList;, +import java.util.stream.Collectors;, +    public DefaultAuthenticationFailureHandler(final Map<String, List<String>> failureResponseHeaders) {, +            this.defaultFailureResponseHeaders = Collections.singletonMap("WWW-Authenticate",, +        } else {, +            this.defaultFailureResponseHeaders = Collections.unmodifiableMap(failureResponseHeaders.entrySet().stream().collect(Collectors, +                    .toMap(entry -> entry.getKey(), entry -> {, +                        if (entry.getKey().equalsIgnoreCase("WWW-Authenticate")) {, +                            List<String> values = new ArrayList<>(entry.getValue());, +                            Collections.sort(values, (o1, o2) -> authSchemePriority(o1).compareTo(authSchemePriority(o2)));, +                            return Collections.unmodifiableList(values);, +                        } else {, +                            return Collections.unmodifiableList(entry.getValue());, +                    })));, +        }, +    }, +, +    /**, +     * For given 'WWW-Authenticate' header value returns the priority based on, +     * the auth-scheme. Lower number denotes more secure and preferred, +     * auth-scheme than the higher number., +     *, +     * @param headerValue string starting with auth-scheme name, +     * @return integer value denoting priority for given auth scheme., +     */, +    private static Integer authSchemePriority(final String headerValue) {, +        if (headerValue.regionMatches(true, 0, "negotiate", 0, "negotiate".length())) {, +            return 0;, +        } else if (headerValue.regionMatches(true, 0, "bearer", 0, "bearer".length())) {, +            return 1;, +        } else if (headerValue.regionMatches(true, 0, "basic", 0, "basic".length())) {, +            return 2;, +        } else {, +            return 3;, +        }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/DefaultAuthenticationFailureHandler.java, +import java.util.ArrayList;, +import java.util.stream.Collectors;, +    public DefaultAuthenticationFailureHandler(final Map<String, List<String>> failureResponseHeaders) {, +            this.defaultFailureResponseHeaders = Collections.singletonMap("WWW-Authenticate",, +        } else {, +            this.defaultFailureResponseHeaders = Collections.unmodifiableMap(failureResponseHeaders.entrySet().stream().collect(Collectors, +                    .toMap(entry -> entry.getKey(), entry -> {, +                        if (entry.getKey().equalsIgnoreCase("WWW-Authenticate")) {, +                            List<String> values = new ArrayList<>(entry.getValue());, +                            Collections.sort(values, (o1, o2) -> authSchemePriority(o1).compareTo(authSchemePriority(o2)));, +                            return Collections.unmodifiableList(values);, +                        } else {, +                            return Collections.unmodifiableList(entry.getValue());, +                    })));, +        }, +    }, +, +    /**, +     * For given 'WWW-Authenticate' header value returns the priority based on, +     * the auth-scheme. Lower number denotes more secure and preferred, +     * auth-scheme than the higher number., +     *, +     * @param headerValue string starting with auth-scheme name, +     * @return integer value denoting priority for given auth scheme., +     */, +    private static Integer authSchemePriority(final String headerValue) {, +        if (headerValue.regionMatches(true, 0, "negotiate", 0, "negotiate".length())) {, +            return 0;, +        } else if (headerValue.regionMatches(true, 0, "bearer", 0, "bearer".length())) {, +            return 1;, +        } else if (headerValue.regionMatches(true, 0, "basic", 0, "basic".length())) {, +            return 2;, +        } else {, +            return 3;, +        }, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authc/DefaultAuthenticationFailureHandlerTests.java, +            assertWWWAuthenticateWithSchemes(ese, bearerAuthScheme, basicAuthScheme);, +                    assertWWWAuthenticateWithSchemes(ese, negotiateAuthScheme, bearerAuthScheme, basicAuthScheme);, +                        assertWWWAuthenticateWithSchemes(ese, negotiateAuthScheme, bearerAuthScheme, basicAuthScheme);, +            assertWWWAuthenticateWithSchemes(ese, negotiateAuthScheme, bearerAuthScheme, basicAuthScheme);, +    public void testSortsWWWAuthenticateHeaderValues() {, +        final String basicAuthScheme = "Basic realm=\"" + XPackField.SECURITY + "\" charset=\"UTF-8\"";, +        final String bearerAuthScheme = "Bearer realm=\"" + XPackField.SECURITY + "\"";, +        final String negotiateAuthScheme = randomFrom("Negotiate", "Negotiate Ijoijksdk");, +        final Map<String, List<String>> failureResponeHeaders = new HashMap<>();, +        final List<String> supportedSchemes = Arrays.asList(basicAuthScheme, bearerAuthScheme, negotiateAuthScheme);, +        Collections.shuffle(supportedSchemes, random());, +        failureResponeHeaders.put("WWW-Authenticate", supportedSchemes);, +        final DefaultAuthenticationFailureHandler failuerHandler = new DefaultAuthenticationFailureHandler(failureResponeHeaders);, +, +        final ElasticsearchSecurityException ese = failuerHandler.exceptionProcessingRequest(Mockito.mock(RestRequest.class), null,, +                new ThreadContext(Settings.builder().build()));, +, +        assertThat(ese, is(notNullValue()));, +        assertThat(ese.getHeader("WWW-Authenticate"), is(notNullValue()));, +        assertThat(ese.getMessage(), equalTo("error attempting to authenticate request"));, +        assertWWWAuthenticateWithSchemes(ese, negotiateAuthScheme, bearerAuthScheme, basicAuthScheme);, +    }, +]