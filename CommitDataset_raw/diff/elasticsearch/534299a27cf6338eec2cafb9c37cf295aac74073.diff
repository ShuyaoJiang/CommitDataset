[+++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                        float sc = FunctionScoreQuery.toFloat(getBoost() * factor);, +                        Explanation filterExplanation = new ComplexExplanation(true, sc, "function score, product of:");, +                        Explanation topLevel = new ComplexExplanation(true, topLevelScore, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +                        Explanation res = new ComplexExplanation(true, FunctionScoreQuery.toFloat(factor), "function score, product of:");, +                    float sc = FunctionScoreQuery.toFloat(factor * subQueryExpl.getValue() * getBoost());, +                    Explanation res = new ComplexExplanation(true, sc, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +            return FunctionScoreQuery.toFloat(subQueryBoost * score * factor);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                        float sc = FunctionScoreQuery.toFloat(getBoost() * factor);, +                        Explanation filterExplanation = new ComplexExplanation(true, sc, "function score, product of:");, +                        Explanation topLevel = new ComplexExplanation(true, topLevelScore, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +                        Explanation res = new ComplexExplanation(true, FunctionScoreQuery.toFloat(factor), "function score, product of:");, +                    float sc = FunctionScoreQuery.toFloat(factor * subQueryExpl.getValue() * getBoost());, +                    Explanation res = new ComplexExplanation(true, sc, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +            return FunctionScoreQuery.toFloat(subQueryBoost * score * factor);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +            Explanation res = new ComplexExplanation(true, sc, "function score, product of:");, +        assert Double.compare(((float) input), input) == 0 || (Math.abs(((float) input) - input) <= 0.001) : "input " + input + " out of float scope for function score";, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                        float sc = FunctionScoreQuery.toFloat(getBoost() * factor);, +                        Explanation filterExplanation = new ComplexExplanation(true, sc, "function score, product of:");, +                        Explanation topLevel = new ComplexExplanation(true, topLevelScore, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +                        Explanation res = new ComplexExplanation(true, FunctionScoreQuery.toFloat(factor), "function score, product of:");, +                    float sc = FunctionScoreQuery.toFloat(factor * subQueryExpl.getValue() * getBoost());, +                    Explanation res = new ComplexExplanation(true, sc, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +            return FunctionScoreQuery.toFloat(subQueryBoost * score * factor);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +            Explanation res = new ComplexExplanation(true, sc, "function score, product of:");, +        assert Double.compare(((float) input), input) == 0 || (Math.abs(((float) input) - input) <= 0.001) : "input " + input + " out of float scope for function score";, +++ b/src/test/java/org/elasticsearch/test/integration/search/customscore/CustomScoreSearchTests.java, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                        float sc = FunctionScoreQuery.toFloat(getBoost() * factor);, +                        Explanation filterExplanation = new ComplexExplanation(true, sc, "function score, product of:");, +                        Explanation topLevel = new ComplexExplanation(true, topLevelScore, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +                        Explanation res = new ComplexExplanation(true, FunctionScoreQuery.toFloat(factor), "function score, product of:");, +                    float sc = FunctionScoreQuery.toFloat(factor * subQueryExpl.getValue() * getBoost());, +                    Explanation res = new ComplexExplanation(true, sc, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +            return FunctionScoreQuery.toFloat(subQueryBoost * score * factor);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +            Explanation res = new ComplexExplanation(true, sc, "function score, product of:");, +        assert Double.compare(((float) input), input) == 0 || (Math.abs(((float) input) - input) <= 0.001) : "input " + input + " out of float scope for function score";, +++ b/src/test/java/org/elasticsearch/test/integration/search/customscore/CustomScoreSearchTests.java, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                        float sc = FunctionScoreQuery.toFloat(getBoost() * factor);, +                        Explanation filterExplanation = new ComplexExplanation(true, sc, "function score, product of:");, +                        Explanation topLevel = new ComplexExplanation(true, topLevelScore, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +                        Explanation res = new ComplexExplanation(true, FunctionScoreQuery.toFloat(factor), "function score, product of:");, +                    float sc = FunctionScoreQuery.toFloat(factor * subQueryExpl.getValue() * getBoost());, +                    Explanation res = new ComplexExplanation(true, sc, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +            return FunctionScoreQuery.toFloat(subQueryBoost * score * factor);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +            Explanation res = new ComplexExplanation(true, sc, "function score, product of:");, +        assert Double.compare(((float) input), input) == 0 || (Math.abs(((float) input) - input) <= 0.001) : "input " + input + " out of float scope for function score";, +++ b/src/test/java/org/elasticsearch/test/integration/search/customscore/CustomScoreSearchTests.java, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                        float sc = FunctionScoreQuery.toFloat(getBoost() * factor);, +                        Explanation filterExplanation = new ComplexExplanation(true, sc, "function score, product of:");, +                        Explanation topLevel = new ComplexExplanation(true, topLevelScore, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +                        Explanation res = new ComplexExplanation(true, FunctionScoreQuery.toFloat(factor), "function score, product of:");, +                    float sc = FunctionScoreQuery.toFloat(factor * subQueryExpl.getValue() * getBoost());, +                    Explanation res = new ComplexExplanation(true, sc, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +            return FunctionScoreQuery.toFloat(subQueryBoost * score * factor);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +            Explanation res = new ComplexExplanation(true, sc, "function score, product of:");, +        assert Double.compare(((float) input), input) == 0 || (Math.abs(((float) input) - input) <= 0.001) : "input " + input + " out of float scope for function score";, +++ b/src/test/java/org/elasticsearch/test/integration/search/customscore/CustomScoreSearchTests.java, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +        assertThat(explanation.getDescription(), equalTo("function score, score mode [first]"));, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                        float sc = FunctionScoreQuery.toFloat(getBoost() * factor);, +                        Explanation filterExplanation = new ComplexExplanation(true, sc, "function score, product of:");, +                        Explanation topLevel = new ComplexExplanation(true, topLevelScore, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +                        Explanation res = new ComplexExplanation(true, FunctionScoreQuery.toFloat(factor), "function score, product of:");, +                    float sc = FunctionScoreQuery.toFloat(factor * subQueryExpl.getValue() * getBoost());, +                    Explanation res = new ComplexExplanation(true, sc, "function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");, +            return FunctionScoreQuery.toFloat(subQueryBoost * score * factor);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +            Explanation res = new ComplexExplanation(true, sc, "function score, product of:");, +        assert Double.compare(((float) input), input) == 0 || (Math.abs(((float) input) - input) <= 0.001) : "input " + input + " out of float scope for function score";]