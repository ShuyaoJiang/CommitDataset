[+++ b/src/test/java/org/elasticsearch/test/unit/common/util/concurrent/EsExecutorsTests.java, +import com.google.common.base.Predicate;, +import org.elasticsearch.test.integration.ElasticsearchTestCase;, +import java.util.concurrent.CountDownLatch;, +public class EsExecutorsTests extends ElasticsearchTestCase {, +    , +    private TimeUnit randomTimeUnit() {, +        return TimeUnit.values()[between(0, TimeUnit.values().length-1)];, +    }, +        final int min = between(1, 3);, +        final int max = between(min+1, 6);, +        ThreadPoolExecutor pool = EsExecutors.newScalingExecutorService(min, max, between(1, 100), randomTimeUnit(), EsExecutors.daemonThreadFactory("test"));, +            final CountDownLatch latch = new CountDownLatch(1);, +                    latch.countDown();, +            latch.await();, +        final int min = between(1, 3);, +        final int max = between(min+1, 6);, +        final ThreadPoolExecutor pool = EsExecutors.newScalingExecutorService(min, max, between(1, 100), TimeUnit.MILLISECONDS, EsExecutors.daemonThreadFactory("test"));, +            final CountDownLatch latch = new CountDownLatch(1);, +                    latch.countDown();, +            latch.await();, +        awaitBusy(new Predicate<Object>() {, +            public boolean apply(Object o) {, +                return pool.getActiveCount() == 0 && pool.getPoolSize() < max;, +            }, +        });, +        //assertThat("wrong pool size. ", min, equalTo(pool.getPoolSize())); //BUG in ThreadPool - Bug ID: 6458662, +        final int min = between(1, 3);, +        final int max = between(min+1, 6);, +        final long waitTime = between(1000, 2000); //1 second, +        ThreadPoolExecutor pool = EsExecutors.newBlockingExecutorService(min, max, between(1, 100), randomTimeUnit(), EsExecutors.daemonThreadFactory("test"), 1, waitTime, TimeUnit.MILLISECONDS);, +            final CountDownLatch latch = new CountDownLatch(1);, +                    latch.countDown();, +            latch.await();]