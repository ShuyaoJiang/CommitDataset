[+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/store/ReservedRolesStoreTests.java, +import org.elasticsearch.xpack.core.ml.action.DeleteCalendarAction;, +import org.elasticsearch.xpack.core.ml.action.DeleteCalendarEventAction;, +import org.elasticsearch.xpack.core.ml.action.DeleteForecastAction;, +import org.elasticsearch.xpack.core.ml.action.FindFileStructureAction;, +import org.elasticsearch.xpack.core.ml.action.ForecastJobAction;, +import org.elasticsearch.xpack.core.ml.action.GetCalendarEventsAction;, +import org.elasticsearch.xpack.core.ml.action.GetCalendarsAction;, +import org.elasticsearch.xpack.core.ml.action.GetOverallBucketsAction;, +import org.elasticsearch.xpack.core.ml.action.MlInfoAction;, +import org.elasticsearch.xpack.core.ml.action.PersistJobAction;, +import org.elasticsearch.xpack.core.ml.action.PostCalendarEventsAction;, +import org.elasticsearch.xpack.core.ml.action.PutCalendarAction;, +import org.elasticsearch.xpack.core.ml.action.UpdateCalendarJobAction;, +import org.elasticsearch.xpack.core.ml.action.UpdateFilterAction;, +import org.elasticsearch.xpack.core.ml.annotations.AnnotationIndex;, +        assertThat(role.cluster().check(DeleteCalendarAction.NAME, request), is(true));, +        assertThat(role.cluster().check(DeleteCalendarEventAction.NAME, request), is(true));, +        assertThat(role.cluster().check(DeleteForecastAction.NAME, request), is(true));, +        assertThat(role.cluster().check(FindFileStructureAction.NAME, request), is(true));, +        assertThat(role.cluster().check(ForecastJobAction.NAME, request), is(true));, +        assertThat(role.cluster().check(GetCalendarEventsAction.NAME, request), is(true));, +        assertThat(role.cluster().check(GetCalendarsAction.NAME, request), is(true));, +        assertThat(role.cluster().check(GetOverallBucketsAction.NAME, request), is(true));, +        assertThat(role.cluster().check(MlInfoAction.NAME, request), is(true));, +        assertThat(role.cluster().check(PersistJobAction.NAME, request), is(true));, +        assertThat(role.cluster().check(PostCalendarEventsAction.NAME, request), is(true));, +        assertThat(role.cluster().check(PutCalendarAction.NAME, request), is(true));, +        assertThat(role.cluster().check(UpdateCalendarJobAction.NAME, request), is(true));, +        assertThat(role.cluster().check(UpdateFilterAction.NAME, request), is(true));, +        assertNoAccessAllowed(role, AnomalyDetectorsIndexFields.CONFIG_INDEX); // internal use only, +        assertReadWriteDocsButNotDeleteIndexAllowed(role, AnnotationIndex.INDEX_NAME);, +        assertThat(role.cluster().check(DeleteCalendarAction.NAME, request), is(false));, +        assertThat(role.cluster().check(DeleteCalendarEventAction.NAME, request), is(false));, +        assertThat(role.cluster().check(DeleteForecastAction.NAME, request), is(false));, +        assertThat(role.cluster().check(FindFileStructureAction.NAME, request), is(true));, +        assertThat(role.cluster().check(ForecastJobAction.NAME, request), is(false));, +        assertThat(role.cluster().check(GetCalendarEventsAction.NAME, request), is(true));, +        assertThat(role.cluster().check(GetCalendarsAction.NAME, request), is(true));, +        assertThat(role.cluster().check(GetOverallBucketsAction.NAME, request), is(true));, +        assertThat(role.cluster().check(MlInfoAction.NAME, request), is(true));, +        assertThat(role.cluster().check(PersistJobAction.NAME, request), is(false));, +        assertThat(role.cluster().check(PostCalendarEventsAction.NAME, request), is(false));, +        assertThat(role.cluster().check(PutCalendarAction.NAME, request), is(false));, +        assertThat(role.cluster().check(UpdateCalendarJobAction.NAME, request), is(false));, +        assertThat(role.cluster().check(UpdateFilterAction.NAME, request), is(false));, +        assertNoAccessAllowed(role, AnomalyDetectorsIndexFields.CONFIG_INDEX);, +        assertReadWriteDocsButNotDeleteIndexAllowed(role, AnnotationIndex.INDEX_NAME);, +    private void assertReadWriteDocsButNotDeleteIndexAllowed(Role role, String index) {, +        assertThat(role.indices().allowedIndicesMatcher(DeleteIndexAction.NAME).test(index), is(false));, +        assertThat(role.indices().allowedIndicesMatcher(SearchAction.NAME).test(index), is(true));, +        assertThat(role.indices().allowedIndicesMatcher(GetAction.NAME).test(index), is(true));, +        assertThat(role.indices().allowedIndicesMatcher(IndexAction.NAME).test(index), is(true));, +        assertThat(role.indices().allowedIndicesMatcher(UpdateAction.NAME).test(index), is(true));, +        assertThat(role.indices().allowedIndicesMatcher(DeleteAction.NAME).test(index), is(true));, +        assertThat(role.indices().allowedIndicesMatcher(BulkAction.NAME).test(index), is(true));, +    }, +]