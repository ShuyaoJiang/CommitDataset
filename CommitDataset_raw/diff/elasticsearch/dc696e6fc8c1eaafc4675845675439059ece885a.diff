[+++ b/dev-tools/upgrade-tests.py, +import re, +, +# picks a random version or and entire random version tuple from the directory, +# to run the backwards tests against., +def pick_random_upgrade_version(directory, lower_version=None, upper_version=None):, +  if lower_version and upper_version:, +    return lower_version, upper_version, +  assert os.path.isdir(directory), 'No such directory %s' % directory, +  versions = [], +  for version in map(lambda x : x[len('elasticsearch-'):], filter(lambda x : re.match(r'^elasticsearch-\d+[.]\d+[.]\d+$', x), os.listdir(directory))):, +    if not version in BLACK_LIST:, +      versions.append(build_tuple(version)), +  versions.sort(), +, +  if lower_version: # lower version is set - picking a higher one, +    versions = filter(lambda x : x > build_tuple(lower_version), versions), +    assert len(versions) >= 1, 'Expected at least 1 higher version than %s version in %s ' % (lower_version, directory), +    random.shuffle(versions), +    return lower_version, build_version(versions[0]), +  if upper_version:, +    versions = filter(lambda x : x < build_tuple(upper_version), versions), +    assert len(versions) >= 1, 'Expected at least 1 lower version than %s version in %s ' % (upper_version, directory), +    random.shuffle(versions), +    return build_version(versions[0]), upper_version, +  assert len(versions) >= 2, 'Expected at least 2 different version in %s but found %s' % (directory, len(versions)), +  random.shuffle(versions), +  versions = versions[0:2], +  versions.sort(), +  return build_version(versions[0]), build_version(versions[1]), +, +def build_version(version_tuple):, +  return '.'.join([str(x) for x in version_tuple]), +, +def build_tuple(version_string):, +  return [int(x) for x in version_string.split('.')], +, +def full_cluster_restart(node_dir, current_version, bwc_version, tcp_port, http_port):, +    logging.info("[SUCCESS] - all test passed upgrading from version [%s] to version [%s]" % (bwc_version, current_version)), +                      help='The elasticsearch version to upgrade from'), +                      help='The elasticsearch version to upgrade to'), +  random.seed(seed), +  bwc_version, current_version = pick_random_upgrade_version(node_dir, bwc_version, current_version), +    full_cluster_restart(node_dir, current_version, bwc_version, tcp_port, http_port)]