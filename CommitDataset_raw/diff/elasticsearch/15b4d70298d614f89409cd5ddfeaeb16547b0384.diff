[+++ b/src/main/java/org/elasticsearch/transport/TransportModule.java, +    public static final String TRANSPORT_TYPE_KEY = "transport.type";, +, +        return ImmutableList.of(Modules.createModule(settings.getAsClass(TRANSPORT_TYPE_KEY, defaultTransportModule, "org.elasticsearch.transport.", "TransportModule"), settings));, +++ b/src/main/java/org/elasticsearch/transport/TransportModule.java, +    public static final String TRANSPORT_TYPE_KEY = "transport.type";, +, +        return ImmutableList.of(Modules.createModule(settings.getAsClass(TRANSPORT_TYPE_KEY, defaultTransportModule, "org.elasticsearch.transport.", "TransportModule"), settings));, +++ b/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +   protected void messageReceived(byte[] data, String action, LocalTransport sourceTransport, Version version, @Nullable final Long sendRequestId) {, +    protected void handleResponse(StreamInput buffer, final TransportResponseHandler handler) {, +        handleParsedRespone(response, handler);, +    }, +    , +    protected void handleParsedRespone(final TransportResponse response, final TransportResponseHandler handler) {, +++ b/src/main/java/org/elasticsearch/transport/TransportModule.java, +    public static final String TRANSPORT_TYPE_KEY = "transport.type";, +, +        return ImmutableList.of(Modules.createModule(settings.getAsClass(TRANSPORT_TYPE_KEY, defaultTransportModule, "org.elasticsearch.transport.", "TransportModule"), settings));, +++ b/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +   protected void messageReceived(byte[] data, String action, LocalTransport sourceTransport, Version version, @Nullable final Long sendRequestId) {, +    protected void handleResponse(StreamInput buffer, final TransportResponseHandler handler) {, +        handleParsedRespone(response, handler);, +    }, +    , +    protected void handleParsedRespone(final TransportResponse response, final TransportResponseHandler handler) {, +++ b/src/test/java/org/elasticsearch/test/ElasticSearchTestCase.java, +import com.google.common.collect.ImmutableList;, +import org.elasticsearch.Version;, +import java.lang.reflect.Field;, +import java.lang.reflect.Modifier;, +import java.util.*;, +    private static final List<Version> SORTED_VERSIONS;, +    , +    static {, +        Field[] declaredFields = Version.class.getDeclaredFields();, +        Set<Integer> ids = new HashSet<Integer>();, +        for (Field field : declaredFields) {, +            final int mod = field.getModifiers();, +            if (Modifier.isStatic(mod) && Modifier.isFinal(mod) && Modifier.isPublic(mod)) {, +                if (field.getType() == Version.class) {, +                    try {, +                        Version object = (Version) field.get(null);, +                        ids.add(object.id);, +                    } catch (Throwable e) {, +                        throw new RuntimeException(e);, +                    }, +                }, +            }, +        }, +        List<Integer> idList = new ArrayList<Integer>(ids);, +        Collections.sort(idList);, +        Collections.reverse(idList);, +        ImmutableList.Builder<Version> version = ImmutableList.builder();, +        for (Integer integer : idList) {, +            version.add(Version.fromId(integer));, +        }, +        SORTED_VERSIONS = version.build();, +    }, +    , +    public static Version getPreviousVersion() {, +        Version version = SORTED_VERSIONS.get(1);, +        assert version.before(Version.CURRENT);, +        return version;, +    }, +    , +    public static Version randomVersion() {, +        return randomVersion(getRandom());, +    }, +    , +    public static Version randomVersion(Random random) {, +        return SORTED_VERSIONS.get(random.nextInt(SORTED_VERSIONS.size()));, +    }, +    , +++ b/src/main/java/org/elasticsearch/transport/TransportModule.java, +    public static final String TRANSPORT_TYPE_KEY = "transport.type";, +, +        return ImmutableList.of(Modules.createModule(settings.getAsClass(TRANSPORT_TYPE_KEY, defaultTransportModule, "org.elasticsearch.transport.", "TransportModule"), settings));, +++ b/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +   protected void messageReceived(byte[] data, String action, LocalTransport sourceTransport, Version version, @Nullable final Long sendRequestId) {, +    protected void handleResponse(StreamInput buffer, final TransportResponseHandler handler) {, +        handleParsedRespone(response, handler);, +    }, +    , +    protected void handleParsedRespone(final TransportResponse response, final TransportResponseHandler handler) {, +++ b/src/test/java/org/elasticsearch/test/ElasticSearchTestCase.java, +import com.google.common.collect.ImmutableList;, +import org.elasticsearch.Version;, +import java.lang.reflect.Field;, +import java.lang.reflect.Modifier;, +import java.util.*;, +    private static final List<Version> SORTED_VERSIONS;, +    , +    static {, +        Field[] declaredFields = Version.class.getDeclaredFields();, +        Set<Integer> ids = new HashSet<Integer>();, +        for (Field field : declaredFields) {, +            final int mod = field.getModifiers();, +            if (Modifier.isStatic(mod) && Modifier.isFinal(mod) && Modifier.isPublic(mod)) {, +                if (field.getType() == Version.class) {]