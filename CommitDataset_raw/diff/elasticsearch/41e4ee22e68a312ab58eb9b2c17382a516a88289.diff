[+++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +            String name = holder.info.getName();, +            String name = holder.info.getName();, +        String type = settings.get("type", previousInfo != null ? previousInfo.getType() : defaultSettings.get("type"));, +                if ("cached".equals(previousInfo.getType())) {, +                    TimeValue updatedKeepAlive = settings.getAsTime("keep_alive", previousInfo.getKeepAlive());, +                    if (!previousInfo.getKeepAlive().equals(updatedKeepAlive)) {, +                if (previousInfo.getKeepAlive() != null) {, +                    defaultKeepAlive = previousInfo.getKeepAlive();, +            SizeValue defaultQueueSize = defaultSettings.getAsSize("queue", defaultSettings.getAsSize("queue_size", null));, +                if ("fixed".equals(previousInfo.getType())) {, +                    SizeValue updatedQueueSize = settings.getAsSize("capacity", settings.getAsSize("queue", settings.getAsSize("queue_size", previousInfo.getQueueSize())));, +                    String updatedQueueType = settings.get("queue_type", previousInfo.getQueueType());, +                    if (Objects.equal(previousInfo.getQueueSize(), updatedQueueSize) && previousInfo.getQueueType().equals(updatedQueueType)) {, +                        int updatedSize = settings.getAsInt("size", previousInfo.getMax());, +                        String updatedRejectSetting = settings.get("reject_policy", previousInfo.getRejectSetting());, +                        if (previousInfo.getMax() != updatedSize) {, +                            logger.debug("updating thread_pool [{}], type [{}], size [{}], queue_size [{}], reject_policy [{}], queue_type [{}]", name, type, updatedSize, updatedQueueSize, updatedRejectSetting, updatedQueueType);, +                            return new ExecutorHolder(previousExecutorHolder.executor, new Info(name, type, updatedSize, updatedSize, null, updatedQueueSize, null, updatedRejectSetting, updatedQueueType));, +                        if (!previousInfo.getRejectSetting().equals(updatedRejectSetting)) {, +                            logger.debug("updating thread_pool [{}], type [{}], size [{}], queue_size [{}], reject_policy [{}], queue_type [{}]", name, type, updatedSize, updatedQueueSize, updatedRejectSetting, updatedQueueType);, +                            return new ExecutorHolder(previousExecutorHolder.executor, new Info(name, type, updatedSize, updatedSize, null, updatedQueueSize, null, updatedRejectSetting, updatedQueueType));, +                if (previousInfo.getMax() >= 0) {, +                    defaultSize = previousInfo.getMax();, +                defaultQueueSize = previousInfo.getQueueSize();, +                if (previousInfo.getQueueType() != null) {, +                    defaultQueueType = previousInfo.getQueueType();, +            SizeValue queueSize = settings.getAsSize("capacity", settings.getAsSize("queue", settings.getAsSize("queue_size", defaultQueueSize)));, +            BlockingQueue<Runnable> workQueue = newQueue(queueSize, queueType);, +            logger.debug("creating thread_pool [{}], type [{}], size [{}], queue_size [{}], reject_policy [{}], queue_type [{}]", name, type, size, queueSize, rejectSetting, queueType);, +            return new ExecutorHolder(executor, new Info(name, type, size, size, null, queueSize, null, rejectSetting, queueType));, +                    if (!previousInfo.getKeepAlive().equals(updatedKeepAlive) || previousInfo.getMin() != updatedMin || previousInfo.getMax() != updatedSize) {, +            SizeValue defaultQueueSize = defaultSettings.getAsSize("queue_size", new SizeValue(1000));, +                    SizeValue updatedQueueSize = settings.getAsSize("capacity", settings.getAsSize("queue", settings.getAsSize("queue_size", defaultQueueSize)));, +                    if (previousInfo.getQueueSize().equals(updatedQueueSize) && previousInfo.getWaitTime().equals(updatedWaitTime)) {, +                        if (!previousInfo.getKeepAlive().equals(updatedKeepAlive) || !previousInfo.getWaitTime().equals(settings.getAsTime("wait_time", defaultWaitTime)) ||, +                            return new ExecutorHolder(previousExecutorHolder.executor, new Info(name, type, updatedMin, updatedSize, updatedKeepAlive, updatedQueueSize, updatedWaitTime));, +                if (previousInfo.getQueueSize() != null) {, +                    defaultQueueSize = previousInfo.getQueueSize();, +                if (previousInfo.getWaitTime() != null) {, +                    defaultWaitTime = previousInfo.getWaitTime();, +            SizeValue queueSize = settings.getAsSize("capacity", settings.getAsSize("queue", settings.getAsSize("queue_size", defaultQueueSize)));, +                logger.debug("updating thread_pool [{}], type [{}], min [{}], size [{}], queue_size [{}], keep_alive [{}], wait_time [{}]", name, type, min, size, queueSize.singles(), keepAlive, waitTime);, +                logger.debug("creating thread_pool [{}], type [{}], min [{}], size [{}], queue_size [{}], keep_alive [{}], wait_time [{}]", name, type, min, size, queueSize.singles(), keepAlive, waitTime);, +            Executor executor = EsExecutors.newBlockingExecutorService(min, size, keepAlive.millis(), TimeUnit.MILLISECONDS, threadFactory, (int) queueSize.singles(), waitTime.millis(), TimeUnit.MILLISECONDS);, +            return new ExecutorHolder(executor, new Info(name, type, min, size, keepAlive, queueSize, waitTime));, +    private BlockingQueue<Runnable> newQueue(SizeValue queueSize, String queueType) {, +        if (queueSize == null) {, +        } else if ((int) queueSize.singles() > 0) {, +                return new LinkedBlockingQueue<Runnable>((int) queueSize.singles());, +                return new ArrayBlockingQueue<Runnable>((int) queueSize.singles());, +        private SizeValue queueSize;, +        public Info(String name, String type, int min, int max, @Nullable TimeValue keepAlive, @Nullable SizeValue queueSize) {, +            this(name, type, min, max, keepAlive, queueSize, null);, +        public Info(String name, String type, int min, int max, @Nullable TimeValue keepAlive, @Nullable SizeValue queueSize, @Nullable TimeValue waitTime) {, +            this(name, type, min, max, keepAlive, queueSize, waitTime, null, null);, +        public Info(String name, String type, int min, int max, @Nullable TimeValue keepAlive, @Nullable SizeValue queueSize, @Nullable TimeValue waitTime, String rejectSetting, String queueType) {, +            this.queueSize = queueSize;, +        public SizeValue getQueueSize() {, +            return this.queueSize;, +                queueSize = SizeValue.readSizeValue(in);, +            if (queueSize == null) {, +                queueSize.writeTo(out);, +            if (queueSize != null) {, +                builder.field(Fields.QUEUE_SIZE, queueSize.toString());, +            static final XContentBuilderString QUEUE_SIZE = new XContentBuilderString("queue_size");, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +            String name = holder.info.getName();, +            String name = holder.info.getName();, +        String type = settings.get("type", previousInfo != null ? previousInfo.getType() : defaultSettings.get("type"));, +                if ("cached".equals(previousInfo.getType())) {, +                    TimeValue updatedKeepAlive = settings.getAsTime("keep_alive", previousInfo.getKeepAlive());, +                    if (!previousInfo.getKeepAlive().equals(updatedKeepAlive)) {, +                if (previousInfo.getKeepAlive() != null) {, +                    defaultKeepAlive = previousInfo.getKeepAlive();, +            SizeValue defaultQueueSize = defaultSettings.getAsSize("queue", defaultSettings.getAsSize("queue_size", null));, +                if ("fixed".equals(previousInfo.getType())) {, +                    SizeValue updatedQueueSize = settings.getAsSize("capacity", settings.getAsSize("queue", settings.getAsSize("queue_size", previousInfo.getQueueSize())));, +                    String updatedQueueType = settings.get("queue_type", previousInfo.getQueueType());, +                    if (Objects.equal(previousInfo.getQueueSize(), updatedQueueSize) && previousInfo.getQueueType().equals(updatedQueueType)) {, +                        int updatedSize = settings.getAsInt("size", previousInfo.getMax());, +                        String updatedRejectSetting = settings.get("reject_policy", previousInfo.getRejectSetting());, +                        if (previousInfo.getMax() != updatedSize) {, +                            logger.debug("updating thread_pool [{}], type [{}], size [{}], queue_size [{}], reject_policy [{}], queue_type [{}]", name, type, updatedSize, updatedQueueSize, updatedRejectSetting, updatedQueueType);, +                            return new ExecutorHolder(previousExecutorHolder.executor, new Info(name, type, updatedSize, updatedSize, null, updatedQueueSize, null, updatedRejectSetting, updatedQueueType));, +                        if (!previousInfo.getRejectSetting().equals(updatedRejectSetting)) {, +                            logger.debug("updating thread_pool [{}], type [{}], size [{}], queue_size [{}], reject_policy [{}], queue_type [{}]", name, type, updatedSize, updatedQueueSize, updatedRejectSetting, updatedQueueType);, +                            return new ExecutorHolder(previousExecutorHolder.executor, new Info(name, type, updatedSize, updatedSize, null, updatedQueueSize, null, updatedRejectSetting, updatedQueueType));, +                if (previousInfo.getMax() >= 0) {, +                    defaultSize = previousInfo.getMax();, +                defaultQueueSize = previousInfo.getQueueSize();, +                if (previousInfo.getQueueType() != null) {, +                    defaultQueueType = previousInfo.getQueueType();, +            SizeValue queueSize = settings.getAsSize("capacity", settings.getAsSize("queue", settings.getAsSize("queue_size", defaultQueueSize)));, +            BlockingQueue<Runnable> workQueue = newQueue(queueSize, queueType);, +            logger.debug("creating thread_pool [{}], type [{}], size [{}], queue_size [{}], reject_policy [{}], queue_type [{}]", name, type, size, queueSize, rejectSetting, queueType);, +            return new ExecutorHolder(executor, new Info(name, type, size, size, null, queueSize, null, rejectSetting, queueType));, +                    if (!previousInfo.getKeepAlive().equals(updatedKeepAlive) || previousInfo.getMin() != updatedMin || previousInfo.getMax() != updatedSize) {, +            SizeValue defaultQueueSize = defaultSettings.getAsSize("queue_size", new SizeValue(1000));, +                    SizeValue updatedQueueSize = settings.getAsSize("capacity", settings.getAsSize("queue", settings.getAsSize("queue_size", defaultQueueSize)));]