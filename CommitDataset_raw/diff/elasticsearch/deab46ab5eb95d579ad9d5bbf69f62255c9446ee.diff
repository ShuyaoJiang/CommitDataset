[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/sampler/BestDocsDeferringCollector.java, +import org.apache.lucene.util.RamUsageEstimator;, +import java.util.function.Consumer;, +    private final Consumer<Long> circuitBreakerConsumer;, +, +    private static final long SENTINEL_SIZE = RamUsageEstimator.shallowSizeOfInstance(Object.class);, +     * @param shardSize The number of top-scoring docs to collect for each bucket, +     * @param circuitBreakerConsumer consumer for tracking runtime bytes in request circuit breaker, +    BestDocsDeferringCollector(int shardSize, BigArrays bigArrays, Consumer<Long> circuitBreakerConsumer) {, +        this.circuitBreakerConsumer = circuitBreakerConsumer;, +    // Can be overridden by subclasses that have a different priority queue implementation, +    // and need different memory sizes, +    protected long getPriorityQueueSlotSize() {, +        // Generic sentinel object, +        return SENTINEL_SIZE;, +    }, +, +        // ScoreDoc is 12b ([float + int + int]), +        circuitBreakerConsumer.accept(12L * shardSize);, +        try {, +            allDocs.sort((o1, o2) -> {, +                    perSegDocs.replayRelatedMatches(allDocs);, +        } finally {, +            // done with allDocs now, reclaim some memory, +            circuitBreakerConsumer.accept(-12L * shardSize);, +        }, +, +                // Add to CB based on the size and the implementations per-doc overhead, +                circuitBreakerConsumer.accept((long) shardSize * getPriorityQueueSlotSize());, +, +        public void replayRelatedMatches(List<ScoreDoc> sd) throws IOException {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/sampler/BestDocsDeferringCollector.java, +import org.apache.lucene.util.RamUsageEstimator;, +import java.util.function.Consumer;, +    private final Consumer<Long> circuitBreakerConsumer;, +, +    private static final long SENTINEL_SIZE = RamUsageEstimator.shallowSizeOfInstance(Object.class);, +     * @param shardSize The number of top-scoring docs to collect for each bucket, +     * @param circuitBreakerConsumer consumer for tracking runtime bytes in request circuit breaker, +    BestDocsDeferringCollector(int shardSize, BigArrays bigArrays, Consumer<Long> circuitBreakerConsumer) {, +        this.circuitBreakerConsumer = circuitBreakerConsumer;, +    // Can be overridden by subclasses that have a different priority queue implementation, +    // and need different memory sizes, +    protected long getPriorityQueueSlotSize() {, +        // Generic sentinel object, +        return SENTINEL_SIZE;, +    }, +, +        // ScoreDoc is 12b ([float + int + int]), +        circuitBreakerConsumer.accept(12L * shardSize);, +        try {, +            allDocs.sort((o1, o2) -> {, +                    perSegDocs.replayRelatedMatches(allDocs);, +        } finally {, +            // done with allDocs now, reclaim some memory, +            circuitBreakerConsumer.accept(-12L * shardSize);, +        }, +, +                // Add to CB based on the size and the implementations per-doc overhead, +                circuitBreakerConsumer.accept((long) shardSize * getPriorityQueueSlotSize());, +, +        public void replayRelatedMatches(List<ScoreDoc> sd) throws IOException {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/sampler/DiversifiedBytesHashSamplerAggregator.java, +import java.util.function.Consumer;, +        bdd = new DiverseDocsDeferringCollector(this::addRequestCircuitBreakerBytes);, +        DiverseDocsDeferringCollector(Consumer<Long> circuitBreakerConsumer) {, +            super(shardSize, context.bigArrays(), circuitBreakerConsumer);, +            // Make sure we do not allow size > maxDoc, to prevent accidental OOM, +            int minMaxDocsPerValue = Math.min(maxDocsPerValue, context.searcher().getIndexReader().maxDoc());, +            return new ValuesDiversifiedTopDocsCollector(size, minMaxDocsPerValue);, +        }, +, +        @Override, +        protected long getPriorityQueueSlotSize() {, +            return SCOREDOCKEY_SIZE;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/sampler/BestDocsDeferringCollector.java, +import org.apache.lucene.util.RamUsageEstimator;, +import java.util.function.Consumer;, +    private final Consumer<Long> circuitBreakerConsumer;, +, +    private static final long SENTINEL_SIZE = RamUsageEstimator.shallowSizeOfInstance(Object.class);, +     * @param shardSize The number of top-scoring docs to collect for each bucket, +     * @param circuitBreakerConsumer consumer for tracking runtime bytes in request circuit breaker, +    BestDocsDeferringCollector(int shardSize, BigArrays bigArrays, Consumer<Long> circuitBreakerConsumer) {, +        this.circuitBreakerConsumer = circuitBreakerConsumer;, +    // Can be overridden by subclasses that have a different priority queue implementation, +    // and need different memory sizes, +    protected long getPriorityQueueSlotSize() {, +        // Generic sentinel object, +        return SENTINEL_SIZE;, +    }, +, +        // ScoreDoc is 12b ([float + int + int]), +        circuitBreakerConsumer.accept(12L * shardSize);, +        try {, +            allDocs.sort((o1, o2) -> {, +                    perSegDocs.replayRelatedMatches(allDocs);, +        } finally {, +            // done with allDocs now, reclaim some memory, +            circuitBreakerConsumer.accept(-12L * shardSize);]