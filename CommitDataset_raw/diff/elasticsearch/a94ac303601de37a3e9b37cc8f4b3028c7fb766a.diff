[+++ b/test/framework/src/main/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +import org.elasticsearch.test.NotEqualMessageBuilder;, +        Map<String, Object> actualMap = null;, +        Map<String, Object> expectedMap = null;, +            actualMap = actualParser.map();, +                expectedMap = expectedParser.map();, +                try {, +                } catch (AssertionError error) {, +                    NotEqualMessageBuilder message = new NotEqualMessageBuilder();, +                    message.compareMaps(actualMap, expectedMap);, +                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error);, +                }, +++ b/test/framework/src/main/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +import org.elasticsearch.test.NotEqualMessageBuilder;, +        Map<String, Object> actualMap = null;, +        Map<String, Object> expectedMap = null;, +            actualMap = actualParser.map();, +                expectedMap = expectedParser.map();, +                try {, +                } catch (AssertionError error) {, +                    NotEqualMessageBuilder message = new NotEqualMessageBuilder();, +                    message.compareMaps(actualMap, expectedMap);, +                    throw new AssertionError("Error when comparing xContent.\n" + message.toString(), error);, +                }, +++ b/test/framework/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertionsTests.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.test.RandomObjects;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertToXContentEquivalent;, +import static org.hamcrest.Matchers.containsString;, +, +    public void testAssertXContentEquivalent() throws IOException {, +        try (XContentBuilder original = JsonXContent.contentBuilder()) {, +            original.startObject();, +            for (Object value : RandomObjects.randomStoredFieldValues(random(), original.contentType()).v1()) {, +                original.field(randomAlphaOfLength(10), value);, +            }, +            {, +                original.startObject(randomAlphaOfLength(10));, +                for (Object value : RandomObjects.randomStoredFieldValues(random(), original.contentType()).v1()) {, +                    original.field(randomAlphaOfLength(10), value);, +                }, +                original.endObject();, +            }, +            {, +                original.startArray(randomAlphaOfLength(10));, +                for (Object value : RandomObjects.randomStoredFieldValues(random(), original.contentType()).v1()) {, +                    original.value(value);, +                }, +                original.endArray();, +            }, +            original.endObject();, +, +            try (XContentBuilder copy = JsonXContent.contentBuilder();, +                    XContentParser parser = createParser(original.contentType().xContent(), original.bytes())) {, +                parser.nextToken();, +                XContentHelper.copyCurrentStructure(copy.generator(), parser);, +                try (XContentBuilder copyShuffled = shuffleXContent(copy) ) {, +                    assertToXContentEquivalent(original.bytes(), copyShuffled.bytes(), original.contentType());, +                }, +            }, +        }, +    }, +, +    public void testAssertXContentEquivalentErrors() throws IOException {, +        {, +            XContentBuilder builder = JsonXContent.contentBuilder();, +            builder.startObject();, +            {, +                builder.startObject("foo");, +                {, +                    builder.field("f1", "value1");, +                    builder.field("f2", "value2");, +                }, +                builder.endObject();, +            }, +            builder.endObject();, +, +            XContentBuilder otherBuilder = JsonXContent.contentBuilder();, +            otherBuilder.startObject();, +            {, +                otherBuilder.startObject("foo");, +                {, +                    otherBuilder.field("f1", "value1");, +                }, +                otherBuilder.endObject();, +            }, +            otherBuilder.endObject();, +            AssertionError error = expectThrows(AssertionError.class,, +                    () -> assertToXContentEquivalent(builder.bytes(), otherBuilder.bytes(), builder.contentType()));, +            assertThat(error.getMessage(), containsString("f2: expected [value2] but not found"));, +        }, +        {, +            XContentBuilder builder = JsonXContent.contentBuilder();, +            builder.startObject();, +            {, +                builder.startObject("foo");, +                {]