[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        Query query = MissingQueryParser.newFilter(parseContext, queryText, MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        Query query = MissingQueryParser.newFilter(parseContext, queryText, MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        Query query = MissingQueryParser.newFilter(parseContext, queryText, MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String systemVersion = System.getProperty("java.specification.version");, +                throw new IllegalStateException(jar + " requires Java " + targetVersion, +        // give a nice error if jar is compiled against different es version, +        String systemESVersion = Version.CURRENT.toString();, +        String targetESVersion = manifest.getMainAttributes().getValue("X-Compile-Elasticsearch-Version");, +        if (targetESVersion != null && targetESVersion.equals(systemESVersion) == false) {, +            throw new IllegalStateException(jar + " requires Elasticsearch " + targetESVersion, +                    + ", your system: " + systemESVersion);, +        }, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        Query query = MissingQueryParser.newFilter(parseContext, queryText, MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String systemVersion = System.getProperty("java.specification.version");, +                throw new IllegalStateException(jar + " requires Java " + targetVersion, +        // give a nice error if jar is compiled against different es version, +        String systemESVersion = Version.CURRENT.toString();, +        String targetESVersion = manifest.getMainAttributes().getValue("X-Compile-Elasticsearch-Version");, +        if (targetESVersion != null && targetESVersion.equals(systemESVersion) == false) {, +            throw new IllegalStateException(jar + " requires Elasticsearch " + targetESVersion, +                    + ", your system: " + systemESVersion);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/FilterStreamInput.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.io.stream;, +, +import java.io.IOException;, +, +/**, + * Wraps a {@link StreamInput} and associates it with a {@link NamedWriteableRegistry}, + */, +public class FilterStreamInput extends StreamInput {, +, +    private final StreamInput delegate;, +, +    public FilterStreamInput(StreamInput delegate, NamedWriteableRegistry namedWriteableRegistry) {, +        super(namedWriteableRegistry);, +        this.delegate = delegate;]