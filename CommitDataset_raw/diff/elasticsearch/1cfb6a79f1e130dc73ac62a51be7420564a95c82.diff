[+++ b/docs/reference/mapping/fields/parent-field.asciidoc, +TIP: It is highly recommend to reindex all indices with `_parent` field created before version 2.x., +     The reason for this is to gain from all the optimizations added with the 2.0 release., +, +==== Limitations, +The `_parent.type` setting can only point to a type that doesn't exist yet., +This means that a type can't become a parent type after is has been created., +, +The `parent.type` setting can't point to itself. This means self referential, +parent/child isn't supported., +, +Parent/child queries (`has_child` & `has_parent`) can't be used in index aliases., +, +==== Global ordinals, +, +Parent-child uses <<index-modules-fielddata-global-ordinals,global ordinals>> to speed up joins and global ordinals need to be rebuilt after any change to a shard., +The more parent id values are stored in a shard, the longer it takes to rebuild global ordinals for the `_parent` field., +, +Global ordinals, by default, are built lazily: the first parent-child query or aggregation after a refresh will trigger building of global ordinals., +This can introduce a significant latency spike for your users. You can use <<index-modules-fielddata-fielddata-loading,eager_global_ordinals>> to shift the cost of building global ordinals, +from query time to refresh time, by mapping the _parent field as follows:, +, +==== Memory usage, +, +The only on heap memory used by parent/child is the global ordinals for the `_parent` field., +, +How much memory is used for the global ordianls for the `_parent` field in the fielddata cache, +can be checked via the <<indices-stats,indices stats>> or <<cluster-nodes-stats,nodes stats>>, +APIS, eg:, +, +[source,js], +--------------------------------------------------, +curl -XGET "http://localhost:9200/_stats/fielddata?pretty&human&fielddata_fields=_parent", +--------------------------------------------------, +++ b/docs/reference/mapping/fields/parent-field.asciidoc, +TIP: It is highly recommend to reindex all indices with `_parent` field created before version 2.x., +     The reason for this is to gain from all the optimizations added with the 2.0 release., +, +==== Limitations, +The `_parent.type` setting can only point to a type that doesn't exist yet., +This means that a type can't become a parent type after is has been created., +, +The `parent.type` setting can't point to itself. This means self referential, +parent/child isn't supported., +, +Parent/child queries (`has_child` & `has_parent`) can't be used in index aliases., +, +==== Global ordinals, +, +Parent-child uses <<index-modules-fielddata-global-ordinals,global ordinals>> to speed up joins and global ordinals need to be rebuilt after any change to a shard., +The more parent id values are stored in a shard, the longer it takes to rebuild global ordinals for the `_parent` field., +, +Global ordinals, by default, are built lazily: the first parent-child query or aggregation after a refresh will trigger building of global ordinals., +This can introduce a significant latency spike for your users. You can use <<index-modules-fielddata-fielddata-loading,eager_global_ordinals>> to shift the cost of building global ordinals, +from query time to refresh time, by mapping the _parent field as follows:, +, +==== Memory usage, +, +The only on heap memory used by parent/child is the global ordinals for the `_parent` field., +, +How much memory is used for the global ordianls for the `_parent` field in the fielddata cache, +can be checked via the <<indices-stats,indices stats>> or <<cluster-nodes-stats,nodes stats>>, +APIS, eg:, +, +[source,js], +--------------------------------------------------, +curl -XGET "http://localhost:9200/_stats/fielddata?pretty&human&fielddata_fields=_parent", +--------------------------------------------------, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +[float], +=== Parent/child, +, +Parent/child has been rewritten completely to reduce memory usage and to execute, +`has_child` and `has_parent` queries faster and more efficient. The `_parent` field, +uses doc values by default. The refactored and improved implementation is only active, +for indices created on or after version 2.0., +, +In order to benefit for all performance and memory improvements we recommend to reindex all, +indices that have the `_parent` field created before was upgraded to 2.0., +, +The following breaks in backwards compatability have been made on indices with the `_parent` field, +created on or after clusters with version 2.0:, +* The `type` option on the `_parent` field can only point to a parent type that doesn't exist yet,, +  so this means that an existing type/mapping can no longer become a parent type., +* The `has_child` and `has_parent` queries can no longer be use in alias filters., +++ b/docs/reference/mapping/fields/parent-field.asciidoc, +TIP: It is highly recommend to reindex all indices with `_parent` field created before version 2.x., +     The reason for this is to gain from all the optimizations added with the 2.0 release., +, +==== Limitations, +The `_parent.type` setting can only point to a type that doesn't exist yet., +This means that a type can't become a parent type after is has been created., +, +The `parent.type` setting can't point to itself. This means self referential, +parent/child isn't supported., +, +Parent/child queries (`has_child` & `has_parent`) can't be used in index aliases., +, +==== Global ordinals, +]