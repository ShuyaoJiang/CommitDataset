[+++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +     * {@link PercolateSourceBuilder#addAggregation(AggregationBuilder)}, +    public PercolateRequestBuilder addAggregation(AggregationBuilder<?> aggregationBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +     * {@link PercolateSourceBuilder#addAggregation(AggregationBuilder)}, +    public PercolateRequestBuilder addAggregation(AggregationBuilder<?> aggregationBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +    private List<AggregationBuilder<?>> aggregationBuilders;, +    public PercolateSourceBuilder addAggregation(AggregationBuilder<?> aggregationBuilder) {, +                for (AggregationBuilder<?> aggregation : aggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +     * {@link PercolateSourceBuilder#addAggregation(AggregationBuilder)}, +    public PercolateRequestBuilder addAggregation(AggregationBuilder<?> aggregationBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +    private List<AggregationBuilder<?>> aggregationBuilders;, +    public PercolateSourceBuilder addAggregation(AggregationBuilder<?> aggregationBuilder) {, +                for (AggregationBuilder<?> aggregation : aggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +    public SearchRequestBuilder addAggregation(AggregationBuilder<?> aggregation) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +     * {@link PercolateSourceBuilder#addAggregation(AggregationBuilder)}, +    public PercolateRequestBuilder addAggregation(AggregationBuilder<?> aggregationBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +    private List<AggregationBuilder<?>> aggregationBuilders;, +    public PercolateSourceBuilder addAggregation(AggregationBuilder<?> aggregationBuilder) {, +                for (AggregationBuilder<?> aggregation : aggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +    public SearchRequestBuilder addAggregation(AggregationBuilder<?> aggregation) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                String parentType = newMapper.parentFieldMapper().type();, +                                if (parentType.equals(mapping.value.type()) &&, +                                        indexService.mapperService().getParentTypes().contains(parentType) == false) {, +                                    throw new IllegalArgumentException("can't add a _parent field that points to an " +, +                                            "already existing type, that isn't already a parent");, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +     * {@link PercolateSourceBuilder#addAggregation(AggregationBuilder)}, +    public PercolateRequestBuilder addAggregation(AggregationBuilder<?> aggregationBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +    private List<AggregationBuilder<?>> aggregationBuilders;, +    public PercolateSourceBuilder addAggregation(AggregationBuilder<?> aggregationBuilder) {, +                for (AggregationBuilder<?> aggregation : aggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +    public SearchRequestBuilder addAggregation(AggregationBuilder<?> aggregation) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                String parentType = newMapper.parentFieldMapper().type();, +                                if (parentType.equals(mapping.value.type()) &&, +                                        indexService.mapperService().getParentTypes().contains(parentType) == false) {, +                                    throw new IllegalArgumentException("can't add a _parent field that points to an " +, +                                            "already existing type, that isn't already a parent");, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.search.SearchModule;, +                    ResourceWatcherService.RELOAD_INTERVAL_LOW,, +                    SearchModule.INDICES_MAX_CLAUSE_COUNT_SETTING, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +     * {@link PercolateSourceBuilder#addAggregation(AggregationBuilder)}, +    public PercolateRequestBuilder addAggregation(AggregationBuilder<?> aggregationBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +    private List<AggregationBuilder<?>> aggregationBuilders;, +    public PercolateSourceBuilder addAggregation(AggregationBuilder<?> aggregationBuilder) {, +                for (AggregationBuilder<?> aggregation : aggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +    public SearchRequestBuilder addAggregation(AggregationBuilder<?> aggregation) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                String parentType = newMapper.parentFieldMapper().type();, +                                if (parentType.equals(mapping.value.type()) &&, +                                        indexService.mapperService().getParentTypes().contains(parentType) == false) {, +                                    throw new IllegalArgumentException("can't add a _parent field that points to an " +, +                                            "already existing type, that isn't already a parent");, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.search.SearchModule;, +                    ResourceWatcherService.RELOAD_INTERVAL_LOW,, +                    SearchModule.INDICES_MAX_CLAUSE_COUNT_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +        Settings indexSettings = settings.filter((s) -> (s.startsWith("index.") &&, +            // special case - we want to get Did you mean indices.query.bool.max_clause_count, +            // which means we need to by-pass this check for this setting, +            // TODO remove in 6.0!!, +            "index.query.bool.max_clause_count".equals(s) == false), +            && clusterSettings.get(s) == null);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +     * {@link PercolateSourceBuilder#addAggregation(AggregationBuilder)}, +    public PercolateRequestBuilder addAggregation(AggregationBuilder<?> aggregationBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;]