[+++ b/core/src/main/java/org/elasticsearch/index/analysis/NGramTokenizerFactory.java, +++ b/core/src/main/java/org/elasticsearch/index/analysis/NGramTokenizerFactory.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +        return new TemplateQueryBuilder(new Template(template, ScriptService.ScriptType.INLINE, null, null, vars));, +        return new TemplateQueryBuilder(new Template(template, templateType, null, null, vars));, +++ b/core/src/main/java/org/elasticsearch/index/analysis/NGramTokenizerFactory.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +        return new TemplateQueryBuilder(new Template(template, ScriptService.ScriptType.INLINE, null, null, vars));, +        return new TemplateQueryBuilder(new Template(template, templateType, null, null, vars));, +++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +    private static final Version FIRST_LUCENE_CHECKSUM_VERSION = Version.LUCENE_4_8_0;, +                assert metadata.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION);, +        assert metadata.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION);, +            if (md.writtenBy() != null && md.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION)) {, +                @SuppressWarnings("deprecation"), +        @SuppressWarnings("deprecation") // Legacy checksum needs legacy methods, +                        return new Tuple<>(indexInput.readStringStringMap(), lastFound);, +                return new Tuple<>(new HashMap<>(), -1l);, +        @SuppressWarnings("deprecation") // Legacy checksum uses legacy methods, +++ b/core/src/main/java/org/elasticsearch/index/analysis/NGramTokenizerFactory.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +        return new TemplateQueryBuilder(new Template(template, ScriptService.ScriptType.INLINE, null, null, vars));, +        return new TemplateQueryBuilder(new Template(template, templateType, null, null, vars));, +++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +    private static final Version FIRST_LUCENE_CHECKSUM_VERSION = Version.LUCENE_4_8_0;, +                assert metadata.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION);, +        assert metadata.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION);, +            if (md.writtenBy() != null && md.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION)) {, +                @SuppressWarnings("deprecation"), +        @SuppressWarnings("deprecation") // Legacy checksum needs legacy methods, +                        return new Tuple<>(indexInput.readStringStringMap(), lastFound);, +                return new Tuple<>(new HashMap<>(), -1l);, +        @SuppressWarnings("deprecation") // Legacy checksum uses legacy methods, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzers.java, +    STANDARD(CachingStrategy.ELASTICSEARCH) {, +            final Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);, +            final Analyzer analyzer = new StandardHtmlStripAnalyzer(CharArraySet.EMPTY_SET);, +++ b/core/src/main/java/org/elasticsearch/index/analysis/NGramTokenizerFactory.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +        return new TemplateQueryBuilder(new Template(template, ScriptService.ScriptType.INLINE, null, null, vars));, +        return new TemplateQueryBuilder(new Template(template, templateType, null, null, vars));, +++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +    private static final Version FIRST_LUCENE_CHECKSUM_VERSION = Version.LUCENE_4_8_0;, +                assert metadata.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION);, +        assert metadata.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION);, +            if (md.writtenBy() != null && md.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION)) {, +                @SuppressWarnings("deprecation"), +        @SuppressWarnings("deprecation") // Legacy checksum needs legacy methods, +                        return new Tuple<>(indexInput.readStringStringMap(), lastFound);, +                return new Tuple<>(new HashMap<>(), -1l);, +        @SuppressWarnings("deprecation") // Legacy checksum uses legacy methods, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzers.java, +    STANDARD(CachingStrategy.ELASTICSEARCH) {, +            final Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);, +            final Analyzer analyzer = new StandardHtmlStripAnalyzer(CharArraySet.EMPTY_SET);, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +++ b/core/src/main/java/org/elasticsearch/index/analysis/NGramTokenizerFactory.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +        return new TemplateQueryBuilder(new Template(template, ScriptService.ScriptType.INLINE, null, null, vars));, +        return new TemplateQueryBuilder(new Template(template, templateType, null, null, vars));, +++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +    private static final Version FIRST_LUCENE_CHECKSUM_VERSION = Version.LUCENE_4_8_0;, +                assert metadata.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION);, +        assert metadata.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION);, +            if (md.writtenBy() != null && md.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION)) {, +                @SuppressWarnings("deprecation"), +        @SuppressWarnings("deprecation") // Legacy checksum needs legacy methods, +                        return new Tuple<>(indexInput.readStringStringMap(), lastFound);, +                return new Tuple<>(new HashMap<>(), -1l);, +        @SuppressWarnings("deprecation") // Legacy checksum uses legacy methods, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzers.java, +    STANDARD(CachingStrategy.ELASTICSEARCH) {, +            final Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);, +            final Analyzer analyzer = new StandardHtmlStripAnalyzer(CharArraySet.EMPTY_SET);, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenizers.java, +++ b/core/src/main/java/org/elasticsearch/index/analysis/NGramTokenizerFactory.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +        return new TemplateQueryBuilder(new Template(template, ScriptService.ScriptType.INLINE, null, null, vars));, +        return new TemplateQueryBuilder(new Template(template, templateType, null, null, vars));, +++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +    private static final Version FIRST_LUCENE_CHECKSUM_VERSION = Version.LUCENE_4_8_0;, +                assert metadata.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION);, +        assert metadata.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION);, +            if (md.writtenBy() != null && md.writtenBy().onOrAfter(FIRST_LUCENE_CHECKSUM_VERSION)) {, +                @SuppressWarnings("deprecation"), +        @SuppressWarnings("deprecation") // Legacy checksum needs legacy methods, +                        return new Tuple<>(indexInput.readStringStringMap(), lastFound);, +                return new Tuple<>(new HashMap<>(), -1l);, +        @SuppressWarnings("deprecation") // Legacy checksum uses legacy methods, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzers.java, +    STANDARD(CachingStrategy.ELASTICSEARCH) {, +            final Analyzer a = new StandardAnalyzer(CharArraySet.EMPTY_SET);, +            final Analyzer analyzer = new StandardHtmlStripAnalyzer(CharArraySet.EMPTY_SET);, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenFilters.java, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltTokenizers.java, +++ b/core/src/test/java/org/elasticsearch/index/analysis/NGramTokenizerFactoryTests.java, +++ b/core/src/main/java/org/elasticsearch/index/analysis/NGramTokenizerFactory.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +        return new TemplateQueryBuilder(new Template(template, ScriptService.ScriptType.INLINE, null, null, vars));]