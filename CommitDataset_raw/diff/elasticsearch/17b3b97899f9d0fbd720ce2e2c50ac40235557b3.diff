[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestCcrStatsAction.java, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestCcrStatsAction.java, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/StatsRequestTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ccr.action;, +, +import org.elasticsearch.test.AbstractStreamableTestCase;, +import org.elasticsearch.xpack.core.ccr.action.CcrStatsAction;, +, +public class StatsRequestTests extends AbstractStreamableTestCase<CcrStatsAction.StatsRequest> {, +, +    @Override, +    protected CcrStatsAction.StatsRequest createBlankInstance() {, +        return new CcrStatsAction.StatsRequest();, +    }, +, +    @Override, +    protected CcrStatsAction.StatsRequest createTestInstance() {, +        CcrStatsAction.StatsRequest statsRequest = new CcrStatsAction.StatsRequest();, +        if (randomBoolean()) {, +            statsRequest.setIndices(generateRandomStringArray(8, 4, false));, +        }, +        return statsRequest;, +    }, +}, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestCcrStatsAction.java, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/StatsRequestTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ccr.action;, +, +import org.elasticsearch.test.AbstractStreamableTestCase;, +import org.elasticsearch.xpack.core.ccr.action.CcrStatsAction;, +, +public class StatsRequestTests extends AbstractStreamableTestCase<CcrStatsAction.StatsRequest> {, +, +    @Override, +    protected CcrStatsAction.StatsRequest createBlankInstance() {, +        return new CcrStatsAction.StatsRequest();, +    }, +, +    @Override, +    protected CcrStatsAction.StatsRequest createTestInstance() {, +        CcrStatsAction.StatsRequest statsRequest = new CcrStatsAction.StatsRequest();, +        if (randomBoolean()) {, +            statsRequest.setIndices(generateRandomStringArray(8, 4, false));, +        }, +        return statsRequest;, +    }, +}, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/StatsResponsesTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ccr.action;, +, +import org.elasticsearch.test.AbstractStreamableTestCase;, +import org.elasticsearch.xpack.core.ccr.ShardFollowNodeTaskStatus;, +import org.elasticsearch.xpack.core.ccr.action.CcrStatsAction;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +, +public class StatsResponsesTests extends AbstractStreamableTestCase<CcrStatsAction.StatsResponses> {, +, +    @Override, +    protected CcrStatsAction.StatsResponses createBlankInstance() {, +        return new CcrStatsAction.StatsResponses();, +    }, +, +    @Override, +    protected CcrStatsAction.StatsResponses createTestInstance() {, +        int numResponses = randomIntBetween(0, 8);, +        List<CcrStatsAction.StatsResponse> responses = new ArrayList<>(numResponses);, +        for (int i = 0; i < numResponses; i++) {, +            ShardFollowNodeTaskStatus status = new ShardFollowNodeTaskStatus(, +                randomAlphaOfLength(4),, +                randomAlphaOfLength(4),, +                randomInt(),, +                randomNonNegativeLong(),, +                randomNonNegativeLong(),, +                randomNonNegativeLong(),, +                randomNonNegativeLong(),, +                randomNonNegativeLong(),, +                randomIntBetween(0, Integer.MAX_VALUE),, +                randomIntBetween(0, Integer.MAX_VALUE),, +                randomIntBetween(0, Integer.MAX_VALUE),, +                randomNonNegativeLong(),, +                randomNonNegativeLong(),, +                randomNonNegativeLong(),]