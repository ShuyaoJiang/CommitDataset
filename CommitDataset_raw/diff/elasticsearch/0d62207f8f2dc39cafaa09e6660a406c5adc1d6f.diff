[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/Exporter.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/Exporter.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/Exporters.java, +    public Exporters(Settings settings, Map<String, Exporter.Factory> factories, ClusterService clusterService) {, +, +, +        clusterService.getClusterSettings().addSettingsUpdateConsumer(MonitoringSettings.EXPORTERS_SETTINGS, this::setExportersSetting);, +                    logger.info("skipping exporter [{}] as it is not ready yet", exporter.name());, +            final ExportBulk bulk = openBulk();, +            if (bulk != null) {, +}, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/Exporter.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/Exporters.java, +    public Exporters(Settings settings, Map<String, Exporter.Factory> factories, ClusterService clusterService) {, +, +, +        clusterService.getClusterSettings().addSettingsUpdateConsumer(MonitoringSettings.EXPORTERS_SETTINGS, this::setExportersSetting);, +                    logger.info("skipping exporter [{}] as it is not ready yet", exporter.name());, +            final ExportBulk bulk = openBulk();, +            if (bulk != null) {, +}, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/MonitoringTemplateUtils.java, +    /**, +     * The name of the non-timestamped data index., +     */, +    public static final String DATA_INDEX = ".monitoring-data-" + TEMPLATE_VERSION;, +    /**, +     * Data types that should be supported by the {@linkplain #DATA_INDEX data index} that were not by the initial release., +     */, +    public static final String[] NEW_DATA_TYPES = { "kibana" };, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/Exporter.java, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/Exporters.java, +    public Exporters(Settings settings, Map<String, Exporter.Factory> factories, ClusterService clusterService) {, +, +, +        clusterService.getClusterSettings().addSettingsUpdateConsumer(MonitoringSettings.EXPORTERS_SETTINGS, this::setExportersSetting);, +                    logger.info("skipping exporter [{}] as it is not ready yet", exporter.name());, +            final ExportBulk bulk = openBulk();, +            if (bulk != null) {, +}, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/MonitoringTemplateUtils.java, +    /**, +     * The name of the non-timestamped data index., +     */, +    public static final String DATA_INDEX = ".monitoring-data-" + TEMPLATE_VERSION;, +    /**, +     * Data types that should be supported by the {@linkplain #DATA_INDEX data index} that were not by the initial release., +     */, +    public static final String[] NEW_DATA_TYPES = { "kibana" };, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/DataTypeMappingHttpResource.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.monitoring.exporter.http;, +, +import org.apache.http.HttpEntity;, +import org.apache.http.entity.ContentType;, +import org.apache.http.entity.StringEntity;, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.client.Response;, +import org.elasticsearch.client.RestClient;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.unit.TimeValue;, +, +import java.util.Collections;, +import java.util.Objects;, +, +import static org.elasticsearch.xpack.monitoring.exporter.MonitoringTemplateUtils.DATA_INDEX;, +, +/**, + * {@linkplain DataTypeMappingHttpResource}s allow the checking and adding of index mapping's for new types that did not exist in previous, + * versions., + * <p>, + * This allows the use of Monitoring's REST endpoint to publish Kibana data to the data index even if the "kibana" type did not, + * exist in their existing index mapping (e.g., they started with an early alpha release). Additionally, this also enables future types to, + * be added without issue., + * <p>, + * The root need for this is because the index mapping started with an index setting: "index.mapper.dynamic" set to false. This prevents, + * new types from being dynamically added, which is obviously needed as new components (e.g., Kibana and Logstash) are monitored., + * Unfortunately, this setting cannot be flipped without also closing and reopening the index, so the fix is to manually add any new types., + */, +public class DataTypeMappingHttpResource extends PublishableHttpResource {, +, +    private static final Logger logger = Loggers.getLogger(DataTypeMappingHttpResource.class);, +, +    /**, +     * The name of the type that is created in the mappings on the remote cluster., +     */, +    private final String typeName;, +, +    /**, +     * Create a new {@link DataTypeMappingHttpResource}., +     *, +     * @param resourceOwnerName The user-recognizable name, +     * @param masterTimeout Master timeout to use with any request., +     * @param typeName The name of the mapping type (e.g., "kibana").]