[+++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_DEPTH_LIMIT_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_DEPTH_LIMIT_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +    public static final Setting<Long> INDEX_MAPPING_DEPTH_LIMIT_SETTING =, +            Setting.longSetting("index.mapping.depth.limit", 20L, 1, Property.Dynamic, Property.IndexScope);, +            checkDepthLimit(fullPathObjectMappers.keySet());, +    private void checkDepthLimit(Collection<String> objectPaths) {, +        final long maxDepth = indexSettings.getValue(INDEX_MAPPING_DEPTH_LIMIT_SETTING);, +        for (String objectPath : objectPaths) {, +            checkDepthLimit(objectPath, maxDepth);, +        }, +    }, +, +    private void checkDepthLimit(String objectPath, long maxDepth) {, +        int numDots = 0;, +        for (int i = 0; i < objectPath.length(); ++i) {, +            if (objectPath.charAt(i) == '.') {, +                numDots += 1;, +            }, +        }, +        final int depth = numDots + 2;, +        if (depth > maxDepth) {, +            throw new IllegalArgumentException("Limit of mapping depth [" + maxDepth + "] in index [" + index().getName(), +                    + "] has been exceeded due to object field [" + objectPath + "]");, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_DEPTH_LIMIT_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +    public static final Setting<Long> INDEX_MAPPING_DEPTH_LIMIT_SETTING =, +            Setting.longSetting("index.mapping.depth.limit", 20L, 1, Property.Dynamic, Property.IndexScope);, +            checkDepthLimit(fullPathObjectMappers.keySet());, +    private void checkDepthLimit(Collection<String> objectPaths) {, +        final long maxDepth = indexSettings.getValue(INDEX_MAPPING_DEPTH_LIMIT_SETTING);, +        for (String objectPath : objectPaths) {, +            checkDepthLimit(objectPath, maxDepth);, +        }, +    }, +, +    private void checkDepthLimit(String objectPath, long maxDepth) {, +        int numDots = 0;, +        for (int i = 0; i < objectPath.length(); ++i) {, +            if (objectPath.charAt(i) == '.') {, +                numDots += 1;, +            }, +        }, +        final int depth = numDots + 2;, +        if (depth > maxDepth) {, +            throw new IllegalArgumentException("Limit of mapping depth [" + maxDepth + "] in index [" + index().getName(), +                    + "] has been exceeded due to object field [" + objectPath + "]");, +        }, +    }, +, +++ b/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java, +, +    public void testMappingDepthExceedsLimit() throws Throwable {, +        CompressedXContent simpleMapping = new CompressedXContent(XContentFactory.jsonBuilder().startObject(), +                .startObject("properties"), +                    .startObject("field"), +                        .field("type", "text"), +                    .endObject(), +                .endObject().endObject().bytes());, +        IndexService indexService1 = createIndex("test1", Settings.builder().put(MapperService.INDEX_MAPPING_DEPTH_LIMIT_SETTING.getKey(), 1).build());, +        // no exception, +        indexService1.mapperService().merge("type", simpleMapping, MergeReason.MAPPING_UPDATE, false);, +, +        CompressedXContent objectMapping = new CompressedXContent(XContentFactory.jsonBuilder().startObject(), +                .startObject("properties"), +                    .startObject("object1"), +                        .field("type", "object"), +                    .endObject(), +                .endObject().endObject().bytes());, +, +        IndexService indexService2 = createIndex("test2");, +        // no exception, +        indexService2.mapperService().merge("type", objectMapping, MergeReason.MAPPING_UPDATE, false);, +, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                () -> indexService1.mapperService().merge("type2", objectMapping, MergeReason.MAPPING_UPDATE, false));, +        assertThat(e.getMessage(), containsString("Limit of mapping depth [1] in index [test1] has been exceeded"));, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        MapperService.INDEX_MAPPING_DEPTH_LIMIT_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +    public static final Setting<Long> INDEX_MAPPING_DEPTH_LIMIT_SETTING =, +            Setting.longSetting("index.mapping.depth.limit", 20L, 1, Property.Dynamic, Property.IndexScope);, +            checkDepthLimit(fullPathObjectMappers.keySet());, +    private void checkDepthLimit(Collection<String> objectPaths) {, +        final long maxDepth = indexSettings.getValue(INDEX_MAPPING_DEPTH_LIMIT_SETTING);, +        for (String objectPath : objectPaths) {, +            checkDepthLimit(objectPath, maxDepth);, +        }, +    }, +, +    private void checkDepthLimit(String objectPath, long maxDepth) {, +        int numDots = 0;, +        for (int i = 0; i < objectPath.length(); ++i) {]