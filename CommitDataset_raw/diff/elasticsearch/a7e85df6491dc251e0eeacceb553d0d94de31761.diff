[+++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +    /**, +     * Retrieves an alert by name from memory., +     */, +    // TODO: add version, fields, etc support that the core get api has as well., +    public Alert getAlert(String alertName) {, +        return alertsStore.getAlert(alertName);, +    }, +, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +    /**, +     * Retrieves an alert by name from memory., +     */, +    // TODO: add version, fields, etc support that the core get api has as well., +    public Alert getAlert(String alertName) {, +        return alertsStore.getAlert(alertName);, +    }, +, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/get/GetAlertRequest.java, +import org.elasticsearch.action.support.master.MasterNodeOperationRequest;, +public class GetAlertRequest extends MasterNodeOperationRequest<GetAlertRequest> {, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +    /**, +     * Retrieves an alert by name from memory., +     */, +    // TODO: add version, fields, etc support that the core get api has as well., +    public Alert getAlert(String alertName) {, +        return alertsStore.getAlert(alertName);, +    }, +, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/get/GetAlertRequest.java, +import org.elasticsearch.action.support.master.MasterNodeOperationRequest;, +public class GetAlertRequest extends MasterNodeOperationRequest<GetAlertRequest> {, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/get/GetAlertResponse.java, +, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +    /**, +     * Retrieves an alert by name from memory., +     */, +    // TODO: add version, fields, etc support that the core get api has as well., +    public Alert getAlert(String alertName) {, +        return alertsStore.getAlert(alertName);, +    }, +, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/get/GetAlertRequest.java, +import org.elasticsearch.action.support.master.MasterNodeOperationRequest;, +public class GetAlertRequest extends MasterNodeOperationRequest<GetAlertRequest> {, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/get/GetAlertResponse.java, +, +++ b/src/main/java/org/elasticsearch/alerts/transport/actions/get/TransportGetAlertAction.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.action.support.master.TransportMasterNodeOperationAction;, +import org.elasticsearch.alerts.Alert;, +import org.elasticsearch.alerts.AlertManager;, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.index.get.GetResult;, +import org.elasticsearch.transport.TransportService;, +, +import java.io.IOException;, +public class TransportGetAlertAction extends TransportMasterNodeOperationAction<GetAlertRequest,  GetAlertResponse> {, +    private final AlertManager alertManager;, +    public TransportGetAlertAction(Settings settings, TransportService transportService, ClusterService clusterService,, +                                   ThreadPool threadPool, ActionFilters actionFilters, AlertManager alertManager) {, +        super(settings, GetAlertAction.NAME, transportService, clusterService, threadPool, actionFilters);, +        this.alertManager = alertManager;, +    protected String executor() {, +        return ThreadPool.Names.SAME; // Super lightweight operation, so don't fork, +    }, +, +    @Override, +    protected GetAlertRequest newRequest() {, +        return new GetAlertRequest();, +    }, +, +    @Override, +    protected GetAlertResponse newResponse() {, +        return new GetAlertResponse();, +    }, +, +    @Override, +    protected void masterOperation(GetAlertRequest request, ClusterState state, ActionListener<GetAlertResponse> listener) throws ElasticsearchException {, +        Alert alert = alertManager.getAlert(request.alertName());, +        GetResult getResult;, +        if (alert != null) {, +            BytesReference alertSource = null;, +            try (XContentBuilder builder = XContentBuilder.builder(alert.getContentType().xContent())) {, +                builder.value(alert);, +                alertSource = builder.bytes();, +            } catch (IOException e) {, +            getResult = new GetResult(AlertsStore.ALERT_INDEX, AlertsStore.ALERT_TYPE, alert.getAlertName(), alert.getVersion(), true, alertSource, null);, +        } else {, +            getResult = new GetResult(AlertsStore.ALERT_INDEX, AlertsStore.ALERT_TYPE, request.alertName(), -1, false, null, null);, +        }, +        listener.onResponse(new GetAlertResponse(new GetResponse(getResult)));, +    }]