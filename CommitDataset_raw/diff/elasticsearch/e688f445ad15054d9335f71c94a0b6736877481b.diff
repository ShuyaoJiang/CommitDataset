[+++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/ShardSizeTests.java, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;, +        List<IndexRequestBuilder> docs = new ArrayList<>();, +        docs.addAll(indexDoc("1", "1", 5));, +        docs.addAll(indexDoc("1", "2", 4));, +        docs.addAll(indexDoc("1", "3", 3));, +        docs.addAll(indexDoc("1", "4", 2));, +        docs.addAll(indexDoc("1", "5", 1));, +        docs.addAll(indexDoc("2", "1", 3));, +        docs.addAll(indexDoc("2", "2", 1));, +        docs.addAll(indexDoc("2", "3", 5));, +        docs.addAll(indexDoc("2", "4", 2));, +        docs.addAll(indexDoc("2", "5", 1));, +        indexRandom(true, docs);, +        SearchResponse resp = client().prepareSearch("idx").setTypes("type").setRouting("1").setQuery(matchAllQuery()).execute().actionGet();, +        assertSearchResponse(resp);, +        long totalOnOne = resp.getHits().getTotalHits();, +        resp = client().prepareSearch("idx").setTypes("type").setRouting("2").setQuery(matchAllQuery()).execute().actionGet();, +        assertSearchResponse(resp);, +        long totalOnTwo = resp.getHits().getTotalHits();, +    protected List<IndexRequestBuilder> indexDoc(String shard, String key, int times) throws Exception {, +        IndexRequestBuilder[] builders = new IndexRequestBuilder[times];, +            builders[i] = client().prepareIndex("idx", "type").setRouting(shard).setCreate(true).setSource(jsonBuilder(), +                    .endObject());, +        return Arrays.asList(builders);]