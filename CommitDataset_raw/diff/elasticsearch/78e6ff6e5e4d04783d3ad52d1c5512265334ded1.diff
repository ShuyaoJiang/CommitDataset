[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplanation.java, +import org.elasticsearch.common.unit.TimeValue;, +    private final long remainingDelayNanos;, +        remainingDelayNanos = in.readVLong();, +                                        Map<DiscoveryNode, Float> nodeWeights, long remainingDelayNanos) {, +        this.remainingDelayNanos = remainingDelayNanos;, +    /** Return the remaining allocation delay for this shard in nanoseconds */, +    public long getRemainingDelayNanos() {, +        return this.remainingDelayNanos;, +    }, +, +                long delay = unassignedInfo.getLastComputedLeftDelayNanos();, +                builder.field("allocation_delay", TimeValue.timeValueNanos(delay));, +                builder.field("allocation_delay_ms", TimeValue.timeValueNanos(delay).millis());, +                builder.field("remaining_delay", TimeValue.timeValueNanos(remainingDelayNanos));, +                builder.field("remaining_delay_ms", TimeValue.timeValueNanos(remainingDelayNanos).millis());, +        out.writeVLong(remainingDelayNanos);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplanation.java, +import org.elasticsearch.common.unit.TimeValue;, +    private final long remainingDelayNanos;, +        remainingDelayNanos = in.readVLong();, +                                        Map<DiscoveryNode, Float> nodeWeights, long remainingDelayNanos) {, +        this.remainingDelayNanos = remainingDelayNanos;, +    /** Return the remaining allocation delay for this shard in nanoseconds */, +    public long getRemainingDelayNanos() {, +        return this.remainingDelayNanos;, +    }, +, +                long delay = unassignedInfo.getLastComputedLeftDelayNanos();, +                builder.field("allocation_delay", TimeValue.timeValueNanos(delay));, +                builder.field("allocation_delay_ms", TimeValue.timeValueNanos(delay).millis());, +                builder.field("remaining_delay", TimeValue.timeValueNanos(remainingDelayNanos));, +                builder.field("remaining_delay_ms", TimeValue.timeValueNanos(remainingDelayNanos).millis());, +        out.writeVLong(remainingDelayNanos);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +        long remainingDelayNanos = 0;, +        if (ui != null) {, +            final MetaData metadata = allocation.metaData();, +            final Settings indexSettings = metadata.index(shard.index()).getSettings();, +            remainingDelayNanos = ui.getRemainingDelay(System.nanoTime(), metadata.settings(), indexSettings);, +        }, +                shardAllocator.weighShard(allocation, shard), remainingDelayNanos);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplanation.java, +import org.elasticsearch.common.unit.TimeValue;, +    private final long remainingDelayNanos;, +        remainingDelayNanos = in.readVLong();, +                                        Map<DiscoveryNode, Float> nodeWeights, long remainingDelayNanos) {, +        this.remainingDelayNanos = remainingDelayNanos;, +    /** Return the remaining allocation delay for this shard in nanoseconds */, +    public long getRemainingDelayNanos() {, +        return this.remainingDelayNanos;, +    }, +, +                long delay = unassignedInfo.getLastComputedLeftDelayNanos();, +                builder.field("allocation_delay", TimeValue.timeValueNanos(delay));, +                builder.field("allocation_delay_ms", TimeValue.timeValueNanos(delay).millis());, +                builder.field("remaining_delay", TimeValue.timeValueNanos(remainingDelayNanos));, +                builder.field("remaining_delay_ms", TimeValue.timeValueNanos(remainingDelayNanos).millis());, +        out.writeVLong(remainingDelayNanos);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +        long remainingDelayNanos = 0;, +        if (ui != null) {, +            final MetaData metadata = allocation.metaData();, +            final Settings indexSettings = metadata.index(shard.index()).getSettings();, +            remainingDelayNanos = ui.getRemainingDelay(System.nanoTime(), metadata.settings(), indexSettings);, +        }, +                shardAllocator.weighShard(allocation, shard), remainingDelayNanos);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +     * Calculates the delay left based on current time (in nanoseconds) and index/node settings., +     *, +     * @return calculated delay in nanoseconds, +     */, +    public long getRemainingDelay(long nanoTimeNow, Settings settings, Settings indexSettings) {, +        final long delayTimeoutNanos = getAllocationDelayTimeoutSettingNanos(settings, indexSettings);, +        if (delayTimeoutNanos == 0L) {, +            return 0L;, +        } else {, +            assert nanoTimeNow >= unassignedTimeNanos;, +            return Math.max(0L, delayTimeoutNanos - (nanoTimeNow - unassignedTimeNanos));, +        }, +    }, +, +    /**, +        final long newComputedLeftDelayNanos = getRemainingDelay(nanoTimeNow, settings, indexSettings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplanation.java, +import org.elasticsearch.common.unit.TimeValue;, +    private final long remainingDelayNanos;, +        remainingDelayNanos = in.readVLong();, +                                        Map<DiscoveryNode, Float> nodeWeights, long remainingDelayNanos) {, +        this.remainingDelayNanos = remainingDelayNanos;, +    /** Return the remaining allocation delay for this shard in nanoseconds */, +    public long getRemainingDelayNanos() {, +        return this.remainingDelayNanos;, +    }, +, +                long delay = unassignedInfo.getLastComputedLeftDelayNanos();, +                builder.field("allocation_delay", TimeValue.timeValueNanos(delay));, +                builder.field("allocation_delay_ms", TimeValue.timeValueNanos(delay).millis());, +                builder.field("remaining_delay", TimeValue.timeValueNanos(remainingDelayNanos));, +                builder.field("remaining_delay_ms", TimeValue.timeValueNanos(remainingDelayNanos).millis());]