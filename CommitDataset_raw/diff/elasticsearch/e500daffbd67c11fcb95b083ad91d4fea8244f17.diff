[+++ b/qa/evil-tests/src/test/java/org/elasticsearch/threadpool/EvilThreadPoolTests.java, +            checkExecutionException(getExecuteRunner(threadPool.executor(executor)), true);, +            checkExecutionException(getScheduleRunner(executor), true);, +            checkExecutionException(getExecuteRunner(autoQueueFixedExecutor), true);, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/threadpool/EvilThreadPoolTests.java, +            checkExecutionException(getExecuteRunner(threadPool.executor(executor)), true);, +            checkExecutionException(getScheduleRunner(executor), true);, +            checkExecutionException(getExecuteRunner(autoQueueFixedExecutor), true);, +++ b/server/src/main/java/org/elasticsearch/common/util/concurrent/TimedRunnable.java, +import org.elasticsearch.ExceptionsHelper;, +, +        } else {, +            ExceptionsHelper.reThrowIfNotNull(e);, +        } else {, +            ExceptionsHelper.reThrowIfNotNull(e);, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/threadpool/EvilThreadPoolTests.java, +            checkExecutionException(getExecuteRunner(threadPool.executor(executor)), true);, +            checkExecutionException(getScheduleRunner(executor), true);, +            checkExecutionException(getExecuteRunner(autoQueueFixedExecutor), true);, +++ b/server/src/main/java/org/elasticsearch/common/util/concurrent/TimedRunnable.java, +import org.elasticsearch.ExceptionsHelper;, +, +        } else {, +            ExceptionsHelper.reThrowIfNotNull(e);, +        } else {, +            ExceptionsHelper.reThrowIfNotNull(e);, +++ b/server/src/test/java/org/elasticsearch/common/util/concurrent/TimedRunnableTests.java, +    public void testTimedRunnableRethrowsExceptionWhenNotAbstractRunnable() {, +        final AtomicBoolean hasRun = new AtomicBoolean();, +        final RuntimeException exception = new RuntimeException();, +, +        final Runnable runnable = () -> {, +            hasRun.set(true);, +            throw exception;, +        };, +, +        final TimedRunnable timedRunnable = new TimedRunnable(runnable);, +        final RuntimeException thrown = expectThrows(RuntimeException.class, () -> timedRunnable.run());, +        assertTrue(hasRun.get());, +        assertSame(exception, thrown);, +    }, +, +    public void testTimedRunnableRethrowsRejectionWhenNotAbstractRunnable() {, +        final AtomicBoolean hasRun = new AtomicBoolean();, +        final RuntimeException exception = new RuntimeException();, +, +        final Runnable runnable = () -> {, +            hasRun.set(true);, +            throw new AssertionError("should not run");, +        };, +, +        final TimedRunnable timedRunnable = new TimedRunnable(runnable);, +        final RuntimeException thrown = expectThrows(RuntimeException.class, () -> timedRunnable.onRejection(exception));, +        assertFalse(hasRun.get());, +        assertSame(exception, thrown);, +    }, +]