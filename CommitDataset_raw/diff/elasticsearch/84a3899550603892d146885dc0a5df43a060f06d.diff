[+++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +    private final Logger logger = Loggers.getLogger(AzureBlobContainer.class);, +    private final AzureBlobStore blobStore;, +    private final String keyPath;, +    public AzureBlobContainer(BlobPath path, AzureBlobStore blobStore) {, +            return blobStore.blobExists(buildKey(blobName));, +            logger.warn("can not access [{}] in container {{}}: {}", blobName, blobStore, e.getMessage());, +            return blobStore.getInputStream(buildKey(blobName));, +            blobStore.deleteBlob(buildKey(blobName));, +            logger.warn("can not access [{}] in container {{}}: {}", blobName, blobStore, e.getMessage());, +            return blobStore.listBlobsByPrefix(keyPath, prefix);, +            logger.warn("can not access [{}] in container {{}}: {}", prefix, blobStore, e.getMessage());, +            logger.debug("moving blob [{}] to [{}] in container {{}}", source, target, blobStore);, +            blobStore.moveBlob(source, target);, +            logger.warn("can not move blob [{}] to [{}] in container {{}}: {}", sourceBlobName, targetBlobName, blobStore, e.getMessage());, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +    private final Logger logger = Loggers.getLogger(AzureBlobContainer.class);, +    private final AzureBlobStore blobStore;, +    private final String keyPath;, +    public AzureBlobContainer(BlobPath path, AzureBlobStore blobStore) {, +            return blobStore.blobExists(buildKey(blobName));, +            logger.warn("can not access [{}] in container {{}}: {}", blobName, blobStore, e.getMessage());, +            return blobStore.getInputStream(buildKey(blobName));, +            blobStore.deleteBlob(buildKey(blobName));, +            logger.warn("can not access [{}] in container {{}}: {}", blobName, blobStore, e.getMessage());, +            return blobStore.listBlobsByPrefix(keyPath, prefix);, +            logger.warn("can not access [{}] in container {{}}: {}", prefix, blobStore, e.getMessage());, +            logger.debug("moving blob [{}] to [{}] in container {{}}", source, target, blobStore);, +            blobStore.moveBlob(source, target);, +            logger.warn("can not move blob [{}] to [{}] in container {{}}: {}", sourceBlobName, targetBlobName, blobStore, e.getMessage());, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +        return new AzureBlobContainer(path, this);, +    public boolean doesContainerExist(), +    public boolean blobExists(String blob) throws URISyntaxException, StorageException, +    public void deleteBlob(String blob) throws URISyntaxException, StorageException, +    public InputStream getInputStream(String blob) throws URISyntaxException, StorageException, IOException, +    public Map<String,BlobMetaData> listBlobsByPrefix(String keyPath, String prefix), +    public void moveBlob(String sourceBlob, String targetBlob) throws URISyntaxException, StorageException, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +    private final Logger logger = Loggers.getLogger(AzureBlobContainer.class);, +    private final AzureBlobStore blobStore;, +    private final String keyPath;, +    public AzureBlobContainer(BlobPath path, AzureBlobStore blobStore) {, +            return blobStore.blobExists(buildKey(blobName));, +            logger.warn("can not access [{}] in container {{}}: {}", blobName, blobStore, e.getMessage());, +            return blobStore.getInputStream(buildKey(blobName));, +            blobStore.deleteBlob(buildKey(blobName));, +            logger.warn("can not access [{}] in container {{}}: {}", blobName, blobStore, e.getMessage());, +            return blobStore.listBlobsByPrefix(keyPath, prefix);, +            logger.warn("can not access [{}] in container {{}}: {}", prefix, blobStore, e.getMessage());, +            logger.debug("moving blob [{}] to [{}] in container {{}}", source, target, blobStore);, +            blobStore.moveBlob(source, target);, +            logger.warn("can not move blob [{}] to [{}] in container {{}}: {}", sourceBlobName, targetBlobName, blobStore, e.getMessage());, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobStore.java, +        return new AzureBlobContainer(path, this);, +    public boolean doesContainerExist(), +    public boolean blobExists(String blob) throws URISyntaxException, StorageException, +    public void deleteBlob(String blob) throws URISyntaxException, StorageException, +    public InputStream getInputStream(String blob) throws URISyntaxException, StorageException, IOException, +    public Map<String,BlobMetaData> listBlobsByPrefix(String keyPath, String prefix), +    public void moveBlob(String sourceBlob, String targetBlob) throws URISyntaxException, StorageException, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +        if (blobStore.doesContainerExist() == false) {, +            throw new IllegalArgumentException("The bucket [" + blobStore + "] does not exist. Please create it before " +]