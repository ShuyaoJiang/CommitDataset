[+++ b/docs/reference/index-modules/merge.asciidoc, +The maximum number of concurrent merge threads that may run at once. Defaults, +to `1` which works best with spinning-magnets disks.  If you are using, +a good solid-state disk (SSD) instead then try setting this to `3`., +, +[float], +==== SerialMergeScheduler, +, +A merge scheduler that simply does each merge sequentially using the, +calling thread (blocking the operations that triggered the merge or the, +index operation). This merge scheduler has a merge thread pool that, +explicitly schedules merges, and it makes sure that merges are serial, +within a shard, yet concurrent across multiple shards., +, +The scheduler supports the following settings:, +, +`index.merge.scheduler.max_merge_at_once`::, +, +The maximum number of merges a single merge run performs. This setting prevents, +executing unlimited amount of merges in a loop until another shards has a, +chance to get a merge thread from the pool. If this limit is reached the, +merge thread returns to the pool and continues once the the call to a single, +shards is executed. The default is `5`, +++ b/docs/reference/index-modules/merge.asciidoc, +The maximum number of concurrent merge threads that may run at once. Defaults, +to `1` which works best with spinning-magnets disks.  If you are using, +a good solid-state disk (SSD) instead then try setting this to `3`., +, +[float], +==== SerialMergeScheduler, +, +A merge scheduler that simply does each merge sequentially using the, +calling thread (blocking the operations that triggered the merge or the, +index operation). This merge scheduler has a merge thread pool that, +explicitly schedules merges, and it makes sure that merges are serial, +within a shard, yet concurrent across multiple shards., +, +The scheduler supports the following settings:, +, +`index.merge.scheduler.max_merge_at_once`::, +, +The maximum number of merges a single merge run performs. This setting prevents, +executing unlimited amount of merges in a loop until another shards has a, +chance to get a merge thread from the pool. If this limit is reached the, +merge thread returns to the pool and continues once the the call to a single, +shards is executed. The default is `5`, +++ b/pom.xml, +        <lucene.version>4.8.1</lucene.version>, +        <repository>, +            <id>Apache Maven Repository</id>, +            <url>https://repository.apache.org/content/repositories/releases/</url>, +        </repository>, +++ b/docs/reference/index-modules/merge.asciidoc, +The maximum number of concurrent merge threads that may run at once. Defaults, +to `1` which works best with spinning-magnets disks.  If you are using, +a good solid-state disk (SSD) instead then try setting this to `3`., +, +[float], +==== SerialMergeScheduler, +, +A merge scheduler that simply does each merge sequentially using the, +calling thread (blocking the operations that triggered the merge or the, +index operation). This merge scheduler has a merge thread pool that, +explicitly schedules merges, and it makes sure that merges are serial, +within a shard, yet concurrent across multiple shards., +, +The scheduler supports the following settings:, +, +`index.merge.scheduler.max_merge_at_once`::, +, +The maximum number of merges a single merge run performs. This setting prevents, +executing unlimited amount of merges in a loop until another shards has a, +chance to get a merge thread from the pool. If this limit is reached the, +merge thread returns to the pool and continues once the the call to a single, +shards is executed. The default is `5`, +++ b/pom.xml, +        <lucene.version>4.8.1</lucene.version>, +        <repository>, +            <id>Apache Maven Repository</id>, +            <url>https://repository.apache.org/content/repositories/releases/</url>, +        </repository>, +++ b/src/main/java/org/apache/lucene/store/RateLimitedFSDirectory.java, +        private long bytesSinceLastRateLimit;, +            bytesSinceLastRateLimit += len;, +            if (bytesSinceLastRateLimit >= rateLimiter.getMinPauseCheckBytes()) {, +                long pause = rateLimiter.pause(bytesSinceLastRateLimit);, +                bytesSinceLastRateLimit = 0;, +                rateListener.onPause(pause);, +            }, +++ b/docs/reference/index-modules/merge.asciidoc, +The maximum number of concurrent merge threads that may run at once. Defaults, +to `1` which works best with spinning-magnets disks.  If you are using, +a good solid-state disk (SSD) instead then try setting this to `3`., +, +[float], +==== SerialMergeScheduler, +, +A merge scheduler that simply does each merge sequentially using the, +calling thread (blocking the operations that triggered the merge or the, +index operation). This merge scheduler has a merge thread pool that]