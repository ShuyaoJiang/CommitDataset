[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +import java.util.Objects;, +                url = String.format(, +                        Locale.ROOT,, +                        "https://download.elastic.co/elasticsearch/staging/%1$s-%2$s/org/elasticsearch/plugin/%3$s/%1$s/%3$s-%1$s.zip",, +                        version,, +                        Build.CURRENT.shortHash(),, +                        pluginId);, +                url = String.format(, +                        Locale.ROOT,, +                        "https://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%1$s/%2$s/%1$s-%2$s.zip",, +                        pluginId,, +                        version);, +, +        final Path target = stagingDirectory(pluginsDir);, +    private Path stagingDirectory(Path pluginsDir) throws IOException {, +        try {, +            Set<PosixFilePermission> perms = new HashSet<>();, +            perms.add(PosixFilePermission.OWNER_EXECUTE);, +            perms.add(PosixFilePermission.OWNER_READ);, +            perms.add(PosixFilePermission.OWNER_WRITE);, +            perms.add(PosixFilePermission.GROUP_READ);, +            perms.add(PosixFilePermission.GROUP_EXECUTE);, +            perms.add(PosixFilePermission.OTHERS_READ);, +            perms.add(PosixFilePermission.OTHERS_EXECUTE);, +            return Files.createTempDirectory(pluginsDir, ".installing-", PosixFilePermissions.asFileAttribute(perms));, +        } catch (IllegalArgumentException e) {, +            // Jimfs throws an IAE where it should throw an UOE, +            // remove when google/jimfs#30 is integrated into Jimfs, +            // and the Jimfs test dependency is upgraded to include, +            // this pull request, +            final StackTraceElement[] elements = e.getStackTrace();, +            if (elements.length >= 1 &&, +                elements[0].getClassName().equals("com.google.common.jimfs.AttributeService") &&, +                elements[0].getMethodName().equals("setAttributeInternal")) {, +                return stagingDirectoryWithoutPosixPermissions(pluginsDir);, +            } else {, +                throw e;, +            }, +        } catch (UnsupportedOperationException e) {, +            return stagingDirectoryWithoutPosixPermissions(pluginsDir);, +        }, +    }, +, +    private Path stagingDirectoryWithoutPosixPermissions(Path pluginsDir) throws IOException {, +        return Files.createTempDirectory(pluginsDir, ".installing-");, +    }, +, +    void jarHellCheck(Path candidate, Path pluginsDir, boolean isolated) throws Exception {, +                throw new UserError(, +                    ExitCodes.USAGE,, +                    "plugin directory " + destination.toAbsolutePath() +, +                        " already exists. To update the plugin, uninstall it first using 'remove " + info.getName() + "' command");, +        final Set<PosixFilePermission> perms = new HashSet<>();, +        final PosixFileAttributeView binAttributeView = Files.getFileAttributeView(destBinDir.getParent(), PosixFileAttributeView.class);, +        if (binAttributeView != null) {, +            perms.addAll(binAttributeView.readAttributes().permissions());, +                    throw new UserError(, +                        ExitCodes.DATA_ERROR,, +                        "Directories not allowed in bin dir for plugin " + info.getName() + ", found " + srcFile.getFileName());, +                final PosixFileAttributeView view = Files.getFileAttributeView(destFile, PosixFileAttributeView.class);, +                if (view != null) {, +        final PosixFileAttributeView destConfigDirAttributesView =, +            Files.getFileAttributeView(destConfigDir.getParent(), PosixFileAttributeView.class);, +        final PosixFileAttributes destConfigDirAttributes =, +            destConfigDirAttributesView != null ? destConfigDirAttributesView.readAttributes() : null;, +        if (destConfigDirAttributes != null) {, +                    if (destConfigDirAttributes != null) {, +    private static void setOwnerGroup(final Path path, final PosixFileAttributes attributes) throws IOException {, +        Objects.requireNonNull(attributes);, +        assert fileAttributeView != null;, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +import java.util.Objects;, +                url = String.format(, +                        Locale.ROOT,, +                        "https://download.elastic.co/elasticsearch/staging/%1$s-%2$s/org/elasticsearch/plugin/%3$s/%1$s/%3$s-%1$s.zip",, +                        version,, +                        Build.CURRENT.shortHash(),, +                        pluginId);, +                url = String.format(, +                        Locale.ROOT,, +                        "https://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%1$s/%2$s/%1$s-%2$s.zip",, +                        pluginId,, +                        version);, +, +        final Path target = stagingDirectory(pluginsDir);, +    private Path stagingDirectory(Path pluginsDir) throws IOException {, +        try {, +            Set<PosixFilePermission> perms = new HashSet<>();, +            perms.add(PosixFilePermission.OWNER_EXECUTE);, +            perms.add(PosixFilePermission.OWNER_READ);, +            perms.add(PosixFilePermission.OWNER_WRITE);, +            perms.add(PosixFilePermission.GROUP_READ);, +            perms.add(PosixFilePermission.GROUP_EXECUTE);, +            perms.add(PosixFilePermission.OTHERS_READ);, +            perms.add(PosixFilePermission.OTHERS_EXECUTE);, +            return Files.createTempDirectory(pluginsDir, ".installing-", PosixFilePermissions.asFileAttribute(perms));]