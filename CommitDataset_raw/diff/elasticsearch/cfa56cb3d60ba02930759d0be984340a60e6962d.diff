[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                    logger.debug("[{}] update_mapping [{}] (dynamic) with source [{}]", index, type, updatedMappingSource);, +                    logger.info("[{}] update_mapping [{}] (dynamic)", index, type);, +                    int expectedReplies = 0;, +                            String existingSource = existingMapper.mappingSource();, +                            String updatedSource = existingMapper.buildSource();, +                            if (existingSource.equals(updatedSource)) {, +                                // same source, no changes, ignore it, +                                expectedReplies += (currentState.nodes().size() - 1); // for this index, on update, don't include the master, since we update it already, +                                // use the merged mapping source, +                                mappings.put(index, new Tuple<String, String>(existingMapper.type(), updatedSource));, +                                    logger.debug("[{}] update_mapping [{}] with source [{}]", index, existingMapper.type(), updatedSource);, +                                    logger.info("[{}] update_mapping [{}]", index, existingMapper.type());, +                        } else {, +                            expectedReplies += currentState.nodes().size();, +                            String newSource = newMapper.buildSource();, +                            mappings.put(index, new Tuple<String, String>(newMapper.type(), newSource));, +                            if (logger.isDebugEnabled()) {, +                                logger.debug("[{}] create_mapping [{}] with source [{}]", index, newMapper.type(), newSource);, +                            } else if (logger.isInfoEnabled()) {, +                                logger.info("[{}] create_mapping [{}]", index, newMapper.type());, +                            }, +                        }, +                    }, +, +                    if (mappings.isEmpty()) {, +                        // no changes, return, +                        listener.onResponse(new Response(true));, +                        return currentState;, +                    }, +                        if (mapping != null) {, +                    }, +                    final AtomicInteger counter = new AtomicInteger(expectedReplies);]