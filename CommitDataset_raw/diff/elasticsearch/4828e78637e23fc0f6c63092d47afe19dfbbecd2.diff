[+++ b/src/test/java/org/elasticsearch/discovery/DiscoveryWithNetworkFailuresTests.java, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.junit.Ignore;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +    @Ignore, +    @TestLogging("discovery.zen:TRACE,action:TRACE,cluster.service:TRACE,indices.recovery:TRACE,indices.cluster:TRACE"), +        String isolatedNode = nodes.get(0);, +        String nonIsolatedNode = nodes.get(1);, +        final Client nonIsolatedNodeClient = internalCluster().client(nonIsolatedNode);, +                    return nonIsolatedNodeClient.admin().cluster().prepareState().setLocal(true).get().getState().nodes().size() == 2;, +            ClusterHealthResponse healthResponse = nonIsolatedNodeClient.admin().cluster().prepareHealth("test"), +            searchResponse = nonIsolatedNodeClient.prepareSearch("test").setTypes("type"), +            UpdateResponse updateResponse = nonIsolatedNodeClient.prepareUpdate("test", "type", "0").setDoc("field2", 2).get();, +                fail();, +        clusterHealthResponse = nonIsolatedNodeClient.admin().cluster().prepareHealth(), +        assertThat(clusterHealthResponse.getStatus(), equalTo(ClusterHealthStatus.GREEN));, +        for (Client client : clients()) {, +            GetResponse getResponse = client.prepareGet("test", "type", "0").setPreference("_local").get();, +            assertThat(getResponse.getVersion(), equalTo(2l));, +                getResponse = client.prepareGet("test", "type", String.valueOf(i)).setPreference("_local").get();, +    @Test, +    @Ignore, +    @TestLogging("discovery.zen:TRACE,action:TRACE,cluster.service:TRACE,indices.recovery:TRACE,indices.cluster:TRACE"), +    public void testRejoinDocumentExistsInAllShardCopies() throws Exception {, +        final List<String> nodes = internalCluster().startNodesAsync(3, nodeSettings).get();, +        ClusterHealthResponse clusterHealthResponse = client().admin().cluster().prepareHealth(), +                .setWaitForEvents(Priority.LANGUID), +                .setWaitForNodes("3"), +                .get();, +        assertThat(clusterHealthResponse.isTimedOut(), is(false));, +        assertAcked(prepareCreate("test"), +                .setSettings(ImmutableSettings.builder(), +                                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1), +                                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2), +                ), +                .get());, +        ensureGreen("test");, +, +        String isolatedNode = findMasterNode(nodes).getName();, +        String notIsolatedNode = null;, +        for (String node : nodes) {, +            if (!node.equals(isolatedNode)) {, +                notIsolatedNode = node;, +                break;, +            }, +        }, +, +        logger.info("Isolating node[" + isolatedNode + "]");, +        for (String nodeId : nodes) {, +            if (!nodeId.equals(isolatedNode)) {, +                addFailToSendNoConnectRule(nodeId, isolatedNode);, +                addFailToSendNoConnectRule(isolatedNode, nodeId);, +            }, +        }, +        ensureYellow("test");, +, +        IndexResponse indexResponse = internalCluster().client(notIsolatedNode).prepareIndex("test", "type").setSource("field", "value").get();, +        assertThat(indexResponse.getVersion(), equalTo(1l));, +, +        logger.info("Verifying if document exists via node[" + notIsolatedNode + "]");, +        GetResponse getResponse = internalCluster().client(notIsolatedNode).prepareGet("test", "type", indexResponse.getId()), +                .setPreference("_local"), +                .get();, +        assertThat(getResponse.isExists(), is(true));, +        assertThat(getResponse.getVersion(), equalTo(1l));, +        assertThat(getResponse.getId(), equalTo(indexResponse.getId()));, +, +        for (String nodeId : nodes) {, +            if (!nodeId.equals(isolatedNode)) {, +                clearNoConnectRule(nodeId, isolatedNode);, +                clearNoConnectRule(isolatedNode, nodeId);, +            }, +        }, +, +        ensureGreen("test");, +, +        for (String node : nodes) {, +            logger.info("Verifying if document exists after isolating node[" + isolatedNode + "] via node[" + node + "]");, +            getResponse = internalCluster().client(node).prepareGet("test", "type", indexResponse.getId()), +                    .setPreference("_local"), +                    .get();, +            assertThat(getResponse.isExists(), is(true));, +            assertThat(getResponse.getVersion(), equalTo(1l));, +            assertThat(getResponse.getId(), equalTo(indexResponse.getId()));, +        }, +    }, +]