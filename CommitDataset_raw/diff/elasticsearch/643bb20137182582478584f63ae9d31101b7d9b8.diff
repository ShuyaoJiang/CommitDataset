[+++ b/docs/reference/query-dsl/script-score-query.asciidoc, +[[query-dsl-script-score-query]], +=== Script Score Query, +, +experimental[], +, +The `script_score` allows you to modify the score of documents that are, +retrieved by a query. This can be useful if, for example, a score, +function is computationally expensive and it is sufficient to compute, +the score on a filtered set of documents., +, +To use `script_score`, you have to define a query and a script -, +a function to be used to compute a new score for each document returned, +by the query. For more information on scripting see, +<<modules-scripting, scripting documentation>>., +, +, +Here is an example of using `script_score` to assign each matched document, +a score equal to the number of likes divided by 10:, +, +[source,js], +--------------------------------------------------, +GET /_search, +{, +    "query" : {, +        "script_score" : {, +            "query" : {, +                "match": { "message": "elasticsearch" }, +            },, +            "script" : {, +                "source" : "doc['likes'].value / 10 ", +            }, +        }, +     }, +}, +--------------------------------------------------, +// CONSOLE, +// TEST[setup:twitter], +, +==== Accessing the score of a document within a script, +, +Within a script, you can, +<<modules-scripting-fields#scripting-score, access>>, +the `_score` variable which represents the current relevance score of a, +document., +, +, +==== Predefined functions within a Painless script, +You can use any of the available, +<<painless-api-reference, painless functions>> in the painless script., +Besides these functions, there are a number of predefined functions, +that can help you with scoring. We suggest you to use them instead of, +rewriting equivalent functions of your own, as these functions try, +to be the most efficient by using the internal mechanisms., +, +===== rational, +latexmath:[rational(value,k) = value/(k + value)], +, +[source,js], +--------------------------------------------------, +"script" : {, +    "source" : "rational(doc['likes'].value, 1)", +}, +--------------------------------------------------, +// NOTCONSOLE, +, +===== sigmoid, +latexmath:[sigmoid(value, k, a) = value^a/ (k^a + value^a)], +, +[source,js], +--------------------------------------------------, +"script" : {, +    "source" : "sigmoid(doc['likes'].value, 2, 1)", +}, +--------------------------------------------------, +// NOTCONSOLE, +, +, +[[random-functions]], +===== Random functions, +There are two predefined ways to produce random values:, +, +1. `randomNotReproducible()` uses `java.util.Random` class, +to generate a random value of the type `long`., +The generated values are not reproducible between requests' invocations., +, +    [source,js], +    --------------------------------------------------, +    "script" : {, +        "source" : "randomNotReproducible()", +    }, +    --------------------------------------------------, +    // NOTCONSOLE, +, +, +2. `randomReproducible(String seedValue, int seed)` produces, +reproducible random values of type `long`. This function requires, +more computational time and memory than the non-reproducible version., +, +A good candidate for the `seedValue` is document field values that]