[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +    public boolean hasGlobalBlock(ClusterBlock block) {, +        return global.contains(block);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +    public boolean hasGlobalBlock(ClusterBlock block) {, +        return global.contains(block);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/Discovery.java, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    final ClusterBlock NO_MASTER_BLOCK = new ClusterBlock(2, "no master", ClusterBlockLevel.ALL);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +    public boolean hasGlobalBlock(ClusterBlock block) {, +        return global.contains(block);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/Discovery.java, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    final ClusterBlock NO_MASTER_BLOCK = new ClusterBlock(2, "no master", ClusterBlockLevel.ALL);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +    public boolean hasGlobalBlock(ClusterBlock block) {, +        return global.contains(block);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/Discovery.java, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +    final ClusterBlock NO_MASTER_BLOCK = new ClusterBlock(2, "no master", ClusterBlockLevel.ALL);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/local/LocalGateway.java, +import org.elasticsearch.discovery.Discovery;, +        // we only write the local metadata if this is a possible master node, the metadata has changed, and, +        // we don't have a NO_MASTER block (in which case, the routing is cleaned, and we don't want to override what, +        // we have now, since it might be needed when later on performing full state recovery), +        if (event.state().nodes().localNode().masterNode() && event.metaDataChanged() && !event.state().blocks().hasGlobalBlock(Discovery.NO_MASTER_BLOCK)) {]