[+++ b/src/test/java/org/elasticsearch/search/query/MultiMatchQueryTests.java, +import org.elasticsearch.index.query.QueryBuilders;, +    public void testSingleField() throws NoSuchFieldException, IllegalAccessException {, +        String[] fields = {"full_name", "first_name", "last_name", "last_name_phrase", "first_name_phrase", "category_phrase", "category"};, +, +        String[] query = {"marvel","hero", "captain",  "america", "15", "17", "1", "5", "ultimate", "Man",, +                "marvel", "wolferine", "ninja"};, +, +        // check if it's equivalent to a match query., +        int numIters = scaledRandomIntBetween(10, 100);, +        for (int i = 0; i < numIters; i++) {, +            String field = RandomPicks.randomFrom(getRandom(), fields);, +            int numTerms = randomIntBetween(1, query.length);, +            StringBuilder builder = new StringBuilder();, +            for (int j = 0; j < numTerms; j++) {, +                builder.append(RandomPicks.randomFrom(getRandom(), query)).append(" ");, +            }, +            MultiMatchQueryBuilder multiMatchQueryBuilder = randomizeType(multiMatchQuery(builder.toString(), field));, +            SearchResponse multiMatchResp = client().prepareSearch("test"), +                    .setQuery(multiMatchQueryBuilder).get();, +            MatchQueryBuilder matchQueryBuilder = QueryBuilders.matchQuery(field, builder.toString());, +            if (getType(multiMatchQueryBuilder) != null) {, +                matchQueryBuilder.type(MatchQueryBuilder.Type.valueOf(getType(multiMatchQueryBuilder).matchQueryType().toString()));, +            }, +            SearchResponse matchResp = client().prepareSearch("test"), +                    .setQuery(matchQueryBuilder).get();, +            assertThat("field: " + field + " query: " + builder.toString(), multiMatchResp.getHits().getTotalHits(), equalTo(matchResp.getHits().getTotalHits()));, +            SearchHits hits = multiMatchResp.getHits();, +            for (int j = 0; j < hits.hits().length; j++) {, +                assertThat(hits.getHits()[j].score(), equalTo(matchResp.getHits().getHits()[j].score()));, +                assertThat(hits.getHits()[j].getId(), equalTo(matchResp.getHits().getHits()[j].getId()));, +            }, +        }, +, +            MultiMatchQueryBuilder.Type type = getType(builder);, +, +    private MultiMatchQueryBuilder.Type getType(MultiMatchQueryBuilder builder) throws NoSuchFieldException, IllegalAccessException {, +        Field field = MultiMatchQueryBuilder.class.getDeclaredField("type");, +        field.setAccessible(true);, +        return (MultiMatchQueryBuilder.Type) field.get(builder);, +    }]