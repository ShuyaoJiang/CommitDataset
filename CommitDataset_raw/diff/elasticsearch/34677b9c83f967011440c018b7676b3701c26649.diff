[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.client.core.CountRequest;, +    static Request count(CountRequest countRequest) throws IOException {, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint(countRequest.indices(), countRequest.types(), "_count"));, +        Params params = new Params(request);, +        params.withRouting(countRequest.routing());, +        params.withPreference(countRequest.preference());, +        params.withIndicesOptions(countRequest.indicesOptions());, +        request.setEntity(createEntity(countRequest.source(), REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.client.core.CountRequest;, +    static Request count(CountRequest countRequest) throws IOException {, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint(countRequest.indices(), countRequest.types(), "_count"));, +        Params params = new Params(request);, +        params.withRouting(countRequest.routing());, +        params.withPreference(countRequest.preference());, +        params.withIndicesOptions(countRequest.indicesOptions());, +        request.setEntity(createEntity(countRequest.source(), REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.client.core.CountRequest;, +import org.elasticsearch.client.core.CountResponse;, +     * Executes a count request using the Count API., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html">Count API on elastic.co</a>, +     * @param countRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public final CountResponse count(CountRequest countRequest, RequestOptions options) throws IOException {, +        return performRequestAndParseEntity(countRequest, RequestConverters::count, options, CountResponse::fromXContent,, +        emptySet());, +    }, +, +    /**, +     * Asynchronously executes a count request using the Count API., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html">Count API on elastic.co</a>, +     * @param countRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public final void countAsync(CountRequest countRequest, RequestOptions options, ActionListener<CountResponse> listener) {, +        performRequestAsyncAndParseEntity(countRequest, RequestConverters::count,  options,CountResponse::fromXContent,, +            listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.client.core.CountRequest;, +    static Request count(CountRequest countRequest) throws IOException {, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint(countRequest.indices(), countRequest.types(), "_count"));, +        Params params = new Params(request);, +        params.withRouting(countRequest.routing());, +        params.withPreference(countRequest.preference());, +        params.withIndicesOptions(countRequest.indicesOptions());, +        request.setEntity(createEntity(countRequest.source(), REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.client.core.CountRequest;, +import org.elasticsearch.client.core.CountResponse;, +     * Executes a count request using the Count API., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html">Count API on elastic.co</a>, +     * @param countRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public final CountResponse count(CountRequest countRequest, RequestOptions options) throws IOException {, +        return performRequestAndParseEntity(countRequest, RequestConverters::count, options, CountResponse::fromXContent,, +        emptySet());, +    }, +, +    /**, +     * Asynchronously executes a count request using the Count API., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html">Count API on elastic.co</a>, +     * @param countRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public final void countAsync(CountRequest countRequest, RequestOptions options, ActionListener<CountResponse> listener) {, +        performRequestAsyncAndParseEntity(countRequest, RequestConverters::count,  options,CountResponse::fromXContent,, +            listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/core/CountRequest.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License.]