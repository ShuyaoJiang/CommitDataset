[+++ b/buildSrc/build.gradle, +, +  task namingConventionsMain(type: org.elasticsearch.gradle.precommit.NamingConventionsTask) {, +    checkForTestsInMain = true, +    testClass = namingConventions.testClass, +    integTestClass = namingConventions.integTestClass, +  }, +  precommit.dependsOn namingConventionsMain, +++ b/buildSrc/build.gradle, +, +  task namingConventionsMain(type: org.elasticsearch.gradle.precommit.NamingConventionsTask) {, +    checkForTestsInMain = true, +    testClass = namingConventions.testClass, +    integTestClass = namingConventions.integTestClass, +  }, +  precommit.dependsOn namingConventionsMain, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/NamingConventionsTask.groovy, +    File successMarker = new File(project.buildDir, "markers/${this.name}"), +    /**, +     * Should the test also check the main classpath for test classes instead of, +     * doing the usual checks to the test classpath., +     */, +    @Input, +    boolean checkForTestsInMain = false;, +, +        if (false == project.configurations.names.contains('namingConventions')) {, +        }, +        FileCollection classpath = project.sourceSets.test.runtimeClasspath, +        inputs.files(classpath), +        description = "Tests that test classes aren't misnamed or misplaced", +        if (false == checkForTestsInMain) {, +            /* This task is created by default for all subprojects with this, +             * setting and there is no point in running it if the files don't, +             * exist. */, +        }, +, +                if (checkForTestsInMain) {, +                    args('--main'), +                    args('--'), +                    args(project.sourceSets.main.output.classesDir.absolutePath), +                } else {, +                    args('--'), +                    args(project.sourceSets.test.output.classesDir.absolutePath), +                }, +++ b/buildSrc/build.gradle, +, +  task namingConventionsMain(type: org.elasticsearch.gradle.precommit.NamingConventionsTask) {, +    checkForTestsInMain = true, +    testClass = namingConventions.testClass, +    integTestClass = namingConventions.integTestClass, +  }, +  precommit.dependsOn namingConventionsMain, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/NamingConventionsTask.groovy, +    File successMarker = new File(project.buildDir, "markers/${this.name}"), +    /**, +     * Should the test also check the main classpath for test classes instead of, +     * doing the usual checks to the test classpath., +     */, +    @Input, +    boolean checkForTestsInMain = false;, +, +        if (false == project.configurations.names.contains('namingConventions')) {, +        }, +        FileCollection classpath = project.sourceSets.test.runtimeClasspath, +        inputs.files(classpath), +        description = "Tests that test classes aren't misnamed or misplaced", +        if (false == checkForTestsInMain) {, +            /* This task is created by default for all subprojects with this, +             * setting and there is no point in running it if the files don't, +             * exist. */, +        }, +, +                if (checkForTestsInMain) {, +                    args('--main'), +                    args('--'), +                    args(project.sourceSets.main.output.classesDir.absolutePath), +                } else {, +                    args('--'), +                    args(project.sourceSets.test.output.classesDir.absolutePath), +                }, +++ b/buildSrc/src/main/java/org/elasticsearch/test/NamingConventionsCheck.java, +import java.util.Objects;, +        boolean checkMainClasses = false;, +                case "--main":, +                    checkMainClasses = true;, +                    break;, +        if (checkMainClasses) {, +            check.checkMain(rootPath);, +        } else {, +            check.checkTests(rootPath, skipIntegTestsInDisguise);, +        }, +            if (checkMainClasses) {, +                assertViolation(NamingConventionsCheckInMainTests.class.getName(), check.testsInMain);, +                assertViolation(NamingConventionsCheckInMainIT.class.getName(), check.testsInMain);, +            } else {, +        }, +        assertNoViolations(, +                "Not all subclasses of " + check.testClass.getSimpleName(), +                    + " match the naming convention. Concrete classes must end with [Tests]",, +                check.missingSuffix);]