[+++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries, boost);, +            super.flatten(sourceQuery, reader, flatQueries, boost);, +                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    , +            this.flatten(query, reader, flatQueries, orig.getBoost());, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries, 1.0F);, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries, boost);, +            super.flatten(sourceQuery, reader, flatQueries, boost);, +                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    , +            this.flatten(query, reader, flatQueries, orig.getBoost());, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries, 1.0F);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +     * Checks the current classloader for duplicate classes, +        if (loader instanceof URLClassLoader == false) {, +           return;, +        }, +        checkJarHell(((URLClassLoader) loader).getURLs());, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries, boost);, +            super.flatten(sourceQuery, reader, flatQueries, boost);, +                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    , +            this.flatten(query, reader, flatQueries, orig.getBoost());, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries, 1.0F);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +     * Checks the current classloader for duplicate classes, +        if (loader instanceof URLClassLoader == false) {, +           return;, +        }, +        checkJarHell(((URLClassLoader) loader).getURLs());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import java.net.URLClassLoader;, +        ClassLoader loader = Security.class.getClassLoader();, +        if (loader instanceof URLClassLoader) {, +            for (URL url : ((URLClassLoader)loader).getURLs()) {, +        } else {, +            // we could try to parse the classpath or something, but screw it for now., +            throw new UnsupportedOperationException("Unsupported system classloader type: " + loader.getClass());, +        }, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries, boost);, +            super.flatten(sourceQuery, reader, flatQueries, boost);, +                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    , +            this.flatten(query, reader, flatQueries, orig.getBoost());, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries, 1.0F);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +     * Checks the current classloader for duplicate classes, +        if (loader instanceof URLClassLoader == false) {, +           return;, +        }, +        checkJarHell(((URLClassLoader) loader).getURLs());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import java.net.URLClassLoader;, +        ClassLoader loader = Security.class.getClassLoader();, +        if (loader instanceof URLClassLoader) {, +            for (URL url : ((URLClassLoader)loader).getURLs()) {, +        } else {, +            // we could try to parse the classpath or something, but screw it for now., +            throw new UnsupportedOperationException("Unsupported system classloader type: " + loader.getClass());, +        }, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +        if (getBoost() != 1f) {, +            return super.rewrite(reader);, +        }, +        final SimWeight stats = similarity.computeWeight(collectionStats, termStats);, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);]