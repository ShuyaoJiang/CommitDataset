[+++ b/x-pack/plugin/core/src/main/resources/security_audit_log.json, +        },, +        "opaque_id": {, +          "type": "keyword", +++ b/x-pack/plugin/core/src/main/resources/security_audit_log.json, +        },, +        "opaque_id": {, +          "type": "keyword", +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/index/IndexAuditTrail.java, +import org.elasticsearch.tasks.Task;, +, +        String opaqueId = threadPool.getThreadContext().getHeader(Task.X_OPAQUE_ID);, +        if (opaqueId != null) {, +            builder.field("opaque_id", opaqueId);, +        }, +, +++ b/x-pack/plugin/core/src/main/resources/security_audit_log.json, +        },, +        "opaque_id": {, +          "type": "keyword", +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/audit/index/IndexAuditTrail.java, +import org.elasticsearch.tasks.Task;, +, +        String opaqueId = threadPool.getThreadContext().getHeader(Task.X_OPAQUE_ID);, +        if (opaqueId != null) {, +            builder.field("opaque_id", opaqueId);, +        }, +, +++ b/x-pack/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +import org.elasticsearch.client.Request;, +import org.elasticsearch.client.RequestOptions;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.tasks.Task;, +        final boolean found = awaitSecurityAuditIndex(lastClusterState, QueryBuilders.matchQuery("principal", USER));, +, +        assertTrue("Did not find security audit index. Current cluster state:\n" + lastClusterState.get().toString(), found);, +, +        SearchResponse searchResponse = client().prepareSearch(".security_audit_log*").setQuery(, +                QueryBuilders.matchQuery("principal", USER)).get();, +        assertThat(searchResponse.getHits().getHits().length, greaterThan(0));, +        assertThat(searchResponse.getHits().getAt(0).getSourceAsMap().get("principal"), is(USER));, +    }, +, +    public void testAuditTrailTemplateIsRecreatedAfterDelete() throws Exception {, +        // this is already "tested" by the test framework since we wipe the templates before and after,, +        // but lets be explicit about the behavior, +        awaitIndexTemplateCreation();, +, +        // delete the template, +        DeleteIndexTemplateResponse deleteResponse = client().admin().indices(), +                .prepareDeleteTemplate(IndexAuditTrail.INDEX_TEMPLATE_NAME).execute().actionGet();, +        assertThat(deleteResponse.isAcknowledged(), is(true));, +        awaitIndexTemplateCreation();, +    }, +, +    public void testOpaqueIdWorking() throws Exception {, +        Request request = new Request("GET", "/");, +        RequestOptions.Builder options = request.getOptions().toBuilder();, +        options.addHeader(Task.X_OPAQUE_ID, "foo");, +        options.addHeader(UsernamePasswordToken.BASIC_AUTH_HEADER,, +            UsernamePasswordToken.basicAuthHeaderValue(USER, new SecureString(PASS.toCharArray())));, +        request.setOptions(options);, +        Response response = getRestClient().performRequest(request);, +        assertThat(response.getStatusLine().getStatusCode(), is(200));, +        final AtomicReference<ClusterState> lastClusterState = new AtomicReference<>();, +        final boolean found = awaitSecurityAuditIndex(lastClusterState, QueryBuilders.matchQuery("opaque_id", "foo"));, +, +        assertTrue("Did not find security audit index. Current cluster state:\n" + lastClusterState.get().toString(), found);, +, +        SearchResponse searchResponse = client().prepareSearch(".security_audit_log*").setQuery(, +            QueryBuilders.matchQuery("opaque_id", "foo")).get();, +        assertThat(searchResponse.getHits().getHits().length, greaterThan(0));, +, +        assertThat(searchResponse.getHits().getAt(0).getSourceAsMap().get("opaque_id"), is("foo"));, +    }, +, +    private boolean awaitSecurityAuditIndex(AtomicReference<ClusterState> lastClusterState,, +                                            QueryBuilder query) throws InterruptedException {, +        return awaitBusy(() -> {, +            return client().prepareSearch(".security_audit_log*").setQuery(query)]