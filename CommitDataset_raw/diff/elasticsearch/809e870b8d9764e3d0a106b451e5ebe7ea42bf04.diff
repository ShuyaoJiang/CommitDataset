[+++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import com.carrotsearch.hppc.cursors.IntCursor;, +import com.carrotsearch.hppc.cursors.IntObjectCursor;, +import com.carrotsearch.hppc.cursors.LongObjectCursor;, +import org.elasticsearch.common.collect.ImmutableOpenIntMap;, +import org.elasticsearch.common.collect.ImmutableOpenLongMap;, +    private final ImmutableOpenIntMap<IndexShardRoutingTable> shards;, +    IndexRoutingTable(String index, ImmutableOpenIntMap<IndexShardRoutingTable> shards) {, +        this.shards = shards;, +        for (IntObjectCursor<IndexShardRoutingTable> cursor : shards) {, +            for (ShardRouting shardRouting : cursor.value) {, +        for (IntObjectCursor<IndexShardRoutingTable> cursor : shards) {, +            builder.addIndexShard(cursor.value.normalizeVersions());, +        return shards.valuesIt();, +    public ImmutableOpenIntMap<IndexShardRoutingTable> shards() {, +    public ImmutableOpenIntMap<IndexShardRoutingTable> getShards() {, +        private final ImmutableOpenIntMap.Builder<IndexShardRoutingTable> shards = ImmutableOpenIntMap.builder();, +            for (IntCursor cursor : shards.keys()) {, +                int shardId = cursor.value;, +            for (IntCursor cursor : shards.keys()) {, +                int shardId = cursor.value;, +            IndexRoutingTable indexRoutingTable = new IndexRoutingTable(index, shards.build());, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import com.carrotsearch.hppc.cursors.IntCursor;, +import com.carrotsearch.hppc.cursors.IntObjectCursor;, +import com.carrotsearch.hppc.cursors.LongObjectCursor;, +import org.elasticsearch.common.collect.ImmutableOpenIntMap;, +import org.elasticsearch.common.collect.ImmutableOpenLongMap;, +    private final ImmutableOpenIntMap<IndexShardRoutingTable> shards;, +    IndexRoutingTable(String index, ImmutableOpenIntMap<IndexShardRoutingTable> shards) {, +        this.shards = shards;, +        for (IntObjectCursor<IndexShardRoutingTable> cursor : shards) {, +            for (ShardRouting shardRouting : cursor.value) {, +        for (IntObjectCursor<IndexShardRoutingTable> cursor : shards) {, +            builder.addIndexShard(cursor.value.normalizeVersions());, +        return shards.valuesIt();, +    public ImmutableOpenIntMap<IndexShardRoutingTable> shards() {, +    public ImmutableOpenIntMap<IndexShardRoutingTable> getShards() {, +        private final ImmutableOpenIntMap.Builder<IndexShardRoutingTable> shards = ImmutableOpenIntMap.builder();, +            for (IntCursor cursor : shards.keys()) {, +                int shardId = cursor.value;, +            for (IntCursor cursor : shards.keys()) {, +                int shardId = cursor.value;, +            IndexRoutingTable indexRoutingTable = new IndexRoutingTable(index, shards.build());, +++ b/src/main/java/org/elasticsearch/common/collect/ImmutableOpenIntMap.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.collect;, +, +import com.carrotsearch.hppc.*;, +import com.carrotsearch.hppc.cursors.IntCursor;, +import com.carrotsearch.hppc.cursors.IntObjectCursor;, +import com.carrotsearch.hppc.cursors.ObjectCursor;, +import com.carrotsearch.hppc.predicates.IntPredicate;, +import com.carrotsearch.hppc.procedures.IntObjectProcedure;, +import com.google.common.collect.UnmodifiableIterator;, +, +import java.util.Iterator;, +import java.util.Map;, +, +/**, + * An immutable map implementation based on open hash map., + * <p/>, + * Can be constructed using a {@link #builder()}, or using {@link #builder(org.elasticsearch.common.collect.ImmutableOpenIntMap)} (which is an optimized, + * option to copy over existing content and modify it)., + */, +public final class ImmutableOpenIntMap<VType> implements Iterable<IntObjectCursor<VType>> {, +, +    private final IntObjectOpenHashMap<VType> map;, +, +    private ImmutableOpenIntMap(IntObjectOpenHashMap<VType> map) {, +        this.map = map;, +    }, +, +    /**, +     * @return Returns the value associated with the given key or the default value, +     * for the key type, if the key is not associated with any value., +     * <p/>, +     * <b>Important note:</b> For primitive type values, the value returned for a non-existing, +     * key may not be the default value of the primitive type (it may be any value previously, +     * assigned to that slot)., +     */, +    public VType get(int key) {]