[+++ b/docs/reference/index-modules/store.asciidoc, +++ b/docs/reference/index-modules/store.asciidoc, +++ b/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +    private final CounterMetric totalMergeStoppedTime = new CounterMetric();, +    private final CounterMetric totalMergeThrottledTime = new CounterMetric();, +    public long totalMergeStoppedTimeMillis() {, +        return totalMergeStoppedTime.count();, +    }, +, +    public long totalMergeThrottledTimeMillis() {, +        return totalMergeThrottledTime.count();, +    }, +, +, +            totalMergeStoppedTime.inc(merge.rateLimiter.getTotalStoppedNS()/1000000);, +            totalMergeThrottledTime.inc(merge.rateLimiter.getTotalPausedNS()/1000000);, +, +++ b/docs/reference/index-modules/store.asciidoc, +++ b/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +    private final CounterMetric totalMergeStoppedTime = new CounterMetric();, +    private final CounterMetric totalMergeThrottledTime = new CounterMetric();, +    public long totalMergeStoppedTimeMillis() {, +        return totalMergeStoppedTime.count();, +    }, +, +    public long totalMergeThrottledTimeMillis() {, +        return totalMergeThrottledTime.count();, +    }, +, +, +            totalMergeStoppedTime.inc(merge.rateLimiter.getTotalStoppedNS()/1000000);, +            totalMergeThrottledTime.inc(merge.rateLimiter.getTotalPausedNS()/1000000);, +, +++ /dev/null, +++ b/docs/reference/index-modules/store.asciidoc, +++ b/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +    private final CounterMetric totalMergeStoppedTime = new CounterMetric();, +    private final CounterMetric totalMergeThrottledTime = new CounterMetric();, +    public long totalMergeStoppedTimeMillis() {, +        return totalMergeStoppedTime.count();, +    }, +, +    public long totalMergeThrottledTimeMillis() {, +        return totalMergeThrottledTime.count();, +    }, +, +, +            totalMergeStoppedTime.inc(merge.rateLimiter.getTotalStoppedNS()/1000000);, +            totalMergeThrottledTime.inc(merge.rateLimiter.getTotalPausedNS()/1000000);, +, +++ /dev/null, +++ /dev/null, +++ b/docs/reference/index-modules/store.asciidoc, +++ b/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +    private final CounterMetric totalMergeStoppedTime = new CounterMetric();, +    private final CounterMetric totalMergeThrottledTime = new CounterMetric();, +    public long totalMergeStoppedTimeMillis() {, +        return totalMergeStoppedTime.count();, +    }, +, +    public long totalMergeThrottledTimeMillis() {, +        return totalMergeThrottledTime.count();, +    }, +, +, +            totalMergeStoppedTime.inc(merge.rateLimiter.getTotalStoppedNS()/1000000);, +            totalMergeThrottledTime.inc(merge.rateLimiter.getTotalPausedNS()/1000000);, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/docs/reference/index-modules/store.asciidoc, +++ b/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +    private final CounterMetric totalMergeStoppedTime = new CounterMetric();, +    private final CounterMetric totalMergeThrottledTime = new CounterMetric();, +    public long totalMergeStoppedTimeMillis() {, +        return totalMergeStoppedTime.count();, +    }, +, +    public long totalMergeThrottledTimeMillis() {, +        return totalMergeThrottledTime.count();, +    }, +, +, +            totalMergeStoppedTime.inc(merge.rateLimiter.getTotalStoppedNS()/1000000);, +            totalMergeThrottledTime.inc(merge.rateLimiter.getTotalPausedNS()/1000000);, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/Version.java, +import java.io.Serializable;, +public class Version implements Serializable {, +    public static final Version V_1_5_0 = new Version(V_1_5_0_ID, false, org.apache.lucene.util.Version.fromBits(4, 10, 3)); // TODO change this to a constant once we update the snapshot, +++ b/docs/reference/index-modules/store.asciidoc, +++ b/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +    private final CounterMetric totalMergeStoppedTime = new CounterMetric();, +    private final CounterMetric totalMergeThrottledTime = new CounterMetric();, +    public long totalMergeStoppedTimeMillis() {, +        return totalMergeStoppedTime.count();]