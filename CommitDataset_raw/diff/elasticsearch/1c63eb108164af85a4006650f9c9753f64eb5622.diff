[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +        return lookupReferenceInternal(painlessLookup, methodHandlesLookup, interfaceType,, +                PainlessLookupUtility.anyTypeToPainlessTypeName(implMethod.target), implMethod.name, receiverClass);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +        return lookupReferenceInternal(painlessLookup, methodHandlesLookup, interfaceType,, +                PainlessLookupUtility.anyTypeToPainlessTypeName(implMethod.target), implMethod.name, receiverClass);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +        if (delegateMethod.target == null) {, +            delegateClassName = delegateMethod.target.getName();, +            isDelegateInterface = delegateMethod.target.isInterface();, +        } else if (delegateMethod.target.isInterface()) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +        return lookupReferenceInternal(painlessLookup, methodHandlesLookup, interfaceType,, +                PainlessLookupUtility.anyTypeToPainlessTypeName(implMethod.target), implMethod.name, receiverClass);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +        if (delegateMethod.target == null) {, +            delegateClassName = delegateMethod.target.getName();, +            isDelegateInterface = delegateMethod.target.isInterface();, +        } else if (delegateMethod.target.isInterface()) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessField.java, +    public final Class<?> target;, +    PainlessField(String name, String javaName, Class<?> target, Class<?> clazz, int modifiers,, +        this.target = target;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +        return lookupReferenceInternal(painlessLookup, methodHandlesLookup, interfaceType,, +                PainlessLookupUtility.anyTypeToPainlessTypeName(implMethod.target), implMethod.name, receiverClass);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +        if (delegateMethod.target == null) {, +            delegateClassName = delegateMethod.target.getName();, +            isDelegateInterface = delegateMethod.target.isInterface();, +        } else if (delegateMethod.target.isInterface()) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessField.java, +    public final Class<?> target;, +    PainlessField(String name, String javaName, Class<?> target, Class<?> clazz, int modifiers,, +        this.target = target;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookupBuilder.java, +                key -> new PainlessMethod("<init>", ownerStruct.clazz, null, void.class, painlessParametersTypes,, +                    key -> new PainlessMethod(whitelistMethod.javaMethodName, ownerStruct.clazz, null, painlessReturnClass,, +                    key -> new PainlessMethod(whitelistMethod.javaMethodName, ownerStruct.clazz, javaAugmentedClass, painlessReturnClass,, +                        ownerStruct.clazz, painlessFieldClass, javaField.getModifiers(), null, null));, +                        ownerStruct.clazz, painlessFieldClass, javaField.getModifiers(), javaMethodHandleGetter, javaMethodHandleSetter));, +                    owner.members.put(field.name, new PainlessField(, +                            field.name, field.javaName, owner.clazz, field.clazz, field.modifiers, field.getter, field.setter));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +        return lookupReferenceInternal(painlessLookup, methodHandlesLookup, interfaceType,, +                PainlessLookupUtility.anyTypeToPainlessTypeName(implMethod.target), implMethod.name, receiverClass);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +        if (delegateMethod.target == null) {, +            delegateClassName = delegateMethod.target.getName();, +            isDelegateInterface = delegateMethod.target.isInterface();, +        } else if (delegateMethod.target.isInterface()) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessField.java, +    public final Class<?> target;, +    PainlessField(String name, String javaName, Class<?> target, Class<?> clazz, int modifiers,, +        this.target = target;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookupBuilder.java, +                key -> new PainlessMethod("<init>", ownerStruct.clazz, null, void.class, painlessParametersTypes,, +                    key -> new PainlessMethod(whitelistMethod.javaMethodName, ownerStruct.clazz, null, painlessReturnClass,, +                    key -> new PainlessMethod(whitelistMethod.javaMethodName, ownerStruct.clazz, javaAugmentedClass, painlessReturnClass,, +                        ownerStruct.clazz, painlessFieldClass, javaField.getModifiers(), null, null));, +                        ownerStruct.clazz, painlessFieldClass, javaField.getModifiers(), javaMethodHandleGetter, javaMethodHandleSetter));, +                    owner.members.put(field.name, new PainlessField(, +                            field.name, field.javaName, owner.clazz, field.clazz, field.modifiers, field.getter, field.setter));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookupUtility.java, +                    throw new IllegalArgumentException("painless type [" + painlessTypeName + "] not found");, +                throw new IllegalArgumentException("painless type [" + painlessTypeName + "] not found", cnfe);, +            throw new IllegalArgumentException("painless type [" + painlessTypeName + "] not found");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +        return lookupReferenceInternal(painlessLookup, methodHandlesLookup, interfaceType,, +                PainlessLookupUtility.anyTypeToPainlessTypeName(implMethod.target), implMethod.name, receiverClass);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/FunctionRef.java, +        if (delegateMethod.target == null) {, +            delegateClassName = delegateMethod.target.getName();, +            isDelegateInterface = delegateMethod.target.isInterface();, +        } else if (delegateMethod.target.isInterface()) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessField.java, +    public final Class<?> target;, +    PainlessField(String name, String javaName, Class<?> target, Class<?> clazz, int modifiers,, +        this.target = target;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookupBuilder.java, +                key -> new PainlessMethod("<init>", ownerStruct.clazz, null, void.class, painlessParametersTypes,, +                    key -> new PainlessMethod(whitelistMethod.javaMethodName, ownerStruct.clazz, null, painlessReturnClass,, +                    key -> new PainlessMethod(whitelistMethod.javaMethodName, ownerStruct.clazz, javaAugmentedClass, painlessReturnClass,, +                        ownerStruct.clazz, painlessFieldClass, javaField.getModifiers(), null, null));, +                        ownerStruct.clazz, painlessFieldClass, javaField.getModifiers(), javaMethodHandleGetter, javaMethodHandleSetter));, +                    owner.members.put(field.name, new PainlessField(, +                            field.name, field.javaName, owner.clazz, field.clazz, field.modifiers, field.getter, field.setter));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookupUtility.java, +                    throw new IllegalArgumentException("painless type [" + painlessTypeName + "] not found");, +                throw new IllegalArgumentException("painless type [" + painlessTypeName + "] not found", cnfe);, +            throw new IllegalArgumentException("painless type [" + painlessTypeName + "] not found");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessMethod.java, +import org.objectweb.asm.Type;, +    public final Class<?> target;, +    public PainlessMethod(String name, Class<?> target, Class<?> augmentation, Class<?> rtn, List<Class<?>> arguments,, +        this.target = target;, +            returnValue = target;, +            params[0] = target;, +            clazz = target;, +            type = Type.getType(target);]