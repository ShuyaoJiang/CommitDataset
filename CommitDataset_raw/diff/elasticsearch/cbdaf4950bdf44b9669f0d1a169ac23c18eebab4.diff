[+++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +import org.apache.lucene.util.BytesRef;, +    private static final BytesRef[] EMPTY = new BytesRef[0];, +, +    private BytesRef[] matches;, +    public PercolateShardResponse(BytesRef[] matches, long count, float[] scores, PercolatorService.PercolateContext context, String index, int shardId) {, +    public PercolateShardResponse(BytesRef[] matches, long count, PercolatorService.PercolateContext context, String index, int shardId) {, +        this.matches = EMPTY;, +        this.matches = EMPTY;, +    public BytesRef[] matches() {, +        matches = new BytesRef[in.readVInt()];, +        for (int i = 0; i < matches.length; i++) {, +            matches[i] = in.readBytesRef();, +        }, +        out.writeVInt(matches.length);, +        for (BytesRef match : matches) {, +            out.writeBytesRef(match);, +        }, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +import org.apache.lucene.util.BytesRef;, +    private static final BytesRef[] EMPTY = new BytesRef[0];, +, +    private BytesRef[] matches;, +    public PercolateShardResponse(BytesRef[] matches, long count, float[] scores, PercolatorService.PercolateContext context, String index, int shardId) {, +    public PercolateShardResponse(BytesRef[] matches, long count, PercolatorService.PercolateContext context, String index, int shardId) {, +        this.matches = EMPTY;, +        this.matches = EMPTY;, +    public BytesRef[] matches() {, +        matches = new BytesRef[in.readVInt()];, +        for (int i = 0; i < matches.length; i++) {, +            matches[i] = in.readBytesRef();, +        }, +        out.writeVInt(matches.length);, +        for (BytesRef match : matches) {, +            out.writeBytesRef(match);, +        }, +++ b/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.text.BytesText;, +                        Text match = new BytesText(new BytesArray(response.matches()[i]));, +                        finalMatches.add(new PercolateResponse.Match(index, match, score));, +                        Text match = new BytesText(new BytesArray(shardResponse.matches()[itemIndex]));, +                        Text match = new BytesText(new BytesArray(response.matches()[i]));, +                        finalMatches.add(new PercolateResponse.Match(index, match, score));, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +import org.apache.lucene.util.BytesRef;, +    private static final BytesRef[] EMPTY = new BytesRef[0];, +, +    private BytesRef[] matches;, +    public PercolateShardResponse(BytesRef[] matches, long count, float[] scores, PercolatorService.PercolateContext context, String index, int shardId) {, +    public PercolateShardResponse(BytesRef[] matches, long count, PercolatorService.PercolateContext context, String index, int shardId) {, +        this.matches = EMPTY;, +        this.matches = EMPTY;, +    public BytesRef[] matches() {, +        matches = new BytesRef[in.readVInt()];, +        for (int i = 0; i < matches.length; i++) {, +            matches[i] = in.readBytesRef();, +        }, +        out.writeVInt(matches.length);, +        for (BytesRef match : matches) {, +            out.writeBytesRef(match);, +        }, +++ b/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.text.BytesText;, +                        Text match = new BytesText(new BytesArray(response.matches()[i]));, +                        finalMatches.add(new PercolateResponse.Match(index, match, score));, +                        Text match = new BytesText(new BytesArray(shardResponse.matches()[itemIndex]));, +                        Text match = new BytesText(new BytesArray(response.matches()[i]));, +                        finalMatches.add(new PercolateResponse.Match(index, match, score));, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +                    "        \"_id\" : {\"index\": \"not_analyzed\"}," +, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +import org.apache.lucene.util.BytesRef;, +    private static final BytesRef[] EMPTY = new BytesRef[0];, +, +    private BytesRef[] matches;, +    public PercolateShardResponse(BytesRef[] matches, long count, float[] scores, PercolatorService.PercolateContext context, String index, int shardId) {, +    public PercolateShardResponse(BytesRef[] matches, long count, PercolatorService.PercolateContext context, String index, int shardId) {, +        this.matches = EMPTY;, +        this.matches = EMPTY;, +    public BytesRef[] matches() {, +        matches = new BytesRef[in.readVInt()];, +        for (int i = 0; i < matches.length; i++) {, +            matches[i] = in.readBytesRef();, +        }, +        out.writeVInt(matches.length);, +        for (BytesRef match : matches) {, +            out.writeBytesRef(match);, +        }, +++ b/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.text.BytesText;, +                        Text match = new BytesText(new BytesArray(response.matches()[i]));, +                        finalMatches.add(new PercolateResponse.Match(index, match, score));, +                        Text match = new BytesText(new BytesArray(shardResponse.matches()[itemIndex]));, +                        Text match = new BytesText(new BytesArray(response.matches()[i]));, +                        finalMatches.add(new PercolateResponse.Match(index, match, score));, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +                    "        \"_id\" : {\"index\": \"not_analyzed\"}," +]