[+++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.support.*;, +import org.elasticsearch.transport.*;, +                logger.debug("[{}] failed to execute operation for shard [{}]", e, actionName, shardRouting.shortSummary());, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.support.*;, +import org.elasticsearch.transport.*;, +                logger.debug("[{}] failed to execute operation for shard [{}]", e, actionName, shardRouting.shortSummary());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica, action [{}], request [{}]", t, actionName, request);, +                        threadPool.executor(executor).execute(AsyncReplicaAction.this);, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.support.*;, +import org.elasticsearch.transport.*;, +                logger.debug("[{}] failed to execute operation for shard [{}]", e, actionName, shardRouting.shortSummary());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica, action [{}], request [{}]", t, actionName, request);, +                        threadPool.executor(executor).execute(AsyncReplicaAction.this);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.support.*;, +import org.elasticsearch.transport.*;, +                logger.debug("[{}] failed to execute operation for shard [{}]", e, actionName, shardRouting.shortSummary());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica, action [{}], request [{}]", t, actionName, request);, +                        threadPool.executor(executor).execute(AsyncReplicaAction.this);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.index.mapper.MergeResult;, +                        MergeResult mergeResult = existingMapper.merge(newMapper.mapping(), true, request.updateAllTypes());, +                        // if we have conflicts, throw an exception, +                        if (mergeResult.hasConflicts()) {, +                            throw new IllegalArgumentException("Merge failed with failures {" + Arrays.toString(mergeResult.buildConflicts()) + "}");, +                        }, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.support.*;, +import org.elasticsearch.transport.*;, +                logger.debug("[{}] failed to execute operation for shard [{}]", e, actionName, shardRouting.shortSummary());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica, action [{}], request [{}]", t, actionName, request);, +                        threadPool.executor(executor).execute(AsyncReplicaAction.this);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.index.mapper.MergeResult;, +                        MergeResult mergeResult = existingMapper.merge(newMapper.mapping(), true, request.updateAllTypes());, +                        // if we have conflicts, throw an exception, +                        if (mergeResult.hasConflicts()) {, +                            throw new IllegalArgumentException("Merge failed with failures {" + Arrays.toString(mergeResult.buildConflicts()) + "}");, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.index.shard.*;, +    @Inject, +    public Set<Integer> shardIds() { return shards.keySet(); }, +    public IndexFieldDataService fieldData() { return indexFieldData; }, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.support.*;, +import org.elasticsearch.transport.*;, +                logger.debug("[{}] failed to execute operation for shard [{}]", e, actionName, shardRouting.shortSummary());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica, action [{}], request [{}]", t, actionName, request);, +                        threadPool.executor(executor).execute(AsyncReplicaAction.this);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.index.mapper.MergeResult;, +                        MergeResult mergeResult = existingMapper.merge(newMapper.mapping(), true, request.updateAllTypes());, +                        // if we have conflicts, throw an exception, +                        if (mergeResult.hasConflicts()) {, +                            throw new IllegalArgumentException("Merge failed with failures {" + Arrays.toString(mergeResult.buildConflicts()) + "}");, +                        }, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.index.shard.*;, +    @Inject, +    public Set<Integer> shardIds() { return shards.keySet(); }, +    public IndexFieldDataService fieldData() { return indexFieldData; }, +++ b/core/src/main/java/org/elasticsearch/index/NodeServicesProvider.java, +    private final IndexingMemoryController indexingMemoryController;, +    public NodeServicesProvider(ThreadPool threadPool, IndicesQueryCache indicesQueryCache, TermVectorsService termVectorsService, @Nullable IndicesWarmer warmer, BigArrays bigArrays, Client client, ScriptService scriptService, IndicesQueriesRegistry indicesQueriesRegistry, IndicesFieldDataCache indicesFieldDataCache, CircuitBreakerService circuitBreakerService, IndexingMemoryController indexingMemoryController) {, +        this.indexingMemoryController = indexingMemoryController;, +, +    public IndexingMemoryController getIndexingMemoryController() {, +        return indexingMemoryController;, +    }, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.support.*;, +import org.elasticsearch.transport.*;, +                logger.debug("[{}] failed to execute operation for shard [{}]", e, actionName, shardRouting.shortSummary());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica, action [{}], request [{}]", t, actionName, request);, +                        threadPool.executor(executor).execute(AsyncReplicaAction.this);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java]