[+++ b/core/src/main/java/org/elasticsearch/action/search/TransportClearScrollAction.java, +import org.elasticsearch.common.collect.Tuple;, +        final List<Tuple<String, Long>[]> contexts = new ArrayList<>();, +                    Tuple<String, Long>[] context = parseScrollId(parsedScrollId).getContext();, +                for (Tuple<String, Long>[] context : contexts) {, +                    for (Tuple<String, Long> target : context) {, +                        final DiscoveryNode node = nodes.get(target.v1());, +                        searchServiceTransportAction.sendFreeContext(node, target.v2(), request, new ActionListener<SearchServiceTransportAction.SearchFreeContextResponse>() {, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportClearScrollAction.java, +import org.elasticsearch.common.collect.Tuple;, +        final List<Tuple<String, Long>[]> contexts = new ArrayList<>();, +                    Tuple<String, Long>[] context = parseScrollId(parsedScrollId).getContext();, +                for (Tuple<String, Long>[] context : contexts) {, +                    for (Tuple<String, Long> target : context) {, +                        final DiscoveryNode node = nodes.get(target.v1());, +                        searchServiceTransportAction.sendFreeContext(node, target.v2(), request, new ActionListener<SearchServiceTransportAction.SearchFreeContextResponse>() {, +++ b/core/src/main/java/org/elasticsearch/action/search/type/ParsedScrollId.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.collect.Tuple;, +, +    private final Tuple<String, Long>[] context;, +    public ParsedScrollId(String source, String type, Tuple<String, Long>[] context, Map<String, String> attributes) {, +    public Tuple<String, Long>[] getContext() {, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportClearScrollAction.java, +import org.elasticsearch.common.collect.Tuple;, +        final List<Tuple<String, Long>[]> contexts = new ArrayList<>();, +                    Tuple<String, Long>[] context = parseScrollId(parsedScrollId).getContext();, +                for (Tuple<String, Long>[] context : contexts) {, +                    for (Tuple<String, Long> target : context) {, +                        final DiscoveryNode node = nodes.get(target.v1());, +                        searchServiceTransportAction.sendFreeContext(node, target.v2(), request, new ActionListener<SearchServiceTransportAction.SearchFreeContextResponse>() {, +++ b/core/src/main/java/org/elasticsearch/action/search/type/ParsedScrollId.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.collect.Tuple;, +, +    private final Tuple<String, Long>[] context;, +    public ParsedScrollId(String source, String type, Tuple<String, Long>[] context, Map<String, String> attributes) {, +    public Tuple<String, Long>[] getContext() {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportClearScrollAction.java, +import org.elasticsearch.common.collect.Tuple;, +        final List<Tuple<String, Long>[]> contexts = new ArrayList<>();, +                    Tuple<String, Long>[] context = parseScrollId(parsedScrollId).getContext();, +                for (Tuple<String, Long>[] context : contexts) {, +                    for (Tuple<String, Long> target : context) {, +                        final DiscoveryNode node = nodes.get(target.v1());, +                        searchServiceTransportAction.sendFreeContext(node, target.v2(), request, new ActionListener<SearchServiceTransportAction.SearchFreeContextResponse>() {, +++ b/core/src/main/java/org/elasticsearch/action/search/type/ParsedScrollId.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.collect.Tuple;, +, +    private final Tuple<String, Long>[] context;, +    public ParsedScrollId(String source, String type, Tuple<String, Long>[] context, Map<String, String> attributes) {, +    public Tuple<String, Long>[] getContext() {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchHelper.java, +import org.elasticsearch.common.collect.Tuple;, +        @SuppressWarnings({"unchecked"}) Tuple<String, Long>[] context = new Tuple[contextSize];, +            context[i] = new Tuple<>(element.substring(sep + 1), Long.parseLong(element.substring(0, sep)));, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportClearScrollAction.java, +import org.elasticsearch.common.collect.Tuple;, +        final List<Tuple<String, Long>[]> contexts = new ArrayList<>();, +                    Tuple<String, Long>[] context = parseScrollId(parsedScrollId).getContext();, +                for (Tuple<String, Long>[] context : contexts) {, +                    for (Tuple<String, Long> target : context) {, +                        final DiscoveryNode node = nodes.get(target.v1());, +                        searchServiceTransportAction.sendFreeContext(node, target.v2(), request, new ActionListener<SearchServiceTransportAction.SearchFreeContextResponse>() {, +++ b/core/src/main/java/org/elasticsearch/action/search/type/ParsedScrollId.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.collect.Tuple;, +, +    private final Tuple<String, Long>[] context;, +    public ParsedScrollId(String source, String type, Tuple<String, Long>[] context, Map<String, String> attributes) {, +    public Tuple<String, Long>[] getContext() {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchHelper.java, +import org.elasticsearch.common.collect.Tuple;, +        @SuppressWarnings({"unchecked"}) Tuple<String, Long>[] context = new Tuple[contextSize];, +            context[i] = new Tuple<>(element.substring(sep + 1), Long.parseLong(element.substring(0, sep)));, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollQueryAndFetchAction.java, +import org.elasticsearch.common.collect.Tuple;, +            Tuple<String, Long>[] context = scrollId.getContext();, +                Tuple<String, Long> target = context[i];, +                DiscoveryNode node = nodes.get(target.v1());, +                    executePhase(i, node, target.v2());, +                        logger.debug("Node [" + target.v1() + "] not available for scroll request [" + scrollId.getSource() + "]");, +            for (Tuple<String, Long> target : scrollId.getContext()) {, +                DiscoveryNode node = nodes.get(target.v1());, +                        logger.debug("Node [" + target.v1() + "] not available for scroll request [" + scrollId.getSource() + "]");, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportClearScrollAction.java, +import org.elasticsearch.common.collect.Tuple;, +        final List<Tuple<String, Long>[]> contexts = new ArrayList<>();, +                    Tuple<String, Long>[] context = parseScrollId(parsedScrollId).getContext();, +                for (Tuple<String, Long>[] context : contexts) {, +                    for (Tuple<String, Long> target : context) {, +                        final DiscoveryNode node = nodes.get(target.v1());, +                        searchServiceTransportAction.sendFreeContext(node, target.v2(), request, new ActionListener<SearchServiceTransportAction.SearchFreeContextResponse>() {, +++ b/core/src/main/java/org/elasticsearch/action/search/type/ParsedScrollId.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.collect.Tuple;]