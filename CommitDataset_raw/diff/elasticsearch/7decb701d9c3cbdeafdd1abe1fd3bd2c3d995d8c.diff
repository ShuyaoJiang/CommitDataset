[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/facet/TermsFacetSearchBenchmark.java, +import org.elasticsearch.action.search.SearchType;, +import org.elasticsearch.common.collect.Lists;, +import org.elasticsearch.common.unit.TimeValue;, +import java.util.List;, +, +    static long COUNT = SizeValue.parseSizeValue("100k").singles();, +    static int BATCH = 100;, +    static int QUERY_WARMUP = 20;, +    static int QUERY_COUNT = 200;, +    static int NUMBER_OF_TERMS = 200;, +    static int NUMBER_OF_MULTI_VALUE_TERMS = 10;, +    static int STRING_TERM_SIZE = 5;, +, +    static Client client;, +, +        client = clientNode.client();, +                    builder.field("l_value", lValues[counter % lValues.length]);, +        List<StatsResult> stats = Lists.newArrayList();, +        stats.add(terms("terms_s", "s_value", null));, +        stats.add(terms("terms_map_s", "s_value", "map"));, +        stats.add(terms("terms_l", "l_value", null));, +        stats.add(terms("terms_map_l", "l_value", "map"));, +        stats.add(terms("terms_sm", "sm_value", null));, +        stats.add(terms("terms_map_sm", "sm_value", "map"));, +        stats.add(terms("terms_lm", "lm_value", null));, +        stats.add(terms("terms_map_lm", "lm_value", "map"));, +        System.out.println("------------------ SUMMARY -------------------------------");, +        System.out.format("%25s%10s%10s\n", "name", "took", "millis");, +        for (StatsResult stat : stats) {, +            System.out.format("%25s%10s%10d\n", stat.name, TimeValue.timeValueMillis(stat.took), (stat.took / QUERY_COUNT));, +        System.out.println("------------------ SUMMARY -------------------------------");, +, +    static class StatsResult {, +        final String name;, +        final long took;, +, +        StatsResult(String name, long took) {, +            this.name = name;, +            this.took = took;, +        }, +    }, +, +    private static StatsResult terms(String name, String field, String executionHint) {, +        long totalQueryTime;// LM VALUE, +, +        client.admin().indices().prepareClearCache().setFieldDataCache(true).execute().actionGet();, +, +        System.out.println("--> Warmup (" + name + ")...");, +        // run just the child query, warm up first, +        for (int j = 0; j < QUERY_WARMUP; j++) {, +            SearchResponse searchResponse = client.prepareSearch(), +                    .setSearchType(SearchType.COUNT), +                    .setQuery(matchAllQuery()), +                    .addFacet(termsFacet(field).field(field).executionHint(executionHint)), +                    .execute().actionGet();, +            if (j == 0) {, +                System.out.println("--> Loading (" + field + "): took: " + searchResponse.took());, +            }, +            if (searchResponse.hits().totalHits() != COUNT) {, +                System.err.println("--> mismatch on hits");, +            }, +        }, +        System.out.println("--> Warmup (" + name + ") DONE");, +, +, +        System.out.println("--> Running (" + name + ")...");, +        totalQueryTime = 0;, +        for (int j = 0; j < QUERY_COUNT; j++) {, +            SearchResponse searchResponse = client.prepareSearch(), +                    .setSearchType(SearchType.COUNT), +                    .setQuery(matchAllQuery()), +                    .addFacet(termsFacet(field).field(field).executionHint(executionHint)), +                    .execute().actionGet();, +            if (searchResponse.hits().totalHits() != COUNT) {, +                System.err.println("--> mismatch on hits");, +            }, +            totalQueryTime += searchResponse.tookInMillis();, +        }, +        System.out.println("--> Terms Facet (" + field + "), hint(" + executionHint + "): " + (totalQueryTime / QUERY_COUNT) + "ms");, +        return new StatsResult(name, totalQueryTime);, +    }]