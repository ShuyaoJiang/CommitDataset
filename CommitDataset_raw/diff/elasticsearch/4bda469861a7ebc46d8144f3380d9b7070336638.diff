[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +, + <!-- Temporarily contains extra-long lines as examples for tests to be written, see https://github.com/elastic/elasticsearch/issues/34829 -->, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +, + <!-- Temporarily contains extra-long lines as examples for tests to be written, see https://github.com/elastic/elasticsearch/issues/34829 -->, +++ b/server/src/test/java/org/elasticsearch/similarity/SimilarityIT.java, +        SearchResponse bm25SearchResponse = client().prepareSearch().setQuery(matchQuery("field1", "quick brown fox")), +            .execute().actionGet();, +        SearchResponse booleanSearchResponse = client().prepareSearch().setQuery(matchQuery("field2", "quick brown fox")), +            .execute().actionGet();, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +, + <!-- Temporarily contains extra-long lines as examples for tests to be written, see https://github.com/elastic/elasticsearch/issues/34829 -->, +++ b/server/src/test/java/org/elasticsearch/similarity/SimilarityIT.java, +        SearchResponse bm25SearchResponse = client().prepareSearch().setQuery(matchQuery("field1", "quick brown fox")), +            .execute().actionGet();, +        SearchResponse booleanSearchResponse = client().prepareSearch().setQuery(matchQuery("field2", "quick brown fox")), +            .execute().actionGet();, +++ b/server/src/test/java/org/elasticsearch/snapshots/AbstractSnapshotIntegTestCase.java, +            List<SnapshotInfo> snapshotInfos = client().admin().cluster().prepareGetSnapshots(repository).setSnapshots(snapshotName), +                .get().getSnapshots();, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +, + <!-- Temporarily contains extra-long lines as examples for tests to be written, see https://github.com/elastic/elasticsearch/issues/34829 -->, +++ b/server/src/test/java/org/elasticsearch/similarity/SimilarityIT.java, +        SearchResponse bm25SearchResponse = client().prepareSearch().setQuery(matchQuery("field1", "quick brown fox")), +            .execute().actionGet();, +        SearchResponse booleanSearchResponse = client().prepareSearch().setQuery(matchQuery("field2", "quick brown fox")), +            .execute().actionGet();, +++ b/server/src/test/java/org/elasticsearch/snapshots/AbstractSnapshotIntegTestCase.java, +            List<SnapshotInfo> snapshotInfos = client().admin().cluster().prepareGetSnapshots(repository).setSnapshots(snapshotName), +                .get().getSnapshots();, +++ b/server/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java, +                .getMetaData().persistentSettings().getAsInt(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), -1),, +            equalTo(2));, +        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap"), +            .setWaitForCompletion(true).execute().actionGet();, +        assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").execute().actionGet(), +                .getSnapshots().get(0).state(),, +            equalTo(SnapshotState.SUCCESS));, +                .getMetaData().persistentSettings().getAsInt(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), -1),, +            equalTo(1));, +            client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setRestoreGlobalState(true), +                .setWaitForCompletion(true).execute().actionGet();, +            assertEquals("cannot set discovery.zen.minimum_master_nodes to more than the current master nodes count [1]",, +                ex.getCause().getMessage());, +                .getMetaData().persistentSettings().getAsInt(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), -1),, +            not(equalTo(2)));, +            metadataBuilder.putCustom(SnapshotableGatewayNoApiMetadata.TYPE,, +                new SnapshotableGatewayNoApiMetadata("before_snapshot_s_gw_noapi"));, +        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap"), +            .setWaitForCompletion(true).execute().actionGet();, +        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),, +            equalTo(createSnapshotResponse.getSnapshotInfo().successfulShards()));, +        assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").execute().actionGet(), +                .getSnapshots().get(0).state(),, +            equalTo(SnapshotState.SUCCESS));, +        client.admin().cluster().prepareRestoreSnapshot("test-repo-2", "test-snap").setRestoreGlobalState(true).setIndices("-*"), +            .setWaitForCompletion(true).execute().actionGet();, +        assertThat(((SnapshottableGatewayMetadata) metaData.custom(SnapshottableGatewayMetadata.TYPE)).getData(),, +            equalTo("before_snapshot_s_gw"));, +        assertThat(((NonSnapshottableGatewayMetadata) metaData.custom(NonSnapshottableGatewayMetadata.TYPE)).getData(),, +            equalTo("after_snapshot_ns_gw"));, +        assertThat(((SnapshottableGatewayMetadata) metaData.custom(SnapshottableGatewayMetadata.TYPE)).getData(),, +            equalTo("before_snapshot_s_gw"));, +        assertThat(((NonSnapshottableGatewayMetadata) metaData.custom(NonSnapshottableGatewayMetadata.TYPE)).getData(),, +            equalTo("after_snapshot_ns_gw"));, +        assertThat(((SnapshotableGatewayNoApiMetadata) metaData.custom(SnapshotableGatewayNoApiMetadata.TYPE)).getData(),, +            equalTo("before_snapshot_s_gw_noapi"));, +        ActionFuture<AcknowledgedResponse> deleteSnapshotResponseFuture = internalCluster().client(nodes.get(0)), +            .admin().cluster().prepareDeleteSnapshot("test-repo", "test-snap").execute();, +        assertThrows(client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").execute(),, +            SnapshotMissingException.class);, +        assertThat(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout("1m").setWaitForNodes("<2"), +                .execute().actionGet().isTimedOut(),, +            equalTo(false));, +                SnapshotsStatusResponse snapshotsStatusResponse = client().admin().cluster().prepareSnapshotStatus("test-repo"), +                    .setSnapshots("test-snap-2").get();, +            SnapshotsStatusResponse snapshotsStatusResponse = client().admin().cluster().prepareSnapshotStatus("test-repo"), +                .setSnapshots("test-snap-2").get();, +            logger.info("State: [{}], Reason: [{}]",, +                createSnapshotResponse.getSnapshotInfo().state(), createSnapshotResponse.getSnapshotInfo().reason());, +                GetSnapshotsResponse response = client().admin().cluster().prepareGetSnapshots("test-repo"), +                    .setSnapshots("test-snap-2").get();, +            logger.info("State: [{}], Reason: [{}]",, +                createSnapshotResponse.getSnapshotInfo().state(), createSnapshotResponse.getSnapshotInfo().reason());, +            assertThat(client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap-2").execute().actionGet(), +                    .getSnapshots().get(0).state(),, +                equalTo(SnapshotState.PARTIAL));, +        assertThrows(client().admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap-2").setRestoreGlobalState(false), +                .setWaitForCompletion(true).execute(),, +            SnapshotRestoreException.class);, +        RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap-2"), +            .setRestoreGlobalState(false).setIndices("test-idx-all").setWaitForCompletion(true).execute().actionGet();, +        assertThat(client().prepareSearch("test-idx-some").setSize(0).get().getHits().getTotalHits(), allOf(greaterThan(0L),, +            lessThan(100L)));, +        assertThat(client().prepareSearch("test-idx-some").setSize(0).get().getHits().getTotalHits(), allOf(greaterThan(0L),, +            lessThan(100L)));, +        assertThat(client().admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setIndices("test-idx")]