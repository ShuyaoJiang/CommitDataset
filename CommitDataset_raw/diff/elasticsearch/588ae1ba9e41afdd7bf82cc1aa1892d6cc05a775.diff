[+++ b/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +    private final AtomicLong trippedCount;, +        this(limit, overheadConstant, null, logger);, +            this.trippedCount = new AtomicLong(0);, +            this.trippedCount = oldBreaker.trippedCount;, +        this.trippedCount.incrementAndGet();, +, +    /**, +     * @return the number of times the breaker has been tripped, +     */, +    public long getTrippedCount() {, +        return this.trippedCount.get();, +    }, +++ b/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +    private final AtomicLong trippedCount;, +        this(limit, overheadConstant, null, logger);, +            this.trippedCount = new AtomicLong(0);, +            this.trippedCount = oldBreaker.trippedCount;, +        this.trippedCount.incrementAndGet();, +, +    /**, +     * @return the number of times the breaker has been tripped, +     */, +    public long getTrippedCount() {, +        return this.trippedCount.get();, +    }, +++ b/src/main/java/org/elasticsearch/indices/fielddata/breaker/FieldDataBreakerStats.java, +import org.elasticsearch.Version;, +    private long trippedCount;, +    public FieldDataBreakerStats(long maximum, long estimated, double overhead, long trippedCount) {, +        this.trippedCount = trippedCount;, +    public long getTrippedCount() {, +        return this.trippedCount;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_1_2_0)) {, +            this.trippedCount = in.readLong();, +        } else {, +            this.trippedCount = -1;, +        }, +        if (out.getVersion().onOrAfter(Version.V_1_2_0)) {, +            out.writeLong(trippedCount);, +        }, +        builder.field(Fields.TRIPPED_COUNT, trippedCount);, +        static final XContentBuilderString TRIPPED_COUNT = new XContentBuilderString("tripped");, +++ b/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +    private final AtomicLong trippedCount;, +        this(limit, overheadConstant, null, logger);, +            this.trippedCount = new AtomicLong(0);, +            this.trippedCount = oldBreaker.trippedCount;, +        this.trippedCount.incrementAndGet();, +, +    /**, +     * @return the number of times the breaker has been tripped, +     */, +    public long getTrippedCount() {, +        return this.trippedCount.get();, +    }, +++ b/src/main/java/org/elasticsearch/indices/fielddata/breaker/FieldDataBreakerStats.java, +import org.elasticsearch.Version;, +    private long trippedCount;, +    public FieldDataBreakerStats(long maximum, long estimated, double overhead, long trippedCount) {, +        this.trippedCount = trippedCount;, +    public long getTrippedCount() {, +        return this.trippedCount;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_1_2_0)) {, +            this.trippedCount = in.readLong();, +        } else {, +            this.trippedCount = -1;, +        }, +        if (out.getVersion().onOrAfter(Version.V_1_2_0)) {, +            out.writeLong(trippedCount);, +        }, +        builder.field(Fields.TRIPPED_COUNT, trippedCount);, +        static final XContentBuilderString TRIPPED_COUNT = new XContentBuilderString("tripped");, +++ b/src/main/java/org/elasticsearch/indices/fielddata/breaker/InternalCircuitBreakerService.java, +        return new FieldDataBreakerStats(breaker.getMaximum(), breaker.getUsed(), breaker.getOverhead(), breaker.getTrippedCount());, +++ b/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +    private final AtomicLong trippedCount;, +        this(limit, overheadConstant, null, logger);, +            this.trippedCount = new AtomicLong(0);, +            this.trippedCount = oldBreaker.trippedCount;, +        this.trippedCount.incrementAndGet();, +, +    /**, +     * @return the number of times the breaker has been tripped, +     */, +    public long getTrippedCount() {, +        return this.trippedCount.get();, +    }, +++ b/src/main/java/org/elasticsearch/indices/fielddata/breaker/FieldDataBreakerStats.java, +import org.elasticsearch.Version;, +    private long trippedCount;, +    public FieldDataBreakerStats(long maximum, long estimated, double overhead, long trippedCount) {, +        this.trippedCount = trippedCount;, +    public long getTrippedCount() {, +        return this.trippedCount;, +    }]