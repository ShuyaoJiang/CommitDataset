[+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +import org.elasticsearch.action.DocumentWriteRequest;, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentWriteRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +import org.elasticsearch.action.DocumentWriteRequest;, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentWriteRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocumentWriteRequest;, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentWriteRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +import org.elasticsearch.action.DocumentWriteRequest;, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentWriteRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocumentWriteRequest;, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentWriteRequest.OpType.UPDATE,, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive);, +                                      boolean startInclusive, boolean endInclusive) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +import org.elasticsearch.action.DocumentWriteRequest;, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentWriteRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocumentWriteRequest;, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentWriteRequest.OpType.UPDATE,, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive);, +                                      boolean startInclusive, boolean endInclusive) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive);, +++ /dev/null, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +import org.elasticsearch.action.DocumentWriteRequest;, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentWriteRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocumentWriteRequest;, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentWriteRequest.OpType.UPDATE,, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive);, +                                      boolean startInclusive, boolean endInclusive) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/DocumentWriteRequest.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.action;, +, +import org.elasticsearch.action.delete.DeleteRequest;, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.action.update.UpdateReplicaRequest;, +import org.elasticsearch.action.update.UpdateRequest;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.action.support.replication.ReplicatedWriteRequest;, +import org.elasticsearch.index.VersionType;, +, +import java.io.IOException;, +import java.util.Locale;]