[+++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +    public PercolateShardRequest(ShardId shardId, OriginalIndices originalIndices) {, +    public void documentType(String documentType) {, +    public void source(BytesReference source) {, +    public void docSource(BytesReference docSource) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +    public PercolateShardRequest(ShardId shardId, OriginalIndices originalIndices) {, +    public void documentType(String documentType) {, +    public void source(BytesReference source) {, +    public void docSource(BytesReference docSource) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +import org.apache.lucene.search.TopDocs;, +import org.elasticsearch.common.lucene.Lucene;, +    private TopDocs topDocs;, +    private Map<Integer, String> ids;, +    private Map<Integer, Map<String, HighlightField>> hls;, +    private boolean onlyCount;, +    public PercolateShardResponse(TopDocs topDocs, Map<Integer, String> ids, Map<Integer, Map<String, HighlightField>> hls, PercolateContext context) {, +        super(new ShardId(context.shardTarget().getIndex(), context.shardTarget().getShardId()));, +        this.topDocs = topDocs;, +        this.ids = ids;, +        this.onlyCount = context.isOnlyCount();, +    public TopDocs topDocs() {, +        return topDocs;, +    /**, +     * Returns per match the percolator query id. The key is the Lucene docId of the matching percolator query., +     */, +    public Map<Integer, String> ids() {, +        return ids;, +    /**, +     * Returns per match the highlight snippets. The key is the Lucene docId of the matching percolator query., +     */, +    public Map<Integer, Map<String, HighlightField>> hls() {, +    public boolean onlyCount() {, +        return onlyCount;, +        return topDocs.totalHits == 0;, +        onlyCount = in.readBoolean();, +        topDocs = Lucene.readTopDocs(in);, +        ids = new HashMap<>(size);, +            ids.put(in.readVInt(), in.readString());, +        }, +        size = in.readVInt();, +        hls = new HashMap<>(size);, +        for (int i = 0; i < size; i++) {, +            int docId = in.readVInt();, +            hls.put(docId, fields);, +        out.writeBoolean(onlyCount);, +        Lucene.writeTopDocs(out, topDocs);, +        out.writeVInt(ids.size());, +        for (Map.Entry<Integer, String> entry : ids.entrySet()) {, +            out.writeVInt(entry.getKey());, +            out.writeString(entry.getValue());, +        for (Map.Entry<Integer, Map<String, HighlightField>> entry1 : hls.entrySet()) {, +            out.writeVInt(entry1.getKey());, +            out.writeVInt(entry1.getValue().size());, +            for (Map.Entry<String, HighlightField> entry2 : entry1.getValue().entrySet()) {, +                out.writeString(entry2.getKey());, +                entry2.getValue().writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +    public PercolateShardRequest(ShardId shardId, OriginalIndices originalIndices) {, +    public void documentType(String documentType) {, +    public void source(BytesReference source) {, +    public void docSource(BytesReference docSource) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +import org.apache.lucene.search.TopDocs;, +import org.elasticsearch.common.lucene.Lucene;, +    private TopDocs topDocs;, +    private Map<Integer, String> ids;, +    private Map<Integer, Map<String, HighlightField>> hls;, +    private boolean onlyCount;, +    public PercolateShardResponse(TopDocs topDocs, Map<Integer, String> ids, Map<Integer, Map<String, HighlightField>> hls, PercolateContext context) {, +        super(new ShardId(context.shardTarget().getIndex(), context.shardTarget().getShardId()));, +        this.topDocs = topDocs;, +        this.ids = ids;, +        this.onlyCount = context.isOnlyCount();, +    public TopDocs topDocs() {, +        return topDocs;, +    /**, +     * Returns per match the percolator query id. The key is the Lucene docId of the matching percolator query., +     */, +    public Map<Integer, String> ids() {, +        return ids;, +    /**, +     * Returns per match the highlight snippets. The key is the Lucene docId of the matching percolator query., +     */, +    public Map<Integer, Map<String, HighlightField>> hls() {, +    public boolean onlyCount() {, +        return onlyCount;, +        return topDocs.totalHits == 0;, +        onlyCount = in.readBoolean();, +        topDocs = Lucene.readTopDocs(in);, +        ids = new HashMap<>(size);, +            ids.put(in.readVInt(), in.readString());, +        }, +        size = in.readVInt();, +        hls = new HashMap<>(size);, +        for (int i = 0; i < size; i++) {, +            int docId = in.readVInt();, +            hls.put(docId, fields);, +        out.writeBoolean(onlyCount);]