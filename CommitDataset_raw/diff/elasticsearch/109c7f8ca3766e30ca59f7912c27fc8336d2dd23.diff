[+++ b/watcher/src/main/java/org/elasticsearch/watcher/WatcherPlugin.java, +import java.util.ArrayList;, +            return Collections.EMPTY_SET;, +        return Arrays.<Class<? extends LifecycleComponent>>asList(, +++ b/watcher/src/main/java/org/elasticsearch/watcher/WatcherPlugin.java, +import java.util.ArrayList;, +            return Collections.EMPTY_SET;, +        return Arrays.<Class<? extends LifecycleComponent>>asList(, +++ b/watcher/src/main/java/org/elasticsearch/watcher/transform/chain/ChainTransform.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +    private final List<Transform> transforms;, +    public ChainTransform(Transform... transforms) {, +        this(Arrays.asList(transforms));, +    }, +, +    public ChainTransform(List<Transform> transforms) {, +        this.transforms = Collections.unmodifiableList(transforms);, +        List<Transform> transforms = new ArrayList<>();, +                    transforms.add(transformRegistry.parseTransform(watchId, currentFieldName, parser));, +        return new ChainTransform(transforms);, +        private final List<Transform.Result> results;, +        public Result(Payload payload, List<Transform.Result> results) {, +            this.results = Collections.unmodifiableList(results);, +        public Result(Exception e, List<Transform.Result> results) {, +            this.results = Collections.unmodifiableList(results);, +        public Result(String errorMessage, List<Transform.Result> results) {, +            this.results = Collections.unmodifiableList(results);, +        public List<Transform.Result> results() {, +        private final List<Transform> transforms = new ArrayList<>();, +            add(transforms);, +            Collections.addAll(this.transforms, transforms);, +            return new ChainTransform(transforms);, +++ b/watcher/src/main/java/org/elasticsearch/watcher/WatcherPlugin.java, +import java.util.ArrayList;, +            return Collections.EMPTY_SET;, +        return Arrays.<Class<? extends LifecycleComponent>>asList(, +++ b/watcher/src/main/java/org/elasticsearch/watcher/transform/chain/ChainTransform.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +    private final List<Transform> transforms;, +    public ChainTransform(Transform... transforms) {, +        this(Arrays.asList(transforms));, +    }, +, +    public ChainTransform(List<Transform> transforms) {, +        this.transforms = Collections.unmodifiableList(transforms);, +        List<Transform> transforms = new ArrayList<>();, +                    transforms.add(transformRegistry.parseTransform(watchId, currentFieldName, parser));, +        return new ChainTransform(transforms);, +        private final List<Transform.Result> results;, +        public Result(Payload payload, List<Transform.Result> results) {, +            this.results = Collections.unmodifiableList(results);, +        public Result(Exception e, List<Transform.Result> results) {, +            this.results = Collections.unmodifiableList(results);, +        public Result(String errorMessage, List<Transform.Result> results) {, +            this.results = Collections.unmodifiableList(results);, +        public List<Transform.Result> results() {, +        private final List<Transform> transforms = new ArrayList<>();, +            add(transforms);, +            Collections.addAll(this.transforms, transforms);, +            return new ChainTransform(transforms);, +++ b/watcher/src/main/java/org/elasticsearch/watcher/transform/chain/ChainTransformFactory.java, +import java.util.ArrayList;, +        ArrayList<ExecutableTransform> executables = new ArrayList<>();, +        return new ExecutableChainTransform(chainTransform, transformLogger, executables);, +++ b/watcher/src/main/java/org/elasticsearch/watcher/WatcherPlugin.java, +import java.util.ArrayList;, +            return Collections.EMPTY_SET;, +        return Arrays.<Class<? extends LifecycleComponent>>asList(, +++ b/watcher/src/main/java/org/elasticsearch/watcher/transform/chain/ChainTransform.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +    private final List<Transform> transforms;, +    public ChainTransform(Transform... transforms) {, +        this(Arrays.asList(transforms));, +    }, +, +    public ChainTransform(List<Transform> transforms) {, +        this.transforms = Collections.unmodifiableList(transforms);, +        List<Transform> transforms = new ArrayList<>();, +                    transforms.add(transformRegistry.parseTransform(watchId, currentFieldName, parser));, +        return new ChainTransform(transforms);, +        private final List<Transform.Result> results;, +        public Result(Payload payload, List<Transform.Result> results) {, +            this.results = Collections.unmodifiableList(results);, +        public Result(Exception e, List<Transform.Result> results) {, +            this.results = Collections.unmodifiableList(results);, +        public Result(String errorMessage, List<Transform.Result> results) {, +            this.results = Collections.unmodifiableList(results);, +        public List<Transform.Result> results() {, +        private final List<Transform> transforms = new ArrayList<>();, +            add(transforms);, +            Collections.addAll(this.transforms, transforms);, +            return new ChainTransform(transforms);, +++ b/watcher/src/main/java/org/elasticsearch/watcher/transform/chain/ChainTransformFactory.java, +import java.util.ArrayList;]