[+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.util.concurrent.Semaphore;, +import java.util.concurrent.TimeUnit;, +        Semaphore mdLock = metaDataService.indexMetaDataLock(request.index);, +            if (!mdLock.tryAcquire(request.masterTimeout.nanos(), TimeUnit.NANOSECONDS)) {, +                userListener.onFailure(new ProcessClusterEventTimeoutException(request.masterTimeout, "acquire index lock"));, +                return;, +            }, +        private final Semaphore mdLock;, +        private CreateIndexListener(Semaphore mdLock, Request request, Listener listener) {, +                mdLock.release();, +                mdLock.release();, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.util.concurrent.Semaphore;, +import java.util.concurrent.TimeUnit;, +        Semaphore mdLock = metaDataService.indexMetaDataLock(request.index);, +            if (!mdLock.tryAcquire(request.masterTimeout.nanos(), TimeUnit.NANOSECONDS)) {, +                userListener.onFailure(new ProcessClusterEventTimeoutException(request.masterTimeout, "acquire index lock"));, +                return;, +            }, +        private final Semaphore mdLock;, +        private CreateIndexListener(Semaphore mdLock, Request request, Listener listener) {, +                mdLock.release();, +                mdLock.release();, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataDeleteIndexService.java, +import java.util.concurrent.Semaphore;, +import java.util.concurrent.TimeUnit;, +        Semaphore mdLock = metaDataService.indexMetaDataLock(request.index);, +            if (!mdLock.tryAcquire(request.masterTimeout.nanos(), TimeUnit.NANOSECONDS)) {, +                userListener.onFailure(new ProcessClusterEventTimeoutException(request.masterTimeout, "acquire index lock"));, +                return;, +            }, +        private final Semaphore mdLock;, +        private DeleteIndexListener(Semaphore mdLock, Request request, Listener listener) {, +                mdLock.release();, +                mdLock.release();, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import java.util.concurrent.Semaphore;, +import java.util.concurrent.TimeUnit;, +        Semaphore mdLock = metaDataService.indexMetaDataLock(request.index);, +            if (!mdLock.tryAcquire(request.masterTimeout.nanos(), TimeUnit.NANOSECONDS)) {, +                userListener.onFailure(new ProcessClusterEventTimeoutException(request.masterTimeout, "acquire index lock"));, +                return;, +            }, +        private final Semaphore mdLock;, +        private CreateIndexListener(Semaphore mdLock, Request request, Listener listener) {, +                mdLock.release();, +                mdLock.release();, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataDeleteIndexService.java, +import java.util.concurrent.Semaphore;, +import java.util.concurrent.TimeUnit;, +        Semaphore mdLock = metaDataService.indexMetaDataLock(request.index);, +            if (!mdLock.tryAcquire(request.masterTimeout.nanos(), TimeUnit.NANOSECONDS)) {, +                userListener.onFailure(new ProcessClusterEventTimeoutException(request.masterTimeout, "acquire index lock"));, +                return;, +            }, +        private final Semaphore mdLock;, +        private DeleteIndexListener(Semaphore mdLock, Request request, Listener listener) {, +                mdLock.release();, +                mdLock.release();, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +import java.util.concurrent.Semaphore;, +, +    private final Semaphore[] indexMdLocks;, +        indexMdLocks = new Semaphore[1];, +            indexMdLocks[i] = new Semaphore(1);, +    public Semaphore indexMetaDataLock(String index) {]