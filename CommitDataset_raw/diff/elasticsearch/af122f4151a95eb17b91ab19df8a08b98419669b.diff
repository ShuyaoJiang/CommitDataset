[+++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +        public static final Routing EMPTY = new Routing(false);, +        public Routing(boolean required) {, +            return required == routing.required;, +            return getClass().hashCode() + (required ? 1 : 0);, +        public static final Timestamp EMPTY = new Timestamp(false, TimestampFieldMapper.DEFAULT_DATE_TIME_FORMAT,, +        public Timestamp(boolean enabled, String format, String defaultTimestamp, Boolean ignoreMissing) {, +        this.routing = new Routing(docMapper.routingFieldMapper().required());, +        this.timestamp = new Timestamp(docMapper.timestampFieldMapper().enabled(),, +            this.routing = new Routing(required);, +            this.timestamp = new Timestamp(enabled, format, defaultTimestamp, ignoreMissing);, +    public MappingMetaData(String type, CompressedXContent source, Routing routing, Timestamp timestamp, boolean hasParentField) {, +        Routing routing = new Routing(in.readBoolean());, +        final Timestamp timestamp = new Timestamp(enabled, format, defaultTimestamp, ignoreMissing);, +        return new MappingMetaData(type, source, routing, timestamp, hasParentField);, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +        public static final Routing EMPTY = new Routing(false);, +        public Routing(boolean required) {, +            return required == routing.required;, +            return getClass().hashCode() + (required ? 1 : 0);, +        public static final Timestamp EMPTY = new Timestamp(false, TimestampFieldMapper.DEFAULT_DATE_TIME_FORMAT,, +        public Timestamp(boolean enabled, String format, String defaultTimestamp, Boolean ignoreMissing) {, +        this.routing = new Routing(docMapper.routingFieldMapper().required());, +        this.timestamp = new Timestamp(docMapper.timestampFieldMapper().enabled(),, +            this.routing = new Routing(required);, +            this.timestamp = new Timestamp(enabled, format, defaultTimestamp, ignoreMissing);, +    public MappingMetaData(String type, CompressedXContent source, Routing routing, Timestamp timestamp, boolean hasParentField) {, +        Routing routing = new Routing(in.readBoolean());, +        final Timestamp timestamp = new Timestamp(enabled, format, defaultTimestamp, ignoreMissing);, +        return new MappingMetaData(type, source, routing, timestamp, hasParentField);, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java, +            int overridePositionIncrementGap = StringFieldMapper.Defaults.POSITION_INCREMENT_GAP;, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +        public static final Routing EMPTY = new Routing(false);, +        public Routing(boolean required) {, +            return required == routing.required;, +            return getClass().hashCode() + (required ? 1 : 0);, +        public static final Timestamp EMPTY = new Timestamp(false, TimestampFieldMapper.DEFAULT_DATE_TIME_FORMAT,, +        public Timestamp(boolean enabled, String format, String defaultTimestamp, Boolean ignoreMissing) {, +        this.routing = new Routing(docMapper.routingFieldMapper().required());, +        this.timestamp = new Timestamp(docMapper.timestampFieldMapper().enabled(),, +            this.routing = new Routing(required);, +            this.timestamp = new Timestamp(enabled, format, defaultTimestamp, ignoreMissing);, +    public MappingMetaData(String type, CompressedXContent source, Routing routing, Timestamp timestamp, boolean hasParentField) {, +        Routing routing = new Routing(in.readBoolean());, +        final Timestamp timestamp = new Timestamp(enabled, format, defaultTimestamp, ignoreMissing);, +        return new MappingMetaData(type, source, routing, timestamp, hasParentField);, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java, +            int overridePositionIncrementGap = StringFieldMapper.Defaults.POSITION_INCREMENT_GAP;, +++ b/core/src/main/java/org/elasticsearch/index/analysis/CustomAnalyzerProvider.java, +        int positionIncrementGap = StringFieldMapper.Defaults.POSITION_INCREMENT_GAP;, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +        public static final Routing EMPTY = new Routing(false);, +        public Routing(boolean required) {, +            return required == routing.required;, +            return getClass().hashCode() + (required ? 1 : 0);, +        public static final Timestamp EMPTY = new Timestamp(false, TimestampFieldMapper.DEFAULT_DATE_TIME_FORMAT,, +        public Timestamp(boolean enabled, String format, String defaultTimestamp, Boolean ignoreMissing) {, +        this.routing = new Routing(docMapper.routingFieldMapper().required());, +        this.timestamp = new Timestamp(docMapper.timestampFieldMapper().enabled(),, +            this.routing = new Routing(required);, +            this.timestamp = new Timestamp(enabled, format, defaultTimestamp, ignoreMissing);, +    public MappingMetaData(String type, CompressedXContent source, Routing routing, Timestamp timestamp, boolean hasParentField) {, +        Routing routing = new Routing(in.readBoolean());, +        final Timestamp timestamp = new Timestamp(enabled, format, defaultTimestamp, ignoreMissing);, +        return new MappingMetaData(type, source, routing, timestamp, hasParentField);, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java, +            int overridePositionIncrementGap = StringFieldMapper.Defaults.POSITION_INCREMENT_GAP;, +++ b/core/src/main/java/org/elasticsearch/index/analysis/CustomAnalyzerProvider.java, +        int positionIncrementGap = StringFieldMapper.Defaults.POSITION_INCREMENT_GAP;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MappingMetaData.java, +        public static final Routing EMPTY = new Routing(false);, +        public Routing(boolean required) {, +            return required == routing.required;, +            return getClass().hashCode() + (required ? 1 : 0);, +        public static final Timestamp EMPTY = new Timestamp(false, TimestampFieldMapper.DEFAULT_DATE_TIME_FORMAT,, +        public Timestamp(boolean enabled, String format, String defaultTimestamp, Boolean ignoreMissing) {, +        this.routing = new Routing(docMapper.routingFieldMapper().required());, +        this.timestamp = new Timestamp(docMapper.timestampFieldMapper().enabled(),, +            this.routing = new Routing(required);, +            this.timestamp = new Timestamp(enabled, format, defaultTimestamp, ignoreMissing);, +    public MappingMetaData(String type, CompressedXContent source, Routing routing, Timestamp timestamp, boolean hasParentField) {, +        Routing routing = new Routing(in.readBoolean());, +        final Timestamp timestamp = new Timestamp(enabled, format, defaultTimestamp, ignoreMissing);, +        return new MappingMetaData(type, source, routing, timestamp, hasParentField);, +++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java, +            int overridePositionIncrementGap = StringFieldMapper.Defaults.POSITION_INCREMENT_GAP;, +++ b/core/src/main/java/org/elasticsearch/index/analysis/CustomAnalyzerProvider.java, +        int positionIncrementGap = StringFieldMapper.Defaults.POSITION_INCREMENT_GAP;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            if (source.parser() == null && parser != null) {, +        if (atRoot && MapperService.isMetadataField(currentFieldName)) {]