[+++ b/buildSrc/src/main/resources/checkstyle.xml, +    <module name="EqualsHashCode" />, +, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <module name="EqualsHashCode" />, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FieldValueFactorFunction.java, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(boostFactor, field, modifier);, +    }, +, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <module name="EqualsHashCode" />, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FieldValueFactorFunction.java, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(boostFactor, field, modifier);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/RandomScoreFunction.java, +import java.util.Objects;, +, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(originalSeed, saltedSeed);, +    }, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <module name="EqualsHashCode" />, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FieldValueFactorFunction.java, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(boostFactor, field, modifier);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/RandomScoreFunction.java, +import java.util.Objects;, +, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(originalSeed, saltedSeed);, +    }, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/ScoreFunction.java, +, +    @Override, +    public final int hashCode() {, +        /*, +         * Override hashCode here and forward to an abstract method to force extensions of this class to override hashCode in the same, +         * way that we force them to override equals. This also prevents false positives in CheckStyle's EqualsHashCode check., +         */, +        return Objects.hash(scoreCombiner, doHashCode());, +    }, +, +    protected abstract int doHashCode();, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <module name="EqualsHashCode" />, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FieldValueFactorFunction.java, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(boostFactor, field, modifier);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/RandomScoreFunction.java, +import java.util.Objects;, +, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(originalSeed, saltedSeed);, +    }, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/ScoreFunction.java, +, +    @Override, +    public final int hashCode() {, +        /*, +         * Override hashCode here and forward to an abstract method to force extensions of this class to override hashCode in the same, +         * way that we force them to override equals. This also prevents false positives in CheckStyle's EqualsHashCode check., +         */, +        return Objects.hash(scoreCombiner, doHashCode());, +    }, +, +    protected abstract int doHashCode();, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/ScriptScoreFunction.java, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(sScript);, +    }, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <module name="EqualsHashCode" />, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FieldValueFactorFunction.java, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(boostFactor, field, modifier);]