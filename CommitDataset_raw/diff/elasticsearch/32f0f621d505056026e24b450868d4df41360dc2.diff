[+++ b/.esvmrc_active_dir, +            "active_directory" : {, +++ b/.esvmrc_active_dir, +            "active_directory" : {, +++ b/.esvmrc_open_ldap, +++ b/.esvmrc_active_dir, +            "active_directory" : {, +++ b/.esvmrc_open_ldap, +++ b/src/main/java/org/elasticsearch/shield/authc/AuthenticationModule.java, +import org.elasticsearch.shield.authc.active_directory.ActiveDirectoryModule;, +                new LdapModule(settings),, +                new ActiveDirectoryModule(settings), +        );, +++ b/.esvmrc_active_dir, +            "active_directory" : {, +++ b/.esvmrc_open_ldap, +++ b/src/main/java/org/elasticsearch/shield/authc/AuthenticationModule.java, +import org.elasticsearch.shield.authc.active_directory.ActiveDirectoryModule;, +                new LdapModule(settings),, +                new ActiveDirectoryModule(settings), +        );, +++ b/src/main/java/org/elasticsearch/shield/authc/Realms.java, +import org.elasticsearch.shield.authc.active_directory.ActiveDirectoryRealm;, +    public Realms(SystemRealm system,, +                  @Nullable ESUsersRealm esusers,, +                  @Nullable LdapRealm ldap,, +                  @Nullable ActiveDirectoryRealm activeDirectory) {, +        if (activeDirectory != null) {, +            logger.info("Realm [" + activeDirectory.type() + "] is used");, +            realms.add(activeDirectory);, +        }, +++ b/.esvmrc_active_dir, +            "active_directory" : {, +++ b/.esvmrc_open_ldap, +++ b/src/main/java/org/elasticsearch/shield/authc/AuthenticationModule.java, +import org.elasticsearch.shield.authc.active_directory.ActiveDirectoryModule;, +                new LdapModule(settings),, +                new ActiveDirectoryModule(settings), +        );, +++ b/src/main/java/org/elasticsearch/shield/authc/Realms.java, +import org.elasticsearch.shield.authc.active_directory.ActiveDirectoryRealm;, +    public Realms(SystemRealm system,, +                  @Nullable ESUsersRealm esusers,, +                  @Nullable LdapRealm ldap,, +                  @Nullable ActiveDirectoryRealm activeDirectory) {, +        if (activeDirectory != null) {, +            logger.info("Realm [" + activeDirectory.type() + "] is used");, +            realms.add(activeDirectory);, +        }, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnection.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.shield.authc.active_directory;, +, +import org.elasticsearch.common.collect.ImmutableList;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +import org.elasticsearch.shield.authc.ldap.GenericLdapConnection;, +import org.elasticsearch.shield.authc.support.ldap.LdapConnection;, +, +import javax.naming.NamingEnumeration;, +import javax.naming.NamingException;, +import javax.naming.directory.*;, +import java.util.List;, +, +/**, + * An Ldap Connection customized for active directory., + */, +public class ActiveDirectoryConnection implements LdapConnection {, +    private static final ESLogger logger = ESLoggerFactory.getLogger(GenericLdapConnection.class.getName());, +    private final String bindDn;, +    protected final DirContext ldapContext;, +, +    private final String groupSearchDN;, +, +    /**, +     * This object is intended to be constructed by the LdapConnectionFactory, +     */, +    ActiveDirectoryConnection(DirContext ctx, String boundName, String groupSearchDN) {, +        this.ldapContext = ctx;, +        this.bindDn = boundName;, +        this.groupSearchDN = groupSearchDN;, +    }, +, +    /**, +     * LDAP connections should be closed to clean up resources.  However, the jndi contexts have the finalize, +     * implemented properly so that it will clean up on garbage collection., +     */, +    @Override, +    public void close(){, +        try {, +            ldapContext.close();, +        } catch (NamingException e) {, +            throw new ActiveDirectoryException("Could not close the LDAP connection", e);, +        }, +    }, +]