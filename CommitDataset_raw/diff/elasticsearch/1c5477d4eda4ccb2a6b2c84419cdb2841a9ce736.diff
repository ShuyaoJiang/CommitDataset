[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                .initializeEmpty(currentState.metaData().index(request.index), request.origin == Request.Origin.API);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                .initializeEmpty(currentState.metaData().index(request.index), request.origin == Request.Origin.API);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataStateIndexService.java, +                        .initializeEmpty(currentState.metaData().index(request.index), false);, +                        .removeIndexBlock(request.index, INDEX_CLOSED_BLOCK);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                .initializeEmpty(currentState.metaData().index(request.index), request.origin == Request.Origin.API);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataStateIndexService.java, +                        .initializeEmpty(currentState.metaData().index(request.index), false);, +                        .removeIndexBlock(request.index, INDEX_CLOSED_BLOCK);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +         * Initializes a new empty index, as if it was created from an API., +            return initializeEmpty(indexMetaData, true);, +        }, +, +        /**, +         * Initializes a new empty index, with an option to control if its from an API or not., +         */, +        public Builder initializeEmpty(IndexMetaData indexMetaData, boolean fromApi) {, +                    addShard(shardId, null, i == 0, ShardRoutingState.UNASSIGNED, fromApi);, +                addShard(shardId, null, false, ShardRoutingState.UNASSIGNED, false);, +                IndexShardRoutingTable.Builder builder = new IndexShardRoutingTable.Builder(indexShard.shardId(), indexShard.allocatedPostApi());, +        public Builder addShard(ShardRouting shard, boolean fromApi) {, +            return internalAddShard(new ImmutableShardRouting(shard), fromApi);, +        public Builder addShard(int shardId, String nodeId, boolean primary, ShardRoutingState state, boolean fromApi) {, +            return internalAddShard(shard, fromApi);, +        private Builder internalAddShard(ImmutableShardRouting shard, boolean fromApi) {, +                indexShard = new IndexShardRoutingTable.Builder(shard.shardId(), fromApi ? false : true).addShard(shard).build();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                .initializeEmpty(currentState.metaData().index(request.index), request.origin == Request.Origin.API);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataStateIndexService.java, +                        .initializeEmpty(currentState.metaData().index(request.index), false);, +                        .removeIndexBlock(request.index, INDEX_CLOSED_BLOCK);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +         * Initializes a new empty index, as if it was created from an API., +            return initializeEmpty(indexMetaData, true);, +        }, +, +        /**, +         * Initializes a new empty index, with an option to control if its from an API or not., +         */, +        public Builder initializeEmpty(IndexMetaData indexMetaData, boolean fromApi) {, +                    addShard(shardId, null, i == 0, ShardRoutingState.UNASSIGNED, fromApi);, +                addShard(shardId, null, false, ShardRoutingState.UNASSIGNED, false);, +                IndexShardRoutingTable.Builder builder = new IndexShardRoutingTable.Builder(indexShard.shardId(), indexShard.allocatedPostApi());, +        public Builder addShard(ShardRouting shard, boolean fromApi) {, +            return internalAddShard(new ImmutableShardRouting(shard), fromApi);, +        public Builder addShard(int shardId, String nodeId, boolean primary, ShardRoutingState state, boolean fromApi) {, +            return internalAddShard(shard, fromApi);, +        private Builder internalAddShard(ImmutableShardRouting shard, boolean fromApi) {, +                indexShard = new IndexShardRoutingTable.Builder(shard.shardId(), fromApi ? false : true).addShard(shard).build();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    final boolean allocatedPostApi;, +, +    IndexShardRoutingTable(ShardId shardId, ImmutableList<ShardRouting> shards, boolean allocatedPostApi) {, +        this.allocatedPostApi = allocatedPostApi;, +    /**, +     * Has this shard group primary shard been allocated post API creation. Will be set to, +     * <tt>true</tt> if it was created because of recovery action., +     */, +    public boolean allocatedPostApi() {, +        return allocatedPostApi;, +    }, +, +        private boolean allocatedPostApi;, +, +            this.allocatedPostApi = indexShard.allocatedPostApi();, +        public Builder(ShardId shardId, boolean allocatedPostApi) {, +            this.allocatedPostApi = allocatedPostApi;, +            // we can automatically set allocatedPostApi to true if the primary is active, +            if (!allocatedPostApi) {, +                for (ShardRouting shardRouting : shards) {, +                    if (shardRouting.primary() && shardRouting.active()) {, +                        allocatedPostApi = true;, +                    }, +                }, +            }, +            return new IndexShardRoutingTable(shardId, ImmutableList.copyOf(shards), allocatedPostApi);, +            boolean allocatedPostApi = in.readBoolean();, +            Builder builder = new Builder(new ShardId(index, iShardId), allocatedPostApi);, +            out.writeBoolean(indexShard.allocatedPostApi());, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                .initializeEmpty(currentState.metaData().index(request.index), request.origin == Request.Origin.API);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataStateIndexService.java, +                        .initializeEmpty(currentState.metaData().index(request.index), false);, +                        .removeIndexBlock(request.index, INDEX_CLOSED_BLOCK);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +         * Initializes a new empty index, as if it was created from an API., +            return initializeEmpty(indexMetaData, true);, +        }, +]