[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    protected void causeToXContent(XContentBuilder builder, Params params) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    protected void causeToXContent(XContentBuilder builder, Params params) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportMultiPercolateAction.java, +                        shardResults.set(shardId.id(), new BroadcastShardOperationFailedException(shardId, item.error()));, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    protected void causeToXContent(XContentBuilder builder, Params params) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportMultiPercolateAction.java, +                        shardResults.set(shardId.id(), new BroadcastShardOperationFailedException(shardId, item.error()));, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportShardMultiPercolateAction.java, +                    responseItem = new Response.Item(slot, t);, +                    out.writeThrowable(item.error);, +                    items.add(new Item(slot, (Throwable)in.readThrowable()));, +            private final Throwable error;, +            public Item(Integer slot, Throwable error) {, +            public Throwable error() {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    protected void causeToXContent(XContentBuilder builder, Params params) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportMultiPercolateAction.java, +                        shardResults.set(shardId.id(), new BroadcastShardOperationFailedException(shardId, item.error()));, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportShardMultiPercolateAction.java, +                    responseItem = new Response.Item(slot, t);, +                    out.writeThrowable(item.error);, +                    items.add(new Item(slot, (Throwable)in.readThrowable()));, +            private final Throwable error;, +            public Item(Integer slot, Throwable error) {, +            public Throwable error() {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +    public Throwable getCause() {, +        Throwable cause = super.getCause();, +        if (cause == null) {, +            // fall back to guessed root cause, +            for (ElasticsearchException rootCause : guessRootCauses()) {, +                return rootCause;, +            }, +        }, +        return cause;, +    }, +, +    }, +    @Override, +    protected void causeToXContent(XContentBuilder builder, Params params) throws IOException {, +        if (super.getCause() != null) {, +            // if the cause is null we inject a guessed root cause that will then be rendered twice so wi disable it manually, +            super.causeToXContent(builder, params);, +        }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    protected void causeToXContent(XContentBuilder builder, Params params) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportMultiPercolateAction.java, +                        shardResults.set(shardId.id(), new BroadcastShardOperationFailedException(shardId, item.error()));, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportShardMultiPercolateAction.java, +                    responseItem = new Response.Item(slot, t);, +                    out.writeThrowable(item.error);, +                    items.add(new Item(slot, (Throwable)in.readThrowable()));, +            private final Throwable error;, +            public Item(Integer slot, Throwable error) {, +            public Throwable error() {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java, +    public Throwable getCause() {, +        Throwable cause = super.getCause();, +        if (cause == null) {, +            // fall back to guessed root cause, +            for (ElasticsearchException rootCause : guessRootCauses()) {, +                return rootCause;, +            }, +        }, +        return cause;, +    }, +, +    }, +    @Override, +    protected void causeToXContent(XContentBuilder builder, Params params) throws IOException {, +        if (super.getCause() != null) {, +            // if the cause is null we inject a guessed root cause that will then be rendered twice so wi disable it manually, +            super.causeToXContent(builder, params);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/MultiTermVectorsResponse.java, +import org.elasticsearch.ElasticsearchException;, +        private Throwable cause;, +        public Failure(String index, String type, String id, Throwable cause) {, +            this.cause = cause;, +         * The failure cause., +        public Throwable getCause() {, +            return this.cause;, +            cause = in.readThrowable();, +            out.writeThrowable(cause);, +                ElasticsearchException.renderThrowable(builder, params, failure.getCause());, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    protected void causeToXContent(XContentBuilder builder, Params params) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportMultiPercolateAction.java, +                        shardResults.set(shardId.id(), new BroadcastShardOperationFailedException(shardId, item.error()));, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportShardMultiPercolateAction.java, +                    responseItem = new Response.Item(slot, t);, +                    out.writeThrowable(item.error);, +                    items.add(new Item(slot, (Throwable)in.readThrowable()));, +            private final Throwable error;, +            public Item(Integer slot, Throwable error) {, +            public Throwable error() {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java]