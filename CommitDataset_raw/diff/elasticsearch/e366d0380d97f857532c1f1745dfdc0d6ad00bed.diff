[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregationBuilder.java, +    private Boolean otherBucket;, +    private String otherBucketKey;, +    /**, +     * Include a bucket for documents not matching any filter, +     */, +    public FiltersAggregationBuilder otherBucket(boolean otherBucket) {, +        this.otherBucket = otherBucket;, +        return this;, +    }, +, +    /**, +     * The key to use for the bucket for documents not matching any filter. Will, +     * implicitly enable the other bucket if set., +     */, +    public FiltersAggregationBuilder otherBucketKey(String otherBucketKey) {, +        this.otherBucketKey = otherBucketKey;, +        return this;, +    }, +            builder.startObject(FiltersParser.FILTERS_FIELD.getPreferredName());, +            builder.startArray(FiltersParser.FILTERS_FIELD.getPreferredName());, +        if (otherBucketKey != null) {, +            builder.field(FiltersParser.OTHER_BUCKET_KEY_FIELD.getPreferredName(), otherBucketKey);, +        }, +        if (otherBucket != null) {, +            builder.field(FiltersParser.OTHER_BUCKET_FIELD.getPreferredName(), otherBucket);, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregationBuilder.java, +    private Boolean otherBucket;, +    private String otherBucketKey;, +    /**, +     * Include a bucket for documents not matching any filter, +     */, +    public FiltersAggregationBuilder otherBucket(boolean otherBucket) {, +        this.otherBucket = otherBucket;, +        return this;, +    }, +, +    /**, +     * The key to use for the bucket for documents not matching any filter. Will, +     * implicitly enable the other bucket if set., +     */, +    public FiltersAggregationBuilder otherBucketKey(String otherBucketKey) {, +        this.otherBucketKey = otherBucketKey;, +        return this;, +    }, +            builder.startObject(FiltersParser.FILTERS_FIELD.getPreferredName());, +            builder.startArray(FiltersParser.FILTERS_FIELD.getPreferredName());, +        if (otherBucketKey != null) {, +            builder.field(FiltersParser.OTHER_BUCKET_KEY_FIELD.getPreferredName(), otherBucketKey);, +        }, +        if (otherBucket != null) {, +            builder.field(FiltersParser.OTHER_BUCKET_FIELD.getPreferredName(), otherBucket);, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregator.java, +    private final boolean showOtherBucket;, +    private final String otherBucketKey;, +    private final int totalNumKeys;, +    public FiltersAggregator(String name, AggregatorFactories factories, List<KeyedFilter> filters, boolean keyed, String otherBucketKey,, +            AggregationContext aggregationContext,, +        this.showOtherBucket = otherBucketKey != null;, +        this.otherBucketKey = otherBucketKey;, +        if (showOtherBucket) {, +            this.totalNumKeys = filters.size() + 1;, +        } else {, +            this.totalNumKeys = filters.size();, +        }, +                boolean matched = false;, +                        matched = true;, +                if (showOtherBucket && !matched) {, +                    collectBucket(sub, doc, bucketOrd(bucket, bits.length));, +                }, +        // other bucket, +        if (showOtherBucket) {, +            long bucketOrd = bucketOrd(owningBucketOrdinal, keys.length);, +            InternalFilters.Bucket bucket = new InternalFilters.Bucket(otherBucketKey, bucketDocCount(bucketOrd),, +                    bucketAggregations(bucketOrd), keyed);, +            buckets.add(bucket);, +        }, +        return owningBucketOrdinal * totalNumKeys + filterOrd;, +        private String otherBucketKey;, +        public Factory(String name, List<KeyedFilter> filters, boolean keyed, String otherBucketKey) {, +            this.otherBucketKey = otherBucketKey;, +            return new FiltersAggregator(name, factories, filters, keyed, otherBucketKey, context, parent, pipelineAggregators, metaData);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregationBuilder.java, +    private Boolean otherBucket;, +    private String otherBucketKey;, +    /**, +     * Include a bucket for documents not matching any filter, +     */, +    public FiltersAggregationBuilder otherBucket(boolean otherBucket) {, +        this.otherBucket = otherBucket;, +        return this;, +    }, +, +    /**, +     * The key to use for the bucket for documents not matching any filter. Will, +     * implicitly enable the other bucket if set., +     */, +    public FiltersAggregationBuilder otherBucketKey(String otherBucketKey) {]