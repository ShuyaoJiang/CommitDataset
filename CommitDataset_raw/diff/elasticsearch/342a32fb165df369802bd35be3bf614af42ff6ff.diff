[+++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +                                docIdsToLoad.set(entry.index, null); // clear it, we didn't manage to do anything with it, +                    // the failure might happen without managing to clear the search context..., potentially need to clear its context (for example), +                    docIdsToLoad.set(shardIndex, null);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +                                docIdsToLoad.set(entry.index, null); // clear it, we didn't manage to do anything with it, +                    // the failure might happen without managing to clear the search context..., potentially need to clear its context (for example), +                    docIdsToLoad.set(shardIndex, null);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +import org.elasticsearch.ElasticsearchIllegalStateException;, +                        performFirstPhase(shardIndex, shardIt, shardIt.nextOrNull());, +                                        performFirstPhase(shardIndex, shardIt, shardIt.nextOrNull());, +                        ShardRouting first = shardIt.firstOrNull();, +                        if (first != null) {, +                            if (first.currentNodeId().equals(nodes.localNodeId())) {, +                                final ShardRouting shard = shardIt.nextOrNull();, +                                                performFirstPhase(fShardIndex, shardIt, shard);, +                                    performFirstPhase(fShardIndex, shardIt, shard);, +                    raiseEarlyFailure(new ReduceSearchPhaseException(firstPhaseName(), "", e, buildShardFailures()));, +            } else if (xTotalOps > expectedTotalOps) {, +                raiseEarlyFailure(new ElasticsearchIllegalStateException("unexpected higher total ops [" + xTotalOps + "] compared to expected [" + expectedTotalOps + "]"));, +                    raiseEarlyFailure(new SearchPhaseExecutionException(firstPhaseName(), "all shards failed", buildShardFailures()));, +                        raiseEarlyFailure(new ReduceSearchPhaseException(firstPhaseName(), "", e, buildShardFailures()));, +        private void raiseEarlyFailure(Throwable t) {, +            for (AtomicArray.Entry<FirstResult> entry : firstResults.asList()) {, +                try {, +                    DiscoveryNode node = nodes.get(entry.value.shardTarget().nodeId());, +                    if (node != null) { // should not happen (==null) but safeguard anyhow, +                        searchService.sendFreeContext(node, entry.value.id(), request);, +                    }, +                } catch (Throwable t1) {, +                    logger.trace("failed to release context", t1);, +                }, +            }, +            listener.onFailure(t);, +        }, +, +                        try {, +                        } catch (Throwable t1) {, +                            logger.trace("failed to release context", t1);, +                        }, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +                                docIdsToLoad.set(entry.index, null); // clear it, we didn't manage to do anything with it, +                    // the failure might happen without managing to clear the search context..., potentially need to clear its context (for example), +                    docIdsToLoad.set(shardIndex, null);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +import org.elasticsearch.ElasticsearchIllegalStateException;, +                        performFirstPhase(shardIndex, shardIt, shardIt.nextOrNull());, +                                        performFirstPhase(shardIndex, shardIt, shardIt.nextOrNull());, +                        ShardRouting first = shardIt.firstOrNull();, +                        if (first != null) {, +                            if (first.currentNodeId().equals(nodes.localNodeId())) {, +                                final ShardRouting shard = shardIt.nextOrNull();, +                                                performFirstPhase(fShardIndex, shardIt, shard);, +                                    performFirstPhase(fShardIndex, shardIt, shard);, +                    raiseEarlyFailure(new ReduceSearchPhaseException(firstPhaseName(), "", e, buildShardFailures()));, +            } else if (xTotalOps > expectedTotalOps) {, +                raiseEarlyFailure(new ElasticsearchIllegalStateException("unexpected higher total ops [" + xTotalOps + "] compared to expected [" + expectedTotalOps + "]"));, +                    raiseEarlyFailure(new SearchPhaseExecutionException(firstPhaseName(), "all shards failed", buildShardFailures()));, +                        raiseEarlyFailure(new ReduceSearchPhaseException(firstPhaseName(), "", e, buildShardFailures()));, +        private void raiseEarlyFailure(Throwable t) {, +            for (AtomicArray.Entry<FirstResult> entry : firstResults.asList()) {, +                try {, +                    DiscoveryNode node = nodes.get(entry.value.shardTarget().nodeId());, +                    if (node != null) { // should not happen (==null) but safeguard anyhow, +                        searchService.sendFreeContext(node, entry.value.id(), request);, +                    }, +                } catch (Throwable t1) {, +                    logger.trace("failed to release context", t1);, +                }, +            }, +            listener.onFailure(t);, +        }, +, +                        try {, +                        } catch (Throwable t1) {, +                            logger.trace("failed to release context", t1);, +                        }, +++ b/src/test/java/org/elasticsearch/action/RejectionActionTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action;, +]