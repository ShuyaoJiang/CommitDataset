[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                new OpenJobAction.OpenJobPersistentTasksExecutor(settings, threadPool, licenseState, clusterService,, +                new StartDatafeedAction.StartDatafeedPersistentTasksExecutor(settings, threadPool, licenseState,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                new OpenJobAction.OpenJobPersistentTasksExecutor(settings, threadPool, licenseState, clusterService,, +                new StartDatafeedAction.StartDatafeedPersistentTasksExecutor(settings, threadPool, licenseState,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +            persistentTasksService.cancelPersistentTask(persistentTaskId, new ActionListener<PersistentTask<?>>() {, +                public void onResponse(PersistentTask<?> task) {, +                    new WaitForPersistentTaskStatusListener<OpenJobAction.Request>() {, +                public void onResponse(PersistentTask<OpenJobAction.Request> task) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                new OpenJobAction.OpenJobPersistentTasksExecutor(settings, threadPool, licenseState, clusterService,, +                new StartDatafeedAction.StartDatafeedPersistentTasksExecutor(settings, threadPool, licenseState,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +            persistentTasksService.cancelPersistentTask(persistentTaskId, new ActionListener<PersistentTask<?>>() {, +                public void onResponse(PersistentTask<?> task) {, +                    new WaitForPersistentTaskStatusListener<OpenJobAction.Request>() {, +                public void onResponse(PersistentTask<OpenJobAction.Request> task) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +                ActionListener<PersistentTask<Request>> finalListener = new ActionListener<PersistentTask<Request>>() {, +                    public void onResponse(PersistentTask<Request> task) {, +                        waitForJobStarted(task.getId(), request, listener);, +                persistentTasksService.startPersistentTask(NAME, request, finalListener);, +                    new WaitForPersistentTaskStatusListener<Request>() {, +                public void onResponse(PersistentTask<Request> persistentTask) {, +                                              ClusterService clusterService, AutodetectProcessManager autodetectProcessManager,, +                                              Auditor auditor) {, +            super(settings, NAME, ThreadPool.Names.MANAGEMENT);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                new OpenJobAction.OpenJobPersistentTasksExecutor(settings, threadPool, licenseState, clusterService,, +                new StartDatafeedAction.StartDatafeedPersistentTasksExecutor(settings, threadPool, licenseState,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +            persistentTasksService.cancelPersistentTask(persistentTaskId, new ActionListener<PersistentTask<?>>() {, +                public void onResponse(PersistentTask<?> task) {, +                    new WaitForPersistentTaskStatusListener<OpenJobAction.Request>() {, +                public void onResponse(PersistentTask<OpenJobAction.Request> task) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +                ActionListener<PersistentTask<Request>> finalListener = new ActionListener<PersistentTask<Request>>() {, +                    public void onResponse(PersistentTask<Request> task) {, +                        waitForJobStarted(task.getId(), request, listener);, +                persistentTasksService.startPersistentTask(NAME, request, finalListener);, +                    new WaitForPersistentTaskStatusListener<Request>() {, +                public void onResponse(PersistentTask<Request> persistentTask) {, +                                              ClusterService clusterService, AutodetectProcessManager autodetectProcessManager,, +                                              Auditor auditor) {, +            super(settings, NAME, ThreadPool.Names.MANAGEMENT);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +                ActionListener<PersistentTask<Request>> finalListener = new ActionListener<PersistentTask<Request>>() {, +                    public void onResponse(PersistentTask<Request> persistentTask) {, +                        waitForYellow(persistentTask.getId(), request, listener);, +                persistentTasksService.startPersistentTask(NAME, request, finalListener);, +                    new WaitForPersistentTaskStatusListener<Request>() {, +                public void onResponse(PersistentTask<Request> task) {, +                                                    DatafeedManager datafeedManager, Auditor auditor) {, +            super(settings, NAME, ThreadPool.Names.MANAGEMENT);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                new OpenJobAction.OpenJobPersistentTasksExecutor(settings, threadPool, licenseState, clusterService,, +                new StartDatafeedAction.StartDatafeedPersistentTasksExecutor(settings, threadPool, licenseState,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +            persistentTasksService.cancelPersistentTask(persistentTaskId, new ActionListener<PersistentTask<?>>() {, +                public void onResponse(PersistentTask<?> task) {, +                    new WaitForPersistentTaskStatusListener<OpenJobAction.Request>() {, +                public void onResponse(PersistentTask<OpenJobAction.Request> task) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +                ActionListener<PersistentTask<Request>> finalListener = new ActionListener<PersistentTask<Request>>() {, +                    public void onResponse(PersistentTask<Request> task) {, +                        waitForJobStarted(task.getId(), request, listener);, +                persistentTasksService.startPersistentTask(NAME, request, finalListener);, +                    new WaitForPersistentTaskStatusListener<Request>() {, +                public void onResponse(PersistentTask<Request> persistentTask) {, +                                              ClusterService clusterService, AutodetectProcessManager autodetectProcessManager,, +                                              Auditor auditor) {, +            super(settings, NAME, ThreadPool.Names.MANAGEMENT);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +                ActionListener<PersistentTask<Request>> finalListener = new ActionListener<PersistentTask<Request>>() {, +                    public void onResponse(PersistentTask<Request> persistentTask) {, +                        waitForYellow(persistentTask.getId(), request, listener);, +                persistentTasksService.startPersistentTask(NAME, request, finalListener);, +                    new WaitForPersistentTaskStatusListener<Request>() {, +                public void onResponse(PersistentTask<Request> task) {, +                                                    DatafeedManager datafeedManager, Auditor auditor) {, +            super(settings, NAME, ThreadPool.Names.MANAGEMENT);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StopDatafeedAction.java, +                    new WaitForPersistentTaskStatusListener<StartDatafeedAction.Request>() {, +                public void onResponse(PersistentTask<StartDatafeedAction.Request> task) {, +            persistentTasksService.cancelPersistentTask(persistentTaskId, new ActionListener<PersistentTask<?>>() {, +                public void onResponse(PersistentTask<?> persistentTask) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                new OpenJobAction.OpenJobPersistentTasksExecutor(settings, threadPool, licenseState, clusterService,, +                new StartDatafeedAction.StartDatafeedPersistentTasksExecutor(settings, threadPool, licenseState,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +            persistentTasksService.cancelPersistentTask(persistentTaskId, new ActionListener<PersistentTask<?>>() {, +                public void onResponse(PersistentTask<?> task) {, +                    new WaitForPersistentTaskStatusListener<OpenJobAction.Request>() {, +                public void onResponse(PersistentTask<OpenJobAction.Request> task) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +                ActionListener<PersistentTask<Request>> finalListener = new ActionListener<PersistentTask<Request>>() {, +                    public void onResponse(PersistentTask<Request> task) {, +                        waitForJobStarted(task.getId(), request, listener);]