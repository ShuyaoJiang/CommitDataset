[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/GetResponse.java, +import org.elasticsearch.common.io.stream.*;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.common.xcontent.builder.XContentBuilder;, +public class GetResponse implements ActionResponse, Streamable, Iterable<GetField>, ToXContent {, +    @Override public void toXContent(XContentBuilder builder, Params params) throws IOException {, +        if (!exists()) {, +            builder.startObject();, +            builder.field("_index", index);, +            builder.field("_type", type);, +            builder.field("_id", id);, +            builder.endObject();, +        } else {, +            builder.startObject();, +            builder.field("_index", index);, +            builder.field("_type", type);, +            builder.field("_id", id);, +            if (source != null) {, +                if (LZFDecoder.isCompressed(source)) {, +                    BytesStreamInput siBytes = new BytesStreamInput(source);, +                    LZFStreamInput siLzf = CachedStreamInput.cachedLzf(siBytes);, +                    XContentType contentType = XContentFactory.xContentType(siLzf);, +                    siLzf.resetToBufferStart();, +                    if (contentType == builder.contentType()) {, +                        builder.rawField("_source", siLzf);, +                    } else {, +                        builder.field("_source", XContentFactory.xContent(builder.contentType()).createParser(siLzf).map());, +                    }, +                } else {, +                    if (XContentFactory.xContentType(source) == builder.contentType()) {, +                        builder.rawField("_source", source);, +                    } else {, +                        builder.field("_source", XContentFactory.xContent(builder.contentType()).createParser(source).map());, +                    }, +                }, +            }, +, +            if (fields != null && !fields.isEmpty()) {, +                builder.startObject("fields");, +                for (GetField field : fields.values()) {, +                    if (field.values().isEmpty()) {, +                        continue;, +                    }, +                    if (field.values().size() == 1) {, +                        builder.field(field.name(), field.values().get(0));, +                    } else {, +                        builder.field(field.name());, +                        builder.startArray();, +                        for (Object value : field.values()) {, +                            builder.value(value);, +                        }, +                        builder.endArray();, +                    }, +                }, +                builder.endObject();, +            }, +, +, +            builder.endObject();, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/get/GetResponse.java, +import org.elasticsearch.common.io.stream.*;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.common.xcontent.builder.XContentBuilder;, +public class GetResponse implements ActionResponse, Streamable, Iterable<GetField>, ToXContent {, +    @Override public void toXContent(XContentBuilder builder, Params params) throws IOException {, +        if (!exists()) {, +            builder.startObject();, +            builder.field("_index", index);, +            builder.field("_type", type);, +            builder.field("_id", id);, +            builder.endObject();, +        } else {, +            builder.startObject();, +            builder.field("_index", index);, +            builder.field("_type", type);, +            builder.field("_id", id);, +            if (source != null) {, +                if (LZFDecoder.isCompressed(source)) {, +                    BytesStreamInput siBytes = new BytesStreamInput(source);, +                    LZFStreamInput siLzf = CachedStreamInput.cachedLzf(siBytes);, +                    XContentType contentType = XContentFactory.xContentType(siLzf);, +                    siLzf.resetToBufferStart();, +                    if (contentType == builder.contentType()) {, +                        builder.rawField("_source", siLzf);, +                    } else {, +                        builder.field("_source", XContentFactory.xContent(builder.contentType()).createParser(siLzf).map());, +                    }, +                } else {, +                    if (XContentFactory.xContentType(source) == builder.contentType()) {, +                        builder.rawField("_source", source);, +                    } else {, +                        builder.field("_source", XContentFactory.xContent(builder.contentType()).createParser(source).map());, +                    }, +                }, +            }]