[+++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.cluster.coordination.CoordinationStateRejectedException;, +            MultiBucketConsumerService.TooManyBucketsException::new, 149, Version.V_7_0_0_alpha1),, +        COORDINATION_STATE_REJECTED_EXCEPTION(CoordinationStateRejectedException.class,, +            CoordinationStateRejectedException::new, 150, Version.V_7_0_0_alpha1);, +, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.cluster.coordination.CoordinationStateRejectedException;, +            MultiBucketConsumerService.TooManyBucketsException::new, 149, Version.V_7_0_0_alpha1),, +        COORDINATION_STATE_REJECTED_EXCEPTION(CoordinationStateRejectedException.class,, +            CoordinationStateRejectedException::new, 150, Version.V_7_0_0_alpha1);, +, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.term(currentState.term());, +        builder.lastCommittedConfiguration(currentState.getLastCommittedConfiguration());, +        builder.lastAcceptedConfiguration(currentState.getLastAcceptedConfiguration());, +++ b/build.gradle, +final boolean bwc_tests_enabled = false, +final String bwc_tests_disabled_issue = "https://github.com/elastic/elasticsearch/issues/32006" // BWC handled at a later time, +++ b/server/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.cluster.coordination.CoordinationStateRejectedException;, +            MultiBucketConsumerService.TooManyBucketsException::new, 149, Version.V_7_0_0_alpha1),, +        COORDINATION_STATE_REJECTED_EXCEPTION(CoordinationStateRejectedException.class,, +            CoordinationStateRejectedException::new, 150, Version.V_7_0_0_alpha1);, +, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.term(currentState.term());, +        builder.lastCommittedConfiguration(currentState.getLastCommittedConfiguration());, +        builder.lastAcceptedConfiguration(currentState.getLastAcceptedConfiguration());, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterState.java, +, +import org.elasticsearch.Version;, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Objects;, +    private final long term;, +, +    private final VotingConfiguration lastCommittedConfiguration;, +, +    private final VotingConfiguration lastAcceptedConfiguration;, +, +    public ClusterState(long term, long version, String stateUUID, ClusterState state) {, +        this(state.clusterName, term, version, stateUUID, state.metaData(), state.routingTable(), state.nodes(), state.blocks(),, +            state.customs(), state.getLastCommittedConfiguration(), state.getLastAcceptedConfiguration(), false);, +    public ClusterState(ClusterName clusterName, long term, long version, String stateUUID, MetaData metaData, RoutingTable routingTable,, +                        DiscoveryNodes nodes, ClusterBlocks blocks, ImmutableOpenMap<String, Custom> customs,, +                        VotingConfiguration lastCommittedConfiguration, VotingConfiguration lastAcceptedConfiguration,, +                        boolean wasReadFromDiff) {, +        this.term = term;, +        this.lastCommittedConfiguration = lastCommittedConfiguration;, +        this.lastAcceptedConfiguration = lastAcceptedConfiguration;, +    public long term() {, +        return term;, +    }, +, +    public VotingConfiguration getLastAcceptedConfiguration() {, +        return lastAcceptedConfiguration;, +    }, +, +    public VotingConfiguration getLastCommittedConfiguration() {, +        return lastCommittedConfiguration;, +    }, +, +        sb.append("term: ").append(term).append("\n");, +        sb.append("last committed config: ").append(getLastCommittedConfiguration()).append("\n");, +        sb.append("last accepted config: ").append(getLastAcceptedConfiguration()).append("\n");, +            builder.field("term", term);, +            builder.field("last_committed_config", lastCommittedConfiguration);, +            builder.field("last_accepted_config", lastAcceptedConfiguration);, +        private long term = 0;, +        private VotingConfiguration lastCommittedConfiguration = VotingConfiguration.EMPTY_CONFIG;, +        private VotingConfiguration lastAcceptedConfiguration = VotingConfiguration.EMPTY_CONFIG;, +            this.term = state.term();, +            this.lastCommittedConfiguration = state.getLastCommittedConfiguration();, +            this.lastAcceptedConfiguration = state.getLastAcceptedConfiguration();, +        public Builder term(long term) {, +            this.term = term;, +            return this;, +        }, +, +        public Builder lastCommittedConfiguration(VotingConfiguration config) {, +            this.lastCommittedConfiguration = config;, +            return this;, +        }, +, +        public Builder lastAcceptedConfiguration(VotingConfiguration config) {, +            this.lastAcceptedConfiguration = config;, +            return this;]