[+++ b/docs/plugins/discovery-gce.asciidoc, + `project_id`::, +, +     Your Google project id (mandatory)., +, + `zone`::, +, +     helps to retrieve instances running in a given zone (mandatory). It should be one of the, +     https://developers.google.com/compute/docs/zones#available[GCE supported zones]., +     See also <<discovery-gce-usage-zones>>., +, +     The maximum elapsed time after the client instantiating retry. If the time elapsed goes past the, +     `max_wait`, client stops to retry. A negative value means that it will wait indefinitely. Defaults to `0s` (retry, +     indefinitely)., +, + `refresh_interval`::, +, +     How long the list of hosts is cached to prevent further requests to the GCE API. `0s` disables caching., +     A negative value will cause infinite caching. Defaults to `0s`., +++ b/docs/plugins/discovery-gce.asciidoc, + `project_id`::, +, +     Your Google project id (mandatory)., +, + `zone`::, +, +     helps to retrieve instances running in a given zone (mandatory). It should be one of the, +     https://developers.google.com/compute/docs/zones#available[GCE supported zones]., +     See also <<discovery-gce-usage-zones>>., +, +     The maximum elapsed time after the client instantiating retry. If the time elapsed goes past the, +     `max_wait`, client stops to retry. A negative value means that it will wait indefinitely. Defaults to `0s` (retry, +     indefinitely)., +, + `refresh_interval`::, +, +     How long the list of hosts is cached to prevent further requests to the GCE API. `0s` disables caching., +     A negative value will cause infinite caching. Defaults to `0s`., +++ b/docs/reference/modules/snapshots.asciidoc, +POST /_snapshot/my_backup/_verify, +++ b/docs/plugins/discovery-gce.asciidoc, + `project_id`::, +, +     Your Google project id (mandatory)., +, + `zone`::, +, +     helps to retrieve instances running in a given zone (mandatory). It should be one of the, +     https://developers.google.com/compute/docs/zones#available[GCE supported zones]., +     See also <<discovery-gce-usage-zones>>., +, +     The maximum elapsed time after the client instantiating retry. If the time elapsed goes past the, +     `max_wait`, client stops to retry. A negative value means that it will wait indefinitely. Defaults to `0s` (retry, +     indefinitely)., +, + `refresh_interval`::, +, +     How long the list of hosts is cached to prevent further requests to the GCE API. `0s` disables caching., +     A negative value will cause infinite caching. Defaults to `0s`., +++ b/docs/reference/modules/snapshots.asciidoc, +POST /_snapshot/my_backup/_verify, +++ b/docs/resiliency/index.asciidoc, +=== Use two phase commit for Cluster State publishing (STATUS: ONGOING, v3.0.0), +, +A master node in Elasticsearch continuously https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-zen.html#fault-detection[monitors the cluster nodes], +and removes any node from the cluster that doesn't respond to its pings in a timely, +fashion. If the master is left with fewer nodes than the `discovery.zen.minimum_master_nodes`, +settings, it will step down and a new master election will start., +, +When a network partition causes a master node to lose many followers, there is a short window, +in time until the node loss is detected and the master steps down. During that window, the, +master may erroneously accept and acknowledge cluster state changes. To avoid this, we introduce, +a new phase to cluster state publishing where the proposed cluster state is sent to all nodes, +but is not yet committed. Only once enough nodes (`discovery.zen.minimum_master_nodes`) actively acknowledge, +the change, it is committed and commit messages are sent to the nodes. See {GIT}13062[#13062]., +, +[float], +=== Make index creation more user friendly (STATUS: ONGOING), +, +Today, Elasticsearch returns as soon as a create-index request has been processed,, +but before the shards are allocated.  Users should wait for a `green` cluster health, +before continuing, but we can make this easier for users by waiting for a quorum, +of shards to be allocated before returning.  See {GIT}9126[#9126], +, +[float], +If the node hosts a primary shard at the moment of partition, and ends up being isolated from the cluster (which could have resulted in {GIT}2488[split-brain] before), some documents that are being indexed into the primary may be lost if they fail to reach one of the allocated replicas (due to the partition) and that replica is later promoted to primary by the master. {GIT}7572[#7572], +A test to replicate this condition was added in {GIT}7493[#7493]., +=== Do not allow stale shards to automatically be promoted to primary (STATUS: ONGOING), +In some scenarios, after the loss of all valid copies, a stale replica shard can be assigned as a primary. This can lead to, +a loss of acknowledged writes if the valid copies are not lost but are rather temporarily isolated. Work is underway, +({GIT}14671[#14671]) to prevent the automatic promotion of a stale primary and only allow such promotion to occur when, +a system operator manually intervenes., +++ b/docs/plugins/discovery-gce.asciidoc, + `project_id`::, +, +     Your Google project id (mandatory)., +, + `zone`::, +, +     helps to retrieve instances running in a given zone (mandatory). It should be one of the]