[+++ b/server/src/main/java/org/elasticsearch/persistent/PersistentActionCoordinator.java, +            task.setPersistentTaskId(taskInProgress.getId());, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentActionCoordinator.java, +            task.setPersistentTaskId(taskInProgress.getId());, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentActionService.java, +import org.elasticsearch.tasks.Task;, +, +    public void updateStatus(long taskId, Task.Status status, ActionListener<UpdatePersistentTaskStatusAction.Response> listener) {, +        UpdatePersistentTaskStatusAction.Request updateStatusRequest = new UpdatePersistentTaskStatusAction.Request(taskId, status);, +        try {, +            client.execute(UpdatePersistentTaskStatusAction.INSTANCE, updateStatusRequest, listener);, +        } catch (Exception e) {, +            listener.onFailure(e);, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentActionCoordinator.java, +            task.setPersistentTaskId(taskInProgress.getId());, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentActionService.java, +import org.elasticsearch.tasks.Task;, +, +    public void updateStatus(long taskId, Task.Status status, ActionListener<UpdatePersistentTaskStatusAction.Response> listener) {, +        UpdatePersistentTaskStatusAction.Request updateStatusRequest = new UpdatePersistentTaskStatusAction.Request(taskId, status);, +        try {, +            client.execute(UpdatePersistentTaskStatusAction.INSTANCE, updateStatusRequest, listener);, +        } catch (Exception e) {, +            listener.onFailure(e);, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTask.java, +    private long persistentTaskId;, +, +, +    public long getPersistentTaskId() {, +        return persistentTaskId;, +    }, +, +    public void setPersistentTaskId(long persistentTaskId) {, +        this.persistentTaskId = persistentTaskId;, +    }, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentActionCoordinator.java, +            task.setPersistentTaskId(taskInProgress.getId());, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentActionService.java, +import org.elasticsearch.tasks.Task;, +, +    public void updateStatus(long taskId, Task.Status status, ActionListener<UpdatePersistentTaskStatusAction.Response> listener) {, +        UpdatePersistentTaskStatusAction.Request updateStatusRequest = new UpdatePersistentTaskStatusAction.Request(taskId, status);, +        try {, +            client.execute(UpdatePersistentTaskStatusAction.INSTANCE, updateStatusRequest, listener);, +        } catch (Exception e) {, +            listener.onFailure(e);, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTask.java, +    private long persistentTaskId;, +, +, +    public long getPersistentTaskId() {, +        return persistentTaskId;, +    }, +, +    public void setPersistentTaskId(long persistentTaskId) {, +        this.persistentTaskId = persistentTaskId;, +    }, +++ b/server/src/main/java/org/elasticsearch/persistent/PersistentTaskClusterService.java, +import org.elasticsearch.tasks.Task;, +                return rebuildClusterStateIfNeeded(found, currentState, currentTasks);, +    /**, +     * Update task status, +     *, +     * @param id       the id of a persistent task, +     * @param status   new status, +     * @param listener the listener that will be called when task is removed, +     */, +    public void updatePersistentTaskStatus(long id, Task.Status status, ActionListener<Empty> listener) {, +        clusterService.submitStateUpdateTask("update task status", new ClusterStateUpdateTask() {, +            @Override, +            public ClusterState execute(ClusterState currentState) throws Exception {, +                PersistentTasksInProgress tasksInProgress = currentState.custom(PersistentTasksInProgress.TYPE);, +                if (tasksInProgress == null) {, +                    // Nothing to do, the task no longer exists, +                    return currentState;, +                }, +, +                boolean found = false;, +                final List<PersistentTaskInProgress<?>> currentTasks = new ArrayList<>();, +                for (PersistentTaskInProgress<?> taskInProgress : tasksInProgress.entries()) {, +                    if (taskInProgress.getId() == id) {, +                        assert found == false;, +                        found = true;, +                        currentTasks.add(new PersistentTaskInProgress<>(taskInProgress, status));, +                    } else {, +                        currentTasks.add(taskInProgress);, +                    }, +                }, +                return rebuildClusterStateIfNeeded(found, currentState, currentTasks);, +            }, +]