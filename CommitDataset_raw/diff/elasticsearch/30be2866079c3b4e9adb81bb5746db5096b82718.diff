[+++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditUserHolder.java, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingAction;, +        .add(Privilege.Index.action(PutMappingAction.NAME), IndexAuditTrail.INDEX_NAME_PREFIX + "*"), +++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditUserHolder.java, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingAction;, +        .add(Privilege.Index.action(PutMappingAction.NAME), IndexAuditTrail.INDEX_NAME_PREFIX + "*"), +++ b/shield/src/test/java/org/elasticsearch/integration/ShieldCachePermissionTests.java, +import org.elasticsearch.script.Template;, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;, +                .setTemplate(new Template("testTemplate", ScriptService.ScriptType.INDEXED, MustacheScriptEngineService.NAME, null, Collections.<String, Object>singletonMap("name", "token"))), +                    .setTemplate(new Template("testTemplate", ScriptService.ScriptType.INDEXED, MustacheScriptEngineService.NAME, null, Collections.<String, Object>singletonMap("name", "token"))), +++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditUserHolder.java, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingAction;, +        .add(Privilege.Index.action(PutMappingAction.NAME), IndexAuditTrail.INDEX_NAME_PREFIX + "*"), +++ b/shield/src/test/java/org/elasticsearch/integration/ShieldCachePermissionTests.java, +import org.elasticsearch.script.Template;, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;, +                .setTemplate(new Template("testTemplate", ScriptService.ScriptType.INDEXED, MustacheScriptEngineService.NAME, null, Collections.<String, Object>singletonMap("name", "token"))), +                    .setTemplate(new Template("testTemplate", ScriptService.ScriptType.INDEXED, MustacheScriptEngineService.NAME, null, Collections.<String, Object>singletonMap("name", "token"))), +++ b/watcher/docs/release-notes.asciidoc, +* Added new <<condition-array-compare, array-compare>>, that can compare an array of values in the, +  <<watch-execution-context, Watch Execution Context Model>> to a given value., +, +.Bug Fixes, +* If Watcher was installed with Shield then the Watcher index templates couldn't be stored and could lead, +  to Watcher behaving incorrectly. This was caused by Watcher not detecting correctly if Shield was installed., +* Update `croneval` command line utility to properly handle whitespaces in the elasticsearch home path., +This release is primarily for compatibility with Elasticsearch 2.0.0-beta1 and the Watcher versioning has, +been aligned with the Elasticsearch versioning., +.Enhancements, +* Watcher continuously checks if the index templates for `.watches`, `.triggered_watches`, +  and `.watch_history-*` exist. Whereas before the existence of these index templates was, +  only checked at Watcher startup time. The absence of these index templates leads to, +  watcher data being indexed incorrectly, which then can cause Watcher to behave incorrectly., +* If Watcher was stopped via the stop Watcher api and after that a master election took place, +  then Watcher would then unexpectedly start., +* During Watcher start up only wait for the shards of the `.watches` and `.triggered_watches`, +  indices to be available. Before Watcher also waited for the shards of the `.watch_history-*`, +  indices, which wasn't needed. This improved time it takes for Watcher to startup., +++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditUserHolder.java, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingAction;, +        .add(Privilege.Index.action(PutMappingAction.NAME), IndexAuditTrail.INDEX_NAME_PREFIX + "*"), +++ b/shield/src/test/java/org/elasticsearch/integration/ShieldCachePermissionTests.java, +import org.elasticsearch.script.Template;, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;, +                .setTemplate(new Template("testTemplate", ScriptService.ScriptType.INDEXED, MustacheScriptEngineService.NAME, null, Collections.<String, Object>singletonMap("name", "token"))), +                    .setTemplate(new Template("testTemplate", ScriptService.ScriptType.INDEXED, MustacheScriptEngineService.NAME, null, Collections.<String, Object>singletonMap("name", "token"))), +++ b/watcher/docs/release-notes.asciidoc, +* Added new <<condition-array-compare, array-compare>>, that can compare an array of values in the, +  <<watch-execution-context, Watch Execution Context Model>> to a given value., +, +.Bug Fixes, +* If Watcher was installed with Shield then the Watcher index templates couldn't be stored and could lead, +  to Watcher behaving incorrectly. This was caused by Watcher not detecting correctly if Shield was installed., +* Update `croneval` command line utility to properly handle whitespaces in the elasticsearch home path., +This release is primarily for compatibility with Elasticsearch 2.0.0-beta1 and the Watcher versioning has, +been aligned with the Elasticsearch versioning., +.Enhancements, +* Watcher continuously checks if the index templates for `.watches`, `.triggered_watches`, +  and `.watch_history-*` exist. Whereas before the existence of these index templates was, +  only checked at Watcher startup time. The absence of these index templates leads to, +  watcher data being indexed incorrectly, which then can cause Watcher to behave incorrectly., +* If Watcher was stopped via the stop Watcher api and after that a master election took place, +  then Watcher would then unexpectedly start., +* During Watcher start up only wait for the shards of the `.watches` and `.triggered_watches`, +  indices to be available. Before Watcher also waited for the shards of the `.watch_history-*`, +  indices, which wasn't needed. This improved time it takes for Watcher to startup., +++ b/watcher/src/main/java/org/elasticsearch/watcher/support/WatcherIndexTemplateRegistry.java, +            executor = Runnable::run;, +++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditUserHolder.java, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingAction;, +        .add(Privilege.Index.action(PutMappingAction.NAME), IndexAuditTrail.INDEX_NAME_PREFIX + "*"), +++ b/shield/src/test/java/org/elasticsearch/integration/ShieldCachePermissionTests.java, +import org.elasticsearch.script.Template;, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;, +                .setTemplate(new Template("testTemplate", ScriptService.ScriptType.INDEXED, MustacheScriptEngineService.NAME, null, Collections.<String, Object>singletonMap("name", "token"))), +                    .setTemplate(new Template("testTemplate", ScriptService.ScriptType.INDEXED, MustacheScriptEngineService.NAME, null, Collections.<String, Object>singletonMap("name", "token"))), +++ b/watcher/docs/release-notes.asciidoc, +* Added new <<condition-array-compare, array-compare>>, that can compare an array of values in the, +  <<watch-execution-context, Watch Execution Context Model>> to a given value., +, +.Bug Fixes, +* If Watcher was installed with Shield then the Watcher index templates couldn't be stored and could lead, +  to Watcher behaving incorrectly. This was caused by Watcher not detecting correctly if Shield was installed., +* Update `croneval` command line utility to properly handle whitespaces in the elasticsearch home path., +This release is primarily for compatibility with Elasticsearch 2.0.0-beta1 and the Watcher versioning has, +been aligned with the Elasticsearch versioning., +.Enhancements, +* Watcher continuously checks if the index templates for `.watches`, `.triggered_watches`, +  and `.watch_history-*` exist. Whereas before the existence of these index templates was, +  only checked at Watcher startup time. The absence of these index templates leads to, +  watcher data being indexed incorrectly, which then can cause Watcher to behave incorrectly., +* If Watcher was stopped via the stop Watcher api and after that a master election took place, +  then Watcher would then unexpectedly start., +* During Watcher start up only wait for the shards of the `.watches` and `.triggered_watches`, +  indices to be available. Before Watcher also waited for the shards of the `.watch_history-*`, +  indices, which wasn't needed. This improved time it takes for Watcher to startup., +++ b/watcher/src/main/java/org/elasticsearch/watcher/support/WatcherIndexTemplateRegistry.java, +            executor = Runnable::run;, +++ b/watcher/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java]