[+++ b/build.gradle, +, +  idea {, +    module {, +      // same as for the IntelliJ Gradle tooling integration, +      inheritOutputDirs = false, +      outputDir = file('build/classes/main'), +      testOutputDir = file('build/classes/test'), +, +      iml {, +        // fix so that Gradle idea plugin properly generates support for resource folders, +        // see also https://issues.gradle.org/browse/GRADLE-2975, +        withXml {, +          it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/main/resources' }.each {, +            it.attributes().remove('isTestSource'), +            it.attributes().put('type', 'java-resource'), +          }, +          it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/test/resources' }.each {, +            it.attributes().remove('isTestSource'), +            it.attributes().put('type', 'java-test-resource'), +          }, +        }, +      }, +    }, +  }, +++ b/build.gradle, +, +  idea {, +    module {, +      // same as for the IntelliJ Gradle tooling integration, +      inheritOutputDirs = false, +      outputDir = file('build/classes/main'), +      testOutputDir = file('build/classes/test'), +, +      iml {, +        // fix so that Gradle idea plugin properly generates support for resource folders, +        // see also https://issues.gradle.org/browse/GRADLE-2975, +        withXml {, +          it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/main/resources' }.each {, +            it.attributes().remove('isTestSource'), +            it.attributes().put('type', 'java-resource'), +          }, +          it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/test/resources' }.each {, +            it.attributes().remove('isTestSource'), +            it.attributes().put('type', 'java-test-resource'), +          }, +        }, +      }, +    }, +  }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            throw new IllegalArgumentException("No custom state prototype registered for type [" + type + "], node likely missing plugins");, +++ b/build.gradle, +, +  idea {, +    module {, +      // same as for the IntelliJ Gradle tooling integration, +      inheritOutputDirs = false, +      outputDir = file('build/classes/main'), +      testOutputDir = file('build/classes/test'), +, +      iml {, +        // fix so that Gradle idea plugin properly generates support for resource folders, +        // see also https://issues.gradle.org/browse/GRADLE-2975, +        withXml {, +          it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/main/resources' }.each {, +            it.attributes().remove('isTestSource'), +            it.attributes().put('type', 'java-resource'), +          }, +          it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/test/resources' }.each {, +            it.attributes().remove('isTestSource'), +            it.attributes().put('type', 'java-test-resource'), +          }, +        }, +      }, +    }, +  }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            throw new IllegalArgumentException("No custom state prototype registered for type [" + type + "], node likely missing plugins");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +            throw new IllegalArgumentException("No custom metadata prototype registered for type [" + type + "], node likely missing plugins");, +++ b/build.gradle, +, +  idea {, +    module {, +      // same as for the IntelliJ Gradle tooling integration, +      inheritOutputDirs = false, +      outputDir = file('build/classes/main'), +      testOutputDir = file('build/classes/test'), +, +      iml {, +        // fix so that Gradle idea plugin properly generates support for resource folders, +        // see also https://issues.gradle.org/browse/GRADLE-2975, +        withXml {, +          it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/main/resources' }.each {, +            it.attributes().remove('isTestSource'), +            it.attributes().put('type', 'java-resource'), +          }, +          it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/test/resources' }.each {, +            it.attributes().remove('isTestSource')]