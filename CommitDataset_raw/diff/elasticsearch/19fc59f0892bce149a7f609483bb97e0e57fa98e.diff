[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/monitor/jvm/GcNames.java, +        if ("Eden Space".equals(poolName) || "PS Eden Space".equals(poolName), +            || "Par Eden Space".equals(poolName) || "G1 Eden Space".equals(poolName)) {, +        if ("Survivor Space".equals(poolName) || "PS Survivor Space".equals(poolName), +            || "Par Survivor Space".equals(poolName) || "G1 Survivor Space".equals(poolName)) {, +        if ("Tenured Gen".equals(poolName) || "PS Old Gen".equals(poolName), +            || "CMS Old Gen".equals(poolName) || "G1 Old Gen".equals(poolName)) {, +        if ("MarkSweepCompact".equals(gcName) || "PS MarkSweep".equals(gcName), +            || "ConcurrentMarkSweep".equals(gcName) || "G1 Old Generation".equals(gcName)) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/monitor/jvm/GcNames.java, +        if ("Eden Space".equals(poolName) || "PS Eden Space".equals(poolName), +            || "Par Eden Space".equals(poolName) || "G1 Eden Space".equals(poolName)) {, +        if ("Survivor Space".equals(poolName) || "PS Survivor Space".equals(poolName), +            || "Par Survivor Space".equals(poolName) || "G1 Survivor Space".equals(poolName)) {, +        if ("Tenured Gen".equals(poolName) || "PS Old Gen".equals(poolName), +            || "CMS Old Gen".equals(poolName) || "G1 Old Gen".equals(poolName)) {, +        if ("MarkSweepCompact".equals(gcName) || "PS MarkSweep".equals(gcName), +            || "ConcurrentMarkSweep".equals(gcName) || "G1 Old Generation".equals(gcName)) {, +++ b/server/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java, +            sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n",, +                percent, TimeValue.timeValueNanos(time), interval, type, threadName));, +                        sb.append(String.format(Locale.ROOT, "  %d/%d snapshots sharing following %d elements%n",, +                            count, threadElementsSnapshotCount, maxSim));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/monitor/jvm/GcNames.java, +        if ("Eden Space".equals(poolName) || "PS Eden Space".equals(poolName), +            || "Par Eden Space".equals(poolName) || "G1 Eden Space".equals(poolName)) {, +        if ("Survivor Space".equals(poolName) || "PS Survivor Space".equals(poolName), +            || "Par Survivor Space".equals(poolName) || "G1 Survivor Space".equals(poolName)) {, +        if ("Tenured Gen".equals(poolName) || "PS Old Gen".equals(poolName), +            || "CMS Old Gen".equals(poolName) || "G1 Old Gen".equals(poolName)) {, +        if ("MarkSweepCompact".equals(gcName) || "PS MarkSweep".equals(gcName), +            || "ConcurrentMarkSweep".equals(gcName) || "G1 Old Generation".equals(gcName)) {, +++ b/server/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java, +            sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n",, +                percent, TimeValue.timeValueNanos(time), interval, type, threadName));, +                        sb.append(String.format(Locale.ROOT, "  %d/%d snapshots sharing following %d elements%n",, +                            count, threadElementsSnapshotCount, maxSim));, +++ b/server/src/test/java/org/elasticsearch/monitor/jvm/JvmGcMonitorServiceSettingsTests.java, +            assertThat(e.getMessage(), allOf(containsString("invalid gc_threshold"),, +                containsString("for [monitor.jvm.gc.collector." + collector + ".")));, +        for (@SuppressWarnings("unchecked") AbstractMap.SimpleEntry<String, String> entry : randomSubsetOf(randomIntBetween(1, 2),, +            entries.toArray(new AbstractMap.SimpleEntry[0]))) {, +            assertThat(e.getMessage(), containsString("[monitor.jvm.gc.overhead.warn] must be greater than ", +                + "[monitor.jvm.gc.overhead.info] [" + info + "] but was [" + warn + "]"));, +        debugInfoOutOfOrderBuilder.put("monitor.jvm.gc.overhead.warn",, +            randomIntBetween(debug + 1, 100)); // or the test will fail for the wrong reason, +            assertThat(e.getMessage(), containsString("[monitor.jvm.gc.overhead.info] must be greater than ", +                + "[monitor.jvm.gc.overhead.debug] [" + debug + "] but was [" + info + "]"));, +    private static void execute(Settings settings, TriFunction<Runnable, TimeValue, String, Cancellable> scheduler,, +                                Runnable asserts) throws InterruptedException {, +    private static void execute(Settings settings, TriFunction<Runnable, TimeValue, String, Cancellable> scheduler,, +                                Consumer<Throwable> consumer, boolean constructionShouldFail,, +                                Runnable asserts) throws InterruptedException {]