[+++ b/core/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDisconnect;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(, +            new TwoPartitions(Collections.singleton(master), otherNodes),, +            new NetworkDisconnect());, +++ b/core/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDisconnect;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(, +            new TwoPartitions(Collections.singleton(master), otherNodes),, +            new NetworkDisconnect());, +++ b/core/src/test/java/org/elasticsearch/cluster/MinimumMasterNodesIT.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDelay;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(, +            new TwoPartitions(Collections.singleton(master), otherNodes),, +            new NetworkDelay(TimeValue.timeValueMinutes(1)));, +        final AtomicReference<Exception> failure = new AtomicReference<>();, +++ b/core/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDisconnect;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(, +            new TwoPartitions(Collections.singleton(master), otherNodes),, +            new NetworkDisconnect());, +++ b/core/src/test/java/org/elasticsearch/cluster/MinimumMasterNodesIT.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDelay;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(, +            new TwoPartitions(Collections.singleton(master), otherNodes),, +            new NetworkDelay(TimeValue.timeValueMinutes(1)));, +        final AtomicReference<Exception> failure = new AtomicReference<>();, +++ b/core/src/test/java/org/elasticsearch/cluster/routing/PrimaryAllocationIT.java, +import org.elasticsearch.common.util.set.Sets;, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDisconnect;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(, +            new TwoPartitions(Sets.newHashSet(master, replicaNode), Collections.singleton(primaryNode)),, +            new NetworkDisconnect());, +++ b/core/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDisconnect;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(, +            new TwoPartitions(Collections.singleton(master), otherNodes),, +            new NetworkDisconnect());, +++ b/core/src/test/java/org/elasticsearch/cluster/MinimumMasterNodesIT.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDelay;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(, +            new TwoPartitions(Collections.singleton(master), otherNodes),, +            new NetworkDelay(TimeValue.timeValueMinutes(1)));, +        final AtomicReference<Exception> failure = new AtomicReference<>();, +++ b/core/src/test/java/org/elasticsearch/cluster/routing/PrimaryAllocationIT.java, +import org.elasticsearch.common.util.set.Sets;, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDisconnect;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption partition = new NetworkDisruption(, +            new TwoPartitions(Sets.newHashSet(master, replicaNode), Collections.singleton(primaryNode)),, +            new NetworkDisconnect());, +++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +import org.elasticsearch.test.disruption.NetworkDisruption;, +import org.elasticsearch.test.disruption.NetworkDisruption.Bridge;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDelay;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkDisconnect;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkLinkDisruptionType;, +import org.elasticsearch.test.disruption.NetworkDisruption.NetworkUnresponsive;, +import org.elasticsearch.test.disruption.NetworkDisruption.DisruptedLinks;, +import org.elasticsearch.test.disruption.NetworkDisruption.TwoPartitions;, +        NetworkDisruption networkDisconnect = new NetworkDisruption(new TwoPartitions(masterNode, unluckyNode),, +            new NetworkDisconnect());, +        TwoPartitions partitions = isolateNode(nonMaster);, +        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions);, +        networkDisruption.startDisrupting();, +        TwoPartitions partitions = TwoPartitions.random(random(), internalCluster().getNodeNames());, +        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions);, +        assertEquals(1, partitions.getMinoritySide().size());, +        final String isolatedNode = partitions.getMinoritySide().iterator().next();, +        assertEquals(2, partitions.getMajoritySide().size());, +        final String nonIsolatedNode = partitions.getMajoritySide().iterator().next();, +        networkDisruption.startDisrupting();, +        for (String node : partitions.getMajoritySide()) {, +        networkDisruption.stopDisrupting();, +        ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + networkDisruption.expectedTimeToHeal().millis()));, +        networkDisruption.startDisrupting();, +        TwoPartitions partitions = isolateNode(isolatedNode);, +        NetworkDisruption networkDisruption = addRandomDisruptionType(partitions);, +        networkDisruption.startDisrupting();, +        String nonIsolatedNode = partitions.getMajoritySide().iterator().next();]