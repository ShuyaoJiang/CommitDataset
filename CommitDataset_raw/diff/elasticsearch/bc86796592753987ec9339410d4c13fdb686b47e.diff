[+++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== Terms filter lookup caching, +, +The terms filter lookup mechanism does not support the `cache` option anymore, +and relies on the filesystem cache instead. If the lookup index is not too, +large, it is recommended to make it replicated to all nodes by setting, +`index.auto_expand_replicas: 0-all` in order to remove the network overhead as, +well., +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== Terms filter lookup caching, +, +The terms filter lookup mechanism does not support the `cache` option anymore, +and relies on the filesystem cache instead. If the lookup index is not too, +large, it is recommended to make it replicated to all nodes by setting, +`index.auto_expand_replicas: 0-all` in order to remove the network overhead as, +well., +++ b/docs/reference/query-dsl/filters/terms-filter.asciidoc, +If there are lots of matching values, then `_cache_key` is recommended to be set,, +so that the filter cache will not store a reference to the potentially heavy, +terms filter., +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== Terms filter lookup caching, +, +The terms filter lookup mechanism does not support the `cache` option anymore, +and relies on the filesystem cache instead. If the lookup index is not too, +large, it is recommended to make it replicated to all nodes by setting, +`index.auto_expand_replicas: 0-all` in order to remove the network overhead as, +well., +++ b/docs/reference/query-dsl/filters/terms-filter.asciidoc, +If there are lots of matching values, then `_cache_key` is recommended to be set,, +so that the filter cache will not store a reference to the potentially heavy, +terms filter., +++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.index.mapper.internal.ParentFieldMapper;, +                                            TransportService transportService, IndicesService indicesService,, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== Terms filter lookup caching, +, +The terms filter lookup mechanism does not support the `cache` option anymore, +and relies on the filesystem cache instead. If the lookup index is not too, +large, it is recommended to make it replicated to all nodes by setting, +`index.auto_expand_replicas: 0-all` in order to remove the network overhead as, +well., +++ b/docs/reference/query-dsl/filters/terms-filter.asciidoc, +If there are lots of matching values, then `_cache_key` is recommended to be set,, +so that the filter cache will not store a reference to the potentially heavy, +terms filter., +++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.index.mapper.internal.ParentFieldMapper;, +                                            TransportService transportService, IndicesService indicesService,, +++ b/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java, +import org.elasticsearch.action.get.GetRequest;, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +    private Client client;, +    public void setClient(Client client) {, +        this.client = client;, +        FieldMapper<?> fieldMapper = null;, +            final TermsLookup lookup = new TermsLookup(lookupIndex, lookupType, lookupId, lookupRouting, lookupPath, parseContext);, +            final GetResponse getResponse = client.get(new GetRequest(lookup.getIndex(), lookup.getType(), lookup.getId()).preference("_local").routing(lookup.getRouting())).actionGet();, +            if (getResponse.isExists()) {, +                List<Object> values = XContentMapValues.extractRawValues(lookup.getPath(), getResponse.getSourceAsMap());, +                terms.addAll(values);, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== Terms filter lookup caching, +, +The terms filter lookup mechanism does not support the `cache` option anymore, +and relies on the filesystem cache instead. If the lookup index is not too, +large, it is recommended to make it replicated to all nodes by setting, +`index.auto_expand_replicas: 0-all` in order to remove the network overhead as, +well., +++ b/docs/reference/query-dsl/filters/terms-filter.asciidoc, +If there are lots of matching values, then `_cache_key` is recommended to be set,, +so that the filter cache will not store a reference to the potentially heavy, +terms filter., +++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.index.mapper.internal.ParentFieldMapper;, +                                            TransportService transportService, IndicesService indicesService,, +++ b/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java, +import org.elasticsearch.action.get.GetRequest;, +import org.elasticsearch.action.get.GetResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +    private Client client;, +    public void setClient(Client client) {, +        this.client = client;, +        FieldMapper<?> fieldMapper = null;, +            final TermsLookup lookup = new TermsLookup(lookupIndex, lookupType, lookupId, lookupRouting, lookupPath, parseContext);, +            final GetResponse getResponse = client.get(new GetRequest(lookup.getIndex(), lookup.getType(), lookup.getId()).preference("_local").routing(lookup.getRouting())).actionGet();, +            if (getResponse.isExists()) {, +                List<Object> values = XContentMapValues.extractRawValues(lookup.getPath(), getResponse.getSourceAsMap());, +                terms.addAll(values);, +++ b/src/main/java/org/elasticsearch/indices/IndicesModule.java, +, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== Terms filter lookup caching, +, +The terms filter lookup mechanism does not support the `cache` option anymore, +and relies on the filesystem cache instead. If the lookup index is not too]