[+++ b/src/main/java/org/apache/lucene/store/bytebuffer/ByteBufferDirectory.java, +import com.google.common.collect.ImmutableSet;, +, +    private final static ImmutableSet<String> SMALL_FILES_SUFFIXES = ImmutableSet.of(, +            "del", // 1 bit per doc, +            "cfe", // compound file metadata, +            "si", // segment info, +            "fnm"  // field info (metadata like omit norms etc), +    );, +, +    private static boolean isSmallFile(String fileName) {, +        if (fileName.startsWith("segments")) {, +            return true;, +        }, +        if (fileName.lastIndexOf('.') > 0) {, +            String suffix = fileName.substring(fileName.lastIndexOf('.') + 1);, +            return SMALL_FILES_SUFFIXES.contains(suffix);, +        }, +        return false;, +    }, +, +        if (isSmallFile(name)) {, +++ b/src/main/java/org/apache/lucene/store/bytebuffer/ByteBufferDirectory.java, +import com.google.common.collect.ImmutableSet;, +, +    private final static ImmutableSet<String> SMALL_FILES_SUFFIXES = ImmutableSet.of(, +            "del", // 1 bit per doc, +            "cfe", // compound file metadata, +            "si", // segment info, +            "fnm"  // field info (metadata like omit norms etc), +    );, +, +    private static boolean isSmallFile(String fileName) {, +        if (fileName.startsWith("segments")) {, +            return true;, +        }, +        if (fileName.lastIndexOf('.') > 0) {, +            String suffix = fileName.substring(fileName.lastIndexOf('.') + 1);, +            return SMALL_FILES_SUFFIXES.contains(suffix);, +        }, +        return false;, +    }, +, +        if (isSmallFile(name)) {, +++ b/src/test/java/org/elasticsearch/index/engine/robin/RobinEngineIntegrationTest.java, +import org.elasticsearch.action.admin.cluster.node.info.NodeInfo;, +import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import org.elasticsearch.common.unit.ByteSizeValue;, +        cluster().ensureAtMostNumNodes(1); // only one node Netty uses lots of native mem as well, +                .put("cache.memory.large_cache_size", new ByteSizeValue(10, ByteSizeUnit.MB)) // no need to cache a lot, +        NodesInfoResponse nodeInfos = client().admin().cluster().prepareNodesInfo().setJvm(true).get();, +        NodeInfo[] nodes = nodeInfos.getNodes();, +        for (NodeInfo info : nodes) {, +            ByteSizeValue directMemoryMax = info.getJvm().getMem().getDirectMemoryMax();, +            logger.info(" JVM max direct memory for node [{}] is set to [{}]", info.getNode().getName(), directMemoryMax);, +        }, +, +++ b/src/main/java/org/apache/lucene/store/bytebuffer/ByteBufferDirectory.java, +import com.google.common.collect.ImmutableSet;, +, +    private final static ImmutableSet<String> SMALL_FILES_SUFFIXES = ImmutableSet.of(, +            "del", // 1 bit per doc, +            "cfe", // compound file metadata, +            "si", // segment info, +            "fnm"  // field info (metadata like omit norms etc), +    );, +, +    private static boolean isSmallFile(String fileName) {, +        if (fileName.startsWith("segments")) {, +            return true;, +        }, +        if (fileName.lastIndexOf('.') > 0) {, +            String suffix = fileName.substring(fileName.lastIndexOf('.') + 1);, +            return SMALL_FILES_SUFFIXES.contains(suffix);, +        }, +        return false;, +    }, +, +        if (isSmallFile(name)) {, +++ b/src/test/java/org/elasticsearch/index/engine/robin/RobinEngineIntegrationTest.java, +import org.elasticsearch.action.admin.cluster.node.info.NodeInfo;, +import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import org.elasticsearch.common.unit.ByteSizeValue;, +        cluster().ensureAtMostNumNodes(1); // only one node Netty uses lots of native mem as well, +                .put("cache.memory.large_cache_size", new ByteSizeValue(10, ByteSizeUnit.MB)) // no need to cache a lot, +        NodesInfoResponse nodeInfos = client().admin().cluster().prepareNodesInfo().setJvm(true).get();, +        NodeInfo[] nodes = nodeInfos.getNodes();, +        for (NodeInfo info : nodes) {, +            ByteSizeValue directMemoryMax = info.getJvm().getMem().getDirectMemoryMax();, +            logger.info(" JVM max direct memory for node [{}] is set to [{}]", info.getNode().getName(), directMemoryMax);, +        }, +, +++ b/src/test/java/org/elasticsearch/test/TestCluster.java, +        // prevent killing the master if possible, +        final Iterator<NodeAndClient> values = num == 0 ? nodes.values().iterator() : Iterators.filter(nodes.values().iterator(), Predicates.not(new MasterNodePredicate(getMasterName())));, +        final Iterator<NodeAndClient> limit = Iterators.limit(values, nodes.size() - num);, +        Set<NodeAndClient> nodesToRemove = new HashSet<NodeAndClient>();, +            nodesToRemove.add(next);]