[+++ b/src/main/java/org/elasticsearch/search/fetch/fielddata/FieldDataFieldsParseElement.java, +import org.elasticsearch.ElasticsearchIllegalStateException;, +        XContentParser.Token token = parser.currentToken();, +        if (token == XContentParser.Token.START_ARRAY) {, +            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {, +        } else if (token == XContentParser.Token.VALUE_STRING) {, +            String fieldName = parser.text();, +            context.fieldDataFields().add(new FieldDataFieldsContext.FieldDataField(fieldName));, +        }  else {, +            throw new ElasticsearchIllegalStateException("Expected either a VALUE_STRING or an START_ARRAY but got " + token);, +        }, +++ b/src/main/java/org/elasticsearch/search/fetch/fielddata/FieldDataFieldsParseElement.java, +import org.elasticsearch.ElasticsearchIllegalStateException;, +        XContentParser.Token token = parser.currentToken();, +        if (token == XContentParser.Token.START_ARRAY) {, +            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {, +        } else if (token == XContentParser.Token.VALUE_STRING) {, +            String fieldName = parser.text();, +            context.fieldDataFields().add(new FieldDataFieldsContext.FieldDataField(fieldName));, +        }  else {, +            throw new ElasticsearchIllegalStateException("Expected either a VALUE_STRING or an START_ARRAY but got " + token);, +        }, +++ b/src/test/java/org/elasticsearch/search/fields/SearchFieldsTests.java, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.action.search.SearchPhaseExecutionException;, +import org.elasticsearch.search.SearchHitField;, +import java.util.concurrent.ExecutionException;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +    @Test // see #8203, +    public void testSingleValueFieldDatatField() throws ExecutionException, InterruptedException {, +        createIndex("test");, +        indexRandom(true, client().prepareIndex("test", "type", "1").setSource("test_field", "foobar"));, +        refresh();, +        SearchResponse searchResponse = client().prepareSearch("test").setTypes("type").setSource(new BytesArray(new BytesRef("{\"query\":{\"match_all\":{}},\"fielddata_fields\": \"test_field\"}"))).get();, +        assertHitCount(searchResponse, 1);, +        Map<String,SearchHitField> fields = searchResponse.getHits().getHits()[0].getFields();, +        assertThat((String)fields.get("test_field").value(), equalTo("foobar"));, +    }, +, +    @Test(expected = SearchPhaseExecutionException.class), +    public void testInvalidFieldDataField() throws ExecutionException, InterruptedException {, +        createIndex("test");, +        if (randomBoolean()) {, +            client().prepareSearch("test").setTypes("type").setSource(new BytesArray(new BytesRef("{\"query\":{\"match_all\":{}},\"fielddata_fields\": {}}"))).get();, +        } else {, +            client().prepareSearch("test").setTypes("type").setSource(new BytesArray(new BytesRef("{\"query\":{\"match_all\":{}},\"fielddata_fields\": 1.0}"))).get();, +        }, +    }, +]