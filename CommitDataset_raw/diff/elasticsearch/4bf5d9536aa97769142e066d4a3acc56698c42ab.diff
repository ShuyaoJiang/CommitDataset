[+++ /dev/null, +++ /dev/null, +++ b/plugin/src/test/java/org/elasticsearch/xpack/watcher/WatcherPluginTests.java, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.index.IndexModule;, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.analysis.AnalysisRegistry;, +import org.elasticsearch.test.IndexSettingsModule;, +import org.elasticsearch.threadpool.ExecutorBuilder;, +import org.elasticsearch.xpack.watcher.watch.Watch;, +import java.util.List;, +, +import static java.util.Collections.emptyMap;, +import static org.hamcrest.Matchers.hasSize;, +    public void testWatcherDisabledTests() {, +        Settings settings = Settings.builder(), +                .put("xpack.watcher.enabled", false), +                .put("path.home", createTempDir()), +                .build();, +        Watcher watcher = new Watcher(settings);, +, +        List<ExecutorBuilder<?>> executorBuilders = watcher.getExecutorBuilders(settings);, +        assertThat(executorBuilders, hasSize(0));, +        assertThat(watcher.nodeModules(), hasSize(1));, +        assertThat(watcher.getActions(), hasSize(0));, +        assertThat(watcher.getRestHandlers(settings, null, null, null, null, null, null), hasSize(0));, +, +        // ensure index module is not called, even if watches index is tried, +        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(Watch.INDEX, settings);, +        AnalysisRegistry registry = new AnalysisRegistry(new Environment(settings), emptyMap(), emptyMap(), emptyMap(), emptyMap(),, +                emptyMap(), emptyMap(), emptyMap(), emptyMap());, +        IndexModule indexModule = new IndexModule(indexSettings, registry);, +        // this will trip an assertion if the watcher indexing operation listener is null (which it is) but we try to add it, +        watcher.onIndexModule(indexModule);, +, +        // also no component creation if not enabled, +        assertThat(watcher.createComponents(null, null, null, null, null, null, null, null, null, null, null), hasSize(0));, +    }, +++ /dev/null, +++ b/plugin/src/test/java/org/elasticsearch/xpack/watcher/WatcherPluginTests.java, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.index.IndexModule;, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.analysis.AnalysisRegistry;, +import org.elasticsearch.test.IndexSettingsModule;, +import org.elasticsearch.threadpool.ExecutorBuilder;, +import org.elasticsearch.xpack.watcher.watch.Watch;, +import java.util.List;, +, +import static java.util.Collections.emptyMap;, +import static org.hamcrest.Matchers.hasSize;, +    public void testWatcherDisabledTests() {, +        Settings settings = Settings.builder(), +                .put("xpack.watcher.enabled", false), +                .put("path.home", createTempDir()), +                .build();, +        Watcher watcher = new Watcher(settings);, +, +        List<ExecutorBuilder<?>> executorBuilders = watcher.getExecutorBuilders(settings);, +        assertThat(executorBuilders, hasSize(0));, +        assertThat(watcher.nodeModules(), hasSize(1));, +        assertThat(watcher.getActions(), hasSize(0));, +        assertThat(watcher.getRestHandlers(settings, null, null, null, null, null, null), hasSize(0));, +, +        // ensure index module is not called, even if watches index is tried, +        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(Watch.INDEX, settings);, +        AnalysisRegistry registry = new AnalysisRegistry(new Environment(settings), emptyMap(), emptyMap(), emptyMap(), emptyMap(),, +                emptyMap(), emptyMap(), emptyMap(), emptyMap());, +        IndexModule indexModule = new IndexModule(indexSettings, registry);, +        // this will trip an assertion if the watcher indexing operation listener is null (which it is) but we try to add it, +        watcher.onIndexModule(indexModule);, +, +        // also no component creation if not enabled, +        assertThat(watcher.createComponents(null, null, null, null, null, null, null, null, null, null, null), hasSize(0));, +    }, +++ b/plugin/src/test/java/org/elasticsearch/xpack/watcher/support/VariablesTests.java, +import org.elasticsearch.xpack.watcher.support.xcontent.ObjectPath;, +, +        assertThat(ObjectPath.eval("ctx", model), instanceOf(Map.class));, +        assertThat(ObjectPath.eval("ctx.id", model), is(wid.value()));, +        assertThat(ObjectPath.eval("ctx.execution_time", model), is(executionTime));, +        assertThat(ObjectPath.eval("ctx.trigger", model), is(event.data()));, +        assertThat(ObjectPath.eval("ctx.payload", model), is(payload.data()));, +        assertThat(ObjectPath.eval("ctx.metadata", model), is(metatdata));, +++ /dev/null, +++ b/plugin/src/test/java/org/elasticsearch/xpack/watcher/WatcherPluginTests.java, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.index.IndexModule;, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.analysis.AnalysisRegistry;, +import org.elasticsearch.test.IndexSettingsModule;, +import org.elasticsearch.threadpool.ExecutorBuilder;, +import org.elasticsearch.xpack.watcher.watch.Watch;, +import java.util.List;, +, +import static java.util.Collections.emptyMap;, +import static org.hamcrest.Matchers.hasSize;, +    public void testWatcherDisabledTests() {, +        Settings settings = Settings.builder(), +                .put("xpack.watcher.enabled", false)]