[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +            assert indexMetaData == archiveBrokenIndexSettings(indexMetaData) : "all settings must have been upgraded before";, +            return indexMetaData;, +        // we have to run this first otherwise in we try to create IndexSettings, +        // with broken settings and fail in checkMappingsCompatibility, +        newMetaData = archiveBrokenIndexSettings(newMetaData);, +        // only run the check with the upgraded settings!!, +        return markAsUpgraded(newMetaData);, +    boolean isUpgraded(IndexMetaData indexMetaData) {, +        return indexMetaData.getUpgradedVersion().onOrAfter(Version.CURRENT);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +            assert indexMetaData == archiveBrokenIndexSettings(indexMetaData) : "all settings must have been upgraded before";, +            return indexMetaData;, +        // we have to run this first otherwise in we try to create IndexSettings, +        // with broken settings and fail in checkMappingsCompatibility, +        newMetaData = archiveBrokenIndexSettings(newMetaData);, +        // only run the check with the upgraded settings!!, +        return markAsUpgraded(newMetaData);, +    boolean isUpgraded(IndexMetaData indexMetaData) {, +        return indexMetaData.getUpgradedVersion().onOrAfter(Version.CURRENT);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +        // Queries with a single word expanded with synonyms , +        // have their coordination factor disabled (@see org.apache.lucene.util.QueryBuilder#analyzeBoolean())., +        // minimumShouldMatch should not be applicable in such case., +        if (query.isCoordDisabled()) {, +            return query;, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +            assert indexMetaData == archiveBrokenIndexSettings(indexMetaData) : "all settings must have been upgraded before";, +            return indexMetaData;, +        // we have to run this first otherwise in we try to create IndexSettings, +        // with broken settings and fail in checkMappingsCompatibility, +        newMetaData = archiveBrokenIndexSettings(newMetaData);, +        // only run the check with the upgraded settings!!, +        return markAsUpgraded(newMetaData);, +    boolean isUpgraded(IndexMetaData indexMetaData) {, +        return indexMetaData.getUpgradedVersion().onOrAfter(Version.CURRENT);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +        // Queries with a single word expanded with synonyms , +        // have their coordination factor disabled (@see org.apache.lucene.util.QueryBuilder#analyzeBoolean())., +        // minimumShouldMatch should not be applicable in such case., +        if (query.isCoordDisabled()) {, +            return query;, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +        if (query instanceof BooleanQuery) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +            assert indexMetaData == archiveBrokenIndexSettings(indexMetaData) : "all settings must have been upgraded before";, +            return indexMetaData;, +        // we have to run this first otherwise in we try to create IndexSettings, +        // with broken settings and fail in checkMappingsCompatibility, +        newMetaData = archiveBrokenIndexSettings(newMetaData);, +        // only run the check with the upgraded settings!!, +        return markAsUpgraded(newMetaData);, +    boolean isUpgraded(IndexMetaData indexMetaData) {, +        return indexMetaData.getUpgradedVersion().onOrAfter(Version.CURRENT);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +        // Queries with a single word expanded with synonyms , +        // have their coordination factor disabled (@see org.apache.lucene.util.QueryBuilder#analyzeBoolean())., +        // minimumShouldMatch should not be applicable in such case., +        if (query.isCoordDisabled()) {, +            return query;, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +        if (query instanceof BooleanQuery) {, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +        if (query instanceof BooleanQuery) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +            assert indexMetaData == archiveBrokenIndexSettings(indexMetaData) : "all settings must have been upgraded before";, +            return indexMetaData;, +        // we have to run this first otherwise in we try to create IndexSettings, +        // with broken settings and fail in checkMappingsCompatibility, +        newMetaData = archiveBrokenIndexSettings(newMetaData);, +        // only run the check with the upgraded settings!!, +        return markAsUpgraded(newMetaData);, +    boolean isUpgraded(IndexMetaData indexMetaData) {, +        return indexMetaData.getUpgradedVersion().onOrAfter(Version.CURRENT);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +        // Queries with a single word expanded with synonyms , +        // have their coordination factor disabled (@see org.apache.lucene.util.QueryBuilder#analyzeBoolean())., +        // minimumShouldMatch should not be applicable in such case., +        if (query.isCoordDisabled()) {, +            return query;, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +        if (query instanceof BooleanQuery) {, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +        if (query instanceof BooleanQuery) {, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java, +        if (minimumShouldMatch != null && query instanceof BooleanQuery) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +            assert indexMetaData == archiveBrokenIndexSettings(indexMetaData) : "all settings must have been upgraded before";, +            return indexMetaData;, +        // we have to run this first otherwise in we try to create IndexSettings, +        // with broken settings and fail in checkMappingsCompatibility, +        newMetaData = archiveBrokenIndexSettings(newMetaData);, +        // only run the check with the upgraded settings!!, +        return markAsUpgraded(newMetaData);, +    boolean isUpgraded(IndexMetaData indexMetaData) {, +        return indexMetaData.getUpgradedVersion().onOrAfter(Version.CURRENT);]