[+++ b/x-pack/docs/en/security/authentication/configuring-kerberos-realm.asciidoc, +In case you want to support Kerberos cross realm authentication you may , +need to map roles based on the Kerberos realm name. For such scenarios , +following are the additional user metadata available for role mapping:, +- `kerberos_realm` will be set to Kerberos realm name., +- `kerberos_user_principal_name` will be set to user principal name from the Kerberos ticket., +, +++ b/x-pack/docs/en/security/authentication/configuring-kerberos-realm.asciidoc, +In case you want to support Kerberos cross realm authentication you may , +need to map roles based on the Kerberos realm name. For such scenarios , +following are the additional user metadata available for role mapping:, +- `kerberos_realm` will be set to Kerberos realm name., +- `kerberos_user_principal_name` will be set to user principal name from the Kerberos ticket., +, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealm.java, +import java.util.HashMap;, +    public static final String KRB_METADATA_REALM_NAME_KEY = "kerberos_realm";, +    public static final String KRB_METADATA_UPN_KEY = "kerberos_user_principal_name";, +, +                        resolveUser(userPrincipalNameOutToken.v1(), userPrincipalNameOutToken.v2(), listener);, +    private String[] splitUserPrincipalName(final String userPrincipalName) {, +        return userPrincipalName.split("@");, +    private void resolveUser(final String userPrincipalName, final String outToken, final ActionListener<AuthenticationResult> listener) {, +        final String[] userAndRealmName = splitUserPrincipalName(userPrincipalName);, +        /*, +         * Usually principal names are in the form 'user/instance@REALM'. If, +         * KerberosRealmSettings#SETTING_REMOVE_REALM_NAME is true then remove, +         * '@REALM' part from the user principal name to get username., +         */, +        final String username = (this.removeRealmName) ? userAndRealmName[0] : userPrincipalName;, +, +                final String realmName = (userAndRealmName.length > 1) ? userAndRealmName[1] : null;, +                final Map<String, Object> metadata = new HashMap<>();, +                metadata.put(KRB_METADATA_REALM_NAME_KEY, realmName);, +                metadata.put(KRB_METADATA_UPN_KEY, userPrincipalName);, +                buildUser(username, metadata, listener);, +    private void buildUser(final String username, final Map<String, Object> metadata, final ActionListener<AuthenticationResult> listener) {, +        final UserRoleMapper.UserData userData = new UserRoleMapper.UserData(username, null, Collections.emptySet(), metadata, this.config);, +            final User computedUser = new User(username, roles.toArray(new String[roles.size()]), null, null, userData.getMetadata(), true);, +++ b/x-pack/docs/en/security/authentication/configuring-kerberos-realm.asciidoc, +In case you want to support Kerberos cross realm authentication you may , +need to map roles based on the Kerberos realm name. For such scenarios , +following are the additional user metadata available for role mapping:, +- `kerberos_realm` will be set to Kerberos realm name., +- `kerberos_user_principal_name` will be set to user principal name from the Kerberos ticket., +, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealm.java, +import java.util.HashMap;, +    public static final String KRB_METADATA_REALM_NAME_KEY = "kerberos_realm";, +    public static final String KRB_METADATA_UPN_KEY = "kerberos_user_principal_name";, +, +                        resolveUser(userPrincipalNameOutToken.v1(), userPrincipalNameOutToken.v2(), listener);, +    private String[] splitUserPrincipalName(final String userPrincipalName) {, +        return userPrincipalName.split("@");, +    private void resolveUser(final String userPrincipalName, final String outToken, final ActionListener<AuthenticationResult> listener) {, +        final String[] userAndRealmName = splitUserPrincipalName(userPrincipalName);, +        /*, +         * Usually principal names are in the form 'user/instance@REALM'. If, +         * KerberosRealmSettings#SETTING_REMOVE_REALM_NAME is true then remove, +         * '@REALM' part from the user principal name to get username., +         */, +        final String username = (this.removeRealmName) ? userAndRealmName[0] : userPrincipalName;, +, +                final String realmName = (userAndRealmName.length > 1) ? userAndRealmName[1] : null;, +                final Map<String, Object> metadata = new HashMap<>();, +                metadata.put(KRB_METADATA_REALM_NAME_KEY, realmName);, +                metadata.put(KRB_METADATA_UPN_KEY, userPrincipalName);, +                buildUser(username, metadata, listener);, +    private void buildUser(final String username, final Map<String, Object> metadata, final ActionListener<AuthenticationResult> listener) {, +        final UserRoleMapper.UserData userData = new UserRoleMapper.UserData(username, null, Collections.emptySet(), metadata, this.config);, +            final User computedUser = new User(username, roles.toArray(new String[roles.size()]), null, null, userData.getMetadata(), true);, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealmAuthenticateFailedTests.java, +import java.util.HashMap;, +import java.util.Map;, +                final Map<String, Object> metadata = new HashMap<>();, +                metadata.put(KerberosRealm.KRB_METADATA_REALM_NAME_KEY, realmName(username));, +                metadata.put(KerberosRealm.KRB_METADATA_UPN_KEY, username);, +                final User expectedUser = new User(expectedUsername, roles.toArray(new String[roles.size()]), null, null, metadata, true);, +++ b/x-pack/docs/en/security/authentication/configuring-kerberos-realm.asciidoc, +In case you want to support Kerberos cross realm authentication you may , +need to map roles based on the Kerberos realm name. For such scenarios , +following are the additional user metadata available for role mapping:, +- `kerberos_realm` will be set to Kerberos realm name., +- `kerberos_user_principal_name` will be set to user principal name from the Kerberos ticket., +, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealm.java, +import java.util.HashMap;, +    public static final String KRB_METADATA_REALM_NAME_KEY = "kerberos_realm";, +    public static final String KRB_METADATA_UPN_KEY = "kerberos_user_principal_name";, +, +                        resolveUser(userPrincipalNameOutToken.v1(), userPrincipalNameOutToken.v2(), listener);, +    private String[] splitUserPrincipalName(final String userPrincipalName) {, +        return userPrincipalName.split("@");, +    private void resolveUser(final String userPrincipalName, final String outToken, final ActionListener<AuthenticationResult> listener) {, +        final String[] userAndRealmName = splitUserPrincipalName(userPrincipalName);, +        /*, +         * Usually principal names are in the form 'user/instance@REALM'. If, +         * KerberosRealmSettings#SETTING_REMOVE_REALM_NAME is true then remove, +         * '@REALM' part from the user principal name to get username., +         */]