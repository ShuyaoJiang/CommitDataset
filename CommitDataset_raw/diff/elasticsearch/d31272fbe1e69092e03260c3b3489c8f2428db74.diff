[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    int baseHttpPort = 9400, +    int baseTransportPort = 9500, +    /**, +     * A closure to call before the cluster is considered ready. The closure is passed the node info,, +     * as well as a groovy AntBuilder, to enable running ant condition checks. The default wait, +     * condition is for http on the http port., +     */, +    @Input, +    Closure waitCondition = { NodeInfo node, AntBuilder ant ->, +        File tmpFile = new File(node.cwd, 'wait.success'), +        ant.get(src: "http://localhost:${node.httpPort()}",, +                dest: tmpFile.toString(),, +                ignoreerrors: true, // do not fail on error, so logging buffers can be flushed by the wait task, +                retries: 10), +        return tmpFile.exists(), +    }, +, +    Map<String, String> settings = new HashMap<>(), +, +    void systemProperty(String property, String value) {, +        systemProperties.put(property, value), +    void setting(String name, String value) {, +        settings.put(name, value), +    }, +, +    @Input, +    void plugin(String name, FileCollection file) {, +        plugins.put(name, file), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    int baseHttpPort = 9400, +    int baseTransportPort = 9500, +    /**, +     * A closure to call before the cluster is considered ready. The closure is passed the node info,, +     * as well as a groovy AntBuilder, to enable running ant condition checks. The default wait, +     * condition is for http on the http port., +     */, +    @Input, +    Closure waitCondition = { NodeInfo node, AntBuilder ant ->, +        File tmpFile = new File(node.cwd, 'wait.success'), +        ant.get(src: "http://localhost:${node.httpPort()}",, +                dest: tmpFile.toString(),, +                ignoreerrors: true, // do not fail on error, so logging buffers can be flushed by the wait task, +                retries: 10), +        return tmpFile.exists(), +    }, +, +    Map<String, String> settings = new HashMap<>(), +, +    void systemProperty(String property, String value) {, +        systemProperties.put(property, value), +    void setting(String name, String value) {, +        settings.put(name, value), +    }, +, +    @Input, +    void plugin(String name, FileCollection file) {, +        plugins.put(name, file), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.logging.Logger, +            // the first argument is the actual script name, relative to home, +            Object[] args = command.getValue().clone(), +            args[0] = new File(node.homeDir, args[0].toString()), +            setup = configureExecTask(taskName(task, node, command.getKey()), project, setup, node, args), +            'http.port'                       : node.httpPort(),, +            'transport.tcp.port'              : node.transportPort(),, +            'discovery.zen.ping.unicast.hosts': (0..<node.config.numNodes).collect{"127.0.0.1:${node.config.baseTransportPort + it}"}.join(','),, +        Closure antRunner = { AntBuilder ant ->, +            ant.exec(executable: executable, spawn: node.config.daemonize, dir: node.cwd, taskname: 'elasticsearch') {, +                            socket(server: '127.0.0.1', port: node.httpPort()), +                waitFailed(nodes, logger, 'Failed to start elasticsearch'), +            }, +, +            // go through each node checking the wait condition, +            for (NodeInfo node : nodes) {, +                // first bind node info to the closure, then pass to the ant runner so we can get good logging, +                Closure antRunner = node.config.waitCondition.curry(node), +, +                boolean success, +                if (logger.isInfoEnabled()) {, +                    success = runAntCommand(project, antRunner, System.out, System.err), +                } else {, +                    PrintStream captureStream = new PrintStream(node.buffer, true, "UTF-8"), +                    success = runAntCommand(project, antRunner, captureStream, captureStream), +                }, +, +                if (success == false) {, +                    waitFailed(nodes, logger, 'Elasticsearch cluster failed to pass wait condition'), +                }, +            }, +        }, +        return wait, +    }, +, +    static void waitFailed(List<NodeInfo> nodes, Logger logger, String msg) {, +        throw new GradleException(msg), +    static Object runAntCommand(Project project, Closure command, PrintStream outputStream, PrintStream errorStream) {, +        Object retVal = command(project.ant), +        return retVal, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy]