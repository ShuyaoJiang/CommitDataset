[+++ b/src/main/java/org/elasticsearch/action/TransportActionModule.java, +import com.google.common.collect.Maps;, +import org.elasticsearch.action.support.BaseAction;, +import org.elasticsearch.common.inject.multibindings.MapBinder;, +, +import java.util.Map;, +    private final Map<String, ActionEntry> actions = Maps.newHashMap();, +, +    static class ActionEntry {, +        public final String name;, +        public final Class<? extends BaseAction> action;, +        public final Class[] supportActions;, +, +        ActionEntry(String name, Class<? extends BaseAction> action, Class... supportActions) {, +            this.name = name;, +            this.action = action;, +            this.supportActions = supportActions;, +        }, +, +, +    }, +, +    public TransportActionModule() {, +    }, +, +    /**, +     * Registers a custom action under the provided action name, the actual action implementation, and, +     * any supported actions (bind as singletons)., +     *, +     * @param actionName     The action name, +     * @param action         The action itself, +     * @param supportActions Support actions., +     */, +    public void registerAction(String actionName, Class<? extends BaseAction> action, Class... supportActions) {, +        actions.put(actionName, new ActionEntry(actionName, action, supportActions));, +    }, +, +        registerAction(TransportActions.Admin.Cluster.Node.INFO, TransportNodesInfoAction.class);, +        registerAction(TransportActions.Admin.Cluster.Node.STATS, TransportNodesStatsAction.class);, +        registerAction(TransportActions.Admin.Cluster.Node.SHUTDOWN, TransportNodesShutdownAction.class);, +        registerAction(TransportActions.Admin.Cluster.Node.RESTART, TransportNodesRestartAction.class);, +        registerAction(TransportActions.Admin.Cluster.STATE, TransportClusterStateAction.class);, +        registerAction(TransportActions.Admin.Cluster.HEALTH, TransportClusterHealthAction.class);, +        registerAction(TransportActions.Admin.Cluster.UPDATE_SETTINGS, TransportClusterUpdateSettingsAction.class);, +        registerAction(TransportActions.Admin.Cluster.REROUTE, TransportClusterRerouteAction.class);, +        registerAction(TransportActions.Admin.Cluster.Ping.SINGLE, TransportSinglePingAction.class);, +        registerAction(TransportActions.Admin.Cluster.Ping.BROADCAST, TransportBroadcastPingAction.class);, +        registerAction(TransportActions.Admin.Cluster.Ping.REPLICATION, TransportReplicationPingAction.class,, +                TransportIndexReplicationPingAction.class, TransportShardReplicationPingAction.class);, +        registerAction(TransportActions.Admin.Indices.STATS, TransportIndicesStatsAction.class);, +        registerAction(TransportActions.Admin.Indices.STATUS, TransportIndicesStatusAction.class);, +        registerAction(TransportActions.Admin.Indices.SEGMENTS, TransportIndicesSegmentsAction.class);, +        registerAction(TransportActions.Admin.Indices.CREATE, TransportCreateIndexAction.class);, +        registerAction(TransportActions.Admin.Indices.DELETE, TransportDeleteIndexAction.class);, +        registerAction(TransportActions.Admin.Indices.OPEN, TransportOpenIndexAction.class);, +        registerAction(TransportActions.Admin.Indices.CLOSE, TransportCloseIndexAction.class);, +        registerAction(TransportActions.Admin.Indices.EXISTS, TransportIndicesExistsAction.class);, +        registerAction(TransportActions.Admin.Indices.Mapping.PUT, TransportPutMappingAction.class);, +        registerAction(TransportActions.Admin.Indices.Mapping.DELETE, TransportDeleteMappingAction.class);, +        registerAction(TransportActions.Admin.Indices.ALIASES, TransportIndicesAliasesAction.class);, +        registerAction(TransportActions.Admin.Indices.UPDATE_SETTINGS, TransportUpdateSettingsAction.class);, +        registerAction(TransportActions.Admin.Indices.ANALYZE, TransportAnalyzeAction.class);, +        registerAction(TransportActions.Admin.Indices.Template.PUT, TransportPutIndexTemplateAction.class);, +        registerAction(TransportActions.Admin.Indices.Template.DELETE, TransportDeleteIndexTemplateAction.class);, +        registerAction(TransportActions.Admin.Indices.Validate.QUERY, TransportValidateQueryAction.class);, +        registerAction(TransportActions.Admin.Indices.Gateway.SNAPSHOT, TransportGatewaySnapshotAction.class);, +        registerAction(TransportActions.Admin.Indices.REFRESH, TransportRefreshAction.class);, +        registerAction(TransportActions.Admin.Indices.FLUSH, TransportFlushAction.class);, +        registerAction(TransportActions.Admin.Indices.OPTIMIZE, TransportOptimizeAction.class);, +        registerAction(TransportActions.Admin.Indices.Cache.CLEAR, TransportClearIndicesCacheAction.class);, +        registerAction(TransportActions.INDEX, TransportIndexAction.class);, +        registerAction(TransportActions.GET, TransportGetAction.class);, +        registerAction(TransportActions.DELETE, TransportDeleteAction.class,, +                TransportIndexDeleteAction.class, TransportShardDeleteAction.class);, +        registerAction(TransportActions.COUNT, TransportCountAction.class);, +        registerAction(TransportActions.UPDATE, TransportUpdateAction.class);, +        registerAction(TransportActions.MULTI_GET, TransportMultiGetAction.class,, +                TransportShardMultiGetAction.class);, +        registerAction(TransportActions.BULK, TransportBulkAction.class,, +                TransportShardBulkAction.class);, +        registerAction(TransportActions.DELETE_BY_QUERY, TransportDeleteByQueryAction.class,, +                TransportIndexDeleteByQueryAction.class, TransportShardDeleteByQueryAction.class);, +        registerAction(TransportActions.SEARCH, TransportSearchAction.class,, +                TransportSearchCache.class,, +                TransportSearchDfsQueryThenFetchAction.class,, +                TransportSearchQueryThenFetchAction.class,, +                TransportSearchDfsQueryAndFetchAction.class,, +                TransportSearchQueryAndFetchAction.class,, +                TransportSearchScanAction.class, +        );, +        registerAction(TransportActions.SEARCH_SCROLL, TransportSearchScrollAction.class,, +                TransportSearchScrollScanAction.class,, +                TransportSearchScrollQueryThenFetchAction.class,, +                TransportSearchScrollQueryAndFetchAction.class, +        );, +        registerAction(TransportActions.MORE_LIKE_THIS, TransportMoreLikeThisAction.class);, +        registerAction(TransportActions.PERCOLATE, TransportPercolateAction.class);, +        MapBinder<String, BaseAction> actionsBinder, +                = MapBinder.newMapBinder(binder(), String.class, BaseAction.class);, +        for (Map.Entry<String, ActionEntry> entry : actions.entrySet()) {]