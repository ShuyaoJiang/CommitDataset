[+++ b/plugins/river/couchdb/src/main/java/org/elasticsearch/river/couchdb/CouchdbRiver.java, +import org.elasticsearch.common.collect.Maps;, +import org.elasticsearch.script.ExecutableScript;, +import org.elasticsearch.script.ScriptService;, +    private final ExecutableScript script;, +    private final Map<String, Object> scriptParams = Maps.newHashMap();, +, +    @Inject public CouchdbRiver(RiverName riverName, RiverSettings settings, @RiverIndexName String riverIndexName, Client client, ScriptService scriptService) {, +, +            if (couchSettings.containsKey("script")) {, +                script = scriptService.executable("js", couchSettings.get("script").toString(), Maps.newHashMap());, +            } else {, +                script = null;, +            }, +            script = null;, +        Map<String, Object> ctx;, +            ctx = XContentFactory.xContent(XContentType.JSON).createParser(s).mapAndClose();, +        if (ctx.containsKey("error")) {, +        String seq = ctx.get("seq").toString();, +        String id = ctx.get("id").toString();, +        if (script != null) {, +            scriptParams.put("ctx", ctx);, +            try {, +                script.run(scriptParams);, +            } catch (Exception e) {, +                logger.warn("failed to script process {}, ignoring", e, ctx);, +                return seq;, +            }, +        }, +, +        if (ctx.containsKey("ignore") && ctx.get("ignore").equals(Boolean.TRUE)) {, +            // ignore dock, +        } else if (ctx.containsKey("deleted") && ctx.get("deleted").equals(Boolean.TRUE)) {, +        } else if (ctx.containsKey("doc")) {, +            Map<String, Object> doc = (Map<String, Object>) ctx.get("doc");]