[+++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemRequest.java, +import org.elasticsearch.Version;, +import org.elasticsearch.action.DocWriteResponse;, +    protected BulkItemRequest(int id, DocWriteRequest request) {, +    // NOTE: protected for testing only, +    protected BulkItemResponse getPrimaryResponse() {, +    // NOTE: protected for testing only, +    protected void setPrimaryResponse(BulkItemResponse primaryResponse) {, +        if (in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) { // TODO remove once backported, +            boolean ignoreOnReplica = in.readBoolean();, +            if (ignoreOnReplica == false && primaryResponse != null) {, +                assert primaryResponse.isFailed() == false : "expected no failure on the primary response";, +            }, +        }, +        if (out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) { // TODO remove once backported, +            // old nodes expect updated version and version type on the request, +            if (primaryResponse != null) {, +                request.version(primaryResponse.getVersion());, +                request.versionType(request.versionType().versionTypeForReplicationAndRecovery());, +            } else {, +                DocWriteRequest.writeDocumentRequest(out, request);, +            }, +        } else {, +            DocWriteRequest.writeDocumentRequest(out, request);, +        }, +        if (out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) { // TODO remove once backported, +            if (primaryResponse != null) {, +                out.writeBoolean(primaryResponse.isFailed(), +                        || primaryResponse.getResponse().getResult() == DocWriteResponse.Result.NOOP);, +            } else {, +                out.writeBoolean(false);, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemRequest.java, +import org.elasticsearch.Version;, +import org.elasticsearch.action.DocWriteResponse;, +    protected BulkItemRequest(int id, DocWriteRequest request) {, +    // NOTE: protected for testing only, +    protected BulkItemResponse getPrimaryResponse() {, +    // NOTE: protected for testing only, +    protected void setPrimaryResponse(BulkItemResponse primaryResponse) {, +        if (in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) { // TODO remove once backported, +            boolean ignoreOnReplica = in.readBoolean();, +            if (ignoreOnReplica == false && primaryResponse != null) {, +                assert primaryResponse.isFailed() == false : "expected no failure on the primary response";, +            }, +        }, +        if (out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) { // TODO remove once backported, +            // old nodes expect updated version and version type on the request, +            if (primaryResponse != null) {, +                request.version(primaryResponse.getVersion());, +                request.versionType(request.versionType().versionTypeForReplicationAndRecovery());, +            } else {, +                DocWriteRequest.writeDocumentRequest(out, request);, +            }, +        } else {, +            DocWriteRequest.writeDocumentRequest(out, request);, +        }, +        if (out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) { // TODO remove once backported, +            if (primaryResponse != null) {, +                out.writeBoolean(primaryResponse.isFailed(), +                        || primaryResponse.getResponse().getResult() == DocWriteResponse.Result.NOOP);, +            } else {, +                out.writeBoolean(false);, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkShardRequest.java, +    public BulkShardRequest(ShardId shardId, RefreshPolicy refreshPolicy, BulkItemRequest[] items) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemRequest.java, +import org.elasticsearch.Version;, +import org.elasticsearch.action.DocWriteResponse;, +    protected BulkItemRequest(int id, DocWriteRequest request) {, +    // NOTE: protected for testing only, +    protected BulkItemResponse getPrimaryResponse() {, +    // NOTE: protected for testing only, +    protected void setPrimaryResponse(BulkItemResponse primaryResponse) {, +        if (in.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) { // TODO remove once backported, +            boolean ignoreOnReplica = in.readBoolean();, +            if (ignoreOnReplica == false && primaryResponse != null) {, +                assert primaryResponse.isFailed() == false : "expected no failure on the primary response";, +            }, +        }, +        if (out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) { // TODO remove once backported, +            // old nodes expect updated version and version type on the request, +            if (primaryResponse != null) {, +                request.version(primaryResponse.getVersion());, +                request.versionType(request.versionType().versionTypeForReplicationAndRecovery());, +            } else {, +                DocWriteRequest.writeDocumentRequest(out, request);, +            }, +        } else {, +            DocWriteRequest.writeDocumentRequest(out, request);, +        }, +        if (out.getVersion().before(Version.V_6_0_0_alpha1_UNRELEASED)) { // TODO remove once backported, +            if (primaryResponse != null) {, +                out.writeBoolean(primaryResponse.isFailed(), +                        || primaryResponse.getResponse().getResult() == DocWriteResponse.Result.NOOP);, +            } else {, +                out.writeBoolean(false);, +            }]