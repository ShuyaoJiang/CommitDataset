[+++ b/plugins/repository-hdfs/build.gradle, +import org.apache.tools.ant.taskdefs.condition.Os, +import java.nio.file.Files, +import java.nio.file.Path, +import java.nio.file.Paths, + , +  boolean fixtureSupported = false;, +  if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +    String nativePath = System.getenv("HADOOP_HOME"), +    if (nativePath != null) {, +      Path path = Paths.get(nativePath);, +      if (Files.isDirectory(path) &&, +          Files.exists(path.resolve("bin").resolve("winutils.exe")) &&, +          Files.exists(path.resolve("bin").resolve("hadoop.dll")) &&, +          Files.exists(path.resolve("bin").resolve("hdfs.dll"))) {, +        fixtureSupported = true, +      } else {, +        throw new IllegalStateException("HADOOP_HOME: " + path.toString() + " is invalid, does not contain hadoop native libraries in $HADOOP_HOME/bin");, +      }, +    }, +  } else {, +    fixtureSupported = true, +  }, +, +  if (fixtureSupported) {, +    dependsOn hdfsFixture, +  } else {, +    logger.warn("hdfsFixture unsupported, please set HADOOP_HOME and put HADOOP_HOME\\bin in PATH"), +++ b/plugins/repository-hdfs/build.gradle, +import org.apache.tools.ant.taskdefs.condition.Os, +import java.nio.file.Files, +import java.nio.file.Path, +import java.nio.file.Paths, + , +  boolean fixtureSupported = false;, +  if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +    String nativePath = System.getenv("HADOOP_HOME"), +    if (nativePath != null) {, +      Path path = Paths.get(nativePath);, +      if (Files.isDirectory(path) &&, +          Files.exists(path.resolve("bin").resolve("winutils.exe")) &&, +          Files.exists(path.resolve("bin").resolve("hadoop.dll")) &&, +          Files.exists(path.resolve("bin").resolve("hdfs.dll"))) {, +        fixtureSupported = true, +      } else {, +        throw new IllegalStateException("HADOOP_HOME: " + path.toString() + " is invalid, does not contain hadoop native libraries in $HADOOP_HOME/bin");, +      }, +    }, +  } else {, +    fixtureSupported = true, +  }, +, +  if (fixtureSupported) {, +    dependsOn hdfsFixture, +  } else {, +    logger.warn("hdfsFixture unsupported, please set HADOOP_HOME and put HADOOP_HOME\\bin in PATH"), +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/plugin/hadoop/hdfs/HdfsPlugin.java, +        // on unix: we still want to set this to something we control, because, +        // if the user happens to have HADOOP_HOME in their environment -> checkHadoopHome goes boom, +++ b/plugins/repository-hdfs/build.gradle, +import org.apache.tools.ant.taskdefs.condition.Os, +import java.nio.file.Files, +import java.nio.file.Path, +import java.nio.file.Paths, + , +  boolean fixtureSupported = false;, +  if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +    String nativePath = System.getenv("HADOOP_HOME"), +    if (nativePath != null) {, +      Path path = Paths.get(nativePath);, +      if (Files.isDirectory(path) &&, +          Files.exists(path.resolve("bin").resolve("winutils.exe")) &&, +          Files.exists(path.resolve("bin").resolve("hadoop.dll")) &&, +          Files.exists(path.resolve("bin").resolve("hdfs.dll"))) {, +        fixtureSupported = true, +      } else {, +        throw new IllegalStateException("HADOOP_HOME: " + path.toString() + " is invalid, does not contain hadoop native libraries in $HADOOP_HOME/bin");, +      }, +    }, +  } else {, +    fixtureSupported = true, +  }, +, +  if (fixtureSupported) {, +    dependsOn hdfsFixture, +  } else {, +    logger.warn("hdfsFixture unsupported, please set HADOOP_HOME and put HADOOP_HOME\\bin in PATH"), +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/plugin/hadoop/hdfs/HdfsPlugin.java, +        // on unix: we still want to set this to something we control, because, +        // if the user happens to have HADOOP_HOME in their environment -> checkHadoopHome goes boom, +++ b/test/fixtures/hdfs-fixture/src/main/java/hdfs/MiniHDFS.java, +        if (System.getenv("HADOOP_HOME") == null) {, +        }]