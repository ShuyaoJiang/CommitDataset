[+++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import static org.elasticsearch.common.settings.ImmutableSettings.Builder.EMPTY_SETTINGS;, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import static org.elasticsearch.common.settings.ImmutableSettings.Builder.EMPTY_SETTINGS;, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import static org.elasticsearch.common.settings.ImmutableSettings.Builder.EMPTY_SETTINGS;, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public MetaDataCreateIndexService(Settings settings, Environment environment, ThreadPool threadPool, ClusterService clusterService, IndicesService indicesService,, +                                      AllocationService allocationService, MetaDataService metaDataService, Version version, @RiverIndexName String riverIndexName,, +                                      AliasValidator aliasValidator, Set<IndexTemplateFilter> indexTemplateFilters) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import static org.elasticsearch.common.settings.ImmutableSettings.Builder.EMPTY_SETTINGS;, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public MetaDataCreateIndexService(Settings settings, Environment environment, ThreadPool threadPool, ClusterService clusterService, IndicesService indicesService,, +                                      AllocationService allocationService, MetaDataService metaDataService, Version version, @RiverIndexName String riverIndexName,, +                                      AliasValidator aliasValidator, Set<IndexTemplateFilter> indexTemplateFilters) {, +++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.apache.lucene.store.Directory;, +import org.apache.lucene.store.FSDirectory;, +import org.apache.lucene.store.Lock;, +import org.apache.lucene.store.LockObtainFailedException;, +import org.apache.lucene.store.NativeFSLockFactory;, +import java.util.concurrent.*;, +    public void deleteShardDirectorySafe(ShardId shardId) throws IOException {, +        final Path[] paths = shardPaths(shardId);, +    public void deleteIndexDirectorySafe(Index index) throws IOException {, +            final Path[] indexPaths = new Path[nodeIndicesPaths.length];, +            for (int i = 0; i < indexPaths.length; i++) {, +                indexPaths[i] = nodeIndicesPaths[i].resolve(index.name());, +            }, +, +     * Returns all data paths for the given index., +    public Path[] indexPaths(Index index) {, +     * Returns all data paths for the given shards ID, +    public Path[] shardPaths(ShardId shardId) {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import static org.elasticsearch.common.settings.ImmutableSettings.Builder.EMPTY_SETTINGS;, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public MetaDataCreateIndexService(Settings settings, Environment environment, ThreadPool threadPool, ClusterService clusterService, IndicesService indicesService,, +                                      AllocationService allocationService, MetaDataService metaDataService, Version version, @RiverIndexName String riverIndexName,, +                                      AliasValidator aliasValidator, Set<IndexTemplateFilter> indexTemplateFilters) {, +++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.apache.lucene.store.Directory;, +import org.apache.lucene.store.FSDirectory;, +import org.apache.lucene.store.Lock;, +import org.apache.lucene.store.LockObtainFailedException;, +import org.apache.lucene.store.NativeFSLockFactory;, +import java.util.concurrent.*;, +    public void deleteShardDirectorySafe(ShardId shardId) throws IOException {, +        final Path[] paths = shardPaths(shardId);, +    public void deleteIndexDirectorySafe(Index index) throws IOException {, +            final Path[] indexPaths = new Path[nodeIndicesPaths.length];, +            for (int i = 0; i < indexPaths.length; i++) {, +                indexPaths[i] = nodeIndicesPaths[i].resolve(index.name());, +            }, +, +     * Returns all data paths for the given index., +    public Path[] indexPaths(Index index) {, +     * Returns all data paths for the given shards ID, +    public Path[] shardPaths(ShardId shardId) {, +++ b/src/main/java/org/elasticsearch/gateway/GatewayMetaState.java, +import java.nio.file.DirectoryStream;, +import java.nio.file.Files;, +import java.nio.file.Path;, +                        currentIndexMetaData = loadIndexState(indexMetaData.index());, +                            MetaDataStateFormat.deleteMetaState(nodeEnv.indexPaths(idx));, +                            nodeEnv.deleteIndexDirectorySafe(idx);, +                            final IndexMetaData indexMetaData = loadIndexState(indexName);, +                                        nodeEnv.deleteIndexDirectorySafe(index);, +                                        nodeEnv.deleteIndexDirectorySafe(index);, +                                    danglingIndices.put(indexName, new DanglingIndex(indexName, threadPool.schedule(danglingTimeout, ThreadPool.Names.SAME, new RemoveDanglingIndex(index))));, +                        indexMetaData = loadIndexState(indexName);, +            writer.write(indexMetaData, INDEX_STATE_FILE_PREFIX, indexMetaData.version(), nodeEnv.indexPaths(new Index(indexMetaData.index())));, +            IndexMetaData indexMetaData = loadIndexState(index);, +    private IndexMetaData loadIndexState(String index) throws IOException {, +        return MetaDataStateFormat.loadLatestState(logger, indexStateFormat(format, formatParams, true), INDEX_STATE_FILE_PATTERN, "[" + index + "]", nodeEnv.indexPaths(new Index(index)));, +        RemoveDanglingIndex(Index index) {, +                    MetaDataStateFormat.deleteMetaState(nodeEnv.indexPaths(index));, +                    nodeEnv.deleteIndexDirectorySafe(index);, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import static org.elasticsearch.common.settings.ImmutableSettings.Builder.EMPTY_SETTINGS;, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    public MetaDataCreateIndexService(Settings settings, Environment environment, ThreadPool threadPool, ClusterService clusterService, IndicesService indicesService,, +                                      AllocationService allocationService, MetaDataService metaDataService, Version version, @RiverIndexName String riverIndexName,, +                                      AliasValidator aliasValidator, Set<IndexTemplateFilter> indexTemplateFilters) {, +++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.apache.lucene.store.Directory;, +import org.apache.lucene.store.FSDirectory;, +import org.apache.lucene.store.Lock;, +import org.apache.lucene.store.LockObtainFailedException;, +import org.apache.lucene.store.NativeFSLockFactory;, +import java.util.concurrent.*;, +    public void deleteShardDirectorySafe(ShardId shardId) throws IOException {, +        final Path[] paths = shardPaths(shardId);, +    public void deleteIndexDirectorySafe(Index index) throws IOException {]