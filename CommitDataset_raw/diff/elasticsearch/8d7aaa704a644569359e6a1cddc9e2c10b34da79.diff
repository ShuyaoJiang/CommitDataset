[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +    public static boolean deleteRecursively(File[] roots) {, +        boolean deleted = true;, +        for (File root : roots) {, +            deleted &= deleteRecursively(root);, +        }, +        return deleted;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +    public static boolean deleteRecursively(File[] roots) {, +        boolean deleted = true;, +        for (File root : roots) {, +            deleted &= deleteRecursively(root);, +        }, +        return deleted;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +            remove(setting);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +    public static boolean deleteRecursively(File[] roots) {, +        boolean deleted = true;, +        for (File root : roots) {, +            deleted &= deleteRecursively(root);, +        }, +        return deleted;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +            remove(setting);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/env/Environment.java, +    private final File[] dataFiles;, +    private final File[] dataWithClusterFiles;, +        String[] dataPaths = settings.getAsArray("path.data");, +        if (dataPaths.length > 0) {, +            dataFiles = new File[dataPaths.length];, +            dataWithClusterFiles = new File[dataPaths.length];, +            for (int i = 0; i < dataPaths.length; i++) {, +                dataFiles[i] = new File(dataPaths[i]);, +                dataWithClusterFiles[i] = new File(dataFiles[i], ClusterName.clusterNameFromSettings(settings).value());, +        } else {, +            dataFiles = new File[]{new File(homeFile, "data")};, +            dataWithClusterFiles = new File[]{new File(new File(homeFile, "data"), ClusterName.clusterNameFromSettings(settings).value())};, +        }, +    public File[] dataFiles() {, +        return dataFiles;, +    public File[] dataWithClusterFiles() {, +        return dataWithClusterFiles;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/FileSystemUtils.java, +    public static boolean deleteRecursively(File[] roots) {, +        boolean deleted = true;, +        for (File root : roots) {, +            deleted &= deleteRecursively(root);, +        }, +        return deleted;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +            remove(setting);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/env/Environment.java, +    private final File[] dataFiles;, +    private final File[] dataWithClusterFiles;, +        String[] dataPaths = settings.getAsArray("path.data");, +        if (dataPaths.length > 0) {, +            dataFiles = new File[dataPaths.length];, +            dataWithClusterFiles = new File[dataPaths.length];, +            for (int i = 0; i < dataPaths.length; i++) {, +                dataFiles[i] = new File(dataPaths[i]);, +                dataWithClusterFiles[i] = new File(dataFiles[i], ClusterName.clusterNameFromSettings(settings).value());, +        } else {, +            dataFiles = new File[]{new File(homeFile, "data")};, +            dataWithClusterFiles = new File[]{new File(new File(homeFile, "data"), ClusterName.clusterNameFromSettings(settings).value())};, +        }, +    public File[] dataFiles() {, +        return dataFiles;, +    public File[] dataWithClusterFiles() {, +        return dataWithClusterFiles;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +    private final File[] nodeFiles;, +    private final File[] nodeIndicesLocations;, +    private final Lock[] locks;, +            nodeFiles = null;, +            nodeIndicesLocations = null;, +            locks = null;, +        File[] nodesFiles = new File[environment.dataWithClusterFiles().length];, +        Lock[] locks = new Lock[environment.dataWithClusterFiles().length];, +        for (int possibleLockId = 0; possibleLockId < 50; possibleLockId++) {, +            for (int dirIndex = 0; dirIndex < environment.dataWithClusterFiles().length; dirIndex++) {, +                File dir = new File(new File(environment.dataWithClusterFiles()[dirIndex], "nodes"), Integer.toString(possibleLockId));, +                        locks[dirIndex] = tmpLock;, +                        nodesFiles[dirIndex] = dir;, +                        localNodeId = possibleLockId;, +                        // release all the ones that were obtained up until now, +                        for (int i = 0; i < locks.length; i++) {, +                            if (locks[i] != null) {, +                                try {, +                                    locks[i].release();, +                                } catch (Exception e1) {, +                                    // ignore]