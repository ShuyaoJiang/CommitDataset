[+++ b/TESTING.asciidoc, +++ b/TESTING.asciidoc, +++ b/build.gradle, +String currentVersion = VersionProperties.elasticsearch.minus('-SNAPSHOT'), +int prevMajor = Integer.parseInt(currentVersion.split('\\.')[0]) - 1, +List<String> versions = [], +    String versionStr = "${major}.${minor}.${bugfix}", +    if (currentVersion != versionStr) {, +      versions.add(versionStr), +if (versions.toSorted() != versions) {, +  throw new GradleException('Versions.java contains out of order version constants'), +if (currentVersion.split('\\.')[2].split('-')[0] == '0') {, +  // and the bwc-zip distribution will checkout and build that version. The version parsing, +  // logic above pulls the bugfix version, and then strips off any prerelease version, +  versions[-1] += '-SNAPSHOT', +    "org.elasticsearch.distribution.zip:elasticsearch:${wireCompatVersions[-1]}": ':distribution:bwc-zip',, +++ b/TESTING.asciidoc, +++ b/build.gradle, +String currentVersion = VersionProperties.elasticsearch.minus('-SNAPSHOT'), +int prevMajor = Integer.parseInt(currentVersion.split('\\.')[0]) - 1, +List<String> versions = [], +    String versionStr = "${major}.${minor}.${bugfix}", +    if (currentVersion != versionStr) {, +      versions.add(versionStr), +if (versions.toSorted() != versions) {, +  throw new GradleException('Versions.java contains out of order version constants'), +if (currentVersion.split('\\.')[2].split('-')[0] == '0') {, +  // and the bwc-zip distribution will checkout and build that version. The version parsing, +  // logic above pulls the bugfix version, and then strips off any prerelease version, +  versions[-1] += '-SNAPSHOT', +    "org.elasticsearch.distribution.zip:elasticsearch:${wireCompatVersions[-1]}": ':distribution:bwc-zip',, +++ /dev/null, +++ b/TESTING.asciidoc, +++ b/build.gradle, +String currentVersion = VersionProperties.elasticsearch.minus('-SNAPSHOT'), +int prevMajor = Integer.parseInt(currentVersion.split('\\.')[0]) - 1, +List<String> versions = [], +    String versionStr = "${major}.${minor}.${bugfix}", +    if (currentVersion != versionStr) {, +      versions.add(versionStr), +if (versions.toSorted() != versions) {, +  throw new GradleException('Versions.java contains out of order version constants'), +if (currentVersion.split('\\.')[2].split('-')[0] == '0') {, +  // and the bwc-zip distribution will checkout and build that version. The version parsing, +  // logic above pulls the bugfix version, and then strips off any prerelease version, +  versions[-1] += '-SNAPSHOT', +    "org.elasticsearch.distribution.zip:elasticsearch:${wireCompatVersions[-1]}": ':distribution:bwc-zip',, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        String distroConfigName = "${prefix}_elasticsearchDistro", +        Configuration currentDistro = project.configurations.create(distroConfigName), +        if (config.bwcVersion != null && config.numBwcNodes > 0) {, +            project.configurations {, +                elasticsearchBwcDistro, +                elasticsearchBwcPlugins, +            configureDistributionDependency(project, config.distribution, project.configurations.elasticsearchBwcDistro, config.bwcVersion), +            for (Map.Entry<String, Project> entry : config.plugins.entrySet()) {, +                configureBwcPluginDependency("${prefix}_elasticsearchBwcPlugins", project, entry.getValue(),, +                        project.configurations.elasticsearchBwcPlugins, config.bwcVersion), +            }, +            project.configurations.elasticsearchBwcDistro.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS), +            project.configurations.elasticsearchBwcPlugins.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS), +                distro = project.configurations.elasticsearchBwcDistro, +                setup = configureCopyPluginsTask(taskName(prefix, node, 'copyPlugins'), project, setup, node), +                setup = configureCopyBwcPluginsTask(taskName(prefix, node, 'copyBwcPlugins'), project, setup, node), +            setup = configureInstallPluginTask(taskName(prefix, node, actionName), project, setup, node, plugin.getValue()), +    static Task configureCopyPluginsTask(String name, Project project, Task setup, NodeInfo node) {, +            String configurationName = "_plugin_${pluginProject.path}", +    static Task configureCopyBwcPluginsTask(String name, Project project, Task setup, NodeInfo node) {, +            String configurationName = "_plugin_bwc_${pluginProject.path}", +            Dependency dep = project.configurations.elasticsearchBwcPlugins.dependencies.find {, +            from project.configurations.elasticsearchBwcPlugins, +    static Task configureInstallPluginTask(String name, Project project, Task setup, NodeInfo node, Project plugin) {, +            pluginZip = project.configurations.getByName("_plugin_bwc_${plugin.path}"), +            pluginZip = project.configurations.getByName("_plugin_${plugin.path}"), +++ b/TESTING.asciidoc, +++ b/build.gradle, +String currentVersion = VersionProperties.elasticsearch.minus('-SNAPSHOT'), +int prevMajor = Integer.parseInt(currentVersion.split('\\.')[0]) - 1, +List<String> versions = [], +    String versionStr = "${major}.${minor}.${bugfix}", +    if (currentVersion != versionStr) {, +      versions.add(versionStr), +if (versions.toSorted() != versions) {, +  throw new GradleException('Versions.java contains out of order version constants'), +if (currentVersion.split('\\.')[2].split('-')[0] == '0') {, +  // and the bwc-zip distribution will checkout and build that version. The version parsing, +  // logic above pulls the bugfix version, and then strips off any prerelease version, +  versions[-1] += '-SNAPSHOT', +    "org.elasticsearch.distribution.zip:elasticsearch:${wireCompatVersions[-1]}": ':distribution:bwc-zip',, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        String distroConfigName = "${prefix}_elasticsearchDistro", +        Configuration currentDistro = project.configurations.create(distroConfigName), +        if (config.bwcVersion != null && config.numBwcNodes > 0) {, +            project.configurations {, +                elasticsearchBwcDistro, +                elasticsearchBwcPlugins, +            configureDistributionDependency(project, config.distribution, project.configurations.elasticsearchBwcDistro, config.bwcVersion), +            for (Map.Entry<String, Project> entry : config.plugins.entrySet()) {]