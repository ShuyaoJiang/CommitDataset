[+++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +import org.elasticsearch.common.io.stream.StreamInput;, +        StreamInput header = StreamInput.wrap(headerRef.toBytesArray());, +        private final StreamInput perFieldTermVectorInput;, +            this.perFieldTermVectorInput = StreamInput.wrap(termVectors.toBytesArray());, +                private void writeInfos(final StreamInput input) throws IOException {, +    int readPotentiallyNegativeVInt(StreamInput stream) throws IOException {, +    long readPotentiallyNegativeVLong(StreamInput stream) throws IOException {, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +import org.elasticsearch.common.io.stream.StreamInput;, +        StreamInput header = StreamInput.wrap(headerRef.toBytesArray());, +        private final StreamInput perFieldTermVectorInput;, +            this.perFieldTermVectorInput = StreamInput.wrap(termVectors.toBytesArray());, +                private void writeInfos(final StreamInput input) throws IOException {, +    int readPotentiallyNegativeVInt(StreamInput stream) throws IOException {, +    long readPotentiallyNegativeVLong(StreamInput stream) throws IOException {, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            return readFrom(StreamInput.wrap(data), localNode);, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +import org.elasticsearch.common.io.stream.StreamInput;, +        StreamInput header = StreamInput.wrap(headerRef.toBytesArray());, +        private final StreamInput perFieldTermVectorInput;, +            this.perFieldTermVectorInput = StreamInput.wrap(termVectors.toBytesArray());, +                private void writeInfos(final StreamInput input) throws IOException {, +    int readPotentiallyNegativeVInt(StreamInput stream) throws IOException {, +    long readPotentiallyNegativeVLong(StreamInput stream) throws IOException {, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            return readFrom(StreamInput.wrap(data), localNode);, +++ b/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +        return StreamInput.wrap(bytes, offset, length);, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +import org.elasticsearch.common.io.stream.StreamInput;, +        StreamInput header = StreamInput.wrap(headerRef.toBytesArray());, +        private final StreamInput perFieldTermVectorInput;, +            this.perFieldTermVectorInput = StreamInput.wrap(termVectors.toBytesArray());, +                private void writeInfos(final StreamInput input) throws IOException {, +    int readPotentiallyNegativeVInt(StreamInput stream) throws IOException {, +    long readPotentiallyNegativeVLong(StreamInput stream) throws IOException {, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            return readFrom(StreamInput.wrap(data), localNode);, +++ b/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +        return StreamInput.wrap(bytes, offset, length);, +++ b/src/main/java/org/elasticsearch/common/io/stream/ByteBufferStreamInput.java, +        if (buffer.remaining() < len) {, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +import org.elasticsearch.common.io.stream.StreamInput;, +        StreamInput header = StreamInput.wrap(headerRef.toBytesArray());, +        private final StreamInput perFieldTermVectorInput;, +            this.perFieldTermVectorInput = StreamInput.wrap(termVectors.toBytesArray());, +                private void writeInfos(final StreamInput input) throws IOException {, +    int readPotentiallyNegativeVInt(StreamInput stream) throws IOException {, +    long readPotentiallyNegativeVLong(StreamInput stream) throws IOException {, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            return readFrom(StreamInput.wrap(data), localNode);, +++ b/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +        return StreamInput.wrap(bytes, offset, length);, +++ b/src/main/java/org/elasticsearch/common/io/stream/ByteBufferStreamInput.java, +        if (buffer.remaining() < len) {, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +import org.elasticsearch.common.io.stream.StreamInput;, +        StreamInput header = StreamInput.wrap(headerRef.toBytesArray());, +        private final StreamInput perFieldTermVectorInput;, +            this.perFieldTermVectorInput = StreamInput.wrap(termVectors.toBytesArray());, +                private void writeInfos(final StreamInput input) throws IOException {, +    int readPotentiallyNegativeVInt(StreamInput stream) throws IOException {, +    long readPotentiallyNegativeVLong(StreamInput stream) throws IOException {, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            return readFrom(StreamInput.wrap(data), localNode);, +++ b/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +        return StreamInput.wrap(bytes, offset, length);, +++ b/src/main/java/org/elasticsearch/common/io/stream/ByteBufferStreamInput.java, +        if (buffer.remaining() < len) {, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import java.io.ByteArrayInputStream;, +, +    public static StreamInput wrap(BytesReference reference) {, +        if (reference.hasArray() == false) {, +            reference = reference.toBytesArray();, +        }, +        return wrap(reference.array(), reference.arrayOffset(), reference.length());, +    }, +, +    public static StreamInput wrap(byte[] bytes) {, +        return wrap(bytes, 0, bytes.length);, +    }, +, +    public static StreamInput wrap(byte[] bytes, int offset, int length) {, +        return new InputStreamStreamInput(new ByteArrayInputStream(bytes, offset, length));, +    }, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +import org.elasticsearch.common.io.stream.StreamInput;, +        StreamInput header = StreamInput.wrap(headerRef.toBytesArray());, +        private final StreamInput perFieldTermVectorInput;, +            this.perFieldTermVectorInput = StreamInput.wrap(termVectors.toBytesArray());, +                private void writeInfos(final StreamInput input) throws IOException {, +    int readPotentiallyNegativeVInt(StreamInput stream) throws IOException {, +    long readPotentiallyNegativeVLong(StreamInput stream) throws IOException {, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java]