[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/user/privileges/Role.java, +                MANAGE_SECURITY, MANAGE_SAML, MANAGE_TOKEN, MANAGE_PIPELINE, MANAGE_CCR, READ_CCR };, +                DELETE_INDEX, CREATE_INDEX, VIEW_INDEX_METADATA, MANAGE_FOLLOW_INDEX };, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/user/privileges/Role.java, +                MANAGE_SECURITY, MANAGE_SAML, MANAGE_TOKEN, MANAGE_PIPELINE, MANAGE_CCR, READ_CCR };, +                DELETE_INDEX, CREATE_INDEX, VIEW_INDEX_METADATA, MANAGE_FOLLOW_INDEX };, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/WaitForRefreshAndCloseIT.java, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.client.Request;, +@LuceneTestCase.AwaitsFix(bugUrl = "to be created"), +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/user/privileges/Role.java, +                MANAGE_SECURITY, MANAGE_SAML, MANAGE_TOKEN, MANAGE_PIPELINE, MANAGE_CCR, READ_CCR };, +                DELETE_INDEX, CREATE_INDEX, VIEW_INDEX_METADATA, MANAGE_FOLLOW_INDEX };, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/WaitForRefreshAndCloseIT.java, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.client.Request;, +@LuceneTestCase.AwaitsFix(bugUrl = "to be created"), +++ b/distribution/src/config/jvm.options, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/user/privileges/Role.java, +                MANAGE_SECURITY, MANAGE_SAML, MANAGE_TOKEN, MANAGE_PIPELINE, MANAGE_CCR, READ_CCR };, +                DELETE_INDEX, CREATE_INDEX, VIEW_INDEX_METADATA, MANAGE_FOLLOW_INDEX };, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/WaitForRefreshAndCloseIT.java, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.client.Request;, +@LuceneTestCase.AwaitsFix(bugUrl = "to be created"), +++ b/distribution/src/config/jvm.options, +++ b/docs/reference/setup/sysconfig/dns-cache.asciidoc, +place, the JVM defaults to caching positive hostname resolutions, +indefinitely. If your Elasticsearch nodes rely on DNS in an environment where, +DNS resolutions vary with time (e.g., for node-to-node discovery) then you might, +want to modify the default JVM behavior.  This can be modified by adding, +to your, +security policy]. Any hosts that fail to resolve will be logged. Note also that, +with the Java security manager in place, the JVM defaults to caching negative, +hostname resolutions for ten seconds. This can be modified by adding, +http://docs.oracle.com/javase/8/docs/technotes/guides/net/properties.html[`networkaddress.cache.negative.ttl=<timeout>`], +to your, +http://docs.oracle.com/javase/8/docs/technotes/guides/security/PolicyFiles.html[Java, +security policy]., +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/user/privileges/Role.java, +                MANAGE_SECURITY, MANAGE_SAML, MANAGE_TOKEN, MANAGE_PIPELINE, MANAGE_CCR, READ_CCR };, +                DELETE_INDEX, CREATE_INDEX, VIEW_INDEX_METADATA, MANAGE_FOLLOW_INDEX };, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/WaitForRefreshAndCloseIT.java, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.client.Request;, +@LuceneTestCase.AwaitsFix(bugUrl = "to be created"), +++ b/distribution/src/config/jvm.options, +++ b/docs/reference/setup/sysconfig/dns-cache.asciidoc, +place, the JVM defaults to caching positive hostname resolutions, +indefinitely. If your Elasticsearch nodes rely on DNS in an environment where, +DNS resolutions vary with time (e.g., for node-to-node discovery) then you might, +want to modify the default JVM behavior.  This can be modified by adding, +to your, +security policy]. Any hosts that fail to resolve will be logged. Note also that, +with the Java security manager in place, the JVM defaults to caching negative, +hostname resolutions for ten seconds. This can be modified by adding, +http://docs.oracle.com/javase/8/docs/technotes/guides/net/properties.html[`networkaddress.cache.negative.ttl=<timeout>`], +to your, +http://docs.oracle.com/javase/8/docs/technotes/guides/security/PolicyFiles.html[Java, +security policy]., +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/CloseIndexClusterStateUpdateRequest.java, +    public CloseIndexClusterStateUpdateRequest() {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/user/privileges/Role.java, +                MANAGE_SECURITY, MANAGE_SAML, MANAGE_TOKEN, MANAGE_PIPELINE, MANAGE_CCR, READ_CCR };, +                DELETE_INDEX, CREATE_INDEX, VIEW_INDEX_METADATA, MANAGE_FOLLOW_INDEX };, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/WaitForRefreshAndCloseIT.java, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.client.Request;, +@LuceneTestCase.AwaitsFix(bugUrl = "to be created"), +++ b/distribution/src/config/jvm.options, +++ b/docs/reference/setup/sysconfig/dns-cache.asciidoc, +place, the JVM defaults to caching positive hostname resolutions, +indefinitely. If your Elasticsearch nodes rely on DNS in an environment where, +DNS resolutions vary with time (e.g., for node-to-node discovery) then you might, +want to modify the default JVM behavior.  This can be modified by adding, +to your, +security policy]. Any hosts that fail to resolve will be logged. Note also that, +with the Java security manager in place, the JVM defaults to caching negative, +hostname resolutions for ten seconds. This can be modified by adding, +http://docs.oracle.com/javase/8/docs/technotes/guides/net/properties.html[`networkaddress.cache.negative.ttl=<timeout>`], +to your, +http://docs.oracle.com/javase/8/docs/technotes/guides/security/PolicyFiles.html[Java, +security policy]., +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/CloseIndexClusterStateUpdateRequest.java, +    public CloseIndexClusterStateUpdateRequest() {, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +, +        final CloseIndexClusterStateUpdateRequest closeRequest = new CloseIndexClusterStateUpdateRequest(), +            .ackTimeout(request.timeout()), +            .masterNodeTimeout(request.masterNodeTimeout()), +        indexStateService.closeIndices(closeRequest, new ActionListener<AcknowledgedResponse>() {, +            public void onResponse(final AcknowledgedResponse response) {, +                listener.onResponse(response);, +            public void onFailure(final Exception t) {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/user/privileges/Role.java, +                MANAGE_SECURITY, MANAGE_SAML, MANAGE_TOKEN, MANAGE_PIPELINE, MANAGE_CCR, READ_CCR };, +                DELETE_INDEX, CREATE_INDEX, VIEW_INDEX_METADATA, MANAGE_FOLLOW_INDEX };, +++ b/distribution/archives/integ-test-zip/src/test/java/org/elasticsearch/test/rest/WaitForRefreshAndCloseIT.java, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.client.Request;]