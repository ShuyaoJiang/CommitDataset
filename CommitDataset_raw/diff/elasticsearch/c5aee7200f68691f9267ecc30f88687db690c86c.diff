[+++ b/src/test/java/org/elasticsearch/index/search/child/BitSetCollector.java, +package org.elasticsearch.index.search.child;, +, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.util.FixedBitSet;, +import org.elasticsearch.common.lucene.search.NoopCollector;, +, +import java.io.IOException;, +, +class BitSetCollector extends NoopCollector {, +, +    final FixedBitSet result;, +    int docBase;, +, +    BitSetCollector(int topLevelMaxDoc) {, +        this.result = new FixedBitSet(topLevelMaxDoc);, +    }, +, +    @Override, +    public void collect(int doc) throws IOException {, +        result.set(docBase + doc);, +    }, +, +    @Override, +    public void setNextReader(AtomicReaderContext context) throws IOException {, +        docBase = context.docBase;, +    }, +, +    FixedBitSet getResult() {, +        return result;, +    }, +, +}, +++ b/src/test/java/org/elasticsearch/index/search/child/BitSetCollector.java, +package org.elasticsearch.index.search.child;, +, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.util.FixedBitSet;, +import org.elasticsearch.common.lucene.search.NoopCollector;, +, +import java.io.IOException;, +, +class BitSetCollector extends NoopCollector {, +, +    final FixedBitSet result;, +    int docBase;, +, +    BitSetCollector(int topLevelMaxDoc) {, +        this.result = new FixedBitSet(topLevelMaxDoc);, +    }, +, +    @Override, +    public void collect(int doc) throws IOException {, +        result.set(docBase + doc);, +    }, +, +    @Override, +    public void setNextReader(AtomicReaderContext context) throws IOException {, +        docBase = context.docBase;, +    }, +, +    FixedBitSet getResult() {, +        return result;, +    }, +, +}, +++ b/src/test/java/org/elasticsearch/index/search/child/ChildrenConstantScoreQueryTests.java, +import org.apache.lucene.search.DocIdSetIterator;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.TermQuery;, +        int numUniqueChildValues = 1 + random().nextInt(TEST_NIGHTLY ? 10000 : 1000);, +        int numParentDocs = 1 + random().nextInt(TEST_NIGHTLY ? 20000 : 1000);, +        ObjectObjectOpenHashMap<String, NavigableSet<String>> childValueToParentIds = new ObjectObjectOpenHashMap<String, NavigableSet<String>>();, +        ((TestSearchContext) SearchContext.current()).setSearcher(new ContextIndexSearcher(SearchContext.current(), engineSearcher));, +            assertBitSet(actualResult, expectedResult, searcher);, +    static void assertBitSet(FixedBitSet actual, FixedBitSet expected, IndexSearcher searcher) throws IOException {, +    static String reason(FixedBitSet actual, FixedBitSet expected, IndexSearcher indexSearcher) throws IOException {, +++ b/src/test/java/org/elasticsearch/index/search/child/BitSetCollector.java, +package org.elasticsearch.index.search.child;, +, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.util.FixedBitSet;, +import org.elasticsearch.common.lucene.search.NoopCollector;, +, +import java.io.IOException;, +, +class BitSetCollector extends NoopCollector {, +, +    final FixedBitSet result;, +    int docBase;, +, +    BitSetCollector(int topLevelMaxDoc) {, +        this.result = new FixedBitSet(topLevelMaxDoc);, +    }, +, +    @Override, +    public void collect(int doc) throws IOException {, +        result.set(docBase + doc);, +    }]