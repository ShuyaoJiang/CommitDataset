[+++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java, +    protected static Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> buildRemoteClustersDynamicConfig(, +            final Settings settings) {, +        final Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> remoteSeeds =, +        final Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> searchRemoteSeeds =, +    private static Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> buildRemoteClustersDynamicConfig(, +                    List<Tuple<String, Supplier<DiscoveryNode>>> nodes = new ArrayList<>(addresses.size());, +                        nodes.add(Tuple.tuple(address, () -> buildSeedNode(clusterName, address, proxyMode)));, +    static InetSocketAddress parseSeedAddress(String remoteHost) {, +        final Tuple<String, Integer> hostPort = parseHostPort(remoteHost);, +        final String host = hostPort.v1();, +        assert hostPort.v2() != null : remoteHost;, +        final int port = hostPort.v2();, +        return new InetSocketAddress(hostAddress, port);, +    }, +, +    public static Tuple<String, Integer> parseHostPort(final String remoteHost) {, +        final String host = remoteHost.substring(0, indexOfPortSeparator(remoteHost));, +        final int port = parsePort(remoteHost);, +        return Tuple.tuple(host, port);, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java, +    protected static Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> buildRemoteClustersDynamicConfig(, +            final Settings settings) {, +        final Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> remoteSeeds =, +        final Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> searchRemoteSeeds =, +    private static Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> buildRemoteClustersDynamicConfig(, +                    List<Tuple<String, Supplier<DiscoveryNode>>> nodes = new ArrayList<>(addresses.size());, +                        nodes.add(Tuple.tuple(address, () -> buildSeedNode(clusterName, address, proxyMode)));, +    static InetSocketAddress parseSeedAddress(String remoteHost) {, +        final Tuple<String, Integer> hostPort = parseHostPort(remoteHost);, +        final String host = hostPort.v1();, +        assert hostPort.v2() != null : remoteHost;, +        final int port = hostPort.v2();, +        return new InetSocketAddress(hostAddress, port);, +    }, +, +    public static Tuple<String, Integer> parseHostPort(final String remoteHost) {, +        final String host = remoteHost.substring(0, indexOfPortSeparator(remoteHost));, +        final int port = parsePort(remoteHost);, +        return Tuple.tuple(host, port);, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterConnection.java, +import org.elasticsearch.common.collect.Tuple;, +    private volatile List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes;, +    RemoteClusterConnection(Settings settings, String clusterAlias, List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,, +    RemoteClusterConnection(Settings settings, String clusterAlias, List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,, +    synchronized void updateSeedNodes(, +            final String proxyAddress,, +            final List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,, +            final ActionListener<Void> connectListener) {, +                    collectRemoteNodes(seedNodes.stream().map(Tuple::v2).iterator(), transportService, connectionManager, listener);, +        return new RemoteConnectionInfo(, +                clusterAlias,, +                seedNodes.stream().map(Tuple::v1).collect(Collectors.toList()),, +                maxNumRemoteConnections,, +                connectedNodes.size(),, +                initialConnectionTimeout,, +                skipUnavailable);, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java, +    protected static Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> buildRemoteClustersDynamicConfig(, +            final Settings settings) {, +        final Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> remoteSeeds =, +        final Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> searchRemoteSeeds =, +    private static Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> buildRemoteClustersDynamicConfig(, +                    List<Tuple<String, Supplier<DiscoveryNode>>> nodes = new ArrayList<>(addresses.size());, +                        nodes.add(Tuple.tuple(address, () -> buildSeedNode(clusterName, address, proxyMode)));, +    static InetSocketAddress parseSeedAddress(String remoteHost) {, +        final Tuple<String, Integer> hostPort = parseHostPort(remoteHost);, +        final String host = hostPort.v1();, +        assert hostPort.v2() != null : remoteHost;, +        final int port = hostPort.v2();, +        return new InetSocketAddress(hostAddress, port);, +    }, +, +    public static Tuple<String, Integer> parseHostPort(final String remoteHost) {, +        final String host = remoteHost.substring(0, indexOfPortSeparator(remoteHost));, +        final int port = parsePort(remoteHost);, +        return Tuple.tuple(host, port);, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterConnection.java, +import org.elasticsearch.common.collect.Tuple;, +    private volatile List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes;, +    RemoteClusterConnection(Settings settings, String clusterAlias, List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,, +    RemoteClusterConnection(Settings settings, String clusterAlias, List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,, +    synchronized void updateSeedNodes(, +            final String proxyAddress,, +            final List<Tuple<String, Supplier<DiscoveryNode>>> seedNodes,, +            final ActionListener<Void> connectListener) {, +                    collectRemoteNodes(seedNodes.stream().map(Tuple::v2).iterator(), transportService, connectionManager, listener);, +        return new RemoteConnectionInfo(, +                clusterAlias,, +                seedNodes.stream().map(Tuple::v1).collect(Collectors.toList()),, +                maxNumRemoteConnections,, +                connectedNodes.size(),, +                initialConnectionTimeout,, +                skipUnavailable);, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +    private synchronized void updateRemoteClusters(Map<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> seeds,, +            for (Map.Entry<String, Tuple<String, List<Tuple<String, Supplier<DiscoveryNode>>>>> entry : seeds.entrySet()) {, +                List<Tuple<String, Supplier<DiscoveryNode>>> seedList = entry.getValue().v2();, +        final List<Tuple<String, Supplier<DiscoveryNode>>> nodes =, +                addresses.stream().<Tuple<String, Supplier<DiscoveryNode>>>map(address -> Tuple.tuple(address, () ->]