[+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +                ActionListener.wrap((authc) -> {, +                    if (authc != null) {, +                        authorizeRequest(authc, securityAction, request, listener);, +                    } else if (licenseState.isAuthAllowed() == false) {, +                        listener.onResponse(null);, +                    } else {, +                        listener.onFailure(new IllegalStateException("no authentication present but auth is allowed"));, +                    }, +                }, listener::onFailure));, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +                ActionListener.wrap((authc) -> {, +                    if (authc != null) {, +                        authorizeRequest(authc, securityAction, request, listener);, +                    } else if (licenseState.isAuthAllowed() == false) {, +                        listener.onResponse(null);, +                    } else {, +                        listener.onFailure(new IllegalStateException("no authentication present but auth is allowed"));, +                    }, +                }, listener::onFailure));, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlAuthenticateAction.java, +                assert authentication != null : "authentication should never be null at this point";, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +                ActionListener.wrap((authc) -> {, +                    if (authc != null) {, +                        authorizeRequest(authc, securityAction, request, listener);, +                    } else if (licenseState.isAuthAllowed() == false) {, +                        listener.onResponse(null);, +                    } else {, +                        listener.onFailure(new IllegalStateException("no authentication present but auth is allowed"));, +                    }, +                }, listener::onFailure));, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlAuthenticateAction.java, +                assert authentication != null : "authentication should never be null at this point";, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportCreateTokenAction.java, +                    if (authentication != null) {, +                    } else {, +                        listener.onFailure(new UnsupportedOperationException("cannot create token if authentication is not allowed"));, +                    }, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +                ActionListener.wrap((authc) -> {, +                    if (authc != null) {, +                        authorizeRequest(authc, securityAction, request, listener);, +                    } else if (licenseState.isAuthAllowed() == false) {, +                        listener.onResponse(null);, +                    } else {, +                        listener.onFailure(new IllegalStateException("no authentication present but auth is allowed"));, +                    }, +                }, listener::onFailure));, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlAuthenticateAction.java, +                assert authentication != null : "authentication should never be null at this point";, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportCreateTokenAction.java, +                    if (authentication != null) {, +                    } else {, +                        listener.onFailure(new UnsupportedOperationException("cannot create token if authentication is not allowed"));, +                    }, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java, +        private final List<Realm> defaultOrderedRealmList;, +, +            this.defaultOrderedRealmList = realms.asList();, +            if (defaultOrderedRealmList.isEmpty()) {, +                // this happens when the license state changes between the call to authenticate and the actual invocation, +                // to get the realm list, +                listener.onResponse(null);, +            } else {, +        }, +                    for (Realm realm : defaultOrderedRealmList) {, +, +            final List<Realm> orderedRealmList = this.defaultOrderedRealmList;, +                    final int index = orderedRealmList.indexOf(lastSuccess);, +                        final List<Realm> smartOrder = new ArrayList<>(orderedRealmList.size());, +                        for (int i = 1; i < orderedRealmList.size(); i++) {, +                                smartOrder.add(orderedRealmList.get(i));, +            return orderedRealmList;, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +                ActionListener.wrap((authc) -> {, +                    if (authc != null) {, +                        authorizeRequest(authc, securityAction, request, listener);, +                    } else if (licenseState.isAuthAllowed() == false) {, +                        listener.onResponse(null);, +                    } else {, +                        listener.onFailure(new IllegalStateException("no authentication present but auth is allowed"));, +                    }, +                }, listener::onFailure));, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlAuthenticateAction.java, +                assert authentication != null : "authentication should never be null at this point";, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/token/TransportCreateTokenAction.java, +                    if (authentication != null) {, +                    } else {, +                        listener.onFailure(new UnsupportedOperationException("cannot create token if authentication is not allowed"));, +                    }, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java, +        private final List<Realm> defaultOrderedRealmList;, +, +            this.defaultOrderedRealmList = realms.asList();, +            if (defaultOrderedRealmList.isEmpty()) {, +                // this happens when the license state changes between the call to authenticate and the actual invocation, +                // to get the realm list, +                listener.onResponse(null);, +            } else {]