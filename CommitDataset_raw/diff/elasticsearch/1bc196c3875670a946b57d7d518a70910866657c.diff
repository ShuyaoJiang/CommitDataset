[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterStateTaskExecutor.java, +     * Callback invoked after new cluster state is published. Note that, +     * this method is not invoked if the cluster state was not updated., +     */, +    default void clusterStatePublished(ClusterState newClusterState) {, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterStateTaskExecutor.java, +     * Callback invoked after new cluster state is published. Note that, +     * this method is not invoked if the cluster state was not updated., +     */, +    default void clusterStatePublished(ClusterState newClusterState) {, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +            executor.clusterStatePublished(newClusterState);, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterStateTaskExecutor.java, +     * Callback invoked after new cluster state is published. Note that, +     * this method is not invoked if the cluster state was not updated., +     */, +    default void clusterStatePublished(ClusterState newClusterState) {, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +            executor.clusterStatePublished(newClusterState);, +, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterServiceIT.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.notNullValue;, +            private AtomicInteger batches = new AtomicInteger();, +            private AtomicInteger published = new AtomicInteger();, +                ClusterState maybeUpdatedClusterState = currentState;, +                if (randomBoolean()) {, +                    maybeUpdatedClusterState = ClusterState.builder(currentState).build();, +                    batches.incrementAndGet();, +                }, +                return BatchResult.<Task>builder().successes(tasks).build(maybeUpdatedClusterState);, +, +            @Override, +            public void clusterStatePublished(ClusterState newClusterState) {, +                published.incrementAndGet();, +            }, +                assertEquals(executor.batches.get(), executor.published.get());]