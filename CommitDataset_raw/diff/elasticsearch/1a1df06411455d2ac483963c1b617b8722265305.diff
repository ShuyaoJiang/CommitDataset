[+++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/DocIdOrdinals.java, +        return numDocs;, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/DocIdOrdinals.java, +        return numDocs;, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +        return 0;, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/DocIdOrdinals.java, +        return numDocs;, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +        return 0;, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/MultiFlatArrayOrdinals.java, +public final class MultiFlatArrayOrdinals implements Ordinals {, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/DocIdOrdinals.java, +        return numDocs;, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +        return 0;, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/MultiFlatArrayOrdinals.java, +public final class MultiFlatArrayOrdinals implements Ordinals {, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/Ordinals.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/DocIdOrdinals.java, +        return numDocs;, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java, +        return 0;, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/MultiFlatArrayOrdinals.java, +public final class MultiFlatArrayOrdinals implements Ordinals {, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/Ordinals.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/OrdinalsBuilder.java, +package org.elasticsearch.index.fielddata.ordinals;, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +import java.io.Closeable;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Comparator;, +, +import org.apache.lucene.index.DocsEnum;, +import org.apache.lucene.index.FilteredTermsEnum;, +import org.apache.lucene.index.Terms;, +import org.apache.lucene.index.TermsEnum;, +import org.apache.lucene.util.ArrayUtil;, +import org.apache.lucene.util.Bits;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.BytesRefIterator;, +import org.apache.lucene.util.FixedBitSet;, +import org.apache.lucene.util.IntBlockPool;, +import org.apache.lucene.util.NumericUtils;, +import org.apache.lucene.util.IntBlockPool.Allocator;, +import org.apache.lucene.util.IntBlockPool.DirectAllocator;, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.fielddata.util.IntArrayRef;, +, +/**, + * Simple class to build document ID <-> ordinal mapping. Note: Ordinals are, + * <tt>1</tt> based monotocially increasing positive integers. <tt>0</tt>, + * donates the missing value in this context., + */, +public final class OrdinalsBuilder implements Closeable {, +, +    private final int[] ords;, +    private int[] offsets;, +    private final IntBlockPool pool;, +    private final IntBlockPool.SliceWriter writer;, +    private final IntArrayRef intsRef = new IntArrayRef(new int[1]);, +    private final IntBlockPool.SliceReader reader;, +    private int currentOrd = 0;, +    private int numDocsWithValue = 0;, +    private int numMultiValuedDocs = 0;, +    private int totalNumOrds = 0;, +, +    public OrdinalsBuilder(Terms terms, int maxDoc, Allocator allocator) {, +        this.ords = new int[maxDoc];, +        pool = new IntBlockPool(allocator);, +        reader = new IntBlockPool.SliceReader(pool);, +        writer = new IntBlockPool.SliceWriter(pool);, +    }, +    , +    public OrdinalsBuilder(int maxDoc) {, +        this(null, maxDoc);, +    }, +, +    public OrdinalsBuilder(Terms terms, int maxDoc) {, +        this(terms, maxDoc, new DirectAllocator());, +    }]