[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +        final FieldMapper.Names fieldNames = mapper.names();, +        final FieldDataType type = mapper.fieldDataType();, +        final boolean docValues = mapper.hasDocValues();, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +        final FieldMapper.Names fieldNames = mapper.names();, +        final FieldDataType type = mapper.fieldDataType();, +        final boolean docValues = mapper.hasDocValues();, +++ b/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +                    QueriesLoaderCollector queryCollector = new QueriesLoaderCollector(PercolatorQueriesRegistry.this, logger, mapperService, indexFieldDataService);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +        final FieldMapper.Names fieldNames = mapper.names();, +        final FieldDataType type = mapper.fieldDataType();, +        final boolean docValues = mapper.hasDocValues();, +++ b/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +                    QueriesLoaderCollector queryCollector = new QueriesLoaderCollector(PercolatorQueriesRegistry.this, logger, mapperService, indexFieldDataService);, +++ b/src/main/java/org/elasticsearch/index/percolator/QueriesLoaderCollector.java, +import org.elasticsearch.index.mapper.MapperService;, +    QueriesLoaderCollector(PercolatorQueriesRegistry percolator, ESLogger logger, MapperService mapperService, IndexFieldDataService indexFieldDataService) {, +        final FieldMapper<?> idMapper = mapperService.smartNameFieldMapper(IdFieldMapper.NAME);, +        this.idFieldData = indexFieldDataService.getForField(idMapper);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +        final FieldMapper.Names fieldNames = mapper.names();, +        final FieldDataType type = mapper.fieldDataType();, +        final boolean docValues = mapper.hasDocValues();, +++ b/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +                    QueriesLoaderCollector queryCollector = new QueriesLoaderCollector(PercolatorQueriesRegistry.this, logger, mapperService, indexFieldDataService);, +++ b/src/main/java/org/elasticsearch/index/percolator/QueriesLoaderCollector.java, +import org.elasticsearch.index.mapper.MapperService;, +    QueriesLoaderCollector(PercolatorQueriesRegistry percolator, ESLogger logger, MapperService mapperService, IndexFieldDataService indexFieldDataService) {, +        final FieldMapper<?> idMapper = mapperService.smartNameFieldMapper(IdFieldMapper.NAME);, +        this.idFieldData = indexFieldDataService.getForField(idMapper);, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +import org.elasticsearch.percolator.QueryCollector.Count;, +import org.elasticsearch.percolator.QueryCollector.Match;, +import org.elasticsearch.percolator.QueryCollector.MatchAndScore;, +import org.elasticsearch.percolator.QueryCollector.MatchAndSort;, +                final FieldMapper<?> idMapper = context.mapperService().smartNameFieldMapper(IdFieldMapper.NAME);, +                final IndexFieldData<?> idFieldData = context.fieldData().getForField(idMapper);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +        final FieldMapper.Names fieldNames = mapper.names();, +        final FieldDataType type = mapper.fieldDataType();, +        final boolean docValues = mapper.hasDocValues();, +++ b/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +                    QueriesLoaderCollector queryCollector = new QueriesLoaderCollector(PercolatorQueriesRegistry.this, logger, mapperService, indexFieldDataService);, +++ b/src/main/java/org/elasticsearch/index/percolator/QueriesLoaderCollector.java, +import org.elasticsearch.index.mapper.MapperService;, +    QueriesLoaderCollector(PercolatorQueriesRegistry percolator, ESLogger logger, MapperService mapperService, IndexFieldDataService indexFieldDataService) {, +        final FieldMapper<?> idMapper = mapperService.smartNameFieldMapper(IdFieldMapper.NAME);, +        this.idFieldData = indexFieldDataService.getForField(idMapper);, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +import org.elasticsearch.percolator.QueryCollector.Count;, +import org.elasticsearch.percolator.QueryCollector.Match;, +import org.elasticsearch.percolator.QueryCollector.MatchAndScore;, +import org.elasticsearch.percolator.QueryCollector.MatchAndSort;, +                final FieldMapper<?> idMapper = context.mapperService().smartNameFieldMapper(IdFieldMapper.NAME);, +                final IndexFieldData<?> idFieldData = context.fieldData().getForField(idMapper);, +++ b/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +    final IndexFieldData<?> idFieldData;, +        final FieldMapper<?> idMapper = context.mapperService().smartNameFieldMapper(IdFieldMapper.NAME);, +        this.idFieldData = context.fieldData().getForField(idMapper);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +        final FieldMapper.Names fieldNames = mapper.names();, +        final FieldDataType type = mapper.fieldDataType();, +        final boolean docValues = mapper.hasDocValues();, +++ b/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +                    QueriesLoaderCollector queryCollector = new QueriesLoaderCollector(PercolatorQueriesRegistry.this, logger, mapperService, indexFieldDataService);, +++ b/src/main/java/org/elasticsearch/index/percolator/QueriesLoaderCollector.java, +import org.elasticsearch.index.mapper.MapperService;, +    QueriesLoaderCollector(PercolatorQueriesRegistry percolator, ESLogger logger, MapperService mapperService, IndexFieldDataService indexFieldDataService) {, +        final FieldMapper<?> idMapper = mapperService.smartNameFieldMapper(IdFieldMapper.NAME);, +        this.idFieldData = indexFieldDataService.getForField(idMapper);, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +import org.elasticsearch.percolator.QueryCollector.Count;, +import org.elasticsearch.percolator.QueryCollector.Match;, +import org.elasticsearch.percolator.QueryCollector.MatchAndScore;, +import org.elasticsearch.percolator.QueryCollector.MatchAndSort;, +                final FieldMapper<?> idMapper = context.mapperService().smartNameFieldMapper(IdFieldMapper.NAME);, +                final IndexFieldData<?> idFieldData = context.fieldData().getForField(idMapper);, +++ b/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +    final IndexFieldData<?> idFieldData;, +        final FieldMapper<?> idMapper = context.mapperService().smartNameFieldMapper(IdFieldMapper.NAME);, +        this.idFieldData = context.fieldData().getForField(idMapper);, +++ b/src/test/java/org/elasticsearch/benchmark/fielddata/LongFieldDataBenchmark.java, +import org.elasticsearch.index.mapper.ContentPath;, +import org.elasticsearch.index.mapper.Mapper.BuilderContext;, +import org.elasticsearch.index.mapper.core.LongFieldMapper;, +            final LongFieldMapper mapper = new LongFieldMapper.Builder(fieldName).build(new BuilderContext(null, new ContentPath(1)));, +            final IndexNumericFieldData<AtomicNumericFieldData> fd = fds.getForField(mapper);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +        final FieldMapper.Names fieldNames = mapper.names();, +        final FieldDataType type = mapper.fieldDataType();, +        final boolean docValues = mapper.hasDocValues();, +++ b/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +                    QueriesLoaderCollector queryCollector = new QueriesLoaderCollector(PercolatorQueriesRegistry.this, logger, mapperService, indexFieldDataService);, +++ b/src/main/java/org/elasticsearch/index/percolator/QueriesLoaderCollector.java, +import org.elasticsearch.index.mapper.MapperService;, +    QueriesLoaderCollector(PercolatorQueriesRegistry percolator, ESLogger logger, MapperService mapperService, IndexFieldDataService indexFieldDataService) {, +        final FieldMapper<?> idMapper = mapperService.smartNameFieldMapper(IdFieldMapper.NAME);, +        this.idFieldData = indexFieldDataService.getForField(idMapper);]