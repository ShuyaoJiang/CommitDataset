[+++ b/core/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +                    parser.skipChildren();, +                    parser.skipChildren();, +                parser.skipChildren();, +++ b/core/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +                    parser.skipChildren();, +                    parser.skipChildren();, +                parser.skipChildren();, +++ b/core/src/test/java/org/elasticsearch/action/search/ShardSearchFailureTests.java, +import static org.elasticsearch.test.XContentTestUtils.insertRandomFields;, +        doFromXContentTestWithRandomFields(false);, +    }, +, +    /**, +     * This test adds random fields and objects to the xContent rendered out to, +     * ensure we can parse it back to be forward compatible with additions to, +     * the xContent, +     */, +    public void testFromXContentWithRandomFields() throws IOException {, +        doFromXContentTestWithRandomFields(true);, +    }, +, +    private void doFromXContentTestWithRandomFields(boolean addRandomFields) throws IOException {, +        BytesReference mutated;, +        if (addRandomFields) {, +            mutated = insertRandomFields(xContentType, originalBytes, null, random());, +        } else {, +            mutated = originalBytes;, +        }, +        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {, +        /**, +         * we cannot compare the cause, because it will be wrapped in an outer, +         * ElasticSearchException best effort: try to check that the original, +         * message appears somewhere in the rendered xContent, +         */]