[+++ b/CONTRIBUTING.md, +ES_TEST_LOCAL=true, +mvn clean test, +++ b/CONTRIBUTING.md, +ES_TEST_LOCAL=true, +mvn clean test, +++ b/README.textile, +The distribution will be created under @target/releases@., +++ b/CONTRIBUTING.md, +ES_TEST_LOCAL=true, +mvn clean test, +++ b/README.textile, +The distribution will be created under @target/releases@., +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText, null));, +++ b/CONTRIBUTING.md, +ES_TEST_LOCAL=true, +mvn clean test, +++ b/README.textile, +The distribution will be created under @target/releases@., +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0 = new Version(V_2_0_0_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_0);, +++ b/CONTRIBUTING.md, +ES_TEST_LOCAL=true, +mvn clean test, +++ b/README.textile, +The distribution will be created under @target/releases@., +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0 = new Version(V_2_0_0_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_0);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +, +        @Override, +        @Deprecated, +        public Boolean paramAsBooleanOptional(String key, Boolean defaultValue) {, +            return paramAsBoolean(key, defaultValue);, +        }, +++ b/CONTRIBUTING.md, +ES_TEST_LOCAL=true, +mvn clean test, +++ b/README.textile, +The distribution will be created under @target/releases@., +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0 = new Version(V_2_0_0_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_0);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +, +        @Override, +        @Deprecated, +        public Boolean paramAsBooleanOptional(String key, Boolean defaultValue) {, +            return paramAsBoolean(key, defaultValue);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Adds a script based field to load and return. The field does not have to, +     * be stored, but its recommended to use non analyzed or numeric fields., +     *, +     * @param name, +     *            The name that will represent this value in the return hit, +     * @param script, +     *            The script to use, +     * @deprecated Use {@link #addScriptField(String, Script)} instead., +     */, +    @Deprecated, +    public SearchRequestBuilder addScriptField(String name, String script) {, +        sourceBuilder().scriptField(name, script);, +        return this;, +    }, +, +    /**, +     * Adds a script based field to load and return. The field does not have to, +     * be stored, but its recommended to use non analyzed or numeric fields., +     *, +     * @param name, +     *            The name that will represent this value in the return hit, +     * @param script, +     *            The script to use, +     * @param params, +     *            Parameters that the script can use., +     * @deprecated Use {@link #addScriptField(String, Script)} instead., +     */, +    @Deprecated, +    public SearchRequestBuilder addScriptField(String name, String script, Map<String, Object> params) {, +        sourceBuilder().scriptField(name, script, params);, +        return this;, +    }, +, +    /**, +     * Adds a script based field to load and return. The field does not have to, +     * be stored, but its recommended to use non analyzed or numeric fields., +     *, +     * @param name, +     *            The name that will represent this value in the return hit]