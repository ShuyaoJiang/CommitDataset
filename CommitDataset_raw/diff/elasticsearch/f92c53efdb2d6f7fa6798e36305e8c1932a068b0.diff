[+++ b/src/main/java/org/elasticsearch/common/network/NetworkService.java, +                    if (!ni.isUp()) {, +                        if (ni.isLoopback()) {, +                            return NetworkUtils.getFirstAddress(ni, stackType);, +                        } else {, +            }, +++ b/src/main/java/org/elasticsearch/common/network/NetworkService.java, +                    if (!ni.isUp()) {, +                        if (ni.isLoopback()) {, +                            return NetworkUtils.getFirstAddress(ni, stackType);, +                        } else {, +            }, +++ b/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +     * Returns the first address with the proper ipVersion on the given interface on the current host., +     *, +     * @param intf      the interface to be checked, +     * @param ipVersion Constraint on IP version of address to be returned, 4 or 6, +     */, +    public static InetAddress getFirstAddress(NetworkInterface intf, StackType ipVersion) throws SocketException {, +        if (intf == null), +            throw new IllegalArgumentException("Network interface pointer is null");, +, +        for (Enumeration addresses = intf.getInetAddresses(); addresses.hasMoreElements(); ) {, +            InetAddress address = (InetAddress) addresses.nextElement();, +            if ((address instanceof Inet4Address && ipVersion == StackType.IPv4) ||, +                    (address instanceof Inet6Address && ipVersion == StackType.IPv6)), +                return address;, +        }, +        return null;, +    }, +, +    /**]