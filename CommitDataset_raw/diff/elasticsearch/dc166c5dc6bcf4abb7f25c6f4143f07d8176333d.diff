[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import java.util.LinkedHashMap;, +        Map<Class, AllocationDecider> deciders = new LinkedHashMap<>();, +        addAllocationDecider(deciders, new FilterAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new SameShardAllocationDecider(settings));, +        addAllocationDecider(deciders, new DiskThresholdDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new ThrottlingAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new ShardsLimitAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new AwarenessAllocationDecider(settings, clusterSettings));, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import java.util.LinkedHashMap;, +        Map<Class, AllocationDecider> deciders = new LinkedHashMap<>();, +        addAllocationDecider(deciders, new FilterAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new SameShardAllocationDecider(settings));, +        addAllocationDecider(deciders, new DiskThresholdDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new ThrottlingAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new ShardsLimitAllocationDecider(settings, clusterSettings));, +        addAllocationDecider(deciders, new AwarenessAllocationDecider(settings, clusterSettings));, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterModuleTests.java, +import org.elasticsearch.cluster.routing.allocation.decider.AwarenessAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ClusterRebalanceAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ConcurrentRebalanceAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.DiskThresholdDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.MaxRetryAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.NodeVersionAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.RebalanceOnlyWhenActiveAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ReplicaAfterPrimaryActiveAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ShardsLimitAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.SnapshotInProgressAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.ThrottlingAllocationDecider;, +import java.util.Arrays;, +import java.util.Iterator;, +import java.util.List;, +, +    // makes sure that the allocation deciders are setup in the correct order, such that the, +    // slower allocation deciders come last and we can exit early if there is a NO decision without, +    // running them. If the order of the deciders is changed for a valid reason, the order should be, +    // changed in the test too., +    public void testAllocationDeciderOrder() {, +        List<Class<? extends AllocationDecider>> expectedDeciders = Arrays.asList(, +            MaxRetryAllocationDecider.class,, +            ReplicaAfterPrimaryActiveAllocationDecider.class,, +            RebalanceOnlyWhenActiveAllocationDecider.class,, +            ClusterRebalanceAllocationDecider.class,, +            ConcurrentRebalanceAllocationDecider.class,, +            EnableAllocationDecider.class,, +            NodeVersionAllocationDecider.class,, +            SnapshotInProgressAllocationDecider.class,, +            FilterAllocationDecider.class,, +            SameShardAllocationDecider.class,, +            DiskThresholdDecider.class,, +            ThrottlingAllocationDecider.class,, +            ShardsLimitAllocationDecider.class,, +            AwarenessAllocationDecider.class);, +        Collection<AllocationDecider> deciders = ClusterModule.createAllocationDeciders(Settings.EMPTY,, +            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS), Collections.emptyList());, +        Iterator<AllocationDecider> iter = deciders.iterator();, +        int idx = 0;, +        while (iter.hasNext()) {, +            AllocationDecider decider = iter.next();, +            assertSame(decider.getClass(), expectedDeciders.get(idx++));, +        }, +    }]