[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                anonymousUser, securityLifecycleService, threadPool.getThreadContext());, +        final Realms realms = new Realms(settings, env, realmFactories, licenseState, threadPool.getThreadContext(), reservedRealm);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                anonymousUser, securityLifecycleService, threadPool.getThreadContext());, +        final Realms realms = new Realms(settings, env, realmFactories, licenseState, threadPool.getThreadContext(), reservedRealm);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Map;, +                final Map<Realm, Tuple<String, Exception>> failureDetails = Realm.getAuthenticationFailureDetails(threadContext);, +                failureDetails.forEach((realm, tuple) -> {, +                    final String message = tuple.v1();, +                    final String cause = tuple.v2() == null ? "" : " (Caused by " + tuple.v2() + ")";, +                    logger.warn("Authentication to realm {} failed - {}{}", realm.name(), message, cause);, +                });, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                anonymousUser, securityLifecycleService, threadPool.getThreadContext());, +        final Realms realms = new Realms(settings, env, realmFactories, licenseState, threadPool.getThreadContext(), reservedRealm);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Map;, +                final Map<Realm, Tuple<String, Exception>> failureDetails = Realm.getAuthenticationFailureDetails(threadContext);, +                failureDetails.forEach((realm, tuple) -> {, +                    final String message = tuple.v1();, +                    final String cause = tuple.v2() == null ? "" : " (Caused by " + tuple.v2() + ")";, +                    logger.warn("Authentication to realm {} failed - {}{}", realm.name(), message, cause);, +                });, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/Realm.java, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.inject.internal.Nullable;, +import java.util.Collections;, +import java.util.LinkedHashMap;, +    private static final String AUTHENTICATION_FAILURES_KEY = "_xpack_security_auth_failures";, +, +, +    /**, +     * Provides a mechanism for a realm to report errors that were handled within a realm, but may, +     * provide useful diagnostics about why authentication failed., +     */, +    protected final void setFailedAuthenticationDetails(String message, @Nullable Exception cause) {, +        final ThreadContext threadContext = config.threadContext();, +        Map<Realm, Tuple<String, Exception>> failures = threadContext.getTransient(AUTHENTICATION_FAILURES_KEY);, +        if (failures == null) {, +            failures = new LinkedHashMap<>();, +            threadContext.putTransient(AUTHENTICATION_FAILURES_KEY, failures);, +        }, +        failures.put(this, new Tuple<>(message, cause));, +    }, +, +    /**, +     * Retrieves any authentication failures messages that were set using {@link #setFailedAuthenticationDetails(String, Exception)}, +     */, +    static Map<Realm, Tuple<String, Exception>> getAuthenticationFailureDetails(ThreadContext threadContext) {, +        final Map<Realm, Tuple<String, Exception>> failures = threadContext.getTransient(AUTHENTICATION_FAILURES_KEY);, +        if (failures == null) {, +            return Collections.emptyMap();, +        }, +        return failures;, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                anonymousUser, securityLifecycleService, threadPool.getThreadContext());, +        final Realms realms = new Realms(settings, env, realmFactories, licenseState, threadPool.getThreadContext(), reservedRealm);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationService.java, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Map;, +                final Map<Realm, Tuple<String, Exception>> failureDetails = Realm.getAuthenticationFailureDetails(threadContext);, +                failureDetails.forEach((realm, tuple) -> {, +                    final String message = tuple.v1();, +                    final String cause = tuple.v2() == null ? "" : " (Caused by " + tuple.v2() + ")";, +                    logger.warn("Authentication to realm {} failed - {}{}", realm.name(), message, cause);, +                });, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/Realm.java, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.inject.internal.Nullable;, +import java.util.Collections;, +import java.util.LinkedHashMap;, +    private static final String AUTHENTICATION_FAILURES_KEY = "_xpack_security_auth_failures";, +, +, +    /**, +     * Provides a mechanism for a realm to report errors that were handled within a realm, but may, +     * provide useful diagnostics about why authentication failed., +     */, +    protected final void setFailedAuthenticationDetails(String message, @Nullable Exception cause) {, +        final ThreadContext threadContext = config.threadContext();, +        Map<Realm, Tuple<String, Exception>> failures = threadContext.getTransient(AUTHENTICATION_FAILURES_KEY);, +        if (failures == null) {, +            failures = new LinkedHashMap<>();, +            threadContext.putTransient(AUTHENTICATION_FAILURES_KEY, failures);, +        }, +        failures.put(this, new Tuple<>(message, cause));, +    }, +, +    /**, +     * Retrieves any authentication failures messages that were set using {@link #setFailedAuthenticationDetails(String, Exception)}, +     */, +    static Map<Realm, Tuple<String, Exception>> getAuthenticationFailureDetails(ThreadContext threadContext) {, +        final Map<Realm, Tuple<String, Exception>> failures = threadContext.getTransient(AUTHENTICATION_FAILURES_KEY);, +        if (failures == null) {]