[+++ b/server/src/main/java/org/elasticsearch/action/search/FetchSearchPhase.java, +            ScoreDoc[] scoreDocs = reducedQueryPhase.sortedTopDocs.scoreDocs;, +            final IntArrayList[] docIdsToLoad = searchPhaseController.fillDocIdsToLoad(numShards, scoreDocs);, +            if (scoreDocs.length == 0) { // no docs to fetch -- sidestep everything and return, +++ b/server/src/main/java/org/elasticsearch/action/search/FetchSearchPhase.java, +            ScoreDoc[] scoreDocs = reducedQueryPhase.sortedTopDocs.scoreDocs;, +            final IntArrayList[] docIdsToLoad = searchPhaseController.fillDocIdsToLoad(numShards, scoreDocs);, +            if (scoreDocs.length == 0) { // no docs to fetch -- sidestep everything and return, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +            boolean isSortedByField = false;, +            SortField[] sortFields = null;, +            String collapseField = null;, +            Object[] collapseValues = null;, +                if (fieldDocs instanceof CollapseTopFieldDocs) {, +                    isSortedByField = (fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false;, +                    CollapseTopFieldDocs collapseTopFieldDocs = (CollapseTopFieldDocs) fieldDocs;, +                    collapseField = collapseTopFieldDocs.field;, +                    collapseValues = collapseTopFieldDocs.collapseValues;, +                    isSortedByField = true;, +            }, +            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues);, +            final ScoreDoc[] sortedScoreDocs = reducedQueryPhase.sortedTopDocs.scoreDocs;, +        ScoreDoc[] sortedDocs = reducedQueryPhase.sortedTopDocs.scoreDocs;, +        SortedTopDocs sortedTopDocs = reducedQueryPhase.sortedTopDocs;, +        if (sortedTopDocs.isSortedByField) {, +            SortField[] sortFields = sortedTopDocs.sortFields;, +            for (int i = 0; i < sortFields.length; i++) {, +                if (sortFields[i].getType() == SortField.Type.SCORE) {, +        numSearchHits = Math.min(sortedTopDocs.scoreDocs.length, numSearchHits);, +                ScoreDoc shardDoc = sortedTopDocs.scoreDocs[i];, +                if (sortedTopDocs.isSortedByField) {, +                } else {, +                    searchHit.score(shardDoc.score);, +        return new SearchHits(hits.toArray(new SearchHit[0]), reducedQueryPhase.totalHits,, +            reducedQueryPhase.maxScore, sortedTopDocs.sortFields, sortedTopDocs.collapseField, sortedTopDocs.collapseValues);, +                timedOut, terminatedEarly, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true);, +        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size);, +            timedOut, terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,, +            firstResult.sortValueFormats(), numReducePhases, size, from, firstResult == null);, +        //encloses info about the merged top docs, the sort fields used to sort the score docs etc., +        final SortedTopDocs sortedTopDocs;, +                          InternalAggregations aggregations, SearchProfileShardResults shardResults, SortedTopDocs sortedTopDocs,, +                          DocValueFormat[] sortValueFormats, int numReducePhases, int size, int from, boolean isEmptyResult) {, +            this.sortedTopDocs = sortedTopDocs;, +            ReducedQueryPhase reduce() {, +        static final SortedTopDocs EMPTY = new SortedTopDocs(EMPTY_DOCS, false, null, null, null);, +        // the searches merged top docs, +        // <code>true</code> iff the result score docs is sorted by a field (not score), this implies that <code>sortField</code> is set., +        // the top docs sort fields used to sort the score docs, <code>null</code> if the results are not sorted, +        final String collapseField;, +        final Object[] collapseValues;, +        SortedTopDocs(ScoreDoc[] scoreDocs, boolean isSortedByField, SortField[] sortFields,, +                      String collapseField, Object[] collapseValues) {, +            this.collapseField = collapseField;, +            this.collapseValues = collapseValues;, +++ b/server/src/main/java/org/elasticsearch/action/search/FetchSearchPhase.java, +            ScoreDoc[] scoreDocs = reducedQueryPhase.sortedTopDocs.scoreDocs;, +            final IntArrayList[] docIdsToLoad = searchPhaseController.fillDocIdsToLoad(numShards, scoreDocs);, +            if (scoreDocs.length == 0) { // no docs to fetch -- sidestep everything and return, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +            boolean isSortedByField = false;, +            SortField[] sortFields = null;, +            String collapseField = null;, +            Object[] collapseValues = null;, +                if (fieldDocs instanceof CollapseTopFieldDocs) {, +                    isSortedByField = (fieldDocs.fields.length == 1 && fieldDocs.fields[0].getType() == SortField.Type.SCORE) == false;, +                    CollapseTopFieldDocs collapseTopFieldDocs = (CollapseTopFieldDocs) fieldDocs;, +                    collapseField = collapseTopFieldDocs.field;, +                    collapseValues = collapseTopFieldDocs.collapseValues;, +                    isSortedByField = true;, +            }, +            return new SortedTopDocs(scoreDocs, isSortedByField, sortFields, collapseField, collapseValues);, +            final ScoreDoc[] sortedScoreDocs = reducedQueryPhase.sortedTopDocs.scoreDocs;, +        ScoreDoc[] sortedDocs = reducedQueryPhase.sortedTopDocs.scoreDocs;, +        SortedTopDocs sortedTopDocs = reducedQueryPhase.sortedTopDocs;, +        if (sortedTopDocs.isSortedByField) {, +            SortField[] sortFields = sortedTopDocs.sortFields;, +            for (int i = 0; i < sortFields.length; i++) {, +                if (sortFields[i].getType() == SortField.Type.SCORE) {, +        numSearchHits = Math.min(sortedTopDocs.scoreDocs.length, numSearchHits);, +                ScoreDoc shardDoc = sortedTopDocs.scoreDocs[i];, +                if (sortedTopDocs.isSortedByField) {, +                } else {, +                    searchHit.score(shardDoc.score);, +        return new SearchHits(hits.toArray(new SearchHit[0]), reducedQueryPhase.totalHits,, +            reducedQueryPhase.maxScore, sortedTopDocs.sortFields, sortedTopDocs.collapseField, sortedTopDocs.collapseValues);, +                timedOut, terminatedEarly, null, null, null, SortedTopDocs.EMPTY, null, numReducePhases, 0, 0, true);, +        final SortedTopDocs sortedTopDocs = sortDocs(isScrollRequest, queryResults, bufferedTopDocs, topDocsStats, from, size);, +            timedOut, terminatedEarly, suggest, aggregations, shardResults, sortedTopDocs,, +            firstResult.sortValueFormats(), numReducePhases, size, from, firstResult == null);, +        //encloses info about the merged top docs, the sort fields used to sort the score docs etc., +        final SortedTopDocs sortedTopDocs;, +                          InternalAggregations aggregations, SearchProfileShardResults shardResults, SortedTopDocs sortedTopDocs,, +                          DocValueFormat[] sortValueFormats, int numReducePhases, int size, int from, boolean isEmptyResult) {, +            this.sortedTopDocs = sortedTopDocs;, +            ReducedQueryPhase reduce() {, +        static final SortedTopDocs EMPTY = new SortedTopDocs(EMPTY_DOCS, false, null, null, null);, +        // the searches merged top docs, +        // <code>true</code> iff the result score docs is sorted by a field (not score), this implies that <code>sortField</code> is set., +        // the top docs sort fields used to sort the score docs, <code>null</code> if the results are not sorted]