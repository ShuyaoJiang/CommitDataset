[+++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/RandomExceptionCircuitBreakerTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAllSuccessful;, +        for (NodeStats node : client().admin().cluster().prepareNodesStats(), +                .clear().setBreaker(true).execute().actionGet().getNodes()) {, +            assertThat("Breaker is not set to 0", node.getBreaker().getEstimated(), equalTo(0L));, +        }, +                assertAllSuccessful(client().admin().indices().prepareClearCache("test").setFieldDataCache(true).execute().actionGet());, +, +, +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/RandomExceptionCircuitBreakerTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAllSuccessful;, +        for (NodeStats node : client().admin().cluster().prepareNodesStats(), +                .clear().setBreaker(true).execute().actionGet().getNodes()) {, +            assertThat("Breaker is not set to 0", node.getBreaker().getEstimated(), equalTo(0L));, +        }, +                assertAllSuccessful(client().admin().indices().prepareClearCache("test").setFieldDataCache(true).execute().actionGet());, +, +, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.action.admin.cluster.node.stats.NodeStats;, +import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;, +import org.elasticsearch.action.admin.indices.cache.clear.ClearIndicesCacheResponse;, +            ensureEstimatedStats();, +    public static void ensureEstimatedStats() {, +        if (cluster().size() > 0) {, +            ClearIndicesCacheResponse all = client().admin().indices().prepareClearCache("_all").setFieldDataCache(true).execute().actionGet();, +            assertNoFailures(all);, +            NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats(), +                    .clear().setBreaker(true).execute().actionGet();, +            for (NodeStats stats : nodeStats.getNodes()) {, +                assertThat("Breaker reset to 0 ", stats.getBreaker().getEstimated(), equalTo(0L));, +            }, +        }, +    }, +, +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/RandomExceptionCircuitBreakerTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAllSuccessful;, +        for (NodeStats node : client().admin().cluster().prepareNodesStats(), +                .clear().setBreaker(true).execute().actionGet().getNodes()) {, +            assertThat("Breaker is not set to 0", node.getBreaker().getEstimated(), equalTo(0L));, +        }, +                assertAllSuccessful(client().admin().indices().prepareClearCache("test").setFieldDataCache(true).execute().actionGet());, +, +, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.action.admin.cluster.node.stats.NodeStats;, +import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;, +import org.elasticsearch.action.admin.indices.cache.clear.ClearIndicesCacheResponse;, +            ensureEstimatedStats();, +    public static void ensureEstimatedStats() {, +        if (cluster().size() > 0) {, +            ClearIndicesCacheResponse all = client().admin().indices().prepareClearCache("_all").setFieldDataCache(true).execute().actionGet();, +            assertNoFailures(all);, +            NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats(), +                    .clear().setBreaker(true).execute().actionGet();, +            for (NodeStats stats : nodeStats.getNodes()) {, +                assertThat("Breaker reset to 0 ", stats.getBreaker().getEstimated(), equalTo(0L));, +            }, +        }, +    }, +, +++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +    public static void assertAllSuccessful(BroadcastOperationResponse response) {, +        assertNoFailures(response);, +        assertThat("Expected all shards successful but got successful [" + response.getSuccessfulShards() + "] total [" + response.getTotalShards() + "]",, +                response.getTotalShards(), equalTo(response.getSuccessfulShards()));, +        assertVersionSerializable(response);, +    }, +]