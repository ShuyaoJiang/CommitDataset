[+++ b/core/src/main/java/org/elasticsearch/monitor/jvm/JvmStats.java, +            bufferPools = null;, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/JvmStats.java, +            bufferPools = null;, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.admin.cluster.node.stats;, +, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.transport.LocalTransportAddress;, +import org.elasticsearch.discovery.DiscoveryStats;, +import org.elasticsearch.discovery.zen.publish.PendingClusterStateStats;, +import org.elasticsearch.http.HttpStats;, +import org.elasticsearch.indices.breaker.AllCircuitBreakerStats;, +import org.elasticsearch.indices.breaker.CircuitBreakerStats;, +import org.elasticsearch.ingest.IngestStats;, +import org.elasticsearch.monitor.fs.FsInfo;, +import org.elasticsearch.monitor.jvm.JvmStats;, +import org.elasticsearch.monitor.os.OsStats;, +import org.elasticsearch.monitor.process.ProcessStats;, +import org.elasticsearch.script.ScriptStats;, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.test.VersionUtils;, +import org.elasticsearch.threadpool.ThreadPoolStats;, +import org.elasticsearch.transport.TransportStats;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +, +import static java.util.Collections.emptyMap;, +import static java.util.Collections.emptySet;, +, +public class NodeStatsTests extends ESTestCase {, +, +    public void testSerialization() throws IOException {, +        NodeStats nodeStats = createNodeStats();, +        try (BytesStreamOutput out = new BytesStreamOutput()) {, +            nodeStats.writeTo(out);, +            try (StreamInput in = out.bytes().streamInput()) {, +                NodeStats deserializedNodeStats = NodeStats.readNodeStats(in);, +                assertEquals(nodeStats.getNode(), deserializedNodeStats.getNode());, +                assertEquals(nodeStats.getTimestamp(), deserializedNodeStats.getTimestamp());, +                if (nodeStats.getOs() == null) {, +                    assertNull(deserializedNodeStats.getOs());, +                } else {, +                    assertEquals(nodeStats.getOs().getTimestamp(), deserializedNodeStats.getOs().getTimestamp());, +                    assertEquals(nodeStats.getOs().getSwap().getFree(), deserializedNodeStats.getOs().getSwap().getFree());, +                    assertEquals(nodeStats.getOs().getSwap().getTotal(), deserializedNodeStats.getOs().getSwap().getTotal());, +                    assertEquals(nodeStats.getOs().getSwap().getUsed(), deserializedNodeStats.getOs().getSwap().getUsed());, +                    assertEquals(nodeStats.getOs().getMem().getFree(), deserializedNodeStats.getOs().getMem().getFree());, +                    assertEquals(nodeStats.getOs().getMem().getTotal(), deserializedNodeStats.getOs().getMem().getTotal());, +                    assertEquals(nodeStats.getOs().getMem().getUsed(), deserializedNodeStats.getOs().getMem().getUsed());, +                    assertEquals(nodeStats.getOs().getMem().getFreePercent(), deserializedNodeStats.getOs().getMem().getFreePercent());, +                    assertEquals(nodeStats.getOs().getMem().getUsedPercent(), deserializedNodeStats.getOs().getMem().getUsedPercent());, +                    assertEquals(nodeStats.getOs().getCpu().getPercent(), deserializedNodeStats.getOs().getCpu().getPercent());, +                    assertArrayEquals(nodeStats.getOs().getCpu().getLoadAverage(),, +                            deserializedNodeStats.getOs().getCpu().getLoadAverage(), 0);, +                }, +                if (nodeStats.getProcess() == null) {, +                    assertNull(deserializedNodeStats.getProcess());, +                } else {, +                    assertEquals(nodeStats.getProcess().getTimestamp(), deserializedNodeStats.getProcess().getTimestamp());, +                    assertEquals(nodeStats.getProcess().getCpu().getTotal(), deserializedNodeStats.getProcess().getCpu().getTotal());, +                    assertEquals(nodeStats.getProcess().getCpu().getPercent(), deserializedNodeStats.getProcess().getCpu().getPercent());, +                    assertEquals(nodeStats.getProcess().getMem().getTotalVirtual(),, +                            deserializedNodeStats.getProcess().getMem().getTotalVirtual());, +                    assertEquals(nodeStats.getProcess().getMaxFileDescriptors(),, +                            deserializedNodeStats.getProcess().getMaxFileDescriptors());, +                    assertEquals(nodeStats.getProcess().getOpenFileDescriptors(),, +                            deserializedNodeStats.getProcess().getOpenFileDescriptors());, +                }, +                if (nodeStats.getJvm() == null) {, +                    assertNull(deserializedNodeStats.getJvm());, +                } else {, +                    assertEquals(nodeStats.getJvm().getTimestamp(), deserializedNodeStats.getJvm().getTimestamp());, +                    assertEquals(nodeStats.getJvm().getMem().getHeapUsedPercent(),]