[+++ b/src/main/java/org/elasticsearch/action/count/CountRequest.java, +    long nowInMillis;, +, +++ b/src/main/java/org/elasticsearch/action/count/CountRequest.java, +    long nowInMillis;, +, +++ b/src/main/java/org/elasticsearch/action/count/ShardCountRequest.java, +import org.elasticsearch.Version;, +    private long nowInMillis;, +, +        this.nowInMillis = request.nowInMillis;, +    public long nowInMillis() {, +        return this.nowInMillis;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_0_90_6)) {, +            nowInMillis = in.readVLong();, +        } else {, +            nowInMillis = System.currentTimeMillis();, +        }, +        if (out.getVersion().onOrAfter(Version.V_0_90_6)) {, +            out.writeVLong(nowInMillis);, +        }, +++ b/src/main/java/org/elasticsearch/action/count/CountRequest.java, +    long nowInMillis;, +, +++ b/src/main/java/org/elasticsearch/action/count/ShardCountRequest.java, +import org.elasticsearch.Version;, +    private long nowInMillis;, +, +        this.nowInMillis = request.nowInMillis;, +    public long nowInMillis() {, +        return this.nowInMillis;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_0_90_6)) {, +            nowInMillis = in.readVLong();, +        } else {, +            nowInMillis = System.currentTimeMillis();, +        }, +        if (out.getVersion().onOrAfter(Version.V_0_90_6)) {, +            out.writeVLong(nowInMillis);, +        }, +++ b/src/main/java/org/elasticsearch/action/count/TransportCountAction.java, +import org.elasticsearch.action.ActionListener;, +    protected void doExecute(CountRequest request, ActionListener<CountResponse> listener) {, +        request.nowInMillis = System.currentTimeMillis();, +        super.doExecute(request, listener);, +    }, +, +    @Override, +                new ShardSearchRequest().types(request.types()), +                        .filteringAliases(request.filteringAliases()), +                        .nowInMillis(request.nowInMillis()),, +++ b/src/main/java/org/elasticsearch/action/count/CountRequest.java, +    long nowInMillis;, +, +++ b/src/main/java/org/elasticsearch/action/count/ShardCountRequest.java, +import org.elasticsearch.Version;, +    private long nowInMillis;, +, +        this.nowInMillis = request.nowInMillis;, +    public long nowInMillis() {, +        return this.nowInMillis;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_0_90_6)) {, +            nowInMillis = in.readVLong();, +        } else {, +            nowInMillis = System.currentTimeMillis();, +        }, +        if (out.getVersion().onOrAfter(Version.V_0_90_6)) {, +            out.writeVLong(nowInMillis);, +        }, +++ b/src/main/java/org/elasticsearch/action/count/TransportCountAction.java, +import org.elasticsearch.action.ActionListener;, +    protected void doExecute(CountRequest request, ActionListener<CountResponse> listener) {, +        request.nowInMillis = System.currentTimeMillis();, +        super.doExecute(request, listener);, +    }, +, +    @Override, +                new ShardSearchRequest().types(request.types()), +                        .filteringAliases(request.filteringAliases()), +                        .nowInMillis(request.nowInMillis()),, +++ b/src/test/java/org/elasticsearch/count/query/SimpleQueryTests.java, +import static org.hamcrest.Matchers.allOf;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.equalTo;, +    @Test, +        refresh();, +        countResponse = client().prepareCount().setQuery(queryString("future:[now/D TO now+2M/d]").lowercaseExpandedTerms(false)).execute().actionGet();, +        //D is an unsupported unit in date math, +        assertThat(countResponse.getSuccessfulShards(), equalTo(0));, +        assertThat(countResponse.getFailedShards(), equalTo(1));, +        assertThat(countResponse.getShardFailures().length, equalTo(1));, +        assertThat(countResponse.getShardFailures()[0].reason(), allOf(containsString("Failed to parse"), containsString("unit [D] not supported for date math")));]