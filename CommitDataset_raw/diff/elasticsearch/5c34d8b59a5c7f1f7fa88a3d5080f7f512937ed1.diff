[+++ b/src/main/java/org/elasticsearch/alerts/AlertingModule.java, +import org.elasticsearch.alerts.client.NodeAlertsClient;, +        bind(AlertsClient.class).to(NodeAlertsClient.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/alerts/AlertingModule.java, +import org.elasticsearch.alerts.client.NodeAlertsClient;, +        bind(AlertsClient.class).to(NodeAlertsClient.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/alerts/client/AlertsClient.java, +import org.elasticsearch.action.ActionFuture;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.alerts.transport.actions.delete.DeleteAlertRequest;, +import org.elasticsearch.alerts.transport.actions.delete.DeleteAlertRequestBuilder;, +import org.elasticsearch.alerts.transport.actions.delete.DeleteAlertResponse;, +import org.elasticsearch.alerts.transport.actions.get.GetAlertRequest;, +import org.elasticsearch.alerts.transport.actions.get.GetAlertRequestBuilder;, +import org.elasticsearch.alerts.transport.actions.get.GetAlertResponse;, +import org.elasticsearch.alerts.transport.actions.index.IndexAlertRequest;, +import org.elasticsearch.alerts.transport.actions.index.IndexAlertRequestBuilder;, +import org.elasticsearch.alerts.transport.actions.index.IndexAlertResponse;, +import org.elasticsearch.alerts.transport.actions.stats.AlertsStatsRequest;, +import org.elasticsearch.alerts.transport.actions.stats.AlertsStatsRequestBuilder;, +import org.elasticsearch.alerts.transport.actions.stats.AlertsStatsResponse;, +import org.elasticsearch.client.ElasticsearchClient;, +/**, + */, +public interface AlertsClient extends ElasticsearchClient<AlertsClient> {, +    /**, +     * Creates a request builder that gets an alert by name (id), +     *, +     * @param alertName the name (id) of the alert, +     * @return The request builder, +     */, +    GetAlertRequestBuilder prepareGetAlert(String alertName);, +    /**, +     * Creates a request builder that gets an alert, +     *, +     * @return the request builder, +     */, +    GetAlertRequestBuilder prepareGetAlert();, +    /**, +     * Gets an alert from the alert index, +     *, +     * @param request The get alert request, +     * @param listener The listener for the get alert response containing the GetResponse for this alert, +     */, +    void getAlert(GetAlertRequest request, ActionListener<GetAlertResponse> listener);, +    /**, +     * Gets an alert from the alert index, +     *, +     * @param request The get alert request with the alert name (id), +     * @return The response containing the GetResponse for this alert, +     */, +    ActionFuture<GetAlertResponse> getAlert(GetAlertRequest request);, +    /**, +     * Creates a request builder to delete an alert by name (id), +     *, +     * @param alertName the name (id) of the alert, +     * @return The request builder, +     */, +    DeleteAlertRequestBuilder prepareDeleteAlert(String alertName);, +    /**, +     * Creates a request builder that deletes an alert, +     *, +     * @return The request builder, +     */, +    DeleteAlertRequestBuilder prepareDeleteAlert();, +    /**, +     * Deletes an alert, +     *, +     * @param request The delete request with the alert name (id) to be deleted, +     * @param listener The listener for the delete alert response containing the DeleteResponse for this action, +     */, +    void deleteAlert(DeleteAlertRequest request, ActionListener<DeleteAlertResponse> listener);, +    /**, +     * Deletes an alert, +     *, +     * @param request The delete request with the alert name (id) to be deleted, +     * @return The response containing the DeleteResponse for this action, +     */, +    ActionFuture<DeleteAlertResponse> deleteAlert(DeleteAlertRequest request);, +    /**, +     * Creates a request builder to build a request to index an alert, +     *, +     * @param alertName The name of the alert to index, +     * @return The builder to create the alert, +     */, +    IndexAlertRequestBuilder prepareIndexAlert(String alertName);, +    /**, +     * Creates a request builder to build a request to index an alert, +     *, +     * @return The builder, +     */, +    IndexAlertRequestBuilder prepareIndexAlert();, +    /**, +     * Indexes an alert and registers it with the scheduler, +     *, +     * @param request The request containing the alert to index and register, +     * @param listener The listener for the response containing the IndexResponse for this alert, +     */, +    void indexAlert(IndexAlertRequest request, ActionListener<IndexAlertResponse> listener);, +    /**]