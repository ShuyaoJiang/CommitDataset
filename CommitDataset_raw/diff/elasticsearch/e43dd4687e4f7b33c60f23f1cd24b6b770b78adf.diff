[+++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.query;, +, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.List;, +import java.util.Locale;, +, +/**, + * Same as {@link MatchQueryBuilder} but supports multiple fields., + */, +public class MultiMatchQueryBuilder extends BaseQueryBuilder implements BoostableQueryBuilder<MultiMatchQueryBuilder> {, +, +    private final Object text;, +, +    private final List<String> fields;, +, +    private MatchQueryBuilder.Type type;, +, +    private MatchQueryBuilder.Operator operator;, +, +    private String analyzer;, +, +    private Float boost;, +, +    private Integer slop;, +, +    private String fuzziness;, +, +    private Integer prefixLength;, +, +    private Integer maxExpansions;, +, +    private String minimumShouldMatch;, +, +    private String rewrite = null;, +, +    private String fuzzyRewrite = null;, +, +    private Boolean useDisMax;, +, +    private Integer tieBreaker;, +, +    /**, +     * Constructs a new text query., +     */, +    public MultiMatchQueryBuilder(Object text, String... fields) {, +        this.fields = Arrays.asList(fields);, +        this.text = text;, +    }, +, +    /**, +     * Sets the type of the text query., +     */, +    public MultiMatchQueryBuilder type(MatchQueryBuilder.Type type) {, +        this.type = type;, +        return this;, +    }, +, +    /**, +     * Sets the operator to use when using a boolean query. Defaults to <tt>OR</tt>., +     */, +    public MultiMatchQueryBuilder operator(MatchQueryBuilder.Operator operator) {, +        this.operator = operator;, +        return this;, +    }, +, +    /**, +     * Explicitly set the analyzer to use. Defaults to use explicit mapping config for the field, or, if not, +     * set, the default search analyzer., +     */, +    public MultiMatchQueryBuilder analyzer(String analyzer) {, +        this.analyzer = analyzer;, +        return this;, +    }, +, +    /**, +     * Set the boost to apply to the query., +     */]