[+++ b/core/pom.xml, +        <version>2.0.0-beta1-SNAPSHOT</version>, +++ b/core/pom.xml, +        <version>2.0.0-beta1-SNAPSHOT</version>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version CURRENT = V_2_0_0_beta1;, +++ b/core/pom.xml, +        <version>2.0.0-beta1-SNAPSHOT</version>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version CURRENT = V_2_0_0_beta1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/ShardUpgradeResponse.java, +import org.elasticsearch.Version;, +    private org.apache.lucene.util.Version oldestLuceneSegment;, +, +    private Version upgradeVersion;, +    ShardUpgradeResponse(ShardId shardId, boolean primary, Version upgradeVersion, org.apache.lucene.util.Version oldestLuceneSegment) {, +        this.upgradeVersion = upgradeVersion;, +        this.oldestLuceneSegment = oldestLuceneSegment;, +    public org.apache.lucene.util.Version oldestLuceneSegment() {, +        return this.oldestLuceneSegment;, +    }, +, +    public Version upgradeVersion() {, +        return this.upgradeVersion;, +        upgradeVersion = Version.readVersion(in);, +            oldestLuceneSegment = org.apache.lucene.util.Version.parse(in.readString());, +            throw new IOException("failed to parse lucene version [" + oldestLuceneSegment + "]", ex);, +, +        Version.writeVersion(upgradeVersion, out);, +        out.writeString(oldestLuceneSegment.toString());, +++ b/core/pom.xml, +        <version>2.0.0-beta1-SNAPSHOT</version>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version CURRENT = V_2_0_0_beta1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/ShardUpgradeResponse.java, +import org.elasticsearch.Version;, +    private org.apache.lucene.util.Version oldestLuceneSegment;, +, +    private Version upgradeVersion;, +    ShardUpgradeResponse(ShardId shardId, boolean primary, Version upgradeVersion, org.apache.lucene.util.Version oldestLuceneSegment) {, +        this.upgradeVersion = upgradeVersion;, +        this.oldestLuceneSegment = oldestLuceneSegment;, +    public org.apache.lucene.util.Version oldestLuceneSegment() {, +        return this.oldestLuceneSegment;, +    }, +, +    public Version upgradeVersion() {, +        return this.upgradeVersion;, +        upgradeVersion = Version.readVersion(in);, +            oldestLuceneSegment = org.apache.lucene.util.Version.parse(in.readString());, +            throw new IOException("failed to parse lucene version [" + oldestLuceneSegment + "]", ex);, +, +        Version.writeVersion(upgradeVersion, out);, +        out.writeString(oldestLuceneSegment.toString());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.collect.Tuple;, +        Map<String, Tuple<Version, org.apache.lucene.util.Version>> versions = newHashMap();, +                Tuple<Version, org.apache.lucene.util.Version> versionTuple = versions.get(index);, +                if (versionTuple == null) {, +                    versions.put(index, new Tuple<>(shardUpgradeResponse.upgradeVersion(), shardUpgradeResponse.oldestLuceneSegment()));, +                } else {, +                    // We already have versions for this index - let's see if we need to update them based on the current shard, +                    Version version = versionTuple.v1();, +                    org.apache.lucene.util.Version luceneVersion = versionTuple.v2();, +                    // For the metadata we are interested in the _latest_ elasticsearch version that was processing the metadata, +                    // Since we rewrite the mapping during upgrade the metadata is always rewritten by the latest version, +                    if (shardUpgradeResponse.upgradeVersion().after(versionTuple.v1())) {, +                        version = shardUpgradeResponse.upgradeVersion();, +                    }, +                    // For the lucene version we are interested in the _oldest_ lucene version since it determines the, +                    // oldest version that we need to support, +                    if (shardUpgradeResponse.oldestLuceneSegment().onOrAfter(versionTuple.v2()) == false) {, +                        luceneVersion = shardUpgradeResponse.oldestLuceneSegment();, +                    }, +                    versions.put(index, new Tuple<>(version, luceneVersion));, +        Map<String, Tuple<org.elasticsearch.Version, String>> updatedVersions = newHashMap();, +        for (Map.Entry<String, Tuple<Version, org.apache.lucene.util.Version>> versionEntry : versions.entrySet()) {, +                updatedVersions.put(index, new Tuple<>(versionEntry.getValue().v1(), versionEntry.getValue().v2().toString()));, +        org.apache.lucene.util.Version oldestLuceneSegment = indexShard.upgrade(request.upgradeRequest());, +        // We are using the current version of elasticsearch as upgrade version since we update mapping to match the current version, +        return new ShardUpgradeResponse(request.shardId(), indexShard.routingEntry().primary(), Version.CURRENT, oldestLuceneSegment);, +++ b/core/pom.xml, +        <version>2.0.0-beta1-SNAPSHOT</version>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version CURRENT = V_2_0_0_beta1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/ShardUpgradeResponse.java, +import org.elasticsearch.Version;, +    private org.apache.lucene.util.Version oldestLuceneSegment;, +, +    private Version upgradeVersion;, +    ShardUpgradeResponse(ShardId shardId, boolean primary, Version upgradeVersion, org.apache.lucene.util.Version oldestLuceneSegment) {, +        this.upgradeVersion = upgradeVersion;, +        this.oldestLuceneSegment = oldestLuceneSegment;, +    public org.apache.lucene.util.Version oldestLuceneSegment() {, +        return this.oldestLuceneSegment;, +    }, +, +    public Version upgradeVersion() {, +        return this.upgradeVersion;]