[+++ b/src/test/java/org/elasticsearch/test/integration/search/sort/SimpleSortTests.java, +import org.elasticsearch.common.text.Text;, +                        .startObject("int_values").field("type", "integer").endObject(), +                        .startObject("short_values").field("type", "short").endObject(), +                        .startObject("byte_values").field("type", "byte").endObject(), +                        .startObject("float_values").field("type", "float").endObject(), +                        .startObject("double_values").field("type", "double").endObject(), +                        .startObject("string_values").field("type", "string").field("index", "not_analyzed").endObject(), +                .array("int_values", 1, 5, 10, 8), +                .array("short_values", 1, 5, 10, 8), +                .array("byte_values", 1, 5, 10, 8), +                .array("float_values", 1f, 5f, 10f, 8f), +                .array("double_values", 1d, 5d, 10d, 8d), +                .array("string_values", "01", "05", "10", "08"), +                .array("int_values", 11, 15, 20, 7), +                .array("short_values", 11, 15, 20, 7), +                .array("byte_values", 11, 15, 20, 7), +                .array("float_values", 11f, 15f, 20f, 7f), +                .array("double_values", 11d, 15d, 20d, 7d), +                .array("string_values", "11", "15", "20", "07"), +                .array("int_values", 2, 1, 3, -4), +                .array("short_values", 2, 1, 3, -4), +                .array("byte_values", 2, 1, 3, -4), +                .array("float_values", 2f, 1f, 3f, -4f), +                .array("double_values", 2d, 1d, 3d, -4d), +                .array("string_values", "02", "01", "03", "!4"), +, +        searchResponse = client.prepareSearch(), +                .setQuery(matchAllQuery()), +                .setSize(10), +                .addSort("int_values", SortOrder.ASC), +                .execute().actionGet();, +, +        assertThat(searchResponse.hits().getTotalHits(), equalTo(3l));, +        assertThat(searchResponse.hits().hits().length, equalTo(3));, +, +        assertThat(searchResponse.hits().getAt(0).id(), equalTo(Integer.toString(3)));, +        assertThat(((Number) searchResponse.hits().getAt(0).sortValues()[0]).intValue(), equalTo(-4));, +, +        assertThat(searchResponse.hits().getAt(1).id(), equalTo(Integer.toString(1)));, +        assertThat(((Number) searchResponse.hits().getAt(1).sortValues()[0]).intValue(), equalTo(1));, +, +        assertThat(searchResponse.hits().getAt(2).id(), equalTo(Integer.toString(2)));, +        assertThat(((Number) searchResponse.hits().getAt(2).sortValues()[0]).intValue(), equalTo(7));, +, +        searchResponse = client.prepareSearch(), +                .setQuery(matchAllQuery()), +                .setSize(10), +                .addSort("int_values", SortOrder.DESC), +                .execute().actionGet();, +, +        assertThat(searchResponse.hits().getTotalHits(), equalTo(3l));, +        assertThat(searchResponse.hits().hits().length, equalTo(3));, +, +        assertThat(searchResponse.hits().getAt(0).id(), equalTo(Integer.toString(2)));, +        assertThat(((Number) searchResponse.hits().getAt(0).sortValues()[0]).intValue(), equalTo(20));, +, +        assertThat(searchResponse.hits().getAt(1).id(), equalTo(Integer.toString(1)));, +        assertThat(((Number) searchResponse.hits().getAt(1).sortValues()[0]).intValue(), equalTo(10));, +, +        assertThat(searchResponse.hits().getAt(2).id(), equalTo(Integer.toString(3)));, +        assertThat(((Number) searchResponse.hits().getAt(2).sortValues()[0]).intValue(), equalTo(3));, +, +        searchResponse = client.prepareSearch(), +                .setQuery(matchAllQuery()), +                .setSize(10), +                .addSort("short_values", SortOrder.ASC), +                .execute().actionGet();, +, +        assertThat(searchResponse.hits().getTotalHits(), equalTo(3l));, +        assertThat(searchResponse.hits().hits().length, equalTo(3));, +, +        assertThat(searchResponse.hits().getAt(0).id(), equalTo(Integer.toString(3)));, +        assertThat(((Number) searchResponse.hits().getAt(0).sortValues()[0]).intValue(), equalTo(-4));, +, +        assertThat(searchResponse.hits().getAt(1).id(), equalTo(Integer.toString(1)));, +        assertThat(((Number) searchResponse.hits().getAt(1).sortValues()[0]).intValue(), equalTo(1));, +, +        assertThat(searchResponse.hits().getAt(2).id(), equalTo(Integer.toString(2)));, +        assertThat(((Number) searchResponse.hits().getAt(2).sortValues()[0]).intValue(), equalTo(7));, +, +        searchResponse = client.prepareSearch(), +                .setQuery(matchAllQuery()), +                .setSize(10), +                .addSort("short_values", SortOrder.DESC), +                .execute().actionGet();, +, +        assertThat(searchResponse.hits().getTotalHits(), equalTo(3l));, +        assertThat(searchResponse.hits().hits().length, equalTo(3));, +, +        assertThat(searchResponse.hits().getAt(0).id(), equalTo(Integer.toString(2)));, +        assertThat(((Number) searchResponse.hits().getAt(0).sortValues()[0]).intValue(), equalTo(20));, +, +        assertThat(searchResponse.hits().getAt(1).id(), equalTo(Integer.toString(1)));, +        assertThat(((Number) searchResponse.hits().getAt(1).sortValues()[0]).intValue(), equalTo(10));, +, +        assertThat(searchResponse.hits().getAt(2).id(), equalTo(Integer.toString(3)));, +        assertThat(((Number) searchResponse.hits().getAt(2).sortValues()[0]).intValue(), equalTo(3));, +, +        searchResponse = client.prepareSearch()]