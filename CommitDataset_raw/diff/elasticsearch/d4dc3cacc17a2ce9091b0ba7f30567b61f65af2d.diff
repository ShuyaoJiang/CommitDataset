[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    private void setup(boolean addShutdownHook, Tuple<Settings, Environment> tuple) throws Exception {, +        tuple = setupJmx(tuple);, +    private static Tuple<Settings, Environment> setupJmx(Tuple<Settings, Environment> tuple) {, +        if (tuple.v1().get(JmxService.SettingsConstants.CREATE_CONNECTOR) == null) {, +            // automatically create the connector if we are bootstrapping, +            Settings updated = settingsBuilder().put(tuple.v1()).put(JmxService.SettingsConstants.CREATE_CONNECTOR, true).build();, +            tuple = new Tuple<Settings, Environment>(updated, tuple.v2());, +        }, +        return tuple;, +    }, +, +    private static void setupLogging(Tuple<Settings, Environment> tuple) {, +        try {, +            Classes.getDefaultClassLoader().loadClass("org.apache.log4j.Logger");, +            LogConfigurator.configure(tuple.v1());, +        } catch (ClassNotFoundException e) {, +            // no log4j, +        } catch (NoClassDefFoundError e) {, +            // no log4j, +        } catch (Exception e) {, +            System.err.println("Failed to configure logging...");, +            e.printStackTrace();, +        }, +    }, +, +    private static Tuple<Settings, Environment> initialSettings() {, +        return InternalSettingsPerparer.prepareSettings(EMPTY_SETTINGS, true);, +    }, +, +        Tuple<Settings, Environment> tuple = initialSettings();, +        setupLogging(tuple);, +        setup(true, tuple);, +        Tuple<Settings, Environment> tuple = null;, +        try {, +            tuple = initialSettings();, +            setupLogging(tuple);, +        } catch (Exception e) {, +            String errorMessage = buildErrorMessage("Setup", e);, +            System.err.println(errorMessage);, +            System.err.flush();, +            System.exit(3);, +        }, +, +            bootstrap.setup(true, tuple);, +            String errorMessage = buildErrorMessage(stage, e);, +            if (foreground) {, +                logger.error(errorMessage);, +            } else {, +                System.err.println(errorMessage);, +                System.err.flush();, +            }, +            Loggers.disableConsoleLogging();, +            if (logger.isDebugEnabled()) {, +                logger.debug("Exception", e);, +            }, +            System.exit(3);, +        }, +    }, +, +    private static String buildErrorMessage(String stage, Throwable e) {, +        return errorMessage.toString();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    private void setup(boolean addShutdownHook, Tuple<Settings, Environment> tuple) throws Exception {, +        tuple = setupJmx(tuple);, +    private static Tuple<Settings, Environment> setupJmx(Tuple<Settings, Environment> tuple) {, +        if (tuple.v1().get(JmxService.SettingsConstants.CREATE_CONNECTOR) == null) {, +            // automatically create the connector if we are bootstrapping, +            Settings updated = settingsBuilder().put(tuple.v1()).put(JmxService.SettingsConstants.CREATE_CONNECTOR, true).build();, +            tuple = new Tuple<Settings, Environment>(updated, tuple.v2());, +        }, +        return tuple;, +    }, +, +    private static void setupLogging(Tuple<Settings, Environment> tuple) {, +        try {, +            Classes.getDefaultClassLoader().loadClass("org.apache.log4j.Logger");, +            LogConfigurator.configure(tuple.v1());, +        } catch (ClassNotFoundException e) {, +            // no log4j, +        } catch (NoClassDefFoundError e) {, +            // no log4j, +        } catch (Exception e) {, +            System.err.println("Failed to configure logging...");, +            e.printStackTrace();, +        }, +    }, +, +    private static Tuple<Settings, Environment> initialSettings() {, +        return InternalSettingsPerparer.prepareSettings(EMPTY_SETTINGS, true);, +    }, +, +        Tuple<Settings, Environment> tuple = initialSettings();, +        setupLogging(tuple);, +        setup(true, tuple);, +        Tuple<Settings, Environment> tuple = null;, +        try {, +            tuple = initialSettings();, +            setupLogging(tuple);, +        } catch (Exception e) {]