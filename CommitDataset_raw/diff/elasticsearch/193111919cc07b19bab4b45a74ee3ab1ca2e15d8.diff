[+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +import java.util.HashMap;, +        Objects.requireNonNull(params, "params must not be null");, +        Map<String, String> requestParams = new HashMap<>(params);, +        //ignore is a special parameter supported by the clients, shouldn't be sent to es, +        String ignoreString = requestParams.remove("ignore");, +        Set<Integer> ignoreErrorCodes;, +        if (ignoreString == null) {, +            if (HttpHead.METHOD_NAME.equals(method)) {, +                //404 never causes error if returned for a HEAD request, +                ignoreErrorCodes = Collections.singleton(404);, +            } else {, +                ignoreErrorCodes = Collections.emptySet();, +            }, +        } else {, +            String[] ignoresArray = ignoreString.split(",");, +            ignoreErrorCodes = new HashSet<>();, +            if (HttpHead.METHOD_NAME.equals(method)) {, +                //404 never causes error if returned for a HEAD request, +                ignoreErrorCodes.add(404);, +            }, +            for (String ignoreCode : ignoresArray) {, +                try {, +                    ignoreErrorCodes.add(Integer.valueOf(ignoreCode));, +                } catch (NumberFormatException e) {, +                    throw new IllegalArgumentException("ignore value should be a number, found [" + ignoreString + "] instead", e);, +                }, +            }, +        }, +        URI uri = buildUri(pathPrefix, endpoint, requestParams);, +        performRequestAsync(startTime, nextHost().iterator(), request, ignoreErrorCodes, httpAsyncResponseConsumerFactory,, +                failureTrackingResponseListener);, +                                     final Set<Integer> ignoreErrorCodes,, +                    if (isSuccessfulResponse(statusCode) || ignoreErrorCodes.contains(response.getStatusLine().getStatusCode())) {, +                            retryIfPossible(responseException);, +                    retryIfPossible(failure);, +            private void retryIfPossible(Exception exception) {, +                        performRequestAsync(startTime, hosts, request, ignoreErrorCodes, httpAsyncResponseConsumerFactory, listener);, +    private static boolean isSuccessfulResponse(int statusCode) {, +        return statusCode < 300;, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +import java.util.HashMap;, +        Objects.requireNonNull(params, "params must not be null");, +        Map<String, String> requestParams = new HashMap<>(params);, +        //ignore is a special parameter supported by the clients, shouldn't be sent to es, +        String ignoreString = requestParams.remove("ignore");, +        Set<Integer> ignoreErrorCodes;, +        if (ignoreString == null) {, +            if (HttpHead.METHOD_NAME.equals(method)) {, +                //404 never causes error if returned for a HEAD request, +                ignoreErrorCodes = Collections.singleton(404);, +            } else {, +                ignoreErrorCodes = Collections.emptySet();, +            }, +        } else {, +            String[] ignoresArray = ignoreString.split(",");, +            ignoreErrorCodes = new HashSet<>();, +            if (HttpHead.METHOD_NAME.equals(method)) {, +                //404 never causes error if returned for a HEAD request, +                ignoreErrorCodes.add(404);, +            }, +            for (String ignoreCode : ignoresArray) {, +                try {, +                    ignoreErrorCodes.add(Integer.valueOf(ignoreCode));, +                } catch (NumberFormatException e) {, +                    throw new IllegalArgumentException("ignore value should be a number, found [" + ignoreString + "] instead", e);, +                }, +            }, +        }, +        URI uri = buildUri(pathPrefix, endpoint, requestParams);, +        performRequestAsync(startTime, nextHost().iterator(), request, ignoreErrorCodes, httpAsyncResponseConsumerFactory,, +                failureTrackingResponseListener);, +                                     final Set<Integer> ignoreErrorCodes,, +                    if (isSuccessfulResponse(statusCode) || ignoreErrorCodes.contains(response.getStatusLine().getStatusCode())) {, +                            retryIfPossible(responseException);, +                    retryIfPossible(failure);, +            private void retryIfPossible(Exception exception) {, +                        performRequestAsync(startTime, hosts, request, ignoreErrorCodes, httpAsyncResponseConsumerFactory, listener);, +    private static boolean isSuccessfulResponse(int statusCode) {, +        return statusCode < 300;, +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientSingleHostTests.java, +            Set<Integer> expectedIgnores = new HashSet<>();, +            String ignoreParam = "";, +            if (HttpHead.METHOD_NAME.equals(method)) {, +                expectedIgnores.add(404);, +            }, +            if (randomBoolean()) {, +                int numIgnores = randomIntBetween(1, 3);, +                for (int i = 0; i < numIgnores; i++) {, +                    Integer code = randomFrom(getAllErrorStatusCodes());, +                    expectedIgnores.add(code);, +                    ignoreParam += code;, +                    if (i < numIgnores - 1) {, +                        ignoreParam += ",";, +                    }, +                }, +            }, +                    Map<String, String> params;, +                    if (ignoreParam.isEmpty()) {, +                        params = Collections.emptyMap();]