[+++ b/plugins/cloud-gce/README.md, +++ b/plugins/cloud-gce/README.md, +++ /dev/null, +++ b/plugins/cloud-gce/README.md, +++ /dev/null, +++ b/plugins/cloud-gce/licenses/google-api-services-compute-v1-rev71-1.20.0.jar.sha1, +2fa36fff3b5bf59a63c4f2bbfac1f88251cd7986, +++ b/plugins/cloud-gce/README.md, +++ /dev/null, +++ b/plugins/cloud-gce/licenses/google-api-services-compute-v1-rev71-1.20.0.jar.sha1, +2fa36fff3b5bf59a63c4f2bbfac1f88251cd7986, +++ b/plugins/cloud-gce/pom.xml, +++ b/plugins/cloud-gce/README.md, +++ /dev/null, +++ b/plugins/cloud-gce/licenses/google-api-services-compute-v1-rev71-1.20.0.jar.sha1, +2fa36fff3b5bf59a63c4f2bbfac1f88251cd7986, +++ b/plugins/cloud-gce/pom.xml, +++ b/plugins/cloud-gce/src/main/java/org/elasticsearch/cloud/gce/GceComputeServiceImpl.java, +import java.security.GeneralSecurityException;, +import java.util.Arrays;, +import java.util.Collections;, +    private final List<String> zones;, +    public static final String TOKEN_SERVER_ENCODED_URL = "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token";, +            logger.debug("get instances for project [{}], zones [{}]", project, zones);, +            List<List<Instance>> instanceListByZone = Lists.transform(zones, new Function<String, List<Instance>>() {, +                            return Collections.EMPTY_LIST;, +                        return Collections.EMPTY_LIST;, +    private HttpTransport gceHttpTransport;, +    private JsonFactory gceJsonFactory;, +    public GceComputeServiceImpl(Settings settings) {, +        this.zones = Arrays.asList(zoneList);, +    }, +, +    protected synchronized HttpTransport getGceHttpTransport() throws GeneralSecurityException, IOException {, +        if (gceHttpTransport == null) {, +            gceHttpTransport = GoogleNetHttpTransport.newTrustedTransport();, +        }, +        return gceHttpTransport;, +            gceJsonFactory = new JacksonFactory();, +            ComputeCredential credential = new ComputeCredential.Builder(getGceHttpTransport(), gceJsonFactory), +            if (credential.getExpiresInSeconds() != null) {, +            }, +            this.client = new Compute.Builder(getGceHttpTransport(), gceJsonFactory, null), +            logger.warn("unable to start GCE discovery service", e);, +        if (gceHttpTransport != null) {, +            try {, +                gceHttpTransport.shutdown();, +            } catch (IOException e) {, +                logger.warn("unable to shutdown GCE Http Transport", e);, +            }, +            gceHttpTransport = null;, +        }, +++ b/plugins/cloud-gce/README.md, +++ /dev/null, +++ b/plugins/cloud-gce/licenses/google-api-services-compute-v1-rev71-1.20.0.jar.sha1, +2fa36fff3b5bf59a63c4f2bbfac1f88251cd7986, +++ b/plugins/cloud-gce/pom.xml, +++ b/plugins/cloud-gce/src/main/java/org/elasticsearch/cloud/gce/GceComputeServiceImpl.java, +import java.security.GeneralSecurityException;, +import java.util.Arrays;, +import java.util.Collections;, +    private final List<String> zones;, +    public static final String TOKEN_SERVER_ENCODED_URL = "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token";, +            logger.debug("get instances for project [{}], zones [{}]", project, zones);, +            List<List<Instance>> instanceListByZone = Lists.transform(zones, new Function<String, List<Instance>>() {, +                            return Collections.EMPTY_LIST;, +                        return Collections.EMPTY_LIST;, +    private HttpTransport gceHttpTransport;, +    private JsonFactory gceJsonFactory;, +    public GceComputeServiceImpl(Settings settings) {, +        this.zones = Arrays.asList(zoneList);, +    }, +, +    protected synchronized HttpTransport getGceHttpTransport() throws GeneralSecurityException, IOException {, +        if (gceHttpTransport == null) {, +            gceHttpTransport = GoogleNetHttpTransport.newTrustedTransport();, +        }, +        return gceHttpTransport;, +            gceJsonFactory = new JacksonFactory();, +            ComputeCredential credential = new ComputeCredential.Builder(getGceHttpTransport(), gceJsonFactory), +            if (credential.getExpiresInSeconds() != null) {, +            }, +            this.client = new Compute.Builder(getGceHttpTransport(), gceJsonFactory, null), +            logger.warn("unable to start GCE discovery service", e);, +        if (gceHttpTransport != null) {, +            try {, +                gceHttpTransport.shutdown();, +            } catch (IOException e) {, +                logger.warn("unable to shutdown GCE Http Transport", e);, +            }, +            gceHttpTransport = null;, +        }, +++ b/plugins/cloud-gce/src/main/java/org/elasticsearch/discovery/gce/GceUnicastHostsProvider.java, +    private final String[] zones;, +        this.zones = settings.getAsArray(Fields.ZONE);, +        checkProperty(Fields.ZONE, zones);, +                logger.trace("no instance found for project [{}], zones [{}].", this.project, this.zones);, +                            instance.getTags() == null || instance.getTags().getItems() == null ? "" : instance.getTags());, +, +    private void checkProperty(String name, String[] values) {]