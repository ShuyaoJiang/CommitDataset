[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndexingMemoryController;, +                    BootstrapSettings.CTRLHANDLER_SETTING,, +                    IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING,, +                    IndexingMemoryController.MIN_INDEX_BUFFER_SIZE_SETTING,, +                    IndexingMemoryController.MAX_INDEX_BUFFER_SIZE_SETTING,, +                    IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING,, +                    IndexingMemoryController.SHARD_MEMORY_INTERVAL_TIME_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndexingMemoryController;, +                    BootstrapSettings.CTRLHANDLER_SETTING,, +                    IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING,, +                    IndexingMemoryController.MIN_INDEX_BUFFER_SIZE_SETTING,, +                    IndexingMemoryController.MAX_INDEX_BUFFER_SIZE_SETTING,, +                    IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING,, +                    IndexingMemoryController.SHARD_MEMORY_INTERVAL_TIME_SETTING, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +            IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING.get(indexSettings.getSettings()));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndexingMemoryController;, +                    BootstrapSettings.CTRLHANDLER_SETTING,, +                    IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING,, +                    IndexingMemoryController.MIN_INDEX_BUFFER_SIZE_SETTING,, +                    IndexingMemoryController.MAX_INDEX_BUFFER_SIZE_SETTING,, +                    IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING,, +                    IndexingMemoryController.SHARD_MEMORY_INTERVAL_TIME_SETTING, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +            IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING.get(indexSettings.getSettings()));, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +import org.elasticsearch.common.settings.Setting.Property;, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<String> INDEX_BUFFER_SIZE_SETTING = new Setting<String>("indices.memory.index_buffer_size", (s) -> "10%",, +                                                                                        (s) -> {, +                                                                                            if (s.endsWith("%")) {, +                                                                                                try {, +                                                                                                    Double.parseDouble(s.substring(0, s.length() - 1));, +                                                                                                } catch (NumberFormatException nfe) {, +                                                                                                    throw new IllegalArgumentException("unknown value for [indices.memory.index_buffer_size]: must be X% or a size value (e.g. XMB) but was: " + s);, +                                                                                                }, +                                                                                            } else {, +                                                                                                try {, +                                                                                                    ByteSizeValue.parseBytesSizeValue(s, "indices.memory.index_buffer_size");, +                                                                                                } catch (Throwable t) {, +                                                                                                    throw new IllegalArgumentException("unknown value for [indices.memory.index_buffer_size]: must be X% or a size value (e.g. XMB) but " + t.getMessage());, +                                                                                                }, +                                                                                            }, +, +                                                                                            return s;, +                                                                                        },, +                                                                                        Property.NodeScope);, +    public static final Setting<ByteSizeValue> MIN_INDEX_BUFFER_SIZE_SETTING = Setting.byteSizeSetting("indices.memory.min_index_buffer_size", new ByteSizeValue(48, ByteSizeUnit.MB), Property.NodeScope);, +    public static final Setting<ByteSizeValue> MAX_INDEX_BUFFER_SIZE_SETTING = Setting.byteSizeSetting("indices.memory.max_index_buffer_size", new ByteSizeValue(-1), Property.NodeScope);, +    public static final Setting<TimeValue> SHARD_INACTIVE_TIME_SETTING = Setting.timeSetting("indices.memory.shard_inactive_time", TimeValue.timeValueMinutes(5), Property.NodeScope);, +    public static final Setting<TimeValue> SHARD_MEMORY_INTERVAL_TIME_SETTING = Setting.timeSetting("indices.memory.interval", TimeValue.timeValueSeconds(5), Property.NodeScope);, +        String indexingBufferSetting = INDEX_BUFFER_SIZE_SETTING.get(settings);, +            ByteSizeValue minIndexingBuffer = MIN_INDEX_BUFFER_SIZE_SETTING.get(this.settings);, +            ByteSizeValue maxIndexingBuffer = MAX_INDEX_BUFFER_SIZE_SETTING.get(this.settings);, +            if (maxIndexingBuffer.bytes() != -1 && indexingBuffer.bytes() > maxIndexingBuffer.bytes()) {, +            indexingBuffer = ByteSizeValue.parseBytesSizeValue(indexingBufferSetting, INDEX_BUFFER_SIZE_SETTING.getKey());, +        this.inactiveTime = SHARD_INACTIVE_TIME_SETTING.get(this.settings);, +        this.interval = SHARD_MEMORY_INTERVAL_TIME_SETTING.get(this.settings);, +                     SHARD_INACTIVE_TIME_SETTING.getKey(), this.inactiveTime,, +                     SHARD_MEMORY_INTERVAL_TIME_SETTING.getKey(), this.interval);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndexingMemoryController;, +                    BootstrapSettings.CTRLHANDLER_SETTING,, +                    IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING,, +                    IndexingMemoryController.MIN_INDEX_BUFFER_SIZE_SETTING,, +                    IndexingMemoryController.MAX_INDEX_BUFFER_SIZE_SETTING,, +                    IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING,, +                    IndexingMemoryController.SHARD_MEMORY_INTERVAL_TIME_SETTING, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +            IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING.get(indexSettings.getSettings()));, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +import org.elasticsearch.common.settings.Setting.Property;, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<String> INDEX_BUFFER_SIZE_SETTING = new Setting<String>("indices.memory.index_buffer_size", (s) -> "10%",, +                                                                                        (s) -> {, +                                                                                            if (s.endsWith("%")) {, +                                                                                                try {, +                                                                                                    Double.parseDouble(s.substring(0, s.length() - 1));, +                                                                                                } catch (NumberFormatException nfe) {, +                                                                                                    throw new IllegalArgumentException("unknown value for [indices.memory.index_buffer_size]: must be X% or a size value (e.g. XMB) but was: " + s);, +                                                                                                }, +                                                                                            } else {, +                                                                                                try {, +                                                                                                    ByteSizeValue.parseBytesSizeValue(s, "indices.memory.index_buffer_size");, +                                                                                                } catch (Throwable t) {, +                                                                                                    throw new IllegalArgumentException("unknown value for [indices.memory.index_buffer_size]: must be X% or a size value (e.g. XMB) but " + t.getMessage());, +                                                                                                }, +                                                                                            }, +, +                                                                                            return s;, +                                                                                        },, +                                                                                        Property.NodeScope);, +    public static final Setting<ByteSizeValue> MIN_INDEX_BUFFER_SIZE_SETTING = Setting.byteSizeSetting("indices.memory.min_index_buffer_size", new ByteSizeValue(48, ByteSizeUnit.MB), Property.NodeScope);, +    public static final Setting<ByteSizeValue> MAX_INDEX_BUFFER_SIZE_SETTING = Setting.byteSizeSetting("indices.memory.max_index_buffer_size", new ByteSizeValue(-1), Property.NodeScope);, +    public static final Setting<TimeValue> SHARD_INACTIVE_TIME_SETTING = Setting.timeSetting("indices.memory.shard_inactive_time", TimeValue.timeValueMinutes(5), Property.NodeScope);, +    public static final Setting<TimeValue> SHARD_MEMORY_INTERVAL_TIME_SETTING = Setting.timeSetting("indices.memory.interval", TimeValue.timeValueSeconds(5), Property.NodeScope);, +        String indexingBufferSetting = INDEX_BUFFER_SIZE_SETTING.get(settings);]