[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +import org.elasticsearch.util.lucene.search.CustomBoostFactorQuery;, +        if (context.queryBoost() != 1.0f) {, +            context.query(new CustomBoostFactorQuery(context.query(), context.queryBoost()));, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +import org.elasticsearch.util.lucene.search.CustomBoostFactorQuery;, +        if (context.queryBoost() != 1.0f) {, +            context.query(new CustomBoostFactorQuery(context.query(), context.queryBoost()));, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/lucene/search/CustomBoostFactorQuery.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.util.lucene.search;, +, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.*;, +import org.apache.lucene.util.ToStringUtils;, +, +import java.io.IOException;, +import java.util.Set;, +, +/**, + * A query that wraps another query and applies the provided boost values to it. Simply, + * applied the boost factor to the score of the wrapped query., + *, + * @author kimchy (shay.banon), + */, +public class CustomBoostFactorQuery extends Query {, +, +    private Query q;, +    private float boostFactor;, +, +    public CustomBoostFactorQuery(Query subQuery, float boostFactor) {, +        this.q = subQuery;, +        this.boostFactor = boostFactor;, +    }, +, +    public Query getQuery() {, +        return q;, +    }, +, +    public float getBoostFactor() {, +        return boostFactor;, +    }, +, +    @Override, +    public Query rewrite(IndexReader reader) throws IOException {, +        Query newQ = q.rewrite(reader);, +        if (newQ == q) return this;, +        CustomBoostFactorQuery bq = (CustomBoostFactorQuery) this.clone();, +        bq.q = newQ;, +        return bq;, +    }, +, +    @Override, +    public void extractTerms(Set<Term> terms) {, +        q.extractTerms(terms);, +    }, +, +    @Override, +    public Weight createWeight(Searcher searcher) throws IOException {, +        return new CustomBoostFactorQuery.BoostedWeight(searcher);, +    }, +, +    private class BoostedWeight extends Weight {, +        Searcher searcher;, +        Weight qWeight;, +, +        public BoostedWeight(Searcher searcher) throws IOException {, +            this.searcher = searcher;, +            this.qWeight = q.weight(searcher);, +        }, +, +        public Query getQuery() {, +            return CustomBoostFactorQuery.this;, +        }, +, +        public float getValue() {, +            return getBoost();, +        }, +]