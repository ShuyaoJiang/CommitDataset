[+++ b/src/main/java/org/elasticsearch/common/lucene/LoggerInfoStream.java, +        logger.trace("{}: {}",  component, message);, +++ b/src/main/java/org/elasticsearch/common/lucene/LoggerInfoStream.java, +        logger.trace("{}: {}",  component, message);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +        if (type == null) {, +            throw new ElasticsearchIllegalArgumentException("found no fielddata type for field [" + fieldNames.fullName() + "]");, +        }, +++ b/src/main/java/org/elasticsearch/common/lucene/LoggerInfoStream.java, +        logger.trace("{}: {}",  component, message);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +        if (type == null) {, +            throw new ElasticsearchIllegalArgumentException("found no fielddata type for field [" + fieldNames.fullName() + "]");, +        }, +++ b/src/test/java/org/elasticsearch/search/suggest/CompletionSuggestSearchTests.java, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.search.aggregations.AggregationBuilders;, +    @Test // see #5930, +    public void testIssue5930() throws IOException {, +        client().admin().indices().prepareCreate(INDEX).get();, +        ElasticsearchAssertions.assertAcked(client().admin().indices().preparePutMapping(INDEX).setType(TYPE).setSource(jsonBuilder().startObject(), +                .startObject(TYPE).startObject("properties"), +                .startObject(FIELD), +                .field("type", "completion"), +                .endObject(), +                .endObject().endObject(), +                .endObject()));, +        ensureYellow();, +        String string = "foo bar";, +        client().prepareIndex(INDEX, TYPE, "1").setSource(jsonBuilder(), +                .startObject(), +                .field(FIELD, string), +                .endObject(), +        ).setRefresh(true).get();, +, +        try {, +            client().prepareSearch(INDEX).addAggregation(AggregationBuilders.terms("suggest_agg").field(FIELD)).execute().actionGet();, +            // Exception must be thrown, +            assertFalse(true);, +        } catch (SearchPhaseExecutionException e) {, +            assertTrue(e.getDetailedMessage().contains("found no fielddata type for field [" + FIELD + "]"));, +        }, +    }, +]