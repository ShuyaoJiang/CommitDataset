[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            BigArrays bigArrays, ActionFilters actionFilters,, +                indexService, indexShard, scriptService, bigArrays, threadPool.estimatedTimeInMillisCounter(),, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            BigArrays bigArrays, ActionFilters actionFilters,, +                indexService, indexShard, scriptService, bigArrays, threadPool.estimatedTimeInMillisCounter(),, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            BigArrays bigArrays, ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +            FetchPhase fetchPhase) {, +                result.searcher(), indexService, indexShard, scriptService, bigArrays,, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            BigArrays bigArrays, ActionFilters actionFilters,, +                indexService, indexShard, scriptService, bigArrays, threadPool.estimatedTimeInMillisCounter(),, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            BigArrays bigArrays, ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +            FetchPhase fetchPhase) {, +                result.searcher(), indexService, indexShard, scriptService, bigArrays,, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            BigArrays bigArrays, ActionFilters actionFilters,, +                indexService, indexShard, scriptService, bigArrays, threadPool.estimatedTimeInMillisCounter(),, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            BigArrays bigArrays, ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +            FetchPhase fetchPhase) {, +                result.searcher(), indexService, indexShard, scriptService, bigArrays,, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.BigArrays;, +        injector.getInstance(BigArrays.class).close();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            BigArrays bigArrays, ActionFilters actionFilters,, +                indexService, indexShard, scriptService, bigArrays, threadPool.estimatedTimeInMillisCounter(),, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            BigArrays bigArrays, ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +            FetchPhase fetchPhase) {, +                result.searcher(), indexService, indexShard, scriptService, bigArrays,, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.BigArrays;, +        injector.getInstance(BigArrays.class).close();, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +                                mappings.put(entry.getKey(), parseMapping(entry.getValue()));, +                                        XContentHelper.mergeDefaults(mappings.get(cursor.key), parseMapping(cursor.value.string()));, +                                        mappings.put(cursor.key, parseMapping(cursor.value.string()));, +                            // first, add the default mapping, +                            if (mappings.containsKey(MapperService.DEFAULT_MAPPING)) {, +                                    mapperService.merge(MapperService.DEFAULT_MAPPING, new CompressedXContent(XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string()), MapperService.MergeReason.MAPPING_UPDATE, request.updateAllTypes());, +                                } catch (Exception e) {, +                                    removalReason = "failed on parsing default mapping on index creation";, +                                    throw new MapperParsingException("Failed to parse mapping [{}]: {}", e, MapperService.DEFAULT_MAPPING, e.getMessage());, +                                }, +                            }, +                            for (Map.Entry<String, Map<String, Object>> entry : mappings.entrySet()) {, +                                if (entry.getKey().equals(MapperService.DEFAULT_MAPPING)) {, +                                    continue;, +                                }, +                                try {, +                                    // apply the default here, its the first time we parse it, +                                    mapperService.merge(entry.getKey(), new CompressedXContent(XContentFactory.jsonBuilder().map(entry.getValue()).string()), MapperService.MergeReason.MAPPING_UPDATE, request.updateAllTypes());, +                                } catch (Exception e) {, +                                    removalReason = "failed on parsing mappings on index creation";, +                                    throw new MapperParsingException("Failed to parse mapping [{}]: {}", e, entry.getKey(), e.getMessage());, +                                }, +    private Map<String, Object> parseMapping(String mappingSource) throws Exception {, +        try (XContentParser parser = XContentFactory.xContent(mappingSource).createParser(mappingSource)) {, +            return parser.map();, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            BigArrays bigArrays, ActionFilters actionFilters,, +                indexService, indexShard, scriptService, bigArrays, threadPool.estimatedTimeInMillisCounter(),, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            BigArrays bigArrays, ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +            FetchPhase fetchPhase) {, +                result.searcher(), indexService, indexShard, scriptService, bigArrays,, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.BigArrays;, +        injector.getInstance(BigArrays.class).close();, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +                                mappings.put(entry.getKey(), parseMapping(entry.getValue()));, +                                        XContentHelper.mergeDefaults(mappings.get(cursor.key), parseMapping(cursor.value.string()));, +                                        mappings.put(cursor.key, parseMapping(cursor.value.string()));, +                            // first, add the default mapping, +                            if (mappings.containsKey(MapperService.DEFAULT_MAPPING)) {, +                                    mapperService.merge(MapperService.DEFAULT_MAPPING, new CompressedXContent(XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string()), MapperService.MergeReason.MAPPING_UPDATE, request.updateAllTypes());, +                                } catch (Exception e) {, +                                    removalReason = "failed on parsing default mapping on index creation";, +                                    throw new MapperParsingException("Failed to parse mapping [{}]: {}", e, MapperService.DEFAULT_MAPPING, e.getMessage());, +                                }, +                            }, +                            for (Map.Entry<String, Map<String, Object>> entry : mappings.entrySet()) {, +                                if (entry.getKey().equals(MapperService.DEFAULT_MAPPING)) {, +                                    continue;, +                                }]