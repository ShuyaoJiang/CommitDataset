[+++ b/rest-api-spec/test/execute_watch/20_empty_body.yaml, +              "simple" : {, +                "count" : 1, +              "script" : "ctx.payload.count == 1", +  - match: { "watch_execution.condition_result.script.met": true }, +++ b/rest-api-spec/test/execute_watch/20_empty_body.yaml, +              "simple" : {, +                "count" : 1, +              "script" : "ctx.payload.count == 1", +  - match: { "watch_execution.condition_result.script.met": true }, +++ b/src/main/java/org/elasticsearch/watcher/transport/actions/execute/ExecuteWatchRequest.java, +    private boolean ignoreCondition = false;, +++ b/rest-api-spec/test/execute_watch/20_empty_body.yaml, +              "simple" : {, +                "count" : 1, +              "script" : "ctx.payload.count == 1", +  - match: { "watch_execution.condition_result.script.met": true }, +++ b/src/main/java/org/elasticsearch/watcher/transport/actions/execute/ExecuteWatchRequest.java, +    private boolean ignoreCondition = false;, +++ b/src/test/java/org/elasticsearch/watcher/execution/ManualExecutionTests.java, +import org.elasticsearch.common.joda.time.DateTime;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.watcher.transport.actions.execute.ExecuteWatchResponse;, +import java.util.concurrent.TimeUnit;, +, +    @Test, +    public void testExecutionRequestDefaults() throws Exception {, +        ensureWatcherStarted();, +        WatchRecord.Parser watchRecordParser = internalTestCluster().getInstance(WatchRecord.Parser.class);, +, +        WatchSourceBuilder watchBuilder = watchBuilder(), +                .trigger(schedule(cron("0 0 0 1 * ? 2099"))), +                .input(simpleInput("foo", "bar")), +                .condition(neverCondition()), +                .throttlePeriod(new TimeValue(1, TimeUnit.HOURS)), +                .addAction("log", loggingAction("foobar"));, +        watcherClient().putWatch(new PutWatchRequest("_id", watchBuilder)).actionGet();, +, +        Wid wid = new Wid("_watchId",1,new DateTime());, +        ExecuteWatchResponse executeWatchResponse = watcherClient().prepareExecuteWatch().setId("_id").get();, +        WatchRecord watchRecord = watchRecordParser.parse(wid.value(), 1, executeWatchResponse.getWatchRecordSource());, +, +        assertThat(watchRecord.state(), equalTo(WatchRecord.State.EXECUTION_NOT_NEEDED));, +        assertThat(watchRecord.execution().inputResult().payload().data().get("foo").toString(), equalTo("bar"));, +, +        watchBuilder = watchBuilder(), +                .trigger(schedule(cron("0 0 0 1 * ? 2099"))), +                .input(simpleInput("foo", "bar")), +                .condition(alwaysCondition()), +                .throttlePeriod(new TimeValue(1, TimeUnit.HOURS)), +                .addAction("log", loggingAction("foobar"));, +        watcherClient().putWatch(new PutWatchRequest("_id", watchBuilder)).actionGet();, +, +        executeWatchResponse = watcherClient().prepareExecuteWatch().setId("_id").setRecordExecution(true).get();, +        watchRecord = watchRecordParser.parse(wid.value(), 1, executeWatchResponse.getWatchRecordSource());, +, +        assertThat(watchRecord.state(), equalTo(WatchRecord.State.EXECUTED));, +        assertThat(watchRecord.execution().inputResult().payload().data().get("foo").toString(), equalTo("bar"));, +        assertThat(watchRecord.execution().actionsResults().get("log"), not(instanceOf(LoggingAction.Result.Simulated.class)));, +, +        executeWatchResponse = watcherClient().prepareExecuteWatch().setId("_id").get();, +        watchRecord = watchRecordParser.parse(wid.value(), 1, executeWatchResponse.getWatchRecordSource());, +, +        assertThat(watchRecord.state(), equalTo(WatchRecord.State.THROTTLED));, +    }]