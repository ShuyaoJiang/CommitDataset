[+++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +                if (multiFieldName.contains(".")) {, +                    throw new MapperParsingException("Field name [" + multiFieldName + "] which is a multi field of [" + name + "] cannot contain '.'");, +                }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +                if (multiFieldName.contains(".")) {, +                    throw new MapperParsingException("Field name [" + multiFieldName + "] which is a multi field of [" + name + "] cannot contain '.'");, +                }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java, +import org.elasticsearch.index.mapper.*;, +import org.elasticsearch.index.mapper.core.*;, +import java.io.IOException;, +import static org.elasticsearch.index.mapper.MapperBuilders.*;, +import static org.hamcrest.Matchers.*;, +, +    public void testMultiFieldWithDot() throws IOException {, +        XContentBuilder mapping = jsonBuilder();, +        mapping.startObject(), +                .startObject("my_type"), +                .startObject("properties"), +                .startObject("city"), +                .field("type", "string"), +                .startObject("fields"), +                .startObject("raw.foo"), +                .field("type", "string"), +                .field("index", "not_analyzed"), +                .endObject(), +                .endObject(), +                .endObject(), +                .endObject(), +                .endObject();, +, +        MapperService mapperService = createIndex("test").mapperService();, +        try {, +            mapperService.documentMapperParser().parse(mapping.string());, +            fail("this should throw an exception because one field contains a dot");, +        } catch (MapperParsingException e) {, +            assertThat(e.getMessage(), equalTo("Field name [raw.foo] which is a multi field of [city] cannot contain '.'"));, +        }, +    }]