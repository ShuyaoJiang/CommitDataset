[+++ b/src/main/java/org/elasticsearch/common/geo/GeoDistance.java, +import org.apache.lucene.util.Bits;, +import org.elasticsearch.index.fielddata.*;, +, +    /**, +     * Return a {@link SortedNumericDoubleValues} instance that returns the distance to a given geo-point for each document., +     */, +    public static SortedNumericDoubleValues distanceValues(final FixedSourceDistance distance, final MultiGeoPointValues geoPointValues) {, +        final GeoPointValues singleValues = FieldData.unwrapSingleton(geoPointValues);, +        if (singleValues != null) {, +            final Bits docsWithField = FieldData.unwrapSingletonBits(geoPointValues);, +            return FieldData.singleton(new NumericDoubleValues() {, +, +                @Override, +                public double get(int docID) {, +                    if (docsWithField != null && !docsWithField.get(docID)) {, +                        return 0d;, +                    }, +                    final GeoPoint point = singleValues.get(docID);, +                    return distance.calculate(point.lat(), point.lon());, +                }, +, +            }, docsWithField);, +        } else {, +            return new SortingNumericDoubleValues() {, +, +                @Override, +                public void setDocument(int doc) {, +                    geoPointValues.setDocument(doc);, +                    count = geoPointValues.count();, +                    grow();, +                    for (int i = 0; i < count; ++i) {, +                        final GeoPoint point = geoPointValues.valueAt(i);, +                        values[i] = distance.calculate(point.lat(), point.lon());, +                    }, +                    sort();, +                }, +, +            };, +        }, +    }, +++ b/src/main/java/org/elasticsearch/common/geo/GeoDistance.java, +import org.apache.lucene.util.Bits;, +import org.elasticsearch.index.fielddata.*;, +, +    /**, +     * Return a {@link SortedNumericDoubleValues} instance that returns the distance to a given geo-point for each document., +     */, +    public static SortedNumericDoubleValues distanceValues(final FixedSourceDistance distance, final MultiGeoPointValues geoPointValues) {, +        final GeoPointValues singleValues = FieldData.unwrapSingleton(geoPointValues);, +        if (singleValues != null) {, +            final Bits docsWithField = FieldData.unwrapSingletonBits(geoPointValues);, +            return FieldData.singleton(new NumericDoubleValues() {, +, +                @Override, +                public double get(int docID) {, +                    if (docsWithField != null && !docsWithField.get(docID)) {, +                        return 0d;, +                    }, +                    final GeoPoint point = singleValues.get(docID);, +                    return distance.calculate(point.lat(), point.lon());, +                }, +, +            }, docsWithField);, +        } else {, +            return new SortingNumericDoubleValues() {, +, +                @Override, +                public void setDocument(int doc) {, +                    geoPointValues.setDocument(doc);, +                    count = geoPointValues.count();, +                    grow();, +                    for (int i = 0; i < count; ++i) {, +                        final GeoPoint point = geoPointValues.valueAt(i);, +                        values[i] = distance.calculate(point.lat(), point.lon());, +                    }, +                    sort();, +                }, +, +            };, +        }, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FieldValueFactorFunction.java, +import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;, +    private SortedNumericDoubleValues values;, +        this.values.setDocument(docId);, +        final int numValues = this.values.count();, +            double val = this.values.valueAt(0) * boostFactor;, +++ b/src/main/java/org/elasticsearch/common/geo/GeoDistance.java, +import org.apache.lucene.util.Bits;, +import org.elasticsearch.index.fielddata.*;, +, +    /**, +     * Return a {@link SortedNumericDoubleValues} instance that returns the distance to a given geo-point for each document., +     */, +    public static SortedNumericDoubleValues distanceValues(final FixedSourceDistance distance, final MultiGeoPointValues geoPointValues) {, +        final GeoPointValues singleValues = FieldData.unwrapSingleton(geoPointValues);, +        if (singleValues != null) {, +            final Bits docsWithField = FieldData.unwrapSingletonBits(geoPointValues);, +            return FieldData.singleton(new NumericDoubleValues() {]