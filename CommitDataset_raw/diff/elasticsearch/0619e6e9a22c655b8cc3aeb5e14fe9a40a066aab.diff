[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufBytesReference.java, +    public int getInt(int index) {, +        return buffer.getInt(offset + index);, +    }, +, +    @Override, +    public int indexOf(byte marker, int from) {, +        final int start = offset + from;, +        return buffer.forEachByte(start, length - start, value -> value != marker);, +    }, +, +    @Override, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufBytesReference.java, +    public int getInt(int index) {, +        return buffer.getInt(offset + index);, +    }, +, +    @Override, +    public int indexOf(byte marker, int from) {, +        final int start = offset + from;, +        return buffer.forEachByte(start, length - start, value -> value != marker);, +    }, +, +    @Override, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/ByteBufUtils.java, +        public int getInt(int index) {, +            return buffer.getInt(offset + index);, +        }, +, +        @Override, +        public int indexOf(byte marker, int from) {, +            final int start = offset + from;, +            return buffer.forEachByte(start, length - start, value -> value != marker);, +        }, +, +        @Override, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufBytesReference.java, +    public int getInt(int index) {, +        return buffer.getInt(offset + index);, +    }, +, +    @Override, +    public int indexOf(byte marker, int from) {, +        final int start = offset + from;, +        return buffer.forEachByte(start, length - start, value -> value != marker);, +    }, +, +    @Override, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/ByteBufUtils.java, +        public int getInt(int index) {, +            return buffer.getInt(offset + index);, +        }, +, +        @Override, +        public int indexOf(byte marker, int from) {, +            final int start = offset + from;, +            return buffer.forEachByte(start, length - start, value -> value != marker);, +        }, +, +        @Override, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +            int nextMarker = findNextMarker(marker, from, data);, +                    nextMarker = findNextMarker(marker, from, data);, +    private static int findNextMarker(byte marker, int from, BytesReference data) {, +        final int res = data.indexOf(marker, from);, +        if (res != -1) {, +            assert res >= 0;, +            return res;, +        if (from != data.length()) {, +        return res;, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/ByteBufBytesReference.java, +    public int getInt(int index) {, +        return buffer.getInt(offset + index);, +    }, +, +    @Override, +    public int indexOf(byte marker, int from) {, +        final int start = offset + from;, +        return buffer.forEachByte(start, length - start, value -> value != marker);, +    }, +, +    @Override, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/http/nio/ByteBufUtils.java, +        public int getInt(int index) {, +            return buffer.getInt(offset + index);, +        }, +, +        @Override, +        public int indexOf(byte marker, int from) {, +            final int start = offset + from;, +            return buffer.forEachByte(start, length - start, value -> value != marker);, +        }, +, +        @Override, +++ b/server/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +            int nextMarker = findNextMarker(marker, from, data);, +                    nextMarker = findNextMarker(marker, from, data);, +    private static int findNextMarker(byte marker, int from, BytesReference data) {, +        final int res = data.indexOf(marker, from);, +        if (res != -1) {]