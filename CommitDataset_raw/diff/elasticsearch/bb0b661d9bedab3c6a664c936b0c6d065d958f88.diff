[+++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/XTestSecurityManager*.class</include>, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/XTestSecurityManager*.class</include>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/XTestSecurityManager*.class</include>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/XTestSecurityManager*.class</include>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryParsingException;, +        } catch (QueryParsingException e) {, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/XTestSecurityManager*.class</include>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryParsingException;, +        } catch (QueryParsingException e) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +import java.util.Collections;, +import java.util.Set;, +, +, +    /**, +     * Returns set of insecure plugins., +     * <p>, +     * These are plugins with unresolved issues in third-party libraries,, +     * that require additional privileges as a workaround., +     */, +    public static Set<String> getInsecurePluginList() {, +        return Collections.unmodifiableSet(Security.INSECURE_PLUGINS.keySet());, +    }, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/XTestSecurityManager*.class</include>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryParsingException;, +        } catch (QueryParsingException e) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +import java.util.Collections;, +import java.util.Set;, +, +, +    /**, +     * Returns set of insecure plugins., +     * <p>, +     * These are plugins with unresolved issues in third-party libraries,, +     * that require additional privileges as a workaround., +     */, +    public static Set<String> getInsecurePluginList() {, +        return Collections.unmodifiableSet(Security.INSECURE_PLUGINS.keySet());, +    }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +        URI uri = getClass().getResource(POLICY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(uri));, +                // run groovy scripts with no permissions, +                    return false;, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/XTestSecurityManager*.class</include>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, true, org.apache.lucene.util.Version.LUCENE_5_2_1);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryParsingException;, +        } catch (QueryParsingException e) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +import java.util.Collections;, +import java.util.Set;, +, +, +    /**, +     * Returns set of insecure plugins., +     * <p>, +     * These are plugins with unresolved issues in third-party libraries,, +     * that require additional privileges as a workaround., +     */, +    public static Set<String> getInsecurePluginList() {, +        return Collections.unmodifiableSet(Security.INSECURE_PLUGINS.keySet());, +    }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +        URI uri = getClass().getResource(POLICY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(uri));, +                // run groovy scripts with no permissions, +                    return false;]