[+++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java, +        assertNull(listener.failure);, +        assertNull(listener.failure);, +        assertNull(listener.failure);, +    public void testDocumentFailureInShardOperationOnPrimary() throws Exception {, +        handleDocumentFailure(new TestAction(true, true), TestAction::shardOperationOnPrimary, TestAction.WritePrimaryResult::respond);, +    }, +, +    public void testDocumentFailureInShardOperationOnReplica() throws Exception {, +        handleDocumentFailure(new TestAction(randomBoolean(), true), TestAction::shardOperationOnReplica,, +                TestAction.WriteReplicaResult::respond);, +    }, +, +    private <Result, Response> void handleDocumentFailure(TestAction testAction,, +                                                          ThrowingTriFunction<TestAction, TestRequest, IndexShard, Result> action,, +                                                          BiConsumer<Result, CapturingActionListener<Response>> responder), +            throws Exception {, +        TestRequest request = new TestRequest();, +        Result result = action.apply(testAction, request, indexShard);, +        CapturingActionListener<Response> listener = new CapturingActionListener<>();, +        responder.accept(result, listener);, +        assertNull(listener.response);, +        assertNotNull(listener.failure);, +    }, +, +, +        private final boolean withDocumentFailureOnPrimary;, +        private final boolean withDocumentFailureOnReplica;, +, +            this(false, false);, +        }, +        protected TestAction(boolean withDocumentFailureOnPrimary, boolean withDocumentFailureOnReplica) {, +            this.withDocumentFailureOnPrimary = withDocumentFailureOnPrimary;, +            this.withDocumentFailureOnReplica = withDocumentFailureOnReplica;, +            final WritePrimaryResult primaryResult;, +            if (withDocumentFailureOnPrimary) {, +                primaryResult = new WritePrimaryResult(request, null, null, new RuntimeException("simulated"), primary);, +            } else {, +                primaryResult = new WritePrimaryResult(request, new TestResponse(), location, null, primary);, +            }, +            return primaryResult;, +            final WriteReplicaResult replicaResult;, +            if (withDocumentFailureOnReplica) {, +                replicaResult = new WriteReplicaResult(request, null, new RuntimeException("simulated"), replica);, +            } else {, +                replicaResult = new WriteReplicaResult(request, location, null, replica);, +            }, +            return replicaResult;, +        private Exception failure;, +        public void onFailure(Exception failure) {, +            this.failure = failure;, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java, +        assertNull(listener.failure);, +        assertNull(listener.failure);, +        assertNull(listener.failure);, +    public void testDocumentFailureInShardOperationOnPrimary() throws Exception {, +        handleDocumentFailure(new TestAction(true, true), TestAction::shardOperationOnPrimary, TestAction.WritePrimaryResult::respond);, +    }, +, +    public void testDocumentFailureInShardOperationOnReplica() throws Exception {, +        handleDocumentFailure(new TestAction(randomBoolean(), true), TestAction::shardOperationOnReplica,, +                TestAction.WriteReplicaResult::respond);, +    }, +, +    private <Result, Response> void handleDocumentFailure(TestAction testAction,, +                                                          ThrowingTriFunction<TestAction, TestRequest, IndexShard, Result> action,, +                                                          BiConsumer<Result, CapturingActionListener<Response>> responder), +            throws Exception {, +        TestRequest request = new TestRequest();, +        Result result = action.apply(testAction, request, indexShard);, +        CapturingActionListener<Response> listener = new CapturingActionListener<>();, +        responder.accept(result, listener);, +        assertNull(listener.response);, +        assertNotNull(listener.failure);, +    }, +, +, +        private final boolean withDocumentFailureOnPrimary;, +        private final boolean withDocumentFailureOnReplica;, +, +            this(false, false);, +        }, +        protected TestAction(boolean withDocumentFailureOnPrimary, boolean withDocumentFailureOnReplica) {, +            this.withDocumentFailureOnPrimary = withDocumentFailureOnPrimary;, +            this.withDocumentFailureOnReplica = withDocumentFailureOnReplica;, +            final WritePrimaryResult primaryResult;, +            if (withDocumentFailureOnPrimary) {, +                primaryResult = new WritePrimaryResult(request, null, null, new RuntimeException("simulated"), primary);, +            } else {, +                primaryResult = new WritePrimaryResult(request, new TestResponse(), location, null, primary);, +            }, +            return primaryResult;, +            final WriteReplicaResult replicaResult;, +            if (withDocumentFailureOnReplica) {, +                replicaResult = new WriteReplicaResult(request, null, new RuntimeException("simulated"), replica);, +            } else {, +                replicaResult = new WriteReplicaResult(request, location, null, replica);, +            }, +            return replicaResult;, +        private Exception failure;]