[+++ b/x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/RollupRequestTranslator.java, +import org.elasticsearch.common.Strings;, +            if (Strings.isNullOrEmpty(source.format()) == false) {, +                rolledDateHisto.format(source.format());, +            }, +++ b/x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/RollupRequestTranslator.java, +import org.elasticsearch.common.Strings;, +            if (Strings.isNullOrEmpty(source.format()) == false) {, +                rolledDateHisto.format(source.format());, +            }, +++ b/x-pack/plugin/rollup/src/test/java/org/elasticsearch/xpack/rollup/RollupRequestTranslationTests.java, +    }, +    public void testFormattedDateHisto() {, +        DateHistogramAggregationBuilder histo = new DateHistogramAggregationBuilder("test_histo");, +        histo.dateHistogramInterval(new DateHistogramInterval("1d")), +            .field("foo"), +            .extendedBounds(new ExtendedBounds(0L, 1000L)), +            .format("yyyy-MM-dd"), +            .subAggregation(new MaxAggregationBuilder("the_max").field("max_field"));, +        List<QueryBuilder> filterConditions = new ArrayList<>();, +, +        List<AggregationBuilder> translated = translateAggregation(histo, filterConditions, namedWriteableRegistry);, +        assertThat(translated.size(), equalTo(1));, +        assertThat(translated.get(0), Matchers.instanceOf(DateHistogramAggregationBuilder.class));, +        DateHistogramAggregationBuilder translatedHisto = (DateHistogramAggregationBuilder)translated.get(0);, +, +        assertThat(translatedHisto.dateHistogramInterval(), equalTo(new DateHistogramInterval("1d")));, +        assertThat(translatedHisto.format(), equalTo("yyyy-MM-dd"));, +        assertThat(translatedHisto.field(), equalTo("foo.date_histogram.timestamp"));, +++ b/x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/RollupRequestTranslator.java, +import org.elasticsearch.common.Strings;, +            if (Strings.isNullOrEmpty(source.format()) == false) {, +                rolledDateHisto.format(source.format());, +            }, +++ b/x-pack/plugin/rollup/src/test/java/org/elasticsearch/xpack/rollup/RollupRequestTranslationTests.java, +    }, +    public void testFormattedDateHisto() {, +        DateHistogramAggregationBuilder histo = new DateHistogramAggregationBuilder("test_histo");, +        histo.dateHistogramInterval(new DateHistogramInterval("1d")), +            .field("foo"), +            .extendedBounds(new ExtendedBounds(0L, 1000L)), +            .format("yyyy-MM-dd"), +            .subAggregation(new MaxAggregationBuilder("the_max").field("max_field"));, +        List<QueryBuilder> filterConditions = new ArrayList<>();, +, +        List<AggregationBuilder> translated = translateAggregation(histo, filterConditions, namedWriteableRegistry);, +        assertThat(translated.size(), equalTo(1));, +        assertThat(translated.get(0), Matchers.instanceOf(DateHistogramAggregationBuilder.class));, +        DateHistogramAggregationBuilder translatedHisto = (DateHistogramAggregationBuilder)translated.get(0);, +, +        assertThat(translatedHisto.dateHistogramInterval(), equalTo(new DateHistogramInterval("1d")));, +        assertThat(translatedHisto.format(), equalTo("yyyy-MM-dd"));, +        assertThat(translatedHisto.field(), equalTo("foo.date_histogram.timestamp"));, +++ b/x-pack/plugin/src/test/resources/rest-api-spec/test/rollup/rollup_search.yml, +"Formatted Date Histo":, +, +  - do:, +      xpack.rollup.rollup_search:, +        index: "foo_rollup", +        body:, +          size: 0, +          aggs:, +            histo:, +              date_histogram:, +                field: "timestamp", +                interval: "1h", +                time_zone: "UTC", +                format: "yyyy-MM-dd", +, +  - length: { aggregations.histo.buckets: 4 }, +  - match: { aggregations.histo.buckets.0.key_as_string: "2017-01-01" }, +  - match: { aggregations.histo.buckets.0.doc_count: 1 }, +  - match: { aggregations.histo.buckets.1.key_as_string: "2017-01-01" }, +  - match: { aggregations.histo.buckets.1.doc_count: 2 }, +  - match: { aggregations.histo.buckets.2.key_as_string: "2017-01-01" }, +  - match: { aggregations.histo.buckets.2.doc_count: 10 }, +  - match: { aggregations.histo.buckets.3.key_as_string: "2017-01-01" }, +  - match: { aggregations.histo.buckets.3.doc_count: 20 }, +, +---]