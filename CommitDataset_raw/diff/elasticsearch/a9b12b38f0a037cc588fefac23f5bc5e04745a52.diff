[+++ b/server/src/main/java/org/elasticsearch/index/seqno/ReplicationTracker.java, +import org.elasticsearch.index.shard.IndexShard;, +     * The current operation primary term. Management of this value is done through {@link IndexShard} and must only be done when safe. See, +     * {@link #setOperationPrimaryTerm(long)}., +     */, +    private volatile long operationPrimaryTerm;, +, +    /**, +     * Returns the current operation primary term., +     *, +     * @return the primary term, +     */, +    public long getOperationPrimaryTerm() {, +        return operationPrimaryTerm;, +    }, +, +    /**, +     * Sets the current operation primary term. This method should be invoked only when no other operations are possible on the shard. That, +     * is, either from the constructor of {@link IndexShard} or while holding all permits on the {@link IndexShard} instance., +     *, +     * @param operationPrimaryTerm the new operation primary term, +     */, +    public void setOperationPrimaryTerm(final long operationPrimaryTerm) {, +        this.operationPrimaryTerm = operationPrimaryTerm;, +    }, +, +    /**, +     * @param operationPrimaryTerm  the current primary term, +            final long operationPrimaryTerm,, +        this.operationPrimaryTerm = operationPrimaryTerm;, +++ b/server/src/main/java/org/elasticsearch/index/seqno/ReplicationTracker.java, +import org.elasticsearch.index.shard.IndexShard;, +     * The current operation primary term. Management of this value is done through {@link IndexShard} and must only be done when safe. See, +     * {@link #setOperationPrimaryTerm(long)}., +     */, +    private volatile long operationPrimaryTerm;, +, +    /**, +     * Returns the current operation primary term., +     *, +     * @return the primary term, +     */, +    public long getOperationPrimaryTerm() {, +        return operationPrimaryTerm;, +    }, +, +    /**, +     * Sets the current operation primary term. This method should be invoked only when no other operations are possible on the shard. That, +     * is, either from the constructor of {@link IndexShard} or while holding all permits on the {@link IndexShard} instance., +     *, +     * @param operationPrimaryTerm the new operation primary term, +     */, +    public void setOperationPrimaryTerm(final long operationPrimaryTerm) {, +        this.operationPrimaryTerm = operationPrimaryTerm;, +    }, +, +    /**, +     * @param operationPrimaryTerm  the current primary term, +            final long operationPrimaryTerm,, +        this.operationPrimaryTerm = operationPrimaryTerm;, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        final long primaryTerm = indexSettings.getIndexMetaData().primaryTerm(shardId.id());, +        this.pendingPrimaryTerm = primaryTerm;, +        final ReplicationTracker replicationTracker =, +                        primaryTerm,, +        this.replicationTracker = replicationTracker;, +        return replicationTracker.getOperationPrimaryTerm();, +                            assert getOperationPrimaryTerm() == newPrimaryTerm;, +        return applyIndexOperation(getEngine(), UNASSIGNED_SEQ_NO, getOperationPrimaryTerm(), version, versionType, ifSeqNo,, +        return applyIndexOperation(getEngine(), seqNo, getOperationPrimaryTerm(), version, null, UNASSIGNED_SEQ_NO, 0,, +        assert opPrimaryTerm <= getOperationPrimaryTerm(), +                : "op term [ " + opPrimaryTerm + " ] > shard term [" + getOperationPrimaryTerm() + "]";, +        return markSeqNoAsNoop(getEngine(), seqNo, getOperationPrimaryTerm(), reason, Engine.Operation.Origin.REPLICA);, +        assert opPrimaryTerm <= getOperationPrimaryTerm(), +                : "op term [ " + opPrimaryTerm + " ] > shard term [" + getOperationPrimaryTerm() + "]";, +        return new Engine.IndexResult(e, version, getOperationPrimaryTerm());, +        return new Engine.DeleteResult(e, version, getOperationPrimaryTerm());, +        return applyDeleteOperation(getEngine(), UNASSIGNED_SEQ_NO, getOperationPrimaryTerm(), version, type, id, versionType,, +            getEngine(), seqNo, getOperationPrimaryTerm(), version, type, id, null, UNASSIGNED_SEQ_NO, 0, Engine.Operation.Origin.REPLICA);, +        assert opPrimaryTerm <= getOperationPrimaryTerm(), +                : "op term [ " + opPrimaryTerm + " ] > shard term [" + getOperationPrimaryTerm() + "]";, +            return new Engine.DeleteResult(e, version, getOperationPrimaryTerm(), seqNo, false);, +        getEngine().trimOperationsFromTranslog(getOperationPrimaryTerm(), aboveSeqNo);, +                () -> getOperationPrimaryTerm(), tombstoneDocSupplier());, +        assert getOperationPrimaryTerm() <= pendingPrimaryTerm;, +                    assert getOperationPrimaryTerm() <= pendingPrimaryTerm;, +                    if (getOperationPrimaryTerm() < newPrimaryTerm) {, +                        replicationTracker.setOperationPrimaryTerm(newPrimaryTerm);, +                if (opPrimaryTerm < getOperationPrimaryTerm()) {, +                        getOperationPrimaryTerm());, +        return (opPrimaryTerm > pendingPrimaryTerm) || (allPermits && opPrimaryTerm > getOperationPrimaryTerm());, +++ b/server/src/main/java/org/elasticsearch/index/seqno/ReplicationTracker.java, +import org.elasticsearch.index.shard.IndexShard;, +     * The current operation primary term. Management of this value is done through {@link IndexShard} and must only be done when safe. See, +     * {@link #setOperationPrimaryTerm(long)}., +     */, +    private volatile long operationPrimaryTerm;, +, +    /**, +     * Returns the current operation primary term.]