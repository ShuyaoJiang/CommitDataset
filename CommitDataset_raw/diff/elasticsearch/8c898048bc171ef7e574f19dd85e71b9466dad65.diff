[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        if (indexShard.getTranslogDurability() == Translog.Durability.REQUEST && location != null) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        if (indexShard.getTranslogDurability() == Translog.Durability.REQUEST && location != null) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        if (indexShard.getTranslogDurability() == Translog.Durability.REQUEST && location != null) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.IndexSettings;, +        registerIndexDynamicSetting(IndexSettings.INDEX_TRANSLOG_DURABILITY, Validator.EMPTY);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        if (indexShard.getTranslogDurability() == Translog.Durability.REQUEST && location != null) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.IndexSettings;, +        registerIndexDynamicSetting(IndexSettings.INDEX_TRANSLOG_DURABILITY, Validator.EMPTY);, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +import org.elasticsearch.common.bytes.BytesReference;, +    public void writeBlob(String blobName, BytesReference data) throws IOException {, +        final Path file = path.resolve(blobName);, +        try (OutputStream outputStream = Files.newOutputStream(file)) {, +            data.writeTo(outputStream);, +        }, +        IOUtils.fsync(file, false);, +        IOUtils.fsync(path, true);, +    }, +, +    @Override, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        if (indexShard.getTranslogDurability() == Translog.Durability.REQUEST && location != null) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.IndexSettings;, +        registerIndexDynamicSetting(IndexSettings.INDEX_TRANSLOG_DURABILITY, Validator.EMPTY);, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +import org.elasticsearch.common.bytes.BytesReference;, +    public void writeBlob(String blobName, BytesReference data) throws IOException {, +        final Path file = path.resolve(blobName);, +        try (OutputStream outputStream = Files.newOutputStream(file)) {, +            data.writeTo(outputStream);, +        }, +        IOUtils.fsync(file, false);, +        IOUtils.fsync(path, true);, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/support/AbstractBlobContainer.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        if (indexShard.getTranslogDurability() == Translog.Durability.REQUEST && location != null) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.IndexSettings;, +        registerIndexDynamicSetting(IndexSettings.INDEX_TRANSLOG_DURABILITY, Validator.EMPTY);, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobContainer.java, +import org.elasticsearch.common.bytes.BytesReference;, +    public void writeBlob(String blobName, BytesReference data) throws IOException {, +        final Path file = path.resolve(blobName);, +        try (OutputStream outputStream = Files.newOutputStream(file)) {, +            data.writeTo(outputStream);, +        }, +        IOUtils.fsync(file, false);, +        IOUtils.fsync(path, true);, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/common/blobstore/support/AbstractBlobContainer.java, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.apache.lucene.store.AlreadyClosedException;, +import org.elasticsearch.index.engine.EngineClosedException;, +import org.elasticsearch.index.translog.Translog;, +import org.elasticsearch.threadpool.ThreadPool;, +            if (shards.isEmpty() && this.indexSettings.getTranslogSyncInterval().millis() != 0) {, +                ThreadPool threadPool = nodeServicesProvider.getThreadPool();, +                new AsyncTranslogFSync(this, threadPool).schedule(); // kick this off if we are the first shard in this service., +            }, +    private void maybeFSyncTranslogs() {, +        if (indexSettings.getTranslogDurability() == Translog.Durability.ASYNC) {, +            for (IndexShard shard : this.shards.values()) {, +                try {, +                    Translog translog = shard.getTranslog();, +                    if (translog.syncNeeded()) {, +                        translog.sync();, +                    }, +                } catch (EngineClosedException | AlreadyClosedException ex) {, +                    // fine - continue;, +                } catch (IOException e) {, +                    logger.warn("failed to sync translog", e);, +                }, +            }, +        }, +    }, +]