[+++ b/docs/reference/docs/delete-by-query.asciidoc, +  "requests_per_second": -1.0,, +`requests_per_second` can be set to any positive decimal number (`1.4`, `6`,, +`1000`, etc) and throttles the number of requests per second that the delete-by-query, +issues or it can be set to `-1` to disabled throttling. The throttling is done, +waiting between bulk batches so that it can manipulate the scroll timeout. The, +wait time is the difference between the time it took the batch to complete and, +the time `requests_per_second * requests_in_the_batch`. Since the batch isn't, +broken into multiple bulk requests large batch sizes will cause Elasticsearch, +to create many requests and then wait for a while before starting the next set., +This is "bursty" instead of "smooth". The default is `-1`., +POST _delete_by_query/taskid:1/_rethrottle?requests_per_second=-1, +can be either `-1` to disable throttling or any decimal number, +like `1.7` or `12` to throttle to that level. Rethrottling that speeds up the, +query takes effect immediately but rethrotting that slows down the query will, +take effect on after completing the current batch. This prevents scroll, +timeouts., +++ b/docs/reference/docs/delete-by-query.asciidoc, +  "requests_per_second": -1.0,, +`requests_per_second` can be set to any positive decimal number (`1.4`, `6`,, +`1000`, etc) and throttles the number of requests per second that the delete-by-query, +issues or it can be set to `-1` to disabled throttling. The throttling is done, +waiting between bulk batches so that it can manipulate the scroll timeout. The, +wait time is the difference between the time it took the batch to complete and, +the time `requests_per_second * requests_in_the_batch`. Since the batch isn't, +broken into multiple bulk requests large batch sizes will cause Elasticsearch, +to create many requests and then wait for a while before starting the next set., +This is "bursty" instead of "smooth". The default is `-1`., +POST _delete_by_query/taskid:1/_rethrottle?requests_per_second=-1, +can be either `-1` to disable throttling or any decimal number, +like `1.7` or `12` to throttle to that level. Rethrottling that speeds up the, +query takes effect immediately but rethrotting that slows down the query will, +take effect on after completing the current batch. This prevents scroll, +timeouts., +++ b/docs/reference/docs/reindex.asciidoc, +  "requests_per_second": -1.0,, +`requests_per_second` can be set to any positive decimal number (`1.4`, `6`,, +`1000`, etc) and throttles the number of requests per second that the reindex, +issues or it can be set to `-1` to disabled throttling. The throttling is done, +waiting between bulk batches so that it can manipulate the scroll timeout. The, +wait time is the difference between the time it took the batch to complete and, +the time `requests_per_second * requests_in_the_batch`. Since the batch isn't, +broken into multiple bulk requests large batch sizes will cause Elasticsearch, +to create many requests and then wait for a while before starting the next set., +This is "bursty" instead of "smooth". The default is `-1`., +POST _reindex/taskid:1/_rethrottle?requests_per_second=-1, +Just like when setting it on the `_reindex` API `requests_per_second`, +can be either `-1` to disable throttling or any decimal number, +like `1.7` or `12` to throttle to that level. Rethrottling that speeds up the, +query takes effect immediately but rethrotting that slows down the query will, +take effect on after completing the current batch. This prevents scroll, +timeouts., +++ b/docs/reference/docs/delete-by-query.asciidoc, +  "requests_per_second": -1.0,, +`requests_per_second` can be set to any positive decimal number (`1.4`, `6`,, +`1000`, etc) and throttles the number of requests per second that the delete-by-query, +issues or it can be set to `-1` to disabled throttling. The throttling is done, +waiting between bulk batches so that it can manipulate the scroll timeout. The, +wait time is the difference between the time it took the batch to complete and, +the time `requests_per_second * requests_in_the_batch`. Since the batch isn't, +broken into multiple bulk requests large batch sizes will cause Elasticsearch, +to create many requests and then wait for a while before starting the next set., +This is "bursty" instead of "smooth". The default is `-1`., +POST _delete_by_query/taskid:1/_rethrottle?requests_per_second=-1, +can be either `-1` to disable throttling or any decimal number, +like `1.7` or `12` to throttle to that level. Rethrottling that speeds up the, +query takes effect immediately but rethrotting that slows down the query will, +take effect on after completing the current batch. This prevents scroll, +timeouts., +++ b/docs/reference/docs/reindex.asciidoc, +  "requests_per_second": -1.0,, +`requests_per_second` can be set to any positive decimal number (`1.4`, `6`,, +`1000`, etc) and throttles the number of requests per second that the reindex, +issues or it can be set to `-1` to disabled throttling. The throttling is done, +waiting between bulk batches so that it can manipulate the scroll timeout. The, +wait time is the difference between the time it took the batch to complete and, +the time `requests_per_second * requests_in_the_batch`. Since the batch isn't, +broken into multiple bulk requests large batch sizes will cause Elasticsearch, +to create many requests and then wait for a while before starting the next set., +This is "bursty" instead of "smooth". The default is `-1`., +POST _reindex/taskid:1/_rethrottle?requests_per_second=-1, +Just like when setting it on the `_reindex` API `requests_per_second`, +can be either `-1` to disable throttling or any decimal number, +like `1.7` or `12` to throttle to that level. Rethrottling that speeds up the, +query takes effect immediately but rethrotting that slows down the query will, +take effect on after completing the current batch. This prevents scroll, +timeouts., +++ b/docs/reference/docs/update-by-query.asciidoc, +  "requests_per_second": -1.0,, +`requests_per_second` can be set to any positive decimal number (`1.4`, `6`,, +`1000`, etc) and throttles the number of requests per second that the update-by-query, +issues or it can be set to `-1` to disabled throttling. The throttling is done, +waiting between bulk batches so that it can manipulate the scroll timeout. The, +wait time is the difference between the time it took the batch to complete and, +the time `requests_per_second * requests_in_the_batch`. Since the batch isn't, +broken into multiple bulk requests large batch sizes will cause Elasticsearch, +to create many requests and then wait for a while before starting the next set., +This is "bursty" instead of "smooth". The default is `-1`., +POST _update_by_query/taskid:1/_rethrottle?requests_per_second=-1, +can be either `-1` to disable throttling or any decimal number]