[+++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.cluster.routing.allocation.FailedShard;, +import java.util.List;, +        public void applyStartedShards(RoutingAllocation allocation, List<ShardRouting> startedShards) {, +        public void applyFailedShards(RoutingAllocation allocation, List<FailedShard> failedShards) {, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.cluster.routing.allocation.FailedShard;, +import java.util.List;, +        public void applyStartedShards(RoutingAllocation allocation, List<ShardRouting> startedShards) {, +        public void applyFailedShards(RoutingAllocation allocation, List<FailedShard> failedShards) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        gatewayAllocator.applyStartedShards(allocation, startedShards);, +        gatewayAllocator.applyFailedShards(allocation, failedShards);, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.cluster.routing.allocation.FailedShard;, +import java.util.List;, +        public void applyStartedShards(RoutingAllocation allocation, List<ShardRouting> startedShards) {, +        public void applyFailedShards(RoutingAllocation allocation, List<FailedShard> failedShards) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        gatewayAllocator.applyStartedShards(allocation, startedShards);, +        gatewayAllocator.applyFailedShards(allocation, failedShards);, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +import org.elasticsearch.cluster.routing.allocation.FailedShard;, +    public void applyStartedShards(final RoutingAllocation allocation, final List<ShardRouting> startedShards) {, +        for (ShardRouting startedShard : startedShards) {, +    }, +    public void applyFailedShards(final RoutingAllocation allocation, final List<FailedShard> failedShards) {, +        for (FailedShard failedShard : failedShards) {, +            Releasables.close(asyncFetchStarted.remove(failedShard.getRoutingEntry().shardId()));, +            Releasables.close(asyncFetchStore.remove(failedShard.getRoutingEntry().shardId()));, +        }, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.cluster.routing.allocation.FailedShard;, +import java.util.List;, +        public void applyStartedShards(RoutingAllocation allocation, List<ShardRouting> startedShards) {, +        public void applyFailedShards(RoutingAllocation allocation, List<FailedShard> failedShards) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        gatewayAllocator.applyStartedShards(allocation, startedShards);, +        gatewayAllocator.applyFailedShards(allocation, failedShards);, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +import org.elasticsearch.cluster.routing.allocation.FailedShard;, +    public void applyStartedShards(final RoutingAllocation allocation, final List<ShardRouting> startedShards) {, +        for (ShardRouting startedShard : startedShards) {, +    }, +    public void applyFailedShards(final RoutingAllocation allocation, final List<FailedShard> failedShards) {, +        for (FailedShard failedShard : failedShards) {, +            Releasables.close(asyncFetchStarted.remove(failedShard.getRoutingEntry().shardId()));, +            Releasables.close(asyncFetchStore.remove(failedShard.getRoutingEntry().shardId()));, +        }, +++ b/test/framework/src/main/java/org/elasticsearch/cluster/ESAllocationTestCase.java, +import org.elasticsearch.cluster.routing.allocation.FailedShard;, +        public void applyStartedShards(RoutingAllocation allocation, List<ShardRouting> startedShards) {, +        public void applyFailedShards(RoutingAllocation allocation, List<FailedShard> failedShards) {, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.cluster.routing.allocation.FailedShard;, +import java.util.List;, +        public void applyStartedShards(RoutingAllocation allocation, List<ShardRouting> startedShards) {, +        public void applyFailedShards(RoutingAllocation allocation, List<FailedShard> failedShards) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        gatewayAllocator.applyStartedShards(allocation, startedShards);, +        gatewayAllocator.applyFailedShards(allocation, failedShards);, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +import org.elasticsearch.cluster.routing.allocation.FailedShard;, +    public void applyStartedShards(final RoutingAllocation allocation, final List<ShardRouting> startedShards) {, +        for (ShardRouting startedShard : startedShards) {, +    }, +    public void applyFailedShards(final RoutingAllocation allocation, final List<FailedShard> failedShards) {, +        for (FailedShard failedShard : failedShards) {, +            Releasables.close(asyncFetchStarted.remove(failedShard.getRoutingEntry().shardId()));, +            Releasables.close(asyncFetchStore.remove(failedShard.getRoutingEntry().shardId()));, +        }, +++ b/test/framework/src/main/java/org/elasticsearch/cluster/ESAllocationTestCase.java, +import org.elasticsearch.cluster.routing.allocation.FailedShard;, +        public void applyStartedShards(RoutingAllocation allocation, List<ShardRouting> startedShards) {, +        public void applyFailedShards(RoutingAllocation allocation, List<FailedShard> failedShards) {, +++ b/test/framework/src/main/java/org/elasticsearch/test/gateway/NoopGatewayAllocator.java, +import org.elasticsearch.cluster.routing.allocation.FailedShard;, +import java.util.List;, +, +    public void applyStartedShards(RoutingAllocation allocation, List<ShardRouting> startedShards) {, +    public void applyFailedShards(RoutingAllocation allocation, List<FailedShard> failedShards) {]