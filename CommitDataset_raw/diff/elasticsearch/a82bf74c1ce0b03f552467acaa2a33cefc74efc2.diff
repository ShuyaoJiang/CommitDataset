[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.blocks(currentState.blocks());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.blocks(currentState.blocks());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +    public boolean globalBlocked() {, +        for (ClusterBlockLevel level : ClusterBlockLevel.values()) {, +            if (!levelHolders[level.id()].global().isEmpty()) {, +                return true;, +            }, +        }, +        return false;, +    }, +, +    public ImmutableSet<String> indicesBlocked() {, +        Set<String> indices = Sets.newHashSet();, +        for (ClusterBlockLevel level : ClusterBlockLevel.values()) {, +            for (String index : indices(level).keySet()) {, +                ImmutableSet<ClusterBlock> indexBlocks = indices(level).get(index);, +                if (indexBlocks != null && !indexBlocks.isEmpty()) {, +                    indices.add(index);, +                }, +            }, +        }, +        return ImmutableSet.copyOf(indices);, +    }, +, +    public ImmutableMap<ClusterBlockLevel, ImmutableSet<ClusterBlock>> indexBlocks(String index) {, +        ImmutableMap.Builder<ClusterBlockLevel, ImmutableSet<ClusterBlock>> builder = ImmutableMap.builder();, +        for (ClusterBlockLevel level : ClusterBlockLevel.values()) {, +            if (indices(level).containsKey(index) && !indices(level).get(index).isEmpty()) {, +                builder.put(level, indices(level).get(index));, +            }, +        }, +        return builder.build();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +        builder.blocks(currentState.blocks());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +    public boolean globalBlocked() {, +        for (ClusterBlockLevel level : ClusterBlockLevel.values()) {, +            if (!levelHolders[level.id()].global().isEmpty()) {, +                return true;, +            }, +        }, +        return false;, +    }, +, +    public ImmutableSet<String> indicesBlocked() {, +        Set<String> indices = Sets.newHashSet();, +        for (ClusterBlockLevel level : ClusterBlockLevel.values()) {, +            for (String index : indices(level).keySet()) {, +                ImmutableSet<ClusterBlock> indexBlocks = indices(level).get(index);, +                if (indexBlocks != null && !indexBlocks.isEmpty()) {, +                    indices.add(index);, +                }, +            }, +        }, +        return ImmutableSet.copyOf(indices);, +    }, +, +    public ImmutableMap<ClusterBlockLevel, ImmutableSet<ClusterBlock>> indexBlocks(String index) {, +        ImmutableMap.Builder<ClusterBlockLevel, ImmutableSet<ClusterBlock>> builder = ImmutableMap.builder();, +        for (ClusterBlockLevel level : ClusterBlockLevel.values()) {, +            if (indices(level).containsKey(index) && !indices(level).get(index).isEmpty()) {, +                builder.put(level, indices(level).get(index));, +            }, +        }, +        return builder.build();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/action/admin/cluster/state/RestClusterStateAction.java, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.common.collect.ImmutableSet;, +                    // blocks, +                    builder.startObject("blocks");, +, +                    if (state.blocks().globalBlocked()) {, +                        builder.startObject("global");, +                        for (ClusterBlockLevel level : ClusterBlockLevel.values()) {, +                            if (!state.blocks().global(level).isEmpty()) {, +                                builder.startObject(level.name().toLowerCase());, +                                for (ClusterBlock block : state.blocks().global(level)) {, +                                    builder.startObject(Integer.toString(block.id()));, +                                    builder.field("description", block.description());, +                                    builder.endObject();, +                                }, +                                builder.endObject();, +                            }, +                        }, +                        builder.endObject();, +                    }, +, +                    if (!state.blocks().indicesBlocked().isEmpty()) {, +                        builder.startObject("indices");, +                        for (String index : state.blocks().indicesBlocked()) {, +                            builder.startObject(index);, +                            for (Map.Entry<ClusterBlockLevel, ImmutableSet<ClusterBlock>> entry : state.blocks().indexBlocks(index).entrySet()) {]