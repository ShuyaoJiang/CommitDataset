[+++ b/client/src/main/java/org/elasticsearch/client/AbstractStaticConnectionPool.java, +import org.apache.http.HttpHost;, +    protected List<StatefulConnection> createConnections(HttpHost... hosts) {, +        for (HttpHost host : hosts) {, +            Objects.requireNonNull(host, "host cannot be null");, +            connections.add(new StatefulConnection(host));, +        logger.trace("marked connection alive for " + connection.getHost());, +        logger.debug("marked connection dead for " + connection.getHost());, +++ b/client/src/main/java/org/elasticsearch/client/AbstractStaticConnectionPool.java, +import org.apache.http.HttpHost;, +    protected List<StatefulConnection> createConnections(HttpHost... hosts) {, +        for (HttpHost host : hosts) {, +            Objects.requireNonNull(host, "host cannot be null");, +            connections.add(new StatefulConnection(host));, +        logger.trace("marked connection alive for " + connection.getHost());, +        logger.debug("marked connection dead for " + connection.getHost());, +++ b/client/src/main/java/org/elasticsearch/client/Connection.java, +import org.apache.http.HttpHost;, +, + * It doesn't have any mutable state. It holds the host that the connection points to., +    private final HttpHost host;, +     * Creates a new connection pointing to the provided {@link HttpHost} argument, +    public Connection(HttpHost host) {, +            this.host = host;, +     * Returns the {@link HttpHost} that the connection points to, +    public HttpHost getHost() {, +            return host;, +++ b/client/src/main/java/org/elasticsearch/client/AbstractStaticConnectionPool.java, +import org.apache.http.HttpHost;, +    protected List<StatefulConnection> createConnections(HttpHost... hosts) {, +        for (HttpHost host : hosts) {, +            Objects.requireNonNull(host, "host cannot be null");, +            connections.add(new StatefulConnection(host));, +        logger.trace("marked connection alive for " + connection.getHost());, +        logger.debug("marked connection dead for " + connection.getHost());, +++ b/client/src/main/java/org/elasticsearch/client/Connection.java, +import org.apache.http.HttpHost;, +, + * It doesn't have any mutable state. It holds the host that the connection points to., +    private final HttpHost host;, +     * Creates a new connection pointing to the provided {@link HttpHost} argument, +    public Connection(HttpHost host) {, +            this.host = host;, +     * Returns the {@link HttpHost} that the connection points to, +    public HttpHost getHost() {, +            return host;, +++ b/client/src/main/java/org/elasticsearch/client/ElasticsearchResponse.java, +import org.apache.http.HttpHost;, + * its corresponding {@link RequestLine} and {@link HttpHost}, +    private final HttpHost host;, +    ElasticsearchResponse(RequestLine requestLine, HttpHost host, CloseableHttpResponse response) {, +        Objects.requireNonNull(host, "node cannot be null");, +        this.host = host;, +    public HttpHost getHost() {, +        return host;, +     * Returns the response body available, null otherwise, +     * @see HttpEntity, +                ", host=" + host +, +++ b/client/src/main/java/org/elasticsearch/client/AbstractStaticConnectionPool.java, +import org.apache.http.HttpHost;, +    protected List<StatefulConnection> createConnections(HttpHost... hosts) {, +        for (HttpHost host : hosts) {, +            Objects.requireNonNull(host, "host cannot be null");, +            connections.add(new StatefulConnection(host));, +        logger.trace("marked connection alive for " + connection.getHost());, +        logger.debug("marked connection dead for " + connection.getHost());, +++ b/client/src/main/java/org/elasticsearch/client/Connection.java, +import org.apache.http.HttpHost;, +, + * It doesn't have any mutable state. It holds the host that the connection points to., +    private final HttpHost host;, +     * Creates a new connection pointing to the provided {@link HttpHost} argument, +    public Connection(HttpHost host) {, +            this.host = host;, +     * Returns the {@link HttpHost} that the connection points to, +    public HttpHost getHost() {, +            return host;, +++ b/client/src/main/java/org/elasticsearch/client/ElasticsearchResponse.java, +import org.apache.http.HttpHost;, + * its corresponding {@link RequestLine} and {@link HttpHost}, +    private final HttpHost host;, +    ElasticsearchResponse(RequestLine requestLine, HttpHost host, CloseableHttpResponse response) {, +        Objects.requireNonNull(host, "node cannot be null");, +        this.host = host;, +    public HttpHost getHost() {, +        return host;, +     * Returns the response body available, null otherwise, +     * @see HttpEntity, +                ", host=" + host +, +++ b/client/src/main/java/org/elasticsearch/client/ElasticsearchResponseException.java, +import org.apache.http.HttpHost;, +/**, + * Exception thrown when an elasticsearch node responds to a request with a status code that indicates an error, + */, +    private final HttpHost host;, +    ElasticsearchResponseException(RequestLine requestLine, HttpHost host, StatusLine statusLine) {, +        super(buildMessage(requestLine, host, statusLine));, +        this.host = host;, +    private static String buildMessage(RequestLine requestLine, HttpHost host, StatusLine statusLine) {, +        return requestLine.getMethod() + " " + host + requestLine.getUri() + ": " + statusLine.toString();]