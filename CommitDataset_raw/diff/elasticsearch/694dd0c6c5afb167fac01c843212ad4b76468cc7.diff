[+++ b/.projectile, +-/plugins/discovery-multicast/target, +++ b/.projectile, +-/plugins/discovery-multicast/target, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/.projectile, +-/plugins/discovery-multicast/target, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    public SuggestRequestBuilder addSuggestion(SuggestionBuilder<?> suggestion) {, +++ b/.projectile, +-/plugins/discovery-multicast/target, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    public SuggestRequestBuilder addSuggestion(SuggestionBuilder<?> suggestion) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                final ThreadContext threadContext = threadPool.getThreadContext();, +            final ThreadContext threadContext = threadPool.getThreadContext();, +++ b/.projectile, +-/plugins/discovery-multicast/target, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    public SuggestRequestBuilder addSuggestion(SuggestionBuilder<?> suggestion) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                final ThreadContext threadContext = threadPool.getThreadContext();, +            final ThreadContext threadContext = threadPool.getThreadContext();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import org.elasticsearch.http.netty.NettyHttpServerTransport;, +        String httpRange = settings.get("http.netty.port",, +                               settings.get("http.port",, +                                       NettyHttpServerTransport.DEFAULT_PORT_RANGE));, +++ b/.projectile, +-/plugins/discovery-multicast/target, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    public SuggestRequestBuilder addSuggestion(SuggestionBuilder<?> suggestion) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                final ThreadContext threadContext = threadPool.getThreadContext();, +            final ThreadContext threadContext = threadPool.getThreadContext();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import org.elasticsearch.http.netty.NettyHttpServerTransport;, +        String httpRange = settings.get("http.netty.port",, +                               settings.get("http.port",, +                                       NettyHttpServerTransport.DEFAULT_PORT_RANGE));, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    public static final String TYPE = "recycler.page.type";, +    public static final String LIMIT_HEAP = "recycler.page.limit.heap";, +    public static final String WEIGHT = "recycler.page.weight";, +        final Type type = Type.parse(settings.get(TYPE));, +        final long limit = settings.getAsMemory(LIMIT_HEAP, "10%").bytes();, +        final double bytesWeight = settings.getAsDouble(WEIGHT + ".bytes", 1d);, +        final double intsWeight = settings.getAsDouble(WEIGHT + ".ints", 1d);, +        final double longsWeight = settings.getAsDouble(WEIGHT + ".longs", 1d);, +        // object pages are less useful to us so we give them a lower weight by default, +        final double objectsWeight = settings.getAsDouble(WEIGHT + ".objects", 0.1d);, +    public static enum Type {, +            if (Strings.isNullOrEmpty(type)) {, +                return CONCURRENT;, +            }, +++ b/.projectile, +-/plugins/discovery-multicast/target, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +    public SuggestRequestBuilder addSuggestion(SuggestionBuilder<?> suggestion) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                final ThreadContext threadContext = threadPool.getThreadContext();, +            final ThreadContext threadContext = threadPool.getThreadContext();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import org.elasticsearch.http.netty.NettyHttpServerTransport;, +        String httpRange = settings.get("http.netty.port",, +                               settings.get("http.port",, +                                       NettyHttpServerTransport.DEFAULT_PORT_RANGE));, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    public static final String TYPE = "recycler.page.type";, +    public static final String LIMIT_HEAP = "recycler.page.limit.heap";, +    public static final String WEIGHT = "recycler.page.weight";, +        final Type type = Type.parse(settings.get(TYPE));]