[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/test/framework/src/main/java/org/elasticsearch/ingest/RandomDocumentPicks.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.ingest;, +, +import com.carrotsearch.randomizedtesting.generators.RandomInts;, +import com.carrotsearch.randomizedtesting.generators.RandomPicks;, +import com.carrotsearch.randomizedtesting.generators.RandomStrings;, +import org.elasticsearch.common.Strings;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Random;, +import java.util.TreeMap;, +, +public final class RandomDocumentPicks {, +, +    private RandomDocumentPicks() {, +, +    }, +, +    /**, +     * Returns a random field name. Can be a leaf field name or the, +     * path to refer to a field name using the dot notation., +     */, +    public static String randomFieldName(Random random) {, +        int numLevels = RandomInts.randomIntBetween(random, 1, 5);, +        String fieldName = "";, +        for (int i = 0; i < numLevels; i++) {, +            if (i > 0) {, +                fieldName += ".";, +            }, +            fieldName += randomString(random);, +        }, +        return fieldName;, +    }, +, +    /**, +     * Returns a random leaf field name., +     */, +    public static String randomLeafFieldName(Random random) {, +        String fieldName;, +        do {, +            fieldName = randomString(random);, +        } while (fieldName.contains("."));, +        return fieldName;, +    }, +, +    /**, +     * Returns a randomly selected existing field name out of the fields that are contained, +     * in the document provided as an argument., +     */, +    public static String randomExistingFieldName(Random random, IngestDocument ingestDocument) {, +        Map<String, Object> source = new TreeMap<>(ingestDocument.getSourceAndMetadata());, +        Map.Entry<String, Object> randomEntry = RandomPicks.randomFrom(random, source.entrySet());, +        String key = randomEntry.getKey();, +        while (randomEntry.getValue() instanceof Map) {, +            @SuppressWarnings("unchecked"), +            Map<String, Object> map = (Map<String, Object>) randomEntry.getValue();, +            Map<String, Object> treeMap = new TreeMap<>(map);, +            randomEntry = RandomPicks.randomFrom(random, treeMap.entrySet());, +            key += "." + randomEntry.getKey();, +        }, +        assert ingestDocument.getFieldValue(key, Object.class) != null;, +        return key;, +    }, +, +    /**, +     * Adds a random non existing field to the provided document and associates it, +     * with the provided value. The field will be added at a random position within the document,, +     * not necessarily at the top level using a leaf field name., +     */]