[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    new ShardStateAction.Listener() {, +                                        @Override, +                                        public void onSuccess() {, +                                            onReplicaFailure(nodeId, exp);, +                                        }, +, +                                        @Override, +                                        public void onShardFailedFailure(Exception e) {, +                                            // TODO: handle catastrophic non-channel failures, +                                            onReplicaFailure(nodeId, exp);, +                                        }, +                                    }, +                                );, +                            }, +                        }, +                    }, +            );, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    new ShardStateAction.Listener() {, +                                        @Override, +                                        public void onSuccess() {, +                                            onReplicaFailure(nodeId, exp);, +                                        }, +, +                                        @Override, +                                        public void onShardFailedFailure(Exception e) {, +                                            // TODO: handle catastrophic non-channel failures, +                                            onReplicaFailure(nodeId, exp);, +                                        }, +                                    }, +                                );, +                            }, +                        }, +                    }, +            );, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.cluster.ClusterStateObserver;, +import org.elasticsearch.cluster.MasterNodeChangePredicate;, +import org.elasticsearch.node.NodeClosedException;, +import org.elasticsearch.transport.ReceiveTimeoutTransportException;, +    private final ClusterService clusterService;, +        this.clusterService = clusterService;, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        shardFailed(shardRouting, indexUUID, message, failure, null, listener);, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        shardFailed(shardRouting, indexUUID, message, failure, listener);, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, TimeValue timeout, Listener listener) {, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        sendShardFailed(observer, shardRoutingEntry, options, listener);, +    }, +, +    private void sendShardFailed(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, TransportRequestOptions options, Listener listener) {, +        DiscoveryNode masterNode = observer.observedState().nodes().masterNode();, +        if (masterNode == null) {, +            logger.warn("{} no master known to fail shard [{}]", shardRoutingEntry.getShardRouting().shardId(), shardRoutingEntry.getShardRouting());, +            waitForNewMasterAndRetry(observer, shardRoutingEntry, options, listener);, +        } else {, +                        if (exp instanceof ReceiveTimeoutTransportException) {, +                            logger.trace("{} timeout sending shard failure [{}] to master [{}]", exp, shardRoutingEntry.getShardRouting().getId(), shardRoutingEntry.failure, masterNode);, +                            handleTimeout(shardRoutingEntry, observer, options, listener);, +                        } else if (exp.getCause() instanceof NotMasterException) {, +                            waitForNewMasterAndRetry(observer, shardRoutingEntry, options, listener);, +                        } else {, +                            logger.warn("{} unexpected failure while sending request to [{}] to fail shard [{}]", exp, shardRoutingEntry.getShardRouting().shardId(), masterNode, shardRoutingEntry);, +                            listener.onShardFailedFailure(exp);, +                        }, +    }, +, +    // visible for testing, +    protected void handleTimeout(ShardRoutingEntry shardRoutingEntry, ClusterStateObserver observer, TransportRequestOptions options, Listener listener) {, +        // set the observed state to the latest cluster state, +        observer.reset(clusterService.state());, +        sendShardFailed(observer, shardRoutingEntry, options, listener);, +    }, +, +    // visible for testing, +    protected void waitForNewMasterAndRetry(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, TransportRequestOptions options, Listener listener) {, +        observer.waitForNextChange(new ClusterStateObserver.Listener() {, +            @Override, +            public void onNewClusterState(ClusterState state) {, +                sendShardFailed(observer, shardRoutingEntry, options, listener);, +            }, +, +            @Override, +            public void onClusterServiceClose() {, +                logger.error("{} node closed while handling failed shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().getId(), shardRoutingEntry.getShardRouting());, +                listener.onShardFailedFailure(new NodeClosedException(clusterService.localNode()));, +            }, +, +            @Override, +            public void onTimeout(TimeValue timeout) {, +                // we wait indefinitely for a new master, +                assert false;, +            }, +        }, MasterNodeChangePredicate.INSTANCE);, +    }, +        default void onShardFailedFailure(final Exception e) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                    new ShardStateAction.Listener() {]