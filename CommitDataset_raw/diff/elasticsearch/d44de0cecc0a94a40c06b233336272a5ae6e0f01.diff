[+++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +        private final Throwable cause;, +        public Failure(String index, String type, String id, Throwable cause) {, +        public Throwable getCause() {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +        private final Throwable cause;, +        public Failure(String index, String type, String id, Throwable cause) {, +        public Throwable getCause() {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                                try {, +                                } catch (Exception e) {, +                                    listener.onFailure(e);, +                                }, +                                try {, +                                    executeBulk(task, bulkRequest, startTime, listener, responses);, +                                } catch (Exception inner) {, +                                }, +    /**, +     * This method executes the {@link BulkRequest} and calls the given listener once the request returns., +     * This method will not create any indices even if auto-create indices is enabled., +     *, +     * @see #doExecute(BulkRequest, org.elasticsearch.action.ActionListener), +     */, +    public void executeBulk(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) {, +        final long startTimeNanos = relativeTime();, +        executeBulk(null, bulkRequest, startTimeNanos, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    }, +, +    void executeBulk(Task task, final BulkRequest bulkRequest, final long startTimeNanos, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +        final ClusterState clusterState = clusterService.state();, +        // TODO use timeout to wait here if its blocked..., +        clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.WRITE);, +                        TransportDeleteAction.resolveAndValidateRouting(metaData, concreteIndex.getName(), (DeleteRequest) docWriteRequest);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +        private final Throwable cause;, +        public Failure(String index, String type, String id, Throwable cause) {, +        public Throwable getCause() {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                                try {, +                                } catch (Exception e) {, +                                    listener.onFailure(e);, +                                }, +                                try {, +                                    executeBulk(task, bulkRequest, startTime, listener, responses);, +                                } catch (Exception inner) {, +                                }, +    /**, +     * This method executes the {@link BulkRequest} and calls the given listener once the request returns., +     * This method will not create any indices even if auto-create indices is enabled., +     *, +     * @see #doExecute(BulkRequest, org.elasticsearch.action.ActionListener), +     */, +    public void executeBulk(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) {, +        final long startTimeNanos = relativeTime();, +        executeBulk(null, bulkRequest, startTimeNanos, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    }, +, +    void executeBulk(Task task, final BulkRequest bulkRequest, final long startTimeNanos, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +        final ClusterState clusterState = clusterService.state();, +        // TODO use timeout to wait here if its blocked..., +        clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.WRITE);, +                        TransportDeleteAction.resolveAndValidateRouting(metaData, concreteIndex.getName(), (DeleteRequest) docWriteRequest);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnPrimary;, +import static org.elasticsearch.action.delete.TransportDeleteAction.executeDeleteRequestOnReplica;, +import static org.elasticsearch.action.index.TransportIndexAction.executeIndexRequestOnPrimary;, +import static org.elasticsearch.action.index.TransportIndexAction.executeIndexRequestOnReplica;, +    protected WritePrimaryResult shardOperationOnPrimary(BulkShardRequest request, IndexShard primary) throws Exception {, +        return new WritePrimaryResult(request, response, location, null, primary);, +    protected WriteReplicaResult shardOperationOnReplica(BulkShardRequest request, IndexShard replica) throws Exception {, +        return new WriteReplicaResult(request, location, null, replica);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +        private final Throwable cause;, +        public Failure(String index, String type, String id, Throwable cause) {, +        public Throwable getCause() {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                                try {, +                                } catch (Exception e) {, +                                    listener.onFailure(e);, +                                }, +                                try {, +                                    executeBulk(task, bulkRequest, startTime, listener, responses);, +                                } catch (Exception inner) {, +                                }, +    /**, +     * This method executes the {@link BulkRequest} and calls the given listener once the request returns., +     * This method will not create any indices even if auto-create indices is enabled., +     *, +     * @see #doExecute(BulkRequest, org.elasticsearch.action.ActionListener), +     */, +    public void executeBulk(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) {, +        final long startTimeNanos = relativeTime();, +        executeBulk(null, bulkRequest, startTimeNanos, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    }, +]