[+++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public String getType() {, +        return NAME;, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public String getType() {, +        return NAME;, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineRegistry.java, +import org.elasticsearch.common.Strings;, +    private final Map<Class<? extends ScriptEngineService>, String> registeredScriptEngineServices;, +        Map<Class<? extends ScriptEngineService>, String> registeredScriptEngineServices = new HashMap<>();, +            String oldLanguage = registeredScriptEngineServices.putIfAbsent(registration.getScriptEngineService(),, +                    registration.getScriptEngineLanguage());, +            if (oldLanguage != null) {, +                throw new IllegalArgumentException("script engine service [" + registration.getScriptEngineService() +, +                                "] already registered for language [" + oldLanguage + "]");, +            String language = registration.getScriptEngineLanguage();, +                throw new IllegalArgumentException("scripting language [" + language + "] already registered for script engine service [" +, +                                scriptEngineServiceClazz.getCanonicalName() + "]");, +    String getLanguage(Class<? extends ScriptEngineService> scriptEngineService) {, +        private final String scriptEngineLanguage;, +        /**, +         * Register a script engine service with the default of inline scripts disabled, +         */, +        public ScriptEngineRegistration(Class<? extends ScriptEngineService> scriptEngineService, String scriptEngineLanguage) {, +            this(scriptEngineService, scriptEngineLanguage, ScriptMode.OFF);, +        /**, +         * Register a script engine service with the given default mode for inline scripts, +         */, +        public ScriptEngineRegistration(Class<? extends ScriptEngineService> scriptEngineService, String scriptEngineLanguage,, +            if (Strings.hasText(scriptEngineLanguage) == false) {, +                throw new IllegalArgumentException("languages for script engine service [" +, +                                scriptEngineService.getCanonicalName() + "] should be a non-empty string");, +            this.scriptEngineLanguage = scriptEngineLanguage;, +        String getScriptEngineLanguage() {, +            return scriptEngineLanguage;, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public String getType() {, +        return NAME;, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineRegistry.java, +import org.elasticsearch.common.Strings;, +    private final Map<Class<? extends ScriptEngineService>, String> registeredScriptEngineServices;, +        Map<Class<? extends ScriptEngineService>, String> registeredScriptEngineServices = new HashMap<>();, +            String oldLanguage = registeredScriptEngineServices.putIfAbsent(registration.getScriptEngineService(),, +                    registration.getScriptEngineLanguage());, +            if (oldLanguage != null) {, +                throw new IllegalArgumentException("script engine service [" + registration.getScriptEngineService() +, +                                "] already registered for language [" + oldLanguage + "]");, +            String language = registration.getScriptEngineLanguage();, +                throw new IllegalArgumentException("scripting language [" + language + "] already registered for script engine service [" +, +                                scriptEngineServiceClazz.getCanonicalName() + "]");, +    String getLanguage(Class<? extends ScriptEngineService> scriptEngineService) {, +        private final String scriptEngineLanguage;, +        /**, +         * Register a script engine service with the default of inline scripts disabled, +         */, +        public ScriptEngineRegistration(Class<? extends ScriptEngineService> scriptEngineService, String scriptEngineLanguage) {, +            this(scriptEngineService, scriptEngineLanguage, ScriptMode.OFF);, +        /**, +         * Register a script engine service with the given default mode for inline scripts, +         */, +        public ScriptEngineRegistration(Class<? extends ScriptEngineService> scriptEngineService, String scriptEngineLanguage,, +            if (Strings.hasText(scriptEngineLanguage) == false) {, +                throw new IllegalArgumentException("languages for script engine service [" +, +                                scriptEngineService.getCanonicalName() + "] should be a non-empty string");, +            this.scriptEngineLanguage = scriptEngineLanguage;, +        String getScriptEngineLanguage() {, +            return scriptEngineLanguage;, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineService.java, +    String getType();, +++ b/core/src/main/java/org/elasticsearch/script/NativeScriptEngineService.java, +    public String getType() {, +        return NAME;, +++ b/core/src/main/java/org/elasticsearch/script/ScriptEngineRegistry.java, +import org.elasticsearch.common.Strings;, +    private final Map<Class<? extends ScriptEngineService>, String> registeredScriptEngineServices;, +        Map<Class<? extends ScriptEngineService>, String> registeredScriptEngineServices = new HashMap<>();, +            String oldLanguage = registeredScriptEngineServices.putIfAbsent(registration.getScriptEngineService(),, +                    registration.getScriptEngineLanguage());, +            if (oldLanguage != null) {, +                throw new IllegalArgumentException("script engine service [" + registration.getScriptEngineService() +, +                                "] already registered for language [" + oldLanguage + "]");, +            String language = registration.getScriptEngineLanguage();, +                throw new IllegalArgumentException("scripting language [" + language + "] already registered for script engine service [" +, +                                scriptEngineServiceClazz.getCanonicalName() + "]");, +    String getLanguage(Class<? extends ScriptEngineService> scriptEngineService) {, +        private final String scriptEngineLanguage;, +        /**, +         * Register a script engine service with the default of inline scripts disabled, +         */, +        public ScriptEngineRegistration(Class<? extends ScriptEngineService> scriptEngineService, String scriptEngineLanguage) {, +            this(scriptEngineService, scriptEngineLanguage, ScriptMode.OFF);, +        /**, +         * Register a script engine service with the given default mode for inline scripts, +         */, +        public ScriptEngineRegistration(Class<? extends ScriptEngineService> scriptEngineService, String scriptEngineLanguage,, +            if (Strings.hasText(scriptEngineLanguage) == false) {, +                throw new IllegalArgumentException("languages for script engine service [" +, +                                scriptEngineService.getCanonicalName() + "] should be a non-empty string");, +            this.scriptEngineLanguage = scriptEngineLanguage;, +        String getScriptEngineLanguage() {]