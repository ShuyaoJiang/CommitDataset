[+++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            assertOK(client().performRequest("POST", "/" + indexName1 + "/_xpack/ccr/_unfollow"));, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            assertOK(client().performRequest("POST", "/" + indexName1 + "/_xpack/ccr/_unfollow"));, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            assertOK(client().performRequest("POST", "/" + indexName1 + "/_xpack/ccr/_unfollow"));, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/UnfollowIndexAction.java, +                if (followIndexMetadata == null) {, +                    listener.onFailure(new IllegalArgumentException("follow index [" + request.followIndex + "] does not exist"));, +                    return;, +                }, +, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            assertOK(client().performRequest("POST", "/" + indexName1 + "/_xpack/ccr/_unfollow"));, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/UnfollowIndexAction.java, +                if (followIndexMetadata == null) {, +                    listener.onFailure(new IllegalArgumentException("follow index [" + request.followIndex + "] does not exist"));, +                    return;, +                }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestFollowExistingIndexAction.java, +        controller.registerHandler(RestRequest.Method.POST, "/{index}/_xpack/ccr/_follow", this);, +        request.setFollowIndex(restRequest.param("index"));, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            assertOK(client().performRequest("POST", "/" + indexName1 + "/_xpack/ccr/_unfollow"));, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/UnfollowIndexAction.java, +                if (followIndexMetadata == null) {, +                    listener.onFailure(new IllegalArgumentException("follow index [" + request.followIndex + "] does not exist"));, +                    return;, +                }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestFollowExistingIndexAction.java, +        controller.registerHandler(RestRequest.Method.POST, "/{index}/_xpack/ccr/_follow", this);, +        request.setFollowIndex(restRequest.param("index"));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestUnfollowIndexAction.java, +        controller.registerHandler(RestRequest.Method.POST, "/{index}/_xpack/ccr/_unfollow", this);, +        request.setFollowIndex(restRequest.param("index"));, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            assertOK(client().performRequest("POST", "/" + indexName1 + "/_xpack/ccr/_unfollow"));, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/UnfollowIndexAction.java, +                if (followIndexMetadata == null) {, +                    listener.onFailure(new IllegalArgumentException("follow index [" + request.followIndex + "] does not exist"));, +                    return;, +                }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestFollowExistingIndexAction.java, +        controller.registerHandler(RestRequest.Method.POST, "/{index}/_xpack/ccr/_follow", this);, +        request.setFollowIndex(restRequest.param("index"));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestUnfollowIndexAction.java, +        controller.registerHandler(RestRequest.Method.POST, "/{index}/_xpack/ccr/_unfollow", this);, +        request.setFollowIndex(restRequest.param("index"));, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/ShardChangesIT.java, +    public void testUnfollowNonExistingIndex() {, +        UnfollowIndexAction.Request unfollowRequest = new UnfollowIndexAction.Request();, +        unfollowRequest.setFollowIndex("non-existing-index");, +        expectThrows(IllegalArgumentException.class, () -> client().execute(UnfollowIndexAction.INSTANCE, unfollowRequest).actionGet());, +    }, +, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +            assertOK(client().performRequest("POST", "/" + indexName1 + "/_xpack/ccr/_unfollow"));, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +        assertOK(client().performRequest("POST", "/" + followIndex + "/_xpack/ccr/_follow", params));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/UnfollowIndexAction.java, +                if (followIndexMetadata == null) {, +                    listener.onFailure(new IllegalArgumentException("follow index [" + request.followIndex + "] does not exist"));, +                    return;, +                }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestFollowExistingIndexAction.java, +        controller.registerHandler(RestRequest.Method.POST, "/{index}/_xpack/ccr/_follow", this);, +        request.setFollowIndex(restRequest.param("index"));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/rest/RestUnfollowIndexAction.java, +        controller.registerHandler(RestRequest.Method.POST, "/{index}/_xpack/ccr/_unfollow", this);, +        request.setFollowIndex(restRequest.param("index"));, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/ShardChangesIT.java, +    public void testUnfollowNonExistingIndex() {, +        UnfollowIndexAction.Request unfollowRequest = new UnfollowIndexAction.Request();, +        unfollowRequest.setFollowIndex("non-existing-index");, +        expectThrows(IllegalArgumentException.class, () -> client().execute(UnfollowIndexAction.INSTANCE, unfollowRequest).actionGet());, +    }, +, +++ b/x-pack/plugin/src/test/resources/rest-api-spec/api/xpack.ccr.follow_existing_index.json, +      "path": "/{index}/_xpack/ccr/_follow",]