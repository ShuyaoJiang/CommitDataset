[+++ b/GRADLE.CHEATSHEET, +install -DskipTests -> publishToMavenLocal, +++ b/GRADLE.CHEATSHEET, +install -DskipTests -> publishToMavenLocal, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        if (origin == null) {, +            return null // best effort, the url doesnt really matter, it is just required by maven central, +        }, +                /* HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +                 * when the packaging type is set to 'pom'. But Sonatype's OSS repositories require source files, +                 * for artifacts that are of type 'zip'. We already publish the source and javadoc for Elasticsearch, +                 * under the various other subprojects. So here we create another publication using the same, +                 * name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +                 * in alphabetical order. This lets us publish the zip file and even though the pom says the, +                 * type is 'pom' instead of 'zip'. We cannot setup a dependency between the tasks because the, +                 * publishing tasks are created *extremely* late in the configuration phase, so that we cannot get, +                 * ahold of the actual task. Furthermore, this entire hack only exists so we can make publishing to, +                 * maven local work, since we publish to maven central externally. */, +++ b/GRADLE.CHEATSHEET, +install -DskipTests -> publishToMavenLocal, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        if (origin == null) {, +            return null // best effort, the url doesnt really matter, it is just required by maven central, +        }, +                /* HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +                 * when the packaging type is set to 'pom'. But Sonatype's OSS repositories require source files, +                 * for artifacts that are of type 'zip'. We already publish the source and javadoc for Elasticsearch, +                 * under the various other subprojects. So here we create another publication using the same, +                 * name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +                 * in alphabetical order. This lets us publish the zip file and even though the pom says the, +                 * type is 'pom' instead of 'zip'. We cannot setup a dependency between the tasks because the, +                 * publishing tasks are created *extremely* late in the configuration phase, so that we cannot get, +                 * ahold of the actual task. Furthermore, this entire hack only exists so we can make publishing to, +                 * maven local work, since we publish to maven central externally. */, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/GRADLE.CHEATSHEET, +install -DskipTests -> publishToMavenLocal, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        if (origin == null) {, +            return null // best effort, the url doesnt really matter, it is just required by maven central, +        }, +                /* HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +                 * when the packaging type is set to 'pom'. But Sonatype's OSS repositories require source files, +                 * for artifacts that are of type 'zip'. We already publish the source and javadoc for Elasticsearch, +                 * under the various other subprojects. So here we create another publication using the same, +                 * name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +                 * in alphabetical order. This lets us publish the zip file and even though the pom says the, +                 * type is 'pom' instead of 'zip'. We cannot setup a dependency between the tasks because the, +                 * publishing tasks are created *extremely* late in the configuration phase, so that we cannot get, +                 * ahold of the actual task. Furthermore, this entire hack only exists so we can make publishing to, +                 * maven local work, since we publish to maven central externally. */, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}",, +++ b/GRADLE.CHEATSHEET, +install -DskipTests -> publishToMavenLocal, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        if (origin == null) {, +            return null // best effort, the url doesnt really matter, it is just required by maven central, +        }, +                /* HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +                 * when the packaging type is set to 'pom'. But Sonatype's OSS repositories require source files, +                 * for artifacts that are of type 'zip'. We already publish the source and javadoc for Elasticsearch, +                 * under the various other subprojects. So here we create another publication using the same, +                 * name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +                 * in alphabetical order. This lets us publish the zip file and even though the pom says the, +                 * type is 'pom' instead of 'zip'. We cannot setup a dependency between the tasks because the, +                 * publishing tasks are created *extremely* late in the configuration phase, so that we cannot get, +                 * ahold of the actual task. Furthermore, this entire hack only exists so we can make publishing to, +                 * maven local work, since we publish to maven central externally. */, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +            precommitTasks.add(configureLoggerUsage(project)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}",, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        // sets up any extra config files that need to be copied over to the ES instance;, +        // its run after plugins have been installed, as the extra config files may belong to plugins, +        setup = configureExtraConfigFilesTask(taskName(task, node, 'extraConfig'), project, setup, node), +, +++ b/GRADLE.CHEATSHEET, +install -DskipTests -> publishToMavenLocal, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        if (origin == null) {, +            return null // best effort, the url doesnt really matter, it is just required by maven central, +        }, +                /* HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +                 * when the packaging type is set to 'pom'. But Sonatype's OSS repositories require source files, +                 * for artifacts that are of type 'zip'. We already publish the source and javadoc for Elasticsearch, +                 * under the various other subprojects. So here we create another publication using the same, +                 * name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +                 * in alphabetical order. This lets us publish the zip file and even though the pom says the, +                 * type is 'pom' instead of 'zip'. We cannot setup a dependency between the tasks because the, +                 * publishing tasks are created *extremely* late in the configuration phase, so that we cannot get, +                 * ahold of the actual task. Furthermore, this entire hack only exists so we can make publishing to, +                 * maven local work, since we publish to maven central externally. */, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy]