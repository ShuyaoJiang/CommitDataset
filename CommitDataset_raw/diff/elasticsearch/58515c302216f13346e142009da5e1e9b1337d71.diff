[+++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +    public FieldMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {, +        TextFieldMapper mapper = (TextFieldMapper) super.updateFieldType(fullNameToFieldType);, +        if (mapper.prefixFieldMapper != null) {, +            mapper.prefixFieldMapper = (PrefixFieldMapper) mapper.prefixFieldMapper.updateFieldType(fullNameToFieldType);, +        }, +        if (mapper.phraseFieldMapper != null) {, +            mapper.phraseFieldMapper = (PhraseFieldMapper) mapper.phraseFieldMapper.updateFieldType(fullNameToFieldType);, +        }, +        return mapper;, +    }, +, +    @Override, +, +        } else if (this.prefixFieldMapper != null || mw.prefixFieldMapper != null) {, +, +        if (this.phraseFieldMapper != null && mw.phraseFieldMapper != null) {, +            this.phraseFieldMapper = (PhraseFieldMapper) this.phraseFieldMapper.merge(mw.phraseFieldMapper);, +        } else if (this.fieldType().indexPhrases != mw.fieldType().indexPhrases) {, +++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +    public FieldMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {, +        TextFieldMapper mapper = (TextFieldMapper) super.updateFieldType(fullNameToFieldType);, +        if (mapper.prefixFieldMapper != null) {, +            mapper.prefixFieldMapper = (PrefixFieldMapper) mapper.prefixFieldMapper.updateFieldType(fullNameToFieldType);, +        }, +        if (mapper.phraseFieldMapper != null) {, +            mapper.phraseFieldMapper = (PhraseFieldMapper) mapper.phraseFieldMapper.updateFieldType(fullNameToFieldType);, +        }, +        return mapper;, +    }, +, +    @Override, +, +        } else if (this.prefixFieldMapper != null || mw.prefixFieldMapper != null) {, +, +        if (this.phraseFieldMapper != null && mw.phraseFieldMapper != null) {, +            this.phraseFieldMapper = (PhraseFieldMapper) this.phraseFieldMapper.merge(mw.phraseFieldMapper);, +        } else if (this.fieldType().indexPhrases != mw.fieldType().indexPhrases) {, +++ b/server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java, +import static org.hamcrest.Matchers.instanceOf;, +, +    public void testSimpleMerge() throws IOException {, +        MapperService mapperService = createIndex("test_mapping_merge").mapperService();, +        {, +            String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject(), +                .startObject("_doc"), +                    .startObject("properties"), +                        .startObject("a_field"), +                            .field("type", "text"), +                            .startObject("index_prefixes").endObject(), +                            .field("index_phrases", true), +                        .endObject(), +                    .endObject(), +                .endObject().endObject());, +            DocumentMapper mapper = mapperService.merge("_doc",, +                new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);, +            assertThat(mapper.mappers().getMapper("a_field"), instanceOf(TextFieldMapper.class));, +        }, +, +        {, +            String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject(), +                .startObject("_doc"), +                    .startObject("properties"), +                        .startObject("a_field"), +                            .field("type", "text"), +                            .startObject("index_prefixes").endObject(), +                            .field("index_phrases", true), +                        .endObject(), +                    .endObject(), +                .endObject().endObject());, +            DocumentMapper mapper = mapperService.merge("_doc",, +                new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);, +            assertThat(mapper.mappers().getMapper("a_field"), instanceOf(TextFieldMapper.class));, +        }, +, +        {, +            String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject(), +                .startObject("_doc"), +                    .startObject("properties"), +                        .startObject("a_field"), +                            .field("type", "text"), +                                .startObject("index_prefixes"), +                                    .field("min_chars", "3"), +                                .endObject(), +                                .field("index_phrases", true), +                            .endObject(), +                    .endObject(), +                .endObject().endObject());, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                () -> mapperService.merge("_doc",, +                    new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE));, +            assertThat(e.getMessage(), containsString("different [index_prefixes]"));, +        }, +, +        {, +            String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject(), +                .startObject("_doc"), +                    .startObject("properties"), +                        .startObject("a_field"), +                            .field("type", "text")]