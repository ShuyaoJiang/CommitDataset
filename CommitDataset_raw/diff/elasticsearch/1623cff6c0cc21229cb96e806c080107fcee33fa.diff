[+++ b/core/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    public CircuitBreakerService breakerService() {, +        return this.circuitBreakingInstance.breakerService;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    public CircuitBreakerService breakerService() {, +        return this.circuitBreakingInstance.breakerService;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, +        Setting.byteSizeSetting("indices.breaker.request.limit", "60%", Property.Dynamic, Property.NodeScope);, +        this.parentSettings = new BreakerSettings(CircuitBreaker.PARENT,, +                TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.get(settings).bytes(), 1.0,, +                CircuitBreaker.Type.PARENT);, +, +++ b/core/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    public CircuitBreakerService breakerService() {, +        return this.circuitBreakingInstance.breakerService;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, +        Setting.byteSizeSetting("indices.breaker.request.limit", "60%", Property.Dynamic, Property.NodeScope);, +        this.parentSettings = new BreakerSettings(CircuitBreaker.PARENT,, +                TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.get(settings).bytes(), 1.0,, +                CircuitBreaker.Type.PARENT);, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBase.java, +import org.elasticsearch.common.breaker.CircuitBreaker;, +import org.elasticsearch.common.breaker.CircuitBreakingException;, +import org.elasticsearch.indices.breaker.CircuitBreakerService;, +    /** The default "weight" that a bucket takes when performing an aggregation */, +    public static final int DEFAULT_WEIGHT = 1024 * 5; // 5kb, +, +    private final CircuitBreakerService breakerService;, +    private boolean failed = false;, +        this.breakerService = context.bigArrays().breakerService();, +        try {, +            this.breakerService, +                    .getBreaker(CircuitBreaker.REQUEST), +                    .addEstimateBytesAndMaybeBreak(DEFAULT_WEIGHT, "<agg [" + name + "]>");, +        } catch (CircuitBreakingException cbe) {, +            this.failed = true;, +            throw cbe;, +        }, +        try {, +        } finally {, +            if (!this.failed) {, +                this.breakerService.getBreaker(CircuitBreaker.REQUEST).addWithoutBreaking(-DEFAULT_WEIGHT);, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    public CircuitBreakerService breakerService() {, +        return this.circuitBreakingInstance.breakerService;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, +        Setting.byteSizeSetting("indices.breaker.request.limit", "60%", Property.Dynamic, Property.NodeScope);, +        this.parentSettings = new BreakerSettings(CircuitBreaker.PARENT,, +                TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.get(settings).bytes(), 1.0,, +                CircuitBreaker.Type.PARENT);, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBase.java, +import org.elasticsearch.common.breaker.CircuitBreaker;, +import org.elasticsearch.common.breaker.CircuitBreakingException;, +import org.elasticsearch.indices.breaker.CircuitBreakerService;, +    /** The default "weight" that a bucket takes when performing an aggregation */, +    public static final int DEFAULT_WEIGHT = 1024 * 5; // 5kb, +, +    private final CircuitBreakerService breakerService;, +    private boolean failed = false;, +        this.breakerService = context.bigArrays().breakerService();, +        try {, +            this.breakerService, +                    .getBreaker(CircuitBreaker.REQUEST), +                    .addEstimateBytesAndMaybeBreak(DEFAULT_WEIGHT, "<agg [" + name + "]>");, +        } catch (CircuitBreakingException cbe) {, +            this.failed = true;, +            throw cbe;, +        }, +        try {, +        } finally {, +            if (!this.failed) {, +                this.breakerService.getBreaker(CircuitBreaker.REQUEST).addWithoutBreaking(-DEFAULT_WEIGHT);, +            }, +        }, +++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java, +import org.elasticsearch.test.junit.annotations.TestLogging;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.terms;, +            String errMsg = "CircuitBreakingException[[request] Data too large";, +            errMsg = "would be larger than limit of [10/10b]]";, +            assertThat("Exception: [" + e.toString() + "] should contain a CircuitBreakingException", e.toString(), containsString(errMsg));, +        }, +    }, +, +    public void testBucketBreaker() throws Exception {, +        if (noopBreakerUsed()) {, +            logger.info("--> noop breakers used, skipping test");, +            return;, +        }]