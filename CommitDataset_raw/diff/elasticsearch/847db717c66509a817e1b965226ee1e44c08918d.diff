[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        Class<? extends Module> defaultDiscoveryModule;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        Class<? extends Module> defaultDiscoveryModule;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +import java.util.concurrent.ConcurrentHashMap;, +    // use CHM here and not ConcurrentMaps#new since we want to be able to agentify this using TC later on..., +    private static final ConcurrentMap<ClusterName, ClusterGroup> clusterGroups = new ConcurrentHashMap<ClusterName, ClusterGroup>();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        Class<? extends Module> defaultDiscoveryModule;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +import java.util.concurrent.ConcurrentHashMap;, +    // use CHM here and not ConcurrentMaps#new since we want to be able to agentify this using TC later on..., +    private static final ConcurrentMap<ClusterName, ClusterGroup> clusterGroups = new ConcurrentHashMap<ClusterName, ClusterGroup>();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportModule.java, +import org.elasticsearch.transport.local.LocalTransportModule;, +        Class<? extends Module> defaultTransportModule;, +        if (settings.getAsBoolean("node.local", false)) {, +            defaultTransportModule = LocalTransportModule.class;, +        } else {, +                defaultTransportModule = LocalTransportModule.class;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        Class<? extends Module> defaultDiscoveryModule;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +import java.util.concurrent.ConcurrentHashMap;, +    // use CHM here and not ConcurrentMaps#new since we want to be able to agentify this using TC later on..., +    private static final ConcurrentMap<ClusterName, ClusterGroup> clusterGroups = new ConcurrentHashMap<ClusterName, ClusterGroup>();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportModule.java, +import org.elasticsearch.transport.local.LocalTransportModule;, +        Class<? extends Module> defaultTransportModule;, +        if (settings.getAsBoolean("node.local", false)) {, +            defaultTransportModule = LocalTransportModule.class;, +        } else {, +                defaultTransportModule = LocalTransportModule.class;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/local/LocalTransport.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.transport.local;, +, +import com.google.inject.Inject;, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.cluster.node.Node;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.*;, +import org.elasticsearch.util.Nullable;, +import org.elasticsearch.util.component.AbstractComponent;, +import org.elasticsearch.util.component.Lifecycle;, +import org.elasticsearch.util.io.*;, +import org.elasticsearch.util.settings.ImmutableSettings;, +import org.elasticsearch.util.settings.Settings;, +import org.elasticsearch.util.transport.BoundTransportAddress;, +import org.elasticsearch.util.transport.LocalTransportAddress;, +import org.elasticsearch.util.transport.TransportAddress;, +, +import java.io.DataInputStream;, +import java.io.IOException;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.atomic.AtomicLong;, +, +import static org.elasticsearch.transport.Transport.Helper.*;, +import static org.elasticsearch.util.concurrent.ConcurrentMaps.*;, +, +/**, + * @author kimchy (Shay Banon), + */, +public class LocalTransport extends AbstractComponent implements Transport {, +, +    private final Lifecycle lifecycle = new Lifecycle();, +, +    private final ThreadPool threadPool;, +, +    private volatile TransportServiceAdapter transportServiceAdapter;, +, +    private volatile BoundTransportAddress boundAddress;, +, +    private volatile LocalTransportAddress localAddress;, +, +    private final static ConcurrentMap<TransportAddress, LocalTransport> transports = newConcurrentMap();, +, +    private static final AtomicLong transportAddressIdGenerator = new AtomicLong();, +]