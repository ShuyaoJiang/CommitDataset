[+++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +        return indexWriter.getFlushingBytes() + versionMap.getRefreshingBytes();, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +        return indexWriter.getFlushingBytes() + versionMap.getRefreshingBytes();, +++ b/server/src/main/java/org/elasticsearch/index/engine/LiveVersionMap.java, +    /**, +     * Returns how much RAM is current being freed up by refreshing.  This is {@link #ramBytesUsed()}, +     * except does not include tombstones because they don't clear on refresh., +     */, +    long getRefreshingBytes() {, +        return maps.old.ramBytesUsed.get();, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +        return indexWriter.getFlushingBytes() + versionMap.getRefreshingBytes();, +++ b/server/src/main/java/org/elasticsearch/index/engine/LiveVersionMap.java, +    /**, +     * Returns how much RAM is current being freed up by refreshing.  This is {@link #ramBytesUsed()}, +     * except does not include tombstones because they don't clear on refresh., +     */, +    long getRefreshingBytes() {, +        return maps.old.ramBytesUsed.get();, +    }, +, +++ b/server/src/test/java/org/elasticsearch/index/engine/LiveVersionMapTests.java, +import static org.hamcrest.Matchers.greaterThan;, +    public void testRefreshingBytes() throws IOException {, +        LiveVersionMap map = new LiveVersionMap();, +        BytesRefBuilder uid = new BytesRefBuilder();, +        uid.copyChars(TestUtil.randomSimpleString(random(), 10, 20));, +        try (Releasable r = map.acquireLock(uid.toBytesRef())) {, +            map.putIndexUnderLock(uid.toBytesRef(), randomIndexVersionValue());, +        }, +        map.beforeRefresh();, +        assertThat(map.getRefreshingBytes(), greaterThan(0L));, +        map.afterRefresh(true);, +        assertThat(map.getRefreshingBytes(), equalTo(0L));, +    }, +]