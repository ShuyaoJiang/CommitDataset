[+++ b/build.gradle, +task verifyVersions {, +    if (gradle.startParameter.isOffline()) {, +      throw new GradleException("Must run in online mode to verify versions"), +    }, +    Set<Version> knownVersions = new TreeSet<>(xml.versioning.versions.version.collect { it.text() }.findAll { it ==~ /\d\.\d\.\d/ }.collect { Version.fromString(it) }), +    // Limit the known versions to those that should be index compatible, and are not future versions, +    knownVersions = knownVersions.findAll { it.major >= prevMajor && it.before(VersionProperties.elasticsearch) }, +    Set<Version> actualVersions = new TreeSet<>(indexCompatVersions.findAll { false == it.snapshot }), +    if (knownVersions.equals(actualVersions) == false) {, +      throw new GradleException("out-of-date released versions\nActual  :" + actualVersions + "\nExpected:" + knownVersions +, +        "\nUpdate Version.java. Note that Version.CURRENT doesn't count because it is not released."), +, +task branchConsistency {, +  description 'Ensures this branch is internally consistent. For example, that versions constants match released versions.', +  group 'Verification', +  dependsOn verifyVersions, +++ b/build.gradle, +task verifyVersions {, +    if (gradle.startParameter.isOffline()) {, +      throw new GradleException("Must run in online mode to verify versions"), +    }, +    Set<Version> knownVersions = new TreeSet<>(xml.versioning.versions.version.collect { it.text() }.findAll { it ==~ /\d\.\d\.\d/ }.collect { Version.fromString(it) }), +    // Limit the known versions to those that should be index compatible, and are not future versions, +    knownVersions = knownVersions.findAll { it.major >= prevMajor && it.before(VersionProperties.elasticsearch) }, +    Set<Version> actualVersions = new TreeSet<>(indexCompatVersions.findAll { false == it.snapshot }), +    if (knownVersions.equals(actualVersions) == false) {, +      throw new GradleException("out-of-date released versions\nActual  :" + actualVersions + "\nExpected:" + knownVersions +, +        "\nUpdate Version.java. Note that Version.CURRENT doesn't count because it is not released."), +, +task branchConsistency {, +  description 'Ensures this branch is internally consistent. For example, that versions constants match released versions.', +  group 'Verification', +  dependsOn verifyVersions, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/Version.groovy, +import groovy.transform.Sortable, +, +@Sortable]