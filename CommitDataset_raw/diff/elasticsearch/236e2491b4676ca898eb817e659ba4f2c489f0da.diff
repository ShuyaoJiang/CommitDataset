[+++ b/docs/reference/cluster/update-settings.asciidoc, +++ b/docs/reference/cluster/update-settings.asciidoc, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +            BalancedShardsAllocator.this.weightFunction = new WeightFunction(indexBalance, shardBalance);, +    private volatile WeightFunction weightFunction = new WeightFunction(DEFAULT_INDEX_BALANCE_FACTOR, DEFAULT_SHARD_BALANCE_FACTOR);, +     * weight function. For example if the weight function should calculate the weights only based on a global (shard) balance the index balance, +     * <code>weight(node, index) = weight<sub>index</sub>(node, index) + weight<sub>node</sub>(node, index)</code>, +, +        public WeightFunction(float indexBalance, float shardBalance) {, +            float sum = indexBalance + shardBalance;, +            theta = new float[]{shardBalance / sum, indexBalance / sum};, +            final float weightShard = (node.numShards() - balancer.avgShardsPerNode());, +            final float weightIndex = (node.numShards(index) - balancer.avgShardsPerNode(index));, +            assert theta != null;, +            return theta[0] * weightShard + theta[1] * weightIndex;, +                                final float delta = absDelta(weights[lowIdx], weights[highIdx]);, +            numShards = -1;, +            numShards = -1;, +++ b/docs/reference/cluster/update-settings.asciidoc, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +            BalancedShardsAllocator.this.weightFunction = new WeightFunction(indexBalance, shardBalance);, +    private volatile WeightFunction weightFunction = new WeightFunction(DEFAULT_INDEX_BALANCE_FACTOR, DEFAULT_SHARD_BALANCE_FACTOR);, +     * weight function. For example if the weight function should calculate the weights only based on a global (shard) balance the index balance, +     * <code>weight(node, index) = weight<sub>index</sub>(node, index) + weight<sub>node</sub>(node, index)</code>, +, +        public WeightFunction(float indexBalance, float shardBalance) {, +            float sum = indexBalance + shardBalance;, +            theta = new float[]{shardBalance / sum, indexBalance / sum};, +            final float weightShard = (node.numShards() - balancer.avgShardsPerNode());, +            final float weightIndex = (node.numShards(index) - balancer.avgShardsPerNode(index));, +            assert theta != null;, +            return theta[0] * weightShard + theta[1] * weightIndex;, +                                final float delta = absDelta(weights[lowIdx], weights[highIdx]);, +            numShards = -1;, +            numShards = -1;, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +++ b/docs/reference/cluster/update-settings.asciidoc, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +            BalancedShardsAllocator.this.weightFunction = new WeightFunction(indexBalance, shardBalance);, +    private volatile WeightFunction weightFunction = new WeightFunction(DEFAULT_INDEX_BALANCE_FACTOR, DEFAULT_SHARD_BALANCE_FACTOR);, +     * weight function. For example if the weight function should calculate the weights only based on a global (shard) balance the index balance, +     * <code>weight(node, index) = weight<sub>index</sub>(node, index) + weight<sub>node</sub>(node, index)</code>, +, +        public WeightFunction(float indexBalance, float shardBalance) {, +            float sum = indexBalance + shardBalance;, +            theta = new float[]{shardBalance / sum, indexBalance / sum};, +            final float weightShard = (node.numShards() - balancer.avgShardsPerNode());, +            final float weightIndex = (node.numShards(index) - balancer.avgShardsPerNode(index));, +            assert theta != null;, +            return theta[0] * weightShard + theta[1] * weightIndex;, +                                final float delta = absDelta(weights[lowIdx], weights[highIdx]);, +            numShards = -1;, +            numShards = -1;, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +++ b/src/test/java/org/elasticsearch/cluster/routing/allocation/BalanceConfigurationTests.java]