[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +        new Setting<>("http.cors.allow-origin", "", (value) -> value, Property.NodeScope);, +        new Setting<>("http.cors.allow-methods", "OPTIONS, HEAD, GET, POST, PUT, DELETE", (value) -> value, Property.NodeScope);, +        new Setting<>("http.cors.allow-headers", "X-Requested-With, Content-Type, Content-Length", (value) -> value, Property.NodeScope);, +        new Setting<>("http.port", "9200-9300", PortsRange::new, Property.NodeScope);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +        new Setting<>("http.cors.allow-origin", "", (value) -> value, Property.NodeScope);, +        new Setting<>("http.cors.allow-methods", "OPTIONS, HEAD, GET, POST, PUT, DELETE", (value) -> value, Property.NodeScope);, +        new Setting<>("http.cors.allow-headers", "X-Requested-With, Content-Type, Content-Length", (value) -> value, Property.NodeScope);, +        new Setting<>("http.port", "9200-9300", PortsRange::new, Property.NodeScope);, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +                OrderedDownstreamChannelEvent downstreamChannelEvent =, +                    new OrderedDownstreamChannelEvent(orderedUpstreamMessageEvent, 0, true, resp);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +        new Setting<>("http.cors.allow-origin", "", (value) -> value, Property.NodeScope);, +        new Setting<>("http.cors.allow-methods", "OPTIONS, HEAD, GET, POST, PUT, DELETE", (value) -> value, Property.NodeScope);, +        new Setting<>("http.cors.allow-headers", "X-Requested-With, Content-Type, Content-Length", (value) -> value, Property.NodeScope);, +        new Setting<>("http.port", "9200-9300", PortsRange::new, Property.NodeScope);, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +                OrderedDownstreamChannelEvent downstreamChannelEvent =, +                    new OrderedDownstreamChannelEvent(orderedUpstreamMessageEvent, 0, true, resp);, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +            receiveBufferSizePredictorFactory = new AdaptiveReceiveBufferSizePredictorFactory(, +                (int) receivePredictorMin.bytes(), (int) receivePredictorMin.bytes(), (int) receivePredictorMax.bytes());, +        logger.debug("using max_chunk_size[{}], max_header_size[{}], max_initial_line_length[{}], max_content_length[{}], " +, +            "receive_predictor[{}->{}], pipelining[{}], pipelining_max_events[{}]", maxChunkSize, maxHeaderSize, maxInitialLineLength,, +            this.maxContentLength, receivePredictorMin, receivePredictorMax, pipelining, pipeliningMaxEvents);, +        return new BoundTransportAddress(boundAddresses.toArray(new TransportAddress[0]), new InetSocketTransportAddress(publishAddress));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +        new Setting<>("http.cors.allow-origin", "", (value) -> value, Property.NodeScope);, +        new Setting<>("http.cors.allow-methods", "OPTIONS, HEAD, GET, POST, PUT, DELETE", (value) -> value, Property.NodeScope);, +        new Setting<>("http.cors.allow-headers", "X-Requested-With, Content-Type, Content-Length", (value) -> value, Property.NodeScope);, +        new Setting<>("http.port", "9200-9300", PortsRange::new, Property.NodeScope);, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +                OrderedDownstreamChannelEvent downstreamChannelEvent =, +                    new OrderedDownstreamChannelEvent(orderedUpstreamMessageEvent, 0, true, resp);, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +            receiveBufferSizePredictorFactory = new AdaptiveReceiveBufferSizePredictorFactory(, +                (int) receivePredictorMin.bytes(), (int) receivePredictorMin.bytes(), (int) receivePredictorMax.bytes());, +        logger.debug("using max_chunk_size[{}], max_header_size[{}], max_initial_line_length[{}], max_content_length[{}], " +, +            "receive_predictor[{}->{}], pipelining[{}], pipelining_max_events[{}]", maxChunkSize, maxHeaderSize, maxInitialLineLength,, +            this.maxContentLength, receivePredictorMin, receivePredictorMax, pipelining, pipeliningMaxEvents);, +        return new BoundTransportAddress(boundAddresses.toArray(new TransportAddress[0]), new InetSocketTransportAddress(publishAddress));, +++ b/core/src/main/java/org/elasticsearch/transport/PlainTransportFuture.java, +public class PlainTransportFuture<V extends TransportResponse> extends BaseFuture<V>, +    implements TransportFuture<V>, TransportResponseHandler<V> {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +        new Setting<>("http.cors.allow-origin", "", (value) -> value, Property.NodeScope);, +        new Setting<>("http.cors.allow-methods", "OPTIONS, HEAD, GET, POST, PUT, DELETE", (value) -> value, Property.NodeScope);, +        new Setting<>("http.cors.allow-headers", "X-Requested-With, Content-Type, Content-Length", (value) -> value, Property.NodeScope);, +        new Setting<>("http.port", "9200-9300", PortsRange::new, Property.NodeScope);, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +                OrderedDownstreamChannelEvent downstreamChannelEvent =, +                    new OrderedDownstreamChannelEvent(orderedUpstreamMessageEvent, 0, true, resp);, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +            receiveBufferSizePredictorFactory = new AdaptiveReceiveBufferSizePredictorFactory(, +                (int) receivePredictorMin.bytes(), (int) receivePredictorMin.bytes(), (int) receivePredictorMax.bytes());, +        logger.debug("using max_chunk_size[{}], max_header_size[{}], max_initial_line_length[{}], max_content_length[{}], " +, +            "receive_predictor[{}->{}], pipelining[{}], pipelining_max_events[{}]", maxChunkSize, maxHeaderSize, maxInitialLineLength,, +            this.maxContentLength, receivePredictorMin, receivePredictorMax, pipelining, pipeliningMaxEvents);, +        return new BoundTransportAddress(boundAddresses.toArray(new TransportAddress[0]), new InetSocketTransportAddress(publishAddress));, +++ b/core/src/main/java/org/elasticsearch/transport/PlainTransportFuture.java, +public class PlainTransportFuture<V extends TransportResponse> extends BaseFuture<V>, +    implements TransportFuture<V>, TransportResponseHandler<V> {, +++ b/core/src/main/java/org/elasticsearch/transport/RequestHandlerRegistry.java, +    public RequestHandlerRegistry(String action, Supplier<Request> requestFactory, TaskManager taskManager,, +                                  TransportRequestHandler<Request> handler, String executor, boolean forceExecution) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +        new Setting<>("http.cors.allow-origin", "", (value) -> value, Property.NodeScope);, +        new Setting<>("http.cors.allow-methods", "OPTIONS, HEAD, GET, POST, PUT, DELETE", (value) -> value, Property.NodeScope);, +        new Setting<>("http.cors.allow-headers", "X-Requested-With, Content-Type, Content-Length", (value) -> value, Property.NodeScope);, +        new Setting<>("http.port", "9200-9300", PortsRange::new, Property.NodeScope);, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +                OrderedDownstreamChannelEvent downstreamChannelEvent =, +                    new OrderedDownstreamChannelEvent(orderedUpstreamMessageEvent, 0, true, resp);, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +            receiveBufferSizePredictorFactory = new AdaptiveReceiveBufferSizePredictorFactory(, +                (int) receivePredictorMin.bytes(), (int) receivePredictorMin.bytes(), (int) receivePredictorMax.bytes());, +        logger.debug("using max_chunk_size[{}], max_header_size[{}], max_initial_line_length[{}], max_content_length[{}], " +, +            "receive_predictor[{}->{}], pipelining[{}], pipelining_max_events[{}]", maxChunkSize, maxHeaderSize, maxInitialLineLength,, +            this.maxContentLength, receivePredictorMin, receivePredictorMax, pipelining, pipeliningMaxEvents);, +        return new BoundTransportAddress(boundAddresses.toArray(new TransportAddress[0]), new InetSocketTransportAddress(publishAddress));, +++ b/core/src/main/java/org/elasticsearch/transport/PlainTransportFuture.java, +public class PlainTransportFuture<V extends TransportResponse> extends BaseFuture<V>, +    implements TransportFuture<V>, TransportResponseHandler<V> {, +++ b/core/src/main/java/org/elasticsearch/transport/RequestHandlerRegistry.java, +    public RequestHandlerRegistry(String action, Supplier<Request> requestFactory, TaskManager taskManager,, +                                  TransportRequestHandler<Request> handler, String executor, boolean forceExecution) {, +++ b/core/src/main/java/org/elasticsearch/transport/Transport.java, +     * @return <code>null</code> iff profiles are unsupported, otherwise a map with name of profile and its bound transport address, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +        new Setting<>("http.cors.allow-origin", "", (value) -> value, Property.NodeScope);]