[+++ b/src/main/java/org/elasticsearch/rest/action/RestActionModule.java, +import org.elasticsearch.rest.action.cat.RestAllocationAction;, +import org.elasticsearch.rest.action.cat.RestShardsAction;, +import org.elasticsearch.rest.action.cat.RestIndicesAction;, +import org.elasticsearch.rest.action.cat.RestMasterAction;, +import org.elasticsearch.rest.action.cat.RestNodesAction;, +import org.elasticsearch.rest.action.cat.RestRecoveryAction;, +        bind(org.elasticsearch.rest.action.count.RestCountAction.class).asEagerSingleton();, +        bind(RestAllocationAction.class).asEagerSingleton();, +        bind(RestClearScrollAction.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/rest/action/RestActionModule.java, +import org.elasticsearch.rest.action.cat.RestAllocationAction;, +import org.elasticsearch.rest.action.cat.RestShardsAction;, +import org.elasticsearch.rest.action.cat.RestIndicesAction;, +import org.elasticsearch.rest.action.cat.RestMasterAction;, +import org.elasticsearch.rest.action.cat.RestNodesAction;, +import org.elasticsearch.rest.action.cat.RestRecoveryAction;, +        bind(org.elasticsearch.rest.action.count.RestCountAction.class).asEagerSingleton();, +        bind(RestAllocationAction.class).asEagerSingleton();, +        bind(RestClearScrollAction.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/rest/action/cat/RestAllocationAction.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.rest.action.cat;, +, +import com.carrotsearch.hppc.ObjectIntOpenHashMap;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.admin.cluster.node.stats.NodeStats;, +import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest;, +import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;, +import org.elasticsearch.action.admin.cluster.state.ClusterStateRequest;, +import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.Table;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.transport.InetSocketTransportAddress;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.monitor.fs.FsStats;, +import org.elasticsearch.rest.*;, +import org.elasticsearch.rest.action.support.RestTable;, +, +import java.io.IOException;, +import java.util.Iterator;, +import java.util.Locale;, +, +import static org.elasticsearch.rest.RestRequest.Method.GET;, +, +, +public class RestAllocationAction extends BaseRestHandler{, +    @Inject, +    public RestAllocationAction(Settings settings, Client client, RestController controller) {, +        super(settings, client);, +        controller.registerHandler(GET, "/_cat/allocation", this);, +        controller.registerHandler(GET, "/_cat/allocation/{nodes}", this);, +    }, +, +    @Override, +    public void handleRequest(final RestRequest request, final RestChannel channel) {, +        final String[] nodes = Strings.splitStringByCommaToArray(request.param("nodes"));, +        final ClusterStateRequest clusterStateRequest = new ClusterStateRequest();, +        clusterStateRequest.filterMetaData(true);, +        clusterStateRequest.local(request.paramAsBoolean("local", clusterStateRequest.local()));, +        clusterStateRequest.masterNodeTimeout(request.paramAsTime("master_timeout", clusterStateRequest.masterNodeTimeout()));, +, +        client.admin().cluster().state(clusterStateRequest, new ActionListener<ClusterStateResponse>() {, +            @Override, +            public void onResponse(final ClusterStateResponse state) {, +                NodesStatsRequest statsRequest = new NodesStatsRequest(nodes);, +                statsRequest.clear().fs(true);, +, +                client.admin().cluster().nodesStats(statsRequest, new ActionListener<NodesStatsResponse>() {, +                    @Override, +                    public void onResponse(NodesStatsResponse stats) {, +                        try {, +                            Table tab = buildTable(state, stats);, +                            channel.sendResponse(RestTable.buildResponse(tab, request, channel));, +                        } catch (Throwable e) {, +                            onFailure(e);, +                        }]