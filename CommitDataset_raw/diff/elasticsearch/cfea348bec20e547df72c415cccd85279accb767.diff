[+++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeConverter.java, +import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.timeAsTime;, +                return timeAsTime(v.toString());, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeConverter.java, +import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.timeAsTime;, +                return timeAsTime(v.toString());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/CsvSpecTestCase.java, +        // Run the time tests always in UTC, +        // TODO: https://github.com/elastic/elasticsearch/issues/40779, +        if ("time".equals(groupName)) {, +            try (Connection csv = csvConnection(testCase); Connection es = esJdbc(connectionProperties())) {, +                executeAndAssert(csv, es);, +            }, +        } else {, +                executeAndAssert(csv, es);, +            }, +, +    private void executeAndAssert(Connection csv, Connection es) throws SQLException {, +        // pass the testName as table for debugging purposes (in case the underlying reader is missing), +        ResultSet expected = executeCsvQuery(csv, testName);, +        ResultSet elasticResults = executeJdbcQuery(es, testCase.query);, +        assertResults(expected, elasticResults);, +    }, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeConverter.java, +import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.timeAsTime;, +                return timeAsTime(v.toString());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/CsvSpecTestCase.java, +        // Run the time tests always in UTC, +        // TODO: https://github.com/elastic/elasticsearch/issues/40779, +        if ("time".equals(groupName)) {, +            try (Connection csv = csvConnection(testCase); Connection es = esJdbc(connectionProperties())) {, +                executeAndAssert(csv, es);, +            }, +        } else {, +                executeAndAssert(csv, es);, +            }, +, +    private void executeAndAssert(Connection csv, Connection es) throws SQLException {, +        // pass the testName as table for debugging purposes (in case the underlying reader is missing), +        ResultSet expected = executeCsvQuery(csv, testName);, +        ResultSet elasticResults = executeJdbcQuery(es, testCase.query);, +        assertResults(expected, elasticResults);, +    }, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/JdbcIntegrationTestCase.java, +import static org.elasticsearch.xpack.sql.qa.jdbc.JdbcTestUtils.JDBC_TIMEZONE;, +        connectionProperties.put(JDBC_TIMEZONE, randomKnownTimeZone());, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeConverter.java, +import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.timeAsTime;, +                return timeAsTime(v.toString());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/CsvSpecTestCase.java, +        // Run the time tests always in UTC, +        // TODO: https://github.com/elastic/elasticsearch/issues/40779, +        if ("time".equals(groupName)) {, +            try (Connection csv = csvConnection(testCase); Connection es = esJdbc(connectionProperties())) {, +                executeAndAssert(csv, es);, +            }, +        } else {, +                executeAndAssert(csv, es);, +            }, +, +    private void executeAndAssert(Connection csv, Connection es) throws SQLException {, +        // pass the testName as table for debugging purposes (in case the underlying reader is missing), +        ResultSet expected = executeCsvQuery(csv, testName);, +        ResultSet elasticResults = executeJdbcQuery(es, testCase.query);, +        assertResults(expected, elasticResults);, +    }, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/JdbcIntegrationTestCase.java, +import static org.elasticsearch.xpack.sql.qa.jdbc.JdbcTestUtils.JDBC_TIMEZONE;, +        connectionProperties.put(JDBC_TIMEZONE, randomKnownTimeZone());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/SpecBaseIntegrationTestCase.java, +import static org.elasticsearch.xpack.sql.qa.jdbc.JdbcTestUtils.JDBC_TIMEZONE;, +        connectionProperties.setProperty(JDBC_TIMEZONE, "UTC");, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/TypeConverter.java, +import static org.elasticsearch.xpack.sql.jdbc.JdbcDateUtils.timeAsTime;, +                return timeAsTime(v.toString());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/CsvSpecTestCase.java, +        // Run the time tests always in UTC, +        // TODO: https://github.com/elastic/elasticsearch/issues/40779, +        if ("time".equals(groupName)) {, +            try (Connection csv = csvConnection(testCase); Connection es = esJdbc(connectionProperties())) {, +                executeAndAssert(csv, es);, +            }, +        } else {, +                executeAndAssert(csv, es);, +            }, +, +    private void executeAndAssert(Connection csv, Connection es) throws SQLException {, +        // pass the testName as table for debugging purposes (in case the underlying reader is missing), +        ResultSet expected = executeCsvQuery(csv, testName);, +        ResultSet elasticResults = executeJdbcQuery(es, testCase.query);, +        assertResults(expected, elasticResults);, +    }, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/JdbcIntegrationTestCase.java, +import static org.elasticsearch.xpack.sql.qa.jdbc.JdbcTestUtils.JDBC_TIMEZONE;, +        connectionProperties.put(JDBC_TIMEZONE, randomKnownTimeZone());, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/SpecBaseIntegrationTestCase.java, +import static org.elasticsearch.xpack.sql.qa.jdbc.JdbcTestUtils.JDBC_TIMEZONE;, +        connectionProperties.setProperty(JDBC_TIMEZONE, "UTC");, +++ b/x-pack/plugin/sql/qa/src/main/resources/time.csv-spec, +// All tests are run with UTC timezone]