[+++ b/src/main/java/org/elasticsearch/watcher/input/search/ExecutableSearchInput.java, +import org.elasticsearch.watcher.support.WatcherUtils;, +        SearchRequest request = WatcherUtils.createSearchRequestFromPrototype(input.getSearchRequest(), ctx, scriptService, null);, +++ b/src/main/java/org/elasticsearch/watcher/input/search/ExecutableSearchInput.java, +import org.elasticsearch.watcher.support.WatcherUtils;, +        SearchRequest request = WatcherUtils.createSearchRequestFromPrototype(input.getSearchRequest(), ctx, scriptService, null);, +++ b/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.script.ExecutableScript;, +import org.elasticsearch.watcher.execution.WatchExecutionContext;, +import org.elasticsearch.watcher.support.init.proxy.ScriptServiceProxy;, +import org.elasticsearch.watcher.watch.Payload;, +    public static SearchRequest createSearchRequestFromPrototype(SearchRequest requestPrototype, WatchExecutionContext ctx, ScriptServiceProxy scriptService, Payload payload) throws IOException {, +        SearchRequest request = new SearchRequest(requestPrototype), +                .indicesOptions(requestPrototype.indicesOptions()), +                .searchType(requestPrototype.searchType()), +                .indices(requestPrototype.indices());, +, +        Map<String, Object> templateParams = Variables.createCtxModel(ctx, payload);, +        templateParams.putAll(requestPrototype.templateParams());, +, +        if (Strings.hasLength(requestPrototype.source())) {, +            String requestSource = XContentHelper.convertToJson(requestPrototype.source(), false);, +            ExecutableScript script = scriptService.executable("mustache", requestSource, ScriptService.ScriptType.INLINE, templateParams);, +            request.source((BytesReference) script.unwrap(script.run()), false);, +        } else if (Strings.hasLength(requestPrototype.templateSource())) {, +            String requestSource = XContentHelper.convertToJson(requestPrototype.templateSource(), false);, +            ExecutableScript script = scriptService.executable("mustache", requestSource, ScriptService.ScriptType.INLINE, templateParams);, +            request.source((BytesReference) script.unwrap(script.run()), false);, +        } else if (requestPrototype.templateName() != null) {, +            request.templateParams(templateParams);, +            request.templateName(requestPrototype.templateName());, +            request.templateType(requestPrototype.templateType());, +        }, +        // falling back to an empty body, +        return request;, +    }, +, +, +++ b/src/main/java/org/elasticsearch/watcher/input/search/ExecutableSearchInput.java, +import org.elasticsearch.watcher.support.WatcherUtils;, +        SearchRequest request = WatcherUtils.createSearchRequestFromPrototype(input.getSearchRequest(), ctx, scriptService, null);, +++ b/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.script.ExecutableScript;, +import org.elasticsearch.watcher.execution.WatchExecutionContext;, +import org.elasticsearch.watcher.support.init.proxy.ScriptServiceProxy;, +import org.elasticsearch.watcher.watch.Payload;, +    public static SearchRequest createSearchRequestFromPrototype(SearchRequest requestPrototype, WatchExecutionContext ctx, ScriptServiceProxy scriptService, Payload payload) throws IOException {, +        SearchRequest request = new SearchRequest(requestPrototype), +                .indicesOptions(requestPrototype.indicesOptions()), +                .searchType(requestPrototype.searchType()), +                .indices(requestPrototype.indices());, +, +        Map<String, Object> templateParams = Variables.createCtxModel(ctx, payload);, +        templateParams.putAll(requestPrototype.templateParams());, +, +        if (Strings.hasLength(requestPrototype.source())) {, +            String requestSource = XContentHelper.convertToJson(requestPrototype.source(), false);, +            ExecutableScript script = scriptService.executable("mustache", requestSource, ScriptService.ScriptType.INLINE, templateParams);, +            request.source((BytesReference) script.unwrap(script.run()), false);, +        } else if (Strings.hasLength(requestPrototype.templateSource())) {, +            String requestSource = XContentHelper.convertToJson(requestPrototype.templateSource(), false);, +            ExecutableScript script = scriptService.executable("mustache", requestSource, ScriptService.ScriptType.INLINE, templateParams);, +            request.source((BytesReference) script.unwrap(script.run()), false);, +        } else if (requestPrototype.templateName() != null) {, +            request.templateParams(templateParams);, +            request.templateName(requestPrototype.templateName());, +            request.templateType(requestPrototype.templateType());, +        }, +        // falling back to an empty body, +        return request;, +    }, +, +, +++ b/src/main/java/org/elasticsearch/watcher/transform/search/ExecutableSearchTransform.java, +import org.elasticsearch.watcher.support.WatcherUtils;, +        SearchRequest req = WatcherUtils.createSearchRequestFromPrototype(transform.request, ctx, scriptService, payload);, +        return new SearchTransform.Result(req, new Payload.XContent(resp));, +                .indices(requestPrototype.indices()), +                .searchType(requestPrototype.searchType());, +, +, +++ b/src/main/java/org/elasticsearch/watcher/input/search/ExecutableSearchInput.java, +import org.elasticsearch.watcher.support.WatcherUtils;, +        SearchRequest request = WatcherUtils.createSearchRequestFromPrototype(input.getSearchRequest(), ctx, scriptService, null);, +++ b/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.script.ExecutableScript;, +import org.elasticsearch.watcher.execution.WatchExecutionContext;, +import org.elasticsearch.watcher.support.init.proxy.ScriptServiceProxy;, +import org.elasticsearch.watcher.watch.Payload;, +    public static SearchRequest createSearchRequestFromPrototype(SearchRequest requestPrototype, WatchExecutionContext ctx, ScriptServiceProxy scriptService, Payload payload) throws IOException {, +        SearchRequest request = new SearchRequest(requestPrototype), +                .indicesOptions(requestPrototype.indicesOptions()), +                .searchType(requestPrototype.searchType()), +                .indices(requestPrototype.indices());, +, +        Map<String, Object> templateParams = Variables.createCtxModel(ctx, payload);, +        templateParams.putAll(requestPrototype.templateParams());]