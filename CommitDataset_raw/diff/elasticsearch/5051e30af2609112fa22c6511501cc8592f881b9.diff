[+++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, + *, + * Notification Scheme:, + *, + *  All registered feature(s) are notified using {@link #notifyFeatures(LicensesMetaData)} (depends on the current, + *  {@link #registeredListeners}). It is idempotent with respect to all the feature listeners., + *, + *  The notification scheduling is done by {@link #notifyFeaturesAndScheduleNotification(LicensesMetaData)} which does the following:, + *   - calls {@link #notifyFeatures(LicensesMetaData)} to notify all registered feature(s), + *   - if there is any license(s) with a future expiry date in the current cluster state:, + *      - schedules a delayed {@link LicensingClientNotificationJob} on the MIN of all the expiry dates of all the registered feature(s), + *, + *  The {@link LicensingClientNotificationJob} calls {@link #notifyFeaturesAndScheduleNotification(LicensesMetaData)} to schedule, + *  another delayed {@link LicensingClientNotificationJob} as stated above. It is a no-op in case of a global block on, + *  {@link org.elasticsearch.gateway.GatewayService#STATE_NOT_RECOVERED_BLOCK}, + *, + *  Upon successful registration of a new feature:, + *   - {@link #notifyFeaturesAndScheduleNotification(LicensesMetaData)} is called, + *, + *  Upon clusterChanged():, + *   - {@link #notifyFeaturesAndScheduleNotification(LicensesMetaData)} is called if:, + *    - new trial/signed license(s) are found in the cluster state meta data, + *    - if new feature(s) are added to the registeredListener, + *    - if the previous cluster state had a global block on {@link org.elasticsearch.gateway.GatewayService#STATE_NOT_RECOVERED_BLOCK}, + *   - no-op in case of global block on {@link org.elasticsearch.gateway.GatewayService#STATE_NOT_RECOVERED_BLOCK}, +    private class LicensingClientNotificationJob implements Runnable {, +                notifyFeaturesAndScheduleNotification(currentLicensesMetaData);]