[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        return InternalSettingsPreparer.prepareSettingsAndEnvironment(EMPTY_SETTINGS, terminal);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        return InternalSettingsPreparer.prepareSettingsAndEnvironment(EMPTY_SETTINGS, terminal);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            Settings settings = InternalSettingsPreparer.prepareSettings(this.settings);, +            settings = settingsBuilder(), +                    .put(settings), +            PluginsService pluginsService = new PluginsService(settings, null, pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        return InternalSettingsPreparer.prepareSettingsAndEnvironment(EMPTY_SETTINGS, terminal);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            Settings settings = InternalSettingsPreparer.prepareSettings(this.settings);, +            settings = settingsBuilder(), +                    .put(settings), +            PluginsService pluginsService = new PluginsService(settings, null, pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +        Tuple<Settings, Environment> tuple = InternalSettingsPreparer.prepareSettingsAndEnvironment(EMPTY_SETTINGS, terminal);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        return InternalSettingsPreparer.prepareSettingsAndEnvironment(EMPTY_SETTINGS, terminal);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            Settings settings = InternalSettingsPreparer.prepareSettings(this.settings);, +            settings = settingsBuilder(), +                    .put(settings), +            PluginsService pluginsService = new PluginsService(settings, null, pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +        Tuple<Settings, Environment> tuple = InternalSettingsPreparer.prepareSettingsAndEnvironment(EMPTY_SETTINGS, terminal);, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        Tuple<Settings, Environment> tuple = InternalSettingsPreparer.prepareSettingsAndEnvironment(pSettings, null);, +        this.pluginsService = new PluginsService(tuple.v1(), tuple.v2().pluginsFile(), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        return InternalSettingsPreparer.prepareSettingsAndEnvironment(EMPTY_SETTINGS, terminal);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            Settings settings = InternalSettingsPreparer.prepareSettings(this.settings);, +            settings = settingsBuilder(), +                    .put(settings), +            PluginsService pluginsService = new PluginsService(settings, null, pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +        Tuple<Settings, Environment> tuple = InternalSettingsPreparer.prepareSettingsAndEnvironment(EMPTY_SETTINGS, terminal);, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        Tuple<Settings, Environment> tuple = InternalSettingsPreparer.prepareSettingsAndEnvironment(pSettings, null);, +        this.pluginsService = new PluginsService(tuple.v1(), tuple.v2().pluginsFile(), classpathPlugins);, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +import java.util.Iterator;, +    static final String[] ALLOWED_SUFFIXES = {".yml", ".yaml", ".json", ".properties"};, +    static final String[] PROPERTY_PREFIXES = {"es.", "elasticsearch."};, +    static final String[] PROPERTY_DEFAULTS_PREFIXES = {"es.default.", "elasticsearch.default."};, +     * Prepares the settings by gathering all elasticsearch system properties and setting defaults., +    public static Settings prepareSettings(Settings input) {, +        Settings.Builder output = settingsBuilder();, +        initializeSettings(output, input, true);, +        finalizeSettings(output, null, null);, +        return output.build();, +     * @param input The initial settings to use, +    public static Tuple<Settings, Environment> prepareSettingsAndEnvironment(Settings input, Terminal terminal) {, +        Settings.Builder output = settingsBuilder();, +        initializeSettings(output, input, true);, +        Environment environment = new Environment(output.build());, +        // TODO: can we simplify all of this and have a single filename, which is looked up in the config dir?, +        if (useSystemProperties(input)) {, +                // TODO: we don't allow multiple config files, but having loadFromEnv true here allows just that, +                output.loadFromPath(environment.configFile().resolve(System.getProperty("es.default.config")));, +            // TODO: these should be elseifs so that multiple files cannot be loaded, +                output.loadFromPath(environment.configFile().resolve(System.getProperty("es.config")));, +                output.loadFromPath(environment.configFile().resolve(System.getProperty("elasticsearch.config")));, +                        output.loadFromPath(path);, +, +        // re-initialize settings now that the config file has been loaded, +        // TODO: only re-initialize if a config file was actually loaded, +        initializeSettings(output, input, false);, +        finalizeSettings(output, terminal, environment.configFile());, +, +        environment = new Environment(output.build());, +, +        // we put back the path.logs so we can use it in the logging configuration file, +        output.put("path.logs", cleanPath(environment.logsFile().toAbsolutePath().toString()));, +, +        return new Tuple<>(output.build(), environment);, +    private static boolean useSystemProperties(Settings input) {, +        return !input.getAsBoolean(IGNORE_SYSTEM_PROPERTIES_SETTING, false);, +    /**, +     * Initializes the builder with the given input settings, and loads system properties settings if allowed., +     * If loadDefaults is true, system property default settings are loaded., +     */, +    private static void initializeSettings(Settings.Builder output, Settings input, boolean loadDefaults) {, +        output.put(input);, +        if (useSystemProperties(input)) {, +            if (loadDefaults) {, +                for (String prefix : PROPERTY_DEFAULTS_PREFIXES) {, +                    output.putProperties(prefix, System.getProperties());, +                }, +            }, +            for (String prefix : PROPERTY_PREFIXES) {, +                output.putProperties(prefix, System.getProperties(), PROPERTY_DEFAULTS_PREFIXES);, +            }, +        }, +        output.replacePropertyPlaceholders();, +    }, +, +    /**]