[+++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +            if (super.exists(settings)) {, +                throw new IllegalArgumentException("Setting [" + getKey() + "] is a secure setting" +, +                    " and must be stored inside the Elasticsearch keystore, but was found inside elasticsearch.yml");, +            }, +                                                     Property... properties) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +            if (super.exists(settings)) {, +                throw new IllegalArgumentException("Setting [" + getKey() + "] is a secure setting" +, +                    " and must be stored inside the Elasticsearch keystore, but was found inside elasticsearch.yml");, +            }, +                                                     Property... properties) {, +++ b/core/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java, +            Collections.singleton(SecureSetting.secureString("some.secure.setting", null)));, +            Collections.singleton(SecureSetting.secureString("some.secure.setting", null)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +            if (super.exists(settings)) {, +                throw new IllegalArgumentException("Setting [" + getKey() + "] is a secure setting" +, +                    " and must be stored inside the Elasticsearch keystore, but was found inside elasticsearch.yml");, +            }, +                                                     Property... properties) {, +++ b/core/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java, +            Collections.singleton(SecureSetting.secureString("some.secure.setting", null)));, +            Collections.singleton(SecureSetting.secureString("some.secure.setting", null)));, +++ b/core/src/test/java/org/elasticsearch/common/settings/SettingsTests.java, +, +    public void testSecureSettingConflict() {, +        Setting<SecureString> setting = SecureSetting.secureString("something.secure", null);, +        Settings settings = Settings.builder().put("something.secure", "notreallysecure").build();, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> setting.get(settings));, +        assertTrue(e.getMessage().contains("must be stored inside the Elasticsearch keystore"));, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +            if (super.exists(settings)) {, +                throw new IllegalArgumentException("Setting [" + getKey() + "] is a secure setting" +, +                    " and must be stored inside the Elasticsearch keystore, but was found inside elasticsearch.yml");, +            }, +                                                     Property... properties) {, +++ b/core/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java, +            Collections.singleton(SecureSetting.secureString("some.secure.setting", null)));, +            Collections.singleton(SecureSetting.secureString("some.secure.setting", null)));, +++ b/core/src/test/java/org/elasticsearch/common/settings/SettingsTests.java, +, +    public void testSecureSettingConflict() {, +        Setting<SecureString> setting = SecureSetting.secureString("something.secure", null);, +        Settings settings = Settings.builder().put("something.secure", "notreallysecure").build();, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> setting.get(settings));, +        assertTrue(e.getMessage().contains("must be stored inside the Elasticsearch keystore"));, +    }, +++ b/core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java, +        Setting<SecureString> fakeSetting = SecureSetting.secureString("foo", null);, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +            if (super.exists(settings)) {, +                throw new IllegalArgumentException("Setting [" + getKey() + "] is a secure setting" +, +                    " and must be stored inside the Elasticsearch keystore, but was found inside elasticsearch.yml");, +            }, +                                                     Property... properties) {, +++ b/core/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java, +            Collections.singleton(SecureSetting.secureString("some.secure.setting", null)));, +            Collections.singleton(SecureSetting.secureString("some.secure.setting", null)));, +++ b/core/src/test/java/org/elasticsearch/common/settings/SettingsTests.java, +, +    public void testSecureSettingConflict() {, +        Setting<SecureString> setting = SecureSetting.secureString("something.secure", null);, +        Settings settings = Settings.builder().put("something.secure", "notreallysecure").build();, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> setting.get(settings));, +        assertTrue(e.getMessage().contains("must be stored inside the Elasticsearch keystore"));, +    }, +++ b/core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java, +        Setting<SecureString> fakeSetting = SecureSetting.secureString("foo", null);, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2Service.java, +        Setting<SecureString> ACCESS_KEY_SETTING = SecureSetting.secureString("discovery.ec2.access_key", CLOUD_EC2.KEY_SETTING);, +        Setting<SecureString> SECRET_KEY_SETTING = SecureSetting.secureString("discovery.ec2.secret_key", CLOUD_EC2.SECRET_SETTING);, +            CLOUD_EC2.PROXY_USERNAME_SETTING);, +            CLOUD_EC2.PROXY_PASSWORD_SETTING);, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +            if (super.exists(settings)) {, +                throw new IllegalArgumentException("Setting [" + getKey() + "] is a secure setting" +, +                    " and must be stored inside the Elasticsearch keystore, but was found inside elasticsearch.yml");, +            }, +                                                     Property... properties) {, +++ b/core/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java, +            Collections.singleton(SecureSetting.secureString("some.secure.setting", null)));, +            Collections.singleton(SecureSetting.secureString("some.secure.setting", null)));, +++ b/core/src/test/java/org/elasticsearch/common/settings/SettingsTests.java, +, +    public void testSecureSettingConflict() {, +        Setting<SecureString> setting = SecureSetting.secureString("something.secure", null);, +        Settings settings = Settings.builder().put("something.secure", "notreallysecure").build();, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> setting.get(settings));, +        assertTrue(e.getMessage().contains("must be stored inside the Elasticsearch keystore"));, +    }, +++ b/core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java, +        Setting<SecureString> fakeSetting = SecureSetting.secureString("foo", null);, +++ b/plugins/discovery-ec2/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2Service.java, +        Setting<SecureString> ACCESS_KEY_SETTING = SecureSetting.secureString("discovery.ec2.access_key", CLOUD_EC2.KEY_SETTING);, +        Setting<SecureString> SECRET_KEY_SETTING = SecureSetting.secureString("discovery.ec2.secret_key", CLOUD_EC2.SECRET_SETTING);, +            CLOUD_EC2.PROXY_USERNAME_SETTING);, +            CLOUD_EC2.PROXY_PASSWORD_SETTING);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java]