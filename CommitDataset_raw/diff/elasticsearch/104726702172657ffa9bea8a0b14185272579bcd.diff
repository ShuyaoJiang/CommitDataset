[+++ b/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +public abstract class Rounding implements Streamable {, +    public abstract byte id();, +     * Given a value, compute a key that uniquely identifies the rounded value although it is not necessarily equal to the rounding value itself., +     */, +    public abstract long roundKey(long value);, +, +    /**, +     * Compute the rounded value given the key that identifies it., +     */, +    public abstract long valueForKey(long key);, +, +    /**, +     * Rounds the given value, equivalent to calling <code>roundValue(roundKey(value))</code>., +    public final long round(long value) {, +        return valueForKey(roundKey(value));, +    }, +    public abstract long nextRoundingValue(long value);, +    public static class Interval extends Rounding {, +        public static long roundKey(long value, long interval) {, +            if (value < 0) {, +                return (value - interval + 1) / interval;, +            } else {, +                return value / interval;, +        }, +, +        public static long roundValue(long key, long interval) {, +            return key * interval;, +        public long roundKey(long value) {, +            return roundKey(value, interval);, +        }, +, +        @Override, +        public long valueForKey(long key) {, +            return key * interval;, +++ b/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +public abstract class Rounding implements Streamable {, +    public abstract byte id();, +     * Given a value, compute a key that uniquely identifies the rounded value although it is not necessarily equal to the rounding value itself., +     */, +    public abstract long roundKey(long value);, +, +    /**, +     * Compute the rounded value given the key that identifies it., +     */, +    public abstract long valueForKey(long key);, +, +    /**, +     * Rounds the given value, equivalent to calling <code>roundValue(roundKey(value))</code>., +    public final long round(long value) {, +        return valueForKey(roundKey(value));, +    }, +    public abstract long nextRoundingValue(long value);, +    public static class Interval extends Rounding {, +        public static long roundKey(long value, long interval) {, +            if (value < 0) {, +                return (value - interval + 1) / interval;, +            } else {, +                return value / interval;, +        }, +, +        public static long roundValue(long key, long interval) {, +            return key * interval;, +        public long roundKey(long value) {, +            return roundKey(value, interval);, +        }, +, +        @Override, +        public long valueForKey(long key) {, +            return key * interval;, +++ b/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, +public abstract class TimeZoneRounding extends Rounding {, +        public long roundKey(long utcMillis) {, +            return unit.field().roundFloor(time);, +        }, +, +        @Override, +        public long valueForKey(long time) {, +        public long roundKey(long utcMillis) {, +        public long valueForKey(long key) {, +            return key;, +        }, +, +        @Override, +        public long roundKey(long utcMillis) {, +            return unit.field().roundFloor(time);, +        }, +, +        @Override, +        public long valueForKey(long time) {, +        public long roundKey(long utcMillis) {, +            return Rounding.Interval.roundKey(utcMillis, interval);, +        }, +, +        @Override, +        public long valueForKey(long key) {, +            return Rounding.Interval.roundValue(key, interval);, +        public long roundKey(long utcMillis) {, +            return Rounding.Interval.roundKey(time, interval);, +        }]