[+++ b/src/test/java/org/elasticsearch/cluster/BlockClusterStatsTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(, +                ImmutableSettings.settingsBuilder().put("cluster.blocks.read_only", false).build()).get());, +++ b/src/test/java/org/elasticsearch/cluster/BlockClusterStatsTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(, +                ImmutableSettings.settingsBuilder().put("cluster.blocks.read_only", false).build()).get());, +++ b/src/test/java/org/elasticsearch/cluster/NoMasterNodeTests.java, +, +        cluster().startNode(settings);, +        client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("2").execute().actionGet();, +++ b/src/test/java/org/elasticsearch/cluster/BlockClusterStatsTests.java, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +        assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(, +                ImmutableSettings.settingsBuilder().put("cluster.blocks.read_only", false).build()).get());, +++ b/src/test/java/org/elasticsearch/cluster/NoMasterNodeTests.java, +, +        cluster().startNode(settings);, +        client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("2").execute().actionGet();, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +            final Scope currentClusterScope = getCurrentClusterScope();, +            try {, +                if (currentClusterScope != Scope.TEST) {, +            } finally {, +                if (currentClusterScope == Scope.TEST) {, +                    clearClusters(); // it is ok to leave persistent / transient cluster state behind if scope is TEST, +                }, +            }]