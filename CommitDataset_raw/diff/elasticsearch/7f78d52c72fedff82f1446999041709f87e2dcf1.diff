[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import java.util.Locale;, +                replicationPhase = new ReplicationPhase(primaryResponse.v2(), primaryResponse.v1(), shardId, channel, indexShardReference);, +                                TransportChannel channel, Releasable indexShardReference) {, +                                String message = String.format(Locale.ROOT, "failed to perform %s on replica on node %s", transportReplicaAction, node);, +                                logger.warn("{} {}", exp, shardId, message);, +                                shardStateAction.shardFailed(, +                                    shard,, +                                    indexUUID,, +                                    message,, +                                    exp,, +                                    new ShardStateAction.Listener() {, +                                        @Override, +                                        public void onSuccess() {, +                                            onReplicaFailure(nodeId, exp);, +                                        }, +, +                                        @Override, +                                        public void onShardFailedFailure(Exception e) {, +                                            // TODO: handle catastrophic non-channel failures, +                                            onReplicaFailure(nodeId, exp);, +                                        }, +                                    }, +                                );, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import java.util.Locale;, +                replicationPhase = new ReplicationPhase(primaryResponse.v2(), primaryResponse.v1(), shardId, channel, indexShardReference);, +                                TransportChannel channel, Releasable indexShardReference) {, +                                String message = String.format(Locale.ROOT, "failed to perform %s on replica on node %s", transportReplicaAction, node);, +                                logger.warn("{} {}", exp, shardId, message);, +                                shardStateAction.shardFailed(, +                                    shard,, +                                    indexUUID,, +                                    message,, +                                    exp,, +                                    new ShardStateAction.Listener() {, +                                        @Override, +                                        public void onSuccess() {, +                                            onReplicaFailure(nodeId, exp);, +                                        }, +, +                                        @Override, +                                        public void onShardFailedFailure(Exception e) {, +                                            // TODO: handle catastrophic non-channel failures, +                                            onReplicaFailure(nodeId, exp);, +                                        }, +                                    }, +                                );, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +                    logger.trace("node: [{}], most available: total disk: {}, available disk: {} / least available: total disk: {}, available disk: {}", nodeId, mostAvailablePath.getTotal(), leastAvailablePath.getAvailable(), leastAvailablePath.getTotal(), leastAvailablePath.getAvailable());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import java.util.Locale;, +                replicationPhase = new ReplicationPhase(primaryResponse.v2(), primaryResponse.v1(), shardId, channel, indexShardReference);, +                                TransportChannel channel, Releasable indexShardReference) {, +                                String message = String.format(Locale.ROOT, "failed to perform %s on replica on node %s", transportReplicaAction, node);, +                                logger.warn("{} {}", exp, shardId, message);, +                                shardStateAction.shardFailed(, +                                    shard,, +                                    indexUUID,, +                                    message,, +                                    exp,, +                                    new ShardStateAction.Listener() {, +                                        @Override, +                                        public void onSuccess() {, +                                            onReplicaFailure(nodeId, exp);, +                                        }, +, +                                        @Override, +                                        public void onShardFailedFailure(Exception e) {, +                                            // TODO: handle catastrophic non-channel failures, +                                            onReplicaFailure(nodeId, exp);, +                                        }, +                                    }, +                                );, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +                    logger.trace("node: [{}], most available: total disk: {}, available disk: {} / least available: total disk: {}, available disk: {}", nodeId, mostAvailablePath.getTotal(), leastAvailablePath.getAvailable(), leastAvailablePath.getTotal(), leastAvailablePath.getAvailable());, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.cluster.ClusterStateObserver;, +import org.elasticsearch.cluster.MasterNodeChangePredicate;, +import org.elasticsearch.discovery.Discovery;, +import org.elasticsearch.node.NodeClosedException;, +import org.elasticsearch.transport.NodeDisconnectedException;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +, +    private final ClusterService clusterService;, +        this.clusterService = clusterService;, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        sendShardFailed(observer, shardRoutingEntry, listener);, +, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        logger.trace("{} re-sending failed shard [{}], index UUID [{}], reason [{}]", shardRouting.shardId(), failure, shardRouting, indexUUID, message);, +        shardFailed(shardRouting, indexUUID, message, failure, listener);, +    }, +, +    private void sendShardFailed(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +        DiscoveryNode masterNode = observer.observedState().nodes().masterNode();, +        if (masterNode == null) {]