[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.datafeed.DatafeedJobBuilder;, +        DatafeedJobBuilder datafeedJobBuilder = new DatafeedJobBuilder(internalClient, jobProvider, auditor, System::currentTimeMillis);, +        DatafeedManager datafeedManager = new DatafeedManager(threadPool, internalClient, clusterService, datafeedJobBuilder,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.datafeed.DatafeedJobBuilder;, +        DatafeedJobBuilder datafeedJobBuilder = new DatafeedJobBuilder(internalClient, jobProvider, auditor, System::currentTimeMillis);, +        DatafeedManager datafeedManager = new DatafeedManager(threadPool, internalClient, clusterService, datafeedJobBuilder,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PreviewDatafeedAction.java, +            DataExtractorFactory.create(client, datafeedWithAutoChunking.build(), job, new ActionListener<DataExtractorFactory>() {, +                @Override, +                public void onResponse(DataExtractorFactory dataExtractorFactory) {, +                @Override, +                public void onFailure(Exception e) {, +                    listener.onFailure(e);, +                }, +            });, +, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.datafeed.DatafeedJobBuilder;, +        DatafeedJobBuilder datafeedJobBuilder = new DatafeedJobBuilder(internalClient, jobProvider, auditor, System::currentTimeMillis);, +        DatafeedManager datafeedManager = new DatafeedManager(threadPool, internalClient, clusterService, datafeedJobBuilder,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PreviewDatafeedAction.java, +            DataExtractorFactory.create(client, datafeedWithAutoChunking.build(), job, new ActionListener<DataExtractorFactory>() {, +                @Override, +                public void onResponse(DataExtractorFactory dataExtractorFactory) {, +                @Override, +                public void onFailure(Exception e) {, +                    listener.onFailure(e);, +                }, +            });, +, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutDatafeedAction.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.datafeed.DatafeedJobBuilder;, +        DatafeedJobBuilder datafeedJobBuilder = new DatafeedJobBuilder(internalClient, jobProvider, auditor, System::currentTimeMillis);, +        DatafeedManager datafeedManager = new DatafeedManager(threadPool, internalClient, clusterService, datafeedJobBuilder,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PreviewDatafeedAction.java, +            DataExtractorFactory.create(client, datafeedWithAutoChunking.build(), job, new ActionListener<DataExtractorFactory>() {, +                @Override, +                public void onResponse(DataExtractorFactory dataExtractorFactory) {, +                @Override, +                public void onFailure(Exception e) {, +                    listener.onFailure(e);, +                }, +            });, +, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutDatafeedAction.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.xpack.ml.datafeed.extractor.DataExtractorFactory;, +import org.elasticsearch.xpack.security.InternalClient;, +        private final InternalClient client;, +                               ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +                               InternalClient client) {, +            this.client = client;, +, +                // Verify data extractor factory can be created, then start persistent task, +                MlMetadata mlMetadata = state.metaData().custom(MlMetadata.TYPE);, +                PersistentTasksCustomMetaData tasks = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);, +                StartDatafeedAction.validate(params.getDatafeedId(), mlMetadata, tasks);, +                DatafeedConfig datafeed = mlMetadata.getDatafeed(params.getDatafeedId());, +                Job job = mlMetadata.getJobs().get(datafeed.getJobId());, +                DataExtractorFactory.create(client, datafeed, job, ActionListener.wrap(, +                        dataExtractorFactory -> persistentTasksService.startPersistentTask(MlMetadata.datafeedTaskId(params.datafeedId),, +                                TASK_NAME, params, finalListener), +                        , listener::onFailure));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.datafeed.DatafeedJobBuilder;, +        DatafeedJobBuilder datafeedJobBuilder = new DatafeedJobBuilder(internalClient, jobProvider, auditor, System::currentTimeMillis);, +        DatafeedManager datafeedManager = new DatafeedManager(threadPool, internalClient, clusterService, datafeedJobBuilder,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PreviewDatafeedAction.java, +            DataExtractorFactory.create(client, datafeedWithAutoChunking.build(), job, new ActionListener<DataExtractorFactory>() {, +                @Override, +                public void onResponse(DataExtractorFactory dataExtractorFactory) {, +                @Override, +                public void onFailure(Exception e) {, +                    listener.onFailure(e);, +                }, +            });, +, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutDatafeedAction.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.xpack.ml.datafeed.extractor.DataExtractorFactory;, +import org.elasticsearch.xpack.security.InternalClient;, +        private final InternalClient client;, +                               ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +                               InternalClient client) {, +            this.client = client;, +, +                // Verify data extractor factory can be created, then start persistent task, +                MlMetadata mlMetadata = state.metaData().custom(MlMetadata.TYPE);, +                PersistentTasksCustomMetaData tasks = state.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);]