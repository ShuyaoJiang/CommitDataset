[+++ b/server/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import org.elasticsearch.cluster.routing.RecoverySource.EmptyStoreRecoverySource;, +import org.elasticsearch.cluster.routing.RecoverySource.ExistingStoreRecoverySource;, +                            primary ? EmptyStoreRecoverySource.INSTANCE : PeerRecoverySource.INSTANCE, unassignedInfo));, +                    primaryRecoverySource = ExistingStoreRecoverySource.INSTANCE;, +                    primaryRecoverySource = EmptyStoreRecoverySource.INSTANCE;, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import org.elasticsearch.cluster.routing.RecoverySource.EmptyStoreRecoverySource;, +import org.elasticsearch.cluster.routing.RecoverySource.ExistingStoreRecoverySource;, +                            primary ? EmptyStoreRecoverySource.INSTANCE : PeerRecoverySource.INSTANCE, unassignedInfo));, +                    primaryRecoverySource = ExistingStoreRecoverySource.INSTANCE;, +                    primaryRecoverySource = EmptyStoreRecoverySource.INSTANCE;, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java, + * - {@link EmptyStoreRecoverySource} recovery from an empty store, + * - {@link ExistingStoreRecoverySource} recovery from an existing store, +            case EMPTY_STORE: return EmptyStoreRecoverySource.INSTANCE;, +            case EXISTING_STORE: return new ExistingStoreRecoverySource(in);, +    public boolean shouldBootstrapNewHistoryUUID() {, +        return false;, +    }, +, +     * Recovery from a fresh copy, +    public static final class EmptyStoreRecoverySource extends RecoverySource {, +        public static final EmptyStoreRecoverySource INSTANCE = new EmptyStoreRecoverySource();, +, +, +        @Override, +        public String toString() {, +            return "new shard recovery";, +        }, +    }, +, +    /**, +     * Recovery from an existing on-disk store, +     */, +    public static final class ExistingStoreRecoverySource extends RecoverySource {, +        public static final ExistingStoreRecoverySource INSTANCE = new ExistingStoreRecoverySource(false);, +        public static final ExistingStoreRecoverySource FORCE_STALE_PRIMARY_INSTANCE = new ExistingStoreRecoverySource(true);, +, +        private final boolean bootstrapNewHistoryUUID;, +, +        private ExistingStoreRecoverySource(boolean bootstrapNewHistoryUUID) {, +            this.bootstrapNewHistoryUUID = bootstrapNewHistoryUUID;, +        }, +, +        private ExistingStoreRecoverySource(StreamInput in) throws IOException {, +            if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +                bootstrapNewHistoryUUID = in.readBoolean();, +            } else {, +                bootstrapNewHistoryUUID = false;, +            }, +        }, +, +        @Override, +        public void addAdditionalFields(XContentBuilder builder, Params params) throws IOException {, +            builder.field("bootstrap_new_history_uuid", bootstrapNewHistoryUUID);, +        }, +, +        @Override, +        protected void writeAdditionalFields(StreamOutput out) throws IOException {, +            if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +                out.writeBoolean(bootstrapNewHistoryUUID);, +            }, +        }, +, +        @Override, +        public boolean shouldBootstrapNewHistoryUUID() {, +            return bootstrapNewHistoryUUID;, +        }, +, +            return "existing store recovery; bootstrap_history_uuid=" + bootstrapNewHistoryUUID;, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import org.elasticsearch.cluster.routing.RecoverySource.EmptyStoreRecoverySource;, +import org.elasticsearch.cluster.routing.RecoverySource.ExistingStoreRecoverySource;, +                            primary ? EmptyStoreRecoverySource.INSTANCE : PeerRecoverySource.INSTANCE, unassignedInfo));, +                    primaryRecoverySource = ExistingStoreRecoverySource.INSTANCE;, +                    primaryRecoverySource = EmptyStoreRecoverySource.INSTANCE;, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RecoverySource.java, + * - {@link EmptyStoreRecoverySource} recovery from an empty store, + * - {@link ExistingStoreRecoverySource} recovery from an existing store, +            case EMPTY_STORE: return EmptyStoreRecoverySource.INSTANCE;, +            case EXISTING_STORE: return new ExistingStoreRecoverySource(in);, +    public boolean shouldBootstrapNewHistoryUUID() {, +        return false;, +    }, +, +     * Recovery from a fresh copy, +    public static final class EmptyStoreRecoverySource extends RecoverySource {, +        public static final EmptyStoreRecoverySource INSTANCE = new EmptyStoreRecoverySource();, +, +, +        @Override, +        public String toString() {, +            return "new shard recovery";, +        }, +    }, +, +    /**, +     * Recovery from an existing on-disk store, +     */]