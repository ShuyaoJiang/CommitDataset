[+++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +++ b/core/src/main/java/org/elasticsearch/index/SearchSlowLog.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import java.util.Collections;, +    private static final ToXContent.Params FORMAT_PARAMS = new ToXContent.MapParams(Collections.singletonMap("pretty", "false"));, +, +            queryLogger.warn("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            queryLogger.info("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            queryLogger.debug("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            queryLogger.trace("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            fetchLogger.warn("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            fetchLogger.info("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            fetchLogger.debug("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            fetchLogger.trace("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +        public SlowLogSearchContextPrinter(SearchContext context, long tookInNanos) {, +                sb.append("source[").append(context.request().source().toString(FORMAT_PARAMS)).append("], ");, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +++ b/core/src/main/java/org/elasticsearch/index/SearchSlowLog.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import java.util.Collections;, +    private static final ToXContent.Params FORMAT_PARAMS = new ToXContent.MapParams(Collections.singletonMap("pretty", "false"));, +, +            queryLogger.warn("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            queryLogger.info("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            queryLogger.debug("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            queryLogger.trace("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            fetchLogger.warn("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            fetchLogger.info("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            fetchLogger.debug("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            fetchLogger.trace("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +        public SlowLogSearchContextPrinter(SearchContext context, long tookInNanos) {, +                sb.append("source[").append(context.request().source().toString(FORMAT_PARAMS)).append("], ");, +++ b/core/src/test/java/org/elasticsearch/index/SearchSlowLogTests.java, +import org.elasticsearch.index.query.QueryBuilders;, +import static org.hamcrest.Matchers.not;, +import static org.hamcrest.Matchers.containsString;, +            final ShardSearchRequest request = new ShardSearchRequest() {, +                private SearchSourceBuilder searchSourceBuilder;, +                    return searchSourceBuilder;, +                    searchSourceBuilder = source;, +            @Override, +            public ShardSearchRequest request() {, +                return request;, +        SearchSourceBuilder source = SearchSourceBuilder.searchSource().query(QueryBuilders.matchAllQuery());, +        searchContext.request().source(source);, +        SearchSlowLog.SlowLogSearchContextPrinter p = new SearchSlowLog.SlowLogSearchContextPrinter(searchContext, 10);, +        // Makes sure that output doesn't contain any new lines, +        assertThat(p.toString(), not(containsString("\n")));, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +++ b/core/src/main/java/org/elasticsearch/index/SearchSlowLog.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import java.util.Collections;, +    private static final ToXContent.Params FORMAT_PARAMS = new ToXContent.MapParams(Collections.singletonMap("pretty", "false"));, +, +            queryLogger.warn("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            queryLogger.info("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            queryLogger.debug("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            queryLogger.trace("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            fetchLogger.warn("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            fetchLogger.info("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            fetchLogger.debug("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +            fetchLogger.trace("{}", new SlowLogSearchContextPrinter(context, tookInNanos));, +        public SlowLogSearchContextPrinter(SearchContext context, long tookInNanos) {, +                sb.append("source[").append(context.request().source().toString(FORMAT_PARAMS)).append("], ");, +++ b/core/src/test/java/org/elasticsearch/index/SearchSlowLogTests.java, +import org.elasticsearch.index.query.QueryBuilders;, +import static org.hamcrest.Matchers.not;, +import static org.hamcrest.Matchers.containsString;, +            final ShardSearchRequest request = new ShardSearchRequest() {, +                private SearchSourceBuilder searchSourceBuilder;, +                    return searchSourceBuilder;, +                    searchSourceBuilder = source;, +            @Override, +            public ShardSearchRequest request() {, +                return request;, +        SearchSourceBuilder source = SearchSourceBuilder.searchSource().query(QueryBuilders.matchAllQuery());, +        searchContext.request().source(source);, +        SearchSlowLog.SlowLogSearchContextPrinter p = new SearchSlowLog.SlowLogSearchContextPrinter(searchContext, 10);, +        // Makes sure that output doesn't contain any new lines, +        assertThat(p.toString(), not(containsString("\n")));, +++ b/docs/reference/index-modules/slowlog.asciidoc, +`true` will log the entire source regardless of size. The original `_source` is, +reformatted by default to make sure that it fits on a single log line. If preserving, +the original document format is important, you can turn off reformatting by setting, +`index.indexing.slowlog.reformat` to `false`, which will cause the source to be, +logged "as is" and can potentially span multiple log lines.]