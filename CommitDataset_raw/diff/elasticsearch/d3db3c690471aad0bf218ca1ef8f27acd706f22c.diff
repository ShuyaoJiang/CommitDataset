[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String SHARDS_ALLOCATOR_TYPE_KEY = "cluster.routing.allocation.type";, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, ClusterModule.BALANCED_ALLOCATOR);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String SHARDS_ALLOCATOR_TYPE_KEY = "cluster.routing.allocation.type";, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, ClusterModule.BALANCED_ALLOCATOR);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +        URLRepository.SUPPORTED_PROTOCOLS_SETTING)));, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String SHARDS_ALLOCATOR_TYPE_KEY = "cluster.routing.allocation.type";, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, ClusterModule.BALANCED_ALLOCATOR);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +        URLRepository.SUPPORTED_PROTOCOLS_SETTING)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +        Map<String, Settings> groups = settings.getGroups("tribe.", true);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String SHARDS_ALLOCATOR_TYPE_KEY = "cluster.routing.allocation.type";, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, ClusterModule.BALANCED_ALLOCATOR);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +        URLRepository.SUPPORTED_PROTOCOLS_SETTING)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +        Map<String, Settings> groups = settings.getGroups("tribe.", true);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +    public static final String PROCESSORS = "processors";, +, +    /** Useful for testing */, +    public static final String DEFAULT_SYSPROP = "es.processors.override";, +        int defaultValue = Math.min(32, Runtime.getRuntime().availableProcessors());, +        try {, +            defaultValue = Integer.parseInt(System.getProperty(DEFAULT_SYSPROP));, +        } catch (Throwable ignored) {}, +        return settings.getAsInt(PROCESSORS, defaultValue);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String SHARDS_ALLOCATOR_TYPE_KEY = "cluster.routing.allocation.type";, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, ClusterModule.BALANCED_ALLOCATOR);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +        URLRepository.SUPPORTED_PROTOCOLS_SETTING)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +        Map<String, Settings> groups = settings.getGroups("tribe.", true);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +    public static final String PROCESSORS = "processors";, +, +    /** Useful for testing */, +    public static final String DEFAULT_SYSPROP = "es.processors.override";, +        int defaultValue = Math.min(32, Runtime.getRuntime().availableProcessors());, +        try {, +            defaultValue = Integer.parseInt(System.getProperty(DEFAULT_SYSPROP));, +        } catch (Throwable ignored) {}, +        return settings.getAsInt(PROCESSORS, defaultValue);, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIT.java, +        internalCluster().startNodesAsync(Settings.builder().put(EsExecutors.PROCESSORS, 7).build()).get();, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String SHARDS_ALLOCATOR_TYPE_KEY = "cluster.routing.allocation.type";, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, ClusterModule.BALANCED_ALLOCATOR);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +        URLRepository.SUPPORTED_PROTOCOLS_SETTING)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +        Map<String, Settings> groups = settings.getGroups("tribe.", true);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +    public static final String PROCESSORS = "processors";, +, +    /** Useful for testing */, +    public static final String DEFAULT_SYSPROP = "es.processors.override";, +        int defaultValue = Math.min(32, Runtime.getRuntime().availableProcessors());, +        try {, +            defaultValue = Integer.parseInt(System.getProperty(DEFAULT_SYSPROP));, +        } catch (Throwable ignored) {}, +        return settings.getAsInt(PROCESSORS, defaultValue);, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIT.java, +        internalCluster().startNodesAsync(Settings.builder().put(EsExecutors.PROCESSORS, 7).build()).get();, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterModuleTests.java, +        Settings settings = Settings.builder().put(ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, "custom").build();, +        Settings settings = Settings.builder().put(ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, "dne").build();, +            .put(ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR).build();, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    public static final String SHARDS_ALLOCATOR_TYPE_KEY = "cluster.routing.allocation.type";, +        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, ClusterModule.BALANCED_ALLOCATOR);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +        URLRepository.SUPPORTED_PROTOCOLS_SETTING)));, +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +        Map<String, Settings> groups = settings.getGroups("tribe.", true);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsExecutors.java, +    public static final String PROCESSORS = "processors";, +, +    /** Useful for testing */, +    public static final String DEFAULT_SYSPROP = "es.processors.override";, +        int defaultValue = Math.min(32, Runtime.getRuntime().availableProcessors());, +        try {, +            defaultValue = Integer.parseInt(System.getProperty(DEFAULT_SYSPROP));, +        } catch (Throwable ignored) {}, +        return settings.getAsInt(PROCESSORS, defaultValue);, +++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIT.java, +        internalCluster().startNodesAsync(Settings.builder().put(EsExecutors.PROCESSORS, 7).build()).get();, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterModuleTests.java, +        Settings settings = Settings.builder().put(ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, "custom").build();, +        Settings settings = Settings.builder().put(ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, "dne").build();, +            .put(ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, ClusterModule.EVEN_SHARD_COUNT_ALLOCATOR).build();, +++ b/core/src/test/java/org/elasticsearch/cluster/allocation/ShardsAllocatorModuleIT.java, +        Settings build = settingsBuilder().put(ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, "even_shard") // legacy just to make sure we don't barf, +        build = settingsBuilder().put(ClusterModule.SHARDS_ALLOCATOR_TYPE_KEY, ClusterModule.BALANCED_ALLOCATOR).build();]