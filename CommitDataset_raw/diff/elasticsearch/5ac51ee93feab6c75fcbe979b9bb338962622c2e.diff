[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import org.elasticsearch.util.SizeUnit;, +import org.jboss.netty.handler.codec.http.HttpChunkAggregator;, +    private final SizeValue maxContentLength;, +, +        SizeValue maxContentLength = componentSettings.getAsSize("maxContentLength", new SizeValue(100, SizeUnit.MB));, +, +        // validate max content length, +        if (maxContentLength.bytes() > Integer.MAX_VALUE) {, +            logger.warn("maxContentLength[" + maxContentLength + "] set to high value, resetting it to [100mb]");, +            maxContentLength = new SizeValue(100, SizeUnit.MB);, +        }, +        this.maxContentLength = maxContentLength;, +                pipeline.addLast("aggregator", new HttpChunkAggregator((int) maxContentLength.bytes()));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +import org.elasticsearch.util.SizeUnit;, +import org.jboss.netty.handler.codec.http.HttpChunkAggregator;, +    private final SizeValue maxContentLength;, +, +        SizeValue maxContentLength = componentSettings.getAsSize("maxContentLength", new SizeValue(100, SizeUnit.MB));, +, +        // validate max content length, +        if (maxContentLength.bytes() > Integer.MAX_VALUE) {, +            logger.warn("maxContentLength[" + maxContentLength + "] set to high value, resetting it to [100mb]");, +            maxContentLength = new SizeValue(100, SizeUnit.MB);, +        }, +        this.maxContentLength = maxContentLength;, +                pipeline.addLast("aggregator", new HttpChunkAggregator((int) maxContentLength.bytes()));, +++ /dev/null]