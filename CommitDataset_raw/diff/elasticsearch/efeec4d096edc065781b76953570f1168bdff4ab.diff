[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha2, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/version.properties, +elasticsearch     = 5.0.0-alpha2, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.apache.lucene.search.suggest.analyzing;, +, +import com.carrotsearch.hppc.ObjectIntHashMap;, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.analysis.TokenStreamToAutomaton;, +import org.apache.lucene.search.suggest.InputIterator;, +import org.apache.lucene.search.suggest.Lookup;, +import org.apache.lucene.store.ByteArrayDataInput;, +import org.apache.lucene.store.ByteArrayDataOutput;, +import org.apache.lucene.store.DataInput;, +import org.apache.lucene.store.DataOutput;, +import org.apache.lucene.store.Directory;, +import org.apache.lucene.store.FSDirectory;, +import org.apache.lucene.store.IOContext;, +import org.apache.lucene.store.IndexOutput;, +import org.apache.lucene.store.InputStreamDataInput;, +import org.apache.lucene.store.OutputStreamDataOutput;, +import org.apache.lucene.util.ArrayUtil;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.BytesRefBuilder;, +import org.apache.lucene.util.CharsRefBuilder;, +import org.apache.lucene.util.IOUtils;, +import org.apache.lucene.util.IntsRef;, +import org.apache.lucene.util.IntsRefBuilder;, +import org.apache.lucene.util.OfflineSorter;, +import org.apache.lucene.util.automaton.Automaton;, +import org.apache.lucene.util.automaton.LimitedFiniteStringsIterator;, +import org.apache.lucene.util.automaton.Operations;, +import org.apache.lucene.util.automaton.Transition;, +import org.apache.lucene.util.fst.Builder;, +import org.apache.lucene.util.fst.ByteSequenceOutputs;, +import org.apache.lucene.util.fst.FST;, +import org.apache.lucene.util.fst.FST.BytesReader;, +import org.apache.lucene.util.fst.PairOutputs;, +import org.apache.lucene.util.fst.PairOutputs.Pair;, +import org.apache.lucene.util.fst.PositiveIntOutputs;, +import org.apache.lucene.util.fst.Util;, +import org.apache.lucene.util.fst.Util.Result;, +import org.apache.lucene.util.fst.Util.TopResults;, +import org.elasticsearch.common.SuppressForbidden;, +import org.elasticsearch.common.collect.HppcMaps;, +import org.elasticsearch.common.io.PathUtils;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.nio.file.Paths;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.HashSet;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Set;, +, +/**, + * Suggester that first analyzes the surface form, adds the, + * analyzed form to a weighted FST, and then does the same, + * thing at lookup time.  This means lookup is based on the, + * analyzed form while suggestions are still the surface, + * form(s)., + *, + * <p>, + * This can result in powerful suggester functionality.  For, + * example, if you use an analyzer removing stop words,, + * then the partial text "ghost chr..." could see the, + * suggestion "The Ghost of Christmas Past".  Note that, + * position increments MUST NOT be preserved for this example, + * to work, so you should call the constructor with, + * <code>preservePositionIncrements</code> parameter set to]