[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +    private final boolean cancellable;, +, +                    long runningTimeNanos, boolean cancellable, TaskId parentTaskId) {, +        this.cancellable = cancellable;, +        cancellable = in.readBoolean();, +     * Returns true if the task supports cancellation, +     */, +    public boolean isCancellable() {, +        return cancellable;, +    }, +, +    /**, +        out.writeBoolean(cancellable);, +        builder.field("cancellable", cancellable);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +    private final boolean cancellable;, +, +                    long runningTimeNanos, boolean cancellable, TaskId parentTaskId) {, +        this.cancellable = cancellable;, +        cancellable = in.readBoolean();, +     * Returns true if the task supports cancellation, +     */, +    public boolean isCancellable() {, +        return cancellable;, +    }, +, +    /**, +        out.writeBoolean(cancellable);, +        builder.field("cancellable", cancellable);, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +    private String toString;, +, +        if (toString == null) {, +            toString = sb.toString();, +        }, +        return toString;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +    private final boolean cancellable;, +, +                    long runningTimeNanos, boolean cancellable, TaskId parentTaskId) {, +        this.cancellable = cancellable;, +        cancellable = in.readBoolean();, +     * Returns true if the task supports cancellation, +     */, +    public boolean isCancellable() {, +        return cancellable;, +    }, +, +    /**, +        out.writeBoolean(cancellable);, +        builder.field("cancellable", cancellable);, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +    private String toString;, +, +        if (toString == null) {, +            toString = sb.toString();, +        }, +        return toString;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregatorBuilder.java, +import org.elasticsearch.search.aggregations.AggregatorFactories.Builder;, +        this.filters = filters;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +    private final boolean cancellable;, +, +                    long runningTimeNanos, boolean cancellable, TaskId parentTaskId) {, +        this.cancellable = cancellable;, +        cancellable = in.readBoolean();, +     * Returns true if the task supports cancellation, +     */, +    public boolean isCancellable() {, +        return cancellable;, +    }, +, +    /**, +        out.writeBoolean(cancellable);, +        builder.field("cancellable", cancellable);, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +    private String toString;, +, +        if (toString == null) {, +            toString = sb.toString();, +        }, +        return toString;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregatorBuilder.java, +import org.elasticsearch.search.aggregations.AggregatorFactories.Builder;, +        this.filters = filters;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsAggregatorBuilder.java, +    private List<ScriptField> scriptFields;, +            scriptFields = new ArrayList<>();, +            this.scriptFields = new ArrayList<>();, +    public List<ScriptField> scriptFields() {, +            List<ScriptField> scriptFields = new ArrayList<>(size);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +    private final boolean cancellable;, +, +                    long runningTimeNanos, boolean cancellable, TaskId parentTaskId) {, +        this.cancellable = cancellable;, +        cancellable = in.readBoolean();, +     * Returns true if the task supports cancellation]