[+++ b/pom.xml, +                    <minimizeJar>true</minimizeJar>, +++ b/pom.xml, +                    <minimizeJar>true</minimizeJar>, +++ b/src/main/java/org/elasticsearch/watcher/execution/ExecutionService.java, +    void processEventsAsync(Iterable<TriggerEvent> events) throws WatcherException {, +            historyStore.put(watchRecord, new ActionListener<Boolean>() {, +                        logger.debug("failed to store watch record [{}]/[{}] due to overloaded threadpool [{}]", watchRecord, ctx.id(), ExceptionsHelper.detailedMessage(e));, +                        logger.warn("failed to store watch record [{}]/[{}]", e, watchRecord, ctx.id());, +            historyStore.putAll(records, new ActionListener<List<Integer>>() {, +                        logger.debug("failed to store watch records due to overloaded threadpool [{}]", ExceptionsHelper.detailedMessage(e));, +                        logger.warn("failed to store watch records", e);, +    void processEventsSync(Iterable<TriggerEvent> events) throws WatcherException {, +            List<Integer> slots = historyStore.putAll(records);, +                logger.warn("unable to find watch [{}]/[{}] in watch store. perhaps it has been deleted. skipping...", record.name(), record.id());, +                    logger.warn("failed to execute watch [{}]/[{}], failure [{}]", watchRecord.name(), ctx.id(), detailedMessage);, +                        logger.error("failed to update watch record [{}]/[{}], failure [{}], original failure [{}]", watchRecord.name(), ctx.id(), ExceptionsHelper.detailedMessage(e2), detailedMessage);, +                logger.trace("finished [{}]/[{}]", ctx.watch().name(), ctx.id());, +++ b/pom.xml, +                    <minimizeJar>true</minimizeJar>, +++ b/src/main/java/org/elasticsearch/watcher/execution/ExecutionService.java, +    void processEventsAsync(Iterable<TriggerEvent> events) throws WatcherException {, +            historyStore.put(watchRecord, new ActionListener<Boolean>() {, +                        logger.debug("failed to store watch record [{}]/[{}] due to overloaded threadpool [{}]", watchRecord, ctx.id(), ExceptionsHelper.detailedMessage(e));, +                        logger.warn("failed to store watch record [{}]/[{}]", e, watchRecord, ctx.id());, +            historyStore.putAll(records, new ActionListener<List<Integer>>() {, +                        logger.debug("failed to store watch records due to overloaded threadpool [{}]", ExceptionsHelper.detailedMessage(e));, +                        logger.warn("failed to store watch records", e);, +    void processEventsSync(Iterable<TriggerEvent> events) throws WatcherException {, +            List<Integer> slots = historyStore.putAll(records);, +                logger.warn("unable to find watch [{}]/[{}] in watch store. perhaps it has been deleted. skipping...", record.name(), record.id());, +                    logger.warn("failed to execute watch [{}]/[{}], failure [{}]", watchRecord.name(), ctx.id(), detailedMessage);, +                        logger.error("failed to update watch record [{}]/[{}], failure [{}], original failure [{}]", watchRecord.name(), ctx.id(), ExceptionsHelper.detailedMessage(e2), detailedMessage);, +                logger.trace("finished [{}]/[{}]", ctx.watch().name(), ctx.id());, +++ b/src/main/java/org/elasticsearch/watcher/history/HistoryStore.java, +    public void put(final WatchRecord watchRecord, final ActionListener<Boolean> listener) throws HistoryException {, +            client.index(request, new ActionListener<IndexResponse>() {, +    public void putAll(final List<WatchRecord> records, final ActionListener<List<Integer>> listener) throws HistoryException {, +            client.bulk(request, new ActionListener<BulkResponse>() {, +    public List<Integer> putAll(final List<WatchRecord> records) throws HistoryException {, +++ b/pom.xml, +                    <minimizeJar>true</minimizeJar>, +++ b/src/main/java/org/elasticsearch/watcher/execution/ExecutionService.java, +    void processEventsAsync(Iterable<TriggerEvent> events) throws WatcherException {, +            historyStore.put(watchRecord, new ActionListener<Boolean>() {, +                        logger.debug("failed to store watch record [{}]/[{}] due to overloaded threadpool [{}]", watchRecord, ctx.id(), ExceptionsHelper.detailedMessage(e));, +                        logger.warn("failed to store watch record [{}]/[{}]", e, watchRecord, ctx.id());, +            historyStore.putAll(records, new ActionListener<List<Integer>>() {, +                        logger.debug("failed to store watch records due to overloaded threadpool [{}]", ExceptionsHelper.detailedMessage(e));, +                        logger.warn("failed to store watch records", e);, +    void processEventsSync(Iterable<TriggerEvent> events) throws WatcherException {, +            List<Integer> slots = historyStore.putAll(records);, +                logger.warn("unable to find watch [{}]/[{}] in watch store. perhaps it has been deleted. skipping...", record.name(), record.id());, +                    logger.warn("failed to execute watch [{}]/[{}], failure [{}]", watchRecord.name(), ctx.id(), detailedMessage);, +                        logger.error("failed to update watch record [{}]/[{}], failure [{}], original failure [{}]", watchRecord.name(), ctx.id(), ExceptionsHelper.detailedMessage(e2), detailedMessage);, +                logger.trace("finished [{}]/[{}]", ctx.watch().name(), ctx.id());, +++ b/src/main/java/org/elasticsearch/watcher/history/HistoryStore.java, +    public void put(final WatchRecord watchRecord, final ActionListener<Boolean> listener) throws HistoryException {, +            client.index(request, new ActionListener<IndexResponse>() {, +    public void putAll(final List<WatchRecord> records, final ActionListener<List<Integer>> listener) throws HistoryException {, +            client.bulk(request, new ActionListener<BulkResponse>() {, +    public List<Integer> putAll(final List<WatchRecord> records) throws HistoryException {, +++ b/src/main/java/org/elasticsearch/watcher/support/init/proxy/ClientProxy.java, +    public void index(IndexRequest request, ActionListener<IndexResponse> listener) {, +    public void bulk(BulkRequest request, ActionListener<BulkResponse> listener) {, +++ b/pom.xml, +                    <minimizeJar>true</minimizeJar>, +++ b/src/main/java/org/elasticsearch/watcher/execution/ExecutionService.java, +    void processEventsAsync(Iterable<TriggerEvent> events) throws WatcherException {, +            historyStore.put(watchRecord, new ActionListener<Boolean>() {, +                        logger.debug("failed to store watch record [{}]/[{}] due to overloaded threadpool [{}]", watchRecord, ctx.id(), ExceptionsHelper.detailedMessage(e));, +                        logger.warn("failed to store watch record [{}]/[{}]", e, watchRecord, ctx.id());, +            historyStore.putAll(records, new ActionListener<List<Integer>>() {, +                        logger.debug("failed to store watch records due to overloaded threadpool [{}]", ExceptionsHelper.detailedMessage(e));, +                        logger.warn("failed to store watch records", e);, +    void processEventsSync(Iterable<TriggerEvent> events) throws WatcherException {, +            List<Integer> slots = historyStore.putAll(records);, +                logger.warn("unable to find watch [{}]/[{}] in watch store. perhaps it has been deleted. skipping...", record.name(), record.id());, +                    logger.warn("failed to execute watch [{}]/[{}], failure [{}]", watchRecord.name(), ctx.id(), detailedMessage);, +                        logger.error("failed to update watch record [{}]/[{}], failure [{}], original failure [{}]", watchRecord.name(), ctx.id(), ExceptionsHelper.detailedMessage(e2), detailedMessage);, +                logger.trace("finished [{}]/[{}]", ctx.watch().name(), ctx.id());, +++ b/src/main/java/org/elasticsearch/watcher/history/HistoryStore.java, +    public void put(final WatchRecord watchRecord, final ActionListener<Boolean> listener) throws HistoryException {, +            client.index(request, new ActionListener<IndexResponse>() {, +    public void putAll(final List<WatchRecord> records, final ActionListener<List<Integer>> listener) throws HistoryException {, +            client.bulk(request, new ActionListener<BulkResponse>() {, +    public List<Integer> putAll(final List<WatchRecord> records) throws HistoryException {, +++ b/src/main/java/org/elasticsearch/watcher/support/init/proxy/ClientProxy.java, +    public void index(IndexRequest request, ActionListener<IndexResponse> listener) {, +    public void bulk(BulkRequest request, ActionListener<BulkResponse> listener) {, +++ b/src/main/java/org/elasticsearch/watcher/trigger/TriggerEvent.java, +++ b/pom.xml, +                    <minimizeJar>true</minimizeJar>, +++ b/src/main/java/org/elasticsearch/watcher/execution/ExecutionService.java, +    void processEventsAsync(Iterable<TriggerEvent> events) throws WatcherException {, +            historyStore.put(watchRecord, new ActionListener<Boolean>() {, +                        logger.debug("failed to store watch record [{}]/[{}] due to overloaded threadpool [{}]", watchRecord, ctx.id(), ExceptionsHelper.detailedMessage(e));, +                        logger.warn("failed to store watch record [{}]/[{}]", e, watchRecord, ctx.id());, +            historyStore.putAll(records, new ActionListener<List<Integer>>() {, +                        logger.debug("failed to store watch records due to overloaded threadpool [{}]", ExceptionsHelper.detailedMessage(e));]