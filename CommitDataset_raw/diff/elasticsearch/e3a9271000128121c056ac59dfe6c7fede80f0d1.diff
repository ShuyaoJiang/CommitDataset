[+++ b/src/main/java/org/elasticsearch/action/count/TransportCountAction.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.lucene.Lucene;, +import org.elasticsearch.index.query.QueryParseContext;, +import org.elasticsearch.index.service.IndexService;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.search.internal.InternalSearchRequest;, +import org.elasticsearch.search.internal.SearchContext;, +import org.elasticsearch.search.query.QueryPhaseExecutionException;, +    private final ScriptService scriptService;, +, +    public TransportCountAction(Settings settings, ThreadPool threadPool, ClusterService clusterService, TransportService transportService,, +                                IndicesService indicesService, ScriptService scriptService) {, +        this.scriptService = scriptService;, +        IndexService indexService = indicesService.indexServiceSafe(request.index());, +        IndexShard indexShard = indexService.shardSafe(request.shardId());, +, +        SearchContext context = new SearchContext(0,, +                new InternalSearchRequest().types(request.types()).filteringAliases(request.filteringAliases()),, +                null, indexShard.searcher(), indexService, indexShard,, +                scriptService);, +        SearchContext.setCurrent(context);, +, +        try {, +            // TODO: min score should move to be "null" as a value that is not initialized..., +            if (request.minScore() != -1) {, +                context.minimumScore(request.minScore());, +            }, +            BytesReference querySource = request.querySource();, +            if (querySource != null && querySource.length() > 0) {, +                try {, +                    QueryParseContext.setTypes(request.types());, +                    context.parsedQuery(indexService.queryParserService().parse(querySource));, +                } finally {, +                    QueryParseContext.removeTypes();, +                }, +            }, +            context.preProcess();, +            try {, +                long count = Lucene.count(context.searcher(), context.query());, +            } catch (Exception e) {, +                throw new QueryPhaseExecutionException(context, "failed to execute count", e);, +            }, +        } finally {, +            // this will also release the index searcher, +            context.release();, +            SearchContext.removeCurrent();, +        }, +++ b/src/main/java/org/elasticsearch/action/count/TransportCountAction.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.lucene.Lucene;, +import org.elasticsearch.index.query.QueryParseContext;, +import org.elasticsearch.index.service.IndexService;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.search.internal.InternalSearchRequest;, +import org.elasticsearch.search.internal.SearchContext;, +import org.elasticsearch.search.query.QueryPhaseExecutionException;, +    private final ScriptService scriptService;, +, +    public TransportCountAction(Settings settings, ThreadPool threadPool, ClusterService clusterService, TransportService transportService,, +                                IndicesService indicesService, ScriptService scriptService) {, +        this.scriptService = scriptService;, +        IndexService indexService = indicesService.indexServiceSafe(request.index());, +        IndexShard indexShard = indexService.shardSafe(request.shardId());, +, +        SearchContext context = new SearchContext(0,, +                new InternalSearchRequest().types(request.types()).filteringAliases(request.filteringAliases()),, +                null, indexShard.searcher(), indexService, indexShard,, +                scriptService);, +        SearchContext.setCurrent(context);, +, +        try {, +            // TODO: min score should move to be "null" as a value that is not initialized..., +            if (request.minScore() != -1) {, +                context.minimumScore(request.minScore());, +            }, +            BytesReference querySource = request.querySource();, +            if (querySource != null && querySource.length() > 0) {, +                try {, +                    QueryParseContext.setTypes(request.types());, +                    context.parsedQuery(indexService.queryParserService().parse(querySource));, +                } finally {, +                    QueryParseContext.removeTypes();, +                }, +            }, +            context.preProcess();, +            try {, +                long count = Lucene.count(context.searcher(), context.query());, +            } catch (Exception e) {, +                throw new QueryPhaseExecutionException(context, "failed to execute count", e);, +            }, +        } finally {, +            // this will also release the index searcher, +            context.release();, +            SearchContext.removeCurrent();, +        }, +++ b/src/main/java/org/elasticsearch/action/support/DefaultShardOperationFailedException.java, +, +    @Override, +    public String toString() {]