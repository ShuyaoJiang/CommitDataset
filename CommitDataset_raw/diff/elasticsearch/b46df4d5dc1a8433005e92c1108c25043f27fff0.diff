[+++ b/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java, +++ b/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java, +++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java, +++ b/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java, +++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java, +++ b/src/test/java/org/elasticsearch/indices/IndicesCustomDataPathTests.java, +++ b/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java, +++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java, +++ b/src/test/java/org/elasticsearch/indices/IndicesCustomDataPathTests.java, +++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java, +++ b/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java, +++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java, +++ b/src/test/java/org/elasticsearch/indices/IndicesCustomDataPathTests.java, +++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.apache.lucene.util.LuceneTestCase;, +@LuceneTestCase.SuppressFileSystems("ExtrasFS") // doesn't work with potential multi data path from test cluster yet, +++ b/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java, +++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java, +++ b/src/test/java/org/elasticsearch/indices/IndicesCustomDataPathTests.java, +++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.apache.lucene.util.LuceneTestCase;, +@LuceneTestCase.SuppressFileSystems("ExtrasFS") // doesn't work with potential multi data path from test cluster yet, +++ b/src/test/java/org/elasticsearch/test/VersionUtils.java, +        int maxVersionIndex = SORTED_VERSIONS.size() - 1;, +++ b/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java, +++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java, +++ b/src/test/java/org/elasticsearch/indices/IndicesCustomDataPathTests.java, +++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.apache.lucene.util.LuceneTestCase;, +@LuceneTestCase.SuppressFileSystems("ExtrasFS") // doesn't work with potential multi data path from test cluster yet, +++ b/src/test/java/org/elasticsearch/test/VersionUtils.java, +        int maxVersionIndex = SORTED_VERSIONS.size() - 1;, +++ b/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java, +import org.apache.lucene.util.LuceneTestCase;, +@LuceneTestCase.SuppressFileSystems("ExtrasFS") // doesn't work with potential multi data path from test cluster yet, +++ b/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java, +++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java, +++ b/src/test/java/org/elasticsearch/indices/IndicesCustomDataPathTests.java, +++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.apache.lucene.util.LuceneTestCase;, +@LuceneTestCase.SuppressFileSystems("ExtrasFS") // doesn't work with potential multi data path from test cluster yet, +++ b/src/test/java/org/elasticsearch/test/VersionUtils.java, +        int maxVersionIndex = SORTED_VERSIONS.size() - 1;, +++ b/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java, +import org.apache.lucene.util.LuceneTestCase;, +@LuceneTestCase.SuppressFileSystems("ExtrasFS") // doesn't work with potential multi data path from test cluster yet, +++ b/src/test/java/org/elasticsearch/test/test/VersionUtilsTests.java, +import com.carrotsearch.randomizedtesting.annotations.Seed;, +@Seed("E619863BE07FF5CB"), +        // full range, +        Version got = VersionUtils.randomVersionBetween(random(), VersionUtils.getFirstVersion(), Version.CURRENT);, +        assertTrue(got.onOrBefore(Version.CURRENT));, +        got = VersionUtils.randomVersionBetween(random(), null, Version.CURRENT);, +        assertTrue(got.onOrAfter(VersionUtils.getFirstVersion()));, +        assertTrue(got.onOrBefore(Version.CURRENT));, +        got = VersionUtils.randomVersionBetween(random(), VersionUtils.getFirstVersion(), null);, +        assertTrue(got.onOrAfter(VersionUtils.getFirstVersion()));, +        // sub range, +        got = VersionUtils.randomVersionBetween(random(), Version.V_0_90_12, Version.V_1_4_5);, +        assertTrue(got.onOrAfter(Version.V_0_90_12));, +        assertTrue(got.onOrBefore(Version.V_1_4_5));, +        // unbounded lower, +        got = VersionUtils.randomVersionBetween(random(), null, Version.V_1_4_5);, +        assertTrue(got.onOrAfter(VersionUtils.getFirstVersion()));, +        assertTrue(got.onOrBefore(Version.V_1_4_5));, +        got = VersionUtils.randomVersionBetween(random(), null, VersionUtils.allVersions().get(0));, +        assertTrue(got.onOrAfter(VersionUtils.getFirstVersion()));, +        assertTrue(got.onOrBefore(VersionUtils.allVersions().get(0)));, +, +        // unbounded upper, +        got = VersionUtils.randomVersionBetween(random(), Version.V_0_90_12, null);, +        assertTrue(got.onOrAfter(Version.V_0_90_12));, +        assertTrue(got.onOrBefore(Version.CURRENT));, +        got = VersionUtils.randomVersionBetween(random(), VersionUtils.getPreviousVersion(), null);, +        assertTrue(got.onOrAfter(VersionUtils.getPreviousVersion()));, +        assertTrue(got.onOrBefore(Version.CURRENT));, +        , +        // range of one, +        got = VersionUtils.randomVersionBetween(random(), VersionUtils.getFirstVersion(), VersionUtils.getFirstVersion());, +        assertEquals(got, VersionUtils.getFirstVersion());, +        got = VersionUtils.randomVersionBetween(random(), Version.CURRENT, Version.CURRENT);, +        assertEquals(got, Version.CURRENT);, +        got = VersionUtils.randomVersionBetween(random(), Version.V_1_2_4, Version.V_1_2_4);, +        assertEquals(got, Version.V_1_2_4);, +        , +        // implicit range of one, +        got = VersionUtils.randomVersionBetween(random(), null, VersionUtils.getFirstVersion());, +        assertEquals(got, VersionUtils.getFirstVersion());, +        got = VersionUtils.randomVersionBetween(random(), Version.CURRENT, null);, +        assertEquals(got, Version.CURRENT);, +++ b/src/test/java/org/elasticsearch/index/IndexWithShadowReplicasTests.java, +++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java, +++ b/src/test/java/org/elasticsearch/indices/IndicesCustomDataPathTests.java, +++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.apache.lucene.util.LuceneTestCase;]