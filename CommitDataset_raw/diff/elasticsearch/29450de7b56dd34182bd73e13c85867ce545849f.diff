[+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +            new SearchProfileShardResults(Collections.emptyMap()), false, false, 1), "", 1, 1, 0, 0, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY));, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +            new SearchProfileShardResults(Collections.emptyMap()), false, false, 1), "", 1, 1, 0, 0, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +                null, false, false, null, 1), randomAlphaOfLengthBetween(5, 10), 5, 5, 0, 100, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +            new SearchProfileShardResults(Collections.emptyMap()), false, false, 1), "", 1, 1, 0, 0, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +                null, false, false, null, 1), randomAlphaOfLengthBetween(5, 10), 5, 5, 0, 100, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java, +        assertEquals(SearchResponse.Clusters.EMPTY, searchResponse.getClusters());, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +            new SearchProfileShardResults(Collections.emptyMap()), false, false, 1), "", 1, 1, 0, 0, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +                null, false, false, null, 1), randomAlphaOfLengthBetween(5, 10), 5, 5, 0, 100, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java, +        assertEquals(SearchResponse.Clusters.EMPTY, searchResponse.getClusters());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +import java.util.Collections;, +    public static final ClusterSearchShardsResponse EMPTY = new ClusterSearchShardsResponse(new ClusterSearchShardsGroup[0],, +            new DiscoveryNode[0], Collections.emptyMap());, +, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +            new SearchProfileShardResults(Collections.emptyMap()), false, false, 1), "", 1, 1, 0, 0, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +                null, false, false, null, 1), randomAlphaOfLengthBetween(5, 10), 5, 5, 0, 100, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java, +        assertEquals(SearchResponse.Clusters.EMPTY, searchResponse.getClusters());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +import java.util.Collections;, +    public static final ClusterSearchShardsResponse EMPTY = new ClusterSearchShardsResponse(new ClusterSearchShardsGroup[0],, +            new DiscoveryNode[0], Collections.emptyMap());, +, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    private final SearchResponse.Clusters clusters;, +                                        SearchTask task, SearchPhaseResults<Result> resultConsumer, int maxConcurrentShardRequests,, +                                        SearchResponse.Clusters clusters) {, +        this.clusters = clusters;, +                ShardSearchFailure.EMPTY_ARRAY, clusters));, +            skippedOps.get(), buildTookInMillis(), buildShardFailures(), clusters);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +            new SearchProfileShardResults(Collections.emptyMap()), false, false, 1), "", 1, 1, 0, 0, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +                null, false, false, null, 1), randomAlphaOfLengthBetween(5, 10), 5, 5, 0, 100, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java, +        assertEquals(SearchResponse.Clusters.EMPTY, searchResponse.getClusters());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +import java.util.Collections;, +    public static final ClusterSearchShardsResponse EMPTY = new ClusterSearchShardsResponse(new ClusterSearchShardsGroup[0],, +            new DiscoveryNode[0], Collections.emptyMap());, +, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    private final SearchResponse.Clusters clusters;, +                                        SearchTask task, SearchPhaseResults<Result> resultConsumer, int maxConcurrentShardRequests,, +                                        SearchResponse.Clusters clusters) {, +        this.clusters = clusters;, +                ShardSearchFailure.EMPTY_ARRAY, clusters));, +            skippedOps.get(), buildTookInMillis(), buildShardFailures(), clusters);, +++ b/core/src/main/java/org/elasticsearch/action/search/CanMatchPreFilterSearchPhase.java, + * This search phase can be used as an initial search phase to pre-filter search shards based on query rewriting., +                                        SearchTask task, Function<GroupShardsIterator<SearchShardIterator>, SearchPhase> phaseFactory,, +                                        SearchResponse.Clusters clusters) {, +            listener, shardsIts, timeProvider, clusterStateVersion, task, new BitSetSearchPhaseResults(shardsIts.size()), shardsIts.size(),, +                clusters);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +            new SearchProfileShardResults(Collections.emptyMap()), false, false, 1), "", 1, 1, 0, 0, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +                null, false, false, null, 1), randomAlphaOfLengthBetween(5, 10), 5, 5, 0, 100, ShardSearchFailure.EMPTY_ARRAY,, +                SearchResponse.Clusters.EMPTY);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java, +        assertEquals(SearchResponse.Clusters.EMPTY, searchResponse.getClusters());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +import java.util.Collections;, +    public static final ClusterSearchShardsResponse EMPTY = new ClusterSearchShardsResponse(new ClusterSearchShardsGroup[0],, +            new DiscoveryNode[0], Collections.emptyMap());, +, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    private final SearchResponse.Clusters clusters;, +                                        SearchTask task, SearchPhaseResults<Result> resultConsumer, int maxConcurrentShardRequests,, +                                        SearchResponse.Clusters clusters) {, +        this.clusters = clusters;, +                ShardSearchFailure.EMPTY_ARRAY, clusters));, +            skippedOps.get(), buildTookInMillis(), buildShardFailures(), clusters);, +++ b/core/src/main/java/org/elasticsearch/action/search/CanMatchPreFilterSearchPhase.java, + * This search phase can be used as an initial search phase to pre-filter search shards based on query rewriting., +                                        SearchTask task, Function<GroupShardsIterator<SearchShardIterator>, SearchPhase> phaseFactory,, +                                        SearchResponse.Clusters clusters) {]