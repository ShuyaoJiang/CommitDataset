[+++ b/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +    abstract static class BinaryScriptDocValues<T> extends ScriptDocValues<T> {, +        protected BytesRefBuilder[] values = new BytesRefBuilder[0];, +        protected int count;, +        BinaryScriptDocValues(SortedBinaryDocValues in) {, +                    // We need to make a copy here, because BytesBinaryDVAtomicFieldData's SortedBinaryDocValues, +                    // implementation reuses the returned BytesRef. Otherwise we would end up with the same BytesRef, +                    // instance for all slots in the values array., +                    values[i].copyBytes(in.nextValue());, +            if (newSize > values.length) {, +                final int oldLength = values.length;, +                for (int i = oldLength; i < values.length; ++i) {, +                    values[i] = new BytesRefBuilder();, +, +    }, +, +    public static final class Strings extends BinaryScriptDocValues<String> {, +, +        public Strings(SortedBinaryDocValues in) {, +            super(in);, +        }, +, +        @Override, +        public String get(int index) {, +            return values[index].get().utf8ToString();, +        }, +, +        public BytesRef getBytesValue() {, +            if (size() > 0) {, +                return values[0].get();, +            } else {, +                return null;, +            }, +        }, +, +        public String getValue() {, +            BytesRef value = getBytesValue();, +            if (value == null) {, +                return null;, +            } else {, +                return value.utf8ToString();, +            }, +        }, +, +    }, +, +    public static final class BytesRefs extends BinaryScriptDocValues<BytesRef> {, +, +        public BytesRefs(SortedBinaryDocValues in) {, +            super(in);, +        }, +, +        @Override, +        public BytesRef get(int index) {, +            return values[index].get();, +        }, +, +        public BytesRef getValue() {, +            if (count == 0) {, +                return new BytesRef();, +            }, +            return values[0].get();, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +    abstract static class BinaryScriptDocValues<T> extends ScriptDocValues<T> {, +        protected BytesRefBuilder[] values = new BytesRefBuilder[0];, +        protected int count;, +        BinaryScriptDocValues(SortedBinaryDocValues in) {, +                    // We need to make a copy here, because BytesBinaryDVAtomicFieldData's SortedBinaryDocValues, +                    // implementation reuses the returned BytesRef. Otherwise we would end up with the same BytesRef, +                    // instance for all slots in the values array., +                    values[i].copyBytes(in.nextValue());, +            if (newSize > values.length) {, +                final int oldLength = values.length;, +                for (int i = oldLength; i < values.length; ++i) {, +                    values[i] = new BytesRefBuilder();, +, +    }, +, +    public static final class Strings extends BinaryScriptDocValues<String> {, +, +        public Strings(SortedBinaryDocValues in) {, +            super(in);, +        }, +, +        @Override, +        public String get(int index) {, +            return values[index].get().utf8ToString();, +        }, +, +        public BytesRef getBytesValue() {, +            if (size() > 0) {, +                return values[0].get();, +            } else {, +                return null;, +            }, +        }, +, +        public String getValue() {]