[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Returns <tt>true</tt> if a possible merge is really needed., +     */, +    boolean possibleMergeNeeded();, +, +    void maybeMerge() throws EngineException;, +, +    /**, +        private boolean force = false;, +, +        public Refresh force(boolean force) {, +            this.force = force;, +            return this;, +        }, +, +        public boolean force() {, +            return this.force;, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Returns <tt>true</tt> if a possible merge is really needed., +     */, +    boolean possibleMergeNeeded();, +, +    void maybeMerge() throws EngineException;, +, +    /**, +        private boolean force = false;, +, +        public Refresh force(boolean force) {, +            this.force = force;, +            return this;, +        }, +, +        public boolean force() {, +            return this.force;, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    private volatile boolean possibleMergeNeeded = false;, +, +            possibleMergeNeeded = true;, +            possibleMergeNeeded = true;, +            possibleMergeNeeded = true;, +            possibleMergeNeeded = true;, +    @Override public boolean possibleMergeNeeded() {, +        return this.possibleMergeNeeded;, +    }, +, +                if (dirty || refresh.force()) {, +            if (indexingSearcher.get() != null) {, +                indexingSearcher.get().release();, +                indexingSearcher.set(null);, +            }, +            refresh(new Refresh(true).force(true));, +    @Override public void maybeMerge() throws EngineException {, +        if (!possibleMergeNeeded) {, +            return;, +        }, +        possibleMergeNeeded = false;, +        rwl.readLock().lock();, +        try {, +            if (indexWriter == null) {, +                throw new EngineClosedException(shardId);, +            }, +            if (indexWriter.getMergePolicy() instanceof EnableMergePolicy) {, +                ((EnableMergePolicy) indexWriter.getMergePolicy()).enableMerge();, +            }, +            indexWriter.maybeMerge();, +        } catch (Exception e) {, +            throw new OptimizeFailedEngineException(shardId, e);, +        } finally {, +            rwl.readLock().unlock();, +            if (indexWriter != null && indexWriter.getMergePolicy() instanceof EnableMergePolicy) {, +                ((EnableMergePolicy) indexWriter.getMergePolicy()).disableMerge();, +            }, +        }, +    }, +, +                    possibleMergeNeeded = false;, +            refresh(new Refresh(false).force(true));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * Returns <tt>true</tt> if a possible merge is really needed., +     */, +    boolean possibleMergeNeeded();, +, +    void maybeMerge() throws EngineException;, +, +    /**, +        private boolean force = false;, +, +        public Refresh force(boolean force) {, +            this.force = force;, +            return this;, +        }, +, +        public boolean force() {, +            return this.force;, +        }, +]