[+++ b/src/main/java/org/elasticsearch/index/translog/BufferedChecksumStreamOutput.java, +, +    public void resetDigest() {, +        digest.reset();, +    }, +++ b/src/main/java/org/elasticsearch/index/translog/BufferedChecksumStreamOutput.java, +, +    public void resetDigest() {, +        digest.reset();, +    }, +++ b/src/main/java/org/elasticsearch/index/translog/Translog.java, +            final BufferedChecksumStreamOutput checksumStreamOutput = new BufferedChecksumStreamOutput(out);, +            final long start = out.position();, +            out.skip(RamUsageEstimator.NUM_BYTES_INT);, +            writeOperationNoSize(checksumStreamOutput, operation);, +            long end = out.position();, +            int operationSize = (int) (out.position() - RamUsageEstimator.NUM_BYTES_INT - start);, +            out.seek(start);, +            out.writeInt(operationSize);, +            out.seek(end);, +    /**, +     * Reads a list of operations written with {@link #writeOperations(StreamOutput, List)}, +     */, +    public static List<Operation> readOperations(StreamInput input) throws IOException {, +        ArrayList<Operation> operations = new ArrayList<>();, +        int numOps = input.readInt();, +        for (int i = 0; i < numOps; i++) {, +            operations.add(readOperation(checksumStreamInput));, +        return operations;, +    /**, +     * Writes all operations in the given iterable to the given output stream including the size of the array, +     * use {@link #readOperations(StreamInput)} to read it back., +     */, +    public static void writeOperations(StreamOutput outStream, List<Operation> toWrite) throws IOException {, +        final ReleasableBytesStreamOutput out = new ReleasableBytesStreamOutput(BigArrays.NON_RECYCLING_INSTANCE);, +        try {, +            outStream.writeInt(toWrite.size());, +            final BufferedChecksumStreamOutput checksumStreamOutput = new BufferedChecksumStreamOutput(out);, +            for (Operation op : toWrite) {, +                out.reset();, +                final long start = out.position();, +                out.skip(RamUsageEstimator.NUM_BYTES_INT);, +                writeOperationNoSize(checksumStreamOutput, op);, +                long end = out.position();, +                int operationSize = (int) (out.position() - RamUsageEstimator.NUM_BYTES_INT - start);, +                out.seek(start);, +                out.writeInt(operationSize);, +                out.seek(end);, +                ReleasablePagedBytesReference bytes = out.bytes();, +                bytes.writeTo(outStream);, +            }, +        } finally {, +            Releasables.close(out.bytes());, +        }, +    }, +    public static void writeOperationNoSize(BufferedChecksumStreamOutput out, Translog.Operation op) throws IOException {, +        out.resetDigest();, +++ b/src/main/java/org/elasticsearch/index/translog/BufferedChecksumStreamOutput.java, +, +    public void resetDigest() {, +        digest.reset();, +    }, +++ b/src/main/java/org/elasticsearch/index/translog/Translog.java, +            final BufferedChecksumStreamOutput checksumStreamOutput = new BufferedChecksumStreamOutput(out);, +            final long start = out.position();, +            out.skip(RamUsageEstimator.NUM_BYTES_INT);, +            writeOperationNoSize(checksumStreamOutput, operation);, +            long end = out.position();, +            int operationSize = (int) (out.position() - RamUsageEstimator.NUM_BYTES_INT - start);, +            out.seek(start);, +            out.writeInt(operationSize);, +            out.seek(end);, +    /**, +     * Reads a list of operations written with {@link #writeOperations(StreamOutput, List)}, +     */, +    public static List<Operation> readOperations(StreamInput input) throws IOException {, +        ArrayList<Operation> operations = new ArrayList<>();, +        int numOps = input.readInt();, +        for (int i = 0; i < numOps; i++) {, +            operations.add(readOperation(checksumStreamInput));, +        return operations;, +    /**, +     * Writes all operations in the given iterable to the given output stream including the size of the array, +     * use {@link #readOperations(StreamInput)} to read it back., +     */, +    public static void writeOperations(StreamOutput outStream, List<Operation> toWrite) throws IOException {, +        final ReleasableBytesStreamOutput out = new ReleasableBytesStreamOutput(BigArrays.NON_RECYCLING_INSTANCE);, +        try {, +            outStream.writeInt(toWrite.size());, +            final BufferedChecksumStreamOutput checksumStreamOutput = new BufferedChecksumStreamOutput(out);, +            for (Operation op : toWrite) {, +                out.reset();, +                final long start = out.position();, +                out.skip(RamUsageEstimator.NUM_BYTES_INT);, +                writeOperationNoSize(checksumStreamOutput, op);, +                long end = out.position();, +                int operationSize = (int) (out.position() - RamUsageEstimator.NUM_BYTES_INT - start);, +                out.seek(start);, +                out.writeInt(operationSize);, +                out.seek(end);]