[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                    // pre create indices here and add mappings to them so we can merge the mappings here if needed, +                    for (String index : request.indices) {, +                        if (indicesService.hasIndex(index)) {, +                            continue;, +                        }, +                        final IndexMetaData indexMetaData = currentState.metaData().index(index);, +                        IndexService indexService = indicesService.createIndex(indexMetaData.index(), indexMetaData.settings(), currentState.nodes().localNode().id());, +                        for (Map.Entry<String, CompressedString> mapping : indexMetaData.mappings().entrySet()) {, +                            if (!indexService.mapperService().hasMapping(mapping.getKey())) {, +                                indexService.mapperService().add(mapping.getKey(), mapping.getValue().string());, +                            }, +                        }, +                    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                    // pre create indices here and add mappings to them so we can merge the mappings here if needed, +                    for (String index : request.indices) {, +                        if (indicesService.hasIndex(index)) {, +                            continue;, +                        }, +                        final IndexMetaData indexMetaData = currentState.metaData().index(index);, +                        IndexService indexService = indicesService.createIndex(indexMetaData.index(), indexMetaData.settings(), currentState.nodes().localNode().id());, +                        for (Map.Entry<String, CompressedString> mapping : indexMetaData.mappings().entrySet()) {, +                            if (!indexService.mapperService().hasMapping(mapping.getKey())) {, +                                indexService.mapperService().add(mapping.getKey(), mapping.getValue().string());, +                            }, +                        }, +                    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +import org.elasticsearch.cluster.routing.*;, +        applyCleanedIndices(event);, +    }, +, +    private void applyCleanedIndices(final ClusterChangedEvent event) {, +        for (final String index : indicesService.indices()) {, +            if (indicesService.indexService(index).shardIds().isEmpty()) {, +                if (logger.isDebugEnabled()) {, +                    logger.debug("[{}] cleaning index (no shards allocated)", index);, +                }, +                // clean the index, +                indicesService.cleanIndex(index);, +            }, +        }, +        // we only create indices for shards that are allocated, +        RoutingNode routingNode = event.state().readOnlyRoutingNodes().nodesToShards().get(event.state().nodes().localNodeId());, +        if (routingNode == null) {, +            return;, +        }, +        for (MutableShardRouting shard : routingNode) {, +            if (!indicesService.hasIndex(shard.index())) {, +                final IndexMetaData indexMetaData = event.state().metaData().index(shard.index());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                    // pre create indices here and add mappings to them so we can merge the mappings here if needed, +                    for (String index : request.indices) {, +                        if (indicesService.hasIndex(index)) {, +                            continue;, +                        }, +                        final IndexMetaData indexMetaData = currentState.metaData().index(index);, +                        IndexService indexService = indicesService.createIndex(indexMetaData.index(), indexMetaData.settings(), currentState.nodes().localNode().id());, +                        for (Map.Entry<String, CompressedString> mapping : indexMetaData.mappings().entrySet()) {, +                            if (!indexService.mapperService().hasMapping(mapping.getKey())) {, +                                indexService.mapperService().add(mapping.getKey(), mapping.getValue().string());, +                            }, +                        }, +                    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +import org.elasticsearch.cluster.routing.*;, +        applyCleanedIndices(event);, +    }, +, +    private void applyCleanedIndices(final ClusterChangedEvent event) {, +        for (final String index : indicesService.indices()) {, +            if (indicesService.indexService(index).shardIds().isEmpty()) {, +                if (logger.isDebugEnabled()) {, +                    logger.debug("[{}] cleaning index (no shards allocated)", index);, +                }, +                // clean the index, +                indicesService.cleanIndex(index);, +            }, +        }, +        // we only create indices for shards that are allocated, +        RoutingNode routingNode = event.state().readOnlyRoutingNodes().nodesToShards().get(event.state().nodes().localNodeId());, +        if (routingNode == null) {, +            return;, +        }, +        for (MutableShardRouting shard : routingNode) {, +            if (!indicesService.hasIndex(shard.index())) {, +                final IndexMetaData indexMetaData = event.state().metaData().index(shard.index());, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/recovery/RecoveryWhileUnderLoadTests.java, +                    } catch (Exception e) {, +                        logger.warn("**** failed indexing thread {}", e, indexerId);, +                    } catch (Exception e) {, +                        logger.warn("**** failed indexing thread {}", e, indexerId);, +                    } catch (Exception e) {, +                        logger.warn("**** failed indexing thread {}", e, indexerId);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                    // pre create indices here and add mappings to them so we can merge the mappings here if needed]