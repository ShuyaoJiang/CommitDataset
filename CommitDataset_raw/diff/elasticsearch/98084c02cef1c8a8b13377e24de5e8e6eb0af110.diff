[+++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +        clusterDynamicSettings.addDynamicSetting(ZenDiscovery.REJOIN_ON_MASTER_GONE, Validator.BOOLEAN);, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +        clusterDynamicSettings.addDynamicSetting(ZenDiscovery.REJOIN_ON_MASTER_GONE, Validator.BOOLEAN);, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    public final static String REJOIN_ON_MASTER_GONE = "discovery.zen.rejoin_on_master_gone";, +    boolean isRejoinOnMasterGone() {, +        return rejoinOnMasterGone;, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +        clusterDynamicSettings.addDynamicSetting(ZenDiscovery.REJOIN_ON_MASTER_GONE, Validator.BOOLEAN);, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    public final static String REJOIN_ON_MASTER_GONE = "discovery.zen.rejoin_on_master_gone";, +    boolean isRejoinOnMasterGone() {, +        return rejoinOnMasterGone;, +    }, +, +++ b/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryRejoinOnMaster.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.discovery.zen;, +, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.discovery.Discovery;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.junit.Test;, +, +import static org.hamcrest.Matchers.is;, +, +/**, + */, +@ElasticsearchIntegrationTest.ClusterScope(scope = ElasticsearchIntegrationTest.Scope.TEST, numDataNodes = 0, numClientNodes = 0), +public class ZenDiscoveryRejoinOnMaster extends ElasticsearchIntegrationTest {, +, +    @Test, +    public void testChangeRejoinOnMaster() throws Exception {, +        Settings nodeSettings = ImmutableSettings.settingsBuilder(), +                .put("discovery.type", "zen") // <-- To override the local setting if set externally, +                .build();, +        String nodeName = internalCluster().startNode(nodeSettings);, +        ZenDiscovery zenDiscovery = (ZenDiscovery) internalCluster().getInstance(Discovery.class, nodeName);, +        assertThat(zenDiscovery.isRejoinOnMasterGone(), is(true));, +, +        client().admin().cluster().prepareUpdateSettings(), +                .setTransientSettings(ImmutableSettings.builder().put(ZenDiscovery.REJOIN_ON_MASTER_GONE, false)), +                .get();, +, +        assertThat(zenDiscovery.isRejoinOnMasterGone(), is(false));, +    }, +, +}]