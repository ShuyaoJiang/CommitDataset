[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.java, +package org.apache.lucene.search.vectorhighlight;, +, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.List;, +, +/**, + * Copy from lucene trunk:, + * http://svn.apache.org/viewvc/lucene/dev/trunk/lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.java, + * This class in not available in 3.0.2 release yet., + */, +public class SingleFragListBuilder implements FragListBuilder {, +, +    @Override public FieldFragList createFieldFragList(FieldPhraseList fieldPhraseList, int fragCharSize) {, +        FieldFragList ffl = new FieldFragList(fragCharSize);, +, +        List<FieldPhraseList.WeightedPhraseInfo> wpil = new ArrayList<FieldPhraseList.WeightedPhraseInfo>();, +        Iterator<FieldPhraseList.WeightedPhraseInfo> ite = fieldPhraseList.phraseList.iterator();, +        FieldPhraseList.WeightedPhraseInfo phraseInfo = null;, +        while (true) {, +            if (!ite.hasNext()) break;, +            phraseInfo = ite.next();, +            if (phraseInfo == null) break;, +, +            wpil.add(phraseInfo);, +        }, +        if (wpil.size() > 0), +            ffl.add(0, Integer.MAX_VALUE, wpil);, +        return ffl;, +    }, +}, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.java, +package org.apache.lucene.search.vectorhighlight;, +, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.List;, +, +/**, + * Copy from lucene trunk:, + * http://svn.apache.org/viewvc/lucene/dev/trunk/lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.java, + * This class in not available in 3.0.2 release yet., + */, +public class SingleFragListBuilder implements FragListBuilder {, +, +    @Override public FieldFragList createFieldFragList(FieldPhraseList fieldPhraseList, int fragCharSize) {, +        FieldFragList ffl = new FieldFragList(fragCharSize);, +, +        List<FieldPhraseList.WeightedPhraseInfo> wpil = new ArrayList<FieldPhraseList.WeightedPhraseInfo>();, +        Iterator<FieldPhraseList.WeightedPhraseInfo> ite = fieldPhraseList.phraseList.iterator();, +        FieldPhraseList.WeightedPhraseInfo phraseInfo = null;, +        while (true) {, +            if (!ite.hasNext()) break;, +            phraseInfo = ite.next();, +            if (phraseInfo == null) break;, +, +            wpil.add(phraseInfo);, +        }, +        if (wpil.size() > 0), +            ffl.add(0, Integer.MAX_VALUE, wpil);, +        return ffl;, +    }, +}, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.search.Query;, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Arrays;, +import static org.elasticsearch.common.collect.Maps.newHashMap;, +, +        Map<Integer,FastVectorHighlighter> highlighterMap = newHashMap();, +        Map<Integer,FieldQuery> fieldQueryMap = newHashMap();, +            Map<String, HighlightField> highlightFields = newHashMap();, +                String fieldName = parsedHighlightField.field();, +                    fieldName = mapper.names().indexName();, +, +                Tuple<Integer,FastVectorHighlighter> highlighterTuple = getHighlighter(highlighterMap, parsedHighlightField.settings());, +                FastVectorHighlighter highlighter = highlighterTuple.v2();, +                FieldQuery fieldQuery = getFieldQuery(highlighterTuple.v1(), fieldQueryMap, highlighter, context.query(), context.searcher().getIndexReader(), parsedHighlightField.settings());, +                , +                    fragments = highlighter.getBestFragments(fieldQuery, context.searcher().getIndexReader(), docId, fieldName, parsedHighlightField.settings().fragmentCharSize(), parsedHighlightField.settings().numberOfFragments());, +, +    private FieldQuery getFieldQuery(int key, Map<Integer,FieldQuery> fieldQueryMap, FastVectorHighlighter highlighter, Query query, IndexReader indexReader, SearchContextHighlight.ParsedHighlightSettings settings) {, +        FieldQuery fq = fieldQueryMap.get(key);, +        if (fq == null) {, +            CustomFieldQuery.reader.set(indexReader);, +            CustomFieldQuery.highlightFilters.set(settings.highlightFilter());, +            fq = new CustomFieldQuery(query, highlighter);, +            fieldQueryMap.put(key,fq);, +        }, +        return fq;, +    }, +, +    private Tuple<Integer, FastVectorHighlighter> getHighlighter(Map<Integer,FastVectorHighlighter> highlighterMap, SearchContextHighlight.ParsedHighlightSettings settings) {, +, +        FragListBuilder fragListBuilder;, +        FragmentsBuilder fragmentsBuilder;, +        if (!settings.fragmentsAllowed()) {, +            fragListBuilder = new SingleFragListBuilder();]