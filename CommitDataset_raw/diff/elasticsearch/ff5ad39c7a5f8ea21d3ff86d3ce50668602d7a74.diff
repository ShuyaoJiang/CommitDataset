[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        if (environment.sharedDataFile() != null) {, +            addPath(policy, environment.sharedDataFile(), "read,readlink,write,delete");, +        }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        if (environment.sharedDataFile() != null) {, +            addPath(policy, environment.sharedDataFile(), "read,readlink,write,delete");, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.common.io.PathUtils;, +import org.elasticsearch.env.Environment;, +    private final Environment env;, +                                      Set<IndexTemplateFilter> indexTemplateFilters, Environment env,, +                                      NodeEnvironment nodeEnv) {, +        this.env = env;, +        if (customPath != null && env.sharedDataFile() == null) {, +            validationErrors.add("path.shared_data must be set in order to use custom data paths");, +        } else if (customPath != null) {, +            Path resolvedPath = PathUtils.get(new Path[]{env.sharedDataFile()}, customPath);, +            if (resolvedPath == null) {, +                validationErrors.add("custom path [" + customPath + "] is not a sub-path of path.shared_data [" + env.sharedDataFile() + "]");, +            }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        if (environment.sharedDataFile() != null) {, +            addPath(policy, environment.sharedDataFile(), "read,readlink,write,delete");, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.common.io.PathUtils;, +import org.elasticsearch.env.Environment;, +    private final Environment env;, +                                      Set<IndexTemplateFilter> indexTemplateFilters, Environment env,, +                                      NodeEnvironment nodeEnv) {, +        this.env = env;, +        if (customPath != null && env.sharedDataFile() == null) {, +            validationErrors.add("path.shared_data must be set in order to use custom data paths");, +        } else if (customPath != null) {, +            Path resolvedPath = PathUtils.get(new Path[]{env.sharedDataFile()}, customPath);, +            if (resolvedPath == null) {, +                validationErrors.add("custom path [" + customPath + "] is not a sub-path of path.shared_data [" + env.sharedDataFile() + "]");, +            }, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +    private final Path sharedDataFile;, +, +        if (settings.get("path.shared_data") != null) {, +            sharedDataFile = PathUtils.get(cleanPath(settings.get("path.shared_data")));, +        } else {, +            sharedDataFile = null;, +        }, +     * The shared data location, +     */, +    public Path sharedDataFile() {, +        return sharedDataFile;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        if (environment.sharedDataFile() != null) {, +            addPath(policy, environment.sharedDataFile(), "read,readlink,write,delete");, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.common.io.PathUtils;, +import org.elasticsearch.env.Environment;, +    private final Environment env;, +                                      Set<IndexTemplateFilter> indexTemplateFilters, Environment env,, +                                      NodeEnvironment nodeEnv) {, +        this.env = env;, +        if (customPath != null && env.sharedDataFile() == null) {, +            validationErrors.add("path.shared_data must be set in order to use custom data paths");, +        } else if (customPath != null) {, +            Path resolvedPath = PathUtils.get(new Path[]{env.sharedDataFile()}, customPath);, +            if (resolvedPath == null) {, +                validationErrors.add("custom path [" + customPath + "] is not a sub-path of path.shared_data [" + env.sharedDataFile() + "]");, +            }, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +    private final Path sharedDataFile;, +, +        if (settings.get("path.shared_data") != null) {, +            sharedDataFile = PathUtils.get(cleanPath(settings.get("path.shared_data")));, +        } else {, +            sharedDataFile = null;, +        }, +     * The shared data location, +     */, +    public Path sharedDataFile() {, +        return sharedDataFile;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +    private final Path sharedDataPath;, +            sharedDataPath = null;, +        sharedDataPath = environment.sharedDataFile();, +                return sharedDataPath.resolve(customDataDir).resolve(Integer.toString(this.localNodeId));, +                return sharedDataPath.resolve(customDataDir);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        if (environment.sharedDataFile() != null) {, +            addPath(policy, environment.sharedDataFile(), "read,readlink,write,delete");, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.common.io.PathUtils;]