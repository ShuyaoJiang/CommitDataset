[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            /* TODO: close this once s3 repository doesn't try to read during repository construction, +            }*/, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            /* TODO: close this once s3 repository doesn't try to read during repository construction, +            }*/, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +    public static Setting<SecureString> secureString(String name, Setting<SecureString> fallback,, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            /* TODO: close this once s3 repository doesn't try to read during repository construction, +            }*/, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +    public static Setting<SecureString> secureString(String name, Setting<SecureString> fallback,, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureString.java, +    /**, +     * Constructs a new SecureString from an existing String., +     *, +     * NOTE: This is not actually secure, since the provided String cannot be deallocated, but, +     * this constructor allows for easy compatibility between new and old apis., +     *, +     * @deprecated Only use for compatibility between deprecated string settings and new secure strings, +     */, +    @Deprecated, +    public SecureString(String s) {, +        this(s.toCharArray());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            /* TODO: close this once s3 repository doesn't try to read during repository construction, +            }*/, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +    public static Setting<SecureString> secureString(String name, Setting<SecureString> fallback,, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureString.java, +    /**, +     * Constructs a new SecureString from an existing String., +     *, +     * NOTE: This is not actually secure, since the provided String cannot be deallocated, but, +     * this constructor allows for easy compatibility between new and old apis., +     *, +     * @deprecated Only use for compatibility between deprecated string settings and new secure strings, +     */, +    @Deprecated, +    public SecureString(String s) {, +        this(s.toCharArray());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +        assert this instanceof SecureSetting || this.isGroupSetting() || parser.apply(defaultValue.apply(Settings.EMPTY)) != null, +        /**, +         * Get a setting with the given namespace filled in for prefix and suffix., +         */, +        public Setting<T> getConcreteSettingForNamespace(String namespace) {, +            String fullKey = key.toConcreteKey(namespace).toString();, +            return getConcreteSetting(fullKey);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            /* TODO: close this once s3 repository doesn't try to read during repository construction, +            }*/, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +    public static Setting<SecureString> secureString(String name, Setting<SecureString> fallback,, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureString.java, +    /**, +     * Constructs a new SecureString from an existing String., +     *, +     * NOTE: This is not actually secure, since the provided String cannot be deallocated, but, +     * this constructor allows for easy compatibility between new and old apis., +     *, +     * @deprecated Only use for compatibility between deprecated string settings and new secure strings, +     */, +    @Deprecated, +    public SecureString(String s) {, +        this(s.toCharArray());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +        assert this instanceof SecureSetting || this.isGroupSetting() || parser.apply(defaultValue.apply(Settings.EMPTY)) != null, +        /**, +         * Get a setting with the given namespace filled in for prefix and suffix., +         */, +        public Setting<T> getConcreteSettingForNamespace(String namespace) {, +            String fullKey = key.toConcreteKey(namespace).toString();, +            return getConcreteSetting(fullKey);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/Settings.java, +            if (settings.getSecureSettings() != null) {, +                setSecureSettings(settings.getSecureSettings());, +            }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            /* TODO: close this once s3 repository doesn't try to read during repository construction, +            }*/, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +    public static Setting<SecureString> secureString(String name, Setting<SecureString> fallback,, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureString.java, +    /**, +     * Constructs a new SecureString from an existing String., +     *, +     * NOTE: This is not actually secure, since the provided String cannot be deallocated, but, +     * this constructor allows for easy compatibility between new and old apis.]