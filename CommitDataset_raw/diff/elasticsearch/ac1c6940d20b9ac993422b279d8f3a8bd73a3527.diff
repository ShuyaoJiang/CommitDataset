[+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +        mapping(type, PutMappingRequest.buildFromSimplifiedDef(source));, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +        mapping(type, PutMappingRequest.buildFromSimplifiedDef(source));, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +     * @param source, +     *            consisting of field/properties pairs (e.g. "field1",, +     *            "type=string,store=true"), +     * @throws IllegalArgumentException, +     *             if the number of the source arguments is not divisible by two, +     * @return the mappings definition, +     */, +    public static XContentBuilder buildFromSimplifiedDef(Object... source) {, +        return buildFromSimplifiedDef(null, source);, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +        mapping(type, PutMappingRequest.buildFromSimplifiedDef(source));, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +     * @param source, +     *            consisting of field/properties pairs (e.g. "field1",, +     *            "type=string,store=true"), +     * @throws IllegalArgumentException, +     *             if the number of the source arguments is not divisible by two, +     * @return the mappings definition, +     */, +    public static XContentBuilder buildFromSimplifiedDef(Object... source) {, +        return buildFromSimplifiedDef(null, source);, +    }, +, +    /**, +++ b/server/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexIT.java, +    public void testNonNestedEmptyMappings() throws Exception {, +    public void testFlatMappingFormat() throws Exception {, +        assertAcked(prepareCreate("test"), +            .addMapping("_doc", "field", "type=keyword"));, +, +        GetMappingsResponse response = client().admin().indices().prepareGetMappings("test").get();, +, +        ImmutableOpenMap<String, MappingMetaData> mappings = response.mappings().get("test");, +        assertNotNull(mappings);, +, +        MappingMetaData metadata = mappings.get("_doc");, +        assertNotNull(metadata);, +        assertFalse(metadata.sourceAsMap().isEmpty());, +    }, +, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +        mapping(type, PutMappingRequest.buildFromSimplifiedDef(source));, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +     * @param source, +     *            consisting of field/properties pairs (e.g. "field1",, +     *            "type=string,store=true"), +     * @throws IllegalArgumentException, +     *             if the number of the source arguments is not divisible by two, +     * @return the mappings definition, +     */, +    public static XContentBuilder buildFromSimplifiedDef(Object... source) {, +        return buildFromSimplifiedDef(null, source);, +    }, +, +    /**, +++ b/server/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexIT.java, +    public void testNonNestedEmptyMappings() throws Exception {, +    public void testFlatMappingFormat() throws Exception {, +        assertAcked(prepareCreate("test"), +            .addMapping("_doc", "field", "type=keyword"));, +, +        GetMappingsResponse response = client().admin().indices().prepareGetMappings("test").get();, +, +        ImmutableOpenMap<String, MappingMetaData> mappings = response.mappings().get("test");, +        assertNotNull(mappings);, +, +        MappingMetaData metadata = mappings.get("_doc");, +        assertNotNull(metadata);, +        assertFalse(metadata.sourceAsMap().isEmpty());, +    }, +, +++ b/server/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestTests.java, +import org.elasticsearch.test.AbstractXContentTestCase;, +public class CreateIndexRequestTests extends AbstractXContentTestCase<CreateIndexRequest> {, +    @Override, +    protected CreateIndexRequest createTestInstance() {, +        try {, +            return RandomCreateIndexGenerator.randomCreateIndexRequest();, +        } catch (IOException e) {, +            throw new RuntimeException(e);, +        }, +    }, +, +    @Override, +    protected CreateIndexRequest doParseInstance(XContentParser parser) throws IOException {, +        CreateIndexRequest request = new CreateIndexRequest();, +        request.source(parser.map(), LoggingDeprecationHandler.INSTANCE);, +        return request;, +    }, +, +    @Override, +    protected void assertEqualInstances(CreateIndexRequest expectedInstance, CreateIndexRequest newInstance) {]