[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportSetUpgradeModeAction.java, +                            // Wait for datafeeds to not be "Awaiting upgrade", +                                (t) -> t.getAssignment().equals(AWAITING_UPGRADE)), +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportSetUpgradeModeAction.java, +                            // Wait for datafeeds to not be "Awaiting upgrade", +                                (t) -> t.getAssignment().equals(AWAITING_UPGRADE)), +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStopDatafeedAction.java, +            // See comment in TransportStartDatafeedAction for more information., +            if (datafeedTask == null) {, +                // This should not happen, because startedDatafeeds was derived from the same tasks that is passed to this method, +                String msg = "Requested datafeed [" + datafeedId + "] be stopped, but datafeed's task could not be found.";, +                assert datafeedTask != null : msg;, +                logger.error(msg);, +            } else if (datafeedTask.isAssigned()) {, +            } else {, +                // This is the easy case - the datafeed is not currently assigned to a node,, +                // so can be gracefully stopped simply by removing its persistent task.  (Usually, +                // a graceful stop cannot be achieved by simply removing the persistent task, but, +                // if the datafeed has no running code then graceful/forceful are the same.), +                // The listener here can be a no-op, as waitForDatafeedStopped() already waits for, +                // these persistent tasks to disappear., +                persistentTasksService.sendRemoveRequest(datafeedTask.getId(), ActionListener.wrap(r -> {}, e -> {}));, +                // This should not happen, because startedDatafeeds was derived from the same tasks that is passed to this method, +                String msg = "Requested datafeed [" + datafeedId + "] be force-stopped, but datafeed's task could not be found.";, +                assert datafeedTask != null : msg;, +                logger.error(msg);, +        List<Exception> caughtExceptions = failures.asList();, +        if (caughtExceptions.size() == 0) {, +        String msg = "Failed to stop datafeed [" + datafeedId + "] with [" + caughtExceptions.size(), +            + caughtExceptions.stream().map(Exception::getMessage).collect(Collectors.joining(", ")), +        ElasticsearchException e = new ElasticsearchException(msg, caughtExceptions.get(0));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportSetUpgradeModeAction.java, +                            // Wait for datafeeds to not be "Awaiting upgrade", +                                (t) -> t.getAssignment().equals(AWAITING_UPGRADE)), +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStopDatafeedAction.java, +            // See comment in TransportStartDatafeedAction for more information., +            if (datafeedTask == null) {, +                // This should not happen, because startedDatafeeds was derived from the same tasks that is passed to this method, +                String msg = "Requested datafeed [" + datafeedId + "] be stopped, but datafeed's task could not be found.";, +                assert datafeedTask != null : msg;, +                logger.error(msg);, +            } else if (datafeedTask.isAssigned()) {, +            } else {, +                // This is the easy case - the datafeed is not currently assigned to a node,, +                // so can be gracefully stopped simply by removing its persistent task.  (Usually, +                // a graceful stop cannot be achieved by simply removing the persistent task, but, +                // if the datafeed has no running code then graceful/forceful are the same.), +                // The listener here can be a no-op, as waitForDatafeedStopped() already waits for, +                // these persistent tasks to disappear., +                persistentTasksService.sendRemoveRequest(datafeedTask.getId(), ActionListener.wrap(r -> {}, e -> {}));, +                // This should not happen, because startedDatafeeds was derived from the same tasks that is passed to this method, +                String msg = "Requested datafeed [" + datafeedId + "] be force-stopped, but datafeed's task could not be found.";, +                assert datafeedTask != null : msg;, +                logger.error(msg);, +        List<Exception> caughtExceptions = failures.asList();, +        if (caughtExceptions.size() == 0) {, +        String msg = "Failed to stop datafeed [" + datafeedId + "] with [" + caughtExceptions.size(), +            + caughtExceptions.stream().map(Exception::getMessage).collect(Collectors.joining(", ")), +        ElasticsearchException e = new ElasticsearchException(msg, caughtExceptions.get(0));, +++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/MlDistributedFailureIT.java, +        // An unassigned datafeed can be stopped either normally or by force, +        stopDatafeedRequest.setForce(randomBoolean());, +        ElasticsearchStatusException statusException = expectThrows(ElasticsearchStatusException.class,, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportSetUpgradeModeAction.java, +                            // Wait for datafeeds to not be "Awaiting upgrade", +                                (t) -> t.getAssignment().equals(AWAITING_UPGRADE)), +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStopDatafeedAction.java, +            // See comment in TransportStartDatafeedAction for more information., +            if (datafeedTask == null) {, +                // This should not happen, because startedDatafeeds was derived from the same tasks that is passed to this method, +                String msg = "Requested datafeed [" + datafeedId + "] be stopped, but datafeed's task could not be found.";, +                assert datafeedTask != null : msg;, +                logger.error(msg);, +            } else if (datafeedTask.isAssigned()) {, +            } else {, +                // This is the easy case - the datafeed is not currently assigned to a node,, +                // so can be gracefully stopped simply by removing its persistent task.  (Usually, +                // a graceful stop cannot be achieved by simply removing the persistent task, but, +                // if the datafeed has no running code then graceful/forceful are the same.), +                // The listener here can be a no-op, as waitForDatafeedStopped() already waits for, +                // these persistent tasks to disappear., +                persistentTasksService.sendRemoveRequest(datafeedTask.getId(), ActionListener.wrap(r -> {}, e -> {}));, +                // This should not happen, because startedDatafeeds was derived from the same tasks that is passed to this method, +                String msg = "Requested datafeed [" + datafeedId + "] be force-stopped, but datafeed's task could not be found.";, +                assert datafeedTask != null : msg;, +                logger.error(msg);, +        List<Exception> caughtExceptions = failures.asList();, +        if (caughtExceptions.size() == 0) {, +        String msg = "Failed to stop datafeed [" + datafeedId + "] with [" + caughtExceptions.size(), +            + caughtExceptions.stream().map(Exception::getMessage).collect(Collectors.joining(", ")), +        ElasticsearchException e = new ElasticsearchException(msg, caughtExceptions.get(0));, +++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/MlDistributedFailureIT.java, +        // An unassigned datafeed can be stopped either normally or by force, +        stopDatafeedRequest.setForce(randomBoolean());, +        ElasticsearchStatusException statusException = expectThrows(ElasticsearchStatusException.class,, +++ b/x-pack/plugin/src/test/resources/rest-api-spec/test/ml/set_upgrade_mode.yml, +  # The datafeed will not be assigned until the job has updated its status on the node it's assigned, +  # to, and that probably won't happen in time for this assertion.  That is indicated by an assignment, +  # reason ending "state is stale".  However, the datafeed should NOT be unassigned with a reason of, +  # "upgrade mode is enabled" - that reason should have gone away before this test.]