[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/StopSchedulerAction.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.xpack.prelert.utils.SchedulerStatusObserver;, +        private TimeValue stopTimeout = TimeValue.timeValueSeconds(30);, +        public void setStopTimeout(TimeValue stopTimeout) {, +            this.stopTimeout = stopTimeout;, +        }, +, +        private final SchedulerStatusObserver schedulerStatusObserver;, +        public TransportAction(Settings settings, TransportService transportService, ThreadPool threadPool,, +                               ClusterService clusterService, TransportCancelTasksAction cancelTasksAction,, +                               TransportListTasksAction listTasksAction) {, +            this.schedulerStatusObserver = new SchedulerStatusObserver(threadPool, clusterService);, +                                    schedulerStatusObserver.waitForStatus(schedulerId, request.stopTimeout, SchedulerStatus.STOPPED, e -> {, +                                        if (e != null) {, +                                            listener.onFailure(e);, +                                        } else {, +                                    });, +                                }, +, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/StopSchedulerAction.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.xpack.prelert.utils.SchedulerStatusObserver;, +        private TimeValue stopTimeout = TimeValue.timeValueSeconds(30);, +        public void setStopTimeout(TimeValue stopTimeout) {, +            this.stopTimeout = stopTimeout;, +        }, +, +        private final SchedulerStatusObserver schedulerStatusObserver;, +        public TransportAction(Settings settings, TransportService transportService, ThreadPool threadPool,, +                               ClusterService clusterService, TransportCancelTasksAction cancelTasksAction,, +                               TransportListTasksAction listTasksAction) {, +            this.schedulerStatusObserver = new SchedulerStatusObserver(threadPool, clusterService);, +                                    schedulerStatusObserver.waitForStatus(schedulerId, request.stopTimeout, SchedulerStatus.STOPPED, e -> {, +                                        if (e != null) {, +                                            listener.onFailure(e);, +                                        } else {, +                                    });, +                                }, +, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/rest/schedulers/RestStartSchedulerAction.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.prelert.job.SchedulerStatus;, +import org.elasticsearch.xpack.prelert.utils.SchedulerStatusObserver;, +    private final SchedulerStatusObserver schedulerStatusObserver;, +    public RestStartSchedulerAction(Settings settings, RestController controller, ThreadPool threadPool,, +                                    ClusterService clusterService) {, +        this.schedulerStatusObserver = new SchedulerStatusObserver(threadPool, clusterService);, +        TimeValue startTimeout = restRequest.paramAsTime("start_timeout", TimeValue.timeValueSeconds(30));, +            Task task = client.executeLocally(StartSchedulerAction.INSTANCE, jobSchedulerRequest, LoggingTaskListener.instance());, +            schedulerStatusObserver.waitForStatus(schedulerId, startTimeout, SchedulerStatus.STARTED, e -> {, +                if (e != null) {, +                    try {, +                        channel.sendResponse(new BytesRestResponse(channel, e));, +                    } catch (IOException ioe) {, +                        throw new RuntimeException(ioe);, +                    }, +                } else {, +                    } catch (IOException ioe) {, +                        throw new RuntimeException(ioe);, +                }, +, +            });, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/StopSchedulerAction.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.xpack.prelert.utils.SchedulerStatusObserver;, +        private TimeValue stopTimeout = TimeValue.timeValueSeconds(30);, +        public void setStopTimeout(TimeValue stopTimeout) {, +            this.stopTimeout = stopTimeout;, +        }, +, +        private final SchedulerStatusObserver schedulerStatusObserver;, +        public TransportAction(Settings settings, TransportService transportService, ThreadPool threadPool,, +                               ClusterService clusterService, TransportCancelTasksAction cancelTasksAction,, +                               TransportListTasksAction listTasksAction) {, +            this.schedulerStatusObserver = new SchedulerStatusObserver(threadPool, clusterService);, +                                    schedulerStatusObserver.waitForStatus(schedulerId, request.stopTimeout, SchedulerStatus.STOPPED, e -> {, +                                        if (e != null) {, +                                            listener.onFailure(e);, +                                        } else {, +                                    });, +                                }, +, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/rest/schedulers/RestStartSchedulerAction.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.prelert.job.SchedulerStatus;, +import org.elasticsearch.xpack.prelert.utils.SchedulerStatusObserver;, +    private final SchedulerStatusObserver schedulerStatusObserver;, +    public RestStartSchedulerAction(Settings settings, RestController controller, ThreadPool threadPool,, +                                    ClusterService clusterService) {, +        this.schedulerStatusObserver = new SchedulerStatusObserver(threadPool, clusterService);, +        TimeValue startTimeout = restRequest.paramAsTime("start_timeout", TimeValue.timeValueSeconds(30));, +            Task task = client.executeLocally(StartSchedulerAction.INSTANCE, jobSchedulerRequest, LoggingTaskListener.instance());, +            schedulerStatusObserver.waitForStatus(schedulerId, startTimeout, SchedulerStatus.STARTED, e -> {, +                if (e != null) {]