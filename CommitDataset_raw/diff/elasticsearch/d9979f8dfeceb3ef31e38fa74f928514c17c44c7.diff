[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            // no commit points, clean the store just so we won't recover wrong files, +            try {, +                indexShard.store().deleteContent();, +            } catch (IOException e) {, +                logger.warn("failed to clean store before starting shard", e);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            // no commit points, clean the store just so we won't recover wrong files, +            try {, +                indexShard.store().deleteContent();, +            } catch (IOException e) {, +                logger.warn("failed to clean store before starting shard", e);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +            shardInjector.getInstance(Translog.class).close(delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            // no commit points, clean the store just so we won't recover wrong files, +            try {, +                indexShard.store().deleteContent();, +            } catch (IOException e) {, +                logger.warn("failed to clean store before starting shard", e);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +            shardInjector.getInstance(Translog.class).close(delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/Translog.java, +    void close(boolean delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            // no commit points, clean the store just so we won't recover wrong files, +            try {, +                indexShard.store().deleteContent();, +            } catch (IOException e) {, +                logger.warn("failed to clean store before starting shard", e);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +            shardInjector.getInstance(Translog.class).close(delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/Translog.java, +    void close(boolean delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/fs/FsChannelSnapshot.java, +        raf.decreaseRefCount(true);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            // no commit points, clean the store just so we won't recover wrong files, +            try {, +                indexShard.store().deleteContent();, +            } catch (IOException e) {, +                logger.warn("failed to clean store before starting shard", e);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +            shardInjector.getInstance(Translog.class).close(delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/Translog.java, +    void close(boolean delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/fs/FsChannelSnapshot.java, +        raf.decreaseRefCount(true);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/fs/FsStreamSnapshot.java, +        raf.decreaseRefCount(true);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            // no commit points, clean the store just so we won't recover wrong files, +            try {, +                indexShard.store().deleteContent();, +            } catch (IOException e) {, +                logger.warn("failed to clean store before starting shard", e);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +            shardInjector.getInstance(Translog.class).close(delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/Translog.java, +    void close(boolean delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/fs/FsChannelSnapshot.java, +        raf.decreaseRefCount(true);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/fs/FsStreamSnapshot.java, +        raf.decreaseRefCount(true);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/fs/FsTranslog.java, +                raf.decreaseRefCount(true);, +                raf.raf().setLength(0);, +            } catch (IOException e) {, +                raf.decreaseRefCount(true);, +                // clean the file if it exists, +                raf.raf().setLength(0);, +            } catch (IOException e) {, +    @Override public void close(boolean delete) {, +                raf.decreaseRefCount(delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            // no commit points, clean the store just so we won't recover wrong files, +            try {, +                indexShard.store().deleteContent();, +            } catch (IOException e) {, +                logger.warn("failed to clean store before starting shard", e);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +            shardInjector.getInstance(Translog.class).close(delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/Translog.java, +    void close(boolean delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/fs/FsChannelSnapshot.java, +        raf.decreaseRefCount(true);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/fs/FsStreamSnapshot.java, +        raf.decreaseRefCount(true);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/fs/FsTranslog.java, +                raf.decreaseRefCount(true);, +                raf.raf().setLength(0);, +            } catch (IOException e) {, +                raf.decreaseRefCount(true);]