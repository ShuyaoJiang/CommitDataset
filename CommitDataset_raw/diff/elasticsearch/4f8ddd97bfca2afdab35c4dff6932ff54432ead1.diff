[+++ b/rest-api-spec/api/cluster.reroute.json, +        "metric": {, +          "type": "list",, +          "options": ["_all", "blocks", "metadata", "nodes", "routing_table", "master_node", "version"],, +          "description": "Limit the information returned to the specified metrics. Defaults to all but metadata", +++ b/rest-api-spec/api/cluster.reroute.json, +        "metric": {, +          "type": "list",, +          "options": ["_all", "blocks", "metadata", "nodes", "routing_table", "master_node", "version"],, +          "description": "Limit the information returned to the specified metrics. Defaults to all but metadata", +++ b/rest-api-spec/test/cluster.reroute/20_response_filtering.yaml, +---, +"Do not return metadata by default":, +  - do:, +      cluster.reroute: {}, +  - is_false: state.metadata, +---, +"return metadata if requested":, +  - do:, +      cluster.reroute:, +        metric: metadata, +, +  - is_true: state.metadata, +  - is_false: state.nodes, +, +++ b/rest-api-spec/api/cluster.reroute.json, +        "metric": {, +          "type": "list",, +          "options": ["_all", "blocks", "metadata", "nodes", "routing_table", "master_node", "version"],, +          "description": "Limit the information returned to the specified metrics. Defaults to all but metadata", +++ b/rest-api-spec/test/cluster.reroute/20_response_filtering.yaml, +---, +"Do not return metadata by default":, +  - do:, +      cluster.reroute: {}, +  - is_false: state.metadata, +---, +"return metadata if requested":, +  - do:, +      cluster.reroute:, +        metric: metadata, +, +  - is_true: state.metadata, +  - is_false: state.nodes, +, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import java.util.EnumSet;, +    public enum Metric {, +        VERSION("version"),, +        MASTER_NODE("master_node"),, +        BLOCKS("blocks"),, +        NODES("nodes"),, +        METADATA("metadata"),, +        ROUTING_TABLE("routing_table"),, +        CUSTOMS("customs");, +, +        private static Map<String, Metric> valueToEnum;, +, +        static {, +            valueToEnum = new HashMap<>();, +            for (Metric metric : Metric.values()) {, +                valueToEnum.put(metric.value, metric);, +            }, +        }, +, +        private final String value;, +, +        private Metric(String value) {, +            this.value = value;, +        }, +, +        public static EnumSet<Metric> parseString(String param, boolean ignoreUnknown) {, +            String[] metrics = Strings.splitStringByCommaToArray(param);, +            EnumSet<Metric> result = EnumSet.noneOf(Metric.class);, +            for (String metric : metrics) {, +                if ("_all".equals(metric)) {, +                    result = EnumSet.allOf(Metric.class);, +                    break;, +                }, +                Metric m = valueToEnum.get(metric);, +                if (m == null) {, +                    if (!ignoreUnknown) {, +                        throw new ElasticsearchIllegalArgumentException("Unknown metric [" + metric + "]");, +                    }, +                } else {, +                    result.add(m);, +                }, +            }, +            return result;, +        }, +, +        @Override, +        public String toString() {, +            return value;, +        }, +    }, +, +, +, +        EnumSet<Metric> metrics = Metric.parseString(params.param("metric", "_all"), true);]