[+++ b/src/main/java/org/elasticsearch/index/aliases/IndexAliasesService.java, +import java.util.Map;, +    public IndexAlias create(String alias, @Nullable CompressedString filter) {, +        return new IndexAlias(alias, filter, parse(alias, filter));, +    }, +, +    public void addAll(Map<String, IndexAlias> aliases) {, +        synchronized (mutex) {, +            this.aliases = newMapBuilder(this.aliases).putAll(aliases).immutableMap();, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/aliases/IndexAliasesService.java, +import java.util.Map;, +    public IndexAlias create(String alias, @Nullable CompressedString filter) {, +        return new IndexAlias(alias, filter, parse(alias, filter));, +    }, +, +    public void addAll(Map<String, IndexAlias> aliases) {, +        synchronized (mutex) {, +            this.aliases = newMapBuilder(this.aliases).putAll(aliases).immutableMap();, +        }, +    }, +, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/aliases/IndexAliasesService.java, +import java.util.Map;, +    public IndexAlias create(String alias, @Nullable CompressedString filter) {, +        return new IndexAlias(alias, filter, parse(alias, filter));, +    }, +, +    public void addAll(Map<String, IndexAlias> aliases) {, +        synchronized (mutex) {, +            this.aliases = newMapBuilder(this.aliases).putAll(aliases).immutableMap();, +        }, +    }, +, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +import static org.elasticsearch.common.xcontent.support.XContentMapValues.nodeBooleanValue;, +        public static final boolean ENABLED = false;, +        private boolean enabled = Defaults.ENABLED;, +        public Builder enabled(boolean enabled) {, +            this.enabled = enabled;, +            return new TTLFieldMapper(fieldType, enabled, defaultTTL, ignoreMalformed(context), provider, fieldDataSettings);, +                if (fieldName.equals("enabled")) {, +                    builder.enabled(nodeBooleanValue(fieldNode));, +    private boolean enabled;, +        this(new FieldType(Defaults.TTL_FIELD_TYPE), Defaults.ENABLED, Defaults.DEFAULT, Defaults.IGNORE_MALFORMED, null, null);, +    protected TTLFieldMapper(FieldType fieldType, boolean enabled, long defaultTTL, Explicit<Boolean> ignoreMalformed,, +        this.enabled = enabled;, +        return this.enabled;, +        if (enabled) {, +        if (enabled == Defaults.ENABLED && defaultTTL == Defaults.DEFAULT) {, +        if (enabled != Defaults.ENABLED) {, +            builder.field("enabled", enabled);, +++ b/src/main/java/org/elasticsearch/index/aliases/IndexAliasesService.java, +import java.util.Map;, +    public IndexAlias create(String alias, @Nullable CompressedString filter) {, +        return new IndexAlias(alias, filter, parse(alias, filter));, +    }, +, +    public void addAll(Map<String, IndexAlias> aliases) {, +        synchronized (mutex) {, +            this.aliases = newMapBuilder(this.aliases).putAll(aliases).immutableMap();, +        }, +    }, +, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +import static org.elasticsearch.common.xcontent.support.XContentMapValues.nodeBooleanValue;, +        public static final boolean ENABLED = false;, +        private boolean enabled = Defaults.ENABLED;, +        public Builder enabled(boolean enabled) {, +            this.enabled = enabled;, +            return new TTLFieldMapper(fieldType, enabled, defaultTTL, ignoreMalformed(context), provider, fieldDataSettings);, +                if (fieldName.equals("enabled")) {, +                    builder.enabled(nodeBooleanValue(fieldNode));, +    private boolean enabled;, +        this(new FieldType(Defaults.TTL_FIELD_TYPE), Defaults.ENABLED, Defaults.DEFAULT, Defaults.IGNORE_MALFORMED, null, null);, +    protected TTLFieldMapper(FieldType fieldType, boolean enabled, long defaultTTL, Explicit<Boolean> ignoreMalformed,, +        this.enabled = enabled;, +        return this.enabled;, +        if (enabled) {, +        if (enabled == Defaults.ENABLED && defaultTTL == Defaults.DEFAULT) {, +        if (enabled != Defaults.ENABLED) {, +            builder.field("enabled", enabled);, +++ b/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +import java.util.Collection;, +import java.util.HashMap;, +import static com.google.common.collect.Maps.newHashMap;, +                processAliases(index, indexMetaData.aliases().values(), indexAliasesService);, +    private void processAliases(String index, Collection<AliasMetaData> aliases, IndexAliasesService indexAliasesService) {, +        HashMap<String, IndexAlias> newAliases = newHashMap();, +        for (AliasMetaData aliasMd : aliases) {, +            String alias = aliasMd.alias();, +            CompressedString filter = aliasMd.filter();, +                    newAliases.put(alias, indexAliasesService.create(alias, filter));, +                        newAliases.put(alias, indexAliasesService.create(alias, filter));, +        }]