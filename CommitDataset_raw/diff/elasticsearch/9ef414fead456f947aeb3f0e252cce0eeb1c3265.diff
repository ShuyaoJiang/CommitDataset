[+++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                ExecutableScript.Factory factory = scriptService.compile(script, ExecutableScript.UPDATE_CONTEXT);, +                ExecutableScript executableScript = factory.newInstance(script.getParams());, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                ExecutableScript.Factory factory = scriptService.compile(script, ExecutableScript.UPDATE_CONTEXT);, +                ExecutableScript executableScript = factory.newInstance(script.getParams());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public final SearchScript getSearchScript(Script script, ScriptContext<SearchScript.Factory> context) {, +        SearchScript.Factory factory = scriptService.compile(script, context);, +        return factory.newInstance(script.getParams(), lookup());, +        Script script, ScriptContext<SearchScript.Factory> context) {, +        SearchScript.Factory factory = scriptService.compile(script, context);, +        return (p) -> factory.newInstance(p, lookup());, +    public final ExecutableScript getExecutableScript(Script script, ScriptContext<ExecutableScript.Factory> context) {, +        ExecutableScript.Factory factory = scriptService.compile(script, context);, +        return factory.newInstance(script.getParams());, +        Script script, ScriptContext<ExecutableScript.Factory> context) {, +        ExecutableScript.Factory factory = scriptService.compile(script, context);, +        return factory::newInstance;, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                ExecutableScript.Factory factory = scriptService.compile(script, ExecutableScript.UPDATE_CONTEXT);, +                ExecutableScript executableScript = factory.newInstance(script.getParams());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public final SearchScript getSearchScript(Script script, ScriptContext<SearchScript.Factory> context) {, +        SearchScript.Factory factory = scriptService.compile(script, context);, +        return factory.newInstance(script.getParams(), lookup());, +        Script script, ScriptContext<SearchScript.Factory> context) {, +        SearchScript.Factory factory = scriptService.compile(script, context);, +        return (p) -> factory.newInstance(p, lookup());, +    public final ExecutableScript getExecutableScript(Script script, ScriptContext<ExecutableScript.Factory> context) {, +        ExecutableScript.Factory factory = scriptService.compile(script, context);, +        return factory.newInstance(script.getParams());, +        Script script, ScriptContext<ExecutableScript.Factory> context) {, +        ExecutableScript.Factory factory = scriptService.compile(script, context);, +        return factory::newInstance;, +++ b/core/src/main/java/org/elasticsearch/plugins/ScriptPlugin.java, +import java.util.Collection;, +import java.util.Map;, +     * Returns a {@link ScriptEngine} instance or <code>null</code> if this plugin doesn't add a new script engine., +     * @param settings Node settings, +     * @param contexts The contexts that {@link ScriptEngine#compile(String, String, ScriptContext, Map)} may be called with, +    default ScriptEngine getScriptEngine(Settings settings, Collection<ScriptContext<?>> contexts) {, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                ExecutableScript.Factory factory = scriptService.compile(script, ExecutableScript.UPDATE_CONTEXT);, +                ExecutableScript executableScript = factory.newInstance(script.getParams());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public final SearchScript getSearchScript(Script script, ScriptContext<SearchScript.Factory> context) {, +        SearchScript.Factory factory = scriptService.compile(script, context);, +        return factory.newInstance(script.getParams(), lookup());, +        Script script, ScriptContext<SearchScript.Factory> context) {, +        SearchScript.Factory factory = scriptService.compile(script, context);, +        return (p) -> factory.newInstance(p, lookup());, +    public final ExecutableScript getExecutableScript(Script script, ScriptContext<ExecutableScript.Factory> context) {, +        ExecutableScript.Factory factory = scriptService.compile(script, context);, +        return factory.newInstance(script.getParams());, +        Script script, ScriptContext<ExecutableScript.Factory> context) {, +        ExecutableScript.Factory factory = scriptService.compile(script, context);, +        return factory::newInstance;, +++ b/core/src/main/java/org/elasticsearch/plugins/ScriptPlugin.java, +import java.util.Collection;, +import java.util.Map;, +     * Returns a {@link ScriptEngine} instance or <code>null</code> if this plugin doesn't add a new script engine., +     * @param settings Node settings, +     * @param contexts The contexts that {@link ScriptEngine#compile(String, String, ScriptContext, Map)} may be called with, +    default ScriptEngine getScriptEngine(Settings settings, Collection<ScriptContext<?>> contexts) {, +++ b/core/src/main/java/org/elasticsearch/script/ExecutableScript.java, +    interface Factory {, +    ScriptContext<Factory> CONTEXT = new ScriptContext<>("executable", Factory.class);, +    ScriptContext<Factory> AGGS_CONTEXT = new ScriptContext<>("aggs_executable", Factory.class);, +    ScriptContext<Factory> UPDATE_CONTEXT = new ScriptContext<>("update", Factory.class);, +    ScriptContext<Factory> INGEST_CONTEXT = new ScriptContext<>("ingest", Factory.class);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +                ExecutableScript.Factory factory = scriptService.compile(script, ExecutableScript.UPDATE_CONTEXT);, +                ExecutableScript executableScript = factory.newInstance(script.getParams());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public final SearchScript getSearchScript(Script script, ScriptContext<SearchScript.Factory> context) {, +        SearchScript.Factory factory = scriptService.compile(script, context);, +        return factory.newInstance(script.getParams(), lookup());, +        Script script, ScriptContext<SearchScript.Factory> context) {, +        SearchScript.Factory factory = scriptService.compile(script, context);, +        return (p) -> factory.newInstance(p, lookup());, +    public final ExecutableScript getExecutableScript(Script script, ScriptContext<ExecutableScript.Factory> context) {, +        ExecutableScript.Factory factory = scriptService.compile(script, context);, +        return factory.newInstance(script.getParams());, +        Script script, ScriptContext<ExecutableScript.Factory> context) {, +        ExecutableScript.Factory factory = scriptService.compile(script, context);, +        return factory::newInstance;, +++ b/core/src/main/java/org/elasticsearch/plugins/ScriptPlugin.java, +import java.util.Collection;, +import java.util.Map;, +     * Returns a {@link ScriptEngine} instance or <code>null</code> if this plugin doesn't add a new script engine., +     * @param settings Node settings, +     * @param contexts The contexts that {@link ScriptEngine#compile(String, String, ScriptContext, Map)} may be called with, +    default ScriptEngine getScriptEngine(Settings settings, Collection<ScriptContext<?>> contexts) {, +++ b/core/src/main/java/org/elasticsearch/script/ExecutableScript.java, +    interface Factory {, +    ScriptContext<Factory> CONTEXT = new ScriptContext<>("executable", Factory.class);, +    ScriptContext<Factory> AGGS_CONTEXT = new ScriptContext<>("aggs_executable", Factory.class);, +    ScriptContext<Factory> UPDATE_CONTEXT = new ScriptContext<>("update", Factory.class);, +    ScriptContext<Factory> INGEST_CONTEXT = new ScriptContext<>("ingest", Factory.class);]