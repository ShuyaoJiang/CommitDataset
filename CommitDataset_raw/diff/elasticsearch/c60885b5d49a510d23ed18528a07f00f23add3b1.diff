[+++ b/docs/reference/ingest/ingest-node.asciidoc, +The following example sets a new field called `field_a_plus_b` to be the sum of two existing, +numeric fields `field_a` and `field_b`:, +    "field": "field_a_plus_b",, +    "inline": "return ctx.field_a + ctx.field_b", +++ b/docs/reference/ingest/ingest-node.asciidoc, +The following example sets a new field called `field_a_plus_b` to be the sum of two existing, +numeric fields `field_a` and `field_b`:, +    "field": "field_a_plus_b",, +    "inline": "return ctx.field_a + ctx.field_b", +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +import java.util.HashMap;, +import org.elasticsearch.script.CompiledScript;, +        Map<String, Object> vars = new HashMap<>();, +        vars.put("ctx", document.getSourceAndMetadata());, +        CompiledScript compiledScript = scriptService.compile(script, ScriptContext.Standard.INGEST, emptyMap());, +        ExecutableScript executableScript = scriptService.executable(compiledScript, vars);, +                script = new Script(file, FILE, lang, emptyMap());, +                script = new Script(inline, INLINE, lang, emptyMap());, +                script = new Script(id, STORED, lang, emptyMap());, +++ b/docs/reference/ingest/ingest-node.asciidoc, +The following example sets a new field called `field_a_plus_b` to be the sum of two existing, +numeric fields `field_a` and `field_b`:, +    "field": "field_a_plus_b",, +    "inline": "return ctx.field_a + ctx.field_b", +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +import java.util.HashMap;, +import org.elasticsearch.script.CompiledScript;, +        Map<String, Object> vars = new HashMap<>();, +        vars.put("ctx", document.getSourceAndMetadata());, +        CompiledScript compiledScript = scriptService.compile(script, ScriptContext.Standard.INGEST, emptyMap());, +        ExecutableScript executableScript = scriptService.executable(compiledScript, vars);, +                script = new Script(file, FILE, lang, emptyMap());, +                script = new Script(inline, INLINE, lang, emptyMap());, +                script = new Script(id, STORED, lang, emptyMap());, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ScriptProcessorTests.java, +        CompiledScript compiledScript = mock(CompiledScript.class);, +        when(scriptService.compile(any(), any(), any())).thenReturn(compiledScript);, +        when(scriptService.executable(any(), any())).thenReturn(executableScript);, +++ b/docs/reference/ingest/ingest-node.asciidoc, +The following example sets a new field called `field_a_plus_b` to be the sum of two existing, +numeric fields `field_a` and `field_b`:, +    "field": "field_a_plus_b",, +    "inline": "return ctx.field_a + ctx.field_b", +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +import java.util.HashMap;, +import org.elasticsearch.script.CompiledScript;, +        Map<String, Object> vars = new HashMap<>();, +        vars.put("ctx", document.getSourceAndMetadata());, +        CompiledScript compiledScript = scriptService.compile(script, ScriptContext.Standard.INGEST, emptyMap());, +        ExecutableScript executableScript = scriptService.executable(compiledScript, vars);, +                script = new Script(file, FILE, lang, emptyMap());, +                script = new Script(inline, INLINE, lang, emptyMap());, +                script = new Script(id, STORED, lang, emptyMap());, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ScriptProcessorTests.java, +        CompiledScript compiledScript = mock(CompiledScript.class);, +        when(scriptService.compile(any(), any(), any())).thenReturn(compiledScript);, +        when(scriptService.executable(any(), any())).thenReturn(executableScript);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFor.java, +            block.continu = begin;, +            block.brake = end;, +++ b/docs/reference/ingest/ingest-node.asciidoc, +The following example sets a new field called `field_a_plus_b` to be the sum of two existing, +numeric fields `field_a` and `field_b`:, +    "field": "field_a_plus_b",, +    "inline": "return ctx.field_a + ctx.field_b", +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +import java.util.HashMap;, +import org.elasticsearch.script.CompiledScript;, +        Map<String, Object> vars = new HashMap<>();, +        vars.put("ctx", document.getSourceAndMetadata());, +        CompiledScript compiledScript = scriptService.compile(script, ScriptContext.Standard.INGEST, emptyMap());, +        ExecutableScript executableScript = scriptService.executable(compiledScript, vars);, +                script = new Script(file, FILE, lang, emptyMap());, +                script = new Script(inline, INLINE, lang, emptyMap());, +                script = new Script(id, STORED, lang, emptyMap());, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ScriptProcessorTests.java, +        CompiledScript compiledScript = mock(CompiledScript.class);, +        when(scriptService.compile(any(), any(), any())).thenReturn(compiledScript);, +        when(scriptService.executable(any(), any())).thenReturn(executableScript);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFor.java, +            block.continu = begin;, +            block.brake = end;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SSubEachArray.java, +        block.continu = begin;, +        block.brake = end;, +++ b/docs/reference/ingest/ingest-node.asciidoc, +The following example sets a new field called `field_a_plus_b` to be the sum of two existing, +numeric fields `field_a` and `field_b`:, +    "field": "field_a_plus_b",, +    "inline": "return ctx.field_a + ctx.field_b", +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +import java.util.HashMap;, +import org.elasticsearch.script.CompiledScript;, +        Map<String, Object> vars = new HashMap<>();, +        vars.put("ctx", document.getSourceAndMetadata());, +        CompiledScript compiledScript = scriptService.compile(script, ScriptContext.Standard.INGEST, emptyMap());, +        ExecutableScript executableScript = scriptService.executable(compiledScript, vars);, +                script = new Script(file, FILE, lang, emptyMap());, +                script = new Script(inline, INLINE, lang, emptyMap());]