[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +            plugins = new PluginsInfo();, +            plugins.readFrom(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +            plugins = new PluginsInfo();, +            plugins.readFrom(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginsInfo.java, +/**, + * Information about plugins and modules, + */, +    private List<PluginInfo> plugins;, +    private List<PluginInfo> modules;, +        plugins = new ArrayList<>();, +        modules = new ArrayList<>();, +     * Returns an ordered list based on plugins name, +    public List<PluginInfo> getPluginInfos() {, +        List<PluginInfo> plugins = new ArrayList<>(this.plugins);, +        Collections.sort(plugins, (p1, p2) -> p1.getName().compareTo(p2.getName()));, +        return plugins;, +    /**, +     * Returns an ordered list based on modules name, +     */, +    public List<PluginInfo> getModuleInfos() {, +        List<PluginInfo> modules = new ArrayList<>(this.modules);, +        Collections.sort(modules, (p1, p2) -> p1.getName().compareTo(p2.getName()));, +        return modules;, +    public void addPlugin(PluginInfo info) {, +        plugins.add(info);, +    }, +    , +    public void addModule(PluginInfo info) {, +        modules.add(info);, +        if (plugins.isEmpty() == false || modules.isEmpty() == false) {, +            throw new IllegalStateException("instance is already populated");, +        }, +            plugins.add(PluginInfo.readFromStream(in));, +        }, +        int modules_size = in.readInt();, +        for (int i = 0; i < modules_size; i++) {, +            modules.add(PluginInfo.readFromStream(in));, +        out.writeInt(plugins.size());, +        for (PluginInfo plugin : getPluginInfos()) {, +        out.writeInt(modules.size());, +        for (PluginInfo module : getModuleInfos()) {, +            module.writeTo(out);, +        }, +        builder.startArray("plugins");, +        for (PluginInfo pluginInfo : getPluginInfos()) {, +        // TODO: not ideal, make a better api for this (e.g. with jar metadata, and so on), +        builder.startArray("modules");, +        for (PluginInfo moduleInfo : getModuleInfos()) {, +            moduleInfo.toXContent(builder, params);, +        }, +        builder.endArray();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +            plugins = new PluginsInfo();, +            plugins.readFrom(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginsInfo.java, +/**, + * Information about plugins and modules, + */, +    private List<PluginInfo> plugins;, +    private List<PluginInfo> modules;, +        plugins = new ArrayList<>();, +        modules = new ArrayList<>();, +     * Returns an ordered list based on plugins name, +    public List<PluginInfo> getPluginInfos() {, +        List<PluginInfo> plugins = new ArrayList<>(this.plugins);, +        Collections.sort(plugins, (p1, p2) -> p1.getName().compareTo(p2.getName()));, +        return plugins;, +    /**, +     * Returns an ordered list based on modules name, +     */, +    public List<PluginInfo> getModuleInfos() {, +        List<PluginInfo> modules = new ArrayList<>(this.modules);, +        Collections.sort(modules, (p1, p2) -> p1.getName().compareTo(p2.getName()));, +        return modules;, +    public void addPlugin(PluginInfo info) {, +        plugins.add(info);, +    }, +    , +    public void addModule(PluginInfo info) {, +        modules.add(info);, +        if (plugins.isEmpty() == false || modules.isEmpty() == false) {, +            throw new IllegalStateException("instance is already populated");, +        }, +            plugins.add(PluginInfo.readFromStream(in));, +        }, +        int modules_size = in.readInt();, +        for (int i = 0; i < modules_size; i++) {, +            modules.add(PluginInfo.readFromStream(in));, +        out.writeInt(plugins.size());, +        for (PluginInfo plugin : getPluginInfos()) {, +        out.writeInt(modules.size());, +        for (PluginInfo module : getModuleInfos()) {, +            module.writeTo(out);, +        }, +        builder.startArray("plugins");, +        for (PluginInfo pluginInfo : getPluginInfos()) {, +        // TODO: not ideal, make a better api for this (e.g. with jar metadata, and so on)]