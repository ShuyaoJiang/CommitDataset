[+++ b/server/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.index.seqno.RetentionLeaseActions;, +import org.elasticsearch.rest.action.admin.cluster.RestAddVotingConfigExclusionAction;, +        // retention leases, +        actions.register(RetentionLeaseActions.Add.INSTANCE, RetentionLeaseActions.Add.TransportAction.class);, +        actions.register(RetentionLeaseActions.Renew.INSTANCE, RetentionLeaseActions.Renew.TransportAction.class);, +        actions.register(RetentionLeaseActions.Remove.INSTANCE, RetentionLeaseActions.Remove.TransportAction.class);, +, +++ b/server/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.index.seqno.RetentionLeaseActions;, +import org.elasticsearch.rest.action.admin.cluster.RestAddVotingConfigExclusionAction;, +        // retention leases, +        actions.register(RetentionLeaseActions.Add.INSTANCE, RetentionLeaseActions.Add.TransportAction.class);, +        actions.register(RetentionLeaseActions.Renew.INSTANCE, RetentionLeaseActions.Renew.TransportAction.class);, +        actions.register(RetentionLeaseActions.Remove.INSTANCE, RetentionLeaseActions.Remove.TransportAction.class);, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract Closeable acquireRetentionLock();, +    /**, +     * Gets the minimum retained sequence number for this engine., +     *, +     * @return the minimum retained sequence number, +     */, +    public abstract long getMinRetainedSeqNo();, +, +++ b/server/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.index.seqno.RetentionLeaseActions;, +import org.elasticsearch.rest.action.admin.cluster.RestAddVotingConfigExclusionAction;, +        // retention leases, +        actions.register(RetentionLeaseActions.Add.INSTANCE, RetentionLeaseActions.Add.TransportAction.class);, +        actions.register(RetentionLeaseActions.Renew.INSTANCE, RetentionLeaseActions.Renew.TransportAction.class);, +        actions.register(RetentionLeaseActions.Remove.INSTANCE, RetentionLeaseActions.Remove.TransportAction.class);, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract Closeable acquireRetentionLock();, +    /**, +     * Gets the minimum retained sequence number for this engine., +     *, +     * @return the minimum retained sequence number, +     */, +    public abstract long getMinRetainedSeqNo();, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public final long getMinRetainedSeqNo() {, +    public Closeable acquireRetentionLock() {, +++ b/server/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.index.seqno.RetentionLeaseActions;, +import org.elasticsearch.rest.action.admin.cluster.RestAddVotingConfigExclusionAction;, +        // retention leases, +        actions.register(RetentionLeaseActions.Add.INSTANCE, RetentionLeaseActions.Add.TransportAction.class);, +        actions.register(RetentionLeaseActions.Renew.INSTANCE, RetentionLeaseActions.Renew.TransportAction.class);, +        actions.register(RetentionLeaseActions.Remove.INSTANCE, RetentionLeaseActions.Remove.TransportAction.class);, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract Closeable acquireRetentionLock();, +    /**, +     * Gets the minimum retained sequence number for this engine., +     *, +     * @return the minimum retained sequence number, +     */, +    public abstract long getMinRetainedSeqNo();, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public final long getMinRetainedSeqNo() {, +    public Closeable acquireRetentionLock() {, +++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +    public Closeable acquireRetentionLock() {, +    public long getMinRetainedSeqNo() {, +        throw new UnsupportedOperationException();, +    }, +, +    @Override, +++ b/server/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.index.seqno.RetentionLeaseActions;, +import org.elasticsearch.rest.action.admin.cluster.RestAddVotingConfigExclusionAction;, +        // retention leases, +        actions.register(RetentionLeaseActions.Add.INSTANCE, RetentionLeaseActions.Add.TransportAction.class);, +        actions.register(RetentionLeaseActions.Renew.INSTANCE, RetentionLeaseActions.Renew.TransportAction.class);, +        actions.register(RetentionLeaseActions.Remove.INSTANCE, RetentionLeaseActions.Remove.TransportAction.class);, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract Closeable acquireRetentionLock();, +    /**, +     * Gets the minimum retained sequence number for this engine., +     *, +     * @return the minimum retained sequence number, +     */, +    public abstract long getMinRetainedSeqNo();, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public final long getMinRetainedSeqNo() {, +    public Closeable acquireRetentionLock() {, +++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +    public Closeable acquireRetentionLock() {, +    public long getMinRetainedSeqNo() {]