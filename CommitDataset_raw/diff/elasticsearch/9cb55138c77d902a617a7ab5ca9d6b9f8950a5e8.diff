[+++ b/src/test/java/org/elasticsearch/gateway/fs/IndexGatewayTests.java, +import org.apache.lucene.util.SetOnce;, +import org.elasticsearch.test.AbstractIntegrationTest;, +import org.elasticsearch.test.AbstractIntegrationTest.ClusterScope;, +import org.elasticsearch.test.AbstractIntegrationTest.Scope;, +@ClusterScope(scope=Scope.TEST, numNodes=0), +public class IndexGatewayTests extends AbstractIntegrationTest {, +    private final SetOnce<Settings> settings = new SetOnce<Settings>();, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        if (settings.get() == null) {, +            settings.set(builder.build());, +        }, +        return settings.get();, +        return "fs".equals(settings.get().get("index.store.type"));, +        cluster().startNode(nodeSettings(0));, +        Environment environment = cluster().getInstance(Environment.class);, +        ClusterHealthResponse clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();, +        client().admin().indices().prepareCreate("test").execute().actionGet();, +        PutMappingResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("type1").setSource(mappingSource()).execute().actionGet();, +        ClusterStateResponse clusterState = client().admin().cluster().state(clusterStateRequest()).actionGet();, +        client().index(Requests.indexRequest("test").type("type1").id("1").source(source("1", "test"))).actionGet();, +        client().index(Requests.indexRequest("test").type("type1").id("2").source(source("2", "test"))).actionGet();, +        client().admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();, +        client().delete(deleteRequest("test").type("type1").id("1")).actionGet();, +        client().admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();, +        client().admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();, +        cluster().stopRandomNode();, +        cluster().startNode(nodeSettings(0));, +        clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();, +        clusterState = client().admin().cluster().state(clusterStateRequest()).actionGet();, +        GetResponse getResponse = client().get(getRequest("test").type("type1").id("1")).actionGet();, +        getResponse = client().get(getRequest("test").type("type1").id("2")).actionGet();, +        client().admin().indices().flush(flushRequest("test")).actionGet();, +        client().index(Requests.indexRequest("test").type("type1").id("3").source(source("3", "test"))).actionGet();, +        client().admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();, +        client().admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();, +        cluster().stopRandomNode();, +        cluster().startNode(nodeSettings(0));, +        clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();, +        getResponse = client().get(getRequest("test").type("type1").id("1")).actionGet();, +        getResponse = client().get(getRequest("test").type("type1").id("2")).actionGet();, +        getResponse = client().get(getRequest("test").type("type1").id("3")).actionGet();, +        cluster().stopRandomNode();, +        cluster().startNode(nodeSettings(0));, +        clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();, +        getResponse = client().get(getRequest("test").type("type1").id("1")).actionGet();, +        getResponse = client().get(getRequest("test").type("type1").id("2")).actionGet();, +        getResponse = client().get(getRequest("test").type("type1").id("3")).actionGet();, +        client().admin().indices().flush(flushRequest("test")).actionGet();, +        client().admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();, +        client().admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();, +        cluster().stopRandomNode();, +        cluster().startNode(nodeSettings(0));, +        clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();, +        getResponse = client().get(getRequest("test").type("type1").id("1")).actionGet();, +        getResponse = client().get(getRequest("test").type("type1").id("2")).actionGet();, +        getResponse = client().get(getRequest("test").type("type1").id("3")).actionGet();, +        client().admin().indices().delete(deleteIndexRequest("test")).actionGet();, +        cluster().startNode(nodeSettings(0));, +        ClusterHealthResponse clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();, +        Environment environment = cluster().getInstance(Environment.class);, +        client().admin().indices().prepareCreate("test").execute().actionGet();, +        clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();, +        client().admin().indices().prepareRefresh().execute().actionGet();, +        assertThat(client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(0l));, +            client().prepareIndex("test", "type1", Long.toString(i)), +                client().admin().indices().prepareGatewaySnapshot().execute().actionGet();, +                client().admin().indices().prepareFlush().execute().actionGet();, +        client().admin().indices().prepareRefresh().execute().actionGet();, +        assertThat(client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(1234l));, +        cluster().stopRandomNode();, +        cluster().startNode(nodeSettings(0));, +        clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();, +        assertThat(client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(1234l));, +        IndicesStatusResponse statusResponse = client().admin().indices().prepareStatus().setRecovery(true).execute().actionGet();, +        cluster().startNode(nodeSettings(0));, +        ClusterHealthResponse clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();, +        client().admin().indices().create(createIndexRequest("test")).actionGet();, +        cluster().stopRandomNode();, +        cluster().startNode(nodeSettings(0));, +            client().admin().indices().create(createIndexRequest("test")).actionGet();, +++ b/src/test/java/org/elasticsearch/gateway/fs/IndexGatewayTests.java, +import org.apache.lucene.util.SetOnce;, +import org.elasticsearch.test.AbstractIntegrationTest;, +import org.elasticsearch.test.AbstractIntegrationTest.ClusterScope;, +import org.elasticsearch.test.AbstractIntegrationTest.Scope;, +@ClusterScope(scope=Scope.TEST, numNodes=0), +public class IndexGatewayTests extends AbstractIntegrationTest {, +    private final SetOnce<Settings> settings = new SetOnce<Settings>();, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        if (settings.get() == null) {, +            settings.set(builder.build());, +        }, +        return settings.get();, +        return "fs".equals(settings.get().get("index.store.type"));, +        cluster().startNode(nodeSettings(0));, +        Environment environment = cluster().getInstance(Environment.class);, +        ClusterHealthResponse clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();]