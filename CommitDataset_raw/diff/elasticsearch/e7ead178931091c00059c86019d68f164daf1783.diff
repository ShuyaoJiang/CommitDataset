[+++ b/server/src/main/java/org/elasticsearch/common/component/AbstractComponent.java, +        this.logger = LogManager.getLogger(getClass());, +++ b/server/src/main/java/org/elasticsearch/common/component/AbstractComponent.java, +        this.logger = LogManager.getLogger(getClass());, +++ b/server/src/main/java/org/elasticsearch/common/component/AbstractLifecycleComponent.java, +++ b/server/src/main/java/org/elasticsearch/common/component/AbstractComponent.java, +        this.logger = LogManager.getLogger(getClass());, +++ b/server/src/main/java/org/elasticsearch/common/component/AbstractLifecycleComponent.java, +++ b/server/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +         * At one point we didn't use LogManager.getLogger(clazz) because, +         * of a bug in log4j that has since been fixed:, +         * https://github.com/apache/logging-log4j2/commit/ae33698a1846a5e10684ec3e52a99223f06047af, +         *, +         * For now we continue to use LogManager.getLogger(clazz.getName()), +         * because we expect to eventually migrate away from needing this, +         * method entirely., +++ b/server/src/main/java/org/elasticsearch/common/component/AbstractComponent.java, +        this.logger = LogManager.getLogger(getClass());, +++ b/server/src/main/java/org/elasticsearch/common/component/AbstractLifecycleComponent.java, +++ b/server/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +         * At one point we didn't use LogManager.getLogger(clazz) because, +         * of a bug in log4j that has since been fixed:, +         * https://github.com/apache/logging-log4j2/commit/ae33698a1846a5e10684ec3e52a99223f06047af, +         *, +         * For now we continue to use LogManager.getLogger(clazz.getName()), +         * because we expect to eventually migrate away from needing this, +         * method entirely., +++ b/server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java, +                        clusterApplierService.getClass().getCanonicalName(),, +                        clusterApplierService.getClass().getCanonicalName(),, +                        clusterApplierService.getClass().getCanonicalName(),, +                        clusterApplierService.getClass().getCanonicalName(),, +                        clusterApplierService.getClass().getCanonicalName(),, +++ b/server/src/main/java/org/elasticsearch/common/component/AbstractComponent.java, +        this.logger = LogManager.getLogger(getClass());, +++ b/server/src/main/java/org/elasticsearch/common/component/AbstractLifecycleComponent.java, +++ b/server/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +         * At one point we didn't use LogManager.getLogger(clazz) because, +         * of a bug in log4j that has since been fixed:, +         * https://github.com/apache/logging-log4j2/commit/ae33698a1846a5e10684ec3e52a99223f06047af, +         *, +         * For now we continue to use LogManager.getLogger(clazz.getName()), +         * because we expect to eventually migrate away from needing this, +         * method entirely., +++ b/server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java, +                        clusterApplierService.getClass().getCanonicalName(),, +                        clusterApplierService.getClass().getCanonicalName(),, +                        clusterApplierService.getClass().getCanonicalName(),, +                        clusterApplierService.getClass().getCanonicalName(),, +                        clusterApplierService.getClass().getCanonicalName(),, +++ b/server/src/test/java/org/elasticsearch/cluster/service/MasterServiceTests.java, +                masterService.getClass().getCanonicalName(),, +                masterService.getClass().getCanonicalName(),, +                masterService.getClass().getCanonicalName(),, +                masterService.getClass().getCanonicalName(),, +                masterService.getClass().getCanonicalName(),, +                masterService.getClass().getCanonicalName(),, +                masterService.getClass().getCanonicalName(),]