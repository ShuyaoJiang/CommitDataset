[+++ b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +, +            if (Regex.simpleMatch(excludes, path)) {, +, +            boolean exactIncludeMatch = false; // true if the current position was specifically mentioned, +            boolean pathIsPrefixOfAnInclude = false; // true if potentially a sub scope can be included, +            }, +, +            if (!(pathIsPrefixOfAnInclude || exactIncludeMatch)) {, +                if (exactIncludeMatch || !innerInto.isEmpty()) {, +++ b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +, +            if (Regex.simpleMatch(excludes, path)) {, +, +            boolean exactIncludeMatch = false; // true if the current position was specifically mentioned, +            boolean pathIsPrefixOfAnInclude = false; // true if potentially a sub scope can be included, +            }, +, +            if (!(pathIsPrefixOfAnInclude || exactIncludeMatch)) {, +                if (exactIncludeMatch || !innerInto.isEmpty()) {, +++ b/src/test/java/org/elasticsearch/common/xcontent/support/XContentMapValuesTests.java, +import org.hamcrest.Matchers;, +                .field("something_else", "value3"), +        assertThat(filter.size(), equalTo(2));, +        assertThat(filter.get("something_else").toString(), equalTo("value3"));, +, +    @SuppressWarnings({"unchecked"}), +    @Test, +    public void testThatFilterIncludesEmptyObjectWhenUsingIncludes() throws Exception {, +        XContentBuilder builder = XContentFactory.jsonBuilder().startObject(), +                .startObject("obj"), +                .endObject(), +                .endObject();, +, +        Tuple<XContentType, Map<String, Object>> mapTuple = XContentHelper.convertToMap(builder.bytes(), true);, +        Map<String, Object> filteredSource = XContentMapValues.filter(mapTuple.v2(), new String[]{"obj"}, Strings.EMPTY_ARRAY);, +, +        assertThat(mapTuple.v2(), equalTo(filteredSource));, +    }, +, +    @Test, +    public void testThatFilterIncludesEmptyObjectWhenUsingExcludes() throws Exception {, +        XContentBuilder builder = XContentFactory.jsonBuilder().startObject(), +                .startObject("obj"), +                .endObject(), +                .endObject();, +, +        Tuple<XContentType, Map<String, Object>> mapTuple = XContentHelper.convertToMap(builder.bytes(), true);, +        Map<String, Object> filteredSource = XContentMapValues.filter(mapTuple.v2(), Strings.EMPTY_ARRAY, new String[]{"nonExistingField"});, +, +        assertThat(mapTuple.v2(), equalTo(filteredSource));, +    }, +, +    @Test, +    public void testNotOmittingObjectsWithExcludedProperties() throws Exception {, +        XContentBuilder builder = XContentFactory.jsonBuilder().startObject(), +                .startObject("obj"), +                .field("f1", "v1"), +                .endObject(), +                .endObject();, +, +        Tuple<XContentType, Map<String, Object>> mapTuple = XContentHelper.convertToMap(builder.bytes(), true);, +        Map<String, Object> filteredSource = XContentMapValues.filter(mapTuple.v2(), Strings.EMPTY_ARRAY, new String[]{"obj.f1"});, +, +        assertThat(filteredSource.size(), equalTo(1));, +        assertThat(filteredSource, hasKey("obj"));, +        assertThat(((Map) filteredSource.get("obj")).size(), equalTo(0));, +    }, +, +    @SuppressWarnings({"unchecked"}), +    @Test, +    public void testNotOmittingObjectWithNestedExcludedObject() throws Exception {, +        XContentBuilder builder = XContentFactory.jsonBuilder().startObject(), +                .startObject("obj1"), +                .startObject("obj2"), +                .startObject("obj3"), +                .endObject(), +                .endObject(), +                .endObject(), +                .endObject();, +, +        // implicit include, +        Tuple<XContentType, Map<String, Object>> mapTuple = XContentHelper.convertToMap(builder.bytes(), true);, +        Map<String, Object> filteredSource = XContentMapValues.filter(mapTuple.v2(), Strings.EMPTY_ARRAY, new String[]{"*.obj2"});, +, +        assertThat(filteredSource.size(), equalTo(1));, +        assertThat(filteredSource, hasKey("obj1"));, +        assertThat(((Map) filteredSource.get("obj1")).size(), Matchers.equalTo(0));, +, +        // explicit include, +        filteredSource = XContentMapValues.filter(mapTuple.v2(), new String[]{"obj1"}, new String[]{"*.obj2"});, +        assertThat(filteredSource.size(), equalTo(1));, +        assertThat(filteredSource, hasKey("obj1"));, +        assertThat(((Map) filteredSource.get("obj1")).size(), Matchers.equalTo(0));, +, +        // wild card include, +        filteredSource = XContentMapValues.filter(mapTuple.v2(), new String[]{"*.obj2"}, new String[]{"*.obj3"});, +        assertThat(filteredSource.size(), equalTo(1));, +        assertThat(filteredSource, hasKey("obj1"));, +        assertThat(((Map<String, Object>) filteredSource.get("obj1")), hasKey("obj2"));]