[+++ b/.gitignore, +, +++ b/.gitignore, +, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +, +    public BlendedTermQuery(Term[] terms) {, +        return "blended(terms: " + Arrays.toString(terms) + ")";, +, +        return new BlendedTermQuery(terms) {, +        return new BlendedTermQuery(terms) {, +        return new BlendedTermQuery(terms) {, +++ b/.gitignore, +, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +, +    public BlendedTermQuery(Term[] terms) {, +        return "blended(terms: " + Arrays.toString(terms) + ")";, +, +        return new BlendedTermQuery(terms) {, +        return new BlendedTermQuery(terms) {, +        return new BlendedTermQuery(terms) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +                    numberOfPendingTasks, numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(settings, clusterState),, +                numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(settings, clusterState), pendingTaskTimeInQueue);, +++ b/.gitignore, +, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +, +    public BlendedTermQuery(Term[] terms) {, +        return "blended(terms: " + Arrays.toString(terms) + ")";, +, +        return new BlendedTermQuery(terms) {, +        return new BlendedTermQuery(terms) {, +        return new BlendedTermQuery(terms) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +                    numberOfPendingTasks, numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(settings, clusterState),, +                numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(settings, clusterState), pendingTaskTimeInQueue);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +        final RoutingNodes routingNodes = state.routingNodes();, +++ b/.gitignore, +, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +, +    public BlendedTermQuery(Term[] terms) {, +        return "blended(terms: " + Arrays.toString(terms) + ")";, +, +        return new BlendedTermQuery(terms) {, +        return new BlendedTermQuery(terms) {, +        return new BlendedTermQuery(terms) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +                    numberOfPendingTasks, numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(settings, clusterState),, +                numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(settings, clusterState), pendingTaskTimeInQueue);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +        final RoutingNodes routingNodes = state.routingNodes();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JVMCheck.java, +            sb.append("Java version: ").append(Constants.JAVA_VERSION);, +            Loggers.getLogger(JVMCheck.class).warn("bypassing jvm version check for version [{}], this can result in data corruption!", Constants.JAVA_VERSION);, +                sb.append("Your version: " + Constants.JVM_VERSION);, +++ b/.gitignore, +, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +, +    public BlendedTermQuery(Term[] terms) {, +        return "blended(terms: " + Arrays.toString(terms) + ")";, +, +        return new BlendedTermQuery(terms) {, +        return new BlendedTermQuery(terms) {, +        return new BlendedTermQuery(terms) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +                    numberOfPendingTasks, numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(settings, clusterState),, +                numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(settings, clusterState), pendingTaskTimeInQueue);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +        final RoutingNodes routingNodes = state.routingNodes();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JVMCheck.java, +            sb.append("Java version: ").append(Constants.JAVA_VERSION);, +            Loggers.getLogger(JVMCheck.class).warn("bypassing jvm version check for version [{}], this can result in data corruption!", Constants.JAVA_VERSION);, +                sb.append("Your version: " + Constants.JVM_VERSION);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +    public RoutingNodes routingNodes() {, +        return routingTable.routingNodes(this);, +    }, +, +    public RoutingNodes getRoutingNodes() {, +        return readOnlyRoutingNodes();, +    }, +, +     * Returns a built (on demand) routing nodes view of the routing table. <b>NOTE, the routing nodes, +     * are mutable, use them just for read operations</b>, +    public RoutingNodes readOnlyRoutingNodes() {, +        routingNodes = routingTable.routingNodes(this);, +        sb.append(readOnlyRoutingNodes().prettyPrint());, +            for (ShardRouting shardRouting : readOnlyRoutingNodes().unassigned()) {, +            for (RoutingNode routingNode : readOnlyRoutingNodes()) {, +++ b/.gitignore, +, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +, +    public BlendedTermQuery(Term[] terms) {, +        return "blended(terms: " + Arrays.toString(terms) + ")";]