[+++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    public static Logger getLogger(Class<?> clazz, ShardId shardId, String... prefixes) {, +        return getLogger(clazz, Settings.EMPTY,, +                shardId.getIndex(), asArrayList(Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +     * Just like {@link #getLogger(Class, ShardId, String...)} but String loggerName instead of, +    public static Logger getLogger(String loggerName, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, Settings.EMPTY,, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    public static Logger getLogger(Class<?> clazz, ShardId shardId, String... prefixes) {, +        return getLogger(clazz, Settings.EMPTY,, +                shardId.getIndex(), asArrayList(Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +     * Just like {@link #getLogger(Class, ShardId, String...)} but String loggerName instead of, +    public static Logger getLogger(String loggerName, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, Settings.EMPTY,, +++ b/server/src/main/java/org/elasticsearch/index/engine/ElasticsearchConcurrentMergeScheduler.java, +        this.logger = Loggers.getLogger(getClass(), shardId);, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    public static Logger getLogger(Class<?> clazz, ShardId shardId, String... prefixes) {, +        return getLogger(clazz, Settings.EMPTY,, +                shardId.getIndex(), asArrayList(Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +     * Just like {@link #getLogger(Class, ShardId, String...)} but String loggerName instead of, +    public static Logger getLogger(String loggerName, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, Settings.EMPTY,, +++ b/server/src/main/java/org/elasticsearch/index/engine/ElasticsearchConcurrentMergeScheduler.java, +        this.logger = Loggers.getLogger(getClass(), shardId);, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +                engineConfig.getShardId());, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    public static Logger getLogger(Class<?> clazz, ShardId shardId, String... prefixes) {, +        return getLogger(clazz, Settings.EMPTY,, +                shardId.getIndex(), asArrayList(Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +     * Just like {@link #getLogger(Class, ShardId, String...)} but String loggerName instead of, +    public static Logger getLogger(String loggerName, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, Settings.EMPTY,, +++ b/server/src/main/java/org/elasticsearch/index/engine/ElasticsearchConcurrentMergeScheduler.java, +        this.logger = Loggers.getLogger(getClass(), shardId);, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +                engineConfig.getShardId());, +++ b/server/src/main/java/org/elasticsearch/index/shard/AbstractIndexShardComponent.java, +        this.logger = Loggers.getLogger(getClass(), shardId);, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    public static Logger getLogger(Class<?> clazz, ShardId shardId, String... prefixes) {, +        return getLogger(clazz, Settings.EMPTY,, +                shardId.getIndex(), asArrayList(Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +     * Just like {@link #getLogger(Class, ShardId, String...)} but String loggerName instead of, +    public static Logger getLogger(String loggerName, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, Settings.EMPTY,, +++ b/server/src/main/java/org/elasticsearch/index/engine/ElasticsearchConcurrentMergeScheduler.java, +        this.logger = Loggers.getLogger(getClass(), shardId);, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +                engineConfig.getShardId());, +++ b/server/src/main/java/org/elasticsearch/index/shard/AbstractIndexShardComponent.java, +        this.logger = Loggers.getLogger(getClass(), shardId);, +++ b/server/src/main/java/org/elasticsearch/index/store/Store.java, +        this.directory = new StoreDirectory(sizeCachingDir, Loggers.getLogger("index.store.deletes", shardId));, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    public static Logger getLogger(Class<?> clazz, ShardId shardId, String... prefixes) {, +        return getLogger(clazz, Settings.EMPTY,, +                shardId.getIndex(), asArrayList(Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +     * Just like {@link #getLogger(Class, ShardId, String...)} but String loggerName instead of, +    public static Logger getLogger(String loggerName, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, Settings.EMPTY,, +++ b/server/src/main/java/org/elasticsearch/index/engine/ElasticsearchConcurrentMergeScheduler.java, +        this.logger = Loggers.getLogger(getClass(), shardId);, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +                engineConfig.getShardId());, +++ b/server/src/main/java/org/elasticsearch/index/shard/AbstractIndexShardComponent.java, +        this.logger = Loggers.getLogger(getClass(), shardId);, +++ b/server/src/main/java/org/elasticsearch/index/store/Store.java, +        this.directory = new StoreDirectory(sizeCachingDir, Loggers.getLogger("index.store.deletes", shardId));, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoverySourceService.java, +                handler = new RecoverySourceHandler(shard, recoveryTarget, request, recoverySettings.getChunkSize().bytesAsInt());, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    public static Logger getLogger(Class<?> clazz, ShardId shardId, String... prefixes) {, +        return getLogger(clazz, Settings.EMPTY,, +                shardId.getIndex(), asArrayList(Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +     * Just like {@link #getLogger(Class, ShardId, String...)} but String loggerName instead of, +    public static Logger getLogger(String loggerName, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, Settings.EMPTY,, +++ b/server/src/main/java/org/elasticsearch/index/engine/ElasticsearchConcurrentMergeScheduler.java, +        this.logger = Loggers.getLogger(getClass(), shardId);, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +                engineConfig.getShardId());, +++ b/server/src/main/java/org/elasticsearch/index/shard/AbstractIndexShardComponent.java, +        this.logger = Loggers.getLogger(getClass(), shardId);, +++ b/server/src/main/java/org/elasticsearch/index/store/Store.java, +        this.directory = new StoreDirectory(sizeCachingDir, Loggers.getLogger("index.store.deletes", shardId));, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoverySourceService.java, +                handler = new RecoverySourceHandler(shard, recoveryTarget, request, recoverySettings.getChunkSize().bytesAsInt());, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +                                 final int fileChunkSizeInBytes) {, +        this.logger = Loggers.getLogger(getClass(), request.shardId(), "recover to " + request.targetNode().getName());, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    public static Logger getLogger(Class<?> clazz, ShardId shardId, String... prefixes) {, +        return getLogger(clazz, Settings.EMPTY,, +                shardId.getIndex(), asArrayList(Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +     * Just like {@link #getLogger(Class, ShardId, String...)} but String loggerName instead of, +    public static Logger getLogger(String loggerName, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, Settings.EMPTY,, +++ b/server/src/main/java/org/elasticsearch/index/engine/ElasticsearchConcurrentMergeScheduler.java]