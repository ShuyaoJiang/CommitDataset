[+++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +                if (currentLicense != null && currentLicense != LicensesMetaData.LICENSE_TOMBSTONE) {, +                    if (!License.isAutoGeneratedLicense(currentLicense.signature()) // current license is not auto-generated, +            }, +        final License license = getLicense(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, +        return license == LicensesMetaData.LICENSE_TOMBSTONE ? null : license;, +        if (license == LicensesMetaData.LICENSE_TOMBSTONE) {, +            // implies license has been explicitly deleted, +            // update licensee states, +            registeredLicensees.forEach(InternalLicensee::onRemove);, +        // license can be null if the trial license is yet to be auto-generated, +        // in this case, it is a no-op, +        if (license != null) {, +    }, +    License getLicense(final LicensesMetaData metaData) {, +            if (license == LicensesMetaData.LICENSE_TOMBSTONE) {, +                return license;, +            } else {, +                if (currentLicense != null || currentLicenseState != LicenseState.DISABLED) {, +                    currentLicenseState = LicenseState.DISABLED;, +    }, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +                if (currentLicense != null && currentLicense != LicensesMetaData.LICENSE_TOMBSTONE) {, +                    if (!License.isAutoGeneratedLicense(currentLicense.signature()) // current license is not auto-generated, +            }, +        final License license = getLicense(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, +        return license == LicensesMetaData.LICENSE_TOMBSTONE ? null : license;, +        if (license == LicensesMetaData.LICENSE_TOMBSTONE) {, +            // implies license has been explicitly deleted, +            // update licensee states, +            registeredLicensees.forEach(InternalLicensee::onRemove);, +        // license can be null if the trial license is yet to be auto-generated, +        // in this case, it is a no-op, +        if (license != null) {, +    }, +    License getLicense(final LicensesMetaData metaData) {, +            if (license == LicensesMetaData.LICENSE_TOMBSTONE) {, +                return license;, +            } else {, +                if (currentLicense != null || currentLicenseState != LicenseState.DISABLED) {, +                    currentLicenseState = LicenseState.DISABLED;, +    }, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/core/LicensesManagerServiceTests.java, +        License license = generateSignedLicense("gold", TimeValue.timeValueHours(1));, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +                if (currentLicense != null && currentLicense != LicensesMetaData.LICENSE_TOMBSTONE) {, +                    if (!License.isAutoGeneratedLicense(currentLicense.signature()) // current license is not auto-generated, +            }, +        final License license = getLicense(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, +        return license == LicensesMetaData.LICENSE_TOMBSTONE ? null : license;, +        if (license == LicensesMetaData.LICENSE_TOMBSTONE) {, +            // implies license has been explicitly deleted, +            // update licensee states, +            registeredLicensees.forEach(InternalLicensee::onRemove);, +        // license can be null if the trial license is yet to be auto-generated, +        // in this case, it is a no-op, +        if (license != null) {, +    }, +    License getLicense(final LicensesMetaData metaData) {, +            if (license == LicensesMetaData.LICENSE_TOMBSTONE) {, +                return license;, +            } else {, +                if (currentLicense != null || currentLicenseState != LicenseState.DISABLED) {, +                    currentLicenseState = LicenseState.DISABLED;, +    }, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/core/LicensesManagerServiceTests.java, +        License license = generateSignedLicense("gold", TimeValue.timeValueHours(1));, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/MonitoringLicensee.java, +        return status.getLicenseState() != LicenseState.DISABLED;, +        final OperationMode mode = status.getMode();, +        return mode != OperationMode.BASIC && mode != OperationMode.MISSING;, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +                if (currentLicense != null && currentLicense != LicensesMetaData.LICENSE_TOMBSTONE) {, +                    if (!License.isAutoGeneratedLicense(currentLicense.signature()) // current license is not auto-generated, +            }, +        final License license = getLicense(clusterService.state().metaData().custom(LicensesMetaData.TYPE));, +        return license == LicensesMetaData.LICENSE_TOMBSTONE ? null : license;, +        if (license == LicensesMetaData.LICENSE_TOMBSTONE) {, +            // implies license has been explicitly deleted, +            // update licensee states, +            registeredLicensees.forEach(InternalLicensee::onRemove);, +        // license can be null if the trial license is yet to be auto-generated, +        // in this case, it is a no-op, +        if (license != null) {, +    }, +    License getLicense(final LicensesMetaData metaData) {, +            if (license == LicensesMetaData.LICENSE_TOMBSTONE) {, +                return license;, +            } else {, +                if (currentLicense != null || currentLicenseState != LicenseState.DISABLED) {, +                    currentLicenseState = LicenseState.DISABLED;, +    }, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/core/LicensesManagerServiceTests.java, +        License license = generateSignedLicense("gold", TimeValue.timeValueHours(1));, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/MonitoringLicensee.java, +        return status.getLicenseState() != LicenseState.DISABLED;, +        final OperationMode mode = status.getMode();, +        return mode != OperationMode.BASIC && mode != OperationMode.MISSING;, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/license/MarvelLicenseeTests.java, +        OperationMode from = randomFrom(OperationMode.STANDARD, OperationMode.GOLD, OperationMode.PLATINUM, OperationMode.TRIAL);]