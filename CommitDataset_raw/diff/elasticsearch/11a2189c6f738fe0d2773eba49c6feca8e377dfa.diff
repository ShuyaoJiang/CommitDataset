[+++ b/x-pack/qa/full-cluster-restart/src/test/java/org/elasticsearch/xpack/restart/FullClusterRestartIT.java, +            Request createDoc = new Request("PUT", docLocation);, +            createDoc.addParameter("refresh", "true");, +            createDoc.setJsonEntity(doc);, +            client().performRequest(createDoc);, +        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc));, +            Response settingsResponse = client().performRequest(new Request("GET", "/.security/_settings/index.format"));, +            Map<String, Object> settingsResponseMap = entityAsMap(settingsResponse);, +                Response upgradeResponse = client().performRequest(, +                        new Request("POST", "_xpack/migration/upgrade/" + concreteSecurityIndex));, +            Request createBwcWatch = new Request("PUT", "_xpack/watcher/watch/bwc_watch");, +            createBwcWatch.setJsonEntity(loadWatch("simple-watch.json"));, +            client().performRequest(createBwcWatch);, +            Request createBwcThrottlePeriod = new Request("PUT", "_xpack/watcher/watch/bwc_throttle_period");, +            createBwcThrottlePeriod.setJsonEntity(loadWatch("throttle-period-watch.json"));, +            client().performRequest(createBwcThrottlePeriod);, +            Request createFunnyTimeout = new Request("PUT", "_xpack/watcher/watch/bwc_funny_timeout");, +            createFunnyTimeout.setJsonEntity(loadWatch("funny-timeout-watch.json"));, +            client().performRequest(createFunnyTimeout);, +            Map<String, Object> response = entityAsMap(client().performRequest(new Request("GET", "/_xpack/migration/assistance")));, +                Request migrationAssistantRequest = new Request("POST", "_xpack/migration/upgrade/.watches");, +                migrationAssistantRequest.addParameter("error_trace", "true");, +                Map<String, Object> upgradeResponse = entityAsMap(client().performRequest(migrationAssistantRequest));, +                Map<String, Object> responseAfter = entityAsMap(client().performRequest(, +                        new Request("GET", "/_xpack/migration/assistance")));, +            Map<String, Object> startWatchResponse = entityAsMap(client().performRequest(new Request("POST", "_xpack/watcher/_start")));, +                Map<String, Object> statsWatchResponse = entityAsMap(client().performRequest(new Request("GET", "_xpack/watcher/stats")));, +                Map<String, Object> stopWatchResponse = entityAsMap(client().performRequest(new Request("POST", "_xpack/watcher/_stop")));, +                    Map<String, Object> statsStoppedWatchResponse = entityAsMap(client().performRequest(, +                            new Request("GET", "_xpack/watcher/stats")));, +            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest));, +            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest));, +            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest));, +            Request doc1 = new Request("POST", "/testsqlfailsonindexwithtwotypes/type1");, +            doc1.setJsonEntity("{}");, +            client().performRequest(doc1);, +            Request doc2 = new Request("POST", "/testsqlfailsonindexwithtwotypes/type2");, +            doc2.setJsonEntity("{}");, +            client().performRequest(doc2);, +        Request sqlRequest = new Request("POST", "/_xpack/sql");, +        sqlRequest.setJsonEntity("{\"query\":\"SELECT * FROM testsqlfailsonindexwithtwotypes\"}");, +        ResponseException e = expectThrows(ResponseException.class, () -> client().performRequest(sqlRequest));, +        Map<String, Object> templates = entityAsMap(client().performRequest(new Request("GET", "/_template")));, +        Map<String, Object> bwcWatch = entityAsMap(client().performRequest(new Request("GET", "_xpack/watcher/watch/bwc_watch")));, +        bwcWatch = entityAsMap(client().performRequest(new Request("GET", "_xpack/watcher/watch/bwc_throttle_period")));, +        bwcWatch = entityAsMap(client().performRequest(new Request("GET", "_xpack/watcher/watch/bwc_funny_timeout")));, +        Map<String, Object> history = entityAsMap(client().performRequest(new Request("GET", ".watcher-history*/_search")));, +        Request createWatchRequest = new Request("PUT", "_xpack/watcher/watch/new_watch");, +        createWatchRequest.setJsonEntity(watch);, +        Map<String, Object> createWatch = entityAsMap(client().performRequest(createWatchRequest));, +        logger.info("create watch {}", createWatch);, +        assertThat(createWatch.get("created"), equalTo(true));, +        assertThat(createWatch.get("_version"), equalTo(1));, +        Map<String, Object> updateWatch = entityAsMap(client().performRequest(createWatchRequest));, +        assertThat(updateWatch.get("created"), equalTo(false));, +        assertThat(updateWatch.get("_version"), equalTo(2));, +        Map<String, Object> get = entityAsMap(client().performRequest(new Request("GET", "_xpack/watcher/watch/new_watch")));, +        Request request = new Request("GET", "/_cluster/health/" + indexName);, +        request.addParameter("wait_for_status", "yellow");, +        request.addParameter("timeout", "30s");, +        request.addParameter("wait_for_no_relocating_shards", "true");, +            request.addParameter("wait_for_no_initializing_shards", "true");, +        Map<String, Object> response = entityAsMap(client().performRequest(request));, +        Request request = new Request("GET", "/" + indexName + "/_search");, +        request.addParameter("size", "0");, +                Map<String, Object> response = entityAsMap(client().performRequest(request));, +        Request request = new Request("PUT", "/_xpack/security/user/" + id);, +        request.setJsonEntity(, +            "}");, +        client().performRequest(request);, +        Request request = new Request("PUT", "/_xpack/security/role/" + id);, +        request.setJsonEntity(, +            "}");, +        client().performRequest(request);, +        Map<String, Object> response = entityAsMap(client().performRequest(new Request("GET", "/_xpack/security/user/" + user)));, +                entityAsMap(client().performRequest(new Request("GET", "/_xpack/security/role/" + role))).get(role);, +        Map<String, Object> getRollupJobResponse = entityAsMap(client().performRequest(getRollupJobRequest));, +        Map<String, Object> taskResponse = entityAsMap(client().performRequest(taskRequest));, +        Map<String, Object> clusterStateResponse = entityAsMap(client().performRequest(clusterStateRequest));]