[+++ b/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED_STATE.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED_STATE.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED_STATE.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED_STATE.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED_STATE.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED_STATE.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED_STATE.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED_STATE.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED_STATE.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED_STATE.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED_STATE.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED_STATE.enabled) {, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED = EnabledAttributeMapper.UNSET_DISABLED;, +        if (includeDefaults || enabledState.enabled != Defaults.ENABLED.enabled) {, +++ b/src/test/java/org/elasticsearch/index/mapper/index/IndexTypeMapperIntegrationTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.mapper.index;, +, +import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingResponse;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.util.Locale;, +import java.util.Map;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.hamcrest.Matchers.*;, +, +/**, + *, + */, +public class IndexTypeMapperIntegrationTests extends ElasticsearchIntegrationTest {, +, +    @Test // issue 5053, +    public void testThatUpdatingMappingShouldNotRemoveSizeMappingConfiguration() throws Exception {, +        String index = "foo";, +        String type = "mytype";, +, +        XContentBuilder builder = jsonBuilder().startObject().startObject("_index").field("enabled", true).endObject().endObject();, +        assertAcked(client().admin().indices().prepareCreate(index).addMapping(type, builder));, +, +        // check mapping again, +        assertIndexMappingEnabled(index, type);, +, +        // update some field in the mapping, +        XContentBuilder updateMappingBuilder = jsonBuilder().startObject().startObject("properties").startObject("otherField").field("type", "string").endObject().endObject();, +        PutMappingResponse putMappingResponse = client().admin().indices().preparePutMapping(index).setType(type).setSource(updateMappingBuilder).get();, +        assertAcked(putMappingResponse);, +, +        // make sure timestamp field is still in mapping, +        assertIndexMappingEnabled(index, type);]