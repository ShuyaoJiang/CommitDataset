[+++ b/docs/reference/search/percolate.asciidoc, +== Percolator, +Note: This page described the redesigned percolator that is part of the 1.0 release., +Tradionally you design documents based on your data and store them into an index and then define queries via the search api, +in order to retrieve these documents. The percolator works in the opposite direction, first you store queries into an, +index and then via the percolate api you define documents in order to retrieve these queries., +The reason that queries can be stored comes from the fact that in Elasticsearch both documents and queries are defined in, +JSON. This allows you to embed queries into documents via the index api. Elasticsearch can extract the query from a, +document and make it available to the percolate api. Since documents are also defines as json, you can define a document, +in a request to the percolate api., +The percolator and most of its features work in realtime, so once a percolate query is indexed it can immediately be used, +in the percolate api., +, +[float], +=== Sample usage, +, +Adding a query to the percolator:, +curl -XPUT 'localhost:9200/my-index/_percolator/1' -d '{, +        "match" : {, +            "message" : "bonsai tree", +Matching documents to the added queries:, +curl -XGET 'localhost:9200/my-index/message/_percolate' -d '{, +        "message" : "A new bonsai tree in the office", +The above request will yield the following response:, +{, +    "took" : 19,, +    "_shards" : {, +        "total" : 5,, +        "successful" : 5,, +        "failed" : 0, +    },, +    "count" : 1,, +    "matches" : [, +    	{, +    	     "_index" : "my-index",, +    	     "_id" : "1", +    	}, +    ], +}, +The percolate api returns matches that refer to percolate queries that have matched with the document defined in the percolate api., +, +[float], +=== Indexing percolator queries, +, +Percolate queries are stored as documents in a specific format and in an aribitrary index under a reserved type with the, +name `_percolator`. The query itself is placed as is in a json objects under the top level field `query`., +{, +    "query" : {, +		"match" : {, +			"field" : "value", +		}, +	}, +}, +Since this is just an ordinary document, any field can be added to this document. This can be useful later on to only, +percolate documents by specific queries., +, +[source,js], +--------------------------------------------------, +{, +	"query" : {, +		"match" : {, +			"field" : "value", +		}, +	},, +	"priority" : "high", +}, +--------------------------------------------------, +, +On top of this also a mapping type can be associated with the this query. This allows to control how certain queries, +like range queries, shape filters and other query & filters that rely on mapping settings get constructed. This is, +important since the percolate queries are indexed into the `_percolator` type, and the queries / filters that rely on, +mapping settings would yield unexpected behaviour. Note by default field names do get resolved in a smart manner,, +but in certain cases with multiple types this can lead to unexpected behaviour, so being explicit about it will help., +, +[source,js], +--------------------------------------------------, +{, +	"query" : {, +		"range" : {, +			"created_at" : {, +				"gte" : "2010-01-01T00:00:00",, +				"lte" : "2011-01-01T00:00:00", +			}, +		}, +	},, +	"type" : "tweet",, +	"priority" : "high", +}, +--------------------------------------------------, +, +In the above example the range query gets really parsed into a Lucene numeric range query, based on the settings for, +the field `created_at` in the type `tweet`., +, +Just as with any other type, the `_percolator` type has a mapping, which you can configure via the mappings apis., +The default percolate mapping doesn't index the query field and only stores it., +, +Because `_percolate` is a type it also has a mapping. By default the following mapping is active:, +, +[source,js], +--------------------------------------------------]