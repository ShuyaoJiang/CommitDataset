[+++ b/src/main/java/org/elasticsearch/rest/action/percolate/RestPercolateAction.java, +        controller.registerHandler(GET, "/{index}/{type}/{id}/_percolate", new RestPercolateExistingDocHandler());, +        controller.registerHandler(POST, "/{index}/{type}/{id}/_percolate", new RestPercolateExistingDocHandler());, +    public void handleRequest(RestRequest restRequest, RestChannel restChannel) {, +        executePercolate(percolateRequest, restRequest, restChannel);, +    }, +    void executePercolate(PercolateRequest percolateRequest, final RestRequest restRequest, final RestChannel restChannel) {, +    class RestPercolateExistingDocHandler implements RestHandler {, +, +        @Override, +        public void handleRequest(RestRequest restRequest, RestChannel restChannel) {, +            String index = restRequest.param("index");, +            String type = restRequest.param("type");, +, +            GetRequest getRequest = new GetRequest(index, type,, +                    restRequest.param("id"));, +            getRequest.routing(restRequest.param("routing"));, +            getRequest.preference(restRequest.param("preference"));, +            getRequest.refresh(restRequest.paramAsBoolean("refresh", getRequest.refresh()));, +            getRequest.realtime(restRequest.paramAsBooleanOptional("realtime", null));, +            getRequest.version(RestActions.parseVersion(restRequest));, +            getRequest.versionType(VersionType.fromString(restRequest.param("version_type"), getRequest.versionType()));, +, +            PercolateRequest percolateRequest = new PercolateRequest(, +                    restRequest.param("percolate_index", index),, +                    restRequest.param("percolate_type", type), +            );, +            percolateRequest.getRequest(getRequest);, +            percolateRequest.routing(restRequest.param("percolate_routing"));, +            percolateRequest.preference(restRequest.param("percolate_preference"));, +            percolateRequest.source(restRequest.content(), restRequest.contentUnsafe());, +, +            percolateRequest.routing(restRequest.param("percolate_routing"));, +            percolateRequest.preference(restRequest.param("percolate_preference"));, +, +            executePercolate(percolateRequest, restRequest, restChannel);, +        }, +, +    }, +]