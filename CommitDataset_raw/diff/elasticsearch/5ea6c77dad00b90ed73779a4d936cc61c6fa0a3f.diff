[+++ b/src/main/java/org/elasticsearch/index/fieldvisitor/FieldsVisitor.java, +import com.google.common.collect.ImmutableMap;, +        for (Map.Entry<String, List<Object>> entry : fields().entrySet()) {, +        for (Map.Entry<String, List<Object>> entry : fields().entrySet()) {, +            FieldMapper<?> fieldMapper = documentMapper.mappers().indexName(entry.getKey()).mapper();, +        return fieldsValues != null, +                ? fieldsValues, +                : ImmutableMap.<String, List<Object>>of();, +++ b/src/main/java/org/elasticsearch/index/fieldvisitor/FieldsVisitor.java, +import com.google.common.collect.ImmutableMap;, +        for (Map.Entry<String, List<Object>> entry : fields().entrySet()) {, +        for (Map.Entry<String, List<Object>> entry : fields().entrySet()) {, +            FieldMapper<?> fieldMapper = documentMapper.mappers().indexName(entry.getKey()).mapper();, +        return fieldsValues != null, +                ? fieldsValues, +                : ImmutableMap.<String, List<Object>>of();, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +            if (!fieldVisitor.fields().isEmpty()) {, +++ b/src/main/java/org/elasticsearch/index/fieldvisitor/FieldsVisitor.java, +import com.google.common.collect.ImmutableMap;, +        for (Map.Entry<String, List<Object>> entry : fields().entrySet()) {, +        for (Map.Entry<String, List<Object>> entry : fields().entrySet()) {, +            FieldMapper<?> fieldMapper = documentMapper.mappers().indexName(entry.getKey()).mapper();, +        return fieldsValues != null, +                ? fieldsValues, +                : ImmutableMap.<String, List<Object>>of();, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +            if (!fieldVisitor.fields().isEmpty()) {, +++ b/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +            if (!fieldsVisitor.fields().isEmpty()) {, +++ b/src/main/java/org/elasticsearch/index/fieldvisitor/FieldsVisitor.java, +import com.google.common.collect.ImmutableMap;, +        for (Map.Entry<String, List<Object>> entry : fields().entrySet()) {, +        for (Map.Entry<String, List<Object>> entry : fields().entrySet()) {, +            FieldMapper<?> fieldMapper = documentMapper.mappers().indexName(entry.getKey()).mapper();, +        return fieldsValues != null, +                ? fieldsValues, +                : ImmutableMap.<String, List<Object>>of();, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +            if (!fieldVisitor.fields().isEmpty()) {, +++ b/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +            if (!fieldsVisitor.fields().isEmpty()) {, +++ b/src/main/java/org/elasticsearch/search/highlight/PlainHighlighter.java, +import com.google.common.collect.ImmutableList;, +, +            Map<FieldMapper<?>, org.apache.lucene.search.highlight.Highlighter> mappers = Maps.newHashMap();, +        Map<FieldMapper<?>, org.apache.lucene.search.highlight.Highlighter> cache = (Map<FieldMapper<?>, org.apache.lucene.search.highlight.Highlighter>) hitContext.cache().get(CACHE_KEY);, +                if (textsToHighlight == null) {, +                    // Can happen if the document doesn't have the field to highlight, +                    textsToHighlight = ImmutableList.of();, +                }, +        assert textsToHighlight != null;, +++ b/src/main/java/org/elasticsearch/index/fieldvisitor/FieldsVisitor.java, +import com.google.common.collect.ImmutableMap;, +        for (Map.Entry<String, List<Object>> entry : fields().entrySet()) {, +        for (Map.Entry<String, List<Object>> entry : fields().entrySet()) {, +            FieldMapper<?> fieldMapper = documentMapper.mappers().indexName(entry.getKey()).mapper();, +        return fieldsValues != null, +                ? fieldsValues, +                : ImmutableMap.<String, List<Object>>of();, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +            if (!fieldVisitor.fields().isEmpty()) {, +++ b/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +            if (!fieldsVisitor.fields().isEmpty()) {, +++ b/src/main/java/org/elasticsearch/search/highlight/PlainHighlighter.java, +import com.google.common.collect.ImmutableList;, +, +            Map<FieldMapper<?>, org.apache.lucene.search.highlight.Highlighter> mappers = Maps.newHashMap();, +        Map<FieldMapper<?>, org.apache.lucene.search.highlight.Highlighter> cache = (Map<FieldMapper<?>, org.apache.lucene.search.highlight.Highlighter>) hitContext.cache().get(CACHE_KEY);, +                if (textsToHighlight == null) {, +                    // Can happen if the document doesn't have the field to highlight, +                    textsToHighlight = ImmutableList.of();, +                }, +        assert textsToHighlight != null;, +++ b/src/test/java/org/elasticsearch/test/integration/search/highlight/HighlighterSearchTests.java, +    @Test, +    public void testMissingStoredField() throws Exception {, +        try {, +            client.admin().indices().prepareDelete("test").execute().actionGet();, +        } catch (Exception e) {, +            // ignore, +        }, +, +        client.admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder(), +                .put("index.number_of_shards", 1).put("index.number_of_replicas", 0)), +                .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties"), +                        .startObject("highlight_field").field("type", "string").field("store", "yes").endObject(), +                        .endObject().endObject().endObject()), +                .execute().actionGet();, +, +        client.prepareIndex("test", "type1", "1"), +                .setSource(jsonBuilder().startObject(), +                    .field("field", "highlight"), +                .endObject()), +                .setRefresh(true).execute().actionGet();, +, +        // This query used to fail when the field to highlight was absent, +        SearchResponse response = client.prepareSearch("test"), +                .setQuery(QueryBuilders.matchQuery("field", "highlight").type(MatchQueryBuilder.Type.BOOLEAN)), +                .addHighlightedField(new HighlightBuilder.Field("highlight_field")]