[+++ b/core/src/main/java/org/elasticsearch/common/cache/Cache.java, +    private long expireAfterAccessNanos = -1;, +    private long expireAfterWriteNanos = -1;, +    void setExpireAfterAccessNanos(long expireAfterAccessNanos) {, +        if (expireAfterAccessNanos <= 0) {, +            throw new IllegalArgumentException("expireAfterAccessNanos <= 0");, +        this.expireAfterAccessNanos = expireAfterAccessNanos;, +    // pkg-private for testing, +    long getExpireAfterAccessNanos() {, +        return this.expireAfterAccessNanos;, +, +    void setExpireAfterWriteNanos(long expireAfterWriteNanos) {, +        if (expireAfterWriteNanos <= 0) {, +            throw new IllegalArgumentException("expireAfterWriteNanos <= 0");, +        }, +        this.expireAfterWriteNanos = expireAfterWriteNanos;, +    // pkg-private for testing, +    long getExpireAfterWriteNanos() {, +        return this.expireAfterWriteNanos;, +    }, +, +        return (entriesExpireAfterAccess && now - entry.accessTime > expireAfterAccessNanos) ||, +                (entriesExpireAfterWrite && now - entry.writeTime > expireAfterWriteNanos);, +++ b/core/src/main/java/org/elasticsearch/common/cache/Cache.java, +    private long expireAfterAccessNanos = -1;, +    private long expireAfterWriteNanos = -1;, +    void setExpireAfterAccessNanos(long expireAfterAccessNanos) {, +        if (expireAfterAccessNanos <= 0) {, +            throw new IllegalArgumentException("expireAfterAccessNanos <= 0");, +        this.expireAfterAccessNanos = expireAfterAccessNanos;, +    // pkg-private for testing, +    long getExpireAfterAccessNanos() {, +        return this.expireAfterAccessNanos;, +, +    void setExpireAfterWriteNanos(long expireAfterWriteNanos) {, +        if (expireAfterWriteNanos <= 0) {, +            throw new IllegalArgumentException("expireAfterWriteNanos <= 0");, +        }, +        this.expireAfterWriteNanos = expireAfterWriteNanos;, +    // pkg-private for testing, +    long getExpireAfterWriteNanos() {, +        return this.expireAfterWriteNanos;, +    }, +, +        return (entriesExpireAfterAccess && now - entry.accessTime > expireAfterAccessNanos) ||, +                (entriesExpireAfterWrite && now - entry.writeTime > expireAfterWriteNanos);, +++ b/core/src/main/java/org/elasticsearch/common/cache/CacheBuilder.java, +import org.elasticsearch.common.unit.TimeValue;, +, +    private long expireAfterAccessNanos = -1;, +    private long expireAfterWriteNanos = -1;, +    /**, +     * Sets the amount of time before an entry in the cache expires after it was last accessed., +     *, +     * @param expireAfterAccess The amount of time before an entry expires after it was last accessed. Must not be {@code null} and must, +     *                          be greater than 0., +     */, +    public CacheBuilder<K, V> setExpireAfterAccess(TimeValue expireAfterAccess) {, +        Objects.requireNonNull(expireAfterAccess);, +        final long expireAfterAccessNanos = expireAfterAccess.getNanos();, +        if (expireAfterAccessNanos <= 0) {, +        this.expireAfterAccessNanos = expireAfterAccessNanos;, +    /**, +     * Sets the amount of time before an entry in the cache expires after it was written., +     *, +     * @param expireAfterWrite The amount of time before an entry expires after it was written. Must not be {@code null} and must be, +     *                         greater than 0., +     */, +    public CacheBuilder<K, V> setExpireAfterWrite(TimeValue expireAfterWrite) {, +        Objects.requireNonNull(expireAfterWrite);, +        final long expireAfterWriteNanos = expireAfterWrite.getNanos();, +        if (expireAfterWriteNanos <= 0) {, +        this.expireAfterWriteNanos = expireAfterWriteNanos;, +        if (expireAfterAccessNanos != -1) {, +            cache.setExpireAfterAccessNanos(expireAfterAccessNanos);, +        if (expireAfterWriteNanos != -1) {, +            cache.setExpireAfterWriteNanos(expireAfterWriteNanos);, +++ b/core/src/main/java/org/elasticsearch/common/cache/Cache.java, +    private long expireAfterAccessNanos = -1;, +    private long expireAfterWriteNanos = -1;, +    void setExpireAfterAccessNanos(long expireAfterAccessNanos) {, +        if (expireAfterAccessNanos <= 0) {, +            throw new IllegalArgumentException("expireAfterAccessNanos <= 0");, +        this.expireAfterAccessNanos = expireAfterAccessNanos;, +    // pkg-private for testing, +    long getExpireAfterAccessNanos() {, +        return this.expireAfterAccessNanos;, +, +    void setExpireAfterWriteNanos(long expireAfterWriteNanos) {, +        if (expireAfterWriteNanos <= 0) {, +            throw new IllegalArgumentException("expireAfterWriteNanos <= 0");, +        }, +        this.expireAfterWriteNanos = expireAfterWriteNanos;, +    // pkg-private for testing, +    long getExpireAfterWriteNanos() {, +        return this.expireAfterWriteNanos;, +    }, +, +        return (entriesExpireAfterAccess && now - entry.accessTime > expireAfterAccessNanos) ||, +                (entriesExpireAfterWrite && now - entry.writeTime > expireAfterWriteNanos);]