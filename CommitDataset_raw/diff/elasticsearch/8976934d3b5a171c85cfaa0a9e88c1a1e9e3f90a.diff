[+++ b/core/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +    public String minimumShouldMatch() {, +++ b/core/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +    public String minimumShouldMatch() {, +++ b/core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +++ b/core/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +    public String minimumShouldMatch() {, +++ b/core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +++ b/core/src/test/java/org/apache/lucene/queries/BlendedTermQueryTests.java, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.*;, +import java.util.*;, +++ b/core/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +    public String minimumShouldMatch() {, +++ b/core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +++ b/core/src/test/java/org/apache/lucene/queries/BlendedTermQueryTests.java, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.*;, +import java.util.*;, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +    @SuppressWarnings("unchecked"), +++ b/core/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +    public String minimumShouldMatch() {, +++ b/core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +++ b/core/src/test/java/org/apache/lucene/queries/BlendedTermQueryTests.java, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.*;, +import java.util.*;, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +    @SuppressWarnings("unchecked"), +++ b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java, +import org.apache.lucene.search.*;, +import org.hamcrest.Matchers;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +                assertThat(booleanQuery.isCoordDisabled(), equalTo(queryBuilder.disableCoord()));, +, +    // https://github.com/elasticsearch/elasticsearch/issues/7240, +    @Test, +    public void testEmptyBooleanQuery() throws Exception {, +        String query = jsonBuilder().startObject().startObject("bool").endObject().endObject().string();, +        Query parsedQuery = parseQuery(query).toQuery(createShardContext());, +        assertThat(parsedQuery, Matchers.instanceOf(MatchAllDocsQuery.class));, +    }, +, +    public void testDefaultMinShouldMatch() throws Exception {, +        // Queries have a minShouldMatch of 0, +        BooleanQuery bq = (BooleanQuery) parseQuery(boolQuery().must(termQuery("foo", "bar")).buildAsBytes()).toQuery(createShardContext());, +        assertEquals(0, bq.getMinimumNumberShouldMatch());, +, +        bq = (BooleanQuery) parseQuery(boolQuery().should(termQuery("foo", "bar")).buildAsBytes()).toQuery(createShardContext());, +        assertEquals(0, bq.getMinimumNumberShouldMatch());, +, +        // Filters have a minShouldMatch of 0/1, +        ConstantScoreQuery csq = (ConstantScoreQuery) parseQuery(constantScoreQuery(boolQuery().must(termQuery("foo", "bar"))).buildAsBytes()).toQuery(createShardContext());, +        bq = (BooleanQuery) csq.getQuery();, +        assertEquals(0, bq.getMinimumNumberShouldMatch());, +, +        csq = (ConstantScoreQuery) parseQuery(constantScoreQuery(boolQuery().should(termQuery("foo", "bar"))).buildAsBytes()).toQuery(createShardContext());, +        bq = (BooleanQuery) csq.getQuery();, +        assertEquals(1, bq.getMinimumNumberShouldMatch());, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +    public String minimumShouldMatch() {, +++ b/core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +++ b/core/src/test/java/org/apache/lucene/queries/BlendedTermQueryTests.java, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.*;, +import java.util.*;, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +    @SuppressWarnings("unchecked"), +++ b/core/src/test/java/org/elasticsearch/index/query/BoolQueryBuilderTests.java, +import org.apache.lucene.search.*;, +import org.hamcrest.Matchers;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +                assertThat(booleanQuery.isCoordDisabled(), equalTo(queryBuilder.disableCoord()));, +, +    // https://github.com/elasticsearch/elasticsearch/issues/7240, +    @Test, +    public void testEmptyBooleanQuery() throws Exception {, +        String query = jsonBuilder().startObject().startObject("bool").endObject().endObject().string();, +        Query parsedQuery = parseQuery(query).toQuery(createShardContext());, +        assertThat(parsedQuery, Matchers.instanceOf(MatchAllDocsQuery.class));, +    }, +, +    public void testDefaultMinShouldMatch() throws Exception {, +        // Queries have a minShouldMatch of 0, +        BooleanQuery bq = (BooleanQuery) parseQuery(boolQuery().must(termQuery("foo", "bar")).buildAsBytes()).toQuery(createShardContext());, +        assertEquals(0, bq.getMinimumNumberShouldMatch());, +, +        bq = (BooleanQuery) parseQuery(boolQuery().should(termQuery("foo", "bar")).buildAsBytes()).toQuery(createShardContext());, +        assertEquals(0, bq.getMinimumNumberShouldMatch());, +, +        // Filters have a minShouldMatch of 0/1, +        ConstantScoreQuery csq = (ConstantScoreQuery) parseQuery(constantScoreQuery(boolQuery().must(termQuery("foo", "bar"))).buildAsBytes()).toQuery(createShardContext());]