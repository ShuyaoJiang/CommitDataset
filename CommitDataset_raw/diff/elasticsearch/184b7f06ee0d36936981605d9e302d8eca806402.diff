[+++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import java.util.HashSet;, +import java.util.Set;, +import java.util.stream.Collectors;, +        Set<String> segmentName = new HashSet<>();, +        try (Searcher searcher = acquireSearcher("segments_stats", SearcherScope.INTERNAL)) {, +            for (LeafReaderContext ctx : searcher.reader().getContext().leaves()) {, +                SegmentReader segmentReader = Lucene.segmentReader(ctx.reader());, +                fillSegmentStats(segmentReader, includeSegmentFileSizes, stats);, +                segmentName.add(segmentReader.getSegmentName());, +            }, +        }, +, +        try (Searcher searcher = acquireSearcher("segments_stats", SearcherScope.EXTERNAL)) {, +            for (LeafReaderContext ctx : searcher.reader().getContext().leaves()) {, +                SegmentReader segmentReader = Lucene.segmentReader(ctx.reader());, +                if (segmentName.contains(segmentReader.getSegmentName()) == false) {, +                    fillSegmentStats(segmentReader, includeSegmentFileSizes, stats);, +                }, +            }, +        }, +        writerSegmentStats(stats);, +        return stats;, +    }, +, +    private void fillSegmentStats(SegmentReader segmentReader, boolean includeSegmentFileSizes, SegmentsStats stats) {, +        try (Searcher searcher = acquireSearcher("segments", SearcherScope.EXTERNAL)){, +            for (LeafReaderContext ctx : searcher.reader().getContext().leaves()) {, +                fillSegmentInfo(Lucene.segmentReader(ctx.reader()), verbose, true, segments);, +, +        try (Searcher searcher = acquireSearcher("segments", SearcherScope.INTERNAL)){, +            for (LeafReaderContext ctx : searcher.reader().getContext().leaves()) {, +                SegmentReader segmentReader = Lucene.segmentReader(ctx.reader());, +                if (segments.containsKey(segmentReader.getSegmentName()) == false) {, +                    fillSegmentInfo(segmentReader, verbose, false, segments);, +                }, +        Arrays.sort(segmentsArr, Comparator.comparingLong(Segment::getGeneration));, +    private void fillSegmentInfo(SegmentReader segmentReader, boolean verbose, boolean search, Map<String, Segment> segments) {, +        SegmentCommitInfo info = segmentReader.getSegmentInfo();, +        assert segments.containsKey(info.info.name) == false;, +        Segment segment = new Segment(info.info.name);, +        segment.search = search;, +        segment.docCount = segmentReader.numDocs();, +        segment.delDocCount = segmentReader.numDeletedDocs();, +        segment.version = info.info.getVersion();, +        segment.compound = info.info.getUseCompoundFile();, +        try {, +            segment.sizeInBytes = info.sizeInBytes();, +        } catch (IOException e) {, +            logger.trace((Supplier<?>) () -> new ParameterizedMessage("failed to get size for [{}]", info.info.name), e);, +        }, +        segment.memoryInBytes = segmentReader.ramBytesUsed();, +        segment.segmentSort = info.info.getIndexSort();, +        if (verbose) {, +            segment.ramTree = Accountables.namedAccountable("root", segmentReader);, +        }, +        segment.attributes = info.info.getAttributes();, +        // TODO: add more fine grained mem stats values to per segment info here, +        segments.put(info.info.name, segment);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import java.util.HashSet;, +import java.util.Set;, +import java.util.stream.Collectors;, +        Set<String> segmentName = new HashSet<>();, +        try (Searcher searcher = acquireSearcher("segments_stats", SearcherScope.INTERNAL)) {, +            for (LeafReaderContext ctx : searcher.reader().getContext().leaves()) {, +                SegmentReader segmentReader = Lucene.segmentReader(ctx.reader());, +                fillSegmentStats(segmentReader, includeSegmentFileSizes, stats);, +                segmentName.add(segmentReader.getSegmentName());, +            }, +        }, +, +        try (Searcher searcher = acquireSearcher("segments_stats", SearcherScope.EXTERNAL)) {, +            for (LeafReaderContext ctx : searcher.reader().getContext().leaves()) {, +                SegmentReader segmentReader = Lucene.segmentReader(ctx.reader());, +                if (segmentName.contains(segmentReader.getSegmentName()) == false) {, +                    fillSegmentStats(segmentReader, includeSegmentFileSizes, stats);, +                }, +            }, +        }, +        writerSegmentStats(stats);, +        return stats;, +    }, +, +    private void fillSegmentStats(SegmentReader segmentReader, boolean includeSegmentFileSizes, SegmentsStats stats) {, +        try (Searcher searcher = acquireSearcher("segments", SearcherScope.EXTERNAL)){, +            for (LeafReaderContext ctx : searcher.reader().getContext().leaves()) {, +                fillSegmentInfo(Lucene.segmentReader(ctx.reader()), verbose, true, segments);, +, +        try (Searcher searcher = acquireSearcher("segments", SearcherScope.INTERNAL)){, +            for (LeafReaderContext ctx : searcher.reader().getContext().leaves()) {, +                SegmentReader segmentReader = Lucene.segmentReader(ctx.reader());, +                if (segments.containsKey(segmentReader.getSegmentName()) == false) {, +                    fillSegmentInfo(segmentReader, verbose, false, segments);, +                }, +        Arrays.sort(segmentsArr, Comparator.comparingLong(Segment::getGeneration));, +    private void fillSegmentInfo(SegmentReader segmentReader, boolean verbose, boolean search, Map<String, Segment> segments) {, +        SegmentCommitInfo info = segmentReader.getSegmentInfo();]