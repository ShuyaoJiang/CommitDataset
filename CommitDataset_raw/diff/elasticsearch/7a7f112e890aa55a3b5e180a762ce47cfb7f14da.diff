[+++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +        // We validate scope settings. They are mutually exclusive, +        int numScopes = 0;, +        for (SettingsProperty property : properties) {, +            if (property == SettingsProperty.ClusterScope ||, +                property == SettingsProperty.IndexScope ||, +                property == SettingsProperty.NodeScope) {, +                numScopes++;, +            }, +        }, +        if (numScopes > 1) {, +            throw new IllegalArgumentException("More than one scope has been added to the setting [" + key + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +        // We validate scope settings. They are mutually exclusive, +        int numScopes = 0;, +        for (SettingsProperty property : properties) {, +            if (property == SettingsProperty.ClusterScope ||, +                property == SettingsProperty.IndexScope ||, +                property == SettingsProperty.NodeScope) {, +                numScopes++;, +            }, +        }, +        if (numScopes > 1) {, +            throw new IllegalArgumentException("More than one scope has been added to the setting [" + key + "]");, +        }, +++ b/core/src/test/java/org/elasticsearch/common/settings/SettingTests.java, +import static org.hamcrest.Matchers.containsString;, +, +    /**, +     * Only one single scope can be added to any setting, +     */, +    public void testMutuallyExclusiveScopes() {, +        // Those should pass, +        Setting<String> setting = Setting.simpleString("foo.bar", SettingsProperty.ClusterScope);, +        assertThat(setting.hasClusterScope(), is(true));, +        assertThat(setting.hasNodeScope(), is(false));, +        assertThat(setting.hasIndexScope(), is(false));, +        setting = Setting.simpleString("foo.bar", SettingsProperty.NodeScope);, +        assertThat(setting.hasNodeScope(), is(true));, +        assertThat(setting.hasIndexScope(), is(false));, +        assertThat(setting.hasClusterScope(), is(false));, +        setting = Setting.simpleString("foo.bar", SettingsProperty.IndexScope);, +        assertThat(setting.hasIndexScope(), is(true));, +        assertThat(setting.hasNodeScope(), is(false));, +        assertThat(setting.hasClusterScope(), is(false));, +, +        // We test the default scope, +        setting = Setting.simpleString("foo.bar");, +        assertThat(setting.hasNodeScope(), is(true));, +        assertThat(setting.hasIndexScope(), is(false));, +        assertThat(setting.hasClusterScope(), is(false));, +, +        // Those should fail, +        try {, +            Setting.simpleString("foo.bar", SettingsProperty.IndexScope, SettingsProperty.ClusterScope);, +            fail("Multiple scopes should fail");, +        } catch (IllegalArgumentException e) {, +            assertThat(e.getMessage(), containsString("More than one scope has been added to the setting"));, +        }, +        try {, +            Setting.simpleString("foo.bar", SettingsProperty.IndexScope, SettingsProperty.NodeScope);, +            fail("Multiple scopes should fail");, +        } catch (IllegalArgumentException e) {, +            assertThat(e.getMessage(), containsString("More than one scope has been added to the setting"));, +        }, +        try {, +            Setting.simpleString("foo.bar", SettingsProperty.ClusterScope, SettingsProperty.NodeScope);, +            fail("Multiple scopes should fail");, +        } catch (IllegalArgumentException e) {, +            assertThat(e.getMessage(), containsString("More than one scope has been added to the setting"));, +        }, +        try {, +            Setting.simpleString("foo.bar", SettingsProperty.IndexScope, SettingsProperty.ClusterScope, SettingsProperty.NodeScope);, +            fail("Multiple scopes should fail");, +        } catch (IllegalArgumentException e) {, +            assertThat(e.getMessage(), containsString("More than one scope has been added to the setting"));, +        }, +    }]