[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/DeleteAction.java, +import java.util.Arrays;, +        Step.StepKey waitForNoFollowerStepKey = new Step.StepKey(phase, NAME, WaitForNoFollowersStep.NAME);, +, +        WaitForNoFollowersStep waitForNoFollowersStep = new WaitForNoFollowersStep(waitForNoFollowerStepKey, deleteStepKey, client);, +        DeleteStep deleteStep = new DeleteStep(deleteStepKey, nextStepKey, client);, +        return Arrays.asList(waitForNoFollowersStep, deleteStep);, +        Step.StepKey waitForNoFollowerStepKey = new Step.StepKey(phase, NAME, WaitForNoFollowersStep.NAME);, +        Step.StepKey deleteStepKey = new Step.StepKey(phase, NAME, DeleteStep.NAME);, +, +        return Arrays.asList(waitForNoFollowerStepKey, deleteStepKey);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/DeleteAction.java, +import java.util.Arrays;, +        Step.StepKey waitForNoFollowerStepKey = new Step.StepKey(phase, NAME, WaitForNoFollowersStep.NAME);, +, +        WaitForNoFollowersStep waitForNoFollowersStep = new WaitForNoFollowersStep(waitForNoFollowerStepKey, deleteStepKey, client);, +        DeleteStep deleteStep = new DeleteStep(deleteStepKey, nextStepKey, client);, +        return Arrays.asList(waitForNoFollowersStep, deleteStep);, +        Step.StepKey waitForNoFollowerStepKey = new Step.StepKey(phase, NAME, WaitForNoFollowersStep.NAME);, +        Step.StepKey deleteStepKey = new Step.StepKey(phase, NAME, DeleteStep.NAME);, +, +        return Arrays.asList(waitForNoFollowerStepKey, deleteStepKey);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/ShrinkAction.java, +        StepKey waitForNoFollowerStepKey = new StepKey(phase, NAME, WaitForNoFollowersStep.NAME);, +        BranchingStep conditionalSkipShrinkStep = new BranchingStep(branchingKey, waitForNoFollowerStepKey, nextStepKey,, +        WaitForNoFollowersStep waitForNoFollowersStep = new WaitForNoFollowersStep(waitForNoFollowerStepKey, readOnlyKey, client);, +        return Arrays.asList(conditionalSkipShrinkStep, waitForNoFollowersStep, readOnlyStep, setSingleNodeStep, checkShrinkReadyStep,, +            shrink, allocated, copyMetadata, aliasSwapAndDelete, waitOnShrinkTakeover);, +        StepKey waitForNoFollowerStepKey = new StepKey(phase, NAME, WaitForNoFollowersStep.NAME);, +        return Arrays.asList(conditionalSkipKey, waitForNoFollowerStepKey, readOnlyKey, setSingleNodeKey, checkShrinkReadyKey, shrinkKey,, +            enoughShardsKey, copyMetadataKey, aliasKey, isShrunkIndexKey);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/DeleteAction.java, +import java.util.Arrays;, +        Step.StepKey waitForNoFollowerStepKey = new Step.StepKey(phase, NAME, WaitForNoFollowersStep.NAME);, +, +        WaitForNoFollowersStep waitForNoFollowersStep = new WaitForNoFollowersStep(waitForNoFollowerStepKey, deleteStepKey, client);, +        DeleteStep deleteStep = new DeleteStep(deleteStepKey, nextStepKey, client);, +        return Arrays.asList(waitForNoFollowersStep, deleteStep);, +        Step.StepKey waitForNoFollowerStepKey = new Step.StepKey(phase, NAME, WaitForNoFollowersStep.NAME);, +        Step.StepKey deleteStepKey = new Step.StepKey(phase, NAME, DeleteStep.NAME);, +, +        return Arrays.asList(waitForNoFollowerStepKey, deleteStepKey);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/ShrinkAction.java, +        StepKey waitForNoFollowerStepKey = new StepKey(phase, NAME, WaitForNoFollowersStep.NAME);, +        BranchingStep conditionalSkipShrinkStep = new BranchingStep(branchingKey, waitForNoFollowerStepKey, nextStepKey,, +        WaitForNoFollowersStep waitForNoFollowersStep = new WaitForNoFollowersStep(waitForNoFollowerStepKey, readOnlyKey, client);, +        return Arrays.asList(conditionalSkipShrinkStep, waitForNoFollowersStep, readOnlyStep, setSingleNodeStep, checkShrinkReadyStep,, +            shrink, allocated, copyMetadata, aliasSwapAndDelete, waitOnShrinkTakeover);, +        StepKey waitForNoFollowerStepKey = new StepKey(phase, NAME, WaitForNoFollowersStep.NAME);, +        return Arrays.asList(conditionalSkipKey, waitForNoFollowerStepKey, readOnlyKey, setSingleNodeKey, checkShrinkReadyKey, shrinkKey,, +            enoughShardsKey, copyMetadataKey, aliasKey, isShrunkIndexKey);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/WaitForNoFollowersStep.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.core.indexlifecycle;, +, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.admin.indices.stats.IndexStats;, +import org.elasticsearch.action.admin.indices.stats.IndicesStatsRequest;, +import org.elasticsearch.action.admin.indices.stats.ShardStats;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ToXContentObject;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Objects;, +, +/**, + * A step that waits until the index it's used on is no longer a leader index., + * This is necessary as there are some actions which are not safe to perform on, + * a leader index, such as those which delete the index, including Shrink and, + * Delete., + */, +public class WaitForNoFollowersStep extends AsyncWaitStep {, +, +    private static final Logger logger = LogManager.getLogger(WaitForNoFollowersStep.class);, +, +    static final String NAME = "wait-for-shard-history-leases";, +    static final String CCR_LEASE_KEY = "ccr";, +, +    WaitForNoFollowersStep(StepKey key, StepKey nextStepKey, Client client) {, +        super(key, nextStepKey, client);, +    }, +, +    @Override, +    public void evaluateCondition(IndexMetaData indexMetaData, Listener listener) {, +        IndicesStatsRequest request = new IndicesStatsRequest();, +        request.clear();, +        String indexName = indexMetaData.getIndex().getName();, +        request.indices(indexName);, +        getClient().admin().indices().stats(request, ActionListener.wrap((response) -> {]