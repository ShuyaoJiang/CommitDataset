[+++ b/core-signatures.txt, +, +org.apache.lucene.util.RamUsageEstimator#sizeOf(java.lang.Object) @ This can be a perfromance trap , +, +++ b/core-signatures.txt, +, +org.apache.lucene.util.RamUsageEstimator#sizeOf(java.lang.Object) @ This can be a perfromance trap , +, +++ b/pom.xml, +				<exclude>org/elasticsearch/index/percolator/stats/ShardPercolateService$RamEstimator.class</exclude>, +++ b/core-signatures.txt, +, +org.apache.lucene.util.RamUsageEstimator#sizeOf(java.lang.Object) @ This can be a perfromance trap , +, +++ b/pom.xml, +				<exclude>org/elasticsearch/index/percolator/stats/ShardPercolateService$RamEstimator.class</exclude>, +++ b/src/main/java/org/elasticsearch/index/percolator/stats/ShardPercolateService.java, +        size += RamEstimator.sizeOf(query);, +    private static final class RamEstimator {, +        // we move this into it's own class to exclude it from the forbidden API checks, +        // it's fine to use here!, +        static long sizeOf(Query query) {, +            return RamUsageEstimator.sizeOf(query);, +        }, +    }, +]