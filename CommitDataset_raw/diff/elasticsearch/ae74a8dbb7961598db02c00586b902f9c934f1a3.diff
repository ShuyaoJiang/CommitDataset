[+++ b/src/main/java/org/elasticsearch/index/fielddata/plain/AbstractBytesIndexFieldData.java, +import java.util.Map;, +        final Map<String, Settings> groups = fieldDataType.getSettings().getGroups("filter");, +        frequency = groups.get("frequency");, +        regex = groups.get("regex");, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/AbstractBytesIndexFieldData.java, +import java.util.Map;, +        final Map<String, Settings> groups = fieldDataType.getSettings().getGroups("filter");, +        frequency = groups.get("frequency");, +        regex = groups.get("regex");, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import java.util.Map;, +        public T fieldDataSettings(Settings settings) {, +        protected T fieldDataSettings(Settings settings) {, +            this.fieldDataSettings = settings;, +            builder.field("fielddata", (Map)customFieldDataSettings.getAsMap());, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/AbstractBytesIndexFieldData.java, +import java.util.Map;, +        final Map<String, Settings> groups = fieldDataType.getSettings().getGroups("filter");, +        frequency = groups.get("frequency");, +        regex = groups.get("regex");, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import java.util.Map;, +        public T fieldDataSettings(Settings settings) {, +        protected T fieldDataSettings(Settings settings) {, +            this.fieldDataSettings = settings;, +            builder.field("fielddata", (Map)customFieldDataSettings.getAsMap());, +++ b/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +                final Settings settings;, +                if (propNode instanceof Map){, +                    settings = ImmutableSettings.builder().put(SettingsLoader.Helper.loadNestedFromMap((Map<String, Object>)propNode)).build();, +                } else {, +                    throw new ElasticSearchParseException("fielddata should be a hash but was of type: " + propNode.getClass());, +                }, +                builder.fieldDataSettings(settings);, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/AbstractBytesIndexFieldData.java, +import java.util.Map;, +        final Map<String, Settings> groups = fieldDataType.getSettings().getGroups("filter");, +        frequency = groups.get("frequency");, +        regex = groups.get("regex");, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import java.util.Map;, +        public T fieldDataSettings(Settings settings) {, +        protected T fieldDataSettings(Settings settings) {, +            this.fieldDataSettings = settings;, +            builder.field("fielddata", (Map)customFieldDataSettings.getAsMap());, +++ b/src/main/java/org/elasticsearch/index/mapper/core/TypeParsers.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.settings.loader.SettingsLoader;, +                final Settings settings;, +                if (propNode instanceof Map){, +                    settings = ImmutableSettings.builder().put(SettingsLoader.Helper.loadNestedFromMap((Map<String, Object>)propNode)).build();, +                } else {, +                    throw new ElasticSearchParseException("fielddata should be a hash but was of type: " + propNode.getClass());, +                }, +                builder.fieldDataSettings(settings);, +++ b/src/test/java/org/elasticsearch/test/integration/search/facet/SimpleFacetsTests.java, +                    .startObject("fielddata").field("format", "concrete_bytes").endObject(), +                    .startObject("fielddata").field("format", "paged_bytes").endObject(), +                    .startObject("fielddata").field("format", "fst").endObject(), +                    .startObject("fielddata").field("format", "concrete_bytes").endObject(), +                    .startObject("fielddata").field("format", "paged_bytes").endObject(), +                    .startObject("fielddata").field("format", "fst").endObject(), +                    .startObject("fielddata").field("format", "fst").startObject("filter"), +                    .startObject("regex").field("pattern", "\\d{1,2}").endObject().endObject(), +                    .endObject(), +                    // only 1 or 2 digits , +                    .startObject("fielddata").field("format", "fst").startObject("filter"), +                    .startObject("regex").field("pattern", "\\d{1,2}").endObject().endObject()]