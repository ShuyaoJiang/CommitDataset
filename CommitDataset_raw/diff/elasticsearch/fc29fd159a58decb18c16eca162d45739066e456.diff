[+++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/MlRestTestStateCleaner.java, +            } catch (Exception e1) {, +                if (e1.getMessage().contains("expected job state [opened], but got [closed]"), +                        || e1.getMessage().contains("expected job state [opened], but got [closing]")) {, +                    logger.debug("job [" + jobId + "] has already been closed", e1);, +                    logger.warn("failed to close job [" + jobId + "]. Forcing closed.", e1);, +                    throw new RuntimeException("Had to resort to force-closing job, something went wrong?", e1);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/MlRestTestStateCleaner.java, +            } catch (Exception e1) {, +                if (e1.getMessage().contains("expected job state [opened], but got [closed]"), +                        || e1.getMessage().contains("expected job state [opened], but got [closing]")) {, +                    logger.debug("job [" + jobId + "] has already been closed", e1);, +                    logger.warn("failed to close job [" + jobId + "]. Forcing closed.", e1);, +                    throw new RuntimeException("Had to resort to force-closing job, something went wrong?", e1);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/support/BaseMlIntegTestCase.java, +            } catch (ExecutionException e1) {, +                if (e1.getMessage().contains("datafeed already stopped, expected datafeed state [started], but got [stopped]")) {, +                    logger.debug("failed to stop datafeed [" + datafeedId + "], already stopped", e1);, +                    throw new RuntimeException("Had to resort to force-stopping datafeed, something went wrong?", e1);, +            } catch (Exception e1) {, +                if (e1.getMessage().contains("expected job state [opened], but got [closed]"), +                        || e1.getMessage().contains("expected job state [opened], but got [closing]")) {, +                    logger.debug("job [" + jobId + "] has already been closed", e1);, +                    throw new RuntimeException("Had to resort to force-closing job, something went wrong?", e1);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/MlRestTestStateCleaner.java, +            } catch (Exception e1) {, +                if (e1.getMessage().contains("expected job state [opened], but got [closed]"), +                        || e1.getMessage().contains("expected job state [opened], but got [closing]")) {, +                    logger.debug("job [" + jobId + "] has already been closed", e1);, +                    logger.warn("failed to close job [" + jobId + "]. Forcing closed.", e1);, +                    throw new RuntimeException("Had to resort to force-closing job, something went wrong?", e1);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/support/BaseMlIntegTestCase.java, +            } catch (ExecutionException e1) {, +                if (e1.getMessage().contains("datafeed already stopped, expected datafeed state [started], but got [stopped]")) {, +                    logger.debug("failed to stop datafeed [" + datafeedId + "], already stopped", e1);, +                    throw new RuntimeException("Had to resort to force-stopping datafeed, something went wrong?", e1);, +            } catch (Exception e1) {, +                if (e1.getMessage().contains("expected job state [opened], but got [closed]"), +                        || e1.getMessage().contains("expected job state [opened], but got [closing]")) {, +                    logger.debug("job [" + jobId + "] has already been closed", e1);, +                    throw new RuntimeException("Had to resort to force-closing job, something went wrong?", e1);, +++ b/qa/smoke-test-ml-with-security/src/test/java/org/elasticsearch/xpack/ml/integration/MlRestTestStateCleaner.java, +            } catch (Exception e1) {, +                if (e1.getMessage().contains("expected job state [opened], but got [closed]"), +                        || e1.getMessage().contains("expected job state [opened], but got [closing]")) {, +                    logger.debug("job [" + jobId + "] has already been closed", e1);, +                    logger.warn("failed to close job [" + jobId + "]. Forcing closed.", e1);, +                    throw new RuntimeException("Had to resort to force-closing job, something went wrong?", e1);]