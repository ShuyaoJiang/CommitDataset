[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.apache.lucene.misc.IndexMergeTool;, +import org.elasticsearch.common.settings.IndexScopedSettings;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.index.MergePolicyConfig;, +import java.util.Map;, +    private final IndexScopedSettings indexScopedSettigns;, +    public MetaDataIndexUpgradeService(Settings settings, MapperRegistry mapperRegistry, IndexScopedSettings indexScopedSettings) {, +        this.indexScopedSettigns = indexScopedSettings;, +            return archiveBrokenIndexSettings(indexMetaData);, +        return archiveBrokenIndexSettings(newMetaData);, +        return indexMetaData.getUpgradedVersion().onOrAfter(Version.V_3_0_0); // TODO should this be Version.CURRENT?, +    private static final String ARCHIVED_SETTINGS_PREFIX = "archived.";, +, +    IndexMetaData archiveBrokenIndexSettings(IndexMetaData indexMetaData) {, +        Settings settings = indexMetaData.getSettings();, +        Settings.Builder builder = Settings.builder();, +        boolean changed = false;, +        for (Map.Entry<String, String> entry : settings.getAsMap().entrySet()) {, +            try {, +                Setting<?> setting = indexScopedSettigns.get(entry.getKey());, +                if (setting != null) {, +                    setting.get(settings);, +                    builder.put(entry.getKey(), entry.getValue());, +                } else {, +                    if (indexScopedSettigns.isPrivateSetting(entry.getKey()) || entry.getKey().startsWith(ARCHIVED_SETTINGS_PREFIX)) {, +                        builder.put(entry.getKey(), entry.getValue());, +                    } else {, +                        changed = true;, +                        logger.warn("[{}] found unknown index setting: {} value: {} - archiving", indexMetaData.getIndex(), entry.getKey(), entry.getValue());, +                        // we put them back in here such that tools can check from the outside if there are any indices with broken settings. The setting can remain there, +                        // but we want users to be aware that some of their setting are broken and they can research why and what they need to do to replace them., +                        builder.put(ARCHIVED_SETTINGS_PREFIX + entry.getKey(), entry.getValue());, +                    }, +                }, +            } catch (IllegalArgumentException ex) {, +                changed = true;, +                logger.warn("[{}] found invalid index setting: {} value: {} - archiving",ex, indexMetaData.getIndex(), entry.getKey(), entry.getValue());, +                // we put them back in here such that tools can check from the outside if there are any indices with broken settings. The setting can remain there, +                // but we want users to be aware that some of their setting sare broken and they can research why and what they need to do to replace them., +                builder.put(ARCHIVED_SETTINGS_PREFIX + entry.getKey(), entry.getValue());, +            }, +        }, +, +        return changed ? IndexMetaData.builder(indexMetaData).settings(builder.build()).build() : indexMetaData;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.apache.lucene.misc.IndexMergeTool;, +import org.elasticsearch.common.settings.IndexScopedSettings;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.index.MergePolicyConfig;, +import java.util.Map;, +    private final IndexScopedSettings indexScopedSettigns;, +    public MetaDataIndexUpgradeService(Settings settings, MapperRegistry mapperRegistry, IndexScopedSettings indexScopedSettings) {, +        this.indexScopedSettigns = indexScopedSettings;, +            return archiveBrokenIndexSettings(indexMetaData);, +        return archiveBrokenIndexSettings(newMetaData);, +        return indexMetaData.getUpgradedVersion().onOrAfter(Version.V_3_0_0); // TODO should this be Version.CURRENT?, +    private static final String ARCHIVED_SETTINGS_PREFIX = "archived.";, +, +    IndexMetaData archiveBrokenIndexSettings(IndexMetaData indexMetaData) {, +        Settings settings = indexMetaData.getSettings();, +        Settings.Builder builder = Settings.builder();, +        boolean changed = false;, +        for (Map.Entry<String, String> entry : settings.getAsMap().entrySet()) {, +            try {, +                Setting<?> setting = indexScopedSettigns.get(entry.getKey());, +                if (setting != null) {, +                    setting.get(settings);, +                    builder.put(entry.getKey(), entry.getValue());, +                } else {, +                    if (indexScopedSettigns.isPrivateSetting(entry.getKey()) || entry.getKey().startsWith(ARCHIVED_SETTINGS_PREFIX)) {, +                        builder.put(entry.getKey(), entry.getValue());, +                    } else {, +                        changed = true;, +                        logger.warn("[{}] found unknown index setting: {} value: {} - archiving", indexMetaData.getIndex(), entry.getKey(), entry.getValue());, +                        // we put them back in here such that tools can check from the outside if there are any indices with broken settings. The setting can remain there, +                        // but we want users to be aware that some of their setting are broken and they can research why and what they need to do to replace them., +                        builder.put(ARCHIVED_SETTINGS_PREFIX + entry.getKey(), entry.getValue());, +                    }, +                }, +            } catch (IllegalArgumentException ex) {, +                changed = true;, +                logger.warn("[{}] found invalid index setting: {} value: {} - archiving",ex, indexMetaData.getIndex(), entry.getKey(), entry.getValue());, +                // we put them back in here such that tools can check from the outside if there are any indices with broken settings. The setting can remain there, +                // but we want users to be aware that some of their setting sare broken and they can research why and what they need to do to replace them., +                builder.put(ARCHIVED_SETTINGS_PREFIX + entry.getKey(), entry.getValue());, +            }, +        }, +, +        return changed ? IndexMetaData.builder(indexMetaData).settings(builder.build()).build() : indexMetaData;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +, +    public boolean isPrivateSetting(String key) {, +        switch (key) {, +            case IndexMetaData.SETTING_CREATION_DATE:, +            case IndexMetaData.SETTING_INDEX_UUID:]