[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/replication/TransportShardReplicationPingAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/replication/TransportShardReplicationPingAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/gateway/snapshot/TransportShardGatewaySnapshotAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +    @Override protected boolean ignoreReplicas() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/replication/TransportShardReplicationPingAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/gateway/snapshot/TransportShardGatewaySnapshotAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +    @Override protected boolean ignoreReplicas() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/replication/TransportShardReplicationPingAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/gateway/snapshot/TransportShardGatewaySnapshotAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +    @Override protected boolean ignoreReplicas() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/deletebyquery/TransportShardDeleteByQueryAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/replication/TransportShardReplicationPingAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/gateway/snapshot/TransportShardGatewaySnapshotAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +    @Override protected boolean ignoreReplicas() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/deletebyquery/TransportShardDeleteByQueryAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/ping/replication/TransportShardReplicationPingAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/gateway/snapshot/TransportShardGatewaySnapshotAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +    @Override protected boolean ignoreReplicas() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/deletebyquery/TransportShardDeleteByQueryAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +    @Override protected void shardOperationOnReplica(ShardOperationRequest shardRequest) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +        transportService.registerHandler(transportReplicaAction(), new ReplicaOperationTransportHandler());, +    protected abstract void shardOperationOnReplica(ShardOperationRequest shardRequest);, +     * Should the operations be performed on the replicas as well. Defaults to <tt>false</tt> meaning operations, +     * will be executed on the replica., +    protected boolean ignoreReplicas() {, +    private String transportReplicaAction() {, +        return transportAction() + "/replica";, +    private class ReplicaOperationTransportHandler extends BaseTransportRequestHandler<ShardOperationRequest> {, +            shardOperationOnReplica(request);, +         * We spawn, since we want to perform the operation on the replica on a different thread., +                performReplicas(response, alreadyThreaded);, +        private void performReplicas(final Response response, boolean alreadyThreaded) {, +            if (ignoreReplicas() || shards.size() == 1 /* no replicas */) {, +            int replicaCounter = 0;, +                replicaCounter = -100;, +                // if the shard is primary and relocating, add one to the counter since we perform it on the replica as well, +                    if (shard.relocating()) {, +                        replicaCounter++;, +                } else {, +                    replicaCounter++;, +                    // if we are relocating the replica, we want to perform the index operation on both the relocating, +                        replicaCounter++;, +                    }, +            AtomicInteger counter = new AtomicInteger(replicaCounter);, +                boolean doOnlyOnRelocating = false;, +                    if (shard.relocating()) {, +                        doOnlyOnRelocating = true;, +                    } else {, +                }, +                // we index on a replica that is initializing as well since we might not have got the event, +                if (!doOnlyOnRelocating) {, +                    performOnReplica(response, counter, shard, shard.currentNodeId());, +                }, +                    performOnReplica(response, counter, shard, shard.relocatingNodeId());, +        private void performOnReplica(final Response response, final AtomicInteger counter, final ShardRouting shard, String nodeId) {, +                transportService.sendRequest(node, transportReplicaAction(), shardRequest, new VoidTransportResponseHandler() {, +                        if (!ignoreReplicaException(exp.unwrapCause())) {, +                            logger.warn("Failed to perform " + transportAction() + " on replica " + shards.shardId(), exp);, +                            shardStateAction.shardFailed(shard, "Failed to perform [" + transportAction() + "] on replica, message [" + detailedMessage(exp) + "]");, +                                shardOperationOnReplica(shardRequest);, +                                if (!ignoreReplicaException(e)) {, +                                    logger.warn("Failed to perform " + transportAction() + " on replica " + shards.shardId(), e);, +                                    shardStateAction.shardFailed(shard, "Failed to perform [" + transportAction() + "] on replica, message [" + detailedMessage(e) + "]");, +                        shardOperationOnReplica(shardRequest);, +                        if (!ignoreReplicaException(e)) {, +                            logger.warn("Failed to perform " + transportAction() + " on replica" + shards.shardId(), e);, +                            shardStateAction.shardFailed(shard, "Failed to perform [" + transportAction() + "] on replica, message [" + detailedMessage(e) + "]");, +         * Should an exception be ignored when the operation is performed on the replica. The exception, +        private boolean ignoreReplicaException(Throwable e) {]