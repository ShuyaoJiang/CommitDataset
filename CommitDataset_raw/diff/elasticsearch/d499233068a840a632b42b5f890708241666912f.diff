[+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +import java.util.Collection;, +import java.util.function.BiConsumer;, +    private final Collection<BiConsumer<DiscoveryNode, ClusterState>> onJoinValidators;, +                       ClusterApplier clusterApplier, Collection<BiConsumer<DiscoveryNode, ClusterState>> onJoinValidators, Random random) {, +        this.onJoinValidators = JoinTaskExecutor.addBuiltInJoinValidators(onJoinValidators);, +            this::getCurrentTerm, this::handleJoinRequest, this::joinLeaderInTerm, this.onJoinValidators);, +            if (publishRequest.getAcceptedState().term() > coordinationState.get().getLastAcceptedState().term()) {, +                // only do join validation if we have not accepted state from this master yet, +                onJoinValidators.forEach(a -> a.accept(getLocalNode(), publishRequest.getAcceptedState()));, +            }, +, +        final ClusterState stateForJoinValidation = getStateForMasterService();, +, +        if (stateForJoinValidation.nodes().isLocalNodeElectedMaster()) {, +            onJoinValidators.forEach(a -> a.accept(joinRequest.getSourceNode(), stateForJoinValidation));, +            if (stateForJoinValidation.getBlocks().hasGlobalBlock(STATE_NOT_RECOVERED_BLOCK) == false) {, +                // we do this in a couple of places including the cluster update thread. This one here is really just best effort, +                // to ensure we fail as fast as possible., +                JoinTaskExecutor.ensureMajorVersionBarrier(joinRequest.getSourceNode().getVersion(),, +                    stateForJoinValidation.getNodes().getMinNodeVersion());, +            }, +, +            // validate the join on the joining node, will throw a failure if it fails the validation, +            joinHelper.sendValidateJoinRequest(joinRequest.getSourceNode(), stateForJoinValidation, new ActionListener<Empty>() {, +                @Override, +                public void onResponse(Empty empty) {, +                    try {, +                        processJoinRequest(joinRequest, joinCallback);, +                    } catch (Exception e) {, +                        joinCallback.onFailure(e);, +                    }, +                }, +, +                @Override, +                public void onFailure(Exception e) {, +                    logger.warn(() -> new ParameterizedMessage("failed to validate incoming join request from node [{}]",, +                        joinRequest.getSourceNode()), e);, +                    joinCallback.onFailure(new IllegalStateException("failure when sending a validation request to node", e));, +                }, +            });, +        } else {, +            processJoinRequest(joinRequest, joinCallback);, +        }, +    }, +, +    private void processJoinRequest(JoinRequest joinRequest, JoinHelper.JoinCallback joinCallback) {, +    DiscoveryNode getLocalNode() {, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +import java.util.Collection;, +import java.util.function.BiConsumer;, +    private final Collection<BiConsumer<DiscoveryNode, ClusterState>> onJoinValidators;, +                       ClusterApplier clusterApplier, Collection<BiConsumer<DiscoveryNode, ClusterState>> onJoinValidators, Random random) {, +        this.onJoinValidators = JoinTaskExecutor.addBuiltInJoinValidators(onJoinValidators);, +            this::getCurrentTerm, this::handleJoinRequest, this::joinLeaderInTerm, this.onJoinValidators);, +            if (publishRequest.getAcceptedState().term() > coordinationState.get().getLastAcceptedState().term()) {, +                // only do join validation if we have not accepted state from this master yet, +                onJoinValidators.forEach(a -> a.accept(getLocalNode(), publishRequest.getAcceptedState()));, +            }, +, +        final ClusterState stateForJoinValidation = getStateForMasterService();, +, +        if (stateForJoinValidation.nodes().isLocalNodeElectedMaster()) {, +            onJoinValidators.forEach(a -> a.accept(joinRequest.getSourceNode(), stateForJoinValidation));, +            if (stateForJoinValidation.getBlocks().hasGlobalBlock(STATE_NOT_RECOVERED_BLOCK) == false) {, +                // we do this in a couple of places including the cluster update thread. This one here is really just best effort, +                // to ensure we fail as fast as possible., +                JoinTaskExecutor.ensureMajorVersionBarrier(joinRequest.getSourceNode().getVersion(),, +                    stateForJoinValidation.getNodes().getMinNodeVersion());, +            }, +, +            // validate the join on the joining node, will throw a failure if it fails the validation, +            joinHelper.sendValidateJoinRequest(joinRequest.getSourceNode(), stateForJoinValidation, new ActionListener<Empty>() {, +                @Override, +                public void onResponse(Empty empty) {, +                    try {, +                        processJoinRequest(joinRequest, joinCallback);, +                    } catch (Exception e) {, +                        joinCallback.onFailure(e);, +                    }, +                }, +, +                @Override, +                public void onFailure(Exception e) {, +                    logger.warn(() -> new ParameterizedMessage("failed to validate incoming join request from node [{}]",, +                        joinRequest.getSourceNode()), e);, +                    joinCallback.onFailure(new IllegalStateException("failure when sending a validation request to node", e));, +                }, +            });, +        } else {, +            processJoinRequest(joinRequest, joinCallback);, +        }, +    }, +, +    private void processJoinRequest(JoinRequest joinRequest, JoinHelper.JoinCallback joinCallback) {, +    DiscoveryNode getLocalNode() {, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/JoinHelper.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.transport.EmptyTransportResponseHandler;, +import org.elasticsearch.transport.TransportResponse;]