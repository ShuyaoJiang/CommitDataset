[+++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        List<IngestDocument> ingestDocumentList = parseDocs(config, pipelineStore.isNewIngestDateFormat());, +        List<IngestDocument> ingestDocumentList = parseDocs(config, pipelineStore.isNewIngestDateFormat());, +    private static List<IngestDocument> parseDocs(Map<String, Object> config, boolean newDateFormat) {, +                    document, newDateFormat);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        List<IngestDocument> ingestDocumentList = parseDocs(config, pipelineStore.isNewIngestDateFormat());, +        List<IngestDocument> ingestDocumentList = parseDocs(config, pipelineStore.isNewIngestDateFormat());, +    private static List<IngestDocument> parseDocs(Map<String, Object> config, boolean newDateFormat) {, +                    document, newDateFormat);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.ingest.IngestService;, +                    Node.BREAKER_TYPE_KEY,, +                    IngestService.NEW_INGEST_DATE_FORMAT, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        List<IngestDocument> ingestDocumentList = parseDocs(config, pipelineStore.isNewIngestDateFormat());, +        List<IngestDocument> ingestDocumentList = parseDocs(config, pipelineStore.isNewIngestDateFormat());, +    private static List<IngestDocument> parseDocs(Map<String, Object> config, boolean newDateFormat) {, +                    document, newDateFormat);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.ingest.IngestService;, +                    Node.BREAKER_TYPE_KEY,, +                    IngestService.NEW_INGEST_DATE_FORMAT, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +import org.elasticsearch.common.settings.Setting;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +        this(index, type, id, routing, parent, source, false);, +    }, +, +    public IngestDocument(String index, String type, String id, String routing, String parent, Map<String, Object> source,, +                          boolean newDateFormat) {, +        if (newDateFormat) {, +            this.ingestMetadata.put(TIMESTAMP, ZonedDateTime.now(ZoneOffset.UTC));, +        } else {, +    }, +        } else if (value instanceof ZonedDateTime) {, +            ZonedDateTime zonedDateTime = (ZonedDateTime) value;, +            return ZonedDateTime.of(zonedDateTime.toLocalDate(), zonedDateTime.toLocalTime(), zonedDateTime.getZone());, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        List<IngestDocument> ingestDocumentList = parseDocs(config, pipelineStore.isNewIngestDateFormat());, +        List<IngestDocument> ingestDocumentList = parseDocs(config, pipelineStore.isNewIngestDateFormat());, +    private static List<IngestDocument> parseDocs(Map<String, Object> config, boolean newDateFormat) {, +                    document, newDateFormat);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.ingest.IngestService;, +                    Node.BREAKER_TYPE_KEY,, +                    IngestService.NEW_INGEST_DATE_FORMAT, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +import org.elasticsearch.common.settings.Setting;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +        this(index, type, id, routing, parent, source, false);, +    }, +, +    public IngestDocument(String index, String type, String id, String routing, String parent, Map<String, Object> source,, +                          boolean newDateFormat) {, +        if (newDateFormat) {, +            this.ingestMetadata.put(TIMESTAMP, ZonedDateTime.now(ZoneOffset.UTC));, +        } else {, +    }, +        } else if (value instanceof ZonedDateTime) {, +            ZonedDateTime zonedDateTime = (ZonedDateTime) value;, +            return ZonedDateTime.of(zonedDateTime.toLocalDate(), zonedDateTime.toLocalTime(), zonedDateTime.getZone());, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.common.settings.Setting;, +import static org.elasticsearch.common.settings.Setting.Property;, +, +    public static final Setting<Boolean> NEW_INGEST_DATE_FORMAT =, +        Setting.boolSetting("ingest.new_date_format", false, Property.NodeScope, Property.Dynamic, Property.Deprecated);, +    public IngestService(ClusterSettings clusterSettings, Settings settings, ThreadPool threadPool,, +        this.pipelineStore = new PipelineStore(clusterSettings, settings, Collections.unmodifiableMap(processorFactories));, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        List<IngestDocument> ingestDocumentList = parseDocs(config, pipelineStore.isNewIngestDateFormat());, +        List<IngestDocument> ingestDocumentList = parseDocs(config, pipelineStore.isNewIngestDateFormat());, +    private static List<IngestDocument> parseDocs(Map<String, Object> config, boolean newDateFormat) {, +                    document, newDateFormat);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.ingest.IngestService;, +                    Node.BREAKER_TYPE_KEY,, +                    IngestService.NEW_INGEST_DATE_FORMAT, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +import org.elasticsearch.common.settings.Setting;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +        this(index, type, id, routing, parent, source, false);, +    }, +, +    public IngestDocument(String index, String type, String id, String routing, String parent, Map<String, Object> source,, +                          boolean newDateFormat) {, +        if (newDateFormat) {, +            this.ingestMetadata.put(TIMESTAMP, ZonedDateTime.now(ZoneOffset.UTC));, +        } else {, +    }, +        } else if (value instanceof ZonedDateTime) {, +            ZonedDateTime zonedDateTime = (ZonedDateTime) value;, +            return ZonedDateTime.of(zonedDateTime.toLocalDate(), zonedDateTime.toLocalTime(), zonedDateTime.getZone());, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +import org.elasticsearch.common.settings.ClusterSettings;]