[+++ b/server/src/main/java/org/elasticsearch/search/sort/SortBuilder.java, +        final Query childQuery = resolveNestedQuery(context, nestedSort, null);, +        if (childQuery == null) {, +            return null;, +        }, +        final ObjectMapper objectMapper = context.nestedScope().getObjectMapper();, +        final Query parentQuery;, +        if (objectMapper == null) {, +            parentQuery = Queries.newNonNestedFilter(context.indexVersionCreated());, +        } else {, +            parentQuery = objectMapper.nestedTypeFilter();, +        }, +        return new Nested(context.bitsetFilter(parentQuery), childQuery);, +    private static Query resolveNestedQuery(QueryShardContext context, NestedSortBuilder nestedSort, Query parentQuery) throws IOException {, +                if (parentQuery == null) {, +        if (parentQuery != null) {, +                    new ToChildBlockJoinQuery(parentQuery, context.bitsetFilter(objectMapper.nestedTypeFilter())));, +                return resolveNestedQuery(context, nestedNestedSort, childQuery);, +            return childQuery;, +++ b/server/src/main/java/org/elasticsearch/search/sort/SortBuilder.java, +        final Query childQuery = resolveNestedQuery(context, nestedSort, null);, +        if (childQuery == null) {, +            return null;, +        }, +        final ObjectMapper objectMapper = context.nestedScope().getObjectMapper();, +        final Query parentQuery;, +        if (objectMapper == null) {, +            parentQuery = Queries.newNonNestedFilter(context.indexVersionCreated());, +        } else {, +            parentQuery = objectMapper.nestedTypeFilter();, +        }, +        return new Nested(context.bitsetFilter(parentQuery), childQuery);, +    private static Query resolveNestedQuery(QueryShardContext context, NestedSortBuilder nestedSort, Query parentQuery) throws IOException {, +                if (parentQuery == null) {, +        if (parentQuery != null) {, +                    new ToChildBlockJoinQuery(parentQuery, context.bitsetFilter(objectMapper.nestedTypeFilter())));, +                return resolveNestedQuery(context, nestedNestedSort, childQuery);, +            return childQuery;, +++ b/server/src/test/java/org/elasticsearch/index/search/nested/NestedSortingTests.java, +import org.apache.lucene.document.IntPoint;, +import org.apache.lucene.document.NumericDocValuesField;, +import org.apache.lucene.document.SortedNumericDocValuesField;, +import org.apache.lucene.document.TextField;, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.index.query.MatchAllQueryBuilder;, +import org.elasticsearch.index.query.NestedQueryBuilder;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.index.query.QueryShardContext;, +import org.elasticsearch.index.query.RangeQueryBuilder;, +import org.elasticsearch.index.query.TermQueryBuilder;, +import org.elasticsearch.search.sort.FieldSortBuilder;, +import org.elasticsearch.search.sort.NestedSortBuilder;, +import org.elasticsearch.search.sort.SortOrder;, +import java.util.Collections;, +import static org.elasticsearch.index.mapper.SeqNoFieldMapper.PRIMARY_TERM_NAME;, +    public void testMultiLevelNestedSorting() throws IOException {, +        XContentBuilder mapping = XContentFactory.jsonBuilder();, +        mapping.startObject();, +        {, +            mapping.startObject("_doc");, +            {, +                mapping.startObject("properties");, +                {, +                    {, +                        mapping.startObject("title");, +                        mapping.field("type", "text");, +                        mapping.endObject();, +                    }, +                    {, +                        mapping.startObject("genre");, +                        mapping.field("type", "keyword");, +                        mapping.endObject();, +                    }, +                    {, +                        mapping.startObject("chapters");, +                        mapping.field("type", "nested");, +                        {, +                            mapping.startObject("properties");, +                            {, +                                mapping.startObject("title");, +                                mapping.field("type", "text");, +                                mapping.endObject();, +                            }, +                            {, +                                mapping.startObject("read_time_seconds");, +                                mapping.field("type", "integer");, +                                mapping.endObject();, +                            }, +                            {, +                                mapping.startObject("paragraphs");, +                                mapping.field("type", "nested");, +                                {, +                                    mapping.startObject("properties");, +                                    {, +                                        {, +                                            mapping.startObject("header");]