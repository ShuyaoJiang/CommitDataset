[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final Setting<Integer> MAX_LAZY_ML_NODES =, +        Setting.intSetting("xpack.ml.max_lazy_ml_nodes", 0, 0, 3, Property.Dynamic, Property.NodeScope);, +                        MAX_LAZY_ML_NODES,, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final Setting<Integer> MAX_LAZY_ML_NODES =, +        Setting.intSetting("xpack.ml.max_lazy_ml_nodes", 0, 0, 3, Property.Dynamic, Property.NodeScope);, +                        MAX_LAZY_ML_NODES,, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportOpenJobAction.java, +    private static final PersistentTasksCustomMetaData.Assignment AWAITING_LAZY_ASSIGNMENT =, +        new PersistentTasksCustomMetaData.Assignment(null, "persistent task is awaiting node assignment.");, +, +        private volatile int maxLazyMLNodes;, +            this.maxLazyMLNodes = MachineLearning.MAX_LAZY_ML_NODES.get(settings);, +            clusterService.getClusterSettings().addSettingsUpdateConsumer(MachineLearning.MAX_LAZY_ML_NODES, this::setMaxLazyMLNodes);, +            PersistentTasksCustomMetaData.Assignment assignment = selectLeastLoadedMlNode(params.getJobId(),, +                clusterState,, +                maxConcurrentJobAllocations,, +                fallbackMaxNumberOfOpenJobs,, +                maxMachineMemoryPercent,, +                logger);, +            if (assignment.getExecutorNode() == null) {, +                int numMlNodes = 0;, +                for(DiscoveryNode node : clusterState.getNodes()) {, +                    if (Boolean.valueOf(node.getAttributes().get(MachineLearning.ML_ENABLED_NODE_ATTR))) {, +                        numMlNodes++;, +                    }, +                }, +, +                if (numMlNodes < maxLazyMLNodes) { // Means we have lazy nodes left to allocate, +                    assignment = AWAITING_LAZY_ASSIGNMENT;, +                }, +            }, +            return assignment;, +, +            PersistentTasksCustomMetaData.Assignment assignment = getAssignment(params, clusterState);, +            if (assignment.getExecutorNode() == null && assignment.equals(AWAITING_LAZY_ASSIGNMENT) == false) {, +, +        void setMaxLazyMLNodes(int maxLazyMLNodes) {, +            logger.info("Changing [{}] from [{}] to [{}]", MachineLearning.MAX_LAZY_ML_NODES.getKey(),, +                    this.maxLazyMLNodes, maxLazyMLNodes);, +            this.maxLazyMLNodes = maxLazyMLNodes;, +        }, +, +                // This means we are awaiting a new node to be spun up, ok to return back to the user to await node creation, +                if (assignment != null && assignment.equals(AWAITING_LAZY_ASSIGNMENT)) {, +                    return true;, +                }, +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final Setting<Integer> MAX_LAZY_ML_NODES =, +        Setting.intSetting("xpack.ml.max_lazy_ml_nodes", 0, 0, 3, Property.Dynamic, Property.NodeScope);, +                        MAX_LAZY_ML_NODES,, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportOpenJobAction.java, +    private static final PersistentTasksCustomMetaData.Assignment AWAITING_LAZY_ASSIGNMENT =, +        new PersistentTasksCustomMetaData.Assignment(null, "persistent task is awaiting node assignment.");, +, +        private volatile int maxLazyMLNodes;, +            this.maxLazyMLNodes = MachineLearning.MAX_LAZY_ML_NODES.get(settings);, +            clusterService.getClusterSettings().addSettingsUpdateConsumer(MachineLearning.MAX_LAZY_ML_NODES, this::setMaxLazyMLNodes);, +            PersistentTasksCustomMetaData.Assignment assignment = selectLeastLoadedMlNode(params.getJobId(),, +                clusterState,, +                maxConcurrentJobAllocations,, +                fallbackMaxNumberOfOpenJobs,, +                maxMachineMemoryPercent,, +                logger);, +            if (assignment.getExecutorNode() == null) {, +                int numMlNodes = 0;, +                for(DiscoveryNode node : clusterState.getNodes()) {, +                    if (Boolean.valueOf(node.getAttributes().get(MachineLearning.ML_ENABLED_NODE_ATTR))) {, +                        numMlNodes++;, +                    }, +                }, +, +                if (numMlNodes < maxLazyMLNodes) { // Means we have lazy nodes left to allocate, +                    assignment = AWAITING_LAZY_ASSIGNMENT;, +                }, +            }, +            return assignment;, +, +            PersistentTasksCustomMetaData.Assignment assignment = getAssignment(params, clusterState);, +            if (assignment.getExecutorNode() == null && assignment.equals(AWAITING_LAZY_ASSIGNMENT) == false) {, +, +        void setMaxLazyMLNodes(int maxLazyMLNodes) {, +            logger.info("Changing [{}] from [{}] to [{}]", MachineLearning.MAX_LAZY_ML_NODES.getKey(),, +                    this.maxLazyMLNodes, maxLazyMLNodes);, +            this.maxLazyMLNodes = maxLazyMLNodes;, +        }, +, +                // This means we are awaiting a new node to be spun up, ok to return back to the user to await node creation, +                if (assignment != null && assignment.equals(AWAITING_LAZY_ASSIGNMENT)) {, +                    return true;, +                }, +, +++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/integration/TooManyJobsIT.java, +    public void testLazyNodeValidation() throws Exception {, +        int numNodes = 1;, +        int maxNumberOfJobsPerNode = 1;, +        int maxNumberOfLazyNodes = 2;, +        internalCluster().ensureAtMostNumDataNodes(0);]