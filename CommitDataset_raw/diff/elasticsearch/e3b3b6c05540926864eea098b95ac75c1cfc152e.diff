[+++ b/docs/reference/docs/termvectors.asciidoc, +example below). Fields can also be specified with wildcards, +in similar way to the <<query-dsl-multi-match-query,multi match query>> added[1.4.0]., +++ b/docs/reference/docs/termvectors.asciidoc, +example below). Fields can also be specified with wildcards, +in similar way to the <<query-dsl-multi-match-query,multi match query>> added[1.4.0]., +++ b/src/main/java/org/elasticsearch/action/termvector/MultiTermVectorsRequest.java, +    public void add(TermVectorRequest template, BytesReference data) throws Exception {, +++ b/docs/reference/docs/termvectors.asciidoc, +example below). Fields can also be specified with wildcards, +in similar way to the <<query-dsl-multi-match-query,multi match query>> added[1.4.0]., +++ b/src/main/java/org/elasticsearch/action/termvector/MultiTermVectorsRequest.java, +    public void add(TermVectorRequest template, BytesReference data) throws Exception {, +++ b/src/main/java/org/elasticsearch/action/termvector/TermVectorRequest.java, +++ b/docs/reference/docs/termvectors.asciidoc, +example below). Fields can also be specified with wildcards, +in similar way to the <<query-dsl-multi-match-query,multi match query>> added[1.4.0]., +++ b/src/main/java/org/elasticsearch/action/termvector/MultiTermVectorsRequest.java, +    public void add(TermVectorRequest template, BytesReference data) throws Exception {, +++ b/src/main/java/org/elasticsearch/action/termvector/TermVectorRequest.java, +++ b/src/main/java/org/elasticsearch/index/termvectors/ShardTermVectorService.java, +import org.elasticsearch.common.regex.Regex;, +                /* handle potential wildcards in fields */, +                if (request.selectedFields() != null) {, +                    handleFieldWildcards(request);, +                }, +                Fields termVectorsByField = docIdAndVersion.context.reader().getTermVectors(docIdAndVersion.docId);, +    private void handleFieldWildcards(TermVectorRequest request) {, +        Set<String> fieldNames = new HashSet<>();, +        for (String pattern : request.selectedFields()) {, +            fieldNames.addAll(indexShard.mapperService().simpleMatchToIndexNames(pattern));, +        }, +        request.selectedFields(fieldNames.toArray(Strings.EMPTY_ARRAY));, +    }, +, +, +++ b/docs/reference/docs/termvectors.asciidoc, +example below). Fields can also be specified with wildcards, +in similar way to the <<query-dsl-multi-match-query,multi match query>> added[1.4.0]., +++ b/src/main/java/org/elasticsearch/action/termvector/MultiTermVectorsRequest.java, +    public void add(TermVectorRequest template, BytesReference data) throws Exception {, +++ b/src/main/java/org/elasticsearch/action/termvector/TermVectorRequest.java, +++ b/src/main/java/org/elasticsearch/index/termvectors/ShardTermVectorService.java, +import org.elasticsearch.common.regex.Regex;, +                /* handle potential wildcards in fields */, +                if (request.selectedFields() != null) {, +                    handleFieldWildcards(request);, +                }, +                Fields termVectorsByField = docIdAndVersion.context.reader().getTermVectors(docIdAndVersion.docId);, +    private void handleFieldWildcards(TermVectorRequest request) {, +        Set<String> fieldNames = new HashSet<>();, +        for (String pattern : request.selectedFields()) {, +            fieldNames.addAll(indexShard.mapperService().simpleMatchToIndexNames(pattern));, +        }, +        request.selectedFields(fieldNames.toArray(Strings.EMPTY_ARRAY));, +    }, +, +, +++ b/src/test/java/org/elasticsearch/action/termvector/GetTermVectorTests.java, +, +    @Test, +    public void testSimpleWildCards() throws ElasticsearchException, IOException {, +        int numFields = 25;, +, +        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties");, +        XContentBuilder source = XContentFactory.jsonBuilder().startObject();, +        for (int i = 0; i < numFields; i++) {, +            mapping.startObject("field" + i), +                    .field("type", "string"), +                    .field("term_vector", randomBoolean() ? "yes" : "no"), +                    .endObject();, +            source.field("field" + i, "some text here");, +        }, +        source.endObject();, +        mapping.endObject().endObject().endObject();, +, +        assertAcked(prepareCreate("test").addMapping("type1", mapping));, +        ensureGreen();, +, +        client().prepareIndex("test", "type1", "0").setSource(source).get();, +        refresh();, +, +        TermVectorResponse response = client().prepareTermVector("test", "type1", "0").setSelectedFields("field*").get();, +        assertThat("Doc doesn't exists but should", response.isExists(), equalTo(true));, +        assertThat("All term vectors should have been generated", response.getFields().size(), equalTo(numFields));, +    }]