[+++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ThrottlingAllocationDecider.java, +    public static final int DEFAULT_CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES = 2;, +    public static final int DEFAULT_CLUSTER_ROUTING_ALLOCATION_NODE_INITIAL_PRIMARIES_RECOVERIES = 4;, +        this.primariesInitialRecoveries = settings.getAsInt(CLUSTER_ROUTING_ALLOCATION_NODE_INITIAL_PRIMARIES_RECOVERIES, DEFAULT_CLUSTER_ROUTING_ALLOCATION_NODE_INITIAL_PRIMARIES_RECOVERIES);, +        this.concurrentRecoveries = settings.getAsInt("cluster.routing.allocation.concurrent_recoveries", settings.getAsInt(CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES, DEFAULT_CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES));, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ThrottlingAllocationDecider.java, +    public static final int DEFAULT_CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES = 2;, +    public static final int DEFAULT_CLUSTER_ROUTING_ALLOCATION_NODE_INITIAL_PRIMARIES_RECOVERIES = 4;, +        this.primariesInitialRecoveries = settings.getAsInt(CLUSTER_ROUTING_ALLOCATION_NODE_INITIAL_PRIMARIES_RECOVERIES, DEFAULT_CLUSTER_ROUTING_ALLOCATION_NODE_INITIAL_PRIMARIES_RECOVERIES);, +        this.concurrentRecoveries = settings.getAsInt("cluster.routing.allocation.concurrent_recoveries", settings.getAsInt(CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES, DEFAULT_CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES));, +++ b/src/test/java/org/elasticsearch/test/integration/cluster/allocation/FilteringAllocationTests.java, +import org.elasticsearch.cluster.routing.allocation.decider.ThrottlingAllocationDecider;, +        ClusterState clusterState = client("node1").admin().cluster().prepareState().execute().actionGet().getState();, +        IndexRoutingTable indexRoutingTable = clusterState.routingTable().index("test");, +        int numShardsOnNode1 = 0;, +        for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {, +            for (ShardRouting shardRouting : indexShardRoutingTable) {, +                if ("node1".equals(clusterState.nodes().get(shardRouting.currentNodeId()).name())) {, +                    numShardsOnNode1++;, +                }, +            }, +        }, +        if (numShardsOnNode1 > ThrottlingAllocationDecider.DEFAULT_CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES) {, +            client("node1").admin().cluster().prepareUpdateSettings(), +            .setTransientSettings(settingsBuilder().put("cluster.routing.allocation.node_concurrent_recoveries", numShardsOnNode1)).execute().actionGet();, +            // make sure we can recover all the nodes at once otherwise we might run into a state where one of the shards has not yet started relocating, +            // but we already fired up the request to wait for 0 relocating shards. , +        }, +        clusterState = client("node1").admin().cluster().prepareState().execute().actionGet().getState();, +        indexRoutingTable = clusterState.routingTable().index("test");]