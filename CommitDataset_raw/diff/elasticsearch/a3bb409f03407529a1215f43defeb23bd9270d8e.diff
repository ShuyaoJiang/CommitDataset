[+++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +    /** Values that have more chars than the return value of this method will, +     *  be skipped at parsing time. */, +    // pkg-private for testing, +    int ignoreAbove() {, +        return ignoreAbove;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +    /** Values that have more chars than the return value of this method will, +     *  be skipped at parsing time. */, +    // pkg-private for testing, +    int ignoreAbove() {, +        return ignoreAbove;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +    // If a string field is created on 5.x and all parameters are in this list then we, +    // will automatically upgrade to a text/keyword field. Otherwise we will just fail, +    // saying that string fields are not supported anymore., +            "index", "store", "doc_values", "omit_norms", "norms", "fields", "copy_to",, +            "fielddata", "ignore_above"));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +    /** Values that have more chars than the return value of this method will, +     *  be skipped at parsing time. */, +    // pkg-private for testing, +    int ignoreAbove() {, +        return ignoreAbove;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +    // If a string field is created on 5.x and all parameters are in this list then we, +    // will automatically upgrade to a text/keyword field. Otherwise we will just fail, +    // saying that string fields are not supported anymore., +            "index", "store", "doc_values", "omit_norms", "norms", "fields", "copy_to",, +            "fielddata", "ignore_above"));, +++ b/core/src/test/java/org/elasticsearch/index/mapper/core/StringMappingUpgradeTests.java, +    public void testUpgradeIgnoreAbove() throws IOException {, +        IndexService indexService = createIndex("test");, +        DocumentMapperParser parser = indexService.mapperService().documentMapperParser();, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field").field("type", "string"), +                .field("index", "not_analyzed").field("ignore_above", 200).endObject().endObject(), +                .endObject().endObject().string();, +        DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping));, +        FieldMapper field = mapper.mappers().getMapper("field");, +        assertThat(field, instanceOf(KeywordFieldMapper.class));, +        assertEquals(200, ((KeywordFieldMapper) field).ignoreAbove());, +    }, +]