[+++ b/src/main/java/org/elasticsearch/common/network/MulticastChannel.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.network;, +, +import com.google.common.collect.Maps;, +import org.apache.lucene.util.IOUtils;, +, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +import org.elasticsearch.common.settings.ImmutableSettings;, +, +import java.io.Closeable;, +import java.net.*;, +import java.util.Map;, +import java.util.concurrent.CopyOnWriteArrayList;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import static org.elasticsearch.common.util.concurrent.EsExecutors.daemonThreadFactory;, +, +/**, + * A multicast channel that supports registering for receive events, and sending datagram packets. Allows, + * to easily share the same multicast socket if it holds the same config., + */, +public abstract class MulticastChannel implements Closeable {, +, +    /**, +     * Builds a channel based on the provided config, allowing to control if sharing a channel that uses, +     * the same config is allowed or not., +     */, +    public static MulticastChannel getChannel(String name, boolean shared, Config config, Listener listener) throws Exception {, +        if (!shared) {, +            return new Plain(listener, name, config);, +        }, +        return Shared.getSharedChannel(listener, config);, +    }, +, +    /**, +     * Config of multicast channel., +     */, +    public static final class Config {, +        public final int port;, +        public final String group;, +        public final int bufferSize;, +        public final int ttl;, +        public final InetAddress multicastInterface;, +, +        public Config(int port, String group, int bufferSize, int ttl, InetAddress multicastInterface) {, +            this.port = port;, +            this.group = group;, +            this.bufferSize = bufferSize;, +            this.ttl = ttl;, +            this.multicastInterface = multicastInterface;, +        }, +, +        @Override, +        public boolean equals(Object o) {, +            if (this == o) return true;, +            if (o == null || getClass() != o.getClass()) return false;, +, +            Config config = (Config) o;, +, +            if (bufferSize != config.bufferSize) return false;, +            if (port != config.port) return false;, +            if (ttl != config.ttl) return false;, +            if (group != null ? !group.equals(config.group) : config.group != null) return false;, +            if (multicastInterface != null ? !multicastInterface.equals(config.multicastInterface) : config.multicastInterface != null), +                return false;, +, +            return true;, +        }, +, +        @Override, +        public int hashCode() {, +            int result = port;, +            result = 31 * result + (group != null ? group.hashCode() : 0);, +            result = 31 * result + bufferSize;, +            result = 31 * result + ttl;, +            result = 31 * result + (multicastInterface != null ? multicastInterface.hashCode() : 0);, +            return result;, +        }]