[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +import org.elasticsearch.xpack.sql.plan.logical.UnaryPlan;, +                if (values.size() == p.projections().size() && !(p.child() instanceof EsRelation) &&, +                    isNotQueryWithFromClauseAndFilterFoldedToFalse(p)) {, +                if (values.size() == a.aggregates().size() && isNotQueryWithFromClauseAndFilterFoldedToFalse(a)) {, +, +        /**, +         * Check if the plan doesn't model a query with FROM clause on a table, +         * that its filter (WHERE clause) is folded to FALSE., +         */, +        private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan) {, +            return (!(plan.child() instanceof LocalRelation) || (plan.child() instanceof LocalRelation &&, +                !(((LocalRelation) plan.child()).executable() instanceof EmptyExecutable)));, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +import org.elasticsearch.xpack.sql.plan.logical.UnaryPlan;, +                if (values.size() == p.projections().size() && !(p.child() instanceof EsRelation) &&, +                    isNotQueryWithFromClauseAndFilterFoldedToFalse(p)) {, +                if (values.size() == a.aggregates().size() && isNotQueryWithFromClauseAndFilterFoldedToFalse(a)) {, +, +        /**, +         * Check if the plan doesn't model a query with FROM clause on a table, +         * that its filter (WHERE clause) is folded to FALSE., +         */, +        private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan) {, +            return (!(plan.child() instanceof LocalRelation) || (plan.child() instanceof LocalRelation &&, +                !(((LocalRelation) plan.child()).executable() instanceof EmptyExecutable)));, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/LogicalPlanBuilder.java, +import org.elasticsearch.xpack.sql.session.SingletonExecutable;, +            query = new LocalRelation(source(ctx), new SingletonExecutable());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +import org.elasticsearch.xpack.sql.plan.logical.UnaryPlan;, +                if (values.size() == p.projections().size() && !(p.child() instanceof EsRelation) &&, +                    isNotQueryWithFromClauseAndFilterFoldedToFalse(p)) {, +                if (values.size() == a.aggregates().size() && isNotQueryWithFromClauseAndFilterFoldedToFalse(a)) {, +, +        /**, +         * Check if the plan doesn't model a query with FROM clause on a table, +         * that its filter (WHERE clause) is folded to FALSE., +         */, +        private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan) {, +            return (!(plan.child() instanceof LocalRelation) || (plan.child() instanceof LocalRelation &&, +                !(((LocalRelation) plan.child()).executable() instanceof EmptyExecutable)));, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/LogicalPlanBuilder.java, +import org.elasticsearch.xpack.sql.session.SingletonExecutable;, +            query = new LocalRelation(source(ctx), new SingletonExecutable());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/session/SingletonExecutable.java, +import java.util.Collections;, +    public SingletonExecutable() {, +        this(Collections.emptyList());, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +import org.elasticsearch.xpack.sql.plan.logical.UnaryPlan;, +                if (values.size() == p.projections().size() && !(p.child() instanceof EsRelation) &&, +                    isNotQueryWithFromClauseAndFilterFoldedToFalse(p)) {, +                if (values.size() == a.aggregates().size() && isNotQueryWithFromClauseAndFilterFoldedToFalse(a)) {, +, +        /**, +         * Check if the plan doesn't model a query with FROM clause on a table, +         * that its filter (WHERE clause) is folded to FALSE., +         */, +        private static boolean isNotQueryWithFromClauseAndFilterFoldedToFalse(UnaryPlan plan) {, +            return (!(plan.child() instanceof LocalRelation) || (plan.child() instanceof LocalRelation &&, +                !(((LocalRelation) plan.child()).executable() instanceof EmptyExecutable)));, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/LogicalPlanBuilder.java, +import org.elasticsearch.xpack.sql.session.SingletonExecutable;, +            query = new LocalRelation(source(ctx), new SingletonExecutable());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/session/SingletonExecutable.java, +import java.util.Collections;, +    public SingletonExecutable() {, +        this(Collections.emptyList());, +    }, +, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryFolderTests.java, +import org.elasticsearch.xpack.sql.session.SingletonExecutable;, +    public void testLocalExecWithPrunedFilterWithFunction() {, +        PhysicalPlan p = plan("SELECT E() FROM test WHERE PI() = 5");, +        assertEquals(LocalExec.class, p.getClass());, +        LocalExec le = (LocalExec) p;, +        assertEquals(EmptyExecutable.class, le.executable().getClass());, +        EmptyExecutable ee = (EmptyExecutable) le.executable();, +        assertEquals(1, ee.output().size());, +        assertThat(ee.output().get(0).toString(), startsWith("E{c}#"));, +    }, +, +    public void testLocalExecWithPrunedFilterWithFunctionAndAggregation() {, +        PhysicalPlan p = plan("SELECT E() FROM test WHERE PI() = 5 GROUP BY 1");, +        assertEquals(LocalExec.class, p.getClass());, +        LocalExec le = (LocalExec) p;, +        assertEquals(EmptyExecutable.class, le.executable().getClass());, +        EmptyExecutable ee = (EmptyExecutable) le.executable();, +        assertEquals(1, ee.output().size());, +        assertThat(ee.output().get(0).toString(), startsWith("E{c}#"));, +    }, +, +    public void testLocalExecWithoutFromClause() {]