[+++ b/client-sniffer/build.gradle, +//TODO would be nice to just exclude the classes where we use com.sun.net.httpserver.* classes, +//excludes don't seem to work though and we don't want to have our own @SuppressForbidden, +forbiddenApisTest.enabled=false, +, +//forbiddenApisTest {, +  //signaturesURLs = [PrecommitTasks.getResource('/forbidden/jdk-signatures.txt')], +//}, +++ b/client-sniffer/build.gradle, +//TODO would be nice to just exclude the classes where we use com.sun.net.httpserver.* classes, +//excludes don't seem to work though and we don't want to have our own @SuppressForbidden, +forbiddenApisTest.enabled=false, +, +//forbiddenApisTest {, +  //signaturesURLs = [PrecommitTasks.getResource('/forbidden/jdk-signatures.txt')], +//}, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +import com.sun.net.httpserver.HttpExchange;, +import com.sun.net.httpserver.HttpHandler;, +import com.sun.net.httpserver.HttpServer;, +import org.apache.http.Consts;, +import java.io.OutputStream;, +import java.net.InetSocketAddress;, +    private HttpServer httpServer;, +    public void startHttpServer() throws IOException {, +        this.httpServer = createHttpServer(sniffResponse, sniffRequestTimeout);, +        this.httpServer.start();, +    public void stopHttpServer() throws IOException {, +        httpServer.stop(0);, +        HttpHost httpHost = new HttpHost(httpServer.getAddress().getHostName(), httpServer.getAddress().getPort());, +                    assertThat(e.getMessage(), containsString("GET http://localhost:" + httpServer.getAddress().getPort() +, +    private static HttpServer createHttpServer(final SniffResponse sniffResponse, final int sniffTimeout) throws IOException {, +        HttpServer httpServer = HttpServer.create(new InetSocketAddress(0), 0);, +        httpServer.createContext("/_nodes/http", new HttpHandler() {, +            public void handle(HttpExchange httpExchange) throws IOException {, +                if (httpExchange.getRequestMethod().equals(HttpGet.METHOD_NAME)) {, +                    if (httpExchange.getRequestURI().getRawQuery().equals("timeout=" + sniffTimeout + "ms")) {, +                        String nodesInfoBody = sniffResponse.nodesInfoBody;, +                        httpExchange.sendResponseHeaders(sniffResponse.nodesInfoResponseCode, nodesInfoBody.length());, +                        try (OutputStream out = httpExchange.getResponseBody()) {, +                            out.write(nodesInfoBody.getBytes(Consts.UTF_8));, +                            return;, +                httpExchange.sendResponseHeaders(404, 0);, +                httpExchange.close();, +            }, +        });, +        return httpServer;, +++ b/client-sniffer/build.gradle, +//TODO would be nice to just exclude the classes where we use com.sun.net.httpserver.* classes, +//excludes don't seem to work though and we don't want to have our own @SuppressForbidden, +forbiddenApisTest.enabled=false, +, +//forbiddenApisTest {, +  //signaturesURLs = [PrecommitTasks.getResource('/forbidden/jdk-signatures.txt')], +//}, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +import com.sun.net.httpserver.HttpExchange;, +import com.sun.net.httpserver.HttpHandler;, +import com.sun.net.httpserver.HttpServer;, +import org.apache.http.Consts;, +import java.io.OutputStream;, +import java.net.InetSocketAddress;, +    private HttpServer httpServer;, +    public void startHttpServer() throws IOException {, +        this.httpServer = createHttpServer(sniffResponse, sniffRequestTimeout);, +        this.httpServer.start();, +    public void stopHttpServer() throws IOException {, +        httpServer.stop(0);, +        HttpHost httpHost = new HttpHost(httpServer.getAddress().getHostName(), httpServer.getAddress().getPort());, +                    assertThat(e.getMessage(), containsString("GET http://localhost:" + httpServer.getAddress().getPort() +, +    private static HttpServer createHttpServer(final SniffResponse sniffResponse, final int sniffTimeout) throws IOException {, +        HttpServer httpServer = HttpServer.create(new InetSocketAddress(0), 0);, +        httpServer.createContext("/_nodes/http", new HttpHandler() {, +            public void handle(HttpExchange httpExchange) throws IOException {, +                if (httpExchange.getRequestMethod().equals(HttpGet.METHOD_NAME)) {, +                    if (httpExchange.getRequestURI().getRawQuery().equals("timeout=" + sniffTimeout + "ms")) {, +                        String nodesInfoBody = sniffResponse.nodesInfoBody;, +                        httpExchange.sendResponseHeaders(sniffResponse.nodesInfoResponseCode, nodesInfoBody.length());, +                        try (OutputStream out = httpExchange.getResponseBody()) {, +                            out.write(nodesInfoBody.getBytes(Consts.UTF_8));, +                            return;, +                httpExchange.sendResponseHeaders(404, 0);, +                httpExchange.close();, +            }, +        });, +        return httpServer;, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/SnifferBuilderTests.java, +++ b/client-sniffer/build.gradle, +//TODO would be nice to just exclude the classes where we use com.sun.net.httpserver.* classes, +//excludes don't seem to work though and we don't want to have our own @SuppressForbidden, +forbiddenApisTest.enabled=false, +, +//forbiddenApisTest {, +  //signaturesURLs = [PrecommitTasks.getResource('/forbidden/jdk-signatures.txt')], +//}, +++ b/client-sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +import com.sun.net.httpserver.HttpExchange;, +import com.sun.net.httpserver.HttpHandler;, +import com.sun.net.httpserver.HttpServer;, +import org.apache.http.Consts;]