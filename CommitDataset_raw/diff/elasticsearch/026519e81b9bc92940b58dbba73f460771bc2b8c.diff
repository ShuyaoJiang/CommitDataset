[+++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(ParseField.class));, +, +    boolean match(String currentFieldName, boolean strict) {, +                if (strict) {, +                } else {, +                    DEPRECATION_LOGGER.deprecated(msg);, +++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(ParseField.class));, +, +    boolean match(String currentFieldName, boolean strict) {, +                if (strict) {, +                } else {, +                    DEPRECATION_LOGGER.deprecated(msg);, +++ b/core/src/main/java/org/elasticsearch/common/ParseFieldMatcher.java, +    public static final ParseFieldMatcher EMPTY = new ParseFieldMatcher(false);, +    public static final ParseFieldMatcher STRICT = new ParseFieldMatcher(true);, +    private final boolean strict;, +        this(settings.getAsBoolean(PARSE_STRICT, false));, +    public ParseFieldMatcher(boolean strict) {, +        this.strict = strict;, +    }, +, +    /** Should deprecated settings be rejected? */, +    public boolean isStrict() {, +        return strict;, +        return parseField.match(fieldName, strict);, +++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(ParseField.class));, +, +    boolean match(String currentFieldName, boolean strict) {, +                if (strict) {, +                } else {, +                    DEPRECATION_LOGGER.deprecated(msg);, +++ b/core/src/main/java/org/elasticsearch/common/ParseFieldMatcher.java, +    public static final ParseFieldMatcher EMPTY = new ParseFieldMatcher(false);, +    public static final ParseFieldMatcher STRICT = new ParseFieldMatcher(true);, +    private final boolean strict;, +        this(settings.getAsBoolean(PARSE_STRICT, false));, +    public ParseFieldMatcher(boolean strict) {, +        this.strict = strict;, +    }, +, +    /** Should deprecated settings be rejected? */, +    public boolean isStrict() {, +        return strict;, +        return parseField.match(fieldName, strict);, +++ b/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java, +import static org.hamcrest.CoreMatchers.containsString;, +        assertThat(field.match(randomFrom(values), false), is(true));, +        assertThat(field.match("foo bar", false), is(false));, +        assertThat(field.match(randomFrom(deprecated), false), is(false));, +        assertThat(field.match("barFoo", false), is(false));, +        assertThat(withDeprecations.match(randomFrom(values), false), is(true));, +        assertThat(withDeprecations.match("foo bar", false), is(false));, +        assertThat(withDeprecations.match(randomFrom(deprecated), false), is(true));, +        assertThat(withDeprecations.match("barFoo", false), is(true));, +        assertThat(field.match(randomFrom(values), true), is(true));, +        assertThat(field.match("foo bar", true), is(false));, +        assertThat(field.match(randomFrom(deprecated), true), is(false));, +        assertThat(field.match("barFoo", true), is(false));, +        assertThat(withDeprecations.match(randomFrom(values), true), is(true));, +        assertThat(withDeprecations.match("foo bar", true), is(false));, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                () -> withDeprecations.match(randomFrom(deprecated), true));, +        assertThat(e.getMessage(), containsString("used, expected [foo_bar] instead"));, +        e = expectThrows(IllegalArgumentException.class, () -> withDeprecations.match("barFoo", true));, +        assertThat(e.getMessage(), containsString("Deprecated field [barFoo] used, expected [foo_bar] instead"));, +        String[] allValues;, +            String[] newArray = new String[values.length + deprecated.length];, +            System.arraycopy(values, 0, newArray, 0, values.length);, +            System.arraycopy(deprecated, 0, newArray, values.length, deprecated.length);, +        } else {, +            allValues = values;, +        ParseField field;, +            field = new ParseField(randomFrom(values)).withDeprecation(deprecated).withAllDeprecated("like");, +        } else {, +            field = new ParseField(randomFrom(values)).withAllDeprecated("like");, +        assertThat(field.match(randomFrom(allValues), false), is(true));, +        assertThat(field.match("not a field name", false), is(false));, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> field.match(randomFrom(allValues), true));, +        assertThat(e.getMessage(), containsString(" used, replaced by [like]"));]