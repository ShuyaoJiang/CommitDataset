[+++ b/elasticsearch/x-pack/build.gradle, +group 'org.elasticsearch.plugin', +, +++ b/elasticsearch/x-pack/build.gradle, +group 'org.elasticsearch.plugin', +, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/MarvelSettings.java, +    /**, +     * The minimum amount of time allowed for the history duration., +     */, +    public static final TimeValue HISTORY_DURATION_MINIMUM = TimeValue.timeValueHours(24);, +     * The default retention duration of the monitoring history data., +     * <p>, +     * Expected values:, +     * <ul>, +     * <li>Default: 7 days</li>, +     * <li>Minimum: 1 day</li>, +     * </ul>, +     *, +     * @see #HISTORY_DURATION_MINIMUM, +            timeSetting(key(HISTORY_DURATION_SETTING_NAME),, +                        TimeValue.timeValueHours(7 * 24), // default value (7 days), +                        HISTORY_DURATION_MINIMUM,         // minimum value, +                        Property.Dynamic, Property.NodeScope);, +    /**, +     * Prefix the {@code key} with the Monitoring prefix., +     *, +     * @param key The key to prefix, +     * @return The key prefixed by the product prefixes., +     */, +    static String key(String key) {, +++ b/elasticsearch/x-pack/build.gradle, +group 'org.elasticsearch.plugin', +, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/MarvelSettings.java, +    /**, +     * The minimum amount of time allowed for the history duration., +     */, +    public static final TimeValue HISTORY_DURATION_MINIMUM = TimeValue.timeValueHours(24);, +     * The default retention duration of the monitoring history data., +     * <p>, +     * Expected values:, +     * <ul>, +     * <li>Default: 7 days</li>, +     * <li>Minimum: 1 day</li>, +     * </ul>, +     *, +     * @see #HISTORY_DURATION_MINIMUM, +            timeSetting(key(HISTORY_DURATION_SETTING_NAME),, +                        TimeValue.timeValueHours(7 * 24), // default value (7 days), +                        HISTORY_DURATION_MINIMUM,         // minimum value, +                        Property.Dynamic, Property.NodeScope);, +    /**, +     * Prefix the {@code key} with the Monitoring prefix., +     *, +     * @param key The key to prefix, +     * @return The key prefixed by the product prefixes., +     */, +    static String key(String key) {, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/local/LocalExporter.java, +++ b/elasticsearch/x-pack/build.gradle, +group 'org.elasticsearch.plugin', +, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/MarvelSettings.java, +    /**, +     * The minimum amount of time allowed for the history duration., +     */, +    public static final TimeValue HISTORY_DURATION_MINIMUM = TimeValue.timeValueHours(24);, +     * The default retention duration of the monitoring history data., +     * <p>, +     * Expected values:, +     * <ul>, +     * <li>Default: 7 days</li>, +     * <li>Minimum: 1 day</li>, +     * </ul>, +     *, +     * @see #HISTORY_DURATION_MINIMUM, +            timeSetting(key(HISTORY_DURATION_SETTING_NAME),, +                        TimeValue.timeValueHours(7 * 24), // default value (7 days), +                        HISTORY_DURATION_MINIMUM,         // minimum value, +                        Property.Dynamic, Property.NodeScope);, +    /**, +     * Prefix the {@code key} with the Monitoring prefix., +     *, +     * @param key The key to prefix, +     * @return The key prefixed by the product prefixes., +     */, +    static String key(String key) {, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/local/LocalExporter.java, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/cleaner/CleanerService.java, +import org.elasticsearch.common.util.concurrent.AbstractLifecycleRunnable;, + * {@code CleanerService} takes care of deleting old monitoring indices., +    private volatile TimeValue globalRetention;, +        this.globalRetention = MarvelSettings.HISTORY_DURATION.get(settings);, +, +        // the validation is performed by the setting's object itself, +        clusterSettings.addSettingsUpdateConsumer(MarvelSettings.HISTORY_DURATION, this::setGlobalRetention);, +    /**, +     * Get the retention that can be used., +     * <p>]