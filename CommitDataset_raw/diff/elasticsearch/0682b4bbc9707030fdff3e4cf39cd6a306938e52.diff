[+++ b/docs/reference/index-modules/store.asciidoc, +[[default_fs]]`default_fs` deprecated[5.0.0, The `default_fs` store type is deprecated - use `fs` instead]::, +, +The `default` type is deprecated and is aliased to `fs` for backward, +compatibility., +, +++ b/docs/reference/index-modules/store.asciidoc, +[[default_fs]]`default_fs` deprecated[5.0.0, The `default_fs` store type is deprecated - use `fs` instead]::, +, +The `default` type is deprecated and is aliased to `fs` for backward, +compatibility., +, +++ b/docs/reference/rest-api/info.asciidoc, +      "index_lifecycle" : {, +         "description" : "Index lifecycle management for the Elastic Stack",, +         "available" : true,, +         "enabled" : true, +      },, +++ b/docs/reference/index-modules/store.asciidoc, +[[default_fs]]`default_fs` deprecated[5.0.0, The `default_fs` store type is deprecated - use `fs` instead]::, +, +The `default` type is deprecated and is aliased to `fs` for backward, +compatibility., +, +++ b/docs/reference/rest-api/info.asciidoc, +      "index_lifecycle" : {, +         "description" : "Index lifecycle management for the Elastic Stack",, +         "available" : true,, +         "enabled" : true, +      },, +++ b/docs/reference/setup/bootstrap-checks.asciidoc, +=== Max file size check, +, +The segment files that are the components of individual shards and the translog, +generations that are components of the translog can get large (exceeding, +multiple gigabytes). On systems where the max size of files that can be created, +by the Elasticsearch process is limited, this can lead to failed, +writes. Therefore, the safest option here is that the max file size is unlimited, +and that is what the max file size bootstrap check enforces. To pass the max, +file check, you must configure your system to allow the Elasticsearch process, +the ability to write files of unlimited size. This can be done via, +`/etc/security/limits.conf` using the `fsize` setting to `unlimited` (note that, +you might have to increase the limits for the `root` user too)., +, +++ b/docs/reference/index-modules/store.asciidoc, +[[default_fs]]`default_fs` deprecated[5.0.0, The `default_fs` store type is deprecated - use `fs` instead]::, +, +The `default` type is deprecated and is aliased to `fs` for backward, +compatibility., +, +++ b/docs/reference/rest-api/info.asciidoc, +      "index_lifecycle" : {, +         "description" : "Index lifecycle management for the Elastic Stack",, +         "available" : true,, +         "enabled" : true, +      },, +++ b/docs/reference/setup/bootstrap-checks.asciidoc, +=== Max file size check, +, +The segment files that are the components of individual shards and the translog, +generations that are components of the translog can get large (exceeding, +multiple gigabytes). On systems where the max size of files that can be created, +by the Elasticsearch process is limited, this can lead to failed, +writes. Therefore, the safest option here is that the max file size is unlimited, +and that is what the max file size bootstrap check enforces. To pass the max, +file check, you must configure your system to allow the Elasticsearch process, +the ability to write files of unlimited size. This can be done via, +`/etc/security/limits.conf` using the `fsize` setting to `unlimited` (note that, +you might have to increase the limits for the `root` user too)., +, +++ b/docs/reference/setup/sysconfig/virtual-memory.asciidoc, +Elasticsearch uses a <<default_fs,`mmapfs`>> directory by, +++ b/docs/reference/index-modules/store.asciidoc, +[[default_fs]]`default_fs` deprecated[5.0.0, The `default_fs` store type is deprecated - use `fs` instead]::, +, +The `default` type is deprecated and is aliased to `fs` for backward, +compatibility., +, +++ b/docs/reference/rest-api/info.asciidoc, +      "index_lifecycle" : {, +         "description" : "Index lifecycle management for the Elastic Stack",, +         "available" : true,, +         "enabled" : true, +      },, +++ b/docs/reference/setup/bootstrap-checks.asciidoc, +=== Max file size check, +, +The segment files that are the components of individual shards and the translog, +generations that are components of the translog can get large (exceeding, +multiple gigabytes). On systems where the max size of files that can be created, +by the Elasticsearch process is limited, this can lead to failed, +writes. Therefore, the safest option here is that the max file size is unlimited, +and that is what the max file size bootstrap check enforces. To pass the max, +file check, you must configure your system to allow the Elasticsearch process, +the ability to write files of unlimited size. This can be done via, +`/etc/security/limits.conf` using the `fsize` setting to `unlimited` (note that, +you might have to increase the limits for the `root` user too)., +, +++ b/docs/reference/setup/sysconfig/virtual-memory.asciidoc, +Elasticsearch uses a <<default_fs,`mmapfs`>> directory by]