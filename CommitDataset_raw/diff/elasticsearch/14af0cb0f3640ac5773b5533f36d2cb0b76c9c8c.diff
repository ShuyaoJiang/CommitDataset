[+++ b/README.textile, +* Run @bin/elasticsearch@ on unix, or @bin/elasticsearch.bat@ on windows., +++ b/README.textile, +* Run @bin/elasticsearch@ on unix, or @bin/elasticsearch.bat@ on windows., +++ b/docs/java-api/client.asciidoc, +dir in your project. As long as `elasticsearch.yml` is present in the, +[source,java], +cluster.name=yourclustername, +++ b/README.textile, +* Run @bin/elasticsearch@ on unix, or @bin/elasticsearch.bat@ on windows., +++ b/docs/java-api/client.asciidoc, +dir in your project. As long as `elasticsearch.yml` is present in the, +[source,java], +cluster.name=yourclustername, +++ b/docs/java-api/index_.asciidoc, +There are different way of generating a JSON document:, +++ b/README.textile, +* Run @bin/elasticsearch@ on unix, or @bin/elasticsearch.bat@ on windows., +++ b/docs/java-api/client.asciidoc, +dir in your project. As long as `elasticsearch.yml` is present in the, +[source,java], +cluster.name=yourclustername, +++ b/docs/java-api/index_.asciidoc, +There are different way of generating a JSON document:, +++ b/docs/reference/mapping/types/nested-type.asciidoc, +Nested objects/documents allow to map certain sections in the document, +indexed as nested allowing to query them as if they are separate docs, +joining with the parent owning doc., +, +One of the problems when indexing inner objects that occur several times, +in a doc is that "cross object" search match will occur, for example:, +    "obj1" : [, +            "name" : "blue",, +            "count" : 4, +            "name" : "green",, +            "count" : 6, +        }, +Searching for name set to blue and count higher than 5 will match the, +doc, because in the first element the name matches blue, and in the, +second element, count matches "higher than 5"., +, +Nested mapping allows mapping certain inner objects (usually multi, +instance ones), for example:, +    "type1" : {, +        "properties" : {, +            "obj1" : {, +                "type" : "nested",, +                "properties": {, +                    "name" : {"type": "string", "index": "not_analyzed"},, +                    "count" : {"type": "integer"}, +                }, +            }, +        }, +    }, +The above will cause all `obj1` to be indexed as a nested doc. The, +mapping is similar in nature to setting `type` to `object`, except that, +it's `nested`. Nested object fields can be defined explicitly as in the, +example above or added dynamically in the same way as for the root object., +Note: changing an object type to nested type requires reindexing., +The `nested` object fields can also be automatically added to the, +immediate parent by setting `include_in_parent` to true, and also, +included in the root object by setting `include_in_root` to true., +Nested docs will also automatically use the root doc `_all` field., +[float], +==== Internal Implementation, +++ b/README.textile, +* Run @bin/elasticsearch@ on unix, or @bin/elasticsearch.bat@ on windows., +++ b/docs/java-api/client.asciidoc, +dir in your project. As long as `elasticsearch.yml` is present in the, +[source,java], +cluster.name=yourclustername, +++ b/docs/java-api/index_.asciidoc, +There are different way of generating a JSON document:, +++ b/docs/reference/mapping/types/nested-type.asciidoc, +Nested objects/documents allow to map certain sections in the document, +indexed as nested allowing to query them as if they are separate docs, +joining with the parent owning doc., +, +One of the problems when indexing inner objects that occur several times, +in a doc is that "cross object" search match will occur, for example:, +    "obj1" : [, +            "name" : "blue",, +            "count" : 4, +            "name" : "green",, +            "count" : 6, +        }, +Searching for name set to blue and count higher than 5 will match the, +doc, because in the first element the name matches blue, and in the, +second element, count matches "higher than 5"., +, +Nested mapping allows mapping certain inner objects (usually multi, +instance ones), for example:, +    "type1" : {, +        "properties" : {, +            "obj1" : {, +                "type" : "nested",, +                "properties": {, +                    "name" : {"type": "string", "index": "not_analyzed"},, +                    "count" : {"type": "integer"}, +                }]