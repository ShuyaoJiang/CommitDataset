[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    private final RecvByteBufAllocator recvByteBufAllocator;, +    private final int workerCount;, +    private final ByteSizeValue receivePredictorMin;, +    private final ByteSizeValue receivePredictorMax;, +    private volatile Bootstrap clientBootstrap;, +    private final Map<String, ServerBootstrap> serverBootstraps = newConcurrentMap();, +            clientBootstrap = createClientBootstrap();, +    private Bootstrap createClientBootstrap() {, +    protected ChannelHandler getClientChannelInitializer(DiscoveryNode node) {, +        Bootstrap bootstrapWithHandler = clientBootstrap.clone();, +        bootstrapWithHandler.handler(getClientChannelInitializer(node));, +        bootstrapWithHandler.remoteAddress(address);, +        ChannelFuture channelFuture = bootstrapWithHandler.connect();, +, +            if (clientBootstrap != null) {, +                clientBootstrap.config().group().shutdownGracefully(0, 5, TimeUnit.SECONDS).awaitUninterruptibly();, +                clientBootstrap = null;, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    private final RecvByteBufAllocator recvByteBufAllocator;, +    private final int workerCount;, +    private final ByteSizeValue receivePredictorMin;, +    private final ByteSizeValue receivePredictorMax;, +    private volatile Bootstrap clientBootstrap;, +    private final Map<String, ServerBootstrap> serverBootstraps = newConcurrentMap();, +            clientBootstrap = createClientBootstrap();, +    private Bootstrap createClientBootstrap() {, +    protected ChannelHandler getClientChannelInitializer(DiscoveryNode node) {, +        Bootstrap bootstrapWithHandler = clientBootstrap.clone();, +        bootstrapWithHandler.handler(getClientChannelInitializer(node));, +        bootstrapWithHandler.remoteAddress(address);, +        ChannelFuture channelFuture = bootstrapWithHandler.connect();, +, +            if (clientBootstrap != null) {, +                clientBootstrap.config().group().shutdownGracefully(0, 5, TimeUnit.SECONDS).awaitUninterruptibly();, +                clientBootstrap = null;, +++ b/server/src/main/java/org/elasticsearch/node/Node.java, +import javax.net.ssl.SNIHostName;, +            if (value.length() > 0 && "node.attr.server_name".equals(key)) {, +                try {, +                    new SNIHostName(value);, +                } catch (IllegalArgumentException e) {, +                    throw new IllegalArgumentException("invalid node.attr.server_name [" + value + "]", e );, +                }, +            }, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    private final RecvByteBufAllocator recvByteBufAllocator;, +    private final int workerCount;, +    private final ByteSizeValue receivePredictorMin;, +    private final ByteSizeValue receivePredictorMax;, +    private volatile Bootstrap clientBootstrap;, +    private final Map<String, ServerBootstrap> serverBootstraps = newConcurrentMap();, +            clientBootstrap = createClientBootstrap();, +    private Bootstrap createClientBootstrap() {, +    protected ChannelHandler getClientChannelInitializer(DiscoveryNode node) {, +        Bootstrap bootstrapWithHandler = clientBootstrap.clone();, +        bootstrapWithHandler.handler(getClientChannelInitializer(node));, +        bootstrapWithHandler.remoteAddress(address);, +        ChannelFuture channelFuture = bootstrapWithHandler.connect();, +, +            if (clientBootstrap != null) {, +                clientBootstrap.config().group().shutdownGracefully(0, 5, TimeUnit.SECONDS).awaitUninterruptibly();, +                clientBootstrap = null;, +++ b/server/src/main/java/org/elasticsearch/node/Node.java, +import javax.net.ssl.SNIHostName;, +            if (value.length() > 0 && "node.attr.server_name".equals(key)) {, +                try {, +                    new SNIHostName(value);, +                } catch (IllegalArgumentException e) {, +                    throw new IllegalArgumentException("invalid node.attr.server_name [" + value + "]", e );, +                }, +            }, +++ b/server/src/test/java/org/elasticsearch/node/NodeTests.java, +    public void testServerNameNodeAttribute() throws IOException {, +        String attr = "valid-hostname";, +        Settings.Builder settings = baseSettings().put(Node.NODE_ATTRIBUTES.getKey() + "server_name", attr);, +        int i = 0;, +        try (Node node = new MockNode(settings.build(), basePlugins())) {, +            final Settings nodeSettings = randomBoolean() ? node.settings() : node.getEnvironment().settings();, +            assertEquals(attr, Node.NODE_ATTRIBUTES.getAsMap(nodeSettings).get("server_name"));, +        }, +, +        // non-LDH hostname not allowed, +        attr = "invalid_hostname";, +        settings = baseSettings().put(Node.NODE_ATTRIBUTES.getKey() + "server_name", attr);, +        try (Node node = new MockNode(settings.build(), basePlugins())) {, +            fail("should not allow a server_name attribute with an underscore");, +        } catch (IllegalArgumentException e) {, +            assertEquals("invalid node.attr.server_name [invalid_hostname]", e.getMessage());, +        }, +    }, +, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    private final RecvByteBufAllocator recvByteBufAllocator;, +    private final int workerCount;, +    private final ByteSizeValue receivePredictorMin;, +    private final ByteSizeValue receivePredictorMax;, +    private volatile Bootstrap clientBootstrap;, +    private final Map<String, ServerBootstrap> serverBootstraps = newConcurrentMap();, +            clientBootstrap = createClientBootstrap();]