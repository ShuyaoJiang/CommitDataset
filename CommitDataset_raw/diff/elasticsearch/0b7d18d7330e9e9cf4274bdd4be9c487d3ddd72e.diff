[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.client.license.GetBasicStatusResponse;, +import org.elasticsearch.client.license.GetTrialStatusResponse;, +     * Retrieve the license trial status, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public GetTrialStatusResponse getTrialStatus(RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(Validatable.EMPTY,, +            request -> LicenseRequestConverters.getLicenseTrialStatus(), options, GetTrialStatusResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Retrieve the license basic status, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public GetBasicStatusResponse getBasicStatus(RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(Validatable.EMPTY,, +            request -> LicenseRequestConverters.getLicenseBasicStatus(), options, GetBasicStatusResponse::fromXContent, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.client.license.GetBasicStatusResponse;, +import org.elasticsearch.client.license.GetTrialStatusResponse;, +     * Retrieve the license trial status, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public GetTrialStatusResponse getTrialStatus(RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(Validatable.EMPTY,, +            request -> LicenseRequestConverters.getLicenseTrialStatus(), options, GetTrialStatusResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Retrieve the license basic status, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public GetBasicStatusResponse getBasicStatus(RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(Validatable.EMPTY,, +            request -> LicenseRequestConverters.getLicenseBasicStatus(), options, GetBasicStatusResponse::fromXContent, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseRequestConverters.java, +, +    static Request getLicenseTrialStatus() {, +        return new Request(HttpGet.METHOD_NAME, "/_xpack/license/trial_status");, +    }, +, +    static Request getLicenseBasicStatus() {, +        return new Request(HttpGet.METHOD_NAME, "/_xpack/license/basic_status");, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.client.license.GetBasicStatusResponse;, +import org.elasticsearch.client.license.GetTrialStatusResponse;, +     * Retrieve the license trial status, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public GetTrialStatusResponse getTrialStatus(RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(Validatable.EMPTY,, +            request -> LicenseRequestConverters.getLicenseTrialStatus(), options, GetTrialStatusResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Retrieve the license basic status, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public GetBasicStatusResponse getBasicStatus(RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(Validatable.EMPTY,, +            request -> LicenseRequestConverters.getLicenseBasicStatus(), options, GetBasicStatusResponse::fromXContent, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseRequestConverters.java, +, +    static Request getLicenseTrialStatus() {, +        return new Request(HttpGet.METHOD_NAME, "/_xpack/license/trial_status");, +    }, +, +    static Request getLicenseBasicStatus() {, +        return new Request(HttpGet.METHOD_NAME, "/_xpack/license/basic_status");, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Validatable.java, +, +    Validatable EMPTY = new Validatable() {};, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.client.license.GetBasicStatusResponse;, +import org.elasticsearch.client.license.GetTrialStatusResponse;]