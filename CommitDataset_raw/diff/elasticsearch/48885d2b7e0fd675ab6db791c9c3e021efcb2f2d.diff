[+++ b/plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/HttpReadWriteHandlerTests.java, +import io.netty.channel.ChannelPromise;, +        try {, +        } finally {, +            handler.close();, +            buf.release();, +            slicedBuf.release();, +            slicedBuf2.release();, +        }, +        try {, +        } finally {, +            buf.release();, +        }, +        try {, +        } finally {, +            buf.release();, +        }, +        try {, +        } finally {, +            response.release();, +        }, +        FlushOperation operation = flushOperations.get(0);, +        FullHttpResponse response = responseDecoder.decode(Unpooled.wrappedBuffer(operation.getBuffersToWrite()));, +        ((ChannelPromise) operation.getListener()).setSuccess();, +        try {, +        } finally {, +            response.release();, +        }, +        FullHttpResponse response = executeCorsRequest(settings, "remote-host", "request-host");, +        try {, +        } finally {, +            response.release();, +        }, +        FullHttpResponse response = executeCorsRequest(settings, originValue, "request-host");, +        try {, +        } finally {, +            response.release();, +        }, +        String allowedOrigins;, +        try {, +        } finally {, +            response.release();, +        }, +        originValue = "http://" + originValue;, +        response = executeCorsRequest(settings, originValue, host);, +        try {, +            assertThat(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue());, +            allowedOrigins = response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN);, +            assertThat(allowedOrigins, is(originValue));, +        } finally {, +            response.release();, +        }, +        try {, +        } finally {, +            response.release();, +        }, +        try {, +        } finally {, +            response.release();, +        }, +        FullHttpResponse response = executeCorsRequest(settings, originValue, "request-host");, +        try {, +        } finally {, +            response.release();, +        }, +        FullHttpResponse response = executeCorsRequest(settings, originValue, "request-host");, +        try {, +        } finally {, +            response.release();, +        }, +        handler.close();, +        ((ChannelPromise) flushOperation.getListener()).setSuccess();, +        try {, +        } finally {, +            buf.release();, +        }]