[+++ b/docs/reference/indices/recovery.asciidoc, +        "version" : "{version}",, +        "restoreUUID": "PDh1ZAOaRbiGIVtCvZOMww", +++ b/docs/reference/indices/recovery.asciidoc, +        "version" : "{version}",, +        "restoreUUID": "PDh1ZAOaRbiGIVtCvZOMww", +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/TransportRestoreSnapshotAction.java, +                    String uuid = restoreCompletionResponse.getUuid();, +                            final RestoreInProgress.Entry prevEntry = restoreInProgress(changedEvent.previousState(), uuid);, +                            final RestoreInProgress.Entry newEntry = restoreInProgress(changedEvent.state(), uuid);, +++ b/docs/reference/indices/recovery.asciidoc, +        "version" : "{version}",, +        "restoreUUID": "PDh1ZAOaRbiGIVtCvZOMww", +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/TransportRestoreSnapshotAction.java, +                    String uuid = restoreCompletionResponse.getUuid();, +                            final RestoreInProgress.Entry prevEntry = restoreInProgress(changedEvent.previousState(), uuid);, +                            final RestoreInProgress.Entry newEntry = restoreInProgress(changedEvent.state(), uuid);, +++ b/server/src/main/java/org/elasticsearch/cluster/RestoreInProgress.java, +import com.carrotsearch.hppc.cursors.ObjectCursor;, +import java.util.Iterator;, +import java.util.UUID;, +public class RestoreInProgress extends AbstractNamedDiffable<Custom> implements Custom, Iterable<RestoreInProgress.Entry> {, +, +    /**, +     * Fallback UUID used for restore operations that were started before v7.0 and don't have a uuid in the cluster state., +     */, +    public static final String BWC_UUID = new UUID(0, 0).toString();, +    private final ImmutableOpenMap<String, Entry> entries;, +     * @param entries map of currently running restore processes keyed by their restore uuid, +    private RestoreInProgress(ImmutableOpenMap<String, Entry> entries) {, +        this.entries = entries;, +        return new StringBuilder("RestoreInProgress[").append(entries).append("]").toString();, +, +    public Entry get(String restoreUUID) {, +        return entries.get(restoreUUID);, +, +    public boolean isEmpty() {, +        return entries.isEmpty();, +    }, +, +    @Override, +    public Iterator<Entry> iterator() {, +        return entries.valuesIt();, +    }, +, +    public static final class Builder {, +, +        private final ImmutableOpenMap.Builder<String, Entry> entries = ImmutableOpenMap.builder();, +, +        public Builder() {, +        }, +, +        public Builder(RestoreInProgress restoreInProgress) {, +            entries.putAll(restoreInProgress.entries);, +        }, +, +        public Builder add(Entry entry) {, +            entries.put(entry.uuid, entry);, +            return this;, +        }, +, +        public RestoreInProgress build() {, +            return new RestoreInProgress(entries.build());, +        }, +        private final String uuid;, +         * @param uuid       uuid of the restore, +        public Entry(String uuid, Snapshot snapshot, State state, List<String> indices,, +            ImmutableOpenMap<ShardId, ShardRestoreStatus> shards) {, +            this.uuid = Objects.requireNonNull(uuid);, +        }, +, +        /**, +         * Returns restore uuid, +         * @return restore uuid, +         */, +        public String uuid() {, +            return uuid;, +            return uuid.equals(entry.uuid) &&, +                       snapshot.equals(entry.snapshot) &&, +            return Objects.hash(uuid, snapshot, state, indices, shards);, +        int count = in.readVInt();, +        final ImmutableOpenMap.Builder<String, Entry> entriesBuilder = ImmutableOpenMap.builder(count);, +        for (int i = 0; i < count; i++) {, +            final String uuid;, +            if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +                uuid = in.readString();, +            } else {, +                uuid = BWC_UUID;, +            }, +            entriesBuilder.put(uuid, new Entry(uuid, snapshot, state, Collections.unmodifiableList(indexBuilder), builder.build()));, +        this.entries = entriesBuilder.build();, +        for (ObjectCursor<Entry> v : entries.values()) {, +            Entry entry = v.value;, +            if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +                out.writeString(entry.uuid);, +            }, +        for (ObjectCursor<Entry> entry : entries.values()) {, +            toXContent(entry.value, builder, params);, +++ b/docs/reference/indices/recovery.asciidoc, +        "version" : "{version}",]