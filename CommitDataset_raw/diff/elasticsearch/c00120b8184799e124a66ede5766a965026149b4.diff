[+++ b/src/main/java/org/elasticsearch/action/bench/CompetitionDetails.java, +    /**, +     * Gets node-level competition results, +     * @return  A list of node-level competition results, +     */, +    public List<CompetitionNodeResult> getNodeResults() {, +        return nodeResults;, +    }, +, +    /**, +     * Calculates detailed statistics for each iteration. Should be called prior to, +     * accessing individual measurements., +     */, +    public void computeAllStatistics() {, +        for (CompetitionNodeResult nodeResult : nodeResults) {, +            for (CompetitionIteration iteration : nodeResult.iterations()) {, +                iteration.computeStatistics();, +            }, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/action/bench/CompetitionDetails.java, +    /**, +     * Gets node-level competition results, +     * @return  A list of node-level competition results, +     */, +    public List<CompetitionNodeResult> getNodeResults() {, +        return nodeResults;, +    }, +, +    /**, +     * Calculates detailed statistics for each iteration. Should be called prior to, +     * accessing individual measurements., +     */, +    public void computeAllStatistics() {, +        for (CompetitionNodeResult nodeResult : nodeResults) {, +            for (CompetitionIteration iteration : nodeResult.iterations()) {, +                iteration.computeStatistics();, +            }, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/action/bench/CompetitionIteration.java, +        final SinglePassStatistics single = new SinglePassStatistics();, +++ b/src/main/java/org/elasticsearch/action/bench/CompetitionDetails.java, +    /**, +     * Gets node-level competition results, +     * @return  A list of node-level competition results, +     */, +    public List<CompetitionNodeResult> getNodeResults() {, +        return nodeResults;, +    }, +, +    /**, +     * Calculates detailed statistics for each iteration. Should be called prior to, +     * accessing individual measurements., +     */, +    public void computeAllStatistics() {, +        for (CompetitionNodeResult nodeResult : nodeResults) {, +            for (CompetitionIteration iteration : nodeResult.iterations()) {, +                iteration.computeStatistics();, +            }, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/action/bench/CompetitionIteration.java, +        final SinglePassStatistics single = new SinglePassStatistics();, +++ b/src/main/java/org/elasticsearch/action/bench/CompetitionSummary.java, + *, + * Since values are calculated lazily on first access, users of this class, + * should first call computeSummaryStatistics() prior to accessing individual, + * measurements., +    private boolean computed = false;, +    private long min = 0;, +    private long max = 0;, +    private long totalTime = 0;, +    private long sumTotalHits = 0;, +    private long totalIterations = 0;, +    private long completedIterations = 0;, +    private long totalQueries = 0;, +    private double avgWarmupTime = 0;, +    private int concurrency = 0;, +    private int multiplier = 0;, +    private double mean = 0;, +    private double millisPerHit = 0.0;, +    private double stdDeviation = 0.0;, +    private double queriesPerSecond = 0.0;, +    private double[] percentiles;, +    private List<Tuple<String, CompetitionIteration.SlowRequest>> slowest = new ArrayList<>();, +    /**, +     * Gets node-level competition results, +     * @return  A list of node-level competition results, +     */, +    /**, +     * Calculates statistical measures from raw measurements. Should be called prior to accessing, +     * individual measurements., +     */, +        if (computed) {, +            return;, +        }]