[+++ b/server/src/main/java/org/elasticsearch/threadpool/AutoQueueAdjustingExecutorBuilder.java, +import java.util.Iterator;, +import java.util.Map;, +            Integer.toString(minQueueSize),, +            (s) -> Setting.parseInt(s, 0, minSizeKey),, +            new Setting.Validator<Integer>() {, +                @Override, +                public void validate(Integer value, Map<Setting<Integer>, Integer> settings) {, +                    if (value > settings.get(tempMaxQueueSizeSetting)) {, +                        throw new IllegalArgumentException("Failed to parse value [" + value + "] for setting [" + minSizeKey, +                            + "] must be <= " + settings.get(tempMaxQueueSizeSetting));, +                    }, +                }, +, +                @Override, +                public Iterator<Setting<Integer>> settings() {, +                    return Arrays.asList(tempMaxQueueSizeSetting).iterator();, +                }, +            },, +                Integer.toString(maxQueueSize),, +                (s) -> Setting.parseInt(s, 0, maxSizeKey),, +                new Setting.Validator<Integer>() {, +                    @Override, +                    public void validate(Integer value, Map<Setting<Integer>, Integer> settings) {, +                        if (value < settings.get(tempMinQueueSizeSetting)) {, +                            throw new IllegalArgumentException("Failed to parse value [" + value + "] for setting [" + minSizeKey, +                                + "] must be >= " + settings.get(tempMinQueueSizeSetting));, +                        }, +                    }, +, +                    @Override, +                    public Iterator<Setting<Integer>> settings() {, +                        return Arrays.asList(tempMinQueueSizeSetting).iterator();, +                    }, +                },, +        final int size;, +        final int initialQueueSize;, +        final int minQueueSize;, +        final int maxQueueSize;, +        final int frameSize;, +        final TimeValue targetedResponseTime;, +++ b/server/src/main/java/org/elasticsearch/threadpool/AutoQueueAdjustingExecutorBuilder.java, +import java.util.Iterator;, +import java.util.Map;, +            Integer.toString(minQueueSize),, +            (s) -> Setting.parseInt(s, 0, minSizeKey),, +            new Setting.Validator<Integer>() {, +                @Override, +                public void validate(Integer value, Map<Setting<Integer>, Integer> settings) {, +                    if (value > settings.get(tempMaxQueueSizeSetting)) {, +                        throw new IllegalArgumentException("Failed to parse value [" + value + "] for setting [" + minSizeKey, +                            + "] must be <= " + settings.get(tempMaxQueueSizeSetting));, +                    }, +                }, +, +                @Override, +                public Iterator<Setting<Integer>> settings() {, +                    return Arrays.asList(tempMaxQueueSizeSetting).iterator();, +                }, +            },, +                Integer.toString(maxQueueSize),, +                (s) -> Setting.parseInt(s, 0, maxSizeKey),, +                new Setting.Validator<Integer>() {, +                    @Override, +                    public void validate(Integer value, Map<Setting<Integer>, Integer> settings) {, +                        if (value < settings.get(tempMinQueueSizeSetting)) {, +                            throw new IllegalArgumentException("Failed to parse value [" + value + "] for setting [" + minSizeKey, +                                + "] must be >= " + settings.get(tempMinQueueSizeSetting));, +                        }, +                    }, +, +                    @Override, +                    public Iterator<Setting<Integer>> settings() {, +                        return Arrays.asList(tempMinQueueSizeSetting).iterator();, +                    }, +                },, +        final int size;, +        final int initialQueueSize;, +        final int minQueueSize;, +        final int maxQueueSize;, +        final int frameSize;, +        final TimeValue targetedResponseTime;, +++ b/server/src/test/java/org/elasticsearch/threadpool/AutoQueueAdjustingExecutorBuilderTests.java, +    public void testValidatingMinMaxSettings() {, +                .put("thread_pool.test.min_queue_size", randomIntBetween(30, 100)), +                .put("thread_pool.test.max_queue_size", randomIntBetween(1,25)), +, +        settings = Settings.builder(), +            .put("thread_pool.test.min_queue_size", 10), +            .put("thread_pool.test.max_queue_size", 9), +            .build();, +        try {, +            new AutoQueueAdjustingExecutorBuilder(settings, "test", 1, 15, 1, 100, 2000).getSettings(settings);, +            fail("should have thrown an exception");, +        } catch (IllegalArgumentException e) {, +            assertEquals(e.getMessage(), "Failed to parse value [10] for setting [thread_pool.test.min_queue_size] must be <= 9");, +        }, +, +        settings = Settings.builder(), +            .put("thread_pool.test.min_queue_size", 11)]