[+++ b/docs/reference/ingest/ingest-node.asciidoc, +| `ignore_missing` | no        | false    | If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document, +++ b/docs/reference/ingest/ingest-node.asciidoc, +| `ignore_missing` | no        | false    | If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ForEachProcessor.java, +import static org.elasticsearch.ingest.ConfigurationUtils.readBooleanProperty;, +    private final boolean ignoreMissing;, +    ForEachProcessor(String tag, String field, Processor processor, boolean ignoreMissing) {, +        this.ignoreMissing = ignoreMissing;, +    }, +, +    boolean isIgnoreMissing() {, +        return ignoreMissing;, +        List values = ingestDocument.getFieldValue(field, List.class, ignoreMissing);, +        if (values == null) {, +            if (ignoreMissing) {, +                return;, +            }, +            throw new IllegalArgumentException("field [" + field + "] is null, cannot loop over its elements.");, +        }, +            boolean ignoreMissing = readBooleanProperty(TYPE, tag, config, "ignore_missing", false);, +            return new ForEachProcessor(tag, field, processor, ignoreMissing);, +++ b/docs/reference/ingest/ingest-node.asciidoc, +| `ignore_missing` | no        | false    | If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ForEachProcessor.java, +import static org.elasticsearch.ingest.ConfigurationUtils.readBooleanProperty;, +    private final boolean ignoreMissing;, +    ForEachProcessor(String tag, String field, Processor processor, boolean ignoreMissing) {, +        this.ignoreMissing = ignoreMissing;, +    }, +, +    boolean isIgnoreMissing() {, +        return ignoreMissing;, +        List values = ingestDocument.getFieldValue(field, List.class, ignoreMissing);, +        if (values == null) {, +            if (ignoreMissing) {, +                return;, +            }, +            throw new IllegalArgumentException("field [" + field + "] is null, cannot loop over its elements.");, +        }, +            boolean ignoreMissing = readBooleanProperty(TYPE, tag, config, "ignore_missing", false);, +            return new ForEachProcessor(tag, field, processor, ignoreMissing);, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ForEachProcessorFactoryTests.java, +        assertFalse(forEachProcessor.isIgnoreMissing());, +    }, +, +    public void testSetIgnoreMissing() throws Exception {, +        Processor processor = new TestProcessor(ingestDocument -> { });, +        Map<String, Processor.Factory> registry = new HashMap<>();, +        registry.put("_name", (r, t, c) -> processor);, +        ForEachProcessor.Factory forEachFactory = new ForEachProcessor.Factory();, +, +        Map<String, Object> config = new HashMap<>();, +        config.put("field", "_field");, +        config.put("processor", Collections.singletonMap("_name", Collections.emptyMap()));, +        config.put("ignore_missing", true);, +        ForEachProcessor forEachProcessor = forEachFactory.create(registry, null, config);, +        assertThat(forEachProcessor, Matchers.notNullValue());, +        assertThat(forEachProcessor.getField(), equalTo("_field"));, +        assertThat(forEachProcessor.getProcessor(), Matchers.sameInstance(processor));, +        assertTrue(forEachProcessor.isIgnoreMissing());, +++ b/docs/reference/ingest/ingest-node.asciidoc, +| `ignore_missing` | no        | false    | If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ForEachProcessor.java, +import static org.elasticsearch.ingest.ConfigurationUtils.readBooleanProperty;, +    private final boolean ignoreMissing;, +    ForEachProcessor(String tag, String field, Processor processor, boolean ignoreMissing) {, +        this.ignoreMissing = ignoreMissing;, +    }, +, +    boolean isIgnoreMissing() {, +        return ignoreMissing;, +        List values = ingestDocument.getFieldValue(field, List.class, ignoreMissing);, +        if (values == null) {, +            if (ignoreMissing) {, +                return;, +            }, +            throw new IllegalArgumentException("field [" + field + "] is null, cannot loop over its elements.");, +        }, +            boolean ignoreMissing = readBooleanProperty(TYPE, tag, config, "ignore_missing", false);, +            return new ForEachProcessor(tag, field, processor, ignoreMissing);, +++ b/modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ForEachProcessorFactoryTests.java, +        assertFalse(forEachProcessor.isIgnoreMissing());, +    }, +, +    public void testSetIgnoreMissing() throws Exception {, +        Processor processor = new TestProcessor(ingestDocument -> { });, +        Map<String, Processor.Factory> registry = new HashMap<>();, +        registry.put("_name", (r, t, c) -> processor);, +        ForEachProcessor.Factory forEachFactory = new ForEachProcessor.Factory();, +, +        Map<String, Object> config = new HashMap<>();, +        config.put("field", "_field");, +        config.put("processor", Collections.singletonMap("_name", Collections.emptyMap()));, +        config.put("ignore_missing", true);, +        ForEachProcessor forEachProcessor = forEachFactory.create(registry, null, config);, +        assertThat(forEachProcessor, Matchers.notNullValue());, +        assertThat(forEachProcessor.getField(), equalTo("_field"));, +        assertThat(forEachProcessor.getProcessor(), Matchers.sameInstance(processor));, +        assertTrue(forEachProcessor.isIgnoreMissing());]