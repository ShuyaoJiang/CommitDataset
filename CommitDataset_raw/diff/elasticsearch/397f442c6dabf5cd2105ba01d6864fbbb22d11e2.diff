[+++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                    if (indexShard.state() != IndexShardState.POST_RECOVERY) {, +                        indexShard.postRecovery("post recovery from gateway");, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                    if (indexShard.state() != IndexShardState.POST_RECOVERY) {, +                        indexShard.postRecovery("post recovery from gateway");, +++ b/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            indexShard.postRecovery("post recovery from gateway, no translog");, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                    if (indexShard.state() != IndexShardState.POST_RECOVERY) {, +                        indexShard.postRecovery("post recovery from gateway");, +++ b/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            indexShard.postRecovery("post recovery from gateway, no translog");, +++ b/src/main/java/org/elasticsearch/index/gateway/local/LocalIndexShardGateway.java, +            indexShard.postRecovery("post recovery from gateway, no translog");, +            indexShard.postRecovery("post recovery from gateway, no translog");, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                    if (indexShard.state() != IndexShardState.POST_RECOVERY) {, +                        indexShard.postRecovery("post recovery from gateway");, +++ b/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            indexShard.postRecovery("post recovery from gateway, no translog");, +++ b/src/main/java/org/elasticsearch/index/gateway/local/LocalIndexShardGateway.java, +            indexShard.postRecovery("post recovery from gateway, no translog");, +            indexShard.postRecovery("post recovery from gateway, no translog");, +++ b/src/main/java/org/elasticsearch/index/gateway/none/NoneIndexShardGateway.java, +        indexShard.postRecovery("post recovery from gateway");, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                    if (indexShard.state() != IndexShardState.POST_RECOVERY) {, +                        indexShard.postRecovery("post recovery from gateway");, +++ b/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            indexShard.postRecovery("post recovery from gateway, no translog");, +++ b/src/main/java/org/elasticsearch/index/gateway/local/LocalIndexShardGateway.java, +            indexShard.postRecovery("post recovery from gateway, no translog");, +            indexShard.postRecovery("post recovery from gateway, no translog");, +++ b/src/main/java/org/elasticsearch/index/gateway/none/NoneIndexShardGateway.java, +        indexShard.postRecovery("post recovery from gateway");, +++ b/src/main/java/org/elasticsearch/index/shard/IndexShardState.java, +    POST_RECOVERY((byte) 2),, +    STARTED((byte) 3),, +    RELOCATED((byte) 4),, +    CLOSED((byte) 5);, +++ b/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +                    if (indexShard.state() != IndexShardState.POST_RECOVERY) {, +                        indexShard.postRecovery("post recovery from gateway");, +++ b/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +            indexShard.postRecovery("post recovery from gateway, no translog");, +++ b/src/main/java/org/elasticsearch/index/gateway/local/LocalIndexShardGateway.java, +            indexShard.postRecovery("post recovery from gateway, no translog");, +            indexShard.postRecovery("post recovery from gateway, no translog");, +++ b/src/main/java/org/elasticsearch/index/gateway/none/NoneIndexShardGateway.java, +        indexShard.postRecovery("post recovery from gateway");, +++ b/src/main/java/org/elasticsearch/index/shard/IndexShardState.java, +    POST_RECOVERY((byte) 2),, +    STARTED((byte) 3),, +    RELOCATED((byte) 4),, +    CLOSED((byte) 5);, +++ b/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +            synchronized (mutex) {, +                if (state != IndexShardState.POST_RECOVERY) {, +                    logger.debug("suspected wrong state when acting on cluster state started state, current state {}", state);, +                }, +                logger.debug("state: [{}]->[{}], reason [global state moved to started]", state, IndexShardState.STARTED);, +                state = IndexShardState.STARTED;, +            }, +            indicesLifecycle.afterIndexShardStarted(this);, +            if (state == IndexShardState.POST_RECOVERY) {, +                throw new IndexShardRecoveringException(shardId);, +            }, +        writeAllowed(create.origin());, +        writeAllowed(index.origin());, +        writeAllowed(delete.origin());, +        writeAllowed(deleteByQuery.origin());, +        if (state != IndexShardState.POST_RECOVERY && state != IndexShardState.STARTED && state != IndexShardState.RELOCATED && state != IndexShardState.CLOSED) {, +, +    public InternalIndexShard postRecovery(String reason) throws IndexShardStartedException, IndexShardRelocatedException, IndexShardClosedException {, +        synchronized (mutex) {, +            if (state == IndexShardState.CLOSED) {, +                throw new IndexShardClosedException(shardId);, +            }, +            if (state == IndexShardState.STARTED) {, +                throw new IndexShardStartedException(shardId);, +            }, +            if (state == IndexShardState.RELOCATED) {, +                throw new IndexShardRelocatedException(shardId);, +            }, +            if (Booleans.parseBoolean(checkIndexOnStartup, false)) {, +                checkIndex(true);, +            }, +            engine.start();, +            startScheduledTasksIfNeeded();, +            logger.debug("state: [{}]->[{}], reason [{}]", state, IndexShardState.POST_RECOVERY, reason);, +            state = IndexShardState.POST_RECOVERY;, +        }, +        return this;, +    }, +, +            logger.debug("state: [{}]->[{}], reason [post recovery]", state, IndexShardState.POST_RECOVERY);, +            state = IndexShardState.POST_RECOVERY;, +                    engine.delete(prepareDeleteByQuery(deleteByQuery.source(), deleteByQuery.filteringAliases(), deleteByQuery.types()).origin(Engine.Operation.Origin.RECOVERY));, +        return state == IndexShardState.POST_RECOVERY || state == IndexShardState.RECOVERING || state == IndexShardState.STARTED ||]