[+++ b/docs/CHANGELOG.asciidoc, +Machine Learning::, +, +* Account for gaps in data counts after job is reopened ({pull}30294[#30294]), +, +++ b/docs/CHANGELOG.asciidoc, +Machine Learning::, +, +* Account for gaps in data counts after job is reopened ({pull}30294[#30294]), +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/DataCountsReporter.java, +        diagnostics = new DataStreamDiagnostics(job, counts);, +++ b/docs/CHANGELOG.asciidoc, +Machine Learning::, +, +* Account for gaps in data counts after job is reopened ({pull}30294[#30294]), +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/DataCountsReporter.java, +        diagnostics = new DataStreamDiagnostics(job, counts);, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/diagnostics/BucketDiagnostics.java, +import org.elasticsearch.xpack.core.ml.job.process.autodetect.state.DataCounts;, +import java.util.Date;, +, +    BucketDiagnostics(Job job, DataCounts dataCounts, BucketFlushListener bucketFlushListener) {, +, +        Date latestRecordTimestamp = dataCounts.getLatestRecordTimeStamp();, +        if (latestRecordTimestamp != null) {, +            addRecord(latestRecordTimestamp.getTime());, +        }, +++ b/docs/CHANGELOG.asciidoc, +Machine Learning::, +, +* Account for gaps in data counts after job is reopened ({pull}30294[#30294]), +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/DataCountsReporter.java, +        diagnostics = new DataStreamDiagnostics(job, counts);, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/diagnostics/BucketDiagnostics.java, +import org.elasticsearch.xpack.core.ml.job.process.autodetect.state.DataCounts;, +import java.util.Date;, +, +    BucketDiagnostics(Job job, DataCounts dataCounts, BucketFlushListener bucketFlushListener) {, +, +        Date latestRecordTimestamp = dataCounts.getLatestRecordTimeStamp();, +        if (latestRecordTimestamp != null) {, +            addRecord(latestRecordTimestamp.getTime());, +        }, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/diagnostics/DataStreamDiagnostics.java, +import org.elasticsearch.xpack.core.ml.job.process.autodetect.state.DataCounts;, +    public DataStreamDiagnostics(Job job, DataCounts dataCounts) {, +        bucketDiagnostics = new BucketDiagnostics(job, dataCounts, createBucketFlushListener());, +++ b/docs/CHANGELOG.asciidoc, +Machine Learning::, +, +* Account for gaps in data counts after job is reopened ({pull}30294[#30294]), +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/DataCountsReporter.java, +        diagnostics = new DataStreamDiagnostics(job, counts);, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/diagnostics/BucketDiagnostics.java, +import org.elasticsearch.xpack.core.ml.job.process.autodetect.state.DataCounts;, +import java.util.Date;, +, +    BucketDiagnostics(Job job, DataCounts dataCounts, BucketFlushListener bucketFlushListener) {, +, +        Date latestRecordTimestamp = dataCounts.getLatestRecordTimeStamp();, +        if (latestRecordTimestamp != null) {, +            addRecord(latestRecordTimestamp.getTime());, +        }, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/diagnostics/DataStreamDiagnostics.java, +import org.elasticsearch.xpack.core.ml.job.process.autodetect.state.DataCounts;, +    public DataStreamDiagnostics(Job job, DataCounts dataCounts) {, +        bucketDiagnostics = new BucketDiagnostics(job, dataCounts, createBucketFlushListener());, +++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/job/process/diagnostics/DataStreamDiagnosticsTests.java, +import org.elasticsearch.xpack.core.ml.job.process.autodetect.state.DataCounts;, +    private DataCounts dataCounts;, +        dataCounts = new DataCounts(job.getId());, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +        DataStreamDiagnostics d = new DataStreamDiagnostics(job, dataCounts);, +++ b/docs/CHANGELOG.asciidoc, +Machine Learning::, +, +* Account for gaps in data counts after job is reopened ({pull}30294[#30294]), +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/DataCountsReporter.java, +        diagnostics = new DataStreamDiagnostics(job, counts);, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/diagnostics/BucketDiagnostics.java, +import org.elasticsearch.xpack.core.ml.job.process.autodetect.state.DataCounts;, +import java.util.Date;, +]