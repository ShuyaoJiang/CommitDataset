[+++ b/TESTING.asciidoc, +mvn verify -Dtests.filter="@Rest", +++ b/TESTING.asciidoc, +mvn verify -Dtests.filter="@Rest", +++ b/core/pom.xml, +++ b/TESTING.asciidoc, +mvn verify -Dtests.filter="@Rest", +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/TESTING.asciidoc, +mvn verify -Dtests.filter="@Rest", +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    public static void main(String[] args) throws Throwable {, +++ b/TESTING.asciidoc, +mvn verify -Dtests.filter="@Rest", +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchF.java, +    public static void main(String[] args) throws Throwable {, +++ b/TESTING.asciidoc, +mvn verify -Dtests.filter="@Rest", +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchF.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +    @SuppressForbidden(reason = "command line tool"), +        System.out.println("checking for jar hell...");, +        System.out.println("no jar hell found");, +++ b/TESTING.asciidoc, +mvn verify -Dtests.filter="@Rest", +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchF.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +    @SuppressForbidden(reason = "command line tool"), +        System.out.println("checking for jar hell...");, +        System.out.println("no jar hell found");, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        // read-only dirs, +        addPath(policy, environment.binFile(), "read,readlink");, +        addPath(policy, environment.libFile(), "read,readlink");, +++ b/TESTING.asciidoc, +mvn verify -Dtests.filter="@Rest", +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchF.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +    @SuppressForbidden(reason = "command line tool"), +        System.out.println("checking for jar hell...");, +        System.out.println("no jar hell found");, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        // read-only dirs, +        addPath(policy, environment.binFile(), "read,readlink");, +        addPath(policy, environment.libFile(), "read,readlink");, +++ b/core/src/main/java/org/elasticsearch/env/Environment.java, +    /** location of bin/, used by plugin manager */, +    private final Path binFile;, +, +    /** location of lib/, */, +    private final Path libFile;, +, +        final Path homeFile;, +]