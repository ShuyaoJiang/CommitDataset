[+++ b/buildSrc/src/main/resources/forbidden/third-party-signatures.txt, +@defaultMessage unsafe encoders/decoders have problems in the lzf compress library.  Use variants of encode/decode functions which take Encoder/Decoder., +com.ning.compress.lzf.impl.UnsafeChunkEncoders#createEncoder(int), +com.ning.compress.lzf.impl.UnsafeChunkEncoders#createNonAllocatingEncoder(int), +com.ning.compress.lzf.impl.UnsafeChunkEncoders#createEncoder(int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.impl.UnsafeChunkEncoders#createNonAllocatingEncoder(int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.impl.UnsafeChunkDecoder#<init>(), +com.ning.compress.lzf.parallel.CompressTask, +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalInstance(), +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalInstance(int), +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalNonAllocatingInstance(int), +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalInstance(com.ning.compress.BufferRecycler), +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalInstance(int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalNonAllocatingInstance(int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.util.ChunkDecoderFactory#optimalInstance(), +com.ning.compress.lzf.util.LZFFileInputStream#<init>(java.io.File), +com.ning.compress.lzf.util.LZFFileInputStream#<init>(java.io.FileDescriptor), +com.ning.compress.lzf.util.LZFFileInputStream#<init>(java.lang.String), +com.ning.compress.lzf.util.LZFFileOutputStream#<init>(java.io.File), +com.ning.compress.lzf.util.LZFFileOutputStream#<init>(java.io.File, boolean), +com.ning.compress.lzf.util.LZFFileOutputStream#<init>(java.io.FileDescriptor), +com.ning.compress.lzf.util.LZFFileOutputStream#<init>(java.lang.String), +com.ning.compress.lzf.util.LZFFileOutputStream#<init>(java.lang.String, boolean), +com.ning.compress.lzf.LZFEncoder#encode(byte[]), +com.ning.compress.lzf.LZFEncoder#encode(byte[], int, int), +com.ning.compress.lzf.LZFEncoder#encode(byte[], int, int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.LZFEncoder#appendEncoded(byte[], int, int, byte[], int), +com.ning.compress.lzf.LZFEncoder#appendEncoded(byte[], int, int, byte[], int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.LZFCompressingInputStream#<init>(java.io.InputStream), +com.ning.compress.lzf.LZFDecoder#fastDecoder(), +com.ning.compress.lzf.LZFDecoder#decode(byte[]), +com.ning.compress.lzf.LZFDecoder#decode(byte[], int, int), +com.ning.compress.lzf.LZFDecoder#decode(byte[], byte[]), +com.ning.compress.lzf.LZFDecoder#decode(byte[], int, int, byte[]), +com.ning.compress.lzf.LZFInputStream#<init>(java.io.InputStream), +com.ning.compress.lzf.LZFInputStream#<init>(java.io.InputStream, boolean), +com.ning.compress.lzf.LZFInputStream#<init>(java.io.InputStream, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.LZFInputStream#<init>(java.io.InputStream, com.ning.compress.BufferRecycler, boolean), +com.ning.compress.lzf.LZFOutputStream#<init>(java.io.OutputStream), +com.ning.compress.lzf.LZFOutputStream#<init>(java.io.OutputStream, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.LZFUncompressor#<init>(com.ning.compress.DataHandler), +com.ning.compress.lzf.LZFUncompressor#<init>(com.ning.compress.DataHandler, com.ning.compress.BufferRecycler), +, +++ b/buildSrc/src/main/resources/forbidden/third-party-signatures.txt, +@defaultMessage unsafe encoders/decoders have problems in the lzf compress library.  Use variants of encode/decode functions which take Encoder/Decoder., +com.ning.compress.lzf.impl.UnsafeChunkEncoders#createEncoder(int), +com.ning.compress.lzf.impl.UnsafeChunkEncoders#createNonAllocatingEncoder(int), +com.ning.compress.lzf.impl.UnsafeChunkEncoders#createEncoder(int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.impl.UnsafeChunkEncoders#createNonAllocatingEncoder(int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.impl.UnsafeChunkDecoder#<init>(), +com.ning.compress.lzf.parallel.CompressTask, +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalInstance(), +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalInstance(int), +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalNonAllocatingInstance(int), +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalInstance(com.ning.compress.BufferRecycler), +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalInstance(int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalNonAllocatingInstance(int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.util.ChunkDecoderFactory#optimalInstance(), +com.ning.compress.lzf.util.LZFFileInputStream#<init>(java.io.File), +com.ning.compress.lzf.util.LZFFileInputStream#<init>(java.io.FileDescriptor), +com.ning.compress.lzf.util.LZFFileInputStream#<init>(java.lang.String), +com.ning.compress.lzf.util.LZFFileOutputStream#<init>(java.io.File), +com.ning.compress.lzf.util.LZFFileOutputStream#<init>(java.io.File, boolean), +com.ning.compress.lzf.util.LZFFileOutputStream#<init>(java.io.FileDescriptor), +com.ning.compress.lzf.util.LZFFileOutputStream#<init>(java.lang.String), +com.ning.compress.lzf.util.LZFFileOutputStream#<init>(java.lang.String, boolean), +com.ning.compress.lzf.LZFEncoder#encode(byte[]), +com.ning.compress.lzf.LZFEncoder#encode(byte[], int, int), +com.ning.compress.lzf.LZFEncoder#encode(byte[], int, int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.LZFEncoder#appendEncoded(byte[], int, int, byte[], int), +com.ning.compress.lzf.LZFEncoder#appendEncoded(byte[], int, int, byte[], int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.LZFCompressingInputStream#<init>(java.io.InputStream), +com.ning.compress.lzf.LZFDecoder#fastDecoder(), +com.ning.compress.lzf.LZFDecoder#decode(byte[]), +com.ning.compress.lzf.LZFDecoder#decode(byte[], int, int), +com.ning.compress.lzf.LZFDecoder#decode(byte[], byte[]), +com.ning.compress.lzf.LZFDecoder#decode(byte[], int, int, byte[]), +com.ning.compress.lzf.LZFInputStream#<init>(java.io.InputStream), +com.ning.compress.lzf.LZFInputStream#<init>(java.io.InputStream, boolean), +com.ning.compress.lzf.LZFInputStream#<init>(java.io.InputStream, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.LZFInputStream#<init>(java.io.InputStream, com.ning.compress.BufferRecycler, boolean), +com.ning.compress.lzf.LZFOutputStream#<init>(java.io.OutputStream), +com.ning.compress.lzf.LZFOutputStream#<init>(java.io.OutputStream, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.LZFUncompressor#<init>(com.ning.compress.DataHandler), +com.ning.compress.lzf.LZFUncompressor#<init>(com.ning.compress.DataHandler, com.ning.compress.BufferRecycler), +, +++ b/core/build.gradle, +  compile "org.yaml:snakeyaml:1.15" // used by jackson yaml, +  // compression of transport protocol, +  compile 'com.ning:compress-lzf:1.0.2', +++ b/buildSrc/src/main/resources/forbidden/third-party-signatures.txt, +@defaultMessage unsafe encoders/decoders have problems in the lzf compress library.  Use variants of encode/decode functions which take Encoder/Decoder., +com.ning.compress.lzf.impl.UnsafeChunkEncoders#createEncoder(int), +com.ning.compress.lzf.impl.UnsafeChunkEncoders#createNonAllocatingEncoder(int), +com.ning.compress.lzf.impl.UnsafeChunkEncoders#createEncoder(int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.impl.UnsafeChunkEncoders#createNonAllocatingEncoder(int, com.ning.compress.BufferRecycler), +com.ning.compress.lzf.impl.UnsafeChunkDecoder#<init>(), +com.ning.compress.lzf.parallel.CompressTask, +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalInstance(), +com.ning.compress.lzf.util.ChunkEncoderFactory#optimalInstance(int)]