[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/put/TransportUpdateSettingsAction.java, +        if (request.settings().getAsMap().size() == 1 && IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.exists(request.settings()) || IndexMetaData.INDEX_READ_ONLY_SETTING.exists(request.settings())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/put/TransportUpdateSettingsAction.java, +        if (request.settings().getAsMap().size() == 1 && IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.exists(request.settings()) || IndexMetaData.INDEX_READ_ONLY_SETTING.exists(request.settings())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +    private final IndexScopeSettings indexScopeSettings;, +                                           ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver, IndexScopeSettings indexScopeSettings) {, +        this.indexScopeSettings = indexScopeSettings;, +        indexScopeSettings.validate(request.settings());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/put/TransportUpdateSettingsAction.java, +        if (request.settings().getAsMap().size() == 1 && IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.exists(request.settings()) || IndexMetaData.INDEX_READ_ONLY_SETTING.exists(request.settings())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +    private final IndexScopeSettings indexScopeSettings;, +                                           ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver, IndexScopeSettings indexScopeSettings) {, +        this.indexScopeSettings = indexScopeSettings;, +        indexScopeSettings.validate(request.settings());, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +        dynamicMappingDisabled = !MapperService.INDEX_MAPPER_DYNAMIC_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/put/TransportUpdateSettingsAction.java, +        if (request.settings().getAsMap().size() == 1 && IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.exists(request.settings()) || IndexMetaData.INDEX_READ_ONLY_SETTING.exists(request.settings())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +    private final IndexScopeSettings indexScopeSettings;, +                                           ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver, IndexScopeSettings indexScopeSettings) {, +        this.indexScopeSettings = indexScopeSettings;, +        indexScopeSettings.validate(request.settings());, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +        dynamicMappingDisabled = !MapperService.INDEX_MAPPER_DYNAMIC_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/put/TransportUpdateSettingsAction.java, +        if (request.settings().getAsMap().size() == 1 && IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.exists(request.settings()) || IndexMetaData.INDEX_READ_ONLY_SETTING.exists(request.settings())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +    private final IndexScopeSettings indexScopeSettings;, +                                           ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver, IndexScopeSettings indexScopeSettings) {, +        this.indexScopeSettings = indexScopeSettings;, +        indexScopeSettings.validate(request.settings());, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +        dynamicMappingDisabled = !MapperService.INDEX_MAPPER_DYNAMIC_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +            if (IndexMetaData.INDEX_READ_ONLY_SETTING.get(indexMetaData.getSettings())) {, +            if (IndexMetaData.INDEX_BLOCKS_READ_SETTING.get(indexMetaData.getSettings())) {, +            if (IndexMetaData.INDEX_BLOCKS_WRITE_SETTING.get(indexMetaData.getSettings())) {, +            if (IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.get(indexMetaData.getSettings())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +        changed |= clusterSettings.updateSettings(transientToApply, transientSettings, transientUpdates, "transient", false);, +        changed |= clusterSettings.updateSettings(persistentToApply, persistentSettings, persistentUpdates, "persistent", false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/put/TransportUpdateSettingsAction.java, +        if (request.settings().getAsMap().size() == 1 && IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.exists(request.settings()) || IndexMetaData.INDEX_READ_ONLY_SETTING.exists(request.settings())) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +import org.elasticsearch.common.settings.IndexScopeSettings;, +    private final IndexScopeSettings indexScopeSettings;, +                                           ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver, IndexScopeSettings indexScopeSettings) {, +        this.indexScopeSettings = indexScopeSettings;, +        indexScopeSettings.validate(request.settings());, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +        dynamicMappingDisabled = !MapperService.INDEX_MAPPER_DYNAMIC_SETTING.get(settings);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/block/ClusterBlocks.java, +            if (IndexMetaData.INDEX_READ_ONLY_SETTING.get(indexMetaData.getSettings())) {, +            if (IndexMetaData.INDEX_BLOCKS_READ_SETTING.get(indexMetaData.getSettings())) {, +            if (IndexMetaData.INDEX_BLOCKS_WRITE_SETTING.get(indexMetaData.getSettings())) {, +            if (IndexMetaData.INDEX_BLOCKS_METADATA_SETTING.get(indexMetaData.getSettings())) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AutoExpandReplicas.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the]