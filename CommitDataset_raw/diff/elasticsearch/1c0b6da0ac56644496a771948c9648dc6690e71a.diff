[+++ b/docs/reference/mapping/types/core-types.asciidoc, +See the <<norms,section about norms>>., +[[norms]], +===== Norms, +, +Norms store various normalization factors that are later used (at query time), +in order to compute the score of a document relatively to a query., +, +Although useful for scoring, norms also require quite a lot of memory, +(typically in the order of one byte per document per field in your index,, +even for documents that don't have this specific field). As a consequence, if, +you don't need scoring on a specific field, it is highly recommended to disable, +norms on it. In  particular, this is the case for fields that are used solely, +for filtering or aggregations., +, +In case you would like to disable norms after the fact, it is possible to do so, +by using the <<indices-put-mapping,PUT mapping API>>. Please however note that, +norms won't be removed instantly, but as your index will receive new insertions, +or updates, and segments get merged. Any score computation on a field that got, +norms removed might return inconsistent results since some documents won't have, +norms anymore while other documents might still have norms., +, +[float], +++ b/docs/reference/mapping/types/core-types.asciidoc, +See the <<norms,section about norms>>., +[[norms]], +===== Norms, +, +Norms store various normalization factors that are later used (at query time), +in order to compute the score of a document relatively to a query., +, +Although useful for scoring, norms also require quite a lot of memory, +(typically in the order of one byte per document per field in your index,, +even for documents that don't have this specific field). As a consequence, if, +you don't need scoring on a specific field, it is highly recommended to disable, +norms on it. In  particular, this is the case for fields that are used solely, +for filtering or aggregations., +, +In case you would like to disable norms after the fact, it is possible to do so, +by using the <<indices-put-mapping,PUT mapping API>>. Please however note that, +norms won't be removed instantly, but as your index will receive new insertions, +or updates, and segments get merged. Any score computation on a field that got, +norms removed might return inconsistent results since some documents won't have, +norms anymore while other documents might still have norms., +, +[float], +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    protected FieldType fieldType;, +        if (this.fieldType().omitNorms() && !fieldMergeWith.fieldType.omitNorms()) {, +            mergeContext.addConflict("mapper [" + names.fullName() + "] cannot enable norms (`norms.enabled`)");, +            this.fieldType = new FieldType(this.fieldType);, +            this.fieldType.setOmitNorms(fieldMergeWith.fieldType.omitNorms());, +            this.fieldType.freeze();, +++ b/docs/reference/mapping/types/core-types.asciidoc, +See the <<norms,section about norms>>., +[[norms]], +===== Norms, +, +Norms store various normalization factors that are later used (at query time), +in order to compute the score of a document relatively to a query., +, +Although useful for scoring, norms also require quite a lot of memory, +(typically in the order of one byte per document per field in your index,, +even for documents that don't have this specific field). As a consequence, if, +you don't need scoring on a specific field, it is highly recommended to disable, +norms on it. In  particular, this is the case for fields that are used solely, +for filtering or aggregations., +, +In case you would like to disable norms after the fact, it is possible to do so, +by using the <<indices-put-mapping,PUT mapping API>>. Please however note that, +norms won't be removed instantly, but as your index will receive new insertions, +or updates, and segments get merged. Any score computation on a field that got, +norms removed might return inconsistent results since some documents won't have, +norms anymore while other documents might still have norms., +, +[float], +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    protected FieldType fieldType;, +        if (this.fieldType().omitNorms() && !fieldMergeWith.fieldType.omitNorms()) {, +            mergeContext.addConflict("mapper [" + names.fullName() + "] cannot enable norms (`norms.enabled`)");, +            this.fieldType = new FieldType(this.fieldType);, +            this.fieldType.setOmitNorms(fieldMergeWith.fieldType.omitNorms());, +            this.fieldType.freeze();, +++ b/src/test/java/org/elasticsearch/index/mapper/string/SimpleStringMappingTests.java, +import org.apache.mahout.math.Arrays;, +import org.elasticsearch.index.mapper.DocumentMapper.MergeFlags;, +import org.elasticsearch.index.mapper.DocumentMapper.MergeResult;, +    @Test, +    public void testDisableNorms() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field").field("type", "string").endObject().endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper defaultMapper = MapperTestUtils.newParser().parse(mapping);, +, +        ParsedDocument doc = defaultMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("field", "1234"), +                .endObject(), +                .bytes());]