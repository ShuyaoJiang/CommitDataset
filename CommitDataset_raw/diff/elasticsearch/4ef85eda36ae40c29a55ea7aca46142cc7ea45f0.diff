[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141),, +        PIPELINE_MISSING_EXCEPTION(org.elasticsearch.ingest.PipelineMissingException.class, org.elasticsearch.ingest.PipelineMissingException::new, 142);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141),, +        PIPELINE_MISSING_EXCEPTION(org.elasticsearch.ingest.PipelineMissingException.class, org.elasticsearch.ingest.PipelineMissingException::new, 142);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestProxyActionFilter;, +import org.elasticsearch.action.ingest.DeletePipelineAction;, +import org.elasticsearch.action.ingest.DeletePipelineTransportAction;, +import org.elasticsearch.action.ingest.GetPipelineAction;, +import org.elasticsearch.action.ingest.GetPipelineTransportAction;, +import org.elasticsearch.action.ingest.PutPipelineAction;, +import org.elasticsearch.action.ingest.PutPipelineTransportAction;, +import org.elasticsearch.action.ingest.SimulatePipelineAction;, +import org.elasticsearch.action.ingest.SimulatePipelineTransportAction;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.node.NodeModule;, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    private final boolean ingestEnabled;, +    public ActionModule(Settings settings, boolean proxy) {, +        this.ingestEnabled = NodeModule.isNodeIngestEnabled(settings);, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +        if (proxy == false) {, +            if (ingestEnabled) {, +                registerFilter(IngestActionFilter.class);, +            } else {, +                registerFilter(IngestProxyActionFilter.class);, +            }, +        }, +        registerAction(PutPipelineAction.INSTANCE, PutPipelineTransportAction.class);, +        registerAction(GetPipelineAction.INSTANCE, GetPipelineTransportAction.class);, +        registerAction(DeletePipelineAction.INSTANCE, DeletePipelineTransportAction.class);, +        registerAction(SimulatePipelineAction.INSTANCE, SimulatePipelineTransportAction.class);, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141),, +        PIPELINE_MISSING_EXCEPTION(org.elasticsearch.ingest.PipelineMissingException.class, org.elasticsearch.ingest.PipelineMissingException::new, 142);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestProxyActionFilter;, +import org.elasticsearch.action.ingest.DeletePipelineAction;, +import org.elasticsearch.action.ingest.DeletePipelineTransportAction;, +import org.elasticsearch.action.ingest.GetPipelineAction;, +import org.elasticsearch.action.ingest.GetPipelineTransportAction;, +import org.elasticsearch.action.ingest.PutPipelineAction;, +import org.elasticsearch.action.ingest.PutPipelineTransportAction;, +import org.elasticsearch.action.ingest.SimulatePipelineAction;, +import org.elasticsearch.action.ingest.SimulatePipelineTransportAction;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.node.NodeModule;, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    private final boolean ingestEnabled;, +    public ActionModule(Settings settings, boolean proxy) {, +        this.ingestEnabled = NodeModule.isNodeIngestEnabled(settings);, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +        if (proxy == false) {, +            if (ingestEnabled) {, +                registerFilter(IngestActionFilter.class);, +            } else {, +                registerFilter(IngestProxyActionFilter.class);, +            }, +        }, +        registerAction(PutPipelineAction.INSTANCE, PutPipelineTransportAction.class);, +        registerAction(GetPipelineAction.INSTANCE, GetPipelineTransportAction.class);, +        registerAction(DeletePipelineAction.INSTANCE, DeletePipelineTransportAction.class);, +        registerAction(SimulatePipelineAction.INSTANCE, SimulatePipelineTransportAction.class);, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, ReplicationRequest, ReplicationResponse> {, +    protected ReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new ReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        QUERY_SHARD_EXCEPTION(org.elasticsearch.index.query.QueryShardException.class, org.elasticsearch.index.query.QueryShardException::new, 141),, +        PIPELINE_MISSING_EXCEPTION(org.elasticsearch.ingest.PipelineMissingException.class, org.elasticsearch.ingest.PipelineMissingException::new, 142);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestProxyActionFilter;, +import org.elasticsearch.action.ingest.DeletePipelineAction;, +import org.elasticsearch.action.ingest.DeletePipelineTransportAction;, +import org.elasticsearch.action.ingest.GetPipelineAction;, +import org.elasticsearch.action.ingest.GetPipelineTransportAction;, +import org.elasticsearch.action.ingest.PutPipelineAction;, +import org.elasticsearch.action.ingest.PutPipelineTransportAction;, +import org.elasticsearch.action.ingest.SimulatePipelineAction;, +import org.elasticsearch.action.ingest.SimulatePipelineTransportAction;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.node.NodeModule;, +    static class ActionEntry<Request extends ActionRequest, Response extends ActionResponse> {, +    private final boolean ingestEnabled;, +    public ActionModule(Settings settings, boolean proxy) {, +        this.ingestEnabled = NodeModule.isNodeIngestEnabled(settings);, +    public <Request extends ActionRequest, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +        if (proxy == false) {, +            if (ingestEnabled) {, +                registerFilter(IngestActionFilter.class);, +            } else {, +                registerFilter(IngestProxyActionFilter.class);]