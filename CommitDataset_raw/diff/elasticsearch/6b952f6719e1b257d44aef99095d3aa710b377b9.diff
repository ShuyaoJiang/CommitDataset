[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/AbstractFsBlobContainer.java, +    public File filePath() {, +        return this.path;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/AbstractFsBlobContainer.java, +    public File filePath() {, +        return this.path;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +    SnapshotLock obtainSnapshotLock() throws Exception;, +, +    public static interface SnapshotLock {, +        void release();, +    }, +, +    public static final SnapshotLock NO_SNAPSHOT_LOCK = new SnapshotLock() {, +        @Override public void release() {, +        }, +    };, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/AbstractFsBlobContainer.java, +    public File filePath() {, +        return this.path;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +    SnapshotLock obtainSnapshotLock() throws Exception;, +, +    public static interface SnapshotLock {, +        void release();, +    }, +, +    public static final SnapshotLock NO_SNAPSHOT_LOCK = new SnapshotLock() {, +        @Override public void release() {, +        }, +    };, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +    private IndexShardGateway.SnapshotLock snapshotLock;, +, +                                            ThreadPool threadPool, IndexShard indexShard, IndexShardGateway shardGateway) {, +, +        if (snapshotLock == null) {, +            try {, +                snapshotLock = shardGateway.obtainSnapshotLock();, +            } catch (Exception e) {, +                logger.warn("failed to obtain snapshot lock, ignoring snapshot", e);, +                return;, +            }, +        }, +, +        if (snapshotLock != null) {, +            snapshotLock.release();, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/AbstractFsBlobContainer.java, +    public File filePath() {, +        return this.path;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +    SnapshotLock obtainSnapshotLock() throws Exception;, +, +    public static interface SnapshotLock {, +        void release();, +    }, +, +    public static final SnapshotLock NO_SNAPSHOT_LOCK = new SnapshotLock() {, +        @Override public void release() {, +        }, +    };, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +    private IndexShardGateway.SnapshotLock snapshotLock;, +, +                                            ThreadPool threadPool, IndexShard indexShard, IndexShardGateway shardGateway) {, +, +        if (snapshotLock == null) {, +            try {, +                snapshotLock = shardGateway.obtainSnapshotLock();, +            } catch (Exception e) {, +                logger.warn("failed to obtain snapshot lock, ignoring snapshot", e);, +                return;, +            }, +        }, +, +        if (snapshotLock != null) {, +            snapshotLock.release();, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +    @Override public SnapshotLock obtainSnapshotLock() throws Exception {, +        return NO_SNAPSHOT_LOCK;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/AbstractFsBlobContainer.java, +    public File filePath() {, +        return this.path;, +    }, +]