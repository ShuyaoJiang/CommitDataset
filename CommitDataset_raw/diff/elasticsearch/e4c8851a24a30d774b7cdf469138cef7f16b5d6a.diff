[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticationResult.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.security.authc;, +, +import java.util.Objects;, +, +import org.elasticsearch.common.inject.internal.Nullable;, +import org.elasticsearch.xpack.security.user.User;, +, +/**, + * Represents the result of an authentication attempt., + * This allows a {@link Realm} to respond in 3 different ways (without needing to, + * resort to {@link org.elasticsearch.action.ActionListener#onFailure(Exception)}), + * <ol>, + * <li>Successful authentication of a user</li>, + * <li>Unable to authenticate user, try another realm (optionally with a diagnostic message)</li>, + * <li>Unable to authenticate user, terminate authentication (with an error message)</li>, + * </ol>, + */, +public final class AuthenticationResult {, +    private static final AuthenticationResult NOT_HANDLED = new AuthenticationResult(Status.CONTINUE, null, null, null);, +, +    public enum Status {, +        SUCCESS,, +        CONTINUE,, +        TERMINATE,, +    }, +, +    private final Status status;, +    private final User user;, +    private final String message;, +    private final Exception exception;, +, +    private AuthenticationResult(Status status, @Nullable User user, @Nullable String message, @Nullable Exception exception) {, +        this.status = status;, +        this.user = user;, +        this.message = message;, +        this.exception = exception;, +    }, +, +    public Status getStatus() {, +        return status;, +    }, +, +    public User getUser() {, +        return user;, +    }, +, +    public String getMessage() {, +        return message;, +    }, +, +    public Exception getException() {, +        return exception;, +    }, +, +    /**, +     * Creates an {@code AuthenticationResult} that indicates that the supplied {@link User}, +     * has been successfully authenticated., +     * <p>, +     * The {@link #getStatus() status} is set to {@link Status#SUCCESS}., +     * </p><p>, +     * Neither the {@link #getMessage() message} nor {@link #getException() exception} are populated., +     * </p>, +     * @param user The user that was authenticated. Cannot be {@code null}., +     */, +    public static AuthenticationResult success(User user) {, +        Objects.requireNonNull(user);, +        return new AuthenticationResult(Status.SUCCESS, user, null, null);, +    }, +, +    /**, +     * Creates an {@code AuthenticationResult} that indicates that the realm did not handle the, +     * authentication request in any way, and has no failure messages., +     * <p>, +     * The {@link #getStatus() status} is set to {@link Status#CONTINUE}., +     * </p><p>, +     * The {@link #getMessage() message}, {@link #getException() exception}, and {@link #getUser() user} are all set to {@code null}., +     * </p>, +     */, +    public static AuthenticationResult notHandled() {, +        return NOT_HANDLED;, +    }, +, +    /**, +     * Creates an {@code AuthenticationResult} that indicates that the realm attempted to handle the authentication request but was, +     * unsuccessful. The reason for the failure is given in the supplied message and optional exception., +     * <p>, +     * The {@link #getStatus() status} is set to {@link Status#CONTINUE}., +     * </p><p>, +     * The {@link #getUser() user} is not populated., +     * </p>, +     */, +    public static AuthenticationResult unsuccessful(String message, @Nullable Exception cause) {, +        Objects.requireNonNull(message);, +        return new AuthenticationResult(Status.CONTINUE, null, message, cause);]