[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Configuration currentDistro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, currentDistro, VersionProperties.elasticsearch), +        for (int i = 0; i < config.numNodes; i++) {, +            Configuration distro = currentDistro, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Configuration currentDistro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, currentDistro, VersionProperties.elasticsearch), +        for (int i = 0; i < config.numNodes; i++) {, +            Configuration distro = currentDistro, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Configuration currentDistro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, currentDistro, VersionProperties.elasticsearch), +        for (int i = 0; i < config.numNodes; i++) {, +            Configuration distro = currentDistro, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +        DELETE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.DeleteFailedEngineException.class,, +                org.elasticsearch.index.engine.DeleteFailedEngineException::new, 28),, +        INDEX_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.IndexFailedEngineException.class,, +                org.elasticsearch.index.engine.IndexFailedEngineException::new, 80),, +        STATUS_EXCEPTION(org.elasticsearch.ElasticsearchStatusException.class, org.elasticsearch.ElasticsearchStatusException::new, 145),, +        TASK_CANCELLED_EXCEPTION(org.elasticsearch.tasks.TaskCancelledException.class,, +            org.elasticsearch.tasks.TaskCancelledException::new, 146);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Configuration currentDistro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, currentDistro, VersionProperties.elasticsearch), +        for (int i = 0; i < config.numNodes; i++) {, +            Configuration distro = currentDistro, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +        DELETE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.DeleteFailedEngineException.class,, +                org.elasticsearch.index.engine.DeleteFailedEngineException::new, 28),, +        INDEX_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.IndexFailedEngineException.class,, +                org.elasticsearch.index.engine.IndexFailedEngineException::new, 80),, +        STATUS_EXCEPTION(org.elasticsearch.ElasticsearchStatusException.class, org.elasticsearch.ElasticsearchStatusException::new, 145),, +        TASK_CANCELLED_EXCEPTION(org.elasticsearch.tasks.TaskCancelledException.class,, +            org.elasticsearch.tasks.TaskCancelledException::new, 146);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +     * Construct a {@code WeightedDecision} object for the given shard given all the metadata. This also attempts to construct the human, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Configuration currentDistro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, currentDistro, VersionProperties.elasticsearch), +        for (int i = 0; i < config.numNodes; i++) {, +            Configuration distro = currentDistro, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +        DELETE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.DeleteFailedEngineException.class,, +                org.elasticsearch.index.engine.DeleteFailedEngineException::new, 28),, +        INDEX_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.IndexFailedEngineException.class,, +                org.elasticsearch.index.engine.IndexFailedEngineException::new, 80),, +        STATUS_EXCEPTION(org.elasticsearch.ElasticsearchStatusException.class, org.elasticsearch.ElasticsearchStatusException::new, 145),, +        TASK_CANCELLED_EXCEPTION(org.elasticsearch.tasks.TaskCancelledException.class,, +            org.elasticsearch.tasks.TaskCancelledException::new, 146);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +     * Construct a {@code WeightedDecision} object for the given shard given all the metadata. This also attempts to construct the human, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java, +                            new RolloverResponse(sourceIndexName, rolloverIndexName, conditionResults, false, false, false, false), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        Configuration currentDistro = project.configurations.create(distroConfigName), +        configureDistributionDependency(project, config.distribution, currentDistro, VersionProperties.elasticsearch), +        for (int i = 0; i < config.numNodes; i++) {, +            Configuration distro = currentDistro, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +        DELETE_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.DeleteFailedEngineException.class,, +                org.elasticsearch.index.engine.DeleteFailedEngineException::new, 28),, +        INDEX_FAILED_ENGINE_EXCEPTION(org.elasticsearch.index.engine.IndexFailedEngineException.class,, +                org.elasticsearch.index.engine.IndexFailedEngineException::new, 80),, +        STATUS_EXCEPTION(org.elasticsearch.ElasticsearchStatusException.class, org.elasticsearch.ElasticsearchStatusException::new, 145),, +        TASK_CANCELLED_EXCEPTION(org.elasticsearch.tasks.TaskCancelledException.class,, +            org.elasticsearch.tasks.TaskCancelledException::new, 146);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +     * Construct a {@code WeightedDecision} object for the given shard given all the metadata. This also attempts to construct the human, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java, +                            new RolloverResponse(sourceIndexName, rolloverIndexName, conditionResults, false, false, false, false), +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.action.delete.TransportDeleteAction;, +import org.elasticsearch.action.index.TransportIndexAction;, +import org.elasticsearch.index.translog.Translog.Location;, +public class TransportShardBulkAction extends TransportWriteAction<BulkShardRequest, BulkShardResponse> {, +                indexNameExpressionResolver, BulkShardRequest::new, ThreadPool.Names.BULK);, +    protected WriteResult<BulkShardResponse> onPrimaryShard(BulkShardRequest request, IndexShard primary) throws Exception {, +        return new WriteResult<>(response, location);, +    private Translog.Location executeBulkItemRequest(IndexMetaData metaData, IndexShard indexShard,, +                                                     Translog.Location location, int requestIndex) {, +        preVersions[requestIndex] = request.items()[requestIndex].request().version();, +        preVersionTypes[requestIndex] = request.items()[requestIndex].request().versionType();, +        DocWriteRequest.OpType opType = request.items()[requestIndex].request().opType();, +            WriteResult<? extends DocWriteResponse> writeResult = innerExecuteBulkItemRequest(metaData, indexShard,, +                request, requestIndex);, +            if (writeResult.getLocation() != null) {, +                location = locationToSync(location, writeResult.getLocation());]