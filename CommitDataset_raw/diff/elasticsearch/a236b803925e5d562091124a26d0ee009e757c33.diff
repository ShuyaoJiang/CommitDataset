[+++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            ThreadPool.terminate(injector.getInstance(ThreadPool.class), 10, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            ThreadPool.terminate(injector.getInstance(ThreadPool.class), 10, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +            ThreadPool.terminate(executor, 0, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            ThreadPool.terminate(injector.getInstance(ThreadPool.class), 10, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +            ThreadPool.terminate(executor, 0, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +import org.elasticsearch.threadpool.ThreadPool;, +        ThreadPool.terminate(concurrentStreamPool, 1, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            ThreadPool.terminate(injector.getInstance(ThreadPool.class), 10, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +            ThreadPool.terminate(executor, 0, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +import org.elasticsearch.threadpool.ThreadPool;, +        ThreadPool.terminate(concurrentStreamPool, 1, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/node/internal/InternalNode.java, +        // TODO this should really use ThreadPool.terminate(), +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            ThreadPool.terminate(injector.getInstance(ThreadPool.class), 10, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +            ThreadPool.terminate(executor, 0, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +import org.elasticsearch.threadpool.ThreadPool;, +        ThreadPool.terminate(concurrentStreamPool, 1, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/node/internal/InternalNode.java, +        // TODO this should really use ThreadPool.terminate(), +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +            ThreadPoolExecutor executor = (ThreadPoolExecutor) retiredExecutors.remove().executor();, +            result &= executor.awaitTermination(timeout, unit);, +, +    /**, +     * Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,, +     * the service is <code>null</code> this method will return <code>false</code>., +     */, +    public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {, +        if (service != null) {, +            service.shutdown();, +            try {, +                if (service.awaitTermination(timeout, timeUnit)) {, +                    return true;, +                }, +            } catch (InterruptedException e) {, +                Thread.currentThread().interrupt();, +            }, +            service.shutdownNow();, +        }, +        return false;, +    }, +, +    /**, +     * Returns <code>true</code> if the given pool was terminated successfully. If the termination timed out,, +     * the service is <code>null</code> this method will return <code>false</code>., +     */, +    public static boolean terminate(ThreadPool pool, long timeout, TimeUnit timeUnit) {, +        if (pool != null) {, +            pool.shutdown();, +            try {, +                if (pool.awaitTermination(timeout, timeUnit)) {, +                    return true;, +                }, +            } catch (InterruptedException e) {, +                Thread.currentThread().interrupt();, +            }, +            // last resort, +            pool.shutdownNow();, +        }, +        return false;, +    }, +, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            ThreadPool.terminate(injector.getInstance(ThreadPool.class), 10, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +            ThreadPool.terminate(executor, 0, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +import org.elasticsearch.threadpool.ThreadPool;, +        ThreadPool.terminate(concurrentStreamPool, 1, TimeUnit.SECONDS);, +++ b/src/main/java/org/elasticsearch/node/internal/InternalNode.java, +        // TODO this should really use ThreadPool.terminate(), +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +            ThreadPoolExecutor executor = (ThreadPoolExecutor) retiredExecutors.remove().executor();, +            result &= executor.awaitTermination(timeout, unit);, +, +    /**, +     * Returns <code>true</code> if the given service was terminated successfully. If the termination timed out,, +     * the service is <code>null</code> this method will return <code>false</code>., +     */, +    public static boolean terminate(ExecutorService service, long timeout, TimeUnit timeUnit) {, +        if (service != null) {, +            service.shutdown();, +            try {, +                if (service.awaitTermination(timeout, timeUnit)) {, +                    return true;, +                }, +            } catch (InterruptedException e) {, +                Thread.currentThread().interrupt();]