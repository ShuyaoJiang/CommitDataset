[+++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +++ b/core/src/main/java/org/elasticsearch/search/MultiValueMode.java, +    public NumericDocValues select(final SortedNumericDocValues values, final long missingValue, final BitSet rootDocs, final DocIdSetIterator innerDocs, int maxDoc) throws IOException {, +        if (rootDocs == null || innerDocs == null) {, +            int lastSeenRootDoc = -1;, +            public boolean advanceExact(int rootDoc) throws IOException {, +                assert rootDocs.get(rootDoc) : "can only sort root documents";, +                assert rootDoc >= lastSeenRootDoc : "can only evaluate current and upcoming root docs";, +                if (rootDoc == lastSeenRootDoc) {, +                } else if (rootDoc == 0) {, +                final int prevRootDoc = rootDocs.prevSetBit(rootDoc - 1);, +                final int firstNestedDoc;, +                if (innerDocs.docID() > prevRootDoc) {, +                    firstNestedDoc = innerDocs.docID();, +                    firstNestedDoc = innerDocs.advance(prevRootDoc + 1);, +                lastSeenRootDoc = rootDoc;, +                lastEmittedValue = pick(values, missingValue, innerDocs, firstNestedDoc, rootDoc);, +                return lastSeenRootDoc;, +    public NumericDoubleValues select(final SortedNumericDoubleValues values, final double missingValue, final BitSet rootDocs, final DocIdSetIterator innerDocs, int maxDoc) throws IOException {, +        if (rootDocs == null || innerDocs == null) {, +            int lastSeenRootDoc = 0;, +            public boolean advanceExact(int rootDoc) throws IOException {, +                assert rootDocs.get(rootDoc) : "can only sort root documents";, +                assert rootDoc >= lastSeenRootDoc : "can only evaluate current and upcoming root docs";, +                if (rootDoc == lastSeenRootDoc) {, +                final int prevRootDoc = rootDocs.prevSetBit(rootDoc - 1);, +                final int firstNestedDoc;, +                if (innerDocs.docID() > prevRootDoc) {, +                    firstNestedDoc = innerDocs.docID();, +                    firstNestedDoc = innerDocs.advance(prevRootDoc + 1);, +                lastSeenRootDoc = rootDoc;, +                lastEmittedValue = pick(values, missingValue, innerDocs, firstNestedDoc, rootDoc);, +    public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue, final BitSet rootDocs, final DocIdSetIterator innerDocs, int maxDoc) throws IOException {, +        if (rootDocs == null || innerDocs == null) {, +            int lastSeenRootDoc = 0;, +            public boolean advanceExact(int rootDoc) throws IOException {, +                assert rootDocs.get(rootDoc) : "can only sort root documents";, +                assert rootDoc >= lastSeenRootDoc : "can only evaluate current and upcoming root docs";, +                if (rootDoc == lastSeenRootDoc) {, +                final int prevRootDoc = rootDocs.prevSetBit(rootDoc - 1);, +                final int firstNestedDoc;, +                if (innerDocs.docID() > prevRootDoc) {, +                    firstNestedDoc = innerDocs.docID();, +                    firstNestedDoc = innerDocs.advance(prevRootDoc + 1);, +                lastSeenRootDoc = rootDoc;, +                lastEmittedValue = pick(selectedValues, builder, innerDocs, firstNestedDoc, rootDoc);, +    public SortedDocValues select(final SortedSetDocValues values, final BitSet rootDocs, final DocIdSetIterator innerDocs) throws IOException {, +        if (rootDocs == null || innerDocs == null) {, +            int lastSeenRootDoc = 0;, +            public boolean advanceExact(int rootDoc) throws IOException {, +                assert rootDocs.get(rootDoc) : "can only sort root documents";, +                assert rootDoc >= lastSeenRootDoc : "can only evaluate current and upcoming root docs";, +                if (rootDoc == lastSeenRootDoc) {, +                final int prevRootDoc = rootDocs.prevSetBit(rootDoc - 1);, +                final int firstNestedDoc;, +                if (innerDocs.docID() > prevRootDoc) {, +                    firstNestedDoc = innerDocs.docID();, +                    firstNestedDoc = innerDocs.advance(prevRootDoc + 1);, +                docID = lastSeenRootDoc = rootDoc;, +                lastEmittedOrd = pick(selectedValues, innerDocs, firstNestedDoc, rootDoc);, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +++ b/core/src/main/java/org/elasticsearch/search/MultiValueMode.java, +    public NumericDocValues select(final SortedNumericDocValues values, final long missingValue, final BitSet rootDocs, final DocIdSetIterator innerDocs, int maxDoc) throws IOException {, +        if (rootDocs == null || innerDocs == null) {, +            int lastSeenRootDoc = -1;, +            public boolean advanceExact(int rootDoc) throws IOException {, +                assert rootDocs.get(rootDoc) : "can only sort root documents";, +                assert rootDoc >= lastSeenRootDoc : "can only evaluate current and upcoming root docs";, +                if (rootDoc == lastSeenRootDoc) {, +                } else if (rootDoc == 0) {, +                final int prevRootDoc = rootDocs.prevSetBit(rootDoc - 1);, +                final int firstNestedDoc;, +                if (innerDocs.docID() > prevRootDoc) {, +                    firstNestedDoc = innerDocs.docID();, +                    firstNestedDoc = innerDocs.advance(prevRootDoc + 1);, +                lastSeenRootDoc = rootDoc;, +                lastEmittedValue = pick(values, missingValue, innerDocs, firstNestedDoc, rootDoc);, +                return lastSeenRootDoc;, +    public NumericDoubleValues select(final SortedNumericDoubleValues values, final double missingValue, final BitSet rootDocs, final DocIdSetIterator innerDocs, int maxDoc) throws IOException {, +        if (rootDocs == null || innerDocs == null) {, +            int lastSeenRootDoc = 0;, +            public boolean advanceExact(int rootDoc) throws IOException {, +                assert rootDocs.get(rootDoc) : "can only sort root documents";, +                assert rootDoc >= lastSeenRootDoc : "can only evaluate current and upcoming root docs";, +                if (rootDoc == lastSeenRootDoc) {, +                final int prevRootDoc = rootDocs.prevSetBit(rootDoc - 1);, +                final int firstNestedDoc;, +                if (innerDocs.docID() > prevRootDoc) {, +                    firstNestedDoc = innerDocs.docID();, +                    firstNestedDoc = innerDocs.advance(prevRootDoc + 1);, +                lastSeenRootDoc = rootDoc;, +                lastEmittedValue = pick(values, missingValue, innerDocs, firstNestedDoc, rootDoc);, +    public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue, final BitSet rootDocs, final DocIdSetIterator innerDocs, int maxDoc) throws IOException {, +        if (rootDocs == null || innerDocs == null) {, +            int lastSeenRootDoc = 0;, +            public boolean advanceExact(int rootDoc) throws IOException {, +                assert rootDocs.get(rootDoc) : "can only sort root documents";, +                assert rootDoc >= lastSeenRootDoc : "can only evaluate current and upcoming root docs";, +                if (rootDoc == lastSeenRootDoc) {]