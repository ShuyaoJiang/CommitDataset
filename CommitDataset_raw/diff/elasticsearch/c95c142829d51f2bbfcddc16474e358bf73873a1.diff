[+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search.aggregations.metrics;, +, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.search.Scorer;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.script.CompiledScript;, +import org.elasticsearch.script.ExecutableScript;, +import org.elasticsearch.script.LeafSearchScript;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptEngineService;, +import org.elasticsearch.script.ScriptModule;, +import org.elasticsearch.script.ScriptService.ScriptType;, +import org.elasticsearch.script.SearchScript;, +import org.elasticsearch.search.aggregations.bucket.global.Global;, +import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;, +import org.elasticsearch.search.aggregations.metrics.avg.Avg;, +import org.elasticsearch.search.lookup.LeafSearchLookup;, +import org.elasticsearch.search.lookup.SearchLookup;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.avg;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.global;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.histogram;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.notNullValue;, +, +/**, + *, + */, +public class AvgIT extends AbstractNumericTestCase {, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return Arrays.asList(, +                ExtractFieldScriptPlugin.class,, +                FieldValueScriptPlugin.class);, +    }, +, +    @Override, +    public void testEmptyAggregation() throws Exception {, +, +        SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx"), +                .setQuery(matchAllQuery()), +                .addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(avg("avg"))), +                .execute().actionGet();, +, +        assertThat(searchResponse.getHits().getTotalHits(), equalTo(2l));, +        Histogram histo = searchResponse.getAggregations().get("histo");, +        assertThat(histo, notNullValue());, +        Histogram.Bucket bucket = histo.getBuckets().get(1);, +        assertThat(bucket, notNullValue());, +, +        Avg avg = bucket.getAggregations().get("avg");, +        assertThat(avg, notNullValue());, +        assertThat(avg.getName(), equalTo("avg"));, +        assertThat(Double.isNaN(avg.getValue()), is(true));, +    }, +, +    @Override, +    public void testUnmapped() throws Exception {, +        SearchResponse searchResponse = client().prepareSearch("idx_unmapped"), +                .setQuery(matchAllQuery()), +                .addAggregation(avg("avg").field("value")), +                .execute().actionGet();, +, +        assertThat(searchResponse.getHits().getTotalHits(), equalTo(0l));, +, +        Avg avg = searchResponse.getAggregations().get("avg");, +        assertThat(avg, notNullValue());]