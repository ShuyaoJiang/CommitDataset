[+++ b/server/src/main/java/org/elasticsearch/common/time/EpochTime.java, +            return temporal.isSupported(ChronoField.NANO_OF_SECOND);, +            return temporal.getLong(ChronoField.NANO_OF_SECOND) % 1_000_000;, +        .optionalStart() // optional is used so isSupported will be called when printing, +        .appendFraction(NANOS_OF_SECOND, 0, 9, true), +        .optionalEnd(), +        .appendValue(SECONDS, 1, 19, SignStyle.NORMAL), +        .optionalStart(), +        .appendFraction(NANOS_OF_MILLI, 0, 6, true), +        .optionalEnd(), +    static final DateFormatter SECONDS_FORMATTER = new JavaDateFormatter("epoch_second", SECONDS_FORMATTER1,, +        SECONDS_FORMATTER1, SECONDS_FORMATTER2);, +    static final DateFormatter MILLIS_FORMATTER = new JavaDateFormatter("epoch_millis", MILLISECONDS_FORMATTER1,, +        MILLISECONDS_FORMATTER1, MILLISECONDS_FORMATTER2);, +++ b/server/src/main/java/org/elasticsearch/common/time/EpochTime.java, +            return temporal.isSupported(ChronoField.NANO_OF_SECOND);, +            return temporal.getLong(ChronoField.NANO_OF_SECOND) % 1_000_000;, +        .optionalStart() // optional is used so isSupported will be called when printing, +        .appendFraction(NANOS_OF_SECOND, 0, 9, true), +        .optionalEnd(), +        .appendValue(SECONDS, 1, 19, SignStyle.NORMAL), +        .optionalStart(), +        .appendFraction(NANOS_OF_MILLI, 0, 6, true), +        .optionalEnd(), +    static final DateFormatter SECONDS_FORMATTER = new JavaDateFormatter("epoch_second", SECONDS_FORMATTER1,, +        SECONDS_FORMATTER1, SECONDS_FORMATTER2);, +    static final DateFormatter MILLIS_FORMATTER = new JavaDateFormatter("epoch_millis", MILLISECONDS_FORMATTER1,, +        MILLISECONDS_FORMATTER1, MILLISECONDS_FORMATTER2);, +++ b/server/src/test/java/org/elasticsearch/common/time/DateFormattersTests.java, +    public void testEpochFormatting() {, +        long seconds = randomLongBetween(0, 130L * 365 * 86400); // from 1970 epoch till around 2100, +        long nanos = randomLongBetween(0, 999_999_999L);, +        Instant instant = Instant.ofEpochSecond(seconds, nanos);, +, +        DateFormatter millisFormatter = DateFormatter.forPattern("epoch_millis");, +        String millis = millisFormatter.format(instant);, +        Instant millisInstant = Instant.from(millisFormatter.parse(millis));, +        assertThat(millisInstant.toEpochMilli(), is(instant.toEpochMilli()));, +        assertThat(millisFormatter.format(Instant.ofEpochSecond(42, 0)), is("42000"));, +        assertThat(millisFormatter.format(Instant.ofEpochSecond(42, 123456789L)), is("42123.456789"));, +, +        DateFormatter secondsFormatter = DateFormatter.forPattern("epoch_second");, +        String formattedSeconds = secondsFormatter.format(instant);, +        Instant secondsInstant = Instant.from(secondsFormatter.parse(formattedSeconds));, +        assertThat(secondsInstant.getEpochSecond(), is(instant.getEpochSecond()));, +, +        assertThat(secondsFormatter.format(Instant.ofEpochSecond(42, 0)), is("42"));, +    }, +, +++ b/server/src/main/java/org/elasticsearch/common/time/EpochTime.java, +            return temporal.isSupported(ChronoField.NANO_OF_SECOND);, +            return temporal.getLong(ChronoField.NANO_OF_SECOND) % 1_000_000;, +        .optionalStart() // optional is used so isSupported will be called when printing, +        .appendFraction(NANOS_OF_SECOND, 0, 9, true), +        .optionalEnd(), +        .appendValue(SECONDS, 1, 19, SignStyle.NORMAL), +        .optionalStart(), +        .appendFraction(NANOS_OF_MILLI, 0, 6, true), +        .optionalEnd(), +    static final DateFormatter SECONDS_FORMATTER = new JavaDateFormatter("epoch_second", SECONDS_FORMATTER1,, +        SECONDS_FORMATTER1, SECONDS_FORMATTER2);, +    static final DateFormatter MILLIS_FORMATTER = new JavaDateFormatter("epoch_millis", MILLISECONDS_FORMATTER1,, +        MILLISECONDS_FORMATTER1, MILLISECONDS_FORMATTER2);, +++ b/server/src/test/java/org/elasticsearch/common/time/DateFormattersTests.java, +    public void testEpochFormatting() {, +        long seconds = randomLongBetween(0, 130L * 365 * 86400); // from 1970 epoch till around 2100, +        long nanos = randomLongBetween(0, 999_999_999L);, +        Instant instant = Instant.ofEpochSecond(seconds, nanos);, +, +        DateFormatter millisFormatter = DateFormatter.forPattern("epoch_millis");, +        String millis = millisFormatter.format(instant);, +        Instant millisInstant = Instant.from(millisFormatter.parse(millis));, +        assertThat(millisInstant.toEpochMilli(), is(instant.toEpochMilli()));, +        assertThat(millisFormatter.format(Instant.ofEpochSecond(42, 0)), is("42000"));, +        assertThat(millisFormatter.format(Instant.ofEpochSecond(42, 123456789L)), is("42123.456789"));, +, +        DateFormatter secondsFormatter = DateFormatter.forPattern("epoch_second");, +        String formattedSeconds = secondsFormatter.format(instant);, +        Instant secondsInstant = Instant.from(secondsFormatter.parse(formattedSeconds));, +        assertThat(secondsInstant.getEpochSecond(), is(instant.getEpochSecond()));, +, +        assertThat(secondsFormatter.format(Instant.ofEpochSecond(42, 0)), is("42"));, +    }, +, +++ b/server/src/test/java/org/elasticsearch/search/aggregations/bucket/DateRangeIT.java]