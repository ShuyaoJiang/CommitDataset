[+++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/WatcherService.java, +, +        triggerService.pauseExecution();, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/WatcherService.java, +, +        triggerService.pauseExecution();, +++ b/x-pack/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/WatcherServiceTests.java, +import org.elasticsearch.xpack.core.watcher.trigger.Trigger;, +import org.elasticsearch.xpack.watcher.condition.InternalAlwaysCondition;, +import org.elasticsearch.xpack.watcher.input.none.ExecutableNoneInput;, +import org.elasticsearch.xpack.watcher.trigger.TriggerEngine;, +    public void testPausingWatcherServiceAlsoPausesTriggerService() {, +        String engineType = "foo";, +        TriggerEngine triggerEngine = mock(TriggerEngine.class);, +        when(triggerEngine.type()).thenReturn(engineType);, +        TriggerService triggerService = new TriggerService(Settings.EMPTY, Collections.singleton(triggerEngine));, +, +        Trigger trigger = mock(Trigger.class);, +        when(trigger.type()).thenReturn(engineType);, +, +        Watch watch = mock(Watch.class);, +        when(watch.trigger()).thenReturn(trigger);, +        when(watch.condition()).thenReturn(InternalAlwaysCondition.INSTANCE);, +        ExecutableNoneInput noneInput = new ExecutableNoneInput(logger);, +        when(watch.input()).thenReturn(noneInput);, +, +        triggerService.add(watch);, +        assertThat(triggerService.count(), is(1L));, +, +        WatcherService service = new WatcherService(Settings.EMPTY, triggerService, mock(TriggeredWatchStore.class),, +            mock(ExecutionService.class), mock(WatchParser.class), mock(Client.class), executorService) {, +            @Override, +            void stopExecutor() {, +            }, +        };, +, +        service.pauseExecution("pausing");, +        assertThat(triggerService.count(), is(0L));, +        verify(triggerEngine).pauseExecution();, +    }, +]