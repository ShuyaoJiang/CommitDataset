[+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/110_field_collapsing.yml, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/110_field_collapsing.yml, +++ b/server/src/main/java/org/elasticsearch/search/collapse/CollapseBuilder.java, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/110_field_collapsing.yml, +++ b/server/src/main/java/org/elasticsearch/search/collapse/CollapseBuilder.java, +++ b/server/src/main/java/org/elasticsearch/search/query/TopDocsCollectorContext.java, +        private final boolean rescore;, +                                                  boolean trackMaxScore, boolean rescore) {, +            this.rescore = rescore;, +, +        @Override, +        boolean shouldRescore() {, +            return rescore;, +        }, +            if (searchContext.collapse() != null) {, +                boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores();, +                return new CollapsingTopDocsCollectorContext(searchContext.collapse(),, +                    searchContext.sort(), numDocs, trackScores, rescore);, +            }, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/110_field_collapsing.yml, +++ b/server/src/main/java/org/elasticsearch/search/collapse/CollapseBuilder.java, +++ b/server/src/main/java/org/elasticsearch/search/query/TopDocsCollectorContext.java, +        private final boolean rescore;, +                                                  boolean trackMaxScore, boolean rescore) {, +            this.rescore = rescore;, +, +        @Override, +        boolean shouldRescore() {, +            return rescore;, +        }, +            if (searchContext.collapse() != null) {, +                boolean trackScores = searchContext.sort() == null ? true : searchContext.trackScores();, +                return new CollapsingTopDocsCollectorContext(searchContext.collapse(),, +                    searchContext.sort(), numDocs, trackScores, rescore);, +            }, +++ b/server/src/test/java/org/elasticsearch/search/functionscore/QueryRescorerIT.java, +import org.elasticsearch.search.collapse.CollapseBuilder;, +import java.io.IOException;, +import java.util.Map;, +import java.util.stream.Collectors;, +import static org.hamcrest.Matchers.containsInAnyOrder;, +, +    public void testRescoreAfterCollapse() throws Exception {, +        assertAcked(prepareCreate("test"), +            .addMapping(, +                "type1",, +                jsonBuilder(), +                    .startObject(), +                    .startObject("properties"), +                    .startObject("group"), +                    .field("type", "keyword"), +                    .endObject(), +                    .endObject(), +                    .endObject()), +        );, +, +        ensureGreen("test");, +, +        indexDocument(1, "miss", "a", 1, 10);, +        indexDocument(2, "name", "a", 2, 20);, +        indexDocument(3, "name", "b", 2, 30);, +        // should be highest on rescore, but filtered out during collapse, +        indexDocument(4, "name", "b", 1, 40);, +, +        refresh("test");, +, +        SearchResponse searchResponse = client().prepareSearch("test"), +            .setTypes("type1"), +            .setQuery(staticScoreQuery("static_score")), +            .addRescorer(new QueryRescorerBuilder(staticScoreQuery("static_rescore"))), +            .setCollapse(new CollapseBuilder("group")), +            .get();, +, +        assertThat(searchResponse.getHits().totalHits, equalTo(3L));, +        assertThat(searchResponse.getHits().getHits().length, equalTo(2));, +, +        Map<String, Float> collapsedHits = Arrays, +            .stream(searchResponse.getHits().getHits()), +            .collect(Collectors.toMap(SearchHit::getId, SearchHit::getScore));, +, +        assertThat(collapsedHits.keySet(), containsInAnyOrder("2", "3"));, +        assertThat(collapsedHits.get("2"), equalTo(22F));, +        assertThat(collapsedHits.get("3"), equalTo(32F));, +    }, +, +    private QueryBuilder staticScoreQuery(String scoreField) {, +        return functionScoreQuery(termQuery("name", "name"), ScoreFunctionBuilders.fieldValueFactorFunction(scoreField)), +            .boostMode(CombineFunction.REPLACE);, +    }, +, +    private void indexDocument(int id, String name, String group, int score, int rescore) throws IOException {, +        XContentBuilder docBuilder =jsonBuilder(), +            .startObject(), +            .field("name", name), +            .field("group", group), +            .field("static_score", score), +            .field("static_rescore", rescore), +            .endObject();, +, +        client().prepareIndex("test", "type1", Integer.toString(id)).setSource(docBuilder).get();]