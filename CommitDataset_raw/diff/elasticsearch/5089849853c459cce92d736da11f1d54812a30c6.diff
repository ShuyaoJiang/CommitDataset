[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +        Context context = new Context(state, IndicesOptions.lenientExpandOpen());, +            this.state = state;, +            this.options = options;, +            startTime = System.currentTimeMillis();, +                    if (aliasOrIndex.isAlias() == false) {, +                        AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex;, +                        if (excludeState != null && index.getIndex().getState() == excludeState) {, +                            continue;, +, +                        result.add(entry.getKey());, +                        result.remove(entry.getKey());, +                    }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +        Context context = new Context(state, IndicesOptions.lenientExpandOpen());, +            this.state = state;, +            this.options = options;, +            startTime = System.currentTimeMillis();, +                    if (aliasOrIndex.isAlias() == false) {, +                        AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex;, +                        if (excludeState != null && index.getIndex().getState() == excludeState) {, +                            continue;, +, +                        result.add(entry.getKey());, +                        result.remove(entry.getKey());, +                    }, +++ b/core/src/main/java/org/elasticsearch/index/analysis/NGramTokenizerFactory.java, +import org.apache.lucene.analysis.ngram.Lucene43NGramTokenizer;, +import org.apache.lucene.util.Version;, +    private org.elasticsearch.Version esVersion;, +        this.esVersion = indexSettings.getIndexVersionCreated();, +    @SuppressWarnings("deprecation"), +        if (version.onOrAfter(Version.LUCENE_4_3) && esVersion.onOrAfter(org.elasticsearch.Version.V_0_90_2)) {, +            /*, +             * We added this in 0.90.2 but 0.90.1 used LUCENE_43 already so we can not rely on the lucene version., +             * Yet if somebody uses 0.90.2 or higher with a prev. lucene version we should also use the deprecated version., +             */, +            final Version version = this.version == Version.LUCENE_4_3 ? Version.LUCENE_4_4 : this.version; // always use 4.4 or higher, +        } else {, +            return new Lucene43NGramTokenizer(minGram, maxGram);, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +        Context context = new Context(state, IndicesOptions.lenientExpandOpen());, +            this.state = state;, +            this.options = options;, +            startTime = System.currentTimeMillis();, +                    if (aliasOrIndex.isAlias() == false) {, +                        AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex;, +                        if (excludeState != null && index.getIndex().getState() == excludeState) {, +                            continue;, +, +                        result.add(entry.getKey());, +                        result.remove(entry.getKey());, +                    }, +++ b/core/src/main/java/org/elasticsearch/index/analysis/NGramTokenizerFactory.java, +import org.apache.lucene.analysis.ngram.Lucene43NGramTokenizer;, +import org.apache.lucene.util.Version;, +    private org.elasticsearch.Version esVersion;, +        this.esVersion = indexSettings.getIndexVersionCreated();, +    @SuppressWarnings("deprecation"), +        if (version.onOrAfter(Version.LUCENE_4_3) && esVersion.onOrAfter(org.elasticsearch.Version.V_0_90_2)) {, +            /*, +             * We added this in 0.90.2 but 0.90.1 used LUCENE_43 already so we can not rely on the lucene version., +             * Yet if somebody uses 0.90.2 or higher with a prev. lucene version we should also use the deprecated version., +             */, +            final Version version = this.version == Version.LUCENE_4_3 ? Version.LUCENE_4_4 : this.version; // always use 4.4 or higher, +        } else {, +            return new Lucene43NGramTokenizer(minGram, maxGram);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +        return new TemplateQueryBuilder(template, vars);, +        return new TemplateQueryBuilder(template, templateType, vars);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +        Context context = new Context(state, IndicesOptions.lenientExpandOpen());, +            this.state = state;, +            this.options = options;, +            startTime = System.currentTimeMillis();, +                    if (aliasOrIndex.isAlias() == false) {, +                        AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex;, +                        if (excludeState != null && index.getIndex().getState() == excludeState) {, +                            continue;, +, +                        result.add(entry.getKey());, +                        result.remove(entry.getKey());, +                    }, +++ b/core/src/main/java/org/elasticsearch/index/analysis/NGramTokenizerFactory.java, +import org.apache.lucene.analysis.ngram.Lucene43NGramTokenizer;, +import org.apache.lucene.util.Version;, +    private org.elasticsearch.Version esVersion;, +        this.esVersion = indexSettings.getIndexVersionCreated();, +    @SuppressWarnings("deprecation"), +        if (version.onOrAfter(Version.LUCENE_4_3) && esVersion.onOrAfter(org.elasticsearch.Version.V_0_90_2)) {, +            /*, +             * We added this in 0.90.2 but 0.90.1 used LUCENE_43 already so we can not rely on the lucene version., +             * Yet if somebody uses 0.90.2 or higher with a prev. lucene version we should also use the deprecated version., +             */, +            final Version version = this.version == Version.LUCENE_4_3 ? Version.LUCENE_4_4 : this.version; // always use 4.4 or higher, +        } else {, +            return new Lucene43NGramTokenizer(minGram, maxGram);, +        }]