[+++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +    private MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery = null;, +, +, +    public MultiMatchQueryBuilder zeroTermsQuery(MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery) {, +        this.zeroTermsQuery = zeroTermsQuery;, +        return this;, +    }, +, +        if (zeroTermsQuery != null) {, +            builder.field("zero_terms_query", zeroTermsQuery.toString());, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +    private MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery = null;, +, +, +    public MultiMatchQueryBuilder zeroTermsQuery(MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery) {, +        this.zeroTermsQuery = zeroTermsQuery;, +        return this;, +    }, +, +        if (zeroTermsQuery != null) {, +            builder.field("zero_terms_query", zeroTermsQuery.toString());, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryParser.java, +                } else if ("zero_terms_query".equals(currentFieldName)) {, +                    String zeroTermsDocs = parser.text();, +                    if ("none".equalsIgnoreCase(zeroTermsDocs)) {, +                        multiMatchQuery.setZeroTermsQuery(MatchQuery.ZeroTermsQuery.NONE);, +                    } else if ("all".equalsIgnoreCase(zeroTermsDocs)) {, +                        multiMatchQuery.setZeroTermsQuery(MatchQuery.ZeroTermsQuery.ALL);, +                    } else {, +                        throw new QueryParsingException(parseContext.index(), "Unsupported zero_terms_docs value [" + zeroTermsDocs + "]");, +                    }, +++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java, +    private MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery = null;, +, +, +    public MultiMatchQueryBuilder zeroTermsQuery(MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery) {, +        this.zeroTermsQuery = zeroTermsQuery;, +        return this;, +    }, +, +        if (zeroTermsQuery != null) {, +            builder.field("zero_terms_query", zeroTermsQuery.toString());, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryParser.java, +                } else if ("zero_terms_query".equals(currentFieldName)) {, +                    String zeroTermsDocs = parser.text();, +                    if ("none".equalsIgnoreCase(zeroTermsDocs)) {, +                        multiMatchQuery.setZeroTermsQuery(MatchQuery.ZeroTermsQuery.NONE);, +                    } else if ("all".equalsIgnoreCase(zeroTermsDocs)) {, +                        multiMatchQuery.setZeroTermsQuery(MatchQuery.ZeroTermsQuery.ALL);, +                    } else {, +                        throw new QueryParsingException(parseContext.index(), "Unsupported zero_terms_docs value [" + zeroTermsDocs + "]");, +                    }, +++ b/src/test/java/org/elasticsearch/test/integration/search/query/SimpleQueryTests.java, +    public void testMultiMatchQueryZeroTermsQuery() {, +        try {, +            client.admin().indices().prepareDelete("test").execute().actionGet();, +        } catch (Exception e) {, +            // ignore, +        }, +, +        client.admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 1)).execute().actionGet();, +        client.prepareIndex("test", "type1", "1").setSource("field1", "value1", "field2", "value2").execute().actionGet();, +        client.prepareIndex("test", "type1", "2").setSource("field1", "value3", "field2", "value4").execute().actionGet();, +        client.admin().indices().prepareRefresh("test").execute().actionGet();, +, +        BoolQueryBuilder boolQuery = boolQuery(), +                .must(multiMatchQuery("a", "field1", "field2").zeroTermsQuery(MatchQueryBuilder.ZeroTermsQuery.NONE)), +                .must(multiMatchQuery("value1", "field1", "field2").zeroTermsQuery(MatchQueryBuilder.ZeroTermsQuery.NONE)); // Fields are ORed together, +        SearchResponse searchResponse = client.prepareSearch(), +                .setQuery(boolQuery), +                .execute().actionGet();, +        assertThat(searchResponse.getHits().totalHits(), equalTo(0l));, +, +        boolQuery = boolQuery(), +                .must(multiMatchQuery("a", "field1", "field2").zeroTermsQuery(MatchQueryBuilder.ZeroTermsQuery.ALL)), +                .must(multiMatchQuery("value4", "field1", "field2").zeroTermsQuery(MatchQueryBuilder.ZeroTermsQuery.ALL));, +        searchResponse = client.prepareSearch(), +                .setQuery(boolQuery), +                .execute().actionGet();, +        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));, +, +        boolQuery = boolQuery(), +                .must(multiMatchQuery("a", "field1").zeroTermsQuery(MatchQueryBuilder.ZeroTermsQuery.ALL));, +        searchResponse = client.prepareSearch(), +                .setQuery(boolQuery), +                .execute().actionGet();, +        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));, +    }, +, +    @Test]