[+++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * @param translogRecoveryRunner the translog recovery runner, +    public abstract Engine recoverFromTranslog(TranslogRecoveryRunner translogRecoveryRunner, long recoverUpToSeqNo) throws IOException;, +, +    @FunctionalInterface, +    public interface TranslogRecoveryRunner {, +        int run(Engine engine, Translog.Snapshot snapshot) throws IOException;, +    }, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * @param translogRecoveryRunner the translog recovery runner, +    public abstract Engine recoverFromTranslog(TranslogRecoveryRunner translogRecoveryRunner, long recoverUpToSeqNo) throws IOException;, +, +    @FunctionalInterface, +    public interface TranslogRecoveryRunner {, +        int run(Engine engine, Translog.Snapshot snapshot) throws IOException;, +    }, +++ b/server/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +                        CircuitBreakerService circuitBreakerService, LongSupplier globalCheckpointSupplier,, +                        LongSupplier primaryTermSupplier, TombstoneDocSupplier tombstoneDocSupplier) {, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * @param translogRecoveryRunner the translog recovery runner, +    public abstract Engine recoverFromTranslog(TranslogRecoveryRunner translogRecoveryRunner, long recoverUpToSeqNo) throws IOException;, +, +    @FunctionalInterface, +    public interface TranslogRecoveryRunner {, +        int run(Engine engine, Translog.Snapshot snapshot) throws IOException;, +    }, +++ b/server/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +                        CircuitBreakerService circuitBreakerService, LongSupplier globalCheckpointSupplier,, +                        LongSupplier primaryTermSupplier, TombstoneDocSupplier tombstoneDocSupplier) {, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public InternalEngine recoverFromTranslog(TranslogRecoveryRunner translogRecoveryRunner, long recoverUpToSeqNo) throws IOException {, +                recoverFromTranslogInternal(translogRecoveryRunner, recoverUpToSeqNo);, +    private void recoverFromTranslogInternal(TranslogRecoveryRunner translogRecoveryRunner, long recoverUpToSeqNo) throws IOException {, +            opsRecovered = translogRecoveryRunner.run(this, snapshot);, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * @param translogRecoveryRunner the translog recovery runner, +    public abstract Engine recoverFromTranslog(TranslogRecoveryRunner translogRecoveryRunner, long recoverUpToSeqNo) throws IOException;, +, +    @FunctionalInterface, +    public interface TranslogRecoveryRunner {, +        int run(Engine engine, Translog.Snapshot snapshot) throws IOException;, +    }, +++ b/server/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +                        CircuitBreakerService circuitBreakerService, LongSupplier globalCheckpointSupplier,, +                        LongSupplier primaryTermSupplier, TombstoneDocSupplier tombstoneDocSupplier) {, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public InternalEngine recoverFromTranslog(TranslogRecoveryRunner translogRecoveryRunner, long recoverUpToSeqNo) throws IOException {, +                recoverFromTranslogInternal(translogRecoveryRunner, recoverUpToSeqNo);, +    private void recoverFromTranslogInternal(TranslogRecoveryRunner translogRecoveryRunner, long recoverUpToSeqNo) throws IOException {, +            opsRecovered = translogRecoveryRunner.run(this, snapshot);, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        getEngine().recoverFromTranslog(this::runTranslogRecovery, Long.MAX_VALUE);, +            indexSort, circuitBreakerService, replicationTracker, () -> operationPrimaryTerm, tombstoneDocSupplier());, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +     * @param translogRecoveryRunner the translog recovery runner, +    public abstract Engine recoverFromTranslog(TranslogRecoveryRunner translogRecoveryRunner, long recoverUpToSeqNo) throws IOException;, +, +    @FunctionalInterface, +    public interface TranslogRecoveryRunner {, +        int run(Engine engine, Translog.Snapshot snapshot) throws IOException;, +    }, +++ b/server/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +                        CircuitBreakerService circuitBreakerService, LongSupplier globalCheckpointSupplier,, +                        LongSupplier primaryTermSupplier, TombstoneDocSupplier tombstoneDocSupplier) {, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    public InternalEngine recoverFromTranslog(TranslogRecoveryRunner translogRecoveryRunner, long recoverUpToSeqNo) throws IOException {, +                recoverFromTranslogInternal(translogRecoveryRunner, recoverUpToSeqNo);, +    private void recoverFromTranslogInternal(TranslogRecoveryRunner translogRecoveryRunner, long recoverUpToSeqNo) throws IOException {, +            opsRecovered = translogRecoveryRunner.run(this, snapshot);, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        getEngine().recoverFromTranslog(this::runTranslogRecovery, Long.MAX_VALUE);, +            indexSort, circuitBreakerService, replicationTracker, () -> operationPrimaryTerm, tombstoneDocSupplier());, +++ b/server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +        engine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +        engine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +            recoveringEngine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +            recoveringEngine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +            recoveringEngine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +                engine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +                engine.recoverFromTranslog(translogHandler, upToSeqNo);, +        engine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +        engine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +            recoveringEngine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +                    expectThrows(IllegalStateException.class, () -> engine.recoverFromTranslog(translogHandler, Long.MAX_VALUE));, +                        engine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +                    engine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +                        engine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +                engine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +                engine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +        translogHandler = createTranslogHandler(engine.engineConfig.getIndexSettings());, +        translogHandler.mappingUpdate = dynamicUpdate();, +        engine.recoverFromTranslog(translogHandler, Long.MAX_VALUE);, +        assertEquals(numDocs, translogHandler.appliedOperations());, +        if (translogHandler.mappingUpdate != null) {, +            assertEquals(1, translogHandler.getRecoveredTypes().size());, +            assertTrue(translogHandler.getRecoveredTypes().containsKey("test"));, +            assertEquals(0, translogHandler.getRecoveredTypes().size());, +        translogHandler = createTranslogHandler(engine.engineConfig.getIndexSettings());, +        assertEquals(0, translogHandler.appliedOperations());]