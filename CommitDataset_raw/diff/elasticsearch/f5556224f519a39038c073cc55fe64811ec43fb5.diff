[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String distribution = 'zip', +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String distribution = 'zip', +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.InvalidUserDataException, +        configureDistributionDependency(project, config.distribution), +        File pidFile = pidFile(baseDir), +        File home = homeDir(baseDir, config.distribution), +        List setupDeps = [] // need to copy the deps, since start will later be added, which would create a circular task dep!, +        setupDeps.addAll(task.dependsOn), +        Task setup = project.tasks.create(name: "${task.name}#clean", type: Delete, dependsOn: setupDeps) {, +            delete baseDir, +        setup = configureExtractTask(project, "${task.name}#extract", config.distribution, baseDir, setup), +            File configFile = new File(home, 'config/elasticsearch.yml'), +            Map esConfig = [, +                'cluster.name': clusterName,, +                'http.port': config.httpPort,, +                'transport.tcp.port': config.transportPort,, +                'pidfile': pidFile,, +                // TODO: make this work for multi node!, +                'discovery.zen.ping.unicast.hosts': "localhost:${config.transportPort}",, +                'path.repo': "${home}/repo",, +                'path.shared_data': "${home}/../",, +                // Define a node attribute so we can test that it exists, +                'node.testattr': 'test',, +                'repositories.url.allowed_urls': 'http://snapshot.test*', +            ], +            configFile.setText(esConfig.collect { key, value -> "${key}: ${value}" }.join('\n'), 'UTF-8'), +        List esArgs = config.systemProperties.collect {key, value -> "-D${key}=${value}"}, +    static Task configureExtractTask(Project project, String name, String distro, File baseDir, Task setup) {, +        List extractDependsOn = [project.configurations.elasticsearchDistro, setup], +        Task extract, +        switch (distro) {, +            case 'zip':, +                extract = project.tasks.create(name: name, type: Copy, dependsOn: extractDependsOn) {, +                    from { project.zipTree(project.configurations.elasticsearchDistro.singleFile) }, +                    into baseDir, +                }, +                break;, +            case 'tar':, +                extract = project.tasks.create(name: name, type: Copy, dependsOn: extractDependsOn) {, +                    from { project.tarTree(project.resources.gzip(project.configurations.elasticsearchDistro.singleFile)) }, +                    into baseDir, +                }, +                break;, +            default:, +                throw new InvalidUserDataException("Unknown distribution: ${distro}"), +        }, +        return extract, +    }, +, +    static File homeDir(File baseDir, String distro) {, +        String path, +        switch (distro) {, +            case 'zip':, +            case 'tar':, +                path = "elasticsearch-${ElasticsearchProperties.version}", +                break;, +            default:, +                throw new InvalidUserDataException("Unknown distribution: ${distro}"), +        }, +        return new File(baseDir, path), +    }, +, +        Task stop = project.tasks.create(name: "${task.name}#stop", type: Exec) {, +    static void configureDistributionDependency(Project project, String distro) {, +            elasticsearchDistro, +            elasticsearchDistro "org.elasticsearch.distribution.${distro}:elasticsearch:${elasticsearchVersion}@${distro}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String distribution = 'zip', +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.gradle.api.InvalidUserDataException, +        configureDistributionDependency(project, config.distribution), +        File pidFile = pidFile(baseDir), +        File home = homeDir(baseDir, config.distribution), +        List setupDeps = [] // need to copy the deps, since start will later be added, which would create a circular task dep!, +        setupDeps.addAll(task.dependsOn), +        Task setup = project.tasks.create(name: "${task.name}#clean", type: Delete, dependsOn: setupDeps) {, +            delete baseDir, +        setup = configureExtractTask(project, "${task.name}#extract", config.distribution, baseDir, setup), +            File configFile = new File(home, 'config/elasticsearch.yml'), +            Map esConfig = [, +                'cluster.name': clusterName,, +                'http.port': config.httpPort,, +                'transport.tcp.port': config.transportPort,, +                'pidfile': pidFile,, +                // TODO: make this work for multi node!, +                'discovery.zen.ping.unicast.hosts': "localhost:${config.transportPort}",, +                'path.repo': "${home}/repo",, +                'path.shared_data': "${home}/../",, +                // Define a node attribute so we can test that it exists, +                'node.testattr': 'test',, +                'repositories.url.allowed_urls': 'http://snapshot.test*']