[+++ b/benchmarks/build.gradle, +// enable the JMH's BenchmarkProcessor to generate the final benchmark classes, +// needs to be added separately otherwise Gradle will quote it and javac will fail, +compileJava.options.compilerArgs.addAll(["-processor", "org.openjdk.jmh.generators.BenchmarkProcessor"]), +++ b/benchmarks/build.gradle, +// enable the JMH's BenchmarkProcessor to generate the final benchmark classes, +// needs to be added separately otherwise Gradle will quote it and javac will fail, +compileJava.options.compilerArgs.addAll(["-processor", "org.openjdk.jmh.generators.BenchmarkProcessor"]), +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import java.util.Collection;, +import java.util.Collections;, +        return createAllocationService(settings, new ClusterSettings(Settings.EMPTY, ClusterSettings, +        Collection<AllocationDecider> deciders =, +            ClusterModule.createAllocationDeciders(settings, clusterSettings, Collections.emptyList());, +        return new AllocationDeciders(settings, deciders);, +++ b/benchmarks/build.gradle, +// enable the JMH's BenchmarkProcessor to generate the final benchmark classes, +// needs to be added separately otherwise Gradle will quote it and javac will fail, +compileJava.options.compilerArgs.addAll(["-processor", "org.openjdk.jmh.generators.BenchmarkProcessor"]), +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import java.util.Collection;, +import java.util.Collections;, +        return createAllocationService(settings, new ClusterSettings(Settings.EMPTY, ClusterSettings, +        Collection<AllocationDecider> deciders =, +            ClusterModule.createAllocationDeciders(settings, clusterSettings, Collections.emptyList());, +        return new AllocationDeciders(settings, deciders);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.compilerArgs << '-Werror' << '-Xlint:all,-path,-serial,-options,-deprecation' << '-Xdoclint:all' << '-Xdoclint:-missing', +, +                // either disable annotation processor completely (default) or allow to enable them if an annotation processor is explicitly defined, +                if (options.compilerArgs.contains("-processor") == false) {, +                    options.compilerArgs << '-proc:none', +                }, +, +++ b/benchmarks/build.gradle, +// enable the JMH's BenchmarkProcessor to generate the final benchmark classes, +// needs to be added separately otherwise Gradle will quote it and javac will fail, +compileJava.options.compilerArgs.addAll(["-processor", "org.openjdk.jmh.generators.BenchmarkProcessor"]), +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import java.util.Collection;, +import java.util.Collections;, +        return createAllocationService(settings, new ClusterSettings(Settings.EMPTY, ClusterSettings, +        Collection<AllocationDecider> deciders =, +            ClusterModule.createAllocationDeciders(settings, clusterSettings, Collections.emptyList());, +        return new AllocationDeciders(settings, deciders);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.compilerArgs << '-Werror' << '-Xlint:all,-path,-serial,-options,-deprecation' << '-Xdoclint:all' << '-Xdoclint:-missing', +, +                // either disable annotation processor completely (default) or allow to enable them if an annotation processor is explicitly defined, +                if (options.compilerArgs.contains("-processor") == false) {, +                    options.compilerArgs << '-proc:none', +                }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = "-Xms" + System.getProperty('tests.heap.size', '512m') +, +            " " + "-Xmx" + System.getProperty('tests.heap.size', '512m') +, +            " " + System.getProperty('tests.jvm.argline', ''), +++ b/benchmarks/build.gradle, +// enable the JMH's BenchmarkProcessor to generate the final benchmark classes, +// needs to be added separately otherwise Gradle will quote it and javac will fail, +compileJava.options.compilerArgs.addAll(["-processor", "org.openjdk.jmh.generators.BenchmarkProcessor"]), +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import java.util.Collection;, +import java.util.Collections;, +        return createAllocationService(settings, new ClusterSettings(Settings.EMPTY, ClusterSettings, +        Collection<AllocationDecider> deciders =, +            ClusterModule.createAllocationDeciders(settings, clusterSettings, Collections.emptyList());, +        return new AllocationDeciders(settings, deciders);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.compilerArgs << '-Werror' << '-Xlint:all,-path,-serial,-options,-deprecation' << '-Xdoclint:all' << '-Xdoclint:-missing', +, +                // either disable annotation processor completely (default) or allow to enable them if an annotation processor is explicitly defined, +                if (options.compilerArgs.contains("-processor") == false) {, +                    options.compilerArgs << '-proc:none', +                }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = "-Xms" + System.getProperty('tests.heap.size', '512m') +, +            " " + "-Xmx" + System.getProperty('tests.heap.size', '512m') +, +            " " + System.getProperty('tests.jvm.argline', ''), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/benchmarks/build.gradle, +// enable the JMH's BenchmarkProcessor to generate the final benchmark classes, +// needs to be added separately otherwise Gradle will quote it and javac will fail, +compileJava.options.compilerArgs.addAll(["-processor", "org.openjdk.jmh.generators.BenchmarkProcessor"]), +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import java.util.Collection;, +import java.util.Collections;, +        return createAllocationService(settings, new ClusterSettings(Settings.EMPTY, ClusterSettings, +        Collection<AllocationDecider> deciders =, +            ClusterModule.createAllocationDeciders(settings, clusterSettings, Collections.emptyList());, +        return new AllocationDeciders(settings, deciders);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.compilerArgs << '-Werror' << '-Xlint:all,-path,-serial,-options,-deprecation' << '-Xdoclint:all' << '-Xdoclint:-missing', +, +                // either disable annotation processor completely (default) or allow to enable them if an annotation processor is explicitly defined, +                if (options.compilerArgs.contains("-processor") == false) {, +                    options.compilerArgs << '-proc:none', +                }, +]