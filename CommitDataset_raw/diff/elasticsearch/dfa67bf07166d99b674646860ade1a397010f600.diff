[+++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import com.google.common.collect.ImmutableMap;, +import com.google.common.collect.ImmutableSet;, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.IndexTemplateMetaData;, +import org.elasticsearch.cluster.metadata.MappingMetaData;, +import org.elasticsearch.cluster.routing.*;, +import org.elasticsearch.common.collect.MapBuilder;, +import org.elasticsearch.common.compress.CompressedString;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.settings.SettingsFilter;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.shard.ShardId;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +, +import static org.elasticsearch.common.collect.MapBuilder.newMapBuilder;, +public class ClusterState implements ToXContent {, +, +    public interface Custom {, +, +        interface Factory<T extends Custom> {, +, +            String type();, +, +            T readFrom(StreamInput in) throws IOException;, +, +            void writeTo(T customState, StreamOutput out) throws IOException;, +, +            void toXContent(T customState, XContentBuilder builder, ToXContent.Params params);, +        }, +    }, +, +    public static Map<String, Custom.Factory> customFactories = new HashMap<String, Custom.Factory>();, +, +    /**, +     * Register a custom index meta data factory. Make sure to call it from a static block., +     */, +    public static void registerFactory(String type, Custom.Factory factory) {, +        customFactories.put(type, factory);, +    }, +, +    @Nullable, +    public static <T extends Custom> Custom.Factory<T> lookupFactory(String type) {, +        return customFactories.get(type);, +    }, +, +    public static <T extends Custom> Custom.Factory<T> lookupFactorySafe(String type) throws ElasticSearchIllegalArgumentException {, +        Custom.Factory<T> factory = customFactories.get(type);, +        if (factory == null) {, +            throw new ElasticSearchIllegalArgumentException("No custom state factory registered for type [" + type + "]");, +        }, +        return factory;, +    }, +, +    private final ImmutableMap<String, Custom> customs;, +, +    private SettingsFilter settingsFilter;, +, +        this(version, state.metaData(), state.routingTable(), state.nodes(), state.blocks(), state.allocationExplanation(), state.customs());, +    public ClusterState(long version, MetaData metaData, RoutingTable routingTable, DiscoveryNodes nodes, ClusterBlocks blocks, AllocationExplanation allocationExplanation, ImmutableMap<String, Custom> customs) {, +        this.customs = customs;, +    public ImmutableMap<String, Custom> customs() {, +        return this.customs;, +    }, +, +    public ImmutableMap<String, Custom> getCustoms() {, +        return this.customs;, +    }, +, +    public ClusterState settingsFilter(SettingsFilter settingsFilter) {, +        this.settingsFilter = settingsFilter;, +        return this;, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        if (!params.paramAsBoolean("filter_nodes", false)) {, +            builder.field("master_node", nodes().masterNodeId());, +        }, +, +        // blocks, +        if (!params.paramAsBoolean("filter_blocks", false)) {, +            builder.startObject("blocks");, +, +            if (!blocks().global().isEmpty()) {, +                builder.startObject("global");, +                for (ClusterBlock block : blocks().global()) {, +                    block.toXContent(builder, params);, +                }, +                builder.endObject();, +            }, +]