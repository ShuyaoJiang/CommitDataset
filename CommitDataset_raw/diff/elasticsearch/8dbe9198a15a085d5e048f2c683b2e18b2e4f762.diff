[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTables.java, +import org.elasticsearch.xpack.sql.analysis.index.IndexResolver.IndexInfo;, +import java.util.Comparator;, +, +                values.sort(Comparator.comparing(l -> l.get(3).toString()));, +                 // sort by type (which might be legacy), then by name, +                 .sorted(Comparator.<IndexInfo, String> comparing(i -> legacyName(i.type())), +                           .thenComparing(Comparator.comparing(i -> i.name()))), +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTables.java, +import org.elasticsearch.xpack.sql.analysis.index.IndexResolver.IndexInfo;, +import java.util.Comparator;, +, +                values.sort(Comparator.comparing(l -> l.get(3).toString()));, +                 // sort by type (which might be legacy), then by name, +                 .sorted(Comparator.<IndexInfo, String> comparing(i -> legacyName(i.type())), +                           .thenComparing(Comparator.comparing(i -> i.name()))), +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTablesTests.java, +import java.util.Comparator;, +            assertEquals("alias", r.column(2));, +            assertTrue(r.advanceRow());, +            assertEquals("alias", r.column(2));, +            assertTrue(r.advanceRow());, +            assertEquals("alias", r.column(2));, +            assertTrue(r.advanceRow());, +        }, alias, index);, +            assertEquals("alias", r.column(2));, +            assertTrue(r.advanceRow());, +            assertEquals("alias", r.column(2));, +            assertTrue(r.advanceRow());, +            assertEquals("alias", r.column(2));, +            assertEquals("ALIAS", r.column(3));, +            assertTrue(r.advanceRow());, +            Iterator<IndexType> it = IndexType.VALID.stream().sorted(Comparator.comparing(IndexType::toSql)).iterator();, +            Iterator<IndexType> it = IndexType.VALID.stream().sorted(Comparator.comparing(IndexType::toSql)).iterator();]