[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        esConfig['node.max_local_storage_nodes'] = node.config.numNodes, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        esConfig['node.max_local_storage_nodes'] = node.config.numNodes, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilter.name);, +                        if (tokenFilterFactories[i] == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactory = analysisService.tokenizer(tokenizer.name);, +                if (tokenizerFactory == null) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        esConfig['node.max_local_storage_nodes'] = node.config.numNodes, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilter.name);, +                        if (tokenFilterFactories[i] == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactory = analysisService.tokenizer(tokenizer.name);, +                if (tokenizerFactory == null) {, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStatsRequest.java, +                            parseIndexConstraints(indexConstraints, parser);, +    private static void parseIndexConstraints(List<IndexConstraint> indexConstraints,, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        esConfig['node.max_local_storage_nodes'] = node.config.numNodes, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilter.name);, +                        if (tokenFilterFactories[i] == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactory = analysisService.tokenizer(tokenizer.name);, +                if (tokenizerFactory == null) {, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStatsRequest.java, +                            parseIndexConstraints(indexConstraints, parser);, +    private static void parseIndexConstraints(List<IndexConstraint> indexConstraints,, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchUncaughtExceptionHandler.java, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +        AccessController.doPrivileged(new PrivilegedAction<Void>() {, +            @SuppressForbidden(reason = "halt"), +            @Override, +            public Void run() {, +                return null;, +            }, +        });, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        esConfig['node.max_local_storage_nodes'] = node.config.numNodes, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilter.name);, +                        if (tokenFilterFactories[i] == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(tokenizer.name);, +                tokenizerFactory = analysisService.tokenizer(tokenizer.name);, +                if (tokenizerFactory == null) {, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStatsRequest.java, +                            parseIndexConstraints(indexConstraints, parser);, +    private static void parseIndexConstraints(List<IndexConstraint> indexConstraints,, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchUncaughtExceptionHandler.java, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +        AccessController.doPrivileged(new PrivilegedAction<Void>() {, +            @SuppressForbidden(reason = "halt"), +            @Override, +            public Void run() {, +                return null;, +            }, +        });, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/ThreadContext.java, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +        return () -> threadLocal.set(context);, +    @FunctionalInterface, +    private static final class ThreadContextStruct {, +    private class ContextPreservingRunnable implements Runnable {, +        private ContextPreservingRunnable(Runnable in) {, +    private class ContextPreservingAbstractRunnable extends AbstractRunnable {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        esConfig['node.max_local_storage_nodes'] = node.config.numNodes, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilter.name);, +                        charFilterFactories[i] = analysisService.charFilter(charFilter.name);, +                        if (charFilterFactories[i] == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilter.name);, +]