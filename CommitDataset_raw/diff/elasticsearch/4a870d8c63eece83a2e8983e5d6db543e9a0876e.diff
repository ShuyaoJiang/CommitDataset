[+++ /dev/null, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/transport/TcpTransportTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.transport;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.compress.CompressorFactory;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.BigArrays;, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.test.VersionUtils;, +import org.elasticsearch.threadpool.TestThreadPool;, +import org.elasticsearch.threadpool.ThreadPool;, +, +import java.io.IOException;, +import java.net.InetSocketAddress;, +import java.util.List;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicReference;, +import java.util.function.Consumer;, +, +import static org.hamcrest.Matchers.equalTo;, +, +/** Unit tests for TCPTransport */, +public class TcpTransportTests extends ESTestCase {, +, +    /** Test ipv4 host with a default port works */, +    public void testParseV4DefaultPort() throws Exception {, +        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234", Integer.MAX_VALUE);, +        assertEquals(1, addresses.length);, +, +        assertEquals("127.0.0.1", addresses[0].getAddress());, +        assertEquals(1234, addresses[0].getPort());, +    }, +, +    /** Test ipv4 host with a default port range works */, +    public void testParseV4DefaultRange() throws Exception {, +        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1", "1234-1235", Integer.MAX_VALUE);, +        assertEquals(2, addresses.length);, +, +        assertEquals("127.0.0.1", addresses[0].getAddress());, +        assertEquals(1234, addresses[0].getPort());, +, +        assertEquals("127.0.0.1", addresses[1].getAddress());, +        assertEquals(1235, addresses[1].getPort());, +    }, +, +    /** Test ipv4 host with port works */, +    public void testParseV4WithPort() throws Exception {, +        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345", "1234", Integer.MAX_VALUE);, +        assertEquals(1, addresses.length);, +, +        assertEquals("127.0.0.1", addresses[0].getAddress());, +        assertEquals(2345, addresses[0].getPort());, +    }, +, +    /** Test ipv4 host with port range works */, +    public void testParseV4WithPortRange() throws Exception {, +        TransportAddress[] addresses = TcpTransport.parse("127.0.0.1:2345-2346", "1234", Integer.MAX_VALUE);, +        assertEquals(2, addresses.length);, +, +        assertEquals("127.0.0.1", addresses[0].getAddress());, +        assertEquals(2345, addresses[0].getPort());, +, +        assertEquals("127.0.0.1", addresses[1].getAddress());, +        assertEquals(2346, addresses[1].getPort());, +    }, +, +    /** Test unbracketed ipv6 hosts in configuration fail. Leave no ambiguity */, +    public void testParseV6UnBracketed() throws Exception {, +        try {, +            TcpTransport.parse("::1", "1234", Integer.MAX_VALUE);, +            fail("should have gotten exception");]