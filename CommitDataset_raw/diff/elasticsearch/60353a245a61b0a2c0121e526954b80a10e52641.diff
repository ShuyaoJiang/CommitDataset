[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    DiscoveryModule.DISCOVERY_HOSTS_PROVIDER_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    DiscoveryModule.DISCOVERY_HOSTS_PROVIDER_SETTING,, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.plugins.DiscoveryPlugin;, +import org.elasticsearch.transport.TransportService;, +import java.util.Objects;, +import java.util.function.Supplier;, +        new Setting<>("discovery.type", "zen", Function.identity(), Property.NodeScope);, +    public static final Setting<String> DISCOVERY_HOSTS_PROVIDER_SETTING =, +        new Setting<>("discovery.zen.hosts_provider", DISCOVERY_TYPE_SETTING, Function.identity(), Property.NodeScope);, +    private final Map<String, Supplier<UnicastHostsProvider>> unicastHostProviders;, +    public DiscoveryModule(Settings settings, TransportService transportService, NetworkService networkService,, +                           List<DiscoveryPlugin> plugins) {, +        Map<String, Supplier<UnicastHostsProvider>> hostProviders = new HashMap<>();, +        hostProviders.put("zen", () -> Collections::emptyList);, +        for (DiscoveryPlugin plugin : plugins) {, +            plugin.getZenHostsProviders(transportService, networkService).entrySet().forEach(entry -> {, +                if (hostProviders.put(entry.getKey(), entry.getValue()) != null) {, +                    throw new IllegalArgumentException("Cannot specify zen hosts provider [" + entry.getKey() + "] twice");, +            });, +        }, +        unicastHostProviders = Collections.unmodifiableMap(hostProviders);, +            String hostsProviderName = DISCOVERY_HOSTS_PROVIDER_SETTING.get(settings);, +            Supplier<UnicastHostsProvider> hostsProviderSupplier = unicastHostProviders.get(hostsProviderName);, +            if (hostsProviderSupplier == null) {, +                throw new IllegalArgumentException("Unknown zen hosts provider [" + hostsProviderName + "]");, +            UnicastHostsProvider hostsProvider = Objects.requireNonNull(hostsProviderSupplier.get());, +            bind(UnicastHostsProvider.class).toInstance(hostsProvider);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    DiscoveryModule.DISCOVERY_HOSTS_PROVIDER_SETTING,, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.plugins.DiscoveryPlugin;, +import org.elasticsearch.transport.TransportService;, +import java.util.Objects;, +import java.util.function.Supplier;, +        new Setting<>("discovery.type", "zen", Function.identity(), Property.NodeScope);, +    public static final Setting<String> DISCOVERY_HOSTS_PROVIDER_SETTING =, +        new Setting<>("discovery.zen.hosts_provider", DISCOVERY_TYPE_SETTING, Function.identity(), Property.NodeScope);, +    private final Map<String, Supplier<UnicastHostsProvider>> unicastHostProviders;, +    public DiscoveryModule(Settings settings, TransportService transportService, NetworkService networkService,, +                           List<DiscoveryPlugin> plugins) {, +        Map<String, Supplier<UnicastHostsProvider>> hostProviders = new HashMap<>();, +        hostProviders.put("zen", () -> Collections::emptyList);, +        for (DiscoveryPlugin plugin : plugins) {, +            plugin.getZenHostsProviders(transportService, networkService).entrySet().forEach(entry -> {, +                if (hostProviders.put(entry.getKey(), entry.getValue()) != null) {, +                    throw new IllegalArgumentException("Cannot specify zen hosts provider [" + entry.getKey() + "] twice");, +            });, +        }, +        unicastHostProviders = Collections.unmodifiableMap(hostProviders);, +            String hostsProviderName = DISCOVERY_HOSTS_PROVIDER_SETTING.get(settings);, +            Supplier<UnicastHostsProvider> hostsProviderSupplier = unicastHostProviders.get(hostsProviderName);, +            if (hostsProviderSupplier == null) {, +                throw new IllegalArgumentException("Unknown zen hosts provider [" + hostsProviderName + "]");, +            UnicastHostsProvider hostsProvider = Objects.requireNonNull(hostsProviderSupplier.get());, +            bind(UnicastHostsProvider.class).toInstance(hostsProvider);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/UnicastZenPing.java, +    private final UnicastHostsProvider hostsProvider;, +                          UnicastHostsProvider unicastHostsProviders) {, +        this.hostsProvider = unicastHostsProviders;, +        nodesToPingSet.addAll(hostsProvider.buildDynamicNodes());, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    DiscoveryModule.DISCOVERY_HOSTS_PROVIDER_SETTING,, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.plugins.DiscoveryPlugin;, +import org.elasticsearch.transport.TransportService;, +import java.util.Objects;, +import java.util.function.Supplier;, +        new Setting<>("discovery.type", "zen", Function.identity(), Property.NodeScope);, +    public static final Setting<String> DISCOVERY_HOSTS_PROVIDER_SETTING =, +        new Setting<>("discovery.zen.hosts_provider", DISCOVERY_TYPE_SETTING, Function.identity(), Property.NodeScope);, +    private final Map<String, Supplier<UnicastHostsProvider>> unicastHostProviders;, +    public DiscoveryModule(Settings settings, TransportService transportService, NetworkService networkService,, +                           List<DiscoveryPlugin> plugins) {, +        Map<String, Supplier<UnicastHostsProvider>> hostProviders = new HashMap<>();, +        hostProviders.put("zen", () -> Collections::emptyList);, +        for (DiscoveryPlugin plugin : plugins) {, +            plugin.getZenHostsProviders(transportService, networkService).entrySet().forEach(entry -> {, +                if (hostProviders.put(entry.getKey(), entry.getValue()) != null) {, +                    throw new IllegalArgumentException("Cannot specify zen hosts provider [" + entry.getKey() + "] twice");, +            });, +        }, +        unicastHostProviders = Collections.unmodifiableMap(hostProviders);, +            String hostsProviderName = DISCOVERY_HOSTS_PROVIDER_SETTING.get(settings);, +            Supplier<UnicastHostsProvider> hostsProviderSupplier = unicastHostProviders.get(hostsProviderName);, +            if (hostsProviderSupplier == null) {, +                throw new IllegalArgumentException("Unknown zen hosts provider [" + hostsProviderName + "]");, +            UnicastHostsProvider hostsProvider = Objects.requireNonNull(hostsProviderSupplier.get());, +            bind(UnicastHostsProvider.class).toInstance(hostsProvider);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/UnicastZenPing.java, +    private final UnicastHostsProvider hostsProvider;, +                          UnicastHostsProvider unicastHostsProviders) {, +        this.hostsProvider = unicastHostsProviders;, +        nodesToPingSet.addAll(hostsProvider.buildDynamicNodes());, +++ b/core/src/main/java/org/elasticsearch/node/Node.java]