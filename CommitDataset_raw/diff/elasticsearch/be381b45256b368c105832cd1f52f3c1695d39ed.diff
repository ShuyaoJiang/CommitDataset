[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportSetUpgradeModeAction.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ResourceNotFoundException;, +import java.util.Comparator;, +import static org.elasticsearch.ExceptionsHelper.rethrowAndSuppress;, +                    // There is a chance that we failed un-allocating a task due to allocation_id being changed, +                    // This call will timeout in that case and return an error, +                        r -> {, +                            try {, +                                // Handle potential node timeouts,, +                                // these should be considered failures as tasks as still potentially executing, +                                rethrowAndSuppress(r.getNodeFailures());, +                                wrappedListener.onResponse(new AcknowledgedResponse(true));, +                            } catch (ElasticsearchException ex) {, +                                wrappedListener.onFailure(ex);, +                            }, +                        },, +            // We want to always have the same ordering of which tasks we un-allocate first., +            // However, the order in which the distributed tasks handle the un-allocation event is not guaranteed., +            .sorted(Comparator.comparing(PersistentTask::getTaskName)), +            new TypedChainTaskExecutor<>(client.threadPool().executor(executor()),, +                r -> true,, +                // Another process could modify tasks and thus we cannot find them via the allocation_id and name, +                // If the task was removed from the node, all is well, +                // We handle the case of allocation_id changing later in this transport class by timing out waiting for task completion, +                // Consequently, if the exception is ResourceNotFoundException, continue execution; circuit break otherwise., +                ex -> ex instanceof ResourceNotFoundException == false);]