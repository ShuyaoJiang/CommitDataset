[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import org.elasticsearch.rest.RestStatus;, +    public RestStatus status() {, +        if (shardFailures.length == 0) {, +            return RestStatus.OK;, +        }, +        if (successfulShards == 0 && totalShards > 0) {, +            RestStatus status = shardFailures[0].status();, +            if (shardFailures.length > 1) {, +                for (int i = 1; i < shardFailures.length; i++) {, +                    if (shardFailures[i].status().getStatus() >= 500) {, +                        status = shardFailures[i].status();, +                    }, +                }, +            }, +            return status;, +        }, +        return RestStatus.OK;, +    }, +, +        static final XContentBuilderString STATUS = new XContentBuilderString("status");, +                builder.field(Fields.STATUS, shardFailure.status().getStatus());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import org.elasticsearch.rest.RestStatus;, +    public RestStatus status() {, +        if (shardFailures.length == 0) {, +            return RestStatus.OK;, +        }, +        if (successfulShards == 0 && totalShards > 0) {, +            RestStatus status = shardFailures[0].status();, +            if (shardFailures.length > 1) {, +                for (int i = 1; i < shardFailures.length; i++) {, +                    if (shardFailures[i].status().getStatus() >= 500) {, +                        status = shardFailures[i].status();, +                    }, +                }, +            }, +            return status;, +        }, +        return RestStatus.OK;, +    }, +, +        static final XContentBuilderString STATUS = new XContentBuilderString("status");, +                builder.field(Fields.STATUS, shardFailure.status().getStatus());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.rest.RestStatus;, +    private RestStatus status;, +, +        if (actual != null && actual instanceof ElasticSearchException) {, +            status = ((ElasticSearchException) t).status();, +        } else {, +            status = RestStatus.INTERNAL_SERVER_ERROR;, +        }, +     * The search shard target the failure occurred on., +    public RestStatus status() {, +        return this.status;, +    }, +, +        status = RestStatus.readFrom(in);, +        RestStatus.writeTo(out, status);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import org.elasticsearch.rest.RestStatus;, +    public RestStatus status() {, +        if (shardFailures.length == 0) {, +            return RestStatus.OK;, +        }, +        if (successfulShards == 0 && totalShards > 0) {, +            RestStatus status = shardFailures[0].status();, +            if (shardFailures.length > 1) {, +                for (int i = 1; i < shardFailures.length; i++) {, +                    if (shardFailures[i].status().getStatus() >= 500) {, +                        status = shardFailures[i].status();, +                    }, +                }, +            }, +            return status;, +        }, +        return RestStatus.OK;, +    }, +, +        static final XContentBuilderString STATUS = new XContentBuilderString("status");, +                builder.field(Fields.STATUS, shardFailure.status().getStatus());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.rest.RestStatus;, +    private RestStatus status;, +, +        if (actual != null && actual instanceof ElasticSearchException) {, +            status = ((ElasticSearchException) t).status();, +        } else {, +            status = RestStatus.INTERNAL_SERVER_ERROR;, +        }, +     * The search shard target the failure occurred on., +    public RestStatus status() {, +        return this.status;, +    }, +, +        status = RestStatus.readFrom(in);, +        RestStatus.writeTo(out, status);]