[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsAggregator.java, +        double variance = (sumOfSqrs.get(owningBucketOrd) - ((sum * sum) / count)) / count;, +        return variance < 0  ? 0 : variance;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsAggregator.java, +        double variance = (sumOfSqrs.get(owningBucketOrd) - ((sum * sum) / count)) / count;, +        return variance < 0  ? 0 : variance;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java, +        double variance =  (sumOfSqrs - ((sum * sum) / count)) / count;, +        return variance < 0  ? 0 : variance;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsAggregator.java, +        double variance = (sumOfSqrs.get(owningBucketOrd) - ((sum * sum) / count)) / count;, +        return variance < 0  ? 0 : variance;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java, +        double variance =  (sumOfSqrs - ((sum * sum) / count)) / count;, +        return variance < 0  ? 0 : variance;, +++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsAggregatorTests.java, +    /**, +     * Testcase for https://github.com/elastic/elasticsearch/issues/37303, +     */, +    public void testVarianceNonNegative() throws IOException {, +        MappedFieldType ft =, +            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);, +        ft.setName("field");, +        final ExtendedSimpleStatsAggregator expected = new ExtendedSimpleStatsAggregator();, +        testCase(ft,, +            iw -> {, +                int numDocs = 3;, +                for (int i = 0; i < numDocs; i++) {, +                    Document doc = new Document();, +                    double value = 49.95d;, +                    long valueAsLong = NumericUtils.doubleToSortableLong(value);, +                    doc.add(new SortedNumericDocValuesField("field", valueAsLong));, +                    expected.add(value);, +                    iw.addDocument(doc);, +                }, +            },, +            stats -> {, +                //since the value(49.95) is a constant, variance should be 0, +                assertEquals(0.0d, stats.getVariance(), TOLERANCE);, +                assertEquals(0.0d, stats.getStdDeviation(), TOLERANCE);, +            }, +        );, +    }, +, +            double variance = (sumOfSqrs - ((sum * sum) / count)) / count;, +            return variance < 0  ? 0 : variance;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsAggregator.java, +        double variance = (sumOfSqrs.get(owningBucketOrd) - ((sum * sum) / count)) / count;, +        return variance < 0  ? 0 : variance;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java, +        double variance =  (sumOfSqrs - ((sum * sum) / count)) / count;, +        return variance < 0  ? 0 : variance;, +++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsAggregatorTests.java, +    /**, +     * Testcase for https://github.com/elastic/elasticsearch/issues/37303, +     */, +    public void testVarianceNonNegative() throws IOException {, +        MappedFieldType ft =, +            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);, +        ft.setName("field");, +        final ExtendedSimpleStatsAggregator expected = new ExtendedSimpleStatsAggregator();, +        testCase(ft,, +            iw -> {, +                int numDocs = 3;, +                for (int i = 0; i < numDocs; i++) {, +                    Document doc = new Document();, +                    double value = 49.95d;, +                    long valueAsLong = NumericUtils.doubleToSortableLong(value);, +                    doc.add(new SortedNumericDocValuesField("field", valueAsLong));, +                    expected.add(value);, +                    iw.addDocument(doc);, +                }, +            },, +            stats -> {, +                //since the value(49.95) is a constant, variance should be 0, +                assertEquals(0.0d, stats.getVariance(), TOLERANCE);, +                assertEquals(0.0d, stats.getStdDeviation(), TOLERANCE);, +            }, +        );, +    }, +, +            double variance = (sumOfSqrs - ((sum * sum) / count)) / count;, +            return variance < 0  ? 0 : variance;, +++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsIT.java, +        double variance  = (sumOfSqrs - ((sum * sum) / vals.length)) / vals.length;, +        return variance < 0  ? 0 : variance;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsAggregator.java, +        double variance = (sumOfSqrs.get(owningBucketOrd) - ((sum * sum) / count)) / count;, +        return variance < 0  ? 0 : variance;, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalExtendedStats.java, +        double variance =  (sumOfSqrs - ((sum * sum) / count)) / count;, +        return variance < 0  ? 0 : variance;, +++ b/server/src/test/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsAggregatorTests.java, +    /**, +     * Testcase for https://github.com/elastic/elasticsearch/issues/37303, +     */, +    public void testVarianceNonNegative() throws IOException {, +        MappedFieldType ft =, +            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);, +        ft.setName("field");]