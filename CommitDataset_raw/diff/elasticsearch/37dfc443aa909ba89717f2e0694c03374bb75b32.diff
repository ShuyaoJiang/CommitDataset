[+++ b/.idea/dictionaries/kimchy.xml, +      <w>queryparser</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>queryparser</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/CountRequest.java, +     * @see org.elasticsearch.index.query.xcontent.QueryBuilders, +++ b/.idea/dictionaries/kimchy.xml, +      <w>queryparser</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/CountRequest.java, +     * @see org.elasticsearch.index.query.xcontent.QueryBuilders, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/deletebyquery/DeleteByQueryRequest.java, +     * @see org.elasticsearch.index.query.xcontent.QueryBuilders, +++ b/.idea/dictionaries/kimchy.xml, +      <w>queryparser</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/CountRequest.java, +     * @see org.elasticsearch.index.query.xcontent.QueryBuilders, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/deletebyquery/DeleteByQueryRequest.java, +     * @see org.elasticsearch.index.query.xcontent.QueryBuilders, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.elasticsearch.index.query.xcontent.BoolQueryBuilder;, +import org.elasticsearch.index.query.xcontent.MoreLikeThisFieldQueryBuilder;, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +                final BoolQueryBuilder boolBuilder = boolQuery();, +    private void parseSource(GetResponse getResponse, final BoolQueryBuilder boolBuilder, DocumentMapper docMapper, final Set<String> fields, final MoreLikeThisRequest request) {, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, FieldMapper fieldMapper, Fieldable field) {, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, String fieldName, String likeText) {, +        MoreLikeThisFieldQueryBuilder mlt = moreLikeThisFieldQuery(fieldName), +++ b/.idea/dictionaries/kimchy.xml, +      <w>queryparser</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/CountRequest.java, +     * @see org.elasticsearch.index.query.xcontent.QueryBuilders, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/deletebyquery/DeleteByQueryRequest.java, +     * @see org.elasticsearch.index.query.xcontent.QueryBuilders, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.elasticsearch.index.query.xcontent.BoolQueryBuilder;, +import org.elasticsearch.index.query.xcontent.MoreLikeThisFieldQueryBuilder;, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +                final BoolQueryBuilder boolBuilder = boolQuery();, +    private void parseSource(GetResponse getResponse, final BoolQueryBuilder boolBuilder, DocumentMapper docMapper, final Set<String> fields, final MoreLikeThisRequest request) {, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, FieldMapper fieldMapper, Fieldable field) {, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, String fieldName, String likeText) {, +        MoreLikeThisFieldQueryBuilder mlt = moreLikeThisFieldQuery(fieldName), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/Requests.java, +     * of the query, or by using a {@link org.elasticsearch.index.query.QueryBuilder} (using {@link org.elasticsearch.index.query.xcontent.QueryBuilders})., +     * either using the JSON source of the query, or using a {@link org.elasticsearch.index.query.QueryBuilder} (using {@link org.elasticsearch.index.query.xcontent.QueryBuilders})., +++ b/.idea/dictionaries/kimchy.xml, +      <w>queryparser</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/CountRequest.java, +     * @see org.elasticsearch.index.query.xcontent.QueryBuilders, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/deletebyquery/DeleteByQueryRequest.java, +     * @see org.elasticsearch.index.query.xcontent.QueryBuilders, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.elasticsearch.index.query.xcontent.BoolQueryBuilder;, +import org.elasticsearch.index.query.xcontent.MoreLikeThisFieldQueryBuilder;, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +                final BoolQueryBuilder boolBuilder = boolQuery();, +    private void parseSource(GetResponse getResponse, final BoolQueryBuilder boolBuilder, DocumentMapper docMapper, final Set<String> fields, final MoreLikeThisRequest request) {, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, FieldMapper fieldMapper, Fieldable field) {, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, String fieldName, String likeText) {, +        MoreLikeThisFieldQueryBuilder mlt = moreLikeThisFieldQuery(fieldName), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/Requests.java, +     * of the query, or by using a {@link org.elasticsearch.index.query.QueryBuilder} (using {@link org.elasticsearch.index.query.xcontent.QueryBuilders})., +     * either using the JSON source of the query, or using a {@link org.elasticsearch.index.query.QueryBuilder} (using {@link org.elasticsearch.index.query.xcontent.QueryBuilders})., +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/IndexQueryParserModule.java, +import org.elasticsearch.index.query.xcontent.*;, +                    qSettings.getAsClass("type", XContentIndexQueryParser.class))).in(Scopes.SINGLETON);, +                    XContentIndexQueryParser.class)).in(Scopes.SINGLETON);, +        // handle XContenQueryParsers, +        MapBinder<String, XContentQueryParserFactory> queryBinder, +                = MapBinder.newMapBinder(binder(), String.class, XContentQueryParserFactory.class);, +        Map<String, Settings> xContentQueryParserGroups = settings.getGroups(XContentIndexQueryParser.Defaults.QUERY_PREFIX);, +        for (Map.Entry<String, Settings> entry : xContentQueryParserGroups.entrySet()) {, +            Class<? extends XContentQueryParser> type = qSettings.getAsClass("type", null);, +                throw new IllegalArgumentException("Query Parser [" + qName + "] must be provided with a type");, +            queryBinder.addBinding(qName).toProvider(FactoryProvider.newFactory(XContentQueryParserFactory.class,, +        // handle XContentFilterParsers, +        MapBinder<String, XContentFilterParserFactory> filterBinder, +                = MapBinder.newMapBinder(binder(), String.class, XContentFilterParserFactory.class);, +        Map<String, Settings> xContentFilterParserGroups = settings.getGroups(XContentIndexQueryParser.Defaults.FILTER_PREFIX);, +        for (Map.Entry<String, Settings> entry : xContentFilterParserGroups.entrySet()) {, +            Class<? extends XContentFilterParser> type = fSettings.getAsClass("type", null);, +                throw new IllegalArgumentException("Filter Parser [" + fName + "] must be provided with a type");, +            filterBinder.addBinding(fName).toProvider(FactoryProvider.newFactory(XContentFilterParserFactory.class,, +++ b/.idea/dictionaries/kimchy.xml, +      <w>queryparser</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/CountRequest.java, +     * @see org.elasticsearch.index.query.xcontent.QueryBuilders, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/deletebyquery/DeleteByQueryRequest.java, +     * @see org.elasticsearch.index.query.xcontent.QueryBuilders, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.elasticsearch.index.query.xcontent.BoolQueryBuilder;, +import org.elasticsearch.index.query.xcontent.MoreLikeThisFieldQueryBuilder;, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +                final BoolQueryBuilder boolBuilder = boolQuery();, +    private void parseSource(GetResponse getResponse, final BoolQueryBuilder boolBuilder, DocumentMapper docMapper, final Set<String> fields, final MoreLikeThisRequest request) {, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, FieldMapper fieldMapper, Fieldable field) {, +    private void addMoreLikeThis(MoreLikeThisRequest request, BoolQueryBuilder boolBuilder, String fieldName, String likeText) {, +        MoreLikeThisFieldQueryBuilder mlt = moreLikeThisFieldQuery(fieldName), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/Requests.java, +     * of the query, or by using a {@link org.elasticsearch.index.query.QueryBuilder} (using {@link org.elasticsearch.index.query.xcontent.QueryBuilders}).]