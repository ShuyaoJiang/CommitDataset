[+++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.service.IndexService;, +        IndexService indexService = indicesService.indexServiceSafe(shardRequest.request.index());, +        IndexShard indexShard = indexService.shardSafe(shardRequest.shardId);, +                            DocumentMapper docMapper = indexService.mapperService().documentMapper(mappingToUpdate.v2());, +                            if (docMapper != null) {, +                                mappingUpdatedAction.updateMappingOnMaster(mappingToUpdate.v1(), docMapper, indexService.indexUUID());, +                            }, +            DocumentMapper docMapper = indexService.mapperService().documentMapper(mappingToUpdate.v2());, +            if (docMapper != null) {, +                mappingUpdatedAction.updateMappingOnMaster(mappingToUpdate.v1(), docMapper, indexService.indexUUID());, +            }, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.service.IndexService;, +        IndexService indexService = indicesService.indexServiceSafe(shardRequest.request.index());, +        IndexShard indexShard = indexService.shardSafe(shardRequest.shardId);, +                            DocumentMapper docMapper = indexService.mapperService().documentMapper(mappingToUpdate.v2());, +                            if (docMapper != null) {, +                                mappingUpdatedAction.updateMappingOnMaster(mappingToUpdate.v1(), docMapper, indexService.indexUUID());, +                            }, +            DocumentMapper docMapper = indexService.mapperService().documentMapper(mappingToUpdate.v2());, +            if (docMapper != null) {, +                mappingUpdatedAction.updateMappingOnMaster(mappingToUpdate.v1(), docMapper, indexService.indexUUID());, +            }, +++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.index.service.IndexService;, +        IndexService indexService = indicesService.indexServiceSafe(shardRequest.request.index());, +        IndexShard indexShard = indexService.shardSafe(shardRequest.shardId);, +                mappingUpdatedAction.updateMappingOnMaster(request.index(), index.docMapper(), indexService.indexUUID());, +                mappingUpdatedAction.updateMappingOnMaster(request.index(), create.docMapper(), indexService.indexUUID());, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.service.IndexService;, +        IndexService indexService = indicesService.indexServiceSafe(shardRequest.request.index());, +        IndexShard indexShard = indexService.shardSafe(shardRequest.shardId);, +                            DocumentMapper docMapper = indexService.mapperService().documentMapper(mappingToUpdate.v2());, +                            if (docMapper != null) {, +                                mappingUpdatedAction.updateMappingOnMaster(mappingToUpdate.v1(), docMapper, indexService.indexUUID());, +                            }, +            DocumentMapper docMapper = indexService.mapperService().documentMapper(mappingToUpdate.v2());, +            if (docMapper != null) {, +                mappingUpdatedAction.updateMappingOnMaster(mappingToUpdate.v1(), docMapper, indexService.indexUUID());, +            }, +++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.index.service.IndexService;, +        IndexService indexService = indicesService.indexServiceSafe(shardRequest.request.index());, +        IndexShard indexShard = indexService.shardSafe(shardRequest.shardId);, +                mappingUpdatedAction.updateMappingOnMaster(request.index(), index.docMapper(), indexService.indexUUID());, +                mappingUpdatedAction.updateMappingOnMaster(request.index(), create.docMapper(), indexService.indexUUID());, +++ b/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, +import com.google.common.collect.Lists;, +import com.google.common.collect.Sets;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import org.elasticsearch.node.settings.NodeSettingsService;, +import java.util.Collections;, +import java.util.List;, +import java.util.Set;, +import java.util.concurrent.BlockingQueue;, +    public static final String INDICES_MAPPING_ADDITIONAL_MAPPING_CHANGE_TIME = "indices.mapping.additional_mapping_change_time";, +, +    private volatile MasterMappingUpdater masterMappingUpdater;, +, +    private volatile TimeValue additionalMappingChangeTime;, +, +    class ApplySettings implements NodeSettingsService.Listener {, +        @Override, +        public void onRefreshSettings(Settings settings) {, +            final TimeValue current = MappingUpdatedAction.this.additionalMappingChangeTime;, +            final TimeValue newValue = settings.getAsTime(INDICES_MAPPING_ADDITIONAL_MAPPING_CHANGE_TIME, current);, +            if (!current.equals(newValue)) {, +                logger.info("updating " + INDICES_MAPPING_ADDITIONAL_MAPPING_CHANGE_TIME + " from [{}] to [{}]", current, newValue);, +                MappingUpdatedAction.this.additionalMappingChangeTime = newValue;, +            }, +        }, +    }, +                                MetaDataMappingService metaDataMappingService, NodeSettingsService nodeSettingsService) {, +        // this setting should probably always be 0, just add the option to wait for more changes within a time window, +        this.additionalMappingChangeTime = settings.getAsTime(INDICES_MAPPING_ADDITIONAL_MAPPING_CHANGE_TIME, TimeValue.timeValueMillis(0));, +        nodeSettingsService.addListener(new ApplySettings());, +    public void start() {, +        this.masterMappingUpdater = new MasterMappingUpdater(EsExecutors.threadName(settings, "master_mapping_updater"));, +        this.masterMappingUpdater.start();, +    public void stop() {, +        this.masterMappingUpdater.close();, +        this.masterMappingUpdater = null;, +    public void updateMappingOnMaster(String index, DocumentMapper documentMapper, String indexUUID) {, +        masterMappingUpdater.add(new MappingChange(documentMapper, index, indexUUID));, +, +    private static class MappingChange {, +        public final DocumentMapper documentMapper;, +        public final String index;, +        public final String indexUUID;, +, +        MappingChange(DocumentMapper documentMapper, String index, String indexUUID) {, +            this.documentMapper = documentMapper;]