[+++ b/.gitignore, +++ b/.gitignore, +++ /dev/null, +++ b/.gitignore, +++ /dev/null, +++ b/build.gradle, +import org.elasticsearch.gradle.plugin.PluginBuildPlugin, +Project xpackRootProject = project, +, +  ext.xpackRootProject = xpackRootProject, +  ext.xpackProject = { String projectName -> xpackRootProject.project(projectName) }, +  // helper method to find the path to a module, +  ext.xpackModule = { String moduleName -> xpackProject("plugin:${moduleName}").path }, +    project.licenseFile = xpackRootProject.file('LICENSE.txt'), +    project.noticeFile = xpackRootProject.file('NOTICE.txt'), +  }, +, +  plugins.withType(PluginBuildPlugin).whenPluginAdded {, +    project.esplugin.licenseFile = xpackRootProject.file('LICENSE.txt'), +    project.esplugin.noticeFile = xpackRootProject.file('NOTICE.txt'), +    approvedLicenses = ['Elasticsearch Confidential'], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-api:${version}": xpackModule('core')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-core:${version}": xpackModule('core')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-deprecation:${version}": xpackModule('deprecation')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-graph:${version}": xpackModule('graph')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-logstash:${version}": xpackModule('logstash')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-ml:${version}": xpackModule('ml')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-monitoring:${version}": xpackModule('monitoring')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-security:${version}": xpackModule('security')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-upgrade:${version}": xpackModule('upgrade')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-watcher:${version}": xpackModule('watcher')], +++ b/.gitignore, +++ /dev/null, +++ b/build.gradle, +import org.elasticsearch.gradle.plugin.PluginBuildPlugin, +Project xpackRootProject = project, +, +  ext.xpackRootProject = xpackRootProject, +  ext.xpackProject = { String projectName -> xpackRootProject.project(projectName) }, +  // helper method to find the path to a module, +  ext.xpackModule = { String moduleName -> xpackProject("plugin:${moduleName}").path }, +    project.licenseFile = xpackRootProject.file('LICENSE.txt'), +    project.noticeFile = xpackRootProject.file('NOTICE.txt'), +  }, +, +  plugins.withType(PluginBuildPlugin).whenPluginAdded {, +    project.esplugin.licenseFile = xpackRootProject.file('LICENSE.txt'), +    project.esplugin.noticeFile = xpackRootProject.file('NOTICE.txt'), +    approvedLicenses = ['Elasticsearch Confidential'], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-api:${version}": xpackModule('core')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-core:${version}": xpackModule('core')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-deprecation:${version}": xpackModule('deprecation')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-graph:${version}": xpackModule('graph')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-logstash:${version}": xpackModule('logstash')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-ml:${version}": xpackModule('ml')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-monitoring:${version}": xpackModule('monitoring')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-security:${version}": xpackModule('security')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-upgrade:${version}": xpackModule('upgrade')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-watcher:${version}": xpackModule('watcher')], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/.gitignore, +++ /dev/null, +++ b/build.gradle, +import org.elasticsearch.gradle.plugin.PluginBuildPlugin, +Project xpackRootProject = project, +, +  ext.xpackRootProject = xpackRootProject, +  ext.xpackProject = { String projectName -> xpackRootProject.project(projectName) }, +  // helper method to find the path to a module, +  ext.xpackModule = { String moduleName -> xpackProject("plugin:${moduleName}").path }, +    project.licenseFile = xpackRootProject.file('LICENSE.txt'), +    project.noticeFile = xpackRootProject.file('NOTICE.txt'), +  }, +, +  plugins.withType(PluginBuildPlugin).whenPluginAdded {, +    project.esplugin.licenseFile = xpackRootProject.file('LICENSE.txt'), +    project.esplugin.noticeFile = xpackRootProject.file('NOTICE.txt'), +    approvedLicenses = ['Elasticsearch Confidential'], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-api:${version}": xpackModule('core')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-core:${version}": xpackModule('core')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-deprecation:${version}": xpackModule('deprecation')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-graph:${version}": xpackModule('graph')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-logstash:${version}": xpackModule('logstash')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-ml:${version}": xpackModule('ml')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-monitoring:${version}": xpackModule('monitoring')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-security:${version}": xpackModule('security')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-upgrade:${version}": xpackModule('upgrade')], +  ext.projectSubstitutions += [ "org.elasticsearch.plugin:x-pack-watcher:${version}": xpackModule('watcher')], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/.gitignore, +++ /dev/null, +++ b/build.gradle, +import org.elasticsearch.gradle.plugin.PluginBuildPlugin, +Project xpackRootProject = project, +, +  ext.xpackRootProject = xpackRootProject, +  ext.xpackProject = { String projectName -> xpackRootProject.project(projectName) }, +  // helper method to find the path to a module]