[+++ b/buildSrc/src/main/resources/forbidden/es-server-signatures.txt, +, +@defaultMessage Local times may be ambiguous or nonexistent in a specific time zones. Use ZoneRules#getValidOffsets() instead., +java.time.LocalDateTime#atZone(java.time.ZoneId), +java.time.ZonedDateTime#of(int, int, int, int, int, int, int, java.time.ZoneId), +java.time.ZonedDateTime#of(java.time.LocalDate, java.time.LocalTime, java.time.ZoneId), +java.time.ZonedDateTime#of(java.time.LocalDateTime, java.time.ZoneId), +java.time.ZonedDateTime#truncatedTo(java.time.temporal.TemporalUnit), +java.time.ZonedDateTime#of(int, int, int, int, int, int, int, java.time.ZoneId), +java.time.ZonedDateTime#of(java.time.LocalDate, java.time.LocalTime, java.time.ZoneId), +java.time.ZonedDateTime#of(java.time.LocalDateTime, java.time.ZoneId), +java.time.ZonedDateTime#ofLocal(java.time.LocalDateTime, java.time.ZoneId, java.time.ZoneOffset), +java.time.OffsetDateTime#atZoneSimilarLocal(java.time.ZoneId), +java.time.zone.ZoneRules#getOffset(java.time.LocalDateTime), +, +@defaultMessage Manipulation of an OffsetDateTime may yield a time that is not valid in the desired time zone. Use ZonedDateTime instead., +java.time.OffsetDateTime#minus(long, java.time.temporal.TemporalUnit), +java.time.OffsetDateTime#minus(long, java.time.temporal.TemporalUnit), +java.time.OffsetDateTime#minus(java.time.temporal.TemporalAmount), +java.time.OffsetDateTime#minusDays(long), +java.time.OffsetDateTime#minusHours(long), +java.time.OffsetDateTime#minusMinutes(long), +java.time.OffsetDateTime#minusMonths(long), +java.time.OffsetDateTime#minusNanos(long), +java.time.OffsetDateTime#minusSeconds(long), +java.time.OffsetDateTime#minusWeeks(long), +java.time.OffsetDateTime#minusYears(long), +java.time.OffsetDateTime#plus(long, java.time.temporal.TemporalUnit), +java.time.OffsetDateTime#plus(java.time.temporal.TemporalAmount), +java.time.OffsetDateTime#plusDays(long), +java.time.OffsetDateTime#plusHours(long), +java.time.OffsetDateTime#plusMinutes(long), +java.time.OffsetDateTime#plusMonths(long), +java.time.OffsetDateTime#plusNanos(long), +java.time.OffsetDateTime#plusSeconds(long), +java.time.OffsetDateTime#plusWeeks(long), +java.time.OffsetDateTime#plusYears(long), +java.time.OffsetDateTime#with(java.time.temporal.TemporalAdjuster), +java.time.OffsetDateTime#with(java.time.temporal.TemporalField, long), +java.time.OffsetDateTime#withDayOfMonth(int), +java.time.OffsetDateTime#withDayOfYear(int), +java.time.OffsetDateTime#withHour(int), +java.time.OffsetDateTime#withMinute(int), +java.time.OffsetDateTime#withMonth(int), +java.time.OffsetDateTime#withNano(int), +java.time.OffsetDateTime#withOffsetSameInstant(java.time.ZoneOffset), +java.time.OffsetDateTime#withOffsetSameLocal(java.time.ZoneOffset), +java.time.OffsetDateTime#withSecond(int), +java.time.OffsetDateTime#withYear(int), +, +@defaultMessage Daylight saving is not the only reason for a change in timezone offset., +java.time.zone.ZoneRules#getStandardOffset(java.time.Instant), +java.time.zone.ZoneRules#getDaylightSavings(java.time.Instant), +java.time.zone.ZoneRules#isDaylightSavings(java.time.Instant), +++ b/buildSrc/src/main/resources/forbidden/es-server-signatures.txt, +, +@defaultMessage Local times may be ambiguous or nonexistent in a specific time zones. Use ZoneRules#getValidOffsets() instead., +java.time.LocalDateTime#atZone(java.time.ZoneId), +java.time.ZonedDateTime#of(int, int, int, int, int, int, int, java.time.ZoneId), +java.time.ZonedDateTime#of(java.time.LocalDate, java.time.LocalTime, java.time.ZoneId), +java.time.ZonedDateTime#of(java.time.LocalDateTime, java.time.ZoneId), +java.time.ZonedDateTime#truncatedTo(java.time.temporal.TemporalUnit), +java.time.ZonedDateTime#of(int, int, int, int, int, int, int, java.time.ZoneId), +java.time.ZonedDateTime#of(java.time.LocalDate, java.time.LocalTime, java.time.ZoneId), +java.time.ZonedDateTime#of(java.time.LocalDateTime, java.time.ZoneId), +java.time.ZonedDateTime#ofLocal(java.time.LocalDateTime, java.time.ZoneId, java.time.ZoneOffset), +java.time.OffsetDateTime#atZoneSimilarLocal(java.time.ZoneId), +java.time.zone.ZoneRules#getOffset(java.time.LocalDateTime), +, +@defaultMessage Manipulation of an OffsetDateTime may yield a time that is not valid in the desired time zone. Use ZonedDateTime instead., +java.time.OffsetDateTime#minus(long, java.time.temporal.TemporalUnit), +java.time.OffsetDateTime#minus(long, java.time.temporal.TemporalUnit), +java.time.OffsetDateTime#minus(java.time.temporal.TemporalAmount), +java.time.OffsetDateTime#minusDays(long), +java.time.OffsetDateTime#minusHours(long), +java.time.OffsetDateTime#minusMinutes(long), +java.time.OffsetDateTime#minusMonths(long), +java.time.OffsetDateTime#minusNanos(long), +java.time.OffsetDateTime#minusSeconds(long), +java.time.OffsetDateTime#minusWeeks(long), +java.time.OffsetDateTime#minusYears(long), +java.time.OffsetDateTime#plus(long, java.time.temporal.TemporalUnit), +java.time.OffsetDateTime#plus(java.time.temporal.TemporalAmount), +java.time.OffsetDateTime#plusDays(long), +java.time.OffsetDateTime#plusHours(long), +java.time.OffsetDateTime#plusMinutes(long), +java.time.OffsetDateTime#plusMonths(long), +java.time.OffsetDateTime#plusNanos(long), +java.time.OffsetDateTime#plusSeconds(long), +java.time.OffsetDateTime#plusWeeks(long), +java.time.OffsetDateTime#plusYears(long), +java.time.OffsetDateTime#with(java.time.temporal.TemporalAdjuster), +java.time.OffsetDateTime#with(java.time.temporal.TemporalField, long), +java.time.OffsetDateTime#withDayOfMonth(int), +java.time.OffsetDateTime#withDayOfYear(int), +java.time.OffsetDateTime#withHour(int), +java.time.OffsetDateTime#withMinute(int), +java.time.OffsetDateTime#withMonth(int), +java.time.OffsetDateTime#withNano(int), +java.time.OffsetDateTime#withOffsetSameInstant(java.time.ZoneOffset)]