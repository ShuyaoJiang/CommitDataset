[+++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +            InnerHitsContext.ParentChildInnerHits parentChildInnerHits = new InnerHitsContext.ParentChildInnerHits(innerHits.v2(), innerQuery, null, parseContext.mapperService(), childDocMapper);, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +            InnerHitsContext.ParentChildInnerHits parentChildInnerHits = new InnerHitsContext.ParentChildInnerHits(innerHits.v2(), innerQuery, null, parseContext.mapperService(), childDocMapper);, +++ b/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java, +            InnerHitsContext.ParentChildInnerHits parentChildInnerHits = new InnerHitsContext.ParentChildInnerHits(innerHits.v2(), innerQuery, null, parseContext.mapperService(), parentDocMapper);, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +            InnerHitsContext.ParentChildInnerHits parentChildInnerHits = new InnerHitsContext.ParentChildInnerHits(innerHits.v2(), innerQuery, null, parseContext.mapperService(), childDocMapper);, +++ b/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java, +            InnerHitsContext.ParentChildInnerHits parentChildInnerHits = new InnerHitsContext.ParentChildInnerHits(innerHits.v2(), innerQuery, null, parseContext.mapperService(), parentDocMapper);, +++ b/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsContext.java, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.search.internal.InternalSearchHit;, +        private final MapperService mapperService;, +        public ParentChildInnerHits(SearchContext context, Query query, Map<String, BaseInnerHits> childInnerHits, MapperService mapperService, DocumentMapper documentMapper) {, +            this.mapperService = mapperService;, +            final String term;, +            if (isParentHit(hitContext.hit())) {, +            } else if (isChildHit(hitContext.hit())) {, +            } else {, +                return Lucene.EMPTY_TOP_DOCS;, +            }, +, +            BooleanQuery q = new BooleanQuery();, +            q.add(query, Occur.MUST);, +            // Only include docs that have the current hit as parent, +            q.add(new TermQuery(new Term(field, term)), Occur.MUST);, +            // Only include docs that have this inner hits type, +            q.add(documentMapper.typeFilter(), Occur.MUST);, +                final int count = context.searcher().count(q);, +                context.searcher().search( q, topDocsCollector);, +, +        private boolean isParentHit(InternalSearchHit hit) {, +            return hit.type().equals(documentMapper.parentFieldMapper().type());, +        }, +, +        private boolean isChildHit(InternalSearchHit hit) {, +            DocumentMapper hitDocumentMapper = mapperService.documentMapper(hit.type());, +            return documentMapper.type().equals(hitDocumentMapper.parentFieldMapper().type());, +        }, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +            InnerHitsContext.ParentChildInnerHits parentChildInnerHits = new InnerHitsContext.ParentChildInnerHits(innerHits.v2(), innerQuery, null, parseContext.mapperService(), childDocMapper);, +++ b/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java, +            InnerHitsContext.ParentChildInnerHits parentChildInnerHits = new InnerHitsContext.ParentChildInnerHits(innerHits.v2(), innerQuery, null, parseContext.mapperService(), parentDocMapper);, +++ b/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsContext.java, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.search.internal.InternalSearchHit;, +        private final MapperService mapperService;, +        public ParentChildInnerHits(SearchContext context, Query query, Map<String, BaseInnerHits> childInnerHits, MapperService mapperService, DocumentMapper documentMapper) {, +            this.mapperService = mapperService;, +            final String term;, +            if (isParentHit(hitContext.hit())) {, +            } else if (isChildHit(hitContext.hit())) {, +            } else {, +                return Lucene.EMPTY_TOP_DOCS;, +            }, +, +            BooleanQuery q = new BooleanQuery();, +            q.add(query, Occur.MUST);, +            // Only include docs that have the current hit as parent, +            q.add(new TermQuery(new Term(field, term)), Occur.MUST);, +            // Only include docs that have this inner hits type, +            q.add(documentMapper.typeFilter(), Occur.MUST);, +                final int count = context.searcher().count(q);, +                context.searcher().search( q, topDocsCollector);, +, +        private boolean isParentHit(InternalSearchHit hit) {, +            return hit.type().equals(documentMapper.parentFieldMapper().type());, +        }, +, +        private boolean isChildHit(InternalSearchHit hit) {, +            DocumentMapper hitDocumentMapper = mapperService.documentMapper(hit.type());, +            return documentMapper.type().equals(hitDocumentMapper.parentFieldMapper().type());, +        }, +++ b/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsParseElement.java, +        return new InnerHitsContext.ParentChildInnerHits(parseResult.context(), parseResult.query(), parseResult.childInnerHits(), parseContext.mapperService(), documentMapper);, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +            InnerHitsContext.ParentChildInnerHits parentChildInnerHits = new InnerHitsContext.ParentChildInnerHits(innerHits.v2(), innerQuery, null, parseContext.mapperService(), childDocMapper);, +++ b/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java, +            InnerHitsContext.ParentChildInnerHits parentChildInnerHits = new InnerHitsContext.ParentChildInnerHits(innerHits.v2(), innerQuery, null, parseContext.mapperService(), parentDocMapper);, +++ b/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsContext.java, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.search.internal.InternalSearchHit;, +        private final MapperService mapperService;, +        public ParentChildInnerHits(SearchContext context, Query query, Map<String, BaseInnerHits> childInnerHits, MapperService mapperService, DocumentMapper documentMapper) {, +            this.mapperService = mapperService;, +            final String term;, +            if (isParentHit(hitContext.hit())) {, +            } else if (isChildHit(hitContext.hit())) {, +            } else {, +                return Lucene.EMPTY_TOP_DOCS;, +            }, +, +            BooleanQuery q = new BooleanQuery();, +            q.add(query, Occur.MUST);, +            // Only include docs that have the current hit as parent, +            q.add(new TermQuery(new Term(field, term)), Occur.MUST);, +            // Only include docs that have this inner hits type, +            q.add(documentMapper.typeFilter(), Occur.MUST);, +                final int count = context.searcher().count(q);]