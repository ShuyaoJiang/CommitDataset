[+++ b/server/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +        return new ConcatenatedIterable<>(inputs);, +++ b/server/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +        return new ConcatenatedIterable<>(inputs);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +import org.apache.lucene.util.SetOnce;, +import org.elasticsearch.index.IndexModule;, +import org.elasticsearch.xpack.ccr.action.repositories.ClearCcrRestoreSessionAction;, +import org.elasticsearch.xpack.ccr.action.repositories.PutCcrRestoreSessionAction;, +import org.elasticsearch.xpack.ccr.repository.CcrRestoreSourceService;, +    private final SetOnce<CcrRestoreSourceService> restoreSourceService = new SetOnce<>();, +        CcrRestoreSourceService restoreSourceService = new CcrRestoreSourceService(settings);, +        this.restoreSourceService.set(restoreSourceService);, +            restoreSourceService,, +                new ActionHandler<>(PutCcrRestoreSessionAction.INSTANCE,, +                    PutCcrRestoreSessionAction.TransportPutCcrRestoreSessionAction.class),, +                new ActionHandler<>(ClearCcrRestoreSessionAction.INSTANCE,, +                    ClearCcrRestoreSessionAction.TransportDeleteCcrRestoreSessionAction.class),, +    @Override, +    public void onIndexModule(IndexModule indexModule) {, +        indexModule.addIndexEventListener(this.restoreSourceService.get());, +    }, +, +++ b/server/src/main/java/org/elasticsearch/common/util/iterable/Iterables.java, +        return new ConcatenatedIterable<>(inputs);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +import org.apache.lucene.util.SetOnce;, +import org.elasticsearch.index.IndexModule;, +import org.elasticsearch.xpack.ccr.action.repositories.ClearCcrRestoreSessionAction;, +import org.elasticsearch.xpack.ccr.action.repositories.PutCcrRestoreSessionAction;, +import org.elasticsearch.xpack.ccr.repository.CcrRestoreSourceService;, +    private final SetOnce<CcrRestoreSourceService> restoreSourceService = new SetOnce<>();, +        CcrRestoreSourceService restoreSourceService = new CcrRestoreSourceService(settings);, +        this.restoreSourceService.set(restoreSourceService);, +            restoreSourceService,, +                new ActionHandler<>(PutCcrRestoreSessionAction.INSTANCE,, +                    PutCcrRestoreSessionAction.TransportPutCcrRestoreSessionAction.class),, +                new ActionHandler<>(ClearCcrRestoreSessionAction.INSTANCE,, +                    ClearCcrRestoreSessionAction.TransportDeleteCcrRestoreSessionAction.class),, +    @Override, +    public void onIndexModule(IndexModule indexModule) {, +        indexModule.addIndexEventListener(this.restoreSourceService.get());, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/repositories/ClearCcrRestoreSessionAction.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.ccr.action.repositories;, +, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.FailedNodeException;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.nodes.BaseNodeResponse;, +import org.elasticsearch.action.support.nodes.BaseNodesResponse;, +import org.elasticsearch.action.support.nodes.TransportNodesAction;, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.TransportService;, +import org.elasticsearch.xpack.ccr.repository.CcrRestoreSourceService;, +, +import java.io.IOException;, +import java.util.List;, +, +public class ClearCcrRestoreSessionAction extends Action<ClearCcrRestoreSessionAction.ClearCcrRestoreSessionResponse> {, +, +    public static final ClearCcrRestoreSessionAction INSTANCE = new ClearCcrRestoreSessionAction();, +    private static final String NAME = "internal:admin/ccr/restore/session/clear";, +, +    private ClearCcrRestoreSessionAction() {, +        super(NAME);, +    }, +, +    @Override, +    public ClearCcrRestoreSessionResponse newResponse() {, +        return new ClearCcrRestoreSessionResponse();, +    }, +, +    public static class TransportDeleteCcrRestoreSessionAction extends TransportNodesAction<ClearCcrRestoreSessionRequest,, +        ClearCcrRestoreSessionResponse, ClearCcrRestoreSessionRequest.Request, Response> {, +, +        private final CcrRestoreSourceService ccrRestoreService;, +, +        @Inject, +        public TransportDeleteCcrRestoreSessionAction(ThreadPool threadPool, ClusterService clusterService, ActionFilters actionFilters,, +                                                      TransportService transportService, CcrRestoreSourceService ccrRestoreService) {, +            super(NAME, threadPool, clusterService, transportService, actionFilters, ClearCcrRestoreSessionRequest::new,, +                ClearCcrRestoreSessionRequest.Request::new, ThreadPool.Names.GENERIC, Response.class);, +            this.ccrRestoreService = ccrRestoreService;, +        }, +, +        @Override]