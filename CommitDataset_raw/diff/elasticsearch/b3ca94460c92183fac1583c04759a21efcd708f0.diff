[+++ b/pom.xml, +        <lucene.snapshot.revision>1675100</lucene.snapshot.revision>, +++ b/pom.xml, +        <lucene.snapshot.revision>1675100</lucene.snapshot.revision>, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.apache.lucene.search.ComplexExplanation;, +        Explanation explanation;, +        if (in.readBoolean()) {, +            Boolean match = in.readOptionalBoolean();, +            explanation = new ComplexExplanation();, +            ((ComplexExplanation) explanation).setMatch(match);, +, +            explanation = new Explanation();, +        explanation.setValue(in.readFloat());, +        explanation.setDescription(in.readString());, +        if (in.readBoolean()) {, +            int size = in.readVInt();, +            for (int i = 0; i < size; i++) {, +                explanation.addDetail(readExplanation(in));, +            }, +        }, +        return explanation;, +, +        if (explanation instanceof ComplexExplanation) {, +            out.writeBoolean(true);, +            out.writeOptionalBoolean(((ComplexExplanation) explanation).getMatch());, +        } else {, +            out.writeBoolean(false);, +        }, +        out.writeFloat(explanation.getValue());, +        if (explanation.getDescription() == null) {, +            throw new ElasticsearchIllegalArgumentException("Explanation descriptions should NOT be null\n[" + explanation.toString() + "]");, +        }, +        if (subExplanations == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +++ b/pom.xml, +        <lucene.snapshot.revision>1675100</lucene.snapshot.revision>, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.apache.lucene.search.ComplexExplanation;, +        Explanation explanation;, +        if (in.readBoolean()) {, +            Boolean match = in.readOptionalBoolean();, +            explanation = new ComplexExplanation();, +            ((ComplexExplanation) explanation).setMatch(match);, +, +            explanation = new Explanation();, +        explanation.setValue(in.readFloat());, +        explanation.setDescription(in.readString());, +        if (in.readBoolean()) {, +            int size = in.readVInt();, +            for (int i = 0; i < size; i++) {, +                explanation.addDetail(readExplanation(in));, +            }, +        }, +        return explanation;, +, +        if (explanation instanceof ComplexExplanation) {, +            out.writeBoolean(true);, +            out.writeOptionalBoolean(((ComplexExplanation) explanation).getMatch());, +        } else {, +            out.writeBoolean(false);, +        }, +        out.writeFloat(explanation.getValue());, +        if (explanation.getDescription() == null) {, +            throw new ElasticsearchIllegalArgumentException("Explanation descriptions should NOT be null\n[" + explanation.toString() + "]");, +        }, +        if (subExplanations == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +import org.apache.lucene.search.MatchNoDocsQuery;, +++ b/pom.xml, +        <lucene.snapshot.revision>1675100</lucene.snapshot.revision>, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.apache.lucene.search.ComplexExplanation;, +        Explanation explanation;, +        if (in.readBoolean()) {, +            Boolean match = in.readOptionalBoolean();, +            explanation = new ComplexExplanation();, +            ((ComplexExplanation) explanation).setMatch(match);, +, +            explanation = new Explanation();, +        explanation.setValue(in.readFloat());, +        explanation.setDescription(in.readString());, +        if (in.readBoolean()) {, +            int size = in.readVInt();, +            for (int i = 0; i < size; i++) {, +                explanation.addDetail(readExplanation(in));, +            }, +        }, +        return explanation;, +, +        if (explanation instanceof ComplexExplanation) {, +            out.writeBoolean(true);, +            out.writeOptionalBoolean(((ComplexExplanation) explanation).getMatch());, +        } else {, +            out.writeBoolean(false);]