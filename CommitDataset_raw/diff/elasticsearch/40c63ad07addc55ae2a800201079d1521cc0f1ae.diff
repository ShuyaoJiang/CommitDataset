[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +    public ClusterStateResponse(ClusterName clusterName, ClusterState clusterState) {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +    public ClusterStateResponse(ClusterName clusterName, ClusterState clusterState) {, +++ b/src/main/java/org/elasticsearch/client/support/Headers.java, +import org.elasticsearch.transport.TransportMessage;, +        public <M extends TransportMessage<?>> M applyTo(M message) {, +            return message;, +    public <M extends TransportMessage<?>> M applyTo(M message) {, +            message.putHeader(key, headers.get(key));, +        return message;, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +    public ClusterStateResponse(ClusterName clusterName, ClusterState clusterState) {, +++ b/src/main/java/org/elasticsearch/client/support/Headers.java, +import org.elasticsearch.transport.TransportMessage;, +        public <M extends TransportMessage<?>> M applyTo(M message) {, +            return message;, +    public <M extends TransportMessage<?>> M applyTo(M message) {, +            message.putHeader(key, headers.get(key));, +        return message;, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +    final Injector injector;, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +    public ClusterStateResponse(ClusterName clusterName, ClusterState clusterState) {, +++ b/src/main/java/org/elasticsearch/client/support/Headers.java, +import org.elasticsearch.transport.TransportMessage;, +        public <M extends TransportMessage<?>> M applyTo(M message) {, +            return message;, +    public <M extends TransportMessage<?>> M applyTo(M message) {, +            message.putHeader(key, headers.get(key));, +        return message;, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +    final Injector injector;, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.client.support.Headers;, +    private final Headers headers;, +, +    public TransportClientNodesService(Settings settings, ClusterName clusterName, TransportService transportService,, +                                       ThreadPool threadPool, Headers headers, Version version) {, +        this.headers = headers;, +                            headers.applyTo(Requests.nodesInfoRequest("_local")),, +                                    headers.applyTo(Requests.clusterStateRequest().clear().nodes(true).local(true)),, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +    public ClusterStateResponse(ClusterName clusterName, ClusterState clusterState) {, +++ b/src/main/java/org/elasticsearch/client/support/Headers.java, +import org.elasticsearch.transport.TransportMessage;, +        public <M extends TransportMessage<?>> M applyTo(M message) {, +            return message;, +    public <M extends TransportMessage<?>> M applyTo(M message) {, +            message.putHeader(key, headers.get(key));, +        return message;, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +    final Injector injector;, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.client.support.Headers;, +    private final Headers headers;, +, +    public TransportClientNodesService(Settings settings, ClusterName clusterName, TransportService transportService,, +                                       ThreadPool threadPool, Headers headers, Version version) {, +        this.headers = headers;, +                            headers.applyTo(Requests.nodesInfoRequest("_local")),, +                                    headers.applyTo(Requests.clusterStateRequest().clear().nodes(true).local(true)),, +++ b/src/test/java/org/elasticsearch/client/AbstractClientHeadersTests.java, +    protected static void assertHeaders(Map<String, Object> headers) {, +        assertThat(headers, notNullValue());, +        assertThat(headers.size(), is(2));, +        assertThat(headers.get("key1"), notNullValue());, +        assertThat(headers.get("key1").toString(), equalTo("val1"));, +        assertThat(headers.get("key2"), notNullValue());, +        assertThat(headers.get("key2").toString(), equalTo("val 2"));, +    }, +, +    protected static void assertHeaders(TransportMessage<?> message) {, +        assertThat(message.getHeaders(), notNullValue());, +        assertThat(message.getHeaders().size(), is(2));, +        assertThat(message.getHeader("key1"), notNullValue());, +        assertThat(message.getHeader("key1").toString(), equalTo("val1"));, +        assertThat(message.getHeader("key2"), notNullValue());, +        assertThat(message.getHeader("key2").toString(), equalTo("val 2"));, +    }, +, +            assertHeaders(headers);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +    public ClusterStateResponse(ClusterName clusterName, ClusterState clusterState) {, +++ b/src/main/java/org/elasticsearch/client/support/Headers.java, +import org.elasticsearch.transport.TransportMessage;, +        public <M extends TransportMessage<?>> M applyTo(M message) {, +            return message;, +    public <M extends TransportMessage<?>> M applyTo(M message) {, +            message.putHeader(key, headers.get(key));, +        return message;, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +    final Injector injector;, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.client.support.Headers;, +    private final Headers headers;, +, +    public TransportClientNodesService(Settings settings, ClusterName clusterName, TransportService transportService,, +                                       ThreadPool threadPool, Headers headers, Version version) {, +        this.headers = headers;]