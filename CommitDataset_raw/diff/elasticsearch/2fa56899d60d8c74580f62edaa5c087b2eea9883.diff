[+++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java, +import org.elasticsearch.common.xcontent.ToXContent.Params;, +public class SimpleQueryStringBuilder extends QueryBuilder implements BoostableQueryBuilder<SimpleQueryStringBuilder> {, +    private float boost = -1.0f;, +    /** Set the boost of this query. */, +    @Override, +    public SimpleQueryStringBuilder boost(float boost) {, +        this.boost = boost;, +        return this;, +    }, +    , +    /** Returns the boost of this query. */, +    public float boost() {, +        return this.boost;, +    }, +, +        if (boost != -1.0f) {, +            builder.field("boost", boost);, +        }, +, +, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java, +import org.elasticsearch.common.xcontent.ToXContent.Params;, +public class SimpleQueryStringBuilder extends QueryBuilder implements BoostableQueryBuilder<SimpleQueryStringBuilder> {, +    private float boost = -1.0f;, +    /** Set the boost of this query. */, +    @Override, +    public SimpleQueryStringBuilder boost(float boost) {, +        this.boost = boost;, +        return this;, +    }, +    , +    /** Returns the boost of this query. */, +    public float boost() {, +        return this.boost;, +    }, +, +        if (boost != -1.0f) {, +            builder.field("boost", boost);, +        }, +, +, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java, +        float boost = 1.0f; , +                } else if ("boost".equals(currentFieldName)) {, +                    boost = parser.floatValue();, +, +        if (query != null) {, +            query.setBoost(boost);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java, +import org.elasticsearch.common.xcontent.ToXContent.Params;, +public class SimpleQueryStringBuilder extends QueryBuilder implements BoostableQueryBuilder<SimpleQueryStringBuilder> {, +    private float boost = -1.0f;, +    /** Set the boost of this query. */, +    @Override, +    public SimpleQueryStringBuilder boost(float boost) {, +        this.boost = boost;, +        return this;, +    }, +    , +    /** Returns the boost of this query. */, +    public float boost() {, +        return this.boost;, +    }, +, +        if (boost != -1.0f) {, +            builder.field("boost", boost);, +        }, +, +, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java, +        float boost = 1.0f; , +                } else if ("boost".equals(currentFieldName)) {, +                    boost = parser.floatValue();, +, +        if (query != null) {, +            query.setBoost(boost);, +        }, +, +++ b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringTests.java, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +        // Tests boost value setting. In this case doc 1 should always be ranked above the other, +        // two matches., +        searchResponse = client().prepareSearch().setQuery(, +                boolQuery(), +                    .should(simpleQueryStringQuery("\"foo bar\"").boost(10.0f)), +                    .should(termQuery("body", "eggplant"))).get();, +        assertHitCount(searchResponse, 2l);, +        assertFirstHit(searchResponse, hasId("3"));, +]