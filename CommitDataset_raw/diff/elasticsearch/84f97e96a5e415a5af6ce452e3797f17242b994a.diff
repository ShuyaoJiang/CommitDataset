[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +            // we only release search context that we did not fetch from if we are not scrolling, +            if (request.scroll() == null) {, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +            // we only release search context that we did not fetch from if we are not scrolling, +            if (request.scroll() == null) {, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +        // clean the current scope (we processed it, also handles scrolling since we don't want to, +        // do it again), +        if (scopeCollectors != null) {, +            scopeCollectors.remove(processingScope);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +            // we only release search context that we did not fetch from if we are not scrolling, +            if (request.scroll() == null) {, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +        // clean the current scope (we processed it, also handles scrolling since we don't want to, +        // do it again), +        if (scopeCollectors != null) {, +            scopeCollectors.remove(processingScope);, +        }, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/indices/template/SimpleIndexTemplateTests.java, +        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +            // we only release search context that we did not fetch from if we are not scrolling, +            if (request.scroll() == null) {, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +        // clean the current scope (we processed it, also handles scrolling since we don't want to, +        // do it again), +        if (scopeCollectors != null) {, +            scopeCollectors.remove(processingScope);, +        }, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/indices/template/SimpleIndexTemplateTests.java, +        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();, +, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/search/scroll/SearchScrollTests.java, +import org.elasticsearch.action.search.SearchType;, +, +    @Test public void testSimpleScrollQueryThenFetchSmallSizeUnevenDistribution() throws Exception {, +        try {, +            client.admin().indices().prepareDelete("test").execute().actionGet();, +        } catch (Exception e) {, +            // ignore, +        }, +        client.admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 3)).execute().actionGet();, +        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();, +, +        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();, +, +        for (int i = 0; i < 100; i++) {, +            String routing = "0";, +            if (i > 90) {, +                routing = "1";, +            } else if (i > 60) {, +                routing = "2";, +            }, +            client.prepareIndex("test", "type1", Integer.toString(i)).setSource("field", i).setRouting(routing).execute().actionGet();, +        }, +, +        client.admin().indices().prepareRefresh().execute().actionGet();, +, +        SearchResponse searchResponse = client.prepareSearch(), +                .setSearchType(SearchType.QUERY_THEN_FETCH), +                .setQuery(matchAllQuery()), +                .setSize(3), +                .setScroll(TimeValue.timeValueMinutes(2)), +                .addSort("field", SortOrder.ASC), +                .execute().actionGet();, +, +        long counter = 0;, +, +        assertThat(searchResponse.hits().getTotalHits(), equalTo(100l));, +        assertThat(searchResponse.hits().hits().length, equalTo(3));, +        for (SearchHit hit : searchResponse.hits()) {, +            assertThat(((Number) hit.sortValues()[0]).longValue(), equalTo(counter++));, +        }, +, +        for (int i = 0; i < 32; i++) {, +            searchResponse = client.prepareSearchScroll(searchResponse.scrollId()), +                    .setScroll(TimeValue.timeValueMinutes(2)), +                    .execute().actionGet();, +, +            assertThat(searchResponse.hits().getTotalHits(), equalTo(100l));, +            assertThat(searchResponse.hits().hits().length, equalTo(3));, +            for (SearchHit hit : searchResponse.hits()) {, +                assertThat(((Number) hit.sortValues()[0]).longValue(), equalTo(counter++));, +            }, +        }, +, +        // and now, the last one is one, +        searchResponse = client.prepareSearchScroll(searchResponse.scrollId()), +                .setScroll(TimeValue.timeValueMinutes(2)), +                .execute().actionGet();, +, +        assertThat(searchResponse.hits().getTotalHits(), equalTo(100l));]