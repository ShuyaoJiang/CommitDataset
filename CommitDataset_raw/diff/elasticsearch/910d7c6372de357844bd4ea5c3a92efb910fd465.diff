[+++ b/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserPasswdStore.java, +import org.elasticsearch.shield.support.NoOpLogger;, +    private volatile ImmutableMap<String, char[]> users;, +        users = parseFileLenient(file, logger);, +        if (users.isEmpty() && logger.isDebugEnabled()) {, +    int usersCount() {, +        return users.size();, +    }, +, +        if (users == null) {, +        char[] hash = users.get(username);, +        return hash != null && hasher.verify(password, hash);, +     * Internally in this class, we try to load the file, but if for some reason we can't, we're being more lenient by, +     * logging the error and skipping all users. This is aligned with how we handle other auto-loaded files in shield., +     */, +    static ImmutableMap<String, char[]> parseFileLenient(Path path, ESLogger logger) {, +        try {, +            return parseFile(path, logger);, +        } catch (Throwable t) {, +            logger.error("failed to parse users file [{}]. skipping/removing all users...", t, path.toAbsolutePath());, +            return ImmutableMap.of();, +        }, +    }, +, +    /**, +        if (logger == null) {, +            logger = NoOpLogger.INSTANCE;, +        logger.trace("reading users file [{}]...", path.toAbsolutePath());, +, +        if (usersMap.isEmpty()){, +                logger.info("users file [{}] changed. updating users... )", file.getAbsolutePath());, +                users = parseFileLenient(file.toPath(), logger);, +++ b/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserPasswdStore.java, +import org.elasticsearch.shield.support.NoOpLogger;, +    private volatile ImmutableMap<String, char[]> users;, +        users = parseFileLenient(file, logger);, +        if (users.isEmpty() && logger.isDebugEnabled()) {, +    int usersCount() {, +        return users.size();, +    }, +, +        if (users == null) {, +        char[] hash = users.get(username);, +        return hash != null && hasher.verify(password, hash);, +     * Internally in this class, we try to load the file, but if for some reason we can't, we're being more lenient by, +     * logging the error and skipping all users. This is aligned with how we handle other auto-loaded files in shield., +     */, +    static ImmutableMap<String, char[]> parseFileLenient(Path path, ESLogger logger) {, +        try {, +            return parseFile(path, logger);, +        } catch (Throwable t) {, +            logger.error("failed to parse users file [{}]. skipping/removing all users...", t, path.toAbsolutePath());, +            return ImmutableMap.of();, +        }, +    }, +, +    /**, +        if (logger == null) {, +            logger = NoOpLogger.INSTANCE;, +        logger.trace("reading users file [{}]...", path.toAbsolutePath());, +, +        if (usersMap.isEmpty()){, +                logger.info("users file [{}] changed. updating users... )", file.getAbsolutePath());, +                users = parseFileLenient(file.toPath(), logger);, +++ b/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserRolesStore.java, +import org.elasticsearch.shield.support.NoOpLogger;, +        userRoles = parseFileLenient(file, logger);, +    int entriesCount() {, +        return userRoles.size();, +    }, +, +     * Internally in this class, we try to load the file, but if for some reason we can't, we're being more lenient by, +     * logging the error and skipping all enries. This is aligned with how we handle other auto-loaded files in shield., +     */, +    static ImmutableMap<String, String[]> parseFileLenient(Path path, ESLogger logger) {, +        try {, +            return parseFile(path, logger);, +        } catch (Throwable t) {, +            logger.error("failed to parse users_roles file [{}]. skipping/removing all entries...", t, path.toAbsolutePath());, +            return ImmutableMap.of();, +        }, +    }, +, +    /**, +        if (logger == null) {, +            logger = NoOpLogger.INSTANCE;, +        logger.trace("reading users_roles file [{}]...", path.toAbsolutePath());, +, +        ImmutableMap.Builder<String, String[]> builder = ImmutableMap.builder();, +            builder.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));, +        ImmutableMap<String, String[]> usersRoles = builder.build();, +        if (usersRoles.isEmpty()){, +            logger.warn("no entries found in users_roles file [{}]. use bin/shield/esusers to add users and role mappings", path.toAbsolutePath());, +        }, +, +        return usersRoles;, +                logger.info("users_roles file [{}] changed. updating users roles...", file.getAbsolutePath());, +                userRoles = parseFileLenient(file.toPath(), logger);, +++ b/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserPasswdStore.java, +import org.elasticsearch.shield.support.NoOpLogger;]