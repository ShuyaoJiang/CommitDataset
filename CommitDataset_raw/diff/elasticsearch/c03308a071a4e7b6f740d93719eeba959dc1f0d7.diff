[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/GetUsersResponse.java, +    public static final ConstructingObjectParser<ParsedUser, String> USER_PARSER = new ConstructingObjectParser<>("user_info", true,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/GetUsersResponse.java, +    public static final ConstructingObjectParser<ParsedUser, String> USER_PARSER = new ConstructingObjectParser<>("user_info", true,, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/GetUsersResponseTests.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.test.XContentTestUtils;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.function.Predicate;, +import static org.elasticsearch.test.AbstractXContentTestCase.xContentTester;, +, +        xContentTester(this::createParser,, +            GetUsersResponseTests::createTestInstance,, +            this::toXContent,, +            GetUsersResponse::fromXContent), +            .supportsUnknownFields(false), +            .assertToXContentEquivalence(false), +            .test();, +    private XContentBuilder toXContentUser(User user, boolean enabled, XContentBuilder builder) throws IOException {, +        XContentBuilder tempBuilder = JsonXContent.contentBuilder();, +        tempBuilder.startObject();, +        tempBuilder.field("username", user.getUsername());, +        tempBuilder.array("roles", user.getRoles().toArray());, +        tempBuilder.field("full_name", user.getFullName());, +        tempBuilder.field("email", user.getEmail());, +        tempBuilder.field("metadata", user.getMetadata());, +        tempBuilder.field("enabled", enabled);, +        tempBuilder.endObject();, +, +        // This sub object should support unknown fields, but metadata cannot contain complex extra objects or it will fail, +        Predicate<String> excludeFilter = path -> path.equals("metadata");, +        BytesReference newBytes = XContentTestUtils.insertRandomFields(XContentType.JSON, BytesReference.bytes(tempBuilder),, +            excludeFilter, random());, +        builder.rawValue(newBytes.streamInput(), XContentType.JSON);, +        return builder;, +, +    private XContentBuilder toXContent(GetUsersResponse response, XContentBuilder builder) throws IOException {, +        builder.startObject();, +, +        List<User> disabledUsers = new ArrayList<>(response.getUsers());, +        disabledUsers.removeAll(response.getEnabledUsers());, +, +        for (User user : disabledUsers) {, +            builder.field(user.getUsername());, +            toXContentUser(user, false, builder);, +        }, +        for (User user : response.getEnabledUsers()) {, +            builder.field(user.getUsername());, +            toXContentUser(user, true, builder);, +        }, +        builder.endObject();, +        return builder;, +    }, +, +    private static GetUsersResponse createTestInstance() {, +        final Set<User> users = new HashSet<>();, +        final Set<User> enabledUsers = new HashSet<>();, +        Map<String, Object> metadata = new HashMap<>();, +        metadata.put(randomAlphaOfLengthBetween(1, 5), randomInt());, +, +        final User user1 = new User(randomAlphaOfLength(8),, +            Arrays.asList(new String[] {randomAlphaOfLength(5), randomAlphaOfLength(5)}),, +            metadata, randomAlphaOfLength(10), null);, +        users.add(user1);, +        enabledUsers.add(user1);, +        Map<String, Object> metadata2 = new HashMap<>();, +        metadata2.put(randomAlphaOfLengthBetween(1, 5), randomInt());, +        metadata2.put(randomAlphaOfLengthBetween(1, 5), randomBoolean());, +, +        final User user2 = new User(randomAlphaOfLength(8),, +            Arrays.asList(new String[] {randomAlphaOfLength(5), randomAlphaOfLength(5)}),, +            metadata2, randomAlphaOfLength(10), null);, +        users.add(user2);, +        return new GetUsersResponse(users, enabledUsers);]