[+++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +        // TODO: this is slow, make it a positive query, +        return new BooleanQuery.Builder(), +                .add(new MatchAllDocsQuery(), Occur.FILTER), +                .add(newNestedFilter(), Occur.MUST_NOT), +                .build();, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/Queries.java, +        // TODO: this is slow, make it a positive query, +        return new BooleanQuery.Builder(), +                .add(new MatchAllDocsQuery(), Occur.FILTER), +                .add(newNestedFilter(), Occur.MUST_NOT), +                .build();, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/plain/ConstantIndexFieldData.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.fielddata.plain;, +, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.index.DocValues;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.SortedDocValues;, +import org.apache.lucene.index.SortedSetDocValues;, +import org.apache.lucene.search.SortField;, +import org.apache.lucene.util.Accountable;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.fielddata.AbstractSortedDocValues;, +import org.elasticsearch.index.fielddata.AtomicOrdinalsFieldData;, +import org.elasticsearch.index.fielddata.IndexFieldData;, +import org.elasticsearch.index.fielddata.IndexFieldDataCache;, +import org.elasticsearch.index.fielddata.IndexOrdinalsFieldData;, +import org.elasticsearch.index.fielddata.fieldcomparator.BytesRefFieldComparatorSource;, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.mapper.TextFieldMapper;, +import org.elasticsearch.indices.breaker.CircuitBreakerService;, +import org.elasticsearch.search.MultiValueMode;, +, +import java.io.IOException;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.function.Function;, +, +public class ConstantIndexFieldData extends AbstractIndexOrdinalsFieldData {, +, +    public static class Builder implements IndexFieldData.Builder {, +, +        private final Function<MapperService, String> valueFunction;, +, +        public Builder(Function<MapperService, String> valueFunction) {, +            this.valueFunction = valueFunction;, +        }, +, +        @Override, +        public IndexFieldData<?> build(IndexSettings indexSettings, MappedFieldType fieldType, IndexFieldDataCache cache,, +                CircuitBreakerService breakerService, MapperService mapperService) {, +            return new ConstantIndexFieldData(indexSettings, fieldType.name(), valueFunction.apply(mapperService));, +        }, +, +    }, +, +    private static class ConstantAtomicFieldData extends AbstractAtomicOrdinalsFieldData {, +, +        private final String value;, +, +        ConstantAtomicFieldData(String value) {, +            super(DEFAULT_SCRIPT_FUNCTION);, +            this.value = value;, +        }, +, +        @Override, +        public long ramBytesUsed() {, +            return 0;, +        }, +, +        @Override, +        public Collection<Accountable> getChildResources() {, +            return Collections.emptyList();, +        }, +, +        @Override, +        public SortedSetDocValues getOrdinalsValues() {]