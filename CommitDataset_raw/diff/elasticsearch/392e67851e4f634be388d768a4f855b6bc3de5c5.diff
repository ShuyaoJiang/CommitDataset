[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/interceptor/FieldAndDocumentLevelSecurityRequestInterceptor.java, +        final IndicesAccessControl indicesAccessControl = threadContext.getTransient(AuthorizationService.INDICES_PERMISSIONS_KEY);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/interceptor/FieldAndDocumentLevelSecurityRequestInterceptor.java, +        final IndicesAccessControl indicesAccessControl = threadContext.getTransient(AuthorizationService.INDICES_PERMISSIONS_KEY);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/accesscontrol/IndicesAccessControl.java, +, +        @Override, +        public String toString() {, +            return "IndexAccessControl{" +, +                    "granted=" + granted +, +                    ", fieldPermissions=" + fieldPermissions +, +                    ", queries=" + queries +, +                    '}';, +        }, +    }, +, +    @Override, +    public String toString() {, +        return "IndicesAccessControl{" +, +                "granted=" + granted +, +                ", indexPermissions=" + indexPermissions +, +                '}';, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/interceptor/FieldAndDocumentLevelSecurityRequestInterceptor.java, +        final IndicesAccessControl indicesAccessControl = threadContext.getTransient(AuthorizationService.INDICES_PERMISSIONS_KEY);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/accesscontrol/IndicesAccessControl.java, +, +        @Override, +        public String toString() {, +            return "IndexAccessControl{" +, +                    "granted=" + granted +, +                    ", fieldPermissions=" + fieldPermissions +, +                    ", queries=" + queries +, +                    '}';, +        }, +    }, +, +    @Override, +    public String toString() {, +        return "IndicesAccessControl{" +, +                "granted=" + granted +, +                ", indexPermissions=" + indexPermissions +, +                '}';, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/permission/IndicesPermission.java, +                        fieldPermissionsByIndex.put(indexOrAlias, fieldPermissions);, +                        roleQueriesByIndex.putIfAbsent(indexOrAlias, permissions);, +                grantedBuilder.put(indexOrAlias, granted);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/interceptor/FieldAndDocumentLevelSecurityRequestInterceptor.java, +        final IndicesAccessControl indicesAccessControl = threadContext.getTransient(AuthorizationService.INDICES_PERMISSIONS_KEY);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/accesscontrol/IndicesAccessControl.java, +, +        @Override, +        public String toString() {, +            return "IndexAccessControl{" +, +                    "granted=" + granted +, +                    ", fieldPermissions=" + fieldPermissions +, +                    ", queries=" + queries +, +                    '}';, +        }, +    }, +, +    @Override, +    public String toString() {, +        return "IndicesAccessControl{" +, +                "granted=" + granted +, +                ", indexPermissions=" + indexPermissions +, +                '}';, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/permission/IndicesPermission.java, +                        fieldPermissionsByIndex.put(indexOrAlias, fieldPermissions);, +                        roleQueriesByIndex.putIfAbsent(indexOrAlias, permissions);, +                grantedBuilder.put(indexOrAlias, granted);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/authz/accesscontrol/IndicesPermissionTests.java, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.index.query.QueryBuilders;, +import java.util.Arrays;, +import java.util.HashSet;, +        assertThat(permissions.getIndexPermissions("_alias"), notNullValue());, +        assertTrue(permissions.getIndexPermissions("_alias").getFieldPermissions().grantsAccessTo("_field"));, +        assertTrue(permissions.getIndexPermissions("_alias").getFieldPermissions().hasFieldLevelSecurity());, +        assertThat(permissions.getIndexPermissions("_alias").getQueries().size(), equalTo(1));, +        assertThat(permissions.getIndexPermissions("_alias").getQueries(), equalTo(query));, +, +, +        assertThat(permissions.getIndexPermissions("_alias"), notNullValue());, +        assertFalse(permissions.getIndexPermissions("_alias").getFieldPermissions().hasFieldLevelSecurity());, +        assertThat(permissions.getIndexPermissions("_alias").getQueries().size(), equalTo(1));, +        assertThat(permissions.getIndexPermissions("_alias").getQueries(), equalTo(query));, +, +        IndexMetaData.Builder imbBuilder1 = IndexMetaData.builder("_index_1"), +                .settings(Settings.builder(), +                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1), +                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1), +                        .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT), +                ), +                .putAlias(AliasMetaData.builder("_alias"));, +        md = MetaData.builder(md).put(imbBuilder1).build();, +, +, +        // match all fields with more than one permission, +        Set<BytesReference> fooQuery = Collections.singleton(new BytesArray("{foo}"));, +        allFields = randomFrom(new String[]{"*"}, new String[]{"foo", "*"},]