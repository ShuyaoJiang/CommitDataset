[+++ b/server/src/main/java/org/elasticsearch/search/profile/AbstractProfileBreakdown.java, +    public void setTimer(T timing, Timer timer) {, +        timings[timing.ordinal()] = timer;, +    }, +, +++ b/server/src/main/java/org/elasticsearch/search/profile/AbstractProfileBreakdown.java, +    public void setTimer(T timing, Timer timer) {, +        timings[timing.ordinal()] = timer;, +    }, +, +++ b/server/src/main/java/org/elasticsearch/search/profile/query/ProfileScorer.java, +import org.apache.lucene.search.ConstantScoreQuery;, +import org.apache.lucene.search.Scorable;, +, +    private final boolean isConstantScoreQuery;, +, +        ProfileScorer profileScorer = null;, +        if (w.getQuery() instanceof ConstantScoreQuery && scorer instanceof ProfileScorer) {, +            //Case when we have a totalHits query and it is not cached, +            profileScorer = (ProfileScorer) scorer;, +        } else if (w.getQuery() instanceof ConstantScoreQuery && scorer.getChildren().size() == 1) {, +            //Case when we have a top N query. If the scorer has no children, it is because it is cached, +            //and in that case we do not do any special treatment, +            Scorable childScorer = scorer.getChildren().iterator().next().child;, +            if (childScorer instanceof ProfileScorer) {, +                profileScorer = (ProfileScorer) childScorer;, +            }, +        }, +        if (profileScorer != null) {, +            isConstantScoreQuery = true;, +            profile.setTimer(QueryTimingType.NEXT_DOC, profileScorer.nextDocTimer);, +            profile.setTimer(QueryTimingType.ADVANCE, profileScorer.advanceTimer);, +            profile.setTimer(QueryTimingType.MATCH, profileScorer.matchTimer);, +        } else {, +            isConstantScoreQuery = false;, +        }, +        if (isConstantScoreQuery) {, +            return scorer.iterator();, +        }, +        if (isConstantScoreQuery) {, +            return scorer.twoPhaseIterator();, +        }, +++ b/server/src/main/java/org/elasticsearch/search/profile/AbstractProfileBreakdown.java, +    public void setTimer(T timing, Timer timer) {, +        timings[timing.ordinal()] = timer;, +    }, +, +++ b/server/src/main/java/org/elasticsearch/search/profile/query/ProfileScorer.java, +import org.apache.lucene.search.ConstantScoreQuery;, +import org.apache.lucene.search.Scorable;, +, +    private final boolean isConstantScoreQuery;, +, +        ProfileScorer profileScorer = null;, +        if (w.getQuery() instanceof ConstantScoreQuery && scorer instanceof ProfileScorer) {, +            //Case when we have a totalHits query and it is not cached, +            profileScorer = (ProfileScorer) scorer;, +        } else if (w.getQuery() instanceof ConstantScoreQuery && scorer.getChildren().size() == 1) {, +            //Case when we have a top N query. If the scorer has no children, it is because it is cached, +            //and in that case we do not do any special treatment, +            Scorable childScorer = scorer.getChildren().iterator().next().child;, +            if (childScorer instanceof ProfileScorer) {, +                profileScorer = (ProfileScorer) childScorer;, +            }, +        }, +        if (profileScorer != null) {, +            isConstantScoreQuery = true;, +            profile.setTimer(QueryTimingType.NEXT_DOC, profileScorer.nextDocTimer);, +            profile.setTimer(QueryTimingType.ADVANCE, profileScorer.advanceTimer);, +            profile.setTimer(QueryTimingType.MATCH, profileScorer.matchTimer);, +        } else {, +            isConstantScoreQuery = false;, +        }, +        if (isConstantScoreQuery) {, +            return scorer.iterator();, +        }, +        if (isConstantScoreQuery) {, +            return scorer.twoPhaseIterator();, +        }, +++ b/server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java, +import org.apache.lucene.search.ConstantScoreQuery;, +import org.apache.lucene.search.QueryCachingPolicy;, +    public void testConstantScoreQuery() throws IOException {, +        QueryProfiler profiler = new QueryProfiler();, +        searcher.setProfiler(profiler);, +        Query query = new ConstantScoreQuery(new TermQuery(new Term("foo", "bar")));, +        searcher.search(query, 1);, +        List<ProfileResult> results = profiler.getTree();, +        assertEquals(1, results.size());, +        Map<String, Long> breakdownConstantScoreQuery = results.get(0).getTimeBreakdown();, +        assertEquals(1, results.get(0).getProfiledChildren().size());, +        Map<String, Long> breakdownTermQuery = results.get(0).getProfiledChildren().get(0).getTimeBreakdown();, +, +        assertThat(breakdownConstantScoreQuery.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));, +        assertThat(breakdownConstantScoreQuery.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));, +        assertThat(breakdownConstantScoreQuery.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));, +        assertThat(breakdownConstantScoreQuery.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));, +        assertThat(breakdownConstantScoreQuery.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L));, +        assertThat(breakdownConstantScoreQuery.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L));, +]