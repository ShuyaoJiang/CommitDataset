[+++ b/src/main/java/org/elasticsearch/index/fielddata/plain/PackedArrayIndexFieldData.java, +, +                final float acceptableOverheadRatio = fieldDataType.getSettings().getAsFloat("acceptable_overhead_ratio", PackedInts.DEFAULT);, +                final int pageSize = fieldDataType.getSettings().getAsInt("single_value_page_size", 1024);, +, +                if (formatHint == null) {, +                    formatHint = chooseStorageFormat(reader, values, build, ordinals, minValue, maxValue, acceptableOverheadRatio, pageSize);, +                }, +, +                logger.trace("single value format for field [{}] set to [{}]", getFieldNames().fullName(), formatHint);, +, +                switch (formatHint) {, +                    case PACKED:, +                            missingValue -= minValue;, +                        if (docsWithValues != null) {, +, +                                long value = values.get(ord - 1);, +                                sValues.set(i, value - minValue);, +                                                                     long minValue, long maxValue, float acceptableOverheadRatio, int pageSize) {, +        CommonSettings.MemoryStorageFormat format;, +, +        // estimate memory usage for a single packed array, +        long packedDelta = maxValue - minValue + 1; // allow for a missing value, +        // valuesDelta can be negative if the difference between max and min values overflows the positive side of longs., +        int bitsRequired = packedDelta < 0 ? 64 : PackedInts.bitsRequired(packedDelta);, +        PackedInts.FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(reader.maxDoc(), bitsRequired, acceptableOverheadRatio);, +, +        // ordinal memory usage, +                pagedSingleValuesSize += getPageMemoryUsage(values, acceptableOverheadRatio, pageSize, pageMinOrdinal, pageMaxOrdinal);, +            pagedSingleValuesSize += getPageMemoryUsage(values, acceptableOverheadRatio, pageSize, pageMinOrdinal, pageMaxOrdinal);, +    private long getPageMemoryUsage(MonotonicAppendingLongBuffer values, float acceptableOverheadRatio, int pageSize, long pageMinOrdinal, long pageMaxOrdinal) {, +        int bitsRequired;, +        long pageMemorySize = 0;, +        PackedInts.FormatAndBits formatAndBits;, +        if (pageMaxOrdinal == Long.MIN_VALUE) {, +            // empty page - will use the null reader which just stores size, +            pageMemorySize += RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + RamUsageEstimator.NUM_BYTES_INT);, +, +        } else {, +            long pageMinValue = values.get(pageMinOrdinal - 1);, +            long pageMaxValue = values.get(pageMaxOrdinal - 1);, +            long pageDelta = pageMaxValue - pageMinValue;, +            if (pageDelta != 0) {, +                bitsRequired = pageDelta < 0 ? 64 : PackedInts.bitsRequired(pageDelta);, +                formatAndBits = PackedInts.fastestFormatAndBits(pageSize, bitsRequired, acceptableOverheadRatio);, +                pageMemorySize += formatAndBits.format.longCount(PackedInts.VERSION_CURRENT, pageSize, formatAndBits.bitsPerValue) * RamUsageEstimator.NUM_BYTES_LONG;, +                pageMemorySize += RamUsageEstimator.NUM_BYTES_LONG; // min value per page storage, +            } else {, +                // empty page, +                pageMemorySize += RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + RamUsageEstimator.NUM_BYTES_INT);, +            }, +        }, +        return pageMemorySize;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/PackedArrayIndexFieldData.java, +, +                final float acceptableOverheadRatio = fieldDataType.getSettings().getAsFloat("acceptable_overhead_ratio", PackedInts.DEFAULT);, +                final int pageSize = fieldDataType.getSettings().getAsInt("single_value_page_size", 1024);, +, +                if (formatHint == null) {, +                    formatHint = chooseStorageFormat(reader, values, build, ordinals, minValue, maxValue, acceptableOverheadRatio, pageSize);, +                }, +, +                logger.trace("single value format for field [{}] set to [{}]", getFieldNames().fullName(), formatHint);, +, +                switch (formatHint) {, +                    case PACKED:, +                            missingValue -= minValue;, +                        if (docsWithValues != null) {, +, +                                long value = values.get(ord - 1);, +                                sValues.set(i, value - minValue);, +                                                                     long minValue, long maxValue, float acceptableOverheadRatio, int pageSize) {, +        CommonSettings.MemoryStorageFormat format;, +, +        // estimate memory usage for a single packed array, +        long packedDelta = maxValue - minValue + 1; // allow for a missing value, +        // valuesDelta can be negative if the difference between max and min values overflows the positive side of longs., +        int bitsRequired = packedDelta < 0 ? 64 : PackedInts.bitsRequired(packedDelta);, +        PackedInts.FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(reader.maxDoc(), bitsRequired, acceptableOverheadRatio);, +, +        // ordinal memory usage, +                pagedSingleValuesSize += getPageMemoryUsage(values, acceptableOverheadRatio, pageSize, pageMinOrdinal, pageMaxOrdinal);, +            pagedSingleValuesSize += getPageMemoryUsage(values, acceptableOverheadRatio, pageSize, pageMinOrdinal, pageMaxOrdinal);, +    private long getPageMemoryUsage(MonotonicAppendingLongBuffer values, float acceptableOverheadRatio, int pageSize, long pageMinOrdinal, long pageMaxOrdinal) {, +        int bitsRequired;, +        long pageMemorySize = 0;, +        PackedInts.FormatAndBits formatAndBits;, +        if (pageMaxOrdinal == Long.MIN_VALUE) {, +            // empty page - will use the null reader which just stores size, +            pageMemorySize += RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + RamUsageEstimator.NUM_BYTES_INT);, +, +        } else {, +            long pageMinValue = values.get(pageMinOrdinal - 1);, +            long pageMaxValue = values.get(pageMaxOrdinal - 1);, +            long pageDelta = pageMaxValue - pageMinValue;, +            if (pageDelta != 0) {, +                bitsRequired = pageDelta < 0 ? 64 : PackedInts.bitsRequired(pageDelta);, +                formatAndBits = PackedInts.fastestFormatAndBits(pageSize, bitsRequired, acceptableOverheadRatio);]