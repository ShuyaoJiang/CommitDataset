[+++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/randomizedtesting/RandomizedTestingTask.groovy, +    PatternFilterable patternSet = new PatternSet(), +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/randomizedtesting/RandomizedTestingTask.groovy, +    PatternFilterable patternSet = new PatternSet(), +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/randomizedtesting/TestLoggingConfiguration.groovy, +    /** Display mode for output streams. */, +    static enum OutputMode {, +        /** Always display the output emitted from tests. */, +        ALWAYS,, +        /**, +         * Display the output only if a test/ suite failed. This requires internal buffering, +         * so the output will be shown only after a test completes., +         */, +        ONERROR,, +        /** Don't display the output, even on test failures. */, +        NEVER, +    }, +, +    OutputMode outputMode = OutputMode.ONERROR, +, +    void outputMode(String mode) {, +        outputMode = mode.toUpperCase() as OutputMode, +    }, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/randomizedtesting/RandomizedTestingTask.groovy, +    PatternFilterable patternSet = new PatternSet(), +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/randomizedtesting/TestLoggingConfiguration.groovy, +    /** Display mode for output streams. */, +    static enum OutputMode {, +        /** Always display the output emitted from tests. */, +        ALWAYS,, +        /**, +         * Display the output only if a test/ suite failed. This requires internal buffering, +         * so the output will be shown only after a test completes., +         */, +        ONERROR,, +        /** Don't display the output, even on test failures. */, +        NEVER, +    }, +, +    OutputMode outputMode = OutputMode.ONERROR, +, +    void outputMode(String mode) {, +        outputMode = mode.toUpperCase() as OutputMode, +    }, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/randomizedtesting/TestReportLogger.groovy, +import static com.carrotsearch.gradle.randomizedtesting.TestLoggingConfiguration.OutputMode, +        if (config.outputMode == OutputMode.NEVER) {, +        final boolean emitOutput = config.outputMode == OutputMode.ALWAYS && isPassthrough() == false ||, +                                   config.outputMode == OutputMode.ONERROR && e.isSuccessful() == false, +        return forkedJvmCount == 1 && config.outputMode == OutputMode.ALWAYS && logger.isInfoEnabled(), +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/randomizedtesting/RandomizedTestingTask.groovy, +    PatternFilterable patternSet = new PatternSet(), +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/randomizedtesting/TestLoggingConfiguration.groovy, +    /** Display mode for output streams. */, +    static enum OutputMode {, +        /** Always display the output emitted from tests. */, +        ALWAYS,, +        /**, +         * Display the output only if a test/ suite failed. This requires internal buffering, +         * so the output will be shown only after a test completes., +         */, +        ONERROR,, +        /** Don't display the output, even on test failures. */, +        NEVER, +    }, +, +    OutputMode outputMode = OutputMode.ONERROR, +, +    void outputMode(String mode) {, +        outputMode = mode.toUpperCase() as OutputMode, +    }, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/randomizedtesting/TestReportLogger.groovy, +import static com.carrotsearch.gradle.randomizedtesting.TestLoggingConfiguration.OutputMode, +        if (config.outputMode == OutputMode.NEVER) {, +        final boolean emitOutput = config.outputMode == OutputMode.ALWAYS && isPassthrough() == false ||, +                                   config.outputMode == OutputMode.ONERROR && e.isSuccessful() == false, +        return forkedJvmCount == 1 && config.outputMode == OutputMode.ALWAYS && logger.isInfoEnabled(), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                outputMode System.getProperty('tests.output', 'onerror'), +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/randomizedtesting/RandomizedTestingTask.groovy]