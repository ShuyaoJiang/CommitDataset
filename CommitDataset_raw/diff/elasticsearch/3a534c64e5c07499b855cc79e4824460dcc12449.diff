[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +                            String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue());, +                            if (error == null) {, +                                logger.warn("ignoring transient setting [{}], [{}]", entry.getKey(), error);, +                            }, +                        } else {, +                            String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue());, +                            if (error == null) {, +                                changed = true;, +                            } else {, +                                logger.warn("ignoring persistent setting [{}], [{}]", entry.getKey(), error);, +                            }, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +                            String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue());, +                            if (error == null) {, +                                logger.warn("ignoring transient setting [{}], [{}]", entry.getKey(), error);, +                            }, +                        } else {, +                            String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue());, +                            if (error == null) {, +                                changed = true;, +                            } else {, +                                logger.warn("ignoring persistent setting [{}], [{}]", entry.getKey(), error);, +                            }, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        final Set<String> errors = Sets.newHashSet();, +        for (Map.Entry<String, String> setting : updatedSettingsBuilder.internalMap().entrySet()) {, +            if (!dynamicSettings.hasDynamicSetting(setting.getKey())) {, +                removedSettings.add(setting.getKey());, +            } else {, +                String error = dynamicSettings.validateDynamicSetting(setting.getKey(), setting.getValue());, +                if (error != null) {, +                    errors.add("[" + setting.getKey() + "] - " + error);, +        }, +, +        if (!errors.isEmpty()) {, +            listener.onFailure(new ElasticSearchIllegalArgumentException("can't process the settings: " + errors.toString()));, +            return;, +        }, +, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +                            String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue());, +                            if (error == null) {, +                                logger.warn("ignoring transient setting [{}], [{}]", entry.getKey(), error);, +                            }, +                        } else {, +                            String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue());, +                            if (error == null) {, +                                changed = true;, +                            } else {, +                                logger.warn("ignoring persistent setting [{}], [{}]", entry.getKey(), error);, +                            }, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        final Set<String> errors = Sets.newHashSet();, +        for (Map.Entry<String, String> setting : updatedSettingsBuilder.internalMap().entrySet()) {, +            if (!dynamicSettings.hasDynamicSetting(setting.getKey())) {, +                removedSettings.add(setting.getKey());, +            } else {, +                String error = dynamicSettings.validateDynamicSetting(setting.getKey(), setting.getValue());, +                if (error != null) {, +                    errors.add("[" + setting.getKey() + "] - " + error);, +        }, +, +        if (!errors.isEmpty()) {, +            listener.onFailure(new ElasticSearchIllegalArgumentException("can't process the settings: " + errors.toString()));, +            return;, +        }, +, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +    public void addDynamicSettings(String... settings) {, +    public void addDynamicSetting(String setting, Validator validator) {, +        clusterDynamicSettings.addDynamicSetting(setting, validator);, +    }, +, +, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +                            String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue());, +                            if (error == null) {, +                                logger.warn("ignoring transient setting [{}], [{}]", entry.getKey(), error);, +                            }, +                        } else {, +                            String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue());, +                            if (error == null) {, +                                changed = true;, +                            } else {, +                                logger.warn("ignoring persistent setting [{}], [{}]", entry.getKey(), error);, +                            }, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        final Set<String> errors = Sets.newHashSet();, +        for (Map.Entry<String, String> setting : updatedSettingsBuilder.internalMap().entrySet()) {, +            if (!dynamicSettings.hasDynamicSetting(setting.getKey())) {, +                removedSettings.add(setting.getKey());, +            } else {, +                String error = dynamicSettings.validateDynamicSetting(setting.getKey(), setting.getValue());, +                if (error != null) {, +                    errors.add("[" + setting.getKey() + "] - " + error);, +        }, +, +        if (!errors.isEmpty()) {, +            listener.onFailure(new ElasticSearchIllegalArgumentException("can't process the settings: " + errors.toString()));]