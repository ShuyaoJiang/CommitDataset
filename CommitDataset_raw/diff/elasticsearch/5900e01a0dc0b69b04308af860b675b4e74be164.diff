[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/NodesOperationRequest.java, +import org.elasticsearch.common.unit.TimeValue;, +    private TimeValue timeout;, +, +    public TimeValue timeout() {, +        return this.timeout;, +    }, +, +    public NodesOperationRequest timeout(TimeValue timeout) {, +        this.timeout = timeout;, +        return this;, +    }, +, +        if (in.readBoolean()) {, +            timeout = TimeValue.readTimeValue(in);, +        }, +        if (timeout == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            timeout.writeTo(out);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/NodesOperationRequest.java, +import org.elasticsearch.common.unit.TimeValue;, +    private TimeValue timeout;, +, +    public TimeValue timeout() {, +        return this.timeout;, +    }, +, +    public NodesOperationRequest timeout(TimeValue timeout) {, +        this.timeout = timeout;, +        return this;, +    }, +, +        if (in.readBoolean()) {, +            timeout = TimeValue.readTimeValue(in);, +        }, +        if (timeout == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            timeout.writeTo(out);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, + * @author kimchy (shay.banon), +            TransportRequestOptions transportRequestOptions = TransportRequestOptions.options();, +            if (request.timeout() != null) {, +                transportRequestOptions.withTimeout(request.timeout());, +            }, +                        transportService.sendRequest(node, transportNodeAction(), nodeRequest, transportRequestOptions, new BaseTransportResponseHandler<NodeResponse>() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/NodesOperationRequest.java, +import org.elasticsearch.common.unit.TimeValue;, +    private TimeValue timeout;, +, +    public TimeValue timeout() {, +        return this.timeout;, +    }, +, +    public NodesOperationRequest timeout(TimeValue timeout) {, +        this.timeout = timeout;, +        return this;, +    }, +, +        if (in.readBoolean()) {, +            timeout = TimeValue.readTimeValue(in);, +        }, +        if (timeout == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            timeout.writeTo(out);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, + * @author kimchy (shay.banon), +            TransportRequestOptions transportRequestOptions = TransportRequestOptions.options();, +            if (request.timeout() != null) {, +                transportRequestOptions.withTimeout(request.timeout());, +            }, +                        transportService.sendRequest(node, transportNodeAction(), nodeRequest, transportRequestOptions, new BaseTransportResponseHandler<NodeResponse>() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobReuseExistingNodeAllocation.java, +import org.elasticsearch.common.unit.TimeValue;, +    private final TimeValue listTimeout;, +, +, +        this.listTimeout = componentSettings.getAsTime("list_timeout", TimeValue.timeValueMillis(500));, +            TransportNodesListShardStoreMetaData.NodesStoreFilesMetaData nodesStoreFilesMetaData = transportNodesListShardStoreMetaData.list(shard.shardId(), false, nodes.dataNodes().keySet(), listTimeout).actionGet();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/NodesOperationRequest.java, +import org.elasticsearch.common.unit.TimeValue;, +    private TimeValue timeout;, +, +    public TimeValue timeout() {, +        return this.timeout;, +    }, +, +    public NodesOperationRequest timeout(TimeValue timeout) {, +        this.timeout = timeout;, +        return this;, +    }, +]