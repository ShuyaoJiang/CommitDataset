[+++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java, +import java.util.Comparator;, +        indexService = createIndex("test");, +        String mapper = XContentFactory.jsonBuilder().startObject().startObject("doc"), +        mapperService.merge("doc", new CompressedXContent(mapper), MapperService.MergeReason.MAPPING_UPDATE, false);, +    private void addQueryFieldMappings() throws Exception {, +        String percolatorMapper = XContentFactory.jsonBuilder().startObject().startObject("doc"), +        mapperService.merge("doc", new CompressedXContent(percolatorMapper), MapperService.MergeReason.MAPPING_UPDATE, false);, +        addQueryFieldMappings();, +        DocumentMapper documentMapper = mapperService.documentMapper("doc");, +        fields.sort(Comparator.comparing(IndexableField::binaryValue));, +        addQueryFieldMappings();, +        DocumentMapper documentMapper = mapperService.documentMapper("doc");, +        addQueryFieldMappings();, +        DocumentMapper documentMapper = mapperService.documentMapper("doc");, +        addQueryFieldMappings();, +        addQueryFieldMappings();, +        ParsedDocument doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1", XContentFactory, +        doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1", XContentFactory, +        addQueryFieldMappings();, +            ParsedDocument doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1",, +        addQueryFieldMappings();, +        client().prepareIndex("remote", "doc", "1").setSource("field", "value").get();, +        QueryBuilder queryBuilder = termsLookupQuery("field", new TermsLookup("remote", "doc", "1", "field"));, +        ParsedDocument doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1", XContentFactory, +        addQueryFieldMappings();, +            mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1", XContentFactory, +        addQueryFieldMappings();, +        ParsedDocument doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1", XContentFactory, +            mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1", XContentFactory, +        addQueryFieldMappings();, +        String percolatorMapper = XContentFactory.jsonBuilder().startObject().startObject("doc"), +            mapperService.merge("doc", new CompressedXContent(percolatorMapper), MapperService.MergeReason.MAPPING_UPDATE, true));, +        String typeName = "doc";, +        assertThat(doc.rootDoc().getFields().size(), equalTo(12)); // also includes all other meta fields, +        String typeName = "doc";, +        assertThat(doc.rootDoc().getFields().size(), equalTo(9)); // also includes all other meta fields, +        assertThat(doc.rootDoc().getFields().size(), equalTo(9)); // also includes all other meta fields, +        addQueryFieldMappings();, +        ParsedDocument doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1",, +        doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1",, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java, +import java.util.Comparator;, +        indexService = createIndex("test");, +        String mapper = XContentFactory.jsonBuilder().startObject().startObject("doc"), +        mapperService.merge("doc", new CompressedXContent(mapper), MapperService.MergeReason.MAPPING_UPDATE, false);, +    private void addQueryFieldMappings() throws Exception {, +        String percolatorMapper = XContentFactory.jsonBuilder().startObject().startObject("doc"), +        mapperService.merge("doc", new CompressedXContent(percolatorMapper), MapperService.MergeReason.MAPPING_UPDATE, false);, +        addQueryFieldMappings();, +        DocumentMapper documentMapper = mapperService.documentMapper("doc");, +        fields.sort(Comparator.comparing(IndexableField::binaryValue));, +        addQueryFieldMappings();, +        DocumentMapper documentMapper = mapperService.documentMapper("doc");, +        addQueryFieldMappings();, +        DocumentMapper documentMapper = mapperService.documentMapper("doc");, +        addQueryFieldMappings();, +        addQueryFieldMappings();, +        ParsedDocument doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1", XContentFactory, +        doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1", XContentFactory, +        addQueryFieldMappings();, +            ParsedDocument doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1",, +        addQueryFieldMappings();, +        client().prepareIndex("remote", "doc", "1").setSource("field", "value").get();, +        QueryBuilder queryBuilder = termsLookupQuery("field", new TermsLookup("remote", "doc", "1", "field"));, +        ParsedDocument doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1", XContentFactory, +        addQueryFieldMappings();, +            mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1", XContentFactory, +        addQueryFieldMappings();, +        ParsedDocument doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1", XContentFactory, +            mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1", XContentFactory, +        addQueryFieldMappings();, +        String percolatorMapper = XContentFactory.jsonBuilder().startObject().startObject("doc"), +            mapperService.merge("doc", new CompressedXContent(percolatorMapper), MapperService.MergeReason.MAPPING_UPDATE, true));, +        String typeName = "doc";, +        assertThat(doc.rootDoc().getFields().size(), equalTo(12)); // also includes all other meta fields, +        String typeName = "doc";, +        assertThat(doc.rootDoc().getFields().size(), equalTo(9)); // also includes all other meta fields, +        assertThat(doc.rootDoc().getFields().size(), equalTo(9)); // also includes all other meta fields, +        addQueryFieldMappings();, +        ParsedDocument doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1",, +        doc = mapperService.documentMapper("doc").parse(SourceToParse.source("test", "doc", "1",, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorQuerySearchIT.java, +        createIndex("test1", client().admin().indices().prepareCreate("test1"), +                .addMapping("type", queryFieldName, "type=percolator", "field", "type=keyword"), +        );, +        createIndex("test2", client().admin().indices().prepareCreate("test2"), +            .addMapping("type", queryFieldName, "type=percolator", "second_query_field", "type=percolator", "field", "type=keyword"), +        );, +        createIndex("test3", client().admin().indices().prepareCreate("test3"), +            .addMapping("type", jsonBuilder().startObject().startObject("type").startObject("properties"), +                .startObject("field"), +                .field("type", "keyword"), +                .endObject(), +                .addMapping("type", queryFieldName, "type=percolator", "field", "type=keyword"));, +                .addMapping("type", jsonBuilder().startObject().startObject("type").startObject("properties"), +                        .startObject("field"), +                        .field("type", "keyword"), +                        .endObject(), +        client().prepareIndex("test1", "type", "1")]