[+++ b/buildSrc/src/main/resources/forbidden/third-party-signatures.txt, +++ b/buildSrc/src/main/resources/forbidden/third-party-signatures.txt, +++ b/core/build.gradle, +++ b/buildSrc/src/main/resources/forbidden/third-party-signatures.txt, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressorFactory.java, +            if (isAncient(bytes)) {, +                throw new IllegalStateException("unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?");, +            }, +    /** true if the bytes were compressed with LZF: only used before elasticsearch 2.0 */, +    private static boolean isAncient(BytesReference bytes) {, +        return bytes.length() >= 3 &&, +               bytes.get(0) == 'Z' &&, +               bytes.get(1) == 'V' &&, +               (bytes.get(2) == 0 || bytes.get(2) == 1);, +    }, +, +++ b/buildSrc/src/main/resources/forbidden/third-party-signatures.txt, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressorFactory.java, +            if (isAncient(bytes)) {, +                throw new IllegalStateException("unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?");, +            }, +    /** true if the bytes were compressed with LZF: only used before elasticsearch 2.0 */, +    private static boolean isAncient(BytesReference bytes) {, +        return bytes.length() >= 3 &&, +               bytes.get(0) == 'Z' &&, +               bytes.get(1) == 'V' &&, +               (bytes.get(2) == 0 || bytes.get(2) == 1);, +    }, +, +++ /dev/null, +++ b/buildSrc/src/main/resources/forbidden/third-party-signatures.txt, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressorFactory.java, +            if (isAncient(bytes)) {, +                throw new IllegalStateException("unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?");, +            }, +    /** true if the bytes were compressed with LZF: only used before elasticsearch 2.0 */, +    private static boolean isAncient(BytesReference bytes) {, +        return bytes.length() >= 3 &&, +               bytes.get(0) == 'Z' &&, +               bytes.get(1) == 'V' &&, +               (bytes.get(2) == 0 || bytes.get(2) == 1);, +    }, +, +++ /dev/null, +++ /dev/null, +++ b/buildSrc/src/main/resources/forbidden/third-party-signatures.txt, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressorFactory.java, +            if (isAncient(bytes)) {, +                throw new IllegalStateException("unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?");, +            }, +    /** true if the bytes were compressed with LZF: only used before elasticsearch 2.0 */, +    private static boolean isAncient(BytesReference bytes) {, +        return bytes.length() >= 3 &&, +               bytes.get(0) == 'Z' &&, +               bytes.get(1) == 'V' &&, +               (bytes.get(2) == 0 || bytes.get(2) == 1);, +    }, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/buildSrc/src/main/resources/forbidden/third-party-signatures.txt, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressorFactory.java, +            if (isAncient(bytes)) {, +                throw new IllegalStateException("unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?");, +            }, +    /** true if the bytes were compressed with LZF: only used before elasticsearch 2.0 */, +    private static boolean isAncient(BytesReference bytes) {, +        return bytes.length() >= 3 &&, +               bytes.get(0) == 'Z' &&, +               bytes.get(1) == 'V' &&, +               (bytes.get(2) == 0 || bytes.get(2) == 1);, +    }, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java, +++ b/buildSrc/src/main/resources/forbidden/third-party-signatures.txt, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/common/compress/CompressorFactory.java, +            if (isAncient(bytes)) {, +                throw new IllegalStateException("unsupported compression: index was created before v2.0.0.beta1 and wasn't upgraded?");, +            }, +    /** true if the bytes were compressed with LZF: only used before elasticsearch 2.0 */, +    private static boolean isAncient(BytesReference bytes) {, +        return bytes.length() >= 3 &&, +               bytes.get(0) == 'Z' &&, +               bytes.get(1) == 'V' &&, +               (bytes.get(2) == 0 || bytes.get(2) == 1);, +    }, +, +++ /dev/null, +++ /dev/null, +++ /dev/null]