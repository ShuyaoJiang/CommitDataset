[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/CountRequest.java, +import org.apache.lucene.util.UnicodeUtil;, +import org.elasticsearch.util.xcontent.builder.XContentBuilder;, +    private byte[] querySource;, +    private int querySourceOffset;, +    private int querySourceLength;, +    private boolean querySourceUnsafe;, +, +    private String[] types = Strings.EMPTY_ARRAY;, +    private String queryParserName;, +        if (querySource == null) {, +    @Override protected void beforeLocalFork() {, +        if (querySourceUnsafe) {, +            querySource = Arrays.copyOfRange(querySource, querySourceOffset, querySourceLength);, +            querySourceOffset = 0;, +            querySourceUnsafe = false;, +        }, +    }, +, +    int querySourceOffset() {, +        return querySourceOffset;, +    }, +, +    int querySourceLength() {, +        return querySourceLength;, +    }, +, +        FastByteArrayOutputStream bos = queryBuilder.buildAsUnsafeBytes();, +        this.querySource = bos.unsafeByteArray();, +        this.querySourceOffset = 0;, +        this.querySourceLength = bos.size();, +        this.querySourceUnsafe = true;, +            return query(builder);, +    }, +, +    @Required public CountRequest query(XContentBuilder builder) {, +        try {, +            this.querySource = builder.unsafeBytes();, +            this.querySourceOffset = 0;, +            this.querySourceLength = builder.unsafeBytesLength();, +            this.querySourceUnsafe = true;, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + builder + "]", e);, +        }, +        UnicodeUtil.UTF8Result result = Unicode.fromStringAsUtf8(querySource);, +        this.querySource = result.result;, +        this.querySourceOffset = 0;, +        this.querySourceLength = result.length;, +        this.querySourceUnsafe = true;, +        return this;, +        return query(querySource, 0, querySource.length);, +    }, +, +    /**, +     * The query source to execute., +     */, +    @Required public CountRequest query(byte[] querySource, int offset, int length) {, +        this.querySourceOffset = offset;, +        this.querySourceLength = length;, +        this.querySourceUnsafe = false;, +, +        querySourceUnsafe = false;, +        querySourceOffset = 0;, +        querySourceLength = in.readVInt();, +        querySource = new byte[querySourceLength];, +        in.readFully(querySource);, +, +, +        out.writeVInt(querySourceLength);, +        out.writeBytes(querySource, querySourceOffset, querySourceLength);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/CountRequest.java, +import org.apache.lucene.util.UnicodeUtil;, +import org.elasticsearch.util.xcontent.builder.XContentBuilder;, +    private byte[] querySource;, +    private int querySourceOffset;, +    private int querySourceLength;, +    private boolean querySourceUnsafe;, +, +    private String[] types = Strings.EMPTY_ARRAY;, +    private String queryParserName;, +        if (querySource == null) {, +    @Override protected void beforeLocalFork() {, +        if (querySourceUnsafe) {, +            querySource = Arrays.copyOfRange(querySource, querySourceOffset, querySourceLength);, +            querySourceOffset = 0;, +            querySourceUnsafe = false;, +        }, +    }, +, +    int querySourceOffset() {, +        return querySourceOffset;, +    }, +, +    int querySourceLength() {, +        return querySourceLength;, +    }, +, +        FastByteArrayOutputStream bos = queryBuilder.buildAsUnsafeBytes();, +        this.querySource = bos.unsafeByteArray();]