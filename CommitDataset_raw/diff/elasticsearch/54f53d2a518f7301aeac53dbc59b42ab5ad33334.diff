[+++ b/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +    /**, +     * Given an optional type name and mapping definition, returns the type and a normalized form of the mappings., +     *, +     * The provided mapping definition may or may not contain the type name as the root key in the map. This method, +     * attempts to unwrap the mappings, so that they no longer contain a type name at the root. If no type name can, +     * be found, through either the 'type' parameter or by examining the provided mappings, then an exception will be, +     * thrown., +     *, +     * @param type An optional type name., +     * @param root The mapping definition., +     *, +     * @return A tuple of the form (type, normalized mappings)., +     */, +            if (type != null) {, +                return new Tuple<>(type, root);, +            } else {, +                throw new MapperParsingException("malformed mapping, no type name found");, +        }, +, +++ b/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +    /**, +     * Given an optional type name and mapping definition, returns the type and a normalized form of the mappings., +     *, +     * The provided mapping definition may or may not contain the type name as the root key in the map. This method, +     * attempts to unwrap the mappings, so that they no longer contain a type name at the root. If no type name can, +     * be found, through either the 'type' parameter or by examining the provided mappings, then an exception will be, +     * thrown., +     *, +     * @param type An optional type name., +     * @param root The mapping definition., +     *, +     * @return A tuple of the form (type, normalized mappings)., +     */, +            if (type != null) {, +                return new Tuple<>(type, root);, +            } else {, +                throw new MapperParsingException("malformed mapping, no type name found");, +        }, +, +++ b/server/src/test/java/org/elasticsearch/action/admin/indices/create/CreateIndexIT.java, +import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;, +import org.elasticsearch.cluster.metadata.MappingMetaData;, +import org.elasticsearch.common.xcontent.XContentFactory;, +    public void testNonNestedMappings() throws Exception {, +        assertAcked(prepareCreate("test"), +            .addMapping("_doc", XContentFactory.jsonBuilder().startObject(), +                .startObject("properties"), +                    .startObject("date"), +                        .field("type", "date"), +                    .endObject(), +                .endObject(), +            .endObject()));, +, +        GetMappingsResponse response = client().admin().indices().prepareGetMappings("test").get();, +, +        ImmutableOpenMap<String, MappingMetaData> mappings = response.mappings().get("test");, +        assertNotNull(mappings);, +, +        MappingMetaData metadata = mappings.get("_doc");, +        assertNotNull(metadata);, +        assertFalse(metadata.sourceAsMap().isEmpty());, +    }, +, +    public void testEmptyNestedMappings() throws Exception {, +        assertAcked(prepareCreate("test"), +            .addMapping("_doc", XContentFactory.jsonBuilder().startObject().endObject()));, +, +        GetMappingsResponse response = client().admin().indices().prepareGetMappings("test").get();, +, +        ImmutableOpenMap<String, MappingMetaData> mappings = response.mappings().get("test");, +        assertNotNull(mappings);, +, +        MappingMetaData metadata = mappings.get("_doc");, +        assertNotNull(metadata);, +        assertTrue(metadata.sourceAsMap().isEmpty());, +    }, +, +    public void testEmptyMappings() throws Exception {, +        assertAcked(prepareCreate("test"), +            .addMapping("_doc", XContentFactory.jsonBuilder().startObject(), +                .startObject("_doc").endObject(), +            .endObject()));, +, +        GetMappingsResponse response = client().admin().indices().prepareGetMappings("test").get();, +, +        ImmutableOpenMap<String, MappingMetaData> mappings = response.mappings().get("test");, +        assertNotNull(mappings);, +, +        MappingMetaData metadata = mappings.get("_doc");, +        assertNotNull(metadata);, +        assertTrue(metadata.sourceAsMap().isEmpty());, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +    /**, +     * Given an optional type name and mapping definition, returns the type and a normalized form of the mappings., +     *, +     * The provided mapping definition may or may not contain the type name as the root key in the map. This method, +     * attempts to unwrap the mappings, so that they no longer contain a type name at the root. If no type name can]