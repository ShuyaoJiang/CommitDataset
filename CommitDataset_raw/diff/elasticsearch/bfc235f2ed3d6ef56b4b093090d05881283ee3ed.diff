[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.mapperService(),, +                        indexService.fieldData(), request.shardId().getIndex(), request.shardId().id(), request);, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.mapperService(),, +                        indexService.fieldData(), request.shardId().getIndex(), request.shardId().id(), request);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +        if (parser.currentToken().isValue()) {, +            list.add(supplier.get()); // single value, +        } else {, +                if (parser.currentToken().isValue()) {, +                } else {, +                    throw new IllegalStateException("expected value but got [" + parser.currentToken() + "]");, +                }, +            }, +    public <T> void declareObjectOrDefault(BiConsumer<Value, T> consumer, BiFunction<XContentParser, Context, T> objectParser, Supplier<T> defaultValue, ParseField field) {, +        declareField((p, v, c) -> {, +            if (p.currentToken() == XContentParser.Token.VALUE_BOOLEAN) {, +                if (p.booleanValue()) {, +                    consumer.accept(v, defaultValue.get());, +                }, +            } else {, +                consumer.accept(v, objectParser.apply(p, c));, +            }, +        }, field, ValueType.OBJECT_OR_BOOLEAN);, +    }, +, +, +    public void declareValue(BiConsumer<Value, XContentParser> consumer, ParseField field) {, +        declareField((p, v, c) -> consumer.accept(v, p), field, ValueType.VALUE);, +    }, +, +        BOOLEAN(EnumSet.of(XContentParser.Token.VALUE_BOOLEAN)), STRING_ARRAY(EnumSet.of(XContentParser.Token.START_ARRAY, XContentParser.Token.VALUE_STRING)),, +        FLOAT_ARRAY(EnumSet.of(XContentParser.Token.START_ARRAY, XContentParser.Token.VALUE_NUMBER, XContentParser.Token.VALUE_STRING)),, +        DOUBLE_ARRAY(EnumSet.of(XContentParser.Token.START_ARRAY, XContentParser.Token.VALUE_NUMBER, XContentParser.Token.VALUE_STRING)),, +        LONG_ARRAY(EnumSet.of(XContentParser.Token.START_ARRAY, XContentParser.Token.VALUE_NUMBER, XContentParser.Token.VALUE_STRING)),, +        INT_ARRAY(EnumSet.of(XContentParser.Token.START_ARRAY, XContentParser.Token.VALUE_NUMBER, XContentParser.Token.VALUE_STRING)),, +        BOOLEAN_ARRAY(EnumSet.of(XContentParser.Token.START_ARRAY, XContentParser.Token.VALUE_BOOLEAN)),, +        OBJECT(EnumSet.of(XContentParser.Token.START_OBJECT)),, +        OBJECT_OR_BOOLEAN(EnumSet.of(XContentParser.Token.START_OBJECT, XContentParser.Token.VALUE_BOOLEAN)),, +        VALUE(EnumSet.of(XContentParser.Token.VALUE_BOOLEAN, XContentParser.Token.VALUE_NULL ,XContentParser.Token.VALUE_EMBEDDED_OBJECT,XContentParser.Token.VALUE_NUMBER,XContentParser.Token.VALUE_STRING));, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.mapperService(),, +                        indexService.fieldData(), request.shardId().getIndex(), request.shardId().id(), request);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +        if (parser.currentToken().isValue()) {, +            list.add(supplier.get()); // single value, +        } else {, +                if (parser.currentToken().isValue()) {, +                } else {, +                    throw new IllegalStateException("expected value but got [" + parser.currentToken() + "]");, +                }, +            }, +    public <T> void declareObjectOrDefault(BiConsumer<Value, T> consumer, BiFunction<XContentParser, Context, T> objectParser, Supplier<T> defaultValue, ParseField field) {, +        declareField((p, v, c) -> {, +            if (p.currentToken() == XContentParser.Token.VALUE_BOOLEAN) {, +                if (p.booleanValue()) {, +                    consumer.accept(v, defaultValue.get());, +                }, +            } else {, +                consumer.accept(v, objectParser.apply(p, c));, +            }, +        }, field, ValueType.OBJECT_OR_BOOLEAN);, +    }, +, +, +    public void declareValue(BiConsumer<Value, XContentParser> consumer, ParseField field) {, +        declareField((p, v, c) -> consumer.accept(v, p), field, ValueType.VALUE);, +    }, +, +        BOOLEAN(EnumSet.of(XContentParser.Token.VALUE_BOOLEAN)), STRING_ARRAY(EnumSet.of(XContentParser.Token.START_ARRAY, XContentParser.Token.VALUE_STRING)),, +        FLOAT_ARRAY(EnumSet.of(XContentParser.Token.START_ARRAY, XContentParser.Token.VALUE_NUMBER, XContentParser.Token.VALUE_STRING)),, +        DOUBLE_ARRAY(EnumSet.of(XContentParser.Token.START_ARRAY, XContentParser.Token.VALUE_NUMBER, XContentParser.Token.VALUE_STRING)),, +        LONG_ARRAY(EnumSet.of(XContentParser.Token.START_ARRAY, XContentParser.Token.VALUE_NUMBER, XContentParser.Token.VALUE_STRING)),, +        INT_ARRAY(EnumSet.of(XContentParser.Token.START_ARRAY, XContentParser.Token.VALUE_NUMBER, XContentParser.Token.VALUE_STRING)),, +        BOOLEAN_ARRAY(EnumSet.of(XContentParser.Token.START_ARRAY, XContentParser.Token.VALUE_BOOLEAN)),, +        OBJECT(EnumSet.of(XContentParser.Token.START_OBJECT)),, +        OBJECT_OR_BOOLEAN(EnumSet.of(XContentParser.Token.START_OBJECT, XContentParser.Token.VALUE_BOOLEAN)),, +        VALUE(EnumSet.of(XContentParser.Token.VALUE_BOOLEAN, XContentParser.Token.VALUE_NULL ,XContentParser.Token.VALUE_EMBEDDED_OBJECT,XContentParser.Token.VALUE_NUMBER,XContentParser.Token.VALUE_STRING));, +++ b/core/src/main/java/org/elasticsearch/index/codec/PerFieldMappingPostingFormatCodec.java, +            return CompletionFieldMapper.CompletionFieldType.postingsFormat();, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.mapperService(),, +                        indexService.fieldData(), request.shardId().getIndex(), request.shardId().id(), request);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +        if (parser.currentToken().isValue()) {, +            list.add(supplier.get()); // single value, +        } else {, +                if (parser.currentToken().isValue()) {]