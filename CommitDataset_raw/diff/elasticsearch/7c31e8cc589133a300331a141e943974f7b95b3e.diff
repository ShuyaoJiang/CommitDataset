[+++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +     * On Linux, this method returns the 1, 5, and 15-minute load averages., +     * The line from {@code /proc/loadavg}. The first three fields are the load averages averaged over 1, 5, and 15 minutes. The fourth, +     * field is two numbers separated by a slash, the first is the number of currently runnable scheduling entities, the second is the, +     * number of scheduling entities on the system. The fifth field is the PID of the most recently created process., +     * A map of the control groups to which the Elasticsearch process belongs. Note that this is a map because the control groups can vary, +     * from subsystem to subsystem. Additionally, this map can not be cached because a running process can be reclassified., +     * @return a map from subsystems to the control group for the Elasticsearch process., +     * @throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup}, +     * The lines from {@code /proc/self/cgroup}. This file represents the control groups to which the Elasticsearch process belongs. Each, +     * line in this file represents a control group hierarchy of the form, +     * with the first field representing the hierarchy ID, the second field representing a comma-separated list of the subsystems bound to, +     * the hierarchy, and the last field representing the control group., +     * @throws IOException if an I/O exception occurs reading {@code /proc/self/cgroup}, +     * The total CPU time in nanoseconds consumed by all tasks in the cgroup to which the Elasticsearch process belongs for the {@code, +     * cpuacct} subsystem., +     * @param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem, +     * @throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group, +     * Returns the line from {@code cpuacct.usage} for the control group to which the Elasticsearch process belongs for the {@code cpuacct}, +     * subsystem. This line represents the total CPU time in nanoseconds consumed by all tasks in the same control group., +     * @param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpuacct} subsystem, +     * @throws IOException if an I/O exception occurs reading {@code cpuacct.usage} for the control group, +     * The total period of time in microseconds for how frequently the Elasticsearch control group's access to CPU resources will be, +     * @param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem, +     * @throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group, +     * Returns the line from {@code cpu.cfs_period_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}, +     * subsystem. This line represents the period of time in microseconds for how frequently the control group's access to CPU resources, +     * will be reallocated., +     * @param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem, +     * @throws IOException if an I/O exception occurs reading {@code cpu.cfs_period_us} for the control group, +     * The total time in microseconds that all tasks in the Elasticsearch control group can run during one period as specified by {@code, +     * cpu.cfs_period_us}., +     * @param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem, +     * @throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group, +     * Returns the line from {@code cpu.cfs_quota_us} for the control group to which the Elasticsearch process belongs for the {@code cpu}, +     * subsystem. This line represents the total time in microseconds that all tasks in the control group can run during one period as, +     * specified by {@code cpu.cfs_period_us}., +     * @param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem, +     * @throws IOException if an I/O exception occurs reading {@code cpu.cfs_quota_us} for the control group, +     * The CPU time statistics for all tasks in the Elasticsearch control group., +     * @param controlGroup the control group for the Elasticsearch process for the {@code cpuacct} subsystem, +     * @throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group, +     * Returns the lines from {@code cpu.stat} for the control group to which the Elasticsearch process belongs for the {@code cpu}, +     * subsystem. These lines represent the CPU time statistics and have the form, +     * where {@code nr_periods} is the number of period intervals as specified by {@code cpu.cfs_period_us} that have elapsed, {@code, +     * nr_throttled} is the number of times tasks in the given control group have been throttled, and {@code throttled_time} is the total, +     * time in nanoseconds for which tasks in the given control group have been throttled., +     * @param controlGroup the control group to which the Elasticsearch process belongs for the {@code cpu} subsystem, +     * @throws IOException if an I/O exception occurs reading {@code cpu.stat} for the control group, +     * Checks if cgroup stats are available by checking for the existence of {@code /proc/self/cgroup}, {@code /sys/fs/cgroup/cpu}, and, +     * {@code /sys/fs/cgroup/cpuacct}., +     * @return {@code true} if the stats are available, otherwise {@code false}, +     * @return basic cgroup stats, or {@code null} if an I/O exception occurred reading the cgroup stats, +     * Returns a given method of the OperatingSystemMXBean, or null if the method is not found or unavailable.]