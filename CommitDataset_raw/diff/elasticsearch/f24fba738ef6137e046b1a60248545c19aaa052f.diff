[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameField.java, +    public static final String REST_BASE_PATH_TRANSFORMS = REST_BASE_PATH + "transforms/";, +    public static final String REST_BASE_PATH_TRANSFORMS_BY_ID = REST_BASE_PATH_TRANSFORMS + "{id}/";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameField.java, +    public static final String REST_BASE_PATH_TRANSFORMS = REST_BASE_PATH + "transforms/";, +    public static final String REST_BASE_PATH_TRANSFORMS_BY_ID = REST_BASE_PATH_TRANSFORMS + "{id}/";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameMessages.java, +    public static final String REST_PUT_DATA_FRAME_INCONSISTENT_ID =, +            "Inconsistent id; ''{0}'' specified in the body differs from ''{1}'' specified as a URL argument";, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameField.java, +    public static final String REST_BASE_PATH_TRANSFORMS = REST_BASE_PATH + "transforms/";, +    public static final String REST_BASE_PATH_TRANSFORMS_BY_ID = REST_BASE_PATH_TRANSFORMS + "{id}/";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameMessages.java, +    public static final String REST_PUT_DATA_FRAME_INCONSISTENT_ID =, +            "Inconsistent id; ''{0}'' specified in the body differs from ''{1}'' specified as a URL argument";, +, +++ b/x-pack/plugin/data-frame/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/dataframe/integration/DataFrameGetAndGetStatsIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.dataframe.integration;, +, +import org.elasticsearch.client.Request;, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +import org.junit.Before;, +, +import java.io.IOException;, +import java.util.Map;, +, +public class DataFrameGetAndGetStatsIT extends DataFrameRestTestCase {, +, +    private static boolean indicesCreated = false;, +, +    // preserve indices in order to reuse source indices in several test cases, +    @Override, +    protected boolean preserveIndicesUponCompletion() {, +        return true;, +    }, +, +    @Before, +    public void createIndexes() throws IOException {, +, +        // it's not possible to run it as @BeforeClass as clients aren't initialized then, so we need this little hack, +        if (indicesCreated) {, +            return;, +        }, +, +        createReviewsIndex();, +        indicesCreated = true;, +    }, +, +    public void testGetAndGetStats() throws Exception {, +        createPivotReviewsTransform("pivot_1", "pivot_reviews_1", null);, +        createPivotReviewsTransform("pivot_2", "pivot_reviews_2", null);, +, +        startAndWaitForTransform("pivot_1", "pivot_reviews_1");, +        startAndWaitForTransform("pivot_2", "pivot_reviews_2");, +, +        // check all the different ways to retrieve all stats, +        Map<String, Object> stats = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "_stats")));, +        assertEquals(2, XContentMapValues.extractValue("count", stats));, +        stats = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "_all/_stats")));, +        assertEquals(2, XContentMapValues.extractValue("count", stats));, +        stats = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "*/_stats")));, +        assertEquals(2, XContentMapValues.extractValue("count", stats));, +, +        // only pivot_1, +        stats = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "pivot_1/_stats")));, +        assertEquals(1, XContentMapValues.extractValue("count", stats));, +, +        // check all the different ways to retrieve all transforms, +        Map<String, Object> transforms = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT)));, +        assertEquals(2, XContentMapValues.extractValue("count", transforms));, +        transforms = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "_all")));, +        assertEquals(2, XContentMapValues.extractValue("count", transforms));, +        transforms = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "*")));, +        assertEquals(2, XContentMapValues.extractValue("count", transforms));, +, +        // only pivot_1, +        transforms = entityAsMap(client().performRequest(new Request("GET", DATAFRAME_ENDPOINT + "pivot_1")));, +        assertEquals(1, XContentMapValues.extractValue("count", transforms));, +    }, +, +, +}, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameField.java, +    public static final String REST_BASE_PATH_TRANSFORMS = REST_BASE_PATH + "transforms/";, +    public static final String REST_BASE_PATH_TRANSFORMS_BY_ID = REST_BASE_PATH_TRANSFORMS + "{id}/";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameMessages.java, +    public static final String REST_PUT_DATA_FRAME_INCONSISTENT_ID =, +            "Inconsistent id; ''{0}'' specified in the body differs from ''{1}'' specified as a URL argument";, +, +++ b/x-pack/plugin/data-frame/qa/single-node-tests/src/test/java/org/elasticsearch/xpack/dataframe/integration/DataFrameGetAndGetStatsIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;]