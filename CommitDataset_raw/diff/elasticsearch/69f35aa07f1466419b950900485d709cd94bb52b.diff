[+++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +import org.apache.lucene.search.SynonymQuery;, +        @Override, +        protected Query newSynonymQuery(Term[] terms) {, +            return blendTermsQuery(terms, mapper);, +        }, +, +    protected Query blendTermsQuery(Term[] terms, MappedFieldType fieldType) {, +        return new SynonymQuery(terms);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +import org.apache.lucene.search.SynonymQuery;, +        @Override, +        protected Query newSynonymQuery(Term[] terms) {, +            return blendTermsQuery(terms, mapper);, +        }, +, +    protected Query blendTermsQuery(Term[] terms, MappedFieldType fieldType) {, +        return new SynonymQuery(terms);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +        public Query blendTerms(Term[] terms, MappedFieldType fieldType) {, +            return MultiMatchQuery.super.blendTermsQuery(terms, fieldType);, +        }, +, +        public Query blendTerms(Term[] terms, MappedFieldType fieldType) {, +            if (blendedFields == null || blendedFields.length == 1) {, +                return super.blendTerms(terms, fieldType);, +            }, +            BytesRef[] values = new BytesRef[terms.length];, +            for (int i = 0; i < terms.length; i++) {, +                values[i] = terms[i].bytes();, +            }, +            return MultiMatchQuery.blendTerms(context, values, commonTermsCutoff, tieBreaker, blendedFields);, +        }, +, +        @Override, +        return blendTerms(context, new BytesRef[] {value}, commonTermsCutoff, tieBreaker, blendedFields);, +    }, +, +    static Query blendTerms(QueryShardContext context, BytesRef[] values, Float commonTermsCutoff, float tieBreaker,, +            FieldAndFieldType... blendedFields) {, +        Term[] terms = new Term[blendedFields.length * values.length];, +        float[] blendedBoost = new float[blendedFields.length * values.length];, +            for (BytesRef term : values) {, +                    query = ft.fieldType.termQuery(term, context);, +        }, +    @Override, +    protected Query blendTermsQuery(Term[] terms, MappedFieldType fieldType) {, +        if (queryBuilder == null) {, +            return super.blendTermsQuery(terms, fieldType);, +        }, +        return queryBuilder.blendTerms(terms, fieldType);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +import org.apache.lucene.search.SynonymQuery;, +        @Override, +        protected Query newSynonymQuery(Term[] terms) {, +            return blendTermsQuery(terms, mapper);, +        }, +, +    protected Query blendTermsQuery(Term[] terms, MappedFieldType fieldType) {, +        return new SynonymQuery(terms);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +        public Query blendTerms(Term[] terms, MappedFieldType fieldType) {, +            return MultiMatchQuery.super.blendTermsQuery(terms, fieldType);, +        }, +, +        public Query blendTerms(Term[] terms, MappedFieldType fieldType) {, +            if (blendedFields == null || blendedFields.length == 1) {, +                return super.blendTerms(terms, fieldType);, +            }, +            BytesRef[] values = new BytesRef[terms.length];, +            for (int i = 0; i < terms.length; i++) {, +                values[i] = terms[i].bytes();, +            }, +            return MultiMatchQuery.blendTerms(context, values, commonTermsCutoff, tieBreaker, blendedFields);, +        }, +, +        @Override, +        return blendTerms(context, new BytesRef[] {value}, commonTermsCutoff, tieBreaker, blendedFields);, +    }, +, +    static Query blendTerms(QueryShardContext context, BytesRef[] values, Float commonTermsCutoff, float tieBreaker,, +            FieldAndFieldType... blendedFields) {, +        Term[] terms = new Term[blendedFields.length * values.length];, +        float[] blendedBoost = new float[blendedFields.length * values.length];, +            for (BytesRef term : values) {, +                    query = ft.fieldType.termQuery(term, context);, +        }, +    @Override, +    protected Query blendTermsQuery(Term[] terms, MappedFieldType fieldType) {, +        if (queryBuilder == null) {, +            return super.blendTermsQuery(terms, fieldType);, +        }]