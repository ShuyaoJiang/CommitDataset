[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/InternalIndicesService.java, +import org.elasticsearch.index.engine.Engine;, +import org.elasticsearch.index.shard.IndexShardState;, +        long numberOfDocs = 0;, +, +                if (indexShard.state() == IndexShardState.STARTED) {, +                    Engine.Searcher searcher = indexShard.searcher();, +                    try {, +                        numberOfDocs += searcher.reader().numDocs();, +                    } finally {, +                        searcher.release();, +                    }, +                }, +        return new NodeIndicesStats(new ByteSizeValue(storeTotalSize), numberOfDocs, new ByteSizeValue(fieldCacheTotalSize), new ByteSizeValue(filterCacheTotalSize), fieldCacheEvictions);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/InternalIndicesService.java, +import org.elasticsearch.index.engine.Engine;, +import org.elasticsearch.index.shard.IndexShardState;, +        long numberOfDocs = 0;, +, +                if (indexShard.state() == IndexShardState.STARTED) {, +                    Engine.Searcher searcher = indexShard.searcher();, +                    try {, +                        numberOfDocs += searcher.reader().numDocs();, +                    } finally {, +                        searcher.release();, +                    }, +                }, +        return new NodeIndicesStats(new ByteSizeValue(storeTotalSize), numberOfDocs, new ByteSizeValue(fieldCacheTotalSize), new ByteSizeValue(filterCacheTotalSize), fieldCacheEvictions);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/NodeIndicesStats.java, +    private long numDocs;, +, +    public NodeIndicesStats(ByteSizeValue storeSize, long numDocs, ByteSizeValue fieldCacheSize, ByteSizeValue filterCacheSize,, +        this.numDocs = numDocs;, +    /**, +     * The number of docs on the node (an aggregation of the number of docs of all the shards allocated on the node)., +     */, +    public long numDocs() {, +        return numDocs;, +    }, +, +    /**, +     * The number of docs on the node (an aggregation of the number of docs of all the shards allocated on the node)., +     */, +    public long getNumDocs() {, +        return numDocs();, +    }, +, +        numDocs = in.readVLong();, +        fieldCacheEvictions = in.readVLong();, +        out.writeVLong(numDocs);, +        out.writeVLong(fieldCacheEvictions);, +        builder.field(Fields.NUM_DOCS, numDocs);, +        static final XContentBuilderString NUM_DOCS = new XContentBuilderString("num_docs");]