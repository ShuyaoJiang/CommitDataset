[+++ b/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, +            return timeZone.convertLocalToUTC(rounded, false, utcMillis);, +            return timeZone.convertLocalToUTC(nextInLocalTime, false);, +            return timeZone.convertLocalToUTC(rounded, false);, +            return timeZone.convertLocalToUTC(next, false);, +++ b/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, +            return timeZone.convertLocalToUTC(rounded, false, utcMillis);, +            return timeZone.convertLocalToUTC(nextInLocalTime, false);, +            return timeZone.convertLocalToUTC(rounded, false);, +            return timeZone.convertLocalToUTC(next, false);, +++ b/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java, +    /**, +     * test for #10025, strict local to UTC conversion can cause joda exceptions, +     * on DST start, +     */, +    @Test, +    public void testLenientConversionDST() {, +        DateTimeZone tz = DateTimeZone.forID("America/Sao_Paulo");, +        long start = time("2014-10-18T20:50:00.000", tz);, +        long end = time("2014-10-19T01:00:00.000", tz);, +        Rounding tzRounding = new TimeZoneRounding.TimeUnitRounding(DateTimeUnit.MINUTES_OF_HOUR, tz);, +        Rounding dayTzRounding = new TimeZoneRounding.TimeIntervalRounding(60000, tz);, +        for (long time = start; time < end; time = time + 60000) {, +            assertThat(tzRounding.nextRoundingValue(time), greaterThan(time));, +            assertThat(dayTzRounding.nextRoundingValue(time), greaterThan(time));, +        }, +    }, +]