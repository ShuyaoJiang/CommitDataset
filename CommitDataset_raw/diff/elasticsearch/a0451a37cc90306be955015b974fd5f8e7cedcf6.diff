[+++ b/docs/reference/index-modules/translog.asciidoc, +`index.gateway.local.sync`::, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.gateway.local.sync`::, +++ b/pom.xml, +        <lucene.snapshot.revision>1677039</lucene.snapshot.revision>, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.gateway.local.sync`::, +++ b/pom.xml, +        <lucene.snapshot.revision>1677039</lucene.snapshot.revision>, +++ b/src/main/java/org/elasticsearch/common/io/Channels.java, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.gateway.local.sync`::, +++ b/pom.xml, +        <lucene.snapshot.revision>1677039</lucene.snapshot.revision>, +++ b/src/main/java/org/elasticsearch/common/io/Channels.java, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRefCounted.java, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.gateway.local.sync`::, +++ b/pom.xml, +        <lucene.snapshot.revision>1677039</lucene.snapshot.revision>, +++ b/src/main/java/org/elasticsearch/common/io/Channels.java, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRefCounted.java, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/ReleasableLock.java, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.gateway.local.sync`::, +++ b/pom.xml, +        <lucene.snapshot.revision>1677039</lucene.snapshot.revision>, +++ b/src/main/java/org/elasticsearch/common/io/Channels.java, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRefCounted.java, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/ReleasableLock.java, +++ b/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.translog.Translog;, +import org.elasticsearch.index.translog.TranslogModule;, +            modules.add(new TranslogModule(indexSettings));, +                closeInjectorResource(sId, shardInjector, TranslogService.class);, +                        Translog.class,, +                final Closeable instance = shardInjector.getInstance(closeable);, +                    throw new NullPointerException("No instance available for " + closeable.getName());, +                logger.debug("{} failed to close {}", t, shardId, Strings.toUnderscoreCase(closeable.getSimpleName()));, +    }, +            assert lock.getShardId().equals(shardId) : "shard Id mismatch, expected: "  + shardId + " but got: " + lock.getShardId();, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.gateway.local.sync`::, +++ b/pom.xml, +        <lucene.snapshot.revision>1677039</lucene.snapshot.revision>, +++ b/src/main/java/org/elasticsearch/common/io/Channels.java, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRefCounted.java, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/ReleasableLock.java, +++ b/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.translog.Translog;, +import org.elasticsearch.index.translog.TranslogModule;, +            modules.add(new TranslogModule(indexSettings));, +                closeInjectorResource(sId, shardInjector, TranslogService.class);, +                        Translog.class,, +                final Closeable instance = shardInjector.getInstance(closeable);, +                    throw new NullPointerException("No instance available for " + closeable.getName());, +                logger.debug("{} failed to close {}", t, shardId, Strings.toUnderscoreCase(closeable.getSimpleName()));, +    }, +            assert lock.getShardId().equals(shardId) : "shard Id mismatch, expected: "  + shardId + " but got: " + lock.getShardId();, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +        Preconditions.checkNotNull(engineConfig.getTranslog(), "Translog must be provided to the engine");, +     * Snapshots the index and returns a handle to it. Will always try and "commit" the, +    public abstract SnapshotIndexCommit snapshotIndex() throws EngineException;, +, +    public abstract void recover(RecoveryHandler recoveryHandler) throws EngineException;, +            try (ReleasableLock _ = writeLock.acquire()) {, +            try (ReleasableLock _ = writeLock.acquire()) {, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.gateway.local.sync`::, +++ b/pom.xml, +        <lucene.snapshot.revision>1677039</lucene.snapshot.revision>, +++ b/src/main/java/org/elasticsearch/common/io/Channels.java, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRefCounted.java, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/ReleasableLock.java, +++ b/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.translog.Translog;, +import org.elasticsearch.index.translog.TranslogModule;, +            modules.add(new TranslogModule(indexSettings));, +                closeInjectorResource(sId, shardInjector, TranslogService.class);, +                        Translog.class,, +                final Closeable instance = shardInjector.getInstance(closeable);, +                    throw new NullPointerException("No instance available for " + closeable.getName());, +                logger.debug("{} failed to close {}", t, shardId, Strings.toUnderscoreCase(closeable.getSimpleName()));, +    }, +            assert lock.getShardId().equals(shardId) : "shard Id mismatch, expected: "  + shardId + " but got: " + lock.getShardId();, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +        Preconditions.checkNotNull(engineConfig.getTranslog(), "Translog must be provided to the engine");, +     * Snapshots the index and returns a handle to it. Will always try and "commit" the, +    public abstract SnapshotIndexCommit snapshotIndex() throws EngineException;, +, +    public abstract void recover(RecoveryHandler recoveryHandler) throws EngineException;, +            try (ReleasableLock _ = writeLock.acquire()) {, +            try (ReleasableLock _ = writeLock.acquire()) {, +++ b/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +import org.elasticsearch.index.translog.Translog;, +    private final Translog translog;, +    public EngineConfig(ShardId shardId, ThreadPool threadPool, ShardIndexingService indexingService, IndexSettingsService indexSettingsService, IndicesWarmer warmer, Store store, SnapshotDeletionPolicy deletionPolicy, Translog translog, MergePolicyProvider mergePolicyProvider, MergeSchedulerProvider mergeScheduler, Analyzer analyzer, Similarity similarity, CodecService codecService, Engine.FailedEngineListener failedEngineListener, TranslogRecoveryPerformer translogRecoveryPerformer) {, +        this.translog = translog;, +     * Returns a {@link Translog instance}]