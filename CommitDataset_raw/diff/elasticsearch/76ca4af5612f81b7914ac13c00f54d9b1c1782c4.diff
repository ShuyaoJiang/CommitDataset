[+++ b/core/README.textile, +h1. Elasticsearch, +, +h2. A Distributed RESTful Search Engine, +, +h3. "https://www.elastic.co/products/elasticsearch":https://www.elastic.co/products/elasticsearch, +, +Elasticsearch is a distributed RESTful search engine built for the cloud. Features include:, +, +* Distributed and Highly Available Search Engine., +** Each index is fully sharded with a configurable number of shards., +** Each shard can have one or more replicas., +** Read / Search operations performed on either one of the replica shard., +* Multi Tenant with Multi Types., +** Support for more than one index., +** Support for more than one type per index., +** Index level configuration (number of shards, index storage, ...)., +* Various set of APIs, +** HTTP RESTful API, +** Native Java API., +** All APIs perform automatic node operation rerouting., +* Document oriented, +** No need for upfront schema definition., +** Schema can be defined per type for customization of the indexing process., +* Reliable, Asynchronous Write Behind for long term persistency., +* (Near) Real Time Search., +* Built on top of Lucene, +** Each shard is a fully functional Lucene index, +** All the power of Lucene easily exposed through simple configuration / plugins., +* Per operation consistency, +** Single document level operations are atomic, consistent, isolated and durable., +* Open Source under the Apache License, version 2 ("ALv2"), +, +h2. Getting Started, +, +First of all, DON'T PANIC. It will take 5 minutes to get the gist of what Elasticsearch is all about., +, +h3. Requirements, +, +You need to have a recent version of Java installed. See the "Setup":http://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html#jvm-version page for more information., +, +h3. Installation, +, +* "Download":https://www.elastic.co/downloads/elasticsearch and unzip the Elasticsearch official distribution., +* Run @bin/elasticsearch@ on unix, or @bin\elasticsearch.bat@ on windows., +* Run @curl -X GET http://localhost:9200/@., +* Start more servers ..., +, +h3. Indexing, +, +Let's try and index some twitter like information. First, let's create a twitter user, and add some tweets (the @twitter@ index will be created automatically):, +, +<pre>, +curl -XPUT 'http://localhost:9200/twitter/user/kimchy' -d '{ "name" : "Shay Banon" }', +, +curl -XPUT 'http://localhost:9200/twitter/tweet/1' -d ', +{, +    "user": "kimchy",, +    "postDate": "2009-11-15T13:12:00",, +    "message": "Trying out Elasticsearch, so far so good?", +}', +, +curl -XPUT 'http://localhost:9200/twitter/tweet/2' -d ', +{, +    "user": "kimchy",, +    "postDate": "2009-11-15T14:12:12",, +    "message": "Another tweet, will it be indexed?", +}', +</pre>, +, +Now, let's see if the information was added by GETting it:, +, +<pre>, +curl -XGET 'http://localhost:9200/twitter/user/kimchy?pretty=true', +curl -XGET 'http://localhost:9200/twitter/tweet/1?pretty=true', +curl -XGET 'http://localhost:9200/twitter/tweet/2?pretty=true', +</pre>, +, +h3. Searching, +, +Mmm search..., shouldn't it be elastic?, +Let's find all the tweets that @kimchy@ posted:, +, +<pre>, +curl -XGET 'http://localhost:9200/twitter/tweet/_search?q=user:kimchy&pretty=true', +</pre>, +, +We can also use the JSON query language Elasticsearch provides instead of a query string:, +, +<pre>, +curl -XGET 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d ', +{, +    "query" : {, +        "match" : { "user": "kimchy" }, +    }, +}', +</pre>, +, +Just for kicks, let's get all the documents stored (we should see the user as well):, +]