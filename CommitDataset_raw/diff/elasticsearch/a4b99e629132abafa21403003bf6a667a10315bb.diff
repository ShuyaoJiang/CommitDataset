[+++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.Version;, +    void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {, +            // The minimum supported version for a node joining a master:, +            Version minimumNodeJoinVersion = localNode().getVersion().minimumCompatibilityVersion();, +            // Sanity check: maybe we don't end up here, because serialization may have failed., +            if (node.getVersion().before(minimumNodeJoinVersion)) {, +                callback.onFailure(, +                        new IllegalStateException("Can't handle join request from a node with a version [" + node.getVersion() + "] that is lower than the minimum compatible version [" + minimumNodeJoinVersion.minimumCompatibilityVersion() + "]"), +                );, +                return;, +            }, +, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.Version;, +    void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {, +            // The minimum supported version for a node joining a master:, +            Version minimumNodeJoinVersion = localNode().getVersion().minimumCompatibilityVersion();, +            // Sanity check: maybe we don't end up here, because serialization may have failed., +            if (node.getVersion().before(minimumNodeJoinVersion)) {, +                callback.onFailure(, +                        new IllegalStateException("Can't handle join request from a node with a version [" + node.getVersion() + "] that is lower than the minimum compatible version [" + minimumNodeJoinVersion.minimumCompatibilityVersion() + "]"), +                );, +                return;, +            }, +, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/elect/ElectMasterService.java, +import org.elasticsearch.Version;, +    // This is the minimum version a master needs to be on, otherwise it gets ignored, +    // This is based on the minimum compatible version of the current version this node is on, +    private final Version minMasterVersion;, +    public ElectMasterService(Settings settings, Version version) {, +        this.minMasterVersion = version.minimumCompatibilityVersion();, +        DiscoveryNode masterNode = sortedNodes.get(0);, +        // Sanity check: maybe we don't end up here, because serialization may have failed., +        if (masterNode.getVersion().before(minMasterVersion)) {, +            logger.warn("ignoring master [{}], because the version [{}] is lower than the minimum compatible version [{}]", masterNode, masterNode.getVersion(), minMasterVersion);, +            return null;, +        } else {, +            return masterNode;, +        }, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.Version;, +    void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {, +            // The minimum supported version for a node joining a master:, +            Version minimumNodeJoinVersion = localNode().getVersion().minimumCompatibilityVersion();, +            // Sanity check: maybe we don't end up here, because serialization may have failed., +            if (node.getVersion().before(minimumNodeJoinVersion)) {, +                callback.onFailure(, +                        new IllegalStateException("Can't handle join request from a node with a version [" + node.getVersion() + "] that is lower than the minimum compatible version [" + minimumNodeJoinVersion.minimumCompatibilityVersion() + "]"), +                );, +                return;, +            }, +, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/elect/ElectMasterService.java, +import org.elasticsearch.Version;, +    // This is the minimum version a master needs to be on, otherwise it gets ignored, +    // This is based on the minimum compatible version of the current version this node is on, +    private final Version minMasterVersion;, +    public ElectMasterService(Settings settings, Version version) {, +        this.minMasterVersion = version.minimumCompatibilityVersion();, +        DiscoveryNode masterNode = sortedNodes.get(0);, +        // Sanity check: maybe we don't end up here, because serialization may have failed., +        if (masterNode.getVersion().before(minMasterVersion)) {, +            logger.warn("ignoring master [{}], because the version [{}] is lower than the minimum compatible version [{}]", masterNode, masterNode.getVersion(), minMasterVersion);, +            return null;, +        } else {, +            return masterNode;, +        }, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ElectMasterServiceTest.java, +        return new ElectMasterService(Settings.EMPTY, Version.CURRENT);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.Version;, +    void handleJoinRequest(final DiscoveryNode node, final MembershipAction.JoinCallback callback) {, +            // The minimum supported version for a node joining a master:, +            Version minimumNodeJoinVersion = localNode().getVersion().minimumCompatibilityVersion();, +            // Sanity check: maybe we don't end up here, because serialization may have failed., +            if (node.getVersion().before(minimumNodeJoinVersion)) {, +                callback.onFailure(, +                        new IllegalStateException("Can't handle join request from a node with a version [" + node.getVersion() + "] that is lower than the minimum compatible version [" + minimumNodeJoinVersion.minimumCompatibilityVersion() + "]"), +                );, +                return;, +            }, +, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/elect/ElectMasterService.java, +import org.elasticsearch.Version;, +    // This is the minimum version a master needs to be on, otherwise it gets ignored, +    // This is based on the minimum compatible version of the current version this node is on, +    private final Version minMasterVersion;, +    public ElectMasterService(Settings settings, Version version) {, +        this.minMasterVersion = version.minimumCompatibilityVersion();, +        DiscoveryNode masterNode = sortedNodes.get(0);, +        // Sanity check: maybe we don't end up here, because serialization may have failed., +        if (masterNode.getVersion().before(minMasterVersion)) {, +            logger.warn("ignoring master [{}], because the version [{}] is lower than the minimum compatible version [{}]", masterNode, masterNode.getVersion(), minMasterVersion);, +            return null;, +        } else {, +            return masterNode;, +        }, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ElectMasterServiceTest.java]