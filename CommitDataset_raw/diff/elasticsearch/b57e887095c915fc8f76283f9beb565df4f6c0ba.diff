[+++ b/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java, +                    if (searchType == SearchType.SCAN){, +                        throw new SearchRequestParseException("could not read search request. value [" + searchType.name() + "] is not supported for field [" + SEARCH_TYPE_FIELD.getPreferredName() + "]" );, +                    }, +++ b/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java, +                    if (searchType == SearchType.SCAN){, +                        throw new SearchRequestParseException("could not read search request. value [" + searchType.name() + "] is not supported for field [" + SEARCH_TYPE_FIELD.getPreferredName() + "]" );, +                    }, +++ b/src/test/java/org/elasticsearch/watcher/input/search/SearchInputTests.java, +import java.util.*;, +import static org.elasticsearch.watcher.test.WatcherTestUtils.getRandomSupportedSearchType;, +        SearchType searchType = getRandomSupportedSearchType();, +, +    public void testParser_ScanNotSupported() throws Exception {, +        SearchRequest request = client().prepareSearch(), +                .setSearchType(SearchType.SCAN), +                .request(), +                .source(searchSource(), +                        .query(filteredQuery(matchQuery("event_type", "a"), rangeFilter("_timestamp").from("{{ctx.trigger.scheduled_time}}||-30s").to("{{ctx.trigger.triggered_time}}"))));, +, +        XContentBuilder builder = jsonBuilder().value(new SearchInput(request, null));, +        XContentParser parser = JsonXContent.jsonXContent.createParser(builder.bytes());, +        parser.nextToken();, +, +        SearchInputFactory factory = new SearchInputFactory(ImmutableSettings.EMPTY,, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class)),, +                ClientProxy.of(client()));, +, +        factory.parseInput("_id", parser);, +        fail("expected a SearchInputException as search type SCAN should not be supported");, +    }, +, +    @Test(expected = SearchInputException.class), +++ b/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java, +                    if (searchType == SearchType.SCAN){, +                        throw new SearchRequestParseException("could not read search request. value [" + searchType.name() + "] is not supported for field [" + SEARCH_TYPE_FIELD.getPreferredName() + "]" );, +                    }, +++ b/src/test/java/org/elasticsearch/watcher/input/search/SearchInputTests.java, +import java.util.*;, +import static org.elasticsearch.watcher.test.WatcherTestUtils.getRandomSupportedSearchType;, +        SearchType searchType = getRandomSupportedSearchType();, +, +    public void testParser_ScanNotSupported() throws Exception {, +        SearchRequest request = client().prepareSearch(), +                .setSearchType(SearchType.SCAN), +                .request(), +                .source(searchSource(), +                        .query(filteredQuery(matchQuery("event_type", "a"), rangeFilter("_timestamp").from("{{ctx.trigger.scheduled_time}}||-30s").to("{{ctx.trigger.triggered_time}}"))));, +, +        XContentBuilder builder = jsonBuilder().value(new SearchInput(request, null));, +        XContentParser parser = JsonXContent.jsonXContent.createParser(builder.bytes());, +        parser.nextToken();, +, +        SearchInputFactory factory = new SearchInputFactory(ImmutableSettings.EMPTY,, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class)),, +                ClientProxy.of(client()));, +, +        factory.parseInput("_id", parser);, +        fail("expected a SearchInputException as search type SCAN should not be supported");, +    }, +, +    @Test(expected = SearchInputException.class), +++ b/src/test/java/org/elasticsearch/watcher/support/WatcherUtilsTests.java, +import static org.elasticsearch.watcher.test.WatcherTestUtils.getRandomSupportedSearchType;, +        expectedRequest.searchType(getRandomSupportedSearchType());, +            searchType = getRandomSupportedSearchType();, +++ b/src/main/java/org/elasticsearch/watcher/support/WatcherUtils.java, +                    if (searchType == SearchType.SCAN){, +                        throw new SearchRequestParseException("could not read search request. value [" + searchType.name() + "] is not supported for field [" + SEARCH_TYPE_FIELD.getPreferredName() + "]" );, +                    }, +++ b/src/test/java/org/elasticsearch/watcher/input/search/SearchInputTests.java, +import java.util.*;, +import static org.elasticsearch.watcher.test.WatcherTestUtils.getRandomSupportedSearchType;, +        SearchType searchType = getRandomSupportedSearchType();, +, +    public void testParser_ScanNotSupported() throws Exception {, +        SearchRequest request = client().prepareSearch(), +                .setSearchType(SearchType.SCAN), +                .request(), +                .source(searchSource(), +                        .query(filteredQuery(matchQuery("event_type", "a"), rangeFilter("_timestamp").from("{{ctx.trigger.scheduled_time}}||-30s").to("{{ctx.trigger.triggered_time}}"))));, +, +        XContentBuilder builder = jsonBuilder().value(new SearchInput(request, null));, +        XContentParser parser = JsonXContent.jsonXContent.createParser(builder.bytes());, +        parser.nextToken();, +, +        SearchInputFactory factory = new SearchInputFactory(ImmutableSettings.EMPTY,, +                ScriptServiceProxy.of(internalCluster().getInstance(ScriptService.class)),, +                ClientProxy.of(client()));, +, +        factory.parseInput("_id", parser);, +        fail("expected a SearchInputException as search type SCAN should not be supported");, +    }, +, +    @Test(expected = SearchInputException.class), +++ b/src/test/java/org/elasticsearch/watcher/support/WatcherUtilsTests.java, +import static org.elasticsearch.watcher.test.WatcherTestUtils.getRandomSupportedSearchType;, +        expectedRequest.searchType(getRandomSupportedSearchType());, +            searchType = getRandomSupportedSearchType();, +++ b/src/test/java/org/elasticsearch/watcher/test/WatcherTestUtils.java]