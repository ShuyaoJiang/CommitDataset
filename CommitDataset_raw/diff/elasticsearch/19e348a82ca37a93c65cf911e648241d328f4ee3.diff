[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            availableProcessors += nodeInfo.getOs().getAvailableProcessors();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            availableProcessors += nodeInfo.getOs().getAvailableProcessors();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.monitor.os.OsProbe;, +        OsProbe.getInstance();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            availableProcessors += nodeInfo.getOs().getAvailableProcessors();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.monitor.os.OsProbe;, +        OsProbe.getInstance();, +++ b/core/src/main/java/org/elasticsearch/monitor/MonitorModule.java, +        bind(OsProbe.class).toInstance(OsProbe.getInstance());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            availableProcessors += nodeInfo.getOs().getAvailableProcessors();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.monitor.os.OsProbe;, +        OsProbe.getInstance();, +++ b/core/src/main/java/org/elasticsearch/monitor/MonitorModule.java, +        bind(OsProbe.class).toInstance(OsProbe.getInstance());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            availableProcessors += nodeInfo.getOs().getAvailableProcessors();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.monitor.os.OsProbe;, +        OsProbe.getInstance();, +++ b/core/src/main/java/org/elasticsearch/monitor/MonitorModule.java, +        bind(OsProbe.class).toInstance(OsProbe.getInstance());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsInfo.java, +    String arch = null;, +    String version = null;, +    public String getArch() {, +        return arch;, +    }, +, +    public String getVersion() {, +        return version;, +    }, +, +        static final XContentBuilderString ARCH = new XContentBuilderString("arch");, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +        builder.timeValueField(Fields.REFRESH_INTERVAL_IN_MILLIS, Fields.REFRESH_INTERVAL, refreshInterval);, +        if (arch != null) {, +            builder.field(Fields.ARCH, arch);, +        }, +        if (version != null) {, +            builder.field(Fields.VERSION, version);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +            availableProcessors += nodeInfo.getOs().getAvailableProcessors();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.monitor.os.OsProbe;, +        OsProbe.getInstance();, +++ b/core/src/main/java/org/elasticsearch/monitor/MonitorModule.java, +        bind(OsProbe.class).toInstance(OsProbe.getInstance());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsInfo.java, +    String arch = null;, +    String version = null;, +    public String getArch() {, +        return arch;, +    }, +, +    public String getVersion() {, +        return version;, +    }, +, +        static final XContentBuilderString ARCH = new XContentBuilderString("arch");, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +        builder.timeValueField(Fields.REFRESH_INTERVAL_IN_MILLIS, Fields.REFRESH_INTERVAL, refreshInterval);, +        if (arch != null) {, +            builder.field(Fields.ARCH, arch);, +        }, +        if (version != null) {, +            builder.field(Fields.VERSION, version);, +        }, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +import org.apache.lucene.util.Constants;, +, +import java.lang.management.ManagementFactory;, +import java.lang.management.OperatingSystemMXBean;, +import java.lang.reflect.Method;, +, +public class OsProbe {, +, +    private static final OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();, +, +    private static final Method getFreePhysicalMemorySize;, +    private static final Method getTotalPhysicalMemorySize;, +    private static final Method getFreeSwapSpaceSize;, +    private static final Method getTotalSwapSpaceSize;, +    private static final Method getSystemLoadAverage;, +, +    static {, +        getFreePhysicalMemorySize = getMethod("getFreePhysicalMemorySize");, +        getTotalPhysicalMemorySize = getMethod("getTotalPhysicalMemorySize");, +        getFreeSwapSpaceSize = getMethod("getFreeSwapSpaceSize");, +        getTotalSwapSpaceSize = getMethod("getTotalSwapSpaceSize");]