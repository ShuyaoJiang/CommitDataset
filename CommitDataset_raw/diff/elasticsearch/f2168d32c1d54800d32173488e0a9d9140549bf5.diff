[+++ b/src/main/java/org/elasticsearch/search/highlight/HighlightBuilder.java, +     * Allows to set custom options for custom highlighters., +                if (field.preTags != null) {, +                    builder.field("pre_tags", field.preTags);, +                }, +                if (field.postTags != null) {, +                    builder.field("post_tags", field.postTags);, +                }, +                if (field.highlightFilter != null) {, +                    builder.field("highlight_filter", field.highlightFilter);, +                }, +                if (field.order != null) {, +                    builder.field("order", field.order);, +                }, +                if (field.boundaryMaxScan != -1) {, +                    builder.field("boundary_max_scan", field.boundaryMaxScan);, +                }, +                if (field.boundaryChars != null) {, +                    builder.field("boundary_chars", field.boundaryChars);, +                }, +        String[] preTags;, +        String[] postTags;, +        Boolean highlightFilter;, +        String order;, +        int boundaryMaxScan = -1;, +        char[] boundaryChars;, +        /**, +         * Explicitly set the pre tags for this field that will be used for highlighting., +         * This overrides global settings set by {@link HighlightBuilder#preTags(String...)}., +         */, +        public Field preTags(String... preTags) {, +            this.preTags = preTags;, +            return this;, +        }, +, +        /**, +         * Explicitly set the post tags for this field that will be used for highlighting., +         * This overrides global settings set by {@link HighlightBuilder#postTags(String...)}., +         */, +        public Field postTags(String... postTags) {, +            this.postTags = postTags;, +            return this;, +        }, +, +        public Field highlightFilter(boolean highlightFilter) {, +            this.highlightFilter = highlightFilter;, +            return this;, +        }, +, +        /**, +         * The order of fragments per field. By default, ordered by the order in the, +         * highlighted text. Can be <tt>score</tt>, which then it will be ordered, +         * by score of the fragments., +         * This overrides global settings set by {@link HighlightBuilder#order(String)}., +         */, +        public Field order(String order) {, +            this.order = order;, +            return this;, +        }, +, +        public Field boundaryMaxScan(int boundaryMaxScan) {, +            this.boundaryMaxScan = boundaryMaxScan;, +            return this;, +        }, +, +        public Field boundaryChars(char[] boundaryChars) {, +            this.boundaryChars = boundaryChars;, +            return this;, +        }, +, +        /**, +         * Set type of highlighter to use. Supported types, +         * are <tt>highlighter</tt> and <tt>fast-vector-highlighter</tt>., +         * This overrides global settings set by {@link HighlightBuilder#highlighterType(String)}., +         */, +        /**, +         * Sets what fragmenter to use to break up text that is eligible for highlighting., +         * This option is only applicable when using plain / normal highlighter., +         * This overrides global settings set by {@link HighlightBuilder#fragmenter(String)}., +         */, +        /**, +         * Allows to set custom options for custom highlighters., +         * This overrides global settings set by {@link HighlightBuilder#options(Map<String, Object>)}., +         */, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlightBuilder.java, +     * Allows to set custom options for custom highlighters., +                if (field.preTags != null) {, +                    builder.field("pre_tags", field.preTags);, +                }, +                if (field.postTags != null) {, +                    builder.field("post_tags", field.postTags);, +                }, +                if (field.highlightFilter != null) {, +                    builder.field("highlight_filter", field.highlightFilter);, +                }, +                if (field.order != null) {, +                    builder.field("order", field.order);, +                }, +                if (field.boundaryMaxScan != -1) {, +                    builder.field("boundary_max_scan", field.boundaryMaxScan);]