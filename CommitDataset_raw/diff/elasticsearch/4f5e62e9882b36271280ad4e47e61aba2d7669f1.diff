[+++ b/src/main/java/org/elasticsearch/common/geo/GeoJSONShapeParser.java, +import com.vividsolutions.jts.geom.Polygon;, +            return new JtsGeometry(buildPolygon(node), GeoShapeConstants.SPATIAL_CONTEXT, true);, +        } else if ("multipoint".equals(shapeType)) {, +            return new JtsGeometry(GEOMETRY_FACTORY.createMultiPoint(toCoordinates(node)), GeoShapeConstants.SPATIAL_CONTEXT, true);, +        } else if ("envelope".equals(shapeType)) {, +            Coordinate[] coordinates = toCoordinates(node);, +            return new RectangleImpl(coordinates[0].x, coordinates[1].x, coordinates[1].y, coordinates[0].y, GeoShapeConstants.SPATIAL_CONTEXT);, +        } else if ("multipolygon".equals(shapeType)) {, +            Polygon[] polygons = new Polygon[node.children.size()];, +            for (int i = 0; i < node.children.size(); i++) {, +                polygons[i] = buildPolygon(node.children.get(i));, +            }, +            return new JtsGeometry(, +                    GEOMETRY_FACTORY.createMultiPolygon(polygons),, +                    GeoShapeConstants.SPATIAL_CONTEXT,, +                    true);, +        }, +, +        throw new UnsupportedOperationException("ShapeType [" + shapeType + "] not supported");, +    }, +, +    /**, +     * Builds a {@link Polygon} from the given CoordinateNode, +     *, +     * @param node CoordinateNode that the Polygon will be built from, +     * @return Polygon consisting of the coordinates in the CoordinateNode, +     */, +    private static Polygon buildPolygon(CoordinateNode node) {, +        return GEOMETRY_FACTORY.createPolygon(shell, holes);, +++ b/src/main/java/org/elasticsearch/common/geo/GeoJSONShapeParser.java, +import com.vividsolutions.jts.geom.Polygon;, +            return new JtsGeometry(buildPolygon(node), GeoShapeConstants.SPATIAL_CONTEXT, true);, +        } else if ("multipoint".equals(shapeType)) {, +            return new JtsGeometry(GEOMETRY_FACTORY.createMultiPoint(toCoordinates(node)), GeoShapeConstants.SPATIAL_CONTEXT, true);, +        } else if ("envelope".equals(shapeType)) {, +            Coordinate[] coordinates = toCoordinates(node);, +            return new RectangleImpl(coordinates[0].x, coordinates[1].x, coordinates[1].y, coordinates[0].y, GeoShapeConstants.SPATIAL_CONTEXT);, +        } else if ("multipolygon".equals(shapeType)) {, +            Polygon[] polygons = new Polygon[node.children.size()];, +            for (int i = 0; i < node.children.size(); i++) {, +                polygons[i] = buildPolygon(node.children.get(i));, +            }, +            return new JtsGeometry(, +                    GEOMETRY_FACTORY.createMultiPolygon(polygons),, +                    GeoShapeConstants.SPATIAL_CONTEXT,, +                    true);, +        }, +, +        throw new UnsupportedOperationException("ShapeType [" + shapeType + "] not supported");, +    }, +, +    /**, +     * Builds a {@link Polygon} from the given CoordinateNode, +     *, +     * @param node CoordinateNode that the Polygon will be built from, +     * @return Polygon consisting of the coordinates in the CoordinateNode, +     */, +    private static Polygon buildPolygon(CoordinateNode node) {, +        return GEOMETRY_FACTORY.createPolygon(shell, holes);, +++ b/src/main/java/org/elasticsearch/common/geo/GeoJSONShapeSerializer.java, +            } else if (geometry instanceof MultiPolygon) {, +                serializeMulitPolygon((MultiPolygon) geometry, builder);, +        serializePolygonCoordinates(polygon, builder);, +, +        builder.endArray();, +    }, +, +    /**, +     * Serializes the actual coordinates of the given {@link Polygon}, +     *, +     * @param polygon Polygon whose coordinates will be serialized, +     * @param builder XContentBuilder it will be serialized to, +     * @throws IOException Thrown if an error occurs while writing to the XContentBuilder, +     */, +    private static void serializePolygonCoordinates(Polygon polygon, XContentBuilder builder) throws IOException {, +    }, +    /**, +     * Serializes the given {@link MultiPolygon}, +     *, +     * @param multiPolygon MultiPolygon that will be serialized, +     * @param builder XContentBuilder it will be serialized to, +     * @throws IOException Thrown if an error occurs while writing to the XContentBuilder, +     */, +    private static void serializeMulitPolygon(MultiPolygon multiPolygon, XContentBuilder builder) throws IOException {, +        builder.field("type", "MultiPolygon"), +                .startArray("coordinates");, +, +        for (int i = 0; i < multiPolygon.getNumGeometries(); i++) {, +            builder.startArray();, +, +            serializePolygonCoordinates((Polygon) multiPolygon.getGeometryN(i), builder);, +, +            builder.endArray();, +        }, +     * @param multiPoint MultiPoint that will be serialized, +++ b/src/main/java/org/elasticsearch/common/geo/GeoJSONShapeParser.java, +import com.vividsolutions.jts.geom.Polygon;, +            return new JtsGeometry(buildPolygon(node), GeoShapeConstants.SPATIAL_CONTEXT, true);, +        } else if ("multipoint".equals(shapeType)) {]