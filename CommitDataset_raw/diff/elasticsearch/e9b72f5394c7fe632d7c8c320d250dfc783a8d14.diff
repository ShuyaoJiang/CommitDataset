[+++ /dev/null, +++ /dev/null, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestModule.java, +++ /dev/null, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestModule.java, +++ b/plugins/ingest/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java, +import org.elasticsearch.ingest.processor.mutate.MutateProcessor;, +import java.util.Arrays;, +        processorRegistry.put("mutate", new MutateProcessor.Factory());, +        processorConfig.put("uppercase", Arrays.asList("field1"));, +        pipelineConfig.put("processors", Collections.singletonList(Collections.singletonMap("mutate", processorConfig)));, +        assertThat(pipeline.getProcessors().get(0), instanceOf(MutateProcessor.class));, +        processorRegistry.put("mutate", new MutateProcessor.Factory());, +        processorConfig.put("uppercase", Arrays.asList("field1"));, +        pipelineConfig.put("processors", Collections.singletonList(Collections.singletonMap("mutate", processorConfig)));, +            assertThat(e.getMessage(), equalTo("processor [mutate] doesn't support one or more provided configuration parameters [[foo]]"));, +++ /dev/null, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestModule.java, +++ b/plugins/ingest/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java, +import org.elasticsearch.ingest.processor.mutate.MutateProcessor;, +import java.util.Arrays;, +        processorRegistry.put("mutate", new MutateProcessor.Factory());, +        processorConfig.put("uppercase", Arrays.asList("field1"));, +        pipelineConfig.put("processors", Collections.singletonList(Collections.singletonMap("mutate", processorConfig)));, +        assertThat(pipeline.getProcessors().get(0), instanceOf(MutateProcessor.class));, +        processorRegistry.put("mutate", new MutateProcessor.Factory());, +        processorConfig.put("uppercase", Arrays.asList("field1"));, +        pipelineConfig.put("processors", Collections.singletonList(Collections.singletonMap("mutate", processorConfig)));, +            assertThat(e.getMessage(), equalTo("processor [mutate] doesn't support one or more provided configuration parameters [[foo]]"));, +++ b/plugins/ingest/src/test/java/org/elasticsearch/plugin/ingest/PipelineStoreTests.java, +import org.elasticsearch.ingest.processor.mutate.MutateProcessor;, +        store = new PipelineStore(Settings.EMPTY, threadPool, environment, clusterService, client, Collections.singletonMap(MutateProcessor.TYPE, new MutateProcessor.Factory()));, +++ /dev/null, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestModule.java, +++ b/plugins/ingest/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java, +import org.elasticsearch.ingest.processor.mutate.MutateProcessor;, +import java.util.Arrays;, +        processorRegistry.put("mutate", new MutateProcessor.Factory());, +        processorConfig.put("uppercase", Arrays.asList("field1"));, +        pipelineConfig.put("processors", Collections.singletonList(Collections.singletonMap("mutate", processorConfig)));, +        assertThat(pipeline.getProcessors().get(0), instanceOf(MutateProcessor.class));, +        processorRegistry.put("mutate", new MutateProcessor.Factory());, +        processorConfig.put("uppercase", Arrays.asList("field1"));, +        pipelineConfig.put("processors", Collections.singletonList(Collections.singletonMap("mutate", processorConfig)));, +            assertThat(e.getMessage(), equalTo("processor [mutate] doesn't support one or more provided configuration parameters [[foo]]"));, +++ b/plugins/ingest/src/test/java/org/elasticsearch/plugin/ingest/PipelineStoreTests.java, +import org.elasticsearch.ingest.processor.mutate.MutateProcessor;, +        store = new PipelineStore(Settings.EMPTY, threadPool, environment, clusterService, client, Collections.singletonMap(MutateProcessor.TYPE, new MutateProcessor.Factory()));, +++ b/plugins/ingest/src/test/java/org/elasticsearch/plugin/ingest/transport/IngestActionFilterTests.java, +import org.elasticsearch.ingest.processor.Processor;, +import org.elasticsearch.ingest.processor.mutate.MutateProcessor;, +import java.util.HashMap;, +import java.util.Map;, +, +        Map<String, Object> mutateConfig = new HashMap<>();, +        Map<String, Object> update = new HashMap<>();, +        update.put("field2", "value2");, +        mutateConfig.put("update", update);, +, +        Processor mutateProcessor = (new MutateProcessor.Factory()).create(mutateConfig);, +        when(store.get("_id")).thenReturn(new Pipeline("_id", "_description", Arrays.asList(mutateProcessor)));, +++ /dev/null, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestModule.java, +++ b/plugins/ingest/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java, +import org.elasticsearch.ingest.processor.mutate.MutateProcessor;, +import java.util.Arrays;, +        processorRegistry.put("mutate", new MutateProcessor.Factory());, +        processorConfig.put("uppercase", Arrays.asList("field1"));, +        pipelineConfig.put("processors", Collections.singletonList(Collections.singletonMap("mutate", processorConfig)));, +        assertThat(pipeline.getProcessors().get(0), instanceOf(MutateProcessor.class));, +        processorRegistry.put("mutate", new MutateProcessor.Factory());, +        processorConfig.put("uppercase", Arrays.asList("field1"));, +        pipelineConfig.put("processors", Collections.singletonList(Collections.singletonMap("mutate", processorConfig)));, +            assertThat(e.getMessage(), equalTo("processor [mutate] doesn't support one or more provided configuration parameters [[foo]]"));, +++ b/plugins/ingest/src/test/java/org/elasticsearch/plugin/ingest/PipelineStoreTests.java, +import org.elasticsearch.ingest.processor.mutate.MutateProcessor;, +        store = new PipelineStore(Settings.EMPTY, threadPool, environment, clusterService, client, Collections.singletonMap(MutateProcessor.TYPE, new MutateProcessor.Factory()));, +++ b/plugins/ingest/src/test/java/org/elasticsearch/plugin/ingest/transport/IngestActionFilterTests.java, +import org.elasticsearch.ingest.processor.Processor;, +import org.elasticsearch.ingest.processor.mutate.MutateProcessor;, +import java.util.HashMap;, +import java.util.Map;, +, +        Map<String, Object> mutateConfig = new HashMap<>();, +        Map<String, Object> update = new HashMap<>();, +        update.put("field2", "value2");, +        mutateConfig.put("update", update);, +, +        Processor mutateProcessor = (new MutateProcessor.Factory()).create(mutateConfig);, +        when(store.get("_id")).thenReturn(new Pipeline("_id", "_description", Arrays.asList(mutateProcessor)));, +++ b/plugins/ingest/src/test/resources/rest-api-spec/test/ingest/20_crud.yaml, +                "mutate" : {, +                  "update" : {, +                    "field2": "_value", +                  }, +++ /dev/null, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestModule.java, +++ b/plugins/ingest/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java, +import org.elasticsearch.ingest.processor.mutate.MutateProcessor;, +import java.util.Arrays;]