[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        CollectionUtil.timSort(templateMetadata, Comparator.comparingInt(IndexTemplateMetaData::order).reversed());, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        CollectionUtil.timSort(templateMetadata, Comparator.comparingInt(IndexTemplateMetaData::order).reversed());, +++ b/core/src/main/java/org/elasticsearch/common/Numbers.java, +import java.math.BigDecimal;, +import java.math.BigInteger;, +, +, +    /** Return the long that {@code n} stores, or throws an exception if the, +     *  stored value cannot be converted to a long that stores the exact same, +     *  value. */, +    public static long toLongExact(Number n) {, +        if (n instanceof Byte || n instanceof Short || n instanceof Integer, +                || n instanceof Long) {, +            return n.longValue();, +        } else if (n instanceof Float || n instanceof Double) {, +            double d = n.doubleValue();, +            if (d != Math.round(d)) {, +                throw new IllegalArgumentException(n + " is not an integer value");, +            }, +            return n.longValue();, +        } else if (n instanceof BigDecimal) {, +            return ((BigDecimal) n).toBigIntegerExact().longValueExact();, +        } else if (n instanceof BigInteger) {, +            return ((BigInteger) n).longValueExact();, +        } else {, +            throw new IllegalArgumentException("Cannot check whether [" + n + "] of class [" + n.getClass().getName(), +                    + "] is actually a long");, +        }, +    }, +, +    /** Return the int that {@code n} stores, or throws an exception if the, +     *  stored value cannot be converted to an int that stores the exact same, +     *  value. */, +    public static int toIntExact(Number n) {, +        return Math.toIntExact(toLongExact(n));, +    }, +, +    /** Return the short that {@code n} stores, or throws an exception if the, +     *  stored value cannot be converted to a short that stores the exact same, +     *  value. */, +    public static short toShortExact(Number n) {, +        long l = toLongExact(n);, +        if (l != (short) l) {, +            throw new ArithmeticException("short overflow: " + l);, +        }, +        return (short) l;, +    }, +, +    /** Return the byte that {@code n} stores, or throws an exception if the, +     *  stored value cannot be converted to a byte that stores the exact same, +     *  value. */, +    public static byte toByteExact(Number n) {, +        long l = toLongExact(n);, +        if (l != (byte) l) {, +            throw new ArithmeticException("byte overflow: " + l);, +        }, +        return (byte) l;, +    }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        CollectionUtil.timSort(templateMetadata, Comparator.comparingInt(IndexTemplateMetaData::order).reversed());, +++ b/core/src/main/java/org/elasticsearch/common/Numbers.java, +import java.math.BigDecimal;, +import java.math.BigInteger;, +, +, +    /** Return the long that {@code n} stores, or throws an exception if the, +     *  stored value cannot be converted to a long that stores the exact same, +     *  value. */, +    public static long toLongExact(Number n) {, +        if (n instanceof Byte || n instanceof Short || n instanceof Integer, +                || n instanceof Long) {, +            return n.longValue();, +        } else if (n instanceof Float || n instanceof Double) {, +            double d = n.doubleValue();, +            if (d != Math.round(d)) {, +                throw new IllegalArgumentException(n + " is not an integer value");, +            }, +            return n.longValue();, +        } else if (n instanceof BigDecimal) {, +            return ((BigDecimal) n).toBigIntegerExact().longValueExact();, +        } else if (n instanceof BigInteger) {, +            return ((BigInteger) n).longValueExact();, +        } else {, +            throw new IllegalArgumentException("Cannot check whether [" + n + "] of class [" + n.getClass().getName(), +                    + "] is actually a long");, +        }, +    }, +, +    /** Return the int that {@code n} stores, or throws an exception if the, +     *  stored value cannot be converted to an int that stores the exact same, +     *  value. */, +    public static int toIntExact(Number n) {, +        return Math.toIntExact(toLongExact(n));, +    }, +, +    /** Return the short that {@code n} stores, or throws an exception if the, +     *  stored value cannot be converted to a short that stores the exact same, +     *  value. */]