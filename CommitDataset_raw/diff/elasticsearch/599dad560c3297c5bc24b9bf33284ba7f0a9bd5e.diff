[+++ b/client/build.gradle, +import org.elasticsearch.gradle.precommit.PrecommitTasks, +import org.gradle.api.JavaVersion, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +, +//TODO compiling from 1.8 with target 1.7 and source 1.7 is best effort, not enough to ensure we are java 7 compatible, +compileJava.options.compilerArgs << '-target' << '1.7' << '-source' << '1.7' << '-Xlint:all,-path,-serial,-options', +compileTestJava.options.compilerArgs << '-target' << '1.7' << '-source' << '1.7', +++ b/client/build.gradle, +import org.elasticsearch.gradle.precommit.PrecommitTasks, +import org.gradle.api.JavaVersion, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +, +//TODO compiling from 1.8 with target 1.7 and source 1.7 is best effort, not enough to ensure we are java 7 compatible, +compileJava.options.compilerArgs << '-target' << '1.7' << '-source' << '1.7' << '-Xlint:all,-path,-serial,-options', +compileTestJava.options.compilerArgs << '-target' << '1.7' << '-source' << '1.7', +++ b/client/src/main/java/org/elasticsearch/client/ConnectionPool.java, +import java.util.Comparator;, +import java.util.Iterator;, +    public final Iterator<Connection> nextConnection() {, +        Iterator<Connection> connectionIterator = sortedConnections.iterator();, +        while (connectionIterator.hasNext()) {, +            Connection connection = connectionIterator.next();, +            if (connection.isAlive() == false && connection.shouldBeRetried() == false) {, +                connectionIterator.remove();, +            }, +        }, +        return connectionIterator;, +        List<Connection> connections = getConnections();, +        if (connections.isEmpty()) {, +            throw new IllegalStateException("no connections available in the connection pool");, +        }, +        List<Connection> sortedConnections = new ArrayList<>(connections);, +        Collections.sort(sortedConnections, new Comparator<Connection>() {, +            @Override, +            public int compare(Connection o1, Connection o2) {, +                return Long.compare(o1.getDeadUntil(), o2.getDeadUntil());, +            }, +        });, +        return sortedConnections.get(0);, +++ b/client/build.gradle, +import org.elasticsearch.gradle.precommit.PrecommitTasks, +import org.gradle.api.JavaVersion, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +, +//TODO compiling from 1.8 with target 1.7 and source 1.7 is best effort, not enough to ensure we are java 7 compatible, +compileJava.options.compilerArgs << '-target' << '1.7' << '-source' << '1.7' << '-Xlint:all,-path,-serial,-options', +compileTestJava.options.compilerArgs << '-target' << '1.7' << '-source' << '1.7', +++ b/client/src/main/java/org/elasticsearch/client/ConnectionPool.java, +import java.util.Comparator;, +import java.util.Iterator;, +    public final Iterator<Connection> nextConnection() {, +        Iterator<Connection> connectionIterator = sortedConnections.iterator();, +        while (connectionIterator.hasNext()) {, +            Connection connection = connectionIterator.next();, +            if (connection.isAlive() == false && connection.shouldBeRetried() == false) {, +                connectionIterator.remove();, +            }, +        }, +        return connectionIterator;, +        List<Connection> connections = getConnections();, +        if (connections.isEmpty()) {, +            throw new IllegalStateException("no connections available in the connection pool");, +        }, +        List<Connection> sortedConnections = new ArrayList<>(connections);, +        Collections.sort(sortedConnections, new Comparator<Connection>() {, +            @Override, +            public int compare(Connection o1, Connection o2) {, +                return Long.compare(o1.getDeadUntil(), o2.getDeadUntil());, +            }, +        });, +        return sortedConnections.get(0);, +++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +import java.util.Collections;, +        Iterator<Connection> connectionIterator = connectionPool.nextConnection();, +            return performRequest(request, Collections.singleton(connection).iterator());, +++ b/client/build.gradle, +import org.elasticsearch.gradle.precommit.PrecommitTasks, +import org.gradle.api.JavaVersion, +targetCompatibility = JavaVersion.VERSION_1_7, +sourceCompatibility = JavaVersion.VERSION_1_7, +, +//TODO compiling from 1.8 with target 1.7 and source 1.7 is best effort, not enough to ensure we are java 7 compatible, +compileJava.options.compilerArgs << '-target' << '1.7' << '-source' << '1.7' << '-Xlint:all,-path,-serial,-options', +compileTestJava.options.compilerArgs << '-target' << '1.7' << '-source' << '1.7', +++ b/client/src/main/java/org/elasticsearch/client/ConnectionPool.java, +import java.util.Comparator;, +import java.util.Iterator;, +    public final Iterator<Connection> nextConnection() {, +        Iterator<Connection> connectionIterator = sortedConnections.iterator();, +        while (connectionIterator.hasNext()) {, +            Connection connection = connectionIterator.next();, +            if (connection.isAlive() == false && connection.shouldBeRetried() == false) {, +                connectionIterator.remove();, +            }, +        }, +        return connectionIterator;]