[+++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/ScriptProcessor.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +        final CompilerSettings compilerSettings = buildCompilerSettings(params);, +            throw convertToScriptException(source, e);, +        final CompilerSettings compilerSettings = buildCompilerSettings(params);, +        try {, +            // Drop all permissions to actually compile the code itself., +            AccessController.doPrivileged(new PrivilegedAction<Void>() {, +                @Override, +                public Void run() {, +                    String name = scriptName == null ? source : scriptName;, +                    compiler.compile(loader, reserved, name, source, compilerSettings);, +, +                    return null;, +                }, +            }, COMPILATION_CONTEXT);, +            // Note that it is safe to catch any of the following errors since Painless is stateless., +        } catch (OutOfMemoryError | StackOverflowError | VerifyError | Exception e) {, +            throw convertToScriptException(source, e);, +        }, +    }, +, +    private CompilerSettings buildCompilerSettings(Map<String, String> params) {, +        CompilerSettings compilerSettings;, +        return compilerSettings;, +    private ScriptException convertToScriptException(String scriptSource, Throwable t) {, +                    int startOffset = getPreviousStatement(offset);, +    private int getPreviousStatement(int offset) {]