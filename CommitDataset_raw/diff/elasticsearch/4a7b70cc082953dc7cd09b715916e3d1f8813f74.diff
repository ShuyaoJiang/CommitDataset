[+++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +     * Adds {@code boost} and {@code query_name} parsing to the, +     * {@link AbstractObjectParser} passed in. All query builders except, +     * {@link MatchAllQueryBuilder} and {@link MatchNoneQueryBuilder} support these fields so they, +     * should use this method., +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +     * Adds {@code boost} and {@code query_name} parsing to the, +     * {@link AbstractObjectParser} passed in. All query builders except, +     * {@link MatchAllQueryBuilder} and {@link MatchNoneQueryBuilder} support these fields so they, +     * should use this method., +++ b/core/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import static org.elasticsearch.common.xcontent.ObjectParser.fromList;, +    private String[] types = Strings.EMPTY_ARRAY;, +, +    /**, +     * Creates a new IdsQueryBuilder with no types specified upfront, +     */, +    public IdsQueryBuilder() {, +        // nothing to do, +    }, +     * @deprecated Replaced by {@link #types(String...)}, +    @Deprecated, +        types(types);, +     * Add types to query, +     */, +    public IdsQueryBuilder types(String... types) {, +        if (types == null) {, +            throw new IllegalArgumentException("[" + NAME + "] types cannot be null");, +        }, +        this.types = types;, +        return this;, +    }, +, +    /**, +            throw new IllegalArgumentException("[" + NAME + "] ids cannot be null");, +    private static ObjectParser<IdsQueryBuilder, QueryParseContext> PARSER = new ObjectParser<>(NAME,, +            () -> new IdsQueryBuilder());, +        PARSER.declareStringArray(fromList(String.class, IdsQueryBuilder::types), IdsQueryBuilder.TYPE_FIELD);, +        PARSER.declareStringArray(fromList(String.class, IdsQueryBuilder::addIds), IdsQueryBuilder.VALUES_FIELD);, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +     * Adds {@code boost} and {@code query_name} parsing to the, +     * {@link AbstractObjectParser} passed in. All query builders except, +     * {@link MatchAllQueryBuilder} and {@link MatchNoneQueryBuilder} support these fields so they, +     * should use this method., +++ b/core/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import static org.elasticsearch.common.xcontent.ObjectParser.fromList;, +    private String[] types = Strings.EMPTY_ARRAY;, +, +    /**, +     * Creates a new IdsQueryBuilder with no types specified upfront, +     */, +    public IdsQueryBuilder() {, +        // nothing to do, +    }, +     * @deprecated Replaced by {@link #types(String...)}, +    @Deprecated, +        types(types);, +     * Add types to query, +     */, +    public IdsQueryBuilder types(String... types) {, +        if (types == null) {, +            throw new IllegalArgumentException("[" + NAME + "] types cannot be null");, +        }, +        this.types = types;, +        return this;, +    }, +, +    /**, +            throw new IllegalArgumentException("[" + NAME + "] ids cannot be null");, +    private static ObjectParser<IdsQueryBuilder, QueryParseContext> PARSER = new ObjectParser<>(NAME,, +            () -> new IdsQueryBuilder());, +        PARSER.declareStringArray(fromList(String.class, IdsQueryBuilder::types), IdsQueryBuilder.TYPE_FIELD);, +        PARSER.declareStringArray(fromList(String.class, IdsQueryBuilder::addIds), IdsQueryBuilder.VALUES_FIELD);, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +        return new IdsQueryBuilder().types(types);, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +     * Adds {@code boost} and {@code query_name} parsing to the, +     * {@link AbstractObjectParser} passed in. All query builders except, +     * {@link MatchAllQueryBuilder} and {@link MatchNoneQueryBuilder} support these fields so they, +     * should use this method., +++ b/core/src/main/java/org/elasticsearch/index/query/IdsQueryBuilder.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import static org.elasticsearch.common.xcontent.ObjectParser.fromList;, +    private String[] types = Strings.EMPTY_ARRAY;, +, +    /**, +     * Creates a new IdsQueryBuilder with no types specified upfront, +     */, +    public IdsQueryBuilder() {, +        // nothing to do, +    }, +     * @deprecated Replaced by {@link #types(String...)}, +    @Deprecated, +        types(types);, +     * Add types to query]