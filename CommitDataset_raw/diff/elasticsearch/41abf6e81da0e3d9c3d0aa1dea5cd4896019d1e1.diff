[+++ b/core/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +        final String message = "[" + this.name + "] Data too large, data for [" + fieldName + "]" +, +                " would be [" + bytesNeeded + "/" + new ByteSizeValue(bytesNeeded) + "]" +, +                ", which is larger than the limit of [" +, +        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +        final String message = "[" + this.name + "] Data too large, data for [" + fieldName + "]" +, +                " would be [" + bytesNeeded + "/" + new ByteSizeValue(bytesNeeded) + "]" +, +                ", which is larger than the limit of [" +, +        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        final String message = "[" + getName() + "] Data too large, data for field [" + fieldName + "]" +, +                " would be [" + bytesNeeded + "/" + new ByteSizeValue(bytesNeeded) + "]" +, +                ", which is larger than the limit of [" +, +++ b/core/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +        final String message = "[" + this.name + "] Data too large, data for [" + fieldName + "]" +, +                " would be [" + bytesNeeded + "/" + new ByteSizeValue(bytesNeeded) + "]" +, +                ", which is larger than the limit of [" +, +        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        final String message = "[" + getName() + "] Data too large, data for field [" + fieldName + "]" +, +                " would be [" + bytesNeeded + "/" + new ByteSizeValue(bytesNeeded) + "]" +, +                ", which is larger than the limit of [" +, +++ b/core/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, +            final String message = "[parent] Data too large, data for [" + label + "]" +, +                    " would be [" + totalUsed + "/" + new ByteSizeValue(totalUsed) + "]" +, +                    ", which is larger than the limit of [" +, +                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]";, +            throw new CircuitBreakingException(message, totalUsed, parentLimit);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +        final String message = "[" + this.name + "] Data too large, data for [" + fieldName + "]" +, +                " would be [" + bytesNeeded + "/" + new ByteSizeValue(bytesNeeded) + "]" +, +                ", which is larger than the limit of [" +, +        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        final String message = "[" + getName() + "] Data too large, data for field [" + fieldName + "]" +, +                " would be [" + bytesNeeded + "/" + new ByteSizeValue(bytesNeeded) + "]" +, +                ", which is larger than the limit of [" +, +++ b/core/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, +            final String message = "[parent] Data too large, data for [" + label + "]" +, +                    " would be [" + totalUsed + "/" + new ByteSizeValue(totalUsed) + "]" +, +                    ", which is larger than the limit of [" +, +                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]";, +            throw new CircuitBreakingException(message, totalUsed, parentLimit);, +++ b/core/src/test/java/org/elasticsearch/common/breaker/MemoryCircuitBreakerTests.java, +, +            long newUsed = (long)(breaker.getUsed() * breaker.getOverhead());, +            assertThat(cbe.getMessage().contains("would be [" + newUsed + "/"), equalTo(true));, +++ b/core/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java, +        final String message = "[" + this.name + "] Data too large, data for [" + fieldName + "]" +, +                " would be [" + bytesNeeded + "/" + new ByteSizeValue(bytesNeeded) + "]" +, +                ", which is larger than the limit of [" +, +        throw new CircuitBreakingException(message, bytesNeeded, memoryBytesLimit);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        final String message = "[" + getName() + "] Data too large, data for field [" + fieldName + "]" +, +                " would be [" + bytesNeeded + "/" + new ByteSizeValue(bytesNeeded) + "]" +, +                ", which is larger than the limit of [" +, +++ b/core/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, +            final String message = "[parent] Data too large, data for [" + label + "]" +, +                    " would be [" + totalUsed + "/" + new ByteSizeValue(totalUsed) + "]" +, +                    ", which is larger than the limit of [" +, +                    parentLimit + "/" + new ByteSizeValue(parentLimit) + "]";, +            throw new CircuitBreakingException(message, totalUsed, parentLimit);, +++ b/core/src/test/java/org/elasticsearch/common/breaker/MemoryCircuitBreakerTests.java, +, +            long newUsed = (long)(breaker.getUsed() * breaker.getOverhead());, +            assertThat(cbe.getMessage().contains("would be [" + newUsed + "/"), equalTo(true));, +++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java, +, +        String errMsg = "Data too large, data for [test] would be";, +        assertFailures(searchRequest, RestStatus.INTERNAL_SERVER_ERROR, containsString(errMsg));, +        errMsg = "which is larger than the limit of [100/100b]";, +        assertFailures(searchRequest, RestStatus.INTERNAL_SERVER_ERROR, containsString(errMsg));, +        SearchRequestBuilder searchRequest = client.prepareSearch("ramtest").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC);, +, +        String errMsg = "Data too large, data for [test] would be";, +        assertFailures(searchRequest, RestStatus.INTERNAL_SERVER_ERROR, containsString(errMsg));, +        errMsg = "which is larger than the limit of [100/100b]";, +        assertFailures(searchRequest, RestStatus.INTERNAL_SERVER_ERROR, containsString(errMsg));, +            String errMsg = "CircuitBreakingException[[fielddata] Data too large, data for [test] would be";, +            assertThat("Exception: [" + e.toString() + "] should contain a CircuitBreakingException", e.toString(), containsString(errMsg));, +            errMsg = "which is larger than the limit of [10/10b]]";, +            assertThat("Exception: [" + e.toString() + "] should contain a CircuitBreakingException", e.toString(), containsString(errMsg));, +        // execute a search that loads field data (sorting on the "test" field), +        // again, this time it should trip the breaker, +        SearchRequestBuilder searchRequest = client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test", SortOrder.DESC);, +, +        String errMsg = "Data too large, data for [test] would be";, +        assertFailures(searchRequest, RestStatus.INTERNAL_SERVER_ERROR, containsString(errMsg));, +        errMsg = "which is larger than the limit of [10/10b]";, +        assertFailures(searchRequest, RestStatus.INTERNAL_SERVER_ERROR, containsString(errMsg));, +            assertThat("Exception: [" + e.toString() + "] should contain a CircuitBreakingException", e.toString(), containsString(errMsg));, +            errMsg = "which is larger than the limit of [10/10b]]";, +            String errMsg = "CircuitBreakingException[[request] Data too large, data for [<agg [my_terms]>] would be";, +            assertThat("Exception: [" + e.toString() + "] should contain a CircuitBreakingException",, +                    e.toString(), containsString(errMsg));, +            errMsg = "which is larger than the limit of [100/100b]]";, +            assertThat("Exception: [" + e.toString() + "] should contain a CircuitBreakingException",]