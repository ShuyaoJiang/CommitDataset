[+++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/AggValues.java, + * Aggregations are returned by Elasticsearch in a tree structure where each, + * nested level can have a different size. For example a group by a, b, c, + * results in 3-level nested array where each level contains all the relevant, + * values for its parent entry., + * <p>, + * <ul>, + * <li>A-agg level = { A1, A2 }, + * <li>B-agg level = { { A1B1, A1B2, A1B3 }, { A2B1, A2B2, A2B3 }, + * <li>C-agg level = { { { A1B1C1, A1B1C2 ..}, { A1B2C1, etc... } } } and so on, + * </ul>, + * <p>, + * Further more the columns are added in the order in which they are requested, + * (0, 1, 2) eliminating the need for keys as these are implicit (their position, + * in the list)., + * <p>, + * one that carries (increments) the counter for each level (indicated by the, + * position inside the array) once the children reach their max a flat cursor, + * to indicate the row., +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/AggValues.java, + * Aggregations are returned by Elasticsearch in a tree structure where each, + * nested level can have a different size. For example a group by a, b, c, + * results in 3-level nested array where each level contains all the relevant, + * values for its parent entry., + * <p>, + * <ul>, + * <li>A-agg level = { A1, A2 }, + * <li>B-agg level = { { A1B1, A1B2, A1B3 }, { A2B1, A2B2, A2B3 }, + * <li>C-agg level = { { { A1B1C1, A1B1C2 ..}, { A1B2C1, etc... } } } and so on, + * </ul>, + * <p>, + * Further more the columns are added in the order in which they are requested, + * (0, 1, 2) eliminating the need for keys as these are implicit (their position, + * in the list)., + * <p>, + * one that carries (increments) the counter for each level (indicated by the, + * position inside the array) once the children reach their max a flat cursor, + * to indicate the row., +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/Scroller.java, +        AggsScrollActionListener(ActionListener<SchemaRowSet> listener, Client client, TimeValue keepAlive,, +                Schema schema, QueryContainer query) {, +                proc = proc.transformDown(l -> new HitExtractorInput(l.expression(),, +                        createExtractor(l.context())), ReferenceInput.class);, +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/AggValues.java, + * Aggregations are returned by Elasticsearch in a tree structure where each, + * nested level can have a different size. For example a group by a, b, c, + * results in 3-level nested array where each level contains all the relevant, + * values for its parent entry., + * <p>, + * <ul>, + * <li>A-agg level = { A1, A2 }, + * <li>B-agg level = { { A1B1, A1B2, A1B3 }, { A2B1, A2B2, A2B3 }, + * <li>C-agg level = { { { A1B1C1, A1B1C2 ..}, { A1B2C1, etc... } } } and so on, + * </ul>, + * <p>, + * Further more the columns are added in the order in which they are requested, + * (0, 1, 2) eliminating the need for keys as these are implicit (their position, + * in the list)., + * <p>, + * one that carries (increments) the counter for each level (indicated by the, + * position inside the array) once the children reach their max a flat cursor, + * to indicate the row., +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/Scroller.java, +        AggsScrollActionListener(ActionListener<SchemaRowSet> listener, Client client, TimeValue keepAlive,, +                Schema schema, QueryContainer query) {, +                proc = proc.transformDown(l -> new HitExtractorInput(l.expression(),, +                        createExtractor(l.context())), ReferenceInput.class);, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +                sortBuilder = scriptSort(ss.script().toPainless(),, +                        ss.script().outputType().isNumeric() ? ScriptSortType.NUMBER : ScriptSortType.STRING);]