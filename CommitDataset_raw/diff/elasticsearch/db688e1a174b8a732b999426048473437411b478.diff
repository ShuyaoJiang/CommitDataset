[+++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java, +import org.elasticsearch.Version;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.master.MasterNodeRequest;, +import org.elasticsearch.action.support.master.TransportMasterNodeAction;, +import org.elasticsearch.cluster.ClusterStateListener;, +import org.elasticsearch.cluster.ClusterStateTaskListener;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +public class SnapshotShardsService extends AbstractLifecycleComponent implements ClusterStateListener, IndexEventListener {, +    public static final String UPDATE_SNAPSHOT_STATUS_ACTION_NAME_V6 = "internal:cluster/snapshot/update_snapshot";, +    public static final String UPDATE_SNAPSHOT_STATUS_ACTION_NAME = "internal:cluster/snapshot/update_snapshot_status";, +, +    private UpdateSnapshotStatusAction updateSnapshotStatusHandler;, +                                 TransportService transportService, IndicesService indicesService,, +                                 ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {, +            clusterService.addListener(this);, +        // The constructor of UpdateSnapshotStatusAction will register itself to the TransportService., +        this.updateSnapshotStatusHandler = new UpdateSnapshotStatusAction(settings, UPDATE_SNAPSHOT_STATUS_ACTION_NAME,, +            transportService, clusterService, threadPool, actionFilters, indexNameExpressionResolver);, +, +            transportService.registerRequestHandler(UPDATE_SNAPSHOT_STATUS_ACTION_NAME_V6, UpdateSnapshotStatusRequestV6::new, ThreadPool.Names.SAME, new UpdateSnapshotStateRequestHandlerV6());, +        assert this.updateSnapshotStatusHandler != null;, +        assert transportService.getRequestHandler(UPDATE_SNAPSHOT_STATUS_ACTION_NAME) != null;, +        if (DiscoveryNode.isMasterNode(settings)) {, +            assert transportService.getRequestHandler(UPDATE_SNAPSHOT_STATUS_ACTION_NAME_V6) != null;, +        }, +        clusterService.removeListener(this);, +    public void clusterChanged(ClusterChangedEvent event) {, +    public static class UpdateIndexShardSnapshotStatusRequest extends MasterNodeRequest<UpdateIndexShardSnapshotStatusRequest> {, +            // By default, we keep trying to post snapshot status messages to avoid snapshot processes getting stuck., +            this.masterNodeTimeout = TimeValue.timeValueNanos(Long.MAX_VALUE);, +        }, +, +        @Override, +        public ActionRequestValidationException validate() {, +            return null;, +            if (master.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +                UpdateIndexShardSnapshotStatusRequest request = new UpdateIndexShardSnapshotStatusRequest(snapshot, shardId, status);, +                transportService.sendRequest(transportService.getLocalNode(), UPDATE_SNAPSHOT_STATUS_ACTION_NAME, request, EmptyTransportResponseHandler.INSTANCE_SAME);, +            } else {, +                UpdateSnapshotStatusRequestV6 requestV6 = new UpdateSnapshotStatusRequestV6(snapshot, shardId, status);, +                transportService.sendRequest(master, UPDATE_SNAPSHOT_STATUS_ACTION_NAME_V6, requestV6, EmptyTransportResponseHandler.INSTANCE_SAME);, +            }, +            logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] [{}] failed to update snapshot state", snapshot, status), e);, +    private void innerUpdateSnapshotState(final UpdateIndexShardSnapshotStatusRequest request, ActionListener<UpdateIndexShardSnapshotStatusResponse> listener) {, +            new ClusterStateTaskListener() {, +                @Override, +                public void onFailure(String source, Exception e) {, +                    listener.onFailure(e);, +                }, +, +                @Override, +                public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +                    listener.onResponse(new UpdateIndexShardSnapshotStatusResponse());, +                }, +            });, +    static class UpdateIndexShardSnapshotStatusResponse extends ActionResponse {, +, +    }, +, +    class UpdateSnapshotStatusAction extends TransportMasterNodeAction<UpdateIndexShardSnapshotStatusRequest, UpdateIndexShardSnapshotStatusResponse> {, +        UpdateSnapshotStatusAction(Settings settings, String actionName, TransportService transportService, ClusterService clusterService,, +                                   ThreadPool threadPool, ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {, +            super(settings, actionName, transportService, clusterService, threadPool, actionFilters, indexNameExpressionResolver, UpdateIndexShardSnapshotStatusRequest::new);, +        }, +, +        protected String executor() {, +            return ThreadPool.Names.SAME;, +        }, +, +        @Override, +        protected UpdateIndexShardSnapshotStatusResponse newResponse() {, +            return new UpdateIndexShardSnapshotStatusResponse();, +        }, +, +        @Override, +        protected void masterOperation(UpdateIndexShardSnapshotStatusRequest request, ClusterState state, ActionListener<UpdateIndexShardSnapshotStatusResponse> listener) throws Exception {, +            innerUpdateSnapshotState(request, listener);, +        }, +, +        @Override, +        protected ClusterBlockException checkBlock(UpdateIndexShardSnapshotStatusRequest request, ClusterState state) {, +            return null;, +        }, +    }, +, +    /**, +     * A BWC version of {@link UpdateIndexShardSnapshotStatusRequest}, +     */, +    static class UpdateSnapshotStatusRequestV6 extends TransportRequest {, +        private Snapshot snapshot;, +        private ShardId shardId;, +        private ShardSnapshotStatus status;, +, +        UpdateSnapshotStatusRequestV6() {, +]