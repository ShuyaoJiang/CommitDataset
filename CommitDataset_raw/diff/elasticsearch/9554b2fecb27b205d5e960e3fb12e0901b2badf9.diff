[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +                autoFollower.removed = true;, +        assert assertNoOtherActiveAutoFollower(newAutoFollowers);, +    private boolean assertNoOtherActiveAutoFollower(Map<String, AutoFollower> newAutoFollowers) {, +        for (AutoFollower newAutoFollower : newAutoFollowers.values()) {, +            AutoFollower previousInstance = autoFollowers.get(newAutoFollower.remoteCluster);, +            assert previousInstance == null || previousInstance.removed;, +        }, +        return true;, +    }, +, +, +    Map<String, AutoFollower> getAutoFollowers() {, +        return autoFollowers;, +    }, +, +        volatile boolean removed = false;, +            if (removed) {, +                // This check exists to avoid two AutoFollower instances a single remote cluster., +                // (If an auto follow pattern is deleted and then added back quickly enough then, +                // the old AutoFollower instance still sees that there is an auto follow pattern, +                // for the remote cluster it is tracking and will continue to operate, while in, +                // the meantime in updateAutoFollowers() method another AutoFollower instance has been, +                // started for the same remote cluster.), +                LOGGER.info("AutoFollower instance for cluster [{}] has been removed", remoteCluster);, +                return;, +            }, +, +                // Also check removed flag here, as it may take a while for this remote cluster state api call to return:, +                if (removed) {, +                    LOGGER.info("AutoFollower instance for cluster [{}] has been removed", remoteCluster);, +                    return;, +                }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +                autoFollower.removed = true;, +        assert assertNoOtherActiveAutoFollower(newAutoFollowers);, +    private boolean assertNoOtherActiveAutoFollower(Map<String, AutoFollower> newAutoFollowers) {, +        for (AutoFollower newAutoFollower : newAutoFollowers.values()) {, +            AutoFollower previousInstance = autoFollowers.get(newAutoFollower.remoteCluster);, +            assert previousInstance == null || previousInstance.removed;, +        }, +        return true;, +    }, +, +, +    Map<String, AutoFollower> getAutoFollowers() {, +        return autoFollowers;, +    }, +, +        volatile boolean removed = false;, +            if (removed) {, +                // This check exists to avoid two AutoFollower instances a single remote cluster., +                // (If an auto follow pattern is deleted and then added back quickly enough then, +                // the old AutoFollower instance still sees that there is an auto follow pattern, +                // for the remote cluster it is tracking and will continue to operate, while in, +                // the meantime in updateAutoFollowers() method another AutoFollower instance has been, +                // started for the same remote cluster.), +                LOGGER.info("AutoFollower instance for cluster [{}] has been removed", remoteCluster);, +                return;, +            }, +, +                // Also check removed flag here, as it may take a while for this remote cluster state api call to return:, +                if (removed) {, +                    LOGGER.info("AutoFollower instance for cluster [{}] has been removed", remoteCluster);, +                    return;, +                }, +, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/AutoFollowIT.java, +        AutoFollowStats[] autoFollowStats = new AutoFollowStats[1];, +                autoFollowStats[0] = getAutoFollowStats();, +                // Ensure that there are no auto follow errors:, +                // (added specifically to see that there are no leader indices auto followed multiple times), +                assertThat(autoFollowStats[0].getRecentAutoFollowErrors().size(), equalTo(0));, +            logger.warn("auto follow stats={}", Strings.toString(autoFollowStats[0]));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +                autoFollower.removed = true;, +        assert assertNoOtherActiveAutoFollower(newAutoFollowers);, +    private boolean assertNoOtherActiveAutoFollower(Map<String, AutoFollower> newAutoFollowers) {, +        for (AutoFollower newAutoFollower : newAutoFollowers.values()) {, +            AutoFollower previousInstance = autoFollowers.get(newAutoFollower.remoteCluster);, +            assert previousInstance == null || previousInstance.removed;, +        }, +        return true;, +    }, +, +, +    Map<String, AutoFollower> getAutoFollowers() {, +        return autoFollowers;, +    }, +, +        volatile boolean removed = false;, +            if (removed) {, +                // This check exists to avoid two AutoFollower instances a single remote cluster., +                // (If an auto follow pattern is deleted and then added back quickly enough then, +                // the old AutoFollower instance still sees that there is an auto follow pattern, +                // for the remote cluster it is tracking and will continue to operate, while in, +                // the meantime in updateAutoFollowers() method another AutoFollower instance has been, +                // started for the same remote cluster.), +                LOGGER.info("AutoFollower instance for cluster [{}] has been removed", remoteCluster);]