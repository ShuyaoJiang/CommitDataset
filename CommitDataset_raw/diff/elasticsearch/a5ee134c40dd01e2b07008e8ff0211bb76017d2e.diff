[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityClient.java, +import org.elasticsearch.client.security.GetRoleMappingsRequest;, +import org.elasticsearch.client.security.GetRoleMappingsResponse;, +     * Synchronously get role mapping(s)., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role-mapping.html">, +     * the docs</a> for more., +     *, +     * @param request {@link GetRoleMappingsRequest} with role mapping name(s)., +     * If no role mapping name is provided then retrieves all role mappings., +     * @param options the request options (e.g. headers), use, +     * {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response from the get role mapping call, +     * @throws IOException in case there is a problem sending the request or, +     * parsing back the response, +     */, +    public GetRoleMappingsResponse getRoleMappings(final GetRoleMappingsRequest request, final RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, SecurityRequestConverters::getRoleMappings,, +            options, GetRoleMappingsResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously get role mapping(s)., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role-mapping.html">, +     * the docs</a> for more., +     *, +     * @param request {@link GetRoleMappingsRequest} with role mapping name(s)., +     * If no role mapping name is provided then retrieves all role mappings., +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void getRoleMappingsAsync(final GetRoleMappingsRequest request, final RequestOptions options,, +            final ActionListener<GetRoleMappingsResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, SecurityRequestConverters::getRoleMappings,, +                options, GetRoleMappingsResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityClient.java, +import org.elasticsearch.client.security.GetRoleMappingsRequest;, +import org.elasticsearch.client.security.GetRoleMappingsResponse;, +     * Synchronously get role mapping(s)., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role-mapping.html">, +     * the docs</a> for more., +     *, +     * @param request {@link GetRoleMappingsRequest} with role mapping name(s)., +     * If no role mapping name is provided then retrieves all role mappings., +     * @param options the request options (e.g. headers), use, +     * {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response from the get role mapping call, +     * @throws IOException in case there is a problem sending the request or, +     * parsing back the response, +     */, +    public GetRoleMappingsResponse getRoleMappings(final GetRoleMappingsRequest request, final RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, SecurityRequestConverters::getRoleMappings,, +            options, GetRoleMappingsResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously get role mapping(s)., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role-mapping.html">, +     * the docs</a> for more., +     *, +     * @param request {@link GetRoleMappingsRequest} with role mapping name(s)., +     * If no role mapping name is provided then retrieves all role mappings., +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void getRoleMappingsAsync(final GetRoleMappingsRequest request, final RequestOptions options,, +            final ActionListener<GetRoleMappingsResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, SecurityRequestConverters::getRoleMappings,, +                options, GetRoleMappingsResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityRequestConverters.java, +import org.apache.http.client.methods.HttpGet;, +import org.elasticsearch.client.security.GetRoleMappingsRequest;, +import org.elasticsearch.common.Strings;, +    static Request getRoleMappings(final GetRoleMappingsRequest getRoleMappingRequest) throws IOException {, +        RequestConverters.EndpointBuilder builder = new RequestConverters.EndpointBuilder();, +        builder.addPathPartAsIs("_xpack/security/role_mapping");, +        if (getRoleMappingRequest.getRoleMappingNames().size() > 0) {, +            builder.addPathPart(Strings.collectionToCommaDelimitedString(getRoleMappingRequest.getRoleMappingNames()));, +        }, +        return new Request(HttpGet.METHOD_NAME, builder.build());, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SecurityClient.java, +import org.elasticsearch.client.security.GetRoleMappingsRequest;, +import org.elasticsearch.client.security.GetRoleMappingsResponse;, +     * Synchronously get role mapping(s)., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role-mapping.html">, +     * the docs</a> for more., +     *, +     * @param request {@link GetRoleMappingsRequest} with role mapping name(s)., +     * If no role mapping name is provided then retrieves all role mappings., +     * @param options the request options (e.g. headers), use, +     * {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response from the get role mapping call, +     * @throws IOException in case there is a problem sending the request or]