[+++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +import static org.hamcrest.Matchers.containsString;, +    public void testFollowNonExistingLeaderIndex() throws Exception {, +        assumeFalse("Test should only run when both clusters are running", runningAgainstLeaderCluster);, +        ResponseException e = expectThrows(ResponseException.class,, +            () -> followIndex("leader_cluster:non-existing-index", "non-existing-index"));, +        assertThat(e.getMessage(), containsString("no such index"));, +        assertThat(e.getResponse().getStatusLine().getStatusCode(), equalTo(404));, +, +        e = expectThrows(ResponseException.class, () -> createAndFollowIndex("leader_cluster:non-existing-index", "non-existing-index"));, +        assertThat(e.getMessage(), containsString("no such index"));, +        assertThat(e.getResponse().getStatusLine().getStatusCode(), equalTo(404));, +    }, +, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +import static org.hamcrest.Matchers.containsString;, +    public void testFollowNonExistingLeaderIndex() throws Exception {, +        assumeFalse("Test should only run when both clusters are running", runningAgainstLeaderCluster);, +        ResponseException e = expectThrows(ResponseException.class,, +            () -> followIndex("leader_cluster:non-existing-index", "non-existing-index"));, +        assertThat(e.getMessage(), containsString("no such index"));, +        assertThat(e.getResponse().getStatusLine().getStatusCode(), equalTo(404));, +, +        e = expectThrows(ResponseException.class, () -> createAndFollowIndex("leader_cluster:non-existing-index", "non-existing-index"));, +        assertThat(e.getMessage(), containsString("no such index"));, +        assertThat(e.getResponse().getStatusLine().getStatusCode(), equalTo(404));, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java, +import org.elasticsearch.index.IndexNotFoundException;, +                    if (leaderIndexMetaData == null) {, +                        onFailure.accept(new IndexNotFoundException(leaderIndex));, +                        return;, +                    }, +, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +import static org.hamcrest.Matchers.containsString;, +    public void testFollowNonExistingLeaderIndex() throws Exception {, +        assumeFalse("Test should only run when both clusters are running", runningAgainstLeaderCluster);, +        ResponseException e = expectThrows(ResponseException.class,, +            () -> followIndex("leader_cluster:non-existing-index", "non-existing-index"));, +        assertThat(e.getMessage(), containsString("no such index"));, +        assertThat(e.getResponse().getStatusLine().getStatusCode(), equalTo(404));, +, +        e = expectThrows(ResponseException.class, () -> createAndFollowIndex("leader_cluster:non-existing-index", "non-existing-index"));, +        assertThat(e.getMessage(), containsString("no such index"));, +        assertThat(e.getResponse().getStatusLine().getStatusCode(), equalTo(404));, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java, +import org.elasticsearch.index.IndexNotFoundException;, +                    if (leaderIndexMetaData == null) {, +                        onFailure.accept(new IndexNotFoundException(leaderIndex));, +                        return;, +                    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportCreateAndFollowIndexAction.java, +import org.elasticsearch.index.IndexNotFoundException;, +        if (leaderIndexMetadata == null) {, +            listener.onFailure(new IndexNotFoundException(leaderIndex));, +            return;, +        }, +, +++ b/x-pack/plugin/ccr/qa/multi-cluster/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexIT.java, +import static org.hamcrest.Matchers.containsString;, +    public void testFollowNonExistingLeaderIndex() throws Exception {, +        assumeFalse("Test should only run when both clusters are running", runningAgainstLeaderCluster);, +        ResponseException e = expectThrows(ResponseException.class,, +            () -> followIndex("leader_cluster:non-existing-index", "non-existing-index"));, +        assertThat(e.getMessage(), containsString("no such index"));, +        assertThat(e.getResponse().getStatusLine().getStatusCode(), equalTo(404));, +, +        e = expectThrows(ResponseException.class, () -> createAndFollowIndex("leader_cluster:non-existing-index", "non-existing-index"));, +        assertThat(e.getMessage(), containsString("no such index"));, +        assertThat(e.getResponse().getStatusLine().getStatusCode(), equalTo(404));, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrLicenseChecker.java, +import org.elasticsearch.index.IndexNotFoundException;, +                    if (leaderIndexMetaData == null) {, +                        onFailure.accept(new IndexNotFoundException(leaderIndex));, +                        return;, +                    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportCreateAndFollowIndexAction.java, +import org.elasticsearch.index.IndexNotFoundException;, +        if (leaderIndexMetadata == null) {, +            listener.onFailure(new IndexNotFoundException(leaderIndex));, +            return;, +        }, +, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/ShardChangesIT.java, +        expectThrows(IndexNotFoundException.class,, +            () -> client().execute(CreateAndFollowIndexAction.INSTANCE, new CreateAndFollowIndexAction.Request(followRequest1)), +                .actionGet());, +        expectThrows(IndexNotFoundException.class,, +            () -> client().execute(CreateAndFollowIndexAction.INSTANCE, new CreateAndFollowIndexAction.Request(followRequest2)), +                .actionGet());, +        expectThrows(IndexNotFoundException.class,, +            () -> client().execute(CreateAndFollowIndexAction.INSTANCE, new CreateAndFollowIndexAction.Request(followRequest3))]