[+++ b/core/src/main/java/org/elasticsearch/index/translog/TranslogWriter.java, +            boolean success = false;, +                final TranslogReader reader = new TranslogReader(generation, channel, path, firstOperationOffset, getWrittenOffset(), operationCounter);, +                success = true;, +                return reader;, +            } finally {, +                if (success == false) {, +                }, +++ b/core/src/main/java/org/elasticsearch/index/translog/TranslogWriter.java, +            boolean success = false;, +                final TranslogReader reader = new TranslogReader(generation, channel, path, firstOperationOffset, getWrittenOffset(), operationCounter);, +                success = true;, +                return reader;, +            } finally {, +                if (success == false) {, +                }, +++ b/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java, +    public void testFailWriterWhileClosing() throws IOException {, +        Path tempDir = createTempDir();, +        final FailSwitch fail = new FailSwitch();, +        fail.failNever();, +        TranslogConfig config = getTranslogConfig(tempDir);, +        try (Translog translog = getFailableTranslog(fail, config)) {, +            final TranslogWriter writer = translog.createWriter(0);, +            final int numOps = randomIntBetween(10, 100);, +            byte[] bytes = new byte[4];, +            ByteArrayDataOutput out = new ByteArrayDataOutput(bytes);, +            for (int i = 0; i < numOps; i++) {, +                out.reset(bytes);, +                out.writeInt(i);, +                writer.add(new BytesArray(bytes));, +            }, +            writer.sync();, +            try {, +                fail.failAlways();, +                writer.closeIntoReader();, +                fail();, +            } catch (MockDirectoryWrapper.FakeIOException ex) {, +            }, +            try (TranslogReader reader = translog.openReader(writer.path(), Checkpoint.read(translog.location().resolve(Translog.CHECKPOINT_FILE_NAME)))) {, +                for (int i = 0; i < numOps; i++) {, +                    ByteBuffer buffer = ByteBuffer.allocate(4);, +                    reader.readBytes(buffer, reader.getFirstOperationOffset() + 4 * i);, +                    buffer.flip();, +                    final int value = buffer.getInt();, +                    assertEquals(i, value);, +                }, +            }, +, +        }, +, +    }, +]