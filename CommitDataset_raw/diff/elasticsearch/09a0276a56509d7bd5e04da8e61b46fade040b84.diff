[+++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/XPackBuild.java, +import org.elasticsearch.common.SuppressForbidden;, +import org.elasticsearch.common.io.PathUtils;, +import java.net.URISyntaxException;, +import java.net.URL;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.util.jar.JarInputStream;, +import java.util.jar.Manifest;, + * Information about the built version of x-pack that is running., +        final String shortHash;, +        final String date;, +        Path path = getElasticsearchCodebase();, +        if (path.toString().endsWith(".jar")) {, +            try (JarInputStream jar = new JarInputStream(Files.newInputStream(path))) {, +                Manifest manifest = jar.getManifest();, +                shortHash = manifest.getMainAttributes().getValue("Change");, +                date = manifest.getMainAttributes().getValue("Build-Date");, +            } catch (IOException e) {, +                throw new RuntimeException(e);, +        } else {, +            // not running from a jar (unit tests, IDE), +            shortHash = "Unknown";, +            date = "Unknown";, +        CURRENT = new XPackBuild(shortHash, date);, +    /**, +     * Returns path to xpack codebase path, +     */, +    @SuppressForbidden(reason = "looks up path of xpack.jar directly"), +    static Path getElasticsearchCodebase() {, +        URL url = XPackBuild.class.getProtectionDomain().getCodeSource().getLocation();, +        try {, +            return PathUtils.get(url.toURI());, +        } catch (URISyntaxException bogus) {, +            throw new RuntimeException(bogus);, +        }, +    private String shortHash;, +    private String date;, +, +    XPackBuild(String shortHash, String date) {, +        this.shortHash = shortHash;, +        this.date = date;, +    public String shortHash() {, +        return shortHash;, +    public String date() {, +        return date;, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/XPackBuild.java, +import org.elasticsearch.common.SuppressForbidden;, +import org.elasticsearch.common.io.PathUtils;, +import java.net.URISyntaxException;, +import java.net.URL;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.util.jar.JarInputStream;, +import java.util.jar.Manifest;, + * Information about the built version of x-pack that is running., +        final String shortHash;, +        final String date;, +        Path path = getElasticsearchCodebase();, +        if (path.toString().endsWith(".jar")) {, +            try (JarInputStream jar = new JarInputStream(Files.newInputStream(path))) {, +                Manifest manifest = jar.getManifest();, +                shortHash = manifest.getMainAttributes().getValue("Change");, +                date = manifest.getMainAttributes().getValue("Build-Date");, +            } catch (IOException e) {, +                throw new RuntimeException(e);, +        } else {, +            // not running from a jar (unit tests, IDE), +            shortHash = "Unknown";, +            date = "Unknown";, +        CURRENT = new XPackBuild(shortHash, date);, +    /**, +     * Returns path to xpack codebase path, +     */, +    @SuppressForbidden(reason = "looks up path of xpack.jar directly"), +    static Path getElasticsearchCodebase() {, +        URL url = XPackBuild.class.getProtectionDomain().getCodeSource().getLocation();, +        try {, +            return PathUtils.get(url.toURI());, +        } catch (URISyntaxException bogus) {, +            throw new RuntimeException(bogus);, +        }, +    private String shortHash;, +    private String date;, +, +    XPackBuild(String shortHash, String date) {, +        this.shortHash = shortHash;, +        this.date = date;, +    public String shortHash() {, +        return shortHash;, +    public String date() {, +        return date;, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/action/XPackInfoResponse.java, +            this(build.shortHash(), build.date());, +                    .field("date", timestamp)]