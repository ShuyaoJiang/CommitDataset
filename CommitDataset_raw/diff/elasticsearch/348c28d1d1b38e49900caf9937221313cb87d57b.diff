[+++ b/client/rest-high-level/src/main/resources/forbidden/rest-high-level-signatures.txt, +++ b/client/rest-high-level/src/main/resources/forbidden/rest-high-level-signatures.txt, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerTests.java, +        final Logger logger = new PrefixLogger(LogManager.getLogger("prefix_test"), prefix);, +            new PrefixLogger(LogManager.getLogger("logger" + i), "prefix" + i);, +++ b/client/rest-high-level/src/main/resources/forbidden/rest-high-level-signatures.txt, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerTests.java, +        final Logger logger = new PrefixLogger(LogManager.getLogger("prefix_test"), prefix);, +            new PrefixLogger(LogManager.getLogger("logger" + i), "prefix" + i);, +++ /dev/null, +++ b/client/rest-high-level/src/main/resources/forbidden/rest-high-level-signatures.txt, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerTests.java, +        final Logger logger = new PrefixLogger(LogManager.getLogger("prefix_test"), prefix);, +            new PrefixLogger(LogManager.getLogger("logger" + i), "prefix" + i);, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +        String prefix = formatPrefix(shardId.getIndexName(), Integer.toString(shardId.id()));, +        return new PrefixLogger(LogManager.getLogger(loggerName), prefix);, +        return new PrefixLogger(LogManager.getLogger(clazz), formatPrefix(prefixes));, +        Logger inner = LogManager.getLogger(parentLogger.getName() + s);, +            return new PrefixLogger(inner, ((PrefixLogger)parentLogger).prefix());, +        return inner;, +++ b/client/rest-high-level/src/main/resources/forbidden/rest-high-level-signatures.txt, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerTests.java, +        final Logger logger = new PrefixLogger(LogManager.getLogger("prefix_test"), prefix);, +            new PrefixLogger(LogManager.getLogger("logger" + i), "prefix" + i);, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +        String prefix = formatPrefix(shardId.getIndexName(), Integer.toString(shardId.id()));, +        return new PrefixLogger(LogManager.getLogger(loggerName), prefix);, +        return new PrefixLogger(LogManager.getLogger(clazz), formatPrefix(prefixes));, +        Logger inner = LogManager.getLogger(parentLogger.getName() + s);, +            return new PrefixLogger(inner, ((PrefixLogger)parentLogger).prefix());, +        return inner;, +++ b/server/src/main/java/org/elasticsearch/common/logging/PrefixLogger.java, +import org.apache.logging.log4j.Logger;, +    PrefixLogger(final Logger logger, final String prefix) {, +        super((ExtendedLogger) logger, logger.getName(), null);, +        if (prefix == null || prefix.isEmpty()) {, +            throw new IllegalArgumentException("if you don't need a prefix then use a regular logger");, +        }, +            final Marker maybeMarker = markers.get(prefix);, +                actualMarker = new MarkerManager.Log4jMarker(prefix);, +                markers.put(new String(prefix), actualMarker);, +++ b/client/rest-high-level/src/main/resources/forbidden/rest-high-level-signatures.txt, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/common/logging/EvilLoggerTests.java, +        final Logger logger = new PrefixLogger(LogManager.getLogger("prefix_test"), prefix);, +            new PrefixLogger(LogManager.getLogger("logger" + i), "prefix" + i);, +++ /dev/null, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +        String prefix = formatPrefix(shardId.getIndexName(), Integer.toString(shardId.id()));, +        return new PrefixLogger(LogManager.getLogger(loggerName), prefix);, +        return new PrefixLogger(LogManager.getLogger(clazz), formatPrefix(prefixes));, +        Logger inner = LogManager.getLogger(parentLogger.getName() + s);, +            return new PrefixLogger(inner, ((PrefixLogger)parentLogger).prefix());, +        return inner;, +++ b/server/src/main/java/org/elasticsearch/common/logging/PrefixLogger.java, +import org.apache.logging.log4j.Logger;, +    PrefixLogger(final Logger logger, final String prefix) {, +        super((ExtendedLogger) logger, logger.getName(), null);, +        if (prefix == null || prefix.isEmpty()) {, +            throw new IllegalArgumentException("if you don't need a prefix then use a regular logger");, +        }, +            final Marker maybeMarker = markers.get(prefix);, +                actualMarker = new MarkerManager.Log4jMarker(prefix);, +                markers.put(new String(prefix), actualMarker);, +++ b/server/src/test/java/org/elasticsearch/common/logging/PrefixLoggerTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.logging;, +, +import org.elasticsearch.test.ESTestCase;, +, +import static org.hamcrest.Matchers.containsString;, +, +public class PrefixLoggerTests extends ESTestCase {, +    public void testNullPrefix() {, +        Exception e = expectThrows(IllegalArgumentException.class, () -> new PrefixLogger(logger, null));, +        assertThat(e.getMessage(), containsString("use a regular logger"));, +    }, +, +    public void testEmptyPrefix() {, +        Exception e = expectThrows(IllegalArgumentException.class, () -> new PrefixLogger(logger, ""));]