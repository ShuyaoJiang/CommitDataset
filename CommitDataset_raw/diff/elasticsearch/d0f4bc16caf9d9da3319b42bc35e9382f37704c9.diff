[+++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +import java.util.Objects;, +        Objects.requireNonNull(minValue, "minValue must not be null");, +        Objects.requireNonNull(maxValue, "maxValue must not be null");, +        if (compare(minValue, min) > 0) {, +        if (compare(maxValue, max) < 0) {, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        FieldStats<?> that = (FieldStats<?>) o;, +, +        if (type != that.type) return false;, +        if (maxDoc != that.maxDoc) return false;, +        if (docCount != that.docCount) return false;, +        if (sumDocFreq != that.sumDocFreq) return false;, +        if (sumTotalTermFreq != that.sumTotalTermFreq) return false;, +        if (isSearchable != that.isSearchable) return false;, +        if (isAggregatable != that.isAggregatable) return false;, +        if (!minValue.equals(that.minValue)) return false;, +        return maxValue.equals(that.maxValue);, +, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(type, maxDoc, docCount, sumDocFreq, sumTotalTermFreq, isSearchable, isAggregatable,, +            minValue, maxValue);, +    }, +, +            return java.lang.Long.toString(minValue);, +            return java.lang.Long.toString(maxValue);, +            return java.lang.Double.toString(minValue);, +            return java.lang.Double.toString(maxValue);, +            return formatter.printer().print(minValue);, +            return formatter.printer().print(maxValue);, +        }, +, +        @Override, +        public boolean equals(Object o) {, +            if (this == o) return true;, +            if (o == null || getClass() != o.getClass()) return false;, +            if (!super.equals(o)) return false;, +, +            Date that = (Date) o;, +            return Objects.equals(formatter.format(), that.formatter.format());, +        }, +, +        @Override, +        public int hashCode() {, +            int result = super.hashCode();, +            result = 31 * result + formatter.format().hashCode();, +            return result;, +            return minValue.utf8ToString();, +            return maxValue.utf8ToString();, +            return NetworkAddress.format(minValue);, +            return NetworkAddress.format(maxValue);, +, +                in.readBytes(b1, 0, l1);, +                in.readBytes(b2, 0, l2);, +                InetAddress min = InetAddressPoint.decode(b1);, +                InetAddress max = InetAddressPoint.decode(b2);, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +import java.util.Objects;, +        Objects.requireNonNull(minValue, "minValue must not be null");, +        Objects.requireNonNull(maxValue, "maxValue must not be null");, +        if (compare(minValue, min) > 0) {, +        if (compare(maxValue, max) < 0) {, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        FieldStats<?> that = (FieldStats<?>) o;, +, +        if (type != that.type) return false;, +        if (maxDoc != that.maxDoc) return false;, +        if (docCount != that.docCount) return false;, +        if (sumDocFreq != that.sumDocFreq) return false;, +        if (sumTotalTermFreq != that.sumTotalTermFreq) return false;, +        if (isSearchable != that.isSearchable) return false;, +        if (isAggregatable != that.isAggregatable) return false;, +        if (!minValue.equals(that.minValue)) return false;, +        return maxValue.equals(that.maxValue);, +, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(type, maxDoc, docCount, sumDocFreq, sumTotalTermFreq, isSearchable, isAggregatable,, +            minValue, maxValue);, +    }, +, +            return java.lang.Long.toString(minValue);, +            return java.lang.Long.toString(maxValue);, +            return java.lang.Double.toString(minValue);, +            return java.lang.Double.toString(maxValue);, +            return formatter.printer().print(minValue);, +            return formatter.printer().print(maxValue);]