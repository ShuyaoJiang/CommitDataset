[+++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContentParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContentParser.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            if (numberType == XContentParser.NumberType.INT || numberType == XContentParser.NumberType.LONG) {, +            } else if (numberType == XContentParser.NumberType.FLOAT || numberType == XContentParser.NumberType.DOUBLE) {, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/json/JsonXContentParser.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            if (numberType == XContentParser.NumberType.INT || numberType == XContentParser.NumberType.LONG) {, +            } else if (numberType == XContentParser.NumberType.FLOAT || numberType == XContentParser.NumberType.DOUBLE) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggegator.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search.aggregations.metrics.stats;, +, +import org.apache.lucene.index.LeafReaderContext;, +import org.elasticsearch.common.lease.Releasables;, +import org.elasticsearch.common.util.BigArrays;, +import org.elasticsearch.common.util.DoubleArray;, +import org.elasticsearch.common.util.LongArray;, +import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;, +import org.elasticsearch.search.aggregations.Aggregator;, +import org.elasticsearch.search.aggregations.InternalAggregation;, +import org.elasticsearch.search.aggregations.LeafBucketCollector;, +import org.elasticsearch.search.aggregations.LeafBucketCollectorBase;, +import org.elasticsearch.search.aggregations.metrics.NumericMetricsAggregator;, +import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;, +import org.elasticsearch.search.aggregations.support.AggregationContext;, +import org.elasticsearch.search.aggregations.support.ValuesSource;, +import org.elasticsearch.search.aggregations.support.ValuesSourceAggregatorFactory;, +import org.elasticsearch.search.aggregations.support.ValuesSourceConfig;, +import org.elasticsearch.search.aggregations.support.format.ValueFormatter;, +, +import java.io.IOException;, +import java.util.List;, +import java.util.Map;, +, +/**, + *, + */, +public class StatsAggegator extends NumericMetricsAggregator.MultiValue {, +, +    final ValuesSource.Numeric valuesSource;, +    final ValueFormatter formatter;, +, +    LongArray counts;, +    DoubleArray sums;, +    DoubleArray mins;, +    DoubleArray maxes;, +, +, +    public StatsAggegator(String name, ValuesSource.Numeric valuesSource, ValueFormatter formatter,, + AggregationContext context,, +            Aggregator parent, List<PipelineAggregator> pipelineAggregators,, +            Map<String, Object> metaData) throws IOException {, +        super(name, context, parent, pipelineAggregators, metaData);, +        this.valuesSource = valuesSource;, +        if (valuesSource != null) {, +            final BigArrays bigArrays = context.bigArrays();, +            counts = bigArrays.newLongArray(1, true);, +            sums = bigArrays.newDoubleArray(1, true);, +            mins = bigArrays.newDoubleArray(1, false);, +            mins.fill(0, mins.size(), Double.POSITIVE_INFINITY);, +            maxes = bigArrays.newDoubleArray(1, false);, +            maxes.fill(0, maxes.size(), Double.NEGATIVE_INFINITY);, +        }, +        this.formatter = formatter;, +    }, +, +    @Override, +    public boolean needsScores() {, +        return valuesSource != null && valuesSource.needsScores();, +    }, +, +    @Override, +    public LeafBucketCollector getLeafCollector(LeafReaderContext ctx,, +            final LeafBucketCollector sub) throws IOException {, +        if (valuesSource == null) {, +            return LeafBucketCollector.NO_OP_COLLECTOR;, +        }, +        final BigArrays bigArrays = context.bigArrays();]