[+++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.suggest.SuggestAction;, +import org.elasticsearch.action.suggest.TransportSuggestAction;, +        registerAction(SuggestAction.INSTANCE, TransportSuggestAction.class);, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.suggest.SuggestAction;, +import org.elasticsearch.action.suggest.TransportSuggestAction;, +        registerAction(SuggestAction.INSTANCE, TransportSuggestAction.class);, +++ b/src/main/java/org/elasticsearch/action/suggest/ShardSuggestRequest.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.suggest;, +, +import java.io.IOException;, +, +import org.elasticsearch.action.support.broadcast.BroadcastShardOperationRequest;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +/**, + * Internal suggest request executed directly against a specific index shard., + */, +final class ShardSuggestRequest extends BroadcastShardOperationRequest {, +, +    private BytesReference suggestSource;, +, +    ShardSuggestRequest() {, +    }, +, +    public ShardSuggestRequest(String index, int shardId, SuggestRequest request) {, +        super(index, shardId, request);, +        this.suggestSource = request.suggest();, +    }, +, +    public BytesReference suggest() {, +        return suggestSource;, +    }, +, +    @Override, +    public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +        suggestSource = in.readBytesReference();, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);, +        out.writeBytesReference(suggestSource);, +    }, +}, +++ b/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.suggest.SuggestAction;, +import org.elasticsearch.action.suggest.TransportSuggestAction;, +        registerAction(SuggestAction.INSTANCE, TransportSuggestAction.class);, +++ b/src/main/java/org/elasticsearch/action/suggest/ShardSuggestRequest.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.suggest;, +, +import java.io.IOException;, +, +import org.elasticsearch.action.support.broadcast.BroadcastShardOperationRequest;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;]