[+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/suggest/30_context.yml, +      version: " - 6.99.99", +      reason: this feature was removed in 7.0, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/suggest/30_context.yml, +      version: " - 6.99.99", +      reason: this feature was removed in 7.0, +++ b/server/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +     * Wraps a directory reader to make all documents live except those were rolled back, +     * or hard-deleted due to non-aborting exceptions during indexing., +        static final class LeafReaderWithLiveDocs extends FilterLeafReader {, +            final Bits liveDocs;, +            final int numDocs;, +            LeafReaderWithLiveDocs(LeafReader in, Bits liveDocs, int  numDocs) {, +                this.liveDocs = liveDocs;, +                this.numDocs = numDocs;, +                return liveDocs;, +                return numDocs;, +, +            super(in, new SubReaderWrapper() {, +                    SegmentReader segmentReader = segmentReader(leaf);, +                    Bits hardLiveDocs = segmentReader.getHardLiveDocs();, +                    if (hardLiveDocs == null) {, +                        return new LeafReaderWithLiveDocs(leaf, null, leaf.maxDoc());, +                    }, +                    // TODO: Avoid recalculate numDocs everytime., +                    int numDocs = 0;, +                    for (int i = 0; i < hardLiveDocs.length(); i++) {, +                        if (hardLiveDocs.get(i)) {, +                            numDocs++;, +                        }, +                    }, +                    return new LeafReaderWithLiveDocs(segmentReader, hardLiveDocs, numDocs);, +, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/suggest/30_context.yml, +      version: " - 6.99.99", +      reason: this feature was removed in 7.0, +++ b/server/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +     * Wraps a directory reader to make all documents live except those were rolled back, +     * or hard-deleted due to non-aborting exceptions during indexing., +        static final class LeafReaderWithLiveDocs extends FilterLeafReader {, +            final Bits liveDocs;, +            final int numDocs;, +            LeafReaderWithLiveDocs(LeafReader in, Bits liveDocs, int  numDocs) {, +                this.liveDocs = liveDocs;, +                this.numDocs = numDocs;, +                return liveDocs;, +                return numDocs;, +, +            super(in, new SubReaderWrapper() {, +                    SegmentReader segmentReader = segmentReader(leaf);, +                    Bits hardLiveDocs = segmentReader.getHardLiveDocs();, +                    if (hardLiveDocs == null) {, +                        return new LeafReaderWithLiveDocs(leaf, null, leaf.maxDoc());, +                    }, +                    // TODO: Avoid recalculate numDocs everytime., +                    int numDocs = 0;, +                    for (int i = 0; i < hardLiveDocs.length(); i++) {, +                        if (hardLiveDocs.get(i)) {, +                            numDocs++;, +                        }, +                    }, +                    return new LeafReaderWithLiveDocs(segmentReader, hardLiveDocs, numDocs);, +, +++ b/server/src/test/java/org/elasticsearch/common/lucene/LuceneTests.java, +import org.apache.lucene.index.SoftDeletesRetentionMergePolicy;, +import org.apache.lucene.search.ScoreDoc;, +import org.apache.lucene.search.TopDocs;, +import org.elasticsearch.core.internal.io.IOUtils;, +import java.io.StringReader;, +import static org.hamcrest.Matchers.equalTo;, +, +, +    public void testWrapAllDocsLive() throws Exception {, +        Directory dir = newDirectory();, +        IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETE_FIELD), +            .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETE_FIELD, MatchAllDocsQuery::new, newMergePolicy()));, +        IndexWriter writer = new IndexWriter(dir, config);, +        int numDocs = between(1, 10);, +        Set<String> liveDocs = new HashSet<>();, +        for (int i = 0; i < numDocs; i++) {, +            String id = Integer.toString(i);, +            Document doc = new Document();, +            doc.add(new StringField("id", id, Store.YES));, +            writer.addDocument(doc);, +            liveDocs.add(id);, +        }, +        for (int i = 0; i < numDocs; i++) {, +            if (randomBoolean()) {, +                String id = Integer.toString(i);, +                Document doc = new Document();, +                doc.add(new StringField("id", "v2-" + id, Store.YES));, +                if (randomBoolean()) {, +                    doc.add(Lucene.newSoftDeleteField());, +                }, +                writer.softUpdateDocument(new Term("id", id), doc, Lucene.newSoftDeleteField());, +                liveDocs.add("v2-" + id);, +            }, +        }, +        try (DirectoryReader unwrapped = DirectoryReader.open(writer)) {, +            DirectoryReader reader = Lucene.wrapAllDocsLive(unwrapped);]