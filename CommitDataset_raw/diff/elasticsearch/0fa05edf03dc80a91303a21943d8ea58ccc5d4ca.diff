[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            ant.exec(executable: node.executable, spawn: node.config.daemonize, dir: node.cwd, taskname: 'elasticsearch') {, +                node.env.each { key, value -> env(key: key, value: value) }, +                node.args.each { arg(value: it) }, +            }, +        }, +, +        // this closure is the actual code to run elasticsearch, +        Closure elasticsearchRunner = {, +                node.writeWrapperScript(), +            logger.error("Node ${node.nodeNum} output:"), +            logger.error("|-----------------------------------------"), +            logger.error("|  failure marker exists: ${node.failedMarker.exists()}"), +            logger.error("|  pid file exists: ${node.pidFile.exists()}"), +            // the waitfor failed, so dump any output we got (if info logging this goes directly to stdout), +            logger.error("|\n|  [ant output]"), +            node.buffer.toString('UTF-8').eachLine { line -> logger.error("|    ${line}") }, +                logger.error("|\n|  [log]"), +                node.startLog.eachLine { line -> logger.error("|    ${line}") }, +            logger.error("|-----------------------------------------"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            ant.exec(executable: node.executable, spawn: node.config.daemonize, dir: node.cwd, taskname: 'elasticsearch') {, +                node.env.each { key, value -> env(key: key, value: value) }, +                node.args.each { arg(value: it) }, +            }, +        }, +, +        // this closure is the actual code to run elasticsearch, +        Closure elasticsearchRunner = {, +                node.writeWrapperScript(), +            logger.error("Node ${node.nodeNum} output:"), +            logger.error("|-----------------------------------------"), +            logger.error("|  failure marker exists: ${node.failedMarker.exists()}"), +            logger.error("|  pid file exists: ${node.pidFile.exists()}"), +            // the waitfor failed, so dump any output we got (if info logging this goes directly to stdout), +            logger.error("|\n|  [ant output]"), +            node.buffer.toString('UTF-8').eachLine { line -> logger.error("|    ${line}") }, +                logger.error("|\n|  [log]"), +                node.startLog.eachLine { line -> logger.error("|    ${line}") }, +            logger.error("|-----------------------------------------"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +import org.apache.tools.ant.taskdefs.condition.Os, +    /** THE config file */, +    File configFile, +, +    /** Executable to run the bin/elasticsearch with, either cmd or sh */, +    String executable, +, +    File esScript, +, +    /** script to run when running in the background */, +    File wrapperScript, +        configFile = new File(confDir, 'elasticsearch.yml'), +        args = [], +        if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +            executable = 'cmd', +            args.add('/C'), +            args.add('"') // quote the entire command, +            wrapperScript = new File(cwd, "run.bat"), +            esScript = new File(homeDir, 'bin/elasticsearch.bat'), +        } else {, +            executable = 'sh', +            wrapperScript = new File(cwd, "run"), +            esScript = new File(homeDir, 'bin/elasticsearch'), +        }, +        if (config.daemonize) {, +            args.add("${wrapperScript}"), +        } else {, +            args.add("${esScript}"), +        }, +, +        args.addAll(config.systemProperties.collect { key, value -> "-D${key}=${value}" }), +        args.add("-Des.path.conf=${confDir}"), +        if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +            args.add('"') // end the entire command, quoted, +        }, +        String esCommandString = "\nNode ${nodeNum} configuration:\n", +        esCommandString += "|-----------------------------------------\n", +        esCommandString += "|  cwd: ${cwd}\n", +        esCommandString += "|  command: ${executable} ${args.join(' ')}\n", +        esCommandString += '|  environment:\n', +        env.each { k, v -> esCommandString += "|    ${k}: ${v}\n" }, +        if (config.daemonize) {, +            esCommandString += "|\n|  [${wrapperScript.name}]\n", +            wrapperScript.eachLine('UTF-8', { line -> esCommandString += "    ${line}\n"}), +        }, +        esCommandString += '|\n|  [elasticsearch.yml]\n', +        configFile.eachLine('UTF-8', { line -> esCommandString += "|    ${line}\n" }), +        esCommandString += "|-----------------------------------------", +    void writeWrapperScript() {, +        String argsPasser = '"$@"', +        String exitMarker = "; if [ \$? != 0 ]; then touch run.failed; fi", +        if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +            argsPasser = '%*', +            exitMarker = "\r\n if \"%errorlevel%\" neq \"0\" ( type nul >> run.failed )", +        }, +        wrapperScript.setText("\"${esScript}\" ${argsPasser} > run.log 2>&1 ${exitMarker}", 'UTF-8'), +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy]