[+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/VersionCollection.java, +        List<UnreleasedVersionInfo> collect = getUnreleased().stream(), +            .map(version -> new UnreleasedVersionInfo(, +            ), +            .collect(Collectors.toList());, +, +        collect.forEach(uvi -> consumer.accept(uvi));, +, +            List<Version> unreleasedStagedOrMinor = getUnreleased().stream(), +                .filter(v -> v.getRevision() == 0), +                .collect(Collectors.toList());, +            if (unreleasedStagedOrMinor.size() > 2) {, +                if (unreleasedStagedOrMinor.get(unreleasedStagedOrMinor.size() - 2).equals(version)) {, +                return "minor";, +            }, +        } else {, +                // in this case, the minor before that has a bugfix, should there be such a minor, +                if (greatestMinor >= 2) {, +        }, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/VersionCollection.java, +        List<UnreleasedVersionInfo> collect = getUnreleased().stream(), +            .map(version -> new UnreleasedVersionInfo(, +            ), +            .collect(Collectors.toList());, +, +        collect.forEach(uvi -> consumer.accept(uvi));, +, +            List<Version> unreleasedStagedOrMinor = getUnreleased().stream(), +                .filter(v -> v.getRevision() == 0), +                .collect(Collectors.toList());, +            if (unreleasedStagedOrMinor.size() > 2) {, +                if (unreleasedStagedOrMinor.get(unreleasedStagedOrMinor.size() - 2).equals(version)) {, +                return "minor";, +            }, +        } else {, +                // in this case, the minor before that has a bugfix, should there be such a minor, +                if (greatestMinor >= 2) {, +        }, +++ b/buildSrc/src/test/java/org/elasticsearch/gradle/VersionCollectionTests.java, +        sampleVersions.put("7.1.0", asList(, +            "7_1_0", "7_0_0", "6_7_0", "6_6_1", "6_6_0", +        ));, +        assertVersionsEquals(, +            asList("6.7.0", "7.0.0"),, +            getVersionCollection("7.1.0").getWireCompatible(), +        );, +, +        assertVersionsEquals(, +            asList("6.7.0", "7.0.0"),, +            getVersionCollection("7.1.0").getWireCompatible(), +        );, +            asList("5.6", "6.4", "6.x"),, +            asList("maintenance", "bugfix", "minor"),, +        assertUnreleasedGradleProjectNames(, +            asList("staged", "minor"),, +            getVersionCollection("7.1.0"), +        );, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/VersionCollection.java, +        List<UnreleasedVersionInfo> collect = getUnreleased().stream(), +            .map(version -> new UnreleasedVersionInfo(, +            ), +            .collect(Collectors.toList());, +, +        collect.forEach(uvi -> consumer.accept(uvi));, +, +            List<Version> unreleasedStagedOrMinor = getUnreleased().stream(), +                .filter(v -> v.getRevision() == 0), +                .collect(Collectors.toList());, +            if (unreleasedStagedOrMinor.size() > 2) {, +                if (unreleasedStagedOrMinor.get(unreleasedStagedOrMinor.size() - 2).equals(version)) {, +                return "minor";, +            }, +        } else {, +                // in this case, the minor before that has a bugfix, should there be such a minor, +                if (greatestMinor >= 2) {, +        }, +++ b/buildSrc/src/test/java/org/elasticsearch/gradle/VersionCollectionTests.java, +        sampleVersions.put("7.1.0", asList(, +            "7_1_0", "7_0_0", "6_7_0", "6_6_1", "6_6_0", +        ));, +        assertVersionsEquals(, +            asList("6.7.0", "7.0.0"),, +            getVersionCollection("7.1.0").getWireCompatible(), +        );, +, +        assertVersionsEquals(, +            asList("6.7.0", "7.0.0"),, +            getVersionCollection("7.1.0").getWireCompatible(), +        );, +            asList("5.6", "6.4", "6.x"),, +            asList("maintenance", "bugfix", "minor"),, +        assertUnreleasedGradleProjectNames(, +            asList("staged", "minor"),, +            getVersionCollection("7.1.0"), +        );, +++ b/buildSrc/version.properties, +elasticsearch     = 8.0.0, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/VersionCollection.java, +        List<UnreleasedVersionInfo> collect = getUnreleased().stream(), +            .map(version -> new UnreleasedVersionInfo(]