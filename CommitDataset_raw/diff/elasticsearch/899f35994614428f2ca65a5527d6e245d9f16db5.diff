[+++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/AgentService.java, +    public void stopCollection() {, +        if (exportingWorker != null) {, +            exportingWorker.collecting = false;, +        }, +    }, +, +    public void startCollection() {, +        if (exportingWorker != null) {, +            exportingWorker.collecting = true;, +        }, +    }, +, +        volatile boolean collecting = true;, +                            if (collecting) {, +                            }, +                        bulk.close(!closed && collecting);, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/AgentService.java, +    public void stopCollection() {, +        if (exportingWorker != null) {, +            exportingWorker.collecting = false;, +        }, +    }, +, +    public void startCollection() {, +        if (exportingWorker != null) {, +            exportingWorker.collecting = true;, +        }, +    }, +, +        volatile boolean collecting = true;, +                            if (collecting) {, +                            }, +                        bulk.close(!closed && collecting);, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/local/LocalBulk.java, +import org.elasticsearch.common.logging.ESLogger;, +import java.util.concurrent.atomic.AtomicReference;, +    private final ESLogger logger;, +    AtomicReference<State> state = new AtomicReference<>();, +, +    public LocalBulk(String name, ESLogger logger, Client client, IndexNameResolver indexNameResolver, RendererRegistry renderers) {, +        this.logger = logger;, +        state.set(State.ACTIVE);, +    public synchronized ExportBulk add(Collection<MarvelDoc> docs) throws Exception {, +            if (state.get() != State.ACTIVE) {, +                return this;, +            }, +        if (state.get() != State.ACTIVE || requestBuilder == null) {, +        requestBuilder = null;, +    void terminate() {, +        state.set(State.TERMINATING);, +        synchronized (this) {, +            requestBuilder = null;, +            state.compareAndSet(State.TERMINATING, State.TERMINATED);, +        }, +    }, +, +    enum State {, +        ACTIVE,, +        TERMINATING,, +        TERMINATED, +    }, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/AgentService.java, +    public void stopCollection() {, +        if (exportingWorker != null) {, +            exportingWorker.collecting = false;, +        }, +    }, +, +    public void startCollection() {, +        if (exportingWorker != null) {, +            exportingWorker.collecting = true;, +        }, +    }, +, +        volatile boolean collecting = true;, +                            if (collecting) {, +                            }, +                        bulk.close(!closed && collecting);, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/local/LocalBulk.java, +import org.elasticsearch.common.logging.ESLogger;, +import java.util.concurrent.atomic.AtomicReference;, +    private final ESLogger logger;, +    AtomicReference<State> state = new AtomicReference<>();, +, +    public LocalBulk(String name, ESLogger logger, Client client, IndexNameResolver indexNameResolver, RendererRegistry renderers) {, +        this.logger = logger;, +        state.set(State.ACTIVE);, +    public synchronized ExportBulk add(Collection<MarvelDoc> docs) throws Exception {, +            if (state.get() != State.ACTIVE) {, +                return this;, +            }, +        if (state.get() != State.ACTIVE || requestBuilder == null) {, +        requestBuilder = null;, +    void terminate() {, +        state.set(State.TERMINATING);, +        synchronized (this) {, +            requestBuilder = null;, +            state.compareAndSet(State.TERMINATING, State.TERMINATED);, +        }]