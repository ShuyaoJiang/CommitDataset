[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.search.profile.SearchProfileShardResults;, +import java.util.ArrayList;, +import java.util.List;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.throwUnknownField;, +import static org.elasticsearch.common.xcontent.XContentParserUtils.throwUnknownToken;, +, +    private static final ParseField SCROLL_ID = new ParseField("_scroll_id");, +    private static final ParseField TOOK = new ParseField("took");, +    private static final ParseField TIMED_OUT = new ParseField("timed_out");, +    private static final ParseField TERMINATED_EARLY = new ParseField("terminated_early");, +    private static final ParseField NUM_REDUCE_PHASES = new ParseField("num_reduce_phases");, +, +    private SearchResponseSections internalResponse;, +    public SearchResponse(SearchResponseSections internalResponse, String scrollId, int totalShards, int successfulShards,, +    @Nullable, +    public Map<String, ProfileShardResult> getProfileResults() {, +            builder.field(SCROLL_ID.getPreferredName(), scrollId);, +        builder.field(TOOK.getPreferredName(), tookInMillis);, +        builder.field(TIMED_OUT.getPreferredName(), isTimedOut());, +            builder.field(TERMINATED_EARLY.getPreferredName(), isTerminatedEarly());, +            builder.field(NUM_REDUCE_PHASES.getPreferredName(), getNumReducePhases());, +    public static SearchResponse fromXContent(XContentParser parser) throws IOException {, +        ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation);, +        XContentParser.Token token;, +        String currentFieldName = null;, +        SearchHits hits = null;, +        Aggregations aggs = null;, +        Suggest suggest = null;, +        SearchProfileShardResults profile = null;, +        boolean timedOut = false;, +        Boolean terminatedEarly = null;, +        int numReducePhases = 1;, +        long tookInMillis = -1;, +        int successfulShards = -1;, +        int totalShards = -1;, +        String scrollId = null;, +        List<ShardSearchFailure> failures = new ArrayList<>();, +        while((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if (SCROLL_ID.match(currentFieldName)) {, +                    scrollId = parser.text();, +                } else if (TOOK.match(currentFieldName)) {, +                    tookInMillis = parser.longValue();, +                } else if (TIMED_OUT.match(currentFieldName)) {, +                    timedOut = parser.booleanValue();, +                } else if (TERMINATED_EARLY.match(currentFieldName)) {, +                    terminatedEarly = parser.booleanValue();, +                } else if (NUM_REDUCE_PHASES.match(currentFieldName)) {, +                    numReducePhases = parser.intValue();, +                } else {, +                    throwUnknownField(currentFieldName, parser.getTokenLocation());, +                }, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (SearchHits.Fields.HITS.equals(currentFieldName)) {, +                    hits = SearchHits.fromXContent(parser);, +                } else if (Aggregations.AGGREGATIONS_FIELD.equals(currentFieldName)) {, +                    aggs = Aggregations.fromXContent(parser);, +                } else if (Suggest.NAME.equals(currentFieldName)) {, +                    suggest = Suggest.fromXContent(parser);, +                } else if (SearchProfileShardResults.PROFILE_FIELD.equals(currentFieldName)) {, +                    profile = SearchProfileShardResults.fromXContent(parser);, +                } else if (RestActions._SHARDS_FIELD.match(currentFieldName)) {, +                    while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                        if (token == XContentParser.Token.FIELD_NAME) {, +                            currentFieldName = parser.currentName();, +                        } else if (token.isValue()) {, +                            if (RestActions.FAILED_FIELD.match(currentFieldName)) {, +                                parser.intValue(); // we don't need it but need to consume it, +                            } else if (RestActions.SUCCESSFUL_FIELD.match(currentFieldName)) {, +                                successfulShards = parser.intValue();, +                            } else if (RestActions.TOTAL_FIELD.match(currentFieldName)) {, +                                totalShards = parser.intValue();, +                            } else {, +                                throwUnknownField(currentFieldName, parser.getTokenLocation());, +                            }, +                        } else if (token == XContentParser.Token.START_ARRAY) {, +                            if (RestActions.FAILURES_FIELD.match(currentFieldName)) {, +                                while((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                                    failures.add(ShardSearchFailure.fromXContent(parser));, +                                }, +                            } else {, +                                throwUnknownField(currentFieldName, parser.getTokenLocation());, +                            }, +                        } else {, +                            throwUnknownToken(token, parser.getTokenLocation());, +                        }, +                    }, +                } else {, +                    throwUnknownField(currentFieldName, parser.getTokenLocation());, +                }, +            }, +        }]