[+++ b/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +        if (highlight != null) {, +            // Enforce highlighting by source, because MemoryIndex doesn't support stored fields., +            highlight.globalForceSource(true);, +        }, +++ b/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +        if (highlight != null) {, +            // Enforce highlighting by source, because MemoryIndex doesn't support stored fields., +            highlight.globalForceSource(true);, +        }, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +import org.elasticsearch.percolator.QueryCollector.*;, +++ b/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +        if (highlight != null) {, +            // Enforce highlighting by source, because MemoryIndex doesn't support stored fields., +            highlight.globalForceSource(true);, +        }, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +import org.elasticsearch.percolator.QueryCollector.*;, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +        Encoder encoder = field.fieldOptions().encoder().equals("html") ? HighlightUtils.Encoders.HTML : HighlightUtils.Encoders.DEFAULT;, +            if (field.fieldOptions().requireFieldMatch()) {, +                    cache.fieldMatchFieldQuery = new CustomFieldQuery(highlighterContext.query.originalQuery(), hitContext.topLevelReader(), true, field.fieldOptions().requireFieldMatch());, +                    cache.noFieldMatchFieldQuery = new CustomFieldQuery(highlighterContext.query.originalQuery(), hitContext.topLevelReader(), true, field.fieldOptions().requireFieldMatch());, +                if (field.fieldOptions().boundaryMaxScan() != SimpleBoundaryScanner.DEFAULT_MAX_SCAN || field.fieldOptions().boundaryChars() != SimpleBoundaryScanner.DEFAULT_BOUNDARY_CHARS) {, +                    boundaryScanner = new SimpleBoundaryScanner(field.fieldOptions().boundaryMaxScan(), field.fieldOptions().boundaryChars());, +                boolean forceSource = context.highlight().forceSource(field);, +                if (field.fieldOptions().numberOfFragments() == 0) {, +                    if (!forceSource && mapper.fieldType().stored()) {, +                        fragmentsBuilder = new SimpleFragmentsBuilder(mapper, field.fieldOptions().preTags(), field.fieldOptions().postTags(), boundaryScanner);, +                        fragmentsBuilder = new SourceSimpleFragmentsBuilder(mapper, context, field.fieldOptions().preTags(), field.fieldOptions().postTags(), boundaryScanner);, +                    fragListBuilder = field.fieldOptions().fragmentOffset() == -1 ? new SimpleFragListBuilder() : new SimpleFragListBuilder(field.fieldOptions().fragmentOffset());, +                    if (field.fieldOptions().scoreOrdered()) {, +                        if (!forceSource && mapper.fieldType().stored()) {, +                            fragmentsBuilder = new ScoreOrderFragmentsBuilder(field.fieldOptions().preTags(), field.fieldOptions().postTags(), boundaryScanner);, +                            fragmentsBuilder = new SourceScoreOrderFragmentsBuilder(mapper, context, field.fieldOptions().preTags(), field.fieldOptions().postTags(), boundaryScanner);, +                        if (!forceSource && mapper.fieldType().stored()) {, +                            fragmentsBuilder = new SimpleFragmentsBuilder(mapper, field.fieldOptions().preTags(), field.fieldOptions().postTags(), boundaryScanner);, +                            fragmentsBuilder = new SourceSimpleFragmentsBuilder(mapper, context, field.fieldOptions().preTags(), field.fieldOptions().postTags(), boundaryScanner);, +                CustomFieldQuery.highlightFilters.set(field.fieldOptions().highlightFilter());, +            cache.fvh.setPhraseLimit(field.fieldOptions().phraseLimit());, +            int numberOfFragments = field.fieldOptions().numberOfFragments() == 0 ? Integer.MAX_VALUE : field.fieldOptions().numberOfFragments();, +            int fragmentCharSize = field.fieldOptions().numberOfFragments() == 0 ? Integer.MAX_VALUE : field.fieldOptions().fragmentCharSize();, +            if (field.fieldOptions().matchedFields() != null && !field.fieldOptions().matchedFields().isEmpty()) {, +                fragments = cache.fvh.getBestFragments(fieldQuery, hitContext.reader(), hitContext.docId(), mapper.names().indexName(), field.fieldOptions().matchedFields(), fragmentCharSize,, +                        numberOfFragments, entry.fragListBuilder, entry.fragmentsBuilder, field.fieldOptions().preTags(), field.fieldOptions().postTags(), encoder);, +                        numberOfFragments, entry.fragListBuilder, entry.fragmentsBuilder, field.fieldOptions().preTags(), field.fieldOptions().postTags(), encoder);, +            int noMatchSize = highlighterContext.field.fieldOptions().noMatchSize();, +                        fieldFragList, 1, field.fieldOptions().preTags(), field.fieldOptions().postTags(), encoder);, +++ b/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +        if (highlight != null) {, +            // Enforce highlighting by source, because MemoryIndex doesn't support stored fields., +            highlight.globalForceSource(true);, +        }, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +import org.elasticsearch.percolator.QueryCollector.*;, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +        Encoder encoder = field.fieldOptions().encoder().equals("html") ? HighlightUtils.Encoders.HTML : HighlightUtils.Encoders.DEFAULT;, +            if (field.fieldOptions().requireFieldMatch()) {, +                    cache.fieldMatchFieldQuery = new CustomFieldQuery(highlighterContext.query.originalQuery(), hitContext.topLevelReader(), true, field.fieldOptions().requireFieldMatch());, +                    cache.noFieldMatchFieldQuery = new CustomFieldQuery(highlighterContext.query.originalQuery(), hitContext.topLevelReader(), true, field.fieldOptions().requireFieldMatch());, +                if (field.fieldOptions().boundaryMaxScan() != SimpleBoundaryScanner.DEFAULT_MAX_SCAN || field.fieldOptions().boundaryChars() != SimpleBoundaryScanner.DEFAULT_BOUNDARY_CHARS) {, +                    boundaryScanner = new SimpleBoundaryScanner(field.fieldOptions().boundaryMaxScan(), field.fieldOptions().boundaryChars());, +                boolean forceSource = context.highlight().forceSource(field);, +                if (field.fieldOptions().numberOfFragments() == 0) {, +                    if (!forceSource && mapper.fieldType().stored()) {, +                        fragmentsBuilder = new SimpleFragmentsBuilder(mapper, field.fieldOptions().preTags(), field.fieldOptions().postTags(), boundaryScanner);, +                        fragmentsBuilder = new SourceSimpleFragmentsBuilder(mapper, context, field.fieldOptions().preTags(), field.fieldOptions().postTags(), boundaryScanner);, +                    fragListBuilder = field.fieldOptions().fragmentOffset() == -1 ? new SimpleFragListBuilder() : new SimpleFragListBuilder(field.fieldOptions().fragmentOffset());, +                    if (field.fieldOptions().scoreOrdered()) {, +                        if (!forceSource && mapper.fieldType().stored()) {, +                            fragmentsBuilder = new ScoreOrderFragmentsBuilder(field.fieldOptions().preTags(), field.fieldOptions().postTags(), boundaryScanner);, +                            fragmentsBuilder = new SourceScoreOrderFragmentsBuilder(mapper, context, field.fieldOptions().preTags(), field.fieldOptions().postTags(), boundaryScanner);, +                        if (!forceSource && mapper.fieldType().stored()) {, +                            fragmentsBuilder = new SimpleFragmentsBuilder(mapper, field.fieldOptions().preTags(), field.fieldOptions().postTags(), boundaryScanner);, +                            fragmentsBuilder = new SourceSimpleFragmentsBuilder(mapper, context, field.fieldOptions().preTags(), field.fieldOptions().postTags(), boundaryScanner);, +                CustomFieldQuery.highlightFilters.set(field.fieldOptions().highlightFilter());, +            cache.fvh.setPhraseLimit(field.fieldOptions().phraseLimit());, +            int numberOfFragments = field.fieldOptions().numberOfFragments() == 0 ? Integer.MAX_VALUE : field.fieldOptions().numberOfFragments();, +            int fragmentCharSize = field.fieldOptions().numberOfFragments() == 0 ? Integer.MAX_VALUE : field.fieldOptions().fragmentCharSize();, +            if (field.fieldOptions().matchedFields() != null && !field.fieldOptions().matchedFields().isEmpty()) {, +                fragments = cache.fvh.getBestFragments(fieldQuery, hitContext.reader(), hitContext.docId(), mapper.names().indexName(), field.fieldOptions().matchedFields(), fragmentCharSize,, +                        numberOfFragments, entry.fragListBuilder, entry.fragmentsBuilder, field.fieldOptions().preTags(), field.fieldOptions().postTags(), encoder);, +                        numberOfFragments, entry.fragListBuilder, entry.fragmentsBuilder, field.fieldOptions().preTags(), field.fieldOptions().postTags(), encoder);, +            int noMatchSize = highlighterContext.field.fieldOptions().noMatchSize();, +                        fieldFragList, 1, field.fieldOptions().preTags(), field.fieldOptions().postTags(), encoder);, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +            if (context.highlight().forceSource(field)) {, +                String highlighterType = field.fieldOptions().highlighterType();, +                if (highlighterType == null) {, +                        highlighterType = "fvh";, +                        highlighterType = "postings";, +                        highlighterType = "plain";, +                Highlighter highlighter = highlighters.get(highlighterType);, +                    throw new ElasticsearchIllegalArgumentException("unknown highlighter type [" + highlighterType + "] for the field [" + fieldName + "]");, +                if (field.fieldOptions().highlightQuery() == null) {, +                    highlightQuery = new HighlighterContext.HighlightQuery(field.fieldOptions().highlightQuery(), field.fieldOptions().highlightQuery(), false);, +++ b/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +        if (highlight != null) {, +            // Enforce highlighting by source, because MemoryIndex doesn't support stored fields.]