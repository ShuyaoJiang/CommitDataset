[+++ b/server/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.persistent.CompletionPersistentTaskAction;, +import org.elasticsearch.persistent.RemovePersistentTaskAction;, +import org.elasticsearch.persistent.StartPersistentTaskAction;, +import org.elasticsearch.persistent.UpdatePersistentTaskStatusAction;, +        // Persistent tasks:, +        actions.register(StartPersistentTaskAction.INSTANCE, StartPersistentTaskAction.TransportAction.class);, +        actions.register(UpdatePersistentTaskStatusAction.INSTANCE, UpdatePersistentTaskStatusAction.TransportAction.class);, +        actions.register(CompletionPersistentTaskAction.INSTANCE, CompletionPersistentTaskAction.TransportAction.class);, +        actions.register(RemovePersistentTaskAction.INSTANCE, RemovePersistentTaskAction.TransportAction.class);, +, +++ b/server/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.persistent.CompletionPersistentTaskAction;, +import org.elasticsearch.persistent.RemovePersistentTaskAction;, +import org.elasticsearch.persistent.StartPersistentTaskAction;, +import org.elasticsearch.persistent.UpdatePersistentTaskStatusAction;, +        // Persistent tasks:, +        actions.register(StartPersistentTaskAction.INSTANCE, StartPersistentTaskAction.TransportAction.class);, +        actions.register(UpdatePersistentTaskStatusAction.INSTANCE, UpdatePersistentTaskStatusAction.TransportAction.class);, +        actions.register(CompletionPersistentTaskAction.INSTANCE, CompletionPersistentTaskAction.TransportAction.class);, +        actions.register(RemovePersistentTaskAction.INSTANCE, RemovePersistentTaskAction.TransportAction.class);, +, +++ b/server/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.plugins.PersistentTaskPlugin;, +import org.elasticsearch.persistent.PersistentTasksClusterService;, +import org.elasticsearch.persistent.PersistentTasksExecutor;, +import org.elasticsearch.persistent.PersistentTasksExecutorRegistry;, +import org.elasticsearch.persistent.PersistentTasksService;, +            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService, +                .filterPlugins(PersistentTaskPlugin.class).stream(), +                .map(p -> p.getPersistentTasksExecutor(clusterService)), +                .flatMap(List::stream), +                .collect(toList());, +, +            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(settings, tasksExecutors);, +            final PersistentTasksClusterService persistentTasksClusterService =, +                new PersistentTasksClusterService(settings, registry, clusterService);, +            final PersistentTasksService persistentTasksService = new PersistentTasksService(settings, clusterService, threadPool, client);, +, +                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService);, +                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService);, +                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry);, +++ b/server/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.persistent.CompletionPersistentTaskAction;, +import org.elasticsearch.persistent.RemovePersistentTaskAction;, +import org.elasticsearch.persistent.StartPersistentTaskAction;, +import org.elasticsearch.persistent.UpdatePersistentTaskStatusAction;, +        // Persistent tasks:, +        actions.register(StartPersistentTaskAction.INSTANCE, StartPersistentTaskAction.TransportAction.class);, +        actions.register(UpdatePersistentTaskStatusAction.INSTANCE, UpdatePersistentTaskStatusAction.TransportAction.class);, +        actions.register(CompletionPersistentTaskAction.INSTANCE, CompletionPersistentTaskAction.TransportAction.class);, +        actions.register(RemovePersistentTaskAction.INSTANCE, RemovePersistentTaskAction.TransportAction.class);, +, +++ b/server/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.plugins.PersistentTaskPlugin;, +import org.elasticsearch.persistent.PersistentTasksClusterService;, +import org.elasticsearch.persistent.PersistentTasksExecutor;, +import org.elasticsearch.persistent.PersistentTasksExecutorRegistry;, +import org.elasticsearch.persistent.PersistentTasksService;, +            final List<PersistentTasksExecutor<?>> tasksExecutors = pluginsService, +                .filterPlugins(PersistentTaskPlugin.class).stream(), +                .map(p -> p.getPersistentTasksExecutor(clusterService)), +                .flatMap(List::stream), +                .collect(toList());, +, +            final PersistentTasksExecutorRegistry registry = new PersistentTasksExecutorRegistry(settings, tasksExecutors);, +            final PersistentTasksClusterService persistentTasksClusterService =, +                new PersistentTasksClusterService(settings, registry, clusterService);, +            final PersistentTasksService persistentTasksService = new PersistentTasksService(settings, clusterService, threadPool, client);, +, +                    b.bind(PersistentTasksService.class).toInstance(persistentTasksService);, +                    b.bind(PersistentTasksClusterService.class).toInstance(persistentTasksClusterService);, +                    b.bind(PersistentTasksExecutorRegistry.class).toInstance(registry);, +++ b/server/src/main/java/org/elasticsearch/plugins/PersistentTaskPlugin.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.plugins;, +, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.persistent.PersistentTasksExecutor;, +, +import java.util.Collections;, +import java.util.List;, +]