[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +                        query = currentMapper.fieldQuery(queryText, parseContext);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +                        query = currentMapper.fieldQuery(queryText, parseContext);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +        deleteByQueryAction.execute(Requests.deleteByQueryRequest(request.indices()).query(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(), FilterBuilders.typeFilter(request.type()))), new ActionListener<DeleteByQueryResponse>() {, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +                        query = currentMapper.fieldQuery(queryText, parseContext);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +        deleteByQueryAction.execute(Requests.deleteByQueryRequest(request.indices()).query(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(), FilterBuilders.typeFilter(request.type()))), new ActionListener<DeleteByQueryResponse>() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.query.xcontent.QueryParseContext;, +     * Should the field query {@link #fieldQuery(String, org.elasticsearch.index.query.xcontent.QueryParseContext)}  be used when detecting this, +    Query fieldQuery(String value, QueryParseContext context);, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +                        query = currentMapper.fieldQuery(queryText, parseContext);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +        deleteByQueryAction.execute(Requests.deleteByQueryRequest(request.indices()).query(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(), FilterBuilders.typeFilter(request.type()))), new ActionListener<DeleteByQueryResponse>() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.query.xcontent.QueryParseContext;, +     * Should the field query {@link #fieldQuery(String, org.elasticsearch.index.query.xcontent.QueryParseContext)}  be used when detecting this, +    Query fieldQuery(String value, QueryParseContext context);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.FilterClause;, +import org.elasticsearch.common.lucene.search.XBooleanFilter;, +        // see if we can use terms filter, +        boolean useTermsFilter = true;, +        for (String type : types) {, +            DocumentMapper docMapper = documentMapper(type);, +            if (docMapper == null) {, +                useTermsFilter = false;, +                break;, +            }, +            if (!docMapper.typeMapper().indexed()) {, +                useTermsFilter = false;, +                break;, +            }, +        }, +        if (useTermsFilter) {, +        } else {, +            XBooleanFilter bool = new XBooleanFilter();, +            for (String type : types) {, +                DocumentMapper docMapper = documentMapper(type);, +                if (docMapper == null) {, +                    bool.add(new FilterClause(new TermFilter(new Term(TypeFieldMapper.NAME, type)), BooleanClause.Occur.SHOULD));, +                } else {, +                    bool.add(new FilterClause(docMapper.typeFilter(), BooleanClause.Occur.SHOULD));, +                }, +            }, +            return bool;, +        }, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +                        query = currentMapper.fieldQuery(queryText, parseContext);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +        deleteByQueryAction.execute(Requests.deleteByQueryRequest(request.indices()).query(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(), FilterBuilders.typeFilter(request.type()))), new ActionListener<DeleteByQueryResponse>() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.query.xcontent.QueryParseContext;, +     * Should the field query {@link #fieldQuery(String, org.elasticsearch.index.query.xcontent.QueryParseContext)}  be used when detecting this, +    Query fieldQuery(String value, QueryParseContext context);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.FilterClause;, +import org.elasticsearch.common.lucene.search.XBooleanFilter;, +        // see if we can use terms filter, +        boolean useTermsFilter = true;, +        for (String type : types) {, +            DocumentMapper docMapper = documentMapper(type);, +            if (docMapper == null) {, +                useTermsFilter = false;, +                break;, +            }, +            if (!docMapper.typeMapper().indexed()) {, +                useTermsFilter = false;, +                break;, +            }, +        }, +        if (useTermsFilter) {, +        } else {, +            XBooleanFilter bool = new XBooleanFilter();, +            for (String type : types) {, +                DocumentMapper docMapper = documentMapper(type);, +                if (docMapper == null) {, +                    bool.add(new FilterClause(new TermFilter(new Term(TypeFieldMapper.NAME, type)), BooleanClause.Occur.SHOULD));, +                } else {, +                    bool.add(new FilterClause(docMapper.typeFilter(), BooleanClause.Occur.SHOULD));, +                }, +            }, +            return bool;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/Uid.java, +    public static String typePrefix(String type) {, +        return type + DELIMITER;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +                        query = currentMapper.fieldQuery(queryText, parseContext);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +        deleteByQueryAction.execute(Requests.deleteByQueryRequest(request.indices()).query(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(), FilterBuilders.typeFilter(request.type()))), new ActionListener<DeleteByQueryResponse>() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java]