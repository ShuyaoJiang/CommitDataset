[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        Store store = new ByteBufferStore(shardId, settings, null, new ByteBufferCache(settings));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        Store store = new ByteBufferStore(shardId, settings, null, new ByteBufferCache(settings));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +            store = new RamStore(shardId, settings, null);, +            store = new ByteBufferStore(shardId, settings, null, byteBufferCache);, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        Store store = new ByteBufferStore(shardId, settings, null, new ByteBufferCache(settings));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +            store = new RamStore(shardId, settings, null);, +            store = new ByteBufferStore(shardId, settings, null, byteBufferCache);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsIndexStore.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.concurrent.ConcurrentMap;, +    private final ConcurrentMap<ShardId, ConcurrentMap<String, String>> cachedUnallocatedMd5s = ConcurrentCollections.newConcurrentMap();, +, +        ConcurrentMap<String, String> shardIdCachedMd5s = cachedUnallocatedMd5s.get(shardId);, +        if (shardIdCachedMd5s == null) {, +            shardIdCachedMd5s = ConcurrentCollections.newConcurrentMap();, +            cachedUnallocatedMd5s.put(shardId, shardIdCachedMd5s);, +        }, +            String md5 = shardIdCachedMd5s.get(file.getName());, +            if (md5 == null) {, +                shardIdCachedMd5s.put(file.getName(), md5);, +            }, +    ConcurrentMap<String, String> cachedShardMd5s(ShardId shardId) {, +        return cachedUnallocatedMd5s.get(shardId);, +    }, +, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        Store store = new ByteBufferStore(shardId, settings, null, new ByteBufferCache(settings));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +            store = new RamStore(shardId, settings, null);, +            store = new ByteBufferStore(shardId, settings, null, byteBufferCache);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsIndexStore.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.concurrent.ConcurrentMap;, +    private final ConcurrentMap<ShardId, ConcurrentMap<String, String>> cachedUnallocatedMd5s = ConcurrentCollections.newConcurrentMap();, +, +        ConcurrentMap<String, String> shardIdCachedMd5s = cachedUnallocatedMd5s.get(shardId);, +        if (shardIdCachedMd5s == null) {, +            shardIdCachedMd5s = ConcurrentCollections.newConcurrentMap();, +            cachedUnallocatedMd5s.put(shardId, shardIdCachedMd5s);, +        }, +            String md5 = shardIdCachedMd5s.get(file.getName());, +            if (md5 == null) {, +                shardIdCachedMd5s.put(file.getName(), md5);, +            }, +    ConcurrentMap<String, String> cachedShardMd5s(ShardId shardId) {, +        return cachedUnallocatedMd5s.get(shardId);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsStore.java, +import org.elasticsearch.index.store.IndexStore;, +import java.util.concurrent.ConcurrentMap;, +    public FsStore(ShardId shardId, @IndexSettings Settings indexSettings, IndexStore indexStore) {, +        super(shardId, indexSettings, indexStore);, +    }, +, +    @Override protected String preComputedMd5(String fileName) {, +        ConcurrentMap<String, String> shardIdCachedMd5s = ((FsIndexStore) indexStore).cachedShardMd5s(shardId);, +        if (shardIdCachedMd5s == null) {, +            return null;, +        }, +        return shardIdCachedMd5s.get(fileName);, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        Store store = new ByteBufferStore(shardId, settings, null, new ByteBufferCache(settings));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +            store = new RamStore(shardId, settings, null);, +            store = new ByteBufferStore(shardId, settings, null, byteBufferCache);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsIndexStore.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.concurrent.ConcurrentMap;, +    private final ConcurrentMap<ShardId, ConcurrentMap<String, String>> cachedUnallocatedMd5s = ConcurrentCollections.newConcurrentMap();, +, +        ConcurrentMap<String, String> shardIdCachedMd5s = cachedUnallocatedMd5s.get(shardId);, +        if (shardIdCachedMd5s == null) {, +            shardIdCachedMd5s = ConcurrentCollections.newConcurrentMap();, +            cachedUnallocatedMd5s.put(shardId, shardIdCachedMd5s);, +        }, +            String md5 = shardIdCachedMd5s.get(file.getName());, +            if (md5 == null) {, +                shardIdCachedMd5s.put(file.getName(), md5);, +            }, +    ConcurrentMap<String, String> cachedShardMd5s(ShardId shardId) {, +        return cachedUnallocatedMd5s.get(shardId);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsStore.java, +import org.elasticsearch.index.store.IndexStore;, +import java.util.concurrent.ConcurrentMap;, +    public FsStore(ShardId shardId, @IndexSettings Settings indexSettings, IndexStore indexStore) {, +        super(shardId, indexSettings, indexStore);, +    }, +, +    @Override protected String preComputedMd5(String fileName) {, +        ConcurrentMap<String, String> shardIdCachedMd5s = ((FsIndexStore) indexStore).cachedShardMd5s(shardId);, +        if (shardIdCachedMd5s == null) {, +            return null;]