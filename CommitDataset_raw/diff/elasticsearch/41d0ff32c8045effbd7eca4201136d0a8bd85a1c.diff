[+++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +    public NamedAnalyzer getNamedAnalyzer(String analyzerName) {, +        return this.indexAnalyzers.get(analyzerName);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +    public NamedAnalyzer getNamedAnalyzer(String analyzerName) {, +        return this.indexAnalyzers.get(analyzerName);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestionBuilder.java, +    protected void populateCommonFields(MapperService mapperService, SuggestionSearchContext.SuggestionContext suggestionContext) {, +            Analyzer luceneAnalyzer = mapperService.getNamedAnalyzer(analyzer);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +    public NamedAnalyzer getNamedAnalyzer(String analyzerName) {, +        return this.indexAnalyzers.get(analyzerName);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestionBuilder.java, +    protected void populateCommonFields(MapperService mapperService, SuggestionSearchContext.SuggestionContext suggestionContext) {, +            Analyzer luceneAnalyzer = mapperService.getNamedAnalyzer(analyzer);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGeneratorBuilder.java, +            generator.preFilter(mapperService.getNamedAnalyzer(this.preFilter));, +            generator.postFilter(mapperService.getNamedAnalyzer(this.postFilter));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +    public NamedAnalyzer getNamedAnalyzer(String analyzerName) {, +        return this.indexAnalyzers.get(analyzerName);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestionBuilder.java, +    protected void populateCommonFields(MapperService mapperService, SuggestionSearchContext.SuggestionContext suggestionContext) {, +            Analyzer luceneAnalyzer = mapperService.getNamedAnalyzer(analyzer);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGeneratorBuilder.java, +            generator.preFilter(mapperService.getNamedAnalyzer(this.preFilter));, +            generator.postFilter(mapperService.getNamedAnalyzer(this.postFilter));, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +    public NamedAnalyzer getNamedAnalyzer(String analyzerName) {, +        return this.indexAnalyzers.get(analyzerName);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestionBuilder.java, +    protected void populateCommonFields(MapperService mapperService, SuggestionSearchContext.SuggestionContext suggestionContext) {, +            Analyzer luceneAnalyzer = mapperService.getNamedAnalyzer(analyzer);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGeneratorBuilder.java, +            generator.preFilter(mapperService.getNamedAnalyzer(this.preFilter));, +            generator.postFilter(mapperService.getNamedAnalyzer(this.postFilter));, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +++ b/core/src/test/java/org/elasticsearch/search/suggest/AbstractSuggestionBuilderTestCase.java, +import org.apache.lucene.analysis.core.SimpleAnalyzer;, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.analysis.AnalyzerScope;, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.query.QueryShardContext;, +import org.elasticsearch.mock.orig.Mockito;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.script.TemplateScript;, +import org.elasticsearch.search.suggest.SuggestionSearchContext.SuggestionContext;, +import org.elasticsearch.test.IndexSettingsModule;, +import static org.elasticsearch.common.lucene.BytesRefs.toBytesRef;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +    public static void init() {, +    public void testEqualsAndHashcode() {, +    public void testBuild() throws IOException {, +        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();, +        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(new Index(randomAlphaOfLengthBetween(1, 10), "_na_"),, +                indexSettings);, +        MapperService mapperService = mock(MapperService.class);, +        ScriptService scriptService = mock(ScriptService.class);, +        MappedFieldType fieldType = mockFieldType();, +        boolean fieldTypeSearchAnalyzerSet = randomBoolean();, +        if (fieldTypeSearchAnalyzerSet) {, +            NamedAnalyzer searchAnalyzer = new NamedAnalyzer("fieldSearchAnalyzer", AnalyzerScope.INDEX, new SimpleAnalyzer());, +            if (Mockito.mockingDetails(fieldType).isMock()) {, +                when(fieldType.searchAnalyzer()).thenReturn(searchAnalyzer);, +            } else {, +                fieldType.setSearchAnalyzer(searchAnalyzer);, +            }, +        } else {, +            when(mapperService.searchAnalyzer()), +                .thenReturn(new NamedAnalyzer("mapperServiceSearchAnalyzer", AnalyzerScope.INDEX, new SimpleAnalyzer()));, +        }]