[+++ b/qa/mixed-cluster/src/test/java/org/elasticsearch/backwards/IndexingIT.java, +++ b/qa/mixed-cluster/src/test/java/org/elasticsearch/backwards/IndexingIT.java, +++ b/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/RecoveryIT.java, +++ b/qa/mixed-cluster/src/test/java/org/elasticsearch/backwards/IndexingIT.java, +++ b/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/RecoveryIT.java, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java, +import org.apache.http.entity.ContentType;, +import org.apache.http.entity.StringEntity;, +import org.elasticsearch.common.Strings;, +import java.util.Collections;, +import java.util.HashMap;, +import static org.hamcrest.Matchers.anyOf;, +import static org.hamcrest.Matchers.equalTo;, +, +    protected void assertOK(Response response) {, +        assertThat(response.getStatusLine().getStatusCode(), anyOf(equalTo(200), equalTo(201)));, +    }, +, +    protected void ensureGreen() throws IOException {, +        Map<String, String> params = new HashMap<>();, +        params.put("wait_for_status", "green");, +        params.put("wait_for_no_relocating_shards", "true");, +        params.put("timeout", "70s");, +        params.put("level", "shards");, +        assertOK(client().performRequest("GET", "_cluster/health", params));, +    }, +, +    protected void createIndex(String name, Settings settings) throws IOException {, +        createIndex(name, settings, "");, +    }, +, +    protected void createIndex(String name, Settings settings, String mapping) throws IOException {, +        assertOK(client().performRequest("PUT", name, Collections.emptyMap(),, +            new StringEntity("{ \"settings\": " + Strings.toString(settings), +                + ", \"mappings\" : {" + mapping + "} }", ContentType.APPLICATION_JSON)));, +    }, +]