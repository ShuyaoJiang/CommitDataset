[+++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +    @Override, +    private Query parse(AliasMetaData alias, QueryShardContext shardContext) {, +                ParsedQuery parsedFilter = shardContext.toFilter(shardContext.newParseContext(parser).parseInnerQueryBuilder());, +            throw new AliasFilterParsingException(shardContext.index(), alias.getAlias(), "Invalid alias filter", ex);, +        @Override, +        @Override, +        @Override, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +    @Override, +    private Query parse(AliasMetaData alias, QueryShardContext shardContext) {, +                ParsedQuery parsedFilter = shardContext.toFilter(shardContext.newParseContext(parser).parseInnerQueryBuilder());, +            throw new AliasFilterParsingException(shardContext.index(), alias.getAlias(), "Invalid alias filter", ex);, +        @Override, +        @Override, +        @Override, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorFieldMapper.java, +    private static QueryBuilder parseQueryBuilder(QueryParseContext context, XContentLocation location) {, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +    @Override, +    private Query parse(AliasMetaData alias, QueryShardContext shardContext) {, +                ParsedQuery parsedFilter = shardContext.toFilter(shardContext.newParseContext(parser).parseInnerQueryBuilder());, +            throw new AliasFilterParsingException(shardContext.index(), alias.getAlias(), "Invalid alias filter", ex);, +        @Override, +        @Override, +        @Override, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorFieldMapper.java, +    private static QueryBuilder parseQueryBuilder(QueryParseContext context, XContentLocation location) {, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +    protected final static void writeQueries(StreamOutput out, List<? extends QueryBuilder> queries) throws IOException {, +    protected final static List<QueryBuilder<?>> readQueries(StreamInput in) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +    @Override, +    private Query parse(AliasMetaData alias, QueryShardContext shardContext) {, +                ParsedQuery parsedFilter = shardContext.toFilter(shardContext.newParseContext(parser).parseInnerQueryBuilder());, +            throw new AliasFilterParsingException(shardContext.index(), alias.getAlias(), "Invalid alias filter", ex);, +        @Override, +        @Override, +        @Override, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorFieldMapper.java, +    private static QueryBuilder parseQueryBuilder(QueryParseContext context, XContentLocation location) {, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +    protected final static void writeQueries(StreamOutput out, List<? extends QueryBuilder> queries) throws IOException {, +    protected final static List<QueryBuilder<?>> readQueries(StreamInput in) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public ParsedQuery toFilter(QueryBuilder queryBuilder) {, +        return toQuery(queryBuilder, q -> {, +            Query filter = q.toFilter(this);, +            return filter;, +        });, +    public ParsedQuery toQuery(QueryBuilder queryBuilder) {, +        return toQuery(queryBuilder, q -> {, +            Query query = q.toQuery(this);, +            if (query == null) {, +                query = Queries.newMatchNoDocsQuery("No query left after rewrite.");, +            }, +            return query;, +        });, +    }, +    @FunctionalInterface, +    private interface CheckedFunction<T, R> {, +       R apply(T t) throws IOException;, +    }, +, +    private ParsedQuery toQuery(QueryBuilder queryBuilder, CheckedFunction<QueryBuilder, Query> filterOrQuery) {, +            QueryBuilder rewriteQuery = QueryBuilder.rewriteQuery(queryBuilder, this);, +            return new ParsedQuery(filterOrQuery.apply(rewriteQuery), copyNamedQueries());, +            reset();, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +    @Override, +    private Query parse(AliasMetaData alias, QueryShardContext shardContext) {, +                ParsedQuery parsedFilter = shardContext.toFilter(shardContext.newParseContext(parser).parseInnerQueryBuilder());, +            throw new AliasFilterParsingException(shardContext.index(), alias.getAlias(), "Invalid alias filter", ex);, +        @Override, +        @Override, +        @Override, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorFieldMapper.java, +    private static QueryBuilder parseQueryBuilder(QueryParseContext context, XContentLocation location) {, +++ b/core/src/main/java/org/elasticsearch/index/query/AbstractQueryBuilder.java, +    protected final static void writeQueries(StreamOutput out, List<? extends QueryBuilder> queries) throws IOException {, +    protected final static List<QueryBuilder<?>> readQueries(StreamInput in) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public ParsedQuery toFilter(QueryBuilder queryBuilder) {, +        return toQuery(queryBuilder, q -> {, +            Query filter = q.toFilter(this);, +            return filter;, +        });, +    public ParsedQuery toQuery(QueryBuilder queryBuilder) {, +        return toQuery(queryBuilder, q -> {, +            Query query = q.toQuery(this);, +            if (query == null) {, +                query = Queries.newMatchNoDocsQuery("No query left after rewrite.");, +            }, +            return query;, +        });, +    }, +    @FunctionalInterface, +    private interface CheckedFunction<T, R> {, +       R apply(T t) throws IOException;, +    }]