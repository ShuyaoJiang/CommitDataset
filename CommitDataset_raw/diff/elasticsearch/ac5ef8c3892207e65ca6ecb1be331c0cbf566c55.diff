[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java, +import javax.crypto.SecretKeyFactory;, +            throw new IllegalArgumentException("Invalid algorithm: " + v + ". Valid values for password hashing are " +, +                Hasher.getAvailableAlgoStoredHash().toString());, +        } else if (v.regionMatches(true, 0, "pbkdf2", 0, "pbkdf2".length())) {, +            try {, +                SecretKeyFactory.getInstance("PBKDF2withHMACSHA512");, +            } catch (NoSuchAlgorithmException e) {, +                throw new IllegalArgumentException(, +                    "Support for PBKDF2WithHMACSHA512 must be available in order to use any of the " +, +                        "PBKDF2 algorithms for the [xpack.security.authc.password_hashing.algorithm] setting.", e);, +            }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java, +import javax.crypto.SecretKeyFactory;, +            throw new IllegalArgumentException("Invalid algorithm: " + v + ". Valid values for password hashing are " +, +                Hasher.getAvailableAlgoStoredHash().toString());, +        } else if (v.regionMatches(true, 0, "pbkdf2", 0, "pbkdf2".length())) {, +            try {, +                SecretKeyFactory.getInstance("PBKDF2withHMACSHA512");, +            } catch (NoSuchAlgorithmException e) {, +                throw new IllegalArgumentException(, +                    "Support for PBKDF2WithHMACSHA512 must be available in order to use any of the " +, +                        "PBKDF2 algorithms for the [xpack.security.authc.password_hashing.algorithm] setting.", e);, +            }, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/XPackSettingsTests.java, +import org.elasticsearch.common.settings.Settings;, +import javax.crypto.SecretKeyFactory;, +import java.security.NoSuchAlgorithmException;, +, +import static org.hamcrest.Matchers.containsString;, +, +    public void testPasswordHashingAlgorithmSettingValidation() {, +        final boolean isPBKDF2Available = isSecretkeyFactoryAlgoAvailable("PBKDF2WithHMACSHA512");, +        final String pbkdf2Algo = randomFrom("PBKDF2_10000", "PBKDF2");, +        final Settings settings = Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), pbkdf2Algo).build();, +        if (isPBKDF2Available) {, +            assertEquals(pbkdf2Algo, XPackSettings.PASSWORD_HASHING_ALGORITHM.get(settings));, +        } else {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                () -> XPackSettings.PASSWORD_HASHING_ALGORITHM.get(settings));, +            assertThat(e.getMessage(), containsString("Support for PBKDF2WithHMACSHA512 must be available"));, +        }, +, +        final String bcryptAlgo = randomFrom("BCRYPT", "BCRYPT11");, +        assertEquals(bcryptAlgo, XPackSettings.PASSWORD_HASHING_ALGORITHM.get(, +            Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), bcryptAlgo).build()));, +    }, +, +    private boolean isSecretkeyFactoryAlgoAvailable(String algorithmId) {, +        try {, +            SecretKeyFactory.getInstance(algorithmId);, +            return true;, +        } catch (NoSuchAlgorithmException e) {, +            return false;, +        }, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackSettings.java, +import javax.crypto.SecretKeyFactory;, +            throw new IllegalArgumentException("Invalid algorithm: " + v + ". Valid values for password hashing are " +, +                Hasher.getAvailableAlgoStoredHash().toString());, +        } else if (v.regionMatches(true, 0, "pbkdf2", 0, "pbkdf2".length())) {, +            try {, +                SecretKeyFactory.getInstance("PBKDF2withHMACSHA512");, +            } catch (NoSuchAlgorithmException e) {, +                throw new IllegalArgumentException(, +                    "Support for PBKDF2WithHMACSHA512 must be available in order to use any of the " +, +                        "PBKDF2 algorithms for the [xpack.security.authc.password_hashing.algorithm] setting.", e);, +            }, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/XPackSettingsTests.java, +import org.elasticsearch.common.settings.Settings;, +import javax.crypto.SecretKeyFactory;, +import java.security.NoSuchAlgorithmException;, +, +import static org.hamcrest.Matchers.containsString;, +, +    public void testPasswordHashingAlgorithmSettingValidation() {, +        final boolean isPBKDF2Available = isSecretkeyFactoryAlgoAvailable("PBKDF2WithHMACSHA512");, +        final String pbkdf2Algo = randomFrom("PBKDF2_10000", "PBKDF2");, +        final Settings settings = Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), pbkdf2Algo).build();, +        if (isPBKDF2Available) {, +            assertEquals(pbkdf2Algo, XPackSettings.PASSWORD_HASHING_ALGORITHM.get(settings));, +        } else {, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                () -> XPackSettings.PASSWORD_HASHING_ALGORITHM.get(settings));, +            assertThat(e.getMessage(), containsString("Support for PBKDF2WithHMACSHA512 must be available"));, +        }, +, +        final String bcryptAlgo = randomFrom("BCRYPT", "BCRYPT11");, +        assertEquals(bcryptAlgo, XPackSettings.PASSWORD_HASHING_ALGORITHM.get(, +            Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), bcryptAlgo).build()));, +    }, +, +    private boolean isSecretkeyFactoryAlgoAvailable(String algorithmId) {, +        try {, +            SecretKeyFactory.getInstance(algorithmId);, +            return true;, +        } catch (NoSuchAlgorithmException e) {, +            return false;, +        }, +    }]