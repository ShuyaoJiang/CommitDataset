[+++ b/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.cache.filter.ShardFilterCache;, +import org.elasticsearch.indices.cache.filter.IndicesFilterCache;, +            final ShardFilterCache shardFilterCache = new ShardFilterCache(shardId, injector.getInstance(IndicesFilterCache.class));, +                    new StoreCloseListener(shardId, canDeleteShardContent, shardFilterCache), path));, +            modules.add(new ShardFilterCacheModule(shardFilterCache));, +        private final Closeable[] toClose;, +        public StoreCloseListener(ShardId shardId, boolean ownsShard, Closeable... toClose) {, +            this.toClose = toClose;, +            try {, +            } finally {, +                try {, +                    IOUtils.close(toClose);, +                } catch (IOException ex) {, +                    logger.debug("failed to close resource", ex);, +                }, +            }, +, +++ b/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.cache.filter.ShardFilterCache;, +import org.elasticsearch.indices.cache.filter.IndicesFilterCache;, +            final ShardFilterCache shardFilterCache = new ShardFilterCache(shardId, injector.getInstance(IndicesFilterCache.class));, +                    new StoreCloseListener(shardId, canDeleteShardContent, shardFilterCache), path));, +            modules.add(new ShardFilterCacheModule(shardFilterCache));, +        private final Closeable[] toClose;, +        public StoreCloseListener(ShardId shardId, boolean ownsShard, Closeable... toClose) {, +            this.toClose = toClose;, +            try {, +            } finally {, +                try {, +                    IOUtils.close(toClose);, +                } catch (IOException ex) {, +                    logger.debug("failed to close resource", ex);, +                }, +            }, +, +++ b/src/main/java/org/elasticsearch/index/cache/filter/ShardFilterCache.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.locks.ReentrantReadWriteLock;, +public class ShardFilterCache  implements Closeable {, +    final ShardId shardId;, +    public ShardFilterCache(ShardId shardId, IndicesFilterCache cache) {, +        this.shardId = shardId;, +++ b/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.cache.filter.ShardFilterCache;, +import org.elasticsearch.indices.cache.filter.IndicesFilterCache;, +            final ShardFilterCache shardFilterCache = new ShardFilterCache(shardId, injector.getInstance(IndicesFilterCache.class));, +                    new StoreCloseListener(shardId, canDeleteShardContent, shardFilterCache), path));, +            modules.add(new ShardFilterCacheModule(shardFilterCache));, +        private final Closeable[] toClose;, +        public StoreCloseListener(ShardId shardId, boolean ownsShard, Closeable... toClose) {, +            this.toClose = toClose;, +            try {, +            } finally {, +                try {, +                    IOUtils.close(toClose);, +                } catch (IOException ex) {, +                    logger.debug("failed to close resource", ex);, +                }, +            }, +, +++ b/src/main/java/org/elasticsearch/index/cache/filter/ShardFilterCache.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.locks.ReentrantReadWriteLock;, +public class ShardFilterCache  implements Closeable {, +    final ShardId shardId;, +    public ShardFilterCache(ShardId shardId, IndicesFilterCache cache) {, +        this.shardId = shardId;, +++ b/src/main/java/org/elasticsearch/index/cache/filter/ShardFilterCacheModule.java, +    private final ShardFilterCache shardFilterCache;, +, +    public ShardFilterCacheModule(ShardFilterCache shardFilterCache) {, +        this.shardFilterCache = shardFilterCache;, +    }, +, +        bind(ShardFilterCache.class).toInstance(shardFilterCache);, +++ b/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.cache.filter.ShardFilterCache;, +import org.elasticsearch.indices.cache.filter.IndicesFilterCache;, +            final ShardFilterCache shardFilterCache = new ShardFilterCache(shardId, injector.getInstance(IndicesFilterCache.class));, +                    new StoreCloseListener(shardId, canDeleteShardContent, shardFilterCache), path));, +            modules.add(new ShardFilterCacheModule(shardFilterCache));, +        private final Closeable[] toClose;, +        public StoreCloseListener(ShardId shardId, boolean ownsShard, Closeable... toClose) {, +            this.toClose = toClose;, +            try {, +            } finally {, +                try {, +                    IOUtils.close(toClose);, +                } catch (IOException ex) {, +                    logger.debug("failed to close resource", ex);, +                }, +            }, +, +++ b/src/main/java/org/elasticsearch/index/cache/filter/ShardFilterCache.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.locks.ReentrantReadWriteLock;, +public class ShardFilterCache  implements Closeable {, +    final ShardId shardId;, +    public ShardFilterCache(ShardId shardId, IndicesFilterCache cache) {]