[+++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunction.java, +     * @param decay, +    public double processScale(double scale, double decay);, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunction.java, +     * @param decay, +    public double processScale(double scale, double decay);, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +    protected static final String DECAY = "decay";, +    private double decay = -1;, +    public DecayFunctionBuilder setDecay(double decay) {, +        if (decay <= 0 || decay >= 1.0) {, +        this.decay = decay;, +        if (decay > 0) {, +            builder.field(DECAY, decay);, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunction.java, +     * @param decay, +    public double processScale(double scale, double decay);, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +    protected static final String DECAY = "decay";, +    private double decay = -1;, +    public DecayFunctionBuilder setDecay(double decay) {, +        if (decay <= 0 || decay >= 1.0) {, +        this.decay = decay;, +        if (decay > 0) {, +            builder.field(DECAY, decay);, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionParser.java, +        double decay = 0.5;, +            } else if (parameterName.equals(DecayFunctionBuilder.DECAY)) {, +                decay = parser.doubleValue();, +        return new NumericFieldDataScoreFunction(reference, scale, decay, offset, getDecayFunction(), numericFieldData);, +        double decay = 0.5;, +            } else if (parameterName.equals(DecayFunctionBuilder.DECAY)) {, +                decay = parser.doubleValue();, +        return new GeoFieldDataScoreFunction(reference, scale, decay, offset, getDecayFunction(), indexFieldData);, +        double decay = 0.5;, +            } else if (parameterName.equals(DecayFunctionBuilder.DECAY)) {, +                decay = parser.doubleValue();, +        return new NumericFieldDataScoreFunction(reference, scale, decay, offset, getDecayFunction(), numericFieldData);, +        public GeoFieldDataScoreFunction(GeoPoint reference, double scale, double decay, double offset, DecayFunction func,, +            super(scale, decay, offset, func);, +        public NumericFieldDataScoreFunction(double reference, double scale, double decay, double offset, DecayFunction func,, +            super(scale, decay, offset, func);, +        public AbstractDistanceScoreFunction(double userSuppiedScale, double decay, double offset, DecayFunction func) {, +            if (decay <= 0.0 || decay >= 1.0) {, +                        + " : decay must be in the range [0..1].");, +            this.scale = func.processScale(userSuppiedScale, decay);, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunction.java, +     * @param decay, +    public double processScale(double scale, double decay);, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +    protected static final String DECAY = "decay";, +    private double decay = -1;, +    public DecayFunctionBuilder setDecay(double decay) {, +        if (decay <= 0 || decay >= 1.0) {, +        this.decay = decay;, +        if (decay > 0) {, +            builder.field(DECAY, decay);, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionParser.java, +        double decay = 0.5;, +            } else if (parameterName.equals(DecayFunctionBuilder.DECAY)) {, +                decay = parser.doubleValue();, +        return new NumericFieldDataScoreFunction(reference, scale, decay, offset, getDecayFunction(), numericFieldData);, +        double decay = 0.5;, +            } else if (parameterName.equals(DecayFunctionBuilder.DECAY)) {, +                decay = parser.doubleValue();, +        return new GeoFieldDataScoreFunction(reference, scale, decay, offset, getDecayFunction(), indexFieldData);, +        double decay = 0.5;, +            } else if (parameterName.equals(DecayFunctionBuilder.DECAY)) {, +                decay = parser.doubleValue();, +        return new NumericFieldDataScoreFunction(reference, scale, decay, offset, getDecayFunction(), numericFieldData);, +        public GeoFieldDataScoreFunction(GeoPoint reference, double scale, double decay, double offset, DecayFunction func,, +            super(scale, decay, offset, func);, +        public NumericFieldDataScoreFunction(double reference, double scale, double decay, double offset, DecayFunction func,, +            super(scale, decay, offset, func);, +        public AbstractDistanceScoreFunction(double userSuppiedScale, double decay, double offset, DecayFunction func) {, +            if (decay <= 0.0 || decay >= 1.0) {, +                        + " : decay must be in the range [0..1].");, +            this.scale = func.processScale(userSuppiedScale, decay);, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/exp/ExponentialDecayFunctionParser.java, +        public double processScale(double scale, double decay) {, +            return Math.log(decay) / scale;, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunction.java, +     * @param decay, +    public double processScale(double scale, double decay);, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +    protected static final String DECAY = "decay";, +    private double decay = -1;, +    public DecayFunctionBuilder setDecay(double decay) {, +        if (decay <= 0 || decay >= 1.0) {, +        this.decay = decay;, +        if (decay > 0) {, +            builder.field(DECAY, decay);, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionParser.java, +        double decay = 0.5;, +            } else if (parameterName.equals(DecayFunctionBuilder.DECAY)) {, +                decay = parser.doubleValue();, +        return new NumericFieldDataScoreFunction(reference, scale, decay, offset, getDecayFunction(), numericFieldData);, +        double decay = 0.5;, +            } else if (parameterName.equals(DecayFunctionBuilder.DECAY)) {, +                decay = parser.doubleValue();]