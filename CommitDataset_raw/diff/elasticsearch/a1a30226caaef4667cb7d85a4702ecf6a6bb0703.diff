[+++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java, +    private final String nodeId;, +, +    public RoutingNode(String nodeId, DiscoveryNode node) {, +        this(nodeId, node, new ArrayList<MutableShardRouting>());, +    public RoutingNode(String nodeId, DiscoveryNode node, List<MutableShardRouting> shards) {, +        this.nodeId = nodeId;, +        return this.nodeId;, +        sb.append("-----node_id[").append(nodeId).append("][" + (node == null ? "X" : "V") + "]\n");, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java, +    private final String nodeId;, +, +    public RoutingNode(String nodeId, DiscoveryNode node) {, +        this(nodeId, node, new ArrayList<MutableShardRouting>());, +    public RoutingNode(String nodeId, DiscoveryNode node, List<MutableShardRouting> shards) {, +        this.nodeId = nodeId;, +        return this.nodeId;, +        sb.append("-----node_id[").append(nodeId).append("][" + (node == null ? "X" : "V") + "]\n");, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +            this.nodesToShards.put(nodeId, new RoutingNode(nodeId, clusterState.nodes().get(nodeId), entry.getValue()));, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java, +    private final String nodeId;, +, +    public RoutingNode(String nodeId, DiscoveryNode node) {, +        this(nodeId, node, new ArrayList<MutableShardRouting>());, +    public RoutingNode(String nodeId, DiscoveryNode node, List<MutableShardRouting> shards) {, +        this.nodeId = nodeId;, +        return this.nodeId;, +        sb.append("-----node_id[").append(nodeId).append("][" + (node == null ? "X" : "V") + "]\n");, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +            this.nodesToShards.put(nodeId, new RoutingNode(nodeId, clusterState.nodes().get(nodeId), entry.getValue()));, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +                RoutingNode routingNode = new RoutingNode(node.id(), node);, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java, +    private final String nodeId;, +, +    public RoutingNode(String nodeId, DiscoveryNode node) {, +        this(nodeId, node, new ArrayList<MutableShardRouting>());, +    public RoutingNode(String nodeId, DiscoveryNode node, List<MutableShardRouting> shards) {, +        this.nodeId = nodeId;, +        return this.nodeId;, +        sb.append("-----node_id[").append(nodeId).append("][" + (node == null ? "X" : "V") + "]\n");, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +            this.nodesToShards.put(nodeId, new RoutingNode(nodeId, clusterState.nodes().get(nodeId), entry.getValue()));, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +                RoutingNode routingNode = new RoutingNode(node.id(), node);, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +        // do nothing here, no merging, but also no exception]