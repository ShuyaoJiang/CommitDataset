[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/geodistance/GeoDistanceFacetCollector.java, +import org.elasticsearch.common.lucene.search.TermFilter;, +import org.elasticsearch.search.internal.SearchContext;, +                                     GeoDistanceFacet.Entry[] entries, SearchContext context) {, +        this.fieldDataCache = context.fieldDataCache();, +        MapperService.SmartNameFieldMappers smartMappers = context.mapperService().smartName(fieldName + XContentGeoPointFieldMapper.Names.LAT_SUFFIX);, +        if (smartMappers == null || !smartMappers.hasMapper()) {, +        // add type filter if there is exact doc mapper associated with it, +        if (smartMappers.hasDocMapper()) {, +            setFilter(context.filterCache().cache(new TermFilter(smartMappers.docMapper().typeMapper().term(smartMappers.docMapper().type()))));, +        }, +, +        this.indexLatFieldName = smartMappers.mapper().names().indexName();, +, +        FieldMapper mapper = context.mapperService().smartNameFieldMapper(fieldName + XContentGeoPointFieldMapper.Names.LON_SUFFIX);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/geodistance/GeoDistanceFacetCollector.java, +import org.elasticsearch.common.lucene.search.TermFilter;, +import org.elasticsearch.search.internal.SearchContext;, +                                     GeoDistanceFacet.Entry[] entries, SearchContext context) {, +        this.fieldDataCache = context.fieldDataCache();, +        MapperService.SmartNameFieldMappers smartMappers = context.mapperService().smartName(fieldName + XContentGeoPointFieldMapper.Names.LAT_SUFFIX);, +        if (smartMappers == null || !smartMappers.hasMapper()) {, +        // add type filter if there is exact doc mapper associated with it, +        if (smartMappers.hasDocMapper()) {, +            setFilter(context.filterCache().cache(new TermFilter(smartMappers.docMapper().typeMapper().term(smartMappers.docMapper().type()))));, +        }, +, +        this.indexLatFieldName = smartMappers.mapper().names().indexName();, +, +        FieldMapper mapper = context.mapperService().smartNameFieldMapper(fieldName + XContentGeoPointFieldMapper.Names.LON_SUFFIX);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/geodistance/GeoDistanceFacetCollectorParser.java, +                    context, valueFieldName);, +                    context, valueScript, params);, +                context);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/geodistance/GeoDistanceFacetCollector.java, +import org.elasticsearch.common.lucene.search.TermFilter;, +import org.elasticsearch.search.internal.SearchContext;, +                                     GeoDistanceFacet.Entry[] entries, SearchContext context) {, +        this.fieldDataCache = context.fieldDataCache();, +        MapperService.SmartNameFieldMappers smartMappers = context.mapperService().smartName(fieldName + XContentGeoPointFieldMapper.Names.LAT_SUFFIX);, +        if (smartMappers == null || !smartMappers.hasMapper()) {, +        // add type filter if there is exact doc mapper associated with it, +        if (smartMappers.hasDocMapper()) {, +            setFilter(context.filterCache().cache(new TermFilter(smartMappers.docMapper().typeMapper().term(smartMappers.docMapper().type()))));, +        }, +, +        this.indexLatFieldName = smartMappers.mapper().names().indexName();, +, +        FieldMapper mapper = context.mapperService().smartNameFieldMapper(fieldName + XContentGeoPointFieldMapper.Names.LON_SUFFIX);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/geodistance/GeoDistanceFacetCollectorParser.java, +                    context, valueFieldName);, +                    context, valueScript, params);, +                context);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/geodistance/ScriptGeoDistanceFacetCollector.java, +import org.elasticsearch.search.internal.SearchContext;, +                                           GeoDistanceFacet.Entry[] entries, SearchContext context,, +                                           String script, Map<String, Object> params) {, +        super(facetName, fieldName, lat, lon, unit, geoDistance, entries, context);, +        this.valueFunction = new ScriptFieldsFunction(script, context.scriptService(), context.mapperService(), context.fieldDataCache());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/geodistance/GeoDistanceFacetCollector.java, +import org.elasticsearch.common.lucene.search.TermFilter;, +import org.elasticsearch.search.internal.SearchContext;, +                                     GeoDistanceFacet.Entry[] entries, SearchContext context) {, +        this.fieldDataCache = context.fieldDataCache();, +        MapperService.SmartNameFieldMappers smartMappers = context.mapperService().smartName(fieldName + XContentGeoPointFieldMapper.Names.LAT_SUFFIX);, +        if (smartMappers == null || !smartMappers.hasMapper()) {, +        // add type filter if there is exact doc mapper associated with it, +        if (smartMappers.hasDocMapper()) {, +            setFilter(context.filterCache().cache(new TermFilter(smartMappers.docMapper().typeMapper().term(smartMappers.docMapper().type()))));, +        }, +, +        this.indexLatFieldName = smartMappers.mapper().names().indexName();, +, +        FieldMapper mapper = context.mapperService().smartNameFieldMapper(fieldName + XContentGeoPointFieldMapper.Names.LON_SUFFIX);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/geodistance/GeoDistanceFacetCollectorParser.java, +                    context, valueFieldName);, +                    context, valueScript, params);, +                context);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/geodistance/ScriptGeoDistanceFacetCollector.java, +import org.elasticsearch.search.internal.SearchContext;, +                                           GeoDistanceFacet.Entry[] entries, SearchContext context,, +                                           String script, Map<String, Object> params) {, +        super(facetName, fieldName, lat, lon, unit, geoDistance, entries, context);, +        this.valueFunction = new ScriptFieldsFunction(script, context.scriptService(), context.mapperService(), context.fieldDataCache());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/geodistance/ValueGeoDistanceFacetCollector.java, +import org.elasticsearch.search.internal.SearchContext;, +                                          GeoDistanceFacet.Entry[] entries, SearchContext context, String valueFieldName) {, +        super(facetName, fieldName, lat, lon, unit, geoDistance, entries, context);, +        FieldMapper mapper = context.mapperService().smartNameFieldMapper(valueFieldName);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/geodistance/GeoDistanceFacetCollector.java, +import org.elasticsearch.common.lucene.search.TermFilter;, +import org.elasticsearch.search.internal.SearchContext;, +                                     GeoDistanceFacet.Entry[] entries, SearchContext context) {, +        this.fieldDataCache = context.fieldDataCache();, +        MapperService.SmartNameFieldMappers smartMappers = context.mapperService().smartName(fieldName + XContentGeoPointFieldMapper.Names.LAT_SUFFIX);, +        if (smartMappers == null || !smartMappers.hasMapper()) {, +        // add type filter if there is exact doc mapper associated with it, +        if (smartMappers.hasDocMapper()) {, +            setFilter(context.filterCache().cache(new TermFilter(smartMappers.docMapper().typeMapper().term(smartMappers.docMapper().type()))));, +        }]