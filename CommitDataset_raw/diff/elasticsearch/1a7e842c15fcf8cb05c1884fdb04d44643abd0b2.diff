[+++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackFeatureSet.java, +import org.elasticsearch.action.ActionListener;, +    void usage(ActionListener<Usage> listener);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackFeatureSet.java, +import org.elasticsearch.action.ActionListener;, +    void usage(ActionListener<Usage> listener);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/action/TransportXPackUsageAction.java, +import org.elasticsearch.xpack.XPackFeatureSet.Usage;, +import org.elasticsearch.xpack.common.IteratingActionListener;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReferenceArray;, +import java.util.function.BiConsumer;, +    private final List<XPackFeatureSet> featureSets;, +        this.featureSets = Collections.unmodifiableList(new ArrayList<>(featureSets));, +        final ActionListener<List<XPackFeatureSet.Usage>> usageActionListener = new ActionListener<List<Usage>>() {, +            @Override, +            public void onResponse(List<Usage> usages) {, +            public void onFailure(Exception e) {, +                listener.onFailure(e);, +            }, +        };, +        final AtomicReferenceArray<Usage> featureSetUsages = new AtomicReferenceArray<>(featureSets.size());, +        final AtomicInteger position = new AtomicInteger(0);, +        final BiConsumer<XPackFeatureSet, ActionListener<List<Usage>>> consumer = (featureSet, iteratingListener) -> {, +            featureSet.usage(new ActionListener<Usage>() {, +                @Override, +                public void onResponse(Usage usage) {, +                    featureSetUsages.set(position.getAndIncrement(), usage);, +                    iteratingListener.onResponse(null); // just send null back and keep iterating, +                }, +, +                @Override, +                public void onFailure(Exception e) {, +                    iteratingListener.onFailure(e);, +                }, +            });, +        };, +        IteratingActionListener<List<XPackFeatureSet.Usage>, XPackFeatureSet> iteratingActionListener =, +                new IteratingActionListener<>(usageActionListener, consumer, featureSets,, +                        threadPool.getThreadContext(), () -> {, +                    final List<Usage> usageList = new ArrayList<>(featureSetUsages.length());, +                    for (int i = 0; i < featureSetUsages.length(); i++) {, +                        usageList.add(featureSetUsages.get(i));, +                    }, +                    return usageList;, +                });, +        iteratingActionListener.run();, +    }, +, +    @Override, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackFeatureSet.java, +import org.elasticsearch.action.ActionListener;, +    void usage(ActionListener<Usage> listener);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/action/TransportXPackUsageAction.java, +import org.elasticsearch.xpack.XPackFeatureSet.Usage;, +import org.elasticsearch.xpack.common.IteratingActionListener;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReferenceArray;, +import java.util.function.BiConsumer;, +    private final List<XPackFeatureSet> featureSets;, +        this.featureSets = Collections.unmodifiableList(new ArrayList<>(featureSets));, +        final ActionListener<List<XPackFeatureSet.Usage>> usageActionListener = new ActionListener<List<Usage>>() {, +            @Override, +            public void onResponse(List<Usage> usages) {, +            public void onFailure(Exception e) {, +                listener.onFailure(e);, +            }, +        };, +        final AtomicReferenceArray<Usage> featureSetUsages = new AtomicReferenceArray<>(featureSets.size());, +        final AtomicInteger position = new AtomicInteger(0);, +        final BiConsumer<XPackFeatureSet, ActionListener<List<Usage>>> consumer = (featureSet, iteratingListener) -> {, +            featureSet.usage(new ActionListener<Usage>() {, +                @Override, +                public void onResponse(Usage usage) {, +                    featureSetUsages.set(position.getAndIncrement(), usage);, +                    iteratingListener.onResponse(null); // just send null back and keep iterating, +                }, +, +                @Override, +                public void onFailure(Exception e) {, +                    iteratingListener.onFailure(e);, +                }, +            });, +        };, +        IteratingActionListener<List<XPackFeatureSet.Usage>, XPackFeatureSet> iteratingActionListener =, +                new IteratingActionListener<>(usageActionListener, consumer, featureSets,, +                        threadPool.getThreadContext(), () -> {, +                    final List<Usage> usageList = new ArrayList<>(featureSetUsages.length());, +                    for (int i = 0; i < featureSetUsages.length(); i++) {, +                        usageList.add(featureSetUsages.get(i));, +                    }, +                    return usageList;, +                });, +        iteratingActionListener.run();, +    }, +]