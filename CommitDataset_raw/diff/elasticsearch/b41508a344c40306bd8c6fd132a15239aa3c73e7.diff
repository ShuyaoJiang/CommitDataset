[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        headers.putAll(in.readMapOfLists(StreamInput::readString, StreamInput::readString));, +        out.writeMapOfLists(headers, StreamOutput::writeString, StreamOutput::writeString);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        headers.putAll(in.readMapOfLists(StreamInput::readString, StreamInput::readString));, +        out.writeMapOfLists(headers, StreamOutput::writeString, StreamOutput::writeString);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +    /**, +     * Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s., +     * <pre><code>, +     * Map&lt;String, List&lt;String&gt;&gt; map = in.readMapOfLists(StreamInput::readString, StreamInput::readString);, +     * </code></pre>, +     *, +     * @param keyReader The key reader, +     * @param valueReader The value reader, +     * @return Never {@code null}., +     */, +    public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader), +            throws IOException {, +        final int size = readVInt();, +        if (size == 0) {, +            return Collections.emptyMap();, +        }, +        final Map<K, List<V>> map = new HashMap<>(size);, +        for (int i = 0; i < size; ++i) {, +            map.put(keyReader.read(this), readList(valueReader));, +        }, +        return map;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        headers.putAll(in.readMapOfLists(StreamInput::readString, StreamInput::readString));, +        out.writeMapOfLists(headers, StreamOutput::writeString, StreamOutput::writeString);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +    /**, +     * Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s., +     * <pre><code>, +     * Map&lt;String, List&lt;String&gt;&gt; map = in.readMapOfLists(StreamInput::readString, StreamInput::readString);, +     * </code></pre>, +     *, +     * @param keyReader The key reader, +     * @param valueReader The value reader, +     * @return Never {@code null}., +     */, +    public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader), +            throws IOException {, +        final int size = readVInt();, +        if (size == 0) {, +            return Collections.emptyMap();, +        }, +        final Map<K, List<V>> map = new HashMap<>(size);, +        for (int i = 0; i < size; ++i) {, +            map.put(keyReader.read(this), readList(valueReader));, +        }, +        return map;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.common.io.stream.Writeable.Writer;, +     * Write a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s., +     * <pre><code>, +     * Map&lt;String, List&lt;String&gt;&gt; map = ...;, +     * out.writeMapOfLists(map, StreamOutput::writeString, StreamOutput::writeString);, +     * </code></pre>, +     *, +     * @param keyWriter The key writer, +     * @param valueWriter The value writer, +    public <K, V> void writeMapOfLists(final Map<K, List<V>> map, final Writer<K> keyWriter, final Writer<V> valueWriter), +            throws IOException {, +        for (final Map.Entry<K, List<V>> entry : map.entrySet()) {, +            keyWriter.write(this, entry.getKey());, +            for (final V value : entry.getValue()) {, +                valueWriter.write(this, value);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        headers.putAll(in.readMapOfLists(StreamInput::readString, StreamInput::readString));, +        out.writeMapOfLists(headers, StreamOutput::writeString, StreamOutput::writeString);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +    /**, +     * Read a {@link Map} of {@code K}-type keys to {@code V}-type {@link List}s., +     * <pre><code>, +     * Map&lt;String, List&lt;String&gt;&gt; map = in.readMapOfLists(StreamInput::readString, StreamInput::readString);, +     * </code></pre>, +     *, +     * @param keyReader The key reader, +     * @param valueReader The value reader, +     * @return Never {@code null}., +     */, +    public <K, V> Map<K, List<V>> readMapOfLists(final Writeable.Reader<K> keyReader, final Writeable.Reader<V> valueReader), +            throws IOException {, +        final int size = readVInt();, +        if (size == 0) {, +            return Collections.emptyMap();, +        }, +        final Map<K, List<V>> map = new HashMap<>(size);, +        for (int i = 0; i < size; ++i) {, +            map.put(keyReader.read(this), readList(valueReader));, +        }, +        return map;, +    }, +]