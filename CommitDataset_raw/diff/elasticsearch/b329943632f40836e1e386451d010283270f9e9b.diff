[+++ b/src/test/java/org/elasticsearch/test/integration/search/basic/SearchWhileCreatingIndexTests.java, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthStatus;, +import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +/**, + * This test basically verifies that search with a single shard active (cause we indexed to it) and other, + * shards possibly not active at all (cause they haven't allocated) will still work., + */, +    public void testIndexCausesIndexCreation() throws Exception {, +        searchWhileCreatingIndex(-1, 1); // 1 replica in our default..., +    }, +, +    @Test, +    public void testNoReplicas() throws Exception {, +        searchWhileCreatingIndex(10, 0);, +    }, +, +    @Test, +    public void testOneReplica() throws Exception {, +        searchWhileCreatingIndex(10, 1);, +    }, +, +    @Test, +    public void testTwoReplicas() throws Exception {, +        searchWhileCreatingIndex(10, 2);, +    }, +, +    private void searchWhileCreatingIndex(int numberOfShards, int numberOfReplicas) throws Exception {, +            logger.info("running iteration {}", i);, +            if (numberOfShards > 0) {, +                CreateIndexResponse createIndexResponse = prepareCreate("test"), +                        .setSettings(settingsBuilder().put("index.number_of_shards", numberOfShards).put("index.number_of_replicas", numberOfReplicas)).get();, +                assertThat(createIndexResponse.isAcknowledged(), equalTo(true));, +            }, +            client().prepareIndex("test", "type1", randomAsciiOfLength(5)).setSource("field", "test").execute().actionGet();, +, +            // we want to make sure that while recovery happens, and a replica gets recovered, its properly refreshed, +            ClusterHealthStatus status = ClusterHealthStatus.RED;, +            while (status != ClusterHealthStatus.GREEN) {, +                // first, verify that search on the primary search works, +                SearchResponse searchResponse = client().prepareSearch("test").setPreference("_primary").setQuery(QueryBuilders.termQuery("field", "test")).execute().actionGet();, +                assertHitCount(searchResponse, 1);, +                // now, let it go to primary or replica, though in a randomized re-creatable manner, +                searchResponse = client().prepareSearch("test").setPreference(randomAsciiOfLength(5)).setQuery(QueryBuilders.termQuery("field", "test")).execute().actionGet();, +                assertHitCount(searchResponse, 1);, +                status = client().admin().cluster().prepareHealth("test").get().getStatus();, +                cluster().ensureAtLeastNumNodes(numberOfReplicas + 1);, +            }]