[+++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestUtils.java, +import org.apache.lucene.search.spell.JaroWinklerDistance;, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.search.spell.LuceneLevenshteinDistance;, +import org.apache.lucene.search.spell.NGramDistance;, +import org.apache.lucene.search.spell.StringDistance;, +import org.apache.lucene.search.spell.SuggestMode;, +import org.elasticsearch.index.analysis.CustomAnalyzer;, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +import org.elasticsearch.index.analysis.ShingleTokenFilterFactory;, +import org.elasticsearch.index.analysis.TokenFilterFactory;, +import java.util.Locale;, +    public static final Comparator<SuggestWord> LUCENE_FREQUENCY = new SuggestWordFrequencyComparator();, +    public static final Comparator<SuggestWord> SCORE_COMPARATOR = SuggestWordQueue.DEFAULT_COMPARATOR;, +, +    public static SuggestMode resolveSuggestMode(String suggestMode) {, +        suggestMode = suggestMode.toLowerCase(Locale.US);, +        if ("missing".equals(suggestMode)) {, +            return SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;, +        } else if ("popular".equals(suggestMode)) {, +            return SuggestMode.SUGGEST_MORE_POPULAR;, +        } else if ("always".equals(suggestMode)) {, +            return SuggestMode.SUGGEST_ALWAYS;, +        } else {, +            throw new IllegalArgumentException("Illegal suggest mode " + suggestMode);, +        }, +    }, +, +    public static StringDistance resolveDistance(String distanceVal) {, +        distanceVal = distanceVal.toLowerCase(Locale.US);, +        if ("internal".equals(distanceVal)) {, +            return DirectSpellChecker.INTERNAL_LEVENSHTEIN;, +        } else if ("damerau_levenshtein".equals(distanceVal) || "damerauLevenshtein".equals(distanceVal)) {, +            return new LuceneLevenshteinDistance();, +        } else if ("levenstein".equals(distanceVal)) {, +            return new LevensteinDistance();, +          //TODO Jaro and Winkler are 2 people - so apply same naming logic as damerau_levenshtein, +        } else if ("jarowinkler".equals(distanceVal)) {, +            return new JaroWinklerDistance();, +        } else if ("ngram".equals(distanceVal)) {, +            return new NGramDistance();, +        } else {, +            throw new IllegalArgumentException("Illegal distance option " + distanceVal);, +        }, +    }, +, +, +    public static ShingleTokenFilterFactory.Factory getShingleFilterFactory(Analyzer analyzer) {, +        if (analyzer instanceof NamedAnalyzer) {, +            analyzer = ((NamedAnalyzer)analyzer).analyzer();, +        }, +        if (analyzer instanceof CustomAnalyzer) {, +            final CustomAnalyzer a = (CustomAnalyzer) analyzer;, +            final TokenFilterFactory[] tokenFilters = a.tokenFilters();, +            for (TokenFilterFactory tokenFilterFactory : tokenFilters) {, +                if (tokenFilterFactory instanceof ShingleTokenFilterFactory) {, +                    return ((ShingleTokenFilterFactory)tokenFilterFactory).getInnerFactory();, +                } else if (tokenFilterFactory instanceof ShingleTokenFilterFactory.Factory) {, +                    return (ShingleTokenFilterFactory.Factory) tokenFilterFactory;, +                }, +            }, +        }, +        return null;, +    }, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestUtils.java, +import org.apache.lucene.search.spell.JaroWinklerDistance;, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.search.spell.LuceneLevenshteinDistance;, +import org.apache.lucene.search.spell.NGramDistance;, +import org.apache.lucene.search.spell.StringDistance;, +import org.apache.lucene.search.spell.SuggestMode;, +import org.elasticsearch.index.analysis.CustomAnalyzer;, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +import org.elasticsearch.index.analysis.ShingleTokenFilterFactory;, +import org.elasticsearch.index.analysis.TokenFilterFactory;, +import java.util.Locale;, +    public static final Comparator<SuggestWord> LUCENE_FREQUENCY = new SuggestWordFrequencyComparator();, +    public static final Comparator<SuggestWord> SCORE_COMPARATOR = SuggestWordQueue.DEFAULT_COMPARATOR;, +, +    public static SuggestMode resolveSuggestMode(String suggestMode) {, +        suggestMode = suggestMode.toLowerCase(Locale.US);, +        if ("missing".equals(suggestMode)) {, +            return SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;, +        } else if ("popular".equals(suggestMode)) {, +            return SuggestMode.SUGGEST_MORE_POPULAR;, +        } else if ("always".equals(suggestMode)) {, +            return SuggestMode.SUGGEST_ALWAYS;, +        } else {, +            throw new IllegalArgumentException("Illegal suggest mode " + suggestMode);, +        }, +    }, +, +    public static StringDistance resolveDistance(String distanceVal) {, +        distanceVal = distanceVal.toLowerCase(Locale.US);, +        if ("internal".equals(distanceVal)) {, +            return DirectSpellChecker.INTERNAL_LEVENSHTEIN;, +        } else if ("damerau_levenshtein".equals(distanceVal) || "damerauLevenshtein".equals(distanceVal)) {, +            return new LuceneLevenshteinDistance();, +        } else if ("levenstein".equals(distanceVal)) {, +            return new LevensteinDistance();]