[+++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefFieldComparatorSource.java, +                @Override, +                public void setScorer(Scorer scorer) {, +                    BytesRefFieldComparatorSource.this.setScorer(scorer);, +                }, +, +                        assert sortMissingFirst(missingValue) || sortMissingLast(missingValue);, +                public void setTopValue(BytesRef topValue) {, +                    // symetric of value(int): if we need to feed the comparator with <tt>null</tt>, +                    // if we overrode the value with MAX_TERM in value(int), +                    if (topValue == missingBytes && (sortMissingFirst(missingValue) || sortMissingLast(missingValue))) {, +                        topValue = null;, +                    }, +                    super.setTopValue(topValue);, +                }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefFieldComparatorSource.java, +                @Override, +                public void setScorer(Scorer scorer) {, +                    BytesRefFieldComparatorSource.this.setScorer(scorer);, +                }, +, +                        assert sortMissingFirst(missingValue) || sortMissingLast(missingValue);, +                public void setTopValue(BytesRef topValue) {, +                    // symetric of value(int): if we need to feed the comparator with <tt>null</tt>, +                    // if we overrode the value with MAX_TERM in value(int), +                    if (topValue == missingBytes && (sortMissingFirst(missingValue) || sortMissingLast(missingValue))) {, +                        topValue = null;, +                    }, +                    super.setTopValue(topValue);, +                }, +, +++ b/src/test/java/org/elasticsearch/search/scroll/SearchScrollTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.search.sort.FieldSortBuilder;, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.notNullValue;, +, +    @Test, +    public void testStringSortMissingAscTerminates() throws Exception {, +        assertAcked(prepareCreate("test"), +                .setSettings(ImmutableSettings.settingsBuilder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)), +                .addMapping("test", "no_field", "type=string", "some_field", "type=string"));, +        client().prepareIndex("test", "test", "1").setSource("some_field", "test").get();, +        refresh();, +, +        SearchResponse response = client().prepareSearch("test"), +                .setTypes("test"), +                .addSort(new FieldSortBuilder("no_field").order(SortOrder.ASC).missing("_last")), +                .setScroll("1m"), +                .get();, +        assertHitCount(response, 1);, +        assertSearchHits(response, "1");, +, +        response = client().prepareSearchScroll(response.getScrollId()).get();, +        assertSearchResponse(response);, +        assertHitCount(response, 1);, +        assertNoSearchHits(response);, +, +        response = client().prepareSearch("test"), +                .setTypes("test"), +                .addSort(new FieldSortBuilder("no_field").order(SortOrder.ASC).missing("_first")), +                .setScroll("1m"), +                .get();, +        assertHitCount(response, 1);, +        assertSearchHits(response, "1");, +, +        response = client().prepareSearchScroll(response.getScrollId()).get();, +        assertHitCount(response, 1);, +        assertThat(response.getHits().getHits().length, equalTo(0));, +    }, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefFieldComparatorSource.java, +                @Override, +                public void setScorer(Scorer scorer) {, +                    BytesRefFieldComparatorSource.this.setScorer(scorer);, +                }, +, +                        assert sortMissingFirst(missingValue) || sortMissingLast(missingValue);, +                public void setTopValue(BytesRef topValue) {, +                    // symetric of value(int): if we need to feed the comparator with <tt>null</tt>, +                    // if we overrode the value with MAX_TERM in value(int), +                    if (topValue == missingBytes && (sortMissingFirst(missingValue) || sortMissingLast(missingValue))) {, +                        topValue = null;, +                    }, +                    super.setTopValue(topValue);, +                }, +, +++ b/src/test/java/org/elasticsearch/search/scroll/SearchScrollTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.search.sort.FieldSortBuilder;, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;]