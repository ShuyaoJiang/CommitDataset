[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/main/java/org/elasticsearch/index/percolator/stats/PercolateStats.java, +import org.elasticsearch.Version;, +    private long memorySizeInBytes = -1;, +     * @return Temporarily returns <code>-1</code>, but this used to return the total size the loaded queries take in, +     * memory, but this is disabled now because the size estimation was too expensive cpu wise. This will be enabled, +     * again when a cheaper size estimation can be found., +        if (in.getVersion().before(Version.V_1_1_0)) {, +            in.readVLong();, +        } else {, +            in.readLong();, +        }, +        if (out.getVersion().before(Version.V_1_1_0)) {, +            out.writeVLong(0);, +        } else {, +            out.writeLong(-1);, +        }, +++ b/pom.xml, +++ b/src/main/java/org/elasticsearch/index/percolator/stats/PercolateStats.java, +import org.elasticsearch.Version;, +    private long memorySizeInBytes = -1;, +     * @return Temporarily returns <code>-1</code>, but this used to return the total size the loaded queries take in, +     * memory, but this is disabled now because the size estimation was too expensive cpu wise. This will be enabled, +     * again when a cheaper size estimation can be found., +        if (in.getVersion().before(Version.V_1_1_0)) {, +            in.readVLong();, +        } else {, +            in.readLong();, +        }, +        if (out.getVersion().before(Version.V_1_1_0)) {, +            out.writeVLong(0);, +        } else {, +            out.writeLong(-1);, +        }, +++ b/src/main/java/org/elasticsearch/index/percolator/stats/ShardPercolateService.java, +        return new PercolateStats(percolateMetric.count(), TimeUnit.NANOSECONDS.toMillis(percolateMetric.sum()), currentMetric.count(), -1, numberOfQueries.count());, +    // Enable when a more efficient manner is found for estimating the size of a Lucene query., +    /*private static long computeSizeInMemory(HashedBytesRef id, Query query) {, +    }*/, +++ b/pom.xml, +++ b/src/main/java/org/elasticsearch/index/percolator/stats/PercolateStats.java, +import org.elasticsearch.Version;, +    private long memorySizeInBytes = -1;, +     * @return Temporarily returns <code>-1</code>, but this used to return the total size the loaded queries take in, +     * memory, but this is disabled now because the size estimation was too expensive cpu wise. This will be enabled, +     * again when a cheaper size estimation can be found., +        if (in.getVersion().before(Version.V_1_1_0)) {, +            in.readVLong();, +        } else {, +            in.readLong();, +        }, +        if (out.getVersion().before(Version.V_1_1_0)) {, +            out.writeVLong(0);, +        } else {, +            out.writeLong(-1);, +        }, +++ b/src/main/java/org/elasticsearch/index/percolator/stats/ShardPercolateService.java, +        return new PercolateStats(percolateMetric.count(), TimeUnit.NANOSECONDS.toMillis(percolateMetric.sum()), currentMetric.count(), -1, numberOfQueries.count());, +    // Enable when a more efficient manner is found for estimating the size of a Lucene query., +    /*private static long computeSizeInMemory(HashedBytesRef id, Query query) {, +    }*/, +++ b/src/test/java/org/elasticsearch/percolator/PercolatorTests.java, +        assertThat(indicesResponse.getTotal().getPercolate().getMemorySizeInBytes(), equalTo(-1l));, +        assertThat(indicesResponse.getTotal().getPercolate().getMemorySizeInBytes(), equalTo(-1l));]