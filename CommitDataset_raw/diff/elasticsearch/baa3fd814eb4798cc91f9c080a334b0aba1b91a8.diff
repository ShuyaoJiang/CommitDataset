[+++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +            fieldType.setNames(buildNames(context));, +        this(existing == null ? defaultFieldType(indexSettings) : existing.clone(),, +        super(NAME, fieldType, defaultFieldType(indexSettings), indexSettings);, +    }, +, +    private static MappedFieldType defaultFieldType(Settings indexSettings) {, +        MappedFieldType defaultFieldType = Defaults.FIELD_TYPE.clone();, +        Version indexCreated = Version.indexCreated(indexSettings);, +        if (indexCreated.onOrAfter(Version.V_2_1_0)) {, +            defaultFieldType.setHasDocValues(true);, +        }, +        return defaultFieldType;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +            fieldType.setNames(buildNames(context));, +        this(existing == null ? defaultFieldType(indexSettings) : existing.clone(),, +        super(NAME, fieldType, defaultFieldType(indexSettings), indexSettings);, +    }, +, +    private static MappedFieldType defaultFieldType(Settings indexSettings) {, +        MappedFieldType defaultFieldType = Defaults.FIELD_TYPE.clone();, +        Version indexCreated = Version.indexCreated(indexSettings);, +        if (indexCreated.onOrAfter(Version.V_2_1_0)) {, +            defaultFieldType.setHasDocValues(true);, +        }, +        return defaultFieldType;, +++ b/core/src/main/java/org/elasticsearch/index/translog/Checkpoint.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +            fieldType.setNames(buildNames(context));, +        this(existing == null ? defaultFieldType(indexSettings) : existing.clone(),, +        super(NAME, fieldType, defaultFieldType(indexSettings), indexSettings);, +    }, +, +    private static MappedFieldType defaultFieldType(Settings indexSettings) {, +        MappedFieldType defaultFieldType = Defaults.FIELD_TYPE.clone();, +        Version indexCreated = Version.indexCreated(indexSettings);, +        if (indexCreated.onOrAfter(Version.V_2_1_0)) {, +            defaultFieldType.setHasDocValues(true);, +        }, +        return defaultFieldType;, +++ b/core/src/main/java/org/elasticsearch/index/translog/Checkpoint.java, +++ b/core/src/main/java/org/elasticsearch/index/translog/Translog.java, +    private ArrayList<ImmutableTranslogReader> recoverFromFiles(TranslogGeneration translogGeneration, Checkpoint checkpoint) throws IOException {, +, +            Files.copy(location.resolve(CHECKPOINT_FILE_NAME), commitCheckpoint);, +            IOUtils.fsync(commitCheckpoint, false);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TypeFieldMapper.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +            fieldType.setNames(buildNames(context));, +        this(existing == null ? defaultFieldType(indexSettings) : existing.clone(),, +        super(NAME, fieldType, defaultFieldType(indexSettings), indexSettings);, +    }, +, +    private static MappedFieldType defaultFieldType(Settings indexSettings) {, +        MappedFieldType defaultFieldType = Defaults.FIELD_TYPE.clone();, +        Version indexCreated = Version.indexCreated(indexSettings);, +        if (indexCreated.onOrAfter(Version.V_2_1_0)) {, +            defaultFieldType.setHasDocValues(true);, +        }, +        return defaultFieldType;, +++ b/core/src/main/java/org/elasticsearch/index/translog/Checkpoint.java, +++ b/core/src/main/java/org/elasticsearch/index/translog/Translog.java, +    private ArrayList<ImmutableTranslogReader> recoverFromFiles(TranslogGeneration translogGeneration, Checkpoint checkpoint) throws IOException {, +, +            Files.copy(location.resolve(CHECKPOINT_FILE_NAME), commitCheckpoint);, +            IOUtils.fsync(commitCheckpoint, false);, +++ b/core/src/test/java/org/elasticsearch/index/mapper/internal/TypeFieldMapperTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper.internal;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.mapper.DocumentMapper;]