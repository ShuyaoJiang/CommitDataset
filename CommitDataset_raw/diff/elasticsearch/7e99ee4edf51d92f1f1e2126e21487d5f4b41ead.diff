[+++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/PipelineExecutionService.java, +import org.elasticsearch.action.ActionRequest;, +import java.util.function.Consumer;, +    public void execute(IndexRequest request, String pipelineId, Consumer<Throwable> failureHandler, Consumer<Boolean> completionHandler) {, +        Pipeline pipeline = getPipeline(pipelineId);, +        threadPool.executor(THREAD_POOL_NAME).execute(() -> {, +            try {, +                innerExecute(request, pipeline);, +                completionHandler.accept(true);, +            } catch (Exception e) {, +                failureHandler.accept(e);, +            }, +        });, +    public void execute(Iterable<ActionRequest> indexRequests, String pipelineId,, +                        Consumer<Throwable> itemFailureHandler, Consumer<Boolean> completionHandler) {, +        Pipeline pipeline = getPipeline(pipelineId);, +            Throwable lastThrowable = null;, +            for (ActionRequest actionRequest : indexRequests) {, +                if ((actionRequest instanceof IndexRequest) == false) {, +                    continue;, +                }, +, +                IndexRequest indexRequest = (IndexRequest) actionRequest;, +                try {, +                    innerExecute(indexRequest, pipeline);, +                } catch (Throwable e) {, +                    lastThrowable = e;, +                    if (itemFailureHandler != null) {, +                        itemFailureHandler.accept(e);, +                    }, +                }, +            }, +            completionHandler.accept(lastThrowable == null);, +        });, +    }, +, +    private void innerExecute(IndexRequest indexRequest, Pipeline pipeline) throws Exception {, +, +, +    private Pipeline getPipeline(String pipelineId) {, +        Pipeline pipeline = store.get(pipelineId);, +        if (pipeline == null) {, +            throw new IllegalArgumentException("pipeline with id [" + pipelineId + "] does not exist");, +        }, +        return pipeline;, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/PipelineExecutionService.java, +import org.elasticsearch.action.ActionRequest;, +import java.util.function.Consumer;, +    public void execute(IndexRequest request, String pipelineId, Consumer<Throwable> failureHandler, Consumer<Boolean> completionHandler) {, +        Pipeline pipeline = getPipeline(pipelineId);, +        threadPool.executor(THREAD_POOL_NAME).execute(() -> {, +            try {, +                innerExecute(request, pipeline);, +                completionHandler.accept(true);, +            } catch (Exception e) {, +                failureHandler.accept(e);, +            }, +        });, +    public void execute(Iterable<ActionRequest> indexRequests, String pipelineId,, +                        Consumer<Throwable> itemFailureHandler, Consumer<Boolean> completionHandler) {, +        Pipeline pipeline = getPipeline(pipelineId);, +            Throwable lastThrowable = null;, +            for (ActionRequest actionRequest : indexRequests) {, +                if ((actionRequest instanceof IndexRequest) == false) {, +                    continue;, +                }, +, +                IndexRequest indexRequest = (IndexRequest) actionRequest;, +                try {, +                    innerExecute(indexRequest, pipeline);, +                } catch (Throwable e) {, +                    lastThrowable = e;, +                    if (itemFailureHandler != null) {, +                        itemFailureHandler.accept(e);, +                    }, +                }, +            }, +            completionHandler.accept(lastThrowable == null);, +        });, +    }, +, +    private void innerExecute(IndexRequest indexRequest, Pipeline pipeline) throws Exception {, +, +, +    private Pipeline getPipeline(String pipelineId) {, +        Pipeline pipeline = store.get(pipelineId);, +        if (pipeline == null) {, +            throw new IllegalArgumentException("pipeline with id [" + pipelineId + "] does not exist");, +        }, +        return pipeline;, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/transport/IngestActionFilter.java, +            processBulkIndexRequest(bulkRequest, pipelineId, action, chain, actionListener);, +        executionService.execute(indexRequest, pipelineId, t -> {, +            logger.error("failed to execute pipeline [{}]", t, pipelineId);, +            listener.onFailure(t);, +        }, success -> {, +    void processBulkIndexRequest(BulkRequest original, String pipelineId, String action, ActionFilterChain chain, ActionListener<BulkResponse> listener) {, +        BulkRequestModifier bulkRequestModifier = new BulkRequestModifier(original);, +        executionService.execute(() -> bulkRequestModifier, pipelineId, e -> {, +            logger.debug("failed to execute pipeline [{}]", e, pipelineId);]