[+++ b/src/main/java/org/elasticsearch/shield/transport/SecuredTransportModule.java, +import org.elasticsearch.common.inject.multibindings.MapBinder;, +        MapBinder<String, ServerTransportFilter> mapBinder = MapBinder.newMapBinder(binder(), String.class, ServerTransportFilter.class);, +        mapBinder.addBinding(ServerTransportFilters.SERVER_TRANSPORT_FILTER_TRANSPORT_CLIENT).to(ServerTransportFilter.TransportClient.class);, +        } else {, +            mapBinder.addBinding(ServerTransportFilters.SERVER_TRANSPORT_FILTER_AUTHENTICATE_REJECT_INTERNAL_ACTIONS).to(ServerTransportFilter.RejectInternalActionsFilter.class);, +            mapBinder.addBinding(ServerTransportFilters.SERVER_TRANSPORT_FILTER_AUTHENTICATE_ONLY).to(ServerTransportFilter.Node.class);, +, +, +        bind(ServerTransportFilters.class).asEagerSingleton();, +    }, +++ b/src/main/java/org/elasticsearch/shield/transport/SecuredTransportModule.java, +import org.elasticsearch.common.inject.multibindings.MapBinder;, +        MapBinder<String, ServerTransportFilter> mapBinder = MapBinder.newMapBinder(binder(), String.class, ServerTransportFilter.class);, +        mapBinder.addBinding(ServerTransportFilters.SERVER_TRANSPORT_FILTER_TRANSPORT_CLIENT).to(ServerTransportFilter.TransportClient.class);, +        } else {, +            mapBinder.addBinding(ServerTransportFilters.SERVER_TRANSPORT_FILTER_AUTHENTICATE_REJECT_INTERNAL_ACTIONS).to(ServerTransportFilter.RejectInternalActionsFilter.class);, +            mapBinder.addBinding(ServerTransportFilters.SERVER_TRANSPORT_FILTER_AUTHENTICATE_ONLY).to(ServerTransportFilter.Node.class);, +, +, +        bind(ServerTransportFilters.class).asEagerSingleton();, +    }, +++ b/src/main/java/org/elasticsearch/shield/transport/SecuredTransportService.java, +import org.elasticsearch.shield.transport.netty.NettySecuredTransport;, +import org.elasticsearch.shield.transport.netty.SecuredMessageChannelHandler;, +    private final ServerTransportFilters serverTransportFilters;, +    public SecuredTransportService(Settings settings, Transport transport, ThreadPool threadPool, ClientTransportFilter clientFilter, ServerTransportFilters serverTransportFilters) {, +        this.serverTransportFilters = serverTransportFilters;, +        // Only try to access the profile, if we use netty and SSL, +        // otherwise use the regular secured request handler (this still allows for LocalTransport), +        if (transport instanceof NettySecuredTransport) {, +            super.registerHandler(action, new ProfileSecuredRequestHandler(action, handler, serverTransportFilters));, +        } else {, +            super.registerHandler(action, new SecuredRequestHandler(action, handler, serverTransportFilters));, +        }, +    static abstract class AbstractSecuredRequestHandler implements TransportRequestHandler {, +        protected TransportRequestHandler handler;, +        public AbstractSecuredRequestHandler(TransportRequestHandler handler) {, +, +    static class SecuredRequestHandler extends AbstractSecuredRequestHandler {, +, +        protected final String action;, +        protected final ServerTransportFilter transportFilter;, +, +        SecuredRequestHandler(String action, TransportRequestHandler handler, ServerTransportFilters serverTransportFilters) {, +            super(handler);, +            this.action = action;, +            this.transportFilter = serverTransportFilters.getTransportFilterForProfile("default");, +        }, +, +        @Override @SuppressWarnings("unchecked"), +        public void messageReceived(TransportRequest request, TransportChannel channel) throws Exception {, +            try {, +                transportFilter.inbound(action, request);, +            } catch (Throwable t) {, +                channel.sendResponse(t);, +                return;, +            }, +            handler.messageReceived(request, channel);, +        }, +    }, +, +    static class ProfileSecuredRequestHandler extends AbstractSecuredRequestHandler {, +, +        protected final String action;, +        protected final ServerTransportFilters serverTransportFilters;, +, +        ProfileSecuredRequestHandler(String action, TransportRequestHandler handler, ServerTransportFilters serverTransportFilters) {, +            super(handler);, +            this.action = action;, +            this.serverTransportFilters = serverTransportFilters;, +        }, +, +        @Override @SuppressWarnings("unchecked"), +        public void messageReceived(TransportRequest request, TransportChannel channel) throws Exception {, +            try {, +                SecuredMessageChannelHandler.VisibleNettyTransportChannel nettyTransportChannel = (SecuredMessageChannelHandler.VisibleNettyTransportChannel) channel;, +                String profile = nettyTransportChannel.getProfile();, +                ServerTransportFilter filter = serverTransportFilters.getTransportFilterForProfile(profile);, +                filter.inbound(action, request);, +            } catch (Throwable t) {, +                channel.sendResponse(t);, +                return;, +            }, +            handler.messageReceived(request, channel);, +        }, +    }, +++ b/src/main/java/org/elasticsearch/shield/transport/SecuredTransportModule.java, +import org.elasticsearch.common.inject.multibindings.MapBinder;, +        MapBinder<String, ServerTransportFilter> mapBinder = MapBinder.newMapBinder(binder(), String.class, ServerTransportFilter.class);, +        mapBinder.addBinding(ServerTransportFilters.SERVER_TRANSPORT_FILTER_TRANSPORT_CLIENT).to(ServerTransportFilter.TransportClient.class);, +        } else {, +            mapBinder.addBinding(ServerTransportFilters.SERVER_TRANSPORT_FILTER_AUTHENTICATE_REJECT_INTERNAL_ACTIONS).to(ServerTransportFilter.RejectInternalActionsFilter.class);, +            mapBinder.addBinding(ServerTransportFilters.SERVER_TRANSPORT_FILTER_AUTHENTICATE_ONLY).to(ServerTransportFilter.Node.class);, +, +, +        bind(ServerTransportFilters.class).asEagerSingleton();, +    }, +++ b/src/main/java/org/elasticsearch/shield/transport/SecuredTransportService.java, +import org.elasticsearch.shield.transport.netty.NettySecuredTransport;]