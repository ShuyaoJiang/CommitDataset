[+++ b/x-pack/plugin/sql/qa/src/main/resources/agg.sql-spec, +countDistinctAndCountSimpleWithAlias, +SELECT COUNT(*) cnt, COUNT(DISTINCT first_name) as names, gender FROM test_emp GROUP BY gender ORDER BY gender;, +aggCountDistinctWithAliasAndGroupBy, +SELECT COUNT(*) cnt, COUNT(DISTINCT first_name) as names, gender FROM test_emp GROUP BY gender ORDER BY gender;, +aggCountDistinctAndHavingBetweenWithLimit, +SELECT gender g, COUNT(DISTINCT first_name) c FROM "test_emp" GROUP BY g HAVING c BETWEEN 40 AND 50 ORDER BY gender LIMIT 1;, +aggDistinctCountWithAliasAndHaving, +SELECT COUNT(*) c, COUNT(DISTINCT first_name) AS names, gender FROM test_emp GROUP BY gender HAVING names > 40 ORDER BY gender;, +aggDistinctCountWithFunctionWildcardAndHaving, +SELECT COUNT(*) c, COUNT(DISTINCT first_name) AS names, gender FROM test_emp GROUP BY gender HAVING names < 50 AND c < 50 ORDER BY gender;, +aggDistinctCountWithFunctionWildcardAndFunctionConstantAndHaving, +SELECT COUNT(*) c, COUNT(DISTINCT first_name) AS names, COUNT(123) AS c123, gender FROM test_emp GROUP BY gender HAVING names < 50 AND c < 50 AND c123 < 50 ORDER BY gender;, +aggCountOnDistinctColumnAndHavingOnAliasAndFunctionConstantMultiGroupBy, +SELECT gender g, languages l, COUNT(DISTINCT last_name) c FROM "test_emp" GROUP BY g, l HAVING c > 5 AND COUNT(1) < 70 ORDER BY gender, languages;, +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.sql-spec, +countDistinctAndCountSimpleWithAlias, +SELECT COUNT(*) cnt, COUNT(DISTINCT first_name) as names, gender FROM test_emp GROUP BY gender ORDER BY gender;, +aggCountDistinctWithAliasAndGroupBy, +SELECT COUNT(*) cnt, COUNT(DISTINCT first_name) as names, gender FROM test_emp GROUP BY gender ORDER BY gender;, +aggCountDistinctAndHavingBetweenWithLimit, +SELECT gender g, COUNT(DISTINCT first_name) c FROM "test_emp" GROUP BY g HAVING c BETWEEN 40 AND 50 ORDER BY gender LIMIT 1;, +aggDistinctCountWithAliasAndHaving, +SELECT COUNT(*) c, COUNT(DISTINCT first_name) AS names, gender FROM test_emp GROUP BY gender HAVING names > 40 ORDER BY gender;, +aggDistinctCountWithFunctionWildcardAndHaving, +SELECT COUNT(*) c, COUNT(DISTINCT first_name) AS names, gender FROM test_emp GROUP BY gender HAVING names < 50 AND c < 50 ORDER BY gender;, +aggDistinctCountWithFunctionWildcardAndFunctionConstantAndHaving, +SELECT COUNT(*) c, COUNT(DISTINCT first_name) AS names, COUNT(123) AS c123, gender FROM test_emp GROUP BY gender HAVING names < 50 AND c < 50 AND c123 < 50 ORDER BY gender;, +aggCountOnDistinctColumnAndHavingOnAliasAndFunctionConstantMultiGroupBy, +SELECT gender g, languages l, COUNT(DISTINCT last_name) c FROM "test_emp" GROUP BY g, l HAVING c > 5 AND COUNT(1) < 70 ORDER BY gender, languages;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Count.java, +        if (!distinct()) {, +        return super.toAttribute();, +    }, +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.sql-spec, +countDistinctAndCountSimpleWithAlias, +SELECT COUNT(*) cnt, COUNT(DISTINCT first_name) as names, gender FROM test_emp GROUP BY gender ORDER BY gender;, +aggCountDistinctWithAliasAndGroupBy, +SELECT COUNT(*) cnt, COUNT(DISTINCT first_name) as names, gender FROM test_emp GROUP BY gender ORDER BY gender;, +aggCountDistinctAndHavingBetweenWithLimit, +SELECT gender g, COUNT(DISTINCT first_name) c FROM "test_emp" GROUP BY g HAVING c BETWEEN 40 AND 50 ORDER BY gender LIMIT 1;, +aggDistinctCountWithAliasAndHaving, +SELECT COUNT(*) c, COUNT(DISTINCT first_name) AS names, gender FROM test_emp GROUP BY gender HAVING names > 40 ORDER BY gender;, +aggDistinctCountWithFunctionWildcardAndHaving, +SELECT COUNT(*) c, COUNT(DISTINCT first_name) AS names, gender FROM test_emp GROUP BY gender HAVING names < 50 AND c < 50 ORDER BY gender;, +aggDistinctCountWithFunctionWildcardAndFunctionConstantAndHaving, +SELECT COUNT(*) c, COUNT(DISTINCT first_name) AS names, COUNT(123) AS c123, gender FROM test_emp GROUP BY gender HAVING names < 50 AND c < 50 AND c123 < 50 ORDER BY gender;, +aggCountOnDistinctColumnAndHavingOnAliasAndFunctionConstantMultiGroupBy, +SELECT gender g, languages l, COUNT(DISTINCT last_name) c FROM "test_emp" GROUP BY g, l HAVING c > 5 AND COUNT(1) < 70 ORDER BY gender, languages;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Count.java, +        if (!distinct()) {, +        return super.toAttribute();, +    }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +            FieldAttribute field = (FieldAttribute) arg;, +            // COUNT(DISTINCT) uses cardinality aggregation which works on exact values (not changed by analyzers or normalizers), +            if (af instanceof Count && ((Count) af).distinct()) {, +                // use the `keyword` version of the field, if there is one, +                return field.isInexact() ? field.exactAttribute().name() : field.name();, +            }, +            return field.name();, +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.sql-spec, +countDistinctAndCountSimpleWithAlias, +SELECT COUNT(*) cnt, COUNT(DISTINCT first_name) as names, gender FROM test_emp GROUP BY gender ORDER BY gender;, +aggCountDistinctWithAliasAndGroupBy, +SELECT COUNT(*) cnt, COUNT(DISTINCT first_name) as names, gender FROM test_emp GROUP BY gender ORDER BY gender;, +aggCountDistinctAndHavingBetweenWithLimit, +SELECT gender g, COUNT(DISTINCT first_name) c FROM "test_emp" GROUP BY g HAVING c BETWEEN 40 AND 50 ORDER BY gender LIMIT 1;, +aggDistinctCountWithAliasAndHaving, +SELECT COUNT(*) c, COUNT(DISTINCT first_name) AS names, gender FROM test_emp GROUP BY gender HAVING names > 40 ORDER BY gender;, +aggDistinctCountWithFunctionWildcardAndHaving, +SELECT COUNT(*) c, COUNT(DISTINCT first_name) AS names, gender FROM test_emp GROUP BY gender HAVING names < 50 AND c < 50 ORDER BY gender;, +aggDistinctCountWithFunctionWildcardAndFunctionConstantAndHaving, +SELECT COUNT(*) c, COUNT(DISTINCT first_name) AS names, COUNT(123) AS c123, gender FROM test_emp GROUP BY gender HAVING names < 50 AND c < 50 AND c123 < 50 ORDER BY gender;, +aggCountOnDistinctColumnAndHavingOnAliasAndFunctionConstantMultiGroupBy, +SELECT gender g, languages l, COUNT(DISTINCT last_name) c FROM "test_emp" GROUP BY g, l HAVING c > 5 AND COUNT(1) < 70 ORDER BY gender, languages;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Count.java, +        if (!distinct()) {, +        return super.toAttribute();, +    }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +            FieldAttribute field = (FieldAttribute) arg;, +            // COUNT(DISTINCT) uses cardinality aggregation which works on exact values (not changed by analyzers or normalizers), +            if (af instanceof Count && ((Count) af).distinct()) {, +                // use the `keyword` version of the field, if there is one, +                return field.isInexact() ? field.exactAttribute().name() : field.name();, +            }, +            return field.name();, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.CardinalityAggregationBuilder;, +import org.elasticsearch.xpack.sql.optimizer.Optimizer;, +import org.elasticsearch.xpack.sql.plan.physical.EsQueryExec;, +import org.elasticsearch.xpack.sql.plan.physical.PhysicalPlan;, +import java.util.Collection;, +    private static Optimizer optimizer;, +    private static Planner planner;, +        optimizer = new Optimizer();, +        planner = new Planner();, +    private PhysicalPlan optimizeAndPlan(String sql) {]