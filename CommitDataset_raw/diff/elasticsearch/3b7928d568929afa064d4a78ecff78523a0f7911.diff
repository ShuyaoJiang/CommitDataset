[+++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_field_names` configuration is limited to disabling the field., +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_field_names` configuration is limited to disabling the field., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapper.java, +        @Deprecated, +            if (parserContext.indexVersionCreated().before(Version.V_2_0_0)) {, +            }, +        if (writePre2xSettings && (includeDefaults || fieldType().equals(Defaults.FIELD_TYPE) == false)) {, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_field_names` configuration is limited to disabling the field., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapper.java, +        @Deprecated, +            if (parserContext.indexVersionCreated().before(Version.V_2_0_0)) {, +            }, +        if (writePre2xSettings && (includeDefaults || fieldType().equals(Defaults.FIELD_TYPE) == false)) {, +++ b/src/main/java/org/elasticsearch/index/query/ExistsFilterParser.java, +import org.elasticsearch.index.mapper.FieldMapper;, +        final FieldMappers fieldNamesMappers = parseContext.mapperService().indexName(FieldNamesFieldMapper.NAME);, +        final FieldNamesFieldMapper fieldNamesMapper = (FieldNamesFieldMapper)fieldNamesMappers.mapper();, +            if (fieldNamesMapper!= null && fieldNamesMapper.enabled()) {, +                filter = fieldNamesMapper.termFilter(f, parseContext);, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_field_names` configuration is limited to disabling the field., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapper.java, +        @Deprecated, +            if (parserContext.indexVersionCreated().before(Version.V_2_0_0)) {, +            }, +        if (writePre2xSettings && (includeDefaults || fieldType().equals(Defaults.FIELD_TYPE) == false)) {, +++ b/src/main/java/org/elasticsearch/index/query/ExistsFilterParser.java, +import org.elasticsearch.index.mapper.FieldMapper;, +        final FieldMappers fieldNamesMappers = parseContext.mapperService().indexName(FieldNamesFieldMapper.NAME);, +        final FieldNamesFieldMapper fieldNamesMapper = (FieldNamesFieldMapper)fieldNamesMappers.mapper();, +            if (fieldNamesMapper!= null && fieldNamesMapper.enabled()) {, +                filter = fieldNamesMapper.termFilter(f, parseContext);, +++ b/src/main/java/org/elasticsearch/index/query/MissingFilterParser.java, +        final FieldMappers fieldNamesMappers = parseContext.mapperService().indexName(FieldNamesFieldMapper.NAME);, +        final FieldNamesFieldMapper fieldNamesMapper = (FieldNamesFieldMapper)fieldNamesMappers.mapper();, +                if (fieldNamesMapper != null && fieldNamesMapper.enabled()) {, +                    filter = fieldNamesMapper.termFilter(f, parseContext);, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_field_names` configuration is limited to disabling the field., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapper.java, +        @Deprecated, +            if (parserContext.indexVersionCreated().before(Version.V_2_0_0)) {, +            }, +        if (writePre2xSettings && (includeDefaults || fieldType().equals(Defaults.FIELD_TYPE) == false)) {, +++ b/src/main/java/org/elasticsearch/index/query/ExistsFilterParser.java, +import org.elasticsearch.index.mapper.FieldMapper;, +        final FieldMappers fieldNamesMappers = parseContext.mapperService().indexName(FieldNamesFieldMapper.NAME);, +        final FieldNamesFieldMapper fieldNamesMapper = (FieldNamesFieldMapper)fieldNamesMappers.mapper();, +            if (fieldNamesMapper!= null && fieldNamesMapper.enabled()) {, +                filter = fieldNamesMapper.termFilter(f, parseContext);, +++ b/src/main/java/org/elasticsearch/index/query/MissingFilterParser.java, +        final FieldMappers fieldNamesMappers = parseContext.mapperService().indexName(FieldNamesFieldMapper.NAME);, +        final FieldNamesFieldMapper fieldNamesMapper = (FieldNamesFieldMapper)fieldNamesMappers.mapper();, +                if (fieldNamesMapper != null && fieldNamesMapper.enabled()) {, +                    filter = fieldNamesMapper.termFilter(f, parseContext);, +++ b/src/test/java/org/elasticsearch/get/GetActionTests.java, +        String[] fieldsList = {"_all"};, +        String[] alwaysNotStoredFieldsList = {"_field_names"};, +        assertGetFieldsNull(indexOrAlias(), "doc", "1", alwaysNotStoredFieldsList);, +        assertGetFieldsNull(indexOrAlias(), "doc", "1", alwaysNotStoredFieldsList);, +        assertGetFieldsNull(indexOrAlias(), "doc", "1", alwaysNotStoredFieldsList);, +                "      \"_all\" : {\"enabled\" : true, \"store\":\"" + storedString + "\" }" +, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* `_field_names` configuration is limited to disabling the field., +++ b/src/main/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapper.java, +        @Deprecated, +            if (parserContext.indexVersionCreated().before(Version.V_2_0_0)) {, +            }, +        if (writePre2xSettings && (includeDefaults || fieldType().equals(Defaults.FIELD_TYPE) == false)) {, +++ b/src/main/java/org/elasticsearch/index/query/ExistsFilterParser.java, +import org.elasticsearch.index.mapper.FieldMapper;, +        final FieldMappers fieldNamesMappers = parseContext.mapperService().indexName(FieldNamesFieldMapper.NAME);, +        final FieldNamesFieldMapper fieldNamesMapper = (FieldNamesFieldMapper)fieldNamesMappers.mapper();, +            if (fieldNamesMapper!= null && fieldNamesMapper.enabled()) {, +                filter = fieldNamesMapper.termFilter(f, parseContext);, +++ b/src/main/java/org/elasticsearch/index/query/MissingFilterParser.java, +        final FieldMappers fieldNamesMappers = parseContext.mapperService().indexName(FieldNamesFieldMapper.NAME);, +        final FieldNamesFieldMapper fieldNamesMapper = (FieldNamesFieldMapper)fieldNamesMappers.mapper();, +                if (fieldNamesMapper != null && fieldNamesMapper.enabled()) {, +                    filter = fieldNamesMapper.termFilter(f, parseContext);, +++ b/src/test/java/org/elasticsearch/get/GetActionTests.java, +        String[] fieldsList = {"_all"};, +        String[] alwaysNotStoredFieldsList = {"_field_names"};, +        assertGetFieldsNull(indexOrAlias(), "doc", "1", alwaysNotStoredFieldsList);, +        assertGetFieldsNull(indexOrAlias(), "doc", "1", alwaysNotStoredFieldsList);, +        assertGetFieldsNull(indexOrAlias(), "doc", "1", alwaysNotStoredFieldsList);, +                "      \"_all\" : {\"enabled\" : true, \"store\":\"" + storedString + "\" }" +, +++ b/src/test/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapperTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        DocumentMapper docMapper = createIndex("test", indexSettings).mapperService().documentMapperParser().parse(mapping);, +    public void testFieldTypeSettingsBackcompat() throws Exception {, +        Settings indexSettings = ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build();, +        DocumentMapper docMapper = createIndex("test", indexSettings).mapperService().documentMapperParser().parse(mapping);]