[+++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +     * and then replacing all property placeholders. This method will not work with settings that have <code>${prompt.text}</code>, +     * or <code>${prompt.secret}</code> as their value unless they have been resolved previously., +     * settings with a value of <code>${prompt.text}</code> or <code>${prompt.secret}</code> will result in a prompt for, +     * the setting to the user., +        // check if name is set in settings, if not look for system property and set it, +, +        Settings settings = replacePromptPlaceholders(settingsBuilder.build(), terminal);, +        // all settings placeholders have been resolved. resolve the value for the name setting by checking for name,, +        // then looking for node.name, and finally generate one if needed, +        if (settings.get("name") == null) {, +            final String name = settings.get("node.name");, +            if (name == null || name.isEmpty()) {, +                settings = settingsBuilder().put(settings), +                        .put("name", Names.randomNodeName(environment.resolveConfig("names.txt"))), +                        .build();, +            } else {, +                settings = settingsBuilder().put(settings), +                        .put("name", name), +                        .build();, +            }, +        }, +, +        environment = new Environment(settings);, +        settingsBuilder = settingsBuilder().put(settings);, +        settings = settingsBuilder.build();, +        return new Tuple<>(settings, environment);, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +     * and then replacing all property placeholders. This method will not work with settings that have <code>${prompt.text}</code>, +     * or <code>${prompt.secret}</code> as their value unless they have been resolved previously., +     * settings with a value of <code>${prompt.text}</code> or <code>${prompt.secret}</code> will result in a prompt for, +     * the setting to the user., +        // check if name is set in settings, if not look for system property and set it, +, +        Settings settings = replacePromptPlaceholders(settingsBuilder.build(), terminal);, +        // all settings placeholders have been resolved. resolve the value for the name setting by checking for name,, +        // then looking for node.name, and finally generate one if needed, +        if (settings.get("name") == null) {, +            final String name = settings.get("node.name");, +            if (name == null || name.isEmpty()) {, +                settings = settingsBuilder().put(settings), +                        .put("name", Names.randomNodeName(environment.resolveConfig("names.txt"))), +                        .build();, +            } else {, +                settings = settingsBuilder().put(settings), +                        .put("name", name), +                        .build();, +            }, +        }, +, +        environment = new Environment(settings);, +        settingsBuilder = settingsBuilder().put(settings);, +        settings = settingsBuilder.build();, +        return new Tuple<>(settings, environment);, +++ b/core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java, +import java.util.concurrent.atomic.AtomicInteger;, +import static org.hamcrest.Matchers.*;, +        System.setProperty("name", "sys-prop-name");, +        System.clearProperty("name");, +, +    @Test, +    public void testNameSettingsPreference() {, +        // Test system property overrides node.name, +        Settings settings = settingsBuilder(), +                .put("node.name", "node-name"), +                .put("path.home", createTempDir().toString()), +                .build();, +        Tuple<Settings, Environment> tuple = InternalSettingsPreparer.prepareSettings(settings, true);, +        assertThat(tuple.v1().get("name"), equalTo("sys-prop-name"));, +, +        // test name in settings overrides sys prop and node.name, +        settings = settingsBuilder(), +                .put("name", "name-in-settings"), +                .put("node.name", "node-name"), +                .put("path.home", createTempDir().toString()), +                .build();, +        tuple = InternalSettingsPreparer.prepareSettings(settings, true);, +        assertThat(tuple.v1().get("name"), equalTo("name-in-settings"));, +, +        // test only node.name in settings, +        System.clearProperty("name");, +        settings = settingsBuilder(), +                .put("node.name", "node-name"), +                .put("path.home", createTempDir().toString()), +                .build();, +        tuple = InternalSettingsPreparer.prepareSettings(settings, true);, +        assertThat(tuple.v1().get("name"), equalTo("node-name"));, +, +        // test no name at all results in name being set, +        settings = settingsBuilder(), +                .put("path.home", createTempDir().toString()), +                .build();, +        tuple = InternalSettingsPreparer.prepareSettings(settings, true);, +        assertThat(tuple.v1().get("name"), not("name-in-settings"));, +        assertThat(tuple.v1().get("name"), not("sys-prop-name"));, +        assertThat(tuple.v1().get("name"), not("node-name"));, +        assertThat(tuple.v1().get("name"), notNullValue());, +    }, +, +    @Test]