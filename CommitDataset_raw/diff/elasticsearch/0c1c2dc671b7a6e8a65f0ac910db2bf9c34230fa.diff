[+++ b/src/main/java/org/elasticsearch/index/codec/CodecService.java, +    public static final String INDEX_CODEC_BLOOM_LOAD = "index.codec.bloom.load";, +    public static final boolean INDEX_CODEC_BLOOM_LOAD_DEFAULT = true;, +, +    private volatile boolean loadBloomFilter = true;, +, +        this.loadBloomFilter = indexSettings.getAsBoolean(INDEX_CODEC_BLOOM_LOAD, INDEX_CODEC_BLOOM_LOAD_DEFAULT);, +    public boolean isLoadBloomFilter() {, +        return this.loadBloomFilter;, +    }, +, +    public void setLoadBloomFilter(boolean loadBloomFilter) {, +        this.loadBloomFilter = loadBloomFilter;, +    }, +++ b/src/main/java/org/elasticsearch/index/codec/CodecService.java, +    public static final String INDEX_CODEC_BLOOM_LOAD = "index.codec.bloom.load";, +    public static final boolean INDEX_CODEC_BLOOM_LOAD_DEFAULT = true;, +, +    private volatile boolean loadBloomFilter = true;, +, +        this.loadBloomFilter = indexSettings.getAsBoolean(INDEX_CODEC_BLOOM_LOAD, INDEX_CODEC_BLOOM_LOAD_DEFAULT);, +    public boolean isLoadBloomFilter() {, +        return this.loadBloomFilter;, +    }, +, +    public void setLoadBloomFilter(boolean loadBloomFilter) {, +        this.loadBloomFilter = loadBloomFilter;, +    }, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +import org.elasticsearch.index.store.DirectoryUtils;, +import org.elasticsearch.index.store.Store;, +, +                boolean load = true;, +                Store.StoreDirectory storeDir = DirectoryUtils.getStoreDirectory(state.directory);, +                if (storeDir != null && storeDir.codecService() != null) {, +                    load = storeDir.codecService().isLoadBloomFilter();, +                }, +, +                if (load && state.context.context != IOContext.Context.MERGE) {, +++ b/src/main/java/org/elasticsearch/index/codec/CodecService.java, +    public static final String INDEX_CODEC_BLOOM_LOAD = "index.codec.bloom.load";, +    public static final boolean INDEX_CODEC_BLOOM_LOAD_DEFAULT = true;, +, +    private volatile boolean loadBloomFilter = true;, +, +        this.loadBloomFilter = indexSettings.getAsBoolean(INDEX_CODEC_BLOOM_LOAD, INDEX_CODEC_BLOOM_LOAD_DEFAULT);, +    public boolean isLoadBloomFilter() {, +        return this.loadBloomFilter;, +    }, +, +    public void setLoadBloomFilter(boolean loadBloomFilter) {, +        this.loadBloomFilter = loadBloomFilter;, +    }, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +import org.elasticsearch.index.store.DirectoryUtils;, +import org.elasticsearch.index.store.Store;, +, +                boolean load = true;, +                Store.StoreDirectory storeDir = DirectoryUtils.getStoreDirectory(state.directory);, +                if (storeDir != null && storeDir.codecService() != null) {, +                    load = storeDir.codecService().isLoadBloomFilter();, +                }, +, +                if (load && state.context.context != IOContext.Context.MERGE) {, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.Version;, +    static final boolean allowRamBytesUsed;, +, +    static {, +        assert Version.CURRENT.luceneVersion == org.apache.lucene.util.Version.LUCENE_46 :, +                "when upgrading to a new lucene version, check if ramBytes is fixed, see https://issues.apache.org/jira/browse/LUCENE-5373";, +        boolean xAllowRamBytesUsed = false;, +        assert xAllowRamBytesUsed = true;, +        allowRamBytesUsed = xAllowRamBytesUsed;, +    }, +, +    private long getReaderRamBytesUsed(AtomicReaderContext reader) {, +        assert reader.reader() instanceof SegmentReader;, +        return allowRamBytesUsed ? ((SegmentReader) reader.reader()).ramBytesUsed() : 0;, +    }, +, +                    stats.add(1, getReaderRamBytesUsed(reader));, +                    segment.memoryInBytes = getReaderRamBytesUsed(reader);, +            final boolean codecBloomLoad = settings.getAsBoolean(CodecService.INDEX_CODEC_BLOOM_LOAD, codecService.isLoadBloomFilter());, +            if (indexConcurrency != RobinEngine.this.indexConcurrency ||, +                    !codecName.equals(RobinEngine.this.codecName) ||, +                    failOnMergeFailure != RobinEngine.this.failOnMergeFailure ||, +                    codecBloomLoad != codecService.isLoadBloomFilter()) {, +                    if (codecBloomLoad != codecService.isLoadBloomFilter()) {, +                        logger.info("updating {} from [{}] to [{}]", CodecService.INDEX_CODEC_BLOOM_LOAD, codecService.isLoadBloomFilter(), codecBloomLoad);, +                        codecService.setLoadBloomFilter(codecBloomLoad);, +                        // we need to flush in this case, to load/unload the bloom filters, +                        requiresFlushing = true;, +                    }, +++ b/src/main/java/org/elasticsearch/index/codec/CodecService.java, +    public static final String INDEX_CODEC_BLOOM_LOAD = "index.codec.bloom.load";, +    public static final boolean INDEX_CODEC_BLOOM_LOAD_DEFAULT = true;, +, +    private volatile boolean loadBloomFilter = true;, +]