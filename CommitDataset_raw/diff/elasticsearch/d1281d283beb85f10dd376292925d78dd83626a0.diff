[+++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import static org.elasticsearch.cluster.node.DiscoveryNodeFilters.OpType.*;, +    private final DiscoveryNodeFilters requireFilters;, +        ImmutableMap<String, String> requireMap = settings.getByPrefix("index.routing.allocation.require.").getAsMap();, +        if (requireMap.isEmpty()) {, +            requireFilters = null;, +        } else {, +            requireFilters = DiscoveryNodeFilters.buildFromKeyValue(AND, requireMap);, +        }, +            includeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, includeMap);, +            excludeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, excludeMap);, +    public DiscoveryNodeFilters requireFilters() {, +        return requireFilters;, +    }, +, +    @Nullable, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import static org.elasticsearch.cluster.node.DiscoveryNodeFilters.OpType.*;, +    private final DiscoveryNodeFilters requireFilters;, +        ImmutableMap<String, String> requireMap = settings.getByPrefix("index.routing.allocation.require.").getAsMap();, +        if (requireMap.isEmpty()) {, +            requireFilters = null;, +        } else {, +            requireFilters = DiscoveryNodeFilters.buildFromKeyValue(AND, requireMap);, +        }, +            includeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, includeMap);, +            excludeFilters = DiscoveryNodeFilters.buildFromKeyValue(OR, excludeMap);, +    public DiscoveryNodeFilters requireFilters() {, +        return requireFilters;, +    }, +, +    @Nullable, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeFilters.java, +    public static enum OpType {, +        AND,, +        OR, +    };, +    public static DiscoveryNodeFilters buildFromSettings(OpType opType, String prefix, Settings settings) {, +        return buildFromKeyValue(opType, settings.getByPrefix(prefix).getAsMap());, +    public static DiscoveryNodeFilters buildFromKeyValue(OpType opType, Map<String, String> filters) {, +            return null;, +        return new DiscoveryNodeFilters(opType, bFilters);, +    private final OpType opType;, +, +    DiscoveryNodeFilters(OpType opType, Map<String, String[]> filters) {, +        this.opType = opType;, +                    if (opType == OpType.AND) {, +                    } else {, +                        continue;, +                    }, +                        if (opType == OpType.OR) {, +                    } else {, +                        if (opType == OpType.AND) {, +                        }, +                    }, +                }, +                    if (opType == OpType.AND) {, +                    } else {, +                        continue;, +                    }, +                        if (opType == OpType.OR) {, +                    } else {, +                        if (opType == OpType.AND) {, +                            return false;, +                        }, +                    }, +                        if (opType == OpType.OR) {, +                    } else {, +                        if (opType == OpType.AND) {, +                        }, +                    }, +                }, +                        if (opType == OpType.OR) {, +                    } else {, +                        if (opType == OpType.AND) {, +                        }, +                    }, +                }, +                        if (opType == OpType.OR) {, +                    } else {, +                        if (opType == OpType.AND) {, +                        }, +                    }, +                }, +                    if (opType == OpType.AND) {, +                    } else {, +                        continue;, +                    }, +                        if (opType == OpType.OR) {, +                    } else {, +                        if (opType == OpType.AND) {, +                }, +            }, +        }, +        if (opType == OpType.OR) {, +            return false;, +        } else {, +}, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import static org.elasticsearch.cluster.node.DiscoveryNodeFilters.OpType.*;]