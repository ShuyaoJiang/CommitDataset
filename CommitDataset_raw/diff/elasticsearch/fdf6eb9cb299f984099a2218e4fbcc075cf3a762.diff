[+++ b/.idea/libraries/joda_time.xml, +    <SOURCES>, +      <root url="jar://$PROJECT_DIR$/../../../opt/joda/1.6/joda-time-1.6-sources.jar!/" />, +    </SOURCES>, +++ b/.idea/libraries/joda_time.xml, +    <SOURCES>, +      <root url="jar://$PROJECT_DIR$/../../../opt/joda/1.6/joda-time-1.6-sources.jar!/" />, +    </SOURCES>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentObjectMapper.java, +                        Joda.forPattern("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd"), +++ b/.idea/libraries/joda_time.xml, +    <SOURCES>, +      <root url="jar://$PROJECT_DIR$/../../../opt/joda/1.6/joda-time-1.6-sources.jar!/" />, +    </SOURCES>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentObjectMapper.java, +                        Joda.forPattern("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd"), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/joda/Joda.java, +import org.elasticsearch.util.Strings;, +import org.joda.time.format.*;, +            String[] formats = Strings.split(input, "||");, +            if (formats == null || formats.length == 1) {, +            } else {, +                DateTimeParser[] parsers = new DateTimeParser[formats.length];, +                for (int i = 0; i < formats.length; i++) {, +                    parsers[i] = DateTimeFormat.forPattern(formats[i]).withZone(DateTimeZone.UTC).getParser();, +                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder(), +                        .append(DateTimeFormat.forPattern(formats[0]).withZone(DateTimeZone.UTC).getPrinter(), parsers);, +                formatter = builder.toFormatter();, +            }, +        }, +        return new FormatDateTimeFormatter(input, formatter.withZone(DateTimeZone.UTC));, +++ b/.idea/libraries/joda_time.xml, +    <SOURCES>, +      <root url="jar://$PROJECT_DIR$/../../../opt/joda/1.6/joda-time-1.6-sources.jar!/" />, +    </SOURCES>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentObjectMapper.java, +                        Joda.forPattern("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd"), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/joda/Joda.java, +import org.elasticsearch.util.Strings;, +import org.joda.time.format.*;, +            String[] formats = Strings.split(input, "||");, +            if (formats == null || formats.length == 1) {, +            } else {, +                DateTimeParser[] parsers = new DateTimeParser[formats.length];, +                for (int i = 0; i < formats.length; i++) {, +                    parsers[i] = DateTimeFormat.forPattern(formats[i]).withZone(DateTimeZone.UTC).getParser();, +                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder(), +                        .append(DateTimeFormat.forPattern(formats[0]).withZone(DateTimeZone.UTC).getPrinter(), parsers);, +                formatter = builder.toFormatter();, +            }, +        }, +        return new FormatDateTimeFormatter(input, formatter.withZone(DateTimeZone.UTC));, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/deps/joda/SimpleJodaTests.java, +import org.joda.time.format.DateTimeFormat;, +, +        millis = formatter.parseMillis("1970");, +        assertThat(millis, equalTo(0l));, +, +        try {, +            formatter.parseMillis("1970 kuku");, +            assert false : "formatting should fail";, +        } catch (IllegalArgumentException e) {, +            // all is well, +        }, +    }, +, +    @Test public void testIsoVsCustom() {, +        DateTimeFormatter formatter = ISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC);, +        long millis = formatter.parseMillis("1970-01-01T00:00:00");, +        assertThat(millis, equalTo(0l));, +, +        formatter = DateTimeFormat.forPattern("yyyy/MM/dd HH:mm:ss").withZone(DateTimeZone.UTC);, +        millis = formatter.parseMillis("1970/01/01 00:00:00");, +        assertThat(millis, equalTo(0l));, +, +        FormatDateTimeFormatter formatter2 = Joda.forPattern("yyyy/MM/dd HH:mm:ss");, +        millis = formatter2.parser().parseMillis("1970/01/01 00:00:00");, +        assertThat(millis, equalTo(0l));, +        long millis = formatter.parser().parseMillis("1970/01/01 00:00:00");, +, +        try {, +            millis = formatter.parser().parseMillis("1970/01/01");, +            assert false;, +        } catch (IllegalArgumentException e) {, +            // it really can't parse this one, +        }, +    }, +, +    @Test public void testMultipleFormats() {, +        FormatDateTimeFormatter formatter = Joda.forPattern("yyyy/MM/dd HH:mm:ss||yyyy/MM/dd");, +        long millis = formatter.parser().parseMillis("1970/01/01 00:00:00");, +        millis = formatter.parser().parseMillis("1970/01/01");, +//        System.out.println("" + millis);, +, +        System.out.println(formatter.printer().print(millis));]