[+++ b/src/main/java/org/elasticsearch/common/util/AbstractArray.java, +abstract class AbstractArray implements BigArray {, +    private final BigArrays bigArrays;, +    AbstractArray(BigArrays bigArrays, boolean clearOnResize) {, +        this.bigArrays = bigArrays;, +    public final void close() {, +        bigArrays.ramBytesUsed.addAndGet(-sizeInBytes());, +        doClose();, +    protected abstract void doClose();, +, +++ b/src/main/java/org/elasticsearch/common/util/AbstractArray.java, +abstract class AbstractArray implements BigArray {, +    private final BigArrays bigArrays;, +    AbstractArray(BigArrays bigArrays, boolean clearOnResize) {, +        this.bigArrays = bigArrays;, +    public final void close() {, +        bigArrays.ramBytesUsed.addAndGet(-sizeInBytes());, +        doClose();, +    protected abstract void doClose();, +, +++ b/src/main/java/org/elasticsearch/common/util/AbstractBigArray.java, +    private static final long EMPTY_SIZE = RamUsageEstimator.shallowSizeOfInstance(AbstractBigArray.class) + RamUsageEstimator.NUM_BYTES_OBJECT_REF + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;, +, +    protected AbstractBigArray(int pageSize, BigArrays bigArrays, boolean clearOnResize) {, +        super(bigArrays, clearOnResize);, +        this.recycler = bigArrays.recycler;, +    public abstract void resize(long newSize);, +, +    protected final void doClose() {, +++ b/src/main/java/org/elasticsearch/common/util/AbstractArray.java, +abstract class AbstractArray implements BigArray {, +    private final BigArrays bigArrays;, +    AbstractArray(BigArrays bigArrays, boolean clearOnResize) {, +        this.bigArrays = bigArrays;, +    public final void close() {, +        bigArrays.ramBytesUsed.addAndGet(-sizeInBytes());, +        doClose();, +    protected abstract void doClose();, +, +++ b/src/main/java/org/elasticsearch/common/util/AbstractBigArray.java, +    private static final long EMPTY_SIZE = RamUsageEstimator.shallowSizeOfInstance(AbstractBigArray.class) + RamUsageEstimator.NUM_BYTES_OBJECT_REF + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;, +, +    protected AbstractBigArray(int pageSize, BigArrays bigArrays, boolean clearOnResize) {, +        super(bigArrays, clearOnResize);, +        this.recycler = bigArrays.recycler;, +    public abstract void resize(long newSize);, +, +    protected final void doClose() {, +++ b/src/main/java/org/elasticsearch/common/util/BigArray.java, +    /**, +     * Return an estimated memory usage of this instance., +     */, +    public long sizeInBytes();, +, +++ b/src/main/java/org/elasticsearch/common/util/AbstractArray.java, +abstract class AbstractArray implements BigArray {, +    private final BigArrays bigArrays;, +    AbstractArray(BigArrays bigArrays, boolean clearOnResize) {, +        this.bigArrays = bigArrays;, +    public final void close() {, +        bigArrays.ramBytesUsed.addAndGet(-sizeInBytes());, +        doClose();, +    protected abstract void doClose();, +, +++ b/src/main/java/org/elasticsearch/common/util/AbstractBigArray.java, +    private static final long EMPTY_SIZE = RamUsageEstimator.shallowSizeOfInstance(AbstractBigArray.class) + RamUsageEstimator.NUM_BYTES_OBJECT_REF + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER;, +, +    protected AbstractBigArray(int pageSize, BigArrays bigArrays, boolean clearOnResize) {, +        super(bigArrays, clearOnResize);, +        this.recycler = bigArrays.recycler;, +    public abstract void resize(long newSize);, +, +    protected final void doClose() {, +++ b/src/main/java/org/elasticsearch/common/util/BigArray.java, +    /**, +     * Return an estimated memory usage of this instance., +     */, +    public long sizeInBytes();, +, +++ b/src/main/java/org/elasticsearch/common/util/BigArrays.java, +import org.elasticsearch.ElasticsearchIllegalStateException;, +import java.util.concurrent.atomic.AtomicLong;, +    // TODO: switch to a circuit breaker that is shared not only on big arrays level, and applies to other request level data structures, +    public static final String MAX_SIZE_IN_BYTES_SETTING = "requests.memory.breaker.limit";, +    public static final BigArrays NON_RECYCLING_INSTANCE = new BigArrays(ImmutableSettings.EMPTY, null, Long.MAX_VALUE);, +    private static abstract class AbstractArrayWrapper extends AbstractArray implements BigArray {, +, +        protected static final long SHALLOW_SIZE = RamUsageEstimator.shallowSizeOfInstance(ByteArrayWrapper.class);, +        AbstractArrayWrapper(BigArrays bigArrays, long size, Releasable releasable, boolean clearOnResize) {, +            super(bigArrays, clearOnResize);, +        protected final void doClose() {, +        ByteArrayWrapper(BigArrays bigArrays, byte[] array, long size, Recycler.V<byte[]> releasable, boolean clearOnResize) {, +            super(bigArrays, size, releasable, clearOnResize);, +        public long sizeInBytes() {, +            return SHALLOW_SIZE + RamUsageEstimator.sizeOf(array);, +        }, +, +        @Override, +        IntArrayWrapper(BigArrays bigArrays, int[] array, long size, Recycler.V<int[]> releasable, boolean clearOnResize) {, +            super(bigArrays, size, releasable, clearOnResize);]