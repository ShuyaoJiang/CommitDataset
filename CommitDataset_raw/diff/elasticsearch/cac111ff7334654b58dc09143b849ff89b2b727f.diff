[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +     * @throws LambdaConversionException if a method reference cannot be converted to an functional interface, +     static MethodHandle lookupMethod(MethodHandles.Lookup lookup, Class<?> receiverClass, String name, Object args[], long recipe) throws LambdaConversionException {, +     /** Returns a method handle to an implementation of clazz, given method reference signature , +      * @throws LambdaConversionException if a method reference cannot be converted to an functional interface, +      */, +     private static MethodHandle lookupReference(MethodHandles.Lookup lookup, Class<?> clazz, String signature) throws LambdaConversionException {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +     * @throws LambdaConversionException if a method reference cannot be converted to an functional interface, +     static MethodHandle lookupMethod(MethodHandles.Lookup lookup, Class<?> receiverClass, String name, Object args[], long recipe) throws LambdaConversionException {, +     /** Returns a method handle to an implementation of clazz, given method reference signature , +      * @throws LambdaConversionException if a method reference cannot be converted to an functional interface, +      */, +     private static MethodHandle lookupReference(MethodHandles.Lookup lookup, Class<?> clazz, String signature) throws LambdaConversionException {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +        private MethodHandle lookup(int flavor, Class<?> clazz, String name, Object[] args, long recipe) throws Throwable {]