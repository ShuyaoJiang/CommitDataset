[+++ b/shield/src/main/java/org/elasticsearch/shield/authc/ldap/LdapUserSearchSessionFactory.java, +import org.elasticsearch.common.logging.ESLogger;, +    private final Settings settings;, +    private LDAPConnectionPool connectionPool;, +, +    public LdapUserSearchSessionFactory(RealmConfig config, ClientSSLService sslService) {, +        settings = config.settings();, +        connectionPool = createConnectionPool(settings, serverSet, timeout, logger);, +    private synchronized LDAPConnectionPool connectionPool() throws IOException {, +        if (connectionPool == null) {, +            connectionPool = createConnectionPool(settings, serverSet, timeout, logger);, +            // if it is still null throw an exception, +            if (connectionPool == null) {, +                throw new IOException("failed to create a connection pool as no LDAP servers are available");, +            }, +        }, +, +        return connectionPool;, +    }, +, +    static LDAPConnectionPool createConnectionPool(Settings settings, ServerSet serverSet, TimeValue timeout, ESLogger logger) {, +            if (logger.isDebugEnabled()) {, +                logger.debug("unable to create connection pool", e);, +            } else {, +                logger.error("unable to create connection pool: {}", e.getMessage());, +        return null;, +    }, +        LDAPConnectionPool connectionPool = connectionPool();, +        if (connectionPool != null) {, +    }, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/ldap/LdapUserSearchSessionFactory.java, +import org.elasticsearch.common.logging.ESLogger;, +    private final Settings settings;, +    private LDAPConnectionPool connectionPool;, +, +    public LdapUserSearchSessionFactory(RealmConfig config, ClientSSLService sslService) {, +        settings = config.settings();, +        connectionPool = createConnectionPool(settings, serverSet, timeout, logger);, +    private synchronized LDAPConnectionPool connectionPool() throws IOException {, +        if (connectionPool == null) {, +            connectionPool = createConnectionPool(settings, serverSet, timeout, logger);, +            // if it is still null throw an exception, +            if (connectionPool == null) {, +                throw new IOException("failed to create a connection pool as no LDAP servers are available");, +            }, +        }, +, +        return connectionPool;, +    }, +, +    static LDAPConnectionPool createConnectionPool(Settings settings, ServerSet serverSet, TimeValue timeout, ESLogger logger) {, +            if (logger.isDebugEnabled()) {, +                logger.debug("unable to create connection pool", e);, +            } else {, +                logger.error("unable to create connection pool: {}", e.getMessage());, +        return null;, +    }, +        LDAPConnectionPool connectionPool = connectionPool();, +        if (connectionPool != null) {, +    }, +++ b/shield/src/test/java/org/elasticsearch/shield/authc/ldap/LdapUserSearchSessionFactoryTests.java, +import com.carrotsearch.randomizedtesting.ThreadFilter;, +import com.carrotsearch.randomizedtesting.annotations.ThreadLeakFilters;, +import org.elasticsearch.license.plugin.LicensePlugin;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.NodeBuilder;, +import org.elasticsearch.shield.ShieldPlugin;, +import org.elasticsearch.shield.support.NoOpLogger;, +import java.util.Map;, +// thread leak filter for UnboundID's background connect threads. The background connect threads do not always respect the, +// timeout and linger. Will be fixed in a new version of the library, see http://sourceforge.net/p/ldap-sdk/discussion/1001257/thread/154e3b71/, +@ThreadLeakFilters(filters = {, +        LdapUserSearchSessionFactoryTests.BackgroundConnectThreadLeakFilter.class, +}), +        LDAPConnectionPool connectionPool = LdapUserSearchSessionFactory.createConnectionPool(config.settings(), new SingleServerSet("localhost", ldapServer.getListenPort()), TimeValue.timeValueSeconds(5), NoOpLogger.INSTANCE);, +        LDAPConnectionPool connectionPool = LdapUserSearchSessionFactory.createConnectionPool(config.settings(), new SingleServerSet("localhost", ldapServer.getListenPort()), TimeValue.timeValueSeconds(5), NoOpLogger.INSTANCE);, +, +    @Test, +    public void testThatLDAPServerConnectErrorDoesNotPreventNodeFromStarting() {, +        String groupSearchBase = "DC=ad,DC=test,DC=elasticsearch,DC=com";, +        String userSearchBase = "CN=Users,DC=ad,DC=test,DC=elasticsearch,DC=com";, +        Settings ldapSettings = settingsBuilder(), +                .put(LdapTest.buildLdapSettings("ldaps://elastic.co:636", Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE)), +                .put("user_search.base_dn", userSearchBase), +                .put("bind_dn", "ironman@ad.test.elasticsearch.com"), +                .put("bind_password", ActiveDirectorySessionFactoryTests.PASSWORD), +                .put("user_search.attribute", "cn"), +                .put("timeout.tcp_connect", "500ms"), +                .put("type", "ldap"), +                .build();, +, +        Settings.Builder builder = settingsBuilder();, +        for (Map.Entry<String, String> entry : ldapSettings.getAsMap().entrySet()) {, +            builder.put("shield.authc.realms.ldap1." + entry.getKey(), entry.getValue());, +        }, +        builder.put("path.home", createTempDir());, +        builder.putArray("plugin.types", ShieldPlugin.class.getName(), LicensePlugin.class.getName());, +, +        try (Node node = NodeBuilder.nodeBuilder().loadConfigSettings(false).settings(builder.build()).build()) {, +            node.start();]