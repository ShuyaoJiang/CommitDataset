[+++ b/core/src/main/java/org/elasticsearch/index/mapper/TokenCountFieldMapper.java, +        if (value == null && fieldType().nullValue() == null) {, +            return;, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/TokenCountFieldMapper.java, +        if (value == null && fieldType().nullValue() == null) {, +            return;, +        }, +, +++ b/core/src/test/java/org/elasticsearch/index/mapper/TokenCountFieldMapperTests.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentType;, +, +    public void testParseNullValue() throws Exception {, +        DocumentMapper mapper = createIndexWithTokenCountField();, +        ParseContext.Document doc = parseDocument(mapper, createDocument(null));, +        assertNull(doc.getField("test.tc"));, +    }, +, +    public void testParseEmptyValue() throws Exception {, +        DocumentMapper mapper = createIndexWithTokenCountField();, +        ParseContext.Document doc = parseDocument(mapper, createDocument(""));, +        assertEquals(0, doc.getField("test.tc").numericValue());, +    }, +, +    public void testParseNotNullValue() throws Exception {, +        DocumentMapper mapper = createIndexWithTokenCountField();, +        ParseContext.Document doc = parseDocument(mapper, createDocument("three tokens string"));, +        assertEquals(3, doc.getField("test.tc").numericValue());, +    }, +, +    private DocumentMapper createIndexWithTokenCountField() throws IOException {, +        final String content = XContentFactory.jsonBuilder().startObject(), +            .startObject("person"), +                .startObject("properties"), +                    .startObject("test"), +                        .field("type", "text"), +                        .startObject("fields"), +                            .startObject("tc"), +                                .field("type", "token_count"), +                                .field("analyzer", "standard"), +                            .endObject(), +                        .endObject(), +                    .endObject(), +                .endObject(), +            .endObject().endObject().string();, +, +        return createIndex("test").mapperService().documentMapperParser().parse("person", new CompressedXContent(content));, +    }, +, +    private SourceToParse createDocument(String fieldValue) throws Exception {, +        BytesReference request = XContentFactory.jsonBuilder(), +            .startObject(), +                .field("test", fieldValue), +            .endObject().bytes();, +, +        return SourceToParse.source("test", "person", "1", request, XContentType.JSON);, +    }, +, +    private ParseContext.Document parseDocument(DocumentMapper mapper, SourceToParse request) {, +        return mapper.parse(request), +            .docs().stream().findFirst().orElseThrow(() -> new IllegalStateException("Test object not parsed"));, +    }]