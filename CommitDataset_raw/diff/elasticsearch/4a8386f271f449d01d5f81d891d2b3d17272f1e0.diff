[+++ b/docs/reference/sql/functions/operators.asciidoc, +Boolean operator for comparing against one or multiple expressions., +* `IN (<value1>, <value2>, ...)`, +, +["source","sql",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{sql-specs}/filter.sql-spec[whereWithInAndMultipleValues], +--------------------------------------------------, +, +++ b/docs/reference/sql/functions/operators.asciidoc, +Boolean operator for comparing against one or multiple expressions., +* `IN (<value1>, <value2>, ...)`, +, +["source","sql",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{sql-specs}/filter.sql-spec[whereWithInAndMultipleValues], +--------------------------------------------------, +, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +, +    public boolean isCompatibleWith(DataType other) {, +        if (this == other) {, +            return true;, +        } else if (isString() && other.isString()) {, +            return true;, +        } else if (isNumeric() && other.isNumeric()) {, +            return true;, +        } else {, +            return false;, +        }, +    }, +++ b/docs/reference/sql/functions/operators.asciidoc, +Boolean operator for comparing against one or multiple expressions., +* `IN (<value1>, <value2>, ...)`, +, +["source","sql",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{sql-specs}/filter.sql-spec[whereWithInAndMultipleValues], +--------------------------------------------------, +, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +, +    public boolean isCompatibleWith(DataType other) {, +        if (this == other) {, +            return true;, +        } else if (isString() && other.isString()) {, +            return true;, +        } else if (isNumeric() && other.isNumeric()) {, +            return true;, +        } else {, +            return false;, +        }, +    }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +import org.elasticsearch.xpack.sql.expression.predicate.In;, +final class Verifier {, +, +    private Verifier() {}, +                validateInExpression(p, localFailures);, +, +, +    private static void validateInExpression(LogicalPlan p, Set<Failure> localFailures) {, +        p.forEachExpressions(e ->, +            e.forEachUp((In in) -> {, +                    DataType dt = in.value().dataType();, +                    for (Expression value : in.list()) {, +                        if (!in.value().dataType().isCompatibleWith(value.dataType())) {, +                            localFailures.add(fail(value, "expected data type [%s], value provided is of type [%s]",, +                                dt, value.dataType()));, +                            return;, +                        }, +                    }, +                },, +                In.class));, +    }, +++ b/docs/reference/sql/functions/operators.asciidoc, +Boolean operator for comparing against one or multiple expressions., +* `IN (<value1>, <value2>, ...)`, +, +["source","sql",subs="attributes,callouts,macros"], +--------------------------------------------------, +include-tagged::{sql-specs}/filter.sql-spec[whereWithInAndMultipleValues], +--------------------------------------------------, +, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +, +    public boolean isCompatibleWith(DataType other) {, +        if (this == other) {, +            return true;, +        } else if (isString() && other.isString()) {, +            return true;, +        } else if (isNumeric() && other.isNumeric()) {, +            return true;, +        } else {, +            return false;, +        }, +    }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +import org.elasticsearch.xpack.sql.expression.predicate.In;, +final class Verifier {]