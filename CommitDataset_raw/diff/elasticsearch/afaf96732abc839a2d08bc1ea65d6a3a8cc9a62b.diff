[+++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperBuilders.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperBuilders.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/geo/BaseGeoPointFieldMapper.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper.geo;, +, +import org.apache.lucene.document.Field;, +import org.apache.lucene.index.IndexOptions;, +import org.apache.lucene.util.GeoHashUtils;, +import org.apache.lucene.util.NumericUtils;, +import org.elasticsearch.Version;, +import org.elasticsearch.common.Explicit;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.collect.Iterators;, +import org.elasticsearch.common.geo.GeoPoint;, +import org.elasticsearch.common.geo.GeoUtils;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +import org.elasticsearch.index.mapper.ContentPath;, +import org.elasticsearch.index.mapper.FieldMapper;, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.mapper.Mapper;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import org.elasticsearch.index.mapper.MergeMappingException;, +import org.elasticsearch.index.mapper.MergeResult;, +import org.elasticsearch.index.mapper.ParseContext;, +import org.elasticsearch.index.mapper.core.DoubleFieldMapper;, +import org.elasticsearch.index.mapper.core.NumberFieldMapper;, +import org.elasticsearch.index.mapper.core.StringFieldMapper;, +import org.elasticsearch.index.mapper.object.ArrayValueMapperParser;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +, +import static org.elasticsearch.index.mapper.MapperBuilders.doubleField;, +import static org.elasticsearch.index.mapper.MapperBuilders.stringField;, +import static org.elasticsearch.index.mapper.core.TypeParsers.parseField;, +import static org.elasticsearch.index.mapper.core.TypeParsers.parseMultiField;, +, +/**, + * GeoPointFieldMapper base class to maintain backward compatibility, + */, +public abstract class BaseGeoPointFieldMapper extends FieldMapper implements ArrayValueMapperParser {, +    public static final String CONTENT_TYPE = "geo_point";, +, +    public static class Names {, +        public static final String LAT = "lat";, +        public static final String LAT_SUFFIX = "." + LAT;, +        public static final String LON = "lon";, +        public static final String LON_SUFFIX = "." + LON;, +        public static final String GEOHASH = "geohash";, +        public static final String GEOHASH_SUFFIX = "." + GEOHASH;, +        public static final String IGNORE_MALFORMED = "ignore_malformed";, +    }, +, +    public static class Defaults {, +        public static final ContentPath.Type PATH_TYPE = ContentPath.Type.FULL;, +        public static final boolean ENABLE_LATLON = false;, +        public static final boolean ENABLE_GEOHASH = false;, +        public static final boolean ENABLE_GEOHASH_PREFIX = false;, +        public static final int GEO_HASH_PRECISION = GeoHashUtils.PRECISION;, +        public static final Explicit<Boolean> IGNORE_MALFORMED = new Explicit(false, false);, +    }, +, +    public abstract static class Builder<T extends Builder, Y extends BaseGeoPointFieldMapper> extends FieldMapper.Builder<T, Y> {, +        protected ContentPath.Type pathType = Defaults.PATH_TYPE;, +, +        protected boolean enableLatLon = Defaults.ENABLE_LATLON;, +, +        protected Integer precisionStep;, +, +        protected boolean enableGeoHash = Defaults.ENABLE_GEOHASH;, +, +        protected boolean enableGeoHashPrefix = Defaults.ENABLE_GEOHASH_PREFIX;, +, +        protected int geoHashPrecision = Defaults.GEO_HASH_PRECISION;]