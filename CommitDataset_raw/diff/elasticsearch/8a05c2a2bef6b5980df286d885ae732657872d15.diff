[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            // TODO: remove setting logging level via system property, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            // TODO: remove setting logging level via system property, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    Map<String, String> esSettings = new HashMap<>();, +, +    void esSetting(String setting, String value) {, +        esSettings.put(setting, value);, +    }, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            // TODO: remove setting logging level via system property, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    Map<String, String> esSettings = new HashMap<>();, +, +    void esSetting(String setting, String value) {, +        esSettings.put(setting, value);, +    }, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.addAll("-E", "es.node.portsfile=true"), +        args.addAll(config.esSettings.collectMany { key, value -> ["-E", "${key}=${value}" ] }), +        env.put('ES_JAVA_OPTS', config.systemProperties.collect { key, value -> "-D${key}=${value}" }.join(" ")), +                args.add("-E"), +                args.add("${property.getKey()}=${property.getValue()}"), +        args.addAll("-E", "es.path.conf=${confDir}"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            // TODO: remove setting logging level via system property, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    Map<String, String> esSettings = new HashMap<>();, +, +    void esSetting(String setting, String value) {, +        esSettings.put(setting, value);, +    }, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.addAll("-E", "es.node.portsfile=true"), +        args.addAll(config.esSettings.collectMany { key, value -> ["-E", "${key}=${value}" ] }), +        env.put('ES_JAVA_OPTS', config.systemProperties.collect { key, value -> "-D${key}=${value}" }.join(" ")), +                args.add("-E"), +                args.add("${property.getKey()}=${property.getValue()}"), +        args.addAll("-E", "es.path.conf=${confDir}"), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            // TODO: remove setting logging level via system property, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    Map<String, String> esSettings = new HashMap<>();, +, +    void esSetting(String setting, String value) {, +        esSettings.put(setting, value);, +    }, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.addAll("-E", "es.node.portsfile=true"), +        args.addAll(config.esSettings.collectMany { key, value -> ["-E", "${key}=${value}" ] }), +        env.put('ES_JAVA_OPTS', config.systemProperties.collect { key, value -> "-D${key}=${value}" }.join(" ")), +                args.add("-E"), +                args.add("${property.getKey()}=${property.getValue()}"), +        args.addAll("-E", "es.path.conf=${confDir}"), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.elasticsearch.common.Strings;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.PrintStream;, +import java.nio.file.Path;, +import java.util.Locale;, +import java.util.Map;, +import java.util.concurrent.CountDownLatch;, +    private static Environment initialSettings(boolean daemonize, String pathHome, String pidFile) {, +        Terminal terminal = daemonize ? null : Terminal.DEFAULT;, +        Settings.Builder builder = Settings.builder();, +        builder.put(Environment.PATH_HOME_SETTING.getKey(), pathHome);, +        if (Strings.hasLength(pidFile)) {, +            builder.put(Environment.PIDFILE_SETTING.getKey(), pidFile);, +        }, +        return InternalSettingsPreparer.prepareEnvironment(builder.build(), terminal);, +    static void init(, +            final boolean daemonize,, +            final String pathHome,, +            final String pidFile,, +            final Map<String, String> esSettings) throws Throwable {, +        elasticsearchSettings(esSettings);, +        Environment environment = initialSettings(daemonize, pathHome, pidFile);, +            if (daemonize) {, +            if (daemonize) {, +            if (!daemonize) {, +            if (!daemonize) {, +    @SuppressForbidden(reason = "Sets system properties passed as CLI parameters"), +    private static void elasticsearchSettings(Map<String, String> esSettings) {, +        for (Map.Entry<String, String> esSetting : esSettings.entrySet()) {, +            System.setProperty(esSetting.getKey(), esSetting.getValue());, +        }, +    }, +]