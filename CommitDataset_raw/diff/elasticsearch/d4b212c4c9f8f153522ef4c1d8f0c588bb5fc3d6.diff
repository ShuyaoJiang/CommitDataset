[+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +        String[] patterns = new String[aliases.length];, +        boolean[] include = new boolean[aliases.length];, +        for (int i = 0; i < aliases.length; i++) {, +            String alias = aliases[i];, +            if (alias.charAt(0) == '-') {, +                patterns[i] = alias.substring(1);, +                include[i] = false;, +            } else {, +                patterns[i] = alias;, +                include[i] = true;, +            }, +        }, +        boolean matchAllAliases = patterns.length == 0;, +                boolean matched = matchAllAliases;, +                String alias = value.alias();, +                for (int i = 0; i < patterns.length; i++) {, +                    if (include[i]) {, +                        if (matched == false) {, +                            String pattern = patterns[i];, +                            matched = ALL.equals(pattern) || Regex.simpleMatch(pattern, alias);, +                        }, +                    } else if (matched) {, +                        matched = Regex.simpleMatch(patterns[i], alias) == false;, +                    }, +                }, +                if (matched) {, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +        String[] patterns = new String[aliases.length];, +        boolean[] include = new boolean[aliases.length];, +        for (int i = 0; i < aliases.length; i++) {, +            String alias = aliases[i];, +            if (alias.charAt(0) == '-') {, +                patterns[i] = alias.substring(1);, +                include[i] = false;, +            } else {, +                patterns[i] = alias;, +                include[i] = true;, +            }, +        }, +        boolean matchAllAliases = patterns.length == 0;, +                boolean matched = matchAllAliases;, +                String alias = value.alias();, +                for (int i = 0; i < patterns.length; i++) {, +                    if (include[i]) {, +                        if (matched == false) {, +                            String pattern = patterns[i];, +                            matched = ALL.equals(pattern) || Regex.simpleMatch(pattern, alias);, +                        }, +                    } else if (matched) {, +                        matched = Regex.simpleMatch(patterns[i], alias) == false;, +                    }, +                }, +                if (matched) {, +++ b/server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataTests.java, +    public void testFindAliasWithExclusion() {, +        MetaData metaData = MetaData.builder().put(, +            IndexMetaData.builder("index"), +                .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +                .numberOfShards(1), +                .numberOfReplicas(0), +                .putAlias(AliasMetaData.builder("alias1").build()), +                .putAlias(AliasMetaData.builder("alias2").build()), +        ).build();, +        List<AliasMetaData> aliases =, +            metaData.findAliases(new GetAliasesRequest().aliases("*", "-alias1"), new String[] {"index"}).get("index");, +        assertThat(aliases.size(), equalTo(1));, +        assertThat(aliases.get(0).alias(), equalTo("alias2"));, +    }, +, +    public void testFindAliasWithExclusionAndOverride() {, +        MetaData metaData = MetaData.builder().put(, +            IndexMetaData.builder("index"), +                .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +                .numberOfShards(1), +                .numberOfReplicas(0), +                .putAlias(AliasMetaData.builder("aa").build()), +                .putAlias(AliasMetaData.builder("ab").build()), +                .putAlias(AliasMetaData.builder("bb").build()), +        ).build();, +        List<AliasMetaData> aliases =, +            metaData.findAliases(new GetAliasesRequest().aliases("a*", "-*b", "b*"), new String[] {"index"}).get("index");, +        assertThat(aliases.size(), equalTo(2));, +        assertThat(aliases.get(0).alias(), equalTo("aa"));, +        assertThat(aliases.get(1).alias(), equalTo("bb"));, +    }, +]