[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +                clusterInfoService.getClusterInfo(), System.nanoTime(), false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +                clusterInfoService.getClusterInfo(), System.nanoTime(), false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/reroute/ClusterRerouteRequest.java, +    private AllocationCommands commands = new AllocationCommands();, +    private boolean dryRun;, +    private boolean explain;, +    private boolean retryFailed;, +     * Sets the retry failed flag (defaults to <tt>false</tt>). If true, the, +     * request will retry allocating shards that can't currently be allocated due to too many allocation failures., +     */, +    public ClusterRerouteRequest setRetryFailed(boolean retryFailed) {, +        this.retryFailed = retryFailed;, +        return this;, +    }, +, +    /**, +     * Returns the current retry failed flag, +     */, +    public boolean isRetryFailed() {, +        return this.retryFailed;, +    }, +, +, +    /**, +     * Returns the allocation commands to execute, +     */, +    public AllocationCommands getCommands() {, +        return commands;, +    }, +, +    /**, +        retryFailed = in.readBoolean();, +        out.writeBoolean(retryFailed);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +                clusterInfoService.getClusterInfo(), System.nanoTime(), false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/reroute/ClusterRerouteRequest.java, +    private AllocationCommands commands = new AllocationCommands();, +    private boolean dryRun;, +    private boolean explain;, +    private boolean retryFailed;, +     * Sets the retry failed flag (defaults to <tt>false</tt>). If true, the, +     * request will retry allocating shards that can't currently be allocated due to too many allocation failures., +     */, +    public ClusterRerouteRequest setRetryFailed(boolean retryFailed) {, +        this.retryFailed = retryFailed;, +        return this;, +    }, +, +    /**, +     * Returns the current retry failed flag, +     */, +    public boolean isRetryFailed() {, +        return this.retryFailed;, +    }, +, +, +    /**, +     * Returns the allocation commands to execute, +     */, +    public AllocationCommands getCommands() {, +        return commands;, +    }, +, +    /**, +        retryFailed = in.readBoolean();, +        out.writeBoolean(retryFailed);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/reroute/ClusterRerouteRequestBuilder.java, +     * Sets the retry failed flag (defaults to <tt>false</tt>). If true, the, +     * request will retry allocating shards that can't currently be allocated due to too many allocation failures., +     */, +    public ClusterRerouteRequestBuilder setRetryFailed(boolean retryFailed) {, +        request.setRetryFailed(retryFailed);, +        return this;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +                clusterInfoService.getClusterInfo(), System.nanoTime(), false);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/reroute/ClusterRerouteRequest.java, +    private AllocationCommands commands = new AllocationCommands();, +    private boolean dryRun;, +    private boolean explain;, +    private boolean retryFailed;, +     * Sets the retry failed flag (defaults to <tt>false</tt>). If true, the, +     * request will retry allocating shards that can't currently be allocated due to too many allocation failures., +     */, +    public ClusterRerouteRequest setRetryFailed(boolean retryFailed) {, +        this.retryFailed = retryFailed;, +        return this;, +    }, +, +    /**, +     * Returns the current retry failed flag, +     */, +    public boolean isRetryFailed() {, +        return this.retryFailed;, +    }, +]