[+++ b/core/src/main/java/org/elasticsearch/monitor/MonitorService.java, +import org.elasticsearch.cluster.ClusterInfoService;, +    public MonitorService(Settings settings, NodeEnvironment nodeEnvironment, ThreadPool threadPool,, +                          ClusterInfoService clusterInfoService) throws IOException {, +        this.fsService = new FsService(settings, nodeEnvironment, clusterInfoService);, +++ b/core/src/main/java/org/elasticsearch/monitor/MonitorService.java, +import org.elasticsearch.cluster.ClusterInfoService;, +    public MonitorService(Settings settings, NodeEnvironment nodeEnvironment, ThreadPool threadPool,, +                          ClusterInfoService clusterInfoService) throws IOException {, +        this.fsService = new FsService(settings, nodeEnvironment, clusterInfoService);, +++ b/core/src/main/java/org/elasticsearch/monitor/fs/FsInfo.java, +import org.elasticsearch.cluster.DiskUsage;, +    private final DiskUsage leastDiskEstimate;, +    private final DiskUsage mostDiskEstimate;, +        this(timestamp, ioStats, paths, null, null);, +    }, +, +    public FsInfo(long timestamp, IoStats ioStats, Path[] paths, @Nullable DiskUsage leastUsage, @Nullable DiskUsage mostUsage) {, +        this.leastDiskEstimate = leastUsage;, +        this.mostDiskEstimate = mostUsage;, +        this.leastDiskEstimate = in.readOptionalWriteable(DiskUsage::new);, +        this.mostDiskEstimate = in.readOptionalWriteable(DiskUsage::new);, +        out.writeOptionalWriteable(this.leastDiskEstimate);, +        out.writeOptionalWriteable(this.mostDiskEstimate);, +    @Nullable, +    public DiskUsage getLeastDiskEstimate() {, +        return this.leastDiskEstimate;, +    }, +, +    @Nullable, +    public DiskUsage getMostDiskEstimate() {, +        return this.mostDiskEstimate;, +    }, +, +        if (leastDiskEstimate != null) {, +            builder.startObject(Fields.LEAST_ESTIMATE);, +            {, +                builder.field(Fields.PATH, leastDiskEstimate.getPath());, +                builder.byteSizeField(Fields.TOTAL_IN_BYTES, Fields.TOTAL, leastDiskEstimate.getTotalBytes());, +                builder.byteSizeField(Fields.AVAILABLE_IN_BYTES, Fields.AVAILABLE, leastDiskEstimate.getFreeBytes());, +                builder.field(Fields.USAGE_PERCENTAGE, leastDiskEstimate.getUsedDiskAsPercentage());, +            }, +            builder.endObject();, +        }, +, +        if (mostDiskEstimate != null) {, +            builder.startObject(Fields.MOST_ESTIMATE);, +            {, +                builder.field(Fields.PATH, mostDiskEstimate.getPath());, +                builder.byteSizeField(Fields.TOTAL_IN_BYTES, Fields.TOTAL, mostDiskEstimate.getTotalBytes());, +                builder.byteSizeField(Fields.AVAILABLE_IN_BYTES, Fields.AVAILABLE, mostDiskEstimate.getFreeBytes());, +                builder.field(Fields.USAGE_PERCENTAGE, mostDiskEstimate.getUsedDiskAsPercentage());, +            }, +            builder.endObject();, +        }, +        static final String TOTAL_IN_BYTES = "total_in_bytes";, +        static final String LEAST_ESTIMATE = "least_usage_estimate";, +        static final String MOST_ESTIMATE = "most_usage_estimate";, +        static final String USAGE_PERCENTAGE = "used_disk_percent";, +        static final String AVAILABLE = "available";, +        static final String AVAILABLE_IN_BYTES = "available_in_bytes";, +        static final String PATH = "path";, +++ b/core/src/main/java/org/elasticsearch/monitor/MonitorService.java, +import org.elasticsearch.cluster.ClusterInfoService;, +    public MonitorService(Settings settings, NodeEnvironment nodeEnvironment, ThreadPool threadPool,, +                          ClusterInfoService clusterInfoService) throws IOException {, +        this.fsService = new FsService(settings, nodeEnvironment, clusterInfoService);, +++ b/core/src/main/java/org/elasticsearch/monitor/fs/FsInfo.java, +import org.elasticsearch.cluster.DiskUsage;, +    private final DiskUsage leastDiskEstimate;, +    private final DiskUsage mostDiskEstimate;, +        this(timestamp, ioStats, paths, null, null);, +    }, +, +    public FsInfo(long timestamp, IoStats ioStats, Path[] paths, @Nullable DiskUsage leastUsage, @Nullable DiskUsage mostUsage) {, +        this.leastDiskEstimate = leastUsage;, +        this.mostDiskEstimate = mostUsage;, +        this.leastDiskEstimate = in.readOptionalWriteable(DiskUsage::new);, +        this.mostDiskEstimate = in.readOptionalWriteable(DiskUsage::new);, +        out.writeOptionalWriteable(this.leastDiskEstimate);, +        out.writeOptionalWriteable(this.mostDiskEstimate);, +    @Nullable, +    public DiskUsage getLeastDiskEstimate() {, +        return this.leastDiskEstimate;, +    }, +, +    @Nullable, +    public DiskUsage getMostDiskEstimate() {, +        return this.mostDiskEstimate;, +    }, +, +        if (leastDiskEstimate != null) {, +            builder.startObject(Fields.LEAST_ESTIMATE);, +            {, +                builder.field(Fields.PATH, leastDiskEstimate.getPath());, +                builder.byteSizeField(Fields.TOTAL_IN_BYTES, Fields.TOTAL, leastDiskEstimate.getTotalBytes());, +                builder.byteSizeField(Fields.AVAILABLE_IN_BYTES, Fields.AVAILABLE, leastDiskEstimate.getFreeBytes());, +                builder.field(Fields.USAGE_PERCENTAGE, leastDiskEstimate.getUsedDiskAsPercentage());, +            }, +            builder.endObject();]