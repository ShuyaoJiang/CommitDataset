[+++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +            throw new IllegalArgumentException("text cannot be null");, +, +        String fieldName = null;, +        XContentParser.Token token;, +            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {, +                // skip, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[common] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +                fieldName = currentFieldName;, +                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                    if (token == XContentParser.Token.FIELD_NAME) {, +                        currentFieldName = parser.currentName();, +                fieldName = parser.currentName();, +++ b/core/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, +            throw new IllegalArgumentException("text cannot be null");, +, +        String fieldName = null;, +        XContentParser.Token token;, +            } else if (parseContext.isDeprecatedSetting(currentFieldName)) {, +                // skip, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (fieldName != null) {, +                    throw new ParsingException(parser.getTokenLocation(), "[common] query doesn't support multiple fields, found [", +                            + fieldName + "] and [" + currentFieldName + "]");, +                }, +                fieldName = currentFieldName;, +                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                    if (token == XContentParser.Token.FIELD_NAME) {, +                        currentFieldName = parser.currentName();, +                fieldName = parser.currentName();, +++ b/core/src/test/java/org/elasticsearch/index/query/CommonTermsQueryBuilderTests.java, +import org.elasticsearch.common.ParsingException;, +import java.util.HashMap;, +import java.util.Map;, +    protected Map<String, CommonTermsQueryBuilder> getAlternateVersions() {, +        Map<String, CommonTermsQueryBuilder> alternateVersions = new HashMap<>();, +        CommonTermsQueryBuilder commonTermsQuery = new CommonTermsQueryBuilder(randomAsciiOfLengthBetween(1, 10),, +                randomAsciiOfLengthBetween(1, 10));, +        String contentString = "{\n" +, +                "    \"common\" : {\n" +, +                "        \"" + commonTermsQuery.fieldName() + "\" : \"" + commonTermsQuery.value() + "\"\n" +, +                "    }\n" +, +                "}";, +        alternateVersions.put(contentString, commonTermsQuery);, +        return alternateVersions;, +    }, +, +    @Override, +            assertEquals("field name is null or empty", e.getMessage());, +            assertEquals("text cannot be null", e.getMessage());, +, +    public void testParseFailsWithMultipleFields() throws IOException {, +        String json = "{\n" +, +                "  \"common\" : {\n" +, +                "    \"message1\" : {\n" +, +                "      \"query\" : \"nelly the elephant not as a cartoon\"\n" +, +                "    },\n" +, +                "    \"message2\" : {\n" +, +                "      \"query\" : \"nelly the elephant not as a cartoon\"\n" +, +                "    }\n" +, +                "  }\n" +, +                "}";, +, +        try {, +            parseQuery(json);, +            fail("parseQuery should have failed");, +        } catch(ParsingException e) {, +            assertEquals("[common] query doesn't support multiple fields, found [message1] and [message2]", e.getMessage());, +        }, +    }]