[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/build.gradle, +++ b/docs/painless/painless-getting-started.asciidoc, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/build.gradle, +++ b/docs/painless/painless-getting-started.asciidoc, +++ b/docs/reference/aggregations/bucket/datehistogram-aggregation.asciidoc, +                    "source": "doc['date'].value.dayOfWeekEnum.value", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/build.gradle, +++ b/docs/painless/painless-getting-started.asciidoc, +++ b/docs/reference/aggregations/bucket/datehistogram-aggregation.asciidoc, +                    "source": "doc['date'].value.dayOfWeekEnum.value", +++ b/modules/lang-painless/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/build.gradle, +++ b/docs/painless/painless-getting-started.asciidoc, +++ b/docs/reference/aggregations/bucket/datehistogram-aggregation.asciidoc, +                    "source": "doc['date'].value.dayOfWeekEnum.value", +++ b/modules/lang-painless/build.gradle, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +        "java.util.stream.txt", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/build.gradle, +++ b/docs/painless/painless-getting-started.asciidoc, +++ b/docs/reference/aggregations/bucket/datehistogram-aggregation.asciidoc, +                    "source": "doc['date'].value.dayOfWeekEnum.value", +++ b/modules/lang-painless/build.gradle, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +        "java.util.stream.txt", +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/build.gradle, +++ b/docs/painless/painless-getting-started.asciidoc, +++ b/docs/reference/aggregations/bucket/datehistogram-aggregation.asciidoc, +                    "source": "doc['date'].value.dayOfWeekEnum.value", +++ b/modules/lang-painless/build.gradle, +++ b/modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/Whitelist.java, +        "java.util.stream.txt", +++ /dev/null, +++ b/modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/org.elasticsearch.txt, +class org.elasticsearch.script.JodaCompatibleZonedDateTime {, +  ##### ZonedDateTime methods, +  int getDayOfMonth(), +  int getDayOfYear(), +  int getHour(), +  LocalDate toLocalDate(), +  LocalDateTime toLocalDateTime(), +  int getMinute(), +  Month getMonth(), +  int getMonthValue(), +  int getNano(), +  int getSecond(), +  int getYear(), +  ZonedDateTime minus(TemporalAmount), +  ZonedDateTime minus(long,TemporalUnit), +  ZonedDateTime minusYears(long), +  ZonedDateTime minusMonths(long), +  ZonedDateTime minusWeeks(long), +  ZonedDateTime minusDays(long), +  ZonedDateTime minusHours(long), +  ZonedDateTime minusMinutes(long), +  ZonedDateTime minusSeconds(long), +  ZonedDateTime minusNanos(long), +  ZonedDateTime plus(TemporalAmount), +  ZonedDateTime plus(long,TemporalUnit), +  ZonedDateTime plusDays(long), +  ZonedDateTime plusHours(long), +  ZonedDateTime plusMinutes(long), +  ZonedDateTime plusMonths(long), +  ZonedDateTime plusNanos(long), +  ZonedDateTime plusSeconds(long), +  ZonedDateTime plusWeeks(long), +  ZonedDateTime plusYears(long), +  Instant toInstant(), +  OffsetDateTime toOffsetDateTime(), +  ZonedDateTime truncatedTo(TemporalUnit), +  ZonedDateTime with(TemporalAdjuster), +  ZonedDateTime with(TemporalField,long), +  ZonedDateTime withDayOfMonth(int), +  ZonedDateTime withDayOfYear(int), +  ZonedDateTime withEarlierOffsetAtOverlap(), +  ZonedDateTime withFixedOffsetZone(), +  ZonedDateTime withHour(int), +  ZonedDateTime withLaterOffsetAtOverlap(), +  ZonedDateTime withMinute(int), +  ZonedDateTime withMonth(int), +  ZonedDateTime withNano(int), +  ZonedDateTime withSecond(int), +  ZonedDateTime withYear(int), +  ZonedDateTime withZoneSameLocal(ZoneId), +  ZonedDateTime withZoneSameInstant(ZoneId), +, +  #### Joda methods that exist in java time, +  boolean equals(Object), +  int hashCode(), +  boolean isAfter(ZonedDateTime)]