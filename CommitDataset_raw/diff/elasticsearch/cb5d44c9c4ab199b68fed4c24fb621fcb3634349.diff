[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/InvalidLicenseEnforcer.java, +                    datafeedJobRunner.stopAllDatafeeds("invalid license");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/InvalidLicenseEnforcer.java, +                    datafeedJobRunner.stopAllDatafeeds("invalid license");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        private volatile AutodetectProcessManager autodetectProcessManager;, +            autodetectProcessManager.closeJob(jobId, restart, reason);, +            JobTask jobTask = (JobTask) task;, +            jobTask.autodetectProcessManager = autodetectProcessManager;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/InvalidLicenseEnforcer.java, +                    datafeedJobRunner.stopAllDatafeeds("invalid license");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        private volatile AutodetectProcessManager autodetectProcessManager;, +            autodetectProcessManager.closeJob(jobId, restart, reason);, +            JobTask jobTask = (JobTask) task;, +            jobTask.autodetectProcessManager = autodetectProcessManager;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +        private volatile DatafeedJobRunner datafeedJobRunner;, +        /* only for testing */, +        public DatafeedTask(long id, String type, String action, TaskId parentTaskId, Request request, DatafeedJobRunner datafeedJobRunner) {, +            super(id, type, action, "datafeed-" + request.getDatafeedId(), parentTaskId);, +            this.datafeedId = request.getDatafeedId();, +            this.startTime = request.startTime;, +            this.endTime = request.endTime;, +            this.datafeedJobRunner = datafeedJobRunner;, +        }, +, +            datafeedJobRunner.stopDatafeed(datafeedId, reason, timeout);, +            datafeedTask.datafeedJobRunner = datafeedJobRunner;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/InvalidLicenseEnforcer.java, +                    datafeedJobRunner.stopAllDatafeeds("invalid license");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        private volatile AutodetectProcessManager autodetectProcessManager;, +            autodetectProcessManager.closeJob(jobId, restart, reason);, +            JobTask jobTask = (JobTask) task;, +            jobTask.autodetectProcessManager = autodetectProcessManager;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +        private volatile DatafeedJobRunner datafeedJobRunner;, +        /* only for testing */, +        public DatafeedTask(long id, String type, String action, TaskId parentTaskId, Request request, DatafeedJobRunner datafeedJobRunner) {, +            super(id, type, action, "datafeed-" + request.getDatafeedId(), parentTaskId);, +            this.datafeedId = request.getDatafeedId();, +            this.startTime = request.startTime;, +            this.endTime = request.endTime;, +            this.datafeedJobRunner = datafeedJobRunner;, +        }, +, +            datafeedJobRunner.stopDatafeed(datafeedId, reason, timeout);, +            datafeedTask.datafeedJobRunner = datafeedJobRunner;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobRunner.java, +    public synchronized void stopDatafeed(String datafeedId, String reason, TimeValue timeout) {, +        Holder holder = runningDatafeeds.remove(datafeedId);, +        if (holder != null) {, +            holder.stop(reason, timeout, null);, +        }, +    }, +, +    public synchronized void stopAllDatafeeds(String reason) {, +        return new Holder(datafeed, datafeedJob, task.isLookbackOnly(), new ProblemTracker(auditor, job.getId()), handler);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/InvalidLicenseEnforcer.java, +                    datafeedJobRunner.stopAllDatafeeds("invalid license");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        private volatile AutodetectProcessManager autodetectProcessManager;, +            autodetectProcessManager.closeJob(jobId, restart, reason);, +            JobTask jobTask = (JobTask) task;, +            jobTask.autodetectProcessManager = autodetectProcessManager;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +        private volatile DatafeedJobRunner datafeedJobRunner;, +        /* only for testing */, +        public DatafeedTask(long id, String type, String action, TaskId parentTaskId, Request request, DatafeedJobRunner datafeedJobRunner) {, +            super(id, type, action, "datafeed-" + request.getDatafeedId(), parentTaskId);, +            this.datafeedId = request.getDatafeedId();, +            this.startTime = request.startTime;, +            this.endTime = request.endTime;, +            this.datafeedJobRunner = datafeedJobRunner;, +        }, +, +            datafeedJobRunner.stopDatafeed(datafeedId, reason, timeout);, +            datafeedTask.datafeedJobRunner = datafeedJobRunner;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobRunner.java, +    public synchronized void stopDatafeed(String datafeedId, String reason, TimeValue timeout) {, +        Holder holder = runningDatafeeds.remove(datafeedId);, +        if (holder != null) {, +            holder.stop(reason, timeout, null);, +        }, +    }, +, +    public synchronized void stopAllDatafeeds(String reason) {, +        return new Holder(datafeed, datafeedJob, task.isLookbackOnly(), new ProblemTracker(auditor, job.getId()), handler);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobRunnerTests.java, +        StartDatafeedAction.DatafeedTask task = new StartDatafeedAction.DatafeedTask(1, "type", "action", null,, +                startDatafeedRequest, datafeedJobRunner);]