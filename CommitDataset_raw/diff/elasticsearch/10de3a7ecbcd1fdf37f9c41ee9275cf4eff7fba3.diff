[+++ b/src/test/java/org/elasticsearch/gateway/none/RecoverAfterNodesTests.java, +import com.google.common.collect.ImmutableSet;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.test.AbstractIntegrationTest;, +import org.elasticsearch.test.AbstractIntegrationTest.ClusterScope;, +import org.elasticsearch.test.AbstractIntegrationTest.Scope;, +@ClusterScope(scope = Scope.TEST, numNodes = 0), +public class RecoverAfterNodesTests extends AbstractIntegrationTest {, +    public ImmutableSet<ClusterBlock> waitForNoBlocksOnNode(TimeValue timeout, Client nodeClient) throws InterruptedException {, +        long start = System.currentTimeMillis();, +        ImmutableSet<ClusterBlock> blocks;, +        do {, +            blocks = nodeClient.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +                    .getState().blocks().global(ClusterBlockLevel.METADATA);, +        }, +        while (!blocks.isEmpty() && (System.currentTimeMillis() - start) < timeout.millis());, +        return blocks;, +    }, +, +    public Client startNode(Settings.Builder settings) {, +        String name = cluster().startNode(settings);, +        return cluster().clientNodeClient(name);, +        Client clientNode1 = startNode(settingsBuilder().put("gateway.recover_after_nodes", 3));, +        assertThat(clientNode1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        Client clientNode2 = startNode(settingsBuilder().put("gateway.recover_after_nodes", 3));, +        assertThat(clientNode1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        assertThat(clientNode2.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        Client clientNode3 = startNode(settingsBuilder().put("gateway.recover_after_nodes", 3));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, clientNode1).isEmpty(), equalTo(true));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, clientNode2).isEmpty(), equalTo(true));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, clientNode3).isEmpty(), equalTo(true));, +        Client master1 = startNode(settingsBuilder().put("gateway.recover_after_master_nodes", 2).put("node.data", false).put("node.master", true));, +        assertThat(master1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        Client data1 = startNode(settingsBuilder().put("gateway.recover_after_master_nodes", 2).put("node.data", true).put("node.master", false));, +        assertThat(master1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        assertThat(data1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        Client data2 = startNode(settingsBuilder().put("gateway.recover_after_master_nodes", 2).put("node.data", true).put("node.master", false));, +        assertThat(master1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        assertThat(data1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        assertThat(data2.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        Client master2 = startNode(settingsBuilder().put("gateway.recover_after_master_nodes", 2).put("node.data", false).put("node.master", true));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, master1).isEmpty(), equalTo(true));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, master2).isEmpty(), equalTo(true));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, data1).isEmpty(), equalTo(true));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, data2).isEmpty(), equalTo(true));, +        Client master1 = startNode(settingsBuilder().put("gateway.recover_after_data_nodes", 2).put("node.data", false).put("node.master", true));, +        assertThat(master1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        Client data1 = startNode(settingsBuilder().put("gateway.recover_after_data_nodes", 2).put("node.data", true).put("node.master", false));, +        assertThat(master1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        assertThat(data1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        Client master2 = startNode(settingsBuilder().put("gateway.recover_after_data_nodes", 2).put("node.data", false).put("node.master", true));, +        assertThat(master2.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        assertThat(data1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        assertThat(master2.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        Client data2 = startNode(settingsBuilder().put("gateway.recover_after_data_nodes", 2).put("node.data", true).put("node.master", false));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, master1).isEmpty(), equalTo(true));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, master2).isEmpty(), equalTo(true));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, data1).isEmpty(), equalTo(true));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, data2).isEmpty(), equalTo(true));, +++ b/src/test/java/org/elasticsearch/gateway/none/RecoverAfterNodesTests.java, +import com.google.common.collect.ImmutableSet;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.block.ClusterBlock;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.test.AbstractIntegrationTest;, +import org.elasticsearch.test.AbstractIntegrationTest.ClusterScope;, +import org.elasticsearch.test.AbstractIntegrationTest.Scope;, +@ClusterScope(scope = Scope.TEST, numNodes = 0), +public class RecoverAfterNodesTests extends AbstractIntegrationTest {, +    public ImmutableSet<ClusterBlock> waitForNoBlocksOnNode(TimeValue timeout, Client nodeClient) throws InterruptedException {, +        long start = System.currentTimeMillis();, +        ImmutableSet<ClusterBlock> blocks;, +        do {, +            blocks = nodeClient.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +                    .getState().blocks().global(ClusterBlockLevel.METADATA);, +        }, +        while (!blocks.isEmpty() && (System.currentTimeMillis() - start) < timeout.millis());, +        return blocks;, +    }, +, +    public Client startNode(Settings.Builder settings) {, +        String name = cluster().startNode(settings);, +        return cluster().clientNodeClient(name);, +        Client clientNode1 = startNode(settingsBuilder().put("gateway.recover_after_nodes", 3));, +        assertThat(clientNode1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        Client clientNode2 = startNode(settingsBuilder().put("gateway.recover_after_nodes", 3));, +        assertThat(clientNode1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        assertThat(clientNode2.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        Client clientNode3 = startNode(settingsBuilder().put("gateway.recover_after_nodes", 3));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, clientNode1).isEmpty(), equalTo(true));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, clientNode2).isEmpty(), equalTo(true));, +        assertThat(waitForNoBlocksOnNode(BLOCK_WAIT_TIMEOUT, clientNode3).isEmpty(), equalTo(true));, +        Client master1 = startNode(settingsBuilder().put("gateway.recover_after_master_nodes", 2).put("node.data", false).put("node.master", true));, +        assertThat(master1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        Client data1 = startNode(settingsBuilder().put("gateway.recover_after_master_nodes", 2).put("node.data", true).put("node.master", false));, +        assertThat(master1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        assertThat(data1.admin().cluster().prepareState().setLocal(true).execute().actionGet(), +        Client data2 = startNode(settingsBuilder().put("gateway.recover_after_master_nodes", 2).put("node.data", true).put("node.master", false));]