[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                NativeController nativeController = NativeControllerHolder.getNativeController(env);, +        MlLifeCycleService mlLifeCycleService = new MlLifeCycleService(env, clusterService, datafeedManager, autodetectProcessManager);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                NativeController nativeController = NativeControllerHolder.getNativeController(env);, +        MlLifeCycleService mlLifeCycleService = new MlLifeCycleService(env, clusterService, datafeedManager, autodetectProcessManager);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningFeatureSet.java, +import org.elasticsearch.env.Environment;, +    public MachineLearningFeatureSet(Environment environment, ClusterService clusterService, Client client,, +        this.enabled = XPackSettings.MACHINE_LEARNING_ENABLED.get(environment.settings());, +        if (enabled && XPackPlugin.transportClientMode(environment.settings()) == false, +                && XPackPlugin.isTribeClientNode(environment.settings()) == false) {, +                    NativeController nativeController = NativeControllerHolder.getNativeController(environment);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                NativeController nativeController = NativeControllerHolder.getNativeController(env);, +        MlLifeCycleService mlLifeCycleService = new MlLifeCycleService(env, clusterService, datafeedManager, autodetectProcessManager);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningFeatureSet.java, +import org.elasticsearch.env.Environment;, +    public MachineLearningFeatureSet(Environment environment, ClusterService clusterService, Client client,, +        this.enabled = XPackSettings.MACHINE_LEARNING_ENABLED.get(environment.settings());, +        if (enabled && XPackPlugin.transportClientMode(environment.settings()) == false, +                && XPackPlugin.isTribeClientNode(environment.settings()) == false) {, +                    NativeController nativeController = NativeControllerHolder.getNativeController(environment);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlLifeCycleService.java, +import org.elasticsearch.env.Environment;, +    private final Environment environment;, +    public MlLifeCycleService(Environment environment, ClusterService clusterService) {, +        this(environment, clusterService, null, null);, +    public MlLifeCycleService(Environment environment, ClusterService clusterService, DatafeedManager datafeedManager,, +        super(environment.settings());, +        this.environment = environment;, +                NativeController nativeController = NativeControllerHolder.getNativeController(environment);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                NativeController nativeController = NativeControllerHolder.getNativeController(env);, +        MlLifeCycleService mlLifeCycleService = new MlLifeCycleService(env, clusterService, datafeedManager, autodetectProcessManager);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningFeatureSet.java, +import org.elasticsearch.env.Environment;, +    public MachineLearningFeatureSet(Environment environment, ClusterService clusterService, Client client,, +        this.enabled = XPackSettings.MACHINE_LEARNING_ENABLED.get(environment.settings());, +        if (enabled && XPackPlugin.transportClientMode(environment.settings()) == false, +                && XPackPlugin.isTribeClientNode(environment.settings()) == false) {, +                    NativeController nativeController = NativeControllerHolder.getNativeController(environment);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlLifeCycleService.java, +import org.elasticsearch.env.Environment;, +    private final Environment environment;, +    public MlLifeCycleService(Environment environment, ClusterService clusterService) {, +        this(environment, clusterService, null, null);, +    public MlLifeCycleService(Environment environment, ClusterService clusterService, DatafeedManager datafeedManager,, +        super(environment.settings());, +        this.environment = environment;, +                NativeController nativeController = NativeControllerHolder.getNativeController(environment);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/NativeControllerHolder.java, +     * <code>null</code> is returned to tests where xpack.ml.autodetect_process=false., +    public static NativeController getNativeController(Environment environment) throws IOException {, +        if (MachineLearning.AUTODETECT_PROCESS.get(environment.settings())) {, +                    nativeController = new NativeController(environment, new NamedPipeHelper());, +     * Designed for use by objects that don't have access to the environment but know a native controller must exist, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +                NativeController nativeController = NativeControllerHolder.getNativeController(env);, +        MlLifeCycleService mlLifeCycleService = new MlLifeCycleService(env, clusterService, datafeedManager, autodetectProcessManager);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearningFeatureSet.java, +import org.elasticsearch.env.Environment;, +    public MachineLearningFeatureSet(Environment environment, ClusterService clusterService, Client client,, +        this.enabled = XPackSettings.MACHINE_LEARNING_ENABLED.get(environment.settings());, +        if (enabled && XPackPlugin.transportClientMode(environment.settings()) == false, +                && XPackPlugin.isTribeClientNode(environment.settings()) == false) {, +                    NativeController nativeController = NativeControllerHolder.getNativeController(environment);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlLifeCycleService.java, +import org.elasticsearch.env.Environment;, +    private final Environment environment;, +    public MlLifeCycleService(Environment environment, ClusterService clusterService) {, +        this(environment, clusterService, null, null);, +    public MlLifeCycleService(Environment environment, ClusterService clusterService, DatafeedManager datafeedManager,, +        super(environment.settings());, +        this.environment = environment;, +                NativeController nativeController = NativeControllerHolder.getNativeController(environment);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/NativeControllerHolder.java, +     * <code>null</code> is returned to tests where xpack.ml.autodetect_process=false., +    public static NativeController getNativeController(Environment environment) throws IOException {, +        if (MachineLearning.AUTODETECT_PROCESS.get(environment.settings())) {, +                    nativeController = new NativeController(environment, new NamedPipeHelper());, +     * Designed for use by objects that don't have access to the environment but know a native controller must exist, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/MachineLearningFeatureSetTests.java, +import org.elasticsearch.env.Environment;, +    private Settings commonSettings;, +        commonSettings = Settings.builder(), +                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toAbsolutePath()), +                .put(MachineLearning.AUTODETECT_PROCESS.getKey(), false), +                .build();, +        MachineLearningFeatureSet featureSet = new MachineLearningFeatureSet(new Environment(commonSettings), clusterService, client,, +                licenseState);, +        Settings.Builder settings = Settings.builder().put(commonSettings);, +        MachineLearningFeatureSet featureSet = new MachineLearningFeatureSet(new Environment(settings.build()), clusterService, client,, +                licenseState);, +        Settings.Builder settings = Settings.builder().put(commonSettings);, +        MachineLearningFeatureSet featureSet = new MachineLearningFeatureSet(new Environment(settings.build()), clusterService, client,, +                licenseState);, +        Settings.Builder settings = Settings.builder().put(commonSettings);, +        MachineLearningFeatureSet featureSet = new MachineLearningFeatureSet(new Environment(settings.build()),]