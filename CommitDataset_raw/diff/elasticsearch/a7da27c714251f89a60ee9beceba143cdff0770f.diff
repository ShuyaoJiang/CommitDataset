[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import org.elasticsearch.common.Nullable;, +        void onUnload(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, boolean wasEvicted, @Nullable AtomicFieldData fieldData);, +            listener.onUnload(index, fieldNames, fieldDataType, notification.wasEvicted(), notification.getValue());, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import org.elasticsearch.common.Nullable;, +        void onUnload(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, boolean wasEvicted, @Nullable AtomicFieldData fieldData);, +            listener.onUnload(index, fieldNames, fieldDataType, notification.wasEvicted(), notification.getValue());, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    private final IndicesFieldDataCache indicesFieldDataCache;, +        this(index, ImmutableSettings.Builder.EMPTY_SETTINGS, new IndicesFieldDataCache(ImmutableSettings.Builder.EMPTY_SETTINGS));, +    public IndexFieldDataService(Index index, @IndexSettings Settings indexSettings, IndicesFieldDataCache indicesFieldDataCache) {, +        this.indicesFieldDataCache = indicesFieldDataCache;, +    public void onUnload(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, boolean wasEvicted, @Nullable AtomicFieldData fieldData) {, +        if (fieldData != null) {, +            memoryUsedInBytes.dec(fieldData.getMemorySizeInBytes());, +        if (wasEvicted) {, +                    } else if ("node".equals(cacheType)) {, +                        cache = indicesFieldDataCache.buildIndexFieldDataCache(index, fieldNames, type, this);, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import org.elasticsearch.common.Nullable;, +        void onUnload(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, boolean wasEvicted, @Nullable AtomicFieldData fieldData);, +            listener.onUnload(index, fieldNames, fieldDataType, notification.wasEvicted(), notification.getValue());, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    private final IndicesFieldDataCache indicesFieldDataCache;, +        this(index, ImmutableSettings.Builder.EMPTY_SETTINGS, new IndicesFieldDataCache(ImmutableSettings.Builder.EMPTY_SETTINGS));, +    public IndexFieldDataService(Index index, @IndexSettings Settings indexSettings, IndicesFieldDataCache indicesFieldDataCache) {, +        this.indicesFieldDataCache = indicesFieldDataCache;, +    public void onUnload(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, boolean wasEvicted, @Nullable AtomicFieldData fieldData) {, +        if (fieldData != null) {, +            memoryUsedInBytes.dec(fieldData.getMemorySizeInBytes());, +        if (wasEvicted) {, +                    } else if ("node".equals(cacheType)) {, +                        cache = indicesFieldDataCache.buildIndexFieldDataCache(index, fieldNames, type, this);, +++ b/src/main/java/org/elasticsearch/indices/IndicesModule.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +        bind(IndicesFieldDataCache.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +import org.elasticsearch.common.Nullable;, +        void onUnload(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, boolean wasEvicted, @Nullable AtomicFieldData fieldData);, +            listener.onUnload(index, fieldNames, fieldDataType, notification.wasEvicted(), notification.getValue());, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +    private final IndicesFieldDataCache indicesFieldDataCache;, +        this(index, ImmutableSettings.Builder.EMPTY_SETTINGS, new IndicesFieldDataCache(ImmutableSettings.Builder.EMPTY_SETTINGS));, +    public IndexFieldDataService(Index index, @IndexSettings Settings indexSettings, IndicesFieldDataCache indicesFieldDataCache) {, +        this.indicesFieldDataCache = indicesFieldDataCache;, +    public void onUnload(Index index, FieldMapper.Names fieldNames, FieldDataType fieldDataType, boolean wasEvicted, @Nullable AtomicFieldData fieldData) {, +        if (fieldData != null) {, +            memoryUsedInBytes.dec(fieldData.getMemorySizeInBytes());, +        if (wasEvicted) {, +                    } else if ("node".equals(cacheType)) {, +                        cache = indicesFieldDataCache.buildIndexFieldDataCache(index, fieldNames, type, this);, +++ b/src/main/java/org/elasticsearch/indices/IndicesModule.java, +import org.elasticsearch.indices.fielddata.cache.IndicesFieldDataCache;, +        bind(IndicesFieldDataCache.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/indices/fielddata/cache/IndicesFieldDataCache.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.indices.fielddata.cache;, +, +import com.google.common.cache.*;, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.SegmentReader;, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.fielddata.AtomicFieldData;, +import org.elasticsearch.index.fielddata.FieldDataType;, +import org.elasticsearch.index.fielddata.IndexFieldData;, +import org.elasticsearch.index.fielddata.IndexFieldDataCache;, +import org.elasticsearch.index.mapper.FieldMapper;, +import org.elasticsearch.monitor.jvm.JvmInfo;, +]