[+++ b/modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/org.elasticsearch.txt, +  boolean isAfter(JodaCompatibleZonedDateTime), +  boolean isBefore(JodaCompatibleZonedDateTime), +  boolean isEqual(JodaCompatibleZonedDateTime), +++ b/modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/org.elasticsearch.txt, +  boolean isAfter(JodaCompatibleZonedDateTime), +  boolean isBefore(JodaCompatibleZonedDateTime), +  boolean isEqual(JodaCompatibleZonedDateTime), +++ b/server/src/main/java/org/elasticsearch/script/JodaCompatibleZonedDateTime.java, +    public boolean isAfter(JodaCompatibleZonedDateTime o) {, +        return dt.isAfter(o.getZonedDateTime());, +    public boolean isBefore(JodaCompatibleZonedDateTime o) {, +        return dt.isBefore(o.getZonedDateTime());, +    public boolean isEqual(JodaCompatibleZonedDateTime o) {, +        return dt.isEqual(o.getZonedDateTime());, +++ b/modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi/org.elasticsearch.txt, +  boolean isAfter(JodaCompatibleZonedDateTime), +  boolean isBefore(JodaCompatibleZonedDateTime), +  boolean isEqual(JodaCompatibleZonedDateTime), +++ b/server/src/main/java/org/elasticsearch/script/JodaCompatibleZonedDateTime.java, +    public boolean isAfter(JodaCompatibleZonedDateTime o) {, +        return dt.isAfter(o.getZonedDateTime());, +    public boolean isBefore(JodaCompatibleZonedDateTime o) {, +        return dt.isBefore(o.getZonedDateTime());, +    public boolean isEqual(JodaCompatibleZonedDateTime o) {, +        return dt.isEqual(o.getZonedDateTime());, +++ b/server/src/test/java/org/elasticsearch/script/JodaCompatibleZonedDateTimeTests.java, +, +    public void testIsEqual() {, +        assertTrue(javaTime.isEqual(javaTime));, +    }, +, +    public void testIsAfter() {, +        long millis = randomLongBetween(0, Integer.MAX_VALUE / 2);, +        JodaCompatibleZonedDateTime beforeTime = new JodaCompatibleZonedDateTime(Instant.ofEpochMilli(millis), ZoneOffset.ofHours(-7));, +        millis = randomLongBetween(millis + 1, Integer.MAX_VALUE);, +        JodaCompatibleZonedDateTime afterTime = new JodaCompatibleZonedDateTime(Instant.ofEpochMilli(millis), ZoneOffset.ofHours(-7));, +        assertTrue(afterTime.isAfter(beforeTime));, +    }, +    public void testIsBefore() {, +        long millis = randomLongBetween(0, Integer.MAX_VALUE / 2);, +        JodaCompatibleZonedDateTime beforeTime = new JodaCompatibleZonedDateTime(Instant.ofEpochMilli(millis), ZoneOffset.ofHours(-7));, +        millis = randomLongBetween(millis + 1, Integer.MAX_VALUE);, +        JodaCompatibleZonedDateTime afterTime = new JodaCompatibleZonedDateTime(Instant.ofEpochMilli(millis), ZoneOffset.ofHours(-7));, +        assertTrue(beforeTime.isBefore(afterTime));, +    }]