[+++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +            output.put(ClusterName.CLUSTER_NAME_SETTING.getKey(), ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY).value());, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +            output.put(ClusterName.CLUSTER_NAME_SETTING.getKey(), ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY).value());, +++ b/core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java, +    public void testDefaultClusterName() {, +        Settings settings = InternalSettingsPreparer.prepareSettings(Settings.EMPTY);, +        assertEquals("elasticsearch", settings.get("cluster.name"));, +        settings = InternalSettingsPreparer.prepareSettings(Settings.builder().put("cluster.name", "foobar").build());, +        assertEquals("foobar", settings.get("cluster.name"));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +            output.put(ClusterName.CLUSTER_NAME_SETTING.getKey(), ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY).value());, +++ b/core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java, +    public void testDefaultClusterName() {, +        Settings settings = InternalSettingsPreparer.prepareSettings(Settings.EMPTY);, +        assertEquals("elasticsearch", settings.get("cluster.name"));, +        settings = InternalSettingsPreparer.prepareSettings(Settings.builder().put("cluster.name", "foobar").build());, +        assertEquals("foobar", settings.get("cluster.name"));, +    }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +            return constructor.newInstance(name, source, root.getExpressions());, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +            output.put(ClusterName.CLUSTER_NAME_SETTING.getKey(), ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY).value());, +++ b/core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java, +    public void testDefaultClusterName() {, +        Settings settings = InternalSettingsPreparer.prepareSettings(Settings.EMPTY);, +        assertEquals("elasticsearch", settings.get("cluster.name"));, +        settings = InternalSettingsPreparer.prepareSettings(Settings.builder().put("cluster.name", "foobar").build());, +        assertEquals("foobar", settings.get("cluster.name"));, +    }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +            return constructor.newInstance(name, source, root.getExpressions());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +            output.put(ClusterName.CLUSTER_NAME_SETTING.getKey(), ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY).value());, +++ b/core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java, +    public void testDefaultClusterName() {, +        Settings settings = InternalSettingsPreparer.prepareSettings(Settings.EMPTY);, +        assertEquals("elasticsearch", settings.get("cluster.name"));, +        settings = InternalSettingsPreparer.prepareSettings(Settings.builder().put("cluster.name", "foobar").build());, +        assertEquals("foobar", settings.get("cluster.name"));, +    }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +            return constructor.newInstance(name, source, root.getExpressions());, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +            output.put(ClusterName.CLUSTER_NAME_SETTING.getKey(), ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY).value());, +++ b/core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java, +    public void testDefaultClusterName() {, +        Settings settings = InternalSettingsPreparer.prepareSettings(Settings.EMPTY);, +        assertEquals("elasticsearch", settings.get("cluster.name"));, +        settings = InternalSettingsPreparer.prepareSettings(Settings.builder().put("cluster.name", "foobar").build());, +        assertEquals("foobar", settings.get("cluster.name"));, +    }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +            return constructor.newInstance(name, source, root.getExpressions());, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +            output.put(ClusterName.CLUSTER_NAME_SETTING.getKey(), ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY).value());, +++ b/core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java, +    public void testDefaultClusterName() {, +        Settings settings = InternalSettingsPreparer.prepareSettings(Settings.EMPTY);, +        assertEquals("elasticsearch", settings.get("cluster.name"));, +        settings = InternalSettingsPreparer.prepareSettings(Settings.builder().put("cluster.name", "foobar").build());, +        assertEquals("foobar", settings.get("cluster.name"));, +    }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +            return constructor.newInstance(name, source, root.getExpressions());, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +import java.util.ArrayDeque;, +import java.util.Deque;, +import java.util.Iterator;, +import java.util.function.Consumer;, +public final class Locals {, +    /**, +     * Tracks reserved variables.  Must be given to any source of input, +     * prior to beginning the analysis phase so that reserved variables, +     * are known ahead of time to assign appropriate slots without, +     * being wasteful., +     */, +    public interface Reserved {, +        void markReserved(String name);, +        boolean isReserved(String name);, +, +        void setMaxLoopCounter(int max);, +        int getMaxLoopCounter();, +    }]