[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +++ b/core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +++ b/core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java, +import com.carrotsearch.randomizedtesting.RandomizedTest;, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksAction;, +import org.elasticsearch.client.ElasticsearchResponseException;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.SuppressForbidden;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.test.rest.client.RestTestResponse;, +import org.elasticsearch.test.rest.parser.RestTestParseException;, +import org.elasticsearch.test.rest.parser.RestTestSuiteParser;, +import org.elasticsearch.test.rest.section.DoSection;, +import org.elasticsearch.test.rest.section.ExecutableSection;, +import org.elasticsearch.test.rest.section.RestTestSuite;, +import org.elasticsearch.test.rest.section.SkipSection;, +import org.elasticsearch.test.rest.section.TestSection;, +import org.elasticsearch.test.rest.spec.RestApi;, +import org.elasticsearch.test.rest.spec.RestSpec;, +import org.elasticsearch.test.rest.support.FileUtils;, +import org.junit.After;, +import org.junit.AfterClass;, +import org.junit.Before;, +import org.junit.BeforeClass;, +, +     * This separator pattern matches ',' except it is preceded by a '\'., +     * This allows us to support ',' within paths when it is escaped with a slash., +    public static void initExecutionContext() throws IOException {, +        } catch (ElasticsearchResponseException e) {, +            if (e.getElasticsearchResponse().getStatusLine().getStatusCode() != 404) {, +    public void logIfThereAreRunningTasks() throws InterruptedException, IOException {, +        RestTestResponse tasks = adminExecutionContext.callApi("tasks.list", emptyMap(), emptyList(), emptyMap());, +    public void reset() throws IOException {, +            assumeFalse("[" + testCandidate.getTestPath() + "] skipped, reason: blacklisted", blacklistedPathMatcher, +                    .isSuffixMatch(testPath));, +            messageBuilder.append("[").append(description).append("] skipped, reason: features "), +                    .append(skipSection.getFeatures()).append(" not supported");, +    public Set<String> runningTasks(RestTestResponse response) throws IOException {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +++ b/core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java, +import com.carrotsearch.randomizedtesting.RandomizedTest;, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksAction;, +import org.elasticsearch.client.ElasticsearchResponseException;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.SuppressForbidden;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.test.rest.client.RestTestResponse;, +import org.elasticsearch.test.rest.parser.RestTestParseException;, +import org.elasticsearch.test.rest.parser.RestTestSuiteParser;, +import org.elasticsearch.test.rest.section.DoSection;, +import org.elasticsearch.test.rest.section.ExecutableSection;, +import org.elasticsearch.test.rest.section.RestTestSuite;, +import org.elasticsearch.test.rest.section.SkipSection;, +import org.elasticsearch.test.rest.section.TestSection;, +import org.elasticsearch.test.rest.spec.RestApi;, +import org.elasticsearch.test.rest.spec.RestSpec;, +import org.elasticsearch.test.rest.support.FileUtils;, +import org.junit.After;, +import org.junit.AfterClass;, +import org.junit.Before;, +import org.junit.BeforeClass;, +, +     * This separator pattern matches ',' except it is preceded by a '\'., +     * This allows us to support ',' within paths when it is escaped with a slash., +    public static void initExecutionContext() throws IOException {, +        } catch (ElasticsearchResponseException e) {, +            if (e.getElasticsearchResponse().getStatusLine().getStatusCode() != 404) {, +    public void logIfThereAreRunningTasks() throws InterruptedException, IOException {, +        RestTestResponse tasks = adminExecutionContext.callApi("tasks.list", emptyMap(), emptyList(), emptyMap());, +    public void reset() throws IOException {, +            assumeFalse("[" + testCandidate.getTestPath() + "] skipped, reason: blacklisted", blacklistedPathMatcher, +                    .isSuffixMatch(testPath));, +            messageBuilder.append("[").append(description).append("] skipped, reason: features "), +                    .append(skipSection.getFeatures()).append(" not supported");, +    public Set<String> runningTasks(RestTestResponse response) throws IOException {, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/RestTestExecutionContext.java, +import org.elasticsearch.client.ElasticsearchResponseException;, +import org.elasticsearch.test.rest.client.RestTestClient;, +import org.elasticsearch.test.rest.client.RestTestResponse;, +    private RestTestClient restTestClient;, +    private RestTestResponse response;, +    public RestTestResponse callApi(String apiName, Map<String, String> params, List<Map<String, Object>> bodies,, +                                    Map<String, String> headers) throws IOException  {, +        } catch(ElasticsearchResponseException e) {, +            response = new RestTestResponse(e);]