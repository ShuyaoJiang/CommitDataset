[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/search/DeletionAwareConstantScoreQuery.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.apache.lucene.search;, +, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.Term;, +, +import java.io.IOException;, +import java.util.Set;, +, +/**, + * @author kimchy (shay.banon), + */, +// LUCENE MONITOR: Against ConstantScoreQuery, basically added logic in the doc iterator to take deletions into account, +// So it can basically be cached safely even with a reader that changes deletions but remain with teh same cache key, +// See more: https://issues.apache.org/jira/browse/LUCENE-2468, +public class DeletionAwareConstantScoreQuery extends Query {, +    protected final Filter filter;, +    protected final boolean deletionAware;, +, +    public DeletionAwareConstantScoreQuery(Filter filter) {, +        this(filter, false);, +    }, +, +    public DeletionAwareConstantScoreQuery(Filter filter, boolean deletionAware) {, +        this.filter = filter;, +        this.deletionAware = deletionAware;, +    }, +, +    /**, +     * Returns the encapsulated filter, +     */, +    public Filter getFilter() {, +        return filter;, +    }, +, +    @Override, +    public Query rewrite(IndexReader reader) throws IOException {, +        return this;, +    }, +, +    @Override, +    public void extractTerms(Set<Term> terms) {, +        // OK to not add any terms when used for MultiSearcher,, +        // but may not be OK for highlighting, +    }, +, +    protected class ConstantWeight extends Weight {, +        private Similarity similarity;, +        private float queryNorm;, +        private float queryWeight;, +, +        public ConstantWeight(Searcher searcher) {, +            this.similarity = getSimilarity(searcher);, +        }, +, +        @Override, +        public Query getQuery() {, +            return DeletionAwareConstantScoreQuery.this;, +        }, +, +        @Override, +        public float getValue() {, +            return queryWeight;, +        }, +, +        @Override, +        public float sumOfSquaredWeights() throws IOException {, +            queryWeight = getBoost();, +            return queryWeight * queryWeight;, +        }, +, +        @Override, +        public void normalize(float norm) {, +            this.queryNorm = norm;, +            queryWeight *= this.queryNorm;, +        }, +, +        @Override, +        public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {, +            return new ConstantScorer(similarity, reader, this);, +        }]