[+++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +    public List<Term> getTerms() {, +        return Arrays.asList(terms);, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +    public List<Term> getTerms() {, +        return Arrays.asList(terms);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/percolator/ExtractQueryTermsService.java, +import org.apache.lucene.queries.BlendedTermQuery;, +import org.apache.lucene.queries.CommonTermsQuery;, +        } else if (query instanceof CommonTermsQuery) {, +            List<Term> terms = ((CommonTermsQuery) query).getTerms();, +            return new HashSet<>(terms);, +        } else if (query instanceof BlendedTermQuery) {, +            List<Term> terms = ((BlendedTermQuery) query).getTerms();, +            return new HashSet<>(terms);, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +    public List<Term> getTerms() {, +        return Arrays.asList(terms);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/percolator/ExtractQueryTermsService.java, +import org.apache.lucene.queries.BlendedTermQuery;, +import org.apache.lucene.queries.CommonTermsQuery;, +        } else if (query instanceof CommonTermsQuery) {, +            List<Term> terms = ((CommonTermsQuery) query).getTerms();, +            return new HashSet<>(terms);, +        } else if (query instanceof BlendedTermQuery) {, +            List<Term> terms = ((BlendedTermQuery) query).getTerms();, +            return new HashSet<>(terms);, +++ b/core/src/test/java/org/elasticsearch/index/percolator/ExtractQueryTermsServiceTests.java, +import org.apache.lucene.queries.BlendedTermQuery;, +import org.apache.lucene.queries.CommonTermsQuery;, +    public void testExtractQueryMetadata_commonTermsQuery() {, +        CommonTermsQuery commonTermsQuery = new CommonTermsQuery(BooleanClause.Occur.SHOULD, BooleanClause.Occur.SHOULD, 100);, +        commonTermsQuery.add(new Term("_field", "_term1"));, +        commonTermsQuery.add(new Term("_field", "_term2"));, +        List<Term> terms = new ArrayList<>(ExtractQueryTermsService.extractQueryTerms(commonTermsQuery));, +        Collections.sort(terms);, +        assertThat(terms.size(), equalTo(2));, +        assertThat(terms.get(0).field(), equalTo("_field"));, +        assertThat(terms.get(0).text(), equalTo("_term1"));, +        assertThat(terms.get(1).field(), equalTo("_field"));, +        assertThat(terms.get(1).text(), equalTo("_term2"));, +    }, +, +    public void testExtractQueryMetadata_blendedTermQuery() {, +        Term[] terms = new Term[]{new Term("_field", "_term1"), new Term("_field", "_term2")};, +        BlendedTermQuery commonTermsQuery = BlendedTermQuery.booleanBlendedQuery(terms, false);, +        List<Term> result = new ArrayList<>(ExtractQueryTermsService.extractQueryTerms(commonTermsQuery));, +        Collections.sort(result);, +        assertThat(result.size(), equalTo(2));, +        assertThat(result.get(0).field(), equalTo("_field"));, +        assertThat(result.get(0).text(), equalTo("_term1"));, +        assertThat(result.get(1).field(), equalTo("_field"));, +        assertThat(result.get(1).text(), equalTo("_term2"));, +    }, +, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +    public List<Term> getTerms() {, +        return Arrays.asList(terms);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/percolator/ExtractQueryTermsService.java, +import org.apache.lucene.queries.BlendedTermQuery;, +import org.apache.lucene.queries.CommonTermsQuery;, +        } else if (query instanceof CommonTermsQuery) {, +            List<Term> terms = ((CommonTermsQuery) query).getTerms();, +            return new HashSet<>(terms);, +        } else if (query instanceof BlendedTermQuery) {, +            List<Term> terms = ((BlendedTermQuery) query).getTerms();, +            return new HashSet<>(terms);, +++ b/core/src/test/java/org/elasticsearch/index/percolator/ExtractQueryTermsServiceTests.java, +import org.apache.lucene.queries.BlendedTermQuery;, +import org.apache.lucene.queries.CommonTermsQuery;, +    public void testExtractQueryMetadata_commonTermsQuery() {, +        CommonTermsQuery commonTermsQuery = new CommonTermsQuery(BooleanClause.Occur.SHOULD, BooleanClause.Occur.SHOULD, 100);, +        commonTermsQuery.add(new Term("_field", "_term1"));, +        commonTermsQuery.add(new Term("_field", "_term2"));, +        List<Term> terms = new ArrayList<>(ExtractQueryTermsService.extractQueryTerms(commonTermsQuery));, +        Collections.sort(terms);, +        assertThat(terms.size(), equalTo(2));, +        assertThat(terms.get(0).field(), equalTo("_field"));, +        assertThat(terms.get(0).text(), equalTo("_term1"));, +        assertThat(terms.get(1).field(), equalTo("_field"));, +        assertThat(terms.get(1).text(), equalTo("_term2"));, +    }, +, +    public void testExtractQueryMetadata_blendedTermQuery() {, +        Term[] terms = new Term[]{new Term("_field", "_term1"), new Term("_field", "_term2")};, +        BlendedTermQuery commonTermsQuery = BlendedTermQuery.booleanBlendedQuery(terms, false);, +        List<Term> result = new ArrayList<>(ExtractQueryTermsService.extractQueryTerms(commonTermsQuery));, +        Collections.sort(result);, +        assertThat(result.size(), equalTo(2));, +        assertThat(result.get(0).field(), equalTo("_field"));, +        assertThat(result.get(0).text(), equalTo("_term1"));, +        assertThat(result.get(1).field(), equalTo("_field"));]