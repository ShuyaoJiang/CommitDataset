[+++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    /** Given a value that comes from the stored fields API, convert it to the, +     *  expected type. For instance a date field would store dates as longs and, +     *  format it back to a string in this method. */, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    /** Given a value that comes from the stored fields API, convert it to the, +     *  expected type. For instance a date field would store dates as longs and, +     *  format it back to a string in this method. */, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java, +        public BytesReference valueForSearch(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    /** Given a value that comes from the stored fields API, convert it to the, +     *  expected type. For instance a date field would store dates as longs and, +     *  format it back to a string in this method. */, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java, +        public BytesReference valueForSearch(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BooleanFieldMapper.java, +        public Boolean valueForSearch(Object value) {, +                return null;, +            switch(value.toString()) {, +            case "F":, +                return false;, +            case "T":, +                return true;, +            default:, +                throw new IllegalArgumentException("Expected [T] or [F] but got [" + value + "]");, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    /** Given a value that comes from the stored fields API, convert it to the, +     *  expected type. For instance a date field would store dates as longs and, +     *  format it back to a string in this method. */, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java, +        public BytesReference valueForSearch(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BooleanFieldMapper.java, +        public Boolean valueForSearch(Object value) {, +                return null;, +            switch(value.toString()) {, +            case "F":, +                return false;, +            case "T":, +                return true;, +            default:, +                throw new IllegalArgumentException("Expected [T] or [F] but got [" + value + "]");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +        public Byte valueForSearch(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    /** Given a value that comes from the stored fields API, convert it to the, +     *  expected type. For instance a date field would store dates as longs and, +     *  format it back to a string in this method. */, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java, +        public BytesReference valueForSearch(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BooleanFieldMapper.java, +        public Boolean valueForSearch(Object value) {, +                return null;, +            switch(value.toString()) {, +            case "F":, +                return false;, +            case "T":, +                return true;, +            default:, +                throw new IllegalArgumentException("Expected [T] or [F] but got [" + value + "]");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +        public Byte valueForSearch(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    /** Given a value that comes from the stored fields API, convert it to the, +     *  expected type. For instance a date field would store dates as longs and, +     *  format it back to a string in this method. */, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java, +        public BytesReference valueForSearch(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BooleanFieldMapper.java, +        public Boolean valueForSearch(Object value) {, +                return null;, +            switch(value.toString()) {, +            case "F":, +                return false;, +            case "T":, +                return true;, +            default:, +                throw new IllegalArgumentException("Expected [T] or [F] but got [" + value + "]");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +        public Byte valueForSearch(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +            Long val = (Long) value;, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    /** Given a value that comes from the stored fields API, convert it to the, +     *  expected type. For instance a date field would store dates as longs and, +     *  format it back to a string in this method. */, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java, +        public BytesReference valueForSearch(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BooleanFieldMapper.java, +        public Boolean valueForSearch(Object value) {]