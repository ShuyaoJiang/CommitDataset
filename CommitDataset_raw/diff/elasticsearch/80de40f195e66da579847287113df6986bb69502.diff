[+++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +import org.elasticsearch.cluster.routing.MutableShardRouting;, +import org.elasticsearch.cluster.routing.RoutingNode;, +import org.elasticsearch.cluster.routing.RoutingNodes;, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +        private static boolean lessThan(float delta, float threshold) {, +            /* deltas close to the threshold are "rounded" to the threshold manually, +               to prevent floating point problems if the delta is very close to the, +               threshold ie. 1.000000002 which can trigger unnecessary balance actions*/, +            return delta <= threshold + 0.001f;, +        }, +, +                                delta = lessThan(delta, threshold) ? delta : sorter.weight(Operation.THRESHOLD_CHECK, maxNode) - sorter.weight(Operation.THRESHOLD_CHECK, minNode);, +                                if (lessThan(delta, threshold)) {, +                                 * a relocation must bring us closer to the balance if we only achieve the same delta the relocation is useless */, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +import org.elasticsearch.cluster.routing.MutableShardRouting;, +import org.elasticsearch.cluster.routing.RoutingNode;, +import org.elasticsearch.cluster.routing.RoutingNodes;, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +        private static boolean lessThan(float delta, float threshold) {, +            /* deltas close to the threshold are "rounded" to the threshold manually, +               to prevent floating point problems if the delta is very close to the, +               threshold ie. 1.000000002 which can trigger unnecessary balance actions*/, +            return delta <= threshold + 0.001f;, +        }, +, +                                delta = lessThan(delta, threshold) ? delta : sorter.weight(Operation.THRESHOLD_CHECK, maxNode) - sorter.weight(Operation.THRESHOLD_CHECK, minNode);, +                                if (lessThan(delta, threshold)) {, +                                 * a relocation must bring us closer to the balance if we only achieve the same delta the relocation is useless */, +++ b/src/test/java/org/elasticsearch/cluster/routing/allocation/NodeVersionAllocationDeciderTests.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +            clusterState = stabilize(clusterState, service);, +        clusterState = stabilize(clusterState, service);, +        clusterState = stabilize(clusterState, service);, +        clusterState = stabilize(clusterState, service);, +        clusterState = stabilize(clusterState, service);, +    private ClusterState stabilize(ClusterState clusterState, AllocationService service) {, +        boolean stable = false;, +        for (int i = 0; i < 1000; i++) {   // at most 200 iters - this should be enough for all tests, +            if (stable = (routingTable == prev)) {, +            }, +        logger.info("stabilized success [{}]", stable);, +        assertThat(stable, is(true));]