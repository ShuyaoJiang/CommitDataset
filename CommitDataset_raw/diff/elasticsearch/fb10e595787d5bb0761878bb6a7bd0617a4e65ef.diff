[+++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryService.java, +    public static final String SETTING_DISCOVERY_SEED = "discovery.id.seed";, +, +        String seed = settings.get(DiscoveryService.SETTING_DISCOVERY_SEED);, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryService.java, +    public static final String SETTING_DISCOVERY_SEED = "discovery.id.seed";, +, +        String seed = settings.get(DiscoveryService.SETTING_DISCOVERY_SEED);, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsBuilder.java, +import org.apache.lucene.index.DocValues;, +import org.apache.lucene.util.Accountable;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.fielddata.*;, +import org.elasticsearch.index.fielddata.plain.AbstractAtomicOrdinalsFieldData;, +import java.util.Collection;, +import java.util.Collections;, +    public static IndexOrdinalsFieldData buildEmpty(IndexSettings indexSettings, final IndexReader indexReader, IndexOrdinalsFieldData indexFieldData) throws IOException {, +        assert indexReader.leaves().size() > 1;, +, +        final AtomicOrdinalsFieldData[] atomicFD = new AtomicOrdinalsFieldData[indexReader.leaves().size()];, +        final RandomAccessOrds[] subs = new RandomAccessOrds[indexReader.leaves().size()];, +        for (int i = 0; i < indexReader.leaves().size(); ++i) {, +            atomicFD[i] = new AbstractAtomicOrdinalsFieldData() {, +                @Override, +                public RandomAccessOrds getOrdinalsValues() {, +                    return DocValues.emptySortedSet();, +                }, +, +                @Override, +                public long ramBytesUsed() {, +                    return 0;, +                }, +, +                @Override, +                public Collection<Accountable> getChildResources() {, +                    return Collections.emptyList();, +                }, +, +                @Override, +                public void close() {, +                }, +            };, +            subs[i] = atomicFD[i].getOrdinalsValues();, +        }, +        final OrdinalMap ordinalMap = OrdinalMap.build(null, subs, PackedInts.DEFAULT);, +        return new InternalGlobalOrdinalsIndexFieldData(indexSettings, indexFieldData.getFieldNames(),, +                indexFieldData.getFieldDataType(), atomicFD, ordinalMap, 0, +        );, +    }, +, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryService.java, +    public static final String SETTING_DISCOVERY_SEED = "discovery.id.seed";, +, +        String seed = settings.get(DiscoveryService.SETTING_DISCOVERY_SEED);, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsBuilder.java, +import org.apache.lucene.index.DocValues;, +import org.apache.lucene.util.Accountable;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.fielddata.*;, +import org.elasticsearch.index.fielddata.plain.AbstractAtomicOrdinalsFieldData;, +import java.util.Collection;, +import java.util.Collections;, +    public static IndexOrdinalsFieldData buildEmpty(IndexSettings indexSettings, final IndexReader indexReader, IndexOrdinalsFieldData indexFieldData) throws IOException {, +        assert indexReader.leaves().size() > 1;, +, +        final AtomicOrdinalsFieldData[] atomicFD = new AtomicOrdinalsFieldData[indexReader.leaves().size()];, +        final RandomAccessOrds[] subs = new RandomAccessOrds[indexReader.leaves().size()];, +        for (int i = 0; i < indexReader.leaves().size(); ++i) {, +            atomicFD[i] = new AbstractAtomicOrdinalsFieldData() {, +                @Override, +                public RandomAccessOrds getOrdinalsValues() {, +                    return DocValues.emptySortedSet();, +                }, +, +                @Override, +                public long ramBytesUsed() {, +                    return 0;, +                }, +, +                @Override, +                public Collection<Accountable> getChildResources() {, +                    return Collections.emptyList();, +                }, +, +                @Override, +                public void close() {, +                }, +            };, +            subs[i] = atomicFD[i].getOrdinalsValues();, +        }, +        final OrdinalMap ordinalMap = OrdinalMap.build(null, subs, PackedInts.DEFAULT);, +        return new InternalGlobalOrdinalsIndexFieldData(indexSettings, indexFieldData.getFieldNames(),, +                indexFieldData.getFieldDataType(), atomicFD, ordinalMap, 0, +        );, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/plain/AbstractIndexFieldData.java, +            // Some leaf readers may be wrapped and report different set of fields and use the same cache key., +            // If a field can't be found then it doesn't mean it isn't there,, +            // so if a field doesn't exist then we don't cache it and just return an empty field data instance.]