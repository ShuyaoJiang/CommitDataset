[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java, +import org.elasticsearch.xpack.sql.plugin.sql.action.SqlTranslateAction;, +                action.equals(JdbcAction.NAME) ||, +                action.equals(SqlTranslateAction.NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java, +import org.elasticsearch.xpack.sql.plugin.sql.action.SqlTranslateAction;, +                action.equals(JdbcAction.NAME) ||, +                action.equals(SqlTranslateAction.NAME);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlLicenseIT.java, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.search.fetch.subphase.FetchSourceContext;, +import org.elasticsearch.xpack.sql.plugin.sql.action.SqlTranslateAction;, +import org.elasticsearch.xpack.sql.plugin.sql.action.SqlTranslateResponse;, +    public void testSqlTranslateActionLicense() throws Exception {, +        disableSqlLicensing();, +                () -> client().prepareExecute(SqlTranslateAction.INSTANCE).query("SELECT * FROM test").get());, +        assertThat(e.getMessage(), equalTo("current license is non-compliant for [sql]"));, +        enableSqlLicensing();, +        SqlTranslateResponse response = client().prepareExecute(SqlTranslateAction.INSTANCE).query("SELECT * FROM test").get();, +        SearchSourceBuilder source = response.source();, +        assertThat(source.docValueFields(), Matchers.contains("count"));, +        FetchSourceContext fetchSource = source.fetchSource();, +        assertThat(fetchSource.includes(), Matchers.arrayContaining("data"));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java, +import org.elasticsearch.xpack.sql.plugin.sql.action.SqlTranslateAction;, +                action.equals(JdbcAction.NAME) ||, +                action.equals(SqlTranslateAction.NAME);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlLicenseIT.java, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.search.fetch.subphase.FetchSourceContext;, +import org.elasticsearch.xpack.sql.plugin.sql.action.SqlTranslateAction;, +import org.elasticsearch.xpack.sql.plugin.sql.action.SqlTranslateResponse;, +    public void testSqlTranslateActionLicense() throws Exception {, +        disableSqlLicensing();, +                () -> client().prepareExecute(SqlTranslateAction.INSTANCE).query("SELECT * FROM test").get());, +        assertThat(e.getMessage(), equalTo("current license is non-compliant for [sql]"));, +        enableSqlLicensing();, +        SqlTranslateResponse response = client().prepareExecute(SqlTranslateAction.INSTANCE).query("SELECT * FROM test").get();, +        SearchSourceBuilder source = response.source();, +        assertThat(source.docValueFields(), Matchers.contains("count"));, +        FetchSourceContext fetchSource = source.fetchSource();, +        assertThat(fetchSource.includes(), Matchers.arrayContaining("data"));, +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlTranslateActionIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.sql;, +, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.action.support.WriteRequest;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.search.fetch.subphase.FetchSourceContext;, +import org.elasticsearch.search.sort.SortBuilders;, +import org.elasticsearch.xpack.sql.plugin.sql.action.SqlTranslateAction;, +import org.elasticsearch.xpack.sql.plugin.sql.action.SqlTranslateResponse;, +, +import static java.util.Collections.singletonList;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +, +public class SqlTranslateActionIT extends AbstractSqlIntegTestCase {, +, +    public void testSqlTranslateAction() throws Exception {, +        assertAcked(client().admin().indices().prepareCreate("test").get());, +        client().prepareBulk(), +                .add(new IndexRequest("test", "doc", "1").source("data", "bar", "count", 42)), +                .add(new IndexRequest("test", "doc", "2").source("data", "baz", "count", 43)), +                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE), +                .get();, +        ensureYellow("test");, +, +        boolean columnOrder = randomBoolean();, +        String columns = columnOrder ? "data, count" : "count, data";, +        SqlTranslateResponse response = client().prepareExecute(SqlTranslateAction.INSTANCE), +                .query("SELECT " + columns + " FROM test ORDER BY count").get();, +        SearchSourceBuilder source = response.source();, +        FetchSourceContext fetch = source.fetchSource();, +        assertEquals(true, fetch.fetchSource());, +        assertArrayEquals(new String[] { "data" }, fetch.includes());, +        assertEquals(singletonList("count"), source.docValueFields());, +        assertEquals(singletonList(SortBuilders.fieldSort("count")), source.sorts());, +    }, +}, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java, +import org.elasticsearch.xpack.sql.plugin.sql.action.SqlTranslateAction;, +                action.equals(JdbcAction.NAME) ||, +                action.equals(SqlTranslateAction.NAME);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlLicenseIT.java, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.search.fetch.subphase.FetchSourceContext;, +import org.elasticsearch.xpack.sql.plugin.sql.action.SqlTranslateAction;, +import org.elasticsearch.xpack.sql.plugin.sql.action.SqlTranslateResponse;, +    public void testSqlTranslateActionLicense() throws Exception {, +        disableSqlLicensing();, +                () -> client().prepareExecute(SqlTranslateAction.INSTANCE).query("SELECT * FROM test").get());, +        assertThat(e.getMessage(), equalTo("current license is non-compliant for [sql]"));, +        enableSqlLicensing();, +        SqlTranslateResponse response = client().prepareExecute(SqlTranslateAction.INSTANCE).query("SELECT * FROM test").get();]