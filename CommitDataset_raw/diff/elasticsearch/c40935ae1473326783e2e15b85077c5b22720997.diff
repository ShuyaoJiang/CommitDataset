[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.index.mapper.DocumentMapper;, +import java.io.IOException;, +, +            final DocumentMapper documentMapper = mapperService.documentMapper(request.type());, +            documentMapper.refreshSource();, +, +            mappingUpdatedAction.execute(new MappingUpdatedAction.MappingUpdatedRequest(request.index(), request.type(), documentMapper.mappingSource()), new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {, +                    try {, +                        logger.warn("Failed to update master on updated mapping for index [" + request.index() + "], type [" + request.type() + "] and source [" + documentMapper.mappingSource().string() + "]", e);, +                    } catch (IOException e1) {, +                        // ignore, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.index.mapper.DocumentMapper;, +import java.io.IOException;, +, +            final DocumentMapper documentMapper = mapperService.documentMapper(request.type());, +            documentMapper.refreshSource();, +, +            mappingUpdatedAction.execute(new MappingUpdatedAction.MappingUpdatedRequest(request.index(), request.type(), documentMapper.mappingSource()), new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {, +                    try {, +                        logger.warn("Failed to update master on updated mapping for index [" + request.index() + "], type [" + request.type() + "] and source [" + documentMapper.mappingSource().string() + "]", e);, +                    } catch (IOException e1) {, +                        // ignore, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, +import org.elasticsearch.ElasticSearchParseException;, +import org.elasticsearch.common.compress.CompressedString;, +        try {, +        } catch (IOException e) {, +            throw new ElasticSearchParseException("failed to parse mapping form compressed string", e);, +        }, +        private CompressedString mappingSource;, +        public MappingUpdatedRequest(String index, String type, CompressedString mappingSource) {, +        public CompressedString mappingSource() {, +            mappingSource = CompressedString.readCompressedString(in);, +            mappingSource.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.index.mapper.DocumentMapper;, +import java.io.IOException;, +, +            final DocumentMapper documentMapper = mapperService.documentMapper(request.type());, +            documentMapper.refreshSource();, +, +            mappingUpdatedAction.execute(new MappingUpdatedAction.MappingUpdatedRequest(request.index(), request.type(), documentMapper.mappingSource()), new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {, +                    try {, +                        logger.warn("Failed to update master on updated mapping for index [" + request.index() + "], type [" + request.type() + "] and source [" + documentMapper.mappingSource().string() + "]", e);, +                    } catch (IOException e1) {, +                        // ignore, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, +import org.elasticsearch.ElasticSearchParseException;, +import org.elasticsearch.common.compress.CompressedString;, +        try {, +        } catch (IOException e) {, +            throw new ElasticSearchParseException("failed to parse mapping form compressed string", e);, +        }, +        private CompressedString mappingSource;, +        public MappingUpdatedRequest(String index, String type, CompressedString mappingSource) {, +        public CompressedString mappingSource() {, +            mappingSource = CompressedString.readCompressedString(in);, +            mappingSource.writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.common.compress.CompressedString;, +    private final ImmutableMap<String, CompressedString> mappings;, +    private IndexMetaData(String index, Settings settings, ImmutableMap<String, CompressedString> mappings) {, +    public ImmutableMap<String, CompressedString> mappings() {, +    public ImmutableMap<String, CompressedString> getMappings() {, +    public CompressedString mapping(String mappingType) {, +        private MapBuilder<String, CompressedString> mappings = MapBuilder.newMapBuilder();, +        public Builder putMapping(String mappingType, CompressedString mappingSource) {, +        public Builder putMapping(String mappingType, String mappingSource) throws IOException {, +            mappings.put(mappingType, new CompressedString(mappingSource));, +            return this;, +        }, +, +            for (Map.Entry<String, CompressedString> entry : indexMetaData.mappings().entrySet()) {, +                byte[] data = entry.getValue().uncompressed();, +                XContentParser parser = XContentFactory.xContent(data).createParser(data);, +                                    builder.putMapping(mapping.keySet().iterator().next(), new CompressedString(mappingSource));, +                builder.putMapping(in.readUTF(), CompressedString.readCompressedString(in));, +            for (Map.Entry<String, CompressedString> entry : indexMetaData.mappings().entrySet()) {, +                entry.getValue().writeTo(out);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.index.mapper.DocumentMapper;, +import java.io.IOException;, +, +            final DocumentMapper documentMapper = mapperService.documentMapper(request.type());, +            documentMapper.refreshSource();, +, +            mappingUpdatedAction.execute(new MappingUpdatedAction.MappingUpdatedRequest(request.index(), request.type(), documentMapper.mappingSource()), new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {, +                    try {, +                        logger.warn("Failed to update master on updated mapping for index [" + request.index() + "], type [" + request.type() + "] and source [" + documentMapper.mappingSource().string() + "]", e);, +                    } catch (IOException e1) {, +                        // ignore, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, +import org.elasticsearch.ElasticSearchParseException;, +import org.elasticsearch.common.compress.CompressedString;]