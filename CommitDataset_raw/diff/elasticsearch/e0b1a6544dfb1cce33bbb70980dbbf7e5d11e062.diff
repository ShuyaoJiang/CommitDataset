[+++ b/core/src/main/java/org/elasticsearch/index/termvectors/TermVectorsService.java, +            MappedFieldType fieldType = mapperService.fullName(field);, +            if (fieldType instanceof KeywordFieldMapper.KeywordFieldType) {, +                analyzer = ((KeywordFieldMapper.KeywordFieldType) fieldType).normalizer();, +            } else {, +                analyzer = fieldType.indexAnalyzer();, +            }, +++ b/core/src/main/java/org/elasticsearch/index/termvectors/TermVectorsService.java, +            MappedFieldType fieldType = mapperService.fullName(field);, +            if (fieldType instanceof KeywordFieldMapper.KeywordFieldType) {, +                analyzer = ((KeywordFieldMapper.KeywordFieldType) fieldType).normalizer();, +            } else {, +                analyzer = fieldType.indexAnalyzer();, +            }, +++ b/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java, +    public void testWithKeywordAndNormalizer() throws IOException, ExecutionException, InterruptedException {, +        // setup indices, +        String[] indexNames = new String[] {"with_tv", "without_tv"};, +        Settings.Builder builder = Settings.builder(), +            .put(indexSettings()), +            .put("index.analysis.analyzer.my_analyzer.tokenizer", "keyword"), +            .putList("index.analysis.analyzer.my_analyzer.filter", "lowercase"), +            .putList("index.analysis.normalizer.my_normalizer.filter", "lowercase");, +        assertAcked(prepareCreate(indexNames[0]).setSettings(builder.build()), +            .addMapping("type1", "field1", "type=text,term_vector=with_positions_offsets,analyzer=my_analyzer"));, +        assertAcked(prepareCreate(indexNames[1]).setSettings(builder.build()), +            .addMapping("type1", "field1", "type=keyword,normalizer=my_normalizer"));, +        ensureGreen();, +, +        // index documents with and without term vectors, +        String[] content = new String[] { "Hello World", "hello world", "HELLO WORLD" };, +, +        List<IndexRequestBuilder> indexBuilders = new ArrayList<>();, +        for (String indexName : indexNames) {, +            for (int id = 0; id < content.length; id++) {, +                indexBuilders.add(client().prepareIndex(), +                    .setIndex(indexName), +                    .setType("type1"), +                    .setId(String.valueOf(id)), +                    .setSource("field1", content[id]));, +            }, +        }, +        indexRandom(true, indexBuilders);, +, +        // request tvs and compare from each index, +        for (int id = 0; id < content.length; id++) {, +            Fields[] fields = new Fields[2];, +            for (int j = 0; j < indexNames.length; j++) {, +                TermVectorsResponse resp = client().prepareTermVector(indexNames[j], "type1", String.valueOf(id)), +                    .setOffsets(true), +                    .setPositions(true), +                    .setSelectedFields("field1"), +                    .get();, +                assertThat("doc with index: " + indexNames[j] + ", type1 and id: " + id, resp.isExists(), equalTo(true));, +                fields[j] = resp.getFields();, +            }, +            compareTermVectors("field1", fields[0], fields[1]);, +        }, +    }, +]