[+++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import java.util.Collections;, +    private final ActionFilters actionFilters;, +    private ActionFilters setupActionFilters(List<ActionPlugin> actionPlugins) {, +        return new ActionFilters(, +            Collections.unmodifiableSet(actionPlugins.stream().flatMap(p -> p.getActionFilters().stream()).collect(Collectors.toSet())));, +        bind(ActionFilters.class).toInstance(actionFilters);, +    public ActionFilters getActionFilters() {, +        return actionFilters;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import java.util.Collections;, +    private final ActionFilters actionFilters;, +    private ActionFilters setupActionFilters(List<ActionPlugin> actionPlugins) {, +        return new ActionFilters(, +            Collections.unmodifiableSet(actionPlugins.stream().flatMap(p -> p.getActionFilters().stream()).collect(Collectors.toSet())));, +        bind(ActionFilters.class).toInstance(actionFilters);, +    public ActionFilters getActionFilters() {, +        return actionFilters;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/support/ActionFilters.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import java.util.Collections;, +    private final ActionFilters actionFilters;, +    private ActionFilters setupActionFilters(List<ActionPlugin> actionPlugins) {, +        return new ActionFilters(, +            Collections.unmodifiableSet(actionPlugins.stream().flatMap(p -> p.getActionFilters().stream()).collect(Collectors.toSet())));, +        bind(ActionFilters.class).toInstance(actionFilters);, +    public ActionFilters getActionFilters() {, +        return actionFilters;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/support/ActionFilters.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +, +            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),, +                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),, +                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService);, +            modules.add(actionModule);, +, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import java.util.Collections;, +    private final ActionFilters actionFilters;, +    private ActionFilters setupActionFilters(List<ActionPlugin> actionPlugins) {, +        return new ActionFilters(, +            Collections.unmodifiableSet(actionPlugins.stream().flatMap(p -> p.getActionFilters().stream()).collect(Collectors.toSet())));, +        bind(ActionFilters.class).toInstance(actionFilters);, +    public ActionFilters getActionFilters() {, +        return actionFilters;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/support/ActionFilters.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +, +            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),, +                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),, +                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService);, +            modules.add(actionModule);, +, +++ b/core/src/main/java/org/elasticsearch/plugins/ActionPlugin.java, +    default List<ActionFilter> getActionFilters() {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import java.util.Collections;, +    private final ActionFilters actionFilters;, +    private ActionFilters setupActionFilters(List<ActionPlugin> actionPlugins) {, +        return new ActionFilters(, +            Collections.unmodifiableSet(actionPlugins.stream().flatMap(p -> p.getActionFilters().stream()).collect(Collectors.toSet())));, +        bind(ActionFilters.class).toInstance(actionFilters);, +    public ActionFilters getActionFilters() {, +        return actionFilters;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/support/ActionFilters.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +, +            ActionModule actionModule = new ActionModule(false, settings, clusterModule.getIndexNameExpressionResolver(),, +                settingsModule.getIndexScopedSettings(), settingsModule.getClusterSettings(), settingsModule.getSettingsFilter(),, +                threadPool, pluginsService.filterPlugins(ActionPlugin.class), client, circuitBreakerService, usageService);, +            modules.add(actionModule);, +, +++ b/core/src/main/java/org/elasticsearch/plugins/ActionPlugin.java, +    default List<ActionFilter> getActionFilters() {, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterInfoServiceIT.java, +, +        private final BlockingActionFilter blockingActionFilter;, +, +        public TestPlugin(Settings settings) {, +            blockingActionFilter = new BlockingActionFilter(settings);, +        }, +, +        public List<ActionFilter> getActionFilters() {, +            return singletonList(blockingActionFilter);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import java.util.Collections;, +    private final ActionFilters actionFilters;, +    private ActionFilters setupActionFilters(List<ActionPlugin> actionPlugins) {, +        return new ActionFilters(, +            Collections.unmodifiableSet(actionPlugins.stream().flatMap(p -> p.getActionFilters().stream()).collect(Collectors.toSet())));]