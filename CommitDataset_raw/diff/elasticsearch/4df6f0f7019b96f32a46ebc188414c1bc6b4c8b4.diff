[+++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/ExportBulk.java, +import java.util.concurrent.atomic.AtomicReference;, + * An export bulk holds one of more documents until it got flushed. The {@link ExportBulk#flush()} usually triggers the exporting of the, + * documents to their final destination., +    private final AtomicReference<State> state = new AtomicReference<>(State.INITIALIZING);, +    /**, +     * Add documents to the exporting bulk, +     */, +    public void add(Collection<MonitoringDoc> docs) throws ExportException {, +        if (state.get() == State.INITIALIZING) {, +            doAdd(docs);, +        }, +    protected abstract void doAdd(Collection<MonitoringDoc> docs) throws ExportException;, +, +    /**, +     * Flush the exporting bulk, +     */, +    public void flush() throws ExportException {, +        if (state.compareAndSet(State.INITIALIZING, State.FLUSHING)) {, +            doFlush();, +        }, +    }, +, +    protected abstract void doFlush();, +, +    /**, +     * Close the exporting bulk, +     */, +    public void close(boolean flush) throws ExportException {, +        if (state.getAndSet(State.CLOSED) != State.CLOSED) {, +, +            ExportException exception = null;, +                if (flush) {, +                    doFlush();, +                }, +            } catch (ExportException e) {, +                if (exception != null) {, +                    exception.addSuppressed(e);, +                } else {, +                    exception = e;, +                }, +            } finally {, +                try {, +                    doClose();, +            }, +    protected abstract void doClose() throws ExportException;, +, +    protected boolean isClosed() {, +        return state.get() == State.CLOSED;, +    }, +, +    /**, +     * This class holds multiple export bulks exposed as a single compound bulk., +     */, +        protected void doAdd(Collection<MonitoringDoc> docs) throws ExportException {, +        protected void doFlush() {, +        protected void doClose() throws ExportException {, +                    // We can close without flushing since doFlush(), +                    // would have been called by the parent class, +                    bulk.close(false);, +, +    private enum State {, +        INITIALIZING,, +        FLUSHING,, +        CLOSED, +    }, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/ExportBulk.java, +import java.util.concurrent.atomic.AtomicReference;, + * An export bulk holds one of more documents until it got flushed. The {@link ExportBulk#flush()} usually triggers the exporting of the, + * documents to their final destination., +    private final AtomicReference<State> state = new AtomicReference<>(State.INITIALIZING);, +    /**, +     * Add documents to the exporting bulk, +     */, +    public void add(Collection<MonitoringDoc> docs) throws ExportException {, +        if (state.get() == State.INITIALIZING) {, +            doAdd(docs);, +        }, +    protected abstract void doAdd(Collection<MonitoringDoc> docs) throws ExportException;, +, +    /**, +     * Flush the exporting bulk, +     */, +    public void flush() throws ExportException {, +        if (state.compareAndSet(State.INITIALIZING, State.FLUSHING)) {, +            doFlush();, +        }, +    }, +, +    protected abstract void doFlush();, +, +    /**, +     * Close the exporting bulk, +     */, +    public void close(boolean flush) throws ExportException {, +        if (state.getAndSet(State.CLOSED) != State.CLOSED) {, +, +            ExportException exception = null;, +                if (flush) {, +                    doFlush();]