[+++ b/CONTRIBUTING.md, + * Eclipse: `Preferences->Java->Code Style->Organize Imports`. There are two boxes labeled "`Number of (static )? imports needed for .*`". Set their values to 99999 or some other absurdly high value., + * IntelliJ: `Preferences->Editor->Code Style->Java->Imports`. There are two configuration options: `Class count to use import with '*'` and `Names count to use static import with '*'`. Set their values to 99999 or some other absurdly high value., +++ b/CONTRIBUTING.md, + * Eclipse: `Preferences->Java->Code Style->Organize Imports`. There are two boxes labeled "`Number of (static )? imports needed for .*`". Set their values to 99999 or some other absurdly high value., + * IntelliJ: `Preferences->Editor->Code Style->Java->Imports`. There are two configuration options: `Class count to use import with '*'` and `Names count to use static import with '*'`. Set their values to 99999 or some other absurdly high value., +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes(), +            clusterState = strategy.reroute(clusterState, "reroute");, +++ b/CONTRIBUTING.md, + * Eclipse: `Preferences->Java->Code Style->Organize Imports`. There are two boxes labeled "`Number of (static )? imports needed for .*`". Set their values to 99999 or some other absurdly high value., + * IntelliJ: `Preferences->Editor->Code Style->Java->Imports`. There are two configuration options: `Class count to use import with '*'` and `Names count to use static import with '*'`. Set their values to 99999 or some other absurdly high value., +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes(), +            clusterState = strategy.reroute(clusterState, "reroute");, +++ /dev/null, +++ b/CONTRIBUTING.md, + * Eclipse: `Preferences->Java->Code Style->Organize Imports`. There are two boxes labeled "`Number of (static )? imports needed for .*`". Set their values to 99999 or some other absurdly high value., + * IntelliJ: `Preferences->Editor->Code Style->Java->Imports`. There are two configuration options: `Class count to use import with '*'` and `Names count to use static import with '*'`. Set their values to 99999 or some other absurdly high value., +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes(), +            clusterState = strategy.reroute(clusterState, "reroute");, +++ /dev/null, +++ b/benchmarks/src/main/resources/log4j2.properties, +appender.console.type = Console, +appender.console.name = console, +appender.console.layout.type = PatternLayout, +appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %marker%m%n, +, +# Do not log at all if it is not really critical - we're in a benchmark, +rootLogger.level = error, +rootLogger.appenderRef.console.ref = console, +++ b/CONTRIBUTING.md, + * Eclipse: `Preferences->Java->Code Style->Organize Imports`. There are two boxes labeled "`Number of (static )? imports needed for .*`". Set their values to 99999 or some other absurdly high value., + * IntelliJ: `Preferences->Editor->Code Style->Java->Imports`. There are two configuration options: `Class count to use import with '*'` and `Names count to use static import with '*'`. Set their values to 99999 or some other absurdly high value., +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes(), +            clusterState = strategy.reroute(clusterState, "reroute");, +++ /dev/null, +++ b/benchmarks/src/main/resources/log4j2.properties, +appender.console.type = Console, +appender.console.name = console, +appender.console.layout.type = PatternLayout, +appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %marker%m%n, +, +# Do not log at all if it is not really critical - we're in a benchmark, +rootLogger.level = error, +rootLogger.appenderRef.console.ref = console, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +import org.gradle.api.artifacts.Configuration, +import org.gradle.api.file.FileCollection, +     * The seed nodes port file. In the case the cluster has more than one node we use a seed node, +     * to form the cluster. The file is null if there is no seed node yet available., +     * Note: this can only be null if the cluster has only one node or if the first node is not yet, +     * configured. All nodes but the first node should see a non null value., +    File seedNodePortsFile, +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=${numNodes}",, +, +    /** Returns an address and port suitable for a uri to connect to this clusters seed node over transport protocol*/, +    String seedNodeTransportUri() {, +        if (seedNodePortsFile != null) {, +            return seedNodePortsFile.readLines("UTF-8").get(0), +        }, +        return null;, +    }, +++ b/CONTRIBUTING.md, + * Eclipse: `Preferences->Java->Code Style->Organize Imports`. There are two boxes labeled "`Number of (static )? imports needed for .*`". Set their values to 99999 or some other absurdly high value., + * IntelliJ: `Preferences->Editor->Code Style->Java->Imports`. There are two configuration options: `Class count to use import with '*'` and `Names count to use static import with '*'`. Set their values to 99999 or some other absurdly high value., +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes(), +            clusterState = strategy.reroute(clusterState, "reroute");, +++ /dev/null, +++ b/benchmarks/src/main/resources/log4j2.properties, +appender.console.type = Console, +appender.console.name = console, +appender.console.layout.type = PatternLayout, +appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %marker%m%n, +, +# Do not log at all if it is not really critical - we're in a benchmark, +rootLogger.level = error, +rootLogger.appenderRef.console.ref = console, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +import org.gradle.api.artifacts.Configuration, +import org.gradle.api.file.FileCollection, +     * The seed nodes port file. In the case the cluster has more than one node we use a seed node, +     * to form the cluster. The file is null if there is no seed node yet available., +     * Note: this can only be null if the cluster has only one node or if the first node is not yet, +     * configured. All nodes but the first node should see a non null value., +    File seedNodePortsFile, +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=${numNodes}",, +, +    /** Returns an address and port suitable for a uri to connect to this clusters seed node over transport protocol*/, +    String seedNodeTransportUri() {, +        if (seedNodePortsFile != null) {, +            return seedNodePortsFile.readLines("UTF-8").get(0), +        }, +        return null;, +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +     * Returns a NodeInfo object for the first node in the cluster.]