[+++ b/client/rest/src/test/java/org/elasticsearch/client/DeadHostStateTests.java, +import java.util.concurrent.atomic.AtomicLong;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +        assertThat(deadHostState.getDeadUntilNanos(), greaterThanOrEqualTo(currentTime));, +    public void testCompareToTimeSupplier() {, +                // this test requires a strictly increasing timer, +                deadHostStates[i] = new DeadHostState(new StrictMonotonicTimeSupplier());, +, +    /**, +     * Simulates a monotonically strict increasing time (i.e. the value increases on every call to <code>#nanoTime()</code>). This ensures, +     * that even if we call this time supplier in a very tight loop we always notice time moving forward. This does not happen for real, +     * timer implementations (e.g. on Linux <code>clock_gettime</code> provides microsecond resolution)., +     */, +    static class StrictMonotonicTimeSupplier implements DeadHostState.TimeSupplier {, +        private final AtomicLong time = new AtomicLong(0);, +, +        @Override, +        public long nanoTime() {, +            return time.incrementAndGet();, +        }, +, +        @Override, +        public String toString() {, +            return "strict monotonic[" + time.get() + "]";, +        }, +    }]