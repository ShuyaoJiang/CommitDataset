[+++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java, +import java.util.Arrays;, +import java.util.Locale;, +import java.util.NavigableSet;, +import java.util.TreeSet;, +        final Map<String, Tuple<String, List<Supplier<DiscoveryNode>>>> remoteSeeds =, +                buildRemoteClustersDynamicConfig(settings, REMOTE_CLUSTERS_SEEDS);, +        final Map<String, Tuple<String, List<Supplier<DiscoveryNode>>>> searchRemoteSeeds =, +                buildRemoteClustersDynamicConfig(settings, SEARCH_REMOTE_CLUSTERS_SEEDS);, +        // sort the intersection for predictable output order, +        final NavigableSet<String> intersection =, +                new TreeSet<>(Arrays.asList(, +                        searchRemoteSeeds.keySet().stream().filter(s -> remoteSeeds.keySet().contains(s)).sorted().toArray(String[]::new)));, +        if (intersection.isEmpty() == false) {, +            final String message = String.format(, +                    Locale.ROOT,, +                    "found duplicate remote cluster configurations for cluster alias%s [%s]",, +                    intersection.size() == 1 ? "" : "es",, +                    String.join(",", intersection));, +            throw new IllegalArgumentException(message);, +        }, +        return Stream, +                .concat(remoteSeeds.entrySet().stream(), searchRemoteSeeds.entrySet().stream()), +                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));, +    }, +, +    private static Map<String, Tuple<String, List<Supplier<DiscoveryNode>>>> buildRemoteClustersDynamicConfig(, +            final Settings settings, final Setting.AffixSetting<List<String>> seedsSetting) {, +        final Stream<Setting<List<String>>> allConcreteSettings = seedsSetting.getAllConcreteSettings(settings);, +                Collectors.toMap(seedsSetting::getNamespace, concreteSetting -> {, +                    String clusterName = seedsSetting.getNamespace(concreteSetting);, +                    final boolean proxyMode =, +                            REMOTE_CLUSTERS_PROXY.getConcreteSettingForNamespace(clusterName).existsOrFallbackExists(settings);, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java, +import java.util.Arrays;, +import java.util.Locale;, +import java.util.NavigableSet;, +import java.util.TreeSet;, +        final Map<String, Tuple<String, List<Supplier<DiscoveryNode>>>> remoteSeeds =, +                buildRemoteClustersDynamicConfig(settings, REMOTE_CLUSTERS_SEEDS);, +        final Map<String, Tuple<String, List<Supplier<DiscoveryNode>>>> searchRemoteSeeds =, +                buildRemoteClustersDynamicConfig(settings, SEARCH_REMOTE_CLUSTERS_SEEDS);, +        // sort the intersection for predictable output order, +        final NavigableSet<String> intersection =, +                new TreeSet<>(Arrays.asList(, +                        searchRemoteSeeds.keySet().stream().filter(s -> remoteSeeds.keySet().contains(s)).sorted().toArray(String[]::new)));, +        if (intersection.isEmpty() == false) {, +            final String message = String.format(, +                    Locale.ROOT,, +                    "found duplicate remote cluster configurations for cluster alias%s [%s]",, +                    intersection.size() == 1 ? "" : "es",, +                    String.join(",", intersection));, +            throw new IllegalArgumentException(message);, +        }, +        return Stream, +                .concat(remoteSeeds.entrySet().stream(), searchRemoteSeeds.entrySet().stream()), +                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));, +    }, +, +    private static Map<String, Tuple<String, List<Supplier<DiscoveryNode>>>> buildRemoteClustersDynamicConfig(, +            final Settings settings, final Setting.AffixSetting<List<String>> seedsSetting) {, +        final Stream<Setting<List<String>>> allConcreteSettings = seedsSetting.getAllConcreteSettings(settings);, +                Collectors.toMap(seedsSetting::getNamespace, concreteSetting -> {, +                    String clusterName = seedsSetting.getNamespace(concreteSetting);, +                    final boolean proxyMode =, +                            REMOTE_CLUSTERS_PROXY.getConcreteSettingForNamespace(clusterName).existsOrFallbackExists(settings);, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java, +import static org.hamcrest.Matchers.containsInAnyOrder;, +import static org.hamcrest.Matchers.hasSize;, +import static org.hamcrest.Matchers.hasToString;, +                Settings.builder(), +                        .put("cluster.remote.foo.seeds", "192.168.0.1:8080"), +                        .put("cluster.remote.boom.proxy", "foo.bar.com:1234"), +                        .put("search.remote.quux.seeds", "quux:9300"), +                        .put("search.remote.quux.proxy", "quux-proxy:19300"), +                        .build());, +        assertThat(map.keySet(), containsInAnyOrder(equalTo("foo"), equalTo("bar"), equalTo("boom"), equalTo("quux")));, +        assertThat(map.get("foo").v2(), hasSize(1));, +        assertThat(map.get("bar").v2(), hasSize(1));, +        assertThat(map.get("boom").v2(), hasSize(1));, +        assertThat(map.get("quux").v2(), hasSize(1));, +, +        DiscoveryNode quux = map.get("quux").v2().get(0).get();, +        assertEquals(quux.getAddress(), new TransportAddress(TransportAddress.META_ADDRESS, 0));, +        assertEquals("quux", quux.getHostName());, +        assertEquals(quux.getId(), "quux#quux:9300");, +        assertEquals("quux-proxy:19300", map.get("quux").v1());, +        assertEquals(quux.getVersion(), Version.CURRENT.minimumCompatibilityVersion());, +, +        assertSettingDeprecationsAndWarnings(new String[]{"search.remote.quux.seeds", "search.remote.quux.proxy"});, +    }, +, +    public void testBuildRemoteClustersDynamicConfigWithDuplicate() {, +        final IllegalArgumentException e = expectThrows(, +                IllegalArgumentException.class,, +                () -> RemoteClusterService.buildRemoteClustersDynamicConfig(, +                        Settings.builder(), +                                .put("cluster.remote.foo.seeds", "192.168.0.1:8080"), +                                .put("search.remote.foo.seeds", "192.168.0.1:8080"), +                                .build()));]