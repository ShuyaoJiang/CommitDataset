[+++ b/core/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +import com.google.common.hash.Hashing;, +import org.elasticsearch.*;, +import org.elasticsearch.common.util.ByteArray;, +import java.nio.file.NoSuchFileException;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.Callable;, +    public interface Checksummer {, +        /** Return the hex string for the given byte array */, +        String checksum(byte[] filebytes);, +        /** Human-readable name for the checksum format */, +        String name();, +    }, +, +    /** Checksummer for SHA1 */, +    public static Checksummer SHA1_CHECKSUM = new Checksummer() {, +        @Override, +        public String checksum(byte[] filebytes) {, +            return Hashing.sha1().hashBytes(filebytes).toString();, +        }, +, +        @Override, +        public String name() {, +            return "SHA1";, +        }, +    };, +, +    /** Checksummer for MD5 */, +    public static Checksummer MD5_CHECKSUM = new Checksummer() {, +        @Override, +        public String checksum(byte[] filebytes) {, +            return Hashing.md5().hashBytes(filebytes).toString();, +        }, +, +        @Override, +        public String name() {, +            return "MD5";, +        }, +    };, +, +    /**, +     * Download the given checksum URL to the destination and check the checksum, +     * @param checksumURL URL for the checksum file, +     * @param originalFile original file to calculate checksum of, +     * @param checksumFile destination to download the checksum file to, +     * @param hashFunc class used to calculate the checksum of the file, +     * @return true if the checksum was validated, false if it did not exist, +     * @throws Exception if the checksum failed to match, +     */, +    public boolean downloadAndVerifyChecksum(URL checksumURL, Path originalFile, Path checksumFile,, +                                             @Nullable DownloadProgress progress,, +                                             TimeValue timeout, Checksummer hashFunc) throws Exception {, +        try {, +            if (download(checksumURL, checksumFile, progress, timeout)) {, +                byte[] fileBytes = Files.readAllBytes(originalFile);, +                List<String> checksumLines = Files.readAllLines(checksumFile);, +                if (checksumLines.size() != 1) {, +                    throw new ElasticsearchCorruptionException("invalid format for checksum file (" +, +                            hashFunc.name() + "), expected 1 line, got: " + checksumLines.size());, +                }, +                String checksumHex = checksumLines.get(0);, +                String fileHex = hashFunc.checksum(fileBytes);, +                if (fileHex.equals(checksumHex) == false) {, +                    throw new ElasticsearchCorruptionException("incorrect hash (" + hashFunc.name() +, +                            "), file hash: [" + fileHex + "], expected: [" + checksumHex + "]");, +                }, +                return true;, +            }, +        } catch (FileNotFoundException | NoSuchFileException e) {, +            // checksum file doesn't exist, +            return false;, +        } catch (IOException e) {, +            if (ExceptionsHelper.unwrapCause(e) instanceof FileNotFoundException) {, +                // checksum file didn't exist, +                return false;, +            }, +            throw e;, +        } finally {, +            IOUtils.deleteFilesIgnoringExceptions(checksumFile);, +        }, +        return false;, +    }, +++ b/core/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +import com.google.common.hash.Hashing;, +import org.elasticsearch.*;, +import org.elasticsearch.common.util.ByteArray;, +import java.nio.file.NoSuchFileException;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.Callable;, +    public interface Checksummer {, +        /** Return the hex string for the given byte array */, +        String checksum(byte[] filebytes);, +        /** Human-readable name for the checksum format */, +        String name();, +    }, +, +    /** Checksummer for SHA1 */, +    public static Checksummer SHA1_CHECKSUM = new Checksummer() {]