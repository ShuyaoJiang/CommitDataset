[+++ b/libs/elasticsearch-core/build.gradle, +++ b/libs/elasticsearch-core/build.gradle, +++ /dev/null, +++ b/libs/elasticsearch-core/build.gradle, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-core/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-core/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.util.function.Consumer;, +        checkJarHell(System.out::println);, +     * @param output A {@link String} {@link Consumer} to which debug output will be sent, +    public static void checkJarHell(Consumer<String> output) throws IOException, URISyntaxException {, +        output.accept("java.class.path: " + System.getProperty("java.class.path"));, +        output.accept("sun.boot.class.path: " + System.getProperty("sun.boot.class.path"));, +            output.accept("classloader urls: " + Arrays.toString(((URLClassLoader)loader).getURLs()));, +        checkJarHell(parseClassPath(), output);, +     * @param urls A set of URLs from the classpath to be checked for conflicting jars, +     * @param output A {@link String} {@link Consumer} to which debug output will be sent, +    public static void checkJarHell(Set<URL> urls, Consumer<String> output) throws URISyntaxException, IOException {, +        output.accept("java.home: " + javaHome);, +                output.accept("excluding system resource: " + path);, +                output.accept("examining jar: " + path);, +                output.accept("examining directory: " + path);, +++ b/libs/elasticsearch-core/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.util.function.Consumer;, +        checkJarHell(System.out::println);, +     * @param output A {@link String} {@link Consumer} to which debug output will be sent, +    public static void checkJarHell(Consumer<String> output) throws IOException, URISyntaxException {, +        output.accept("java.class.path: " + System.getProperty("java.class.path"));, +        output.accept("sun.boot.class.path: " + System.getProperty("sun.boot.class.path"));, +            output.accept("classloader urls: " + Arrays.toString(((URLClassLoader)loader).getURLs()));, +        checkJarHell(parseClassPath(), output);, +     * @param urls A set of URLs from the classpath to be checked for conflicting jars, +     * @param output A {@link String} {@link Consumer} to which debug output will be sent, +    public static void checkJarHell(Set<URL> urls, Consumer<String> output) throws URISyntaxException, IOException {, +        output.accept("java.home: " + javaHome);, +                output.accept("excluding system resource: " + path);, +                output.accept("examining jar: " + path);, +                output.accept("examining directory: " + path);, +++ /dev/null, +++ b/libs/elasticsearch-core/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.util.function.Consumer;, +        checkJarHell(System.out::println);, +     * @param output A {@link String} {@link Consumer} to which debug output will be sent, +    public static void checkJarHell(Consumer<String> output) throws IOException, URISyntaxException {, +        output.accept("java.class.path: " + System.getProperty("java.class.path"));, +        output.accept("sun.boot.class.path: " + System.getProperty("sun.boot.class.path"));, +            output.accept("classloader urls: " + Arrays.toString(((URLClassLoader)loader).getURLs()));, +        checkJarHell(parseClassPath(), output);, +     * @param urls A set of URLs from the classpath to be checked for conflicting jars, +     * @param output A {@link String} {@link Consumer} to which debug output will be sent, +    public static void checkJarHell(Set<URL> urls, Consumer<String> output) throws URISyntaxException, IOException {, +        output.accept("java.home: " + javaHome);, +                output.accept("excluding system resource: " + path);, +                output.accept("examining jar: " + path);, +                output.accept("examining directory: " + path);, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-core/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.util.function.Consumer;, +        checkJarHell(System.out::println);, +     * @param output A {@link String} {@link Consumer} to which debug output will be sent, +    public static void checkJarHell(Consumer<String> output) throws IOException, URISyntaxException {, +        output.accept("java.class.path: " + System.getProperty("java.class.path"));, +        output.accept("sun.boot.class.path: " + System.getProperty("sun.boot.class.path"));, +            output.accept("classloader urls: " + Arrays.toString(((URLClassLoader)loader).getURLs()));, +        checkJarHell(parseClassPath(), output);, +     * @param urls A set of URLs from the classpath to be checked for conflicting jars, +     * @param output A {@link String} {@link Consumer} to which debug output will be sent, +    public static void checkJarHell(Set<URL> urls, Consumer<String> output) throws URISyntaxException, IOException {, +        output.accept("java.home: " + javaHome);, +                output.accept("excluding system resource: " + path);, +                output.accept("examining jar: " + path);, +                output.accept("examining directory: " + path);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/libs/elasticsearch-core/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null]