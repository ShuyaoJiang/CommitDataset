[+++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import java.util.Collection;, +        return readCollection(reader, ArrayList::new);, +    }, +, +    /**, +     * Reads a set of objects, +     */, +    public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException {, +        return readCollection(reader, HashSet::new);, +    }, +, +    /**, +     * Reads a collection of objects, +     */, +    private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,, +                                                                  IntFunction<C> constructor) throws IOException {, +        C builder = constructor.apply(count);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import java.util.Collection;, +        return readCollection(reader, ArrayList::new);, +    }, +, +    /**, +     * Reads a set of objects, +     */, +    public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException {, +        return readCollection(reader, HashSet::new);, +    }, +, +    /**, +     * Reads a collection of objects, +     */, +    private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,, +                                                                  IntFunction<C> constructor) throws IOException {, +        C builder = constructor.apply(count);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import java.util.Collection;, +     * Writes a collection of generic objects via a {@link Writer}, +     */, +    public <T> void writeCollection(Collection<T> collection, Writer<T> writer) throws IOException {, +        writeVInt(collection.size());, +        for (T val: collection) {, +            writer.write(this, val);, +        }, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import java.util.Collection;, +        return readCollection(reader, ArrayList::new);, +    }, +, +    /**, +     * Reads a set of objects, +     */, +    public <T> Set<T> readSet(Writeable.Reader<T> reader) throws IOException {, +        return readCollection(reader, HashSet::new);, +    }, +, +    /**, +     * Reads a collection of objects, +     */, +    private <T, C extends Collection<? super T>> C readCollection(Writeable.Reader<T> reader,, +                                                                  IntFunction<C> constructor) throws IOException {, +        C builder = constructor.apply(count);, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import java.util.Collection;, +     * Writes a collection of generic objects via a {@link Writer}, +     */, +    public <T> void writeCollection(Collection<T> collection, Writer<T> writer) throws IOException {, +        writeVInt(collection.size());, +        for (T val: collection) {, +            writer.write(this, val);, +        }, +    }, +, +    /**, +++ b/server/src/test/java/org/elasticsearch/common/io/stream/StreamTests.java, +import java.util.HashSet;, +import static org.hamcrest.Matchers.iterableWithSize;, +        FilterStreamInput filterInputStream = new FilterStreamInput(delegate) {, +        };, +    public void testSetOfLongs() throws IOException {, +        final int size = randomIntBetween(0, 6);, +        final Set<Long> sourceSet = new HashSet<>(size);, +        for (int i = 0; i < size; i++) {, +            sourceSet.add(randomLongBetween(i * 1000, (i + 1) * 1000 - 1));, +        }, +        assertThat(sourceSet, iterableWithSize(size));, +, +        final BytesStreamOutput out = new BytesStreamOutput();, +        out.writeCollection(sourceSet, StreamOutput::writeLong);, +, +        final Set<Long> targetSet = out.bytes().streamInput().readSet(StreamInput::readLong);, +        assertThat(targetSet, equalTo(sourceSet));, +    }, +, +++ b/server/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import java.util.Collection;]