[+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                            mapperService.merge(MapperService.DEFAULT_MAPPING, new CompressedString(XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string()), false);, +                            mapperService.merge(entry.getKey(), new CompressedString(XContentFactory.jsonBuilder().map(entry.getValue()).string()), true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                            mapperService.merge(MapperService.DEFAULT_MAPPING, new CompressedString(XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string()), false);, +                            mapperService.merge(entry.getKey(), new CompressedString(XContentFactory.jsonBuilder().map(entry.getValue()).string()), true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                                indexService.mapperService().merge(MapperService.DEFAULT_MAPPING, indexMetaData.mappings().get(MapperService.DEFAULT_MAPPING).source(), false);, +                                                indexService.mapperService().merge(mappingMetaData.type(), mappingMetaData.source(), false);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                            mapperService.merge(MapperService.DEFAULT_MAPPING, new CompressedString(XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string()), false);, +                            mapperService.merge(entry.getKey(), new CompressedString(XContentFactory.jsonBuilder().map(entry.getValue()).string()), true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                                indexService.mapperService().merge(MapperService.DEFAULT_MAPPING, indexMetaData.mappings().get(MapperService.DEFAULT_MAPPING).source(), false);, +                                                indexService.mapperService().merge(mappingMetaData.type(), mappingMetaData.source(), false);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                    indexService.mapperService().merge(type, indexMetaData.mappings().get(type).source(), false);, +                                indexService.mapperService().merge(type, indexMetaData.mappings().get(type).source(), false);, +                        DocumentMapper updatedMapper = indexService.mapperService().merge(type, mappingSource, false);, +                            indexService.mapperService().merge(MapperService.DEFAULT_MAPPING, indexMetaData.mappings().get(MapperService.DEFAULT_MAPPING).source(), false);, +                            indexService.mapperService().merge(request.mappingType, indexMetaData.mappings().get(request.mappingType).source(), false);, +                                newMapper = indexService.mapperService().parse(request.mappingType, new CompressedString(request.mappingSource), false);, +                                newMapper = indexService.mapperService().parse(request.mappingType, new CompressedString(request.mappingSource));, +                        DocumentMapper mergedMapper = indexService.mapperService().merge(newMapper.type(), newMapper.mappingSource(), false);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                            mapperService.merge(MapperService.DEFAULT_MAPPING, new CompressedString(XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string()), false);, +                            mapperService.merge(entry.getKey(), new CompressedString(XContentFactory.jsonBuilder().map(entry.getValue()).string()), true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                                indexService.mapperService().merge(MapperService.DEFAULT_MAPPING, indexMetaData.mappings().get(MapperService.DEFAULT_MAPPING).source(), false);, +                                                indexService.mapperService().merge(mappingMetaData.type(), mappingMetaData.source(), false);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                    indexService.mapperService().merge(type, indexMetaData.mappings().get(type).source(), false);, +                                indexService.mapperService().merge(type, indexMetaData.mappings().get(type).source(), false);, +                        DocumentMapper updatedMapper = indexService.mapperService().merge(type, mappingSource, false);, +                            indexService.mapperService().merge(MapperService.DEFAULT_MAPPING, indexMetaData.mappings().get(MapperService.DEFAULT_MAPPING).source(), false);, +                            indexService.mapperService().merge(request.mappingType, indexMetaData.mappings().get(request.mappingType).source(), false);, +                                newMapper = indexService.mapperService().parse(request.mappingType, new CompressedString(request.mappingSource), false);, +                                newMapper = indexService.mapperService().parse(request.mappingType, new CompressedString(request.mappingSource));, +                        DocumentMapper mergedMapper = indexService.mapperService().merge(newMapper.type(), newMapper.mappingSource(), false);, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +import org.elasticsearch.common.compress.CompressedString;, +        return parse(type, mapping, defaultSource);, +    }, +    public DocumentMapper parseCompressed(@Nullable String type, CompressedString source) throws MapperParsingException {, +        return parseCompressed(type, source, null);, +    }, +, +    @SuppressWarnings({"unchecked"}), +    public DocumentMapper parseCompressed(@Nullable String type, CompressedString source, String defaultSource) throws MapperParsingException {, +        Map<String, Object> mapping = null;, +        if (source != null) {, +            Map<String, Object> root = XContentHelper.convertToMap(source.compressed(), true).v2();, +            Tuple<String, Map<String, Object>> t = extractMapping(type, root);, +            type = t.v1();, +            mapping = t.v2();, +        }, +        if (mapping == null) {, +            mapping = Maps.newHashMap();, +        }, +        return parse(type, mapping, defaultSource);, +    }, +, +    @SuppressWarnings({"unchecked"}), +    private DocumentMapper parse(String type, Map<String, Object> mapping, String defaultSource) throws MapperParsingException {, +        return extractMapping(type, root);, +    }, +, +    @SuppressWarnings({"unchecked"}), +    private Tuple<String, Map<String, Object>> extractMapping(String type, Map<String, Object> root) throws MapperParsingException {, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                            mapperService.merge(MapperService.DEFAULT_MAPPING, new CompressedString(XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string()), false);, +                            mapperService.merge(entry.getKey(), new CompressedString(XContentFactory.jsonBuilder().map(entry.getValue()).string()), true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                                indexService.mapperService().merge(MapperService.DEFAULT_MAPPING, indexMetaData.mappings().get(MapperService.DEFAULT_MAPPING).source(), false);, +                                                indexService.mapperService().merge(mappingMetaData.type(), mappingMetaData.source(), false);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                    indexService.mapperService().merge(type, indexMetaData.mappings().get(type).source(), false);, +                                indexService.mapperService().merge(type, indexMetaData.mappings().get(type).source(), false);, +                        DocumentMapper updatedMapper = indexService.mapperService().merge(type, mappingSource, false);, +                            indexService.mapperService().merge(MapperService.DEFAULT_MAPPING, indexMetaData.mappings().get(MapperService.DEFAULT_MAPPING).source(), false);, +                            indexService.mapperService().merge(request.mappingType, indexMetaData.mappings().get(request.mappingType).source(), false);, +                                newMapper = indexService.mapperService().parse(request.mappingType, new CompressedString(request.mappingSource), false);, +                                newMapper = indexService.mapperService().parse(request.mappingType, new CompressedString(request.mappingSource));, +                        DocumentMapper mergedMapper = indexService.mapperService().merge(newMapper.type(), newMapper.mappingSource(), false);, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +import org.elasticsearch.common.compress.CompressedString;, +        return parse(type, mapping, defaultSource);, +    }, +    public DocumentMapper parseCompressed(@Nullable String type, CompressedString source) throws MapperParsingException {, +        return parseCompressed(type, source, null);, +    }, +, +    @SuppressWarnings({"unchecked"}), +    public DocumentMapper parseCompressed(@Nullable String type, CompressedString source, String defaultSource) throws MapperParsingException {, +        Map<String, Object> mapping = null;, +        if (source != null) {, +            Map<String, Object> root = XContentHelper.convertToMap(source.compressed(), true).v2();, +            Tuple<String, Map<String, Object>> t = extractMapping(type, root);, +            type = t.v1();, +            mapping = t.v2();]