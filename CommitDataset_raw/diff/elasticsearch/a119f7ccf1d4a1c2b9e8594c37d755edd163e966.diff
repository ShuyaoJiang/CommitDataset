[+++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +        final HttpClient httpClient = new HttpClient(settings, httpAuthRegistry, sslService);, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +        final HttpClient httpClient = new HttpClient(settings, httpAuthRegistry, sslService);, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/common/http/HttpClient.java, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSession;, +    private final boolean isHostnameVerificationEnabled;, +    private final SSLSocketFactory sslSocketFactory;, +    private final HttpProxy proxy;, +    public HttpClient(Settings settings, HttpAuthRegistry httpAuthRegistry, SSLService sslService) {, +        this.defaultConnectionTimeout = settings.getAsTime("xpack.http.default_connection_timeout", TimeValue.timeValueSeconds(10));, +        this.defaultReadTimeout = settings.getAsTime("xpack.http.default_read_timeout", TimeValue.timeValueSeconds(10));, +            this.proxy = new HttpProxy(proxyHost, proxyPort);, +        } else if (proxyPort == null && Strings.hasText(proxyHost) == false) {, +            this.proxy = HttpProxy.NO_PROXY;, +            throw new IllegalArgumentException("HTTP Proxy requires both settings: [" + SETTINGS_PROXY_HOST + "] and [" +, +                    SETTINGS_PROXY_PORT + "]");, +        Settings sslSettings = settings.getByPrefix(SETTINGS_SSL_PREFIX);, +        this.sslSocketFactory = sslService.sslSocketFactory(settings.getByPrefix(SETTINGS_SSL_PREFIX));, +        this.isHostnameVerificationEnabled = sslService.getVerificationMode(sslSettings, Settings.EMPTY).isHostnameVerificationEnabled();, +                    if (isHostnameVerificationEnabled == false) {, +                        httpsConn.setHostnameVerifier(NoopHostnameVerifier.INSTANCE);, +                    }, +    private static final class NoopHostnameVerifier implements HostnameVerifier {, +, +        private static final HostnameVerifier INSTANCE = new NoopHostnameVerifier();, +, +        @Override, +        public boolean verify(String s, SSLSession sslSession) {, +            return true;, +        }, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +        final HttpClient httpClient = new HttpClient(settings, httpAuthRegistry, sslService);, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/common/http/HttpClient.java, +import javax.net.ssl.HostnameVerifier;, +import javax.net.ssl.SSLSession;, +    private final boolean isHostnameVerificationEnabled;, +    private final SSLSocketFactory sslSocketFactory;, +    private final HttpProxy proxy;, +    public HttpClient(Settings settings, HttpAuthRegistry httpAuthRegistry, SSLService sslService) {, +        this.defaultConnectionTimeout = settings.getAsTime("xpack.http.default_connection_timeout", TimeValue.timeValueSeconds(10));, +        this.defaultReadTimeout = settings.getAsTime("xpack.http.default_read_timeout", TimeValue.timeValueSeconds(10));, +            this.proxy = new HttpProxy(proxyHost, proxyPort);, +        } else if (proxyPort == null && Strings.hasText(proxyHost) == false) {, +            this.proxy = HttpProxy.NO_PROXY;, +            throw new IllegalArgumentException("HTTP Proxy requires both settings: [" + SETTINGS_PROXY_HOST + "] and [" +, +                    SETTINGS_PROXY_PORT + "]");, +        Settings sslSettings = settings.getByPrefix(SETTINGS_SSL_PREFIX);, +        this.sslSocketFactory = sslService.sslSocketFactory(settings.getByPrefix(SETTINGS_SSL_PREFIX));, +        this.isHostnameVerificationEnabled = sslService.getVerificationMode(sslSettings, Settings.EMPTY).isHostnameVerificationEnabled();, +                    if (isHostnameVerificationEnabled == false) {, +                        httpsConn.setHostnameVerifier(NoopHostnameVerifier.INSTANCE);, +                    }, +    private static final class NoopHostnameVerifier implements HostnameVerifier {, +, +        private static final HostnameVerifier INSTANCE = new NoopHostnameVerifier();, +, +        @Override, +        public boolean verify(String s, SSLSession sslSession) {, +            return true;, +        }, +++ b/elasticsearch/x-pack/src/test/java/org/elasticsearch/xpack/common/http/HttpClientTests.java, +import org.elasticsearch.xpack.ssl.VerificationMode;, +        httpClient = new HttpClient(Settings.EMPTY, authRegistry, new SSLService(environment.settings(), environment));, +        HttpClient httpClient = new HttpClient(settings, authRegistry, new SSLService(settings, environment));, +                .put("xpack.ssl.keystore.path", getDataPath("/org/elasticsearch/xpack/security/keystore/testnode.jks")), +                .put("xpack.ssl.keystore.password", "testnode"), +        webServer.useHttps(new SSLService(settings2, environment).sslSocketFactory(Settings.EMPTY), false);, +, +        webServer.enqueue(new MockResponse().setResponseCode(200).setBody("body"));, +        HttpRequest.Builder request = HttpRequest.builder("localhost", webPort), +                .scheme(Scheme.HTTPS), +                .path("/test"), +                .body("body");, +        HttpResponse response = httpClient.execute(request.build());, +        assertThat(response.status(), equalTo(200));, +        assertThat(response.body().utf8ToString(), equalTo("body"));, +        RecordedRequest recordedRequest = webServer.takeRequest();, +        assertThat(recordedRequest.getPath(), equalTo("/test"));, +        assertThat(recordedRequest.getBody().readUtf8Line(), equalTo("body"));, +    }, +, +    public void testHttpsDisableHostnameVerification() throws Exception {, +        Path resource = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode-no-subjaltname.jks");, +, +        Settings settings;, +        if (randomBoolean()) {, +            settings = Settings.builder(), +                    .put("xpack.http.ssl.truststore.path", resource.toString()), +                    .put("xpack.http.ssl.truststore.password", "testnode-no-subjaltname"), +                    .put("xpack.http.ssl.verification_mode", randomFrom(VerificationMode.NONE, VerificationMode.CERTIFICATE)), +                    .build();, +        } else {, +            settings = Settings.builder(), +                    .put("xpack.ssl.truststore.path", resource.toString()), +                    .put("xpack.ssl.truststore.password", "testnode-no-subjaltname"), +                    .put("xpack.ssl.verification_mode", randomFrom(VerificationMode.NONE, VerificationMode.CERTIFICATE)), +                    .build();, +        }]