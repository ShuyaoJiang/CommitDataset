[+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteRequestBuilders.java, +/**, + * Builds requests for remote version of Elasticsearch. Note that unlike most of the, + * rest of Elasticsearch this file needs to be compatible with very old versions of, + * Elasticsearch. Thus is often uses identifiers for versions like {@code 2000099}, + * for {@code 2.0.0-alpha1}. Do not drop support for features from this file just, + * because the version constants have been removed., + */, +                if (false == searchRequest.source().storedFields().fieldNames().contains("_source")) {, +        }, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteRequestBuilders.java, +/**, + * Builds requests for remote version of Elasticsearch. Note that unlike most of the, + * rest of Elasticsearch this file needs to be compatible with very old versions of, + * Elasticsearch. Thus is often uses identifiers for versions like {@code 2000099}, + * for {@code 2.0.0-alpha1}. Do not drop support for features from this file just, + * because the version constants have been removed., + */, +                if (false == searchRequest.source().storedFields().fieldNames().contains("_source")) {, +        }, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/remote/RemoteRequestBuildersTests.java, +/**, + * Tests for {@link RemoteRequestBuilders} which builds requests for remote version of, + * Elasticsearch. Note that unlike most of the rest of Elasticsearch this file needs to, + * be compatible with very old versions of Elasticsearch. Thus is often uses identifiers, + * for versions like {@code 2000099} for {@code 2.0.0-alpha1}. Do not drop support for, + * features from this file just because the version constants have been removed., + */, +        Version remoteVersion = Version.fromId(between(2000099, Version.CURRENT.id));, +        searchRequest = new SearchRequest().source(new SearchSourceBuilder());, +        searchRequest.source().storedField("_source").storedField("_id");, +        remoteVersion = Version.fromId(between(Version.V_5_0_0_alpha4_ID, Version.CURRENT.id));, +        searchRequest = new SearchRequest().source(new SearchSourceBuilder());, +        searchRequest.source().storedField("_source").storedField("_id");, +        remoteVersion = Version.fromId(between(2000099, Version.V_5_0_0_alpha4_ID - 1));, +, +        // Test extra fields for versions that need it, +        searchRequest = new SearchRequest().source(new SearchSourceBuilder());, +        searchRequest.source().storedField("_source").storedField("_id");, +        remoteVersion = Version.fromId(between(0, 2000099 - 1));, +        assertThat(initialSearchParams(searchRequest, remoteVersion), hasEntry("fields", "_source,_id,_parent,_routing,_ttl"));, +, +        // But only versions before 1.0 force _source to be in the list, +        searchRequest = new SearchRequest().source(new SearchSourceBuilder());, +        searchRequest.source().storedField("_id");, +        remoteVersion = Version.fromId(between(1000099, 2000099 - 1));, +        assertThat(initialSearchParams(searchRequest, remoteVersion), hasEntry("fields", "_id,_parent,_routing,_ttl"));]