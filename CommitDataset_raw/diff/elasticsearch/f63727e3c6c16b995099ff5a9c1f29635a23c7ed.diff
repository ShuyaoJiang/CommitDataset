[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    private volatile IndexWriter indexWriter;, +            if (closed) {, +                throw new EngineClosedException(shardId);, +            }, +            if (closed) {, +                e = new EngineClosedException(shardId, e);, +            }, +            if (closed) {, +                e = new EngineClosedException(shardId, e);, +            }, +            if (closed) {, +                e = new EngineClosedException(shardId, e);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    private volatile IndexWriter indexWriter;, +            if (closed) {, +                throw new EngineClosedException(shardId);, +            }, +            if (closed) {, +                e = new EngineClosedException(shardId, e);, +            }, +            if (closed) {, +                e = new EngineClosedException(shardId, e);, +            }, +            if (closed) {, +                e = new EngineClosedException(shardId, e);, +            }, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/stress/refresh/RefreshStressTest1.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.stress.refresh;, +, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.index.query.FilterBuilders;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.NodeBuilder;, +, +import java.util.UUID;, +, +/**, + */, +public class RefreshStressTest1 {, +, +    public static void main(String[] args) throws InterruptedException {, +        Node node = NodeBuilder.nodeBuilder().local(true).loadConfigSettings(false).clusterName("testCluster").settings(, +                ImmutableSettings.settingsBuilder(), +                        .put("node.name", "node1"), +                        .put("gateway.type", "none"), +                                //.put("path.data", new File("target/data").getAbsolutePath()), +                        .build()).node();, +        Node node2 = NodeBuilder.nodeBuilder().local(true).loadConfigSettings(false).clusterName("testCluster").settings(, +                ImmutableSettings.settingsBuilder(), +                        .put("node.name", "node2"), +                        .put("gateway.type", "none"), +                                //.put("path.data", new File("target/data").getAbsolutePath()), +                        .build()).node();, +        Client client = node.client();, +, +        for (int loop = 1; loop < 1000; loop++) {, +            String indexName = "testindex" + loop;, +            String typeName = "testType" + loop;, +            String id = UUID.randomUUID().toString();, +            String mapping = "{ \"" + typeName + "\" :  {\"dynamic_templates\" : [{\"no_analyze_strings\" : {\"match_mapping_type\" : \"string\",\"match\" : \"*\",\"mapping\" : {\"type\" : \"string\",\"index\" : \"not_analyzed\"}}}]}}";, +            client.admin().indices().prepareCreate(indexName).execute().actionGet();, +            client.admin().indices().preparePutMapping(indexName).setType(typeName).setSource(mapping).execute().actionGet();, +//      sleep after put mapping, +//      Thread.sleep(100);, +, +            System.out.println("indexing " + loop);, +            String name = "name" + id;, +            client.prepareIndex(indexName, typeName, id).setSource("{ \"id\": \"" + id + "\", \"name\": \"" + name + "\" }").execute().actionGet();, +, +            client.admin().indices().prepareRefresh(indexName).execute().actionGet();, +//      sleep after refresh, +//      Thread.sleep(100);, +, +            System.out.println("searching " + loop);, +            SearchResponse result = client.prepareSearch(indexName).setFilter(FilterBuilders.termFilter("name", name)).execute().actionGet();, +            if (result.getHits().hits().length != 1) {, +                for (int i = 1; i <= 100; i++) {]