[+++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64, OS X only), +, +    /**, +     * codebase location for untrusted scripts (provide some additional safety), +     * <p>, +     * This is not a full URL, just a path., +     */, +    public static final String UNTRUSTED_CODEBASE = "/untrusted";, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64, OS X only), +, +    /**, +     * codebase location for untrusted scripts (provide some additional safety), +     * <p>, +     * This is not a full URL, just a path., +     */, +    public static final String UNTRUSTED_CODEBASE = "/untrusted";, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +    /** limited policy for scripts */, +    static final String UNTRUSTED_RESOURCE = "untrusted.policy";, +    final Policy untrusted;, +        URI untrustedUri = getClass().getResource(UNTRUSTED_RESOURCE).toURI();, +        this.untrusted = Policy.getInstance("JavaPolicy", new URIParameter(untrustedUri));, +        if (codeSource == null) {, +            return false;, +        }, +, +            // run scripts with limited permissions, +            if (BootstrapInfo.UNTRUSTED_CODEBASE.equals(location.getFile())) {, +                return untrusted.implies(domain, permission);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64, OS X only), +, +    /**, +     * codebase location for untrusted scripts (provide some additional safety), +     * <p>, +     * This is not a full URL, just a path., +     */, +    public static final String UNTRUSTED_CODEBASE = "/untrusted";, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +    /** limited policy for scripts */, +    static final String UNTRUSTED_RESOURCE = "untrusted.policy";, +    final Policy untrusted;, +        URI untrustedUri = getClass().getResource(UNTRUSTED_RESOURCE).toURI();, +        this.untrusted = Policy.getInstance("JavaPolicy", new URIParameter(untrustedUri));, +        if (codeSource == null) {, +            return false;, +        }, +, +            // run scripts with limited permissions, +            if (BootstrapInfo.UNTRUSTED_CODEBASE.equals(location.getFile())) {, +                return untrusted.implies(domain, permission);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64, OS X only), +, +    /**, +     * codebase location for untrusted scripts (provide some additional safety), +     * <p>, +     * This is not a full URL, just a path., +     */, +    public static final String UNTRUSTED_CODEBASE = "/untrusted";, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +    /** limited policy for scripts */, +    static final String UNTRUSTED_RESOURCE = "untrusted.policy";, +    final Policy untrusted;, +        URI untrustedUri = getClass().getResource(UNTRUSTED_RESOURCE).toURI();, +        this.untrusted = Policy.getInstance("JavaPolicy", new URIParameter(untrustedUri));, +        if (codeSource == null) {, +            return false;, +        }, +, +            // run scripts with limited permissions, +            if (BootstrapInfo.UNTRUSTED_CODEBASE.equals(location.getFile())) {, +                return untrusted.implies(domain, permission);, +++ /dev/null, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // Allow executing groovy scripts with codesource of /untrusted, +  permission groovy.security.GroovyCodeSourcePermission "/untrusted";, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64, OS X only), +, +    /**, +     * codebase location for untrusted scripts (provide some additional safety), +     * <p>, +     * This is not a full URL, just a path., +     */, +    public static final String UNTRUSTED_CODEBASE = "/untrusted";, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +    /** limited policy for scripts */, +    static final String UNTRUSTED_RESOURCE = "untrusted.policy";, +    final Policy untrusted;, +        URI untrustedUri = getClass().getResource(UNTRUSTED_RESOURCE).toURI();, +        this.untrusted = Policy.getInstance("JavaPolicy", new URIParameter(untrustedUri));, +        if (codeSource == null) {, +            return false;, +        }, +, +            // run scripts with limited permissions]