[+++ b/src/main/java/org/elasticsearch/index/fielddata/DoubleValues.java, +import org.elasticsearch.index.fielddata.ordinals.Ordinals;, +import org.elasticsearch.index.fielddata.ordinals.Ordinals.Docs;, +public abstract class DoubleValues {, +    public static final DoubleValues EMPTY = new Empty();, +    private final boolean multiValued;, +    protected final Iter.Single iter = new Iter.Single();, +, +    , +    protected DoubleValues(boolean multiValued) {, +        this.multiValued = multiValued;, +    }, +    public final boolean isMultiValued() {, +        return multiValued;, +    }, +    public abstract boolean hasValue(int docId);, +    public abstract double getValue(int docId);, +    public double getValueMissing(int docId, double missingValue) {, +        if (hasValue(docId)) {, +            return getValue(docId);, +        }, +        return missingValue;, +    public Iter getIter(int docId) {, +        assert !isMultiValued();, +        if (hasValue(docId)) {, +            return iter.reset(getValue(docId));, +        } else {, +            return Iter.Empty.INSTANCE;, +        }, +    }, +, +    , +    public static abstract class DenseDoubleValues extends DoubleValues {, +        , +        , +        protected DenseDoubleValues(boolean multiValued) {, +            super(multiValued);, +        }, +        , +        @Override, +        public final boolean hasValue(int docId) {, +            return true;, +        }, +, +        public final double getValueMissing(int docId, double missingValue) {, +            assert hasValue(docId);, +            assert !isMultiValued();, +            return getValue(docId);, +        }, +        , +        public final Iter getIter(int docId) {, +            assert hasValue(docId);, +            assert !isMultiValued();, +            return iter.reset(getValue(docId));, +        }, +, +    }, +    , +    public static abstract class OrdBasedDoubleValues extends DoubleValues {, +, +        protected final Docs ordinals;, +        private final Iter.Multi iter;, +, +        protected OrdBasedDoubleValues(Ordinals.Docs ordinals) {, +            super(ordinals.isMultiValued());, +            this.ordinals = ordinals;, +            iter = new Iter.Multi(this);, +        }, +        , +        @Override, +        public final  boolean hasValue(int docId) {, +            return ordinals.getOrd(docId) != 0;, +        }, +, +        @Override, +        public final double getValue(int docId) {, +            return getByOrd(ordinals.getOrd(docId));, +        }, +        , +        @Override, +        public final double getValueMissing(int docId, double missingValue) {, +            final int ord = ordinals.getOrd(docId);, +            if (ord == 0) {, +                return missingValue;, +            } else {, +                return getByOrd(ord);, +            }, +        }, +        , +        protected abstract double getByOrd(int ord);, +, +        @Override, +        public final Iter getIter(int docId) {, +           return iter.reset(ordinals.getIter(docId));, +        }, +, +    }, +, +    public static interface Iter {, +        public static class Empty implements Iter {]