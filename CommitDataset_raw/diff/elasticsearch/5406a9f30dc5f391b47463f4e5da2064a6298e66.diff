[+++ b/build.gradle, +    "org.elasticsearch.plugin:rank-eval-client:${version}": ':modules:rank-eval',, +++ b/build.gradle, +    "org.elasticsearch.plugin:rank-eval-client:${version}": ':modules:rank-eval',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/VersionCollection.groovy, +        // The tip of each minor series (>= 5.6) is unreleased, so set their 'snapshot' flags, +                        currConsideredVersion.revision, currConsideredVersion.suffix, true, branch), +        // If we're making a release build then the current should not be a snapshot after all., +        final boolean currentIsSnapshot = "true" == System.getProperty("build.snapshot", "true"), +        if (false == currentIsSnapshot) {, +            versions[-1] = new Version(versions[-1].major, versions[-1].minor, versions[-1].revision, versions[-1].suffix, false, null), +        }, +, +            it.major == targetMajor && it.before(currentVersion) && it.snapshot, +++ b/build.gradle, +    "org.elasticsearch.plugin:rank-eval-client:${version}": ':modules:rank-eval',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/VersionCollection.groovy, +        // The tip of each minor series (>= 5.6) is unreleased, so set their 'snapshot' flags, +                        currConsideredVersion.revision, currConsideredVersion.suffix, true, branch), +        // If we're making a release build then the current should not be a snapshot after all., +        final boolean currentIsSnapshot = "true" == System.getProperty("build.snapshot", "true"), +        if (false == currentIsSnapshot) {, +            versions[-1] = new Version(versions[-1].major, versions[-1].minor, versions[-1].revision, versions[-1].suffix, false, null), +        }, +, +            it.major == targetMajor && it.before(currentVersion) && it.snapshot, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            case 'rpm':, +                File rpmDatabase = new File(node.baseDir, 'rpm-database'), +                File rpmExtracted = new File(node.baseDir, 'rpm-extracted'), +                /* Delay reading the location of the rpm file until task execution */, +                Object rpm = "${ -> configuration.singleFile}", +                extract = project.tasks.create(name: name, type: LoggedExec, dependsOn: extractDependsOn) {, +                    commandLine 'rpm', '--badreloc', '--nodeps', '--noscripts', '--notriggers',, +                        '--dbpath', rpmDatabase,, +                        '--relocate', "/=${rpmExtracted}",, +                        '-i', rpm, +                    doFirst {, +                        rpmDatabase.deleteDir(), +                        rpmExtracted.deleteDir(), +                    }, +                    outputs.dir rpmExtracted, +                }, +                break;, +            case 'deb':, +                /* Delay reading the location of the deb file until task execution */, +                File debExtracted = new File(node.baseDir, 'deb-extracted'), +                Object deb = "${ -> configuration.singleFile}", +                extract = project.tasks.create(name: name, type: LoggedExec, dependsOn: extractDependsOn) {, +                    commandLine 'dpkg-deb', '-x', deb, debExtracted, +                    doFirst {, +                        debExtracted.deleteDir(), +                    }, +                    outputs.dir debExtracted, +                }, +                break;, +++ b/build.gradle, +    "org.elasticsearch.plugin:rank-eval-client:${version}": ':modules:rank-eval',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/VersionCollection.groovy, +        // The tip of each minor series (>= 5.6) is unreleased, so set their 'snapshot' flags, +                        currConsideredVersion.revision, currConsideredVersion.suffix, true, branch), +        // If we're making a release build then the current should not be a snapshot after all., +        final boolean currentIsSnapshot = "true" == System.getProperty("build.snapshot", "true"), +        if (false == currentIsSnapshot) {, +            versions[-1] = new Version(versions[-1].major, versions[-1].minor, versions[-1].revision, versions[-1].suffix, false, null), +        }, +, +            it.major == targetMajor && it.before(currentVersion) && it.snapshot, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            case 'rpm':, +                File rpmDatabase = new File(node.baseDir, 'rpm-database'), +                File rpmExtracted = new File(node.baseDir, 'rpm-extracted'), +                /* Delay reading the location of the rpm file until task execution */, +                Object rpm = "${ -> configuration.singleFile}", +                extract = project.tasks.create(name: name, type: LoggedExec, dependsOn: extractDependsOn) {, +                    commandLine 'rpm', '--badreloc', '--nodeps', '--noscripts', '--notriggers',, +                        '--dbpath', rpmDatabase,, +                        '--relocate', "/=${rpmExtracted}",, +                        '-i', rpm, +                    doFirst {, +                        rpmDatabase.deleteDir(), +                        rpmExtracted.deleteDir(), +                    }, +                    outputs.dir rpmExtracted, +                }, +                break;, +            case 'deb':, +                /* Delay reading the location of the deb file until task execution */, +                File debExtracted = new File(node.baseDir, 'deb-extracted'), +                Object deb = "${ -> configuration.singleFile}", +                extract = project.tasks.create(name: name, type: LoggedExec, dependsOn: extractDependsOn) {, +                    commandLine 'dpkg-deb', '-x', deb, debExtracted, +                    doFirst {, +                        debExtracted.deleteDir(), +                    }, +                    outputs.dir debExtracted, +                }, +                break;, +++ b/client/rest-high-level/build.gradle, +  compile "org.elasticsearch.plugin:rank-eval-client:${version}"]