[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIndices.java, +import org.elasticsearch.index.percolator.PercolateStats;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIndices.java, +import org.elasticsearch.index.percolator.PercolateStats;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.percolator.PercolateStats;, +                    percolate = indexShard.percolateStats();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIndices.java, +import org.elasticsearch.index.percolator.PercolateStats;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.percolator.PercolateStats;, +                    percolate = indexShard.percolateStats();, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsIndices.java, +import org.elasticsearch.index.percolator.PercolateStats;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.percolator.PercolateStats;, +                    percolate = indexShard.percolateStats();, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +            shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolateStats.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.percolator;, +, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Streamable;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +, +import java.io.IOException;, +, +/**, + * Exposes percolator related statistics., + */, +public class PercolateStats implements Streamable, ToXContent {, +, +    private long percolateCount;, +    private long percolateTimeInMillis;, +    private long current;, +    private long memorySizeInBytes = -1;, +    private long numQueries;, +, +    /**, +     * Noop constructor for serialazation purposes., +     */, +    public PercolateStats() {, +    }, +, +    PercolateStats(long percolateCount, long percolateTimeInMillis, long current, long memorySizeInBytes, long numQueries) {, +        this.percolateCount = percolateCount;, +        this.percolateTimeInMillis = percolateTimeInMillis;, +        this.current = current;, +        this.memorySizeInBytes = memorySizeInBytes;, +        this.numQueries = numQueries;, +    }, +, +    /**, +     * @return The number of times the percolate api has been invoked., +     */, +    public long getCount() {, +        return percolateCount;, +    }, +, +    /**, +     * @return The total amount of time spend in the percolate api, +     */, +    public long getTimeInMillis() {, +        return percolateTimeInMillis;, +    }, +, +    /**, +     * @return The total amount of time spend in the percolate api, +     */, +    public TimeValue getTime() {, +        return new TimeValue(getTimeInMillis());, +    }, +, +    /**]