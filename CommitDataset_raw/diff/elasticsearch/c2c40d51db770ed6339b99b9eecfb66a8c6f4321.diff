[+++ b/plugins/repository-s3/src/test/java/org/elasticsearch/cloud/aws/blobstore/MockAmazonS3.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cloud.aws.blobstore;, +, +import com.amazonaws.AmazonClientException;, +import com.amazonaws.AmazonServiceException;, +import com.amazonaws.services.s3.AbstractAmazonS3;, +import com.amazonaws.services.s3.model.AmazonS3Exception;, +import com.amazonaws.services.s3.model.CopyObjectRequest;, +import com.amazonaws.services.s3.model.CopyObjectResult;, +import com.amazonaws.services.s3.model.DeleteObjectRequest;, +import com.amazonaws.services.s3.model.GetObjectMetadataRequest;, +import com.amazonaws.services.s3.model.GetObjectRequest;, +import com.amazonaws.services.s3.model.ListObjectsRequest;, +import com.amazonaws.services.s3.model.ObjectListing;, +import com.amazonaws.services.s3.model.ObjectMetadata;, +import com.amazonaws.services.s3.model.PutObjectRequest;, +import com.amazonaws.services.s3.model.PutObjectResult;, +import com.amazonaws.services.s3.model.S3Object;, +import com.amazonaws.services.s3.model.S3ObjectInputStream;, +import com.amazonaws.services.s3.model.S3ObjectSummary;, +import com.amazonaws.util.Base64;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.security.DigestInputStream;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +, +class MockAmazonS3 extends AbstractAmazonS3 {, +, +    private Map<String, InputStream> blobs = new ConcurrentHashMap<>();, +, +    // in ESBlobStoreContainerTestCase.java, the maximum, +    // length of the input data is 100 bytes, +    private byte[] byteCounter = new byte[100];, +, +    @Override, +    public boolean doesBucketExist(String bucket) {, +        return true;, +    }, +, +    @Override, +    public ObjectMetadata getObjectMetadata(, +            GetObjectMetadataRequest getObjectMetadataRequest), +            throws AmazonClientException, AmazonServiceException {, +        String blobName = getObjectMetadataRequest.getKey();, +, +        if (!blobs.containsKey(blobName)) {, +            throw new AmazonS3Exception("[" + blobName + "] does not exist.");, +        }, +, +        return new ObjectMetadata(); // nothing is done with it, +    }, +, +    @Override, +    public PutObjectResult putObject(PutObjectRequest putObjectRequest), +            throws AmazonClientException, AmazonServiceException {, +        String blobName = putObjectRequest.getKey();, +        DigestInputStream stream = (DigestInputStream) putObjectRequest.getInputStream();, +, +        if (blobs.containsKey(blobName)) {, +            throw new AmazonS3Exception("[" + blobName + "] already exists.");, +        }, +, +        blobs.put(blobName, stream);, +, +        // input and output md5 hashes need to match to avoid an exception, +        String md5 = Base64.encodeAsString(stream.getMessageDigest().digest());, +        PutObjectResult result = new PutObjectResult();, +        result.setContentMd5(md5);, +, +        return result;, +    }, +, +    @Override, +    public S3Object getObject(GetObjectRequest getObjectRequest), +            throws AmazonClientException, AmazonServiceException {, +        // in ESBlobStoreContainerTestCase.java, the prefix is empty,, +        // so the key and blobName are equivalent to each other]