[+++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +import java.net.URI;, +            /*, +             * The supported format of the SHA-1 files is a single-line file containing the SHA-1. The supported format of the SHA-512 files, +             * is a single-line file containing the SHA-512 and the filename, separated by two spaces. For SHA-1, we verify that the hash, +             * matches, and that the file contains a single line. For SHA-512, we verify that the hash and the filename match, and that the, +             * file contains a single line., +             */, +            if (digestAlgo.equals("SHA-1")) {, +                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));, +            } else {, +                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));, +                final String checksumLine = checksumReader.readLine();, +                final String[] fields = checksumLine.split(" {2}");, +                if (fields.length != 2) {, +                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl);, +                }, +                expectedChecksum = fields[0];, +                final String[] segments = URI.create(urlString).getPath().split("/");, +                final String expectedFile = segments[segments.length - 1];, +                if (fields[1].equals(expectedFile) == false) {, +                    final String message = String.format(, +                            Locale.ROOT,, +                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",, +                            checksumUrl,, +                            expectedFile,, +                            fields[1]);, +                    throw new UserException(ExitCodes.IO_ERROR, message);, +                }, +                if (checksumReader.readLine() != null) {, +                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl);, +                }, +            }, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +import java.net.URI;, +            /*, +             * The supported format of the SHA-1 files is a single-line file containing the SHA-1. The supported format of the SHA-512 files, +             * is a single-line file containing the SHA-512 and the filename, separated by two spaces. For SHA-1, we verify that the hash, +             * matches, and that the file contains a single line. For SHA-512, we verify that the hash and the filename match, and that the, +             * file contains a single line., +             */, +            if (digestAlgo.equals("SHA-1")) {, +                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));, +            } else {, +                final BufferedReader checksumReader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));, +                final String checksumLine = checksumReader.readLine();, +                final String[] fields = checksumLine.split(" {2}");, +                if (fields.length != 2) {, +                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl);, +                }, +                expectedChecksum = fields[0];, +                final String[] segments = URI.create(urlString).getPath().split("/");, +                final String expectedFile = segments[segments.length - 1];, +                if (fields[1].equals(expectedFile) == false) {, +                    final String message = String.format(, +                            Locale.ROOT,, +                            "checksum file at [%s] is not for this plugin, expected [%s] but was [%s]",, +                            checksumUrl,, +                            expectedFile,, +                            fields[1]);, +                    throw new UserException(ExitCodes.IO_ERROR, message);, +                }, +                if (checksumReader.readLine() != null) {, +                    throw new UserException(ExitCodes.IO_ERROR, "Invalid checksum file at " + checksumUrl);, +                }, +            }, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java, +import java.net.URI;, +import static org.elasticsearch.test.hamcrest.RegexMatcher.matches;, +        assertInstallPluginFromUrl(pluginId, name, url, stagingHash, ".sha512", checksumAndFilename(digest, url));, +        MockTerminal terminal = assertInstallPluginFromUrl("mygroup:myplugin:1.0.0", "myplugin", url, null, ".sha1", checksum(digest));, +            assertInstallPluginFromUrl("analysis-icu", "analysis-icu", url, null, ".sha1", checksum(digest)));, +    public void testInvalidShaFileMissingFilename() throws Exception {, +                assertInstallPluginFromUrl("analysis-icu", "analysis-icu", url, null, ".sha512", checksum(digest)));, +        assertEquals(ExitCodes.IO_ERROR, e.exitCode);, +        assertTrue(e.getMessage(), e.getMessage().startsWith("Invalid checksum file"));, +    }, +, +    public void testInvalidShaFileMismatchFilename() throws Exception {, +        String url = "https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-icu/analysis-icu-" + Version.CURRENT + ".zip";, +        MessageDigest digest = MessageDigest.getInstance("SHA-512");, +        UserException e = expectThrows(UserException.class, () ->, +                assertInstallPluginFromUrl(, +                        "analysis-icu",, +                        "analysis-icu",, +                        url,, +                        null,, +                        ".sha512",, +                        checksumAndString(digest, "  repository-s3-" + Version.CURRENT + ".zip")));, +        assertEquals(ExitCodes.IO_ERROR, e.exitCode);, +        assertThat(e, hasToString(matches("checksum file at \\[.*\\] is not for this plugin")));, +    }, +, +    public void testInvalidShaFileContainingExtraLine() throws Exception {, +        String url = "https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-icu/analysis-icu-" + Version.CURRENT + ".zip";, +        MessageDigest digest = MessageDigest.getInstance("SHA-512");, +        UserException e = expectThrows(UserException.class, () ->, +            assertInstallPluginFromUrl(, +                    "analysis-icu",, +                    "analysis-icu",]