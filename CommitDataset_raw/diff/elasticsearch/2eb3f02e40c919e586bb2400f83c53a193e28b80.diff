[+++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/MlMetaIndex.java, +import org.elasticsearch.xpack.ml.calendars.ScheduledEvent;, +                    .startObject(ScheduledEvent.START_TIME.getPreferredName()), +                    .startObject(ScheduledEvent.END_TIME.getPreferredName()), +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/MlMetaIndex.java, +import org.elasticsearch.xpack.ml.calendars.ScheduledEvent;, +                    .startObject(ScheduledEvent.START_TIME.getPreferredName()), +                    .startObject(ScheduledEvent.END_TIME.getPreferredName()), +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/action/GetCalendarEventsAction.java, +import org.elasticsearch.xpack.ml.calendars.ScheduledEvent;, +        private QueryPage<ScheduledEvent> scheduledEvents;, +        public Response(QueryPage<ScheduledEvent> scheduledEvents) {, +            this.scheduledEvents = scheduledEvents;, +            scheduledEvents = new QueryPage<>(in, ScheduledEvent::new);, +            scheduledEvents.writeTo(out);, +            return scheduledEvents.toXContent(builder, params);, +            return Objects.hash(scheduledEvents);, +            return Objects.equals(scheduledEvents, other.scheduledEvents);, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/MlMetaIndex.java, +import org.elasticsearch.xpack.ml.calendars.ScheduledEvent;, +                    .startObject(ScheduledEvent.START_TIME.getPreferredName()), +                    .startObject(ScheduledEvent.END_TIME.getPreferredName()), +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/action/GetCalendarEventsAction.java, +import org.elasticsearch.xpack.ml.calendars.ScheduledEvent;, +        private QueryPage<ScheduledEvent> scheduledEvents;, +        public Response(QueryPage<ScheduledEvent> scheduledEvents) {, +            this.scheduledEvents = scheduledEvents;, +            scheduledEvents = new QueryPage<>(in, ScheduledEvent::new);, +            scheduledEvents.writeTo(out);, +            return scheduledEvents.toXContent(builder, params);, +            return Objects.hash(scheduledEvents);, +            return Objects.equals(scheduledEvents, other.scheduledEvents);, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/action/PostCalendarEventsAction.java, +import org.elasticsearch.xpack.ml.calendars.ScheduledEvent;, +    public static final ParseField EVENTS = new ParseField("events");, +            List<ScheduledEvent.Builder> events = new ArrayList<>();, +                        ScheduledEvent.Builder event = ScheduledEvent.PARSER.apply(parser, null);, +                        throw ExceptionsHelper.badRequestException("Failed to parse scheduled event on line [" + lineNumber + "]", pe);, +            for (ScheduledEvent.Builder event: events) {, +            return new Request(calendarId, events.stream().map(ScheduledEvent.Builder::build).collect(Collectors.toList()));, +        private List<ScheduledEvent> scheduledEvents;, +        public Request(String calendarId, List<ScheduledEvent> scheduledEvents) {, +            this.scheduledEvents = ExceptionsHelper.requireNonNull(scheduledEvents, EVENTS.getPreferredName());, +        public List<ScheduledEvent> getScheduledEvents() {, +            return scheduledEvents;, +            scheduledEvents = in.readList(ScheduledEvent::new);, +            out.writeList(scheduledEvents);, +            return Objects.hash(calendarId, scheduledEvents);, +            return Objects.equals(calendarId, other.calendarId) && Objects.equals(scheduledEvents, other.scheduledEvents);, +        private List<ScheduledEvent> scheduledEvents;, +        public Response(List<ScheduledEvent> scheduledEvents) {, +            this.scheduledEvents = scheduledEvents;, +            in.readList(ScheduledEvent::new);, +            out.writeList(scheduledEvents);, +            builder.field(EVENTS.getPreferredName(), scheduledEvents);, +            return Objects.hash(isAcknowledged(), scheduledEvents);, +            return Objects.equals(isAcknowledged(), other.isAcknowledged()) && Objects.equals(scheduledEvents, other.scheduledEvents);, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/MlMetaIndex.java, +import org.elasticsearch.xpack.ml.calendars.ScheduledEvent;, +                    .startObject(ScheduledEvent.START_TIME.getPreferredName()), +                    .startObject(ScheduledEvent.END_TIME.getPreferredName()), +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/action/GetCalendarEventsAction.java, +import org.elasticsearch.xpack.ml.calendars.ScheduledEvent;, +        private QueryPage<ScheduledEvent> scheduledEvents;, +        public Response(QueryPage<ScheduledEvent> scheduledEvents) {, +            this.scheduledEvents = scheduledEvents;, +            scheduledEvents = new QueryPage<>(in, ScheduledEvent::new);, +            scheduledEvents.writeTo(out);, +            return scheduledEvents.toXContent(builder, params);, +            return Objects.hash(scheduledEvents);, +            return Objects.equals(scheduledEvents, other.scheduledEvents);, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/action/PostCalendarEventsAction.java, +import org.elasticsearch.xpack.ml.calendars.ScheduledEvent;, +    public static final ParseField EVENTS = new ParseField("events");, +            List<ScheduledEvent.Builder> events = new ArrayList<>();, +                        ScheduledEvent.Builder event = ScheduledEvent.PARSER.apply(parser, null);, +                        throw ExceptionsHelper.badRequestException("Failed to parse scheduled event on line [" + lineNumber + "]", pe);, +            for (ScheduledEvent.Builder event: events) {, +            return new Request(calendarId, events.stream().map(ScheduledEvent.Builder::build).collect(Collectors.toList()));, +        private List<ScheduledEvent> scheduledEvents;, +        public Request(String calendarId, List<ScheduledEvent> scheduledEvents) {, +            this.scheduledEvents = ExceptionsHelper.requireNonNull(scheduledEvents, EVENTS.getPreferredName());, +        public List<ScheduledEvent> getScheduledEvents() {, +            return scheduledEvents;, +            scheduledEvents = in.readList(ScheduledEvent::new);, +            out.writeList(scheduledEvents);, +            return Objects.hash(calendarId, scheduledEvents);, +            return Objects.equals(calendarId, other.calendarId) && Objects.equals(scheduledEvents, other.scheduledEvents);, +        private List<ScheduledEvent> scheduledEvents;, +        public Response(List<ScheduledEvent> scheduledEvents) {, +            this.scheduledEvents = scheduledEvents;, +            in.readList(ScheduledEvent::new);, +            out.writeList(scheduledEvents);, +            builder.field(EVENTS.getPreferredName(), scheduledEvents);, +            return Objects.hash(isAcknowledged(), scheduledEvents);, +            return Objects.equals(isAcknowledged(), other.isAcknowledged()) && Objects.equals(scheduledEvents, other.scheduledEvents);, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/ml/action/UpdateProcessAction.java, +        private boolean updateScheduledEvents = false;, +                       boolean updateScheduledEvents) {, +            this.updateScheduledEvents = updateScheduledEvents;]