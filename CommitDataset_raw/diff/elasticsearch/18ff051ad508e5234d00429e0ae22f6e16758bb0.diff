[+++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.plugins.ScriptPlugin;, +        final ScriptModule scriptModule = ScriptModule.create(settings, pluginsService.filterPlugins(ScriptPlugin.class));, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.plugins.ScriptPlugin;, +        final ScriptModule scriptModule = ScriptModule.create(settings, pluginsService.filterPlugins(ScriptPlugin.class));, +++ b/core/src/main/java/org/elasticsearch/plugins/Plugin.java, +import org.elasticsearch.script.ScriptModule;, +     * Old-style guice scripting extension point., +     *, +     * @deprecated implement {@link ScriptPlugin} instead, +     */, +    @Deprecated, +    public final void onModule(ScriptModule module) {}, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.plugins.ScriptPlugin;, +        final ScriptModule scriptModule = ScriptModule.create(settings, pluginsService.filterPlugins(ScriptPlugin.class));, +++ b/core/src/main/java/org/elasticsearch/plugins/Plugin.java, +import org.elasticsearch.script.ScriptModule;, +     * Old-style guice scripting extension point., +     *, +     * @deprecated implement {@link ScriptPlugin} instead, +     */, +    @Deprecated, +    public final void onModule(ScriptModule module) {}, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import org.elasticsearch.script.NativeScriptFactory;, +import org.elasticsearch.script.ScriptContext;, +import org.elasticsearch.script.ScriptEngineService;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +, +    public <T> List<T> filterPlugins(Class<T> type) {, +        return plugins.stream().filter(x -> type.isAssignableFrom(x.v2().getClass())), +            .map(p -> ((T)p.v2())).collect(Collectors.toList());, +    }, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.plugins.ScriptPlugin;, +        final ScriptModule scriptModule = ScriptModule.create(settings, pluginsService.filterPlugins(ScriptPlugin.class));, +++ b/core/src/main/java/org/elasticsearch/plugins/Plugin.java, +import org.elasticsearch.script.ScriptModule;, +     * Old-style guice scripting extension point., +     *, +     * @deprecated implement {@link ScriptPlugin} instead, +     */, +    @Deprecated, +    public final void onModule(ScriptModule module) {}, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import org.elasticsearch.script.NativeScriptFactory;, +import org.elasticsearch.script.ScriptContext;, +import org.elasticsearch.script.ScriptEngineService;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +, +    public <T> List<T> filterPlugins(Class<T> type) {, +        return plugins.stream().filter(x -> type.isAssignableFrom(x.v2().getClass())), +            .map(p -> ((T)p.v2())).collect(Collectors.toList());, +    }, +++ b/core/src/main/java/org/elasticsearch/plugins/ScriptPlugin.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.plugins;, +, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.script.NativeScriptFactory;, +import org.elasticsearch.script.ScriptContext;, +import org.elasticsearch.script.ScriptEngineService;, +, +import java.util.Collections;, +import java.util.List;, +, +/**, + * An additional extension point to {@link Plugin}. Plugins extending the scripting functionality must implement this inteface]