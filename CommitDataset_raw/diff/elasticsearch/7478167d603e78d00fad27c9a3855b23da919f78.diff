[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +import org.elasticsearch.xpack.ccr.action.TransportFollowStatsAction;, +import org.elasticsearch.xpack.ccr.rest.RestFollowStatsAction;, +import org.elasticsearch.xpack.core.ccr.action.FollowStatsAction;, +                new ActionHandler<>(FollowStatsAction.INSTANCE, TransportFollowStatsAction.class),, +                new RestFollowStatsAction(settings, restController),, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +import org.elasticsearch.xpack.ccr.action.TransportFollowStatsAction;, +import org.elasticsearch.xpack.ccr.rest.RestFollowStatsAction;, +import org.elasticsearch.xpack.core.ccr.action.FollowStatsAction;, +                new ActionHandler<>(FollowStatsAction.INSTANCE, TransportFollowStatsAction.class),, +                new RestFollowStatsAction(settings, restController),, +++ /dev/null, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +import org.elasticsearch.xpack.ccr.action.TransportFollowStatsAction;, +import org.elasticsearch.xpack.ccr.rest.RestFollowStatsAction;, +import org.elasticsearch.xpack.core.ccr.action.FollowStatsAction;, +                new ActionHandler<>(FollowStatsAction.INSTANCE, TransportFollowStatsAction.class),, +                new RestFollowStatsAction(settings, restController),, +++ /dev/null, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportFollowStatsAction.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.ccr.action;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.FailedNodeException;, +import org.elasticsearch.action.TaskOperationFailure;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.tasks.TransportTasksAction;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.license.LicenseUtils;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.transport.TransportService;, +import org.elasticsearch.xpack.ccr.Ccr;, +import org.elasticsearch.xpack.ccr.CcrLicenseChecker;, +import org.elasticsearch.xpack.core.ccr.action.FollowStatsAction;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Objects;, +import java.util.Set;, +import java.util.function.Consumer;, +, +public class TransportFollowStatsAction extends TransportTasksAction<, +        ShardFollowNodeTask,, +        FollowStatsAction.StatsRequest,, +        FollowStatsAction.StatsResponses, FollowStatsAction.StatsResponse> {, +, +    private final IndexNameExpressionResolver resolver;, +    private final CcrLicenseChecker ccrLicenseChecker;, +, +    @Inject, +    public TransportFollowStatsAction(, +            final Settings settings,, +            final ClusterService clusterService,, +            final TransportService transportService,, +            final ActionFilters actionFilters,, +            final IndexNameExpressionResolver resolver,, +            final CcrLicenseChecker ccrLicenseChecker) {, +        super(, +                settings,, +                FollowStatsAction.NAME,, +                clusterService,, +                transportService,, +                actionFilters,, +                FollowStatsAction.StatsRequest::new,, +                FollowStatsAction.StatsResponses::new,, +                Ccr.CCR_THREAD_POOL_NAME);, +        this.resolver = Objects.requireNonNull(resolver);, +        this.ccrLicenseChecker = Objects.requireNonNull(ccrLicenseChecker);, +    }, +, +    @Override, +    protected void doExecute(, +            final Task task,, +            final FollowStatsAction.StatsRequest request,, +            final ActionListener<FollowStatsAction.StatsResponses> listener) {, +        if (ccrLicenseChecker.isCcrAllowed() == false) {, +            listener.onFailure(LicenseUtils.newComplianceException("ccr"));, +            return;, +        }, +        super.doExecute(task, request, listener);, +    }, +, +    @Override, +    protected FollowStatsAction.StatsResponses newResponse(, +            final FollowStatsAction.StatsRequest request,, +            final List<FollowStatsAction.StatsResponse> statsRespons,]