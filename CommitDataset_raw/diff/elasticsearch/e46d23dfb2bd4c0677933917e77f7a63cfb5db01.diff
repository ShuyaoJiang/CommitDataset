[+++ b/build.gradle, +wrapper {, +    distributionType = DistributionType.ALL, +    doLast {, +        println "Added checksum to wrapper properties", +      gradleVersion = "4.8.1" // does not default to gradle weapper of project dir, but current version, +++ b/build.gradle, +wrapper {, +    distributionType = DistributionType.ALL, +    doLast {, +        println "Added checksum to wrapper properties", +      gradleVersion = "4.8.1" // does not default to gradle weapper of project dir, but current version, +++ b/buildSrc/build.gradle, +// Make sure :buildSrc: doesn't generate classes incompatible with RUNTIME_JAVA_HOME, +// We can't use BuildPlugin here, so read from file, +String minimumRuntimeVersion = file('src/main/resources/minimumRuntimeVersion').text.trim(), +targetCompatibility = minimumRuntimeVersion, +sourceCompatibility = minimumRuntimeVersion, +, +++ b/build.gradle, +wrapper {, +    distributionType = DistributionType.ALL, +    doLast {, +        println "Added checksum to wrapper properties", +      gradleVersion = "4.8.1" // does not default to gradle weapper of project dir, but current version, +++ b/buildSrc/build.gradle, +// Make sure :buildSrc: doesn't generate classes incompatible with RUNTIME_JAVA_HOME, +// We can't use BuildPlugin here, so read from file, +String minimumRuntimeVersion = file('src/main/resources/minimumRuntimeVersion').text.trim(), +targetCompatibility = minimumRuntimeVersion, +sourceCompatibility = minimumRuntimeVersion, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            JavaVersion minimumRuntimeVersion = JavaVersion.toVersion(, +                    BuildPlugin.class.getClassLoader().getResourceAsStream("minimumRuntimeVersion").text.trim(), +            ), +            JavaVersion minimumCompilerVersion = JavaVersion.toVersion(, +                    BuildPlugin.class.getClassLoader().getResourceAsStream("minimumCompilerVersion").text.trim(), +            ), +            project.rootProject.ext.minimumCompilerVersion = minimumCompilerVersion, +            project.rootProject.ext.minimumRuntimeVersion = minimumRuntimeVersion, +        project.targetCompatibility = project.rootProject.ext.minimumRuntimeVersion, +        project.sourceCompatibility = project.rootProject.ext.minimumRuntimeVersion, +        // Only works with  `enableFeaturePreview('STABLE_PUBLISHING')`, +        // https://github.com/gradle/gradle/issues/5696#issuecomment-396965185, +        project.tasks.withType(GenerateMavenPom.class) { GenerateMavenPom generatePOMTask ->, +            // The GenerateMavenPom task is aggressive about setting the destination, instead of fighting it,, +            // just make a copy., +            doLast {, +                project.copy {, +                    from generatePOMTask.destination, +                    into "${project.buildDir}/distributions", +                    rename { "${project.archivesBaseName}-${project.version}.pom" }, +                }, +            }, +            // build poms with assemble (if the assemble task exists), +            Task assemble = project.tasks.findByName('assemble'), +            if (assemble) {, +                assemble.dependsOn(generatePOMTask), +            }, +        }, +++ b/build.gradle, +wrapper {, +    distributionType = DistributionType.ALL, +    doLast {, +        println "Added checksum to wrapper properties", +      gradleVersion = "4.8.1" // does not default to gradle weapper of project dir, but current version, +++ b/buildSrc/build.gradle, +// Make sure :buildSrc: doesn't generate classes incompatible with RUNTIME_JAVA_HOME, +// We can't use BuildPlugin here, so read from file, +String minimumRuntimeVersion = file('src/main/resources/minimumRuntimeVersion').text.trim(), +targetCompatibility = minimumRuntimeVersion, +sourceCompatibility = minimumRuntimeVersion, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            JavaVersion minimumRuntimeVersion = JavaVersion.toVersion(, +                    BuildPlugin.class.getClassLoader().getResourceAsStream("minimumRuntimeVersion").text.trim(), +            ), +            JavaVersion minimumCompilerVersion = JavaVersion.toVersion(, +                    BuildPlugin.class.getClassLoader().getResourceAsStream("minimumCompilerVersion").text.trim(), +            ), +            project.rootProject.ext.minimumCompilerVersion = minimumCompilerVersion, +            project.rootProject.ext.minimumRuntimeVersion = minimumRuntimeVersion, +        project.targetCompatibility = project.rootProject.ext.minimumRuntimeVersion, +        project.sourceCompatibility = project.rootProject.ext.minimumRuntimeVersion, +        // Only works with  `enableFeaturePreview('STABLE_PUBLISHING')`, +        // https://github.com/gradle/gradle/issues/5696#issuecomment-396965185, +        project.tasks.withType(GenerateMavenPom.class) { GenerateMavenPom generatePOMTask ->, +            // The GenerateMavenPom task is aggressive about setting the destination, instead of fighting it,, +            // just make a copy., +            doLast {, +                project.copy {, +                    from generatePOMTask.destination, +                    into "${project.buildDir}/distributions", +                    rename { "${project.archivesBaseName}-${project.version}.pom" }, +                }, +            }, +            // build poms with assemble (if the assemble task exists), +            Task assemble = project.tasks.findByName('assemble'), +            if (assemble) {]