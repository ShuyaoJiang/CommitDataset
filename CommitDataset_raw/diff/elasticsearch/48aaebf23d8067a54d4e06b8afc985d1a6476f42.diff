[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]settings[/\\]loader[/\\]PropertiesSettingsLoader.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]settings[/\\]loader[/\\]PropertiesSettingsLoader.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/common/settings/loader/PropertiesSettingsLoader.java, +        Properties props = new NoDuplicatesProperties();, +        FastStringReader reader = new FastStringReader(source);, +            props.load(reader);, +            Map<String, String> result = new HashMap<>();, +            IOUtils.closeWhileHandlingException(reader);, +    @Override, +    public Map<String, String> load(byte[] source) throws IOException {, +        Properties props = new NoDuplicatesProperties();, +        StreamInput stream = StreamInput.wrap(source);, +        try {, +            props.load(stream);, +            Map<String, String> result = new HashMap<>();, +            for (Map.Entry entry : props.entrySet()) {, +                result.put((String) entry.getKey(), (String) entry.getValue());, +            }, +            return result;, +        } finally {, +            IOUtils.closeWhileHandlingException(stream);, +        }, +                throw new ElasticsearchParseException("duplicate settings key [{}] found, previous value [{}], current value [{}]", key, previousValue, value);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]settings[/\\]loader[/\\]PropertiesSettingsLoader.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/common/settings/loader/PropertiesSettingsLoader.java, +        Properties props = new NoDuplicatesProperties();, +        FastStringReader reader = new FastStringReader(source);, +            props.load(reader);, +            Map<String, String> result = new HashMap<>();, +            IOUtils.closeWhileHandlingException(reader);, +    @Override, +    public Map<String, String> load(byte[] source) throws IOException {, +        Properties props = new NoDuplicatesProperties();, +        StreamInput stream = StreamInput.wrap(source);, +        try {, +            props.load(stream);, +            Map<String, String> result = new HashMap<>();, +            for (Map.Entry entry : props.entrySet()) {, +                result.put((String) entry.getKey(), (String) entry.getValue());, +            }, +            return result;, +        } finally {, +            IOUtils.closeWhileHandlingException(stream);, +        }, +                throw new ElasticsearchParseException("duplicate settings key [{}] found, previous value [{}], current value [{}]", key, previousValue, value);, +++ b/core/src/test/java/org/elasticsearch/common/settings/loader/PropertiesSettingsLoaderTests.java, +        PropertiesSettingsLoader loader = new PropertiesSettingsLoader();, +        try {, +            loader.load("foo=bar\nfoo=baz");, +            fail("expected exception");, +        } catch (ElasticsearchParseException e) {, +    }, +        PropertiesSettingsLoader loader = new PropertiesSettingsLoader();, +        try {, +            loader.load("foo=bar\nfoo=baz".getBytes(Charset.defaultCharset()));, +        } catch (ElasticsearchParseException e) {, +    }, +        final PropertiesSettingsLoader loader = new PropertiesSettingsLoader();, +        final PropertiesSettingsLoader.NoDuplicatesProperties properties = loader.new NoDuplicatesProperties();, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]settings[/\\]loader[/\\]PropertiesSettingsLoader.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/common/settings/loader/PropertiesSettingsLoader.java, +        Properties props = new NoDuplicatesProperties();, +        FastStringReader reader = new FastStringReader(source);, +            props.load(reader);, +            Map<String, String> result = new HashMap<>();, +            IOUtils.closeWhileHandlingException(reader);, +    @Override, +    public Map<String, String> load(byte[] source) throws IOException {, +        Properties props = new NoDuplicatesProperties();, +        StreamInput stream = StreamInput.wrap(source);, +        try {, +            props.load(stream);, +            Map<String, String> result = new HashMap<>();, +            for (Map.Entry entry : props.entrySet()) {, +                result.put((String) entry.getKey(), (String) entry.getValue());, +            }, +            return result;, +        } finally {, +            IOUtils.closeWhileHandlingException(stream);, +        }, +                throw new ElasticsearchParseException("duplicate settings key [{}] found, previous value [{}], current value [{}]", key, previousValue, value);, +++ b/core/src/test/java/org/elasticsearch/common/settings/loader/PropertiesSettingsLoaderTests.java, +        PropertiesSettingsLoader loader = new PropertiesSettingsLoader();, +        try {, +            loader.load("foo=bar\nfoo=baz");, +            fail("expected exception");, +        } catch (ElasticsearchParseException e) {, +    }, +        PropertiesSettingsLoader loader = new PropertiesSettingsLoader();, +        try {, +            loader.load("foo=bar\nfoo=baz".getBytes(Charset.defaultCharset()));, +        } catch (ElasticsearchParseException e) {, +    }, +        final PropertiesSettingsLoader loader = new PropertiesSettingsLoader();, +        final PropertiesSettingsLoader.NoDuplicatesProperties properties = loader.new NoDuplicatesProperties();, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java]