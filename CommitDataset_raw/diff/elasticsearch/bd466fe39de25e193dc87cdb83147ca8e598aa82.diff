[+++ b/src/test/java/org/elasticsearch/test/integration/AbstractSharedClusterTest.java, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import java.util.*;, +import java.util.concurrent.ExecutionException;, +    // TODO move this into a base class for integration tests, +    public void indexRandom(String index, boolean forceRefresh, IndexRequestBuilder...builders) throws InterruptedException, ExecutionException {, +        Random random = getRandom();, +        List<IndexRequestBuilder> list = Arrays.asList(builders);, +        Collections.shuffle(list, random);, +        for (IndexRequestBuilder indexRequestBuilder : list) {, +            indexRequestBuilder.execute().actionGet();, +            if (frequently()) {, +                if (rarely()) {, +                    client().admin().indices().prepareFlush(index).execute().get();, +                } else if (rarely()) {, +                    client().admin().indices().prepareOptimize(index).setMaxNumSegments(between(1, 10)).setFlush(random.nextBoolean()).execute().get();, +                }, +                client().admin().indices().prepareRefresh(index).execute().get();, +            }, +        }, +        if (forceRefresh) {, +            client().admin().indices().prepareRefresh(index).execute().get();, +        }, +    }, +, +++ b/src/test/java/org/elasticsearch/test/integration/AbstractSharedClusterTest.java, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import java.util.*;, +import java.util.concurrent.ExecutionException;, +    // TODO move this into a base class for integration tests, +    public void indexRandom(String index, boolean forceRefresh, IndexRequestBuilder...builders) throws InterruptedException, ExecutionException {, +        Random random = getRandom();, +        List<IndexRequestBuilder> list = Arrays.asList(builders);, +        Collections.shuffle(list, random);, +        for (IndexRequestBuilder indexRequestBuilder : list) {, +            indexRequestBuilder.execute().actionGet();, +            if (frequently()) {, +                if (rarely()) {, +                    client().admin().indices().prepareFlush(index).execute().get();, +                } else if (rarely()) {, +                    client().admin().indices().prepareOptimize(index).setMaxNumSegments(between(1, 10)).setFlush(random.nextBoolean()).execute().get();, +                }, +                client().admin().indices().prepareRefresh(index).execute().get();, +            }, +        }, +        if (forceRefresh) {, +            client().admin().indices().prepareRefresh(index).execute().get();, +        }, +    }, +, +++ b/src/test/java/org/elasticsearch/test/integration/search/query/SimpleQueryTests.java, +        indexRandom("test", true, , +                client().prepareIndex("test", "type1", "3").setSource("field1", "quick lazy huge brown pidgin", "field2", "the quick lazy huge brown fox jumps over the tree"),, +                client().prepareIndex("test", "type1", "1").setSource("field1", "the quick brown fox"),, +                client().prepareIndex("test", "type1", "2").setSource("field1", "the quick lazy huge brown fox jumps over the tree"), +        );, +        indexRandom("test", true, , +                client().prepareIndex("test", "type1", "1").setSource("field1", "quick brown fox", "field2", "quick brown fox"),, +                client().prepareIndex("test", "type1", "2").setSource("field1", "quick lazy huge brown fox", "field2", "quick lazy huge brown fox"));, +        indexRandom("test", true, , +            client().prepareIndex("test", "type1", "1").setSource("field1", "value1"),, +            client().prepareIndex("test", "type2", "1").setSource("field1", "value1"),, +            client().prepareIndex("test", "type1", "2").setSource("field1", "value1"),, +            client().prepareIndex("test", "type2", "2").setSource("field1", "value1"),, +            client().prepareIndex("test", "type2", "3").setSource("field1", "value1"));]