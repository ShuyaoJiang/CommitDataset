[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    @Override public long skip(long n) throws IOException {, +        if (pos + n > count) {, +            n = count - pos;, +        }, +        if (n < 0) {, +            return 0;, +        }, +        pos += n;, +        return n;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    @Override public long skip(long n) throws IOException {, +        if (pos + n > count) {, +            n = count - pos;, +        }, +        if (n < 0) {, +            return 0;, +        }, +        pos += n;, +        return n;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private final Translog.Source source;, +        public GetResult(boolean exists, long version, @Nullable Translog.Source source) {, +        @Nullable public Translog.Source source() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    @Override public long skip(long n) throws IOException {, +        if (pos + n > count) {, +            n = count - pos;, +        }, +        if (n < 0) {, +            return 0;, +        }, +        pos += n;, +        return n;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private final Translog.Source source;, +        public GetResult(boolean exists, long version, @Nullable Translog.Source source) {, +        @Nullable public Translog.Source source() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +                            Translog.Source source = TranslogStreams.readSource(data);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    @Override public long skip(long n) throws IOException {, +        if (pos + n > count) {, +            n = count - pos;, +        }, +        if (n < 0) {, +            return 0;, +        }, +        pos += n;, +        return n;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private final Translog.Source source;, +        public GetResult(boolean exists, long version, @Nullable Translog.Source source) {, +        @Nullable public Translog.Source source() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +                            Translog.Source source = TranslogStreams.readSource(data);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +import org.elasticsearch.index.mapper.internal.ParentFieldMapper;, +import org.elasticsearch.index.mapper.internal.RoutingFieldMapper;, +import org.elasticsearch.index.mapper.internal.TimestampFieldMapper;, +import org.elasticsearch.index.translog.Translog;, +                Translog.Source source = get.source();, +                    Map<String, Object> sourceAsMap = null;, +                        Object value = null;, +                        if (field.equals(RoutingFieldMapper.NAME) && docMapper.routingFieldMapper().stored()) {, +                            value = source.routing;, +                        } else if (field.equals(ParentFieldMapper.NAME) && docMapper.parentFieldMapper().stored()) {, +                            value = source.parent;, +                        } else if (field.equals(TimestampFieldMapper.NAME) && docMapper.timestampFieldMapper().stored()) {, +                            value = source.timestamp;, +                        } else {, +                                if (sourceAsMap == null) {, +                                    sourceAsMap = SourceLookup.sourceAsMap(source.source.bytes(), source.source.offset(), source.source.length());, +                                }, +                                    value = searchScript.run();, +                                } catch (RuntimeException e) {, +                                    if (logger.isTraceEnabled()) {, +                                        logger.trace("failed to execute get request script field [{}]", e, script);, +                                    }, +                                    // ignore, +                                }, +                            }, +                        }, +                        if (value != null) {, +                return new GetResult(shardId.index().name(), type, id, get.version(), get.exists(), sourceRequested ? source.source : null, fields);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +    @Override public long skip(long n) throws IOException {, +        if (pos + n > count) {, +            n = count - pos;, +        }, +        if (n < 0) {, +            return 0;]