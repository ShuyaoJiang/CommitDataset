[+++ b/docs/plugins/repository-s3.asciidoc, +`path_style_access`::, +, +    Activate path style access for [virtual hosting of buckets](http://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html)., +    Defaults to `false`., +, +++ b/docs/plugins/repository-s3.asciidoc, +`path_style_access`::, +, +    Activate path style access for [virtual hosting of buckets](http://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html)., +    Defaults to `false`., +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/AwsS3Service.java, +, +        // TODO CHANGEME, +        public static final String PATH_STYLE_ACCESS = "repositories.s3.path_style_access";, +, +    AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, Boolean pathStyleAccess);, +++ b/docs/plugins/repository-s3.asciidoc, +`path_style_access`::, +, +    Activate path style access for [virtual hosting of buckets](http://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html)., +    Defaults to `false`., +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/AwsS3Service.java, +, +        // TODO CHANGEME, +        public static final String PATH_STYLE_ACCESS = "repositories.s3.path_style_access";, +, +    AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, Boolean pathStyleAccess);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/InternalAwsS3Service.java, +import com.amazonaws.services.s3.S3ClientOptions;, +    public synchronized AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, Boolean pathStyleAccess) {, +        return getClient(endpoint, protocol, account, key, maxRetries, pathStyleAccess);, +    private synchronized AmazonS3 getClient(String endpoint, Protocol protocol, String account, String key, Integer maxRetries, Boolean pathStyleAccess) {, +, +        if (pathStyleAccess != null) {, +            client.setS3ClientOptions(new S3ClientOptions().withPathStyleAccess(pathStyleAccess));, +        }, +, +++ b/docs/plugins/repository-s3.asciidoc, +`path_style_access`::, +, +    Activate path style access for [virtual hosting of buckets](http://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html)., +    Defaults to `false`., +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/AwsS3Service.java, +, +        // TODO CHANGEME, +        public static final String PATH_STYLE_ACCESS = "repositories.s3.path_style_access";, +, +    AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, Boolean pathStyleAccess);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/InternalAwsS3Service.java, +import com.amazonaws.services.s3.S3ClientOptions;, +    public synchronized AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, Boolean pathStyleAccess) {, +        return getClient(endpoint, protocol, account, key, maxRetries, pathStyleAccess);, +    private synchronized AmazonS3 getClient(String endpoint, Protocol protocol, String account, String key, Integer maxRetries, Boolean pathStyleAccess) {, +, +        if (pathStyleAccess != null) {, +            client.setS3ClientOptions(new S3ClientOptions().withPathStyleAccess(pathStyleAccess));, +        }, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java, +import com.amazonaws.services.s3.AmazonS3;, +        Boolean pathStyleAccess = repositorySettings.settings().getAsBoolean("path_style_access", settings.getAsBoolean(REPOSITORY_S3.PATH_STYLE_ACCESS, null));, +            logger.debug("using bucket [{}], region [{}], endpoint [{}], protocol [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], max_retries [{}], canned_acl [{}], storage_class [{}], path_style_access [{}]",, +                bucket, region, endpoint, protocol, chunkSize, serverSideEncryption, bufferSize, maxRetries, cannedACL, storageClass, pathStyleAccess);, +++ b/docs/plugins/repository-s3.asciidoc, +`path_style_access`::, +, +    Activate path style access for [virtual hosting of buckets](http://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html)., +    Defaults to `false`., +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/AwsS3Service.java, +, +        // TODO CHANGEME, +        public static final String PATH_STYLE_ACCESS = "repositories.s3.path_style_access";, +, +    AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, Boolean pathStyleAccess);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/InternalAwsS3Service.java, +import com.amazonaws.services.s3.S3ClientOptions;, +    public synchronized AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, Boolean pathStyleAccess) {, +        return getClient(endpoint, protocol, account, key, maxRetries, pathStyleAccess);, +    private synchronized AmazonS3 getClient(String endpoint, Protocol protocol, String account, String key, Integer maxRetries, Boolean pathStyleAccess) {, +, +        if (pathStyleAccess != null) {, +            client.setS3ClientOptions(new S3ClientOptions().withPathStyleAccess(pathStyleAccess));, +        }, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java, +import com.amazonaws.services.s3.AmazonS3;, +        Boolean pathStyleAccess = repositorySettings.settings().getAsBoolean("path_style_access", settings.getAsBoolean(REPOSITORY_S3.PATH_STYLE_ACCESS, null));, +            logger.debug("using bucket [{}], region [{}], endpoint [{}], protocol [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], max_retries [{}], canned_acl [{}], storage_class [{}], path_style_access [{}]",, +                bucket, region, endpoint, protocol, chunkSize, serverSideEncryption, bufferSize, maxRetries, cannedACL, storageClass, pathStyleAccess);, +++ b/plugins/repository-s3/src/test/java/org/elasticsearch/cloud/aws/TestAwsS3Service.java, +    public synchronized AmazonS3 client(String endpoint, Protocol protocol, String region, String account, String key, Integer maxRetries, Boolean pathStyleAccess) {, +        return cachedWrapper(super.client(endpoint, protocol, region, account, key, maxRetries, pathStyleAccess));]