[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {, +        super.doExecute(task, request, settingsUpdateListener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {, +        super.doExecute(task, request, settingsUpdateListener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, ValidateQueryRequest request, ActionListener<ValidateQueryResponse> listener) {, +        super.doExecute(task, request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {, +        super.doExecute(task, request, settingsUpdateListener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, ValidateQueryRequest request, ActionListener<ValidateQueryResponse> listener) {, +        super.doExecute(task, request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +            createIndexAction.execute(task, new CreateIndexRequest().index(request.index()).cause("auto(delete api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +                    innerExecute(task, request, listener);, +                        innerExecute(task, request, listener);, +            innerExecute(task, request, listener);, +    private void innerExecute(Task task, final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +        super.doExecute(task, request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {, +        super.doExecute(task, request, settingsUpdateListener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, ValidateQueryRequest request, ActionListener<ValidateQueryResponse> listener) {, +        super.doExecute(task, request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +            createIndexAction.execute(task, new CreateIndexRequest().index(request.index()).cause("auto(delete api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +                    innerExecute(task, request, listener);, +                        innerExecute(task, request, listener);, +            innerExecute(task, request, listener);, +    private void innerExecute(Task task, final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +        super.doExecute(task, request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, final IndexRequest request, final ActionListener<IndexResponse> listener) {, +            createIndexAction.execute(task, createIndexRequest, new ActionListener<CreateIndexResponse>() {, +                    innerExecute(task, request, listener);, +                            innerExecute(task, request, listener);, +            innerExecute(task, request, listener);, +    private void innerExecute(Task task, final IndexRequest request, final ActionListener<IndexResponse> listener) {, +        super.doExecute(task, request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {, +        super.doExecute(task, request, settingsUpdateListener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, ValidateQueryRequest request, ActionListener<ValidateQueryResponse> listener) {, +        super.doExecute(task, request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +            createIndexAction.execute(task, new CreateIndexRequest().index(request.index()).cause("auto(delete api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +                    innerExecute(task, request, listener);, +                        innerExecute(task, request, listener);, +            innerExecute(task, request, listener);, +    private void innerExecute(Task task, final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +        super.doExecute(task, request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, final IndexRequest request, final ActionListener<IndexResponse> listener) {, +            createIndexAction.execute(task, createIndexRequest, new ActionListener<CreateIndexResponse>() {, +                    innerExecute(task, request, listener);, +                            innerExecute(task, request, listener);, +            innerExecute(task, request, listener);, +    private void innerExecute(Task task, final IndexRequest request, final ActionListener<IndexResponse> listener) {, +        super.doExecute(task, request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, final PercolateRequest request, final ActionListener<PercolateResponse> listener) {, +                    TransportPercolateAction.super.doExecute(task, new PercolateRequest(request, docSource), listener);, +            super.doExecute(task, request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/upgrade/post/TransportUpgradeAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, UpgradeRequest request, final ActionListener<UpgradeResponse> listener) {, +        super.doExecute(task, request, settingsUpdateListener);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, ValidateQueryRequest request, ActionListener<ValidateQueryResponse> listener) {, +        super.doExecute(task, request, listener);, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +import org.elasticsearch.tasks.Task;, +    protected void doExecute(Task task, final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +            createIndexAction.execute(task, new CreateIndexRequest().index(request.index()).cause("auto(delete api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +                    innerExecute(task, request, listener);, +                        innerExecute(task, request, listener);]