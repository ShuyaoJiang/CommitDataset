[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorParsers.java, +                if (metaData != null) {, +                    pipelineAggregatorFactory.setMetaData(metaData);, +                }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorParsers.java, +                if (metaData != null) {, +                    pipelineAggregatorFactory.setMetaData(metaData);, +                }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/MetricsAggregationBuilder.java, +import java.util.Map;, +    private Map<String, Object> metaData;, +, +    /**, +     * Sets the meta data to be included in the metric aggregator's response, +     */, +    public B setMetaData(Map<String, Object> metaData) {, +        this.metaData = metaData;, +        return (B) this;, +    }, +, +        builder.startObject(getName());, +        if (this.metaData != null) {, +            builder.field("meta", this.metaData);, +        }, +        builder.startObject(type);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorParsers.java, +                if (metaData != null) {, +                    pipelineAggregatorFactory.setMetaData(metaData);, +                }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/MetricsAggregationBuilder.java, +import java.util.Map;, +    private Map<String, Object> metaData;, +, +    /**, +     * Sets the meta data to be included in the metric aggregator's response, +     */, +    public B setMetaData(Map<String, Object> metaData) {, +        this.metaData = metaData;, +        return (B) this;, +    }, +, +        builder.startObject(getName());, +        if (this.metaData != null) {, +            builder.field("meta", this.metaData);, +        }, +        builder.startObject(type);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/MetaDataIT.java, +import org.elasticsearch.search.aggregations.bucket.terms.Terms;, +import org.elasticsearch.search.aggregations.metrics.sum.Sum;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.InternalBucketMetricValue;, +import java.util.List;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.*;, +import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.maxBucket;, +, +                    .field("value", randomInt()), +        Map<String, Object> metaData = new HashMap<String, Object>() {{, +                .addAggregation(, +                    terms("the_terms"), +                        .setMetaData(metaData), +                        .field("name"), +                        .subAggregation(, +                            sum("the_sum"), +                                .setMetaData(metaData), +                                .field("value"), +                            ), +                ), +                .addAggregation(, +                    maxBucket("the_max_bucket"), +                        .setMetaData(metaData), +                        .setBucketsPaths("the_terms>the_sum"), +                ), +        Terms terms = aggs.get("the_terms");, +        assertNotNull(terms);, +        assertMetaData(terms.getMetaData());, +        List<? extends Terms.Bucket> buckets = terms.getBuckets();, +        for (Terms.Bucket bucket : buckets) {, +            Aggregations subAggs = bucket.getAggregations();, +            assertNotNull(subAggs);, +, +            Sum sum = subAggs.get("the_sum");, +            assertNotNull(sum);, +            assertMetaData(sum.getMetaData());, +        }, +, +        InternalBucketMetricValue maxBucket = aggs.get("the_max_bucket");, +        assertNotNull(maxBucket);, +        assertMetaData(maxBucket.getMetaData());, +    }, +, +    private void assertMetaData(Map<String, Object> returnedMetaData) {]