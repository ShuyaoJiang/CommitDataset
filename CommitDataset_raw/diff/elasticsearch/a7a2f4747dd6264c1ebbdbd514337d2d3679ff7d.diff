[+++ b/src/main/java/org/elasticsearch/index/search/child/CustomQueryWrappingFilter.java, +import org.apache.lucene.index.AtomicReader;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.lease.Releasable;, +import org.elasticsearch.common.lucene.docset.DocIdSets;, +import java.util.IdentityHashMap;, +public class CustomQueryWrappingFilter extends NoCacheFilter implements Releasable {, +    private IdentityHashMap<AtomicReader, DocIdSet> docIdSets;, +        final SearchContext searchContext = SearchContext.current();, +        if (docIdSets == null) {, +            docIdSets = new IdentityHashMap<AtomicReader, DocIdSet>();, +            searchContext.addReleasable(this);, +            final Weight weight = searcher.createNormalizedWeight(query);, +            for (final AtomicReaderContext leaf : searcher.getTopReaderContext().leaves()) {, +                final DocIdSet set = DocIdSets.toCacheable(leaf.reader(), new DocIdSet() {, +                        return weight.scorer(leaf, true, false, null);, +                });, +                docIdSets.put(leaf.reader(), set);, +            }, +        } else {, +            assert searcher == SearchContext.current().searcher();, +        }, +        final DocIdSet set = docIdSets.get(context.reader());, +        if (set != null && acceptDocs != null) {, +            return BitsFilteredDocIdSet.wrap(set, acceptDocs);, +        }, +        return set;, +    }, +, +    @Override, +    public boolean release() throws ElasticsearchException {, +        // We need to clear the docIdSets, otherwise this is leaved unused, +        // DocIdSets around and can potentially become a memory leak., +        docIdSets = null;, +        searcher = null;, +        return true;, +        if (o == this) {, +            return true;, +        }, +        if (o != null && o instanceof CustomQueryWrappingFilter &&, +                this.query.equals(((CustomQueryWrappingFilter)o).query)) {, +            return true;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/search/child/CustomQueryWrappingFilter.java, +import org.apache.lucene.index.AtomicReader;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.lease.Releasable;, +import org.elasticsearch.common.lucene.docset.DocIdSets;, +import java.util.IdentityHashMap;, +public class CustomQueryWrappingFilter extends NoCacheFilter implements Releasable {, +    private IdentityHashMap<AtomicReader, DocIdSet> docIdSets;, +        final SearchContext searchContext = SearchContext.current();, +        if (docIdSets == null) {, +            docIdSets = new IdentityHashMap<AtomicReader, DocIdSet>();, +            searchContext.addReleasable(this);, +            final Weight weight = searcher.createNormalizedWeight(query);, +            for (final AtomicReaderContext leaf : searcher.getTopReaderContext().leaves()) {, +                final DocIdSet set = DocIdSets.toCacheable(leaf.reader(), new DocIdSet() {, +                        return weight.scorer(leaf, true, false, null);, +                });, +                docIdSets.put(leaf.reader(), set);, +            }, +        } else {, +            assert searcher == SearchContext.current().searcher();, +        }, +        final DocIdSet set = docIdSets.get(context.reader());, +        if (set != null && acceptDocs != null) {, +            return BitsFilteredDocIdSet.wrap(set, acceptDocs);, +        }, +        return set;, +    }, +, +    @Override, +    public boolean release() throws ElasticsearchException {, +        // We need to clear the docIdSets, otherwise this is leaved unused, +        // DocIdSets around and can potentially become a memory leak., +        docIdSets = null;, +        searcher = null;, +        return true;, +        if (o == this) {, +            return true;, +        }, +        if (o != null && o instanceof CustomQueryWrappingFilter &&, +                this.query.equals(((CustomQueryWrappingFilter)o).query)) {, +            return true;, +        }, +, +++ b/src/test/java/org/elasticsearch/search/child/SimpleChildQuerySearchTests.java, +import org.elasticsearch.common.unit.TimeValue;, +    @Test, +    public void testParentChildQueriesViaScrollApi() throws Exception {, +        client().admin().indices().prepareCreate("test"), +                .setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0)), +                .execute().actionGet();, +        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();, +        client().admin(), +                .indices(), +                .preparePutMapping("test"), +                .setType("child")]