[+++ b/CONTRIBUTING.md, +also not be done, we can do that if necessary., +++ b/CONTRIBUTING.md, +also not be done, we can do that if necessary., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/CONTRIBUTING.md, +also not be done, we can do that if necessary., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]monitor[/\\]jvm[/\\]JvmGcMonitorService.java" checks="LineLength" />, +++ b/CONTRIBUTING.md, +also not be done, we can do that if necessary., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]monitor[/\\]jvm[/\\]JvmGcMonitorService.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/deb/postinst.ftl, +#!/bin/sh -e, +++ b/CONTRIBUTING.md, +also not be done, we can do that if necessary., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]monitor[/\\]jvm[/\\]JvmGcMonitorService.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/deb/postinst.ftl, +#!/bin/sh -e, +++ b/buildSrc/src/main/resources/deb/preinst.ftl, +#!/bin/sh -e, +++ b/CONTRIBUTING.md, +also not be done, we can do that if necessary., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]monitor[/\\]jvm[/\\]JvmGcMonitorService.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/deb/postinst.ftl, +#!/bin/sh -e, +++ b/buildSrc/src/main/resources/deb/preinst.ftl, +#!/bin/sh -e, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/CONTRIBUTING.md, +also not be done, we can do that if necessary., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]monitor[/\\]jvm[/\\]JvmGcMonitorService.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/deb/postinst.ftl, +#!/bin/sh -e, +++ b/buildSrc/src/main/resources/deb/preinst.ftl, +#!/bin/sh -e, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplanation.java, +    private final boolean hasPendingAsyncFetch;, +                                        @Nullable UnassignedInfo unassignedInfo, boolean hasPendingAsyncFetch,, +                                        Map<DiscoveryNode, NodeExplanation> nodeExplanations) {, +        this.hasPendingAsyncFetch = hasPendingAsyncFetch;, +        this.hasPendingAsyncFetch = in.readBoolean();, +        out.writeBoolean(this.isStillFetchingShardData());, +    /** Return turn if shard data is still being fetched for the allocation */, +    public boolean isStillFetchingShardData() {, +        return this.hasPendingAsyncFetch;, +    }, +, +            builder.field("shard_state_fetch_pending", this.hasPendingAsyncFetch);, +++ b/CONTRIBUTING.md, +also not be done, we can do that if necessary., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]monitor[/\\]jvm[/\\]JvmGcMonitorService.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/deb/postinst.ftl, +#!/bin/sh -e, +++ b/buildSrc/src/main/resources/deb/preinst.ftl, +#!/bin/sh -e, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplanation.java, +    private final boolean hasPendingAsyncFetch;, +                                        @Nullable UnassignedInfo unassignedInfo, boolean hasPendingAsyncFetch,, +                                        Map<DiscoveryNode, NodeExplanation> nodeExplanations) {, +        this.hasPendingAsyncFetch = hasPendingAsyncFetch;, +        this.hasPendingAsyncFetch = in.readBoolean();, +        out.writeBoolean(this.isStillFetchingShardData());, +    /** Return turn if shard data is still being fetched for the allocation */, +    public boolean isStillFetchingShardData() {, +        return this.hasPendingAsyncFetch;, +    }, +, +            builder.field("shard_state_fetch_pending", this.hasPendingAsyncFetch);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +import org.elasticsearch.gateway.GatewayAllocator;, +    private final GatewayAllocator gatewayAllocator;, +                                                   ShardsAllocator shardAllocator, TransportIndicesShardStoresAction shardStoresAction,, +                                                   GatewayAllocator gatewayAllocator) {, +        this.gatewayAllocator = gatewayAllocator;, +                                                           Set<String> activeAllocationIds,, +                                                           boolean hasPendingAsyncFetch) {, +        } else if (hasPendingAsyncFetch &&, +                shard.primary() == false &&, +                shard.unassigned() &&, +                shard.allocatedPostIndexCreate(indexMetaData) &&, +                nodeDecision.type() != Decision.Type.YES) {, +            finalExplanation = "the shard cannot be assigned because allocation deciders return a " + nodeDecision.type().name() +, +                    " decision and the shard's state is still being fetched";, +            finalDecision = ClusterAllocationExplanation.FinalDecision.NO;, +        } else if (hasPendingAsyncFetch &&, +                shard.unassigned() &&]