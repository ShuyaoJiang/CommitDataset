[+++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContent.java, +import org.elasticsearch.common.Strings;, +import java.util.Collections;, +import java.util.Set;, +        return createGenerator(os, Collections.emptySet(), Collections.emptySet());, +     * Creates a new generator using the provided output stream and some inclusive and/or exclusive filters. When both exclusive and, +     * inclusive filters are provided, the underlying generator will first use exclusion filters to remove fields and then will check the, +     * remaining fields against the inclusive filters., +     * @param os       the output stream, +     * @param includes the inclusive filters: only fields and objects that match the inclusive filters will be written to the output., +     * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output., +    XContentGenerator createGenerator(OutputStream os, Set<String> includes, Set<String> excludes) throws IOException;, +, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContent.java, +import org.elasticsearch.common.Strings;, +import java.util.Collections;, +import java.util.Set;, +        return createGenerator(os, Collections.emptySet(), Collections.emptySet());, +     * Creates a new generator using the provided output stream and some inclusive and/or exclusive filters. When both exclusive and, +     * inclusive filters are provided, the underlying generator will first use exclusion filters to remove fields and then will check the, +     * remaining fields against the inclusive filters., +     * @param os       the output stream, +     * @param includes the inclusive filters: only fields and objects that match the inclusive filters will be written to the output., +     * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output., +    XContentGenerator createGenerator(OutputStream os, Set<String> includes, Set<String> excludes) throws IOException;, +, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +import org.elasticsearch.common.Strings;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.math.BigDecimal;, +import java.math.RoundingMode;, +import java.nio.file.Path;, +import java.util.Calendar;, +import java.util.Collections;, +import java.util.Date;, +import java.util.HashMap;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.TimeUnit;, +, +    public static XContentBuilder builder(XContent xContent, Set<String> includes, Set<String> excludes) throws IOException {, +        return new XContentBuilder(xContent, new BytesStreamOutput(), includes, excludes);, +        this(xContent, bos, Collections.emptySet(), Collections.emptySet());, +    public XContentBuilder(XContent xContent, OutputStream bos, Set<String> includes) throws IOException {, +        this(xContent, bos, includes, Collections.emptySet());, +     * Creates a new builder using the provided XContent, output stream and some inclusive and/or exclusive filters. When both exclusive and, +     * inclusive filters are provided, the underlying builder will first use exclusion filters to remove fields and then will check the, +     * remaining fields against the inclusive filters., +     * <p>, +     *, +     * @param os       the output stream, +     * @param includes the inclusive filters: only fields and objects that match the inclusive filters will be written to the output., +     * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output., +    public XContentBuilder(XContent xContent, OutputStream os, Set<String> includes, Set<String> excludes) throws IOException {, +        this.bos = os;, +        this.generator = xContent.createGenerator(bos, includes, excludes);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContent.java, +import org.elasticsearch.common.Strings;, +import java.util.Collections;, +import java.util.Set;, +        return createGenerator(os, Collections.emptySet(), Collections.emptySet());, +     * Creates a new generator using the provided output stream and some inclusive and/or exclusive filters. When both exclusive and, +     * inclusive filters are provided, the underlying generator will first use exclusion filters to remove fields and then will check the, +     * remaining fields against the inclusive filters., +     * @param os       the output stream, +     * @param includes the inclusive filters: only fields and objects that match the inclusive filters will be written to the output., +     * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output., +    XContentGenerator createGenerator(OutputStream os, Set<String> includes, Set<String> excludes) throws IOException;, +, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +import org.elasticsearch.common.Strings;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.math.BigDecimal;, +import java.math.RoundingMode;, +import java.nio.file.Path;, +import java.util.Calendar;, +import java.util.Collections;, +import java.util.Date;, +import java.util.HashMap;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.TimeUnit;, +, +    public static XContentBuilder builder(XContent xContent, Set<String> includes, Set<String> excludes) throws IOException {, +        return new XContentBuilder(xContent, new BytesStreamOutput(), includes, excludes);, +        this(xContent, bos, Collections.emptySet(), Collections.emptySet());, +    public XContentBuilder(XContent xContent, OutputStream bos, Set<String> includes) throws IOException {, +        this(xContent, bos, includes, Collections.emptySet());, +     * Creates a new builder using the provided XContent, output stream and some inclusive and/or exclusive filters. When both exclusive and, +     * inclusive filters are provided, the underlying builder will first use exclusion filters to remove fields and then will check the, +     * remaining fields against the inclusive filters., +     * <p>, +     *, +     * @param os       the output stream]