[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/BaseClassTests.java, +import org.elasticsearch.script.ScriptContext;, +import java.util.List;, +    protected Map<ScriptContext<?>, List<Whitelist>> scriptContexts() {, +        Map<ScriptContext<?>, List<Whitelist>> contexts = new HashMap<>();, +        contexts.put(Gets.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(NoArgs.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(OneArg.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(ArrayArg.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(PrimitiveArrayArg.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(DefArrayArg.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(ManyArgs.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(VarArgs.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(DefaultMethods.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(ReturnsVoid.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(ReturnsPrimitiveBoolean.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(ReturnsPrimitiveInt.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(ReturnsPrimitiveFloat.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(ReturnsPrimitiveDouble.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(NoArgsConstant.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(WrongArgsConstant.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(WrongLengthOfArgConstant.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(UnknownArgType.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(UnknownReturnType.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(UnknownArgTypeInArray.CONTEXT, Whitelist.BASE_WHITELISTS);, +        contexts.put(TwoExecuteMethods.CONTEXT, Whitelist.BASE_WHITELISTS);, +        return contexts;, +    }, +        public interface Factory {, +            Gets newInstance(String testString, int testInt, Map<String, Object> params);, +        }, +, +        public static final ScriptContext<Factory> CONTEXT = new ScriptContext<>("gets", Factory.class);, +, +        assertEquals(1, scriptEngine.compile("testGets0", "testInt", Gets.CONTEXT, emptyMap()).newInstance("s", -1, null).execute());, +                scriptEngine.compile("testGets1", "testMap", Gets.CONTEXT, emptyMap()).newInstance("s", -1, null).execute());, +        assertEquals(Collections.singletonMap("1", "1"),, +                scriptEngine.compile("testGets2", "testMap", Gets.CONTEXT, emptyMap()), +                        .newInstance("s", -1, Collections.singletonMap("1", "1")).execute());, +        assertEquals("s", scriptEngine.compile("testGets3", "testString", Gets.CONTEXT, emptyMap()).newInstance("s", -1, null).execute());, +        assertEquals(map,, +                scriptEngine.compile("testGets4", "testMap.put(testString, testInt); testMap", Gets.CONTEXT, emptyMap()), +                        .newInstance("s", -1, null).execute());, +        public interface Factory {, +            NoArgs newInstance();, +        }, +, +        public static final ScriptContext<Factory> CONTEXT = new ScriptContext<>("noargs", Factory.class);, +, +        assertEquals(1, scriptEngine.compile("testNoArgs0", "1", NoArgs.CONTEXT, emptyMap()).newInstance().execute());, +        assertEquals("foo", scriptEngine.compile("testNoArgs1", "'foo'", NoArgs.CONTEXT, emptyMap()).newInstance().execute());, +                scriptEngine.compile("testNoArgs2", "doc", NoArgs.CONTEXT, emptyMap()));, +                scriptEngine.compile("testNoArgs3", "_score", NoArgs.CONTEXT, emptyMap()));, +        public interface Factory {, +            OneArg newInstance();, +        }, +, +        public static final ScriptContext<Factory> CONTEXT = new ScriptContext<>("onearg", Factory.class);, +, +        assertEquals(rando, scriptEngine.compile("testOneArg0", "arg", OneArg.CONTEXT, emptyMap()).newInstance().execute(rando));, +        assertEquals(rando, scriptEngine.compile("testOneArg1", "arg", OneArg.CONTEXT, emptyMap()).newInstance().execute(rando));, +        public interface Factory {, +            ArrayArg newInstance();, +        }, +, +        public static final ScriptContext<Factory> CONTEXT = new ScriptContext<>("arrayarg", Factory.class);, +, +                scriptEngine.compile("testArrayArg0", "arg[0]", ArrayArg.CONTEXT, emptyMap()), +                        .newInstance().execute(new String[] {rando, "foo"}));, +        public interface Factory {, +            PrimitiveArrayArg newInstance();, +        }, +, +        public static final ScriptContext<Factory> CONTEXT = new ScriptContext<>("primitivearrayarg", Factory.class);, +, +        assertEquals(rando,, +                scriptEngine.compile("PrimitiveArrayArg0", "arg[0]", PrimitiveArrayArg.CONTEXT, emptyMap()), +                        .newInstance().execute(new int[] {rando, 10}));, +        public interface Factory {, +            DefArrayArg newInstance();, +        }, +, +        public static final ScriptContext<Factory> CONTEXT = new ScriptContext<>("defarrayarg", Factory.class);, +, +                scriptEngine.compile("testDefArray0", "arg[0]", DefArrayArg.CONTEXT, emptyMap()), +                        .newInstance().execute(new Object[] {rando, 10}));, +                scriptEngine.compile("testDefArray1", "arg[0]", DefArrayArg.CONTEXT, emptyMap()), +                        .newInstance().execute(new Object[] {rando, 10}));, +        assertEquals(5, scriptEngine.compile(, +                "testDefArray2", "arg[0].length()", DefArrayArg.CONTEXT, emptyMap()), +                .newInstance().execute(new Object[] {rando, 10}));, +        public interface Factory {, +            ManyArgs newInstance();, +        }, +, +        public static final ScriptContext<Factory> CONTEXT = new ScriptContext<>("manyargs", Factory.class);, +, +        assertEquals(rando,]