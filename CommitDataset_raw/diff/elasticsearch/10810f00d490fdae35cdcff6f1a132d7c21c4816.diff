[+++ b/src/main/java/org/elasticsearch/index/search/slowlog/ShardSlowLogSearchService.java, +import org.elasticsearch.ElasticSearchParseException;, +        this.queryWarnThreshold = parseTimeSetting("threshold.query.warn", -1);, +        this.queryInfoThreshold = parseTimeSetting("threshold.query.info", -1);, +        this.queryDebugThreshold = parseTimeSetting("threshold.query.debug", -1);, +        this.queryTraceThreshold = parseTimeSetting("threshold.query.trace", -1);, +        this.fetchWarnThreshold = parseTimeSetting("threshold.fetch.warn", -1);, +        this.fetchInfoThreshold = parseTimeSetting("threshold.fetch.info", -1);, +        this.fetchDebugThreshold = parseTimeSetting("threshold.fetch.debug", -1);, +        this.fetchTraceThreshold = parseTimeSetting("threshold.fetch.trace", -1);, +    private long parseTimeSetting(String name, long defaultNanos) {, +        try {, +            return componentSettings.getAsTime(name, TimeValue.timeValueNanos(defaultNanos)).nanos();, +        } catch (ElasticSearchParseException e) {, +            logger.error("Could not parse setting for [{}], disabling", name);, +            return -1;, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/index/search/slowlog/ShardSlowLogSearchService.java, +import org.elasticsearch.ElasticSearchParseException;, +        this.queryWarnThreshold = parseTimeSetting("threshold.query.warn", -1);, +        this.queryInfoThreshold = parseTimeSetting("threshold.query.info", -1);, +        this.queryDebugThreshold = parseTimeSetting("threshold.query.debug", -1);, +        this.queryTraceThreshold = parseTimeSetting("threshold.query.trace", -1);, +        this.fetchWarnThreshold = parseTimeSetting("threshold.fetch.warn", -1);, +        this.fetchInfoThreshold = parseTimeSetting("threshold.fetch.info", -1);, +        this.fetchDebugThreshold = parseTimeSetting("threshold.fetch.debug", -1);, +        this.fetchTraceThreshold = parseTimeSetting("threshold.fetch.trace", -1);, +    private long parseTimeSetting(String name, long defaultNanos) {, +        try {, +            return componentSettings.getAsTime(name, TimeValue.timeValueNanos(defaultNanos)).nanos();, +        } catch (ElasticSearchParseException e) {, +            logger.error("Could not parse setting for [{}], disabling", name);, +            return -1;, +        }, +    }, +, +++ b/src/test/java/org/elasticsearch/index/search/slowlog/ShardSlowLogSearchServiceTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.search.slowlog;, +, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.settings.IndexSettingsService;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.junit.Test;, +, +import static org.hamcrest.Matchers.is;, +, +/**, + *, + */, +public class ShardSlowLogSearchServiceTests extends ElasticsearchTestCase {, +, +    private Index index = new Index("test");, +    private ShardId shardId = new ShardId(index, 0);, +, +, +    @Test, +    public void creatingShardSlowLogSearchServiceWithBrokenSettingsShouldWork() throws Exception {, +        Settings brokenIndexSettings = ImmutableSettings.builder(), +                .put("index.search.slowlog.threshold.query.warn", "s"), +                .build();, +, +        IndexSettingsService indexSettingsService = new IndexSettingsService(shardId.index(), brokenIndexSettings);, +        new ShardSlowLogSearchService(shardId, brokenIndexSettings, indexSettingsService);, +    }, +, +    @Test, +    public void updatingViaListenerWithBrokenSettingsLeavesSettingsAsIs() throws Exception {, +        Settings indexSettings = ImmutableSettings.builder(), +                .put("index.search.slowlog.threshold.query.warn", "1s"), +                .build();, +, +        IndexSettingsService indexSettingsService = new IndexSettingsService(shardId.index(), indexSettings);, +        ShardSlowLogSearchService shardSlowLogSearchService = new ShardSlowLogSearchService(shardId, indexSettings, indexSettingsService);, +, +        Settings updatedSettings = ImmutableSettings.builder(), +                .put("index.search.slowlog.threshold.query.warn", "s"), +                .build();]