[+++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/Pipeline.java, +    public void execute(IngestDocument ingestDocument) throws Exception {, +        public Pipeline create(String id, Map<String, Object> config, Map<String, Processor.Factory> processorRegistry) throws Exception {, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/Pipeline.java, +    public void execute(IngestDocument ingestDocument) throws Exception {, +        public Pipeline create(String id, Map<String, Object> config, Map<String, Processor.Factory> processorRegistry) throws Exception {, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/Processor.java, +    void execute(IngestDocument ingestDocument) throws Exception;, +        P create(Map<String, Object> config) throws Exception;, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/Pipeline.java, +    public void execute(IngestDocument ingestDocument) throws Exception {, +        public Pipeline create(String id, Map<String, Object> config, Map<String, Processor.Factory> processorRegistry) throws Exception {, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/Processor.java, +    void execute(IngestDocument ingestDocument) throws Exception;, +        P create(Map<String, Object> config) throws Exception;, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestPlugin.java, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/Pipeline.java, +    public void execute(IngestDocument ingestDocument) throws Exception {, +        public Pipeline create(String id, Map<String, Object> config, Map<String, Processor.Factory> processorRegistry) throws Exception {, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/Processor.java, +    void execute(IngestDocument ingestDocument) throws Exception;, +        P create(Map<String, Object> config) throws Exception;, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestPlugin.java, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/PipelineExecutionService.java, +import org.elasticsearch.action.ActionListener;, +    public void execute(IndexRequest indexRequest, String pipelineId, ActionListener<IngestDocument> listener) {, +            listener.onFailure(new IllegalArgumentException("pipeline with id [" + pipelineId + "] does not exist"));, +                listener.onResponse(ingestDocument);, +                listener.onFailure(e);, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/Pipeline.java, +    public void execute(IngestDocument ingestDocument) throws Exception {, +        public Pipeline create(String id, Map<String, Object> config, Map<String, Processor.Factory> processorRegistry) throws Exception {, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/Processor.java, +    void execute(IngestDocument ingestDocument) throws Exception;, +        P create(Map<String, Object> config) throws Exception;, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestPlugin.java, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/PipelineExecutionService.java, +import org.elasticsearch.action.ActionListener;, +    public void execute(IndexRequest indexRequest, String pipelineId, ActionListener<IngestDocument> listener) {, +            listener.onFailure(new IllegalArgumentException("pipeline with id [" + pipelineId + "] does not exist"));, +                listener.onResponse(ingestDocument);, +                listener.onFailure(e);, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/PipelineStore.java, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.component.LifecycleListener;, +import org.elasticsearch.common.inject.Provider;, +public class PipelineStore extends AbstractComponent {, +    private final Provider<Client> clientProvider;, +    public PipelineStore(Settings settings, Provider<Client> clientProvider, ThreadPool threadPool, Environment environment, ClusterService clusterService, Map<String, Processor.Factory> processors) {, +        this.clientProvider = clientProvider;, +        clusterService.addLifecycleListener(new LifecycleListener() {, +            public void beforeClose() {, +                // Ideally we would implement Closeable, but when a node is stopped this doesn't get invoked:, +        });, +    }, +    /**, +     * Deletes the pipeline specified by id in the request., +     */, +        client().delete(deleteRequest, listener);, +    /**, +     * Stores the specified pipeline definition in the request., +     *, +     * @throws IllegalArgumentException If the pipeline holds incorrect configuration, +     */, +    public void put(PutPipelineRequest request, ActionListener<IndexResponse> listener) throws IllegalArgumentException {, +        try {, +        } catch (Exception e) {, +            throw new IllegalArgumentException("Invalid pipeline configuration", e);, +        client().index(indexRequest, listener);, +    /**, +     * Returns the pipeline by the specified id, +     */, +    Pipeline constructPipeline(String id, Map<String, Object> config) throws Exception {, +    synchronized void updatePipelines() throws Exception {, +        GetResponse response = client().get(request).actionGet();, +        return SearchScrollIterator.createIterator(client(), scrollTimeout, searchRequest);, +    }, +, +, +    private Client client() {, +        if (client == null) {, +            client = clientProvider.get();, +        }, +        return client;, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/Pipeline.java, +    public void execute(IngestDocument ingestDocument) throws Exception {, +        public Pipeline create(String id, Map<String, Object> config, Map<String, Processor.Factory> processorRegistry) throws Exception {, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/Processor.java, +    void execute(IngestDocument ingestDocument) throws Exception;, +        P create(Map<String, Object> config) throws Exception;, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestPlugin.java, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/PipelineExecutionService.java, +import org.elasticsearch.action.ActionListener;, +    public void execute(IndexRequest indexRequest, String pipelineId, ActionListener<IngestDocument> listener) {, +            listener.onFailure(new IllegalArgumentException("pipeline with id [" + pipelineId + "] does not exist"));, +                listener.onResponse(ingestDocument);, +                listener.onFailure(e);, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/PipelineStore.java, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.component.LifecycleListener;]