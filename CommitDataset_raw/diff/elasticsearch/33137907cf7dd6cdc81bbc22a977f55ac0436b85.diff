[+++ b/docs/reference/sql/functions/aggs.asciidoc, +<2> a numeric expression (must be a constant and not based on a field), +<2> a numeric expression (must be a constant and not based on a field), +++ b/docs/reference/sql/functions/aggs.asciidoc, +<2> a numeric expression (must be a constant and not based on a field), +<2> a numeric expression (must be a constant and not based on a field), +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java, +import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;, +        if (!percent.foldable()) {, +            throw new SqlIllegalArgumentException("2nd argument of PERCENTILE must be constant, received [{}]",, +                Expressions.name(percent));, +        TypeResolution resolution = super.resolveType();, +        if (resolution.unresolved()) {, +        return Expressions.typeMustBeNumeric(percent, functionName(), ParamOrdinal.DEFAULT);, +    }, +, +++ b/docs/reference/sql/functions/aggs.asciidoc, +<2> a numeric expression (must be a constant and not based on a field), +<2> a numeric expression (must be a constant and not based on a field), +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java, +import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;, +        if (!percent.foldable()) {, +            throw new SqlIllegalArgumentException("2nd argument of PERCENTILE must be constant, received [{}]",, +                Expressions.name(percent));, +        TypeResolution resolution = super.resolveType();, +        if (resolution.unresolved()) {, +        return Expressions.typeMustBeNumeric(percent, functionName(), ParamOrdinal.DEFAULT);, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java, +import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;, +        if (!value.foldable()) {, +            throw new SqlIllegalArgumentException("2nd argument of PERCENTILE_RANK must be constant, received [{}]",, +                Expressions.name(value));, +        }, +, +++ b/docs/reference/sql/functions/aggs.asciidoc, +<2> a numeric expression (must be a constant and not based on a field), +<2> a numeric expression (must be a constant and not based on a field), +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/Percentile.java, +import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;, +        if (!percent.foldable()) {, +            throw new SqlIllegalArgumentException("2nd argument of PERCENTILE must be constant, received [{}]",, +                Expressions.name(percent));, +        TypeResolution resolution = super.resolveType();, +        if (resolution.unresolved()) {, +        return Expressions.typeMustBeNumeric(percent, functionName(), ParamOrdinal.DEFAULT);, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/aggregate/PercentileRank.java, +import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;, +        if (!value.foldable()) {, +            throw new SqlIllegalArgumentException("2nd argument of PERCENTILE_RANK must be constant, received [{}]",, +                Expressions.name(value));, +        }, +, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java, +import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;, +, +    private IndexResolution indexResolution = IndexResolution.valid(new EsIndex("test",, +        TypesTests.loadMapping("mapping-multi-field-with-nested.json")));, +        return error(indexResolution, sql);, +, +    public void testErrorMessageForPercentileWithSecondArgBasedOnAField() {, +        Analyzer analyzer = new Analyzer(TestUtils.TEST_CFG, new FunctionRegistry(), indexResolution, new Verifier(new Metrics()));, +        SqlIllegalArgumentException e = expectThrows(SqlIllegalArgumentException.class, () -> analyzer.analyze(parser.createStatement(, +            "SELECT PERCENTILE(int, ABS(int)) FROM test"), true));, +        assertEquals("2nd argument of PERCENTILE must be constant, received [ABS(int)]",, +            e.getMessage());, +    }, +, +    public void testErrorMessageForPercentileRankWithSecondArgBasedOnAField() {, +        Analyzer analyzer = new Analyzer(TestUtils.TEST_CFG, new FunctionRegistry(), indexResolution, new Verifier(new Metrics()));, +        SqlIllegalArgumentException e = expectThrows(SqlIllegalArgumentException.class, () -> analyzer.analyze(parser.createStatement(, +            "SELECT PERCENTILE_RANK(int, ABS(int)) FROM test"), true));, +        assertEquals("2nd argument of PERCENTILE_RANK must be constant, received [ABS(int)]",, +            e.getMessage());, +    }]