[+++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        // as failing primaries also fail associated replicas, we fail replicas first here to avoid re-resolving replica ShardRouting, +        List<FailedRerouteAllocation.FailedShard> orderedFailedShards = new ArrayList<>(failedShards);, +        orderedFailedShards.sort(Comparator.comparing(failedShard -> failedShard.routingEntry.primary()));, +, +        for (FailedRerouteAllocation.FailedShard failedShardEntry : orderedFailedShards) {, +            ShardRouting failedShard = failedShardEntry.routingEntry;, +            final int failedAllocations = failedShard.unassignedInfo() != null ? failedShard.unassignedInfo().getNumFailedAllocations() : 0;, +            allocation.addIgnoreShardForNode(failedShard.shardId(), failedShard.currentNodeId());, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        // as failing primaries also fail associated replicas, we fail replicas first here to avoid re-resolving replica ShardRouting, +        List<FailedRerouteAllocation.FailedShard> orderedFailedShards = new ArrayList<>(failedShards);, +        orderedFailedShards.sort(Comparator.comparing(failedShard -> failedShard.routingEntry.primary()));, +, +        for (FailedRerouteAllocation.FailedShard failedShardEntry : orderedFailedShards) {, +            ShardRouting failedShard = failedShardEntry.routingEntry;, +            final int failedAllocations = failedShard.unassignedInfo() != null ? failedShard.unassignedInfo().getNumFailedAllocations() : 0;, +            allocation.addIgnoreShardForNode(failedShard.shardId(), failedShard.currentNodeId());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java, +    private double minBound = Double.MAX_VALUE;, +    private double maxBound = Double.MIN_VALUE;, +    /** Set extended bounds on this builder: buckets between {@code minBound}, +     *  and {@code maxBound} will be created even if no documents fell into, +     *  these buckets. It is possible to create half-open bounds by providing, +     *  {@link Double#POSITIVE_INFINITY} as a {@code minBound} or , +     *  {@link Double#NEGATIVE_INFINITY} as a {@code maxBound}. */, +        if (minBound == Double.NEGATIVE_INFINITY) {, +            throw new IllegalArgumentException("minBound must not be -Infinity, got: " + minBound);, +        if (maxBound == Double.POSITIVE_INFINITY) {, +            throw new IllegalArgumentException("maxBound must not be +Infinity, got: " + maxBound);, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        // as failing primaries also fail associated replicas, we fail replicas first here to avoid re-resolving replica ShardRouting, +        List<FailedRerouteAllocation.FailedShard> orderedFailedShards = new ArrayList<>(failedShards);, +        orderedFailedShards.sort(Comparator.comparing(failedShard -> failedShard.routingEntry.primary()));, +, +        for (FailedRerouteAllocation.FailedShard failedShardEntry : orderedFailedShards) {, +            ShardRouting failedShard = failedShardEntry.routingEntry;, +            final int failedAllocations = failedShard.unassignedInfo() != null ? failedShard.unassignedInfo().getNumFailedAllocations() : 0;, +            allocation.addIgnoreShardForNode(failedShard.shardId(), failedShard.currentNodeId());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java, +    private double minBound = Double.MAX_VALUE;, +    private double maxBound = Double.MIN_VALUE;, +    /** Set extended bounds on this builder: buckets between {@code minBound}, +     *  and {@code maxBound} will be created even if no documents fell into, +     *  these buckets. It is possible to create half-open bounds by providing, +     *  {@link Double#POSITIVE_INFINITY} as a {@code minBound} or , +     *  {@link Double#NEGATIVE_INFINITY} as a {@code maxBound}. */, +        if (minBound == Double.NEGATIVE_INFINITY) {, +            throw new IllegalArgumentException("minBound must not be -Infinity, got: " + minBound);, +        if (maxBound == Double.POSITIVE_INFINITY) {, +            throw new IllegalArgumentException("maxBound must not be +Infinity, got: " + maxBound);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramIT.java, +        } catch (Exception e) {, +    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/19833"), +        } catch (Exception e) {, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        // as failing primaries also fail associated replicas, we fail replicas first here to avoid re-resolving replica ShardRouting, +        List<FailedRerouteAllocation.FailedShard> orderedFailedShards = new ArrayList<>(failedShards);, +        orderedFailedShards.sort(Comparator.comparing(failedShard -> failedShard.routingEntry.primary()));, +, +        for (FailedRerouteAllocation.FailedShard failedShardEntry : orderedFailedShards) {, +            ShardRouting failedShard = failedShardEntry.routingEntry;, +            final int failedAllocations = failedShard.unassignedInfo() != null ? failedShard.unassignedInfo().getNumFailedAllocations() : 0;, +            allocation.addIgnoreShardForNode(failedShard.shardId(), failedShard.currentNodeId());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramAggregationBuilder.java, +    private double minBound = Double.MAX_VALUE;, +    private double maxBound = Double.MIN_VALUE;, +    /** Set extended bounds on this builder: buckets between {@code minBound}, +     *  and {@code maxBound} will be created even if no documents fell into, +     *  these buckets. It is possible to create half-open bounds by providing, +     *  {@link Double#POSITIVE_INFINITY} as a {@code minBound} or , +     *  {@link Double#NEGATIVE_INFINITY} as a {@code maxBound}. */, +        if (minBound == Double.NEGATIVE_INFINITY) {, +            throw new IllegalArgumentException("minBound must not be -Infinity, got: " + minBound);, +        if (maxBound == Double.POSITIVE_INFINITY) {, +            throw new IllegalArgumentException("maxBound must not be +Infinity, got: " + maxBound);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramIT.java, +        } catch (Exception e) {, +    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/19833"), +        } catch (Exception e) {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramTests.java, +            factory.extendedBounds(randomDouble(), randomDouble());, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        // as failing primaries also fail associated replicas, we fail replicas first here to avoid re-resolving replica ShardRouting, +        List<FailedRerouteAllocation.FailedShard> orderedFailedShards = new ArrayList<>(failedShards);, +        orderedFailedShards.sort(Comparator.comparing(failedShard -> failedShard.routingEntry.primary()));, +, +        for (FailedRerouteAllocation.FailedShard failedShardEntry : orderedFailedShards) {]