[+++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +        final int shardCount = shardsIts.size();, +        final long shardCountLimit = clusterService.getClusterSettings().get(TransportSearchAction.SHARD_COUNT_LIMIT_SETTING);, +        if (shardCount > shardCountLimit) {, +            throw new IllegalArgumentException("Trying to query " + shardCount + " shards, which is over the limit of ", +                    + shardCountLimit + ". This limit exists because querying many shards at the same time can make the ", +                    + "job of the coordinating node very CPU and/or memory intensive. It is usually a better idea to ", +                    + "have a smaller number of larger shards. Update [" + TransportSearchAction.SHARD_COUNT_LIMIT_SETTING.getKey(), +                    + "] to a greater value if you really want to query that many shards at the same time.");, +        }, +        expectedSuccessfulOps = shardCount;, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +        final int shardCount = shardsIts.size();, +        final long shardCountLimit = clusterService.getClusterSettings().get(TransportSearchAction.SHARD_COUNT_LIMIT_SETTING);, +        if (shardCount > shardCountLimit) {, +            throw new IllegalArgumentException("Trying to query " + shardCount + " shards, which is over the limit of ", +                    + shardCountLimit + ". This limit exists because querying many shards at the same time can make the ", +                    + "job of the coordinating node very CPU and/or memory intensive. It is usually a better idea to ", +                    + "have a smaller number of larger shards. Update [" + TransportSearchAction.SHARD_COUNT_LIMIT_SETTING.getKey(), +                    + "] to a greater value if you really want to query that many shards at the same time.");, +        }, +        expectedSuccessfulOps = shardCount;, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Property;, +    /** The maximum number of shards for a single search request. */, +    public static final Setting<Long> SHARD_COUNT_LIMIT_SETTING = Setting.longSetting(, +            "action.search.shard_count.limit", 1000L, 1L, Property.Dynamic, Property.NodeScope);, +, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +        final int shardCount = shardsIts.size();, +        final long shardCountLimit = clusterService.getClusterSettings().get(TransportSearchAction.SHARD_COUNT_LIMIT_SETTING);, +        if (shardCount > shardCountLimit) {, +            throw new IllegalArgumentException("Trying to query " + shardCount + " shards, which is over the limit of ", +                    + shardCountLimit + ". This limit exists because querying many shards at the same time can make the ", +                    + "job of the coordinating node very CPU and/or memory intensive. It is usually a better idea to ", +                    + "have a smaller number of larger shards. Update [" + TransportSearchAction.SHARD_COUNT_LIMIT_SETTING.getKey(), +                    + "] to a greater value if you really want to query that many shards at the same time.");, +        }, +        expectedSuccessfulOps = shardCount;, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Property;, +    /** The maximum number of shards for a single search request. */, +    public static final Setting<Long> SHARD_COUNT_LIMIT_SETTING = Setting.longSetting(, +            "action.search.shard_count.limit", 1000L, 1L, Property.Dynamic, Property.NodeScope);, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.action.search.TransportSearchAction;, +                    TransportSearchAction.SHARD_COUNT_LIMIT_SETTING,, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +        final int shardCount = shardsIts.size();, +        final long shardCountLimit = clusterService.getClusterSettings().get(TransportSearchAction.SHARD_COUNT_LIMIT_SETTING);, +        if (shardCount > shardCountLimit) {, +            throw new IllegalArgumentException("Trying to query " + shardCount + " shards, which is over the limit of ", +                    + shardCountLimit + ". This limit exists because querying many shards at the same time can make the ", +                    + "job of the coordinating node very CPU and/or memory intensive. It is usually a better idea to ", +                    + "have a smaller number of larger shards. Update [" + TransportSearchAction.SHARD_COUNT_LIMIT_SETTING.getKey(), +                    + "] to a greater value if you really want to query that many shards at the same time.");, +        }, +        expectedSuccessfulOps = shardCount;, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Property;, +    /** The maximum number of shards for a single search request. */, +    public static final Setting<Long> SHARD_COUNT_LIMIT_SETTING = Setting.longSetting(, +            "action.search.shard_count.limit", 1000L, 1L, Property.Dynamic, Property.NodeScope);, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.action.search.TransportSearchAction;, +                    TransportSearchAction.SHARD_COUNT_LIMIT_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    private final ShardSearchStats searchStats = new ShardSearchStats();;, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +        final int shardCount = shardsIts.size();, +        final long shardCountLimit = clusterService.getClusterSettings().get(TransportSearchAction.SHARD_COUNT_LIMIT_SETTING);, +        if (shardCount > shardCountLimit) {, +            throw new IllegalArgumentException("Trying to query " + shardCount + " shards, which is over the limit of ", +                    + shardCountLimit + ". This limit exists because querying many shards at the same time can make the ", +                    + "job of the coordinating node very CPU and/or memory intensive. It is usually a better idea to ", +                    + "have a smaller number of larger shards. Update [" + TransportSearchAction.SHARD_COUNT_LIMIT_SETTING.getKey(), +                    + "] to a greater value if you really want to query that many shards at the same time.");, +        }, +        expectedSuccessfulOps = shardCount;, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Property;, +    /** The maximum number of shards for a single search request. */, +    public static final Setting<Long> SHARD_COUNT_LIMIT_SETTING = Setting.longSetting(, +            "action.search.shard_count.limit", 1000L, 1L, Property.Dynamic, Property.NodeScope);, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.action.search.TransportSearchAction;, +                    TransportSearchAction.SHARD_COUNT_LIMIT_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    private final ShardSearchStats searchStats = new ShardSearchStats();;, +++ b/core/src/main/java/org/elasticsearch/index/shard/InternalIndexingStats.java, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +        final int shardCount = shardsIts.size();, +        final long shardCountLimit = clusterService.getClusterSettings().get(TransportSearchAction.SHARD_COUNT_LIMIT_SETTING);]