[+++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeFilters.java, +            String[] values = Strings.splitStringByCommaToArray(entry.getValue());, +            if (values.length > 0) {, +                bFilters.put(entry.getKey(), values);, +            }, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeFilters.java, +            String[] values = Strings.splitStringByCommaToArray(entry.getValue());, +            if (values.length > 0) {, +                bFilters.put(entry.getKey(), values);, +            }, +++ b/src/test/java/org/elasticsearch/test/unit/cluster/node/DiscoveryNodeFiltersTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.unit.cluster.node;, +, +import com.google.common.collect.ImmutableMap;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodeFilters;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.transport.DummyTransportAddress;, +import org.testng.annotations.Test;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.equalTo;, +, +/**, + */, +@Test, +public class DiscoveryNodeFiltersTests {, +, +    @Test, +    public void nameMatch() {, +        Settings settings = ImmutableSettings.settingsBuilder(), +                .put("xxx.name", "name1"), +                .build();, +        DiscoveryNodeFilters filters = DiscoveryNodeFilters.buildFromSettings("xxx.", settings);, +, +        DiscoveryNode node = new DiscoveryNode("name1", "id1", DummyTransportAddress.INSTANCE, ImmutableMap.<String, String>of());, +        assertThat(filters.match(node), equalTo(true));, +, +        node = new DiscoveryNode("name2", "id2", DummyTransportAddress.INSTANCE, ImmutableMap.<String, String>of());, +        assertThat(filters.match(node), equalTo(false));, +    }, +, +    @Test, +    public void idMatch() {, +        Settings settings = ImmutableSettings.settingsBuilder(), +                .put("xxx._id", "id1"), +                .build();, +        DiscoveryNodeFilters filters = DiscoveryNodeFilters.buildFromSettings("xxx.", settings);, +, +        DiscoveryNode node = new DiscoveryNode("name1", "id1", DummyTransportAddress.INSTANCE, ImmutableMap.<String, String>of());, +        assertThat(filters.match(node), equalTo(true));, +, +        node = new DiscoveryNode("name2", "id2", DummyTransportAddress.INSTANCE, ImmutableMap.<String, String>of());, +        assertThat(filters.match(node), equalTo(false));, +    }, +, +    @Test, +    public void emptyString() {, +        Settings settings = ImmutableSettings.settingsBuilder(), +                .put("xxx.name", ""), +                .build();, +        DiscoveryNodeFilters filters = DiscoveryNodeFilters.buildFromSettings("xxx.", settings);, +, +        DiscoveryNode node = new DiscoveryNode("name1", "id1", DummyTransportAddress.INSTANCE, ImmutableMap.<String, String>of());, +        assertThat(filters.match(node), equalTo(true));, +    }, +}]