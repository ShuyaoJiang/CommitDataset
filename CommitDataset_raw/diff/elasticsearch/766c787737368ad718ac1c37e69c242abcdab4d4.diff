[+++ b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +        filter(map, result, includes == null ? Strings.EMPTY_ARRAY : includes, excludes == null ? Strings.EMPTY_ARRAY : excludes, new StringBuilder());, +++ b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +        filter(map, result, includes == null ? Strings.EMPTY_ARRAY : includes, excludes == null ? Strings.EMPTY_ARRAY : excludes, new StringBuilder());, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SourceFieldMapper.java, +        private String[] includes = null;, +        private String[] excludes = null;, +        this(Defaults.NAME, Defaults.ENABLED, Defaults.FORMAT, null, -1, null, null);, +        return this.excludes != null ? this.excludes : Strings.EMPTY_ARRAY;, +        return this.includes != null ? this.includes : Strings.EMPTY_ARRAY;, +        boolean filtered = (includes != null && includes.length > 0) || (excludes != null && excludes.length > 0);, +        if (enabled == Defaults.ENABLED && compress == null && compressThreshold == -1 && includes == null && excludes == null) {, +        if (includes != null) {, +        if (excludes != null) {, +++ b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +        filter(map, result, includes == null ? Strings.EMPTY_ARRAY : includes, excludes == null ? Strings.EMPTY_ARRAY : excludes, new StringBuilder());, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SourceFieldMapper.java, +        private String[] includes = null;, +        private String[] excludes = null;, +        this(Defaults.NAME, Defaults.ENABLED, Defaults.FORMAT, null, -1, null, null);, +        return this.excludes != null ? this.excludes : Strings.EMPTY_ARRAY;, +        return this.includes != null ? this.includes : Strings.EMPTY_ARRAY;, +        boolean filtered = (includes != null && includes.length > 0) || (excludes != null && excludes.length > 0);, +        if (enabled == Defaults.ENABLED && compress == null && compressThreshold == -1 && includes == null && excludes == null) {, +        if (includes != null) {, +        if (excludes != null) {, +++ b/src/test/java/org/elasticsearch/test/integration/indices/mapping/UpdateMappingTests.java, +        ensureGreen(); // make sure that replicas are initialized so the refresh command will work them too, +, +        logger.info("Index doc");, +        // changed mapping doesn't affect indexed documents (checking backward compatibility), +        GetResponse getResponse = client().prepareGet("test", "type", "1").setRealtime(false).get();, +        assertThat(getResponse.getSource(), hasKey("normal"));, +        assertThat(getResponse.getSource(), hasKey("exclude"));, +        assertThat(getResponse.getSource(), hasKey("include"));, +, +, +        logger.info("Index doc again");, +        index("test", "type", "1", JsonXContent.contentBuilder().startObject(), +        // but do affect newly indexed docs, +        getResponse = get("test", "type", "1");, +        logger.info("Changing mapping to includes");, +        ArrayList<String> includes = (ArrayList<String>) ((Map<String, Object>) typeMapping.getSourceAsMap().get("_source")).get("includes");, +        assertThat(includes, contains("include"));, +        assertThat((Map<String, Object>) typeMapping.getSourceAsMap().get("_source"), hasKey("excludes"));, +        assertThat((ArrayList<String>) ((Map<String, Object>) typeMapping.getSourceAsMap().get("_source")).get("excludes"), emptyIterable());, +        logger.info("Indexing doc yet again");, +        index("test", "type", "1", JsonXContent.contentBuilder().startObject(), +        getResponse = get("test", "type", "1");, +, +        logger.info("Adding excludes, but keep includes");, +        putResponse = client().admin().indices().preparePutMapping("test").setType("type").setSource(, +                JsonXContent.contentBuilder().startObject().startObject("type"), +                        .startObject("_source"), +                        .startArray("excludes").value("*.excludes").endArray(), +                        .endObject().endObject(), +        ).get();, +        assertTrue(putResponse.isAcknowledged());, +, +        getMappingsResponse = client().admin().indices().prepareGetMappings("test").get();, +        typeMapping = getMappingsResponse.getMappings().get("test").get("type");, +        assertThat((Map<String, Object>) typeMapping.getSourceAsMap().get("_source"), hasKey("includes"));, +        includes = (ArrayList<String>) ((Map<String, Object>) typeMapping.getSourceAsMap().get("_source")).get("includes");, +        assertThat(includes, contains("include"));, +        assertThat((Map<String, Object>) typeMapping.getSourceAsMap().get("_source"), hasKey("excludes"));, +        ArrayList<String> excludes = (ArrayList<String>) ((Map<String, Object>) typeMapping.getSourceAsMap().get("_source")).get("excludes");, +        assertThat(excludes, contains("*.excludes"));, +, +]