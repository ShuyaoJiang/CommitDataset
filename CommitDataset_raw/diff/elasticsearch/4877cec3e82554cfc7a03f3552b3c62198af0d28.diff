[+++ b/server/src/main/java/org/elasticsearch/gateway/MetaDataStateFormat.java, +import org.elasticsearch.common.logging.Loggers;, +    private static final Logger logger = Loggers.getLogger(MetaDataStateFormat.class);, +            logger.trace("written state to {}", finalStatePath);, +                    logger.trace("copied state to {}", finalPath);, +                    logger.trace("cleaned up {}", tmpPath);, +            logger.trace("cleaned up {}", tmpStatePath);, +        final DirectoryStream.Filter<Path> filter = entry -> {, +            logger.trace("cleanupOldFiles: cleaning up {}", dataLocation);, +                    logger.trace("cleanupOldFiles: cleaned up {}", stateFile);, +++ b/server/src/main/java/org/elasticsearch/gateway/MetaDataStateFormat.java, +import org.elasticsearch.common.logging.Loggers;, +    private static final Logger logger = Loggers.getLogger(MetaDataStateFormat.class);, +            logger.trace("written state to {}", finalStatePath);, +                    logger.trace("copied state to {}", finalPath);, +                    logger.trace("cleaned up {}", tmpPath);, +            logger.trace("cleaned up {}", tmpStatePath);, +        final DirectoryStream.Filter<Path> filter = entry -> {, +            logger.trace("cleanupOldFiles: cleaning up {}", dataLocation);, +                    logger.trace("cleanupOldFiles: cleaned up {}", stateFile);, +++ b/server/src/main/java/org/elasticsearch/gateway/MetaStateService.java, +            logger.trace("[{}] state written", index);, +            logger.trace("[_global] state written");]