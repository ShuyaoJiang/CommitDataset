[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +public abstract class FieldMapper extends Mapper {, +    public FieldMapper(String simpleName) {, +        super(simpleName);, +    }, +    public abstract MappedFieldType fieldType();, +    public abstract MappedFieldTypeReference fieldTypeReference();, +    public abstract void setFieldTypeReference(MappedFieldTypeReference ref);, +    public abstract AbstractFieldMapper.CopyTo copyTo();, +    public abstract boolean isGenerated();, +    public abstract Mapper parse(ParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +public abstract class FieldMapper extends Mapper {, +    public FieldMapper(String simpleName) {, +        super(simpleName);, +    }, +    public abstract MappedFieldType fieldType();, +    public abstract MappedFieldTypeReference fieldTypeReference();, +    public abstract void setFieldTypeReference(MappedFieldTypeReference ref);, +    public abstract AbstractFieldMapper.CopyTo copyTo();, +    public abstract boolean isGenerated();, +    public abstract Mapper parse(ParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +            this(name, name, name);, +        public Names(String indexName, String originalIndexName, String fullName) {, +            int result = indexName.hashCode();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +public abstract class FieldMapper extends Mapper {, +    public FieldMapper(String simpleName) {, +        super(simpleName);, +    }, +    public abstract MappedFieldType fieldType();, +    public abstract MappedFieldTypeReference fieldTypeReference();, +    public abstract void setFieldTypeReference(MappedFieldTypeReference ref);, +    public abstract AbstractFieldMapper.CopyTo copyTo();, +    public abstract boolean isGenerated();, +    public abstract Mapper parse(ParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +            this(name, name, name);, +        public Names(String indexName, String originalIndexName, String fullName) {, +            int result = indexName.hashCode();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +public abstract class Mapper implements ToXContent, Iterable<Mapper> {, +    public static class BuilderContext {, +    public static abstract class Builder<T extends Builder, Y extends Mapper> {, +    public interface TypeParser {, +    private final String simpleName;, +    public Mapper(String simpleName) {, +        this.simpleName = simpleName;, +    }, +, +    /** Returns the simple name, which identifies this mapper against other mappers at the same level in the mappers hierarchy, +     * TODO: make this protected once Mapper, FieldMapper and AbstractFieldMapper are merged together */, +    public final String simpleName() {, +        return simpleName;, +    }, +, +    /** Returns the canonical name which uniquely identifies the mapper against other mappers in a type. */, +    public abstract String name();, +, +    public abstract void merge(Mapper mergeWith, MergeResult mergeResult) throws MergeMappingException;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +public abstract class FieldMapper extends Mapper {, +    public FieldMapper(String simpleName) {, +        super(simpleName);, +    }, +    public abstract MappedFieldType fieldType();, +    public abstract MappedFieldTypeReference fieldTypeReference();, +    public abstract void setFieldTypeReference(MappedFieldTypeReference ref);, +    public abstract AbstractFieldMapper.CopyTo copyTo();, +    public abstract boolean isGenerated();, +    public abstract Mapper parse(ParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +            this(name, name, name);, +        public Names(String indexName, String originalIndexName, String fullName) {, +            int result = indexName.hashCode();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +public abstract class Mapper implements ToXContent, Iterable<Mapper> {, +    public static class BuilderContext {, +    public static abstract class Builder<T extends Builder, Y extends Mapper> {, +    public interface TypeParser {, +    private final String simpleName;, +    public Mapper(String simpleName) {, +        this.simpleName = simpleName;, +    }, +, +    /** Returns the simple name, which identifies this mapper against other mappers at the same level in the mappers hierarchy, +     * TODO: make this protected once Mapper, FieldMapper and AbstractFieldMapper are merged together */, +    public final String simpleName() {, +        return simpleName;, +    }, +, +    /** Returns the canonical name which uniquely identifies the mapper against other mappers in a type. */, +    public abstract String name();, +]