[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.action.admin.indices.validate.query.ValidateQueryRequest;, +import org.elasticsearch.action.admin.indices.validate.query.ValidateQueryResponse;, +     * Validate a potentially expensive query without executing it., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html"> Validate Query API, +     * on elastic.co</a>, +     * @param validateQueryRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public ValidateQueryResponse validateQuery(ValidateQueryRequest validateQueryRequest, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(validateQueryRequest, RequestConverters::validateQuery, options,, +            ValidateQueryResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously validate a potentially expensive query without executing it., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html"> Validate Query API, +     * on elastic.co</a>, +     * @param validateQueryRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void validateQueryAsync(ValidateQueryRequest validateQueryRequest, RequestOptions options,, +                                   ActionListener<ValidateQueryResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(validateQueryRequest, RequestConverters::validateQuery, options,, +            ValidateQueryResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.action.admin.indices.validate.query.ValidateQueryRequest;, +import org.elasticsearch.action.admin.indices.validate.query.ValidateQueryResponse;, +     * Validate a potentially expensive query without executing it., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html"> Validate Query API, +     * on elastic.co</a>, +     * @param validateQueryRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public ValidateQueryResponse validateQuery(ValidateQueryRequest validateQueryRequest, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(validateQueryRequest, RequestConverters::validateQuery, options,, +            ValidateQueryResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously validate a potentially expensive query without executing it., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html"> Validate Query API, +     * on elastic.co</a>, +     * @param validateQueryRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void validateQueryAsync(ValidateQueryRequest validateQueryRequest, RequestOptions options,, +                                   ActionListener<ValidateQueryResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(validateQueryRequest, RequestConverters::validateQuery, options,, +            ValidateQueryResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.indices.validate.query.ValidateQueryRequest;, +    static Request validateQuery(ValidateQueryRequest validateQueryRequest) throws IOException {, +        String[] indices = validateQueryRequest.indices() == null ? Strings.EMPTY_ARRAY : validateQueryRequest.indices();, +        String[] types = validateQueryRequest.types() == null || indices.length <= 0 ? Strings.EMPTY_ARRAY : validateQueryRequest.types();, +        String endpoint = endpoint(indices, types, "_validate/query");, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +        Params params = new Params(request);, +        params.withIndicesOptions(validateQueryRequest.indicesOptions());, +        params.putParam("explain", Boolean.toString(validateQueryRequest.explain()));, +        params.putParam("all_shards", Boolean.toString(validateQueryRequest.allShards()));, +        params.putParam("rewrite", Boolean.toString(validateQueryRequest.rewrite()));, +        request.setEntity(createEntity(validateQueryRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.action.admin.indices.validate.query.ValidateQueryRequest;, +import org.elasticsearch.action.admin.indices.validate.query.ValidateQueryResponse;, +     * Validate a potentially expensive query without executing it., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html"> Validate Query API, +     * on elastic.co</a>, +     * @param validateQueryRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public ValidateQueryResponse validateQuery(ValidateQueryRequest validateQueryRequest, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(validateQueryRequest, RequestConverters::validateQuery, options,, +            ValidateQueryResponse::fromXContent, emptySet());, +    }, +, +    /**]