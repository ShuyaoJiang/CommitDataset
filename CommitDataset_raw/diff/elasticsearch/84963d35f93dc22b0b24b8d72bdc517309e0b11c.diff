[+++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).services()) {, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).services()) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.services()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.services()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.services()) {, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +        for (Class<? extends LifecycleComponent> plugin : injector.getInstance(PluginsService.class).services()) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.services()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.services()) {, +        for (Class<? extends LifecycleComponent> plugin : pluginsService.services()) {, +++ b/core/src/main/java/org/elasticsearch/plugins/AbstractPlugin.java, +import com.google.common.collect.ImmutableList;, + * A base class for a plugin., + * <p/>, + * A plugin can be dynamically injected with {@link Module} by implementing <tt>onModule(AnyModule)</tt> method, + * removing the need to override {@link #processModule(org.elasticsearch.common.inject.Module)} and check using, + * instanceof., +public abstract class AbstractPlugin implements Plugin {, +, +    /**, +     * Defaults to return an empty list., +     */, +    @Override, +    public Collection<Class<? extends Module>> modules() {, +        return ImmutableList.of();, +    }, +, +    /**, +     * Defaults to return an empty list., +     */, +    @Override, +    public Collection<Module> modules(Settings settings) {, +        return ImmutableList.of();, +    }, +, +    /**, +     * Defaults to return an empty list., +     */, +    @Override, +    public Collection<Class<? extends LifecycleComponent>> services() {, +        return ImmutableList.of();, +    }, +, +    /**, +     * Defaults to return an empty list., +     */, +    @Override, +    public Collection<Class<? extends Module>> indexModules() {, +        return ImmutableList.of();, +    }, +, +    /**, +     * Defaults to return an empty list., +     */, +    @Override, +    public Collection<Module> indexModules(Settings settings) {, +        return ImmutableList.of();, +    }, +, +    /**, +     * Defaults to return an empty list., +     */, +    @Override, +    public Collection<Class<? extends Closeable>> indexServices() {, +        return ImmutableList.of();, +    }, +, +    /**, +     * Defaults to return an empty list., +     */, +    @Override, +    public Collection<Class<? extends Module>> shardModules() {, +        return ImmutableList.of();, +    }, +, +    /**, +     * Defaults to return an empty list., +     */, +    @Override, +    public Collection<Module> shardModules(Settings settings) {, +        return ImmutableList.of();, +    }, +, +    /**, +     * Defaults to return an empty list., +     */, +    @Override, +    public Collection<Class<? extends Closeable>> shardServices() {, +        return ImmutableList.of();, +    }, +, +    @Override, +    public void processModule(Module module) {, +        // nothing to do here, +    }, +]