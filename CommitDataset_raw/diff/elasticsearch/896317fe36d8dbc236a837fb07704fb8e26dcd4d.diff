[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/MlFilter.java, +    /**, +     * The max number of items allowed per filter., +     * Limiting the number of items protects users, +     * from running into excessive overhead due to, +     * filters using too much memory and lookups, +     * becoming too expensive., +     */, +    private static final int MAX_ITEMS = 10000;, +, +        this.items = Objects.requireNonNull(items);, +            ExceptionsHelper.requireNonNull(items, MlFilter.ITEMS.getPreferredName());, +            if (items.size() > MAX_ITEMS) {, +                throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.FILTER_CONTAINS_TOO_MANY_ITEMS, id, MAX_ITEMS));, +            }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/MlFilter.java, +    /**, +     * The max number of items allowed per filter., +     * Limiting the number of items protects users, +     * from running into excessive overhead due to, +     * filters using too much memory and lookups, +     * becoming too expensive., +     */, +    private static final int MAX_ITEMS = 10000;, +, +        this.items = Objects.requireNonNull(items);, +            ExceptionsHelper.requireNonNull(items, MlFilter.ITEMS.getPreferredName());, +            if (items.size() > MAX_ITEMS) {, +                throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.FILTER_CONTAINS_TOO_MANY_ITEMS, id, MAX_ITEMS));, +            }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java, +    public static final String FILTER_CONTAINS_TOO_MANY_ITEMS = "Filter [{0}] contains too many items; up to [{1}] items are allowed";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/MlFilter.java, +    /**, +     * The max number of items allowed per filter., +     * Limiting the number of items protects users, +     * from running into excessive overhead due to, +     * filters using too much memory and lookups, +     * becoming too expensive., +     */, +    private static final int MAX_ITEMS = 10000;, +, +        this.items = Objects.requireNonNull(items);, +            ExceptionsHelper.requireNonNull(items, MlFilter.ITEMS.getPreferredName());, +            if (items.size() > MAX_ITEMS) {, +                throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.FILTER_CONTAINS_TOO_MANY_ITEMS, id, MAX_ITEMS));, +            }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/messages/Messages.java, +    public static final String FILTER_CONTAINS_TOO_MANY_ITEMS = "Filter [{0}] contains too many items; up to [{1}] items are allowed";, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/config/MlFilterTests.java, +import java.util.ArrayList;, +import java.util.List;, +        Exception ex = expectThrows(IllegalArgumentException.class,, +        assertEquals("[items] must not be null.", ex.getMessage());, +    public void testTooManyItems() {, +        List<String> items = new ArrayList<>(10001);, +        for (int i = 0; i < 10001; ++i) {, +            items.add("item_" + i);, +        }, +        ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class,, +                () -> MlFilter.builder("huge").setItems(items).build());, +        assertThat(e.getMessage(), startsWith("Filter [huge] contains too many items"));, +    }, +, +    public void testGivenItemsAreMaxAllowed() {, +        List<String> items = new ArrayList<>(10000);, +        for (int i = 0; i < 10000; ++i) {, +            items.add("item_" + i);, +        }, +, +        MlFilter hugeFilter = MlFilter.builder("huge").setItems(items).build();, +, +        assertThat(hugeFilter.getItems().size(), equalTo(items.size()));, +    }, +]