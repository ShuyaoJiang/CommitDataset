[+++ b/TESTING.asciidoc, +You can also filter tests by certain annotations ie:, +, +  * `@Slow` - tests that are know to take a long time to execute, +  * `@Nightly` - tests that only run in nightly builds (disabled by default), +  * `@Integration` - integration tests, +  * `@Backwards` - backwards compatibility tests (disabled by default), +  * `@AwaitsFix` - tests that are waiting for a bugfix (disabled by default), +  * `@BadApple` - tests that are known to fail randomly (disabled by default), +, +Those annotation names can be combined into a filter expression like:, +, +------------------------------------------------, +mvn test -Dtests.filter="@nightly and not @slow" , +------------------------------------------------, +, +to run all nightly test but not the ones that are slow. `tests.filter` supports, +the boolean operators `and, or, not` and grouping ie:, +, +, +---------------------------------------------------------------, +mvn test -Dtests.filter="@nightly and not(@slow or @backwards)" , +---------------------------------------------------------------, +, +mvn test -Dtests.filter="@backwards" -Dtests.bwc.version=x.y.z -Dtests.bwc.path=/path/to/elasticsearch, +mvn test -Dtests.filter="@backwards" -Dtests.bwc.version=x.y.z, +++ b/TESTING.asciidoc, +You can also filter tests by certain annotations ie:, +, +  * `@Slow` - tests that are know to take a long time to execute, +  * `@Nightly` - tests that only run in nightly builds (disabled by default), +  * `@Integration` - integration tests, +  * `@Backwards` - backwards compatibility tests (disabled by default), +  * `@AwaitsFix` - tests that are waiting for a bugfix (disabled by default), +  * `@BadApple` - tests that are known to fail randomly (disabled by default), +, +Those annotation names can be combined into a filter expression like:, +, +------------------------------------------------, +mvn test -Dtests.filter="@nightly and not @slow" , +------------------------------------------------, +, +to run all nightly test but not the ones that are slow. `tests.filter` supports, +the boolean operators `and, or, not` and grouping ie:, +, +, +---------------------------------------------------------------, +mvn test -Dtests.filter="@nightly and not(@slow or @backwards)" , +---------------------------------------------------------------, +, +mvn test -Dtests.filter="@backwards" -Dtests.bwc.version=x.y.z -Dtests.bwc.path=/path/to/elasticsearch, +mvn test -Dtests.filter="@backwards" -Dtests.bwc.version=x.y.z, +++ b/pom.xml, +                                <tests.filter>${tests.filter}</tests.filter>, +++ b/TESTING.asciidoc, +You can also filter tests by certain annotations ie:, +, +  * `@Slow` - tests that are know to take a long time to execute, +  * `@Nightly` - tests that only run in nightly builds (disabled by default), +  * `@Integration` - integration tests, +  * `@Backwards` - backwards compatibility tests (disabled by default), +  * `@AwaitsFix` - tests that are waiting for a bugfix (disabled by default), +  * `@BadApple` - tests that are known to fail randomly (disabled by default), +, +Those annotation names can be combined into a filter expression like:, +, +------------------------------------------------, +mvn test -Dtests.filter="@nightly and not @slow" , +------------------------------------------------, +, +to run all nightly test but not the ones that are slow. `tests.filter` supports, +the boolean operators `and, or, not` and grouping ie:, +, +, +---------------------------------------------------------------, +mvn test -Dtests.filter="@nightly and not(@slow or @backwards)" , +---------------------------------------------------------------, +, +mvn test -Dtests.filter="@backwards" -Dtests.bwc.version=x.y.z -Dtests.bwc.path=/path/to/elasticsearch, +mvn test -Dtests.filter="@backwards" -Dtests.bwc.version=x.y.z, +++ b/pom.xml, +                                <tests.filter>${tests.filter}</tests.filter>, +++ b/src/test/java/org/apache/lucene/search/postingshighlight/CustomPassageFormatterTests.java, +import org.elasticsearch.test.ElasticsearchTestCase;, +public class CustomPassageFormatterTests extends ElasticsearchTestCase {, +++ b/TESTING.asciidoc, +You can also filter tests by certain annotations ie:, +, +  * `@Slow` - tests that are know to take a long time to execute, +  * `@Nightly` - tests that only run in nightly builds (disabled by default), +  * `@Integration` - integration tests, +  * `@Backwards` - backwards compatibility tests (disabled by default), +  * `@AwaitsFix` - tests that are waiting for a bugfix (disabled by default), +  * `@BadApple` - tests that are known to fail randomly (disabled by default), +, +Those annotation names can be combined into a filter expression like:, +, +------------------------------------------------, +mvn test -Dtests.filter="@nightly and not @slow" , +------------------------------------------------]