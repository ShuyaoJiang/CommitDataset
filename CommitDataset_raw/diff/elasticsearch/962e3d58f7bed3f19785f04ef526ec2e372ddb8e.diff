[+++ b/src/test/java/org/elasticsearch/test/integration/AbstractSharedClusterTest.java, +import org.elasticsearch.action.ActionRequestBuilder;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.admin.indices.flush.FlushResponse;, +import org.elasticsearch.action.support.broadcast.BroadcastOperationRequestBuilder;, +import org.elasticsearch.action.support.broadcast.BroadcastOperationResponse;, +import org.elasticsearch.client.AdminClient;, +    public CreateIndexRequestBuilder addMapping(CreateIndexRequestBuilder builder, String type, Object[]... mapping) throws IOException {, +        XContentBuilder mappingBuilder = jsonBuilder();, +        mappingBuilder.startObject().startObject(type).startObject("properties");, +        for (Object[] objects : mapping) {, +            mappingBuilder.startObject(objects[0].toString());, +            for (int i = 1; i < objects.length; i++) {, +                String name = objects[i++].toString();, +                Object value = objects[i];, +                mappingBuilder.field(name,value);    , +            }, +            mappingBuilder.endObject().endObject().endObject();, +        }, +        mappingBuilder.endObject();, +        builder.addMapping(type, mappingBuilder );, +        return builder;, +    }, +, +    protected FlushResponse flush() {, +        FlushResponse actionGet = client().admin().indices().prepareFlush().setRefresh(true).execute().actionGet();, +        assertNoFailures(actionGet);, +        return actionGet;    , +    }, +    , +    protected AdminClient admin() {, +        return client().admin();, +    }, +    , +    protected <Res extends ActionResponse> Res run(ActionRequestBuilder<?,Res,?> builder) {, +        Res actionGet = builder.execute().actionGet();, +        return actionGet;, +    }, +    , +    protected <Res extends BroadcastOperationResponse> Res run(BroadcastOperationRequestBuilder<?,Res,?> builder) {, +        Res actionGet = builder.execute().actionGet();, +        assertNoFailures(actionGet);, +        return actionGet;, +    }, +, +++ b/src/test/java/org/elasticsearch/test/integration/AbstractSharedClusterTest.java, +import org.elasticsearch.action.ActionRequestBuilder;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.admin.indices.flush.FlushResponse;, +import org.elasticsearch.action.support.broadcast.BroadcastOperationRequestBuilder;, +import org.elasticsearch.action.support.broadcast.BroadcastOperationResponse;, +import org.elasticsearch.client.AdminClient;, +    public CreateIndexRequestBuilder addMapping(CreateIndexRequestBuilder builder, String type, Object[]... mapping) throws IOException {, +        XContentBuilder mappingBuilder = jsonBuilder();, +        mappingBuilder.startObject().startObject(type).startObject("properties");, +        for (Object[] objects : mapping) {, +            mappingBuilder.startObject(objects[0].toString());, +            for (int i = 1; i < objects.length; i++) {, +                String name = objects[i++].toString();, +                Object value = objects[i];, +                mappingBuilder.field(name,value);    , +            }, +            mappingBuilder.endObject().endObject().endObject();, +        }, +        mappingBuilder.endObject();, +        builder.addMapping(type, mappingBuilder );, +        return builder;, +    }, +, +    protected FlushResponse flush() {, +        FlushResponse actionGet = client().admin().indices().prepareFlush().setRefresh(true).execute().actionGet();, +        assertNoFailures(actionGet);, +        return actionGet;    , +    }, +    , +    protected AdminClient admin() {, +        return client().admin();, +    }, +    , +    protected <Res extends ActionResponse> Res run(ActionRequestBuilder<?,Res,?> builder) {, +        Res actionGet = builder.execute().actionGet();, +        return actionGet;, +    }, +    , +    protected <Res extends BroadcastOperationResponse> Res run(BroadcastOperationRequestBuilder<?,Res,?> builder) {, +        Res actionGet = builder.execute().actionGet();, +        assertNoFailures(actionGet);, +        return actionGet;, +    }, +, +++ b/src/test/java/org/elasticsearch/test/integration/nested/SimpleNestedTests.java, +        run(addMapping(prepareCreate("test"), "type1", new Object[] {"nested1", "type", "nested"}));, +        ensureGreen();, +        flush();, +        GetResponse getResponse = run(client().prepareGet("test", "type1", "1"));, +        IndicesStatusResponse statusResponse = run(admin().indices().prepareStatus());, +        searchResponse = run(client().prepareSearch("test").setQuery(matchAllQuery()));, +        searchResponse = run(client().prepareSearch("test").setQuery(termQuery("nested1.n_field1", "n_value1_1")));, +        searchResponse = run(client().prepareSearch("test").setQuery(nestedQuery("nested1", termQuery("nested1.n_field1", "n_value1_1"))));, +        searchResponse = run(client().prepareSearch("test").setQuery(nestedQuery("nested1", termQuery("nested1.n_field1", "n_value1_1"))).setSearchType(SearchType.DFS_QUERY_THEN_FETCH));]