[+++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.elasticsearch.cluster.routing.*;, +        Iterable<MutableShardRouting> routingNode = clusterState.getRoutingNodes().routingNodeIter(clusterService.localNode().getId());, +        for (MutableShardRouting shardRouting : routingNode) {, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.elasticsearch.cluster.routing.*;, +        Iterable<MutableShardRouting> routingNode = clusterState.getRoutingNodes().routingNodeIter(clusterService.localNode().getId());, +        for (MutableShardRouting shardRouting : routingNode) {, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java, +import com.google.common.collect.Iterators;, +import java.util.Collection;, +        return Iterators.unmodifiableIterator(shards.iterator());, +    }, +, +    Iterator<MutableShardRouting> mutableIterator() {, +    public int size() {, +        return shards.size();, +, +    public MutableShardRouting get(int i) {, +        return shards.get(i) ;, +    }, +, +    public Collection<MutableShardRouting> copyShards() {, +        return new ArrayList<MutableShardRouting>(shards);, +    }, +, +    public boolean isEmpty() {, +        return shards.isEmpty();, +    }, +++ b/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +import org.elasticsearch.cluster.routing.*;, +        Iterable<MutableShardRouting> routingNode = clusterState.getRoutingNodes().routingNodeIter(clusterService.localNode().getId());, +        for (MutableShardRouting shardRouting : routingNode) {, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java, +import com.google.common.collect.Iterators;, +import java.util.Collection;, +        return Iterators.unmodifiableIterator(shards.iterator());, +    }, +, +    Iterator<MutableShardRouting> mutableIterator() {, +    public int size() {, +        return shards.size();, +, +    public MutableShardRouting get(int i) {, +        return shards.get(i) ;, +    }, +, +    public Collection<MutableShardRouting> copyShards() {, +        return new ArrayList<MutableShardRouting>(shards);, +    }, +, +    public boolean isEmpty() {, +        return shards.isEmpty();, +    }, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +import com.google.common.collect.Iterators;, +import org.elasticsearch.common.collect.IdentityHashSet;, +    private final UnassignedShards unassignedShards = new UnassignedShards();, +    private final List<MutableShardRouting> ignoredUnassignedShards = newArrayList();, +    private final Map<ShardId, Set<MutableShardRouting>> assignedShards = newHashMap();, +    private int relocatingShards = 0;, +                        activeShardsAdd(sr);, +                            relocatingShards++;, +                            activeShardsAdd(sr);, +                        activeShardsAdd(sr);, +                        unassignedShards.add(sr);, +        return Iterators.unmodifiableIterator(nodesToShards.values().iterator());, +        return !unassignedShards.isEmpty();, +        return this.ignoredUnassignedShards;, +    public UnassignedShards unassigned() {, +        return this.unassignedShards;, +    public RoutingNodesIterator nodes() {, +        return new RoutingNodesIterator(nodesToShards.values().iterator());, +        return unassignedShards.numPrimaries() > 0;, +        return !unassignedShards.isEmpty();, +        return relocatingShards;, +    /**, +     * Returns the active primary shard for the given ShardRouting or <code>null</code> if, +     * no primary is found or the primary is not active., +     */, +    public MutableShardRouting activePrimary(ShardRouting shard) {, +        for (MutableShardRouting shardRouting : activeShards(shard.shardId())) {, +                if (shardRouting.active()) {, +                    return shardRouting;, +                }, +        return null;, +    /**, +     * Returns <code>true</code> iff all replicas are active for the given shard routing. Otherwise <code>false</code>, +     */, +    public boolean allReplicasActive(ShardRouting shardRouting) {, +        final Set<MutableShardRouting> shards = activeShards(shardRouting.shardId());, +        if (shards.isEmpty() || shards.size() < this.routingTable.index(shardRouting.index()).shard(shardRouting.id()).size()) {, +            return false; // if we are empty nothing is active if we have less than total at least one is unassigned, +        for (MutableShardRouting shard : shards) {, +            if (!shard.active()) {, +                return false;, +        return true;, +            for (MutableShardRouting shardRouting : routingNode) {, +        // TODO these are used on tests only - move into utils class, +        // TODO these are used on tests only - move into utils class]