[+++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private final Filter parentFilter;, +        public DeleteByQuery(Query query, BytesReference source, @Nullable String[] filteringAliases, @Nullable Filter aliasFilter, Filter parentFilter, String... types) {, +            this.parentFilter = parentFilter;, +        public boolean nested() {, +            return parentFilter != null;, +        }, +, +        public Filter parentFilter() {, +            return parentFilter;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private final Filter parentFilter;, +        public DeleteByQuery(Query query, BytesReference source, @Nullable String[] filteringAliases, @Nullable Filter aliasFilter, Filter parentFilter, String... types) {, +            this.parentFilter = parentFilter;, +        public boolean nested() {, +            return parentFilter != null;, +        }, +, +        public Filter parentFilter() {, +            return parentFilter;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.index.search.nested.IncludeNestedDocsQuery;, +, +            if (delete.nested() && delete.aliasFilter() != null) {, +                query = new IncludeNestedDocsQuery(new FilteredQuery(delete.query(), delete.aliasFilter()), delete.parentFilter());, +            } else if (delete.nested()) {, +                query = new IncludeNestedDocsQuery(delete.query(), delete.parentFilter());, +            } else if (delete.aliasFilter() != null) {, +            } else {, +                query = delete.query();, +, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private final Filter parentFilter;, +        public DeleteByQuery(Query query, BytesReference source, @Nullable String[] filteringAliases, @Nullable Filter aliasFilter, Filter parentFilter, String... types) {, +            this.parentFilter = parentFilter;, +        public boolean nested() {, +            return parentFilter != null;, +        }, +, +        public Filter parentFilter() {, +            return parentFilter;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.index.search.nested.IncludeNestedDocsQuery;, +, +            if (delete.nested() && delete.aliasFilter() != null) {, +                query = new IncludeNestedDocsQuery(new FilteredQuery(delete.query(), delete.aliasFilter()), delete.parentFilter());, +            } else if (delete.nested()) {, +                query = new IncludeNestedDocsQuery(delete.query(), delete.parentFilter());, +            } else if (delete.aliasFilter() != null) {, +            } else {, +                query = delete.query();, +, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +        private final Filter parentFilter;, +        public DeleteByQuery(Query query, BytesReference source, @Nullable String[] filteringAliases, @Nullable Filter aliasFilter, Filter parentFilter, String... types) {, +            this.parentFilter = parentFilter;, +        public boolean nested() {, +            return parentFilter != null;, +        }, +, +        public Filter parentFilter() {, +            return parentFilter;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.index.search.nested.IncludeNestedDocsQuery;, +, +            if (delete.nested() && delete.aliasFilter() != null) {, +                query = new IncludeNestedDocsQuery(new FilteredQuery(delete.query(), delete.aliasFilter()), delete.parentFilter());, +            } else if (delete.nested()) {, +                query = new IncludeNestedDocsQuery(delete.query(), delete.parentFilter());, +            } else if (delete.aliasFilter() != null) {, +            } else {, +                query = delete.query();, +, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/search/nested/IncludeNestedDocsQuery.java, +package org.elasticsearch.index.search.nested;, +, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.*;, +import org.apache.lucene.util.FixedBitSet;, +import org.elasticsearch.common.lucene.docset.FixedBitDocSet;, +, +import java.io.IOException;, +import java.util.Set;, +, +/**, + * A special query that accepts a top level parent matching query, and returns the nested docs of the matching parent, + * doc as well. This is handy when deleting by query., + */, +public class IncludeNestedDocsQuery extends Query {]