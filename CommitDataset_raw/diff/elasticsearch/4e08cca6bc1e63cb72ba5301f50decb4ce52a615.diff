[+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixtureExtension.java, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixtureExtension.java, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixturesPlugin.java, +import com.avast.gradle.dockercompose.tasks.ComposeUp;, +            postProcessFixture.dependsOn(buildFixture);, +        }, +, +            disableTaskByType(tasks, getTaskClass("com.carrotsearch.gradle.junit4.RandomizedTestingTask"));, +            disableTaskByType(tasks, TestingConventionsTasks.class);, +            disableTaskByType(tasks, ComposeUp.class);, +, +                        .forEach((container, host) -> {, +                            String name = "test.fixtures." + service + ".tcp." + container;, +                            theTask.getLogger().info("port mapping property: {}={}", name, host);, +                            consumer.accept(, +                                name,, +                            );, +                        });, +                        .forEach((container, host) -> {, +                            String name = "test.fixtures." + service + ".udp." + container;, +                            theTask.getLogger().info("port mapping property: {}={}", name, host);, +                            consumer.accept(, +                                name,, +                            );, +                        });, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixtureExtension.java, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixturesPlugin.java, +import com.avast.gradle.dockercompose.tasks.ComposeUp;, +            postProcessFixture.dependsOn(buildFixture);, +        }, +, +            disableTaskByType(tasks, getTaskClass("com.carrotsearch.gradle.junit4.RandomizedTestingTask"));, +            disableTaskByType(tasks, TestingConventionsTasks.class);, +            disableTaskByType(tasks, ComposeUp.class);, +, +                        .forEach((container, host) -> {, +                            String name = "test.fixtures." + service + ".tcp." + container;, +                            theTask.getLogger().info("port mapping property: {}={}", name, host);, +                            consumer.accept(, +                                name,, +                            );, +                        });, +                        .forEach((container, host) -> {, +                            String name = "test.fixtures." + service + ".udp." + container;, +                            theTask.getLogger().info("port mapping property: {}={}", name, host);, +                            consumer.accept(, +                                name,, +                            );, +                        });, +++ b/distribution/docker/build.gradle, +apply plugin: 'elasticsearch.test.fixtures', +, +preProcessFixture {, +  dependsOn taskName("copy", true, "DockerContext"), +  dependsOn taskName("copy", true, "Dockerfile"), +  dependsOn taskName("copy", false, "DockerContext"), +  dependsOn taskName("copy", false, "Dockerfile"), +}, +, +postProcessFixture.doLast {, +  println "docker default distro is on port: ${ext."test.fixtures.elasticsearch-default.tcp.9200"}, " +, +          "oss is on: ${ext."test.fixtures.elasticsearch-oss.tcp.9200"}", +}, +, +// TODO: Add some actual tests, this will just check that the TPC port in the container is up, +check.dependsOn postProcessFixture, +, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixtureExtension.java, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testfixtures/TestFixturesPlugin.java, +import com.avast.gradle.dockercompose.tasks.ComposeUp;, +            postProcessFixture.dependsOn(buildFixture);, +        }, +, +            disableTaskByType(tasks, getTaskClass("com.carrotsearch.gradle.junit4.RandomizedTestingTask"));, +            disableTaskByType(tasks, TestingConventionsTasks.class);, +            disableTaskByType(tasks, ComposeUp.class);, +, +                        .forEach((container, host) -> {, +                            String name = "test.fixtures." + service + ".tcp." + container;, +                            theTask.getLogger().info("port mapping property: {}={}", name, host);, +                            consumer.accept(, +                                name,, +                            );, +                        });, +                        .forEach((container, host) -> {, +                            String name = "test.fixtures." + service + ".udp." + container;, +                            theTask.getLogger().info("port mapping property: {}={}", name, host);, +                            consumer.accept(, +                                name,, +                            );, +                        });, +++ b/distribution/docker/build.gradle, +apply plugin: 'elasticsearch.test.fixtures', +, +preProcessFixture {, +  dependsOn taskName("copy", true, "DockerContext"), +  dependsOn taskName("copy", true, "Dockerfile"), +  dependsOn taskName("copy", false, "DockerContext"), +  dependsOn taskName("copy", false, "Dockerfile"), +}]