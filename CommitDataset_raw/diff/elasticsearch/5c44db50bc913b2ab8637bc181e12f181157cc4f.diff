[+++ b/docs/java-api/aggregations/bucket/datehistogram-aggregation.asciidoc, +                .interval(DateHistogramInterval.YEAR);, +                .interval(DateHistogramInterval.days(10));, +Histogram agg = sr.getAggregations().get("agg");, +for (Histogram.Bucket entry : agg.getBuckets()) {, +    DateTime keyAsDate = (DateTime) entry.getKey();  // Key, +    String key = entry.getKeyAsString();            // Key as String, +++ b/docs/java-api/aggregations/bucket/datehistogram-aggregation.asciidoc, +                .interval(DateHistogramInterval.YEAR);, +                .interval(DateHistogramInterval.days(10));, +Histogram agg = sr.getAggregations().get("agg");, +for (Histogram.Bucket entry : agg.getBuckets()) {, +    DateTime keyAsDate = (DateTime) entry.getKey();  // Key, +    String key = entry.getKeyAsString();            // Key as String, +++ b/docs/java-api/aggregations/bucket/daterange-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.Range;, +Range agg = sr.getAggregations().get("agg");, +for (Range.Bucket entry : agg.getBuckets()) {, +    DateTime fromAsDate = (DateTime) entry.getFrom();    // Date bucket from as a Date, +    DateTime toAsDate = (DateTime) entry.getTo();        // Date bucket to as a Date, +++ b/docs/java-api/aggregations/bucket/datehistogram-aggregation.asciidoc, +                .interval(DateHistogramInterval.YEAR);, +                .interval(DateHistogramInterval.days(10));, +Histogram agg = sr.getAggregations().get("agg");, +for (Histogram.Bucket entry : agg.getBuckets()) {, +    DateTime keyAsDate = (DateTime) entry.getKey();  // Key, +    String key = entry.getKeyAsString();            // Key as String, +++ b/docs/java-api/aggregations/bucket/daterange-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.Range;, +Range agg = sr.getAggregations().get("agg");, +for (Range.Bucket entry : agg.getBuckets()) {, +    DateTime fromAsDate = (DateTime) entry.getFrom();    // Date bucket from as a Date, +    DateTime toAsDate = (DateTime) entry.getTo();        // Date bucket to as a Date, +++ b/docs/java-api/aggregations/bucket/geodistance-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.Range;, +Range agg = sr.getAggregations().get("agg");, +for (Range.Bucket entry : agg.getBuckets()) {, +    Number from = (Number) entry.getFrom();          // bucket from value, +    Number to = (Number) entry.getTo();              // bucket to value, +++ b/docs/java-api/aggregations/bucket/datehistogram-aggregation.asciidoc, +                .interval(DateHistogramInterval.YEAR);, +                .interval(DateHistogramInterval.days(10));, +Histogram agg = sr.getAggregations().get("agg");, +for (Histogram.Bucket entry : agg.getBuckets()) {, +    DateTime keyAsDate = (DateTime) entry.getKey();  // Key, +    String key = entry.getKeyAsString();            // Key as String, +++ b/docs/java-api/aggregations/bucket/daterange-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.Range;, +Range agg = sr.getAggregations().get("agg");, +for (Range.Bucket entry : agg.getBuckets()) {, +    DateTime fromAsDate = (DateTime) entry.getFrom();    // Date bucket from as a Date, +    DateTime toAsDate = (DateTime) entry.getTo();        // Date bucket to as a Date, +++ b/docs/java-api/aggregations/bucket/geodistance-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.Range;, +Range agg = sr.getAggregations().get("agg");, +for (Range.Bucket entry : agg.getBuckets()) {, +    Number from = (Number) entry.getFrom();          // bucket from value, +    Number to = (Number) entry.getTo();              // bucket to value, +++ b/docs/java-api/aggregations/bucket/histogram-aggregation.asciidoc, +    Number key = (Number) entry.getKey();                    // Key, +    String keyAsString = entry.getKeyAsString();             // Key As String, +++ b/docs/java-api/aggregations/bucket/datehistogram-aggregation.asciidoc, +                .interval(DateHistogramInterval.YEAR);, +                .interval(DateHistogramInterval.days(10));, +Histogram agg = sr.getAggregations().get("agg");, +for (Histogram.Bucket entry : agg.getBuckets()) {, +    DateTime keyAsDate = (DateTime) entry.getKey();  // Key, +    String key = entry.getKeyAsString();            // Key as String, +++ b/docs/java-api/aggregations/bucket/daterange-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.Range;, +Range agg = sr.getAggregations().get("agg");, +for (Range.Bucket entry : agg.getBuckets()) {, +    DateTime fromAsDate = (DateTime) entry.getFrom();    // Date bucket from as a Date, +    DateTime toAsDate = (DateTime) entry.getTo();        // Date bucket to as a Date, +++ b/docs/java-api/aggregations/bucket/geodistance-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.Range;, +Range agg = sr.getAggregations().get("agg");, +for (Range.Bucket entry : agg.getBuckets()) {, +    Number from = (Number) entry.getFrom();          // bucket from value, +    Number to = (Number) entry.getTo();              // bucket to value, +++ b/docs/java-api/aggregations/bucket/histogram-aggregation.asciidoc, +    Number key = (Number) entry.getKey();                    // Key, +    String keyAsString = entry.getKeyAsString();             // Key As String, +++ b/docs/java-api/aggregations/bucket/iprange-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.Range;, +for (Range.Bucket entry : agg.getBuckets()) {, +++ b/docs/java-api/aggregations/bucket/datehistogram-aggregation.asciidoc, +                .interval(DateHistogramInterval.YEAR);, +                .interval(DateHistogramInterval.days(10));, +Histogram agg = sr.getAggregations().get("agg");, +for (Histogram.Bucket entry : agg.getBuckets()) {, +    DateTime keyAsDate = (DateTime) entry.getKey();  // Key, +    String key = entry.getKeyAsString();            // Key as String, +++ b/docs/java-api/aggregations/bucket/daterange-aggregation.asciidoc, +import org.elasticsearch.search.aggregations.bucket.range.Range;, +Range agg = sr.getAggregations().get("agg");, +for (Range.Bucket entry : agg.getBuckets()) {, +    DateTime fromAsDate = (DateTime) entry.getFrom();    // Date bucket from as a Date, +    DateTime toAsDate = (DateTime) entry.getTo();        // Date bucket to as a Date, +++ b/docs/java-api/aggregations/bucket/geodistance-aggregation.asciidoc]