[+++ b/TESTING.asciidoc, +* fedora-22, +* oel-6, +++ b/TESTING.asciidoc, +* fedora-22, +* oel-6, +++ b/Vagrantfile, +++ b/TESTING.asciidoc, +* fedora-22, +* oel-6, +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            if (System.getProperty("idea.active") != null) {, +                    // hack until gradle supports java 9's new "-release" arg, +                    options.compilerArgs << '-release' << '8', +++ b/TESTING.asciidoc, +* fedora-22, +* oel-6, +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            if (System.getProperty("idea.active") != null) {, +                    // hack until gradle supports java 9's new "-release" arg, +                    options.compilerArgs << '-release' << '8', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    /**, +     * An override of the data directory. This may only be used with a single node., +     * The value is lazily evaluated at runtime as a String path., +     */, +    @Input, +    Object dataDir = null, +, +    /** Optional override of the cluster name. */, +    @Input, +    String clusterName = null, +, +     * A closure to call which returns the unicast host to connect to for cluster formation., +     * This allows multi node clusters, or a new cluster to connect to an existing cluster., +     * The closure takes two arguments, the NodeInfo for the first node in the cluster, and, +     * an AntBuilder which may be used to wait on conditions before returning., +    @Input, +    Closure unicastTransportUri = { NodeInfo seedNode, NodeInfo node, AntBuilder ant ->, +        if (seedNode == node) {, +            return null, +        }, +        ant.waitfor(maxwait: '20', maxwaitunit: 'second', checkevery: '500', checkeveryunit: 'millisecond') {, +            resourceexists {, +                file(file: seedNode.transportPortsFile.toString()), +            }, +        }, +        return seedNode.transportUri(), +    }, +++ b/TESTING.asciidoc, +* fedora-22, +* oel-6, +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            if (System.getProperty("idea.active") != null) {, +                    // hack until gradle supports java 9's new "-release" arg, +                    options.compilerArgs << '-release' << '8', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    /**, +     * An override of the data directory. This may only be used with a single node., +     * The value is lazily evaluated at runtime as a String path., +     */, +    @Input, +    Object dataDir = null, +, +    /** Optional override of the cluster name. */, +    @Input, +    String clusterName = null, +, +     * A closure to call which returns the unicast host to connect to for cluster formation., +     * This allows multi node clusters, or a new cluster to connect to an existing cluster., +     * The closure takes two arguments, the NodeInfo for the first node in the cluster, and, +     * an AntBuilder which may be used to wait on conditions before returning., +    @Input, +    Closure unicastTransportUri = { NodeInfo seedNode, NodeInfo node, AntBuilder ant ->, +        if (seedNode == node) {, +            return null, +        }, +        ant.waitfor(maxwait: '20', maxwaitunit: 'second', checkevery: '500', checkeveryunit: 'millisecond') {, +            resourceexists {, +                file(file: seedNode.transportPortsFile.toString()), +            }, +        }, +        return seedNode.transportUri(), +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +    static List<NodeInfo> setup(Project project, Task task, ClusterConfiguration config) {, +            startTasks.add(configureNode(project, task, cleanup, node, distro, nodes.get(0))), +        return nodes, +    static Task configureNode(Project project, Task task, Object dependsOn, NodeInfo node, Configuration configuration, NodeInfo seedNode) {, +        setup = configureWriteConfigTask(taskName(task, node, 'configure'), project, setup, node, seedNode), +    static Task configureWriteConfigTask(String name, Project project, Task setup, NodeInfo node, NodeInfo seedNode) {, +            String unicastTransportUri = node.config.unicastTransportUri(seedNode, node, project.ant), +            if (unicastTransportUri != null) {, +                esConfig['discovery.zen.ping.unicast.hosts'] = "\"${unicastTransportUri}\"", +++ b/TESTING.asciidoc, +* fedora-22, +* oel-6]