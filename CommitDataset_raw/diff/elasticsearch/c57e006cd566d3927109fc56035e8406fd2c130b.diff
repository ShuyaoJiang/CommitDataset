[+++ b/TESTING.asciidoc, +gradle prepareTestRoot, +If you want to run elasticsearch from your IDE, the `gradle run` task, +supports a remote debugging option:, +, +---------------------------------------------------------------------------, +gradle run --debug-jvm, +---------------------------------------------------------------------------, +++ b/TESTING.asciidoc, +gradle prepareTestRoot, +If you want to run elasticsearch from your IDE, the `gradle run` task, +supports a remote debugging option:, +, +---------------------------------------------------------------------------, +gradle run --debug-jvm, +---------------------------------------------------------------------------, +++ b/Vagrantfile, +export ZIP=/elasticsearch/distribution/zip/build/distributions, +export TAR=/elasticsearch/distribution/tar/build/distributions, +export RPM=/elasticsearch/distribution/rpm/build/distributions, +export DEB=/elasticsearch/distribution/deb/build/distributions, +++ b/TESTING.asciidoc, +gradle prepareTestRoot, +If you want to run elasticsearch from your IDE, the `gradle run` task, +supports a remote debugging option:, +, +---------------------------------------------------------------------------, +gradle run --debug-jvm, +---------------------------------------------------------------------------, +++ b/Vagrantfile, +export ZIP=/elasticsearch/distribution/zip/build/distributions, +export TAR=/elasticsearch/distribution/tar/build/distributions, +export RPM=/elasticsearch/distribution/rpm/build/distributions, +export DEB=/elasticsearch/distribution/deb/build/distributions, +++ b/build.gradle, +// we need to add the same --debug-jvm option as, +// the real RunTask has, so we can pass it through, +class Run extends DefaultTask {, +  boolean debug = false, +, +  @org.gradle.api.internal.tasks.options.Option(, +        option = "debug-jvm",, +        description = "Enable debugging configuration, to allow attaching a debugger to elasticsearch.", +  ), +  public void setDebug(boolean enabled) {, +    project.project(':distribution').run.clusterConfig.debug = enabled, +  } , +}, +task run(type: Run) {, +  impliesSubProjects = true, +++ b/TESTING.asciidoc, +gradle prepareTestRoot, +If you want to run elasticsearch from your IDE, the `gradle run` task, +supports a remote debugging option:, +, +---------------------------------------------------------------------------, +gradle run --debug-jvm, +---------------------------------------------------------------------------, +++ b/Vagrantfile, +export ZIP=/elasticsearch/distribution/zip/build/distributions, +export TAR=/elasticsearch/distribution/tar/build/distributions, +export RPM=/elasticsearch/distribution/rpm/build/distributions, +export DEB=/elasticsearch/distribution/deb/build/distributions, +++ b/build.gradle, +// we need to add the same --debug-jvm option as, +// the real RunTask has, so we can pass it through, +class Run extends DefaultTask {, +  boolean debug = false, +, +  @org.gradle.api.internal.tasks.options.Option(, +        option = "debug-jvm",, +        description = "Enable debugging configuration, to allow attaching a debugger to elasticsearch.", +  ), +  public void setDebug(boolean enabled) {, +    project.project(':distribution').run.clusterConfig.debug = enabled, +  } , +}, +task run(type: Run) {, +  impliesSubProjects = true, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingTask.groovy, +import groovy.xml.NamespaceBuilderSupport, +import org.apache.tools.ant.BuildException, +import org.apache.tools.ant.DefaultLogger, +            haltOnFailure: true, // we want to capture when a build failed, but will decide whether to rethrow later, +        DefaultLogger listener = null, +        ByteArrayOutputStream antLoggingBuffer = null, +        if (logger.isInfoEnabled() == false) {, +            // in info logging, ant already outputs info level, so we see everything, +            // but on errors or when debugging, we want to see info level messages, +            // because junit4 emits jvm output with ant logging, +            if (testLoggingConfig.outputMode == TestLoggingConfiguration.OutputMode.ALWAYS) {, +                // we want all output, so just stream directly, +                listener = new DefaultLogger(, +                        errorPrintStream: System.err,, +                        outputPrintStream: System.out,, +                        messageOutputLevel: org.apache.tools.ant.Project.MSG_INFO), +            } else {, +                // we want to buffer the info, and emit it if the test fails, +                antLoggingBuffer = new ByteArrayOutputStream(), +                PrintStream stream = new PrintStream(antLoggingBuffer, true, "UTF-8")]