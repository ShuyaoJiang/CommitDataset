[+++ b/marvel/pom.xml, +        <dependency>, +            <groupId>com.squareup.okhttp</groupId>, +            <artifactId>mockwebserver</artifactId>, +            <version>2.3.0</version>, +            <scope>test</scope>, +        </dependency>, +, +++ b/marvel/pom.xml, +        <dependency>, +            <groupId>com.squareup.okhttp</groupId>, +            <artifactId>mockwebserver</artifactId>, +            <version>2.3.0</version>, +            <scope>test</scope>, +        </dependency>, +, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/http/HttpExporter.java, +    public static final String CONNECTION_KEEP_ALIVE_SETTING = "connection.keep_alive";, +    boolean keepAlive;, +        keepAlive = config.settings().getAsBoolean(CONNECTION_KEEP_ALIVE_SETTING, true);, +        if (keepAlive) {, +    }, +++ b/marvel/pom.xml, +        <dependency>, +            <groupId>com.squareup.okhttp</groupId>, +            <artifactId>mockwebserver</artifactId>, +            <version>2.3.0</version>, +            <scope>test</scope>, +        </dependency>, +, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/http/HttpExporter.java, +    public static final String CONNECTION_KEEP_ALIVE_SETTING = "connection.keep_alive";, +    boolean keepAlive;, +        keepAlive = config.settings().getAsBoolean(CONNECTION_KEEP_ALIVE_SETTING, true);, +        if (keepAlive) {, +    }, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/exporter/http/HttpExporterTests.java, +import com.squareup.okhttp.mockwebserver.MockResponse;, +import com.squareup.okhttp.mockwebserver.MockWebServer;, +import com.squareup.okhttp.mockwebserver.QueueDispatcher;, +import com.squareup.okhttp.mockwebserver.RecordedRequest;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.marvel.agent.exporter.MarvelTemplateUtils;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.elasticsearch.test.ESIntegTestCase.Scope;, +import java.io.IOException;, +import java.net.BindException;, +import java.util.Map;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +@ESIntegTestCase.ClusterScope(scope = Scope.TEST, numDataNodes = 0, numClientNodes = 0, transportClientRatio = 0.0), +    private int webPort;, +    private MockWebServer webServer;, +    public void startWebservice() throws Exception {, +        for (webPort = 9250; webPort < 9300; webPort++) {, +            try {, +                webServer = new MockWebServer();, +                QueueDispatcher dispatcher = new QueueDispatcher();, +                dispatcher.setFailFast(true);, +                webServer.setDispatcher(dispatcher);, +                webServer.start(webPort);, +                return;, +            } catch (BindException be) {, +                logger.warn("port [{}] was already in use trying next port", webPort);, +            }, +        }, +        throw new ElasticsearchException("unable to find open port between 9200 and 9300");, +        webServer.shutdown();, +    public void testExport() throws Exception {, +        enqueueGetClusterVersionResponse(Version.CURRENT);, +        enqueueResponse(404, "marvel template does not exist");, +        enqueueResponse(201, "marvel template created");, +        enqueueResponse(200, "successful bulk request ");, +                .put(MarvelSettings.INTERVAL, "-1"), +                .put("marvel.agent.exporters._http.host", webServer.getHostName() + ":" + webServer.getPort()), +                .put("marvel.agent.exporters._http.connection.keep_alive", false);, +, +        assertThat(webServer.getRequestCount(), greaterThanOrEqualTo(4));, +        RecordedRequest recordedRequest = webServer.takeRequest();, +        assertThat(recordedRequest.getMethod(), equalTo("GET"));, +        assertThat(recordedRequest.getPath(), equalTo("/"));, +        recordedRequest = webServer.takeRequest();, +        assertThat(recordedRequest.getMethod(), equalTo("GET"));, +        assertThat(recordedRequest.getPath(), equalTo("/_template/marvel"));, +        recordedRequest = webServer.takeRequest();, +        assertThat(recordedRequest.getMethod(), equalTo("PUT"));, +        assertThat(recordedRequest.getPath(), equalTo("/_template/marvel"));, +        assertThat(recordedRequest.getBody().readByteArray(), equalTo(MarvelTemplateUtils.loadDefaultTemplate()));, +        recordedRequest = webServer.takeRequest();, +        assertThat(recordedRequest.getMethod(), equalTo("POST"));, +        assertThat(recordedRequest.getPath(), equalTo("/_bulk"));, +                .put(MarvelSettings.INTERVAL, "-1"), +                .put("marvel.agent.exporters._http.host", webServer.getHostName() + ":" + webServer.getPort()), +                .put("marvel.agent.exporters._http.connection.keep_alive", false);, +, +        logger.info("--> starting node");, +]