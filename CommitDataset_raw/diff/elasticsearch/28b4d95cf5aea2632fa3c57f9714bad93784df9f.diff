[+++ b/core/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.search.NormsFieldExistsQuery;, +            if (omitNorms()) {, +            } else {, +                return new NormsFieldExistsQuery(name());, +            if (fieldType().omitNorms()) {, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.search.NormsFieldExistsQuery;, +            if (omitNorms()) {, +            } else {, +                return new NormsFieldExistsQuery(name());, +            if (fieldType().omitNorms()) {, +    }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/FieldNamesFieldMapperTests.java, +import java.util.Collections;, +        assertFieldNames(Collections.emptySet(), doc);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.search.NormsFieldExistsQuery;, +            if (omitNorms()) {, +            } else {, +                return new NormsFieldExistsQuery(name());, +            if (fieldType().omitNorms()) {, +    }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/FieldNamesFieldMapperTests.java, +import java.util.Collections;, +        assertFieldNames(Collections.emptySet(), doc);, +++ b/core/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java, +import org.apache.lucene.search.NormsFieldExistsQuery;, +            } else if (context.getQueryShardContext().getMapperService().fullName(field).omitNorms() == false) {, +                assertThat(constantScoreQuery.getQuery(), instanceOf(NormsFieldExistsQuery.class));, +                NormsFieldExistsQuery normsExistsQuery = (NormsFieldExistsQuery) constantScoreQuery.getQuery();, +                assertEquals(field, normsExistsQuery.getField());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.apache.lucene.search.NormsFieldExistsQuery;, +            if (omitNorms()) {, +            } else {, +                return new NormsFieldExistsQuery(name());, +            if (fieldType().omitNorms()) {, +    }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/FieldNamesFieldMapperTests.java, +import java.util.Collections;, +        assertFieldNames(Collections.emptySet(), doc);, +++ b/core/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java, +import org.apache.lucene.search.NormsFieldExistsQuery;, +            } else if (context.getQueryShardContext().getMapperService().fullName(field).omitNorms() == false) {, +                assertThat(constantScoreQuery.getQuery(), instanceOf(NormsFieldExistsQuery.class));, +                NormsFieldExistsQuery normsExistsQuery = (NormsFieldExistsQuery) constantScoreQuery.getQuery();, +                assertEquals(field, normsExistsQuery.getField());, +++ b/core/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java, +import org.apache.lucene.search.NormsFieldExistsQuery;, +                } else if (context.mapperService().getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_1_0), +                        && context.mapperService().fullName(queryBuilder.fieldName()).omitNorms() == false) {, +                    expectedQuery = new ConstantScoreQuery(new NormsFieldExistsQuery(queryBuilder.fieldName()));]