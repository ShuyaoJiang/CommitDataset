[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import java.util.Objects;, +, +import static org.elasticsearch.painless.Definition.BOOLEAN_OBJ_TYPE;, +import static org.elasticsearch.painless.Definition.BOOLEAN_TYPE;, +import static org.elasticsearch.painless.Definition.BYTE_OBJ_TYPE;, +import static org.elasticsearch.painless.Definition.BYTE_TYPE;, +import static org.elasticsearch.painless.Definition.CHAR_OBJ_TYPE;, +import static org.elasticsearch.painless.Definition.CHAR_TYPE;, +import static org.elasticsearch.painless.Definition.DEF_TYPE;, +import static org.elasticsearch.painless.Definition.DOUBLE_OBJ_TYPE;, +import static org.elasticsearch.painless.Definition.DOUBLE_TYPE;, +import static org.elasticsearch.painless.Definition.FLOAT_OBJ_TYPE;, +import static org.elasticsearch.painless.Definition.FLOAT_TYPE;, +import static org.elasticsearch.painless.Definition.INT_OBJ_TYPE;, +import static org.elasticsearch.painless.Definition.INT_TYPE;, +import static org.elasticsearch.painless.Definition.LONG_OBJ_TYPE;, +import static org.elasticsearch.painless.Definition.LONG_TYPE;, +import static org.elasticsearch.painless.Definition.NUMBER_TYPE;, +import static org.elasticsearch.painless.Definition.OBJECT_TYPE;, +import static org.elasticsearch.painless.Definition.SHORT_OBJ_TYPE;, +import static org.elasticsearch.painless.Definition.SHORT_TYPE;, +import static org.elasticsearch.painless.Definition.STRING_TYPE;, +, +        Objects.requireNonNull(actual);, +        Objects.requireNonNull(expected);, +, +                        return new Cast(BOOLEAN_OBJ_TYPE, DEF_TYPE, explicit, null, null, BOOLEAN_TYPE, null);, +                        if (OBJECT_TYPE.equals(expected) && internal), +                            return new Cast(BOOLEAN_OBJ_TYPE, OBJECT_TYPE, explicit, null, null, BOOLEAN_TYPE, null);, +                            return new Cast(BOOLEAN_TYPE, BOOLEAN_TYPE, explicit, null, null, null, BOOLEAN_TYPE);, +                        return new Cast(BYTE_TYPE, expected, explicit);, +                            return new Cast(BYTE_TYPE, CHAR_TYPE, true);, +                        return new Cast(BYTE_OBJ_TYPE, DEF_TYPE, explicit, null, null, BYTE_TYPE, null);, +                        if (OBJECT_TYPE.equals(expected) && internal), +                            return new Cast(BYTE_OBJ_TYPE, OBJECT_TYPE, explicit, null, null, BYTE_TYPE, null);, +                        if (internal), +                            return new Cast(BYTE_OBJ_TYPE, NUMBER_TYPE, explicit, null, null, BYTE_TYPE, null);, +, +                        break;, +                            return new Cast(BYTE_TYPE, BYTE_TYPE, explicit, null, null, null, BYTE_TYPE);, +                            return new Cast(BYTE_TYPE, SHORT_TYPE, explicit, null, null, null, SHORT_TYPE);, +                            return new Cast(BYTE_TYPE, INT_TYPE, explicit, null, null, null, INT_TYPE);, +                            return new Cast(BYTE_TYPE, LONG_TYPE, explicit, null, null, null, LONG_TYPE);, +                            return new Cast(BYTE_TYPE, FLOAT_TYPE, explicit, null, null, null, FLOAT_TYPE);, +                            return new Cast(BYTE_TYPE, DOUBLE_TYPE, explicit, null, null, null, DOUBLE_TYPE);, +                            return new Cast(BYTE_TYPE, CHAR_TYPE, true, null, null, null, CHAR_TYPE);, +                        return new Cast(SHORT_TYPE, expected, explicit);, +                            return new Cast(SHORT_TYPE, expected, true);, +                        return new Cast(SHORT_OBJ_TYPE, DEF_TYPE, explicit, null, null, SHORT_TYPE, null);, +                        if (OBJECT_TYPE.equals(expected) && internal), +                            return new Cast(SHORT_OBJ_TYPE, OBJECT_TYPE, explicit, null, null, SHORT_TYPE, null);, +                        if (internal), +                            return new Cast(SHORT_OBJ_TYPE, NUMBER_TYPE, explicit, null, null, SHORT_TYPE, null);, +, +                        break;, +                            return new Cast(SHORT_TYPE, SHORT_TYPE, explicit, null, null, null, SHORT_TYPE);, +                            return new Cast(SHORT_TYPE, INT_TYPE, explicit, null, null, null, INT_TYPE);, +                            return new Cast(SHORT_TYPE, LONG_TYPE, explicit, null, null, null, LONG_TYPE);, +                            return new Cast(SHORT_TYPE, FLOAT_TYPE, explicit, null, null, null, FLOAT_TYPE);, +                            return new Cast(SHORT_TYPE, DOUBLE_TYPE, explicit, null, null, null, DOUBLE_TYPE);, +                            return new Cast(SHORT_TYPE, BYTE_TYPE, true, null, null, null, BYTE_TYPE);, +                            return new Cast(SHORT_TYPE, CHAR_TYPE, true, null, null, null, CHAR_TYPE);, +                        return new Cast(CHAR_TYPE, expected, explicit);, +                        return new Cast(CHAR_OBJ_TYPE, DEF_TYPE, explicit, null, null, CHAR_TYPE, null);, +                        if (OBJECT_TYPE.equals(expected) && internal), +                            return new Cast(CHAR_OBJ_TYPE, OBJECT_TYPE, explicit, null, null, CHAR_TYPE, null);, +                        if (internal), +                            return new Cast(CHAR_OBJ_TYPE, NUMBER_TYPE, explicit, null, null, CHAR_TYPE, null);, +, +                        break;, +                            return new Cast(CHAR_TYPE, CHAR_TYPE, explicit, null, null, null, CHAR_TYPE);, +                        return new Cast(CHAR_TYPE, STRING_TYPE, explicit);, +                            return new Cast(CHAR_TYPE, INT_TYPE, explicit, null, null, null, INT_TYPE);, +                            return new Cast(CHAR_TYPE, LONG_TYPE, explicit, null, null, null, LONG_TYPE);, +                            return new Cast(CHAR_TYPE, FLOAT_TYPE, explicit, null, null, null, FLOAT_TYPE);, +                            return new Cast(CHAR_TYPE, DOUBLE_TYPE, explicit, null, null, null, DOUBLE_TYPE);, +                            return new Cast(CHAR_TYPE, BYTE_TYPE, true, null, null, null, BYTE_TYPE);, +                            return new Cast(CHAR_TYPE, SHORT_TYPE, true, null, null, null, SHORT_TYPE);, +                        return new Cast(INT_TYPE, expected, explicit);, +                            return new Cast(INT_TYPE, expected, true);, +                        return new Cast(INT_OBJ_TYPE, DEF_TYPE, explicit, null, null, INT_TYPE, null);, +                        if (OBJECT_TYPE.equals(expected) && internal), +                            return new Cast(INT_OBJ_TYPE, OBJECT_TYPE, explicit, null, null, INT_TYPE, null);, +                        if (internal), +                            return new Cast(INT_OBJ_TYPE, NUMBER_TYPE, explicit, null, null, INT_TYPE, null);, +, +                        break;, +                            return new Cast(INT_TYPE, INT_TYPE, explicit, null, null, null, INT_TYPE);, +                            return new Cast(INT_TYPE, LONG_TYPE, explicit, null, null, null, LONG_TYPE);, +                            return new Cast(INT_TYPE, FLOAT_TYPE, explicit, null, null, null, FLOAT_TYPE);, +                            return new Cast(INT_TYPE, DOUBLE_TYPE, explicit, null, null, null, DOUBLE_TYPE);, +                            return new Cast(INT_TYPE, BYTE_TYPE, true, null, null, null, BYTE_TYPE);, +                            return new Cast(INT_TYPE, SHORT_TYPE, true, null, null, null, SHORT_TYPE);, +                            return new Cast(INT_TYPE, CHAR_TYPE, true, null, null, null, CHAR_TYPE);, +                        return new Cast(LONG_TYPE, expected, explicit);, +                        return new Cast(LONG_TYPE, DEF_TYPE, explicit, null, null, LONG_TYPE, null);, +                        if (OBJECT_TYPE.equals(expected) && internal), +                            return new Cast(LONG_TYPE, actual, explicit, null, null, LONG_TYPE, null);, +                        if (internal)]