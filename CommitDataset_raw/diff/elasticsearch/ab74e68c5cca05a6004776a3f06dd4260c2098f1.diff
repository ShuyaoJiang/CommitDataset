[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        //      22 was CreateFailedEngineException, +        // 54 was DocumentAlreadyExistsException, which is superseded by VersionConflictEngineException, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        //      22 was CreateFailedEngineException, +        // 54 was DocumentAlreadyExistsException, which is superseded by VersionConflictEngineException, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +, +                    if (t instanceof VersionConflictEngineException) {, +                    final Engine.Index operation = indexShard.prepareIndex(sourceToParse, indexRequest.version(), indexRequest.versionType(), Engine.Operation.Origin.REPLICA);, +                    indexShard.index(operation);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        //      22 was CreateFailedEngineException, +        // 54 was DocumentAlreadyExistsException, which is superseded by VersionConflictEngineException, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +, +                    if (t instanceof VersionConflictEngineException) {, +                    final Engine.Index operation = indexShard.prepareIndex(sourceToParse, indexRequest.version(), indexRequest.versionType(), Engine.Operation.Origin.REPLICA);, +                    indexShard.index(operation);, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, + *, + *, + *, +, +        if (opType() == OpType.CREATE) {, +            if (versionType != VersionType.INTERNAL || version != Versions.MATCH_DELETED) {, +                validationException = addValidationError("create operations do not support versioning. use index instead", validationException);, +                return validationException;, +            }, +        }, +, +     *, +        if (opType == OpType.CREATE) {, +            version(Versions.MATCH_DELETED);, +            versionType(VersionType.INTERNAL);, +        }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        //      22 was CreateFailedEngineException, +        // 54 was DocumentAlreadyExistsException, which is superseded by VersionConflictEngineException, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +, +                    if (t instanceof VersionConflictEngineException) {, +                    final Engine.Index operation = indexShard.prepareIndex(sourceToParse, indexRequest.version(), indexRequest.versionType(), Engine.Operation.Origin.REPLICA);, +                    indexShard.index(operation);, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, + *, + *, + *, +, +        if (opType() == OpType.CREATE) {, +            if (versionType != VersionType.INTERNAL || version != Versions.MATCH_DELETED) {, +                validationException = addValidationError("create operations do not support versioning. use index instead", validationException);, +                return validationException;, +            }, +        }, +, +     *, +        if (opType == OpType.CREATE) {, +            version(Versions.MATCH_DELETED);, +            versionType(VersionType.INTERNAL);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, + *, +, +        final Engine.Index operation = indexShard.prepareIndex(sourceToParse, request.version(), request.versionType(), Engine.Operation.Origin.REPLICA);, +        indexShard.index(operation);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        //      22 was CreateFailedEngineException, +        // 54 was DocumentAlreadyExistsException, which is superseded by VersionConflictEngineException, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +, +                    if (t instanceof VersionConflictEngineException) {, +                    final Engine.Index operation = indexShard.prepareIndex(sourceToParse, indexRequest.version(), indexRequest.versionType(), Engine.Operation.Origin.REPLICA);, +                    indexShard.index(operation);, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, + *, + *, + *, +, +        if (opType() == OpType.CREATE) {, +            if (versionType != VersionType.INTERNAL || version != Versions.MATCH_DELETED) {, +                validationException = addValidationError("create operations do not support versioning. use index instead", validationException);, +                return validationException;, +            }, +        }, +, +     *, +        if (opType == OpType.CREATE) {, +            version(Versions.MATCH_DELETED);, +            versionType(VersionType.INTERNAL);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, + *, +, +        final Engine.Index operation = indexShard.prepareIndex(sourceToParse, request.version(), request.versionType(), Engine.Operation.Origin.REPLICA);, +        indexShard.index(operation);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    private final Engine.Index prepareIndexOperationOnPrimary(BulkShardRequest shardRequest, IndexRequest request, IndexShard indexShard) {, +, +        Engine.Index operation = prepareIndexOperationOnPrimary(shardRequest, request, indexShard);]