[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +    public IndexRequest(String index, String type, String id) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +    public IndexRequest(String index, String type, String id) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +    private byte[] cachedData;, +    @Override public int contentLength() {, +        return request.getContent().readableBytes();, +, +    @Override public byte[] contentByteArray() {, +        if (request.getContent().hasArray()) {, +            return request.getContent().array();, +        }, +        if (cachedData != null) {, +            return cachedData;, +        }, +        cachedData = new byte[request.getContent().readableBytes()];, +        request.getContent().getBytes(request.getContent().readerIndex(), cachedData);, +        return cachedData;, +    }, +, +    @Override public int contentByteArrayOffset() {, +        if (request.getContent().hasArray()) {, +            return request.getContent().arrayOffset();, +        }, +        return 0;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +    public IndexRequest(String index, String type, String id) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +    private byte[] cachedData;, +    @Override public int contentLength() {, +        return request.getContent().readableBytes();, +, +    @Override public byte[] contentByteArray() {, +        if (request.getContent().hasArray()) {, +            return request.getContent().array();, +        }, +        if (cachedData != null) {, +            return cachedData;, +        }, +        cachedData = new byte[request.getContent().readableBytes()];, +        request.getContent().getBytes(request.getContent().readerIndex(), cachedData);, +        return cachedData;, +    }, +, +    @Override public int contentByteArrayOffset() {, +        if (request.getContent().hasArray()) {, +            return request.getContent().arrayOffset();, +        }, +        return 0;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/RestRequest.java, +    byte[] contentByteArray();, +, +    int contentByteArrayOffset();, +, +    int contentLength();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +    public IndexRequest(String index, String type, String id) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +    private byte[] cachedData;, +    @Override public int contentLength() {, +        return request.getContent().readableBytes();, +, +    @Override public byte[] contentByteArray() {, +        if (request.getContent().hasArray()) {, +            return request.getContent().array();, +        }, +        if (cachedData != null) {, +            return cachedData;, +        }, +        cachedData = new byte[request.getContent().readableBytes()];, +        request.getContent().getBytes(request.getContent().readerIndex(), cachedData);, +        return cachedData;, +    }, +, +    @Override public int contentByteArrayOffset() {, +        if (request.getContent().hasArray()) {, +            return request.getContent().arrayOffset();, +        }, +        return 0;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/RestRequest.java, +    byte[] contentByteArray();, +, +    int contentByteArrayOffset();, +, +    int contentLength();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/action/admin/indices/alias/RestIndicesAliasesAction.java, +            XContentParser parser = XContentFactory.xContent(request.contentByteArray(), request.contentByteArrayOffset(), request.contentLength()), +                    .createParser(request.contentByteArray(), request.contentByteArrayOffset(), request.contentLength());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +    public IndexRequest(String index, String type, String id) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +    private byte[] cachedData;, +    @Override public int contentLength() {, +        return request.getContent().readableBytes();, +, +    @Override public byte[] contentByteArray() {, +        if (request.getContent().hasArray()) {, +            return request.getContent().array();, +        }]