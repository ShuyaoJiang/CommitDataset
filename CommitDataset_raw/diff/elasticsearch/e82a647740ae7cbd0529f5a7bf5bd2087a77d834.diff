[+++ b/server/src/test/java/org/elasticsearch/cluster/routing/allocation/BalanceConfigurationTests.java, +import java.util.stream.Collectors;, +, +import static org.elasticsearch.cluster.routing.ShardRoutingState.UNASSIGNED;, +        final float balanceThreshold = 1.0f;, +        settings.put(BalancedShardsAllocator.THRESHOLD_SETTING.getKey(), balanceThreshold);, +        assertReplicaBalance(clusterState.getRoutingNodes(), numberOfNodes, numberOfIndices,, +            numberOfReplicas, numberOfShards, balanceThreshold);, +        assertReplicaBalance(clusterState.getRoutingNodes(), numberOfNodes + 1,, +            numberOfIndices, numberOfReplicas, numberOfShards, balanceThreshold);, +        assertReplicaBalance(clusterState.getRoutingNodes(),, +            numberOfNodes + 1 - (numberOfNodes + 1) / 2, numberOfIndices, numberOfReplicas, numberOfShards, balanceThreshold);, +    private void assertReplicaBalance(RoutingNodes nodes, int numberOfNodes, int numberOfIndices, int numberOfReplicas,, +        final int unassigned = nodes.unassigned().size();, +, +        if (unassigned > 0) {, +            // Ensure that if there any unassigned shards, all of their replicas are unassigned as well, +            // (i.e. unassigned count is always [replicas] + 1 for each shard unassigned shardId), +            nodes.shardsWithState(UNASSIGNED).stream().collect(, +                Collectors.toMap(, +                    ShardRouting::shardId,, +                    s -> 1,, +                    (a, b) -> a + b, +            )).values().forEach(, +                count -> assertEquals(numberOfReplicas + 1, count.longValue()), +            );, +        }, +        assertEquals(numberOfNodes, nodes.size());, +, +        final int numShards = numberOfIndices * numberOfShards * (numberOfReplicas + 1) - unassigned;]