[+++ b/modules/parent-join/src/main/java/org/elasticsearch/join/ParentJoinPlugin.java, +import org.elasticsearch.index.mapper.Mapper;, +import org.elasticsearch.join.fetch.ParentJoinFieldSubFetchPhase;, +import org.elasticsearch.join.mapper.ParentJoinFieldMapper;, +import org.elasticsearch.plugins.MapperPlugin;, +import org.elasticsearch.search.fetch.FetchSubPhase;, +import java.util.Map;, +public class ParentJoinPlugin extends Plugin implements SearchPlugin, MapperPlugin {, +    @Override, +    public Map<String, Mapper.TypeParser> getMappers() {, +        return Collections.singletonMap(ParentJoinFieldMapper.CONTENT_TYPE, new ParentJoinFieldMapper.TypeParser());, +    }, +    @Override, +    public List<FetchSubPhase> getFetchSubPhases(FetchPhaseConstructionContext context) {, +        return Collections.singletonList(new ParentJoinFieldSubFetchPhase());, +    }, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/ParentJoinPlugin.java, +import org.elasticsearch.index.mapper.Mapper;, +import org.elasticsearch.join.fetch.ParentJoinFieldSubFetchPhase;, +import org.elasticsearch.join.mapper.ParentJoinFieldMapper;, +import org.elasticsearch.plugins.MapperPlugin;, +import org.elasticsearch.search.fetch.FetchSubPhase;, +import java.util.Map;, +public class ParentJoinPlugin extends Plugin implements SearchPlugin, MapperPlugin {, +    @Override, +    public Map<String, Mapper.TypeParser> getMappers() {, +        return Collections.singletonMap(ParentJoinFieldMapper.CONTENT_TYPE, new ParentJoinFieldMapper.TypeParser());, +    }, +    @Override, +    public List<FetchSubPhase> getFetchSubPhases(FetchPhaseConstructionContext context) {, +        return Collections.singletonList(new ParentJoinFieldSubFetchPhase());, +    }, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/fetch/ParentJoinFieldSubFetchPhase.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.join.fetch;, +, +import org.apache.lucene.index.LeafReader;, +import org.apache.lucene.index.SortedDocValues;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.Version;, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.mapper.FieldMapper;, +import org.elasticsearch.join.mapper.ParentJoinFieldMapper;, +import org.elasticsearch.search.SearchHitField;, +import org.elasticsearch.search.fetch.FetchSubPhase;, +import org.elasticsearch.search.internal.SearchContext;, +, +import java.io.IOException;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +/**, + * A sub fetch phase that retrieves the join name and the parent id for each document containing, + * a {@link ParentJoinFieldMapper} field., + */, +public final class ParentJoinFieldSubFetchPhase implements FetchSubPhase {, +    @Override, +    public void hitExecute(SearchContext context, HitContext hitContext) {, +        if (context.storedFieldsContext() != null && context.storedFieldsContext().fetchFields() == false) {, +            return;, +        }, +        if (context.mapperService().getIndexSettings().getIndexVersionCreated().before(Version.V_6_0_0_alpha2)) {, +            return;, +        }, +        DocumentMapper docMapper = context.mapperService().documentMapper(hitContext.hit().getType());, +        Tuple<String, String> joinField = null;, +        Tuple<String, String> parentField = null;, +        for (FieldMapper fieldMapper : docMapper.mappers()) {, +            if (fieldMapper instanceof ParentJoinFieldMapper) {, +                String joinName = getSortedDocValue(fieldMapper.name(), hitContext.reader(), hitContext.docId());, +                if (joinName != null) {, +                    ParentJoinFieldMapper joinFieldMapper = (ParentJoinFieldMapper) fieldMapper;, +                    joinField = new Tuple<>(fieldMapper.name(), joinName);, +                    // we retrieve the parent id only for children., +                    FieldMapper parentMapper = joinFieldMapper.getParentIdFieldMapper(joinName, false);, +                    if (parentMapper != null) {, +                        String parent = getSortedDocValue(parentMapper.name(), hitContext.reader(), hitContext.docId());, +                        parentField = new Tuple<>(parentMapper.name(), parent);, +                    }]