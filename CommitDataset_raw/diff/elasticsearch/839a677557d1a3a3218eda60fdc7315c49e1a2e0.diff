[+++ b/plugins/repository-s3/build.gradle, +  include '**/S3BlobStoreRepositoryTests.class', +  exclude '**/S3BlobStoreRepositoryTests.class', +++ b/plugins/repository-s3/build.gradle, +  include '**/S3BlobStoreRepositoryTests.class', +  exclude '**/S3BlobStoreRepositoryTests.class', +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3ClientSettings.java, +import org.elasticsearch.cluster.metadata.RepositoryMetaData;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Set;, +, +    static S3ClientSettings getClientSettings(final Settings settings, final String clientName) {, +        return getClientSettings(settings, clientName, credentials);, +    }, +, +    static S3ClientSettings getClientSettings(final Settings settings, final String clientName, final AWSCredentials credentials) {, +                    Math.toIntExact(getConfigValue(settings, clientName, READ_TIMEOUT_SETTING).millis()),, +    static S3ClientSettings getClientSettings(final RepositoryMetaData metadata, final AWSCredentials credentials) {, +        final Settings.Builder builder = Settings.builder();, +        for (final String key : metadata.settings().keySet()) {, +            builder.put(PREFIX + "provided" + "." + key, metadata.settings().get(key));, +        }, +        return getClientSettings(builder.build(), "provided", credentials);, +    }, +, +++ b/plugins/repository-s3/build.gradle, +  include '**/S3BlobStoreRepositoryTests.class', +  exclude '**/S3BlobStoreRepositoryTests.class', +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3ClientSettings.java, +import org.elasticsearch.cluster.metadata.RepositoryMetaData;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Set;, +, +    static S3ClientSettings getClientSettings(final Settings settings, final String clientName) {, +        return getClientSettings(settings, clientName, credentials);, +    }, +, +    static S3ClientSettings getClientSettings(final Settings settings, final String clientName, final AWSCredentials credentials) {, +                    Math.toIntExact(getConfigValue(settings, clientName, READ_TIMEOUT_SETTING).millis()),, +    static S3ClientSettings getClientSettings(final RepositoryMetaData metadata, final AWSCredentials credentials) {, +        final Settings.Builder builder = Settings.builder();, +        for (final String key : metadata.settings().keySet()) {, +            builder.put(PREFIX + "provided" + "." + key, metadata.settings().get(key));, +        }, +        return getClientSettings(builder.build(), "provided", credentials);, +    }, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java, +    private final AmazonS3Reference reference;, +, +, +        if (CLIENT_NAME.exists(metadata.settings()) && S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {, +            logger.warn(, +                    "ignoring use of named client [{}] for repository [{}] as insecure credentials were specified",, +                    clientName,, +                    metadata.name());, +, +        if (S3ClientSettings.checkDeprecatedCredentials(metadata.settings())) {, +            // provided repository settings, +            deprecationLogger.deprecated("Using s3 access/secret key from repository settings. Instead ", +                    + "store these in named clients and the elasticsearch keystore for secure settings.");, +            final BasicAWSCredentials insecureCredentials = S3ClientSettings.loadDeprecatedCredentials(metadata.settings());, +            final S3ClientSettings s3ClientSettings = S3ClientSettings.getClientSettings(metadata, insecureCredentials);, +            this.reference = new AmazonS3Reference(service.buildClient(s3ClientSettings));, +        } else {, +            reference = null;, +        }, +, +        logger.debug(, +                "using bucket [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], cannedACL [{}], storageClass [{}]",, +                bucket,, +                chunkSize,, +                serverSideEncryption,, +                bufferSize,, +                cannedACL,, +                storageClass);, +        if (reference != null) {, +            assert S3ClientSettings.checkDeprecatedCredentials(metadata.settings()) : metadata.name();, +            return new S3BlobStore(settings, service, clientName, bucket, serverSideEncryption, bufferSize, cannedACL, storageClass) {, +                @Override, +                public AmazonS3Reference clientReference() {, +                    if (reference.tryIncRef()) {, +                        return reference;, +                    } else {, +                        throw new IllegalStateException("S3 client is closed");, +                    }, +                }, +            };, +        } else {, +    }, +    @Override, +    protected void doClose() {, +        if (reference != null) {, +            assert S3ClientSettings.checkDeprecatedCredentials(metadata.settings()) : metadata.name();]