[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoresResponse.java, +import org.elasticsearch.index.shard.ShardStateMetaData;, +        private long legacyVersion;, +        public StoreStatus(DiscoveryNode node, long legacyVersion, String allocationId, AllocationStatus allocationStatus, Throwable storeException) {, +            this.legacyVersion = legacyVersion;, +         * Version of the store for pre-3.0 shards that have not yet been active, +        public long getLegacyVersion() {, +            return legacyVersion;, +            legacyVersion = in.readLong();, +            out.writeLong(legacyVersion);, +            if (legacyVersion != ShardStateMetaData.NO_VERSION) {, +                builder.field(Fields.LEGACY_VERSION, legacyVersion);, +            }, +            if (allocationId != null) {, +            }, +            }, +            if (allocationId != null && other.allocationId == null) {, +                return -1;, +            } else if (allocationId == null && other.allocationId != null) {, +                return 1;, +            } else if (allocationId == null && other.allocationId == null) {, +                int compare = Long.compare(other.legacyVersion, legacyVersion);, +            } else {, +                int compare = Integer.compare(allocationStatus.id, other.allocationStatus.id);, +                if (compare == 0) {, +                    return allocationId.compareTo(other.allocationId);, +                }, +                return compare;, +        static final XContentBuilderString LEGACY_VERSION = new XContentBuilderString("legacy_version");, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoresResponse.java, +import org.elasticsearch.index.shard.ShardStateMetaData;, +        private long legacyVersion;, +        public StoreStatus(DiscoveryNode node, long legacyVersion, String allocationId, AllocationStatus allocationStatus, Throwable storeException) {, +            this.legacyVersion = legacyVersion;, +         * Version of the store for pre-3.0 shards that have not yet been active, +        public long getLegacyVersion() {, +            return legacyVersion;, +            legacyVersion = in.readLong();, +            out.writeLong(legacyVersion);, +            if (legacyVersion != ShardStateMetaData.NO_VERSION) {, +                builder.field(Fields.LEGACY_VERSION, legacyVersion);, +            }, +            if (allocationId != null) {, +            }, +            }, +            if (allocationId != null && other.allocationId == null) {, +                return -1;, +            } else if (allocationId == null && other.allocationId != null) {, +                return 1;, +            } else if (allocationId == null && other.allocationId == null) {, +                int compare = Long.compare(other.legacyVersion, legacyVersion);, +            } else {, +                int compare = Integer.compare(allocationStatus.id, other.allocationStatus.id);, +                if (compare == 0) {, +                    return allocationId.compareTo(other.allocationId);, +                }, +                return compare;, +        static final XContentBuilderString LEGACY_VERSION = new XContentBuilderString("legacy_version");, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +                            storeStatuses.add(new IndicesShardStoresResponse.StoreStatus(response.getNode(), response.legacyVersion(), response.allocationId(), allocationStatus, response.storeException()));, +                return response.storeException() != null || response.legacyVersion() != -1 || response.allocationId() != null;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoresResponse.java, +import org.elasticsearch.index.shard.ShardStateMetaData;, +        private long legacyVersion;, +        public StoreStatus(DiscoveryNode node, long legacyVersion, String allocationId, AllocationStatus allocationStatus, Throwable storeException) {, +            this.legacyVersion = legacyVersion;, +         * Version of the store for pre-3.0 shards that have not yet been active, +        public long getLegacyVersion() {, +            return legacyVersion;, +            legacyVersion = in.readLong();, +            out.writeLong(legacyVersion);, +            if (legacyVersion != ShardStateMetaData.NO_VERSION) {, +                builder.field(Fields.LEGACY_VERSION, legacyVersion);, +            }, +            if (allocationId != null) {, +            }, +            }, +            if (allocationId != null && other.allocationId == null) {, +                return -1;, +            } else if (allocationId == null && other.allocationId != null) {, +                return 1;, +            } else if (allocationId == null && other.allocationId == null) {, +                int compare = Long.compare(other.legacyVersion, legacyVersion);, +            } else {, +                int compare = Integer.compare(allocationStatus.id, other.allocationStatus.id);, +                if (compare == 0) {, +                    return allocationId.compareTo(other.allocationId);, +                }, +                return compare;, +        static final XContentBuilderString LEGACY_VERSION = new XContentBuilderString("legacy_version");, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +                            storeStatuses.add(new IndicesShardStoresResponse.StoreStatus(response.getNode(), response.legacyVersion(), response.allocationId(), allocationStatus, response.storeException()));, +                return response.storeException() != null || response.legacyVersion() != -1 || response.allocationId() != null;, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoresResponse.java, +import org.elasticsearch.index.shard.ShardStateMetaData;, +        private long legacyVersion;, +        public StoreStatus(DiscoveryNode node, long legacyVersion, String allocationId, AllocationStatus allocationStatus, Throwable storeException) {, +            this.legacyVersion = legacyVersion;, +         * Version of the store for pre-3.0 shards that have not yet been active]