[+++ b/.ci/java-versions.properties, +GRADLE_EXTRA_ARGS=-Dtests.bwc.refspec=elastic/index-lifecycle-6.x, +++ b/.ci/java-versions.properties, +GRADLE_EXTRA_ARGS=-Dtests.bwc.refspec=elastic/index-lifecycle-6.x, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +    /** Returns a closure of common configuration shared by unit and integration tests. */, +    static Closure commonTestConfig(Project project) {, +        return {, +        RandomizedTestingTask test = project.tasks.getByName('test'), +        test.configure(commonTestConfig(project)), +        test.configure {, +, +        // Add a method to create additional unit tests for a project, which will share the same, +        // randomized testing setup, but by default run no tests., +        project.extensions.add('additionalTest', { String name, Closure config ->, +            RandomizedTestingTask additionalTest = project.tasks.create(name, RandomizedTestingTask.class), +            additionalTest.classpath = test.classpath, +            additionalTest.testClassesDirs = test.testClassesDirs, +            additionalTest.configure(commonTestConfig(project)), +            additionalTest.configure(config), +            additionalTest.dependsOn(project.tasks.testClasses), +            project.check.dependsOn(additionalTest), +        });, +++ b/.ci/java-versions.properties, +GRADLE_EXTRA_ARGS=-Dtests.bwc.refspec=elastic/index-lifecycle-6.x, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +    /** Returns a closure of common configuration shared by unit and integration tests. */, +    static Closure commonTestConfig(Project project) {, +        return {, +        RandomizedTestingTask test = project.tasks.getByName('test'), +        test.configure(commonTestConfig(project)), +        test.configure {, +, +        // Add a method to create additional unit tests for a project, which will share the same, +        // randomized testing setup, but by default run no tests., +        project.extensions.add('additionalTest', { String name, Closure config ->, +            RandomizedTestingTask additionalTest = project.tasks.create(name, RandomizedTestingTask.class), +            additionalTest.classpath = test.classpath, +            additionalTest.testClassesDirs = test.testClassesDirs, +            additionalTest.configure(commonTestConfig(project)), +            additionalTest.configure(config), +            additionalTest.dependsOn(project.tasks.testClasses), +            project.check.dependsOn(additionalTest), +        });, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    Closure<Integer> minimumMasterNodes = { getNumNodes() > 1 ? getNumNodes() : -1 }, +++ b/.ci/java-versions.properties, +GRADLE_EXTRA_ARGS=-Dtests.bwc.refspec=elastic/index-lifecycle-6.x, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +    /** Returns a closure of common configuration shared by unit and integration tests. */, +    static Closure commonTestConfig(Project project) {, +        return {, +        RandomizedTestingTask test = project.tasks.getByName('test'), +        test.configure(commonTestConfig(project)), +        test.configure {, +, +        // Add a method to create additional unit tests for a project, which will share the same, +        // randomized testing setup, but by default run no tests., +        project.extensions.add('additionalTest', { String name, Closure config ->, +            RandomizedTestingTask additionalTest = project.tasks.create(name, RandomizedTestingTask.class), +            additionalTest.classpath = test.classpath, +            additionalTest.testClassesDirs = test.testClassesDirs, +            additionalTest.configure(commonTestConfig(project)), +            additionalTest.configure(config), +            additionalTest.dependsOn(project.tasks.testClasses), +            project.check.dependsOn(additionalTest), +        });, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    Closure<Integer> minimumMasterNodes = { getNumNodes() > 1 ? getNumNodes() : -1 }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            Object dependsOn = startTasks.empty ? startDependencies : startTasks.get(0), +            startTasks.add(configureNode(project, prefix, runner, dependsOn, node, config, distro, nodes.get(0))), +                              Configuration distribution, NodeInfo seedNode) {, +        setup = configureWriteConfigTask(taskName(prefix, node, 'configure'), project, setup, node, seedNode), +    static Task configureWriteConfigTask(String name, Project project, Task setup, NodeInfo node, NodeInfo seedNode) {, +            String unicastTransportUri = node.config.unicastTransportUri(seedNode, node, project.ant), +            if (unicastTransportUri != null) {, +                esConfig['discovery.zen.ping.unicast.hosts'] = "\"${unicastTransportUri}\"", +            }, +++ b/.ci/java-versions.properties, +GRADLE_EXTRA_ARGS=-Dtests.bwc.refspec=elastic/index-lifecycle-6.x, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +    /** Returns a closure of common configuration shared by unit and integration tests. */, +    static Closure commonTestConfig(Project project) {, +        return {, +        RandomizedTestingTask test = project.tasks.getByName('test'), +        test.configure(commonTestConfig(project)), +        test.configure {, +, +        // Add a method to create additional unit tests for a project, which will share the same, +        // randomized testing setup, but by default run no tests., +        project.extensions.add('additionalTest', { String name, Closure config ->, +            RandomizedTestingTask additionalTest = project.tasks.create(name, RandomizedTestingTask.class), +            additionalTest.classpath = test.classpath, +            additionalTest.testClassesDirs = test.testClassesDirs, +            additionalTest.configure(commonTestConfig(project)), +            additionalTest.configure(config), +            additionalTest.dependsOn(project.tasks.testClasses), +            project.check.dependsOn(additionalTest), +        });]