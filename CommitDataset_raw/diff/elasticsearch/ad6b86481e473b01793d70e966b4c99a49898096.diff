[+++ b/plugin/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +        messages.put(XPackPlugin.UPGRADE, new String[] {, +            "Upgrade API is disabled", +        });, +, +    /**, +     * Determine if Upgrade API should be enabled., +     * <p>, +     *  Upgrade API is not available in for all license types except {@link OperationMode#TRIAL}, +     *, +     * @return {@code true} as long as the license is valid. Otherwise, +     *         {@code false}., +     */, +    public boolean isUpgradeAllowed() {, +        // status is volatile, +        Status localStatus = status;, +        OperationMode operationMode = localStatus.mode;, +, +        boolean licensed = operationMode == OperationMode.BASIC || operationMode == OperationMode.STANDARD ||, +                operationMode == OperationMode.GOLD || operationMode == OperationMode.PLATINUM;, +, +        return licensed && localStatus.active;, +, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +        messages.put(XPackPlugin.UPGRADE, new String[] {, +            "Upgrade API is disabled", +        });, +, +    /**, +     * Determine if Upgrade API should be enabled., +     * <p>, +     *  Upgrade API is not available in for all license types except {@link OperationMode#TRIAL}, +     *, +     * @return {@code true} as long as the license is valid. Otherwise, +     *         {@code false}., +     */, +    public boolean isUpgradeAllowed() {, +        // status is volatile, +        Status localStatus = status;, +        OperationMode operationMode = localStatus.mode;, +, +        boolean licensed = operationMode == OperationMode.BASIC || operationMode == OperationMode.STANDARD ||, +                operationMode == OperationMode.GOLD || operationMode == OperationMode.PLATINUM;, +, +        return licensed && localStatus.active;, +, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +    /** Name constant for the upgrade feature. */, +    public static final String UPGRADE = "upgrade";, +, +++ b/plugin/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +        messages.put(XPackPlugin.UPGRADE, new String[] {, +            "Upgrade API is disabled", +        });, +, +    /**, +     * Determine if Upgrade API should be enabled., +     * <p>, +     *  Upgrade API is not available in for all license types except {@link OperationMode#TRIAL}, +     *, +     * @return {@code true} as long as the license is valid. Otherwise, +     *         {@code false}., +     */, +    public boolean isUpgradeAllowed() {, +        // status is volatile, +        Status localStatus = status;, +        OperationMode operationMode = localStatus.mode;, +, +        boolean licensed = operationMode == OperationMode.BASIC || operationMode == OperationMode.STANDARD ||, +                operationMode == OperationMode.GOLD || operationMode == OperationMode.PLATINUM;, +, +        return licensed && localStatus.active;, +, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +    /** Name constant for the upgrade feature. */, +    public static final String UPGRADE = "upgrade";, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/upgrade/actions/IndexUpgradeInfoAction.java, +import org.elasticsearch.license.LicenseUtils;, +import org.elasticsearch.license.XPackLicenseState;, +import org.elasticsearch.xpack.XPackPlugin;, +        private final XPackLicenseState licenseState;, +, +                               IndexNameExpressionResolver indexNameExpressionResolver,, +                               XPackLicenseState licenseState) {, +            this.licenseState = licenseState;, +            if (licenseState.isUpgradeAllowed()) {, +            } else {, +                listener.onFailure(LicenseUtils.newComplianceException(XPackPlugin.UPGRADE));, +            }, +++ b/plugin/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +        messages.put(XPackPlugin.UPGRADE, new String[] {, +            "Upgrade API is disabled", +        });]