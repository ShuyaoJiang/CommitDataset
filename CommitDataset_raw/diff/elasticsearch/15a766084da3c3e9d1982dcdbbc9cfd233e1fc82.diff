[+++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +    /**, +     * Returns the number of bytes used by the underlying {@link org.elasticsearch.common.util.ByteArray}, +     * @see org.elasticsearch.common.util.ByteArray#ramBytesUsed(), +     */, +    public long ramBytesUsed() {, +        return bytes.ramBytesUsed();, +    }, +, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +    /**, +     * Returns the number of bytes used by the underlying {@link org.elasticsearch.common.util.ByteArray}, +     * @see org.elasticsearch.common.util.ByteArray#ramBytesUsed(), +     */, +    public long ramBytesUsed() {, +        return bytes.ramBytesUsed();, +    }, +, +++ b/src/main/java/org/elasticsearch/index/cache/query/ShardQueryCache.java, +public class ShardQueryCache extends AbstractIndexShardComponent implements RemovalListener<IndicesQueryCache.Key, IndicesQueryCache.Value> {, +    public void onCached(IndicesQueryCache.Key key, IndicesQueryCache.Value value) {, +        totalMetric.inc(key.ramBytesUsed() + value.ramBytesUsed());, +    public void onRemoval(RemovalNotification<IndicesQueryCache.Key, IndicesQueryCache.Value> removalNotification) {, +            dec += removalNotification.getValue().ramBytesUsed();, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +    /**, +     * Returns the number of bytes used by the underlying {@link org.elasticsearch.common.util.ByteArray}, +     * @see org.elasticsearch.common.util.ByteArray#ramBytesUsed(), +     */, +    public long ramBytesUsed() {, +        return bytes.ramBytesUsed();, +    }, +, +++ b/src/main/java/org/elasticsearch/index/cache/query/ShardQueryCache.java, +public class ShardQueryCache extends AbstractIndexShardComponent implements RemovalListener<IndicesQueryCache.Key, IndicesQueryCache.Value> {, +    public void onCached(IndicesQueryCache.Key key, IndicesQueryCache.Value value) {, +        totalMetric.inc(key.ramBytesUsed() + value.ramBytesUsed());, +    public void onRemoval(RemovalNotification<IndicesQueryCache.Key, IndicesQueryCache.Value> removalNotification) {, +            dec += removalNotification.getValue().ramBytesUsed();, +++ b/src/main/java/org/elasticsearch/indices/cache/query/IndicesQueryCache.java, +import org.elasticsearch.common.bytes.PagedBytesReference;, +import org.elasticsearch.common.bytes.ReleasablePagedBytesReference;, +import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;, +import org.elasticsearch.common.util.BigArrays;, +public class IndicesQueryCache extends AbstractComponent implements RemovalListener<IndicesQueryCache.Key, IndicesQueryCache.Value> {, +    private volatile Cache<Key, Value> cache;, +        CacheBuilder<Key, Value> cacheBuilder = CacheBuilder.newBuilder(), +    private static class QueryCacheWeigher implements Weigher<Key, Value> {, +        public int weigh(Key key, Value value) {, +            return (int) (key.ramBytesUsed() + value.ramBytesUsed());, +    public void onRemoval(RemovalNotification<Key, Value> notification) {, +        Value value = cache.get(key, loader);, +        return new BytesQuerySearchResult(context.id(), context.shardTarget(), value.reference, loader.isLoaded() ? context.queryResult() : null);, +    private static class Loader implements Callable<Value> {, +        public Value call() throws Exception {, +            try (BytesStreamOutput out = new BytesStreamOutput()) {, +                final BytesReference reference = out.bytes();, +                assert verifyCacheSerializationSameAsQueryResult(reference, context, context.queryResult());, +                Value value = new Value(reference, out.ramBytesUsed());, +    }, +, +    public static class Value implements Accountable {, +        final BytesReference reference;, +        final long ramBytesUsed;, +, +        public Value(BytesReference reference, long ramBytesUsed) {, +            this.reference = reference;, +            this.ramBytesUsed = ramBytesUsed;, +        }, +, +        @Override, +        public long ramBytesUsed() {, +            return ramBytesUsed;, +        }, +, +        @Override, +        public Collection<Accountable> getChildResources() {, +            return Collections.emptyList();, +        }, +    }]