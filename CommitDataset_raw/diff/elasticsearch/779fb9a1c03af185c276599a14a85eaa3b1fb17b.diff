[+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +    public String getName() {, +        return "noop_bulk_action";, +    }, +, +    @Override, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +    public String getName() {, +        return "noop_bulk_action";, +    }, +, +    @Override, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/RestNoopSearchAction.java, +    public String getName() {, +        return "noop_search_action";, +    }, +, +    @Override, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +    public String getName() {, +        return "noop_bulk_action";, +    }, +, +    @Override, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/RestNoopSearchAction.java, +    public String getName() {, +        return "noop_search_action";, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.cluster.node.usage.NodesUsageAction;, +import org.elasticsearch.action.admin.cluster.node.usage.TransportNodesUsageAction;, +import org.elasticsearch.rest.action.admin.cluster.RestNodesUsageAction;, +import org.elasticsearch.usage.UsageService;, +            CircuitBreakerService circuitBreakerService, UsageService usageService) {, +            restController = new RestController(settings, headers, restWrapper, nodeClient, circuitBreakerService, usageService);, +        actions.register(NodesUsageAction.INSTANCE, TransportNodesUsageAction.class);, +        registerHandler.accept(new RestNodesUsageAction(settings, restController));, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +    public String getName() {, +        return "noop_bulk_action";, +    }, +, +    @Override, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/RestNoopSearchAction.java, +    public String getName() {, +        return "noop_search_action";, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.cluster.node.usage.NodesUsageAction;, +import org.elasticsearch.action.admin.cluster.node.usage.TransportNodesUsageAction;, +import org.elasticsearch.rest.action.admin.cluster.RestNodesUsageAction;, +import org.elasticsearch.usage.UsageService;, +            CircuitBreakerService circuitBreakerService, UsageService usageService) {, +            restController = new RestController(settings, headers, restWrapper, nodeClient, circuitBreakerService, usageService);, +        actions.register(NodesUsageAction.INSTANCE, TransportNodesUsageAction.class);, +        registerHandler.accept(new RestNodesUsageAction(settings, restController));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/usage/NodeUsage.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.admin.cluster.node.usage;, +, +import org.elasticsearch.action.support.nodes.BaseNodeResponse;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +import java.io.IOException;, +import java.util.Map;, +, +public class NodeUsage extends BaseNodeResponse implements ToXContent {, +, +    private long timestamp;, +    private long sinceTime;, +    private Map<String, Long> restUsage;, +, +    NodeUsage() {, +    }]