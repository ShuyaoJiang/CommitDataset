[+++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    /** how many retry attempts to perform if join request failed with an retriable error */, +    private final int joinRetryAttempts;, +    /** how long to wait before performing another join attempt after a join request failed with an retriable error */, +    private final TimeValue joinRetryDelay;, +, +, +        this.joinRetryAttempts = settings.getAsInt("discovery.zen.join_retry_attempts", 3);, +        this.joinRetryDelay = settings.getAsTime("discovery.zen.join_retry_delay", TimeValue.timeValueMillis(100));, +                retry = !joinElectedMaster(masterNode);, +                if (retry) {, +, +    /**, +     * Join a newly elected master., +     *, +     * @return true if successful, +     */, +    private boolean joinElectedMaster(DiscoveryNode masterNode) {, +        try {, +            // first, make sure we can connect to the master, +            transportService.connectToNode(masterNode);, +        } catch (Exception e) {, +            logger.warn("failed to connect to master [{}], retrying...", e, masterNode);, +            return false;, +        }, +        for (int joinAttempt = 0; joinAttempt < this.joinRetryAttempts; joinAttempt++) {, +            try {, +                logger.trace("joining master {}", masterNode);, +                membership.sendJoinRequestBlocking(masterNode, localNode, joinTimeout);, +                return true;, +            } catch (ElasticsearchIllegalStateException e) {, +                if (joinAttempt >= this.joinRetryAttempts) {, +                    logger.info("failed to send join request to master [{}], reason [{}]. Tried [{}] times",, +                            masterNode, e.getDetailedMessage(), joinAttempt + 1);, +                    return false;, +                } else {, +                    logger.trace("master {} failed with [{}]. retrying... (attempts done: [{}])", masterNode, e.getDetailedMessage(), joinAttempt + 1);, +                }, +            } catch (Exception e) {, +                if (logger.isTraceEnabled()) {, +                    logger.trace("failed to send join request to master [{}]", e);, +                } else if (e instanceof ElasticsearchException) {, +                    logger.info("failed to send join request to master [{}], reason [{}]", masterNode, ((ElasticsearchException) e).getDetailedMessage());, +                } else {, +                    logger.info("failed to send join request to master [{}], reason [{}]", masterNode, e.getMessage());, +                }, +                return false;, +            }, +, +            try {, +                Thread.sleep(this.joinRetryDelay.millis());, +            } catch (InterruptedException e) {, +                Thread.currentThread().interrupt();, +            }, +        }, +        return false;, +    }, +, +            return electMaster.electMaster(possibleMasterNodes);, +            return electMaster.electMaster(pingMasters);, +                    } else {]