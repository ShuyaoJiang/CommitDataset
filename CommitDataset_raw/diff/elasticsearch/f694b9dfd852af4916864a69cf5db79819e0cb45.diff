[+++ b/modules/elasticsearch/src/main/java/org/apache/lucene/index/memory/CustomMemoryIndex.java, +package org.apache.lucene.index.memory;, +, +/**, + * Licensed to the Apache Software Foundation (ASF) under one or more, + * contributor license agreements.  See the NOTICE file distributed with, + * this work for additional information regarding copyright ownership., + * The ASF licenses this file to You under the Apache License, Version 2.0, + * (the "License"); you may not use this file except in compliance with, + * the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;, +import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;, +import org.apache.lucene.analysis.tokenattributes.TermAttribute;, +import org.apache.lucene.document.Document;, +import org.apache.lucene.document.FieldSelector;, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.*;, +import org.apache.lucene.store.RAMDirectory;, +, +import java.io.IOException;, +import java.io.Serializable;, +import java.io.StringReader;, +import java.util.*;, +, +/**, + * High-performance single-document main memory Apache Lucene fulltext search index., + *, + * <h4>Overview</h4>, + *, + * This class is a replacement/substitute for a large subset of, + * {@link RAMDirectory} functionality. It is designed to, + * enable maximum efficiency for on-the-fly matchmaking combining structured and, + * fuzzy fulltext search in realtime streaming applications such as Nux XQuery based XML, + * message queues, publish-subscribe systems for Blogs/newsfeeds, text chat, data acquisition and, + * distribution systems, application level routers, firewalls, classifiers, etc., + * Rather than targeting fulltext search of infrequent queries over huge persistent, + * data archives (historic search), this class targets fulltext search of huge, + * numbers of queries over comparatively small transient realtime data (prospective, + * search)., + * For example as in, + * <pre>, + * float score = search(String text, Query query), + * </pre>, + * <p>, + * Each instance can hold at most one Lucene "document", with a document containing, + * zero or more "fields", each field having a name and a fulltext value. The, + * fulltext value is tokenized (split and transformed) into zero or more index terms, + * (aka words) on <code>addField()</code>, according to the policy implemented by an, + * Analyzer. For example, Lucene analyzers can split on whitespace, normalize to lower case, + * for case insensitivity, ignore common terms with little discriminatory value such as "he", "in", "and" (stop, + * words), reduce the terms to their natural linguistic root form such as "fishing", + * being reduced to "fish" (stemming), resolve synonyms/inflexions/thesauri, + * (upon indexing and/or querying), etc. For details, see, + * <a target="_blank" href="http://today.java.net/pub/a/today/2003/07/30/LuceneIntro.html">Lucene Analyzer Intro</a>., + * <p>, + * Arbitrary Lucene queries can be run against this class - see <a target="_blank", + * href="../../../../../../../queryparsersyntax.html">Lucene Query Syntax</a>, + * as well as <a target="_blank", + * href="http://today.java.net/pub/a/today/2003/11/07/QueryParserRules.html">Query Parser Rules</a>., + * Note that a Lucene query selects on the field names and associated (indexed), + * tokenized terms, not on the original fulltext(s) - the latter are not stored, + * but rather thrown away immediately after tokenization., + * <p>, + * For some interesting background information on search technology, see Bob Wyman's, + * <a target="_blank", + * href="http://bobwyman.pubsub.com/main/2005/05/mary_hodder_poi.html">Prospective Search</a>,, + * Jim Gray's, + * <a target="_blank" href="http://www.acmqueue.org/modules.php?name=Content&pa=showpage&pid=293&page=4">, + * A Call to Arms - Custom subscriptions</a>, and Tim Bray's, + * <a target="_blank", + * href="http://www.tbray.org/ongoing/When/200x/2003/07/30/OnSearchTOC">On Search, the Series</a>., + *, + *, + * <h4>Example Usage</h4>, + *, + * <pre>, + * Analyzer analyzer = PatternAnalyzer.DEFAULT_ANALYZER;, + * //Analyzer analyzer = new SimpleAnalyzer();, + * MemoryIndex index = new MemoryIndex();, + * index.addField("content", "Readings about Salmons and other select Alaska fishing Manuals", analyzer);, + * index.addField("author", "Tales of James", analyzer);, + * QueryParser parser = new QueryParser("content", analyzer);, + * float score = index.search(parser.parse("+author:james +salmon~ +fish* manual~"));, + * if (score &gt; 0.0f) {, + *     System.out.println("it's a match");, + * } else {, + *     System.out.println("no match found");, + * }]