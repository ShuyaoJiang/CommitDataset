[+++ b/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/RecoveryIT.java, +++ b/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/RecoveryIT.java, +++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +                                    () -> {, +                                        if (shard.isRelocatedPrimary() == false) {, +                                            sync.accept(shard);, +                                        }, +                                    },, +++ b/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/RecoveryIT.java, +++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +                                    () -> {, +                                        if (shard.isRelocatedPrimary() == false) {, +                                            sync.accept(shard);, +                                        }, +                                    },, +++ b/server/src/test/java/org/elasticsearch/recovery/RecoveryWhileUnderLoadIT.java, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.plugins.Plugin;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +    public static final class RetentionLeaseSyncIntervalSettingPlugin extends Plugin {, +, +        @Override, +        public List<Setting<?>> getSettings() {, +            return Collections.singletonList(IndexService.RETENTION_LEASE_SYNC_INTERVAL_SETTING);, +        }, +, +    }, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return Stream.concat(, +            super.nodePlugins().stream(),, +            Stream.of(RetentionLeaseSyncIntervalSettingPlugin.class)), +            .collect(Collectors.toList());, +    }, +, +                .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC), +                .put(IndexService.RETENTION_LEASE_SYNC_INTERVAL_SETTING.getKey(), randomFrom("100ms", "1s", "5s", "30s", "60s"))));]