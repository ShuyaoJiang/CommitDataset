[+++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +            if (sizeMinus1 == 0) {, +                // no prefix and the phrase query is empty, +                return Queries.newMatchNoDocsQuery("No terms supplied for " + MultiPhrasePrefixQuery.class.getName());, +            }, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +            if (sizeMinus1 == 0) {, +                // no prefix and the phrase query is empty, +                return Queries.newMatchNoDocsQuery("No terms supplied for " + MultiPhrasePrefixQuery.class.getName());, +            }, +, +++ b/core/src/test/java/org/elasticsearch/search/fetch/subphase/highlight/HighlighterSearchIT.java, +                .query(boolQuery(), +                    .should(matchPhrasePrefixQuery("field1", "test")), +                    .should(matchPhrasePrefixQuery("field1", "bro")), +                ), +                .highlighter(highlight().field("field1").order("score").preTags("<x>").postTags("</x>").highlighterType(type));, +, +            searchResponse = client().search(searchRequest("test").source(source)).actionGet();, +            assertThat(searchResponse.getHits().totalHits, equalTo(2L));, +            for (int i = 0; i < 2; i++) {, +                assertHighlight(searchResponse, i, "field1", 0, 1, anyOf(, +                    equalTo("The quick <x>browse</x> button is a fancy thing, right <x>bro</x>?"),, +                    equalTo("The quick <x>brown</x> fox jumps over the lazy dog")));, +            }, +, +            source = searchSource(), +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +            if (sizeMinus1 == 0) {, +                // no prefix and the phrase query is empty, +                return Queries.newMatchNoDocsQuery("No terms supplied for " + MultiPhrasePrefixQuery.class.getName());, +            }, +, +++ b/core/src/test/java/org/elasticsearch/search/fetch/subphase/highlight/HighlighterSearchIT.java, +                .query(boolQuery(), +                    .should(matchPhrasePrefixQuery("field1", "test")), +                    .should(matchPhrasePrefixQuery("field1", "bro")), +                ), +                .highlighter(highlight().field("field1").order("score").preTags("<x>").postTags("</x>").highlighterType(type));, +, +            searchResponse = client().search(searchRequest("test").source(source)).actionGet();, +            assertThat(searchResponse.getHits().totalHits, equalTo(2L));, +            for (int i = 0; i < 2; i++) {, +                assertHighlight(searchResponse, i, "field1", 0, 1, anyOf(, +                    equalTo("The quick <x>browse</x> button is a fancy thing, right <x>bro</x>?"),, +                    equalTo("The quick <x>brown</x> fox jumps over the lazy dog")));, +            }, +, +            source = searchSource(), +++ b/core/src/test/java/org/elasticsearch/validate/SimpleValidateQueryIT.java, +                equalTo("field:\"ju*\"")]