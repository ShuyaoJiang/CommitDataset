[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <!-- the constructors on some local classes in these tests must be public-->, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]plugins[/\\]PluginsServiceTests.java" checks="RedundantModifier" />, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <!-- the constructors on some local classes in these tests must be public-->, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]plugins[/\\]PluginsServiceTests.java" checks="RedundantModifier" />, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import java.lang.reflect.Constructor;, +        final Constructor<?>[] constructors = pluginClass.getConstructors();, +        if (constructors.length == 0) {, +            throw new IllegalStateException("no public constructor for [" + pluginClass.getName() + "]");, +        }, +, +        if (constructors.length > 1) {, +            throw new IllegalStateException("no unique public constructor for [" + pluginClass.getName() + "]");, +        }, +, +        final Constructor<?> constructor = constructors[0];, +        if (constructor.getParameterCount() > 2) {, +            throw new IllegalStateException(signatureMessage(pluginClass));, +        }, +, +        final Class[] parameterTypes = constructor.getParameterTypes();, +            if (constructor.getParameterCount() == 2 && parameterTypes[0] == Settings.class && parameterTypes[1] == Path.class) {, +                return (Plugin)constructor.newInstance(settings, configPath);, +            } else if (constructor.getParameterCount() == 1 && parameterTypes[0] == Settings.class) {, +                return (Plugin)constructor.newInstance(settings);, +            } else if (constructor.getParameterCount() == 0) {, +                return (Plugin)constructor.newInstance();, +            } else {, +                throw new IllegalStateException(signatureMessage(pluginClass));, +            }, +        } catch (final ReflectiveOperationException e) {, +            throw new IllegalStateException("failed to load plugin class [" + pluginClass.getName() + "]", e);, +, +    private String signatureMessage(final Class<? extends Plugin> clazz) {, +        return String.format(, +                Locale.ROOT,, +                "no public constructor of correct signature for [%s]; must be [%s], [%s], or [%s]",, +                clazz.getName(),, +                "(org.elasticsearch.common.settings.Settings,java.nio.file.Path)",, +                "(org.elasticsearch.common.settings.Settings)",, +                "()");, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <!-- the constructors on some local classes in these tests must be public-->, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]plugins[/\\]PluginsServiceTests.java" checks="RedundantModifier" />, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import java.lang.reflect.Constructor;, +        final Constructor<?>[] constructors = pluginClass.getConstructors();, +        if (constructors.length == 0) {, +            throw new IllegalStateException("no public constructor for [" + pluginClass.getName() + "]");, +        }, +, +        if (constructors.length > 1) {, +            throw new IllegalStateException("no unique public constructor for [" + pluginClass.getName() + "]");, +        }, +, +        final Constructor<?> constructor = constructors[0];, +        if (constructor.getParameterCount() > 2) {, +            throw new IllegalStateException(signatureMessage(pluginClass));, +        }, +, +        final Class[] parameterTypes = constructor.getParameterTypes();, +            if (constructor.getParameterCount() == 2 && parameterTypes[0] == Settings.class && parameterTypes[1] == Path.class) {, +                return (Plugin)constructor.newInstance(settings, configPath);, +            } else if (constructor.getParameterCount() == 1 && parameterTypes[0] == Settings.class) {, +                return (Plugin)constructor.newInstance(settings);, +            } else if (constructor.getParameterCount() == 0) {, +                return (Plugin)constructor.newInstance();, +            } else {, +                throw new IllegalStateException(signatureMessage(pluginClass));, +            }, +        } catch (final ReflectiveOperationException e) {, +            throw new IllegalStateException("failed to load plugin class [" + pluginClass.getName() + "]", e);, +, +    private String signatureMessage(final Class<? extends Plugin> clazz) {, +        return String.format(, +                Locale.ROOT,, +                "no public constructor of correct signature for [%s]; must be [%s], [%s], or [%s]",, +                clazz.getName(),, +                "(org.elasticsearch.common.settings.Settings,java.nio.file.Path)",, +                "(org.elasticsearch.common.settings.Settings)",, +                "()");, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginsServiceTests.java, +import java.util.Collection;, +    public void testLoadPluginWithNoPublicConstructor() {, +        class NoPublicConstructorPlugin extends Plugin {, +, +            private NoPublicConstructorPlugin() {, +, +            }, +, +        }, +, +        final Path home = createTempDir();, +        final Settings settings = Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(), home).build();, +        final IllegalStateException e =]