[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/get/TransportGetRepositoriesAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/get/TransportGetRepositoriesAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/get/TransportGetRepositoriesAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/TransportVerifyRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/get/TransportGetRepositoriesAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/TransportVerifyRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We are writing to the cluster metadata and reading from indices - so we need to check both blocks, +        ClusterBlockException clusterBlockException = state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +        if (clusterBlockException != null) {, +            return clusterBlockException;, +        }, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.READ, state.metaData().concreteIndices(request.indicesOptions(), request.indices()));, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/get/TransportGetRepositoriesAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/TransportVerifyRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We are writing to the cluster metadata and reading from indices - so we need to check both blocks, +        ClusterBlockException clusterBlockException = state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +        if (clusterBlockException != null) {, +            return clusterBlockException;, +        }, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.READ, state.metaData().concreteIndices(request.indicesOptions(), request.indices()));, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/get/TransportGetRepositoriesAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/TransportVerifyRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We are writing to the cluster metadata and reading from indices - so we need to check both blocks, +        ClusterBlockException clusterBlockException = state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +        if (clusterBlockException != null) {, +            return clusterBlockException;, +        }, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.READ, state.metaData().concreteIndices(request.indicesOptions(), request.indices()));, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/TransportGetSnapshotsAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/get/TransportGetRepositoriesAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/TransportVerifyRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        // We are writing to the cluster metadata and reading from indices - so we need to check both blocks, +        ClusterBlockException clusterBlockException = state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +        if (clusterBlockException != null) {, +            return clusterBlockException;, +        }, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.READ, state.metaData().concreteIndices(request.indicesOptions(), request.indices()));, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/TransportGetSnapshotsAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/restore/TransportRestoreSnapshotAction.java, +        ClusterBlockException blockException = state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +        return state.blocks().globalBlockedException(ClusterBlockLevel.WRITE);, +, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/delete/TransportDeleteRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/get/TransportGetRepositoriesAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/repositories/put/TransportPutRepositoryAction.java, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);]