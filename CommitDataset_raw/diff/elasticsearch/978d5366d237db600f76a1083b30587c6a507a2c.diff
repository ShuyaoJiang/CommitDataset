[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );, +    }, +, +    /**, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        // as failing primaries also fail associated replicas, we fail replicas first here to avoid re-resolving replica ShardRouting, +        List<FailedRerouteAllocation.FailedShard> orderedFailedShards = new ArrayList<>(failedShards);, +        orderedFailedShards.sort(Comparator.comparing(failedShard -> failedShard.routingEntry.primary()));, +, +        for (FailedRerouteAllocation.FailedShard failedShardEntry : orderedFailedShards) {, +            ShardRouting failedShard = failedShardEntry.routingEntry;, +            final int failedAllocations = failedShard.unassignedInfo() != null ? failedShard.unassignedInfo().getNumFailedAllocations() : 0;, +            allocation.addIgnoreShardForNode(failedShard.shardId(), failedShard.currentNodeId());, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        // as failing primaries also fail associated replicas, we fail replicas first here to avoid re-resolving replica ShardRouting, +        List<FailedRerouteAllocation.FailedShard> orderedFailedShards = new ArrayList<>(failedShards);, +        orderedFailedShards.sort(Comparator.comparing(failedShard -> failedShard.routingEntry.primary()));, +, +        for (FailedRerouteAllocation.FailedShard failedShardEntry : orderedFailedShards) {, +            ShardRouting failedShard = failedShardEntry.routingEntry;, +            final int failedAllocations = failedShard.unassignedInfo() != null ? failedShard.unassignedInfo().getNumFailedAllocations() : 0;, +            allocation.addIgnoreShardForNode(failedShard.shardId(), failedShard.currentNodeId());, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        } else if (ExceptionsHelper.isOOM(e)) {, +            failEngine("out of memory (source: [" + source + "])", e);, +            return true;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        )]