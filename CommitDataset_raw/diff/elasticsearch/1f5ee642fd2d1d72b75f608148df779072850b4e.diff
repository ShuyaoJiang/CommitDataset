[+++ b/core/src/main/java/org/elasticsearch/common/geo/builders/MultiPolygonBuilder.java, +import java.util.Locale;, +import java.util.Objects;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +    static final MultiPolygonBuilder PROTOTYPE = new MultiPolygonBuilder();, +    private final ArrayList<PolygonBuilder> polygons = new ArrayList<>();, +    /**, +     * get the list of polygons, +     */, +    public ArrayList<PolygonBuilder> polygons() {, +        return polygons;, +    }, +, +        builder.field(FIELD_ORIENTATION, orientation.name().toLowerCase(Locale.ROOT));, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(polygons, orientation);, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj) {, +            return true;, +        }, +        if (obj == null || getClass() != obj.getClass()) {, +            return false;, +        }, +        MultiPolygonBuilder other = (MultiPolygonBuilder) obj;, +        return Objects.equals(polygons, other.polygons) &&, +                Objects.equals(orientation,  other.orientation);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeBoolean(orientation == Orientation.RIGHT);, +        out.writeVInt(polygons.size());, +        for (PolygonBuilder polygon : polygons) {, +            polygon.writeTo(out);, +        }, +    }, +, +    @Override, +    public MultiPolygonBuilder readFrom(StreamInput in) throws IOException {, +        Orientation orientation = in.readBoolean() ? Orientation.RIGHT : Orientation.LEFT;, +        MultiPolygonBuilder polyBuilder = new MultiPolygonBuilder(orientation);, +        int holes = in.readVInt();, +        for (int i = 0; i < holes; i++) {, +            polyBuilder.polygon(PolygonBuilder.PROTOTYPE.readFrom(in));, +        }, +        return polyBuilder;, +    }, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/MultiPolygonBuilder.java, +import java.util.Locale;, +import java.util.Objects;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +    static final MultiPolygonBuilder PROTOTYPE = new MultiPolygonBuilder();, +    private final ArrayList<PolygonBuilder> polygons = new ArrayList<>();, +    /**, +     * get the list of polygons, +     */, +    public ArrayList<PolygonBuilder> polygons() {, +        return polygons;, +    }, +, +        builder.field(FIELD_ORIENTATION, orientation.name().toLowerCase(Locale.ROOT));, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(polygons, orientation);, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj) {, +            return true;, +        }, +        if (obj == null || getClass() != obj.getClass()) {, +            return false;, +        }, +        MultiPolygonBuilder other = (MultiPolygonBuilder) obj;, +        return Objects.equals(polygons, other.polygons) &&, +                Objects.equals(orientation,  other.orientation);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeBoolean(orientation == Orientation.RIGHT);, +        out.writeVInt(polygons.size());, +        for (PolygonBuilder polygon : polygons) {, +            polygon.writeTo(out);, +        }, +    }, +, +    @Override, +    public MultiPolygonBuilder readFrom(StreamInput in) throws IOException {, +        Orientation orientation = in.readBoolean() ? Orientation.RIGHT : Orientation.LEFT;, +        MultiPolygonBuilder polyBuilder = new MultiPolygonBuilder(orientation);]