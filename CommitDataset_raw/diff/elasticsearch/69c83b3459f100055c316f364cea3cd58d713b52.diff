[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * @param name the name for the suggestion that will also be used in the response, +     * @param suggestion the suggestion configuration, +    public SuggestRequestBuilder addSuggestion(String name, SuggestionBuilder<?> suggestion) {, +        suggest.addSuggestion(name, suggestion);, +        this.suggest.setGlobalText(globalText);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * @param name the name for the suggestion that will also be used in the response, +     * @param suggestion the suggestion configuration, +    public SuggestRequestBuilder addSuggestion(String name, SuggestionBuilder<?> suggestion) {, +        suggest.addSuggestion(name, suggestion);, +        this.suggest.setGlobalText(globalText);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.newQueryShardContext());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * @param name the name for the suggestion that will also be used in the response, +     * @param suggestion the suggestion configuration, +    public SuggestRequestBuilder addSuggestion(String name, SuggestionBuilder<?> suggestion) {, +        suggest.addSuggestion(name, suggestion);, +        this.suggest.setGlobalText(globalText);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.newQueryShardContext());, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +import org.elasticsearch.search.suggest.completion.context.QueryContext;, +import org.elasticsearch.search.suggest.phrase.SmoothingModel;, +    public Float readOptionalFloat() throws IOException {, +        if (readBoolean()) {, +            return readFloat();, +        }, +        return null;, +    }, +, +    @Nullable, +     * Reads a {@link SuggestionBuilder} from the current stream, +     */, +    public SuggestionBuilder<?> readSuggestion() throws IOException {, +        return readNamedWriteable(SuggestionBuilder.class);, +    }, +, +    /**, +     * Reads a {@link SmoothingModel} from the current stream, +     */, +    public SmoothingModel readPhraseSuggestionSmoothingModel() throws IOException {, +        return readNamedWriteable(SmoothingModel.class);, +    }, +, +    /**, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * @param name the name for the suggestion that will also be used in the response, +     * @param suggestion the suggestion configuration, +    public SuggestRequestBuilder addSuggestion(String name, SuggestionBuilder<?> suggestion) {, +        suggest.addSuggestion(name, suggestion);, +        this.suggest.setGlobalText(globalText);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.newQueryShardContext());, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java]