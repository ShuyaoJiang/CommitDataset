[+++ b/core/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsFetchSubPhase.java, +import org.elasticsearch.search.fetch.fielddata.FieldDataFieldsParseElement;, +import org.elasticsearch.search.fetch.script.ScriptFieldsParseElement;, +import org.elasticsearch.search.fetch.source.FetchSourceParseElement;, +++ b/core/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsFetchSubPhase.java, +import org.elasticsearch.search.fetch.fielddata.FieldDataFieldsParseElement;, +import org.elasticsearch.search.fetch.script.ScriptFieldsParseElement;, +import org.elasticsearch.search.fetch.source.FetchSourceParseElement;, +++ b/core/src/main/java/org/elasticsearch/search/highlight/AbstractHighlighterBuilder.java, +import org.elasticsearch.action.support.ToXContentToBytes;, +public abstract class AbstractHighlighterBuilder<HB extends AbstractHighlighterBuilder<?>> extends ToXContentToBytes {, +        return this.phraseLimit;, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        innerXContent(builder);, +        builder.endObject();, +        return builder;, +    }, +, +    protected abstract void innerXContent(XContentBuilder builder) throws IOException;, +, +++ b/core/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsFetchSubPhase.java, +import org.elasticsearch.search.fetch.fielddata.FieldDataFieldsParseElement;, +import org.elasticsearch.search.fetch.script.ScriptFieldsParseElement;, +import org.elasticsearch.search.fetch.source.FetchSourceParseElement;, +++ b/core/src/main/java/org/elasticsearch/search/highlight/AbstractHighlighterBuilder.java, +import org.elasticsearch.action.support.ToXContentToBytes;, +public abstract class AbstractHighlighterBuilder<HB extends AbstractHighlighterBuilder<?>> extends ToXContentToBytes {, +        return this.phraseLimit;, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        innerXContent(builder);, +        builder.endObject();, +        return builder;, +    }, +, +    protected abstract void innerXContent(XContentBuilder builder) throws IOException;, +, +++ b/core/src/main/java/org/elasticsearch/search/highlight/HighlightBuilder.java, +public class HighlightBuilder extends AbstractHighlighterBuilder<HighlightBuilder> implements Writeable<HighlightBuilder> {, +     * a {@link FieldOptions} with default settings, +    final static FieldOptions defaultOptions = new SearchContextHighlight.FieldOptions.Builder(), +            .preTags(DEFAULT_PRE_TAGS).postTags(DEFAULT_POST_TAGS).scoreOrdered(DEFAULT_SCORE_ORDERED), +            .highlightFilter(DEFAULT_HIGHLIGHT_FILTER).requireFieldMatch(DEFAULT_REQUIRE_FIELD_MATCH), +            .forceSource(DEFAULT_FORCE_SOURCE).fragmentCharSize(DEFAULT_FRAGMENT_CHAR_SIZE), +            .numberOfFragments(DEFAULT_NUMBER_OF_FRAGMENTS).encoder(DEFAULT_ENCODER), +            .boundaryMaxScan(SimpleBoundaryScanner.DEFAULT_MAX_SCAN).boundaryChars(SimpleBoundaryScanner.DEFAULT_BOUNDARY_CHARS), +            .noMatchSize(DEFAULT_NO_MATCH_SIZE).phraseLimit(DEFAULT_PHRASE_LIMIT).build();, +        globalOptionsBuilder.merge(defaultOptions);, +            fieldOptions.add(new SearchContextHighlight.Field(field.name(), fieldOptionsBuilder, +                    .merge(globalOptionsBuilder.build()).build()));, +    private static void transferOptions(AbstractHighlighterBuilder highlighterBuilder,, +            SearchContextHighlight.FieldOptions.Builder targetOptionsBuilder, QueryShardContext context) throws IOException {, +    static Character[] convertCharArray(char[] array) {, +    @Override, +        @Override, +                throw new ParsingException(parser.getTokenLocation(), "unknown token type [{}], expected field name",, +                        parser.currentToken());, +++ b/core/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsFetchSubPhase.java, +import org.elasticsearch.search.fetch.fielddata.FieldDataFieldsParseElement;, +import org.elasticsearch.search.fetch.script.ScriptFieldsParseElement;, +import org.elasticsearch.search.fetch.source.FetchSourceParseElement;, +++ b/core/src/main/java/org/elasticsearch/search/highlight/AbstractHighlighterBuilder.java, +import org.elasticsearch.action.support.ToXContentToBytes;, +public abstract class AbstractHighlighterBuilder<HB extends AbstractHighlighterBuilder<?>> extends ToXContentToBytes {, +        return this.phraseLimit;, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        innerXContent(builder);, +        builder.endObject();, +        return builder;, +    }, +, +    protected abstract void innerXContent(XContentBuilder builder) throws IOException;, +, +++ b/core/src/main/java/org/elasticsearch/search/highlight/HighlightBuilder.java, +public class HighlightBuilder extends AbstractHighlighterBuilder<HighlightBuilder> implements Writeable<HighlightBuilder> {, +     * a {@link FieldOptions} with default settings, +    final static FieldOptions defaultOptions = new SearchContextHighlight.FieldOptions.Builder(), +            .preTags(DEFAULT_PRE_TAGS).postTags(DEFAULT_POST_TAGS).scoreOrdered(DEFAULT_SCORE_ORDERED), +            .highlightFilter(DEFAULT_HIGHLIGHT_FILTER).requireFieldMatch(DEFAULT_REQUIRE_FIELD_MATCH), +            .forceSource(DEFAULT_FORCE_SOURCE).fragmentCharSize(DEFAULT_FRAGMENT_CHAR_SIZE), +            .numberOfFragments(DEFAULT_NUMBER_OF_FRAGMENTS).encoder(DEFAULT_ENCODER), +            .boundaryMaxScan(SimpleBoundaryScanner.DEFAULT_MAX_SCAN).boundaryChars(SimpleBoundaryScanner.DEFAULT_BOUNDARY_CHARS), +            .noMatchSize(DEFAULT_NO_MATCH_SIZE).phraseLimit(DEFAULT_PHRASE_LIMIT).build();, +        globalOptionsBuilder.merge(defaultOptions);, +            fieldOptions.add(new SearchContextHighlight.Field(field.name(), fieldOptionsBuilder, +                    .merge(globalOptionsBuilder.build()).build()));, +    private static void transferOptions(AbstractHighlighterBuilder highlighterBuilder,, +            SearchContextHighlight.FieldOptions.Builder targetOptionsBuilder, QueryShardContext context) throws IOException {, +    static Character[] convertCharArray(char[] array) {, +    @Override, +        @Override, +                throw new ParsingException(parser.getTokenLocation(), "unknown token type [{}], expected field name",, +                        parser.currentToken());, +++ b/core/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +    /**]