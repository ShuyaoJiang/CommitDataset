[+++ b/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +            // we also change the values on the default field type so that toXContent emits what, +            // differs from the defaults, +            FieldType defaultFieldType = new FieldType(Defaults.FIELD_TYPE);, +                defaultFieldType.setOmitNorms(true);, +                defaultFieldType.setIndexOptions(IndexOptions.DOCS_ONLY);, +            defaultFieldType.freeze();, +                    boost, fieldType, defaultFieldType, docValues, nullValue, indexAnalyzer, searchAnalyzer, searchQuotedAnalyzer,, +    private final FieldType defaultFieldType;, +    protected StringFieldMapper(Names names, float boost, FieldType fieldType,FieldType defaultFieldType, Boolean docValues,, +        this.defaultFieldType = defaultFieldType;, +        return defaultFieldType;, +++ b/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +            // we also change the values on the default field type so that toXContent emits what, +            // differs from the defaults, +            FieldType defaultFieldType = new FieldType(Defaults.FIELD_TYPE);, +                defaultFieldType.setOmitNorms(true);, +                defaultFieldType.setIndexOptions(IndexOptions.DOCS_ONLY);, +            defaultFieldType.freeze();, +                    boost, fieldType, defaultFieldType, docValues, nullValue, indexAnalyzer, searchAnalyzer, searchQuotedAnalyzer,, +    private final FieldType defaultFieldType;, +    protected StringFieldMapper(Names names, float boost, FieldType fieldType,FieldType defaultFieldType, Boolean docValues,, +        this.defaultFieldType = defaultFieldType;, +        return defaultFieldType;, +++ b/src/test/java/org/elasticsearch/index/mapper/string/SimpleStringMappingTests.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.index.IndexableFieldType;, +import org.elasticsearch.common.xcontent.ToXContent;, +    private void assertDefaultAnalyzedFieldType(IndexableFieldType fieldType) {, +        assertThat(fieldType.omitNorms(), equalTo(false));, +        assertThat(fieldType.indexOptions(), equalTo(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS));, +        assertThat(fieldType.storeTermVectors(), equalTo(false));, +        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));, +        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));, +        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));, +    }, +, +    private void assertEquals(IndexableFieldType ft1, IndexableFieldType ft2) {, +        assertEquals(ft1.indexed(), ft2.indexed());, +        assertEquals(ft1.tokenized(), ft2.tokenized());, +        assertEquals(ft1.omitNorms(), ft2.omitNorms());, +        assertEquals(ft1.indexOptions(), ft2.indexOptions());, +        assertEquals(ft1.storeTermVectors(), ft2.storeTermVectors());, +        assertEquals(ft1.docValueType(), ft2.docValueType());, +    }, +, +    private void assertParseIdemPotent(IndexableFieldType expected, DocumentMapper mapper) throws Exception {, +        String mapping = mapper.toXContent(XContentFactory.jsonBuilder().startObject(), new ToXContent.MapParams(ImmutableMap.<String, String>of())).endObject().string();, +        mapper = MapperTestUtils.newParser().parse(mapping);, +        ParsedDocument doc = mapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("field", "2345"), +                .endObject(), +                .bytes());, +        assertEquals(expected, doc.rootDoc().getField("field").fieldType());, +    }, +, +        IndexableFieldType fieldType = doc.rootDoc().getField("field").fieldType();, +        assertDefaultAnalyzedFieldType(fieldType);, +        assertParseIdemPotent(fieldType, defaultMapper);, +        IndexableFieldType fieldType = doc.rootDoc().getField("field").fieldType();, +        assertThat(fieldType.omitNorms(), equalTo(true));, +        assertThat(fieldType.indexOptions(), equalTo(FieldInfo.IndexOptions.DOCS_ONLY));, +        assertThat(fieldType.storeTermVectors(), equalTo(false));, +        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));, +        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));, +        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));, +        assertParseIdemPotent(fieldType, defaultMapper);, +        fieldType = doc.rootDoc().getField("field").fieldType();, +        assertThat(fieldType.omitNorms(), equalTo(false));, +        assertThat(fieldType.indexOptions(), equalTo(FieldInfo.IndexOptions.DOCS_AND_FREQS));, +        assertThat(fieldType.storeTermVectors(), equalTo(false));, +        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));, +        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));, +        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));, +        assertParseIdemPotent(fieldType, defaultMapper);, +        fieldType = doc.rootDoc().getField("field").fieldType();, +        assertThat(fieldType.omitNorms(), equalTo(false));, +        assertParseIdemPotent(fieldType, defaultMapper);]