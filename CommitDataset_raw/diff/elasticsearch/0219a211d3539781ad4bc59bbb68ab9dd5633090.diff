[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequest.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +import java.util.Collections;, +import java.util.List;, +import java.util.stream.Collectors;, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(PutIndexTemplateRequest.class));, +, +    public static final Version V_5_1_0 = Version.fromId(5010099);, +, +    private List<String> indexPatterns;, +        if (indexPatterns == null || indexPatterns.size() == 0) {, +            validationException = addValidationError("pattern is missing", validationException);, +    public PutIndexTemplateRequest patterns(List<String> indexPatterns) {, +        this.indexPatterns = indexPatterns;, +    public List<String> patterns() {, +        return this.indexPatterns;, +                // This is needed to allow for bwc (beats, logstash) with pre-5.0 templates (#21009), +                if(entry.getValue() instanceof String) {, +                    DEPRECATION_LOGGER.deprecated("Deprecated field [template] used, replaced by [index_patterns]");, +                    patterns(Collections.singletonList((String) entry.getValue()));, +                }, +            } else if (name.equals("index_patterns")) {, +                if(entry.getValue() instanceof String) {, +                    patterns(Collections.singletonList((String) entry.getValue()));, +                } else if (entry.getValue() instanceof List) {, +                    List<String> elements = ((List<?>) entry.getValue()).stream().map(Object::toString).collect(Collectors.toList());, +                    patterns(elements);, +                } else {, +                    throw new IllegalArgumentException("Malformed [template] value, should be a string or a list of strings");, +                }, +                if ((entry.getValue() instanceof Map) == false) {, +        return indexPatterns.toArray(new String[indexPatterns.size()]);, +, +        if (in.getVersion().onOrAfter(V_5_1_0)) {, +            indexPatterns = in.readList(StreamInput::readString);, +        } else {, +            indexPatterns = Collections.singletonList(in.readString());, +        }, +        if (out.getVersion().onOrAfter(V_5_1_0)) {, +            out.writeStringList(indexPatterns);, +        } else {, +            out.writeString(indexPatterns.size() > 0 ? indexPatterns.get(0) : "");, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequest.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.logging.DeprecationLogger;, +import org.elasticsearch.common.logging.Loggers;, +import java.util.Collections;, +import java.util.List;, +import java.util.stream.Collectors;, +    private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(PutIndexTemplateRequest.class));, +, +    public static final Version V_5_1_0 = Version.fromId(5010099);, +, +    private List<String> indexPatterns;, +        if (indexPatterns == null || indexPatterns.size() == 0) {, +            validationException = addValidationError("pattern is missing", validationException);, +    public PutIndexTemplateRequest patterns(List<String> indexPatterns) {, +        this.indexPatterns = indexPatterns;, +    public List<String> patterns() {, +        return this.indexPatterns;, +                // This is needed to allow for bwc (beats, logstash) with pre-5.0 templates (#21009), +                if(entry.getValue() instanceof String) {, +                    DEPRECATION_LOGGER.deprecated("Deprecated field [template] used, replaced by [index_patterns]");, +                    patterns(Collections.singletonList((String) entry.getValue()));, +                }, +            } else if (name.equals("index_patterns")) {, +                if(entry.getValue() instanceof String) {, +                    patterns(Collections.singletonList((String) entry.getValue()));, +                } else if (entry.getValue() instanceof List) {, +                    List<String> elements = ((List<?>) entry.getValue()).stream().map(Object::toString).collect(Collectors.toList());, +                    patterns(elements);, +                } else {, +                    throw new IllegalArgumentException("Malformed [template] value, should be a string or a list of strings");, +                }, +                if ((entry.getValue() instanceof Map) == false) {, +        return indexPatterns.toArray(new String[indexPatterns.size()]);, +, +        if (in.getVersion().onOrAfter(V_5_1_0)) {, +            indexPatterns = in.readList(StreamInput::readString);, +        } else {, +            indexPatterns = Collections.singletonList(in.readString());, +        }, +        if (out.getVersion().onOrAfter(V_5_1_0)) {, +            out.writeStringList(indexPatterns);, +        } else {, +            out.writeString(indexPatterns.size() > 0 ? indexPatterns.get(0) : "");, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequestBuilder.java, +import java.util.Collections;, +import java.util.List;, +     * Sets the match expression that will be used to match on indices created., +     *, +     * @deprecated Replaced by {@link #setPatterns(List)}, +    @Deprecated, +    public PutIndexTemplateRequestBuilder setTemplate(String indexPattern) {, +        return setPatterns(Collections.singletonList(indexPattern));, +    }]