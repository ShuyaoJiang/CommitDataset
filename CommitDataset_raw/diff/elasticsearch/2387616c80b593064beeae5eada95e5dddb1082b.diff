[+++ b/CONTRIBUTING.md, +++ b/CONTRIBUTING.md, +++ b/Vagrantfile, +, +      # https://github.com/elastic/elasticsearch/issues/30295, +      config.vm.provider 'virtualbox' do |vbox|, +        vbox.customize ['storagectl', :id, '--name', 'SATA Controller', '--hostiocache', 'on'], +      end, +++ b/CONTRIBUTING.md, +++ b/Vagrantfile, +, +      # https://github.com/elastic/elasticsearch/issues/30295, +      config.vm.provider 'virtualbox' do |vbox|, +        vbox.customize ['storagectl', :id, '--name', 'SATA Controller', '--hostiocache', 'on'], +      end, +++ b/benchmarks/README.md, +Just run `gradle :benchmarks:jmh` from the project root directory. It will build all microbenchmarks, execute them and print the result., +Benchmarks are always run via Gradle with `gradle :benchmarks:jmh`., +Running via an IDE is not supported as the results are meaningless (we have no control over the JVM running the benchmarks)., +, +If you want to run a specific benchmark class, e.g. `org.elasticsearch.benchmark.MySampleBenchmark` or have special requirements , +generate the uberjar with `gradle :benchmarks:jmhJar` and run it directly with:, +java -jar benchmarks/build/distributions/elasticsearch-benchmarks-*.jar, +JMH supports lots of command line parameters. Add `-h` to the command above to see the available command line options., +++ b/CONTRIBUTING.md, +++ b/Vagrantfile, +, +      # https://github.com/elastic/elasticsearch/issues/30295, +      config.vm.provider 'virtualbox' do |vbox|, +        vbox.customize ['storagectl', :id, '--name', 'SATA Controller', '--hostiocache', 'on'], +      end, +++ b/benchmarks/README.md, +Just run `gradle :benchmarks:jmh` from the project root directory. It will build all microbenchmarks, execute them and print the result., +Benchmarks are always run via Gradle with `gradle :benchmarks:jmh`., +Running via an IDE is not supported as the results are meaningless (we have no control over the JVM running the benchmarks)., +, +If you want to run a specific benchmark class, e.g. `org.elasticsearch.benchmark.MySampleBenchmark` or have special requirements , +generate the uberjar with `gradle :benchmarks:jmhJar` and run it directly with:, +java -jar benchmarks/build/distributions/elasticsearch-benchmarks-*.jar, +JMH supports lots of command line parameters. Add `-h` to the command above to see the available command line options., +++ b/benchmarks/build.gradle, +, +// order of this section matters, see: https://github.com/johnrengelman/shadow/issues/336, +apply plugin: 'application' // have the shadow plugin provide the runShadow task, +apply plugin: 'com.github.johnrengelman.shadow' // build an uberjar with all benchmarks, +forbiddenApis {, +    ignoreFailures = true, +}, +, +runShadow {, +    executable = new File(project.runtimeJavaHome, 'bin/java'), +}, +, +// alias the shadowJar and runShadow tasks to abstract from the concrete plugin that we are using and provide a more consistent interface, +task jmhJar(, +        dependsOn: shadowJar,, +        description: 'Generates an uberjar with the microbenchmarks and all dependencies',, +        group: 'Benchmark', +), +, +task jmh(, +        dependsOn: runShadow,, +        description: 'Runs all microbenchmarks',, +        group: 'Benchmark', +), +++ b/CONTRIBUTING.md, +++ b/Vagrantfile, +, +      # https://github.com/elastic/elasticsearch/issues/30295, +      config.vm.provider 'virtualbox' do |vbox|, +        vbox.customize ['storagectl', :id, '--name', 'SATA Controller', '--hostiocache', 'on'], +      end, +++ b/benchmarks/README.md, +Just run `gradle :benchmarks:jmh` from the project root directory. It will build all microbenchmarks, execute them and print the result., +Benchmarks are always run via Gradle with `gradle :benchmarks:jmh`., +Running via an IDE is not supported as the results are meaningless (we have no control over the JVM running the benchmarks)., +, +If you want to run a specific benchmark class, e.g. `org.elasticsearch.benchmark.MySampleBenchmark` or have special requirements , +generate the uberjar with `gradle :benchmarks:jmhJar` and run it directly with:, +java -jar benchmarks/build/distributions/elasticsearch-benchmarks-*.jar, +JMH supports lots of command line parameters. Add `-h` to the command above to see the available command line options., +++ b/benchmarks/build.gradle, +, +// order of this section matters, see: https://github.com/johnrengelman/shadow/issues/336, +apply plugin: 'application' // have the shadow plugin provide the runShadow task, +apply plugin: 'com.github.johnrengelman.shadow' // build an uberjar with all benchmarks, +forbiddenApis {, +    ignoreFailures = true, +}, +, +runShadow {, +    executable = new File(project.runtimeJavaHome, 'bin/java'), +}, +, +// alias the shadowJar and runShadow tasks to abstract from the concrete plugin that we are using and provide a more consistent interface, +task jmhJar(, +        dependsOn: shadowJar,, +        description: 'Generates an uberjar with the microbenchmarks and all dependencies',, +        group: 'Benchmark', +)]