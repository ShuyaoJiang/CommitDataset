[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/ShardFlushRequest.java, +import org.elasticsearch.action.support.ActiveShardCount;, +        this.waitForActiveShards = ActiveShardCount.NONE; // don't wait for any active shards before proceeding, by default, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/ShardFlushRequest.java, +import org.elasticsearch.action.support.ActiveShardCount;, +        this.waitForActiveShards = ActiveShardCount.NONE; // don't wait for any active shards before proceeding, by default, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/ShardFlushRequest.java, +import org.elasticsearch.action.support.ActiveShardCount;, +        this.waitForActiveShards = ActiveShardCount.NONE; // don't wait for any active shards before proceeding, by default, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.ActiveShardCount;, +import java.util.function.Supplier;, +, +    private static final Supplier<BasicReplicationRequest> requestSupplier = () -> {, +        BasicReplicationRequest req = new BasicReplicationRequest();, +        req.waitForActiveShards(ActiveShardCount.NONE);, +        return req;, +    };, +                indexNameExpressionResolver, requestSupplier, requestSupplier, ThreadPool.Names.REFRESH);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/ShardFlushRequest.java, +import org.elasticsearch.action.support.ActiveShardCount;, +        this.waitForActiveShards = ActiveShardCount.NONE; // don't wait for any active shards before proceeding, by default, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.ActiveShardCount;, +import java.util.function.Supplier;, +, +    private static final Supplier<BasicReplicationRequest> requestSupplier = () -> {, +        BasicReplicationRequest req = new BasicReplicationRequest();, +        req.waitForActiveShards(ActiveShardCount.NONE);, +        return req;, +    };, +                indexNameExpressionResolver, requestSupplier, requestSupplier, ThreadPool.Names.REFRESH);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +                                boolean executeOnReplicas, Replicas<ReplicaRequest> replicas,, +        final String activeShardCountFailure = checkActiveShardCount();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/ShardFlushRequest.java, +import org.elasticsearch.action.support.ActiveShardCount;, +        this.waitForActiveShards = ActiveShardCount.NONE; // don't wait for any active shards before proceeding, by default, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.ActiveShardCount;, +import java.util.function.Supplier;, +, +    private static final Supplier<BasicReplicationRequest> requestSupplier = () -> {, +        BasicReplicationRequest req = new BasicReplicationRequest();, +        req.waitForActiveShards(ActiveShardCount.NONE);, +        return req;, +    };, +                indexNameExpressionResolver, requestSupplier, requestSupplier, ThreadPool.Names.REFRESH);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +                                boolean executeOnReplicas, Replicas<ReplicaRequest> replicas,, +        final String activeShardCountFailure = checkActiveShardCount();, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationRequest.java, +    protected ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/ShardFlushRequest.java, +import org.elasticsearch.action.support.ActiveShardCount;, +        this.waitForActiveShards = ActiveShardCount.NONE; // don't wait for any active shards before proceeding, by default, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.ActiveShardCount;, +import java.util.function.Supplier;, +, +    private static final Supplier<BasicReplicationRequest> requestSupplier = () -> {, +        BasicReplicationRequest req = new BasicReplicationRequest();, +        req.waitForActiveShards(ActiveShardCount.NONE);, +        return req;, +    };, +                indexNameExpressionResolver, requestSupplier, requestSupplier, ThreadPool.Names.REFRESH);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +                                boolean executeOnReplicas, Replicas<ReplicaRequest> replicas,, +        final String activeShardCountFailure = checkActiveShardCount();, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationRequest.java, +    protected ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                executeOnReplicas, replicasProxy, clusterService::state, logger, actionName, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/ShardFlushRequest.java, +import org.elasticsearch.action.support.ActiveShardCount;, +        this.waitForActiveShards = ActiveShardCount.NONE; // don't wait for any active shards before proceeding, by default, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.ActiveShardCount;, +import java.util.function.Supplier;, +, +    private static final Supplier<BasicReplicationRequest> requestSupplier = () -> {, +        BasicReplicationRequest req = new BasicReplicationRequest();, +        req.waitForActiveShards(ActiveShardCount.NONE);, +        return req;, +    };, +                indexNameExpressionResolver, requestSupplier, requestSupplier, ThreadPool.Names.REFRESH);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +                                boolean executeOnReplicas, Replicas<ReplicaRequest> replicas,, +        final String activeShardCountFailure = checkActiveShardCount();, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationRequest.java, +    protected ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                executeOnReplicas, replicasProxy, clusterService::state, logger, actionName, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/ReplicationOperationTests.java]