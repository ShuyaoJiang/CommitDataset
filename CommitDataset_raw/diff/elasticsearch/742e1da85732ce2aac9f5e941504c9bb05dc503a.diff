[+++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, BasicReplicationRequest, ReplicationResponse> {, +    protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new BasicReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, BasicReplicationRequest, ReplicationResponse> {, +    protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new BasicReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, BasicReplicationRequest::new, BasicReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, BasicReplicationRequest> shardOperationOnPrimary(MetaData metaData, BasicReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(BasicReplicationRequest request) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, BasicReplicationRequest, ReplicationResponse> {, +    protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new BasicReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, BasicReplicationRequest::new, BasicReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, BasicReplicationRequest> shardOperationOnPrimary(MetaData metaData, BasicReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(BasicReplicationRequest request) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportShardMultiPercolateAction.java, +    public static class Request extends SingleShardRequest<Request> implements IndicesRequest {, +                    items.add(new Item(slot, in.readThrowable()));, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, BasicReplicationRequest, ReplicationResponse> {, +    protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new BasicReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, BasicReplicationRequest::new, BasicReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, BasicReplicationRequest> shardOperationOnPrimary(MetaData metaData, BasicReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(BasicReplicationRequest request) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportShardMultiPercolateAction.java, +    public static class Request extends SingleShardRequest<Request> implements IndicesRequest {, +                    items.add(new Item(slot, in.readThrowable()));, +++ b/core/src/main/java/org/elasticsearch/action/support/HandledTransportAction.java, +public abstract class HandledTransportAction<Request extends ActionRequest<Request>, Response extends ActionResponse>, +        extends TransportAction<Request, Response> {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, BasicReplicationRequest, ReplicationResponse> {, +    protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new BasicReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, BasicReplicationRequest::new, BasicReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, BasicReplicationRequest> shardOperationOnPrimary(MetaData metaData, BasicReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(BasicReplicationRequest request) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportShardMultiPercolateAction.java, +    public static class Request extends SingleShardRequest<Request> implements IndicesRequest {, +                    items.add(new Item(slot, in.readThrowable()));, +++ b/core/src/main/java/org/elasticsearch/action/support/HandledTransportAction.java, +public abstract class HandledTransportAction<Request extends ActionRequest<Request>, Response extends ActionResponse>, +        extends TransportAction<Request, Response> {, +++ b/core/src/main/java/org/elasticsearch/action/support/TransportAction.java, +public abstract class TransportAction<Request extends ActionRequest<Request>, Response extends ActionResponse> extends AbstractComponent {, +    private static class RequestFilterChain<Request extends ActionRequest<Request>, Response extends ActionResponse> implements ActionFilterChain {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportRefreshAction extends TransportBroadcastReplicationAction<RefreshRequest, RefreshResponse, BasicReplicationRequest, ReplicationResponse> {, +    protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) {, +        return new BasicReplicationRequest(request, shardId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.action.support.replication.BasicReplicationRequest;, +public class TransportShardRefreshAction extends TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> {, +                actionFilters, indexNameExpressionResolver, BasicReplicationRequest::new, BasicReplicationRequest::new, ThreadPool.Names.REFRESH);, +    protected Tuple<ReplicationResponse, BasicReplicationRequest> shardOperationOnPrimary(MetaData metaData, BasicReplicationRequest shardRequest) throws Throwable {, +    protected void shardOperationOnReplica(BasicReplicationRequest request) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportShardMultiPercolateAction.java]