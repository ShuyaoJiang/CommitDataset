[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportResumeFollowAction.java, +import org.elasticsearch.action.support.master.TransportMasterNodeAction;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +public class TransportResumeFollowAction extends TransportMasterNodeAction<ResumeFollowAction.Request, AcknowledgedResponse> {, +            final IndexNameExpressionResolver indexNameExpressionResolver,, +        super(ResumeFollowAction.NAME, true, transportService, clusterService, threadPool, actionFilters,, +            ResumeFollowAction.Request::new, indexNameExpressionResolver);, +    protected String executor() {, +        return ThreadPool.Names.SAME;, +    }, +, +    @Override, +    protected AcknowledgedResponse newResponse() {, +        return new AcknowledgedResponse();, +    }, +, +    @Override, +    protected ClusterBlockException checkBlock(ResumeFollowAction.Request request, ClusterState state) {, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +    }, +, +    @Override, +    protected void masterOperation(final ResumeFollowAction.Request request,, +                                   ClusterState state,, +                                   final ActionListener<AcknowledgedResponse> listener) throws Exception {, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportResumeFollowAction.java, +import org.elasticsearch.action.support.master.TransportMasterNodeAction;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +public class TransportResumeFollowAction extends TransportMasterNodeAction<ResumeFollowAction.Request, AcknowledgedResponse> {, +            final IndexNameExpressionResolver indexNameExpressionResolver,, +        super(ResumeFollowAction.NAME, true, transportService, clusterService, threadPool, actionFilters,, +            ResumeFollowAction.Request::new, indexNameExpressionResolver);, +    protected String executor() {, +        return ThreadPool.Names.SAME;, +    }, +, +    @Override, +    protected AcknowledgedResponse newResponse() {, +        return new AcknowledgedResponse();, +    }, +, +    @Override, +    protected ClusterBlockException checkBlock(ResumeFollowAction.Request request, ClusterState state) {, +        return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE);, +    }, +, +    @Override, +    protected void masterOperation(final ResumeFollowAction.Request request,, +                                   ClusterState state,, +                                   final ActionListener<AcknowledgedResponse> listener) throws Exception {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ccr/action/ResumeFollowAction.java, +import org.elasticsearch.action.support.master.MasterNodeRequest;, +    public static class Request extends MasterNodeRequest<Request> implements ToXContentObject {]