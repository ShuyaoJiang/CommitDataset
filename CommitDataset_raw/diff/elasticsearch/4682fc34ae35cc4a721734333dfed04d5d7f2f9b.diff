[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Adds stored fields to load and return (note, it must be stored) as part of the search request., +     * To disable the stored fields entirely (source and metadata fields) use {@code storedField("_none_")}., +     * Adds stored fields to load and return (note, it must be stored) as part of the search request., +     * To disable the stored fields entirely (source and metadata fields) use {@code storedField("_none_")}., +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Adds stored fields to load and return (note, it must be stored) as part of the search request., +     * To disable the stored fields entirely (source and metadata fields) use {@code storedField("_none_")}., +     * Adds stored fields to load and return (note, it must be stored) as part of the search request., +     * To disable the stored fields entirely (source and metadata fields) use {@code storedField("_none_")}., +++ b/core/src/main/java/org/elasticsearch/index/query/InnerHitBuilder.java, +import org.elasticsearch.search.fetch.StoredFieldsContext;, +    private StoredFieldsContext storedFieldsContext;, +        if (other.storedFieldsContext != null) {, +            storedFieldsContext = new StoredFieldsContext(other.storedFieldsContext);, +        storedFieldsContext = in.readOptionalWriteable(StoredFieldsContext::new);, +        out.writeOptionalWriteable(storedFieldsContext);, +                scriptField.writeTo(out);, +     * @deprecated Use {@link InnerHitBuilder#getStoredFieldsContext()} instead., +        return storedFieldsContext == null ? null : storedFieldsContext.fieldNames();, +     * Sets the stored fields to load and return., +     * If none are specified, the source of the document will be returned., +        return setStoredFieldNames(fieldNames);, +     * Gets the stored fields context., +    public StoredFieldsContext getStoredFieldsContext() {, +        return storedFieldsContext;, +     * Sets the stored fields to load and return., +     * If none are specified, the source of the document will be returned., +        if (storedFieldsContext == null) {, +            storedFieldsContext = StoredFieldsContext.fromList(fieldNames);, +        } else {, +            storedFieldsContext.addFieldNames(fieldNames);, +        }, +        if (storedFieldsContext != null) {, +            innerHitsContext.storedFieldsContext(storedFieldsContext);, +        if (storedFieldsContext != null) {, +            storedFieldsContext.toXContent(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), builder);, +                Objects.equals(storedFieldsContext, that.storedFieldsContext) &&, +        return Objects.hash(name, nestedPath, parentChildType, from, size, explain, version, trackScores, storedFieldsContext,, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Adds stored fields to load and return (note, it must be stored) as part of the search request., +     * To disable the stored fields entirely (source and metadata fields) use {@code storedField("_none_")}., +     * Adds stored fields to load and return (note, it must be stored) as part of the search request., +     * To disable the stored fields entirely (source and metadata fields) use {@code storedField("_none_")}., +++ b/core/src/main/java/org/elasticsearch/index/query/InnerHitBuilder.java, +import org.elasticsearch.search.fetch.StoredFieldsContext;, +    private StoredFieldsContext storedFieldsContext;, +        if (other.storedFieldsContext != null) {, +            storedFieldsContext = new StoredFieldsContext(other.storedFieldsContext);, +        storedFieldsContext = in.readOptionalWriteable(StoredFieldsContext::new);, +        out.writeOptionalWriteable(storedFieldsContext);, +                scriptField.writeTo(out);, +     * @deprecated Use {@link InnerHitBuilder#getStoredFieldsContext()} instead., +        return storedFieldsContext == null ? null : storedFieldsContext.fieldNames();, +     * Sets the stored fields to load and return., +     * If none are specified, the source of the document will be returned., +        return setStoredFieldNames(fieldNames);, +     * Gets the stored fields context., +    public StoredFieldsContext getStoredFieldsContext() {, +        return storedFieldsContext;, +     * Sets the stored fields to load and return., +     * If none are specified, the source of the document will be returned., +        if (storedFieldsContext == null) {, +            storedFieldsContext = StoredFieldsContext.fromList(fieldNames);, +        } else {, +            storedFieldsContext.addFieldNames(fieldNames);, +        }, +        if (storedFieldsContext != null) {, +            innerHitsContext.storedFieldsContext(storedFieldsContext);, +        if (storedFieldsContext != null) {, +            storedFieldsContext.toXContent(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), builder);, +                Objects.equals(storedFieldsContext, that.storedFieldsContext) &&, +        return Objects.hash(name, nestedPath, parentChildType, from, size, explain, version, trackScores, storedFieldsContext,, +++ b/core/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java, +import org.elasticsearch.search.fetch.StoredFieldsContext;, +, +        StoredFieldsContext storedFieldsContext =, +            StoredFieldsContext.fromRestRequest(SearchSourceBuilder.STORED_FIELDS_FIELD.getPreferredName(), request);, +        if (storedFieldsContext != null) {, +            searchSourceBuilder.storedFields(storedFieldsContext);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Adds stored fields to load and return (note, it must be stored) as part of the search request., +     * To disable the stored fields entirely (source and metadata fields) use {@code storedField("_none_")}., +     * Adds stored fields to load and return (note, it must be stored) as part of the search request., +     * To disable the stored fields entirely (source and metadata fields) use {@code storedField("_none_")}., +++ b/core/src/main/java/org/elasticsearch/index/query/InnerHitBuilder.java, +import org.elasticsearch.search.fetch.StoredFieldsContext;, +    private StoredFieldsContext storedFieldsContext;, +        if (other.storedFieldsContext != null) {, +            storedFieldsContext = new StoredFieldsContext(other.storedFieldsContext);, +        storedFieldsContext = in.readOptionalWriteable(StoredFieldsContext::new);, +        out.writeOptionalWriteable(storedFieldsContext);, +                scriptField.writeTo(out);, +     * @deprecated Use {@link InnerHitBuilder#getStoredFieldsContext()} instead., +        return storedFieldsContext == null ? null : storedFieldsContext.fieldNames();, +     * Sets the stored fields to load and return., +     * If none are specified, the source of the document will be returned., +        return setStoredFieldNames(fieldNames);, +     * Gets the stored fields context., +    public StoredFieldsContext getStoredFieldsContext() {]