[+++ b/core/src/main/java/org/elasticsearch/search/profile/query/ProfileWeight.java, +import org.apache.lucene.search.ScorerSupplier;, +        ScorerSupplier supplier = scorerSupplier(context);, +        if (supplier == null) {, +            return null;, +        }, +        return supplier.get(false);, +    }, +, +    @Override, +    public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {, +        final ScorerSupplier subQueryScorerSupplier;, +            subQueryScorerSupplier = subQueryWeight.scorerSupplier(context);, +        if (subQueryScorerSupplier == null) {, +        final ProfileWeight weight = this;, +        return new ScorerSupplier() {, +, +            @Override, +            public Scorer get(boolean randomAccess) throws IOException {, +                timer.start();, +                try {, +                    return new ProfileScorer(weight, subQueryScorerSupplier.get(randomAccess), profile);, +                } finally {, +                    timer.stop();, +                }, +            }, +, +            @Override, +            public long cost() {, +                timer.start();, +                try {, +                    return subQueryScorerSupplier.cost();, +                } finally {, +                    timer.stop();, +                }, +            }, +        };, +++ b/core/src/main/java/org/elasticsearch/search/profile/query/ProfileWeight.java, +import org.apache.lucene.search.ScorerSupplier;, +        ScorerSupplier supplier = scorerSupplier(context);, +        if (supplier == null) {, +            return null;, +        }, +        return supplier.get(false);, +    }, +, +    @Override, +    public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {, +        final ScorerSupplier subQueryScorerSupplier;, +            subQueryScorerSupplier = subQueryWeight.scorerSupplier(context);, +        if (subQueryScorerSupplier == null) {, +        final ProfileWeight weight = this;, +        return new ScorerSupplier() {, +, +            @Override, +            public Scorer get(boolean randomAccess) throws IOException {, +                timer.start();, +                try {, +                    return new ProfileScorer(weight, subQueryScorerSupplier.get(randomAccess), profile);, +                } finally {, +                    timer.stop();, +                }, +            }, +, +            @Override, +            public long cost() {, +                timer.start();, +                try {, +                    return subQueryScorerSupplier.cost();, +                } finally {, +                    timer.stop();, +                }, +            }, +        };, +++ b/core/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java, +import org.apache.lucene.index.DirectoryReader;, +import org.apache.lucene.index.IndexWriter;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.search.DocIdSetIterator;, +import org.apache.lucene.search.Explanation;, +import org.apache.lucene.search.Scorer;, +import org.apache.lucene.search.ScorerSupplier;, +import org.apache.lucene.search.Weight;, +import java.util.Set;, +, +    private static class DummyQuery extends Query {, +, +        @Override, +        public String toString(String field) {, +            return getClass().getSimpleName();, +        }, +, +        @Override, +        public boolean equals(Object obj) {, +            return this == obj;, +        }, +, +        @Override, +        public int hashCode() {, +            return 0;]