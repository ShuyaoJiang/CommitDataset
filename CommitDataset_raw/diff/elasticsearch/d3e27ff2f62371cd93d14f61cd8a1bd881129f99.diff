[+++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealmCacheTests.java, +        settings = buildKerberosRealmSettings(, +                writeKeyTab(dir.resolve("key.keytab"), randomAlphaOfLength(4)).toString(), 100, "0m", true,, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealmCacheTests.java, +        settings = buildKerberosRealmSettings(, +                writeKeyTab(dir.resolve("key.keytab"), randomAlphaOfLength(4)).toString(), 100, "0m", true,, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealmSettingsTests.java, +        KerberosRealmTestCase.writeKeyTab(dir.resolve(keytabPathConfig), null);, +        final Settings settings = KerberosRealmTestCase.buildKerberosRealmSettings(keytabPathConfig, maxUsers, cacheTTL, enableDebugLogs,, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealmCacheTests.java, +        settings = buildKerberosRealmSettings(, +                writeKeyTab(dir.resolve("key.keytab"), randomAlphaOfLength(4)).toString(), 100, "0m", true,, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealmSettingsTests.java, +        KerberosRealmTestCase.writeKeyTab(dir.resolve(keytabPathConfig), null);, +        final Settings settings = KerberosRealmTestCase.buildKerberosRealmSettings(keytabPathConfig, maxUsers, cacheTTL, enableDebugLogs,, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealmTestCase.java, +import org.elasticsearch.common.Strings;, +import java.io.BufferedWriter;, +import java.io.IOException;, +import java.nio.charset.StandardCharsets;, +import java.nio.file.Files;, +        settings = buildKerberosRealmSettings(writeKeyTab(dir.resolve("key.keytab"), "asa").toString(),, +, +    /**, +     * Write content to provided keytab file., +     *, +     * @param keytabPath {@link Path} to keytab file., +     * @param content Content for keytab, +     * @return key tab path, +     * @throws IOException if I/O error occurs while writing keytab file, +     */, +    public static Path writeKeyTab(final Path keytabPath, final String content) throws IOException {, +        try (BufferedWriter bufferedWriter = Files.newBufferedWriter(keytabPath, StandardCharsets.US_ASCII)) {, +            bufferedWriter.write(Strings.isNullOrEmpty(content) ? "test-content" : content);, +        }, +        return keytabPath;, +    }, +, +    /**, +     * Build kerberos realm settings with default config and given keytab, +     *, +     * @param keytabPath key tab file path, +     * @return {@link Settings} for kerberos realm, +     */, +    public static Settings buildKerberosRealmSettings(final String keytabPath) {, +        return buildKerberosRealmSettings(keytabPath, 100, "10m", true, false);, +    }, +, +    /**, +     * Build kerberos realm settings, +     *, +     * @param keytabPath key tab file path, +     * @param maxUsersInCache max users to be maintained in cache, +     * @param cacheTTL time to live for cached entries, +     * @param enableDebugging for krb5 logs, +     * @param removeRealmName {@code true} if we want to remove realm name from the username of form 'user@REALM', +     * @return {@link Settings} for kerberos realm, +     */, +    public static Settings buildKerberosRealmSettings(final String keytabPath, final int maxUsersInCache, final String cacheTTL,, +            final boolean enableDebugging, final boolean removeRealmName) {, +        final Settings.Builder builder = Settings.builder().put(KerberosRealmSettings.HTTP_SERVICE_KEYTAB_PATH.getKey(), keytabPath), +                .put(KerberosRealmSettings.CACHE_MAX_USERS_SETTING.getKey(), maxUsersInCache), +                .put(KerberosRealmSettings.CACHE_TTL_SETTING.getKey(), cacheTTL), +                .put(KerberosRealmSettings.SETTING_KRB_DEBUG_ENABLE.getKey(), enableDebugging), +                .put(KerberosRealmSettings.SETTING_REMOVE_REALM_NAME.getKey(), removeRealmName);, +        return builder.build();, +    }, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealmCacheTests.java, +        settings = buildKerberosRealmSettings(, +                writeKeyTab(dir.resolve("key.keytab"), randomAlphaOfLength(4)).toString(), 100, "0m", true,, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealmSettingsTests.java, +        KerberosRealmTestCase.writeKeyTab(dir.resolve(keytabPathConfig), null);, +        final Settings settings = KerberosRealmTestCase.buildKerberosRealmSettings(keytabPathConfig, maxUsers, cacheTTL, enableDebugLogs,, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosRealmTestCase.java, +import org.elasticsearch.common.Strings;, +import java.io.BufferedWriter;, +import java.io.IOException;, +import java.nio.charset.StandardCharsets;, +import java.nio.file.Files;, +        settings = buildKerberosRealmSettings(writeKeyTab(dir.resolve("key.keytab"), "asa").toString(),, +, +    /**, +     * Write content to provided keytab file., +     *, +     * @param keytabPath {@link Path} to keytab file., +     * @param content Content for keytab, +     * @return key tab path, +     * @throws IOException if I/O error occurs while writing keytab file, +     */, +    public static Path writeKeyTab(final Path keytabPath, final String content) throws IOException {, +        try (BufferedWriter bufferedWriter = Files.newBufferedWriter(keytabPath, StandardCharsets.US_ASCII)) {, +            bufferedWriter.write(Strings.isNullOrEmpty(content) ? "test-content" : content);, +        }, +        return keytabPath;, +    }, +, +    /**, +     * Build kerberos realm settings with default config and given keytab, +     *, +     * @param keytabPath key tab file path]