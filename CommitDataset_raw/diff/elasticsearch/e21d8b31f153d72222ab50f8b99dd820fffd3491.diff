[+++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    public PageCacheRecycler(Settings settings) {, +        bytePage = build(type, maxBytePageCount, availableProcessors, new AbstractRecyclerC<byte[]>() {, +        intPage = build(type, maxIntPageCount, availableProcessors, new AbstractRecyclerC<int[]>() {, +        longPage = build(type, maxLongPageCount, availableProcessors, new AbstractRecyclerC<long[]>() {, +        objectPage = build(type, maxObjectPageCount, availableProcessors, new AbstractRecyclerC<Object[]>() {, +    private static <T> Recycler<T> build(Type type, int limit, int availableProcessors, Recycler.C<T> c) {, +            recycler = type.build(c, limit, availableProcessors);, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +        abstract <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors);, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    public PageCacheRecycler(Settings settings) {, +        bytePage = build(type, maxBytePageCount, availableProcessors, new AbstractRecyclerC<byte[]>() {, +        intPage = build(type, maxIntPageCount, availableProcessors, new AbstractRecyclerC<int[]>() {, +        longPage = build(type, maxLongPageCount, availableProcessors, new AbstractRecyclerC<long[]>() {, +        objectPage = build(type, maxObjectPageCount, availableProcessors, new AbstractRecyclerC<Object[]>() {, +    private static <T> Recycler<T> build(Type type, int limit, int availableProcessors, Recycler.C<T> c) {, +            recycler = type.build(c, limit, availableProcessors);, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +        abstract <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java, +        MockPageCacheRecycler mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY);, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    public PageCacheRecycler(Settings settings) {, +        bytePage = build(type, maxBytePageCount, availableProcessors, new AbstractRecyclerC<byte[]>() {, +        intPage = build(type, maxIntPageCount, availableProcessors, new AbstractRecyclerC<int[]>() {, +        longPage = build(type, maxLongPageCount, availableProcessors, new AbstractRecyclerC<long[]>() {, +        objectPage = build(type, maxObjectPageCount, availableProcessors, new AbstractRecyclerC<Object[]>() {, +    private static <T> Recycler<T> build(Type type, int limit, int availableProcessors, Recycler.C<T> c) {, +            recycler = type.build(c, limit, availableProcessors);, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +        abstract <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java, +        MockPageCacheRecycler mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpServerPipeliningTests.java, +        mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY);, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    public PageCacheRecycler(Settings settings) {, +        bytePage = build(type, maxBytePageCount, availableProcessors, new AbstractRecyclerC<byte[]>() {, +        intPage = build(type, maxIntPageCount, availableProcessors, new AbstractRecyclerC<int[]>() {, +        longPage = build(type, maxLongPageCount, availableProcessors, new AbstractRecyclerC<long[]>() {, +        objectPage = build(type, maxObjectPageCount, availableProcessors, new AbstractRecyclerC<Object[]>() {, +    private static <T> Recycler<T> build(Type type, int limit, int availableProcessors, Recycler.C<T> c) {, +            recycler = type.build(c, limit, availableProcessors);, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +        abstract <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java, +        MockPageCacheRecycler mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpServerPipeliningTests.java, +        mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpServerTransportTests.java, +        mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY);, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    public PageCacheRecycler(Settings settings) {, +        bytePage = build(type, maxBytePageCount, availableProcessors, new AbstractRecyclerC<byte[]>() {, +        intPage = build(type, maxIntPageCount, availableProcessors, new AbstractRecyclerC<int[]>() {, +        longPage = build(type, maxLongPageCount, availableProcessors, new AbstractRecyclerC<long[]>() {, +        objectPage = build(type, maxObjectPageCount, availableProcessors, new AbstractRecyclerC<Object[]>() {, +    private static <T> Recycler<T> build(Type type, int limit, int availableProcessors, Recycler.C<T> c) {, +            recycler = type.build(c, limit, availableProcessors);, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +        abstract <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java, +        MockPageCacheRecycler mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpServerPipeliningTests.java, +        mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpServerTransportTests.java, +        mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY);, +++ b/core/src/test/java/org/elasticsearch/index/IndexModuleTests.java, +        PageCacheRecycler recycler = new PageCacheRecycler(settings);, +++ b/core/src/main/java/org/elasticsearch/cache/recycler/PageCacheRecycler.java, +    public PageCacheRecycler(Settings settings) {, +        bytePage = build(type, maxBytePageCount, availableProcessors, new AbstractRecyclerC<byte[]>() {, +        intPage = build(type, maxIntPageCount, availableProcessors, new AbstractRecyclerC<int[]>() {, +        longPage = build(type, maxLongPageCount, availableProcessors, new AbstractRecyclerC<long[]>() {, +        objectPage = build(type, maxObjectPageCount, availableProcessors, new AbstractRecyclerC<Object[]>() {, +    private static <T> Recycler<T> build(Type type, int limit, int availableProcessors, Recycler.C<T> c) {, +            recycler = type.build(c, limit, availableProcessors);, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +            <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors) {, +        abstract <T> Recycler<T> build(Recycler.C<T> c, int limit, int availableProcessors);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java, +        MockPageCacheRecycler mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpServerPipeliningTests.java, +        mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY);, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpServerTransportTests.java, +        mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY);, +++ b/core/src/test/java/org/elasticsearch/index/IndexModuleTests.java, +        PageCacheRecycler recycler = new PageCacheRecycler(settings);]