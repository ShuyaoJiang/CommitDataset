[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/Job.java, +import org.elasticsearch.xpack.ml.utils.ExceptionsHelper;, +    private Job(String jobId, String description, Date createTime, Date finishedTime, Date lastDataTime,, +            analysisConfig = ExceptionsHelper.requireNonNull(configBuilder, ANALYSIS_CONFIG.getPreferredName()).build();, +            dataDescription = ExceptionsHelper.requireNonNull(description, DATA_DESCRIPTION.getPreferredName()).build();, +            if (analysisConfig == null) {, +                throw new IllegalArgumentException(Messages.getMessage(Messages.JOB_CONFIG_MISSING_ANALYSISCONFIG));, +            }, +, +            checkValueNotLessThan(0, "renormalizationWindowDays", renormalizationWindowDays);, +            checkValueNotLessThan(MIN_BACKGROUND_PERSIST_INTERVAL, "backgroundPersistInterval", backgroundPersistInterval);, +            checkValueNotLessThan(0, "modelSnapshotRetentionDays", modelSnapshotRetentionDays);, +            checkValueNotLessThan(0, "resultsRetentionDays", resultsRetentionDays);, +, +            if (!MlStrings.isValidId(id)) {, +                throw new IllegalArgumentException(Messages.getMessage(Messages.INVALID_ID, ID.getPreferredName(), id));, +            }, +            if (id.length() > MAX_JOB_ID_LENGTH) {, +                throw new IllegalArgumentException(Messages.getMessage(Messages.JOB_CONFIG_ID_TOO_LONG, MAX_JOB_ID_LENGTH));, +            }, +, +            if (Strings.isNullOrEmpty(resultsIndexName)) {, +                resultsIndexName = id;, +            } else if (!MlStrings.isValidId(resultsIndexName)) {, +                throw new IllegalArgumentException(Messages.getMessage(Messages.INVALID_ID, RESULTS_INDEX_NAME.getPreferredName()));, +            }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/Job.java, +import org.elasticsearch.xpack.ml.utils.ExceptionsHelper;, +    private Job(String jobId, String description, Date createTime, Date finishedTime, Date lastDataTime,, +            analysisConfig = ExceptionsHelper.requireNonNull(configBuilder, ANALYSIS_CONFIG.getPreferredName()).build();, +            dataDescription = ExceptionsHelper.requireNonNull(description, DATA_DESCRIPTION.getPreferredName()).build();, +            if (analysisConfig == null) {, +                throw new IllegalArgumentException(Messages.getMessage(Messages.JOB_CONFIG_MISSING_ANALYSISCONFIG));, +            }, +, +            checkValueNotLessThan(0, "renormalizationWindowDays", renormalizationWindowDays);, +            checkValueNotLessThan(MIN_BACKGROUND_PERSIST_INTERVAL, "backgroundPersistInterval", backgroundPersistInterval);, +            checkValueNotLessThan(0, "modelSnapshotRetentionDays", modelSnapshotRetentionDays);, +            checkValueNotLessThan(0, "resultsRetentionDays", resultsRetentionDays);, +, +            if (!MlStrings.isValidId(id)) {, +                throw new IllegalArgumentException(Messages.getMessage(Messages.INVALID_ID, ID.getPreferredName(), id));, +            }, +            if (id.length() > MAX_JOB_ID_LENGTH) {, +                throw new IllegalArgumentException(Messages.getMessage(Messages.JOB_CONFIG_ID_TOO_LONG, MAX_JOB_ID_LENGTH));, +            }, +, +            if (Strings.isNullOrEmpty(resultsIndexName)) {, +                resultsIndexName = id;, +            } else if (!MlStrings.isValidId(resultsIndexName)) {, +                throw new IllegalArgumentException(Messages.getMessage(Messages.INVALID_ID, RESULTS_INDEX_NAME.getPreferredName()));, +            }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/action/GetJobsActionResponseTests.java, +            AnalysisConfig.Builder analysisConfig = new AnalysisConfig.Builder(, +                    Collections.singletonList(new Detector.Builder("metric", "some_field").build()));, +            DataDescription.Builder dataDescription = new DataDescription.Builder();, +            String indexName =  "index" + j;, +            Job.Builder builder = new Job.Builder();, +            builder.setId(jobId);, +            builder.setDescription(description);, +            builder.setCreateTime(createTime);, +            builder.setFinishedTime(finishedTime);, +            builder.setLastDataTime(lastDataTime);, +            builder.setAnalysisConfig(analysisConfig);, +            builder.setAnalysisLimits(analysisLimits);, +            builder.setDataDescription(dataDescription);, +            builder.setModelDebugConfig(modelDebugConfig);, +            builder.setRenormalizationWindowDays(normalizationWindowDays);, +            builder.setBackgroundPersistInterval(backgroundPersistInterval);, +            builder.setModelSnapshotRetentionDays(modelSnapshotRetentionDays);, +            builder.setResultsRetentionDays(resultsRetentionDays);, +            builder.setCustomSettings(customConfig);, +            builder.setModelSnapshotId(modelSnapshotId);, +            builder.setResultsIndexName(indexName);, +            builder.setDeleted(randomBoolean());, +            Job job = builder.build();]