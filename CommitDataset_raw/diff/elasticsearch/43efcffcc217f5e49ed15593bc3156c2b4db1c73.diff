[+++ b/core/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByScrollRequest.java, +        if (size < 0) {, +            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]");, +        }, +        if (size != -1) {, +            // Size is split between workers. This means the size might round, +            // down!, +            request.setSize(size == SIZE_ALL_MATCHES ? SIZE_ALL_MATCHES : size / slices);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByScrollRequest.java, +        if (size < 0) {, +            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]");, +        }, +        if (size != -1) {, +            // Size is split between workers. This means the size might round, +            // down!, +            request.setSize(size == SIZE_ALL_MATCHES ? SIZE_ALL_MATCHES : size / slices);, +        }, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +        if (size < 0) {, +            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByScrollRequest.java, +        if (size < 0) {, +            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]");, +        }, +        if (size != -1) {, +            // Size is split between workers. This means the size might round, +            // down!, +            request.setSize(size == SIZE_ALL_MATCHES ? SIZE_ALL_MATCHES : size / slices);, +        }, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +        if (size < 0) {, +            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]");, +        }, +++ b/core/src/test/java/org/elasticsearch/index/reindex/AbstractBulkByScrollRequestTestCase.java, +        if (randomBoolean()) {, +            original.setSize(between(0, Integer.MAX_VALUE));, +        }, +++ b/core/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByScrollRequest.java, +        if (size < 0) {, +            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]");, +        }, +        if (size != -1) {, +            // Size is split between workers. This means the size might round, +            // down!, +            request.setSize(size == SIZE_ALL_MATCHES ? SIZE_ALL_MATCHES : size / slices);, +        }, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +        if (size < 0) {, +            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]");, +        }, +++ b/core/src/test/java/org/elasticsearch/index/reindex/AbstractBulkByScrollRequestTestCase.java, +        if (randomBoolean()) {, +            original.setSize(between(0, Integer.MAX_VALUE));, +        }, +++ b/core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java, +    public void testNegativeSizeErrors() {, +        int randomSize = randomIntBetween(-100000, -2);, +        IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,, +                () -> new SearchSourceBuilder().size(randomSize));, +        assertEquals("[size] parameter cannot be negative, found [" + randomSize + "]", expected.getMessage());, +        expected = expectThrows(IllegalArgumentException.class, () -> new SearchSourceBuilder().size(-1));, +        assertEquals("[size] parameter cannot be negative, found [-1]", expected.getMessage());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByScrollRequest.java, +        if (size < 0) {, +            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]");, +        }, +        if (size != -1) {, +            // Size is split between workers. This means the size might round, +            // down!, +            request.setSize(size == SIZE_ALL_MATCHES ? SIZE_ALL_MATCHES : size / slices);, +        }, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +        if (size < 0) {, +            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]");, +        }, +++ b/core/src/test/java/org/elasticsearch/index/reindex/AbstractBulkByScrollRequestTestCase.java, +        if (randomBoolean()) {, +            original.setSize(between(0, Integer.MAX_VALUE));, +        }, +++ b/core/src/test/java/org/elasticsearch/search/builder/SearchSourceBuilderTests.java, +    public void testNegativeSizeErrors() {, +        int randomSize = randomIntBetween(-100000, -2);, +        IllegalArgumentException expected = expectThrows(IllegalArgumentException.class,, +                () -> new SearchSourceBuilder().size(randomSize));, +        assertEquals("[size] parameter cannot be negative, found [" + randomSize + "]", expected.getMessage());, +        expected = expectThrows(IllegalArgumentException.class, () -> new SearchSourceBuilder().size(-1));, +        assertEquals("[size] parameter cannot be negative, found [-1]", expected.getMessage());, +    }, +, +++ b/docs/reference/migration/migrate_6_0.asciidoc, +* <<breaking_60_reindex_changes>>, +include::migrate_6_0/reindex.asciidoc[], +, +++ b/core/src/main/java/org/elasticsearch/index/reindex/AbstractBulkByScrollRequest.java, +        if (size < 0) {, +            throw new IllegalArgumentException("[size] parameter cannot be negative, found [" + size + "]");]