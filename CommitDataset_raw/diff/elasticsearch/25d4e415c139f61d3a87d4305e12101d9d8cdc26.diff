[+++ b/modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/CommonAnalysisPlugin.java, +        filters.add(PreConfiguredTokenFilter.singleton("common_grams", false, false,, +        filters.add(PreConfiguredTokenFilter.singleton("edge_ngram", false, false, input ->, +        filters.add(PreConfiguredTokenFilter.singletonWithVersion("edgeNGram", false, false, (reader, version) -> {, +        filters.add(PreConfiguredTokenFilter.singleton("ngram", false, false, reader -> new NGramTokenFilter(reader, 1, 2, false)));, +        filters.add(PreConfiguredTokenFilter.singletonWithVersion("nGram", false, false, (reader, version) -> {, +        filters.add(PreConfiguredTokenFilter.singleton("shingle", false, false, input -> {, +        filters.add(PreConfiguredTokenFilter.singleton("word_delimiter", false, false, input ->, +        filters.add(PreConfiguredTokenFilter.singleton("word_delimiter_graph", false, false, input ->, +++ b/modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/CommonAnalysisPlugin.java, +        filters.add(PreConfiguredTokenFilter.singleton("common_grams", false, false,, +        filters.add(PreConfiguredTokenFilter.singleton("edge_ngram", false, false, input ->, +        filters.add(PreConfiguredTokenFilter.singletonWithVersion("edgeNGram", false, false, (reader, version) -> {, +        filters.add(PreConfiguredTokenFilter.singleton("ngram", false, false, reader -> new NGramTokenFilter(reader, 1, 2, false)));, +        filters.add(PreConfiguredTokenFilter.singletonWithVersion("nGram", false, false, (reader, version) -> {, +        filters.add(PreConfiguredTokenFilter.singleton("shingle", false, false, input -> {, +        filters.add(PreConfiguredTokenFilter.singleton("word_delimiter", false, false, input ->, +        filters.add(PreConfiguredTokenFilter.singleton("word_delimiter_graph", false, false, input ->, +++ b/modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/SynonymsAnalysisTests.java, +import org.elasticsearch.index.analysis.PreConfiguredTokenFilter;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +    public void testPreconfigured() throws IOException {, +            .putList("index.analysis.filter.synonyms.synonyms", "würst, sausage"), +            .put("index.analysis.analyzer.my_analyzer.tokenizer", "standard"), +            .putList("index.analysis.analyzer.my_analyzer.filter", "lowercase", "asciifolding", "synonyms"), +        BaseTokenStreamTestCase.assertAnalyzesTo(indexAnalyzers.get("my_analyzer"), "würst",, +            new String[]{ "wurst", "sausage"},, +            new int[]{ 1, 0 });, +    public void testPreconfiguredTokenFilters() throws IOException {, +        Set<String> disallowedFilters = new HashSet<>(Arrays.asList(, +            "common_grams", "edge_ngram", "edgeNGram", "keyword_repeat", "ngram", "nGram",, +            "shingle", "word_delimiter", "word_delimiter_graph", +        ));, +, +        Settings settings = Settings.builder(), +            .put(IndexMetaData.SETTING_VERSION_CREATED,, +                VersionUtils.randomVersionBetween(random(), Version.V_7_0_0, Version.CURRENT)), +            .put("path.home", createTempDir().toString()), +            .build();, +        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings("index", settings);, +, +        CommonAnalysisPlugin plugin = new CommonAnalysisPlugin();, +, +        for (PreConfiguredTokenFilter tf : plugin.getPreConfiguredTokenFilters()) {, +            if (disallowedFilters.contains(tf.getName())) {, +                IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                    "Expected exception for factory " + tf.getName(), () -> {, +                        tf.get(idxSettings, null, tf.getName(), settings).getSynonymFilter();, +                    });, +                assertEquals(tf.getName(), "Token filter [" + tf.getName(), +                        + "] cannot be used to parse synonyms",, +                    e.getMessage());, +            }, +            else {, +                tf.get(idxSettings, null, tf.getName(), settings).getSynonymFilter();, +            }, +        }, +, +        Settings settings2 = Settings.builder(), +            .put(IndexMetaData.SETTING_VERSION_CREATED,, +                VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, VersionUtils.getPreviousVersion(Version.V_7_0_0))), +            .put("path.home", createTempDir().toString()), +            .putList("common_words", "a", "b"), +            .put("output_unigrams", "true"), +            .build();, +        IndexSettings idxSettings2 = IndexSettingsModule.newIndexSettings("index", settings2);, +, +        List<String> expectedWarnings = new ArrayList<>();, +        for (PreConfiguredTokenFilter tf : plugin.getPreConfiguredTokenFilters()) {, +            if (disallowedFilters.contains(tf.getName())) {, +                tf.get(idxSettings2, null, tf.getName(), settings2).getSynonymFilter();, +                expectedWarnings.add("Token filter [" + tf.getName() + "] will not be usable to parse synonyms after v7.0");, +            }, +            else {, +                tf.get(idxSettings2, null, tf.getName(), settings2).getSynonymFilter();, +            }, +        }, +        assertWarnings(expectedWarnings.toArray(new String[0]));, +    }, +, +++ b/modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/CommonAnalysisPlugin.java, +        filters.add(PreConfiguredTokenFilter.singleton("common_grams", false, false,, +        filters.add(PreConfiguredTokenFilter.singleton("edge_ngram", false, false, input ->, +        filters.add(PreConfiguredTokenFilter.singletonWithVersion("edgeNGram", false, false, (reader, version) -> {, +        filters.add(PreConfiguredTokenFilter.singleton("ngram", false, false, reader -> new NGramTokenFilter(reader, 1, 2, false)));, +        filters.add(PreConfiguredTokenFilter.singletonWithVersion("nGram", false, false, (reader, version) -> {, +        filters.add(PreConfiguredTokenFilter.singleton("shingle", false, false, input -> {, +        filters.add(PreConfiguredTokenFilter.singleton("word_delimiter", false, false, input ->, +        filters.add(PreConfiguredTokenFilter.singleton("word_delimiter_graph", false, false, input ->, +++ b/modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/SynonymsAnalysisTests.java, +import org.elasticsearch.index.analysis.PreConfiguredTokenFilter;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +    public void testPreconfigured() throws IOException {, +            .putList("index.analysis.filter.synonyms.synonyms", "würst, sausage"), +            .put("index.analysis.analyzer.my_analyzer.tokenizer", "standard"), +            .putList("index.analysis.analyzer.my_analyzer.filter", "lowercase", "asciifolding", "synonyms")]