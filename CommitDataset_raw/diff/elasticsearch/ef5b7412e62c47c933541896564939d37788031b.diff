[+++ b/src/main/java/org/elasticsearch/common/geo/ShapeBuilder.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +, +import com.vividsolutions.jts.geom.Coordinate;, +import com.vividsolutions.jts.geom.Geometry;, +import com.vividsolutions.jts.geom.GeometryFactory;, +import com.vividsolutions.jts.geom.LinearRing;, +import com.vividsolutions.jts.geom.MultiPolygon;, +import com.vividsolutions.jts.geom.Polygon;, +     * Creates a new {@link MultiPolygonBuilder} to build a MultiPolygon, +     *, +     * @return MultiPolygonBuilder instance, +     */, +    public static MultiPolygonBuilder newMultiPolygon() {, +        return new MultiPolygonBuilder();, +    }, +, +    /**, +     * Builder for creating a {@link Shape} instance of a MultiPolygon, +     */, +    public static class MultiPolygonBuilder {, +        private final ArrayList<EmbededPolygonBuilder<MultiPolygonBuilder>> polygons = new ArrayList<EmbededPolygonBuilder<MultiPolygonBuilder>>();, +, +        /**, +         * Add a new polygon to the multipolygon, +         * , +         * @return builder for the new polygon, +         */, +        public EmbededPolygonBuilder<MultiPolygonBuilder> polygon() {, +            EmbededPolygonBuilder<MultiPolygonBuilder> builder = new EmbededPolygonBuilder<MultiPolygonBuilder>(this);, +            polygons.add(builder);, +            return builder;, +        }, +, +        public Shape build() {, +            return new JtsGeometry(toMultiPolygon(), GeoShapeConstants.SPATIAL_CONTEXT, true);, +        }, +, +        public MultiPolygon toMultiPolygon() {, +            Polygon[] polygons = new Polygon[this.polygons.size()];, +            for (int i = 0; i<polygons.length; i++) {, +                polygons[i] = this.polygons.get(i).toPolygon();, +            }, +            return GEOMETRY_FACTORY.createMultiPolygon(polygons);, +        }, +, +        public XContentBuilder toXContent(String name, XContentBuilder xcontent) throws IOException {, +            if(name != null) {, +                xcontent.startObject(name);, +            } else {, +                xcontent.startObject();, +            }, +            xcontent.field("type", "multipolygon");, +            emdedXContent("coordinates", xcontent);, +            xcontent.endObject();, +            return xcontent;, +        }, +, +        protected void emdedXContent(String name, XContentBuilder xcontent) throws IOException {, +            if(name != null) {, +                xcontent.startArray(name);, +            } else {, +                xcontent.startArray();, +            }, +            for(EmbededPolygonBuilder<MultiPolygonBuilder> polygon : polygons) {, +                polygon.emdedXContent(null, xcontent);, +            }, +            xcontent.endArray();, +        }, +, +    }, +, +    /**, +     * Builder for creating a {@link Shape} instance of a single Polygon, +     */, +    public static class PolygonBuilder extends EmbededPolygonBuilder<PolygonBuilder> {, +, +        private PolygonBuilder() {, +            super(null);, +        }, +, +        @Override, +        public PolygonBuilder close() {, +            super.close();, +            return this;, +        }, +    }, +, +    /**, +    public static class EmbededPolygonBuilder<E> {, +        private final E parent;, +        private final LinearRingBuilder<EmbededPolygonBuilder<E>> ring = new LinearRingBuilder<EmbededPolygonBuilder<E>>(this);, +        private final ArrayList<LinearRingBuilder<EmbededPolygonBuilder<E>>> holes = new ArrayList<LinearRingBuilder<EmbededPolygonBuilder<E>>>();, +, +        private EmbededPolygonBuilder(E parent) {]