[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrSettings.java, +     * File chunk size to send during recovery, +     */, +    public static final Setting<ByteSizeValue> RECOVERY_CHUNK_SIZE =, +        Setting.byteSizeSetting("ccr.indices.recovery.chunk_size", new ByteSizeValue(1, ByteSizeUnit.MB),, +            new ByteSizeValue(1, ByteSizeUnit.KB), new ByteSizeValue(1, ByteSizeUnit.GB), Setting.Property.Dynamic,, +            Setting.Property.NodeScope);, +, +    /**, +                RECOVERY_CHUNK_SIZE,, +    private volatile ByteSizeValue chunkSize;, +        this.chunkSize = RECOVERY_MAX_BYTES_PER_SECOND.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(RECOVERY_CHUNK_SIZE, this::setChunkSize);, +    private void setChunkSize(ByteSizeValue chunkSize) {, +        this.chunkSize = chunkSize;, +    }, +, +    public ByteSizeValue getChunkSize() {, +        return chunkSize;, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrSettings.java, +     * File chunk size to send during recovery, +     */, +    public static final Setting<ByteSizeValue> RECOVERY_CHUNK_SIZE =, +        Setting.byteSizeSetting("ccr.indices.recovery.chunk_size", new ByteSizeValue(1, ByteSizeUnit.MB),, +            new ByteSizeValue(1, ByteSizeUnit.KB), new ByteSizeValue(1, ByteSizeUnit.GB), Setting.Property.Dynamic,, +            Setting.Property.NodeScope);, +, +    /**, +                RECOVERY_CHUNK_SIZE,, +    private volatile ByteSizeValue chunkSize;, +        this.chunkSize = RECOVERY_MAX_BYTES_PER_SECOND.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(RECOVERY_CHUNK_SIZE, this::setChunkSize);, +    private void setChunkSize(ByteSizeValue chunkSize) {, +        this.chunkSize = chunkSize;, +    }, +, +    public ByteSizeValue getChunkSize() {, +        return chunkSize;, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRepository.java, +            super(repositoryName, indexShard, SNAPSHOT_ID, recoveryState, Math.toIntExact(ccrSettings.getChunkSize().getBytes()));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrSettings.java, +     * File chunk size to send during recovery, +     */, +    public static final Setting<ByteSizeValue> RECOVERY_CHUNK_SIZE =, +        Setting.byteSizeSetting("ccr.indices.recovery.chunk_size", new ByteSizeValue(1, ByteSizeUnit.MB),, +            new ByteSizeValue(1, ByteSizeUnit.KB), new ByteSizeValue(1, ByteSizeUnit.GB), Setting.Property.Dynamic,, +            Setting.Property.NodeScope);, +, +    /**, +                RECOVERY_CHUNK_SIZE,, +    private volatile ByteSizeValue chunkSize;, +        this.chunkSize = RECOVERY_MAX_BYTES_PER_SECOND.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(RECOVERY_CHUNK_SIZE, this::setChunkSize);, +    private void setChunkSize(ByteSizeValue chunkSize) {, +        this.chunkSize = chunkSize;, +    }, +, +    public ByteSizeValue getChunkSize() {, +        return chunkSize;, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRepository.java, +            super(repositoryName, indexShard, SNAPSHOT_ID, recoveryState, Math.toIntExact(ccrSettings.getChunkSize().getBytes()));, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/CcrRepositoryIT.java, +        ClusterUpdateSettingsRequest settingsRequest = new ClusterUpdateSettingsRequest();, +        String chunkSize = randomFrom("4KB", "128KB", "1MB");, +        settingsRequest.persistentSettings(Settings.builder().put(CcrSettings.RECOVERY_CHUNK_SIZE.getKey(), chunkSize));, +        assertAcked(followerClient().admin().cluster().updateSettings(settingsRequest).actionGet());, +, +, +        settingsRequest = new ClusterUpdateSettingsRequest();, +        ByteSizeValue defaultValue = CcrSettings.RECOVERY_CHUNK_SIZE.getDefault(Settings.EMPTY);, +        settingsRequest.persistentSettings(Settings.builder().put(CcrSettings.RECOVERY_CHUNK_SIZE.getKey(), defaultValue));, +        assertAcked(followerClient().admin().cluster().updateSettings(settingsRequest).actionGet());, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrSettings.java, +     * File chunk size to send during recovery, +     */, +    public static final Setting<ByteSizeValue> RECOVERY_CHUNK_SIZE =, +        Setting.byteSizeSetting("ccr.indices.recovery.chunk_size", new ByteSizeValue(1, ByteSizeUnit.MB),, +            new ByteSizeValue(1, ByteSizeUnit.KB), new ByteSizeValue(1, ByteSizeUnit.GB), Setting.Property.Dynamic,, +            Setting.Property.NodeScope);, +, +    /**, +                RECOVERY_CHUNK_SIZE,, +    private volatile ByteSizeValue chunkSize;, +        this.chunkSize = RECOVERY_MAX_BYTES_PER_SECOND.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(RECOVERY_CHUNK_SIZE, this::setChunkSize);, +    private void setChunkSize(ByteSizeValue chunkSize) {, +        this.chunkSize = chunkSize;, +    }, +, +    public ByteSizeValue getChunkSize() {, +        return chunkSize;, +    }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRepository.java]