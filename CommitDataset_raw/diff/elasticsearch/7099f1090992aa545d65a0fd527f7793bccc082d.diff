[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import java.util.HashSet;, +            // don't allow more than one shard copy with same id to be allocated to same node, +            assert distinctNodes() : "more than one shard with same id assigned to same node (shards: " + shards + ")";, +        private boolean distinctNodes() {, +            Set<String> nodes = new HashSet<>();, +            for (ShardRouting shard : shards) {, +                if (shard.assignedToNode()) {, +                    if (nodes.add(shard.currentNodeId()) == false) {, +                        return false;, +                    }, +                    if (shard.relocating()) {, +                        if (nodes.add(shard.relocatingNodeId()) == false) {, +                            return false;, +                        }, +                    }, +                }, +            }, +            return true;, +        }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import java.util.HashSet;, +            // don't allow more than one shard copy with same id to be allocated to same node, +            assert distinctNodes() : "more than one shard with same id assigned to same node (shards: " + shards + ")";, +        private boolean distinctNodes() {, +            Set<String> nodes = new HashSet<>();, +            for (ShardRouting shard : shards) {, +                if (shard.assignedToNode()) {, +                    if (nodes.add(shard.currentNodeId()) == false) {, +                        return false;, +                    }, +                    if (shard.relocating()) {, +                        if (nodes.add(shard.relocatingNodeId()) == false) {, +                            return false;, +                        }, +                    }, +                }, +            }, +            return true;, +        }, +, +++ b/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +        assertAcked(client().admin().cluster().preparePutRepository("test-repo").setType("mock").setVerify(false).setSettings(, +                Settings.builder().put("location", repoPath).put("random_control_io_exception_rate", randomIntBetween(5, 20) / 100f)));, +        assertThat(client().prepareSearch("test-idx").setSize(0).get().getHits().totalHits(), equalTo((long) numDocs));, +                client().admin().cluster().prepareCreateSnapshot("test-repo", "test-snap"), +        } catch (Exception ex) {, +        assertAcked(client().admin().cluster().preparePutRepository("test-repo-2").setType("mock").setVerify(false).setSettings(, +            client().admin().cluster().prepareCreateSnapshot("test-repo-2", "test-snap-2"), +        GetSnapshotsResponse getSnapshotsResponse = client().admin().cluster().prepareGetSnapshots("test-repo-2"), +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +import java.util.HashSet;, +            // don't allow more than one shard copy with same id to be allocated to same node, +            assert distinctNodes() : "more than one shard with same id assigned to same node (shards: " + shards + ")";, +        private boolean distinctNodes() {, +            Set<String> nodes = new HashSet<>();, +            for (ShardRouting shard : shards) {, +                if (shard.assignedToNode()) {, +                    if (nodes.add(shard.currentNodeId()) == false) {, +                        return false;, +                    }, +                    if (shard.relocating()) {, +                        if (nodes.add(shard.relocatingNodeId()) == false) {, +                            return false;, +                        }, +                    }, +                }, +            }, +            return true;, +        }, +, +++ b/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +        assertAcked(client().admin().cluster().preparePutRepository("test-repo").setType("mock").setVerify(false).setSettings(, +                Settings.builder().put("location", repoPath).put("random_control_io_exception_rate", randomIntBetween(5, 20) / 100f)));, +        assertThat(client().prepareSearch("test-idx").setSize(0).get().getHits().totalHits(), equalTo((long) numDocs));, +                client().admin().cluster().prepareCreateSnapshot("test-repo", "test-snap"), +        } catch (Exception ex) {, +        assertAcked(client().admin().cluster().preparePutRepository("test-repo-2").setType("mock").setVerify(false).setSettings(, +            client().admin().cluster().prepareCreateSnapshot("test-repo-2", "test-snap-2"), +        GetSnapshotsResponse getSnapshotsResponse = client().admin().cluster().prepareGetSnapshots("test-repo-2"), +++ b/core/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepository.java]