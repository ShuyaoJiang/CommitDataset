[+++ b/core/src/main/java/org/elasticsearch/search/profile/AbstractProfileBreakdown.java, +    private final long[] counts;, +, +        counts = new long[timingTypes.length];, +        counts[timing.ordinal()] += 1;, +            map.put(timingType.toString() + "_count", counts[timingType.ordinal()]);, +        assert(counts.length == other.counts.length);, +        for (int i = 0; i < counts.length; ++i) {, +            counts[i] += other.counts[i];, +        }, +++ b/core/src/main/java/org/elasticsearch/search/profile/AbstractProfileBreakdown.java, +    private final long[] counts;, +, +        counts = new long[timingTypes.length];, +        counts[timing.ordinal()] += 1;, +            map.put(timingType.toString() + "_count", counts[timingType.ordinal()]);, +        assert(counts.length == other.counts.length);, +        for (int i = 0; i < counts.length; ++i) {, +            counts[i] += other.counts[i];, +        }, +++ b/core/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java, +        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L));, +        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L));, +, +        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L));, +        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L));, +        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L));, +, +        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L));, +        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L));, +        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + "_count").longValue(), greaterThan(0L));, +, +++ b/core/src/main/java/org/elasticsearch/search/profile/AbstractProfileBreakdown.java, +    private final long[] counts;, +, +        counts = new long[timingTypes.length];, +        counts[timing.ordinal()] += 1;, +            map.put(timingType.toString() + "_count", counts[timingType.ordinal()]);, +        assert(counts.length == other.counts.length);, +        for (int i = 0; i < counts.length; ++i) {, +            counts[i] += other.counts[i];, +        }, +++ b/core/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java, +        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L));, +        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L));, +, +        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L));, +        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L));, +        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + "_count").longValue(), equalTo(0L));, +, +        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + "_count").longValue(), greaterThan(0L));, +        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + "_count").longValue(), equalTo(0L));, +        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + "_count").longValue(), equalTo(0L));, +        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + "_count").longValue(), greaterThan(0L));, +, +++ b/docs/reference/search/profile.asciidoc, +      "total": 3,, +      "max_score": 1.078072,, +           "id": "[2aE02wS1R8q_QFnYu6vDVQ][test][1]",, +                          "score": 6352,, +                          "score_count": 1,, +                          "build_scorer": 1800776,, +                          "build_scorer_count": 1,, +                          "match_count": 0,, +                          "create_weight": 667400,, +                          "create_weight_count": 1,, +                          "next_doc": 10563,, +                          "next_doc_count": 2,, +                          "advance": 0,, +                          "advance_count": 0, +                                "score_count": 0,, +                                "build_scorer": 3230,, +                                "build_scorer_count": 1,, +                                "match_count": 0,, +                                "create_weight": 415612,, +                                "create_weight_count": 1,, +                                "next_doc": 0,, +                                "next_doc_count": 0,, +                                "advance": 0,, +                                "advance_count": 0, +                                "score": 5014,]