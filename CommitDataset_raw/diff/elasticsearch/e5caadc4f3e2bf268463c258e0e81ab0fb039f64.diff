[+++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorFactories());, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorFactories());, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +                                                       Map<String, Processor.Factory> processorFactories) throws Exception {, +                    processors.add(readProcessor(processorFactories, entry.getKey(), entry.getValue()));, +    private static Processor readProcessor(Map<String, Processor.Factory> processorFactories, String type, Map<String, Object> config) throws Exception {, +        Processor.Factory factory = processorFactories.get(type);, +            List<Processor> onFailureProcessors = readProcessorConfigs(onFailureProcessorConfigs, processorFactories);, +            Processor processor = factory.create(processorFactories, tag, config);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorFactories());, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +                                                       Map<String, Processor.Factory> processorFactories) throws Exception {, +                    processors.add(readProcessor(processorFactories, entry.getKey(), entry.getValue()));, +    private static Processor readProcessor(Map<String, Processor.Factory> processorFactories, String type, Map<String, Object> config) throws Exception {, +        Processor.Factory factory = processorFactories.get(type);, +            List<Processor> onFailureProcessors = readProcessorConfigs(onFailureProcessorConfigs, processorFactories);, +            Processor processor = factory.create(processorFactories, tag, config);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.stream.Collectors;, +, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.plugins.IngestPlugin;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.threadpool.ThreadPool;, +    public IngestService(Settings settings, ThreadPool threadPool,, +                         Environment env, ScriptService scriptService, List<IngestPlugin> ingestPlugins) {, +        final TemplateService templateService = new InternalTemplateService(scriptService);, +        Map<String, Processor.Factory> processorFactories = new HashMap<>();, +        for (IngestPlugin ingestPlugin : ingestPlugins) {, +            Map<String, Processor.Factory> newProcessors = ingestPlugin.getProcessors(env, scriptService, templateService);, +            for (Map.Entry<String, Processor.Factory> entry : newProcessors.entrySet()) {, +                if (processorFactories.put(entry.getKey(), entry.getValue()) != null) {, +                    throw new IllegalArgumentException("Ingest processor [" + entry.getKey() + "] is already registered");, +                }, +            }, +        }, +        this.pipelineStore = new PipelineStore(settings, Collections.unmodifiableMap(processorFactories));, +        Map<String, Processor.Factory> processorFactories = pipelineStore.getProcessorFactories();, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorFactories());, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +                                                       Map<String, Processor.Factory> processorFactories) throws Exception {, +                    processors.add(readProcessor(processorFactories, entry.getKey(), entry.getValue()));, +    private static Processor readProcessor(Map<String, Processor.Factory> processorFactories, String type, Map<String, Object> config) throws Exception {, +        Processor.Factory factory = processorFactories.get(type);, +            List<Processor> onFailureProcessors = readProcessorConfigs(onFailureProcessorConfigs, processorFactories);, +            Processor processor = factory.create(processorFactories, tag, config);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.stream.Collectors;, +, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.plugins.IngestPlugin;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.threadpool.ThreadPool;, +    public IngestService(Settings settings, ThreadPool threadPool,, +                         Environment env, ScriptService scriptService, List<IngestPlugin> ingestPlugins) {, +        final TemplateService templateService = new InternalTemplateService(scriptService);, +        Map<String, Processor.Factory> processorFactories = new HashMap<>();, +        for (IngestPlugin ingestPlugin : ingestPlugins) {, +            Map<String, Processor.Factory> newProcessors = ingestPlugin.getProcessors(env, scriptService, templateService);, +            for (Map.Entry<String, Processor.Factory> entry : newProcessors.entrySet()) {, +                if (processorFactories.put(entry.getKey(), entry.getValue()) != null) {, +                    throw new IllegalArgumentException("Ingest processor [" + entry.getKey() + "] is already registered");, +                }, +            }, +        }, +        this.pipelineStore = new PipelineStore(settings, Collections.unmodifiableMap(processorFactories));, +        Map<String, Processor.Factory> processorFactories = pipelineStore.getProcessorFactories();, +++ b/core/src/main/java/org/elasticsearch/ingest/Pipeline.java, +        public Pipeline create(String id, Map<String, Object> config, Map<String, Processor.Factory> processorFactories) throws Exception {, +            List<Processor> processors = ConfigurationUtils.readProcessorConfigs(processorConfigs, processorFactories);, +            List<Processor> onFailureProcessors = ConfigurationUtils.readProcessorConfigs(onFailureProcessorConfigs, processorFactories);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorFactories());, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +                                                       Map<String, Processor.Factory> processorFactories) throws Exception {, +                    processors.add(readProcessor(processorFactories, entry.getKey(), entry.getValue()));, +    private static Processor readProcessor(Map<String, Processor.Factory> processorFactories, String type, Map<String, Object> config) throws Exception {, +        Processor.Factory factory = processorFactories.get(type);, +            List<Processor> onFailureProcessors = readProcessorConfigs(onFailureProcessorConfigs, processorFactories);, +            Processor processor = factory.create(processorFactories, tag, config);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.stream.Collectors;, +, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.plugins.IngestPlugin;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.threadpool.ThreadPool;]