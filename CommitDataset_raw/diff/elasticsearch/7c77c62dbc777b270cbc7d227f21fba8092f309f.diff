[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +                      "java.time.txt",, +                      "java.time.chrono.txt",, +                      "java.time.format.txt",, +                      "java.time.temporal.txt",, +                      "java.time.zone.txt",, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +                      "java.time.txt",, +                      "java.time.chrono.txt",, +                      "java.time.format.txt",, +                      "java.time.temporal.txt",, +                      "java.time.zone.txt",, +++ b/modules/lang-painless/src/main/resources/org/elasticsearch/painless/java.time.chrono.txt, +#, +# Licensed to Elasticsearch under one or more contributor, +# license agreements. See the NOTICE file distributed with, +# this work for additional information regarding copyright, +# ownership. Elasticsearch licenses this file to you under, +# the Apache License, Version 2.0 (the "License"); you may, +# not use this file except in compliance with the License., +# You may obtain a copy of the License at, +#, +#    http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing,, +# software distributed under the License is distributed on an, +# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, +# KIND, either express or implied.  See the License for the, +# specific language governing permissions and limitations, +# under the License., +#, +, +#, +# Painless definition file. This defines the hierarchy of classes,, +# what methods and fields they have, etc., +#, +, +#### Interfaces, +, +class ChronoLocalDate -> java.time.chrono.ChronoLocalDate extends Comparable,Temporal,TemporalAccessor,TemporalAdjuster {, +  ChronoLocalDateTime atTime(LocalTime), +  boolean equals(Object), +  String format(DateTimeFormatter), +  ChronoLocalDate from(TemporalAccessor), +  Chronology getChronology(), +  Era getEra(), +  int hashCode(), +  boolean isAfter(ChronoLocalDate), +  boolean isBefore(ChronoLocalDate), +  boolean isEqual(ChronoLocalDate), +  boolean isLeapYear(), +  int lengthOfMonth(), +  int lengthOfYear(), +  ChronoLocalDate minus(TemporalAmount), +  ChronoLocalDate minus(long,TemporalUnit), +  ChronoLocalDate plus(TemporalAmount), +  ChronoLocalDate plus(long,TemporalUnit), +  Comparator timeLineOrder(), +  long toEpochDay(), +  String toString(), +  ChronoPeriod until(ChronoLocalDate), +  ChronoLocalDate with(TemporalAdjuster), +  ChronoLocalDate with(TemporalField,long), +}, +, +class ChronoLocalDateTime -> java.time.chrono.ChronoLocalDateTime extends Comparable,Temporal,TemporalAccessor,TemporalAdjuster {, +  ChronoZonedDateTime atZone(ZoneId), +  boolean equals(Object), +  String format(DateTimeFormatter), +  ChronoLocalDateTime from(TemporalAccessor), +  int hashCode(), +  boolean isAfter(ChronoLocalDateTime), +  boolean isBefore(ChronoLocalDateTime), +  boolean isEqual(ChronoLocalDateTime), +  Chronology getChronology(), +  ChronoLocalDateTime minus(TemporalAmount), +  ChronoLocalDateTime minus(long,TemporalUnit), +  ChronoLocalDateTime plus(TemporalAmount), +  ChronoLocalDateTime plus(long,TemporalUnit), +  Comparator timeLineOrder(), +  long toEpochSecond(ZoneOffset), +  Instant toInstant(ZoneOffset), +  ChronoLocalDate toLocalDate(), +  LocalTime toLocalTime(), +  String toString(), +  ChronoLocalDateTime with(TemporalAdjuster), +  ChronoLocalDateTime with(TemporalField,long), +}, +, +class Chronology -> java.time.chrono.Chronology extends Comparable {, +  ChronoLocalDate date(TemporalAccessor), +  ChronoLocalDate date(Era,int,int,int), +  ChronoLocalDate date(int,int,int), +  ChronoLocalDate dateEpochDay(long), +  ChronoLocalDate dateNow(), +  ChronoLocalDate dateNow(ZoneId), +  ChronoLocalDate dateYearDay(Era,int,int), +  ChronoLocalDate dateYearDay(int,int), +  boolean equals(Object), +  Era eraOf(int)]