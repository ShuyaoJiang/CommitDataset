[+++ b/server/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDVersionAndSeqNoLookup.java, +        // termsEnum can possibly be null here if this leaf contains only no-ops., +        if (termsEnum != null && termsEnum.seekExact(id)) {, +            docsEnum = termsEnum.postings(docsEnum, 0);, +            final Bits liveDocs = context.reader().getLiveDocs();, +            DocIdAndSeqNo result = null;, +            int docID = docsEnum.nextDoc();, +                final NumericDocValues seqNoDV = context.reader().getNumericDocValues(SeqNoFieldMapper.NAME);, +                for (; docID != DocIdSetIterator.NO_MORE_DOCS; docID = docsEnum.nextDoc()) {, +                    final long seqNo;, +                    if (seqNoDV != null && seqNoDV.advanceExact(docID)) {, +                        seqNo = seqNoDV.longValue();, +                    final boolean isLive = (liveDocs == null || liveDocs.get(docID));, +                    if (isLive) {, +                        // The live document must always be the latest copy, thus we can early terminate here., +                        // If a nested docs is live, we return the first doc which doesn't have term (only the last doc has term)., +                        // This should not be an issue since we no longer use primary term as tier breaker when comparing operations., +                        assert result == null || result.seqNo <= seqNo :, +                            "the live doc does not have the highest seq_no; live_seq_no=" + seqNo + " < deleted_seq_no=" + result.seqNo;, +                        return new DocIdAndSeqNo(docID, seqNo, context, isLive);, +                    }, +                    if (result == null || result.seqNo < seqNo) {, +                        result = new DocIdAndSeqNo(docID, seqNo, context, isLive);, +                    }, +                }, +            }, +            return result;, +++ b/server/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDVersionAndSeqNoLookup.java, +        // termsEnum can possibly be null here if this leaf contains only no-ops., +        if (termsEnum != null && termsEnum.seekExact(id)) {, +            docsEnum = termsEnum.postings(docsEnum, 0);, +            final Bits liveDocs = context.reader().getLiveDocs();, +            DocIdAndSeqNo result = null;, +            int docID = docsEnum.nextDoc();, +                final NumericDocValues seqNoDV = context.reader().getNumericDocValues(SeqNoFieldMapper.NAME);, +                for (; docID != DocIdSetIterator.NO_MORE_DOCS; docID = docsEnum.nextDoc()) {, +                    final long seqNo;, +                    if (seqNoDV != null && seqNoDV.advanceExact(docID)) {, +                        seqNo = seqNoDV.longValue();, +                    final boolean isLive = (liveDocs == null || liveDocs.get(docID));, +                    if (isLive) {, +                        // The live document must always be the latest copy, thus we can early terminate here., +                        // If a nested docs is live, we return the first doc which doesn't have term (only the last doc has term)., +                        // This should not be an issue since we no longer use primary term as tier breaker when comparing operations., +                        assert result == null || result.seqNo <= seqNo :, +                            "the live doc does not have the highest seq_no; live_seq_no=" + seqNo + " < deleted_seq_no=" + result.seqNo;, +                        return new DocIdAndSeqNo(docID, seqNo, context, isLive);, +                    }, +                    if (result == null || result.seqNo < seqNo) {, +                        result = new DocIdAndSeqNo(docID, seqNo, context, isLive);, +                    }, +                }, +            }, +            return result;, +++ b/server/src/main/java/org/elasticsearch/common/lucene/uid/VersionsAndSeqNoResolver.java, +        public final boolean isLive;, +        DocIdAndSeqNo(int docId, long seqNo, LeafReaderContext context, boolean isLive) {, +            this.isLive = isLive;, +     * Loads the internal docId and sequence number of the latest copy for a given uid from the provided reader., +     * The flag {@link DocIdAndSeqNo#isLive} indicates whether the returned document is live or (soft)deleted., +     * This returns {@code null} if no such document matching the given term uid., +        final PerThreadIDVersionAndSeqNoLookup[] lookups = getLookupState(reader, term.field());, +        final List<LeafReaderContext> leaves = reader.leaves();, +        DocIdAndSeqNo latest = null;, +            final PerThreadIDVersionAndSeqNoLookup lookup = lookups[leaf.ord];, +            final DocIdAndSeqNo result = lookup.lookupSeqNo(term.bytes(), leaf);, +            if (result == null) {, +                continue;, +            }, +            if (result.isLive) {, +                // The live document must always be the latest copy, thus we can early terminate here., +                assert latest == null || latest.seqNo <= result.seqNo :, +                    "the live doc does not have the highest seq_no; live_seq_no=" + result.seqNo + " < deleted_seq_no=" + latest.seqNo;, +            if (latest == null || latest.seqNo < result.seqNo) {, +                latest = result;, +        return latest;, +++ b/server/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDVersionAndSeqNoLookup.java, +        // termsEnum can possibly be null here if this leaf contains only no-ops., +        if (termsEnum != null && termsEnum.seekExact(id)) {, +            docsEnum = termsEnum.postings(docsEnum, 0);, +            final Bits liveDocs = context.reader().getLiveDocs();, +            DocIdAndSeqNo result = null;, +            int docID = docsEnum.nextDoc();, +                final NumericDocValues seqNoDV = context.reader().getNumericDocValues(SeqNoFieldMapper.NAME);, +                for (; docID != DocIdSetIterator.NO_MORE_DOCS; docID = docsEnum.nextDoc()) {, +                    final long seqNo;, +                    if (seqNoDV != null && seqNoDV.advanceExact(docID)) {, +                        seqNo = seqNoDV.longValue();, +                    final boolean isLive = (liveDocs == null || liveDocs.get(docID));, +                    if (isLive) {, +                        // The live document must always be the latest copy, thus we can early terminate here., +                        // If a nested docs is live, we return the first doc which doesn't have term (only the last doc has term)., +                        // This should not be an issue since we no longer use primary term as tier breaker when comparing operations., +                        assert result == null || result.seqNo <= seqNo :, +                            "the live doc does not have the highest seq_no; live_seq_no=" + seqNo + " < deleted_seq_no=" + result.seqNo;, +                        return new DocIdAndSeqNo(docID, seqNo, context, isLive);, +                    }, +                    if (result == null || result.seqNo < seqNo) {, +                        result = new DocIdAndSeqNo(docID, seqNo, context, isLive);, +                    }]