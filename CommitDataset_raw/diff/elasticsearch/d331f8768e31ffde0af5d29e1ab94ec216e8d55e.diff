[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import java.util.Iterator;, +    /** pointer to Iterable.iterator() */, +    private static final MethodHandle ITERATOR;, +            ITERATOR = lookup.findVirtual(Iterable.class, "iterator", MethodType.methodType(Iterator.class));, +    /**, +     * Returns a method handle to do iteration (for enhanced for loop), +     * @param receiverClass Class of the array to load the value from, +     * @return a MethodHandle that accepts the receiver as first argument, returns iterator, +     */, +    static MethodHandle lookupIterator(Class<?> receiverClass) {, +        if (Iterable.class.isAssignableFrom(receiverClass)) {, +            return ITERATOR;, +        } else {, +            // TODO: arrays, +            throw new IllegalArgumentException("Cannot iterate over [" + receiverClass.getCanonicalName() + "]");, +        }, +    }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import java.util.Iterator;, +    /** pointer to Iterable.iterator() */, +    private static final MethodHandle ITERATOR;, +            ITERATOR = lookup.findVirtual(Iterable.class, "iterator", MethodType.methodType(Iterator.class));, +    /**, +     * Returns a method handle to do iteration (for enhanced for loop), +     * @param receiverClass Class of the array to load the value from, +     * @return a MethodHandle that accepts the receiver as first argument, returns iterator, +     */, +    static MethodHandle lookupIterator(Class<?> receiverClass) {, +        if (Iterable.class.isAssignableFrom(receiverClass)) {, +            return ITERATOR;, +        } else {, +            // TODO: arrays, +            throw new IllegalArgumentException("Cannot iterate over [" + receiverClass.getCanonicalName() + "]");, +        }, +    }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +    /** static bootstrap parameter indicating a dynamic iteration, e.g. for (x : y) */, +    public static final int ITERATOR = 5;, +                case ITERATOR:, +                    return Def.lookupIterator(clazz);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import java.util.Iterator;, +    /** pointer to Iterable.iterator() */, +    private static final MethodHandle ITERATOR;, +            ITERATOR = lookup.findVirtual(Iterable.class, "iterator", MethodType.methodType(Iterator.class));, +    /**, +     * Returns a method handle to do iteration (for enhanced for loop), +     * @param receiverClass Class of the array to load the value from, +     * @return a MethodHandle that accepts the receiver as first argument, returns iterator, +     */, +    static MethodHandle lookupIterator(Class<?> receiverClass) {, +        if (Iterable.class.isAssignableFrom(receiverClass)) {, +            return ITERATOR;, +        } else {, +            // TODO: arrays, +            throw new IllegalArgumentException("Cannot iterate over [" + receiverClass.getCanonicalName() + "]");, +        }, +    }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +    /** static bootstrap parameter indicating a dynamic iteration, e.g. for (x : y) */, +    public static final int ITERATOR = 5;, +                case ITERATOR:, +                    return Def.lookupIterator(clazz);, +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +import java.util.Iterator;, +    /** pointer to Iterable.iterator() */, +    private static final MethodHandle ITERATOR;, +            ITERATOR = lookup.findVirtual(Iterable.class, "iterator", MethodType.methodType(Iterator.class));, +    /**, +     * Returns a method handle to do iteration (for enhanced for loop), +     * @param receiverClass Class of the array to load the value from, +     * @return a MethodHandle that accepts the receiver as first argument, returns iterator, +     */, +    static MethodHandle lookupIterator(Class<?> receiverClass) {, +        if (Iterable.class.isAssignableFrom(receiverClass)) {, +            return ITERATOR;, +        } else {, +            // TODO: arrays, +            throw new IllegalArgumentException("Cannot iterate over [" + receiverClass.getCanonicalName() + "]");, +        }, +    }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +    /** static bootstrap parameter indicating a dynamic iteration, e.g. for (x : y) */, +    public static final int ITERATOR = 5;, +                case ITERATOR:, +                    return Def.lookupIterator(clazz);, +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SEach.java, +import org.elasticsearch.painless.DefBootstrap;, +import static org.elasticsearch.painless.WriterConstants.DEF_BOOTSTRAP_HANDLE;, +, +        } else if (sort == Sort.DEF || Iterable.class.isAssignableFrom(expression.actual.clazz)) {, +            if (sort == Sort.DEF) {, +                method = null;]