[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/Transport.java, +        public static final byte TRANSPORT_TYPE = 1 << 0;, +        public static final byte ERROR = 1 << 1;, +            return (value & ERROR) != 0;, +            value |= ERROR;, +    <T extends Streamable> void sendRequest(DiscoveryNode node, long requestId, String action, Streamable message, TransportRequestOptions options) throws IOException, TransportException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/Transport.java, +        public static final byte TRANSPORT_TYPE = 1 << 0;, +        public static final byte ERROR = 1 << 1;, +            return (value & ERROR) != 0;, +            value |= ERROR;, +    <T extends Streamable> void sendRequest(DiscoveryNode node, long requestId, String action, Streamable message, TransportRequestOptions options) throws IOException, TransportException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportChannel.java, + * A transport channel allows to send a response to a request on the channel., + *, + * @author kimchy (shay.banon), +, +    void sendResponse(Streamable message, TransportResponseOptions options) throws IOException;, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/Transport.java, +        public static final byte TRANSPORT_TYPE = 1 << 0;, +        public static final byte ERROR = 1 << 1;, +            return (value & ERROR) != 0;, +            value |= ERROR;, +    <T extends Streamable> void sendRequest(DiscoveryNode node, long requestId, String action, Streamable message, TransportRequestOptions options) throws IOException, TransportException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportChannel.java, + * A transport channel allows to send a response to a request on the channel., + *, + * @author kimchy (shay.banon), +, +    void sendResponse(Streamable message, TransportResponseOptions options) throws IOException;, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportRequestOptions.java, +    public static TransportRequestOptions EMPTY = options();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/Transport.java, +        public static final byte TRANSPORT_TYPE = 1 << 0;, +        public static final byte ERROR = 1 << 1;, +            return (value & ERROR) != 0;, +            value |= ERROR;, +    <T extends Streamable> void sendRequest(DiscoveryNode node, long requestId, String action, Streamable message, TransportRequestOptions options) throws IOException, TransportException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportChannel.java, + * A transport channel allows to send a response to a request on the channel., + *, + * @author kimchy (shay.banon), +, +    void sendResponse(Streamable message, TransportResponseOptions options) throws IOException;, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportRequestOptions.java, +    public static TransportRequestOptions EMPTY = options();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportResponseOptions.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.transport;, +, +/**, + * @author kimchy (shay.banon), + */, +public class TransportResponseOptions {, +, +    public static final TransportResponseOptions EMPTY = options();, +, +    public static TransportResponseOptions options() {, +        return new TransportResponseOptions();, +    }, +}, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/Transport.java, +        public static final byte TRANSPORT_TYPE = 1 << 0;, +        public static final byte ERROR = 1 << 1;, +            return (value & ERROR) != 0;, +            value |= ERROR;, +    <T extends Streamable> void sendRequest(DiscoveryNode node, long requestId, String action, Streamable message, TransportRequestOptions options) throws IOException, TransportException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportChannel.java, + * A transport channel allows to send a response to a request on the channel., + *, + * @author kimchy (shay.banon), +, +    void sendResponse(Streamable message, TransportResponseOptions options) throws IOException;, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/transport/TransportRequestOptions.java, +    public static TransportRequestOptions EMPTY = options();, +]