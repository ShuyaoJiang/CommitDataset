[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/action/RestActionModule.java, +import org.elasticsearch.rest.action.admin.indices.settings.RestGetSettingsAction;, +, +        bind(RestGetSettingsAction.class).asEagerSingleton();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/action/RestActionModule.java, +import org.elasticsearch.rest.action.admin.indices.settings.RestGetSettingsAction;, +, +        bind(RestGetSettingsAction.class).asEagerSingleton();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestGetSettingsAction.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.rest.action.admin.indices.settings;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.admin.cluster.state.ClusterStateRequest;, +import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.settings.SettingsFilter;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.rest.*;, +import org.elasticsearch.rest.action.support.RestXContentBuilder;, +, +import java.io.IOException;, +import java.util.Map;, +, +import static org.elasticsearch.rest.RestRequest.Method.*;, +import static org.elasticsearch.rest.RestStatus.*;, +import static org.elasticsearch.rest.action.support.RestActions.*;, +, +public class RestGetSettingsAction extends BaseRestHandler {, +, +    private final SettingsFilter settingsFilter;, +, +    @Inject public RestGetSettingsAction(Settings settings, Client client, RestController controller, SettingsFilter settingsFilter) {, +        super(settings, client);, +        controller.registerHandler(GET, "/_settings", this);, +        controller.registerHandler(GET, "/{index}/_settings", this);, +, +        this.settingsFilter = settingsFilter;, +    }, +, +    @Override public void handleRequest(final RestRequest request, final RestChannel channel) {, +        final String[] indices = splitIndices(request.param("index"));, +, +        ClusterStateRequest clusterStateRequest = Requests.clusterStateRequest(), +                .filterRoutingTable(true), +                .filterNodes(true), +                .filteredIndices(indices);, +, +        client.admin().cluster().state(clusterStateRequest, new ActionListener<ClusterStateResponse>() {, +            @Override public void onResponse(ClusterStateResponse response) {, +                try {, +                    MetaData metaData = response.state().metaData();, +                    XContentBuilder builder = RestXContentBuilder.restContentBuilder(request);, +                    builder.startObject();, +, +                    for (IndexMetaData indexMetaData : metaData) {, +                        builder.startObject(indexMetaData.index());, +, +                        builder.startObject("settings");, +                        Settings settings = settingsFilter.filterSettings(indexMetaData.settings());, +                        for (Map.Entry<String, String> entry : settings.getAsMap().entrySet()) {, +                            builder.field(entry.getKey(), entry.getValue());, +                        }, +                        builder.endObject();, +, +                        builder.endObject();, +                    }, +, +                    builder.endObject();, +, +                    channel.sendResponse(new XContentRestResponse(request, OK, builder));, +                } catch (Exception e) {, +                    onFailure(e);, +                }, +            }]