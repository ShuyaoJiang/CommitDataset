[+++ b/core/src/main/java/org/elasticsearch/common/lucene/index/FilterableTermsEnum.java, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/FilterableTermsEnum.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +        long supersetSize = termsAggFactory.getSupersetNumDocs();, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/FilterableTermsEnum.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +        long supersetSize = termsAggFactory.getSupersetNumDocs();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantLongTermsAggregator.java, +        long supersetSize = termsAggFactory.getSupersetNumDocs();, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/FilterableTermsEnum.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +        long supersetSize = termsAggFactory.getSupersetNumDocs();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantLongTermsAggregator.java, +        long supersetSize = termsAggFactory.getSupersetNumDocs();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantStringTermsAggregator.java, +        long supersetSize = termsAggFactory.getSupersetNumDocs();, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/FilterableTermsEnum.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +        long supersetSize = termsAggFactory.getSupersetNumDocs();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantLongTermsAggregator.java, +        long supersetSize = termsAggFactory.getSupersetNumDocs();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantStringTermsAggregator.java, +        long supersetSize = termsAggFactory.getSupersetNumDocs();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.TermQuery;, +import org.apache.lucene.search.BooleanClause.Occur;, +    private final Query filter;, +    private final int supersetNumDocs;, +        this.filter = filterBuilder == null, +                ? null, +                : filterBuilder.toQuery(context.searchContext().getQueryShardContext());, +        IndexSearcher searcher = context.searchContext().searcher();, +        this.supersetNumDocs = filter == null, +                // Important - need to use the doc count that includes deleted docs, +                // or we have this issue: https://github.com/elastic/elasticsearch/issues/7951, +                ? searcher.getIndexReader().maxDoc(), +                : searcher.count(filter);, +     * Get the number of docs in the superset., +    public long getSupersetNumDocs() {, +        return supersetNumDocs;, +    }, +, +    private FilterableTermsEnum getTermsEnum(String field) throws IOException {, +            return termsEnum;, +        IndexReader reader = context.searchContext().searcher().getIndexReader();, +        if (numberOfAggregatorsCreated > 1) {, +            termsEnum = new FreqTermsEnum(reader, field, true, false, filter, context.bigArrays());, +            termsEnum = new FilterableTermsEnum(reader, indexedFieldName, PostingsEnum.NONE, filter);, +        return termsEnum;, +    private long getBackgroundFrequency(String value) throws IOException {, +        Query query = fieldType.termQuery(value, context.searchContext().getQueryShardContext());, +        if (query instanceof TermQuery) {, +            // for types that use the inverted index, we prefer using a caching terms, +            // enum that will do a better job at reusing index inputs, +            Term term = ((TermQuery) query).getTerm();, +            FilterableTermsEnum termsEnum = getTermsEnum(term.field());, +            if (termsEnum.seekExact(term.bytes())) {, +                return termsEnum.docFreq();, +            } else {, +                return 0;, +        // otherwise do it the naive way, +        if (filter != null) {, +            query = new BooleanQuery.Builder(), +                    .add(query, Occur.FILTER), +                    .add(filter, Occur.FILTER), +                    .build();, +        }, +        return context.searchContext().searcher().count(query);, +    public long getBackgroundFrequency(BytesRef termBytes) throws IOException {, +        String value = config.format().format(termBytes);, +        return getBackgroundFrequency(value);, +    }, +, +    public long getBackgroundFrequency(long termNum) throws IOException {, +        String value = config.format().format(termNum);, +        return getBackgroundFrequency(value);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/index/FilterableTermsEnum.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/GlobalOrdinalsSignificantTermsAggregator.java, +        long supersetSize = termsAggFactory.getSupersetNumDocs();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantLongTermsAggregator.java, +        long supersetSize = termsAggFactory.getSupersetNumDocs();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantStringTermsAggregator.java, +        long supersetSize = termsAggFactory.getSupersetNumDocs();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.TermQuery;, +import org.apache.lucene.search.BooleanClause.Occur;, +    private final Query filter;, +    private final int supersetNumDocs;, +        this.filter = filterBuilder == null, +                ? null, +                : filterBuilder.toQuery(context.searchContext().getQueryShardContext());, +        IndexSearcher searcher = context.searchContext().searcher();, +        this.supersetNumDocs = filter == null, +                // Important - need to use the doc count that includes deleted docs]