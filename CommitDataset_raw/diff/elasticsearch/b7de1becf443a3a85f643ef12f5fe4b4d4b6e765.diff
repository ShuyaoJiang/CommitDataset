[+++ b/src/main/java/org/elasticsearch/search/aggregations/support/numeric/ScriptDoubleValues.java, +    private double[] values = new double[1];, +            values = ArrayUtil.grow(values, valueCount);, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/numeric/ScriptDoubleValues.java, +    private double[] values = new double[1];, +            values = ArrayUtil.grow(values, valueCount);, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/numeric/ScriptLongValues.java, +    private long[] values = new long[1];, +                values[i] = ((Number) Array.get(value, i)).longValue();, +            values = ArrayUtil.grow(values, valueCount);, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/numeric/ScriptDoubleValues.java, +    private double[] values = new double[1];, +            values = ArrayUtil.grow(values, valueCount);, +++ b/src/main/java/org/elasticsearch/search/aggregations/support/numeric/ScriptLongValues.java, +    private long[] values = new long[1];, +                values[i] = ((Number) Array.get(value, i)).longValue();, +            values = ArrayUtil.grow(values, valueCount);, +++ b/src/test/java/org/elasticsearch/search/aggregations/support/ScriptValuesTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.aggregations.support;, +, +import com.carrotsearch.randomizedtesting.generators.RandomStrings;, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.search.Scorer;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.script.SearchScript;, +import org.elasticsearch.search.aggregations.support.bytes.ScriptBytesValues;, +import org.elasticsearch.search.aggregations.support.numeric.ScriptDoubleValues;, +import org.elasticsearch.search.aggregations.support.numeric.ScriptLongValues;, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.junit.Test;, +, +import java.util.Arrays;, +import java.util.Map;, +, +public class ScriptValuesTests extends ElasticsearchTestCase {, +, +    private static class FakeSearchScript implements SearchScript {, +        , +        private final Object[][] values;, +        int index;, +        , +        FakeSearchScript(Object[][] values) {, +            this.values = values;, +            index = -1;, +        }, +, +        @Override, +        public void setNextVar(String name, Object value) {, +        }, +, +        @Override, +        public Object run() {, +            // Script values are supposed to support null, single values, arrays and collections, +            final Object[] values = this.values[index];, +            if (values.length <= 1 && randomBoolean()) {, +                return values.length == 0 ? null : values[0];, +            }, +            return randomBoolean() ? values : Arrays.asList(values);, +        }, +, +        @Override, +        public Object unwrap(Object value) {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public void setNextReader(AtomicReaderContext reader) {, +        }, +, +        @Override, +        public void setScorer(Scorer scorer) {, +        }, +, +        @Override, +        public void setNextDocId(int doc) {, +            index = doc;, +        }, +, +        @Override, +        public void setNextSource(Map<String, Object> source) {, +        }]