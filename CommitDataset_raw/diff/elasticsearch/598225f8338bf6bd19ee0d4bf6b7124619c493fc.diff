[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/ObjectMapper.java, +import org.elasticsearch.common.xcontent.ToXContent;, +        toXContent(builder, params, null, XContentMapper.EMPTY_ARRAY);, +    public void toXContent(XContentBuilder builder, Params params, ToXContent custom, XContentMapper... additionalMappers) throws IOException {, +        if (custom != null) {, +            custom.toXContent(builder, params);, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/ObjectMapper.java, +import org.elasticsearch.common.xcontent.ToXContent;, +        toXContent(builder, params, null, XContentMapper.EMPTY_ARRAY);, +    public void toXContent(XContentBuilder builder, Params params, ToXContent custom, XContentMapper... additionalMappers) throws IOException {, +        if (custom != null) {, +            custom.toXContent(builder, params);, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDocumentMapper.java, +    private final NamedAnalyzer indexAnalyzer;, +    private final NamedAnalyzer searchAnalyzer;, +                                  NamedAnalyzer indexAnalyzer, NamedAnalyzer searchAnalyzer,, +        rootObjectMapper.toXContent(builder, params, new ToXContent() {, +            @Override public void toXContent(XContentBuilder builder, Params params) throws IOException {, +                if (indexAnalyzer != null && searchAnalyzer != null && indexAnalyzer.name().equals(searchAnalyzer.name()) && !indexAnalyzer.name().startsWith("_")) {, +                    if (!indexAnalyzer.name().equals("default")) {, +                        // same analyzers, output it once, +                        builder.field("analyzer", indexAnalyzer.name());, +                    }, +                } else {, +                    if (indexAnalyzer != null && !indexAnalyzer.name().startsWith("_")) {, +                        if (!indexAnalyzer.name().equals("default")) {, +                            builder.field("index_analyzer", indexAnalyzer.name());, +                        }, +                    }, +                    if (searchAnalyzer != null && !searchAnalyzer.name().startsWith("_")) {, +                        if (!searchAnalyzer.name().equals("default")) {, +                            builder.field("search_analyzer", searchAnalyzer.name());, +                        }, +                    }, +                }, +            }, +        }, indexFieldMapper, typeFieldMapper, idFieldMapper, allFieldMapper, sourceFieldMapper);]