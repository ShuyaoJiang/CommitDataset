[+++ b/plugin/src/test/java/org/elasticsearch/xpack/security/authc/ldap/support/SessionFactoryLoadBalancingTests.java, +import org.elasticsearch.mocksocket.MockServerSocket;, +import org.elasticsearch.mocksocket.MockSocket;, +import org.elasticsearch.test.junit.annotations.TestLogging;, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.Socket;, +import java.util.concurrent.CountDownLatch;, +@TestLogging("org.elasticsearch.xpack.security.authc.ldap.support:DEBUG"), +        // get a subset to kill, +        final List<MockServerSocket> boundSockets = new ArrayList<>();, +        final List<Thread> listenThreads = new ArrayList<>();, +        final CountDownLatch latch = new CountDownLatch(ldapServersToKill.size());, +        try {, +, +                // when running multiple test jvms, there is a chance that something else could, +                // start listening on this port so we try to avoid this by binding again to this, +                // port with a server socket. The server socket only has a backlog of size one and, +                // we start a thread that connects to this socket but the connection is never, +                // accepted so other connections will be rejected. The socket attempts a blocking, +                // read, which will hold up the thread until the server socket is closed at the end, +                // of the test., +                // NOTE: this is not perfect as there is a small amount of time between the shutdown, +                // of the ldap server and the opening of the socket, +                logger.debug("opening mock server socket listening on [{}]", port);, +                MockServerSocket mockServerSocket = new MockServerSocket(port, 1, InetAddress.getByName("localhost"));, +                Runnable runnable = () -> {, +                    try (Socket socket = new MockSocket(InetAddress.getByName("localhost"), port)) {, +                        logger.debug("opened socket [{}] and blocking other connections", socket);, +                        latch.countDown();, +                        socket.getInputStream().read();, +                    } catch (IOException e) {, +                        logger.trace("caught io exception", e);, +                    }, +                };, +                Thread thread = new Thread(runnable);, +                thread.start();, +                boundSockets.add(mockServerSocket);, +                listenThreads.add(thread);, +, +            latch.await();, +                    try (LDAPConnection connection = LdapUtils.privilegedConnect(testSessionFactory.getServerSet()::getConnection)) {, +                    }, +                }, +            }, +            for (MockServerSocket socket : boundSockets) {, +                socket.close();, +            for (Thread t : listenThreads) {, +                t.join();]