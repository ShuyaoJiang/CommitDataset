[+++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +            assert hasMinMax : "cannot serialize null min/max fieldstats in a mixed-cluster " +, +                    "with pre-" + Version.V_5_2_0_UNRELEASED + " nodes, remote version [" + out.getVersion() + "]";, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +            assert hasMinMax : "cannot serialize null min/max fieldstats in a mixed-cluster " +, +                    "with pre-" + Version.V_5_2_0_UNRELEASED + " nodes, remote version [" + out.getVersion() + "]";, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStatsShardResponse.java, +import org.elasticsearch.Version;, +import java.util.stream.Collectors;, +    Map<String, FieldStats<?> > filterNullMinMax() {, +        return fieldStats.entrySet().stream(), +            .filter((e) -> e.getValue().hasMinMax()), +            .collect(Collectors.toMap(p -> p.getKey(), p -> p.getValue()));, +    }, +, +        final Map<String, FieldStats<?> > stats;, +        if (out.getVersion().before(Version.V_5_2_0_UNRELEASED)) {, +            /**, +             * FieldStats with null min/max are not (de)serializable in versions prior to {@link Version.V_5_2_0_UNRELEASED}, +             */, +            stats = filterNullMinMax();, +        } else {, +            stats = getFieldStats();, +        }, +        out.writeVInt(stats.size());, +        for (Map.Entry<String, FieldStats<?>> entry : stats.entrySet()) {, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +            assert hasMinMax : "cannot serialize null min/max fieldstats in a mixed-cluster " +, +                    "with pre-" + Version.V_5_2_0_UNRELEASED + " nodes, remote version [" + out.getVersion() + "]";, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStatsShardResponse.java, +import org.elasticsearch.Version;, +import java.util.stream.Collectors;, +    Map<String, FieldStats<?> > filterNullMinMax() {, +        return fieldStats.entrySet().stream(), +            .filter((e) -> e.getValue().hasMinMax()), +            .collect(Collectors.toMap(p -> p.getKey(), p -> p.getValue()));, +    }, +, +        final Map<String, FieldStats<?> > stats;, +        if (out.getVersion().before(Version.V_5_2_0_UNRELEASED)) {, +            /**, +             * FieldStats with null min/max are not (de)serializable in versions prior to {@link Version.V_5_2_0_UNRELEASED}, +             */, +            stats = filterNullMinMax();, +        } else {, +            stats = getFieldStats();, +        }, +        out.writeVInt(stats.size());, +        for (Map.Entry<String, FieldStats<?>> entry : stats.entrySet()) {, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsAction.java, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +            assert hasMinMax : "cannot serialize null min/max fieldstats in a mixed-cluster " +, +                    "with pre-" + Version.V_5_2_0_UNRELEASED + " nodes, remote version [" + out.getVersion() + "]";, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStatsShardResponse.java, +import org.elasticsearch.Version;, +import java.util.stream.Collectors;, +    Map<String, FieldStats<?> > filterNullMinMax() {, +        return fieldStats.entrySet().stream(), +            .filter((e) -> e.getValue().hasMinMax()), +            .collect(Collectors.toMap(p -> p.getKey(), p -> p.getValue()));, +    }, +, +        final Map<String, FieldStats<?> > stats;, +        if (out.getVersion().before(Version.V_5_2_0_UNRELEASED)) {, +            /**, +             * FieldStats with null min/max are not (de)serializable in versions prior to {@link Version.V_5_2_0_UNRELEASED}, +             */, +            stats = filterNullMinMax();, +        } else {, +            stats = getFieldStats();, +        }, +        out.writeVInt(stats.size());, +        for (Map.Entry<String, FieldStats<?>> entry : stats.entrySet()) {, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsAction.java, +++ b/core/src/test/java/org/elasticsearch/action/fieldstats/FieldStatsRequestTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.fieldstats.FieldStatsTests;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.test.VersionUtils;, +, +import java.util.HashMap;, +import java.util.Map;, +    public void testFieldStatsBWC() throws Exception {, +        int size = randomIntBetween(5, 20);, +        Map<String, FieldStats<?> > stats = new HashMap<> ();, +        for (int i = 0; i < size; i++) {, +            stats.put(Integer.toString(i), FieldStatsTests.randomFieldStats(true));, +        }, +, +        FieldStatsShardResponse response = new FieldStatsShardResponse(new ShardId("test", "test", 0), stats);, +        for (int i = 0; i < 10; i++) {, +            Version version = VersionUtils.randomVersionBetween(random(), Version.V_5_0_0, Version.CURRENT);, +            BytesStreamOutput output = new BytesStreamOutput();, +            output.setVersion(version);, +            response.writeTo(output);, +            output.flush();, +            StreamInput input = output.bytes().streamInput();, +            input.setVersion(version);]