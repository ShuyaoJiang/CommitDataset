[+++ b/src/main/java/org/elasticsearch/index/search/geo/GeoUtils.java, +        return centeredModulus(lon, 360);, +        return centeredModulus(lat, 180);, +    private static double centeredModulus(double dividend, double divisor) {, +        double rtn = dividend % divisor;, +        if (rtn <= 0), +            rtn += divisor;, +        if (rtn > divisor/2), +            rtn -= divisor;, +        return rtn;, +, +++ b/src/main/java/org/elasticsearch/index/search/geo/GeoUtils.java, +        return centeredModulus(lon, 360);, +        return centeredModulus(lat, 180);, +    private static double centeredModulus(double dividend, double divisor) {, +        double rtn = dividend % divisor;, +        if (rtn <= 0), +            rtn += divisor;, +        if (rtn > divisor/2), +            rtn -= divisor;, +        return rtn;, +, +++ b/src/test/java/org/elasticsearch/test/unit/index/search/geo/GeoUtilsTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.unit.index.search.geo;, +, +import org.elasticsearch.index.search.geo.GeoUtils;, +import org.testng.annotations.Test;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.not;, +, +/**, + *, + */, +public class GeoUtilsTests {, +, +    /**, +     * Test special values like inf, NaN and -0.0., +     */, +    @Test, +    public void testSpecials() {, +        assertThat(GeoUtils.normalizeLon(Double.POSITIVE_INFINITY), equalTo(Double.NaN));, +        assertThat(GeoUtils.normalizeLat(Double.POSITIVE_INFINITY), equalTo(Double.NaN));, +        assertThat(GeoUtils.normalizeLon(Double.NEGATIVE_INFINITY), equalTo(Double.NaN));, +        assertThat(GeoUtils.normalizeLat(Double.NEGATIVE_INFINITY), equalTo(Double.NaN));, +        assertThat(GeoUtils.normalizeLon(Double.NaN), equalTo(Double.NaN));, +        assertThat(GeoUtils.normalizeLat(Double.NaN), equalTo(Double.NaN));, +        assertThat(0.0, not(equalTo(-0.0)));, +        assertThat(GeoUtils.normalizeLon(-0.0), equalTo(0.0));, +        assertThat(GeoUtils.normalizeLat(-0.0), equalTo(0.0));, +        assertThat(GeoUtils.normalizeLon( 0.0), equalTo(0.0));, +        assertThat(GeoUtils.normalizeLat( 0.0), equalTo(0.0));, +    }, +, +    /**, +     * Test bounding values., +     */, +    @Test, +    public void testBounds() {, +        assertThat(GeoUtils.normalizeLon(-360.0), equalTo(0.0));, +        assertThat(GeoUtils.normalizeLat(-180.0), equalTo(0.0));, +        assertThat(GeoUtils.normalizeLon( 360.0), equalTo(0.0));, +        assertThat(GeoUtils.normalizeLat( 180.0), equalTo(0.0));, +        // and halves, +        assertThat(GeoUtils.normalizeLon(-180.0), equalTo(180.0));, +        assertThat(GeoUtils.normalizeLat(- 90.0), equalTo( 90.0));, +        assertThat(GeoUtils.normalizeLon( 180.0), equalTo(180.0));, +        assertThat(GeoUtils.normalizeLat(  90.0), equalTo( 90.0));, +    }, +, +    /**, +     * Test normal values., +     */, +    @Test, +    public void testNormal() {, +        // Near bounds, +        assertThat(GeoUtils.normalizeLon(-360.5), equalTo(-0.5));, +        assertThat(GeoUtils.normalizeLat(-180.5), equalTo(-0.5));, +        assertThat(GeoUtils.normalizeLon( 360.5), equalTo( 0.5));, +        assertThat(GeoUtils.normalizeLat( 180.5), equalTo( 0.5));]