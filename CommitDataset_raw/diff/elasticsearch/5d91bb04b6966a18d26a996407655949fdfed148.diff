[+++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +    public boolean isEmpty() {, +        return matches.length == 0 && count == 0;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +    public boolean isEmpty() {, +        return matches.length == 0 && count == 0;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +        int nonEmptyResponses = 0;, +                if (!percolateShardResponse.isEmpty()) {, +                    nonEmptyResponses++;, +                }, +        if (shardResults == null || percolatorTypeId == 0x00 || nonEmptyResponses == 0) {, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +    public boolean isEmpty() {, +        return matches.length == 0 && count == 0;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +        int nonEmptyResponses = 0;, +                if (!percolateShardResponse.isEmpty()) {, +                    nonEmptyResponses++;, +                }, +        if (shardResults == null || percolatorTypeId == 0x00 || nonEmptyResponses == 0) {, +++ b/src/main/java/org/elasticsearch/percolator/PercolateException.java, +import org.elasticsearch.ElasticSearchWrapperException;, +public class PercolateException extends ElasticSearchException implements ElasticSearchWrapperException {, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +    public boolean isEmpty() {, +        return matches.length == 0 && count == 0;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +        int nonEmptyResponses = 0;, +                if (!percolateShardResponse.isEmpty()) {, +                    nonEmptyResponses++;, +                }, +        if (shardResults == null || percolatorTypeId == 0x00 || nonEmptyResponses == 0) {, +++ b/src/main/java/org/elasticsearch/percolator/PercolateException.java, +import org.elasticsearch.ElasticSearchWrapperException;, +public class PercolateException extends ElasticSearchException implements ElasticSearchWrapperException {, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +                throw new ElasticSearchIllegalArgumentException("Can't sort or score if query isn't specified");, +            }, +, +            if (context.sort && !context.limit) {, +                throw new ElasticSearchIllegalArgumentException("Can't sort if size isn't specified");, +            int nonEmptyResponses = 0;, +            int firstNonEmptyIndex = 0;, +            for (int i = 0; i < shardResults.size(); i++) {, +                PercolateShardResponse response = shardResults.get(i);, +                if (response.matches().length != 0) {, +                    if (firstNonEmptyIndex == 0) {, +                        firstNonEmptyIndex = i;, +                    nonEmptyResponses++;, +                }, +            }, +, +            if (nonEmptyResponses == 1) {, +                PercolateShardResponse response = shardResults.get(firstNonEmptyIndex);, +                    int requestIndex = -1;, +                    int itemIndex = -1;, +                        // TODO: Maybe add a tie?, +, +                    // This means the shard matches have been exhausted and we should bail, +                    if (requestIndex == -1) {, +                        break;, +                    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +    public boolean isEmpty() {, +        return matches.length == 0 && count == 0;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +        int nonEmptyResponses = 0;, +                if (!percolateShardResponse.isEmpty()) {, +                    nonEmptyResponses++;, +                }, +        if (shardResults == null || percolatorTypeId == 0x00 || nonEmptyResponses == 0) {, +++ b/src/main/java/org/elasticsearch/percolator/PercolateException.java, +import org.elasticsearch.ElasticSearchWrapperException;, +public class PercolateException extends ElasticSearchException implements ElasticSearchWrapperException {, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +                throw new ElasticSearchIllegalArgumentException("Can't sort or score if query isn't specified");, +            }, +, +            if (context.sort && !context.limit) {, +                throw new ElasticSearchIllegalArgumentException("Can't sort if size isn't specified");, +            int nonEmptyResponses = 0;, +            int firstNonEmptyIndex = 0;, +            for (int i = 0; i < shardResults.size(); i++) {, +                PercolateShardResponse response = shardResults.get(i);, +                if (response.matches().length != 0) {, +                    if (firstNonEmptyIndex == 0) {, +                        firstNonEmptyIndex = i;, +                    nonEmptyResponses++;]