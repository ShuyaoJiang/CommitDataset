[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/AntTask.groovy, +        AntBuilder ant = new AntBuilder(), +, +        // remove existing loggers, we add our own, +        List<BuildLogger> toRemove = new ArrayList<>();, +        for (BuildListener l : ant.project.getBuildListeners()) {, +                toRemove.add(l);, +        for (BuildLogger l : toRemove) {, +            ant.project.removeBuildListener(l), +        final int outputLevel = logger.isDebugEnabled() ? Project.MSG_DEBUG : (logger.isInfoEnabled() ? Project.MSG_INFO : Project.MSG_WARN), +        ant.project.addBuildListener(antLogger), +            runAnt(ant), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/AntTask.groovy, +        AntBuilder ant = new AntBuilder(), +, +        // remove existing loggers, we add our own, +        List<BuildLogger> toRemove = new ArrayList<>();, +        for (BuildListener l : ant.project.getBuildListeners()) {, +                toRemove.add(l);, +        for (BuildLogger l : toRemove) {, +            ant.project.removeBuildListener(l), +        final int outputLevel = logger.isDebugEnabled() ? Project.MSG_DEBUG : (logger.isInfoEnabled() ? Project.MSG_INFO : Project.MSG_WARN), +        ant.project.addBuildListener(antLogger), +            runAnt(ant), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +        ant.project.addTaskDefinition('ratReport', Report), +        ant.project.addDataTypeDefinition('substringMatcher', SubstringLicenseMatcher), +        ant.project.addDataTypeDefinition('approvedLicense', SimpleLicenseFamily), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/AntTask.groovy, +        AntBuilder ant = new AntBuilder(), +, +        // remove existing loggers, we add our own, +        List<BuildLogger> toRemove = new ArrayList<>();, +        for (BuildListener l : ant.project.getBuildListeners()) {, +                toRemove.add(l);, +        for (BuildLogger l : toRemove) {, +            ant.project.removeBuildListener(l), +        final int outputLevel = logger.isDebugEnabled() ? Project.MSG_DEBUG : (logger.isInfoEnabled() ? Project.MSG_INFO : Project.MSG_WARN), +        ant.project.addBuildListener(antLogger), +            runAnt(ant), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +        ant.project.addTaskDefinition('ratReport', Report), +        ant.project.addDataTypeDefinition('substringMatcher', SubstringLicenseMatcher), +        ant.project.addDataTypeDefinition('approvedLicense', SimpleLicenseFamily), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +import org.apache.tools.ant.BuildLogger, +import org.apache.tools.ant.Project, +import org.gradle.api.file.FileCollection, +import java.nio.file.Files, +        ant.project.addTaskDefinition('thirdPartyAudit', de.thetaphi.forbiddenapis.ant.AntTask), +]