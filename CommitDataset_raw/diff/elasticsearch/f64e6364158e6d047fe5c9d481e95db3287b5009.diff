[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +    public XContentBuilder startObject(XContentString name) throws IOException {, +        field(name);, +        startObject();, +        return this;, +    }, +, +    public XContentBuilder array(XContentString name, String... values) throws IOException {, +        startArray(name);, +        for (String value : values) {, +            value(value);, +        }, +        endArray();, +        return this;, +    }, +, +    public XContentBuilder array(XContentString name, Object... values) throws IOException {, +        startArray(name);, +        for (Object value : values) {, +            value(value);, +        }, +        endArray();, +        return this;, +    }, +, +    public XContentBuilder startArray(XContentString name) throws IOException {, +        field(name);, +        startArray();, +        return this;, +    }, +, +    public XContentBuilder field(XContentString name) throws IOException {, +        if (fieldCaseConversion == FieldCaseConversion.UNDERSCORE) {, +            if (cachedStringBuilder == null) {, +                cachedStringBuilder = new StringBuilder();, +            }, +            generator.writeFieldName(Strings.toUnderscoreCase(name.getValue(), cachedStringBuilder));, +        } else if (fieldCaseConversion == FieldCaseConversion.CAMELCASE) {, +            if (cachedStringBuilder == null) {, +                cachedStringBuilder = new StringBuilder();, +            }, +            generator.writeFieldName(Strings.toCamelCase(name.getValue(), cachedStringBuilder));, +        } else {, +            generator.writeFieldName(name);, +        }, +        return this;, +    }, +, +    public XContentBuilder field(XContentString name, char[] value, int offset, int length) throws IOException {, +        field(name);, +        if (value == null) {, +            generator.writeNull();, +        } else {, +            generator.writeString(value, offset, length);, +        }, +        return this;, +    }, +, +    public XContentBuilder field(XContentString name, String value) throws IOException {, +        field(name);, +        if (value == null) {, +            generator.writeNull();, +        } else {, +            generator.writeString(value);, +        }, +        return this;, +    }, +, +    public XContentBuilder field(XContentString name, Integer value) throws IOException {, +        return field(name, value.intValue());, +    }, +, +    public XContentBuilder field(XContentString name, int value) throws IOException {, +        field(name);, +        generator.writeNumber(value);, +        return this;, +    }, +, +    public XContentBuilder field(XContentString name, Long value) throws IOException {, +        return field(name, value.longValue());, +    }, +, +    public XContentBuilder field(XContentString name, long value) throws IOException {, +        field(name);, +        generator.writeNumber(value);, +        return this;, +    }, +, +    public XContentBuilder field(XContentString name, Float value) throws IOException {, +        return field(name, value.floatValue());, +    }, +, +    public XContentBuilder field(XContentString name, float value) throws IOException {, +        field(name);, +        generator.writeNumber(value);, +        return this;, +    }, +    public XContentBuilder field(XContentString name, Double value) throws IOException {, +        return field(name, value.doubleValue());, +    }]