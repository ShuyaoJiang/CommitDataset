[+++ b/.idea/dictionaries/kimchy.xml, +      <w>rebalancing</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>rebalancing</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import java.util.List;, +import static org.elasticsearch.common.collect.Lists.*;, +, +    public List<ShardRouting> shardsWithState(ShardRoutingState... states) {, +        List<ShardRouting> shards = newArrayList();, +        for (IndexShardRoutingTable shardRoutingTable : this) {, +            shards.addAll(shardRoutingTable.shardsWithState(states));, +        }, +        return shards;, +    }, +, +++ b/.idea/dictionaries/kimchy.xml, +      <w>rebalancing</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import java.util.List;, +import static org.elasticsearch.common.collect.Lists.*;, +, +    public List<ShardRouting> shardsWithState(ShardRoutingState... states) {, +        List<ShardRouting> shards = newArrayList();, +        for (IndexShardRoutingTable shardRoutingTable : this) {, +            shards.addAll(shardRoutingTable.shardsWithState(states));, +        }, +        return shards;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> shardsWithState(ShardRoutingState... states) {, +        List<ShardRouting> shards = newArrayList();, +        for (ShardRouting shardEntry : this) {, +            for (ShardRoutingState state : states) {, +                if (shardEntry.state() == state) {, +                    shards.add(shardEntry);, +                }, +            }, +        }, +        return shards;, +    }, +, +++ b/.idea/dictionaries/kimchy.xml, +      <w>rebalancing</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import java.util.List;, +import static org.elasticsearch.common.collect.Lists.*;, +, +    public List<ShardRouting> shardsWithState(ShardRoutingState... states) {, +        List<ShardRouting> shards = newArrayList();, +        for (IndexShardRoutingTable shardRoutingTable : this) {, +            shards.addAll(shardRoutingTable.shardsWithState(states));, +        }, +        return shards;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> shardsWithState(ShardRoutingState... states) {, +        List<ShardRouting> shards = newArrayList();, +        for (ShardRouting shardEntry : this) {, +            for (ShardRoutingState state : states) {, +                if (shardEntry.state() == state) {, +                    shards.add(shardEntry);, +                }, +            }, +        }, +        return shards;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public MutableShardRouting findPrimaryForReplica(MutableShardRouting shard) {, +    public List<MutableShardRouting> shardsRoutingFor(ShardRouting shardRouting) {, +        return shardsRoutingFor(shardRouting.index(), shardRouting.id());, +    }, +, +    public List<MutableShardRouting> shardsRoutingFor(String index, int shardId) {, +        List<MutableShardRouting> shards = newArrayList();, +        for (RoutingNode routingNode : this) {, +            for (MutableShardRouting shardRouting : routingNode) {, +                if (shardRouting.index().equals(index) && shardRouting.id() == shardId) {, +                    shards.add(shardRouting);, +                }, +            }, +        }, +        for (MutableShardRouting shardRouting : unassigned) {, +            if (shardRouting.index().equals(index) && shardRouting.id() == shardId) {, +                shards.add(shardRouting);, +            }, +        }, +        return shards;, +    }, +, +++ b/.idea/dictionaries/kimchy.xml, +      <w>rebalancing</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import java.util.List;, +import static org.elasticsearch.common.collect.Lists.*;, +, +    public List<ShardRouting> shardsWithState(ShardRoutingState... states) {]