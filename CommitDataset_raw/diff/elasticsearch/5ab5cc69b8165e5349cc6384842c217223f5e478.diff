[+++ b/client/transport/build.gradle, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +            return Settings.builder(), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME), +                    .put(NetworkModule.HTTP_TYPE_KEY, Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME), +                    .put("netty.assert.buglevel", true), +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +            return Settings.builder(), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME), +                    .put(NetworkModule.HTTP_TYPE_KEY, Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME), +                    .put("netty.assert.buglevel", true), +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +import org.elasticsearch.transport.Netty3Plugin;, +            assertEquals(Netty3Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +                assertEquals("plugin is already installed", ex.getMessage());, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +            return Settings.builder(), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME), +                    .put(NetworkModule.HTTP_TYPE_KEY, Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME), +                    .put("netty.assert.buglevel", true), +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +import org.elasticsearch.transport.Netty3Plugin;, +            assertEquals(Netty3Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +                assertEquals("plugin is already installed", ex.getMessage());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +    public static final Setting<String> TRANSPORT_DEFAULT_TYPE_SETTING = Setting.simpleString("transport.type.default", Property.NodeScope);, +    public static final Setting<String> HTTP_DEFAULT_TYPE_SETTING = Setting.simpleString("http.type.default", Property.NodeScope);, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +            return Settings.builder(), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME), +                    .put(NetworkModule.HTTP_TYPE_KEY, Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME), +                    .put("netty.assert.buglevel", true), +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +import org.elasticsearch.transport.Netty3Plugin;, +            assertEquals(Netty3Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +                assertEquals("plugin is already installed", ex.getMessage());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +    public static final Setting<String> TRANSPORT_DEFAULT_TYPE_SETTING = Setting.simpleString("transport.type.default", Property.NodeScope);, +    public static final Setting<String> HTTP_DEFAULT_TYPE_SETTING = Setting.simpleString("http.type.default", Property.NodeScope);, +++ b/core/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +            return Settings.builder(), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME), +                    .put(NetworkModule.HTTP_TYPE_KEY, Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME), +                    .put("netty.assert.buglevel", true), +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +import org.elasticsearch.transport.Netty3Plugin;, +            assertEquals(Netty3Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +                assertEquals("plugin is already installed", ex.getMessage());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +    public static final Setting<String> TRANSPORT_DEFAULT_TYPE_SETTING = Setting.simpleString("transport.type.default", Property.NodeScope);, +    public static final Setting<String> HTTP_DEFAULT_TYPE_SETTING = Setting.simpleString("http.type.default", Property.NodeScope);, +++ b/core/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +++ b/core/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, +            long rounded = roundKey(timeLocal, interval) * interval;, +        private static long roundKey(long value, long interval) {, +            if (value < 0) {, +                return (value - interval + 1) / interval;, +            } else {, +                return value / interval;, +            }, +        }, +, +++ b/client/transport/build.gradle, +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +            return Settings.builder(), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, Netty4Plugin.NETTY_TRANSPORT_NAME), +                    .put(NetworkModule.HTTP_TYPE_KEY, Netty4Plugin.NETTY_HTTP_TRANSPORT_NAME), +                    .put("netty.assert.buglevel", true), +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +import org.elasticsearch.transport.Netty3Plugin;, +            assertEquals(Netty3Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +                assertEquals("plugin is already installed", ex.getMessage());, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +    public static final Setting<String> TRANSPORT_DEFAULT_TYPE_SETTING = Setting.simpleString("transport.type.default", Property.NodeScope);, +    public static final Setting<String> HTTP_DEFAULT_TYPE_SETTING = Setting.simpleString("http.type.default", Property.NodeScope);, +++ b/core/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +++ b/core/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, +            long rounded = roundKey(timeLocal, interval) * interval;, +        private static long roundKey(long value, long interval) {, +            if (value < 0) {, +                return (value - interval + 1) / interval;, +            } else {, +                return value / interval;, +            }, +        }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java, +        Object interval = otherOptions.get(Histogram.INTERVAL_FIELD);, +        Long offset = (Long) otherOptions.get(Histogram.OFFSET_FIELD);, +            if (parseFieldMatcher.match(currentFieldName, Histogram.INTERVAL_FIELD)) {]