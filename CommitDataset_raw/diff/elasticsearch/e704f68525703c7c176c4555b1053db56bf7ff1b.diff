[+++ b/src/main/java/org/elasticsearch/index/mapper/attachment/AttachmentMapper.java, + *      "field1" : "...", + *      "file1" : {, + *          "_content_type" : "application/pdf",, + *          "_content_length" : "500000000",, + *          "_name" : "..../something.pdf",, + *          "_content" : "", +            if (!ignoreErrors) {, +                throw new MapperParsingException("Failed to extract [" + indexedChars + "] characters of text for [" + name + "]", e);, +            } else {, +                logger.debug("Failed to extract [{}] characters of text for [{}]: [{}]", indexedChars, name, e.getMessage());, +            }, +                logger.debug("Cannot detect language: [{}]", t.getMessage());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing name: [{}]",, +                        e.getMessage());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing date: [{}]: [{}]",, +                        e.getMessage(), context.externalValue());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing title: [{}]: [{}]",, +                        e.getMessage(), context.externalValue());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing author: [{}]: [{}]",, +                        e.getMessage(), context.externalValue());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing keywords: [{}]: [{}]",, +                        e.getMessage(), context.externalValue());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing content_type: [{}]: [{}]", e.getMessage(), context.externalValue());, +            if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing content_length: [{}]: [{}]", e.getMessage(), context.externalValue());, +++ b/src/main/java/org/elasticsearch/index/mapper/attachment/AttachmentMapper.java, + *      "field1" : "...", + *      "file1" : {, + *          "_content_type" : "application/pdf",, + *          "_content_length" : "500000000",, + *          "_name" : "..../something.pdf",, + *          "_content" : "", +            if (!ignoreErrors) {, +                throw new MapperParsingException("Failed to extract [" + indexedChars + "] characters of text for [" + name + "]", e);, +            } else {, +                logger.debug("Failed to extract [{}] characters of text for [{}]: [{}]", indexedChars, name, e.getMessage());, +            }, +                logger.debug("Cannot detect language: [{}]", t.getMessage());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing name: [{}]",, +                        e.getMessage());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing date: [{}]: [{}]",, +                        e.getMessage(), context.externalValue());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing title: [{}]: [{}]",, +                        e.getMessage(), context.externalValue());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing author: [{}]: [{}]",, +                        e.getMessage(), context.externalValue());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing keywords: [{}]: [{}]",, +                        e.getMessage(), context.externalValue());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing content_type: [{}]: [{}]", e.getMessage(), context.externalValue());, +            if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing content_length: [{}]: [{}]", e.getMessage(), context.externalValue());, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/index/mapper/attachment/AttachmentMapper.java, + *      "field1" : "...", + *      "file1" : {, + *          "_content_type" : "application/pdf",, + *          "_content_length" : "500000000",, + *          "_name" : "..../something.pdf",, + *          "_content" : "", +            if (!ignoreErrors) {, +                throw new MapperParsingException("Failed to extract [" + indexedChars + "] characters of text for [" + name + "]", e);, +            } else {, +                logger.debug("Failed to extract [{}] characters of text for [{}]: [{}]", indexedChars, name, e.getMessage());, +            }, +                logger.debug("Cannot detect language: [{}]", t.getMessage());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing name: [{}]",, +                        e.getMessage());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing date: [{}]: [{}]",, +                        e.getMessage(), context.externalValue());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing title: [{}]: [{}]",, +                        e.getMessage(), context.externalValue());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing author: [{}]: [{}]",, +                        e.getMessage(), context.externalValue());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing keywords: [{}]: [{}]",, +                        e.getMessage(), context.externalValue());, +                if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing content_type: [{}]: [{}]", e.getMessage(), context.externalValue());, +            if (logger.isDebugEnabled()) logger.debug("Ignoring MapperParsingException catch while parsing content_length: [{}]: [{}]", e.getMessage(), context.externalValue());, +++ /dev/null, +++ b/src/test/resources/log4j.xml, +<?xml version="1.0" encoding="UTF-8" ?>, +<!-- Licensed to Elasticsearch (the "Author") under one or more contributor, +	license agreements. See the NOTICE file distributed with this work for additional , +	information regarding copyright ownership. Author licenses this file to you , +	under the Apache License, Version 2.0 (the "License"); you may not use this , +	file except in compliance with the License. You may obtain a copy of the , +	License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by , +	applicable law or agreed to in writing, software distributed under the License , +	is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY , +	KIND, either express or implied. See the License for the specific language , +	governing permissions and limitations under the License. -->, +, +<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">, +, +<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">, +	<appender name="console" class="org.apache.log4j.ConsoleAppender">, +		<param name="Target" value="System.out" />, +		<layout class="org.apache.log4j.PatternLayout">, +			<param name="ConversionPattern" value="[%d{ISO8601}][%-5p][%-25c] %m%n" />, +		</layout>, +	</appender>, +]