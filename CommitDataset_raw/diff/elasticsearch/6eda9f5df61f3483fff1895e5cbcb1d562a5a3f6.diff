[+++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            String currentPath = context.path().pathAsText(paths[i]);, +            FieldMapper existingFieldMapper = context.docMapper().mappers().getMapper(currentPath);, +            if (existingFieldMapper != null) {, +                throw new MapperParsingException(, +                        "Could not dynamically add mapping for field [{}]. Existing mapping for [{}] must be of type object but found [{}].",, +                        null, String.join(".", paths), currentPath, existingFieldMapper.fieldType.typeName());, +            }, +            mapper = context.docMapper().objectMappers().get(currentPath);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +            String currentPath = context.path().pathAsText(paths[i]);, +            FieldMapper existingFieldMapper = context.docMapper().mappers().getMapper(currentPath);, +            if (existingFieldMapper != null) {, +                throw new MapperParsingException(, +                        "Could not dynamically add mapping for field [{}]. Existing mapping for [{}] must be of type object but found [{}].",, +                        null, String.join(".", paths), currentPath, existingFieldMapper.fieldType.typeName());, +            }, +            mapper = context.docMapper().objectMappers().get(currentPath);, +++ b/core/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java, +import org.elasticsearch.index.mapper.core.NumberFieldMapper;, +import static org.hamcrest.Matchers.instanceOf;, +        Mapper fooMapper = doc.dynamicMappingsUpdate().root().getMapper("foo");, +        assertNotNull(fooMapper);, +        assertThat(fooMapper, instanceOf(ObjectMapper.class));, +        Mapper barMapper = ((ObjectMapper) fooMapper).getMapper("bar");, +        assertNotNull(barMapper);, +        assertThat(barMapper, instanceOf(ObjectMapper.class));, +        Mapper bazMapper = ((ObjectMapper) barMapper).getMapper("baz");, +        assertNotNull(bazMapper);, +        assertThat(bazMapper, instanceOf(NumberFieldMapper.class));, +        Mapper fooMapper = doc.dynamicMappingsUpdate().root().getMapper("foo");, +        assertNotNull(fooMapper);, +        assertThat(fooMapper, instanceOf(ObjectMapper.class));, +        Mapper barMapper = ((ObjectMapper) fooMapper).getMapper("bar");, +        assertNotNull(barMapper);, +        assertThat(barMapper, instanceOf(ObjectMapper.class));, +        Mapper bazMapper = ((ObjectMapper) barMapper).getMapper("baz");, +        assertNotNull(bazMapper);, +        assertThat(bazMapper, instanceOf(NumberFieldMapper.class));, +    }, +, +    public void testDynamicDottedFieldNameLongArrayWithExistingParent() throws Exception {, +        DocumentMapperParser mapperParser = createIndex("test").mapperService().documentMapperParser();, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +            .startObject("properties") .startObject("foo"), +            .field("type", "object"), +            .endObject().endObject().endObject().endObject().string();, +        DocumentMapper mapper = mapperParser.parse("type", new CompressedXContent(mapping));, +, +        BytesReference bytes = XContentFactory.jsonBuilder(), +                .startObject().startArray("foo.bar.baz"), +                .value(0), +                .value(1), +            .endArray().endObject().bytes();, +        ParsedDocument doc = mapper.parse("test", "type", "1", bytes);, +        assertEquals(4, doc.rootDoc().getFields("foo.bar.baz").length);, +        Mapper fooMapper = doc.dynamicMappingsUpdate().root().getMapper("foo");, +        assertNotNull(fooMapper);, +        assertThat(fooMapper, instanceOf(ObjectMapper.class));, +        Mapper barMapper = ((ObjectMapper) fooMapper).getMapper("bar");, +        assertNotNull(barMapper);, +        assertThat(barMapper, instanceOf(ObjectMapper.class));, +        Mapper bazMapper = ((ObjectMapper) barMapper).getMapper("baz");, +        assertNotNull(bazMapper);, +        assertThat(bazMapper, instanceOf(NumberFieldMapper.class));, +    }, +, +    public void testDynamicDottedFieldNameLongArrayWithExistingParentWrongType() throws Exception {, +        DocumentMapperParser mapperParser = createIndex("test").mapperService().documentMapperParser();, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +            .startObject("properties") .startObject("foo"), +            .field("type", "long"), +            .endObject().endObject().endObject().endObject().string();, +        DocumentMapper mapper = mapperParser.parse("type", new CompressedXContent(mapping));, +, +        BytesReference bytes = XContentFactory.jsonBuilder(), +                .startObject().startArray("foo.bar.baz"), +                .value(0), +                .value(1), +            .endArray().endObject().bytes();, +        MapperParsingException exception = expectThrows(MapperParsingException.class, () -> mapper.parse("test", "type", "1", bytes));, +        assertEquals("Could not dynamically add mapping for field [foo.bar.baz]. ", +                + "Existing mapping for [foo] must be of type object but found [long].", exception.getMessage());, +        Mapper fooMapper = doc.dynamicMappingsUpdate().root().getMapper("foo");, +        assertNotNull(fooMapper);, +        assertThat(fooMapper, instanceOf(ObjectMapper.class));, +        Mapper barMapper = ((ObjectMapper) fooMapper).getMapper("bar");, +        assertNotNull(barMapper);, +        assertThat(barMapper, instanceOf(ObjectMapper.class));, +        Mapper bazMapper = ((ObjectMapper) barMapper).getMapper("baz");, +        assertNotNull(bazMapper);, +        assertThat(bazMapper, instanceOf(NumberFieldMapper.class));, +        Mapper fooMapper = doc.dynamicMappingsUpdate().root().getMapper("foo");, +        assertNotNull(fooMapper);, +        assertThat(fooMapper, instanceOf(ObjectMapper.class));, +        Mapper barMapper = ((ObjectMapper) fooMapper).getMapper("bar");, +        assertNotNull(barMapper);, +        assertThat(barMapper, instanceOf(ObjectMapper.class));, +        Mapper bazMapper = ((ObjectMapper) barMapper).getMapper("baz");, +        assertNotNull(bazMapper);]