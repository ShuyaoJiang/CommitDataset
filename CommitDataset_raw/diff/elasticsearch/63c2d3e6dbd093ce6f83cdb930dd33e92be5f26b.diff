[+++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/monitoring/MonitoringFeatureSetUsage.java, +import java.util.Collections;, +    public Map<String, Object> getExporters() {, +        return exporters == null ? Collections.emptyMap() : Collections.unmodifiableMap(exporters);, +    }, +, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/monitoring/MonitoringFeatureSetUsage.java, +import java.util.Collections;, +    public Map<String, Object> getExporters() {, +        return exporters == null ? Collections.emptyMap() : Collections.unmodifiableMap(exporters);, +    }, +, +++ b/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/action/TransportMonitoringBulkActionTests.java, +    public void setUpMocks() {, +    public void testExecuteEmptyRequest() {, +    public void testAsyncActionCreateMonitoringDocsWithNoDocs() {, +    public void testAsyncActionCreateMonitoringDocs() {, +    public void testAsyncActionCreateMonitoringDocWithNoTimestamp() {, +    public void testAsyncActionExecuteExport() {, +    public void testAsyncActionExportThrowsException() {, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/monitoring/MonitoringFeatureSetUsage.java, +import java.util.Collections;, +    public Map<String, Object> getExporters() {, +        return exporters == null ? Collections.emptyMap() : Collections.unmodifiableMap(exporters);, +    }, +, +++ b/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/action/TransportMonitoringBulkActionTests.java, +    public void setUpMocks() {, +    public void testExecuteEmptyRequest() {, +    public void testAsyncActionCreateMonitoringDocsWithNoDocs() {, +    public void testAsyncActionCreateMonitoringDocs() {, +    public void testAsyncActionCreateMonitoringDocWithNoTimestamp() {, +    public void testAsyncActionExecuteExport() {, +    public void testAsyncActionExportThrowsException() {, +++ b/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/integration/MonitoringIT.java, +import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;, +import org.elasticsearch.action.admin.cluster.node.stats.NodeStats;, +import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.analysis.common.CommonAnalysisPlugin;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.xcontent.ToXContentObject;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.SearchHits;, +import org.elasticsearch.search.collapse.CollapseBuilder;, +import org.elasticsearch.search.sort.SortOrder;, +import org.elasticsearch.test.ESSingleNodeTestCase;, +import org.elasticsearch.threadpool.ThreadPoolStats;, +import org.elasticsearch.xpack.core.XPackSettings;, +import org.elasticsearch.xpack.core.action.XPackUsageRequestBuilder;, +import org.elasticsearch.xpack.core.action.XPackUsageResponse;, +import org.elasticsearch.xpack.core.monitoring.action.MonitoringBulkRequestBuilder;, +import org.elasticsearch.xpack.core.monitoring.action.MonitoringBulkResponse;, +import org.elasticsearch.xpack.core.monitoring.MonitoredSystem;, +import org.elasticsearch.xpack.core.monitoring.MonitoringFeatureSetUsage;, +import org.elasticsearch.xpack.monitoring.LocalStateMonitoring;, +import org.elasticsearch.xpack.monitoring.test.MockIngestPlugin;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Optional;, +import java.util.stream.Collectors;, +import static org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.threadpool.ThreadPool.Names.BULK;, +import static org.elasticsearch.xpack.core.monitoring.exporter.MonitoringTemplateUtils.TEMPLATE_VERSION;, +public class MonitoringIT extends ESSingleNodeTestCase {, +    protected Settings nodeSettings() {, +                       .put(super.nodeSettings()), +                       .put(XPackSettings.MACHINE_LEARNING_ENABLED.getKey(), false), +                       .put("xpack.monitoring.collection.interval", "-1"), +                       .put("xpack.monitoring.exporters._local.type", "local"), +                       .put("xpack.monitoring.exporters._local.enabled", false), +                       .put("xpack.monitoring.exporters._local.cluster_alerts.management.enabled", false), +    @Override, +    protected Collection<Class<? extends Plugin>> getPlugins() {, +        return Arrays.asList(LocalStateMonitoring.class, MockIngestPlugin.class, CommonAnalysisPlugin.class);, +    private String createBulkEntity() {, +        return "{\"index\":{\"_type\":\"test\"}}\n" +, +               "{\"foo\":{\"bar\":0}}\n" +, +               "{\"index\":{\"_type\":\"test\"}}\n" +, +               "{\"foo\":{\"bar\":1}}\n" +, +               "{\"index\":{\"_type\":\"test\"}}\n" +, +               "{\"foo\":{\"bar\":2}}\n" +, +               "\n";, +            // REST is the realistic way that these operations happen, so it's the most realistic way to integration test it too, +            //final Response bulkResponse = getRestClient().performRequest("POST", "/_xpack/monitoring/_bulk",, +            //                                                             parameters, createBulkEntity());, +            final MonitoringBulkResponse bulkResponse =, +                    new MonitoringBulkRequestBuilder(client()), +                            .add(system, null, new BytesArray(createBulkEntity().getBytes("UTF-8")), XContentType.JSON,, +                                 System.currentTimeMillis(), interval.millis()), +                    .get();, +            assertThat(bulkResponse.status(), is(RestStatus.OK));, +            assertThat(bulkResponse.getError(), nullValue());, +, +            final String monitoringIndex = ".monitoring-" + system.getSystem() + "-" + TEMPLATE_VERSION + "-*";]