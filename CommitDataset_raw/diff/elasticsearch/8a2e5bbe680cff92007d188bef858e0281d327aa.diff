[+++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +     *, +     *, +     *, +     * @param excludedNodes id of nodes that will be excluded, +     *, +     *, +         *, +         *, +         * Clears the post allocation flag for the specified shard, +         */, +        public Builder clearPostAllocationFlag(ShardId shardId) {, +            assert this.index.equals(shardId.index().name());, +            IndexShardRoutingTable indexShard = shards.get(shardId.id());, +            shards.put(indexShard.shardId().id(), new IndexShardRoutingTable(indexShard.shardId(), indexShard.shards(), false));, +            return this;, +        }, +, +        /**, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +     *, +     *, +     *, +     * @param excludedNodes id of nodes that will be excluded, +     *, +     *, +         *, +         *, +         * Clears the post allocation flag for the specified shard, +         */, +        public Builder clearPostAllocationFlag(ShardId shardId) {, +            assert this.index.equals(shardId.index().name());, +            IndexShardRoutingTable indexShard = shards.get(shardId.id());, +            shards.put(indexShard.shardId().id(), new IndexShardRoutingTable(indexShard.shardId(), indexShard.shards(), false));, +            return this;, +        }, +, +        /**, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Sets;, +import org.elasticsearch.index.shard.ShardId;, +    private Set<ShardId> clearPostAllocationFlag;, +, +    /**, +     * Clears the post allocation flag for the provided shard id. NOTE: this should be used cautiously, +     * since it will lead to data loss of the primary shard is not allocated, as it will allocate, +     * the primary shard on a node and *not* expect it to have an existing valid index there., +     */, +    public void addClearPostAllocationFlag(ShardId shardId) {, +        if (clearPostAllocationFlag == null) {, +            clearPostAllocationFlag = Sets.newHashSet();, +        }, +        clearPostAllocationFlag.add(shardId);, +    }, +, +    public Iterable<ShardId> getShardsToClearPostAllocationFlag() {, +        if (clearPostAllocationFlag == null) {, +            return ImmutableSet.of();, +        }, +        return clearPostAllocationFlag;, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +     *, +     *, +     *, +     * @param excludedNodes id of nodes that will be excluded, +     *, +     *, +         *, +         *, +         * Clears the post allocation flag for the specified shard, +         */, +        public Builder clearPostAllocationFlag(ShardId shardId) {, +            assert this.index.equals(shardId.index().name());, +            IndexShardRoutingTable indexShard = shards.get(shardId.id());, +            shards.put(indexShard.shardId().id(), new IndexShardRoutingTable(indexShard.shardId(), indexShard.shards(), false));, +            return this;, +        }, +, +        /**, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Sets;, +import org.elasticsearch.index.shard.ShardId;, +    private Set<ShardId> clearPostAllocationFlag;, +, +    /**, +     * Clears the post allocation flag for the provided shard id. NOTE: this should be used cautiously, +     * since it will lead to data loss of the primary shard is not allocated, as it will allocate, +     * the primary shard on a node and *not* expect it to have an existing valid index there., +     */, +    public void addClearPostAllocationFlag(ShardId shardId) {, +        if (clearPostAllocationFlag == null) {, +            clearPostAllocationFlag = Sets.newHashSet();, +        }, +        clearPostAllocationFlag.add(shardId);, +    }, +]