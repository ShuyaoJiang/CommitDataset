[+++ b/core/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java, +                final float result;, +, +                if (value instanceof Number) {, +                    result = ((Number) value).floatValue();, +                } else {, +                    if (value instanceof BytesRef) {, +                        value = ((BytesRef) value).utf8ToString();, +                    }, +                    result = Float.parseFloat(value.toString());, +                }, +                validateParsed(result);, +                return result;, +                float parsed = parser.floatValue(coerce);, +                validateParsed(parsed);, +                return parsed;, +, +            private void validateParsed(float value) {, +                if (!Float.isFinite(HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value)))) {, +                    throw new IllegalArgumentException("[half_float] supports only finite values, but got [" + value + "]");, +                }, +            }, +                final float result;, +, +                    result = ((Number) value).floatValue();, +                } else {, +                    result = Float.parseFloat(value.toString());, +                }, +                validateParsed(result);, +                return result;, +                float parsed = parser.floatValue(coerce);, +                validateParsed(parsed);, +                return parsed;, +, +            private void validateParsed(float value) {, +                if (!Float.isFinite(value)) {, +                    throw new IllegalArgumentException("[float] supports only finite values, but got [" + value + "]");, +                }, +            }, +                double parsed = objectToDouble(value);, +                validateParsed(parsed);, +                return parsed;, +                double parsed = parser.doubleValue(coerce);, +                validateParsed(parsed);, +                return parsed;, +, +            private void validateParsed(double value) {, +                if (!Double.isFinite(value)) {, +                    throw new IllegalArgumentException("[double] supports only finite values, but got [" + value + "]");, +                }, +            }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java, +                final float result;, +, +                if (value instanceof Number) {, +                    result = ((Number) value).floatValue();, +                } else {, +                    if (value instanceof BytesRef) {, +                        value = ((BytesRef) value).utf8ToString();, +                    }, +                    result = Float.parseFloat(value.toString());, +                }, +                validateParsed(result);, +                return result;, +                float parsed = parser.floatValue(coerce);, +                validateParsed(parsed);, +                return parsed;, +, +            private void validateParsed(float value) {, +                if (!Float.isFinite(HalfFloatPoint.sortableShortToHalfFloat(HalfFloatPoint.halfFloatToSortableShort(value)))) {, +                    throw new IllegalArgumentException("[half_float] supports only finite values, but got [" + value + "]");, +                }, +            }, +                final float result;, +, +                    result = ((Number) value).floatValue();, +                } else {, +                    result = Float.parseFloat(value.toString());, +                }, +                validateParsed(result);, +                return result;, +                float parsed = parser.floatValue(coerce);, +                validateParsed(parsed);, +                return parsed;, +, +            private void validateParsed(float value) {, +                if (!Float.isFinite(value)) {, +                    throw new IllegalArgumentException("[float] supports only finite values, but got [" + value + "]");, +                }, +            }, +                double parsed = objectToDouble(value);, +                validateParsed(parsed);, +                return parsed;, +                double parsed = parser.doubleValue(coerce);, +                validateParsed(parsed);, +                return parsed;, +, +            private void validateParsed(double value) {, +                if (!Double.isFinite(value)) {, +                    throw new IllegalArgumentException("[double] supports only finite values, but got [" + value + "]");]