[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutJobAction.java, +, +            return new Request(job);, +        private Job.Builder job;, +        public Request(Job.Builder job) {, +        public Job.Builder getJob() {, +            job = new Job.Builder(in);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutJobAction.java, +, +            return new Request(job);, +        private Job.Builder job;, +        public Request(Job.Builder job) {, +        public Job.Builder getJob() {, +            job = new Job.Builder(in);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/ValidateJobConfigAction.java, +, +            return new Request(job.getCreateTime() == null ? job.build(new Date()) : job.build());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutJobAction.java, +, +            return new Request(job);, +        private Job.Builder job;, +        public Request(Job.Builder job) {, +        public Job.Builder getJob() {, +            job = new Job.Builder(in);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/ValidateJobConfigAction.java, +, +            return new Request(job.getCreateTime() == null ? job.build(new Date()) : job.build());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import java.util.Date;, +        Job job = request.getJob().build(new Date());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutJobAction.java, +, +            return new Request(job);, +        private Job.Builder job;, +        public Request(Job.Builder job) {, +        public Job.Builder getJob() {, +            job = new Job.Builder(in);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/ValidateJobConfigAction.java, +, +            return new Request(job.getCreateTime() == null ? job.build(new Date()) : job.build());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import java.util.Date;, +        Job job = request.getJob().build(new Date());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/Job.java, +    public static class Builder implements Writeable, ToXContent  {, +        public Builder(StreamInput in) throws IOException {, +            id = in.readOptionalString();, +            description = in.readOptionalString();, +            createTime = in.readBoolean() ? new Date(in.readVLong()) : null;, +            finishedTime = in.readBoolean() ? new Date(in.readVLong()) : null;, +            lastDataTime = in.readBoolean() ? new Date(in.readVLong()) : null;, +            analysisConfig = in.readOptionalWriteable(AnalysisConfig::new);, +            analysisLimits = in.readOptionalWriteable(AnalysisLimits::new);, +            dataDescription = in.readOptionalWriteable(DataDescription::new);, +            modelPlotConfig = in.readOptionalWriteable(ModelPlotConfig::new);, +            renormalizationWindowDays = in.readOptionalLong();, +            backgroundPersistInterval = in.readOptionalWriteable(TimeValue::new);, +            modelSnapshotRetentionDays = in.readOptionalLong();, +            resultsRetentionDays = in.readOptionalLong();, +            customSettings = in.readMap();, +            modelSnapshotId = in.readOptionalString();, +            resultsIndexName = in.readOptionalString();, +            deleted = in.readBoolean();, +        }, +, +        Builder setCreateTime(Date createTime) {, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeOptionalString(id);, +            out.writeOptionalString(description);, +            if (createTime != null) {, +                out.writeBoolean(true);, +                out.writeVLong(createTime.getTime());, +            } else {, +                out.writeBoolean(false);, +            }, +            if (finishedTime != null) {, +                out.writeBoolean(true);, +                out.writeVLong(finishedTime.getTime());, +            } else {, +                out.writeBoolean(false);, +            }, +            if (lastDataTime != null) {, +                out.writeBoolean(true);, +                out.writeVLong(lastDataTime.getTime());, +            } else {, +                out.writeBoolean(false);, +            }, +            out.writeOptionalWriteable(analysisConfig);, +            out.writeOptionalWriteable(analysisLimits);, +            out.writeOptionalWriteable(dataDescription);, +            out.writeOptionalWriteable(modelPlotConfig);, +            out.writeOptionalLong(renormalizationWindowDays);, +            out.writeOptionalWriteable(backgroundPersistInterval);, +            out.writeOptionalLong(modelSnapshotRetentionDays);, +            out.writeOptionalLong(resultsRetentionDays);, +            out.writeMap(customSettings);, +            out.writeOptionalString(modelSnapshotId);, +            out.writeOptionalString(resultsIndexName);, +            out.writeBoolean(deleted);]