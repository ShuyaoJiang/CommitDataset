[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MlMetadata.java, +        if (map.isEmpty()) {, +            return;, +        }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MlMetadata.java, +        if (map.isEmpty()) {, +            return;, +        }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MlTasks.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.persistent.PersistentTasksClusterService;, +import java.util.Collection;, +     * Get the job Ids of anomaly detector job tasks that do, +     * not have an assignment., +     *, +     * @param tasks Persistent tasks. If null an empty set is returned., +     * @param nodes The cluster nodes, +     * @return The job Ids of tasks to do not have an assignment., +     */, +    public static Set<String> unallocatedJobIds(@Nullable PersistentTasksCustomMetaData tasks,, +                                                DiscoveryNodes nodes) {, +        return unallocatedJobTasks(tasks, nodes).stream(), +                .map(task -> task.getId().substring(JOB_TASK_ID_PREFIX.length())), +                .collect(Collectors.toSet());, +    }, +, +    /**, +     * The job tasks that do not have an allocation as determined by, +     * {@link PersistentTasksClusterService#needsReassignment(PersistentTasksCustomMetaData.Assignment, DiscoveryNodes)}, +     *, +     * @param tasks Persistent tasks. If null an empty set is returned., +     * @param nodes The cluster nodes, +     * @return Unallocated job tasks, +     */, +    public static Collection<PersistentTasksCustomMetaData.PersistentTask> unallocatedJobTasks(, +            @Nullable PersistentTasksCustomMetaData tasks,, +            DiscoveryNodes nodes) {, +        if (tasks == null) {, +            return Collections.emptyList();, +        }, +, +        return tasks.findTasks(JOB_TASK_NAME, task -> true), +                .stream(), +                .filter(task -> PersistentTasksClusterService.needsReassignment(task.getAssignment(), nodes)), +                .collect(Collectors.toList());, +    }, +, +    /**, +     * Get the datafeed Ids of started datafeed tasks, +     * that do not have an assignment., +     *, +     * @param tasks Persistent tasks. If null an empty set is returned., +     * @param nodes The cluster nodes, +     * @return The job Ids of tasks to do not have an assignment., +    public static Set<String> unallocatedDatafeedIds(@Nullable PersistentTasksCustomMetaData tasks,, +                                                DiscoveryNodes nodes) {, +, +        return unallocatedDatafeedTasks(tasks, nodes).stream(), +                .map(task -> task.getId().substring(DATAFEED_TASK_ID_PREFIX.length())), +                .collect(Collectors.toSet());, +     * The datafeed tasks that do not have an allocation as determined by, +     * {@link PersistentTasksClusterService#needsReassignment(PersistentTasksCustomMetaData.Assignment, DiscoveryNodes)}, +     * @param tasks Persistent tasks. If null an empty set is returned., +     * @param nodes The cluster nodes, +     * @return Unallocated datafeed tasks, +    public static Collection<PersistentTasksCustomMetaData.PersistentTask> unallocatedDatafeedTasks(, +            @Nullable PersistentTasksCustomMetaData tasks,, +            DiscoveryNodes nodes) {, +        if (tasks == null) {, +            return Collections.emptyList();, +        }, +, +        return tasks.findTasks(DATAFEED_TASK_NAME, task -> true), +                .filter(task -> PersistentTasksClusterService.needsReassignment(task.getAssignment(), nodes)), +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MlMetadata.java, +        if (map.isEmpty()) {, +            return;, +        }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MlTasks.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.persistent.PersistentTasksClusterService;, +import java.util.Collection;, +     * Get the job Ids of anomaly detector job tasks that do, +     * not have an assignment., +     *, +     * @param tasks Persistent tasks. If null an empty set is returned., +     * @param nodes The cluster nodes, +     * @return The job Ids of tasks to do not have an assignment., +     */, +    public static Set<String> unallocatedJobIds(@Nullable PersistentTasksCustomMetaData tasks,, +                                                DiscoveryNodes nodes) {, +        return unallocatedJobTasks(tasks, nodes).stream(), +                .map(task -> task.getId().substring(JOB_TASK_ID_PREFIX.length())), +                .collect(Collectors.toSet());, +    }, +, +    /**]