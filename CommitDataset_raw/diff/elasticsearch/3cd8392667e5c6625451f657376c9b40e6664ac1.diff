[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                project.tasks.run.clusterConfig.distribution = 'integ-test-zip', +        project.integTestCluster.distribution = 'integ-test-zip', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                project.tasks.run.clusterConfig.distribution = 'integ-test-zip', +        project.integTestCluster.distribution = 'integ-test-zip', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            throw new GradleException("Module ${module.path} not allowed be installed distributions other than integ-test-zip because they should already have all modules bundled!"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                project.tasks.run.clusterConfig.distribution = 'integ-test-zip', +        project.integTestCluster.distribution = 'integ-test-zip', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            throw new GradleException("Module ${module.path} not allowed be installed distributions other than integ-test-zip because they should already have all modules bundled!"), +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                project.tasks.run.clusterConfig.distribution = 'integ-test-zip', +        project.integTestCluster.distribution = 'integ-test-zip', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            throw new GradleException("Module ${module.path} not allowed be installed distributions other than integ-test-zip because they should already have all modules bundled!"), +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.CREATED);, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertSame(indexResponse.status(), RestStatus.CREATED);, +            assertEquals(response.getStatusLine().getStatusCode(), RestStatus.OK.getStatus());, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertSame(indexResponse.status(), RestStatus.CREATED);, +            assertSame(deleteResponse.getResult(), DocWriteResponse.Result.DELETED);, +            assertSame(indexResponse.status(), RestStatus.CREATED);, +            assertSame(indexResponse.status(), RestStatus.CREATED);, +            assertSame(bulkResponse.status(), RestStatus.OK);, +            assertSame(bulkResponse.status(), RestStatus.OK);, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.CREATED);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                project.tasks.run.clusterConfig.distribution = 'integ-test-zip', +        project.integTestCluster.distribution = 'integ-test-zip', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            throw new GradleException("Module ${module.path} not allowed be installed distributions other than integ-test-zip because they should already have all modules bundled!"), +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.CREATED);, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertSame(indexResponse.status(), RestStatus.CREATED);, +            assertEquals(response.getStatusLine().getStatusCode(), RestStatus.OK.getStatus());, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertSame(indexResponse.status(), RestStatus.CREATED);, +            assertSame(deleteResponse.getResult(), DocWriteResponse.Result.DELETED);, +            assertSame(indexResponse.status(), RestStatus.CREATED);, +            assertSame(indexResponse.status(), RestStatus.CREATED);, +            assertSame(bulkResponse.status(), RestStatus.OK);, +            assertSame(bulkResponse.status(), RestStatus.OK);, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.CREATED);, +++ b/client/rest/src/main/java/org/elasticsearch/client/HasAttributeNodeSelector.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                project.tasks.run.clusterConfig.distribution = 'integ-test-zip', +        project.integTestCluster.distribution = 'integ-test-zip', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            throw new GradleException("Module ${module.path} not allowed be installed distributions other than integ-test-zip because they should already have all modules bundled!"), +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.CREATED);, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(indexResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertSame(indexResponse.status(), RestStatus.CREATED);, +            assertEquals(response.getStatusLine().getStatusCode(), RestStatus.OK.getStatus());, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);, +            assertEquals(updateResponse.getResult(), DocWriteResponse.Result.UPDATED);]