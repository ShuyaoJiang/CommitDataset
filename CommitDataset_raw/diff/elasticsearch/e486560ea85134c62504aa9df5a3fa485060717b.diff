[+++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.REPLICA, shardId.getIndexName(), request.type(), request.id(), request.source()), +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.PRIMARY, request.index(), request.type(), request.id(), request.source()), +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.REPLICA, shardId.getIndexName(), request.type(), request.id(), request.source()), +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.PRIMARY, request.index(), request.type(), request.id(), request.source()), +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.REPLICA, shardId.getIndexName(), request.type(), request.id(), request.source()), +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.PRIMARY, request.index(), request.type(), request.id(), request.source()), +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +    // -2 was used for docs that can be found in the index but do not have a version, +     * <li>a doc ID and a version otherwise, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.REPLICA, shardId.getIndexName(), request.type(), request.id(), request.source()), +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.PRIMARY, request.index(), request.type(), request.id(), request.source()), +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +    // -2 was used for docs that can be found in the index but do not have a version, +     * <li>a doc ID and a version otherwise, +++ b/core/src/main/java/org/elasticsearch/index/VersionType.java, +            return currentVersion == Versions.NOT_FOUND ? 1 : currentVersion + 1;, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.REPLICA, shardId.getIndexName(), request.type(), request.id(), request.source()), +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.PRIMARY, request.index(), request.type(), request.id(), request.source()), +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +    // -2 was used for docs that can be found in the index but do not have a version, +     * <li>a doc ID and a version otherwise, +++ b/core/src/main/java/org/elasticsearch/index/VersionType.java, +            return currentVersion == Versions.NOT_FOUND ? 1 : currentVersion + 1;, +++ b/core/src/main/java/org/elasticsearch/index/fieldvisitor/FieldsVisitor.java, +                throw new IllegalStateException("Field [" + entry.getKey(), +                    + "] exists in the index but not in mappings");, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.REPLICA, shardId.getIndexName(), request.type(), request.id(), request.source()), +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.PRIMARY, request.index(), request.type(), request.id(), request.source()), +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +    // -2 was used for docs that can be found in the index but do not have a version, +     * <li>a doc ID and a version otherwise, +++ b/core/src/main/java/org/elasticsearch/index/VersionType.java, +            return currentVersion == Versions.NOT_FOUND ? 1 : currentVersion + 1;, +++ b/core/src/main/java/org/elasticsearch/index/fieldvisitor/FieldsVisitor.java, +                throw new IllegalStateException("Field [" + entry.getKey(), +                    + "] exists in the index but not in mappings");, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService, ignoreErrorsOnGeneratedFields);, +                return innerGetLoadFromStoredFields(type, id, gFields, fetchSourceContext, get, mapperService, ignoreErrorsOnGeneratedFields);, +                DocumentMapper docMapper = mapperService.documentMapper(type);, +    private GetResult innerGetLoadFromStoredFields(String type, String id, String[] gFields, FetchSourceContext fetchSourceContext, Engine.GetResult get, MapperService mapperService, boolean ignoreErrorsOnGeneratedFields) {, +                fieldVisitor.postProcess(mapperService);, +        DocumentMapper docMapper = mapperService.documentMapper(type);, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.REPLICA, shardId.getIndexName(), request.type(), request.id(), request.source()), +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.PRIMARY, request.index(), request.type(), request.id(), request.source()), +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +    // -2 was used for docs that can be found in the index but do not have a version, +     * <li>a doc ID and a version otherwise, +++ b/core/src/main/java/org/elasticsearch/index/VersionType.java, +            return currentVersion == Versions.NOT_FOUND ? 1 : currentVersion + 1;, +++ b/core/src/main/java/org/elasticsearch/index/fieldvisitor/FieldsVisitor.java, +                throw new IllegalStateException("Field [" + entry.getKey(), +                    + "] exists in the index but not in mappings");, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService, ignoreErrorsOnGeneratedFields);, +                return innerGetLoadFromStoredFields(type, id, gFields, fetchSourceContext, get, mapperService, ignoreErrorsOnGeneratedFields);, +                DocumentMapper docMapper = mapperService.documentMapper(type);, +    private GetResult innerGetLoadFromStoredFields(String type, String id, String[] gFields, FetchSourceContext fetchSourceContext, Engine.GetResult get, MapperService mapperService, boolean ignoreErrorsOnGeneratedFields) {, +                fieldVisitor.postProcess(mapperService);, +        DocumentMapper docMapper = mapperService.documentMapper(type);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ContentPath.java, +++ b/core/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.REPLICA, shardId.getIndexName(), request.type(), request.id(), request.source()), +        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.PRIMARY, request.index(), request.type(), request.id(), request.source()), +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/PerThreadIDAndVersionLookup.java, +                assert versions != null;, +++ b/core/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +    // -2 was used for docs that can be found in the index but do not have a version, +     * <li>a doc ID and a version otherwise, +++ b/core/src/main/java/org/elasticsearch/index/VersionType.java, +            return currentVersion == Versions.NOT_FOUND ? 1 : currentVersion + 1;, +++ b/core/src/main/java/org/elasticsearch/index/fieldvisitor/FieldsVisitor.java, +                throw new IllegalStateException("Field [" + entry.getKey(), +                    + "] exists in the index but not in mappings");, +++ b/core/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +            GetResult getResult = innerGetLoadFromStoredFields(type, id, fields, fetchSourceContext, engineGetResult, mapperService, ignoreErrorsOnGeneratedFields);, +                return innerGetLoadFromStoredFields(type, id, gFields, fetchSourceContext, get, mapperService, ignoreErrorsOnGeneratedFields);, +                DocumentMapper docMapper = mapperService.documentMapper(type);, +    private GetResult innerGetLoadFromStoredFields(String type, String id, String[] gFields, FetchSourceContext fetchSourceContext, Engine.GetResult get, MapperService mapperService, boolean ignoreErrorsOnGeneratedFields) {, +                fieldVisitor.postProcess(mapperService);, +        DocumentMapper docMapper = mapperService.documentMapper(type);]