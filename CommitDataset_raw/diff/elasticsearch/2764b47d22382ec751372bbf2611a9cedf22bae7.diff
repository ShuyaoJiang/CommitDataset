[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +        // document's score as a read-only float., +        metadata.scoreValueSlot = utility.addVariable(null, "_score", definition.floatType).slot;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +        // document's score as a read-only float., +        metadata.scoreValueSlot = utility.addVariable(null, "_score", definition.floatType).slot;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                } else if (left instanceof Long && right instanceof Long) {, +                    return ((Number)left).longValue() * ((Number)right).longValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() * (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left * ((Number)right).floatValue();, +                } else if (left instanceof Long && right instanceof Long) {, +                    return ((Number)left).longValue() / ((Number)right).longValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() / (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left / ((Number)right).floatValue();, +                } else if (left instanceof Long && right instanceof Long) {, +                    return ((Number)left).longValue() % ((Number)right).longValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() % (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left % ((Number)right).floatValue();, +                } else if (left instanceof Long && right instanceof Long) {, +                    return ((Number)left).longValue() + ((Number)right).longValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() + (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left + ((Number)right).floatValue();, +                } else if (left instanceof Long && right instanceof Long) {, +                    return ((Number)left).longValue() - ((Number)right).longValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() - (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left - ((Number)right).floatValue();, +                    left instanceof Long || right instanceof Long ||, +                    left instanceof Float || right instanceof Float) {, +                if (left instanceof Double ||  left instanceof Long || left instanceof Float) {, +                if (right instanceof Double || right instanceof Long || right instanceof Float) {, +                    left instanceof Long || right instanceof Long ||, +                    left instanceof Float || right instanceof Float) {, +                if (left instanceof Double || left instanceof Long || left instanceof Float) {, +                if (right instanceof Double || right instanceof Long || right instanceof Float) {, +                    left instanceof Long || right instanceof Long ||, +                    left instanceof Float || right instanceof Float) {, +                if (left instanceof Double || left instanceof Long || left instanceof Float) {, +                if (right instanceof Double || right instanceof Long || right instanceof Float) {, +                    left instanceof Long || right instanceof Long ||, +                    left instanceof Float || right instanceof Float) {, +                if (left instanceof Double || left instanceof Long || left instanceof Float) {, +                if (right instanceof Double || right instanceof Long || right instanceof Float) {, +                    left instanceof Long || right instanceof Long ||, +                    left instanceof Float || right instanceof Float) {, +                if (left instanceof Double || left instanceof Long || left instanceof Float) {, +                if (right instanceof Double || right instanceof Long || right instanceof Float) {, +                    left instanceof Long || right instanceof Long ||, +                    left instanceof Float || right instanceof Float) {, +                if (left instanceof Double || left instanceof Long || left instanceof Float) {, +                if (right instanceof Double || right instanceof Long || right instanceof Float) {, +            } else if (left instanceof Long && right instanceof Long) {, +                return (long)left == (long)right;, +                } else if (left instanceof Long && right instanceof Long) {, +                    return ((Number)left).longValue() < ((Number)right).longValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() < (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left < ((Number)right).floatValue();, +                } else if (left instanceof Long && right instanceof Long) {, +                    return ((Number)left).longValue() <= ((Number)right).longValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() <= (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left <= ((Number)right).floatValue();, +                } else if (left instanceof Long && right instanceof Long) {, +                    return ((Number)left).longValue() > ((Number)right).longValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() > (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left > ((Number)right).floatValue();, +                } else if (left instanceof Long && right instanceof Long) {, +                    return ((Number)left).longValue() >= ((Number)right).longValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() >= (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left >= ((Number)right).floatValue();, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +        // document's score as a read-only float., +        metadata.scoreValueSlot = utility.addVariable(null, "_score", definition.floatType).slot;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                } else if (left instanceof Long && right instanceof Long) {, +                    return ((Number)left).longValue() * ((Number)right).longValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() * (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left * ((Number)right).floatValue();, +                } else if (left instanceof Long && right instanceof Long) {, +                    return ((Number)left).longValue() / ((Number)right).longValue();, +                } else if (left instanceof Float) {]