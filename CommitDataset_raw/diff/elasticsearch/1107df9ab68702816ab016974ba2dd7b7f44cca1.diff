[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.apache.lucene.index.Term;, +    /**, +     * A field query for the specified value., +     */, +    /**, +     * A term query to use when parsing a query string. Can return <tt>null</tt>., +     */, +    Query queryStringTermQuery(Term term);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.apache.lucene.index.Term;, +    /**, +     * A field query for the specified value., +     */, +    /**, +     * A term query to use when parsing a query string. Can return <tt>null</tt>., +     */, +    Query queryStringTermQuery(Term term);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.Query;, +import org.elasticsearch.util.lucene.all.AllTermQuery;, +    @Override public Query queryStringTermQuery(Term term) {, +        return new AllTermQuery(term);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.apache.lucene.index.Term;, +    /**, +     * A field query for the specified value., +     */, +    /**, +     * A term query to use when parsing a query string. Can return <tt>null</tt>., +     */, +    Query queryStringTermQuery(Term term);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.Query;, +import org.elasticsearch.util.lucene.all.AllTermQuery;, +    @Override public Query queryStringTermQuery(Term term) {, +        return new AllTermQuery(term);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public Query queryStringTermQuery(Term term) {, +        return null;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.apache.lucene.index.Term;, +    /**, +     * A field query for the specified value., +     */, +    /**, +     * A term query to use when parsing a query string. Can return <tt>null</tt>., +     */, +    Query queryStringTermQuery(Term term);, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.Query;, +import org.elasticsearch.util.lucene.all.AllTermQuery;, +    @Override public Query queryStringTermQuery(Term term) {, +        return new AllTermQuery(term);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public Query queryStringTermQuery(Term term) {, +        return null;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/support/MapperQueryParser.java, +import org.apache.lucene.index.Term;, +    private FieldMapper currentMapper;, +, +    @Override protected Query newTermQuery(Term term) {, +        if (currentMapper != null) {, +            Query termQuery = currentMapper.queryStringTermQuery(term);, +            if (termQuery != null) {, +                return termQuery;, +            }, +        }, +        return super.newTermQuery(term);, +    }, +, +        currentMapper = null;, +                currentMapper = fieldMappers.fieldMappers().mapper();, +                if (currentMapper != null) {, +                    if (currentMapper.useFieldQueryWithQueryString()) {, +                        query = currentMapper.fieldQuery(queryText);, +                        query = super.getFieldQuery(currentMapper.names().indexName(), queryText);, +        currentMapper = null;, +                currentMapper = fieldMappers.fieldMappers().mapper();, +                if (currentMapper != null) {, +                    Query rangeQuery = currentMapper.rangeQuery(part1, part2, inclusive, inclusive);, +        currentMapper = null;, +                currentMapper = fieldMappers.fieldMappers().mapper();]