[+++ b/src/main/java/org/elasticsearch/shield/audit/AuditTrail.java, +import org.elasticsearch.transport.TransportMessage;, +        public void anonymousAccess(String action, TransportMessage<?> message) {, +        public void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message) {, +        public void accessGranted(User user, String action, TransportMessage<?> message) {, +        public void accessDenied(User user, String action, TransportMessage<?> message) {, +    void anonymousAccess(String action, TransportMessage<?> message);, +    void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message);, +    void accessGranted(User user, String action, TransportMessage<?> message);, +    void accessDenied(User user, String action, TransportMessage<?> message);, +++ b/src/main/java/org/elasticsearch/shield/audit/AuditTrail.java, +import org.elasticsearch.transport.TransportMessage;, +        public void anonymousAccess(String action, TransportMessage<?> message) {, +        public void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message) {, +        public void accessGranted(User user, String action, TransportMessage<?> message) {, +        public void accessDenied(User user, String action, TransportMessage<?> message) {, +    void anonymousAccess(String action, TransportMessage<?> message);, +    void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message);, +    void accessGranted(User user, String action, TransportMessage<?> message);, +    void accessDenied(User user, String action, TransportMessage<?> message);, +++ b/src/main/java/org/elasticsearch/shield/audit/AuditTrailService.java, +import org.elasticsearch.transport.TransportMessage;, +    public void anonymousAccess(String action, TransportMessage<?> message) {, +            auditTrails[i].anonymousAccess(action, message);, +    public void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message) {, +            auditTrails[i].authenticationFailed(realm, token, action, message);, +    public void accessGranted(User user, String action, TransportMessage<?> message) {, +            auditTrails[i].accessGranted(user, action, message);, +    public void accessDenied(User user, String action, TransportMessage<?> message) {, +            auditTrails[i].accessDenied(user, action, message);, +++ b/src/main/java/org/elasticsearch/shield/audit/AuditTrail.java, +import org.elasticsearch.transport.TransportMessage;, +        public void anonymousAccess(String action, TransportMessage<?> message) {, +        public void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message) {, +        public void accessGranted(User user, String action, TransportMessage<?> message) {, +        public void accessDenied(User user, String action, TransportMessage<?> message) {, +    void anonymousAccess(String action, TransportMessage<?> message);, +    void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message);, +    void accessGranted(User user, String action, TransportMessage<?> message);, +    void accessDenied(User user, String action, TransportMessage<?> message);, +++ b/src/main/java/org/elasticsearch/shield/audit/AuditTrailService.java, +import org.elasticsearch.transport.TransportMessage;, +    public void anonymousAccess(String action, TransportMessage<?> message) {, +            auditTrails[i].anonymousAccess(action, message);, +    public void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message) {, +            auditTrails[i].authenticationFailed(realm, token, action, message);, +    public void accessGranted(User user, String action, TransportMessage<?> message) {, +            auditTrails[i].accessGranted(user, action, message);, +    public void accessDenied(User user, String action, TransportMessage<?> message) {, +            auditTrails[i].accessDenied(user, action, message);, +++ b/src/main/java/org/elasticsearch/shield/audit/logfile/LoggingAuditTrail.java, +import org.elasticsearch.transport.TransportMessage;, +    public void anonymousAccess(String action, TransportMessage<?> message) {, +            logger.info("ANONYMOUS_ACCESS\thost=[{}], action=[{}], request=[{}]", message.remoteAddress(), action, message);, +            logger.info("ANONYMOUS_ACCESS\thost=[{}], action=[{}]", message.remoteAddress(), action);, +    public void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message) {, +            logger.info("AUTHENTICATION_FAILED\thost=[{}], realm=[{}], action=[{}], principal=[{}], request=[{}]", message.remoteAddress(), realm, action, token.principal(), message);, +            logger.info("AUTHENTICATION_FAILED\thost=[{}], realm=[{}], action=[{}], principal=[{}]", message.remoteAddress(), realm, action, token.principal());, +    public void accessGranted(User user, String action, TransportMessage<?> message) {, +            logger.info("ACCESS_GRANTED\thost=[{}], action=[{}], principal=[{}], request=[{}]", message.remoteAddress(), action, user.principal(), message);, +            logger.info("ACCESS_GRANTED\thost=[{}], action=[{}], principal=[{}]", message.remoteAddress(), action, user.principal());, +    public void accessDenied(User user, String action, TransportMessage<?> message) {, +            logger.info("ACCESS_DENIED\thost=[{}], action=[{}], principal=[{}], request=[{}]", message.remoteAddress(), action, user.principal(), message);, +            logger.info("ACCESS_DENIED\thost=[{}], action=[{}], principal=[{}]", message.remoteAddress(), action, user.principal());, +++ b/src/main/java/org/elasticsearch/shield/audit/AuditTrail.java, +import org.elasticsearch.transport.TransportMessage;, +        public void anonymousAccess(String action, TransportMessage<?> message) {, +        public void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message) {, +        public void accessGranted(User user, String action, TransportMessage<?> message) {, +        public void accessDenied(User user, String action, TransportMessage<?> message) {, +    void anonymousAccess(String action, TransportMessage<?> message);, +    void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message);, +    void accessGranted(User user, String action, TransportMessage<?> message);, +    void accessDenied(User user, String action, TransportMessage<?> message);, +++ b/src/main/java/org/elasticsearch/shield/audit/AuditTrailService.java, +import org.elasticsearch.transport.TransportMessage;, +    public void anonymousAccess(String action, TransportMessage<?> message) {, +            auditTrails[i].anonymousAccess(action, message);, +    public void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message) {, +            auditTrails[i].authenticationFailed(realm, token, action, message);, +    public void accessGranted(User user, String action, TransportMessage<?> message) {, +            auditTrails[i].accessGranted(user, action, message);, +    public void accessDenied(User user, String action, TransportMessage<?> message) {, +            auditTrails[i].accessDenied(user, action, message);, +++ b/src/main/java/org/elasticsearch/shield/audit/logfile/LoggingAuditTrail.java, +import org.elasticsearch.transport.TransportMessage;, +    public void anonymousAccess(String action, TransportMessage<?> message) {, +            logger.info("ANONYMOUS_ACCESS\thost=[{}], action=[{}], request=[{}]", message.remoteAddress(), action, message);, +            logger.info("ANONYMOUS_ACCESS\thost=[{}], action=[{}]", message.remoteAddress(), action);, +    public void authenticationFailed(String realm, AuthenticationToken token, String action, TransportMessage<?> message) {, +            logger.info("AUTHENTICATION_FAILED\thost=[{}], realm=[{}], action=[{}], principal=[{}], request=[{}]", message.remoteAddress(), realm, action, token.principal(), message);, +            logger.info("AUTHENTICATION_FAILED\thost=[{}], realm=[{}], action=[{}], principal=[{}]", message.remoteAddress(), realm, action, token.principal());, +    public void accessGranted(User user, String action, TransportMessage<?> message) {, +            logger.info("ACCESS_GRANTED\thost=[{}], action=[{}], principal=[{}], request=[{}]", message.remoteAddress(), action, user.principal(), message);, +            logger.info("ACCESS_GRANTED\thost=[{}], action=[{}], principal=[{}]", message.remoteAddress(), action, user.principal());, +    public void accessDenied(User user, String action, TransportMessage<?> message) {, +            logger.info("ACCESS_DENIED\thost=[{}], action=[{}], principal=[{}], request=[{}]", message.remoteAddress(), action, user.principal(), message);, +            logger.info("ACCESS_DENIED\thost=[{}], action=[{}], principal=[{}]", message.remoteAddress(), action, user.principal());, +++ b/src/main/java/org/elasticsearch/shield/authc/AuthenticationService.java, +import org.elasticsearch.transport.TransportMessage;]