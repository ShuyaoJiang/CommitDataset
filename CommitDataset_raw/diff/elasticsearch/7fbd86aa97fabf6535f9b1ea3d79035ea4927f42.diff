[+++ b/src/main/java/org/elasticsearch/search/aggregations/pipeline/movavg/MovAvgPipelineAggregator.java, +                long newKey = histo.getRounding().nextRoundingValue(lastKey);, +                InternalHistogram.Bucket newBucket = factory.createBucket(newKey, 0, new InternalAggregations(, +                lastKey = newKey;, +++ b/src/main/java/org/elasticsearch/search/aggregations/pipeline/movavg/MovAvgPipelineAggregator.java, +                long newKey = histo.getRounding().nextRoundingValue(lastKey);, +                InternalHistogram.Bucket newBucket = factory.createBucket(newKey, 0, new InternalAggregations(, +                lastKey = newKey;, +++ b/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgTests.java, +import org.elasticsearch.search.aggregations.metrics.avg.Avg;, +import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilders.movingAvg;, +import static org.hamcrest.Matchers.closeTo;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +import static org.hamcrest.Matchers.lessThanOrEqualTo;, +        for (int i = -10; i < 10; i++) {, +            builders.add(client().prepareIndex("neg_idx", "type").setSource(, +                    jsonBuilder().startObject().field(INTERVAL_FIELD, i).field(VALUE_FIELD, 10).endObject()));, +        }, +, +    public void testPredictNegativeKeysAtStart() {, +, +        SearchResponse response = client(), +                .prepareSearch("neg_idx"), +                .setTypes("type"), +                .addAggregation(, +                        histogram("histo"), +                                .field(INTERVAL_FIELD), +                                .interval(1), +                                .subAggregation(avg("avg").field(VALUE_FIELD)), +                                .subAggregation(, +                                        movingAvg("movavg_values").window(windowSize).modelBuilder(new SimpleModel.SimpleModelBuilder()), +                                                .gapPolicy(gapPolicy).predict(5).setBucketsPaths("avg"))).execute().actionGet();, +, +        assertSearchResponse(response);, +, +        InternalHistogram<Bucket> histo = response.getAggregations().get("histo");, +        assertThat(histo, notNullValue());, +        assertThat(histo.getName(), equalTo("histo"));, +        List<? extends Bucket> buckets = histo.getBuckets();, +        assertThat("Size of buckets array is not correct.", buckets.size(), equalTo(25));, +, +        for (int i = 0; i < 20; i++) {, +            Bucket bucket = buckets.get(i);, +            assertThat(bucket, notNullValue());, +            assertThat((long) bucket.getKey(), equalTo((long) i - 10));, +            assertThat(bucket.getDocCount(), equalTo(1l));, +            Avg avgAgg = bucket.getAggregations().get("avg");, +            assertThat(avgAgg, notNullValue());, +            assertThat(avgAgg.value(), equalTo(10d));, +            SimpleValue movAvgAgg = bucket.getAggregations().get("movavg_values");, +            assertThat(movAvgAgg, notNullValue());, +            assertThat(movAvgAgg.value(), equalTo(10d));, +        }, +, +        for (int i = 20; i < 25; i++) {, +            System.out.println(i);, +            Bucket bucket = buckets.get(i);, +            assertThat(bucket, notNullValue());, +            assertThat((long) bucket.getKey(), equalTo((long) i - 10));, +            assertThat(bucket.getDocCount(), equalTo(0l));, +            Avg avgAgg = bucket.getAggregations().get("avg");, +            assertThat(avgAgg, nullValue());, +            SimpleValue movAvgAgg = bucket.getAggregations().get("movavg_values");, +            assertThat(movAvgAgg, notNullValue());, +            assertThat(movAvgAgg.value(), equalTo(10d));, +        }, +    }, +, +    @Test]