[+++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverter.java, +import static java.util.stream.Collectors.toMap;, +    private TypeConverter() {}, +                        && dataType != DataType.IP, +                .collect(toMap(dataType -> dataType.javaClass(), dataType -> dataType.jdbcType));, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverter.java, +import static java.util.stream.Collectors.toMap;, +    private TypeConverter() {}, +                        && dataType != DataType.IP, +                .collect(toMap(dataType -> dataType.javaClass(), dataType -> dataType.jdbcType));, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +, +import static java.util.stream.Collectors.toMap;, +    DATE(        JDBCType.TIMESTAMP, Timestamp.class, Long.BYTES,        24,                24),, +    //, +    // specialized types, +    //, +    // IP can be v4 or v6. The latter has 2^128 addresses or 340,282,366,920,938,463,463,374,607,431,768,211,456, +    // aka 39 chars, +    IP(          JDBCType.VARCHAR,   String.class,     39,               39,                0,false, false, true);, +                .filter(type -> type != TEXT && type != NESTED, +                                && type != SCALED_FLOAT && type != IP) // Remove duplicates, +                .collect(toMap(dataType -> dataType.jdbcType, dataType -> dataType));, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverter.java, +import static java.util.stream.Collectors.toMap;, +    private TypeConverter() {}, +                        && dataType != DataType.IP, +                .collect(toMap(dataType -> dataType.javaClass(), dataType -> dataType.jdbcType));, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +, +import static java.util.stream.Collectors.toMap;, +    DATE(        JDBCType.TIMESTAMP, Timestamp.class, Long.BYTES,        24,                24),, +    //, +    // specialized types, +    //, +    // IP can be v4 or v6. The latter has 2^128 addresses or 340,282,366,920,938,463,463,374,607,431,768,211,456, +    // aka 39 chars, +    IP(          JDBCType.VARCHAR,   String.class,     39,               39,                0,false, false, true);, +                .filter(type -> type != TEXT && type != NESTED, +                                && type != SCALED_FLOAT && type != IP) // Remove duplicates, +                .collect(toMap(dataType -> dataType.jdbcType, dataType -> dataType));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +import org.elasticsearch.common.Strings;, +        return e.dataType().isNumeric() ? TypeResolution.TYPE_RESOLVED : new TypeResolution(incorrectTypeErrorMessage(e, "numeric"));, +                new TypeResolution(incorrectTypeErrorMessage(e, "numeric", "date"));, +    private static String incorrectTypeErrorMessage(Expression e, String...acceptedTypes) {, +        return "Argument required to be " + Strings.arrayToDelimitedString(acceptedTypes, " or "), +                + " ('" + Expressions.name(e) + "' type is '" + e.dataType().esType + "')";, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverter.java, +import static java.util.stream.Collectors.toMap;, +    private TypeConverter() {}, +                        && dataType != DataType.IP, +                .collect(toMap(dataType -> dataType.javaClass(), dataType -> dataType.jdbcType));, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +, +import static java.util.stream.Collectors.toMap;, +    DATE(        JDBCType.TIMESTAMP, Timestamp.class, Long.BYTES,        24,                24),, +    //, +    // specialized types, +    //, +    // IP can be v4 or v6. The latter has 2^128 addresses or 340,282,366,920,938,463,463,374,607,431,768,211,456, +    // aka 39 chars, +    IP(          JDBCType.VARCHAR,   String.class,     39,               39,                0,false, false, true);, +                .filter(type -> type != TEXT && type != NESTED, +                                && type != SCALED_FLOAT && type != IP) // Remove duplicates, +                .collect(toMap(dataType -> dataType.jdbcType, dataType -> dataType));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +import org.elasticsearch.common.Strings;, +        return e.dataType().isNumeric() ? TypeResolution.TYPE_RESOLVED : new TypeResolution(incorrectTypeErrorMessage(e, "numeric"));, +                new TypeResolution(incorrectTypeErrorMessage(e, "numeric", "date"));, +    private static String incorrectTypeErrorMessage(Expression e, String...acceptedTypes) {, +        return "Argument required to be " + Strings.arrayToDelimitedString(acceptedTypes, " or "), +                + " ('" + Expressions.name(e) + "' type is '" + e.dataType().esType + "')";, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/In.java, +        this.list = new ArrayList<>(new LinkedHashSet<>(list));, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverter.java, +import static java.util.stream.Collectors.toMap;, +    private TypeConverter() {}, +                        && dataType != DataType.IP, +                .collect(toMap(dataType -> dataType.javaClass(), dataType -> dataType.jdbcType));, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +, +import static java.util.stream.Collectors.toMap;, +    DATE(        JDBCType.TIMESTAMP, Timestamp.class, Long.BYTES,        24,                24),, +    //, +    // specialized types, +    //, +    // IP can be v4 or v6. The latter has 2^128 addresses or 340,282,366,920,938,463,463,374,607,431,768,211,456, +    // aka 39 chars, +    IP(          JDBCType.VARCHAR,   String.class,     39,               39,                0,false, false, true);, +                .filter(type -> type != TEXT && type != NESTED, +                                && type != SCALED_FLOAT && type != IP) // Remove duplicates, +                .collect(toMap(dataType -> dataType.jdbcType, dataType -> dataType));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/Expressions.java, +import org.elasticsearch.common.Strings;, +        return e.dataType().isNumeric() ? TypeResolution.TYPE_RESOLVED : new TypeResolution(incorrectTypeErrorMessage(e, "numeric"));, +                new TypeResolution(incorrectTypeErrorMessage(e, "numeric", "date"));, +    private static String incorrectTypeErrorMessage(Expression e, String...acceptedTypes) {, +        return "Argument required to be " + Strings.arrayToDelimitedString(acceptedTypes, " or "), +                + " ('" + Expressions.name(e) + "' type is '" + e.dataType().esType + "')";]