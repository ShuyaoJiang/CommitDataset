[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +                    throw new SqlIllegalArgumentException("alias [" + alias + "] is used by ", +                throw new SqlIllegalArgumentException("expects no arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects no arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly one argument");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly one argument");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly one argument");, +                throw new SqlIllegalArgumentException("expects exactly one argument");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly two arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects one or two arguments");, +                throw new SqlIllegalArgumentException("expects exactly two arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +            } catch (SqlIllegalArgumentException e) {, +                throw new SqlIllegalArgumentException("expects two or three arguments");, +                throw new SqlIllegalArgumentException("expects exactly three arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly four arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +                    throw new SqlIllegalArgumentException("alias [" + alias + "] is used by ", +                throw new SqlIllegalArgumentException("expects no arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects no arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly one argument");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly one argument");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly one argument");, +                throw new SqlIllegalArgumentException("expects exactly one argument");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly two arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects one or two arguments");, +                throw new SqlIllegalArgumentException("expects exactly two arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +            } catch (SqlIllegalArgumentException e) {, +                throw new SqlIllegalArgumentException("expects two or three arguments");, +                throw new SqlIllegalArgumentException("expects exactly three arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly four arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/ArbitraryConditionalFunction.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +                    throw new SqlIllegalArgumentException("alias [" + alias + "] is used by ", +                throw new SqlIllegalArgumentException("expects no arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects no arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly one argument");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly one argument");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly one argument");, +                throw new SqlIllegalArgumentException("expects exactly one argument");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly two arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects one or two arguments");, +                throw new SqlIllegalArgumentException("expects exactly two arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +            } catch (SqlIllegalArgumentException e) {, +                throw new SqlIllegalArgumentException("expects two or three arguments");, +                throw new SqlIllegalArgumentException("expects exactly three arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +                throw new SqlIllegalArgumentException("expects exactly four arguments");, +                throw new SqlIllegalArgumentException("does not support DISTINCT yet it was specified");, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/ArbitraryConditionalFunction.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/ConditionalFunction.java, +import org.elasticsearch.xpack.sql.type.DataTypeConversion;, +import static org.elasticsearch.common.logging.LoggerMessageFormat.format;, +import static org.elasticsearch.xpack.sql.type.DataTypes.areTypesCompatible;, +import static org.elasticsearch.xpack.sql.util.StringUtils.ordinal;, +, +    protected TypeResolution resolveType() {, +        DataType dt = DataType.NULL;, +, +        for (int i = 0; i < children().size(); i++) {, +            Expression child = children().get(i);, +            if (dt == DataType.NULL) {, +                if (Expressions.isNull(child) == false) {, +                    dt = child.dataType();, +                }, +            } else {, +                if (areTypesCompatible(dt, child.dataType()) == false) {, +                    return new TypeResolution(format(null, "{} argument of [{}] must be [{}], found value [{}] type [{}]",, +                        ordinal(i + 1),]