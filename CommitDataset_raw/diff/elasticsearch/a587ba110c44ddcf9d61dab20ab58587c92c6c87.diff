[+++ /dev/null, +++ /dev/null, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +            return repository.execute(new HdfsRepository.Operation<Boolean>() {, +                public Boolean run(FileContext fileContext) throws IOException {, +                    return fileContext.util().exists(new Path(path, blobName));, +            repository.execute(new HdfsRepository.Operation<Boolean>() {, +                public Boolean run(FileContext fileContext) throws IOException {, +                    return fileContext.delete(new Path(path, blobName), true);, +        repository.execute(new HdfsRepository.Operation<Void>() {, +            public Void run(FileContext fileContext) throws IOException {, +                fileContext.rename(new Path(path, sourceBlobName), new Path(path, targetBlobName));, +        return repository.execute(new HdfsRepository.Operation<InputStream>() {, +            public InputStream run(FileContext fileContext) throws IOException {, +                return fileContext.open(new Path(path, blobName), repository.bufferSizeInBytes);, +        repository.execute(new HdfsRepository.Operation<Void>() {, +            public Void run(FileContext fileContext) throws IOException {, +                try (FSDataOutputStream stream = fileContext.create(blob, flags, opts)) {, +        FileStatus[] files = repository.execute(new HdfsRepository.Operation<FileStatus[]>() {, +            public FileStatus[] run(FileContext fileContext) throws IOException {, +                return (fileContext.util().listStatus(path, new PathFilter() {, +        FileStatus[] files = repository.execute(new HdfsRepository.Operation<FileStatus[]>() {, +            public FileStatus[] run(FileContext fileContext) throws IOException {, +                return fileContext.util().listStatus(path);, +++ /dev/null, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +            return repository.execute(new HdfsRepository.Operation<Boolean>() {, +                public Boolean run(FileContext fileContext) throws IOException {, +                    return fileContext.util().exists(new Path(path, blobName));, +            repository.execute(new HdfsRepository.Operation<Boolean>() {, +                public Boolean run(FileContext fileContext) throws IOException {, +                    return fileContext.delete(new Path(path, blobName), true);, +        repository.execute(new HdfsRepository.Operation<Void>() {, +            public Void run(FileContext fileContext) throws IOException {, +                fileContext.rename(new Path(path, sourceBlobName), new Path(path, targetBlobName));, +        return repository.execute(new HdfsRepository.Operation<InputStream>() {, +            public InputStream run(FileContext fileContext) throws IOException {, +                return fileContext.open(new Path(path, blobName), repository.bufferSizeInBytes);, +        repository.execute(new HdfsRepository.Operation<Void>() {, +            public Void run(FileContext fileContext) throws IOException {, +                try (FSDataOutputStream stream = fileContext.create(blob, flags, opts)) {, +        FileStatus[] files = repository.execute(new HdfsRepository.Operation<FileStatus[]>() {, +            public FileStatus[] run(FileContext fileContext) throws IOException {, +                return (fileContext.util().listStatus(path, new PathFilter() {, +        FileStatus[] files = repository.execute(new HdfsRepository.Operation<FileStatus[]>() {, +            public FileStatus[] run(FileContext fileContext) throws IOException {, +                return fileContext.util().listStatus(path);, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobStore.java, +        repository.execute(new HdfsRepository.Operation<Void>() {, +            public Void run(FileContext fc) throws IOException {, +        repository.execute(new HdfsRepository.Operation<Void>() {, +            public Void run(FileContext fc) throws IOException {, +++ /dev/null, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +            return repository.execute(new HdfsRepository.Operation<Boolean>() {, +                public Boolean run(FileContext fileContext) throws IOException {, +                    return fileContext.util().exists(new Path(path, blobName));, +            repository.execute(new HdfsRepository.Operation<Boolean>() {, +                public Boolean run(FileContext fileContext) throws IOException {, +                    return fileContext.delete(new Path(path, blobName), true);, +        repository.execute(new HdfsRepository.Operation<Void>() {, +            public Void run(FileContext fileContext) throws IOException {, +                fileContext.rename(new Path(path, sourceBlobName), new Path(path, targetBlobName));, +        return repository.execute(new HdfsRepository.Operation<InputStream>() {, +            public InputStream run(FileContext fileContext) throws IOException {, +                return fileContext.open(new Path(path, blobName), repository.bufferSizeInBytes);, +        repository.execute(new HdfsRepository.Operation<Void>() {, +            public Void run(FileContext fileContext) throws IOException {, +                try (FSDataOutputStream stream = fileContext.create(blob, flags, opts)) {, +        FileStatus[] files = repository.execute(new HdfsRepository.Operation<FileStatus[]>() {, +            public FileStatus[] run(FileContext fileContext) throws IOException {, +                return (fileContext.util().listStatus(path, new PathFilter() {, +        FileStatus[] files = repository.execute(new HdfsRepository.Operation<FileStatus[]>() {, +            public FileStatus[] run(FileContext fileContext) throws IOException {, +                return fileContext.util().listStatus(path);, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobStore.java, +        repository.execute(new HdfsRepository.Operation<Void>() {, +            public Void run(FileContext fc) throws IOException {, +        repository.execute(new HdfsRepository.Operation<Void>() {, +            public Void run(FileContext fc) throws IOException {, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsPlugin.java, +            Class.forName("org.apache.hadoop.conf.Configuration");, +++ /dev/null, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +            return repository.execute(new HdfsRepository.Operation<Boolean>() {, +                public Boolean run(FileContext fileContext) throws IOException {, +                    return fileContext.util().exists(new Path(path, blobName));, +            repository.execute(new HdfsRepository.Operation<Boolean>() {, +                public Boolean run(FileContext fileContext) throws IOException {, +                    return fileContext.delete(new Path(path, blobName), true);, +        repository.execute(new HdfsRepository.Operation<Void>() {, +            public Void run(FileContext fileContext) throws IOException {, +                fileContext.rename(new Path(path, sourceBlobName), new Path(path, targetBlobName));, +        return repository.execute(new HdfsRepository.Operation<InputStream>() {, +            public InputStream run(FileContext fileContext) throws IOException {, +                return fileContext.open(new Path(path, blobName), repository.bufferSizeInBytes);, +        repository.execute(new HdfsRepository.Operation<Void>() {, +            public Void run(FileContext fileContext) throws IOException {, +                try (FSDataOutputStream stream = fileContext.create(blob, flags, opts)) {, +        FileStatus[] files = repository.execute(new HdfsRepository.Operation<FileStatus[]>() {]