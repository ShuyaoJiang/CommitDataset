[+++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.common.lease.Releasable;, +import org.elasticsearch.common.lease.Releasables;, +        final Engine engine = getEngine();, +        final Engine.Searcher searcher = engine.acquireSearcher(source);, +        boolean success = false;, +            final Engine.Searcher wrappedSearcher = searcherWrapper == null ? searcher : searcherWrapper.wrap(engineConfig, searcher);, +            assert wrappedSearcher != null;, +            success = true;, +            return wrappedSearcher;, +        } finally {, +            if (success == false) {, +                Releasables.close(success, searcher);, +            }, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.elasticsearch.common.lease.Releasable;, +import org.elasticsearch.common.lease.Releasables;, +        final Engine engine = getEngine();, +        final Engine.Searcher searcher = engine.acquireSearcher(source);, +        boolean success = false;, +            final Engine.Searcher wrappedSearcher = searcherWrapper == null ? searcher : searcherWrapper.wrap(engineConfig, searcher);, +            assert wrappedSearcher != null;, +            success = true;, +            return wrappedSearcher;, +        } finally {, +            if (success == false) {, +                Releasables.close(success, searcher);, +            }, +++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +import java.util.concurrent.atomic.AtomicInteger;, +        IndexShard newShard = reinitWithWrapper(indexService, shard, wrapper);, +        } finally {, +            newShard.close("just do it", randomBoolean());, +        }, +    }, +    public void testSearcherWrapperWorksWithGlobaOrdinals() throws IOException {, +        createIndex("test");, +        ensureGreen();, +        IndicesService indicesService = getInstanceFromNode(IndicesService.class);, +        IndexService indexService = indicesService.indexService("test");, +        IndexShard shard = indexService.getShardOrNull(0);, +        client().prepareIndex("test", "test", "0").setSource("{\"foo\" : \"bar\"}").setRefresh(true).get();, +        client().prepareIndex("test", "test", "1").setSource("{\"foobar\" : \"bar\"}").setRefresh(true).get();, +, +        IndexSearcherWrapper wrapper = new IndexSearcherWrapper() {, +            @Override, +            public DirectoryReader wrap(DirectoryReader reader) throws IOException {, +                return new FieldMaskingReader("foo", reader);, +            }, +, +            @Override, +            public IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws EngineException {, +                return searcher;, +            }, +        };, +, +        IndexShard newShard = reinitWithWrapper(indexService, shard, wrapper);, +        try {, +    }, +    public void testSearchIsReleaseIfWrapperFails() throws IOException {, +        createIndex("test");, +        ensureGreen();, +        IndicesService indicesService = getInstanceFromNode(IndicesService.class);, +        IndexService indexService = indicesService.indexService("test");, +        IndexShard shard = indexService.getShardOrNull(0);, +        client().prepareIndex("test", "test", "0").setSource("{\"foo\" : \"bar\"}").setRefresh(true).get();, +        IndexSearcherWrapper wrapper = new IndexSearcherWrapper() {, +            @Override, +            public DirectoryReader wrap(DirectoryReader reader) throws IOException {, +                throw new RuntimeException("boom");, +            }, +, +            @Override, +            public IndexSearcher wrap(EngineConfig engineConfig, IndexSearcher searcher) throws EngineException {, +                return searcher;, +            }, +        };, +, +        IndexShard newShard = reinitWithWrapper(indexService, shard, wrapper);, +        try {, +            newShard.acquireSearcher("test");, +            fail("exception expected");, +        } catch (RuntimeException ex) {, +            //, +        } finally {, +            newShard.close("just do it", randomBoolean());, +        }, +        // test will fail due to unclosed searchers if the searcher is not released, +    }, +, +    private final IndexShard reinitWithWrapper(IndexService indexService, IndexShard shard, IndexSearcherWrapper wrapper) throws IOException {, +        ShardRouting routing = new ShardRouting(shard.routingEntry());, +        shard.close("simon says", true);, +        IndexServicesProvider indexServices = indexService.getIndexServices();, +        IndexServicesProvider newProvider = new IndexServicesProvider(indexServices.getIndicesLifecycle(), indexServices.getThreadPool(), indexServices.getMapperService(), indexServices.getQueryParserService(), indexServices.getIndexCache(), indexServices.getIndicesQueryCache(), indexServices.getCodecService(), indexServices.getTermVectorsService(), indexServices.getIndexFieldDataService(), indexServices.getWarmer(), indexServices.getSimilarityService(), indexServices.getFactory(), indexServices.getBigArrays(), wrapper, indexServices.getIndexingMemoryController());, +        IndexShard newShard = new IndexShard(shard.shardId(), shard.indexSettings, shard.shardPath(), shard.store(), newProvider);, +        ShardRoutingHelper.reinit(routing);, +        newShard.updateRoutingEntry(routing, false);, +        DiscoveryNode localNode = new DiscoveryNode("foo", DummyTransportAddress.INSTANCE, Version.CURRENT);, +        assertTrue(newShard.recoverFromStore(routing, localNode));]