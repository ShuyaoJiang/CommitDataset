[+++ b/core/src/main/java/org/elasticsearch/script/TemplateScript.java, +public abstract class TemplateScript {, +    private final Map<String, Object> params;, +, +    public TemplateScript(Map<String, Object> params) {, +        this.params = params;, +    }, +, +    /** Return the parameters for this script. */, +    public Map<String, Object> getParams() {, +        return params;, +    }, +, +    public static final String[] PARAMETERS = {};, +    public abstract String execute();, +    public interface Factory {, +    public static final ScriptContext<Factory> CONTEXT = new ScriptContext<>("template", Factory.class);, +++ b/core/src/main/java/org/elasticsearch/script/TemplateScript.java, +public abstract class TemplateScript {, +    private final Map<String, Object> params;, +, +    public TemplateScript(Map<String, Object> params) {, +        this.params = params;, +    }, +, +    /** Return the parameters for this script. */, +    public Map<String, Object> getParams() {, +        return params;, +    }, +, +    public static final String[] PARAMETERS = {};, +    public abstract String execute();, +    public interface Factory {, +    public static final ScriptContext<Factory> CONTEXT = new ScriptContext<>("template", Factory.class);, +++ b/core/src/test/java/org/elasticsearch/search/suggest/SuggestSearchIT.java, +                return new TemplateScript(null) {, +                    @Override, +                    public String execute() {, +                        return result;, +                    }, +                };, +++ b/core/src/main/java/org/elasticsearch/script/TemplateScript.java, +public abstract class TemplateScript {, +    private final Map<String, Object> params;, +, +    public TemplateScript(Map<String, Object> params) {, +        this.params = params;, +    }, +, +    /** Return the parameters for this script. */, +    public Map<String, Object> getParams() {, +        return params;, +    }, +, +    public static final String[] PARAMETERS = {};, +    public abstract String execute();, +    public interface Factory {, +    public static final ScriptContext<Factory> CONTEXT = new ScriptContext<>("template", Factory.class);, +++ b/core/src/test/java/org/elasticsearch/search/suggest/SuggestSearchIT.java, +                return new TemplateScript(null) {, +                    @Override, +                    public String execute() {, +                        return result;, +                    }, +                };, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/MustacheScriptEngine.java, +    private class MustacheExecutableScript extends TemplateScript {, +            super(params);, +++ b/core/src/main/java/org/elasticsearch/script/TemplateScript.java, +public abstract class TemplateScript {, +    private final Map<String, Object> params;, +, +    public TemplateScript(Map<String, Object> params) {, +        this.params = params;, +    }, +, +    /** Return the parameters for this script. */, +    public Map<String, Object> getParams() {, +        return params;, +    }, +, +    public static final String[] PARAMETERS = {};, +    public abstract String execute();, +    public interface Factory {, +    public static final ScriptContext<Factory> CONTEXT = new ScriptContext<>("template", Factory.class);, +++ b/core/src/test/java/org/elasticsearch/search/suggest/SuggestSearchIT.java, +                return new TemplateScript(null) {, +                    @Override, +                    public String execute() {, +                        return result;, +                    }, +                };, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/MustacheScriptEngine.java, +    private class MustacheExecutableScript extends TemplateScript {, +            super(params);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +         * @return A Class object defining a factory., +         */, +        Class<?> defineFactory(String name, byte[] bytes) {, +            return defineClass(name, bytes, 0, bytes.length, CODESOURCE);]