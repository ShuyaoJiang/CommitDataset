[+++ b/test/framework/src/main/java/org/elasticsearch/test/transport/MockTransportService.java, +            public Connection openConnection(DiscoveryNode node, ConnectionProfile profile) throws IOException {, +                throw new ConnectTransportException(node, "DISCONNECT: simulated");, +            }, +, +            @Override, +                connection.close();, +                // send the request, which will blow up, +                connection.sendRequest(requestId, action, request, options);, +                    connection.close();, +            public Connection openConnection(DiscoveryNode node, ConnectionProfile profile) throws IOException {, +                throw new ConnectTransportException(node, "UNRESPONSIVE: simulated");, +            }, +, +            @Override, +            public Connection openConnection(DiscoveryNode node, ConnectionProfile profile) throws IOException {, +                TimeValue delay = getDelay();, +                if (delay.millis() <= 0) {, +                    return original.openConnection(node, profile);, +                }, +, +                // TODO: Replace with proper setting, +                TimeValue connectingTimeout = NetworkService.TcpSettings.TCP_CONNECT_TIMEOUT.getDefault(Settings.EMPTY);, +                try {, +                    if (delay.millis() < connectingTimeout.millis()) {, +                        Thread.sleep(delay.millis());, +                        return original.openConnection(node, profile);, +                    } else {, +                        Thread.sleep(connectingTimeout.millis());, +                        throw new ConnectTransportException(node, "UNRESPONSIVE: simulated");, +                    }, +                } catch (InterruptedException e) {, +                    throw new ConnectTransportException(node, "UNRESPONSIVE: simulated");, +                }, +            }, +, +            @Override, +++ b/test/framework/src/main/java/org/elasticsearch/test/transport/MockTransportService.java, +            public Connection openConnection(DiscoveryNode node, ConnectionProfile profile) throws IOException {, +                throw new ConnectTransportException(node, "DISCONNECT: simulated");, +            }, +, +            @Override, +                connection.close();, +                // send the request, which will blow up, +                connection.sendRequest(requestId, action, request, options);, +                    connection.close();, +            public Connection openConnection(DiscoveryNode node, ConnectionProfile profile) throws IOException {, +                throw new ConnectTransportException(node, "UNRESPONSIVE: simulated");, +            }, +, +            @Override, +            public Connection openConnection(DiscoveryNode node, ConnectionProfile profile) throws IOException {, +                TimeValue delay = getDelay();, +                if (delay.millis() <= 0) {, +                    return original.openConnection(node, profile);, +                }, +, +                // TODO: Replace with proper setting, +                TimeValue connectingTimeout = NetworkService.TcpSettings.TCP_CONNECT_TIMEOUT.getDefault(Settings.EMPTY);, +                try {, +                    if (delay.millis() < connectingTimeout.millis()) {, +                        Thread.sleep(delay.millis());, +                        return original.openConnection(node, profile);, +                    } else {, +                        Thread.sleep(connectingTimeout.millis());, +                        throw new ConnectTransportException(node, "UNRESPONSIVE: simulated");, +                    }, +                } catch (InterruptedException e) {, +                    throw new ConnectTransportException(node, "UNRESPONSIVE: simulated");, +                }, +            }, +, +            @Override, +++ b/test/framework/src/main/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java, +        expectThrows(ConnectTransportException.class, () -> serviceB.openConnection(nodeA, MockTcpTransport.LIGHT_PROFILE));, +        expectThrows(ConnectTransportException.class, () -> serviceB.openConnection(nodeA, MockTcpTransport.LIGHT_PROFILE));]