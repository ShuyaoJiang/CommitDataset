[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, parseContext);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, parseContext);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.index.query.MissingQueryBuilder;, +        Query query = MissingQueryBuilder.newFilter(parseContext, queryText, MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE, MissingQueryBuilder.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, parseContext);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.index.query.MissingQueryBuilder;, +        Query query = MissingQueryBuilder.newFilter(parseContext, queryText, MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE, MissingQueryBuilder.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequest;, +public class AnalyzeRequest extends SingleCustomOperationRequest<AnalyzeRequest> {, +        ActionRequestValidationException validationException = super.validate();, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, parseContext);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.index.query.MissingQueryBuilder;, +        Query query = MissingQueryBuilder.newFilter(parseContext, queryText, MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE, MissingQueryBuilder.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequest;, +public class AnalyzeRequest extends SingleCustomOperationRequest<AnalyzeRequest> {, +        ActionRequestValidationException validationException = super.validate();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequestBuilder.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequestBuilder;, +public class AnalyzeRequestBuilder extends SingleCustomOperationRequestBuilder<AnalyzeRequest, AnalyzeResponse, AnalyzeRequestBuilder> {, +     * Sets the index to use to analyzer the text (for example, if it holds specific analyzers, +     * registered)., +     */, +    public AnalyzeRequestBuilder setIndex(String index) {, +        request.index(index);, +        return this;, +    }, +, +    /**, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, parseContext);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, parseContext);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.index.query.MissingQueryBuilder;, +        Query query = MissingQueryBuilder.newFilter(parseContext, queryText, MissingQueryBuilder.DEFAULT_EXISTENCE_VALUE, MissingQueryBuilder.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequest;, +public class AnalyzeRequest extends SingleCustomOperationRequest<AnalyzeRequest> {, +        ActionRequestValidationException validationException = super.validate();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequestBuilder.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequestBuilder;, +public class AnalyzeRequestBuilder extends SingleCustomOperationRequestBuilder<AnalyzeRequest, AnalyzeResponse, AnalyzeRequestBuilder> {, +     * Sets the index to use to analyzer the text (for example, if it holds specific analyzers, +     * registered)., +     */, +    public AnalyzeRequestBuilder setIndex(String index) {, +        request.index(index);, +        return this;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.action.support.single.custom.TransportSingleCustomOperationAction;, +public class TransportAnalyzeAction extends TransportSingleCustomOperationAction<AnalyzeRequest, AnalyzeResponse> {]