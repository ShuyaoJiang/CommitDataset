[+++ b/buildSrc/version.properties, +lucene            = 7.4.0, +++ b/buildSrc/version.properties, +lucene            = 7.4.0, +++ b/client/rest-high-level/build.gradle, +  compile project(':x-pack:protocol') // TODO bundle into the jar, +++ b/buildSrc/version.properties, +lucene            = 7.4.0, +++ b/client/rest-high-level/build.gradle, +  compile project(':x-pack:protocol') // TODO bundle into the jar, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.protocol.xpack.XPackInfoRequest;, +import java.util.EnumSet;, +import java.util.stream.Collectors;, +    static Request xPackInfo(XPackInfoRequest infoRequest) {, +        Request request = new Request(HttpGet.METHOD_NAME, "/_xpack");, +        if (false == infoRequest.isVerbose()) {, +            request.addParameter("human", "false");, +        }, +        if (false == infoRequest.getCategories().equals(EnumSet.allOf(XPackInfoRequest.Category.class))) {, +            request.addParameter("categories", infoRequest.getCategories().stream(), +                    .map(c -> c.toString().toLowerCase(Locale.ROOT)), +                    .collect(Collectors.joining(",")));, +        }, +        return request;, +    }, +, +++ b/buildSrc/version.properties, +lucene            = 7.4.0, +++ b/client/rest-high-level/build.gradle, +  compile project(':x-pack:protocol') // TODO bundle into the jar, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.protocol.xpack.XPackInfoRequest;, +import java.util.EnumSet;, +import java.util.stream.Collectors;, +    static Request xPackInfo(XPackInfoRequest infoRequest) {, +        Request request = new Request(HttpGet.METHOD_NAME, "/_xpack");, +        if (false == infoRequest.isVerbose()) {, +            request.addParameter("human", "false");, +        }, +        if (false == infoRequest.getCategories().equals(EnumSet.allOf(XPackInfoRequest.Category.class))) {, +            request.addParameter("categories", infoRequest.getCategories().stream(), +                    .map(c -> c.toString().toLowerCase(Locale.ROOT)), +                    .collect(Collectors.joining(",")));, +        }, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.protocol.xpack.XPackInfoRequest;, +import org.elasticsearch.protocol.xpack.XPackInfoResponse;, +    /**, +     * Fetch information about X-Pack from the cluster if it is installed., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/info-api.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public XPackInfoResponse xPackInfo(XPackInfoRequest request, RequestOptions options) throws IOException {, +        return performRequestAndParseEntity(request, RequestConverters::xPackInfo, options,, +            XPackInfoResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Fetch information about X-Pack from the cluster if it is installed., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/info-api.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void xPackInfoAsync(XPackInfoRequest request, RequestOptions options,, +                                  ActionListener<XPackInfoResponse> listener) {, +        performRequestAsyncAndParseEntity(request, RequestConverters::xPackInfo, options,, +            XPackInfoResponse::fromXContent, listener, emptySet());, +    }, +, +++ b/buildSrc/version.properties, +lucene            = 7.4.0, +++ b/client/rest-high-level/build.gradle, +  compile project(':x-pack:protocol') // TODO bundle into the jar, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.protocol.xpack.XPackInfoRequest;, +import java.util.EnumSet;, +import java.util.stream.Collectors;, +    static Request xPackInfo(XPackInfoRequest infoRequest) {, +        Request request = new Request(HttpGet.METHOD_NAME, "/_xpack");, +        if (false == infoRequest.isVerbose()) {, +            request.addParameter("human", "false");, +        }, +        if (false == infoRequest.getCategories().equals(EnumSet.allOf(XPackInfoRequest.Category.class))) {, +            request.addParameter("categories", infoRequest.getCategories().stream(), +                    .map(c -> c.toString().toLowerCase(Locale.ROOT)), +                    .collect(Collectors.joining(",")));, +        }, +        return request;, +    }, +]