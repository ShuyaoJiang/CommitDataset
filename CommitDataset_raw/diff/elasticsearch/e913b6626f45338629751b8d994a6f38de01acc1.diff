[+++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +            throw new ElasticsearchIllegalArgumentException("the field [" + highlighterContext.fieldName + "] should be indexed with term vector with position offsets to be used with fast vector highlighter");, +                return new HighlightField(highlighterContext.fieldName, StringText.convertFromStringArray(fragments));, +                    return new HighlightField(highlighterContext.fieldName, StringText.convertFromStringArray(fragments));, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +            throw new ElasticsearchIllegalArgumentException("the field [" + highlighterContext.fieldName + "] should be indexed with term vector with position offsets to be used with fast vector highlighter");, +                return new HighlightField(highlighterContext.fieldName, StringText.convertFromStringArray(fragments));, +                    return new HighlightField(highlighterContext.fieldName, StringText.convertFromStringArray(fragments));, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +                    throw new ElasticsearchIllegalArgumentException("source is forced for fields " +  fieldNamesToHighlight + " but type [" + hitContext.hit().type() + "] has disabled _source");, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +            throw new ElasticsearchIllegalArgumentException("the field [" + highlighterContext.fieldName + "] should be indexed with term vector with position offsets to be used with fast vector highlighter");, +                return new HighlightField(highlighterContext.fieldName, StringText.convertFromStringArray(fragments));, +                    return new HighlightField(highlighterContext.fieldName, StringText.convertFromStringArray(fragments));, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +                    throw new ElasticsearchIllegalArgumentException("source is forced for fields " +  fieldNamesToHighlight + " but type [" + hitContext.hit().type() + "] has disabled _source");, +++ b/src/main/java/org/elasticsearch/search/highlight/PostingsHighlighter.java, +            throw new ElasticsearchIllegalArgumentException("the field [" + highlighterContext.fieldName + "] should be indexed with positions and offsets in the postings list to be used with postings highlighter");, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +            throw new ElasticsearchIllegalArgumentException("the field [" + highlighterContext.fieldName + "] should be indexed with term vector with position offsets to be used with fast vector highlighter");, +                return new HighlightField(highlighterContext.fieldName, StringText.convertFromStringArray(fragments));, +                    return new HighlightField(highlighterContext.fieldName, StringText.convertFromStringArray(fragments));, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +                    throw new ElasticsearchIllegalArgumentException("source is forced for fields " +  fieldNamesToHighlight + " but type [" + hitContext.hit().type() + "] has disabled _source");, +++ b/src/main/java/org/elasticsearch/search/highlight/PostingsHighlighter.java, +            throw new ElasticsearchIllegalArgumentException("the field [" + highlighterContext.fieldName + "] should be indexed with positions and offsets in the postings list to be used with postings highlighter");, +++ b/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchTests.java, +import static org.elasticsearch.test.hamcrest.RegexMatcher.matches;, +                .setSource("field1", "The quick brown fox jumps over the lazy dog", "field2", "second field content").get();, +        assertThat(searchResponse.getShardFailures()[0].reason(), containsString("source is forced for fields [field1] but type [type1] has disabled _source"));, +        assertThat(searchResponse.getShardFailures()[0].reason(), containsString("source is forced for fields [field1] but type [type1] has disabled _source"));, +        assertThat(searchResponse.getShardFailures()[0].reason(), containsString("source is forced for fields [field1] but type [type1] has disabled _source"));, +        assertThat(searchResponse.getShardFailures()[0].reason(), containsString("source is forced for fields [field1] but type [type1] has disabled _source"));, +, +        searchSource = SearchSourceBuilder.searchSource().query(termQuery("field1", "quick")), +                .highlight(highlight().forceSource(true).field("field*"));, +        searchResponse = client().search(Requests.searchRequest("test").source(searchSource)).get();, +        assertThat(searchResponse.getFailedShards(), equalTo(1));, +        assertThat(searchResponse.getShardFailures().length, equalTo(1));, +        assertThat(searchResponse.getShardFailures()[0].reason(), matches("source is forced for fields \\[field\\d, field\\d\\] but type \\[type1\\] has disabled _source"));, +        for (ShardSearchFailure shardSearchFailure : search.getShardFailures()) {, +            assertThat(shardSearchFailure.reason(), containsString("the field [title] should be indexed with term vector with position offsets to be used with fast vector highlighter"));, +        }, +, +        search = client().prepareSearch(), +                .setQuery(matchPhraseQuery("title", "this is a test")), +                .addHighlightedField("tit*", 50, 1, 10), +                .setHighlighterType("fast-vector-highlighter"), +                .execute().actionGet();, +        assertThat(search.getFailedShards(), equalTo(2));, +        for (ShardSearchFailure shardSearchFailure : search.getShardFailures()) {, +            assertThat(shardSearchFailure.reason(), containsString("the field [title] should be indexed with term vector with position offsets to be used with fast vector highlighter"));, +        }, +, +        search = client().prepareSearch(), +                .setQuery(matchQuery("title", "this is a test")), +                .addHighlightedField("tit*"), +                .setHighlighterType("postings"), +                .get();, +, +        assertThat(search.getFailedShards(), equalTo(2));, +        for (ShardSearchFailure shardSearchFailure : search.getShardFailures()) {, +            assertThat(shardSearchFailure.reason(), containsString("the field [title] should be indexed with positions and offsets in the postings list to be used with postings highlighter"));, +        }]