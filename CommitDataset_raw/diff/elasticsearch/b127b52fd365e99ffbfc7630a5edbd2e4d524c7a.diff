[+++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java, +            InternalOrder order, BucketCountThresholds bucketCountThresholds, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError) {, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java, +            InternalOrder order, BucketCountThresholds bucketCountThresholds, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +    public DoubleTerms(String name, InternalOrder order, @Nullable ValueFormatter formatter, int requiredSize, int shardSize, long minDocCount, List<InternalTerms.Bucket> buckets, boolean showTermDocCountError, long docCountError) {, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java, +            InternalOrder order, BucketCountThresholds bucketCountThresholds, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +    public DoubleTerms(String name, InternalOrder order, @Nullable ValueFormatter formatter, int requiredSize, int shardSize, long minDocCount, List<InternalTerms.Bucket> buckets, boolean showTermDocCountError, long docCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTermsAggregator.java, +                               InternalOrder order, BucketCountThresholds bucketCountThresholds, AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode collectionMode, boolean showTermDocCountError) {, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java, +            InternalOrder order, BucketCountThresholds bucketCountThresholds, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +    public DoubleTerms(String name, InternalOrder order, @Nullable ValueFormatter formatter, int requiredSize, int shardSize, long minDocCount, List<InternalTerms.Bucket> buckets, boolean showTermDocCountError, long docCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTermsAggregator.java, +                               InternalOrder order, BucketCountThresholds bucketCountThresholds, AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode collectionMode, boolean showTermDocCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java, +                                               long maxOrd, InternalOrder order, BucketCountThresholds bucketCountThresholds,, +                        long maxOrd, InternalOrder order, BucketCountThresholds bucketCountThresholds, IncludeExclude includeExclude, AggregationContext aggregationContext,, +                              long maxOrd, InternalOrder order, BucketCountThresholds bucketCountThresholds, AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode collectionMode, boolean showTermDocCountError) {, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java, +            InternalOrder order, BucketCountThresholds bucketCountThresholds, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +    public DoubleTerms(String name, InternalOrder order, @Nullable ValueFormatter formatter, int requiredSize, int shardSize, long minDocCount, List<InternalTerms.Bucket> buckets, boolean showTermDocCountError, long docCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTermsAggregator.java, +                               InternalOrder order, BucketCountThresholds bucketCountThresholds, AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode collectionMode, boolean showTermDocCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java, +                                               long maxOrd, InternalOrder order, BucketCountThresholds bucketCountThresholds,, +                        long maxOrd, InternalOrder order, BucketCountThresholds bucketCountThresholds, IncludeExclude includeExclude, AggregationContext aggregationContext,, +                              long maxOrd, InternalOrder order, BucketCountThresholds bucketCountThresholds, AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode collectionMode, boolean showTermDocCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalOrder.java, +import java.util.Comparator;, +    public static final InternalOrder COUNT_DESC = new InternalOrder((byte) 1, "_count", false, new Comparator<Terms.Bucket>() {, +            int cmp = - Long.compare(o1.getDocCount(), o2.getDocCount());, +            if (cmp == 0) {, +                cmp = o1.compareTerm(o2);, +            }, +            return cmp;, +    public static final InternalOrder COUNT_ASC = new InternalOrder((byte) 2, "_count", true, new Comparator<Terms.Bucket>() {, +            int cmp = Long.compare(o1.getDocCount(), o2.getDocCount());, +            if (cmp == 0) {, +                cmp = o1.compareTerm(o2);, +            }, +            return cmp;, +    public static final InternalOrder TERM_DESC = new InternalOrder((byte) 3, "_term", false, new Comparator<Terms.Bucket>() {, +            return - o1.compareTerm(o2);, +    public static final InternalOrder TERM_ASC = new InternalOrder((byte) 4, "_term", true, new Comparator<Terms.Bucket>() {, +    public static InternalOrder validate(InternalOrder order, Aggregator termsAggregator) {, +        if (!(order instanceof Aggregation)) {, +        public static void writeOrder(InternalOrder order, StreamOutput out) throws IOException {, +                out.writeBoolean(((MultiBucketsAggregation.Bucket.SubAggregationComparator) order.comparator).asc());, +        public static InternalOrder readOrder(StreamInput in) throws IOException {, +                case 1: return InternalOrder.COUNT_DESC;, +                case 2: return InternalOrder.COUNT_ASC;, +                case 3: return InternalOrder.TERM_DESC;, +                case 4: return InternalOrder.TERM_ASC;, +                case 0:, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/AbstractStringTermsAggregator.java, +            InternalOrder order, BucketCountThresholds bucketCountThresholds, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +    public DoubleTerms(String name, InternalOrder order, @Nullable ValueFormatter formatter, int requiredSize, int shardSize, long minDocCount, List<InternalTerms.Bucket> buckets, boolean showTermDocCountError, long docCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTermsAggregator.java, +                               InternalOrder order, BucketCountThresholds bucketCountThresholds, AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode collectionMode, boolean showTermDocCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java, +                                               long maxOrd, InternalOrder order, BucketCountThresholds bucketCountThresholds,, +                        long maxOrd, InternalOrder order, BucketCountThresholds bucketCountThresholds, IncludeExclude includeExclude, AggregationContext aggregationContext,, +                              long maxOrd, InternalOrder order, BucketCountThresholds bucketCountThresholds, AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode collectionMode, boolean showTermDocCountError) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalOrder.java, +import java.util.Comparator;, +    public static final InternalOrder COUNT_DESC = new InternalOrder((byte) 1, "_count", false, new Comparator<Terms.Bucket>() {, +            int cmp = - Long.compare(o1.getDocCount(), o2.getDocCount());, +            if (cmp == 0) {, +                cmp = o1.compareTerm(o2);, +            }, +            return cmp;, +    public static final InternalOrder COUNT_ASC = new InternalOrder((byte) 2, "_count", true, new Comparator<Terms.Bucket>() {, +            int cmp = Long.compare(o1.getDocCount(), o2.getDocCount());, +            if (cmp == 0) {, +                cmp = o1.compareTerm(o2);, +            }, +            return cmp;, +    public static final InternalOrder TERM_DESC = new InternalOrder((byte) 3, "_term", false, new Comparator<Terms.Bucket>() {, +            return - o1.compareTerm(o2);, +    public static final InternalOrder TERM_ASC = new InternalOrder((byte) 4, "_term", true, new Comparator<Terms.Bucket>() {, +    public static InternalOrder validate(InternalOrder order, Aggregator termsAggregator) {, +        if (!(order instanceof Aggregation)) {, +        public static void writeOrder(InternalOrder order, StreamOutput out) throws IOException {, +                out.writeBoolean(((MultiBucketsAggregation.Bucket.SubAggregationComparator) order.comparator).asc());, +        public static InternalOrder readOrder(StreamInput in) throws IOException {, +                case 1: return InternalOrder.COUNT_DESC;, +                case 2: return InternalOrder.COUNT_ASC;]