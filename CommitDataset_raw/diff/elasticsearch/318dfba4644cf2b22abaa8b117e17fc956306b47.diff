[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String elements[] = classPath.split(System.getProperty("path.separator"));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String elements[] = classPath.split(System.getProperty("path.separator"));, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                    FilterFunction filterFunction = filterFunctions[i];, +            FiltersFunctionFactorScorer scorer = (FiltersFunctionFactorScorer)scorer(context);, +            scorer.advance(doc);, +            double score = scorer.computeScore(doc, subQueryExpl.getValue());, +                    CombineFunction.toFloat(score),, +            double factor = computeScore(docId, subQueryScore);, +            return scoreCombiner.combine(subQueryScore, factor, maxBoost);, +        }, +, +        protected double computeScore(int docId, float subQueryScore) {, +            double factor = 1d;, +                    double weightSum = 0;, +                                weightSum += 1.0;, +            return factor;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String elements[] = classPath.split(System.getProperty("path.separator"));, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                    FilterFunction filterFunction = filterFunctions[i];, +            FiltersFunctionFactorScorer scorer = (FiltersFunctionFactorScorer)scorer(context);, +            scorer.advance(doc);, +            double score = scorer.computeScore(doc, subQueryExpl.getValue());, +                    CombineFunction.toFloat(score),, +            double factor = computeScore(docId, subQueryScore);, +            return scoreCombiner.combine(subQueryScore, factor, maxBoost);, +        }, +, +        protected double computeScore(int docId, float subQueryScore) {, +            double factor = 1d;, +                    double weightSum = 0;, +                                weightSum += 1.0;, +            return factor;, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +    void clear(IndexReader reader);, +, +    public abstract class XFieldComparatorSource extends FieldComparatorSource {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String elements[] = classPath.split(System.getProperty("path.separator"));, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                    FilterFunction filterFunction = filterFunctions[i];, +            FiltersFunctionFactorScorer scorer = (FiltersFunctionFactorScorer)scorer(context);, +            scorer.advance(doc);, +            double score = scorer.computeScore(doc, subQueryExpl.getValue());, +                    CombineFunction.toFloat(score),, +            double factor = computeScore(docId, subQueryScore);, +            return scoreCombiner.combine(subQueryScore, factor, maxBoost);, +        }, +, +        protected double computeScore(int docId, float subQueryScore) {, +            double factor = 1d;, +                    double weightSum = 0;, +                                weightSum += 1.0;, +            return factor;, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +    void clear(IndexReader reader);, +, +    public abstract class XFieldComparatorSource extends FieldComparatorSource {, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +    void clear(IndexReader reader);, +, +, +        @Override, +        public void clear(IndexReader reader) {, +        }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +        String elements[] = classPath.split(System.getProperty("path.separator"));, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +                    FilterFunction filterFunction = filterFunctions[i];, +            FiltersFunctionFactorScorer scorer = (FiltersFunctionFactorScorer)scorer(context);, +            scorer.advance(doc);, +            double score = scorer.computeScore(doc, subQueryExpl.getValue());, +                    CombineFunction.toFloat(score),, +            double factor = computeScore(docId, subQueryScore);, +            return scoreCombiner.combine(subQueryScore, factor, maxBoost);, +        }, +, +        protected double computeScore(int docId, float subQueryScore) {, +            double factor = 1d;, +                    double weightSum = 0;, +                                weightSum += 1.0;, +            return factor;, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +    void clear(IndexReader reader);, +, +    public abstract class XFieldComparatorSource extends FieldComparatorSource {, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataCache.java, +    void clear(IndexReader reader);, +, +, +        @Override, +        public void clear(IndexReader reader) {, +        }, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/ordinals/GlobalOrdinalsIndexFieldData.java, +    public void clear(IndexReader reader) {, +        // no need to clear, because this is cached and cleared in AbstractBytesIndexFieldData, +    }]