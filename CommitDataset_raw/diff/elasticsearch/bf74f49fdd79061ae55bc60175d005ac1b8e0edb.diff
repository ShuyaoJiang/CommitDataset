[+++ b/docs/reference/search/suggesters/completion-suggest.asciidoc, +`unicode_aware`::, +    Sets all are measurements (like edit distance,, +    transpositions and lengths) in unicode code points, +    (actual letters) instead of bytes., +, +++ b/docs/reference/search/suggesters/completion-suggest.asciidoc, +`unicode_aware`::, +    Sets all are measurements (like edit distance,, +    transpositions and lengths) in unicode code points, +    (actual letters) instead of bytes., +, +++ b/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +import org.apache.lucene.store.DataInput;, +import org.apache.lucene.store.DataOutput;, +import java.io.*;, + * to work, so you should call the constructor with, + * <code>preservePositionIncrements</code> parameter set to, + * false, +   *  #XAnalyzingSuggester(Analyzer,Analyzer,int,int,int,boolean,FST,boolean,int,int,int,int)} to always, +   *  #XAnalyzingSuggester(Analyzer,Analyzer,int,int,int,boolean,FST,boolean,int,int,int,int)} to preserve, +  public static final int SEP_LABEL = '\u001F';, +  public static final int END_BYTE = 0x0;, +  private final int sepLabel;, +  private final int payloadSep;, +  private final int endByte;, +, +  public static final int PAYLOAD_SEP = '\u001f';, +   * Calls {@link #XAnalyzingSuggester(Analyzer,Analyzer,int,int,int,boolean,FST,boolean,int,int,int,int), +    this(analyzer, analyzer, EXACT_FIRST | PRESERVE_SEP, 256, -1, true, null, false, 0, SEP_LABEL, PAYLOAD_SEP, END_BYTE);, +   * Calls {@link #XAnalyzingSuggester(Analyzer,Analyzer,int,int,int,boolean,FST,boolean,int,int,int,int), +    this(indexAnalyzer, queryAnalyzer, EXACT_FIRST | PRESERVE_SEP, 256, -1, true, null, false, 0, SEP_LABEL, PAYLOAD_SEP, END_BYTE);, +  public XAnalyzingSuggester(Analyzer indexAnalyzer, Analyzer queryAnalyzer, int options, int maxSurfaceFormsPerAnalyzedForm, int maxGraphExpansions,, +                             boolean preservePositionIncrements, FST<Pair<Long, BytesRef>> fst, boolean hasPayloads, int maxAnalyzedPathsForOneInput,, +                             int sepLabel, int payloadSep, int endByte) {, +    this.sepLabel = sepLabel;, +    this.payloadSep = payloadSep;, +    this.endByte = endByte;, +  private static void replaceSep(Automaton a, boolean preserveSep, int replaceSep) {, +            newTransitions.add(new Transition(replaceSep, t.getDest()));, +  protected Automaton convertAutomaton(Automaton a) {, +    return a;, +  }, +, +    private char sepLabel;, +, +    public EscapingTokenStreamToAutomaton(char sepLabel) {, +      this.sepLabel = sepLabel;, +    }, +        if (b == (byte) sepLabel) {, +          spare.bytes[upto++] = (byte) sepLabel;, +      tsta = new EscapingTokenStreamToAutomaton((char) sepLabel);, +  }, +              if (surfaceForm.bytes[i] == payloadSep) {, +          br.bytes[surface.length] = (byte) payloadSep;, +      //PrintWriter pw = new PrintWriter("/tmp/out.dot");, +      //Util.toDot(fst, pw, true, true);, +      //pw.close();, +        if (output2.bytes[output2.offset+i] == payloadSep) {, +      return output2.bytes[output2.offset + key.length] == payloadSep;, +    for (int i = 0; i < key.length(); i++) {, +      if (key.charAt(i) == 0x1E) {, +        throw new IllegalArgumentException("lookup key cannot contain HOLE character U+001E; this character is reserved");, +      }, +      if (key.charAt(i) == 0x1F) {, +        throw new IllegalArgumentException("lookup key cannot contain unit separator character U+001F; this character is reserved");, +      }, +    }, +      List<FSTUtil.Path<Pair<Long,BytesRef>>> prefixPaths = FSTUtil.intersectPrefixPaths(convertAutomaton(lookupAutomaton), fst);, +          if (fst.findTargetArc(endByte, path.fstNode, scratchArc, bytesReader) != null) {, +          if (fst.findTargetArc(endByte, path.fstNode, scratchArc, bytesReader) != null) {, +  public final Set<IntsRef> toFiniteStrings(final BytesRef surfaceForm, final TokenStreamToAutomaton ts2a) throws IOException {, +      replaceSep(automaton, preserveSep, sepLabel);, +    replaceSep(automaton, preserveSep, sepLabel);, +        private int payloadSep;, +        public XBuilder(int maxSurfaceFormsPerAnalyzedForm, boolean hasPayloads, int payloadSep) {, +            this.payloadSep = payloadSep;, +                br.bytes[surface.length] = (byte) payloadSep;, +++ b/docs/reference/search/suggesters/completion-suggest.asciidoc, +`unicode_aware`::, +    Sets all are measurements (like edit distance,, +    transpositions and lengths) in unicode code points, +    (actual letters) instead of bytes., +, +++ b/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +import org.apache.lucene.store.DataInput;, +import org.apache.lucene.store.DataOutput;, +import java.io.*;, + * to work, so you should call the constructor with, + * <code>preservePositionIncrements</code> parameter set to, + * false, +   *  #XAnalyzingSuggester(Analyzer,Analyzer,int,int,int,boolean,FST,boolean,int,int,int,int)} to always, +   *  #XAnalyzingSuggester(Analyzer,Analyzer,int,int,int,boolean,FST,boolean,int,int,int,int)} to preserve, +  public static final int SEP_LABEL = '\u001F';, +  public static final int END_BYTE = 0x0;, +  private final int sepLabel;, +  private final int payloadSep;, +  private final int endByte;, +, +  public static final int PAYLOAD_SEP = '\u001f';]