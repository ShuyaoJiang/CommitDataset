[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequest;, +public class AnalyzeRequest extends SingleCustomOperationRequest<AnalyzeRequest> {, +        ActionRequestValidationException validationException = super.validate();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequest;, +public class AnalyzeRequest extends SingleCustomOperationRequest<AnalyzeRequest> {, +        ActionRequestValidationException validationException = super.validate();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequestBuilder.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequestBuilder;, +public class AnalyzeRequestBuilder extends SingleCustomOperationRequestBuilder<AnalyzeRequest, AnalyzeResponse, AnalyzeRequestBuilder> {, +     * Sets the index to use to analyzer the text (for example, if it holds specific analyzers, +     * registered)., +     */, +    public AnalyzeRequestBuilder setIndex(String index) {, +        request.index(index);, +        return this;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequest;, +public class AnalyzeRequest extends SingleCustomOperationRequest<AnalyzeRequest> {, +        ActionRequestValidationException validationException = super.validate();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequestBuilder.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequestBuilder;, +public class AnalyzeRequestBuilder extends SingleCustomOperationRequestBuilder<AnalyzeRequest, AnalyzeResponse, AnalyzeRequestBuilder> {, +     * Sets the index to use to analyzer the text (for example, if it holds specific analyzers, +     * registered)., +     */, +    public AnalyzeRequestBuilder setIndex(String index) {, +        request.index(index);, +        return this;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.action.support.single.custom.TransportSingleCustomOperationAction;, +public class TransportAnalyzeAction extends TransportSingleCustomOperationAction<AnalyzeRequest, AnalyzeResponse> {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequest;, +public class AnalyzeRequest extends SingleCustomOperationRequest<AnalyzeRequest> {, +        ActionRequestValidationException validationException = super.validate();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequestBuilder.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequestBuilder;, +public class AnalyzeRequestBuilder extends SingleCustomOperationRequestBuilder<AnalyzeRequest, AnalyzeResponse, AnalyzeRequestBuilder> {, +     * Sets the index to use to analyzer the text (for example, if it holds specific analyzers, +     * registered)., +     */, +    public AnalyzeRequestBuilder setIndex(String index) {, +        request.index(index);, +        return this;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.action.support.single.custom.TransportSingleCustomOperationAction;, +public class TransportAnalyzeAction extends TransportSingleCustomOperationAction<AnalyzeRequest, AnalyzeResponse> {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/GetFieldMappingsIndexRequest.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequest;, +class GetFieldMappingsIndexRequest extends SingleCustomOperationRequest<GetFieldMappingsIndexRequest> {, +        this.preferLocal(other.local);, +    protected void writeIndex(StreamOutput out) throws IOException {, +        out.writeString(index());, +    }, +, +    @Override, +    @Override, +    protected void readIndex(StreamInput in) throws IOException {, +        index(in.readString());, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequest;, +public class AnalyzeRequest extends SingleCustomOperationRequest<AnalyzeRequest> {, +        ActionRequestValidationException validationException = super.validate();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequestBuilder.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequestBuilder;, +public class AnalyzeRequestBuilder extends SingleCustomOperationRequestBuilder<AnalyzeRequest, AnalyzeResponse, AnalyzeRequestBuilder> {, +     * Sets the index to use to analyzer the text (for example, if it holds specific analyzers, +     * registered)., +     */, +    public AnalyzeRequestBuilder setIndex(String index) {, +        request.index(index);, +        return this;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.action.support.single.custom.TransportSingleCustomOperationAction;, +public class TransportAnalyzeAction extends TransportSingleCustomOperationAction<AnalyzeRequest, AnalyzeResponse> {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/GetFieldMappingsIndexRequest.java, +import org.elasticsearch.action.support.single.custom.SingleCustomOperationRequest;, +class GetFieldMappingsIndexRequest extends SingleCustomOperationRequest<GetFieldMappingsIndexRequest> {, +        this.preferLocal(other.local);, +    protected void writeIndex(StreamOutput out) throws IOException {, +        out.writeString(index());, +    }, +, +    @Override, +    @Override]