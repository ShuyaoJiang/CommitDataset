[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.shard.ShardId;, +    void addFailedEngineListener(FailedEngineListener listener);, +, +    static interface FailedEngineListener {, +        void onFailedEngine(ShardId shardId, Throwable t);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.shard.ShardId;, +    void addFailedEngineListener(FailedEngineListener listener);, +, +    static interface FailedEngineListener {, +        void onFailedEngine(ShardId shardId, Throwable t);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/EngineClosedException.java, +, +    public EngineClosedException(ShardId shardId, Throwable t) {, +        super(shardId, t);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.index.shard.ShardId;, +    void addFailedEngineListener(FailedEngineListener listener);, +, +    static interface FailedEngineListener {, +        void onFailedEngine(ShardId shardId, Throwable t);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/EngineClosedException.java, +, +    public EngineClosedException(ShardId shardId, Throwable t) {, +        super(shardId, t);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import java.util.concurrent.CopyOnWriteArrayList;, +    private Throwable failedEngine = null;, +    private final Object failedEngineMutex = new Object();, +    private final CopyOnWriteArrayList<FailedEngineListener> failedEngineListeners = new CopyOnWriteArrayList<FailedEngineListener>();, +, +    @Override public void addFailedEngineListener(FailedEngineListener listener) {, +        failedEngineListeners.add(listener);, +    }, +, +                throw new EngineClosedException(shardId, failedEngine);, +        } catch (OutOfMemoryError e) {, +            failEngine(e);, +            throw new CreateFailedEngineException(shardId, create, e);, +                throw new EngineClosedException(shardId, failedEngine);, +        } catch (OutOfMemoryError e) {, +            failEngine(e);, +            throw new IndexFailedEngineException(shardId, index, e);, +                throw new EngineClosedException(shardId, failedEngine);, +        } catch (OutOfMemoryError e) {, +            failEngine(e);, +            throw new DeleteFailedEngineException(shardId, delete, e);, +                throw new EngineClosedException(shardId, failedEngine);, +                    throw new EngineClosedException(shardId, failedEngine);, +            } catch (OutOfMemoryError e) {, +                failEngine(e);, +                throw new RefreshFailedEngineException(shardId, e);, +            throw new EngineClosedException(shardId, failedEngine);, +                throw new EngineClosedException(shardId, failedEngine);, +                } catch (Exception e) {, +                    throw new FlushFailedEngineException(shardId, e);, +                } catch (OutOfMemoryError e) {, +                    failEngine(e);, +                } catch (Exception e) {, +                    throw new FlushFailedEngineException(shardId, e);, +                } catch (OutOfMemoryError e) {, +                    failEngine(e);, +                throw new EngineClosedException(shardId, failedEngine);, +        } catch (OutOfMemoryError e) {, +            failEngine(e);, +            throw new OptimizeFailedEngineException(shardId, e);, +                    throw new EngineClosedException(shardId, failedEngine);, +            } catch (OutOfMemoryError e) {, +                failEngine(e);, +                throw new OptimizeFailedEngineException(shardId, e);, +        rwl.writeLock().lock();, +        try {, +            innerClose();, +        } finally {, +            rwl.writeLock().unlock();, +        }, +    }, +, +    private void failEngine(Throwable failure) {, +        synchronized (failedEngineMutex) {, +            if (failedEngine != null) {, +                return;, +            }, +            logger.warn("failed engine", failure);, +            failedEngine = failure;, +            for (FailedEngineListener listener : failedEngineListeners) {, +                listener.onFailedEngine(shardId, failure);, +            }, +            innerClose();, +        }, +    }]