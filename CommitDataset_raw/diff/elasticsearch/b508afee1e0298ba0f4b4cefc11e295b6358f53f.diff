[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            // always wait for yellow before anything is executed, +            current.println(, +                    "  - do:\n" +, +                    "      raw:\n" +, +                    "        method: GET\n" +, +                    "        path: \"_cluster/health\"\n" +, +                    "        wait_for_status: \"yellow\""), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            // always wait for yellow before anything is executed, +            current.println(, +                    "  - do:\n" +, +                    "      raw:\n" +, +                    "        method: GET\n" +, +                    "        path: \"_cluster/health\"\n" +, +                    "        wait_for_status: \"yellow\""), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import java.util.regex.Matcher, +import java.util.regex.Pattern, +    static final Pattern GIT_PATTERN = Pattern.compile(/git@([^:]+):([^\.]+)\.git/), +, +    /** Find the reponame. */, +    protected static String urlFromOrigin(String origin) {, +        if (origin.startsWith('https')) {, +            return origin, +        }, +        Matcher matcher = GIT_PATTERN.matcher(origin), +        if (matcher.matches()) {, +            return "https://${matcher.group(1)}/${matcher.group(2)}", +        } else {, +            return origin // best effort, the url doesnt really matter, it is just required by maven central, +        }, +    }, +, +                        root.appendNode('url', urlFromOrigin(project.scminfo.origin)), +                        root.appendNode('url', urlFromOrigin(project.scminfo.origin)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            // always wait for yellow before anything is executed, +            current.println(, +                    "  - do:\n" +, +                    "      raw:\n" +, +                    "        method: GET\n" +, +                    "        path: \"_cluster/health\"\n" +, +                    "        wait_for_status: \"yellow\""), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import java.util.regex.Matcher, +import java.util.regex.Pattern, +    static final Pattern GIT_PATTERN = Pattern.compile(/git@([^:]+):([^\.]+)\.git/), +, +    /** Find the reponame. */, +    protected static String urlFromOrigin(String origin) {, +        if (origin.startsWith('https')) {, +            return origin, +        }, +        Matcher matcher = GIT_PATTERN.matcher(origin), +        if (matcher.matches()) {, +            return "https://${matcher.group(1)}/${matcher.group(2)}", +        } else {, +            return origin // best effort, the url doesnt really matter, it is just required by maven central, +        }, +    }, +, +                        root.appendNode('url', urlFromOrigin(project.scminfo.origin)), +                        root.appendNode('url', urlFromOrigin(project.scminfo.origin)), +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        SCRIPT_PARSE_EXCEPTION(org.elasticsearch.script.Script.ScriptParseException.class,, +                org.elasticsearch.script.Script.ScriptParseException::new, 124),, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +            // always wait for yellow before anything is executed, +            current.println(, +                    "  - do:\n" +, +                    "      raw:\n" +, +                    "        method: GET\n" +, +                    "        path: \"_cluster/health\"\n" +, +                    "        wait_for_status: \"yellow\""), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import java.util.regex.Matcher, +import java.util.regex.Pattern, +    static final Pattern GIT_PATTERN = Pattern.compile(/git@([^:]+):([^\.]+)\.git/), +, +    /** Find the reponame. */, +    protected static String urlFromOrigin(String origin) {, +        if (origin.startsWith('https')) {, +            return origin, +        }, +        Matcher matcher = GIT_PATTERN.matcher(origin), +        if (matcher.matches()) {, +            return "https://${matcher.group(1)}/${matcher.group(2)}", +        } else {, +            return origin // best effort, the url doesnt really matter, it is just required by maven central, +        }, +    }, +, +                        root.appendNode('url', urlFromOrigin(project.scminfo.origin)), +                        root.appendNode('url', urlFromOrigin(project.scminfo.origin)), +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        SCRIPT_PARSE_EXCEPTION(org.elasticsearch.script.Script.ScriptParseException.class,, +                org.elasticsearch.script.Script.ScriptParseException::new, 124),, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +import org.elasticsearch.script.Template;]