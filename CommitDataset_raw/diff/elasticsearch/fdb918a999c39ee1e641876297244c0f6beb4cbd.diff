[+++ b/build.gradle, +import org.elasticsearch.gradle.BwcVersions, +BwcVersions versions = new BwcVersions(file('server/src/main/java/org/elasticsearch/Version.java').readLines('UTF-8')), +++ b/build.gradle, +import org.elasticsearch.gradle.BwcVersions, +BwcVersions versions = new BwcVersions(file('server/src/main/java/org/elasticsearch/Version.java').readLines('UTF-8')), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.elasticsearch.gradle.BwcVersions, +        BwcVersions.UnreleasedVersionInfo unreleasedInfo = null, +++ b/build.gradle, +import org.elasticsearch.gradle.BwcVersions, +BwcVersions versions = new BwcVersions(file('server/src/main/java/org/elasticsearch/Version.java').readLines('UTF-8')), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.elasticsearch.gradle.BwcVersions, +        BwcVersions.UnreleasedVersionInfo unreleasedInfo = null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +import org.elasticsearch.gradle.BwcVersions, +            BwcVersions.UnreleasedVersionInfo unreleasedInfo = project.bwcVersions.unreleasedInfo(upgradeFromVersion), +++ b/build.gradle, +import org.elasticsearch.gradle.BwcVersions, +BwcVersions versions = new BwcVersions(file('server/src/main/java/org/elasticsearch/Version.java').readLines('UTF-8')), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.elasticsearch.gradle.BwcVersions, +        BwcVersions.UnreleasedVersionInfo unreleasedInfo = null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +import org.elasticsearch.gradle.BwcVersions, +            BwcVersions.UnreleasedVersionInfo unreleasedInfo = project.bwcVersions.unreleasedInfo(upgradeFromVersion), +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/BwcVersions.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.gradle;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import java.util.SortedSet;, +import java.util.TreeSet;, +import java.util.function.Consumer;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +, +import static java.util.Collections.emptyList;, +import static java.util.Collections.unmodifiableList;, +, +/**, + * A container for elasticsearch supported version information used in BWC testing., + *, + * Parse the Java source file containing the versions declarations and use the known rules to figure out which are all, + * the version the current one is wire and index compatible with., + * On top of this, figure out which of these are unreleased and provide the branch they can be built from., + *, + * Note that in this context, currentVersion is the unreleased version this build operates on., + * At any point in time there will surely be four such unreleased versions being worked on,, + * thus currentVersion will be one of these., + *, + * Considering:, + * <dl>, + *     <dt>M, M &gt; 0</dt>, + *     <dd>last released major</dd>, + *     <dt>N, N &gt; 0</dt>, + *     <dd>last released minor</dd>, + * </dl>, + *, + * <ul>, + * <li>the unreleased <b>major</b>, M+1.0.0 on the `master` branch</li>, + * <li>the unreleased <b>minor</b>,  M.N.0 on the `M.x` (x is literal) branch</li>, + * <li>the unreleased <b>bugfix</b>, M.N.c (c &gt; 0) on the `M.N` branch</li>, + * <li>the unreleased <b>maintenance</b>, M-1.d.e ( d &gt; 0, e &gt; 0) on the `(M-1).d` branch</li>, + * </ul>, + * In addition to these, there will be a fifth one when a minor reaches feature freeze, we call this the <i>staged</i>, + * version:, + * <ul>, + * <li>the unreleased <b>staged</b>, M.N-2.0 (N &gt; 2) on the `M.(N-2)` branch</li>, + * </ul>, + *, + * Each build is only concerned with versions before it, as those are the ones that need to be tested, + * for backwards compatibility. We never look forward, and don't add forward facing version number to branches of previous]