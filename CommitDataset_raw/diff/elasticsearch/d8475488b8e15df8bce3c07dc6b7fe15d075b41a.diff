[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.apache.logging.log4j.core.Appender;, +import org.apache.logging.log4j.core.appender.ConsoleAppender;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +                final Logger rootLogger = ESLoggerFactory.getRootLogger();, +                final Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);, +                if (maybeConsoleAppender != null) {, +                    Loggers.removeAppender(rootLogger, maybeConsoleAppender);, +                }, +            final Logger rootLogger = ESLoggerFactory.getRootLogger();, +            final Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);, +            if (foreground && maybeConsoleAppender != null) {, +                Loggers.removeAppender(rootLogger, maybeConsoleAppender);, +            if (foreground && maybeConsoleAppender != null) {, +                Loggers.addAppender(rootLogger, maybeConsoleAppender);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.apache.logging.log4j.core.Appender;, +import org.apache.logging.log4j.core.appender.ConsoleAppender;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +                final Logger rootLogger = ESLoggerFactory.getRootLogger();, +                final Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);, +                if (maybeConsoleAppender != null) {, +                    Loggers.removeAppender(rootLogger, maybeConsoleAppender);, +                }, +            final Logger rootLogger = ESLoggerFactory.getRootLogger();, +            final Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);, +            if (foreground && maybeConsoleAppender != null) {, +                Loggers.removeAppender(rootLogger, maybeConsoleAppender);, +            if (foreground && maybeConsoleAppender != null) {, +                Loggers.addAppender(rootLogger, maybeConsoleAppender);, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.core.Appender;, +import java.util.Map;, +    public static void addAppender(final Logger logger, final Appender appender) {, +        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);, +        final Configuration config = ctx.getConfiguration();, +        config.addAppender(appender);, +        LoggerConfig loggerConfig = config.getLoggerConfig(logger.getName());, +        if (!logger.getName().equals(loggerConfig.getName())) {, +            loggerConfig = new LoggerConfig(logger.getName(), logger.getLevel(), true);, +            config.addLogger(logger.getName(), loggerConfig);, +        }, +        loggerConfig.addAppender(appender, null, null);, +        ctx.updateLoggers();, +    }, +, +    public static void removeAppender(final Logger logger, final Appender appender) {, +        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);, +        final Configuration config = ctx.getConfiguration();, +        LoggerConfig loggerConfig = config.getLoggerConfig(logger.getName());, +        if (!logger.getName().equals(loggerConfig.getName())) {, +            loggerConfig = new LoggerConfig(logger.getName(), logger.getLevel(), true);, +            config.addLogger(logger.getName(), loggerConfig);, +        }, +        loggerConfig.removeAppender(appender.getName());, +        ctx.updateLoggers();, +    }, +, +    public static Appender findAppender(final Logger logger, final Class<? extends Appender> clazz) {, +        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);, +        final Configuration config = ctx.getConfiguration();, +        final LoggerConfig loggerConfig = config.getLoggerConfig(logger.getName());, +        for (final Map.Entry<String, Appender> entry : loggerConfig.getAppenders().entrySet()) {, +            if (entry.getValue().getClass().equals(clazz)) {, +                return entry.getValue();, +            }, +        }, +        return null;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.apache.logging.log4j.core.Appender;, +import org.apache.logging.log4j.core.appender.ConsoleAppender;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +                final Logger rootLogger = ESLoggerFactory.getRootLogger();, +                final Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);, +                if (maybeConsoleAppender != null) {, +                    Loggers.removeAppender(rootLogger, maybeConsoleAppender);, +                }, +            final Logger rootLogger = ESLoggerFactory.getRootLogger();, +            final Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);, +            if (foreground && maybeConsoleAppender != null) {, +                Loggers.removeAppender(rootLogger, maybeConsoleAppender);, +            if (foreground && maybeConsoleAppender != null) {, +                Loggers.addAppender(rootLogger, maybeConsoleAppender);, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.core.Appender;, +import java.util.Map;, +    public static void addAppender(final Logger logger, final Appender appender) {, +        final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);, +        final Configuration config = ctx.getConfiguration();, +        config.addAppender(appender);, +        LoggerConfig loggerConfig = config.getLoggerConfig(logger.getName());, +        if (!logger.getName().equals(loggerConfig.getName())) {, +            loggerConfig = new LoggerConfig(logger.getName(), logger.getLevel(), true);, +            config.addLogger(logger.getName(), loggerConfig);, +        }, +        loggerConfig.addAppender(appender, null, null);]