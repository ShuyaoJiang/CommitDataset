[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.common.logging.support.LoggerMessageFormat;, +                    AliasOrIndex aliasOrIndex = aliasAndIndexLookup.get(aliasMetaData.getAlias());, +                    } else if (aliasOrIndex instanceof AliasOrIndex.Alias) {, +                        AliasOrIndex.Alias alias = (AliasOrIndex.Alias) aliasOrIndex;, +                        alias.addIndex(indexMetaData);, +                    } else if (aliasOrIndex instanceof AliasOrIndex.Index) {, +                        AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex;, +                        throw new IllegalStateException("index and alias names need to be unique, but alias [" + aliasMetaData.getAlias() + "] and index [" + index.getIndex().getIndex() + "] have the same name");, +                        throw new IllegalStateException("unexpected alias [" + aliasMetaData.getAlias() + "][" + aliasOrIndex + "]");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.common.logging.support.LoggerMessageFormat;, +                    AliasOrIndex aliasOrIndex = aliasAndIndexLookup.get(aliasMetaData.getAlias());, +                    } else if (aliasOrIndex instanceof AliasOrIndex.Alias) {, +                        AliasOrIndex.Alias alias = (AliasOrIndex.Alias) aliasOrIndex;, +                        alias.addIndex(indexMetaData);, +                    } else if (aliasOrIndex instanceof AliasOrIndex.Index) {, +                        AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex;, +                        throw new IllegalStateException("index and alias names need to be unique, but alias [" + aliasMetaData.getAlias() + "] and index [" + index.getIndex().getIndex() + "] have the same name");, +                        throw new IllegalStateException("unexpected alias [" + aliasMetaData.getAlias() + "][" + aliasOrIndex + "]");, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.common.logging.support.LoggerMessageFormat;, +                    AliasOrIndex aliasOrIndex = aliasAndIndexLookup.get(aliasMetaData.getAlias());, +                    } else if (aliasOrIndex instanceof AliasOrIndex.Alias) {, +                        AliasOrIndex.Alias alias = (AliasOrIndex.Alias) aliasOrIndex;, +                        alias.addIndex(indexMetaData);, +                    } else if (aliasOrIndex instanceof AliasOrIndex.Index) {, +                        AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex;, +                        throw new IllegalStateException("index and alias names need to be unique, but alias [" + aliasMetaData.getAlias() + "] and index [" + index.getIndex().getIndex() + "] have the same name");, +                        throw new IllegalStateException("unexpected alias [" + aliasMetaData.getAlias() + "][" + aliasOrIndex + "]");, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/MetaDataTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.metadata;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.test.ESTestCase;, +, +import static org.hamcrest.Matchers.equalTo;, +, +public class MetaDataTests extends ESTestCase {, +, +    public void testIndexAndAliasWithSameName() {, +        IndexMetaData.Builder builder = IndexMetaData.builder("index"), +                .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +                .numberOfShards(1), +                .numberOfReplicas(0), +                .putAlias(AliasMetaData.builder("index").build());, +        try {, +            MetaData.builder().put(builder).build();, +            fail("expection should have been thrown");, +        } catch (IllegalStateException e) {, +            assertThat(e.getMessage(), equalTo("index and alias names need to be unique, but alias [index] and index [index] have the same name"));, +        }, +    }, +, +}, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.common.logging.support.LoggerMessageFormat;, +                    AliasOrIndex aliasOrIndex = aliasAndIndexLookup.get(aliasMetaData.getAlias());, +                    } else if (aliasOrIndex instanceof AliasOrIndex.Alias) {, +                        AliasOrIndex.Alias alias = (AliasOrIndex.Alias) aliasOrIndex;, +                        alias.addIndex(indexMetaData);, +                    } else if (aliasOrIndex instanceof AliasOrIndex.Index) {, +                        AliasOrIndex.Index index = (AliasOrIndex.Index) aliasOrIndex;, +                        throw new IllegalStateException("index and alias names need to be unique, but alias [" + aliasMetaData.getAlias() + "] and index [" + index.getIndex().getIndex() + "] have the same name");, +                        throw new IllegalStateException("unexpected alias [" + aliasMetaData.getAlias() + "][" + aliasOrIndex + "]");, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/MetaDataTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *]