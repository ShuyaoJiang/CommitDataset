[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    private final AtomicBoolean flushing = new AtomicBoolean();, +, +        // don't allow for concurrent flush operations..., +        if (!flushing.compareAndSet(false, true)) {, +            throw new FlushNotAllowedEngineException(shardId, "Already flushing...");, +        }, +, +        // call maybeMerge outside of the write lock since it gets called anyhow within commit/refresh, +        // and we want not to suffer this cost within the write lock, +        // We can't do prepareCommit here, since we rely on the the segment version for the translog version, +        try {, +            indexWriter.maybeMerge();, +        } catch (Exception e) {, +            flushing.set(false);, +            throw new FlushFailedEngineException(shardId, e);, +        }, +            // we need to do a refresh here so we sync versioning support, +            flushing.set(false);, +        // we flush anyhow before..., +//        if (flush.refresh()) {, +//            refresh(new Refresh(false));, +//        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    private final AtomicBoolean flushing = new AtomicBoolean();, +, +        // don't allow for concurrent flush operations..., +        if (!flushing.compareAndSet(false, true)) {, +            throw new FlushNotAllowedEngineException(shardId, "Already flushing...");, +        }, +, +        // call maybeMerge outside of the write lock since it gets called anyhow within commit/refresh, +        // and we want not to suffer this cost within the write lock, +        // We can't do prepareCommit here, since we rely on the the segment version for the translog version, +        try {, +            indexWriter.maybeMerge();, +        } catch (Exception e) {, +            flushing.set(false);, +            throw new FlushFailedEngineException(shardId, e);, +        }, +            // we need to do a refresh here so we sync versioning support, +            flushing.set(false);, +        // we flush anyhow before..., +//        if (flush.refresh()) {, +//            refresh(new Refresh(false));, +//        }, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/deps/lucene/SimpleLuceneTests.java, +    @Test public void testAddDocAfterPrepareCommit() throws Exception {, +        Directory dir = new RAMDirectory();, +        IndexWriter indexWriter = new IndexWriter(dir, Lucene.STANDARD_ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);, +        indexWriter.addDocument(doc(), +                .add(field("_id", "1")).build());, +        IndexReader reader = indexWriter.getReader();, +        assertThat(reader.numDocs(), equalTo(1));, +, +        indexWriter.prepareCommit();, +        reader = indexWriter.getReader();, +        assertThat(reader.numDocs(), equalTo(1));, +, +        indexWriter.addDocument(doc(), +                .add(field("_id", "2")).build());, +        indexWriter.commit();, +        reader = indexWriter.getReader();, +        assertThat(reader.numDocs(), equalTo(2));, +    }, +]