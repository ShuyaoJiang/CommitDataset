[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/status/IndexStatus.java, +    IndexStatus(String index, ShardStatus[] shards) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/status/IndexStatus.java, +    IndexStatus(String index, ShardStatus[] shards) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/status/IndicesStatusRequest.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +import java.io.IOException;, +    private boolean recovery = false;, +, +    private boolean snapshot = false;, +, +    /**, +     * Should the status include recovery information. Defaults to <tt>false</tt>., +     */, +    public IndicesStatusRequest recovery(boolean recovery) {, +        this.recovery = recovery;, +        return this;, +    }, +, +    public boolean recovery() {, +        return this.recovery;, +    }, +, +    /**, +     * Should the status include recovery information. Defaults to <tt>false</tt>., +     */, +    public IndicesStatusRequest snapshot(boolean snapshot) {, +        this.snapshot = snapshot;, +        return this;, +    }, +, +    public boolean snapshot() {, +        return this.snapshot;, +    }, +, +, +    @Override public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);, +        out.writeBoolean(recovery);, +    }, +, +    @Override public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +        recovery = in.readBoolean();, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/status/IndexStatus.java, +    IndexStatus(String index, ShardStatus[] shards) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/status/IndicesStatusRequest.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +import java.io.IOException;, +    private boolean recovery = false;, +, +    private boolean snapshot = false;, +, +    /**, +     * Should the status include recovery information. Defaults to <tt>false</tt>., +     */, +    public IndicesStatusRequest recovery(boolean recovery) {, +        this.recovery = recovery;, +        return this;, +    }, +, +    public boolean recovery() {, +        return this.recovery;, +    }, +, +    /**, +     * Should the status include recovery information. Defaults to <tt>false</tt>., +     */, +    public IndicesStatusRequest snapshot(boolean snapshot) {, +        this.snapshot = snapshot;, +        return this;, +    }, +, +    public boolean snapshot() {, +        return this.snapshot;, +    }, +, +, +    @Override public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);, +        out.writeBoolean(recovery);, +    }, +, +    @Override public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +        recovery = in.readBoolean();, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/status/IndicesStatusResponse.java, +import org.elasticsearch.common.collect.Sets;, +import java.util.Set;, +, +        Set<String> indices = Sets.newHashSet();, +        for (ShardStatus shard : shards) {, +            indices.add(shard.index());, +        }]