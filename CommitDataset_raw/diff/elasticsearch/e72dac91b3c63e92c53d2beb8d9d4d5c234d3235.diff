[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +        IndexService service = indicesService.indexService(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +        IndexService service = indicesService.indexService(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/segments/TransportIndicesSegmentsAction.java, +        IndexService indexService = indicesService.indexServiceSafe(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +        IndexService service = indicesService.indexService(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/segments/TransportIndicesSegmentsAction.java, +        IndexService indexService = indicesService.indexServiceSafe(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.Index;, +        ShardId shardId = request.shardId();, +        final IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        final IndexShard indexShard = indexService.getShard(shardId.getId());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +        IndexService service = indicesService.indexService(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/segments/TransportIndicesSegmentsAction.java, +        IndexService indexService = indicesService.indexServiceSafe(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.Index;, +        ShardId shardId = request.shardId();, +        final IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        final IndexShard indexShard = indexService.getShard(shardId.getId());, +++ b/core/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +            return shardTarget.shardId().id();, +            shardTarget = new SearchShardTarget(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +        IndexService service = indicesService.indexService(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/segments/TransportIndicesSegmentsAction.java, +        IndexService indexService = indicesService.indexServiceSafe(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.Index;, +        ShardId shardId = request.shardId();, +        final IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        final IndexShard indexShard = indexService.getShard(shardId.getId());, +++ b/core/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +            return shardTarget.shardId().id();, +            shardTarget = new SearchShardTarget(in);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                        indexService.fieldData(), request.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +        IndexService service = indicesService.indexService(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/segments/TransportIndicesSegmentsAction.java, +        IndexService indexService = indicesService.indexServiceSafe(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.Index;, +        ShardId shardId = request.shardId();, +        final IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        final IndexShard indexShard = indexService.getShard(shardId.getId());, +++ b/core/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +            return shardTarget.shardId().id();, +            shardTarget = new SearchShardTarget(in);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                        indexService.fieldData(), request.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.index.Index;, +            Index index = request.shardId().getIndex();, +                    logger.debug("ignoring failed replica {}[{}] because index was already removed.", index, shardId);, +                    logger.debug("ignoring failed replica {}[{}] because index was already removed.", index, shardId);, +            try (Releasable ignored = getIndexShardReferenceOnReplica(request.shardId())) {, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {, +        return new IndexShardReferenceImpl(indexShard, true);, +    protected IndexShardReference getIndexShardReferenceOnReplica(ShardId shardId) {, +        return new IndexShardReferenceImpl(indexShard, false);, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                assert false : shardFailedError;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +        IndexService service = indicesService.indexService(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/segments/TransportIndicesSegmentsAction.java, +        IndexService indexService = indicesService.indexServiceSafe(shardRouting.index());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.Index;, +        ShardId shardId = request.shardId();, +        final IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        final IndexShard indexShard = indexService.getShard(shardId.getId());, +++ b/core/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java, +            return shardTarget.shardId().id();, +            shardTarget = new SearchShardTarget(in);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/TransportSuggestAction.java, +                        indexService.fieldData(), request.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.index.Index;, +            Index index = request.shardId().getIndex();, +                    logger.debug("ignoring failed replica {}[{}] because index was already removed.", index, shardId);, +                    logger.debug("ignoring failed replica {}[{}] because index was already removed.", index, shardId);, +            try (Releasable ignored = getIndexShardReferenceOnReplica(request.shardId())) {, +            indexShardReference = getIndexShardReferenceOnPrimary(shardId);, +    protected IndexShardReference getIndexShardReferenceOnPrimary(ShardId shardId) {, +        return new IndexShardReferenceImpl(indexShard, true);, +    protected IndexShardReference getIndexShardReferenceOnReplica(ShardId shardId) {, +        return new IndexShardReferenceImpl(indexShard, false);, +                                                String message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard [%s] for [%s]", primaryShard, shard, exp);, +                                                assert false : shardFailedError;, +++ b/core/src/main/java/org/elasticsearch/action/support/single/instance/InstanceShardOperationRequest.java, +import org.elasticsearch.index.shard.ShardId;, +    // null means its not set, allows to explicitly direct a request to a specific shard, +    protected ShardId shardId = null;, +        if (in.readBoolean()) {]