[+++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +import org.elasticsearch.common.lucene.search.XFilteredQuery;, +        XFilteredQuery query = new XFilteredQuery(context.percolateQuery(), percolatorTypeFilter);, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +import org.elasticsearch.common.lucene.search.XFilteredQuery;, +        XFilteredQuery query = new XFilteredQuery(context.percolateQuery(), percolatorTypeFilter);, +++ b/src/test/java/org/elasticsearch/percolator/PercolatorTests.java, +    @Test, +    public void testDontReportDeletedPercolatorDocs() throws Exception {, +        client().admin().indices().prepareCreate("test").execute().actionGet();, +        ensureGreen();, +, +        client().prepareIndex("test", PercolatorService.TYPE_NAME, "1"), +                .setSource(jsonBuilder().startObject().field("query", matchAllQuery()).endObject()), +                .get();, +        client().prepareIndex("test", PercolatorService.TYPE_NAME, "1"), +                .setSource(jsonBuilder().startObject().field("query", matchAllQuery()).endObject()), +                .get();, +        refresh();, +, +        PercolateResponse response = client().preparePercolate(), +                .setIndices("test").setDocumentType("type"), +                .setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field", "value").endObject())), +                .setPercolateFilter(FilterBuilders.matchAllFilter()), +                .get();, +        assertMatchCount(response, 1l);, +        assertThat(response.getMatches(), arrayWithSize(1));, +        assertThat(convertFromTextArray(response.getMatches(), "test"), arrayContainingInAnyOrder("1"));, +    }, +]