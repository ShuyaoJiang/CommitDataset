[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected PrimaryResult shardOperationOnPrimary(ShardFlushRequest shardRequest) {, +        IndexShard indexShard = indicesService.indexServiceSafe(shardRequest.shardId().getIndex()).getShard(shardRequest.shardId().id());, +        indexShard.flush(shardRequest.getRequest());, +        logger.trace("{} flush request executed on primary", indexShard.shardId());, +    protected ReplicaResult shardOperationOnReplica(ShardFlushRequest request) {, +        IndexShard indexShard = indicesService.indexServiceSafe(request.shardId().getIndex()).getShard(request.shardId().id());, +        indexShard.flush(request.getRequest());, +        logger.trace("{} flush request executed on replica", indexShard.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected PrimaryResult shardOperationOnPrimary(ShardFlushRequest shardRequest) {, +        IndexShard indexShard = indicesService.indexServiceSafe(shardRequest.shardId().getIndex()).getShard(shardRequest.shardId().id());, +        indexShard.flush(shardRequest.getRequest());, +        logger.trace("{} flush request executed on primary", indexShard.shardId());, +    protected ReplicaResult shardOperationOnReplica(ShardFlushRequest request) {, +        IndexShard indexShard = indicesService.indexServiceSafe(request.shardId().getIndex()).getShard(request.shardId().id());, +        indexShard.flush(request.getRequest());, +        logger.trace("{} flush request executed on replica", indexShard.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.index.shard.ShardId;, +    protected PrimaryResult shardOperationOnPrimary(BasicReplicationRequest shardRequest) {, +        IndexShard indexShard = indicesService.indexServiceSafe(shardRequest.shardId().getIndex()).getShard(shardRequest.shardId().id());, +        indexShard.refresh("api");, +        logger.trace("{} refresh request executed on primary", indexShard.shardId());, +    protected ReplicaResult shardOperationOnReplica(BasicReplicationRequest request) {, +        final ShardId shardId = request.shardId();, +        IndexShard indexShard = indicesService.indexServiceSafe(shardId.getIndex()).getShard(shardId.id());, +        indexShard.refresh("api");, +        logger.trace("{} refresh request executed on replica", indexShard.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected PrimaryResult shardOperationOnPrimary(ShardFlushRequest shardRequest) {, +        IndexShard indexShard = indicesService.indexServiceSafe(shardRequest.shardId().getIndex()).getShard(shardRequest.shardId().id());, +        indexShard.flush(shardRequest.getRequest());, +        logger.trace("{} flush request executed on primary", indexShard.shardId());, +    protected ReplicaResult shardOperationOnReplica(ShardFlushRequest request) {, +        IndexShard indexShard = indicesService.indexServiceSafe(request.shardId().getIndex()).getShard(request.shardId().id());, +        indexShard.flush(request.getRequest());, +        logger.trace("{} flush request executed on replica", indexShard.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.index.shard.ShardId;, +    protected PrimaryResult shardOperationOnPrimary(BasicReplicationRequest shardRequest) {, +        IndexShard indexShard = indicesService.indexServiceSafe(shardRequest.shardId().getIndex()).getShard(shardRequest.shardId().id());, +        indexShard.refresh("api");, +        logger.trace("{} refresh request executed on primary", indexShard.shardId());, +    protected ReplicaResult shardOperationOnReplica(BasicReplicationRequest request) {, +        final ShardId shardId = request.shardId();, +        IndexShard indexShard = indicesService.indexServiceSafe(shardId.getIndex()).getShard(shardId.id());, +        indexShard.refresh("api");, +        logger.trace("{} refresh request executed on replica", indexShard.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.IndexService;, +    protected WriteResult<BulkShardResponse> onPrimaryShard(BulkShardRequest request, IndexShard indexShard) throws Exception {, +        ShardId shardId = request.shardId();, +        final IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        final IndexMetaData metaData = indexService.getIndexSettings().getIndexMetaData();, +            location = handleItem(metaData, request, indexShard, preVersions, preVersionTypes, location, requestIndex, item);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected PrimaryResult shardOperationOnPrimary(ShardFlushRequest shardRequest) {, +        IndexShard indexShard = indicesService.indexServiceSafe(shardRequest.shardId().getIndex()).getShard(shardRequest.shardId().id());, +        indexShard.flush(shardRequest.getRequest());, +        logger.trace("{} flush request executed on primary", indexShard.shardId());, +    protected ReplicaResult shardOperationOnReplica(ShardFlushRequest request) {, +        IndexShard indexShard = indicesService.indexServiceSafe(request.shardId().getIndex()).getShard(request.shardId().id());, +        indexShard.flush(request.getRequest());, +        logger.trace("{} flush request executed on replica", indexShard.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +import org.elasticsearch.index.shard.ShardId;, +    protected PrimaryResult shardOperationOnPrimary(BasicReplicationRequest shardRequest) {, +        IndexShard indexShard = indicesService.indexServiceSafe(shardRequest.shardId().getIndex()).getShard(shardRequest.shardId().id());, +        indexShard.refresh("api");, +        logger.trace("{} refresh request executed on primary", indexShard.shardId());, +    protected ReplicaResult shardOperationOnReplica(BasicReplicationRequest request) {, +        final ShardId shardId = request.shardId();, +        IndexShard indexShard = indicesService.indexServiceSafe(shardId.getIndex()).getShard(shardId.id());, +        indexShard.refresh("api");, +        logger.trace("{} refresh request executed on replica", indexShard.shardId());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.IndexService;, +    protected WriteResult<BulkShardResponse> onPrimaryShard(BulkShardRequest request, IndexShard indexShard) throws Exception {, +        ShardId shardId = request.shardId();, +        final IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        final IndexMetaData metaData = indexService.getIndexSettings().getIndexMetaData();, +            location = handleItem(metaData, request, indexShard, preVersions, preVersionTypes, location, requestIndex, item);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    protected final TransportService transportService;, +    protected final IndicesService indicesService;, +    final String transportReplicaAction;, +    final String transportPrimaryAction;, +    protected abstract PrimaryResult shardOperationOnPrimary(Request shardRequest) throws Exception;, +     * {@link #acquireReplicaOperationLock(ShardId, long, String, ActionListener)}., +    protected abstract ReplicaResult shardOperationOnReplica(ReplicaRequest shardRequest);, +                ReplicaResult replicaResult = shardOperationOnReplica(request);, +            assert request.shardId() != null : "request shardId must be set";, +            acquireReplicaOperationLock(request.shardId(), request.primaryTerm(), targetAllocationID, this);, +    protected void acquirePrimaryShardReference(ShardId shardId, String allocationId,, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +        IndexShard indexShard = indexService.getShard(shardId.id());, +     * tries to acquire an operation on replicas. The lock is closed as soon as replication is completed on the node., +     */, +    protected void acquireReplicaOperationLock(ShardId shardId, long primaryTerm, final String allocationId,]