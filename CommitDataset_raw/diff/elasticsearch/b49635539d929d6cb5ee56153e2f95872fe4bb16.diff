[+++ b/TESTING.asciidoc, +To disable and enable network transport, set the `tests.es.node.mode` system property., +-Dtests.es.node.mode=network, +-Dtests.es.node.mode=local, +gradle test -Dtests.es.logger.level=DEBUG, +++ b/TESTING.asciidoc, +To disable and enable network transport, set the `tests.es.node.mode` system property., +-Dtests.es.node.mode=network, +-Dtests.es.node.mode=local, +gradle test -Dtests.es.logger.level=DEBUG, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +            if (property.key.startsWith('tests.es.')) {, +                args.add("${property.key.substring('tests.es.'.size())}=${property.value}"), +++ b/TESTING.asciidoc, +To disable and enable network transport, set the `tests.es.node.mode` system property., +-Dtests.es.node.mode=network, +-Dtests.es.node.mode=local, +gradle test -Dtests.es.logger.level=DEBUG, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +            if (property.key.startsWith('tests.es.')) {, +                args.add("${property.key.substring('tests.es.'.size())}=${property.value}"), +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +    private static final String DEFINITION_FILE = "definition.txt";, +        public final java.lang.reflect.Constructor<?> reflect;, +        private Constructor(final String name, final Struct owner, final List<Type> arguments,, +                            final org.objectweb.asm.commons.Method method, final java.lang.reflect.Constructor<?> reflect) {, +            this.reflect = reflect;, +        public final java.lang.reflect.Method reflect;, +        private Method(final String name, final Struct owner, final Type rtn, final List<Type> arguments,, +                       final org.objectweb.asm.commons.Method method, final java.lang.reflect.Method reflect,, +                       final MethodHandle handle) {, +            this.reflect = reflect;, +        public final java.lang.reflect.Field reflect;, +        public final MethodHandle getter;, +        public final MethodHandle setter;, +        private Field(final String name, final Struct owner, final Type type,, +                      final java.lang.reflect.Field reflect, final MethodHandle getter, final MethodHandle setter) {, +            this.reflect = reflect;, +            try (InputStream stream = Definition.class.getResourceAsStream(DEFINITION_FILE);, +            throw new RuntimeException("syntax error in definition line: " + currentLine, e);, +            try (InputStream stream = Definition.class.getResourceAsStream(DEFINITION_FILE);, +            throw new RuntimeException("syntax error in definition line: " + currentLine, e);, +        if (!name.matches("^[_a-zA-Z][<>,_a-zA-Z0-9]*$")) {, +        final Constructor constructor = new Constructor(name, owner, Arrays.asList(args), asm, reflect);, +        final Method method = new Method(name, owner, rtn, Arrays.asList(args), asm, reflect, handle);, +        final Field field = new Field(name, owner, type, reflect, getter, setter);, +    private final void copyStruct(final String struct, List<String> children) {, +            if (struct == null) {, +            final boolean object = child.clazz.equals(Object.class) &&, +                java.lang.reflect.Modifier.isInterface(owner.clazz.getModifiers());, +, +                    final Class<?> clazz = object ? Object.class : owner.clazz;, +, +                    java.lang.reflect.Method reflect;, +                    MethodHandle handle;, +, +                    try {, +                        reflect = clazz.getMethod(method.method.getName(), method.reflect.getParameterTypes());, +                    } catch (final NoSuchMethodException exception) {, +                        throw new IllegalArgumentException("Method [" + method.method.getName() + "] not found for" +, +                            " class [" + owner.clazz.getName() + "] with arguments " +, +                            Arrays.toString(method.reflect.getParameterTypes()) + ".");, +                    }, +, +                    try {, +                        handle = MethodHandles.publicLookup().in(owner.clazz).unreflect(reflect);, +                    } catch (final IllegalAccessException exception) {, +                        throw new IllegalArgumentException("Method [" + method.method.getName() + "] not found for" +, +                            " class [" + owner.clazz.getName() + "] with arguments " +, +                            Arrays.toString(method.reflect.getParameterTypes()) + ".");, +                    }, +, +                        new Method(method.name, owner, method.rtn, method.arguments, method.method, reflect, handle));, +            for (final Field field : child.members.values()) {, +                    java.lang.reflect.Field reflect;, +                    MethodHandle getter;, +                    MethodHandle setter;, +, +                    try {, +                        reflect = owner.clazz.getField(field.reflect.getName());, +                    } catch (final NoSuchFieldException exception) {, +                        throw new IllegalArgumentException("Field [" + field.reflect.getName() + "]" +, +                            " not found for class [" + owner.clazz.getName() + "].");, +                    }, +, +                    try {, +                        getter = MethodHandles.publicLookup().unreflectGetter(reflect);, +                        setter = MethodHandles.publicLookup().unreflectSetter(reflect);, +                    } catch (final IllegalAccessException exception) {, +                        throw new IllegalArgumentException("Getter/Setter [" + field.name + "]" +, +                            " not found for class [" + owner.clazz.getName() + "].");, +                    }, +, +                        new Field(field.name, owner, field.type, reflect, getter, setter));, +++ b/TESTING.asciidoc, +To disable and enable network transport, set the `tests.es.node.mode` system property., +-Dtests.es.node.mode=network, +-Dtests.es.node.mode=local, +gradle test -Dtests.es.logger.level=DEBUG, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy]