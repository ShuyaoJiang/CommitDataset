[+++ b/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java, +import org.elasticsearch.common.joda.FormatDateTimeFormatter;, +import org.elasticsearch.common.joda.Joda;, +    private static final FormatDateTimeFormatter DATE_TIME_FORMATTER = Joda.forPattern("dateOptionalTime");, +, +, +        sb.append("Hot threads at ");, +        sb.append(DATE_TIME_FORMATTER.printer().print(System.currentTimeMillis()));, +        sb.append(", interval=");, +        sb.append(interval);, +        sb.append(", busiestThreads=");, +        sb.append(busiestThreads);, +        sb.append(", ignoreIdleThreads=");, +        sb.append(ignoreIdleThreads);, +        sb.append(":\n");, +, +++ b/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java, +import org.elasticsearch.common.joda.FormatDateTimeFormatter;, +import org.elasticsearch.common.joda.Joda;, +    private static final FormatDateTimeFormatter DATE_TIME_FORMATTER = Joda.forPattern("dateOptionalTime");, +, +, +        sb.append("Hot threads at ");, +        sb.append(DATE_TIME_FORMATTER.printer().print(System.currentTimeMillis()));, +        sb.append(", interval=");, +        sb.append(interval);, +        sb.append(", busiestThreads=");, +        sb.append(busiestThreads);, +        sb.append(", ignoreIdleThreads=");, +        sb.append(ignoreIdleThreads);, +        sb.append(":\n");, +, +++ b/src/test/java/org/elasticsearch/action/admin/HotThreadsTest.java, +, +    public void testTimestampAndParams() throws ExecutionException, InterruptedException {, +, +        NodesHotThreadsResponse response = client().admin().cluster().prepareNodesHotThreads().execute().get();, +, +        for (NodeHotThreads node : response.getNodesMap().values()) {, +            String result = node.getHotThreads();, +            assertTrue(result.indexOf("Hot threads at") != -1);, +            assertTrue(result.indexOf("interval=500ms") != -1);, +            assertTrue(result.indexOf("busiestThreads=3") != -1);, +            assertTrue(result.indexOf("ignoreIdleThreads=true") != -1);, +        }, +    }]