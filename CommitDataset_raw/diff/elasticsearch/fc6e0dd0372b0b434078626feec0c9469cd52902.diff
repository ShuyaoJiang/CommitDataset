[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.action.ActionListener;, +        if (index < 0) {, +            index = 0;, +            randomNodeGenerator.set(0);, +        }, +    public <Response> void execute(NodeListenerCallback<Response> callback, ActionListener<Response> listener) throws ElasticSearchException {, +        ImmutableList<DiscoveryNode> nodes = this.nodes;, +        if (nodes.isEmpty()) {, +            throw new NoNodeAvailableException();, +        }, +        int index = randomNodeGenerator.incrementAndGet();, +        if (index < 0) {, +            index = 0;, +            randomNodeGenerator.set(0);, +        }, +        RetryListener<Response> retryListener = new RetryListener<Response>(callback, listener, nodes, index);, +        try {, +            callback.doWithNode(nodes.get((index) % nodes.size()), retryListener);, +        } catch (ConnectTransportException e) {, +            retryListener.onFailure(e);, +        }, +    }, +, +    public static class RetryListener<Response> implements ActionListener<Response> {, +        private final NodeListenerCallback<Response> callback;, +        private final ActionListener<Response> listener;, +        private final ImmutableList<DiscoveryNode> nodes;, +        private final int index;, +, +        private volatile int i;, +, +        public RetryListener(NodeListenerCallback<Response> callback, ActionListener<Response> listener, ImmutableList<DiscoveryNode> nodes, int index) {, +            this.callback = callback;, +            this.listener = listener;, +            this.nodes = nodes;, +            this.index = index;, +        }, +, +        @Override public void onResponse(Response response) {, +            listener.onResponse(response);, +        }, +, +        @Override public void onFailure(Throwable e) {, +            if (e instanceof ConnectTransportException) {, +                int i = ++this.i;, +                if (i == nodes.size()) {, +                    listener.onFailure(new NoNodeAvailableException());, +                } else {, +                    try {, +                        callback.doWithNode(nodes.get((index + i) % nodes.size()), this);, +                    } catch (Exception e1) {, +                        // retry the next one..., +                        onFailure(e);, +                    }, +                }, +            } else {, +                listener.onFailure(e);, +            }, +        }, +    }, +, +, +    public static interface NodeListenerCallback<Response> {, +, +        void doWithNode(DiscoveryNode node, ActionListener<Response> listener) throws ElasticSearchException;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.action.ActionListener;, +        if (index < 0) {, +            index = 0;, +            randomNodeGenerator.set(0);, +        }, +    public <Response> void execute(NodeListenerCallback<Response> callback, ActionListener<Response> listener) throws ElasticSearchException {, +        ImmutableList<DiscoveryNode> nodes = this.nodes;, +        if (nodes.isEmpty()) {, +            throw new NoNodeAvailableException();, +        }, +        int index = randomNodeGenerator.incrementAndGet();, +        if (index < 0) {, +            index = 0;, +            randomNodeGenerator.set(0);, +        }, +        RetryListener<Response> retryListener = new RetryListener<Response>(callback, listener, nodes, index);, +        try {, +            callback.doWithNode(nodes.get((index) % nodes.size()), retryListener);, +        } catch (ConnectTransportException e) {, +            retryListener.onFailure(e);, +        }, +    }, +, +    public static class RetryListener<Response> implements ActionListener<Response> {, +        private final NodeListenerCallback<Response> callback;, +        private final ActionListener<Response> listener;, +        private final ImmutableList<DiscoveryNode> nodes;, +        private final int index;, +, +        private volatile int i;, +, +        public RetryListener(NodeListenerCallback<Response> callback, ActionListener<Response> listener, ImmutableList<DiscoveryNode> nodes, int index) {]