[+++ b/core/src/test/java/org/elasticsearch/common/joda/DateMathParserTests.java, +        // test alternative ways of writing zero offsets, according to ISO 8601 +00:00, +00, +0000 should work., +        // joda also seems to allow for -00:00, -00, -0000, +        assertDateMathEquals("2014-05-30T18:21+00:00", "2014-05-30T18:21:00.000");, +        assertDateMathEquals("2014-05-30T18:21+00", "2014-05-30T18:21:00.000");, +        assertDateMathEquals("2014-05-30T18:21+0000", "2014-05-30T18:21:00.000");, +        assertDateMathEquals("2014-05-30T18:21-00:00", "2014-05-30T18:21:00.000");, +        assertDateMathEquals("2014-05-30T18:21-00", "2014-05-30T18:21:00.000");, +        assertDateMathEquals("2014-05-30T18:21-0000", "2014-05-30T18:21:00.000");, +, +        assertDateMathEquals("2014-05-30T18:21", "2014-05-30T18:21:00.000", 0, false, DateTimeZone.forID("+00:00"));, +        assertDateMathEquals("2014-05-30T18:21", "2014-05-30T18:21:00.000", 0, false, DateTimeZone.forID("+00:00"));, +        assertDateMathEquals("2014-05-30T18:21", "2014-05-30T18:21:00.000", 0, false, DateTimeZone.forID("+00"));, +        assertDateMathEquals("2014-05-30T18:21", "2014-05-30T18:21:00.000", 0, false, DateTimeZone.forID("+0000"));, +        assertDateMathEquals("2014-05-30T18:21", "2014-05-30T18:21:00.000", 0, false, DateTimeZone.forID("-00:00"));, +        assertDateMathEquals("2014-05-30T18:21", "2014-05-30T18:21:00.000", 0, false, DateTimeZone.forID("-00"));, +        assertDateMathEquals("2014-05-30T18:21", "2014-05-30T18:21:00.000", 0, false, DateTimeZone.forID("-0000"));]