[+++ b/src/main/java/org/elasticsearch/index/store/Store.java, +import org.elasticsearch.index.store.distributor.Distributor;, +    public Store(ShardId shardId, @IndexSettings Settings indexSettings, IndexStore indexStore, DirectoryService directoryService, Distributor distributor) throws IOException {, +        this.directory = new StoreDirectory(distributor);, +        private final Distributor distributor;, +        StoreDirectory(Distributor distributor) throws IOException {, +            this.distributor = distributor;, +                Map<String, String> checksums = readChecksums(distributor.all(), new HashMap<String, String>());, +                for (Directory delegate : distributor.all()) {, +            return distributor.all();, +            Directory directory;, +                directory = distributor.primary();, +                directory = distributor.any();, +            for (Directory delegate : distributor.all()) {, +            return distributor.primary().makeLock(name);, +            distributor.primary().clearLock(name);, +            distributor.primary().setLockFactory(lockFactory);, +            return distributor.primary().getLockFactory();, +            return distributor.primary().getLockID();, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +import org.elasticsearch.index.store.distributor.Distributor;, +    public Store(ShardId shardId, @IndexSettings Settings indexSettings, IndexStore indexStore, DirectoryService directoryService, Distributor distributor) throws IOException {, +        this.directory = new StoreDirectory(distributor);, +        private final Distributor distributor;, +        StoreDirectory(Distributor distributor) throws IOException {, +            this.distributor = distributor;, +                Map<String, String> checksums = readChecksums(distributor.all(), new HashMap<String, String>());, +                for (Directory delegate : distributor.all()) {, +            return distributor.all();, +            Directory directory;, +                directory = distributor.primary();, +                directory = distributor.any();, +            for (Directory delegate : distributor.all()) {, +            return distributor.primary().makeLock(name);, +            distributor.primary().clearLock(name);, +            distributor.primary().setLockFactory(lockFactory);, +            return distributor.primary().getLockFactory();, +            return distributor.primary().getLockID();, +++ b/src/main/java/org/elasticsearch/index/store/StoreModule.java, +import org.elasticsearch.index.store.distributor.Distributor;, +import org.elasticsearch.index.store.distributor.LeastUsedDistributor;, +import org.elasticsearch.index.store.distributor.RandomWeightedDistributor;, +    private Class<? extends Distributor> distributor;, +, +    public void setDistributor(Class<? extends Distributor> distributor) {, +        this.distributor = distributor;, +    }, +, +        if (distributor == null) {, +            distributor = loadDistributor(settings);, +        bind(Distributor.class).to(distributor).asEagerSingleton();, +    }, +, +    private Class<? extends Distributor> loadDistributor(Settings settings) {, +        final Class<? extends Distributor> distributor;, +        final String type = settings.get("index.store.distributor");, +        if ("least_used".equals(type)) {, +            distributor = LeastUsedDistributor.class;, +        } else if ("random".equals(type)) {, +            distributor = RandomWeightedDistributor.class;, +        } else {, +            distributor = settings.getAsClass("index.store.distributor", LeastUsedDistributor.class,, +                    "org.elasticsearch.index.store.distributor.", "Distributor");, +        }, +        return distributor;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +import org.elasticsearch.index.store.distributor.Distributor;, +    public Store(ShardId shardId, @IndexSettings Settings indexSettings, IndexStore indexStore, DirectoryService directoryService, Distributor distributor) throws IOException {, +        this.directory = new StoreDirectory(distributor);, +        private final Distributor distributor;, +        StoreDirectory(Distributor distributor) throws IOException {, +            this.distributor = distributor;, +                Map<String, String> checksums = readChecksums(distributor.all(), new HashMap<String, String>());, +                for (Directory delegate : distributor.all()) {, +            return distributor.all();, +            Directory directory;, +                directory = distributor.primary();, +                directory = distributor.any();, +            for (Directory delegate : distributor.all()) {, +            return distributor.primary().makeLock(name);, +            distributor.primary().clearLock(name);, +            distributor.primary().setLockFactory(lockFactory);, +            return distributor.primary().getLockFactory();, +            return distributor.primary().getLockID();, +++ b/src/main/java/org/elasticsearch/index/store/StoreModule.java, +import org.elasticsearch.index.store.distributor.Distributor;, +import org.elasticsearch.index.store.distributor.LeastUsedDistributor;, +import org.elasticsearch.index.store.distributor.RandomWeightedDistributor;, +    private Class<? extends Distributor> distributor;, +, +    public void setDistributor(Class<? extends Distributor> distributor) {, +        this.distributor = distributor;, +    }, +, +        if (distributor == null) {, +            distributor = loadDistributor(settings);, +        bind(Distributor.class).to(distributor).asEagerSingleton();, +    }]