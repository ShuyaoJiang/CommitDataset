[+++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public IndexReader reader() {, +            return searcher.getIndexReader();, +        }, +, +        public DirectoryReader getDirectoryReader() {, +            if (reader() instanceof  DirectoryReader) {, +                return (DirectoryReader) reader();, +            }, +            throw new IllegalStateException("Can't use " + reader().getClass() + " as an directory reader");, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public IndexReader reader() {, +            return searcher.getIndexReader();, +        }, +, +        public DirectoryReader getDirectoryReader() {, +            if (reader() instanceof  DirectoryReader) {, +                return (DirectoryReader) reader();, +            }, +            throw new IllegalStateException("Can't use " + reader().getClass() + " as an directory reader");, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexSearcherWrapper.java, +        final ElasticsearchDirectoryReader elasticsearchDirectoryReader = ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(engineSearcher.getDirectoryReader());, +        DirectoryReader reader = wrap(engineSearcher.getDirectoryReader());, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public IndexReader reader() {, +            return searcher.getIndexReader();, +        }, +, +        public DirectoryReader getDirectoryReader() {, +            if (reader() instanceof  DirectoryReader) {, +                return (DirectoryReader) reader();, +            }, +            throw new IllegalStateException("Can't use " + reader().getClass() + " as an directory reader");, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexSearcherWrapper.java, +        final ElasticsearchDirectoryReader elasticsearchDirectoryReader = ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(engineSearcher.getDirectoryReader());, +        DirectoryReader reader = wrap(engineSearcher.getDirectoryReader());, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesWarmer.java, +        public IndexReader reader() {, +        public DirectoryReader getDirectoryReader() {, +            return searcher.getDirectoryReader();, +        }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public IndexReader reader() {, +            return searcher.getIndexReader();, +        }, +, +        public DirectoryReader getDirectoryReader() {, +            if (reader() instanceof  DirectoryReader) {, +                return (DirectoryReader) reader();, +            }, +            throw new IllegalStateException("Can't use " + reader().getClass() + " as an directory reader");, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexSearcherWrapper.java, +        final ElasticsearchDirectoryReader elasticsearchDirectoryReader = ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(engineSearcher.getDirectoryReader());, +        DirectoryReader reader = wrap(engineSearcher.getDirectoryReader());, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesWarmer.java, +        public IndexReader reader() {, +        public DirectoryReader getDirectoryReader() {, +            return searcher.getDirectoryReader();, +        }, +, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +                            ifd.loadGlobal(context.getDirectoryReader());, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public IndexReader reader() {, +            return searcher.getIndexReader();, +        }, +, +        public DirectoryReader getDirectoryReader() {, +            if (reader() instanceof  DirectoryReader) {, +                return (DirectoryReader) reader();, +            }, +            throw new IllegalStateException("Can't use " + reader().getClass() + " as an directory reader");, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexSearcherWrapper.java, +        final ElasticsearchDirectoryReader elasticsearchDirectoryReader = ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(engineSearcher.getDirectoryReader());, +        DirectoryReader reader = wrap(engineSearcher.getDirectoryReader());, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesWarmer.java, +        public IndexReader reader() {, +        public DirectoryReader getDirectoryReader() {, +            return searcher.getDirectoryReader();, +        }, +, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +                            ifd.loadGlobal(context.getDirectoryReader());, +++ b/core/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +    private final Engine.Searcher engineSearcher;, +        engineSearcher = searcher;, +        return engineSearcher.getDirectoryReader();, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        public IndexReader reader() {, +            return searcher.getIndexReader();, +        }, +, +        public DirectoryReader getDirectoryReader() {, +            if (reader() instanceof  DirectoryReader) {, +                return (DirectoryReader) reader();, +            }, +            throw new IllegalStateException("Can't use " + reader().getClass() + " as an directory reader");, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexSearcherWrapper.java, +        final ElasticsearchDirectoryReader elasticsearchDirectoryReader = ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(engineSearcher.getDirectoryReader());]