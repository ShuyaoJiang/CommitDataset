[+++ b/TESTING.asciidoc, +gradle copyDepsToTestRoot, +If you want to run elasticsearch from your IDE, you should execute gradle run, +It opens a remote debugging port that you can connect with your IDE., +++ b/TESTING.asciidoc, +gradle copyDepsToTestRoot, +If you want to run elasticsearch from your IDE, you should execute gradle run, +It opens a remote debugging port that you can connect with your IDE., +++ b/Vagrantfile, +export ZIP=/elasticsearch/distribution/zip/build/releases, +export TAR=/elasticsearch/distribution/tar/build/releases, +export RPM=/elasticsearch/distribution/rpm/build/releases, +export DEB=/elasticsearch/distribution/deb/build/releases, +++ b/TESTING.asciidoc, +gradle copyDepsToTestRoot, +If you want to run elasticsearch from your IDE, you should execute gradle run, +It opens a remote debugging port that you can connect with your IDE., +++ b/Vagrantfile, +export ZIP=/elasticsearch/distribution/zip/build/releases, +export TAR=/elasticsearch/distribution/tar/build/releases, +export RPM=/elasticsearch/distribution/rpm/build/releases, +export DEB=/elasticsearch/distribution/deb/build/releases, +++ b/build.gradle, +  tasks.cleanIdea {, +    delete '.idea', +  }, +task run() {, +++ b/TESTING.asciidoc, +gradle copyDepsToTestRoot, +If you want to run elasticsearch from your IDE, you should execute gradle run, +It opens a remote debugging port that you can connect with your IDE., +++ b/Vagrantfile, +export ZIP=/elasticsearch/distribution/zip/build/releases, +export TAR=/elasticsearch/distribution/tar/build/releases, +export RPM=/elasticsearch/distribution/rpm/build/releases, +export DEB=/elasticsearch/distribution/deb/build/releases, +++ b/build.gradle, +  tasks.cleanIdea {, +    delete '.idea', +  }, +task run() {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingTask.groovy, +            haltOnFailure: haltOnFailure,, +        def junit4 = NamespaceBuilder.newInstance(ant, 'junit4'), +++ b/TESTING.asciidoc, +gradle copyDepsToTestRoot, +If you want to run elasticsearch from your IDE, you should execute gradle run, +It opens a remote debugging port that you can connect with your IDE., +++ b/Vagrantfile, +export ZIP=/elasticsearch/distribution/zip/build/releases, +export TAR=/elasticsearch/distribution/tar/build/releases, +export RPM=/elasticsearch/distribution/rpm/build/releases, +export DEB=/elasticsearch/distribution/deb/build/releases, +++ b/build.gradle, +  tasks.cleanIdea {, +    delete '.idea', +  }, +task run() {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingTask.groovy, +            haltOnFailure: haltOnFailure,, +        def junit4 = NamespaceBuilder.newInstance(ant, 'junit4'), +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +        outStream = new LoggingOutputStream(logger: logger, level: LogLevel.ERROR, prefix: "  1> "), +            emitSuiteStart(LogLevel.INFO, evt.getDescription());, +        if (isPassthrough() && logger.isInfoEnabled()) {, +        try {, +        LogLevel level = e.isSuccessful() ? LogLevel.INFO : LogLevel.ERROR, +    } catch (Exception exc) {, +            logger.lifecycle('EXCEPTION: ', exc), +        }, +    /** Returns true if output should be logged immediately. Only relevant when running with INFO log level. */, +        return forkedJvmCount == 1 && config.outputMode == OutputMode.ALWAYS && logger.isInfoEnabled(), +++ b/TESTING.asciidoc, +gradle copyDepsToTestRoot, +If you want to run elasticsearch from your IDE, you should execute gradle run, +It opens a remote debugging port that you can connect with your IDE., +++ b/Vagrantfile, +export ZIP=/elasticsearch/distribution/zip/build/releases, +export TAR=/elasticsearch/distribution/tar/build/releases, +export RPM=/elasticsearch/distribution/rpm/build/releases, +export DEB=/elasticsearch/distribution/deb/build/releases, +++ b/build.gradle, +  tasks.cleanIdea {, +    delete '.idea', +  }, +task run() {, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/RandomizedTestingTask.groovy, +            haltOnFailure: haltOnFailure,, +        def junit4 = NamespaceBuilder.newInstance(ant, 'junit4'), +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +        outStream = new LoggingOutputStream(logger: logger, level: LogLevel.ERROR, prefix: "  1> "), +            emitSuiteStart(LogLevel.INFO, evt.getDescription());, +        if (isPassthrough() && logger.isInfoEnabled()) {, +        try {, +        LogLevel level = e.isSuccessful() ? LogLevel.INFO : LogLevel.ERROR, +    } catch (Exception exc) {, +            logger.lifecycle('EXCEPTION: ', exc), +        }, +    /** Returns true if output should be logged immediately. Only relevant when running with INFO log level. */, +        return forkedJvmCount == 1 && config.outputMode == OutputMode.ALWAYS && logger.isInfoEnabled()]