[+++ b/server/src/main/java/org/elasticsearch/persistent/CreatePersistentTaskAction.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + */, +package org.elasticsearch.persistent;, +, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.master.MasterNodeOperationRequestBuilder;, +import org.elasticsearch.action.support.master.MasterNodeRequest;, +import org.elasticsearch.action.support.master.TransportMasterNodeAction;, +import org.elasticsearch.client.ElasticsearchClient;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.TransportService;, +, +import java.io.IOException;, +import java.util.Objects;, +, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +/**, + *  This action can be used to add the record for the persistent action to the cluster state., + */, +public class CreatePersistentTaskAction extends Action<CreatePersistentTaskAction.Request,, +        PersistentActionResponse,, +        CreatePersistentTaskAction.RequestBuilder> {, +, +    public static final CreatePersistentTaskAction INSTANCE = new CreatePersistentTaskAction();, +    public static final String NAME = "cluster:admin/persistent/create";, +, +    private CreatePersistentTaskAction() {, +        super(NAME);, +    }, +, +    @Override, +    public RequestBuilder newRequestBuilder(ElasticsearchClient client) {, +        return new RequestBuilder(client, this);, +    }, +, +    @Override, +    public PersistentActionResponse newResponse() {, +        return new PersistentActionResponse();, +    }, +, +    public static class Request extends MasterNodeRequest<Request> {, +, +        private String action;, +, +        private PersistentActionRequest request;, +, +        private boolean stopped;, +, +        private boolean removeOnCompletion = true;, +, +        public Request() {, +, +        }, +, +        public Request(String action, PersistentActionRequest request) {, +            this.action = action;, +            this.request = request;, +            this.stopped = false;, +            this.removeOnCompletion = true;, +        }, +, +        @Override, +        public void readFrom(StreamInput in) throws IOException {, +            super.readFrom(in);, +            action = in.readString();, +            request = in.readNamedWriteable(PersistentActionRequest.class);, +            stopped = in.readBoolean();, +            removeOnCompletion = in.readBoolean();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            super.writeTo(out);, +            out.writeString(action);]