[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/action/admin/indices/shards/IndicesShardStoreRequestTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.admin.indices.shards;, +, +import com.carrotsearch.hppc.cursors.IntObjectCursor;, +, +import com.carrotsearch.hppc.cursors.ObjectCursor;, +import com.google.common.base.Predicate;, +import org.apache.lucene.index.CorruptIndexException;, +import org.elasticsearch.action.admin.indices.shards.IndicesShardStoresResponse;, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.routing.*;, +import org.elasticsearch.common.collect.ImmutableOpenIntMap;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.index.shard.IndexShard;, +import org.elasticsearch.indices.IndicesService;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.elasticsearch.test.junit.annotations.TestLogging;, +import org.elasticsearch.test.store.MockFSDirectoryService;, +import org.junit.Test;, +, +import java.util.*;, +import java.util.concurrent.ExecutionException;, +, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.hamcrest.Matchers.*;, +, +@ElasticsearchIntegrationTest.ClusterScope(scope = ElasticsearchIntegrationTest.Scope.TEST), +public class IndicesShardStoreRequestTests extends ElasticsearchIntegrationTest {, +, +    @Test, +    public void testEmpty() {, +        ensureGreen();, +        IndicesShardStoresResponse rsp = client().admin().indices().prepareShardStores().get();, +        assertThat(rsp.getStoreStatuses().size(), equalTo(0));, +    }, +, +    @Test, +    @TestLogging("action.admin.indices.shards:TRACE,cluster.service:TRACE"), +    public void testBasic() throws Exception {, +        String index = "test";, +        internalCluster().ensureAtLeastNumDataNodes(2);, +        assertAcked(prepareCreate(index).setSettings(Settings.builder(), +                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, "2"), +                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "1"), +        ));, +        indexRandomData(index);, +        ensureGreen(index);, +, +        // no unallocated shards, +        IndicesShardStoresResponse response = client().admin().indices().prepareShardStores(index).get();, +        assertThat(response.getStoreStatuses().size(), equalTo(0));, +, +        // all shards, +        response = client().admin().indices().shardStores(Requests.indicesShardStoresRequest(index).shardStatuses("all")).get();, +        assertThat(response.getStoreStatuses().containsKey(index), equalTo(true));, +        ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> shardStores = response.getStoreStatuses().get(index);, +        assertThat(shardStores.values().size(), equalTo(2));, +        for (ObjectCursor<List<IndicesShardStoresResponse.StoreStatus>> shardStoreStatuses : shardStores.values()) {, +            for (IndicesShardStoresResponse.StoreStatus storeStatus : shardStoreStatuses.value) {, +                assertThat(storeStatus.getVersion(), greaterThan(-1l));, +                assertThat(storeStatus.getNode(), notNullValue());, +                assertThat(storeStatus.getStoreException(), nullValue());, +            }, +        }, +, +        // default with unassigned shards, +        ensureGreen(index);, +        logger.info("--> disable allocation");, +        disableAllocation(index);, +        logger.info("--> stop random node");, +        internalCluster().stopRandomNode(new IndexNodePredicate(index));]