[+++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +            Objects.equals(this.scoreMode, other.scoreMode) &&, +        return Objects.hash(super.hashCode(), subQuery, maxBoost, combineFunction, minScore, scoreMode, Arrays.hashCode(filterFunctions));, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +            Objects.equals(this.scoreMode, other.scoreMode) &&, +        return Objects.hash(super.hashCode(), subQuery, maxBoost, combineFunction, minScore, scoreMode, Arrays.hashCode(filterFunctions));, +++ b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreTests.java, +        }, +    }, +, +    public void testFunctionScoreHashCodeAndEquals() {, +        Float minScore = randomBoolean() ? null : 1.0f;, +        CombineFunction combineFunction = randomFrom(CombineFunction.values());, +        float maxBoost = randomBoolean() ? Float.POSITIVE_INFINITY : randomFloat();, +        ScoreFunction function = randomBoolean() ? null : new ScoreFunction(combineFunction) {, +            @Override, +            public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) throws IOException {, +                return null;, +            }, +, +            @Override, +            public boolean needsScores() {, +                return false;, +            }, +            @Override, +            protected boolean doEquals(ScoreFunction other) {, +                return other == this;, +            }, +        };, +, +        FunctionScoreQuery q = new FunctionScoreQuery(new TermQuery(new Term("foo", "bar")), function, minScore, combineFunction, maxBoost);, +        FunctionScoreQuery q1 = new FunctionScoreQuery(new TermQuery(new Term("foo", "bar")), function, minScore, combineFunction, maxBoost);, +        assertEquals(q, q);, +        assertEquals(q.hashCode(), q.hashCode());, +        assertEquals(q, q1);, +        assertEquals(q.hashCode(), q1.hashCode());, +, +        FunctionScoreQuery diffQuery = new FunctionScoreQuery(new TermQuery(new Term("foo", "baz")), function, minScore, combineFunction, maxBoost);, +        FunctionScoreQuery diffMinScore = new FunctionScoreQuery(q.getSubQuery(), function, minScore == null ? 1.0f : null, combineFunction, maxBoost);, +        ScoreFunction otherFunciton = function == null ? new ScoreFunction(combineFunction) {, +            @Override, +            public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) throws IOException {, +                return null;, +            }, +, +            @Override, +            public boolean needsScores() {, +                return false;, +            }, +, +            @Override, +            protected boolean doEquals(ScoreFunction other) {, +                return other == this;, +            }, +, +        } : null;, +        FunctionScoreQuery diffFunction = new FunctionScoreQuery(q.getSubQuery(), otherFunciton, minScore, combineFunction, maxBoost);, +        FunctionScoreQuery diffMaxBoost = new FunctionScoreQuery(new TermQuery(new Term("foo", "bar")), function, minScore, combineFunction, maxBoost == 1.0f ? 0.9f : 1.0f);, +        q1.setBoost(3.0f);, +        FunctionScoreQuery[] queries = new FunctionScoreQuery[] {, +            diffFunction,, +            diffMinScore,, +            diffQuery,, +            q,, +            q1,, +            diffMaxBoost, +        };, +        final int numIters = randomIntBetween(20, 100);, +        for (int i = 0; i < numIters; i++) {, +            FunctionScoreQuery left = randomFrom(queries);, +            FunctionScoreQuery right = randomFrom(queries);, +            if (left == right) {, +                assertEquals(left, right);, +                assertEquals(left.hashCode(), right.hashCode());, +            } else {, +                assertNotEquals(left + " == " + right, left, right);, +            }, +        }, +, +    }, +, +    public void testFilterFunctionScoreHashCodeAndEquals() {, +        ScoreMode mode = randomFrom(ScoreMode.values());, +        CombineFunction combineFunction = randomFrom(CombineFunction.values());, +        ScoreFunction scoreFunction = new ScoreFunction(combineFunction) {, +            @Override, +            public LeafScoreFunction getLeafScoreFunction(LeafReaderContext ctx) throws IOException {, +                return null;, +            }, +, +            @Override, +            public boolean needsScores() {, +                return false;, +            }, +, +            @Override, +            protected boolean doEquals(ScoreFunction other) {, +                return other == this;, +            }, +        };]