[+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +                        DiscoveryNodes nodes = currentState.nodes();, +                        final Version createdVersion = Version.smallest(version, nodes.smallestNonClientNodeVersion());, +                        indexSettingsBuilder.put(SETTING_VERSION_CREATED, createdVersion);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +                        DiscoveryNodes nodes = currentState.nodes();, +                        final Version createdVersion = Version.smallest(version, nodes.smallestNonClientNodeVersion());, +                        indexSettingsBuilder.put(SETTING_VERSION_CREATED, createdVersion);, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +    private final Version minNodeVersion;, +    private final Version minNonClientNodeVersion;, +    private DiscoveryNodes(ImmutableOpenMap<String, DiscoveryNode> nodes, ImmutableOpenMap<String, DiscoveryNode> dataNodes, ImmutableOpenMap<String, DiscoveryNode> masterNodes, String masterNodeId, String localNodeId, Version minNodeVersion, Version minNonClientNodeVersion) {, +        this.minNodeVersion = minNodeVersion;, +        this.minNonClientNodeVersion = minNonClientNodeVersion;, +       return minNodeVersion;, +, +    /**, +     * Returns the version of the node with the oldest version in the cluster that is not a client node, +     *, +     * @return the oldest version in the cluster, +     */, +    public Version smallestNonClientNodeVersion() {, +        return minNonClientNodeVersion;, +            Version minNodeVersion = Version.CURRENT;, +            Version minNonClientNodeVersion = Version.CURRENT;, +                    minNonClientNodeVersion = Version.smallest(minNonClientNodeVersion, nodeEntry.value.version());, +                    minNonClientNodeVersion = Version.smallest(minNonClientNodeVersion, nodeEntry.value.version());, +                minNodeVersion = Version.smallest(minNodeVersion, nodeEntry.value.version());, +, +            return new DiscoveryNodes(nodes.build(), dataNodesBuilder.build(), masterNodesBuilder.build(), masterNodeId, localNodeId, minNodeVersion, minNonClientNodeVersion);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +                        DiscoveryNodes nodes = currentState.nodes();, +                        final Version createdVersion = Version.smallest(version, nodes.smallestNonClientNodeVersion());, +                        indexSettingsBuilder.put(SETTING_VERSION_CREATED, createdVersion);, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +    private final Version minNodeVersion;, +    private final Version minNonClientNodeVersion;, +    private DiscoveryNodes(ImmutableOpenMap<String, DiscoveryNode> nodes, ImmutableOpenMap<String, DiscoveryNode> dataNodes, ImmutableOpenMap<String, DiscoveryNode> masterNodes, String masterNodeId, String localNodeId, Version minNodeVersion, Version minNonClientNodeVersion) {, +        this.minNodeVersion = minNodeVersion;, +        this.minNonClientNodeVersion = minNonClientNodeVersion;, +       return minNodeVersion;, +, +    /**, +     * Returns the version of the node with the oldest version in the cluster that is not a client node, +     *, +     * @return the oldest version in the cluster, +     */, +    public Version smallestNonClientNodeVersion() {, +        return minNonClientNodeVersion;, +            Version minNodeVersion = Version.CURRENT;, +            Version minNonClientNodeVersion = Version.CURRENT;, +                    minNonClientNodeVersion = Version.smallest(minNonClientNodeVersion, nodeEntry.value.version());, +                    minNonClientNodeVersion = Version.smallest(minNonClientNodeVersion, nodeEntry.value.version());, +                minNodeVersion = Version.smallest(minNodeVersion, nodeEntry.value.version());, +, +            return new DiscoveryNodes(nodes.build(), dataNodesBuilder.build(), masterNodesBuilder.build(), masterNodeId, localNodeId, minNodeVersion, minNonClientNodeVersion);, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapper.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_1_3_0)) {, +            } else {, +              throw new ElasticsearchIllegalArgumentException("type="+CONTENT_TYPE+" is not supported on indices created before version 1.3.0 is your cluster running multiple datanode versions?");, +            }, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +                        DiscoveryNodes nodes = currentState.nodes();, +                        final Version createdVersion = Version.smallest(version, nodes.smallestNonClientNodeVersion());, +                        indexSettingsBuilder.put(SETTING_VERSION_CREATED, createdVersion);, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +    private final Version minNodeVersion;, +    private final Version minNonClientNodeVersion;, +    private DiscoveryNodes(ImmutableOpenMap<String, DiscoveryNode> nodes, ImmutableOpenMap<String, DiscoveryNode> dataNodes, ImmutableOpenMap<String, DiscoveryNode> masterNodes, String masterNodeId, String localNodeId, Version minNodeVersion, Version minNonClientNodeVersion) {, +        this.minNodeVersion = minNodeVersion;, +        this.minNonClientNodeVersion = minNonClientNodeVersion;, +       return minNodeVersion;, +, +    /**, +     * Returns the version of the node with the oldest version in the cluster that is not a client node, +     *, +     * @return the oldest version in the cluster, +     */, +    public Version smallestNonClientNodeVersion() {, +        return minNonClientNodeVersion;, +            Version minNodeVersion = Version.CURRENT;, +            Version minNonClientNodeVersion = Version.CURRENT;, +                    minNonClientNodeVersion = Version.smallest(minNonClientNodeVersion, nodeEntry.value.version());, +                    minNonClientNodeVersion = Version.smallest(minNonClientNodeVersion, nodeEntry.value.version());, +                minNodeVersion = Version.smallest(minNodeVersion, nodeEntry.value.version());, +, +            return new DiscoveryNodes(nodes.build(), dataNodesBuilder.build(), masterNodesBuilder.build(), masterNodeId, localNodeId, minNodeVersion, minNonClientNodeVersion);, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapper.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_1_3_0)) {, +            } else {, +              throw new ElasticsearchIllegalArgumentException("type="+CONTENT_TYPE+" is not supported on indices created before version 1.3.0 is your cluster running multiple datanode versions?");, +            }, +++ b/src/test/java/org/elasticsearch/bwcompat/BasicBackwardsCompatibilityTest.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;]