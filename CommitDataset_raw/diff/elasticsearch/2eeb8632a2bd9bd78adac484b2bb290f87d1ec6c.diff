[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.apache.http.client.methods.HttpDelete;, +import org.elasticsearch.action.delete.DeleteRequest;, +    static Request delete(DeleteRequest deleteRequest) {, +        String endpoint = endpoint(deleteRequest.index(), deleteRequest.type(), deleteRequest.id());, +, +        Params parameters = Params.builder();, +        parameters.withRouting(deleteRequest.routing());, +        parameters.withParent(deleteRequest.parent());, +        parameters.withTimeout(deleteRequest.timeout());, +        parameters.withVersion(deleteRequest.version());, +        parameters.withVersionType(deleteRequest.versionType());, +        parameters.withRefreshPolicy(deleteRequest.getRefreshPolicy());, +        parameters.withWaitForActiveShards(deleteRequest.waitForActiveShards());, +, +        return new Request(HttpDelete.METHOD_NAME, endpoint, parameters.getParams(), null);, +    static Request ping() {, +        return new Request("HEAD", "/", Collections.emptyMap(), null);, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.apache.http.client.methods.HttpDelete;, +import org.elasticsearch.action.delete.DeleteRequest;, +    static Request delete(DeleteRequest deleteRequest) {, +        String endpoint = endpoint(deleteRequest.index(), deleteRequest.type(), deleteRequest.id());, +, +        Params parameters = Params.builder();, +        parameters.withRouting(deleteRequest.routing());, +        parameters.withParent(deleteRequest.parent());, +        parameters.withTimeout(deleteRequest.timeout());, +        parameters.withVersion(deleteRequest.version());, +        parameters.withVersionType(deleteRequest.versionType());, +        parameters.withRefreshPolicy(deleteRequest.getRefreshPolicy());, +        parameters.withWaitForActiveShards(deleteRequest.waitForActiveShards());, +, +        return new Request(HttpDelete.METHOD_NAME, endpoint, parameters.getParams(), null);, +    static Request ping() {, +        return new Request("HEAD", "/", Collections.emptyMap(), null);, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.delete.DeleteRequest;, +import org.elasticsearch.action.delete.DeleteResponse;, +    public RestHighLevelClient(RestClient client) {, +        this.client = Objects.requireNonNull(client);, +    /**, +     * Deletes a document by id using the Delete api, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html">Delete API on elastic.co</a>, +     */, +    public DeleteResponse delete(DeleteRequest deleteRequest, Header... headers) throws IOException {, +        return performRequestAndParseEntity(deleteRequest, Request::delete, DeleteResponse::fromXContent, Collections.singleton(404),, +            headers);, +    }, +, +    /**, +     * Asynchronously deletes a document by id using the Delete api, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html">Delete API on elastic.co</a>, +     */, +    public void deleteAsync(DeleteRequest deleteRequest, ActionListener<DeleteResponse> listener, Header... headers) {, +        performRequestAsyncAndParseEntity(deleteRequest, Request::delete, DeleteResponse::fromXContent, listener,, +            Collections.singleton(404), headers);, +    }, +, +    static <Resp> ResponseListener wrapResponseListener(CheckedFunction<Response, Resp, IOException> responseConverter,, +    static ElasticsearchStatusException parseResponseException(ResponseException responseException) {, +    static <Resp> Resp parseEntity(, +        try (XContentParser parser = xContentType.xContent().createParser(NamedXContentRegistry.EMPTY, entity.getContent())) {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.apache.http.client.methods.HttpDelete;, +import org.elasticsearch.action.delete.DeleteRequest;, +    static Request delete(DeleteRequest deleteRequest) {, +        String endpoint = endpoint(deleteRequest.index(), deleteRequest.type(), deleteRequest.id());, +, +        Params parameters = Params.builder();, +        parameters.withRouting(deleteRequest.routing());, +        parameters.withParent(deleteRequest.parent());, +        parameters.withTimeout(deleteRequest.timeout());, +        parameters.withVersion(deleteRequest.version());, +        parameters.withVersionType(deleteRequest.versionType());, +        parameters.withRefreshPolicy(deleteRequest.getRefreshPolicy());, +        parameters.withWaitForActiveShards(deleteRequest.waitForActiveShards());, +, +        return new Request(HttpDelete.METHOD_NAME, endpoint, parameters.getParams(), null);, +    static Request ping() {, +        return new Request("HEAD", "/", Collections.emptyMap(), null);, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.delete.DeleteRequest;, +import org.elasticsearch.action.delete.DeleteResponse;, +    public RestHighLevelClient(RestClient client) {, +        this.client = Objects.requireNonNull(client);, +    /**, +     * Deletes a document by id using the Delete api, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html">Delete API on elastic.co</a>, +     */, +    public DeleteResponse delete(DeleteRequest deleteRequest, Header... headers) throws IOException {]