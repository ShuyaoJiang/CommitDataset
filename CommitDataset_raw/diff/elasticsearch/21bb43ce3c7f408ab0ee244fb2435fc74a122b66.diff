[+++ b/shield/config/shield/roles.yml, +      privileges: indices:admin/exists, indices:admin/mapping/put, indices:admin/mappings/fields/get, indices:admin/refresh, indices:admin/validate/query, indices:data/read/get, indices:data/read/mget, indices:data/read/search, indices:data/write/delete, indices:data/write/index, indices:data/write/update, +      privileges: indices:admin/create, indices:admin/exists, indices:admin/mapping/put, indices:admin/mappings/fields/get, indices:admin/refresh, indices:admin/validate/query, indices:data/read/get, indices:data/read/mget, indices:data/read/search, indices:data/write/delete, indices:data/write/index, indices:data/write/update, +, +# Marvel user role. Assign to marvel users., +marvel_user:, +  indices:, +    '.marvel-es-*':, +      privileges: read, +, +# Marvel remote agent role. Assign to the agent user on the remote marvel cluster, +# to which the marvel agent will export all its data, +remote_marvel_agent:, +  cluster: indices:admin/template/put, indices:admin/template/get, +  indices:, +    '.marvel-es-*':, +      privileges: all, +++ b/shield/config/shield/roles.yml, +      privileges: indices:admin/exists, indices:admin/mapping/put, indices:admin/mappings/fields/get, indices:admin/refresh, indices:admin/validate/query, indices:data/read/get, indices:data/read/mget, indices:data/read/search, indices:data/write/delete, indices:data/write/index, indices:data/write/update, +      privileges: indices:admin/create, indices:admin/exists, indices:admin/mapping/put, indices:admin/mappings/fields/get, indices:admin/refresh, indices:admin/validate/query, indices:data/read/get, indices:data/read/mget, indices:data/read/search, indices:data/write/delete, indices:data/write/index, indices:data/write/update, +, +# Marvel user role. Assign to marvel users., +marvel_user:, +  indices:, +    '.marvel-es-*':, +      privileges: read, +, +# Marvel remote agent role. Assign to the agent user on the remote marvel cluster, +# to which the marvel agent will export all its data, +remote_marvel_agent:, +  cluster: indices:admin/template/put, indices:admin/template/get, +  indices:, +    '.marvel-es-*':, +      privileges: all, +++ b/watcher/src/test/java/org/elasticsearch/cluster/routing/TestShardRouting.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.cluster.routing;, +, +/**, + * A helper that allows to create shard routing instances within tests, while not requiring to expose, + * different simplified constructors on the ShardRouting itself., + */, +public class TestShardRouting {, +, +    public static ShardRouting newShardRouting(String index, int shardId, String currentNodeId, boolean primary, ShardRoutingState state, long version) {, +        return new ShardRouting(index, shardId, currentNodeId, null, null, primary, state, version, null, AllocationId.newInitializing(), true, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE);, +    }, +, +    public static ShardRouting newShardRouting(String index, int shardId, String currentNodeId, String relocatingNodeId, boolean primary, ShardRoutingState state, long version) {, +        return new ShardRouting(index, shardId, currentNodeId, relocatingNodeId, null, primary, state, version, null, AllocationId.newInitializing(), true, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE);, +    }, +, +    public static ShardRouting newShardRouting(String index, int shardId, String currentNodeId, String relocatingNodeId, RestoreSource restoreSource, boolean primary, ShardRoutingState state, long version) {, +        return new ShardRouting(index, shardId, currentNodeId, relocatingNodeId, restoreSource, primary, state, version, null, AllocationId.newInitializing(), true, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE);, +    }, +, +    public static ShardRouting newShardRouting(String index, int shardId, String currentNodeId,, +                                               String relocatingNodeId, RestoreSource restoreSource, boolean primary, ShardRoutingState state, long version,, +                                               UnassignedInfo unassignedInfo) {, +        return new ShardRouting(index, shardId, currentNodeId, relocatingNodeId, restoreSource, primary, state, version, unassignedInfo, AllocationId.newInitializing(), true, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE);, +    }, +}]