[+++ b/buildSrc/build.gradle, +++ b/buildSrc/build.gradle, +++ b/buildSrc/version.properties, +lucene            = 7.5.0-snapshot-b9e064b935, +++ b/buildSrc/build.gradle, +++ b/buildSrc/version.properties, +lucene            = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version:        7.5.0, +:lucene_version_path:   7_5_0, +++ b/buildSrc/build.gradle, +++ b/buildSrc/version.properties, +lucene            = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version:        7.5.0, +:lucene_version_path:   7_5_0, +++ b/docs/java-rest/high-level/licensing/put-license.asciidoc, +<3> Check the acknowledge flag., +<4> It should be true if license is acknowledge., +<5> Otherwise we can see the acknowledge messages in `acknowledgeHeader()` and check, +component-specific messages in `acknowledgeMessages()`., +++ b/buildSrc/build.gradle, +++ b/buildSrc/version.properties, +lucene            = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version:        7.5.0, +:lucene_version_path:   7_5_0, +++ b/docs/java-rest/high-level/licensing/put-license.asciidoc, +<3> Check the acknowledge flag., +<4> It should be true if license is acknowledge., +<5> Otherwise we can see the acknowledge messages in `acknowledgeHeader()` and check, +component-specific messages in `acknowledgeMessages()`., +++ b/docs/reference/aggregations/metrics/tophits-aggregation.asciidoc, +Also a `max` aggregator is defined which is used by the `terms` aggregator's order feature the return the buckets by, +++ b/buildSrc/build.gradle, +++ b/buildSrc/version.properties, +lucene            = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version:        7.5.0, +:lucene_version_path:   7_5_0, +++ b/docs/java-rest/high-level/licensing/put-license.asciidoc, +<3> Check the acknowledge flag., +<4> It should be true if license is acknowledge., +<5> Otherwise we can see the acknowledge messages in `acknowledgeHeader()` and check, +component-specific messages in `acknowledgeMessages()`., +++ b/docs/reference/aggregations/metrics/tophits-aggregation.asciidoc, +Also a `max` aggregator is defined which is used by the `terms` aggregator's order feature the return the buckets by, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0 0 0\n)+/], +ccr (default distro only), +     0     0        0, +++ b/buildSrc/build.gradle, +++ b/buildSrc/version.properties, +lucene            = 7.5.0-snapshot-b9e064b935, +++ b/docs/Versions.asciidoc, +:lucene_version:        7.5.0, +:lucene_version_path:   7_5_0, +++ b/docs/java-rest/high-level/licensing/put-license.asciidoc, +<3> Check the acknowledge flag., +<4> It should be true if license is acknowledge., +<5> Otherwise we can see the acknowledge messages in `acknowledgeHeader()` and check, +component-specific messages in `acknowledgeMessages()`., +++ b/docs/reference/aggregations/metrics/tophits-aggregation.asciidoc, +Also a `max` aggregator is defined which is used by the `terms` aggregator's order feature the return the buckets by, +++ b/docs/reference/cat/thread_pool.asciidoc, +..., +// TESTRESPONSE[s/\.\.\./(node-0 \\S+ 0 0 0\n)+/], +ccr (default distro only), +     0     0        0, +++ b/docs/reference/cluster/update-settings.asciidoc, +Allows to update cluster wide specific settings. Settings updated can, +either be persistent (applied across restarts) or transient (will not, +survive a full cluster restart). Here is an example:, +Or:, +The cluster responds with the settings updated. So the response for the, +last example will be:, +Resetting persistent or transient settings can be done by assigning a, +`null` value. If a transient setting is reset, the persistent setting, +is applied if available. Otherwise Elasticsearch will fallback to the setting, +defined at the configuration file or, if not existent, to the default, +value. Here is an example:, +Reset settings will not be included in the cluster response. So, +the response for the last example will be:, +Settings can also be reset using simple wildcards. For instance to reset, +all dynamic `indices.recovery` setting a prefix can be used:, +Cluster wide settings can be returned using:, +, +[source,js], +--------------------------------------------------, +GET /_cluster/settings, +--------------------------------------------------, +// CONSOLE, +=== Precedence of settings, +Transient cluster settings take precedence over persistent cluster settings,, +which take precedence over settings configured in the `elasticsearch.yml`, +config file., +For this reason it is preferrable to  use the `elasticsearch.yml` file only, +for local configurations, and set all cluster-wider settings with the, +A list of dynamically updatable settings can be found in the]