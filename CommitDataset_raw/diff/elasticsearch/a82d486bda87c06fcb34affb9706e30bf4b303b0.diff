[+++ b/docs/reference/modules/threadpool.asciidoc, +`listener`::, +    Mainly for java client executing of action when listener threaded is set to true, +    size `(# of available processors)/2` max at 10., +, +++ b/docs/reference/modules/threadpool.asciidoc, +`listener`::, +    Mainly for java client executing of action when listener threaded is set to true, +    size `(# of available processors)/2` max at 10., +, +++ b/src/main/java/org/elasticsearch/action/ListenableActionFuture.java, +++ b/docs/reference/modules/threadpool.asciidoc, +`listener`::, +    Mainly for java client executing of action when listener threaded is set to true, +    size `(# of available processors)/2` max at 10., +, +++ b/src/main/java/org/elasticsearch/action/ListenableActionFuture.java, +++ b/src/main/java/org/elasticsearch/action/TransportActionNodeProxy.java, +                    return ThreadPool.Names.LISTENER;, +++ b/docs/reference/modules/threadpool.asciidoc, +`listener`::, +    Mainly for java client executing of action when listener threaded is set to true, +    size `(# of available processors)/2` max at 10., +, +++ b/src/main/java/org/elasticsearch/action/ListenableActionFuture.java, +++ b/src/main/java/org/elasticsearch/action/TransportActionNodeProxy.java, +                    return ThreadPool.Names.LISTENER;, +++ b/src/main/java/org/elasticsearch/action/support/AbstractListenableActionFuture.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +    public void internalAddListener(ActionListener<T> listener) {, +                    executeListener((ActionListener<T>) listener);, +                executeListener((ActionListener<T>) listeners);, +    private void executeListener(final ActionListener<T> listener) {, +            try {, +                threadPool.executor(ThreadPool.Names.LISTENER).execute(new Runnable() {, +                            listener.onResponse(actionGet());, +                            listener.onFailure(e);, +            } catch (EsRejectedExecutionException e) {, +                listener.onFailure(e);, +                listener.onResponse(actionGet());, +            } catch (Throwable e) {, +                listener.onFailure(e);, +++ b/docs/reference/modules/threadpool.asciidoc, +`listener`::, +    Mainly for java client executing of action when listener threaded is set to true, +    size `(# of available processors)/2` max at 10., +, +++ b/src/main/java/org/elasticsearch/action/ListenableActionFuture.java, +++ b/src/main/java/org/elasticsearch/action/TransportActionNodeProxy.java, +                    return ThreadPool.Names.LISTENER;, +++ b/src/main/java/org/elasticsearch/action/support/AbstractListenableActionFuture.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +    public void internalAddListener(ActionListener<T> listener) {, +                    executeListener((ActionListener<T>) listener);, +                executeListener((ActionListener<T>) listeners);, +    private void executeListener(final ActionListener<T> listener) {, +            try {, +                threadPool.executor(ThreadPool.Names.LISTENER).execute(new Runnable() {, +                            listener.onResponse(actionGet());, +                            listener.onFailure(e);, +            } catch (EsRejectedExecutionException e) {, +                listener.onFailure(e);, +                listener.onResponse(actionGet());, +            } catch (Throwable e) {, +                listener.onFailure(e);, +++ b/src/main/java/org/elasticsearch/action/support/TransportAction.java, +                threadPool.executor(ThreadPool.Names.LISTENER).execute(new Runnable() {, +                threadPool.executor(ThreadPool.Names.LISTENER).execute(new Runnable() {, +                logger.debug("Can not run threaded action, execution rejected for listener [{}] running on current thread", listener);, +                /* we don't care if that takes long since we are shutting down (or queue capacity). But if we not respond somebody could wait, +++ b/docs/reference/modules/threadpool.asciidoc, +`listener`::, +    Mainly for java client executing of action when listener threaded is set to true, +    size `(# of available processors)/2` max at 10., +, +++ b/src/main/java/org/elasticsearch/action/ListenableActionFuture.java, +++ b/src/main/java/org/elasticsearch/action/TransportActionNodeProxy.java, +                    return ThreadPool.Names.LISTENER;, +++ b/src/main/java/org/elasticsearch/action/support/AbstractListenableActionFuture.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +    public void internalAddListener(ActionListener<T> listener) {, +                    executeListener((ActionListener<T>) listener);, +                executeListener((ActionListener<T>) listeners);, +    private void executeListener(final ActionListener<T> listener) {, +            try {, +                threadPool.executor(ThreadPool.Names.LISTENER).execute(new Runnable() {, +                            listener.onResponse(actionGet());, +                            listener.onFailure(e);, +            } catch (EsRejectedExecutionException e) {, +                listener.onFailure(e);, +                listener.onResponse(actionGet());, +            } catch (Throwable e) {, +                listener.onFailure(e);, +++ b/src/main/java/org/elasticsearch/action/support/TransportAction.java, +                threadPool.executor(ThreadPool.Names.LISTENER).execute(new Runnable() {, +                threadPool.executor(ThreadPool.Names.LISTENER).execute(new Runnable() {, +                logger.debug("Can not run threaded action, execution rejected for listener [{}] running on current thread", listener);, +                /* we don't care if that takes long since we are shutting down (or queue capacity). But if we not respond somebody could wait, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +        public static final String LISTENER = "listener";]