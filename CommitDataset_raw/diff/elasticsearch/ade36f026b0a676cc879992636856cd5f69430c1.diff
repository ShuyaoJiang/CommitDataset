[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.transport.ConnectTransportException;, +    public <T> T execute(NodeCallback<T> callback) throws ElasticSearchException {, +        int index = randomNodeGenerator.incrementAndGet();, +        for (int i = 0; i < nodes.size(); i++) {, +            Node node = nodes.get((index + i) % nodes.size());, +            try {, +                return callback.doWithNode(node);, +            } catch (ConnectTransportException e) {, +                // retry in this case, +            }, +        }, +        throw new NoNodeAvailableException();, +, +    public static interface NodeCallback<T> {, +, +        T doWithNode(Node node) throws ElasticSearchException;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.transport.ConnectTransportException;, +    public <T> T execute(NodeCallback<T> callback) throws ElasticSearchException {, +        int index = randomNodeGenerator.incrementAndGet();, +        for (int i = 0; i < nodes.size(); i++) {, +            Node node = nodes.get((index + i) % nodes.size());, +            try {, +                return callback.doWithNode(node);, +            } catch (ConnectTransportException e) {, +                // retry in this case, +            }, +        }, +        throw new NoNodeAvailableException();, +, +    public static interface NodeCallback<T> {, +, +        T doWithNode(Node node) throws ElasticSearchException;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/support/InternalTransportClient.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.cluster.node.Node;, +    @Override public ActionFuture<IndexResponse> index(final IndexRequest request) {, +        return nodesService.execute(new TransportClientNodesService.NodeCallback<ActionFuture<IndexResponse>>() {, +            @Override public ActionFuture<IndexResponse> doWithNode(Node node) throws ElasticSearchException {, +                return indexAction.submit(node, request);, +            }, +        });, +    @Override public ActionFuture<IndexResponse> index(final IndexRequest request, final ActionListener<IndexResponse> listener) {, +        return nodesService.execute(new TransportClientNodesService.NodeCallback<ActionFuture<IndexResponse>>() {, +            @Override public ActionFuture<IndexResponse> doWithNode(Node node) throws ElasticSearchException {, +                return indexAction.submit(node, request, listener);, +            }, +        });, +    @Override public void execIndex(final IndexRequest request, final ActionListener<IndexResponse> listener) {, +        nodesService.execute(new TransportClientNodesService.NodeCallback<Void>() {, +            @Override public Void doWithNode(Node node) throws ElasticSearchException {, +                indexAction.execute(node, request, listener);, +                return null;, +            }, +        });, +    @Override public ActionFuture<DeleteResponse> delete(final DeleteRequest request) {, +        return nodesService.execute(new TransportClientNodesService.NodeCallback<ActionFuture<DeleteResponse>>() {, +            @Override public ActionFuture<DeleteResponse> doWithNode(Node node) throws ElasticSearchException {, +                return deleteAction.submit(node, request);, +            }, +        });, +    @Override public ActionFuture<DeleteResponse> delete(final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +        return nodesService.execute(new TransportClientNodesService.NodeCallback<ActionFuture<DeleteResponse>>() {, +            @Override public ActionFuture<DeleteResponse> doWithNode(Node node) throws ElasticSearchException {, +                return deleteAction.submit(node, request, listener);, +            }, +        });, +    @Override public void execDelete(final DeleteRequest request, final ActionListener<DeleteResponse> listener) {, +        nodesService.execute(new TransportClientNodesService.NodeCallback<Void>() {, +            @Override public Void doWithNode(Node node) throws ElasticSearchException {, +                deleteAction.execute(node, request, listener);, +                return null;, +            }, +        });, +    @Override public ActionFuture<DeleteByQueryResponse> deleteByQuery(final DeleteByQueryRequest request) {, +        return nodesService.execute(new TransportClientNodesService.NodeCallback<ActionFuture<DeleteByQueryResponse>>() {, +            @Override public ActionFuture<DeleteByQueryResponse> doWithNode(Node node) throws ElasticSearchException {, +                return deleteByQueryAction.submit(node, request);, +            }, +        });, +    @Override public ActionFuture<DeleteByQueryResponse> deleteByQuery(final DeleteByQueryRequest request, final ActionListener<DeleteByQueryResponse> listener) {, +        return nodesService.execute(new TransportClientNodesService.NodeCallback<ActionFuture<DeleteByQueryResponse>>() {, +            @Override public ActionFuture<DeleteByQueryResponse> doWithNode(Node node) throws ElasticSearchException {, +                return deleteByQueryAction.submit(node, request, listener);, +            }, +        });, +    @Override public void execDeleteByQuery(final DeleteByQueryRequest request, final ActionListener<DeleteByQueryResponse> listener) {, +        nodesService.execute(new TransportClientNodesService.NodeCallback<Void>() {, +            @Override public Void doWithNode(Node node) throws ElasticSearchException {, +                deleteByQueryAction.execute(node, request, listener);, +                return null;, +            }, +        });, +    @Override public ActionFuture<GetResponse> get(final GetRequest request) {, +        return nodesService.execute(new TransportClientNodesService.NodeCallback<ActionFuture<GetResponse>>() {]