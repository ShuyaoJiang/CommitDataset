[+++ b/distribution/build.gradle, +      from { project(':distribution:tools:java-version-checker').jar }, +++ b/distribution/build.gradle, +      from { project(':distribution:tools:java-version-checker').jar }, +++ b/distribution/src/bin/elasticsearch-env, +"$JAVA" -cp "$ES_CLASSPATH" org.elasticsearch.tools.java_version_checker.JavaVersionChecker, +++ b/distribution/build.gradle, +      from { project(':distribution:tools:java-version-checker').jar }, +++ b/distribution/src/bin/elasticsearch-env, +"$JAVA" -cp "$ES_CLASSPATH" org.elasticsearch.tools.java_version_checker.JavaVersionChecker, +++ b/distribution/src/bin/elasticsearch-env.bat, +%JAVA% -cp "%ES_CLASSPATH%" "org.elasticsearch.tools.java_version_checker.JavaVersionChecker" || exit /b 1, +++ b/distribution/build.gradle, +      from { project(':distribution:tools:java-version-checker').jar }, +++ b/distribution/src/bin/elasticsearch-env, +"$JAVA" -cp "$ES_CLASSPATH" org.elasticsearch.tools.java_version_checker.JavaVersionChecker, +++ b/distribution/src/bin/elasticsearch-env.bat, +%JAVA% -cp "%ES_CLASSPATH%" "org.elasticsearch.tools.java_version_checker.JavaVersionChecker" || exit /b 1, +++ b/distribution/tools/java-version-checker/build.gradle, +import org.elasticsearch.gradle.precommit.PrecommitTasks, +, +apply plugin: 'elasticsearch.build', +, +targetCompatibility = JavaVersion.VERSION_1_7, +, +// java_version_checker do not depend on core so only JDK signatures should be checked, +forbiddenApisMain.signaturesURLs = [PrecommitTasks.getResource('/forbidden/jdk-signatures.txt')], +, +test.enabled = false, +namingConventions.enabled = false, +javadoc.enabled = false, +loggerUsageCheck.enabled = false, +jarHell.enabled = false, +++ b/distribution/build.gradle, +      from { project(':distribution:tools:java-version-checker').jar }, +++ b/distribution/src/bin/elasticsearch-env, +"$JAVA" -cp "$ES_CLASSPATH" org.elasticsearch.tools.java_version_checker.JavaVersionChecker, +++ b/distribution/src/bin/elasticsearch-env.bat, +%JAVA% -cp "%ES_CLASSPATH%" "org.elasticsearch.tools.java_version_checker.JavaVersionChecker" || exit /b 1, +++ b/distribution/tools/java-version-checker/build.gradle, +import org.elasticsearch.gradle.precommit.PrecommitTasks, +, +apply plugin: 'elasticsearch.build', +, +targetCompatibility = JavaVersion.VERSION_1_7, +, +// java_version_checker do not depend on core so only JDK signatures should be checked, +forbiddenApisMain.signaturesURLs = [PrecommitTasks.getResource('/forbidden/jdk-signatures.txt')], +, +test.enabled = false, +namingConventions.enabled = false, +javadoc.enabled = false, +loggerUsageCheck.enabled = false, +jarHell.enabled = false, +++ b/distribution/tools/java-version-checker/src/main/java/org/elasticsearch/tools/java_version_checker/JavaVersion.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.tools.java_version_checker;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Objects;, +, +public class JavaVersion {, +, +    public static final List<Integer> CURRENT = parse(System.getProperty("java.specification.version"));, +    public static final List<Integer> JAVA_8 = parse("1.8");, +, +    static List<Integer> parse(final String value) {, +        if (!value.matches("^0*[0-9]+(\\.[0-9]+)*$")) {, +            throw new IllegalArgumentException(value);, +        }, +, +        final List<Integer> version = new ArrayList<Integer>();, +        final String[] components = value.split("\\.");, +        for (final String component : components) {, +            version.add(Integer.valueOf(component));, +        }, +        return version;, +    }, +, +    public static int majorVersion(final List<Integer> javaVersion) {, +        Objects.requireNonNull(javaVersion);]