[+++ b/elasticsearch/x-pack/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterInfoMonitoringDoc.java, +import org.elasticsearch.xpack.XPackFeatureSet;, +import java.util.List;, +, +    private List<XPackFeatureSet.Usage> usage;, +    public List<XPackFeatureSet.Usage> getUsage() {, +        return usage;, +    }, +, +    public void setUsage(List<XPackFeatureSet.Usage> usage) {, +        this.usage = usage;, +    }, +, +++ b/elasticsearch/x-pack/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterInfoMonitoringDoc.java, +import org.elasticsearch.xpack.XPackFeatureSet;, +import java.util.List;, +, +    private List<XPackFeatureSet.Usage> usage;, +    public List<XPackFeatureSet.Usage> getUsage() {, +        return usage;, +    }, +, +    public void setUsage(List<XPackFeatureSet.Usage> usage) {, +        this.usage = usage;, +    }, +, +++ b/elasticsearch/x-pack/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsCollector.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.xpack.XPackFeatureSet;, +import org.elasticsearch.xpack.action.XPackUsageRequestBuilder;, +        final Supplier<ClusterStatsResponse> clusterStatsSupplier =, +                () -> client.admin().cluster().prepareClusterStats().get(monitoringSettings.clusterStatsTimeout());, +        final Supplier<List<XPackFeatureSet.Usage>> usageSupplier = () -> new XPackUsageRequestBuilder(client).get().getUsages();, +        final ClusterStatsResponse clusterStats = clusterStatsSupplier.get();, +        final long timestamp = System.currentTimeMillis();, +        final String clusterUUID = clusterUUID();, +        final DiscoveryNode sourceNode = localNode();, +, +        final List<MonitoringDoc> results = new ArrayList<>(1);, +        clusterInfoDoc.setUsage(collect(usageSupplier));, +, +    @Nullable, +    private <T> T collect(final Supplier<T> supplier) {, +        try {, +            return supplier.get();, +        } catch (ElasticsearchSecurityException e) {, +            if (LicenseUtils.isLicenseExpiredException(e)) {, +                logger.trace((Supplier<?>) () -> new ParameterizedMessage(, +                                "collector [{}] - unable to collect data because of expired license", name()), e);, +            } else {, +                throw e;, +            }, +        }, +, +        return null;, +    }, +, +++ b/elasticsearch/x-pack/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterInfoMonitoringDoc.java, +import org.elasticsearch.xpack.XPackFeatureSet;, +import java.util.List;, +, +    private List<XPackFeatureSet.Usage> usage;, +    public List<XPackFeatureSet.Usage> getUsage() {, +        return usage;, +    }, +, +    public void setUsage(List<XPackFeatureSet.Usage> usage) {, +        this.usage = usage;, +    }, +, +++ b/elasticsearch/x-pack/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsCollector.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.xpack.XPackFeatureSet;, +import org.elasticsearch.xpack.action.XPackUsageRequestBuilder;, +        final Supplier<ClusterStatsResponse> clusterStatsSupplier =, +                () -> client.admin().cluster().prepareClusterStats().get(monitoringSettings.clusterStatsTimeout());, +        final Supplier<List<XPackFeatureSet.Usage>> usageSupplier = () -> new XPackUsageRequestBuilder(client).get().getUsages();, +        final ClusterStatsResponse clusterStats = clusterStatsSupplier.get();, +        final long timestamp = System.currentTimeMillis();, +        final String clusterUUID = clusterUUID();, +        final DiscoveryNode sourceNode = localNode();, +, +        final List<MonitoringDoc> results = new ArrayList<>(1);, +        clusterInfoDoc.setUsage(collect(usageSupplier));, +, +    @Nullable, +    private <T> T collect(final Supplier<T> supplier) {, +        try {, +            return supplier.get();, +        } catch (ElasticsearchSecurityException e) {, +            if (LicenseUtils.isLicenseExpiredException(e)) {, +                logger.trace((Supplier<?>) () -> new ParameterizedMessage(, +                                "collector [{}] - unable to collect data because of expired license", name()), e);, +            } else {, +                throw e;, +            }, +        }, +, +        return null;, +    }]