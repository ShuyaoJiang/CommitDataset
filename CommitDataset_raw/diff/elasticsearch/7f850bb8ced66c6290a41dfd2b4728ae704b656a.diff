[+++ b/x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/action/TransportRollupSearchAction.java, +import org.elasticsearch.index.query.TermsQueryBuilder;, +import java.util.Collections;, +        } else if (builder.getWriteableName().equals(RangeQueryBuilder.NAME)) {, +            RangeQueryBuilder range = (RangeQueryBuilder) builder;, +            String fieldName = range.fieldName();, +            // Many range queries don't include the timezone because the default is UTC, but the query, +            // builder will return null so we need to set it here, +            String timeZone = range.timeZone() == null ? DateTimeZone.UTC.toString() : range.timeZone();, +            String rewrittenFieldName = rewriteFieldName(jobCaps, RangeQueryBuilder.NAME, fieldName, timeZone);, +            RangeQueryBuilder rewritten = new RangeQueryBuilder(rewrittenFieldName), +                .from(range.from()), +                .to(range.to()), +                .includeLower(range.includeLower()), +                .includeUpper(range.includeUpper());, +            if (range.timeZone() != null) {, +                rewritten.timeZone(range.timeZone());, +            }, +            if (range.format() != null) {, +                rewritten.format(range.format());, +            }, +            return rewritten;, +        } else if (builder.getWriteableName().equals(TermQueryBuilder.NAME)) {, +            TermQueryBuilder term = (TermQueryBuilder) builder;, +            String fieldName = term.fieldName();, +            String rewrittenFieldName =  rewriteFieldName(jobCaps, TermQueryBuilder.NAME, fieldName, null);, +            return new TermQueryBuilder(rewrittenFieldName, term.value());, +        } else if (builder.getWriteableName().equals(TermsQueryBuilder.NAME)) {, +            TermsQueryBuilder terms = (TermsQueryBuilder) builder;, +            String fieldName = terms.fieldName();, +            String rewrittenFieldName =  rewriteFieldName(jobCaps, TermQueryBuilder.NAME, fieldName, null);, +            return new TermsQueryBuilder(rewrittenFieldName, terms.values());, +        } else if (builder.getWriteableName().equals(MatchAllQueryBuilder.NAME)) {, +            // no-op, +            return builder;, +        } else {, +            throw new IllegalArgumentException("Unsupported Query in search request: [" + builder.getWriteableName() + "]");, +        }, +    }, +    private static String rewriteFieldName(Set<RollupJobCaps> jobCaps,, +                                           String builderName,, +                                           String fieldName,, +                                           String timeZone) {, +        List<String> incompatibleTimeZones = timeZone == null ? Collections.emptyList() : new ArrayList<>();, +        List<String> rewrittenFieldNames = jobCaps.stream(), +                        if (type.equals(DateHistogramAggregationBuilder.NAME) && timeZone != null) {, +                                incompatibleTimeZones.add((String)agg.get(DateHistoGroupConfig.TIME_ZONE.getPreferredName()));, +        if (rewrittenFieldNames.isEmpty()) {, +            if (incompatibleTimeZones.isEmpty()) {, +                throw new IllegalArgumentException("Field [" + fieldName + "] in [" + builderName, +                throw new IllegalArgumentException("Field [" + fieldName + "] in [" + builderName, +                    + incompatibleTimeZones);, +        } else if (rewrittenFieldNames.size() > 1) {, +                fieldName + "] was mapped to: [" + Strings.collectionToDelimitedString(rewrittenFieldNames, ",") + "].");, +            return rewrittenFieldNames.get(0);, +++ b/x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/action/TransportRollupSearchAction.java, +import org.elasticsearch.index.query.TermsQueryBuilder;, +import java.util.Collections;, +        } else if (builder.getWriteableName().equals(RangeQueryBuilder.NAME)) {, +            RangeQueryBuilder range = (RangeQueryBuilder) builder;, +            String fieldName = range.fieldName();, +            // Many range queries don't include the timezone because the default is UTC, but the query, +            // builder will return null so we need to set it here, +            String timeZone = range.timeZone() == null ? DateTimeZone.UTC.toString() : range.timeZone();, +            String rewrittenFieldName = rewriteFieldName(jobCaps, RangeQueryBuilder.NAME, fieldName, timeZone);, +            RangeQueryBuilder rewritten = new RangeQueryBuilder(rewrittenFieldName), +                .from(range.from()), +                .to(range.to()), +                .includeLower(range.includeLower()), +                .includeUpper(range.includeUpper());, +            if (range.timeZone() != null) {, +                rewritten.timeZone(range.timeZone());, +            }, +            if (range.format() != null) {, +                rewritten.format(range.format());, +            }, +            return rewritten;, +        } else if (builder.getWriteableName().equals(TermQueryBuilder.NAME)) {, +            TermQueryBuilder term = (TermQueryBuilder) builder;, +            String fieldName = term.fieldName();, +            String rewrittenFieldName =  rewriteFieldName(jobCaps, TermQueryBuilder.NAME, fieldName, null);, +            return new TermQueryBuilder(rewrittenFieldName, term.value());, +        } else if (builder.getWriteableName().equals(TermsQueryBuilder.NAME)) {, +            TermsQueryBuilder terms = (TermsQueryBuilder) builder;, +            String fieldName = terms.fieldName();, +            String rewrittenFieldName =  rewriteFieldName(jobCaps, TermQueryBuilder.NAME, fieldName, null);, +            return new TermsQueryBuilder(rewrittenFieldName, terms.values());, +        } else if (builder.getWriteableName().equals(MatchAllQueryBuilder.NAME)) {, +            // no-op, +            return builder;, +        } else {, +            throw new IllegalArgumentException("Unsupported Query in search request: [" + builder.getWriteableName() + "]");, +        }, +    }, +    private static String rewriteFieldName(Set<RollupJobCaps> jobCaps,, +                                           String builderName,, +                                           String fieldName,, +                                           String timeZone) {, +        List<String> incompatibleTimeZones = timeZone == null ? Collections.emptyList() : new ArrayList<>();, +        List<String> rewrittenFieldNames = jobCaps.stream()]