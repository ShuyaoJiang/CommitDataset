[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/script/ScriptService.java, +            throw new IllegalArgumentException(DISABLE_DYNAMIC_SCRIPTING_SETTING + " is not a supported setting, replace with " +, +                    "fine-grained script settings. \n Dynamic scripts can be enabled for all languages and all operations not " +, +                    "using `script.disable_dynamic: false` in elasticsearch.yml");, +                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]",, +                            exception);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/script/ScriptService.java, +            throw new IllegalArgumentException(DISABLE_DYNAMIC_SCRIPTING_SETTING + " is not a supported setting, replace with " +, +                    "fine-grained script settings. \n Dynamic scripts can be enabled for all languages and all operations not " +, +                    "using `script.disable_dynamic: false` in elasticsearch.yml");, +                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]",, +                            exception);, +++ b/server/src/main/java/org/elasticsearch/search/MultiValueMode.java, +        protected long pick(SortedNumericDocValues values, long missingValue, DocIdSetIterator docItr, int startDoc, int endDoc, , +                int maxChildren) throws IOException {, +        protected double pick(SortedNumericDoubleValues values, double missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected long pick(SortedNumericDocValues values, long missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected double pick(SortedNumericDoubleValues values, double missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected long pick(SortedNumericDocValues values, long missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected double pick(SortedNumericDoubleValues values, double missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected BytesRef pick(BinaryDocValues values, BytesRefBuilder builder, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected long pick(SortedNumericDocValues values, long missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected double pick(SortedNumericDoubleValues values, double missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected BytesRef pick(BinaryDocValues values, BytesRefBuilder builder, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +    public NumericDocValues select(final SortedNumericDocValues values, final long missingValue, final BitSet parentDocs,, +            final DocIdSetIterator childDocs, int maxDoc, int maxChildren) throws IOException {, +    protected long pick(SortedNumericDocValues values, long missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +            int maxChildren) throws IOException {, +    public NumericDoubleValues select(final SortedNumericDoubleValues values, final double missingValue, final BitSet parentDocs,, +            final DocIdSetIterator childDocs, int maxDoc, int maxChildren) throws IOException {, +    protected double pick(SortedNumericDoubleValues values, double missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +            int maxChildren) throws IOException {, +    public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue, final BitSet parentDocs,, +            final DocIdSetIterator childDocs, int maxDoc, int maxChildren) throws IOException {, +    protected BytesRef pick(BinaryDocValues values, BytesRefBuilder builder, DocIdSetIterator docItr, int startDoc, int endDoc,, +            int maxChildren) throws IOException {, +            throw new UnsupportedOperationException("fields containing more than " + (Integer.MAX_VALUE - 1) +, +                    " unique terms are unsupported");, +    public SortedDocValues select(final SortedSetDocValues values, final BitSet parentDocs, final DocIdSetIterator childDocs,, +            int maxChildren) throws IOException {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/script/ScriptService.java, +            throw new IllegalArgumentException(DISABLE_DYNAMIC_SCRIPTING_SETTING + " is not a supported setting, replace with " +, +                    "fine-grained script settings. \n Dynamic scripts can be enabled for all languages and all operations not " +, +                    "using `script.disable_dynamic: false` in elasticsearch.yml");, +                    throw new GeneralScriptException("Failed to compile " + type + " script [" + id + "] using lang [" + lang + "]",, +                            exception);, +++ b/server/src/main/java/org/elasticsearch/search/MultiValueMode.java, +        protected long pick(SortedNumericDocValues values, long missingValue, DocIdSetIterator docItr, int startDoc, int endDoc, , +                int maxChildren) throws IOException {, +        protected double pick(SortedNumericDoubleValues values, double missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected long pick(SortedNumericDocValues values, long missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected double pick(SortedNumericDoubleValues values, double missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected long pick(SortedNumericDocValues values, long missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected double pick(SortedNumericDoubleValues values, double missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected BytesRef pick(BinaryDocValues values, BytesRefBuilder builder, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected long pick(SortedNumericDocValues values, long missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected double pick(SortedNumericDoubleValues values, double missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +        protected BytesRef pick(BinaryDocValues values, BytesRefBuilder builder, DocIdSetIterator docItr, int startDoc, int endDoc,, +                int maxChildren) throws IOException {, +    public NumericDocValues select(final SortedNumericDocValues values, final long missingValue, final BitSet parentDocs,, +            final DocIdSetIterator childDocs, int maxDoc, int maxChildren) throws IOException {, +    protected long pick(SortedNumericDocValues values, long missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +            int maxChildren) throws IOException {, +    public NumericDoubleValues select(final SortedNumericDoubleValues values, final double missingValue, final BitSet parentDocs,, +            final DocIdSetIterator childDocs, int maxDoc, int maxChildren) throws IOException {, +    protected double pick(SortedNumericDoubleValues values, double missingValue, DocIdSetIterator docItr, int startDoc, int endDoc,, +            int maxChildren) throws IOException {, +    public BinaryDocValues select(final SortedBinaryDocValues values, final BytesRef missingValue, final BitSet parentDocs,, +            final DocIdSetIterator childDocs, int maxDoc, int maxChildren) throws IOException {, +    protected BytesRef pick(BinaryDocValues values, BytesRefBuilder builder, DocIdSetIterator docItr, int startDoc, int endDoc,, +            int maxChildren) throws IOException {, +            throw new UnsupportedOperationException("fields containing more than " + (Integer.MAX_VALUE - 1) +, +                    " unique terms are unsupported");, +    public SortedDocValues select(final SortedSetDocValues values, final BitSet parentDocs, final DocIdSetIterator childDocs,, +            int maxChildren) throws IOException {, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +                                    Collection<PipelineAggregationBuilder> subPipelineBuilders = aggBuilder.factoriesBuilder, +                                            .pipelineAggregatorBuilders;, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml]