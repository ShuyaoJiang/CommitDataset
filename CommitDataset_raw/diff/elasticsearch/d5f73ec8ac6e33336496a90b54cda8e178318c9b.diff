[+++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains a simple value for parameter [fields] while a list is expected");, +                            } else {, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains an unknown parameter [" + currentFieldName + "]");, +                            }, +                        } else if (token == XContentParser.Token.START_ARRAY) {, +                            if ("fields".equals(currentFieldName)) {, +                                throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected a simple value for field [" + currentFieldName + "] but found [" + token + "]");, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains a simple value for parameter [fields] while a list is expected");, +                            } else {, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains an unknown parameter [" + currentFieldName + "]");, +                            }, +                        } else if (token == XContentParser.Token.START_ARRAY) {, +                            if ("fields".equals(currentFieldName)) {, +                                throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected a simple value for field [" + currentFieldName + "] but found [" + token + "]");, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsWriter.java, +                        boolean foundTerm = topLevelIterator.seekExact(termBytesRef);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains a simple value for parameter [fields] while a list is expected");, +                            } else {, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains an unknown parameter [" + currentFieldName + "]");, +                            }, +                        } else if (token == XContentParser.Token.START_ARRAY) {, +                            if ("fields".equals(currentFieldName)) {, +                                throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected a simple value for field [" + currentFieldName + "] but found [" + token + "]");, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsWriter.java, +                        boolean foundTerm = topLevelIterator.seekExact(termBytesRef);, +++ b/core/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java, +import org.elasticsearch.common.Strings;, +            // Verify that file information is complete, +            if (name == null || Strings.validFileName(name) == false) {, +                throw new ElasticsearchParseException("missing or invalid file name [" + name + "]");, +            } else if (physicalName == null || Strings.validFileName(physicalName) == false) {, +                throw new ElasticsearchParseException("missing or invalid physical file name [" + physicalName + "]");, +            } else if (length < 0) {, +                throw new ElasticsearchParseException("missing or invalid file length");, +            }, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains a simple value for parameter [fields] while a list is expected");, +                            } else {, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains an unknown parameter [" + currentFieldName + "]");, +                            }, +                        } else if (token == XContentParser.Token.START_ARRAY) {, +                            if ("fields".equals(currentFieldName)) {, +                                throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected a simple value for field [" + currentFieldName + "] but found [" + token + "]");, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsWriter.java, +                        boolean foundTerm = topLevelIterator.seekExact(termBytesRef);, +++ b/core/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java, +import org.elasticsearch.common.Strings;, +            // Verify that file information is complete, +            if (name == null || Strings.validFileName(name) == false) {, +                throw new ElasticsearchParseException("missing or invalid file name [" + name + "]");, +            } else if (physicalName == null || Strings.validFileName(physicalName) == false) {, +                throw new ElasticsearchParseException("missing or invalid physical file name [" + physicalName + "]");, +            } else if (length < 0) {, +                throw new ElasticsearchParseException("missing or invalid file length");, +            }, +++ b/core/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java, +     * and then replacing all property placeholders. This method will not work with settings that have <code>${prompt.text}</code>, +     * or <code>${prompt.secret}</code> as their value unless they have been resolved previously., +     * settings with a value of <code>${prompt.text}</code> or <code>${prompt.secret}</code> will result in a prompt for, +     * the setting to the user., +        // check if name is set in settings, if not look for system property and set it, +, +        Settings settings = replacePromptPlaceholders(settingsBuilder.build(), terminal);, +        // all settings placeholders have been resolved. resolve the value for the name setting by checking for name,, +        // then looking for node.name, and finally generate one if needed, +        if (settings.get("name") == null) {, +            final String name = settings.get("node.name");, +            if (name == null || name.isEmpty()) {, +                settings = settingsBuilder().put(settings), +                        .put("name", Names.randomNodeName(environment.resolveConfig("names.txt"))), +                        .build();, +            } else {, +                settings = settingsBuilder().put(settings), +                        .put("name", name), +                        .build();, +            }, +        }, +, +        environment = new Environment(settings);, +        settingsBuilder = settingsBuilder().put(settings);, +        settings = settingsBuilder.build();, +        return new Tuple<>(settings, environment);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains a simple value for parameter [fields] while a list is expected");, +                            } else {, +                                throw new IllegalArgumentException("Action/metadata line [" + line + "] contains an unknown parameter [" + currentFieldName + "]");, +                            }, +                        } else if (token == XContentParser.Token.START_ARRAY) {, +                            if ("fields".equals(currentFieldName)) {, +                                throw new IllegalArgumentException("Malformed action/metadata line [" + line + "], expected a simple value for field [" + currentFieldName + "] but found [" + token + "]");, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsWriter.java, +                        boolean foundTerm = topLevelIterator.seekExact(termBytesRef);, +++ b/core/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java, +import org.elasticsearch.common.Strings;, +            // Verify that file information is complete, +            if (name == null || Strings.validFileName(name) == false) {, +                throw new ElasticsearchParseException("missing or invalid file name [" + name + "]");]