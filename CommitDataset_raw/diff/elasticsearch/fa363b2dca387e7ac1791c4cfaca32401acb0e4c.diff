[+++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +    public org.elasticsearch.index.fielddata.FieldDataType fieldDataType2() {, +        // long for now, need to think about scripts and getting a DateTime back?, +        return new org.elasticsearch.index.fielddata.FieldDataType("long");, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +    public org.elasticsearch.index.fielddata.FieldDataType fieldDataType2() {, +        // long for now, need to think about scripts and getting a DateTime back?, +        return new org.elasticsearch.index.fielddata.FieldDataType("long");, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/search/facet/range/KeyValueRangeFacetCollector.java, +import org.elasticsearch.index.fielddata.DoubleValues;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    private final IndexNumericFieldData keyIndexFieldData;, +    private final IndexNumericFieldData valueIndexFieldData;, +    private DoubleValues keyValues;, +, +    public KeyValueRangeFacetCollector(String facetName, IndexNumericFieldData keyIndexFieldData, IndexNumericFieldData valueIndexFieldData, RangeFacet.Entry[] entries, SearchContext context) {, +        this.keyIndexFieldData = keyIndexFieldData;, +        this.valueIndexFieldData = valueIndexFieldData;, +        keyValues = keyIndexFieldData.load(context).getDoubleValues();, +        rangeProc.valueValues = valueIndexFieldData.load(context).getDoubleValues();, +        keyValues.forEachValueInDoc(doc, rangeProc);, +    public static class RangeProc implements DoubleValues.ValueInDocProc {, +        DoubleValues valueValues;, +        public void onMissing(int docId) {, +        }, +, +        @Override, +                    if (valueValues.isMultiValued()) {, +                        for (DoubleValues.Iter iter = valueValues.getIter(docId); iter.hasNext(); ) {, +                            double valueValue = iter.next();, +                            entry.totalCount++;, +                    } else if (valueValues.hasValue(docId)) {, +                        double valueValue = valueValues.getValue(docId);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +    public org.elasticsearch.index.fielddata.FieldDataType fieldDataType2() {, +        // long for now, need to think about scripts and getting a DateTime back?, +        return new org.elasticsearch.index.fielddata.FieldDataType("long");, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/search/facet/range/KeyValueRangeFacetCollector.java, +import org.elasticsearch.index.fielddata.DoubleValues;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    private final IndexNumericFieldData keyIndexFieldData;, +    private final IndexNumericFieldData valueIndexFieldData;, +    private DoubleValues keyValues;, +, +    public KeyValueRangeFacetCollector(String facetName, IndexNumericFieldData keyIndexFieldData, IndexNumericFieldData valueIndexFieldData, RangeFacet.Entry[] entries, SearchContext context) {, +        this.keyIndexFieldData = keyIndexFieldData;, +        this.valueIndexFieldData = valueIndexFieldData;, +        keyValues = keyIndexFieldData.load(context).getDoubleValues();, +        rangeProc.valueValues = valueIndexFieldData.load(context).getDoubleValues();, +        keyValues.forEachValueInDoc(doc, rangeProc);, +    public static class RangeProc implements DoubleValues.ValueInDocProc {, +        DoubleValues valueValues;, +        public void onMissing(int docId) {, +        }, +, +        @Override, +                    if (valueValues.isMultiValued()) {, +                        for (DoubleValues.Iter iter = valueValues.getIter(docId); iter.hasNext(); ) {, +                            double valueValue = iter.next();, +                            entry.totalCount++;, +                    } else if (valueValues.hasValue(docId)) {, +                        double valueValue = valueValues.getValue(docId);, +++ b/src/main/java/org/elasticsearch/search/facet/range/RangeFacetCollector.java, +import org.elasticsearch.index.fielddata.DoubleValues;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    private final IndexNumericFieldData indexFieldData;, +    private DoubleValues values;, +    public RangeFacetCollector(String facetName, IndexNumericFieldData indexFieldData, RangeFacet.Entry[] entries, SearchContext context) {, +        this.indexFieldData = indexFieldData;, +        values = indexFieldData.load(context).getDoubleValues();, +        values.forEachValueInDoc(doc, rangeProc);, +    public static class RangeProc implements DoubleValues.ValueInDocProc {, +        public void onMissing(int docId) {, +        }, +, +        @Override, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +    public org.elasticsearch.index.fielddata.FieldDataType fieldDataType2() {, +        // long for now, need to think about scripts and getting a DateTime back?, +        return new org.elasticsearch.index.fielddata.FieldDataType("long");, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/search/facet/range/KeyValueRangeFacetCollector.java, +import org.elasticsearch.index.fielddata.DoubleValues;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +    private final IndexNumericFieldData keyIndexFieldData;, +    private final IndexNumericFieldData valueIndexFieldData;, +    private DoubleValues keyValues;, +, +    public KeyValueRangeFacetCollector(String facetName, IndexNumericFieldData keyIndexFieldData, IndexNumericFieldData valueIndexFieldData, RangeFacet.Entry[] entries, SearchContext context) {]