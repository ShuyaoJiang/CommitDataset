[+++ b/docs/reference/index-modules/query-cache.asciidoc, +where `size=0`, so it will not cache `hits`,, +curl 'localhost:9200/my_index/_search?query_cache=true' -d', +  "size": 0,, +++ b/docs/reference/index-modules/query-cache.asciidoc, +where `size=0`, so it will not cache `hits`,, +curl 'localhost:9200/my_index/_search?query_cache=true' -d', +  "size": 0,, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== `search_type=count` deprecation, +, +The `count` search type has been deprecated. All benefits from this search type can, +now be achieved by using the `query_then_fetch` search type (which is the, +default) and setting `size` to `0`., +++ b/docs/reference/index-modules/query-cache.asciidoc, +where `size=0`, so it will not cache `hits`,, +curl 'localhost:9200/my_index/_search?query_cache=true' -d', +  "size": 0,, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== `search_type=count` deprecation, +, +The `count` search type has been deprecated. All benefits from this search type can, +now be achieved by using the `query_then_fetch` search type (which is the, +default) and setting `size` to `0`., +++ b/docs/reference/search/aggregations.asciidoc, +setting `size=0`. For example:, +$ curl -XGET 'http://localhost:9200/twitter/tweet/_search' -d '{, +  "size": 0,, +Setting `size` to `0` avoids executing the fetch phase of the search making the request more efficient., +++ b/docs/reference/index-modules/query-cache.asciidoc, +where `size=0`, so it will not cache `hits`,, +curl 'localhost:9200/my_index/_search?query_cache=true' -d', +  "size": 0,, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== `search_type=count` deprecation, +, +The `count` search type has been deprecated. All benefits from this search type can, +now be achieved by using the `query_then_fetch` search type (which is the, +default) and setting `size` to `0`., +++ b/docs/reference/search/aggregations.asciidoc, +setting `size=0`. For example:, +$ curl -XGET 'http://localhost:9200/twitter/tweet/_search' -d '{, +  "size": 0,, +Setting `size` to `0` avoids executing the fetch phase of the search making the request more efficient., +++ b/docs/reference/search/multi-search.asciidoc, +{"index" : "test", "search_type" : "dfs_query_then_fetch"}, +{"search_type" : "dfs_query_then_fetch"}, +++ b/docs/reference/index-modules/query-cache.asciidoc, +where `size=0`, so it will not cache `hits`,, +curl 'localhost:9200/my_index/_search?query_cache=true' -d', +  "size": 0,, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== `search_type=count` deprecation, +, +The `count` search type has been deprecated. All benefits from this search type can, +now be achieved by using the `query_then_fetch` search type (which is the, +default) and setting `size` to `0`., +++ b/docs/reference/search/aggregations.asciidoc, +setting `size=0`. For example:, +$ curl -XGET 'http://localhost:9200/twitter/tweet/_search' -d '{, +  "size": 0,, +Setting `size` to `0` avoids executing the fetch phase of the search making the request more efficient., +++ b/docs/reference/search/multi-search.asciidoc, +{"index" : "test", "search_type" : "dfs_query_then_fetch"}, +{"search_type" : "dfs_query_then_fetch"}, +++ b/docs/reference/search/request-body.asciidoc, +    of search results for requests where `size` is 0, ie, +    aggregations and suggestions (no top hits returned)., +    See <<index-modules-shard-query-cache>>., +++ b/docs/reference/index-modules/query-cache.asciidoc, +where `size=0`, so it will not cache `hits`,, +curl 'localhost:9200/my_index/_search?query_cache=true' -d', +  "size": 0,, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== `search_type=count` deprecation, +, +The `count` search type has been deprecated. All benefits from this search type can, +now be achieved by using the `query_then_fetch` search type (which is the, +default) and setting `size` to `0`., +++ b/docs/reference/search/aggregations.asciidoc, +setting `size=0`. For example:, +$ curl -XGET 'http://localhost:9200/twitter/tweet/_search' -d '{, +  "size": 0,, +Setting `size` to `0` avoids executing the fetch phase of the search making the request more efficient., +++ b/docs/reference/search/multi-search.asciidoc, +{"index" : "test", "search_type" : "dfs_query_then_fetch"}, +{"search_type" : "dfs_query_then_fetch"}, +++ b/docs/reference/search/request-body.asciidoc, +    of search results for requests where `size` is 0, ie, +    aggregations and suggestions (no top hits returned)., +    See <<index-modules-shard-query-cache>>., +++ b/docs/reference/search/request/search-type.asciidoc, +deprecated[2.0.0, `count` does not provide any benefits over `query_then_fetch` with a `size` of `0`], +, +++ b/docs/reference/index-modules/query-cache.asciidoc, +where `size=0`, so it will not cache `hits`,, +curl 'localhost:9200/my_index/_search?query_cache=true' -d', +  "size": 0,, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +=== `search_type=count` deprecation]