[+++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnection.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.shield.authc.support.ldap.AbstractLdapConnection;, +public class ActiveDirectoryConnection extends AbstractLdapConnection {, +    private static final ESLogger logger = ESLoggerFactory.getLogger(ActiveDirectoryConnection.class.getName());, +        super(ctx, boundName);, +            jndiContext.close();, +    public List<String> groups() {, +        groupsSearchCtls.setReturningAttributes(Strings.EMPTY_ARRAY);  //we only need the entry DN, +            NamingEnumeration groupsAnswer = jndiContext.search(groupSearchDN, groupsSearchFilter, groupsSearchCtls);, +        List<String> groupList = groups.build();, +        if (logger.isDebugEnabled()) {, +            logger.debug("Found these groups [{}] for userDN [{}]", groupList, this.bindDn);, +        }, +        return groupList;, +            NamingEnumeration userAnswer = jndiContext.search(authenticatedUserDn(), userSearchFilter, userSearchCtls);, +    public String authenticatedUserDn() {, +     * To better understand what the sid is and how its string representation looks like, see, +    static public String binarySidToStringSid( byte[] SID ) {, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnection.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.shield.authc.support.ldap.AbstractLdapConnection;, +public class ActiveDirectoryConnection extends AbstractLdapConnection {, +    private static final ESLogger logger = ESLoggerFactory.getLogger(ActiveDirectoryConnection.class.getName());, +        super(ctx, boundName);, +            jndiContext.close();, +    public List<String> groups() {, +        groupsSearchCtls.setReturningAttributes(Strings.EMPTY_ARRAY);  //we only need the entry DN, +            NamingEnumeration groupsAnswer = jndiContext.search(groupSearchDN, groupsSearchFilter, groupsSearchCtls);, +        List<String> groupList = groups.build();, +        if (logger.isDebugEnabled()) {, +            logger.debug("Found these groups [{}] for userDN [{}]", groupList, this.bindDn);, +        }, +        return groupList;, +            NamingEnumeration userAnswer = jndiContext.search(authenticatedUserDn(), userSearchFilter, userSearchCtls);, +    public String authenticatedUserDn() {, +     * To better understand what the sid is and how its string representation looks like, see, +    static public String binarySidToStringSid( byte[] SID ) {, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnectionFactory.java, +import org.elasticsearch.shield.ShieldSettingsException;, +import org.elasticsearch.shield.authc.support.ldap.ConnectionFactory;, + * user entry in Active Directory that matches the user name).  This eliminates the need for user templates, and simplifies, +public class ActiveDirectoryConnectionFactory extends AbstractComponent implements ConnectionFactory {, +            throw new ShieldSettingsException("Missing [" + AD_DOMAIN_NAME_SETTING + "] setting for active directory");, +    public ActiveDirectoryConnection open(String userName, SecuredString password) {, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnection.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.shield.authc.support.ldap.AbstractLdapConnection;, +public class ActiveDirectoryConnection extends AbstractLdapConnection {, +    private static final ESLogger logger = ESLoggerFactory.getLogger(ActiveDirectoryConnection.class.getName());, +        super(ctx, boundName);, +            jndiContext.close();, +    public List<String> groups() {, +        groupsSearchCtls.setReturningAttributes(Strings.EMPTY_ARRAY);  //we only need the entry DN, +            NamingEnumeration groupsAnswer = jndiContext.search(groupSearchDN, groupsSearchFilter, groupsSearchCtls);, +        List<String> groupList = groups.build();, +        if (logger.isDebugEnabled()) {, +            logger.debug("Found these groups [{}] for userDN [{}]", groupList, this.bindDn);, +        }, +        return groupList;, +            NamingEnumeration userAnswer = jndiContext.search(authenticatedUserDn(), userSearchFilter, userSearchCtls);, +    public String authenticatedUserDn() {, +     * To better understand what the sid is and how its string representation looks like, see, +    static public String binarySidToStringSid( byte[] SID ) {, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnectionFactory.java, +import org.elasticsearch.shield.ShieldSettingsException;, +import org.elasticsearch.shield.authc.support.ldap.ConnectionFactory;, + * user entry in Active Directory that matches the user name).  This eliminates the need for user templates, and simplifies, +public class ActiveDirectoryConnectionFactory extends AbstractComponent implements ConnectionFactory {, +            throw new ShieldSettingsException("Missing [" + AD_DOMAIN_NAME_SETTING + "] setting for active directory");, +    public ActiveDirectoryConnection open(String userName, SecuredString password) {, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryException.java, + * ActiveDirectoryExceptions typically wrap jndi Naming exceptions, and have an additional, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnection.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.shield.authc.support.ldap.AbstractLdapConnection;, +public class ActiveDirectoryConnection extends AbstractLdapConnection {, +    private static final ESLogger logger = ESLoggerFactory.getLogger(ActiveDirectoryConnection.class.getName());, +        super(ctx, boundName);, +            jndiContext.close();, +    public List<String> groups() {, +        groupsSearchCtls.setReturningAttributes(Strings.EMPTY_ARRAY);  //we only need the entry DN, +            NamingEnumeration groupsAnswer = jndiContext.search(groupSearchDN, groupsSearchFilter, groupsSearchCtls);, +        List<String> groupList = groups.build();, +        if (logger.isDebugEnabled()) {, +            logger.debug("Found these groups [{}] for userDN [{}]", groupList, this.bindDn);, +        }, +        return groupList;, +            NamingEnumeration userAnswer = jndiContext.search(authenticatedUserDn(), userSearchFilter, userSearchCtls);, +    public String authenticatedUserDn() {, +     * To better understand what the sid is and how its string representation looks like, see, +    static public String binarySidToStringSid( byte[] SID ) {, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryConnectionFactory.java, +import org.elasticsearch.shield.ShieldSettingsException;, +import org.elasticsearch.shield.authc.support.ldap.ConnectionFactory;, + * user entry in Active Directory that matches the user name).  This eliminates the need for user templates, and simplifies, +public class ActiveDirectoryConnectionFactory extends AbstractComponent implements ConnectionFactory {, +            throw new ShieldSettingsException("Missing [" + AD_DOMAIN_NAME_SETTING + "] setting for active directory");, +    public ActiveDirectoryConnection open(String userName, SecuredString password) {, +++ b/src/main/java/org/elasticsearch/shield/authc/active_directory/ActiveDirectoryException.java]