[+++ b/docs/CHANGELOG.asciidoc, +Fail snapshot operations early when creating or deleting a snapshot on a repository that has been, +written to by an older Elasticsearch after writing to it with a newer Elasticsearch version. ({pull}30140[#30140]), +, +++ b/docs/CHANGELOG.asciidoc, +Fail snapshot operations early when creating or deleting a snapshot on a repository that has been, +written to by an older Elasticsearch after writing to it with a newer Elasticsearch version. ({pull}30140[#30140]), +, +++ b/docs/reference/modules/snapshots.asciidoc, +IMPORTANT: The snapshot format can change across major versions, so if you have, +clusters on different versions trying to write the same repository, snapshots, +written by one version may not be visible to the other and the repository could, +be corrupted. While setting the repository to `readonly` on all but one of the, +clusters should work with multiple clusters differing by one major version, it, +is not a supported configuration., +++ b/docs/CHANGELOG.asciidoc, +Fail snapshot operations early when creating or deleting a snapshot on a repository that has been, +written to by an older Elasticsearch after writing to it with a newer Elasticsearch version. ({pull}30140[#30140]), +, +++ b/docs/reference/modules/snapshots.asciidoc, +IMPORTANT: The snapshot format can change across major versions, so if you have, +clusters on different versions trying to write the same repository, snapshots, +written by one version may not be visible to the other and the repository could, +be corrupted. While setting the repository to `readonly` on all but one of the, +clusters should work with multiple clusters differing by one major version, it, +is not a supported configuration., +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +                    Map<ShardId, IndexShardSnapshotStatus> shardStatuses =, +                        snapshotsService.snapshotShards(repositoryName, repositoryData, snapshotInfo);, +                    for (Map.Entry<ShardId, IndexShardSnapshotStatus> shardStatus : shardStatuses.entrySet()) {, +++ b/docs/CHANGELOG.asciidoc, +Fail snapshot operations early when creating or deleting a snapshot on a repository that has been, +written to by an older Elasticsearch after writing to it with a newer Elasticsearch version. ({pull}30140[#30140]), +, +++ b/docs/reference/modules/snapshots.asciidoc, +IMPORTANT: The snapshot format can change across major versions, so if you have, +clusters on different versions trying to write the same repository, snapshots, +written by one version may not be visible to the other and the repository could, +be corrupted. While setting the repository to `readonly` on all but one of the, +clusters should work with multiple clusters differing by one major version, it, +is not a supported configuration., +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +                    Map<ShardId, IndexShardSnapshotStatus> shardStatuses =, +                        snapshotsService.snapshotShards(repositoryName, repositoryData, snapshotInfo);, +                    for (Map.Entry<ShardId, IndexShardSnapshotStatus> shardStatus : shardStatuses.entrySet()) {, +++ b/server/src/main/java/org/elasticsearch/repositories/RepositoryData.java, +        final Map<String, SnapshotId> snapshots = new HashMap<>();, +        final Map<String, SnapshotState> snapshotStates = new HashMap<>();, +        final Map<IndexId, Set<SnapshotId>> indexSnapshots = new HashMap<>();, +, +                        final String indexName = parser.currentName();, +                        final Set<SnapshotId> snapshotIds = new LinkedHashSet<>();, +, +                        IndexId indexId = null;, +                            final String indexMetaFieldName = parser.currentName();, +                                indexId = new IndexId(indexName, parser.text());, +, +                                    SnapshotId snapshotId = snapshots.get(uuid);, +                                    if (snapshotId != null) {, +                                        snapshotIds.add(snapshotId);, +                                    } else {, +                                        // A snapshotted index references a snapshot which does not exist in, +                                        // the list of snapshots. This can happen when multiple clusters in, +                                        // different versions create or delete snapshot in the same repository., +                                        throw new ElasticsearchParseException("Detected a corrupted repository, index " + indexId, +                                            + " references an unknown snapshot uuid [" + uuid + "]");, +                                    }, +                        indexSnapshots.put(indexId, snapshotIds);, +++ b/docs/CHANGELOG.asciidoc, +Fail snapshot operations early when creating or deleting a snapshot on a repository that has been, +written to by an older Elasticsearch after writing to it with a newer Elasticsearch version. ({pull}30140[#30140]), +, +++ b/docs/reference/modules/snapshots.asciidoc, +IMPORTANT: The snapshot format can change across major versions, so if you have, +clusters on different versions trying to write the same repository, snapshots, +written by one version may not be visible to the other and the repository could, +be corrupted. While setting the repository to `readonly` on all but one of the, +clusters should work with multiple clusters differing by one major version, it, +is not a supported configuration., +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +                    Map<ShardId, IndexShardSnapshotStatus> shardStatuses =, +                        snapshotsService.snapshotShards(repositoryName, repositoryData, snapshotInfo);, +                    for (Map.Entry<ShardId, IndexShardSnapshotStatus> shardStatus : shardStatuses.entrySet()) {, +++ b/server/src/main/java/org/elasticsearch/repositories/RepositoryData.java, +        final Map<String, SnapshotId> snapshots = new HashMap<>();, +        final Map<String, SnapshotState> snapshotStates = new HashMap<>();, +        final Map<IndexId, Set<SnapshotId>> indexSnapshots = new HashMap<>();, +, +                        final String indexName = parser.currentName();, +                        final Set<SnapshotId> snapshotIds = new LinkedHashSet<>();, +, +                        IndexId indexId = null;, +                            final String indexMetaFieldName = parser.currentName();, +                                indexId = new IndexId(indexName, parser.text());, +, +                                    SnapshotId snapshotId = snapshots.get(uuid);, +                                    if (snapshotId != null) {, +                                        snapshotIds.add(snapshotId);, +                                    } else {, +                                        // A snapshotted index references a snapshot which does not exist in]