[+++ b/rest-api-spec/test/indices.stats/12_level.yaml, +  - is_true:  indices.test1.shards.0.0.commit.id, +  - is_true:  indices.test2.shards.0.0.commit.id, +++ b/rest-api-spec/test/indices.stats/12_level.yaml, +  - is_true:  indices.test1.shards.0.0.commit.id, +  - is_true:  indices.test2.shards.0.0.commit.id, +++ b/src/main/java/org/elasticsearch/action/admin/indices/stats/ShardStats.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.engine.CommitStats;, +    CommonStats commonStats;, +, +    @Nullable, +    CommitStats commitStats;, +        this.commonStats = new CommonStats(indexShard, flags);, +        this.commitStats = indexShard.commitStats();, +        return this.commonStats;, +    }, +, +    public CommitStats getCommitStats() {, +        return this.commitStats;, +        commonStats = CommonStats.readCommonStats(in);, +        commitStats = CommitStats.readOptionalCommitStatsFrom(in);, +        commonStats.writeTo(out);, +        out.writeOptionalStreamable(commitStats);, +        commonStats.toXContent(builder, params);, +        if (commitStats != null) {, +            commitStats.toXContent(builder, params);, +        }, +++ b/rest-api-spec/test/indices.stats/12_level.yaml, +  - is_true:  indices.test1.shards.0.0.commit.id, +  - is_true:  indices.test2.shards.0.0.commit.id, +++ b/src/main/java/org/elasticsearch/action/admin/indices/stats/ShardStats.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.engine.CommitStats;, +    CommonStats commonStats;, +, +    @Nullable, +    CommitStats commitStats;, +        this.commonStats = new CommonStats(indexShard, flags);, +        this.commitStats = indexShard.commitStats();, +        return this.commonStats;, +    }, +, +    public CommitStats getCommitStats() {, +        return this.commitStats;, +        commonStats = CommonStats.readCommonStats(in);, +        commitStats = CommitStats.readOptionalCommitStatsFrom(in);, +        commonStats.writeTo(out);, +        out.writeOptionalStreamable(commitStats);, +        commonStats.toXContent(builder, params);, +        if (commitStats != null) {, +            commitStats.toXContent(builder, params);, +        }, +++ b/src/main/java/org/elasticsearch/index/engine/CommitStats.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.engine;, +, +import org.apache.lucene.index.SegmentInfos;, +import org.elasticsearch.common.Base64;, +import org.elasticsearch.common.collect.MapBuilder;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Streamable;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +, +import java.io.IOException;, +import java.util.Map;, +, +/** a class the returns dynamic information with respect to the last commit point of this shard */, +public final class CommitStats implements Streamable, ToXContent {, +, +    private Map<String, String> userData;, +    private long generation;, +    private String id; // lucene commit id in base 64;, +, +    public CommitStats(SegmentInfos segmentInfos) {, +        // clone the map to protect against concurrent changes, +        userData = MapBuilder.<String, String>newMapBuilder().putAll(segmentInfos.getUserData()).immutableMap();, +        // lucene calls the current generation, last generation., +        generation = segmentInfos.getLastGeneration();, +        id = Base64.encodeBytes(segmentInfos.getId());]