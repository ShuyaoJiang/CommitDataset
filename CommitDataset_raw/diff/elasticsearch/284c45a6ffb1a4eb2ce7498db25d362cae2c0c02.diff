[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, +            if (indexMd.requireFilters().match(node.node()) == false) {, +            if (indexMd.includeFilters().match(node.node()) == false) {, +            if (clusterRequireFilters.match(node.node()) == false) {, +            if (clusterIncludeFilters.match(node.node()) == false) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/FilterAllocationDecider.java, +            if (indexMd.requireFilters().match(node.node()) == false) {, +            if (indexMd.includeFilters().match(node.node()) == false) {, +            if (clusterRequireFilters.match(node.node()) == false) {, +            if (clusterIncludeFilters.match(node.node()) == false) {, +++ b/server/src/test/java/org/elasticsearch/cluster/routing/allocation/FilterRoutingTests.java, +import org.elasticsearch.cluster.node.DiscoveryNodes.Builder;, +import java.util.HashMap;, +import java.util.Map;, +import static java.util.Collections.emptyMap;, +import static org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_EXCLUDE_GROUP_SETTING;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;, +import static org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider.CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING;, +import static org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider.CLUSTER_ROUTING_INCLUDE_GROUP_SETTING;, +import static org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider.CLUSTER_ROUTING_REQUIRE_GROUP_SETTING;, +import static org.elasticsearch.cluster.routing.allocation.decider.ThrottlingAllocationDecider.CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES_SETTING;, +    public void testClusterIncludeFiltersSingleAttribute() {, +        testClusterFilters(Settings.builder().put(CLUSTER_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "tag1", "value1,value2"),, +            DiscoveryNodes.builder(), +                .add(newNode("node1", attrMap("tag1", "value1"))), +                .add(newNode("node2", attrMap("tag1", "value2"))), +                .add(newNode("node3", attrMap("tag1", "value3"))), +                .add(newNode("node4", attrMap("tag1", "value4"))));, +    }, +, +    public void testClusterIncludeFiltersMultipleAttributes() {, +        testClusterFilters(Settings.builder(), +                .put(CLUSTER_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "tag1", "value1"), +                .put(CLUSTER_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "tag2", "value2"),, +            DiscoveryNodes.builder(), +                .add(newNode("node1", attrMap("tag1", "value1"))), +                .add(newNode("node2", attrMap("tag2", "value2"))), +                .add(newNode("node3", attrMap("tag1", "value3"))), +                .add(newNode("node4", attrMap("tag2", "value4"))));, +    }, +, +    public void testClusterIncludeFiltersOptionalAttribute() {, +        testClusterFilters(Settings.builder().put(CLUSTER_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "tag1", "value1,value2"),, +            DiscoveryNodes.builder(), +                .add(newNode("node1", attrMap("tag1", "value1"))), +                .add(newNode("node2", attrMap("tag1", "value2"))), +                .add(newNode("node3", attrMap())), +                .add(newNode("node4", attrMap())));, +    }, +, +    public void testClusterIncludeFiltersWildcards() {, +        testClusterFilters(Settings.builder(), +                .put(CLUSTER_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "tag1", "*incl*"), +                .put(CLUSTER_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "tag2", "*incl*"),, +            DiscoveryNodes.builder(), +                .add(newNode("node1", attrMap("tag1", "do_include_this"))), +                .add(newNode("node2", attrMap("tag2", "also_include_this"))), +                .add(newNode("node3", attrMap("tag1", "exclude_this"))), +                .add(newNode("node4", attrMap("tag2", "also_exclude_this"))));, +    }, +, +    public void testClusterExcludeFiltersSingleAttribute() {, +        testClusterFilters(Settings.builder().put(CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING.getKey() + "tag1", "value3,value4"),, +            DiscoveryNodes.builder(), +                .add(newNode("node1", attrMap("tag1", "value1"))), +                .add(newNode("node2", attrMap("tag1", "value2"))), +                .add(newNode("node3", attrMap("tag1", "value3"))), +                .add(newNode("node4", attrMap("tag1", "value4"))));, +    }, +, +    public void testClusterExcludeFiltersMultipleAttributes() {, +        testClusterFilters(Settings.builder(), +                .put(CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING.getKey() + "tag1", "value3"), +                .put(CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING.getKey() + "tag2", "value4"),, +            DiscoveryNodes.builder(), +                .add(newNode("node1", attrMap("tag1", "value1"))), +                .add(newNode("node2", attrMap("tag2", "value2"))), +                .add(newNode("node3", attrMap("tag1", "value3"))), +                .add(newNode("node4", attrMap("tag2", "value4"))));, +    }, +, +    public void testClusterExcludeFiltersOptionalAttribute() {, +        testClusterFilters(Settings.builder().put(CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING.getKey() + "tag1", "value3,value4"),, +            DiscoveryNodes.builder(), +                .add(newNode("node1", attrMap())), +                .add(newNode("node2", attrMap())), +                .add(newNode("node3", attrMap("tag1", "value3"))), +                .add(newNode("node4", attrMap("tag1", "value4"))));, +    }, +, +    public void testClusterExcludeFiltersWildcards() {, +        testClusterFilters(Settings.builder(), +                .put(CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING.getKey() + "tag1", "*excl*"), +                .put(CLUSTER_ROUTING_EXCLUDE_GROUP_SETTING.getKey() + "tag2", "*excl*"),, +            DiscoveryNodes.builder()]