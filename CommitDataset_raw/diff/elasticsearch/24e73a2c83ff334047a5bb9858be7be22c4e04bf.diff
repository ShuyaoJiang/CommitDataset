[+++ b/docs/community/integrations.asciidoc, +++ b/docs/community/integrations.asciidoc, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.translog.sync_interval`::, +++ b/docs/community/integrations.asciidoc, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.translog.sync_interval`::, +++ b/src/main/java/org/elasticsearch/action/ActionRequest.java, +    private boolean listenerThreaded = false;, +, +    /**, +     * Should the response listener be executed on a thread or not., +     * <p/>, +     * <p>When not executing on a thread, it will either be executed on the calling thread, or, +     * on an expensive, IO based, thread., +     */, +    public final boolean listenerThreaded() {, +        return this.listenerThreaded;, +    }, +, +    /**, +     * Sets if the response listener be executed on a thread or not., +     */, +    @SuppressWarnings("unchecked"), +    public final T listenerThreaded(boolean listenerThreaded) {, +        this.listenerThreaded = listenerThreaded;, +        return (T) this;, +    }, +, +++ b/docs/community/integrations.asciidoc, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.translog.sync_interval`::, +++ b/src/main/java/org/elasticsearch/action/ActionRequest.java, +    private boolean listenerThreaded = false;, +, +    /**, +     * Should the response listener be executed on a thread or not., +     * <p/>, +     * <p>When not executing on a thread, it will either be executed on the calling thread, or, +     * on an expensive, IO based, thread., +     */, +    public final boolean listenerThreaded() {, +        return this.listenerThreaded;, +    }, +, +    /**, +     * Sets if the response listener be executed on a thread or not., +     */, +    @SuppressWarnings("unchecked"), +    public final T listenerThreaded(boolean listenerThreaded) {, +        this.listenerThreaded = listenerThreaded;, +        return (T) this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +    public final RequestBuilder setListenerThreaded(boolean listenerThreaded) {, +        request.listenerThreaded(listenerThreaded);, +        return (RequestBuilder) this;, +    }, +, +    @SuppressWarnings("unchecked"), +        PlainListenableActionFuture<Response> future = new PlainListenableActionFuture<>(request.listenerThreaded(), threadPool);, +++ b/docs/community/integrations.asciidoc, +++ b/docs/reference/index-modules/translog.asciidoc, +`index.translog.sync_interval`::, +++ b/src/main/java/org/elasticsearch/action/ActionRequest.java, +    private boolean listenerThreaded = false;, +, +    /**, +     * Should the response listener be executed on a thread or not., +     * <p/>, +     * <p>When not executing on a thread, it will either be executed on the calling thread, or, +     * on an expensive, IO based, thread., +     */, +    public final boolean listenerThreaded() {, +        return this.listenerThreaded;, +    }, +, +    /**, +     * Sets if the response listener be executed on a thread or not., +     */, +    @SuppressWarnings("unchecked"), +    public final T listenerThreaded(boolean listenerThreaded) {, +        this.listenerThreaded = listenerThreaded;, +        return (T) this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +    public final RequestBuilder setListenerThreaded(boolean listenerThreaded) {, +        request.listenerThreaded(listenerThreaded);, +        return (RequestBuilder) this;, +    }, +, +    @SuppressWarnings("unchecked"), +        PlainListenableActionFuture<Response> future = new PlainListenableActionFuture<>(request.listenerThreaded(), threadPool);, +++ b/src/main/java/org/elasticsearch/action/TransportActionNodeProxy.java, +import org.elasticsearch.transport.BaseTransportResponseHandler;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportRequestOptions;, +import org.elasticsearch.transport.TransportService;]