[+++ b/docs/reference/analysis/analyzers/standard-analyzer.asciidoc, +Defaults to an 'empty' stopword list coming[1.0.0.Beta1, Previously , +defaulted to the English stopwords list], +++ b/docs/reference/analysis/analyzers/standard-analyzer.asciidoc, +Defaults to an 'empty' stopword list coming[1.0.0.Beta1, Previously , +defaulted to the English stopwords list], +++ b/src/main/java/org/elasticsearch/index/analysis/StandardAnalyzerProvider.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +    private final Version esVersion;, +        this.esVersion = indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, org.elasticsearch.Version.CURRENT);, +        final CharArraySet defaultStopwords;, +        if (esVersion.onOrAfter(Version.V_1_0_0_Beta1)) {, +            defaultStopwords = CharArraySet.EMPTY_SET;, +        } else {, +            defaultStopwords = StopAnalyzer.ENGLISH_STOP_WORDS_SET;, +        }, +, +        CharArraySet stopWords = Analysis.parseStopWords(env, settings, defaultStopwords, version);, +++ b/docs/reference/analysis/analyzers/standard-analyzer.asciidoc, +Defaults to an 'empty' stopword list coming[1.0.0.Beta1, Previously , +defaulted to the English stopwords list], +++ b/src/main/java/org/elasticsearch/index/analysis/StandardAnalyzerProvider.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +    private final Version esVersion;, +        this.esVersion = indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, org.elasticsearch.Version.CURRENT);, +        final CharArraySet defaultStopwords;, +        if (esVersion.onOrAfter(Version.V_1_0_0_Beta1)) {, +            defaultStopwords = CharArraySet.EMPTY_SET;, +        } else {, +            defaultStopwords = StopAnalyzer.ENGLISH_STOP_WORDS_SET;, +        }, +, +        CharArraySet stopWords = Analysis.parseStopWords(env, settings, defaultStopwords, version);, +++ b/src/main/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzers.java, +import org.apache.lucene.analysis.util.CharArraySet;, +    STANDARD(CachingStrategy.ELASTICSEARCH) { // we don't do stopwords anymore from 1.0Beta on, +            if (version.onOrAfter(Version.V_1_0_0_Beta1)) {, +                return new StandardAnalyzer(version.luceneVersion, CharArraySet.EMPTY_SET);, +            }, +++ b/docs/reference/analysis/analyzers/standard-analyzer.asciidoc, +Defaults to an 'empty' stopword list coming[1.0.0.Beta1, Previously , +defaulted to the English stopwords list], +++ b/src/main/java/org/elasticsearch/index/analysis/StandardAnalyzerProvider.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +    private final Version esVersion;, +        this.esVersion = indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, org.elasticsearch.Version.CURRENT);, +        final CharArraySet defaultStopwords;, +        if (esVersion.onOrAfter(Version.V_1_0_0_Beta1)) {, +            defaultStopwords = CharArraySet.EMPTY_SET;, +        } else {, +            defaultStopwords = StopAnalyzer.ENGLISH_STOP_WORDS_SET;, +        }, +, +        CharArraySet stopWords = Analysis.parseStopWords(env, settings, defaultStopwords, version);, +++ b/src/main/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzers.java, +import org.apache.lucene.analysis.util.CharArraySet;, +    STANDARD(CachingStrategy.ELASTICSEARCH) { // we don't do stopwords anymore from 1.0Beta on, +            if (version.onOrAfter(Version.V_1_0_0_Beta1)) {, +                return new StandardAnalyzer(version.luceneVersion, CharArraySet.EMPTY_SET);, +            }, +++ b/src/test/java/org/elasticsearch/count/query/SimpleQueryTests.java, +        countResponse = client().prepareCount().setQuery(QueryBuilders.matchQuery("field1", "the quick brown").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND).analyzer("stop")).execute().actionGet();, +    public void testMatchQueryZeroTermsQuery() throws IOException {, +        client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 1)), +                .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties"), +                        .startObject("field1").field("type", "string").field("analyzer", "classic").endObject(), +                        .startObject("field2").field("type", "string").field("analyzer", "classic").endObject(), +                        .endObject().endObject().endObject()), +                .execute().actionGet();, +    public void testMultiMatchQueryZeroTermsQuery() throws IOException {, +        client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", 1)), +                .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties"), +                        .startObject("field1").field("type", "string").field("analyzer", "classic").endObject(), +                        .startObject("field2").field("type", "string").field("analyzer", "classic").endObject(), +                        .endObject().endObject().endObject()), +                .execute().actionGet();, +++ b/docs/reference/analysis/analyzers/standard-analyzer.asciidoc, +Defaults to an 'empty' stopword list coming[1.0.0.Beta1, Previously , +defaulted to the English stopwords list], +++ b/src/main/java/org/elasticsearch/index/analysis/StandardAnalyzerProvider.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +    private final Version esVersion;, +        this.esVersion = indexSettings.getAsVersion(IndexMetaData.SETTING_VERSION_CREATED, org.elasticsearch.Version.CURRENT);, +        final CharArraySet defaultStopwords;, +        if (esVersion.onOrAfter(Version.V_1_0_0_Beta1)) {, +            defaultStopwords = CharArraySet.EMPTY_SET;, +        } else {, +            defaultStopwords = StopAnalyzer.ENGLISH_STOP_WORDS_SET;, +        }, +, +        CharArraySet stopWords = Analysis.parseStopWords(env, settings, defaultStopwords, version);, +++ b/src/main/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzers.java, +import org.apache.lucene.analysis.util.CharArraySet;, +    STANDARD(CachingStrategy.ELASTICSEARCH) { // we don't do stopwords anymore from 1.0Beta on, +            if (version.onOrAfter(Version.V_1_0_0_Beta1)) {, +                return new StandardAnalyzer(version.luceneVersion, CharArraySet.EMPTY_SET);]