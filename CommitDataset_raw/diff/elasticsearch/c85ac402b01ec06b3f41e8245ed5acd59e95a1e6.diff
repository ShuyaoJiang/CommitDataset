[+++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorQuerySearchIT.java, +import org.elasticsearch.test.ESIntegTestCase;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +public class PercolatorQuerySearchIT extends ESIntegTestCase {, +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test1"), +        assertAcked(client().admin().indices().prepareCreate("test2"), +        assertAcked(client().admin().indices().prepareCreate("test3"), +        assertAcked(client().admin().indices().prepareCreate("test1"), +        assertAcked(client().admin().indices().prepareCreate("test2"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorQuerySearchIT.java, +import org.elasticsearch.test.ESIntegTestCase;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +public class PercolatorQuerySearchIT extends ESIntegTestCase {, +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test1"), +        assertAcked(client().admin().indices().prepareCreate("test2"), +        assertAcked(client().admin().indices().prepareCreate("test3"), +        assertAcked(client().admin().indices().prepareCreate("test1"), +        assertAcked(client().admin().indices().prepareCreate("test2"), +        assertAcked(client().admin().indices().prepareCreate("test"), +        assertAcked(client().admin().indices().prepareCreate("test"), +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorQuerySearchTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.percolator;, +, +import org.apache.lucene.search.join.ScoreMode;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.support.WriteRequest;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.index.cache.bitset.BitsetFilterCache;, +import org.elasticsearch.index.fielddata.ScriptDocValues;, +import org.elasticsearch.index.query.Operator;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.script.MockScriptPlugin;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptType;, +import org.elasticsearch.search.lookup.LeafDocLookup;, +import org.elasticsearch.search.sort.SortOrder;, +import org.elasticsearch.test.ESSingleNodeTestCase;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.function.Function;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;, +, +public class PercolatorQuerySearchTests extends ESSingleNodeTestCase {, +, +    @Override, +    protected Collection<Class<? extends Plugin>> getPlugins() {, +        return Arrays.asList(PercolatorPlugin.class, CustomScriptPlugin.class);, +    }, +, +    public static class CustomScriptPlugin extends MockScriptPlugin {, +        @Override, +        protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {, +            Map<String, Function<Map<String, Object>, Object>> scripts = new HashMap<>();, +            scripts.put("1==1", vars -> Boolean.TRUE);]