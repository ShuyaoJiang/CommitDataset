[+++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +import java.util.Collections;, +    private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException {, +     * <p>, +     * <p>, +     * Checks if cgroup stats are available by checking for the existence of {@code /proc/self/cgroup},, +     * {@code /sys/fs/cgroup/cpu}, and {@code /sys/fs/cgroup/cpuacct}., +     *, +     * @return {@code true} if the stats are available, otherwise, +     * {@code false}, +     */, +    @SuppressForbidden(reason = "access /proc/self/cgroup, /sys/fs/cgroup/cpu, and /sys/fs/cgroup/cpuacct"), +    private boolean areCgroupStatsAvailable() {, +        if (!Files.exists(PathUtils.get("/proc/self/cgroup"))) {, +            return false;, +        }, +        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpu"))) {, +            return false;, +        }, +        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpuacct"))) {, +            return false;, +        }, +        return true;, +    }, +, +    /**, +            if (!areCgroupStatsAvailable()) {, +                return null;, +            } else {, +                assert !controllerMap.isEmpty();, +, +                assert cpuAcctControlGroup != null;, +                final long cgroupCpuAcctUsageNanos = getCgroupCpuAcctUsageNanos(cpuAcctControlGroup);, +, +                final String cpuControlGroup = controllerMap.get("cpu");, +                assert cpuControlGroup != null;, +                final long cgroupCpuAcctCpuCfsPeriodMicros = getCgroupCpuAcctCpuCfsPeriodMicros(cpuControlGroup);, +                final long cgroupCpuAcctCpuCfsQuotaMicros = getCgroupCpuAcctCpuCfsQuotaMicros(cpuControlGroup);, +                final OsStats.Cgroup.CpuStat cpuStat = getCgroupCpuAcctCpuStat(cpuControlGroup);, +, +                    cgroupCpuAcctUsageNanos,, +                    cgroupCpuAcctCpuCfsPeriodMicros,, +                    cgroupCpuAcctCpuCfsQuotaMicros,, +                    cpuStat);, +            }, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +import java.util.Collections;, +    private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException {, +     * <p>, +     * <p>, +     * Checks if cgroup stats are available by checking for the existence of {@code /proc/self/cgroup},, +     * {@code /sys/fs/cgroup/cpu}, and {@code /sys/fs/cgroup/cpuacct}., +     *, +     * @return {@code true} if the stats are available, otherwise, +     * {@code false}, +     */, +    @SuppressForbidden(reason = "access /proc/self/cgroup, /sys/fs/cgroup/cpu, and /sys/fs/cgroup/cpuacct"), +    private boolean areCgroupStatsAvailable() {, +        if (!Files.exists(PathUtils.get("/proc/self/cgroup"))) {, +            return false;, +        }, +        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpu"))) {, +            return false;, +        }, +        if (!Files.exists(PathUtils.get("/sys/fs/cgroup/cpuacct"))) {, +            return false;, +        }, +        return true;, +    }, +, +    /**, +            if (!areCgroupStatsAvailable()) {, +                return null;, +            } else {, +                assert !controllerMap.isEmpty();, +, +                assert cpuAcctControlGroup != null;, +                final long cgroupCpuAcctUsageNanos = getCgroupCpuAcctUsageNanos(cpuAcctControlGroup);, +, +                final String cpuControlGroup = controllerMap.get("cpu");, +                assert cpuControlGroup != null;, +                final long cgroupCpuAcctCpuCfsPeriodMicros = getCgroupCpuAcctCpuCfsPeriodMicros(cpuControlGroup);, +                final long cgroupCpuAcctCpuCfsQuotaMicros = getCgroupCpuAcctCpuCfsQuotaMicros(cpuControlGroup);, +                final OsStats.Cgroup.CpuStat cpuStat = getCgroupCpuAcctCpuStat(cpuControlGroup);, +, +                    cgroupCpuAcctUsageNanos,, +                    cgroupCpuAcctCpuCfsPeriodMicros,, +                    cgroupCpuAcctCpuCfsQuotaMicros,, +                    cpuStat);, +            }, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsStats.java, +            this.cpuAcctControlGroup = Objects.requireNonNull(cpuAcctControlGroup);, +            this.cpuControlGroup = Objects.requireNonNull(cpuControlGroup);, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +import java.util.Collections;, +    private long getCgroupCpuAcctCpuCfsQuotaMicros(final String controlGroup) throws IOException {, +     * <p>, +     * <p>, +     * Checks if cgroup stats are available by checking for the existence of {@code /proc/self/cgroup},, +     * {@code /sys/fs/cgroup/cpu}, and {@code /sys/fs/cgroup/cpuacct}.]