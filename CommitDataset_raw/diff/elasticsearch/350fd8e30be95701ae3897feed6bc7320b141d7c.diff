[+++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +                    } else if (logger.isTraceEnabled()) {, +                        logger.trace("{}: Failed to execute [{}]", t, shard, request);, +                if (logger.isTraceEnabled()) {, +            if (logger.isTraceEnabled()) {, +                logger.trace("got first-phase result from {}", result != null ? result.shardTarget() : null);, +            }, +, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +                    } else if (logger.isTraceEnabled()) {, +                        logger.trace("{}: Failed to execute [{}]", t, shard, request);, +                if (logger.isTraceEnabled()) {, +            if (logger.isTraceEnabled()) {, +                logger.trace("got first-phase result from {}", result != null ? result.shardTarget() : null);, +            }, +, +++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/MinDocCountTests.java, +import org.elasticsearch.action.search.SearchRequest;, +        testMinDocCountOnTerms("s", Script.NO, Terms.Order.count(true), ".*a.*", true);, +        testMinDocCountOnTerms("s", Script.YES, Terms.Order.count(true), ".*a.*", true);, +        testMinDocCountOnTerms("s", Script.NO, Terms.Order.count(false), ".*a.*", true);, +        testMinDocCountOnTerms("s", Script.YES, Terms.Order.count(false), ".*a.*", true);, +        testMinDocCountOnTerms(field, script, order, null, true);, +    private void testMinDocCountOnTerms(String field, Script script, Terms.Order order, String include, boolean retryOnFailure) throws Exception {, +            final SearchRequest request = client().prepareSearch("idx").setTypes("type"), +                            .minDocCount(minDocCount)).request();, +            final SearchResponse response = client().search(request).get();, +            try {, +            } catch (AssertionError ae) {, +                if (!retryOnFailure) {, +                    throw ae;, +                }, +                logger.info("test failed. trying to see if it recovers after 1m.", ae);, +                try {, +                    Thread.sleep(60000);, +                    logger.debug("1m passed. retrying.");, +                    testMinDocCountOnTerms(field, script, order, include, false);, +                } catch (Throwable secondFailure) {, +                    logger.error("exception on retry (will re-throw the original in a sec)", secondFailure);, +                } finally {, +                    throw ae;, +                }, +            }]