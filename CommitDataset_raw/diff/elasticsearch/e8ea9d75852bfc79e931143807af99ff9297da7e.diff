[+++ b/src/main/java/org/elasticsearch/common/lucene/search/function/RandomScoreFunction.java, + * Pseudo randomly generate a score for each {@link #score}., +        // intentionally does nothing, +        return prng.nextFloat();, +     * A non thread-safe PRNG, +        public float nextFloat() {, +            return seed / (float)(1 << 24);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/RandomScoreFunction.java, + * Pseudo randomly generate a score for each {@link #score}., +        // intentionally does nothing, +        return prng.nextFloat();, +     * A non thread-safe PRNG, +        public float nextFloat() {, +            return seed / (float)(1 << 24);, +++ b/src/test/java/org/elasticsearch/common/lucene/search/function/RandomScoreFunctionTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.lucene.search.function;, +, +import com.google.common.collect.Lists;, +import org.apache.lucene.document.Document;, +import org.apache.lucene.document.Field;, +import org.apache.lucene.document.TextField;, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.Explanation;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.TopDocs;, +import org.apache.lucene.store.RAMDirectory;, +import org.elasticsearch.common.lucene.Lucene;, +import org.elasticsearch.common.lucene.search.Queries;, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.junit.After;, +import org.junit.Test;, +, +import java.io.IOException;, +import java.util.List;, +, +import static org.hamcrest.Matchers.*;, +, +/**, + * Test {@link RandomScoreFunction}, + */, +public class RandomScoreFunctionTests extends ElasticsearchTestCase {, +, +    private final String[] ids = { "1", "2", "3" };, +    private IndexWriter writer;, +    private AtomicReader reader;, +, +    @After, +    public void closeReaderAndWriterIfUsed() throws IOException {, +        if (reader != null) {, +            reader.close();, +        }, +, +        if (writer != null) {, +            writer.close();, +        }, +    }, +, +    /**, +     * Create a "mock" {@link IndexSearcher} that uses an in-memory directory, +     * containing three documents whose IDs are "1", "2", and "3" respectively., +     * @return Never {@code null}, +     * @throws IOException if an unexpected error occurs while mocking, +     */, +    private IndexSearcher mockSearcher() throws IOException {, +        writer = new IndexWriter(new RAMDirectory(), new IndexWriterConfig(Lucene.VERSION, Lucene.STANDARD_ANALYZER));, +        for (String id : ids) {, +            Document document = new Document();, +            document.add(new TextField("_id", id, Field.Store.YES));, +            writer.addDocument(document);, +        }, +        reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(writer, true));, +        return new IndexSearcher(reader);, +    }, +, +    /**, +     * Given the same seed, the pseudo random number generator should match on, +     * each use given the same number of invocations., +     */, +    @Test, +    public void testPrngNextFloatIsConsistent() {, +        long seed = randomLong();]