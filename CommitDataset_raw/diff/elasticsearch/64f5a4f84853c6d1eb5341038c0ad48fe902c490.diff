[+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/FiltersTests.java, +            int i = 0;, +            for (String key : randomUnique(() -> randomAsciiOfLengthBetween(1, 20), size)) {, +                filters[i++] = new KeyedFilter(key,, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/FiltersTests.java, +            int i = 0;, +            for (String key : randomUnique(() -> randomAsciiOfLengthBetween(1, 20), size)) {, +                filters[i++] = new KeyedFilter(key,, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java, +import java.util.HashSet;, +     * Builds a set of unique items. Usually you'll get the requested count but you might get less than that number if the supplier returns, +     * lots of repeats. Make sure that the items properly implement equals and hashcode., +     */, +    public static <T> Set<T> randomUnique(Supplier<T> supplier, int targetCount) {, +        Set<T> things = new HashSet<>();, +        int maxTries = targetCount * 10;, +        for (int t = 0; t < maxTries; t++) {, +            if (things.size() == targetCount) {, +                return things;, +            }, +            things.add(supplier.get());, +        }, +        // Oh well, we didn't get enough unique things. It'll be ok., +        return things;, +    }, +, +    /**, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/FiltersTests.java, +            int i = 0;, +            for (String key : randomUnique(() -> randomAsciiOfLengthBetween(1, 20), size)) {, +                filters[i++] = new KeyedFilter(key,, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java, +import java.util.HashSet;, +     * Builds a set of unique items. Usually you'll get the requested count but you might get less than that number if the supplier returns, +     * lots of repeats. Make sure that the items properly implement equals and hashcode., +     */, +    public static <T> Set<T> randomUnique(Supplier<T> supplier, int targetCount) {, +        Set<T> things = new HashSet<>();, +        int maxTries = targetCount * 10;, +        for (int t = 0; t < maxTries; t++) {, +            if (things.size() == targetCount) {, +                return things;, +            }, +            things.add(supplier.get());, +        }, +        // Oh well, we didn't get enough unique things. It'll be ok., +        return things;, +    }, +, +    /**, +++ b/test/framework/src/test/java/org/elasticsearch/test/test/ESTestCaseTests.java, +import java.util.Set;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.hasSize;, +, +    public void testRandomUniqueNotUnique() {, +        assertThat(randomUnique(() -> 1, 10), hasSize(1));, +    }, +, +    public void testRandomUniqueTotallyUnique() {, +        AtomicInteger i = new AtomicInteger();, +        assertThat(randomUnique(i::incrementAndGet, 100), hasSize(100));, +    }, +, +    public void testRandomUniqueNormalUsageAlwayMoreThanOne() {, +        assertThat(randomUnique(() -> randomAsciiOfLengthBetween(1, 20), 10), hasSize(greaterThan(0)));, +    }]