[+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ssl/SSLConfigurationReloaderTests.java, +import java.util.concurrent.atomic.AtomicReference;, +        final AtomicReference<Exception> exceptionRef = new AtomicReference<>();, +        final CountDownLatch latch = new CountDownLatch(1);, +                try {, +                    super.reloadSSLContext(configuration);, +                } catch (Exception e) {, +                    exceptionRef.set(e);, +                    throw e;, +                } finally {, +                    latch.countDown();, +                }, +        try (OutputStream ignore = Files.newOutputStream(keystorePath, StandardOpenOption.TRUNCATE_EXISTING)) {, +        latch.await();, +        assertNotNull(exceptionRef.get());, +        assertThat(exceptionRef.get().getMessage(), containsString("failed to initialize a KeyManagerFactory"));, +        final AtomicReference<Exception> exceptionRef = new AtomicReference<>();, +        final CountDownLatch latch = new CountDownLatch(1);, +                try {, +                    super.reloadSSLContext(configuration);, +                } catch (Exception e) {, +                    exceptionRef.set(e);, +                    throw e;, +                } finally {, +                    latch.countDown();, +                }, +        try (OutputStream ignore = Files.newOutputStream(keyPath, StandardOpenOption.TRUNCATE_EXISTING)) {, +        latch.await();, +        assertNotNull(exceptionRef.get());, +        assertThat(exceptionRef.get().getMessage(), containsString("Error parsing Private Key"));, +        final AtomicReference<Exception> exceptionRef = new AtomicReference<>();, +        final CountDownLatch latch = new CountDownLatch(1);, +                try {, +                    super.reloadSSLContext(configuration);, +                } catch (Exception e) {, +                    exceptionRef.set(e);, +                    throw e;, +                } finally {, +                    latch.countDown();, +                }, +        try (OutputStream ignore = Files.newOutputStream(trustStorePath, StandardOpenOption.TRUNCATE_EXISTING)) {, +        latch.await();, +        assertNotNull(exceptionRef.get());, +        assertThat(exceptionRef.get().getMessage(), containsString("failed to initialize a TrustManagerFactory"));, +        final AtomicReference<Exception> exceptionRef = new AtomicReference<>();, +        final CountDownLatch latch = new CountDownLatch(1);, +                try {, +                    super.reloadSSLContext(configuration);, +                } catch (Exception e) {, +                    exceptionRef.set(e);, +                    throw e;, +                } finally {, +                    latch.countDown();, +                }, +        latch.await();, +        assertNotNull(exceptionRef.get());, +        assertThat(exceptionRef.get().getMessage(), containsString("failed to initialize a TrustManagerFactory"));]