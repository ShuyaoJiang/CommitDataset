[+++ b/server/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        Store.FORCE_RAM_TERM_DICT,, +++ b/server/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        Store.FORCE_RAM_TERM_DICT,, +++ b/server/src/main/java/org/elasticsearch/index/store/Store.java, +import org.apache.lucene.store.ByteBufferIndexInput;, +import org.apache.lucene.store.RandomAccessInput;, +import java.util.Set;, +    /**, +     * This is an escape hatch for lucenes internal optimization that checks if the IndexInput is an instance of ByteBufferIndexInput, +     * and if that's the case doesn't load the term dictionary into ram but loads it off disk iff the fields is not an ID like field., +     * Since this optimization has been added very late in the release processes we add this setting to allow users to opt-out of, +     * this by exploiting lucene internals and wrapping the IndexInput in a simple delegate., +     */, +    public static final Setting<Boolean> FORCE_RAM_TERM_DICT = Setting.boolSetting("index.force_memory_term_dictionary", false,, +        Property.IndexScope);, +        this.directory = new StoreDirectory(sizeCachingDir, Loggers.getLogger("index.store.deletes", shardId),, +            indexSettings.getValue(FORCE_RAM_TERM_DICT));, +        private final boolean forceRamTermDict;, +        StoreDirectory(ByteSizeCachingDirectory delegateDirectory, Logger deletesLogger, boolean forceRamTermDict) {, +            this.forceRamTermDict = forceRamTermDict;, +        public IndexInput openInput(String name, IOContext context) throws IOException {, +            IndexInput input = super.openInput(name, context);, +            if (name.endsWith(".tip") || name.endsWith(".cfs")) {, +                // only do this if we are reading cfs or tip file - all other files don't need this., +                if (forceRamTermDict && input instanceof ByteBufferIndexInput) {, +                    return new DeoptimizingIndexInput(input.toString(), input);, +                }, +            }, +            return input;, +        }, +, +        @Override, +    /**, +     * see {@link #FORCE_RAM_TERM_DICT} for details, +     */, +    private static final class DeoptimizingIndexInput extends IndexInput {, +, +        private final IndexInput in;, +, +        private DeoptimizingIndexInput(String resourceDescription, IndexInput in) {, +            super(resourceDescription);, +            this.in = in;, +        }, +, +        @Override, +        public IndexInput clone() {, +            return new DeoptimizingIndexInput(toString(), in.clone());, +        }, +, +        @Override, +        public void close() throws IOException {, +            in.close();, +        }, +, +        @Override, +        public long getFilePointer() {, +            return in.getFilePointer();, +        }, +, +        @Override, +        public void seek(long pos) throws IOException {, +            in.seek(pos);, +        }, +, +        @Override, +        public long length() {, +            return in.length();, +        }, +, +        @Override, +        public String toString() {, +            return in.toString();, +        }, +, +        @Override, +        public IndexInput slice(String sliceDescription, long offset, long length) throws IOException {, +            return new DeoptimizingIndexInput(sliceDescription, in.slice(sliceDescription, offset, length));, +        }, +, +        @Override, +        public RandomAccessInput randomAccessSlice(long offset, long length) throws IOException {, +            return in.randomAccessSlice(offset, length);, +        }, +, +        @Override, +        public byte readByte() throws IOException {, +            return in.readByte();, +        }, +, +        @Override, +        public void readBytes(byte[] b, int offset, int len) throws IOException {, +            in.readBytes(b, offset, len);, +        }, +, +        @Override, +        public void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException {, +            in.readBytes(b, offset, len, useBuffer);, +        }, +]