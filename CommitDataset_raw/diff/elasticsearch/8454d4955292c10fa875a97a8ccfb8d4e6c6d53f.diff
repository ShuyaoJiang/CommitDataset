[+++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +        String name = props.getProperty("name");, +        if (name == null || name.isEmpty()) {, +            throw new IllegalArgumentException("Property [name] is missing in [" + descriptor + "]");, +        }, +        PluginManager.checkForForbiddenName(name);, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +        String name = props.getProperty("name");, +        if (name == null || name.isEmpty()) {, +            throw new IllegalArgumentException("Property [name] is missing in [" + descriptor + "]");, +        }, +        PluginManager.checkForForbiddenName(name);, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +    private URL url;, +    public PluginManager(Environment environment, URL url, OutputMode outputMode, TimeValue timeout) {, +        if (name == null && url == null) {, +            throw new IllegalArgumentException("plugin name or url must be supplied with install.");, +        PluginHandle pluginHandle;, +        if (name != null) {, +            pluginHandle = PluginHandle.parse(name);, +        } else {, +            // if we have no name but url, use temporary name that will be overwritten later, +            pluginHandle = new PluginHandle("temp_name" + new Random().nextInt(), null, null);, +        }, +            URL pluginUrl = url;, +        // update name in handle based on 'name' property found in descriptor file, +        pluginHandle = new PluginHandle(info.getName(), pluginHandle.version, pluginHandle.user);, +        final Path extractLocation = pluginHandle.extractedDir(environment);, +        if (Files.exists(extractLocation)) {, +            throw new IOException("plugin directory " + extractLocation.toAbsolutePath() + " already exists. To update the plugin, uninstall it first using 'remove " + pluginHandle.name + "' command");, +        }, +, +    static void checkForForbiddenName(String name) {, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +        String name = props.getProperty("name");, +        if (name == null || name.isEmpty()) {, +            throw new IllegalArgumentException("Property [name] is missing in [" + descriptor + "]");, +        }, +        PluginManager.checkForForbiddenName(name);, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +    private URL url;, +    public PluginManager(Environment environment, URL url, OutputMode outputMode, TimeValue timeout) {, +        if (name == null && url == null) {, +            throw new IllegalArgumentException("plugin name or url must be supplied with install.");, +        PluginHandle pluginHandle;, +        if (name != null) {, +            pluginHandle = PluginHandle.parse(name);, +        } else {, +            // if we have no name but url, use temporary name that will be overwritten later, +            pluginHandle = new PluginHandle("temp_name" + new Random().nextInt(), null, null);, +        }, +            URL pluginUrl = url;, +        // update name in handle based on 'name' property found in descriptor file, +        pluginHandle = new PluginHandle(info.getName(), pluginHandle.version, pluginHandle.user);, +        final Path extractLocation = pluginHandle.extractedDir(environment);, +        if (Files.exists(extractLocation)) {, +            throw new IOException("plugin directory " + extractLocation.toAbsolutePath() + " already exists. To update the plugin, uninstall it first using 'remove " + pluginHandle.name + "' command");, +        }, +, +    static void checkForForbiddenName(String name) {, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManagerCliParser.java, +, +import java.net.MalformedURLException;, +import java.net.URL;, +, +            // install [plugin-name/url], +                return exitCmd(ExitStatus.USAGE, terminal, "plugin name or url is missing (type -h for help)");, +            }, +            String name = args[0];, +, +            URL optionalPluginUrl = null;, +            // try parsing cli argument as URL, +            try {, +                optionalPluginUrl = new URL(name);, +                name = null;, +            } catch (MalformedURLException e) {, +                // we tried to parse the cli argument as url and failed, +                // continue treating it as a symbolic plugin name like `analysis-icu` etc., +            return new Install(terminal, name, outputMode, optionalPluginUrl, timeout);, +        final URL url;, +        Install(Terminal terminal, String name, OutputMode outputMode, URL url, TimeValue timeout) {, +            if (name != null) {, +            } else {, +                terminal.println("-> Installing from " + url + "...");, +            }, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +        String name = props.getProperty("name");, +        if (name == null || name.isEmpty()) {, +            throw new IllegalArgumentException("Property [name] is missing in [" + descriptor + "]");, +        }, +        PluginManager.checkForForbiddenName(name);, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +    private URL url;, +    public PluginManager(Environment environment, URL url, OutputMode outputMode, TimeValue timeout) {, +        if (name == null && url == null) {, +            throw new IllegalArgumentException("plugin name or url must be supplied with install.");]