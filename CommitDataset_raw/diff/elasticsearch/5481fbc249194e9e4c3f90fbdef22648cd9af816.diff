[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'es.scripting.exception_for_missing_value', 'true', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'es.scripting.exception_for_missing_value', 'true', +++ b/docs/painless/painless-getting-started.asciidoc, +, +[float], +===== Missing values, +, +If you request the value from a field `field` that isn’t in, +the document, `doc['field'].value` for this document returns:, +, +- `0` if a `field` has a numeric datatype (long, double etc.), +- `false` is a `field` has a boolean datatype, +- epoch date if a `field` has a date datatype, +- `null` if a `field` has a string datatype, +- `null` if a `field` has a geo datatype, +- `""` if a `field` has a binary datatype, +, +IMPORTANT: Starting in 7.0, `doc['field'].value` throws an exception if, +the field is missing in a document. To enable this behavior now,, +set a <<jvm-options,`jvm.option`>>, +`-Des.scripting.exception_for_missing_value=true` on a node. If you do not enable, +this behavior, a deprecation warning is logged on start up., +, +To check if a document is missing a value, you can call, +`doc['field'].size() == 0`., +, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'es.scripting.exception_for_missing_value', 'true', +++ b/docs/painless/painless-getting-started.asciidoc, +, +[float], +===== Missing values, +, +If you request the value from a field `field` that isn’t in, +the document, `doc['field'].value` for this document returns:, +, +- `0` if a `field` has a numeric datatype (long, double etc.), +- `false` is a `field` has a boolean datatype, +- epoch date if a `field` has a date datatype, +- `null` if a `field` has a string datatype, +- `null` if a `field` has a geo datatype, +- `""` if a `field` has a binary datatype, +, +IMPORTANT: Starting in 7.0, `doc['field'].value` throws an exception if, +the field is missing in a document. To enable this behavior now,, +set a <<jvm-options,`jvm.option`>>, +`-Des.scripting.exception_for_missing_value=true` on a node. If you do not enable, +this behavior, a deprecation warning is logged on start up., +, +To check if a document is missing a value, you can call, +`doc['field'].size() == 0`., +, +, +++ b/modules/lang-painless/build.gradle, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'es.scripting.exception_for_missing_value', 'true', +++ b/docs/painless/painless-getting-started.asciidoc, +, +[float], +===== Missing values, +, +If you request the value from a field `field` that isn’t in, +the document, `doc['field'].value` for this document returns:, +, +- `0` if a `field` has a numeric datatype (long, double etc.), +- `false` is a `field` has a boolean datatype, +- epoch date if a `field` has a date datatype, +- `null` if a `field` has a string datatype, +- `null` if a `field` has a geo datatype, +- `""` if a `field` has a binary datatype, +, +IMPORTANT: Starting in 7.0, `doc['field'].value` throws an exception if, +the field is missing in a document. To enable this behavior now,, +set a <<jvm-options,`jvm.option`>>, +`-Des.scripting.exception_for_missing_value=true` on a node. If you do not enable, +this behavior, a deprecation warning is logged on start up., +, +To check if a document is missing a value, you can call, +`doc['field'].size() == 0`., +, +, +++ b/modules/lang-painless/build.gradle, +, +++ b/modules/lang-painless/src/test/resources/rest-api-spec/test/painless/20_scriptfield.yml, +                            source: "(doc['missing'].size() == 0 ? 0 : doc['missing'].value.length()) + params.x;", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            systemProperty 'es.scripting.exception_for_missing_value', 'true', +++ b/docs/painless/painless-getting-started.asciidoc, +, +[float], +===== Missing values, +, +If you request the value from a field `field` that isn’t in, +the document, `doc['field'].value` for this document returns:, +, +- `0` if a `field` has a numeric datatype (long, double etc.)]