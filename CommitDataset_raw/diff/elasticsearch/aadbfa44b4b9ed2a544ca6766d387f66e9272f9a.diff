[+++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +        private void finishHim() {, +                threadPool.executor(ThreadPool.Names.SEARCH).execute(new Runnable() {, +                    @Override, +                    public void run() {, +                        try {, +                        } catch (Throwable e) {, +                            ReduceSearchPhaseException failure = new ReduceSearchPhaseException("query_fetch", "", e, buildShardFailures());, +                            if (logger.isDebugEnabled()) {, +                                logger.debug("failed to reduce search", failure);, +                            }, +                            listener.onFailure(failure);, +                        }, +                    }, +                });, +            } catch (EsRejectedExecutionException ex) {, +                listener.onFailure(ex);, +            }, +, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +        private void finishHim() {, +                threadPool.executor(ThreadPool.Names.SEARCH).execute(new Runnable() {, +                    @Override, +                    public void run() {, +                        try {, +                        } catch (Throwable e) {, +                            ReduceSearchPhaseException failure = new ReduceSearchPhaseException("query_fetch", "", e, buildShardFailures());, +                            if (logger.isDebugEnabled()) {, +                                logger.debug("failed to reduce search", failure);, +                            }, +                            listener.onFailure(failure);, +                        }, +                    }, +                });, +            } catch (EsRejectedExecutionException ex) {, +                listener.onFailure(ex);, +            }, +, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +        private void finishHim() {, +                threadPool.executor(ThreadPool.Names.SEARCH).execute(new Runnable() {, +                    @Override, +                    public void run() {, +                        try {, +                            final InternalSearchResponse internalResponse = searchPhaseController.merge(sortedShardList, queryResults, fetchResults);, +                            String scrollId = null;, +                            if (request.scroll() != null) {, +                                scrollId = TransportSearchHelper.buildScrollId(request.searchType(), firstResults, null);, +                            }, +                            listener.onResponse(new SearchResponse(internalResponse, scrollId, expectedSuccessfulOps, successfulOps.get(), buildTookInMillis(), buildShardFailures()));, +                });, +            } catch (EsRejectedExecutionException ex) {, +                try {, +                    releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +                } finally {, +                    listener.onFailure(ex);, +            }, +, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +        private void finishHim() {, +                threadPool.executor(ThreadPool.Names.SEARCH).execute(new Runnable() {, +                    @Override, +                    public void run() {, +                        try {, +                        } catch (Throwable e) {, +                            ReduceSearchPhaseException failure = new ReduceSearchPhaseException("query_fetch", "", e, buildShardFailures());, +                            if (logger.isDebugEnabled()) {, +                                logger.debug("failed to reduce search", failure);, +                            }, +                            listener.onFailure(failure);, +                        }, +                    }, +                });, +            } catch (EsRejectedExecutionException ex) {, +                listener.onFailure(ex);, +            }, +, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +        private void finishHim() {, +                threadPool.executor(ThreadPool.Names.SEARCH).execute(new Runnable() {, +                    @Override, +                    public void run() {, +                        try {, +                            final InternalSearchResponse internalResponse = searchPhaseController.merge(sortedShardList, queryResults, fetchResults);, +                            String scrollId = null;, +                            if (request.scroll() != null) {, +                                scrollId = TransportSearchHelper.buildScrollId(request.searchType(), firstResults, null);, +                            }, +                            listener.onResponse(new SearchResponse(internalResponse, scrollId, expectedSuccessfulOps, successfulOps.get(), buildTookInMillis(), buildShardFailures()));, +                });, +            } catch (EsRejectedExecutionException ex) {, +                try {, +                    releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +                } finally {, +                    listener.onFailure(ex);]