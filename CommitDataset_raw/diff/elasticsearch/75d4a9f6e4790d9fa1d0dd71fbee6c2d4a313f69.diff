[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +    /** Returns true iff existing index has the same {@link IndexMetaData} instance */, +    public boolean hasIndexMetaData(final IndexMetaData indexMetaData) {, +        return indices.get(indexMetaData.getIndex().getName()) == indexMetaData;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +    /** Returns true iff existing index has the same {@link IndexMetaData} instance */, +    public boolean hasIndexMetaData(final IndexMetaData indexMetaData) {, +        return indices.get(indexMetaData.getIndex().getName()) == indexMetaData;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayMetaState.java, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;, +import org.elasticsearch.plugins.MetaDataUpgrader;, +import java.util.HashMap;, +import java.util.Map;, +                            MetaDataIndexUpgradeService metaDataIndexUpgradeService, MetaDataUpgrader metaDataUpgrader), +        throws Exception {, +                final MetaData metaData = metaStateService.loadFullState();, +                final MetaData upgradedMetaData = upgradeMetaData(metaData, metaDataIndexUpgradeService, metaDataUpgrader);, +                // We finished global state validation and successfully checked all indices for backward compatibility, +                // and found no non-upgradable indices, which means the upgrade can continue., +                // Now it's safe to overwrite global and index metadata., +                if (metaData != upgradedMetaData) {, +                    if (MetaData.isGlobalStateEquals(metaData, upgradedMetaData) == false) {, +                        metaStateService.writeGlobalState("upgrade", upgradedMetaData);, +                    }, +                    for (IndexMetaData indexMetaData : upgradedMetaData) {, +                        if (metaData.hasIndexMetaData(indexMetaData) == false) {, +                            metaStateService.writeIndex("upgrade", indexMetaData);, +                        }, +                    }, +                }, +     * MetaDataIndexUpgradeService might also update obsolete settings if needed., +     * Allows upgrading global custom meta data via {@link MetaDataUpgrader#customMetaDataUpgraders}, +     *, +     * @return input <code>metaData</code> if no upgrade is needed or an upgraded metaData, +    static MetaData upgradeMetaData(MetaData metaData,, +                                    MetaDataIndexUpgradeService metaDataIndexUpgradeService,, +                                    MetaDataUpgrader metaDataUpgrader) throws Exception {, +        // upgrade index meta data, +        boolean changed = false;, +        final MetaData.Builder upgradedMetaData = MetaData.builder(metaData);, +            changed |= indexMetaData != newMetaData;, +            upgradedMetaData.put(newMetaData, false);, +        // collect current customs, +        Map<String, MetaData.Custom> existingCustoms = new HashMap<>();, +        for (ObjectObjectCursor<String, MetaData.Custom> customCursor : metaData.customs()) {, +            existingCustoms.put(customCursor.key, customCursor.value);, +        // upgrade global custom meta data, +        Map<String, MetaData.Custom> upgradedCustoms = metaDataUpgrader.customMetaDataUpgraders.apply(existingCustoms);, +        if (upgradedCustoms.equals(existingCustoms) == false) {, +            existingCustoms.keySet().forEach(upgradedMetaData::removeCustom);, +            for (Map.Entry<String, MetaData.Custom> upgradedCustomEntry : upgradedCustoms.entrySet()) {, +                upgradedMetaData.putCustom(upgradedCustomEntry.getKey(), upgradedCustomEntry.getValue());, +            changed = true;, +        }, +        return changed ? upgradedMetaData.build() : metaData;, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +    /** Returns true iff existing index has the same {@link IndexMetaData} instance */, +    public boolean hasIndexMetaData(final IndexMetaData indexMetaData) {, +        return indices.get(indexMetaData.getIndex().getName()) == indexMetaData;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayMetaState.java, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;, +import org.elasticsearch.plugins.MetaDataUpgrader;, +import java.util.HashMap;, +import java.util.Map;, +                            MetaDataIndexUpgradeService metaDataIndexUpgradeService, MetaDataUpgrader metaDataUpgrader), +        throws Exception {, +                final MetaData metaData = metaStateService.loadFullState();, +                final MetaData upgradedMetaData = upgradeMetaData(metaData, metaDataIndexUpgradeService, metaDataUpgrader);, +                // We finished global state validation and successfully checked all indices for backward compatibility, +                // and found no non-upgradable indices, which means the upgrade can continue., +                // Now it's safe to overwrite global and index metadata., +                if (metaData != upgradedMetaData) {, +                    if (MetaData.isGlobalStateEquals(metaData, upgradedMetaData) == false) {, +                        metaStateService.writeGlobalState("upgrade", upgradedMetaData);, +                    }, +                    for (IndexMetaData indexMetaData : upgradedMetaData) {, +                        if (metaData.hasIndexMetaData(indexMetaData) == false) {, +                            metaStateService.writeIndex("upgrade", indexMetaData);, +                        }, +                    }, +                }, +     * MetaDataIndexUpgradeService might also update obsolete settings if needed., +     * Allows upgrading global custom meta data via {@link MetaDataUpgrader#customMetaDataUpgraders}, +     *, +     * @return input <code>metaData</code> if no upgrade is needed or an upgraded metaData, +    static MetaData upgradeMetaData(MetaData metaData,, +                                    MetaDataIndexUpgradeService metaDataIndexUpgradeService,, +                                    MetaDataUpgrader metaDataUpgrader) throws Exception {, +        // upgrade index meta data, +        boolean changed = false;, +        final MetaData.Builder upgradedMetaData = MetaData.builder(metaData);, +            changed |= indexMetaData != newMetaData;, +            upgradedMetaData.put(newMetaData, false);, +        // collect current customs]