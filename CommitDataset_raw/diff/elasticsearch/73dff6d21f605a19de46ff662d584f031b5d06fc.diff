[+++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +        return new SecureStringSetting(name, fallback, properties);, +        return new InsecureStringSetting(name);, +        return new SecureFileSetting(name, fallback, properties);, +    }, +, +    private static class SecureStringSetting extends SecureSetting<SecureString> {, +        private final Setting<SecureString> fallback;, +, +        private SecureStringSetting(String name, Setting<SecureString> fallback, Property... properties) {, +            super(name, properties);, +            this.fallback = fallback;, +        }, +, +        @Override, +        protected SecureString getSecret(SecureSettings secureSettings) throws GeneralSecurityException {, +            return secureSettings.getString(getKey());, +        }, +, +        @Override, +        SecureString getFallback(Settings settings) {, +            if (fallback != null) {, +                return fallback.get(settings);, +            }, +            return new SecureString(new char[0]); // this means "setting does not exist", +        }, +    }, +, +    private static class InsecureStringSetting extends Setting<SecureString> {, +        private final String name;, +, +        private InsecureStringSetting(String name) {, +            super(name, "", SecureString::new, Property.Deprecated, Property.Filtered, Property.NodeScope);, +            this.name = name;, +        }, +, +        @Override, +        public SecureString get(Settings settings) {, +            if (ALLOW_INSECURE_SETTINGS == false && exists(settings)) {, +                throw new IllegalArgumentException("Setting [" + name + "] is insecure, " +, +                    "but property [allow_insecure_settings] is not set");, +            }, +            return super.get(settings);, +        }, +    }, +, +    private static class SecureFileSetting extends SecureSetting<InputStream> {, +        private final Setting<InputStream> fallback;, +, +        private SecureFileSetting(String name, Setting<InputStream> fallback, Property... properties) {, +            super(name, properties);, +            this.fallback = fallback;, +        }, +, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/SecureSetting.java, +        return new SecureStringSetting(name, fallback, properties);, +        return new InsecureStringSetting(name);, +        return new SecureFileSetting(name, fallback, properties);, +    }, +, +    private static class SecureStringSetting extends SecureSetting<SecureString> {, +        private final Setting<SecureString> fallback;, +, +        private SecureStringSetting(String name, Setting<SecureString> fallback, Property... properties) {, +            super(name, properties);, +            this.fallback = fallback;, +        }, +, +        @Override, +        protected SecureString getSecret(SecureSettings secureSettings) throws GeneralSecurityException {, +            return secureSettings.getString(getKey());, +        }, +, +        @Override, +        SecureString getFallback(Settings settings) {, +            if (fallback != null) {, +                return fallback.get(settings);, +            }, +            return new SecureString(new char[0]); // this means "setting does not exist", +        }, +    }, +, +    private static class InsecureStringSetting extends Setting<SecureString> {, +        private final String name;, +, +        private InsecureStringSetting(String name) {, +            super(name, "", SecureString::new, Property.Deprecated, Property.Filtered, Property.NodeScope);, +            this.name = name;, +        }, +, +        @Override, +        public SecureString get(Settings settings) {, +            if (ALLOW_INSECURE_SETTINGS == false && exists(settings)) {, +                throw new IllegalArgumentException("Setting [" + name + "] is insecure, " +, +                    "but property [allow_insecure_settings] is not set");, +            }, +            return super.get(settings);, +        }, +    }]