[+++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +        return binarySearch(a, key, 1, a.ordinals().getNumOrds());, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +        return binarySearch(a, key, 1, a.ordinals().getNumOrds());, +++ b/src/test/java/org/elasticsearch/test/integration/search/sort/SimpleSortTests.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Random;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;, +, +    public void testIssue2991() {, +        for (int i = 1; i < 4; i++) {, +            try {, +                client.admin().indices().prepareDelete("test").execute().actionGet();, +            } catch (Exception e) {, +                // ignore, +            }, +            client.admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards", i).put("index.number_of_replicas", 0)).execute().actionGet();, +            client.admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();, +            client.prepareIndex("test", "type", "1").setSource("tag", "alpha").execute().actionGet();, +            client.admin().indices().prepareRefresh().execute().actionGet();, +, +            client.prepareIndex("test", "type", "3").setSource("tag", "gamma").execute().actionGet();, +            client.admin().indices().prepareRefresh().execute().actionGet();, +, +            client.prepareIndex("test", "type", "4").setSource("tag", "delta").execute().actionGet();, +            , +            client.admin().indices().prepareRefresh().execute().actionGet();, +            client.prepareIndex("test", "type", "2").setSource("tag", "beta").execute().actionGet();, +            , +            client.admin().indices().prepareRefresh().execute().actionGet();, +            SearchResponse resp = client.prepareSearch("test").setSize(2).setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("tag").order(SortOrder.ASC)).execute().actionGet();, +            assertHitCount(resp, 4);, +            assertThat(resp.getHits().hits().length, equalTo(2));, +            assertFirstHit(resp, hasId("1"));, +            assertSecondHit(resp, hasId("2"));, +            , +            resp = client.prepareSearch("test").setSize(2).setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("tag").order(SortOrder.DESC)).execute().actionGet();, +            assertHitCount(resp, 4);, +            assertThat(resp.getHits().hits().length, equalTo(2));, +            assertFirstHit(resp, hasId("3"));, +            assertSecondHit(resp, hasId("4"));, +        }, +    }, +, +    @Test, +        final long seed = System.currentTimeMillis();, +        logger.info("testSimpleSorts SEED:[{}]", seed);, +        Random random = new Random(seed);, +        List<IndexRequestBuilder> builders = new ArrayList<IndexRequestBuilder>();, +            IndexRequestBuilder builder = client.prepareIndex("test", "type1", Integer.toString(i)).setSource(jsonBuilder().startObject(), +                    .endObject());, +            builders.add(builder);, +        }, +        Collections.shuffle(builders, random);, +        for (IndexRequestBuilder builder : builders) {, +            builder.execute().actionGet();, +            if (random.nextBoolean()) {, +                if (random.nextInt(5) != 0) {, +                    client.admin().indices().prepareRefresh().execute().actionGet();, +                } else {, +                  client.admin().indices().prepareFlush().execute().actionGet();, +                }, +        }, +        int size = 1 + random.nextInt(10);, +                .setSize(size), +        assertThat(searchResponse.getHits().hits().length, equalTo(size));, +        for (int i = 0; i < size; i++) {, +        size = 1 + random.nextInt(10);, +                .setSize(size), +        assertThat(searchResponse.getHits().hits().length, equalTo(size));, +        for (int i = 0; i < size; i++) {, +        size = 1 + random.nextInt(10);, +                .setSize(size), +        assertThat(searchResponse.getHits().hits().length, equalTo(size));, +        for (int i = 0; i < size; i++) {, +        size = 1 + random.nextInt(10);, +                .setSize(size), +        assertThat(searchResponse.getHits().hits().length, equalTo(size));, +        for (int i = 0; i < size; i++) {, +        size = 1 + random.nextInt(10);, +                .setSize(size), +        assertThat(searchResponse.getHits().hits().length, equalTo(size));, +        for (int i = 0; i < size; i++) {, +        size = 1 + random.nextInt(10);, +                .setSize(size), +        assertThat(searchResponse.getHits().hits().length, equalTo(size));, +        for (int i = 0; i < size; i++) {, +        size = 1 + random.nextInt(10);, +                .setSize(size), +        assertThat(searchResponse.getHits().hits().length, equalTo(size));, +        for (int i = 0; i < size; i++) {, +        size = 1 + random.nextInt(10);, +                .setSize(size), +        assertThat(searchResponse.getHits().hits().length, equalTo(size));, +        for (int i = 0; i < size; i++) {, +        size = 1 + random.nextInt(10);]