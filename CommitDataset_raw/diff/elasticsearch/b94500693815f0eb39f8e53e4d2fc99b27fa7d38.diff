[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +    public static Cast getLegalCast(Location location, Class<?> actual, Class<?> expected, boolean explicit, boolean internal) {, +        Objects.requireNonNull(actual);, +        Objects.requireNonNull(expected);, +    public static Object constCast(Location location, Object constant, Cast cast) {, +            Number number;, +    public static Class<?> promoteNumeric(Class<?> from, boolean decimal) {, +        if (from == def.class || from == double.class && decimal || from == float.class && decimal || from == long.class) {, +            return from;, +        } else if (from == int.class || from == char.class || from == short.class || from == byte.class) {, +            return int.class;, +    public static Class<?> promoteNumeric(Class<?> from0, Class<?> from1, boolean decimal) {, +        if (from0 == def.class || from1 == def.class) {, +            return def.class;, +            if (from0 == double.class || from1 == double.class) {, +                return double.class;, +            } else if (from0 == float.class || from1 == float.class) {, +                return float.class;, +        if (from0 == long.class || from1 == long.class) {, +            return long.class;, +        } else if (from0 == int.class   || from1 == int.class   ||, +                   from0 == char.class  || from1 == char.class  ||, +                   from0 == short.class || from1 == short.class ||, +                   from0 == byte.class  || from1 == byte.class) {, +            return int.class;, +    public static Class<?> promoteAdd(Class<?> from0, Class<?> from1) {, +        if (from0 == String.class || from1 == String.class) {, +            return String.class;, +    public static Class<?> promoteXor(Class<?> from0, Class<?> from1) {, +        if (from0 == def.class || from1 == def.class) {, +            return def.class;, +        if (from0 == boolean.class || from1 == boolean.class) {, +            return boolean.class;, +    public static Class<?> promoteEquality(Class<?> from0, Class<?> from1) {, +        if (from0 == def.class || from1 == def.class) {, +            return def.class;, +        if (from0.isPrimitive() && from1.isPrimitive()) {, +            if (from0 == boolean.class && from1 == boolean.class) {, +                return boolean.class;, +        return Object.class;, +    public static Class<?> promoteConditional(Class<?> from0, Class<?> from1, Object const0, Object const1) {, +        if (from0 == from1) {, +        if (from0 == def.class || from1 == def.class) {, +            return def.class;, +        if (from0.isPrimitive() && from1.isPrimitive()) {, +            if (from0 == boolean.class && from1 == boolean.class) {, +                return boolean.class;, +            if (from0 == double.class || from1 == double.class) {, +                return double.class;, +            } else if (from0 == float.class || from1 == float.class) {, +                return float.class;, +            } else if (from0 == long.class || from1 == long.class) {, +                return long.class;, +                if (from0 == byte.class) {, +                    if (from1 == byte.class) {, +                        return byte.class;, +                    } else if (from1 == short.class) {, +                                return byte.class;, +                        return short.class;, +                    } else if (from1 == char.class) {, +                        return int.class;, +                    } else if (from1 == int.class) {, +                                return byte.class;, +                        return int.class;, +                } else if (from0 == short.class) {, +                    if (from1 == byte.class) {, +                                return byte.class;, +                        return short.class;, +                    } else if (from1 == short.class) {, +                        return short.class;, +                    } else if (from1 == char.class) {, +                        return int.class;, +                    } else if (from1 == int.class) {, +                                return short.class;, +                        return int.class;, +                } else if (from0 == char.class) {, +                    if (from1 == byte.class) {, +                        return int.class;, +                    } else if (from1 == short.class) {, +                        return int.class;, +                    } else if (from1 == char.class) {, +                        return char.class;, +                    } else if (from1 == int.class) {, +                                return byte.class;, +                        return int.class;, +                } else if (from0 == int.class) {, +                    if (from1 == byte.class) {, +                                return byte.class;, +                        return int.class;, +                    } else if (from1 == short.class) {, +                                return byte.class;, +                        return int.class;, +                    } else if (from1 == char.class) {, +                                return byte.class;, +                        return int.class;, +                    } else if (from1 == int.class) {, +                        return int.class;, +        return Object.class;, +    }, +]