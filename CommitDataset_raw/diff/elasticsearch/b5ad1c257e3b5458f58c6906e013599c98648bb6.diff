[+++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +        void executeSecondPhase(final int shardIndex, final DfsSearchResult dfsResult, final AtomicInteger counter, final DiscoveryNode node, final QuerySearchRequest querySearchRequest) {, +                    // the query might not have been executed at all (for example because thread pool rejected execution), +                    // and the search context that was created in dfs phase might not be released., +                    // release it again to be in the safe side, +                    sendReleaseSearchContext(querySearchRequest.id(), node);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +        void executeSecondPhase(final int shardIndex, final DfsSearchResult dfsResult, final AtomicInteger counter, final DiscoveryNode node, final QuerySearchRequest querySearchRequest) {, +                    // the query might not have been executed at all (for example because thread pool rejected execution), +                    // and the search context that was created in dfs phase might not be released., +                    // release it again to be in the safe side, +                    sendReleaseSearchContext(querySearchRequest.id(), node);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +        void executeQuery(final int shardIndex, final DfsSearchResult dfsResult, final AtomicInteger counter, final QuerySearchRequest querySearchRequest, final DiscoveryNode node) {, +                    // the query might not have been executed at all (for example because thread pool rejected execution), +                    // and the search context that was created in dfs phase might not be released., +                    // release it again to be in the safe side, +                    sendReleaseSearchContext(querySearchRequest.id(), node);, +                    // the search context might not be cleared on the node where the fetch was executed for example, +                    // because the action was rejected by the thread pool. in this case we need to send a dedicated, +                    // request to clear the search context. by setting docIdsToLoad to null, the context will be cleared, +                    // in TransportSearchTypeAction.releaseIrrelevantSearchContexts() after the search request is done., +                    docIdsToLoad.set(shardIndex, null);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +        void executeSecondPhase(final int shardIndex, final DfsSearchResult dfsResult, final AtomicInteger counter, final DiscoveryNode node, final QuerySearchRequest querySearchRequest) {, +                    // the query might not have been executed at all (for example because thread pool rejected execution), +                    // and the search context that was created in dfs phase might not be released., +                    // release it again to be in the safe side, +                    sendReleaseSearchContext(querySearchRequest.id(), node);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +        void executeQuery(final int shardIndex, final DfsSearchResult dfsResult, final AtomicInteger counter, final QuerySearchRequest querySearchRequest, final DiscoveryNode node) {, +                    // the query might not have been executed at all (for example because thread pool rejected execution), +                    // and the search context that was created in dfs phase might not be released., +                    // release it again to be in the safe side, +                    sendReleaseSearchContext(querySearchRequest.id(), node);, +                    // the search context might not be cleared on the node where the fetch was executed for example, +                    // because the action was rejected by the thread pool. in this case we need to send a dedicated, +                    // request to clear the search context. by setting docIdsToLoad to null, the context will be cleared, +                    // in TransportSearchTypeAction.releaseIrrelevantSearchContexts() after the search request is done., +                    docIdsToLoad.set(shardIndex, null);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +import org.elasticsearch.search.fetch.ShardFetchSearchRequest;, +                    // the search context might not be cleared on the node where the fetch was executed for example, +                    // because the action was rejected by the thread pool. in this case we need to send a dedicated, +                    // request to clear the search context. by setting docIdsToLoad to null, the context will be cleared, +                    // in TransportSearchTypeAction.releaseIrrelevantSearchContexts() after the search request is done., +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +        void executeSecondPhase(final int shardIndex, final DfsSearchResult dfsResult, final AtomicInteger counter, final DiscoveryNode node, final QuerySearchRequest querySearchRequest) {, +                    // the query might not have been executed at all (for example because thread pool rejected execution), +                    // and the search context that was created in dfs phase might not be released., +                    // release it again to be in the safe side, +                    sendReleaseSearchContext(querySearchRequest.id(), node);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +        void executeQuery(final int shardIndex, final DfsSearchResult dfsResult, final AtomicInteger counter, final QuerySearchRequest querySearchRequest, final DiscoveryNode node) {, +                    // the query might not have been executed at all (for example because thread pool rejected execution), +                    // and the search context that was created in dfs phase might not be released., +                    // release it again to be in the safe side, +                    sendReleaseSearchContext(querySearchRequest.id(), node);, +                    // the search context might not be cleared on the node where the fetch was executed for example, +                    // because the action was rejected by the thread pool. in this case we need to send a dedicated, +                    // request to clear the search context. by setting docIdsToLoad to null, the context will be cleared, +                    // in TransportSearchTypeAction.releaseIrrelevantSearchContexts() after the search request is done., +                    docIdsToLoad.set(shardIndex, null);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +import org.elasticsearch.search.fetch.ShardFetchSearchRequest;, +                    // the search context might not be cleared on the node where the fetch was executed for example, +                    // because the action was rejected by the thread pool. in this case we need to send a dedicated, +                    // request to clear the search context. by setting docIdsToLoad to null, the context will be cleared, +                    // in TransportSearchTypeAction.releaseIrrelevantSearchContexts() after the search request is done., +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +                    sendReleaseSearchContext(entry.value.id(), node);, +                            sendReleaseSearchContext(entry.value.queryResult().id(), node);, +        protected void sendReleaseSearchContext(long contextId, DiscoveryNode node) {, +            if (node != null) {, +                searchService.sendFreeContext(node, contextId, request);, +            }, +        }, +, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryAndFetchAction.java, +        void executeSecondPhase(final int shardIndex, final DfsSearchResult dfsResult, final AtomicInteger counter, final DiscoveryNode node, final QuerySearchRequest querySearchRequest) {, +                    // the query might not have been executed at all (for example because thread pool rejected execution), +                    // and the search context that was created in dfs phase might not be released., +                    // release it again to be in the safe side, +                    sendReleaseSearchContext(querySearchRequest.id(), node);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +        void executeQuery(final int shardIndex, final DfsSearchResult dfsResult, final AtomicInteger counter, final QuerySearchRequest querySearchRequest, final DiscoveryNode node) {, +                    // the query might not have been executed at all (for example because thread pool rejected execution), +                    // and the search context that was created in dfs phase might not be released., +                    // release it again to be in the safe side, +                    sendReleaseSearchContext(querySearchRequest.id(), node);, +                    // the search context might not be cleared on the node where the fetch was executed for example, +                    // because the action was rejected by the thread pool. in this case we need to send a dedicated, +                    // request to clear the search context. by setting docIdsToLoad to null, the context will be cleared, +                    // in TransportSearchTypeAction.releaseIrrelevantSearchContexts() after the search request is done., +                    docIdsToLoad.set(shardIndex, null);, +++ b/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +import org.elasticsearch.search.fetch.ShardFetchSearchRequest;, +                    // the search context might not be cleared on the node where the fetch was executed for example, +                    // because the action was rejected by the thread pool. in this case we need to send a dedicated, +                    // request to clear the search context. by setting docIdsToLoad to null, the context will be cleared]