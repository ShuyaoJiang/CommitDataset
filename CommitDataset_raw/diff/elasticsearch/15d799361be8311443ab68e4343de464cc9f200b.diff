[+++ b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffTests.java, +                setRandomIndexSettings(getRandom(), settingsBuilder);, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffTests.java, +                setRandomIndexSettings(getRandom(), settingsBuilder);, +++ b/core/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +    protected Settings.Builder setRandomIndexSettings(Random random, Settings.Builder builder) {, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffTests.java, +                setRandomIndexSettings(getRandom(), settingsBuilder);, +++ b/core/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +    protected Settings.Builder setRandomIndexSettings(Random random, Settings.Builder builder) {, +++ b/core/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +                    setRandomIndexSettings(getRandom(), Settings.builder()), +            for (String setting : randomSettingsBuilder.internalMap().keySet()) {, +                assertThat("non index. prefix setting set on index template, its a node setting...", setting, startsWith("index."));, +            }, +, +    protected Settings.Builder setRandomIndexSettings(Random random, Settings.Builder builder) {, +        setRandomIndexMergeSettings(random, builder);, +        setRandomIndexTranslogSettings(random, builder);, +        setRandomIndexNormsLoading(random, builder);, +    private static Settings.Builder setRandomIndexMergeSettings(Random random, Settings.Builder builder) {, +    private static Settings.Builder setRandomIndexNormsLoading(Random random, Settings.Builder builder) {, +    private static Settings.Builder setRandomIndexTranslogSettings(Random random, Settings.Builder builder) {, +, +        if (random.nextBoolean()) {, +            builder.put(TranslogConfig.INDEX_TRANSLOG_FS_TYPE, RandomPicks.randomFrom(random, TranslogWriter.Type.values()));, +            if (rarely(random)) {, +                builder.put(TranslogConfig.INDEX_TRANSLOG_SYNC_INTERVAL, 0); // 0 has special meaning to sync each op, +            } else {, +                builder.put(TranslogConfig.INDEX_TRANSLOG_SYNC_INTERVAL, RandomInts.randomIntBetween(random, 100, 5000), TimeUnit.MILLISECONDS);, +            }, +        }, +, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffTests.java, +                setRandomIndexSettings(getRandom(), settingsBuilder);, +++ b/core/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +    protected Settings.Builder setRandomIndexSettings(Random random, Settings.Builder builder) {, +++ b/core/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +                    setRandomIndexSettings(getRandom(), Settings.builder()), +            for (String setting : randomSettingsBuilder.internalMap().keySet()) {, +                assertThat("non index. prefix setting set on index template, its a node setting...", setting, startsWith("index."));, +            }, +, +    protected Settings.Builder setRandomIndexSettings(Random random, Settings.Builder builder) {, +        setRandomIndexMergeSettings(random, builder);, +        setRandomIndexTranslogSettings(random, builder);, +        setRandomIndexNormsLoading(random, builder);, +    private static Settings.Builder setRandomIndexMergeSettings(Random random, Settings.Builder builder) {, +    private static Settings.Builder setRandomIndexNormsLoading(Random random, Settings.Builder builder) {, +    private static Settings.Builder setRandomIndexTranslogSettings(Random random, Settings.Builder builder) {, +, +        if (random.nextBoolean()) {, +            builder.put(TranslogConfig.INDEX_TRANSLOG_FS_TYPE, RandomPicks.randomFrom(random, TranslogWriter.Type.values()));, +            if (rarely(random)) {, +                builder.put(TranslogConfig.INDEX_TRANSLOG_SYNC_INTERVAL, 0); // 0 has special meaning to sync each op, +            } else {, +                builder.put(TranslogConfig.INDEX_TRANSLOG_SYNC_INTERVAL, RandomInts.randomIntBetween(random, 100, 5000), TimeUnit.MILLISECONDS);, +            }, +        }, +, +++ b/core/src/test/java/org/elasticsearch/test/InternalTestCluster.java, +import org.apache.lucene.store.StoreRateLimiting;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.indices.cache.query.IndicesQueryCache;, +import org.elasticsearch.indices.store.IndicesStore;, +import org.elasticsearch.script.ScriptService;, +            if (random.nextInt(10) == 0) { // do something crazy slow here, +                builder.put(IndicesStore.INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC, new ByteSizeValue(RandomInts.randomIntBetween(random, 1, 10), ByteSizeUnit.MB));, +                builder.put(IndicesStore.INDICES_STORE_THROTTLE_MAX_BYTES_PER_SEC, new ByteSizeValue(RandomInts.randomIntBetween(random, 10, 200), ByteSizeUnit.MB));, +        if (random.nextBoolean()) {, +            builder.put(IndicesStore.INDICES_STORE_THROTTLE_TYPE, RandomPicks.randomFrom(random, StoreRateLimiting.Type.values()));, +        }, +, +        if (random.nextBoolean()) {, +            if (random.nextInt(10) == 0) { // do something crazy slow here, +                builder.put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC, new ByteSizeValue(RandomInts.randomIntBetween(random, 1, 10), ByteSizeUnit.MB));, +            } else {, +                builder.put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC, new ByteSizeValue(RandomInts.randomIntBetween(random, 10, 200), ByteSizeUnit.MB));, +            }, +        }, +, +        if (random.nextBoolean()) {, +            builder.put(RecoverySettings.INDICES_RECOVERY_COMPRESS, random.nextBoolean());, +        }, +, +        if (random.nextBoolean()) {, +            builder.put(IndicesQueryCache.INDICES_CACHE_QUERY_CONCURRENCY_LEVEL, RandomInts.randomIntBetween(random, 1, 32));, +            builder.put(IndicesFieldDataCache.FIELDDATA_CACHE_CONCURRENCY_LEVEL, RandomInts.randomIntBetween(random, 1, 32));, +        }, +        if (random.nextBoolean()) {, +            builder.put(NettyTransport.PING_SCHEDULE, RandomInts.randomIntBetween(random, 100, 2000) + "ms");, +        }, +, +        if (random.nextBoolean()) {, +            builder.put(ScriptService.SCRIPT_CACHE_SIZE_SETTING, RandomInts.randomIntBetween(random, -100, 2000));, +        }, +        if (random.nextBoolean()) {, +            builder.put(ScriptService.SCRIPT_CACHE_EXPIRE_SETTING, TimeValue.timeValueMillis(RandomInts.randomIntBetween(random, 750, 10000000)));, +        }]