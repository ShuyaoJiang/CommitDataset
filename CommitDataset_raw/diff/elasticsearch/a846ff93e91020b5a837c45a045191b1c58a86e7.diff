[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +            , +            DocValueFormat format = config.format();, +            if ((includeExclude != null) && (includeExclude.isRegexBased()) && format != DocValueFormat.RAW) {, +                throw new AggregationExecutionException("Aggregation [" + name + "] cannot support regular expression style include/exclude ", +                        + "settings as they can only be applied to string fields. Use an array of values for include/exclude clauses");, +            }, +            , +            return execution.create(name, factories, valuesSource, format, bucketCountThresholds, includeExclude, context, parent,, +                longFilter = includeExclude.convertToLongFilter(config.format());, +                final IncludeExclude.StringFilter filter = includeExclude == null ? null : includeExclude.convertToStringFilter(format);, +                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(format);, +                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(format);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +            , +            DocValueFormat format = config.format();, +            if ((includeExclude != null) && (includeExclude.isRegexBased()) && format != DocValueFormat.RAW) {, +                throw new AggregationExecutionException("Aggregation [" + name + "] cannot support regular expression style include/exclude ", +                        + "settings as they can only be applied to string fields. Use an array of values for include/exclude clauses");, +            }, +            , +            return execution.create(name, factories, valuesSource, format, bucketCountThresholds, includeExclude, context, parent,, +                longFilter = includeExclude.convertToLongFilter(config.format());, +                final IncludeExclude.StringFilter filter = includeExclude == null ? null : includeExclude.convertToStringFilter(format);, +                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(format);, +                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(format);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java, +            DocValueFormat format = config.format();, +            if ((includeExclude != null) && (includeExclude.isRegexBased()) && format != DocValueFormat.RAW) {, +                throw new AggregationExecutionException("Aggregation [" + name + "] cannot support regular expression style include/exclude ", +                        + "settings as they can only be applied to string fields. Use an array of values for include/exclude clauses");, +            }, +            return execution.create(name, factories, valuesSource, order, format, bucketCountThresholds, includeExclude, context, parent, , +                longFilter = includeExclude.convertToLongFilter(config.format());, +                final IncludeExclude.StringFilter filter = includeExclude == null ? null : includeExclude.convertToStringFilter(format);, +                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(format);, +                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(format);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +            , +            DocValueFormat format = config.format();, +            if ((includeExclude != null) && (includeExclude.isRegexBased()) && format != DocValueFormat.RAW) {, +                throw new AggregationExecutionException("Aggregation [" + name + "] cannot support regular expression style include/exclude ", +                        + "settings as they can only be applied to string fields. Use an array of values for include/exclude clauses");, +            }, +            , +            return execution.create(name, factories, valuesSource, format, bucketCountThresholds, includeExclude, context, parent,, +                longFilter = includeExclude.convertToLongFilter(config.format());, +                final IncludeExclude.StringFilter filter = includeExclude == null ? null : includeExclude.convertToStringFilter(format);, +                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(format);, +                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(format);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java, +            DocValueFormat format = config.format();, +            if ((includeExclude != null) && (includeExclude.isRegexBased()) && format != DocValueFormat.RAW) {, +                throw new AggregationExecutionException("Aggregation [" + name + "] cannot support regular expression style include/exclude ", +                        + "settings as they can only be applied to string fields. Use an array of values for include/exclude clauses");, +            }, +            return execution.create(name, factories, valuesSource, order, format, bucketCountThresholds, includeExclude, context, parent, , +                longFilter = includeExclude.convertToLongFilter(config.format());, +                final IncludeExclude.StringFilter filter = includeExclude == null ? null : includeExclude.convertToStringFilter(format);, +                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(format);, +                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(format);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/support/IncludeExclude.java, +import org.elasticsearch.search.DocValueFormat;, +        public abstract LongBitSet acceptedGlobalOrdinals(RandomAccessOrds globalOrdinals, ValuesSource.Bytes.WithOrdinals valueSource), +                throws IOException;, +        public LongBitSet acceptedGlobalOrdinals(RandomAccessOrds globalOrdinals, ValuesSource.Bytes.WithOrdinals valueSource), +                throws IOException {, +    public StringFilter convertToStringFilter(DocValueFormat format) {, +        return new TermListBackedStringFilter(parseForDocValues(includeValues, format), parseForDocValues(excludeValues, format));, +    private static SortedSet<BytesRef> parseForDocValues(SortedSet<BytesRef> endUserFormattedValues, DocValueFormat format) {, +        SortedSet<BytesRef> result = endUserFormattedValues;, +        if (endUserFormattedValues != null) {, +            if (format != DocValueFormat.RAW) {, +                result = new TreeSet<>();, +                for (BytesRef formattedVal : endUserFormattedValues) {, +                    result.add(format.parseBytesRef(formattedVal.utf8ToString()));, +                }, +            }, +        }, +        return result;, +    }, +, +    public OrdinalsFilter convertToOrdinalsFilter(DocValueFormat format) {, +        return new TermListBackedOrdinalsFilter(parseForDocValues(includeValues, format), parseForDocValues(excludeValues, format));, +    public LongFilter convertToLongFilter(DocValueFormat format) {, +                result.addAccept(format.parseLong(val.utf8ToString(), false, null));, +                result.addReject(format.parseLong(val.utf8ToString(), false, null));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java, +            , +            DocValueFormat format = config.format();, +            if ((includeExclude != null) && (includeExclude.isRegexBased()) && format != DocValueFormat.RAW) {, +                throw new AggregationExecutionException("Aggregation [" + name + "] cannot support regular expression style include/exclude ", +                        + "settings as they can only be applied to string fields. Use an array of values for include/exclude clauses");, +            }, +            , +            return execution.create(name, factories, valuesSource, format, bucketCountThresholds, includeExclude, context, parent,, +                longFilter = includeExclude.convertToLongFilter(config.format());, +                final IncludeExclude.StringFilter filter = includeExclude == null ? null : includeExclude.convertToStringFilter(format);, +                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(format);, +                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(format);]