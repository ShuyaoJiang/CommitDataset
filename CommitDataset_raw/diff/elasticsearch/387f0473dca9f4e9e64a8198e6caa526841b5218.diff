[+++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.gateway.MetaDataStateFormat;, +import org.elasticsearch.index.shard.ShardPath;, +public final class NodeEnvironment extends AbstractComponent implements Closeable {, +        boolean success = false;, +        try {, +            sharedDataPath = environment.sharedDataFile();, +            assertCanWrite();, +            success = true;, +        } finally {, +            if (success == false) {, +                IOUtils.closeWhileHandlingException(locks);, +            }, +        }, +    public final void close() {, +, +    /**, +     * This is a best effort to ensure that we actually have write permissions to write in all our data directories., +     * This prevents disasters if nodes are started under the wrong username etc., +     */, +    private void assertCanWrite() throws IOException {, +        for (Path path : nodeDataPaths()) { // check node-paths are writable, +            tryWriteTempFile(path);, +        }, +        for (String index : this.findAllIndices()) {, +            for (Path path : this.indexPaths(index)) { // check index paths are writable, +                Path statePath = path.resolve(MetaDataStateFormat.STATE_DIR_NAME);, +                tryWriteTempFile(statePath);, +                tryWriteTempFile(path);, +            }, +            for (ShardId shardID : this.findAllShardIds(new Index(index, IndexMetaData.INDEX_UUID_NA_VALUE))) {, +                Path[] paths = this.availableShardPaths(shardID);, +                for (Path path : paths) { // check shard paths are writable, +                    Path indexDir = path.resolve(ShardPath.INDEX_FOLDER_NAME);, +                    Path statePath = path.resolve(MetaDataStateFormat.STATE_DIR_NAME);, +                    Path translogDir = path.resolve(ShardPath.TRANSLOG_FOLDER_NAME);, +                    tryWriteTempFile(indexDir);, +                    tryWriteTempFile(translogDir);, +                    tryWriteTempFile(statePath);, +                    tryWriteTempFile(path);, +                }, +            }, +        }, +    }, +, +    private static void tryWriteTempFile(Path path) throws IOException {, +        if (Files.exists(path)) {, +            Path resolve = path.resolve(".es_temp_file");, +            try {, +                Files.createFile(resolve);, +                Files.deleteIfExists(resolve);, +            } catch (IOException ex) {, +                throw new IOException("failed to write in data directory [" + path + "] write permission is required", ex);, +            }, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.gateway.MetaDataStateFormat;, +import org.elasticsearch.index.shard.ShardPath;, +public final class NodeEnvironment extends AbstractComponent implements Closeable {, +        boolean success = false;, +        try {, +            sharedDataPath = environment.sharedDataFile();, +            assertCanWrite();, +            success = true;, +        } finally {, +            if (success == false) {, +                IOUtils.closeWhileHandlingException(locks);, +            }, +        }, +    public final void close() {, +, +    /**, +     * This is a best effort to ensure that we actually have write permissions to write in all our data directories., +     * This prevents disasters if nodes are started under the wrong username etc., +     */, +    private void assertCanWrite() throws IOException {, +        for (Path path : nodeDataPaths()) { // check node-paths are writable, +            tryWriteTempFile(path);, +        }, +        for (String index : this.findAllIndices()) {, +            for (Path path : this.indexPaths(index)) { // check index paths are writable, +                Path statePath = path.resolve(MetaDataStateFormat.STATE_DIR_NAME);, +                tryWriteTempFile(statePath);, +                tryWriteTempFile(path);, +            }, +            for (ShardId shardID : this.findAllShardIds(new Index(index, IndexMetaData.INDEX_UUID_NA_VALUE))) {, +                Path[] paths = this.availableShardPaths(shardID);, +                for (Path path : paths) { // check shard paths are writable, +                    Path indexDir = path.resolve(ShardPath.INDEX_FOLDER_NAME);, +                    Path statePath = path.resolve(MetaDataStateFormat.STATE_DIR_NAME);, +                    Path translogDir = path.resolve(ShardPath.TRANSLOG_FOLDER_NAME);, +                    tryWriteTempFile(indexDir);, +                    tryWriteTempFile(translogDir);, +                    tryWriteTempFile(statePath);, +                    tryWriteTempFile(path);, +                }, +            }, +        }, +    }]