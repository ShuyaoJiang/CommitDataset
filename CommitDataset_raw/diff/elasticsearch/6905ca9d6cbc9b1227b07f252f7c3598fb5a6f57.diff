[+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140JKSKeystoreBootstrapCheck.java, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +        return true;, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140JKSKeystoreBootstrapCheck.java, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +        return true;, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140LicenseBootstrapCheck.java, +import org.elasticsearch.xpack.core.XPackSettings;, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140JKSKeystoreBootstrapCheck.java, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +        return true;, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140LicenseBootstrapCheck.java, +import org.elasticsearch.xpack.core.XPackSettings;, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140PasswordHashingAlgorithmBootstrapCheck.java, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140JKSKeystoreBootstrapCheck.java, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +        return true;, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140LicenseBootstrapCheck.java, +import org.elasticsearch.xpack.core.XPackSettings;, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140PasswordHashingAlgorithmBootstrapCheck.java, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +                new FIPS140JKSKeystoreBootstrapCheck(),, +                new FIPS140PasswordHashingAlgorithmBootstrapCheck(),, +                new FIPS140LicenseBootstrapCheck()));, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140JKSKeystoreBootstrapCheck.java, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +        return true;, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140LicenseBootstrapCheck.java, +import org.elasticsearch.xpack.core.XPackSettings;, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140PasswordHashingAlgorithmBootstrapCheck.java, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +                new FIPS140JKSKeystoreBootstrapCheck(),, +                new FIPS140PasswordHashingAlgorithmBootstrapCheck(),, +                new FIPS140LicenseBootstrapCheck()));, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/FIPS140JKSKeystoreBootstrapCheckTests.java, +        assertFalse(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140JKSKeystoreBootstrapCheck.java, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +        return true;, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140LicenseBootstrapCheck.java, +import org.elasticsearch.xpack.core.XPackSettings;, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140PasswordHashingAlgorithmBootstrapCheck.java, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +                new FIPS140JKSKeystoreBootstrapCheck(),, +                new FIPS140PasswordHashingAlgorithmBootstrapCheck(),, +                new FIPS140LicenseBootstrapCheck()));, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/FIPS140JKSKeystoreBootstrapCheckTests.java, +        assertFalse(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/FIPS140LicenseBootstrapCheckTests.java, +        assertTrue(new FIPS140LicenseBootstrapCheck(), +        assertTrue(new FIPS140LicenseBootstrapCheck(), +            .check(new BootstrapContext(Settings.builder().put("xpack.security.fips_mode.enabled", randomBoolean()).build(), MetaData, +                .EMPTY_META_DATA)).isSuccess());, +        License license = TestUtils.generateSignedLicense(TimeValue.timeValueHours(24));, +, +            assertTrue(new FIPS140LicenseBootstrapCheck().check(new BootstrapContext(, +            assertTrue(new FIPS140LicenseBootstrapCheck().check(new BootstrapContext(, +            assertTrue(new FIPS140LicenseBootstrapCheck().check(new BootstrapContext(, +            assertTrue(new FIPS140LicenseBootstrapCheck().check(new BootstrapContext(, +                new FIPS140LicenseBootstrapCheck().check(new BootstrapContext(, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140JKSKeystoreBootstrapCheck.java, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +        return true;, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140LicenseBootstrapCheck.java, +import org.elasticsearch.xpack.core.XPackSettings;, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/FIPS140PasswordHashingAlgorithmBootstrapCheck.java, +        if (XPackSettings.FIPS_MODE_ENABLED.get(context.settings)) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +                new FIPS140JKSKeystoreBootstrapCheck(),, +                new FIPS140PasswordHashingAlgorithmBootstrapCheck(),, +                new FIPS140LicenseBootstrapCheck()));, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/FIPS140JKSKeystoreBootstrapCheckTests.java, +        assertFalse(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());, +        assertTrue(new FIPS140JKSKeystoreBootstrapCheck().check(new BootstrapContext(settings.build(), null)).isFailure());]