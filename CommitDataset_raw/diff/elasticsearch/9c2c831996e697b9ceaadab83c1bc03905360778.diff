[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.job.scheduler.ScheduledJobRunner;, +        ScheduledJobRunner scheduledJobRunner = new ScheduledJobRunner(threadPool, client, jobProvider, dataProcessor,, +                new JobLifeCycleService(settings, client, clusterService, dataProcessor, threadPool.generic()),, +                jobDataCountsPersister,, +                scheduledJobRunner, +        // fail quick to run autodetect process / scheduler, so no queues, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.job.scheduler.ScheduledJobRunner;, +        ScheduledJobRunner scheduledJobRunner = new ScheduledJobRunner(threadPool, client, jobProvider, dataProcessor,, +                new JobLifeCycleService(settings, client, clusterService, dataProcessor, threadPool.generic()),, +                jobDataCountsPersister,, +                scheduledJobRunner, +        // fail quick to run autodetect process / scheduler, so no queues, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/StartJobSchedulerAction.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionRequestBuilder;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.tasks.CancellableTask;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.tasks.TaskId;, +import org.elasticsearch.xpack.prelert.job.metadata.Allocation;, +import org.elasticsearch.xpack.prelert.job.scheduler.ScheduledJobRunner;, +    public static final String NAME = "cluster:admin/prelert/job/scheduler/run";, +    public static class Request extends ActionRequest implements ToXContent {, +            if (schedulerState.getStatus() != JobSchedulerStatus.STARTED) {, +                        "Start job scheduler action requires the scheduler status to be [" + JobSchedulerStatus.STARTED + "]");, +        public Task createTask(long id, String type, String action, TaskId parentTaskId) {, +            return new SchedulerTask(id, type, action, parentTaskId, jobId);, +        }, +, +        @Override, +    static class RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder> {, +    public static class Response extends ActionResponse {, +        Response() {, +    }, +, +    public static class SchedulerTask extends CancellableTask {, +, +        private volatile ScheduledJobRunner.Holder holder;, +, +        public SchedulerTask(long id, String type, String action, TaskId parentTaskId, String jobId) {, +            super(id, type, action, "job-scheduler-" + jobId, parentTaskId);, +        }, +, +        public void setHolder(ScheduledJobRunner.Holder holder) {, +            this.holder = holder;, +        protected void onCancelled() {, +            stop();, +        /* public for testing */, +        public void stop() {, +            if (holder != null) {, +                holder.stop();, +            }, +    public static class TransportAction extends HandledTransportAction<Request, Response> {, +        private final ScheduledJobRunner scheduledJobRunner;, +        public TransportAction(Settings settings, TransportService transportService, ThreadPool threadPool,, +                               ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,, +                               JobManager jobManager, ScheduledJobRunner scheduledJobRunner) {, +            super(settings, StartJobSchedulerAction.NAME, threadPool, transportService, actionFilters, indexNameExpressionResolver,, +                    Request::new);, +            this.scheduledJobRunner = scheduledJobRunner;, +        protected void doExecute(Task task, Request request, ActionListener<Response> listener) {, +            SchedulerTask schedulerTask = (SchedulerTask) task;, +            Job job = jobManager.getJobOrThrowIfUnknown(request.jobId);, +            Allocation allocation = jobManager.getJobAllocation(job.getId());, +            scheduledJobRunner.run(job, request.getSchedulerState(), allocation, schedulerTask, (error) -> {, +                if (error != null) {, +                    listener.onFailure(error);, +                } else {, +                    listener.onResponse(new Response());, +                }, +            });, +        protected void doExecute(Request request, ActionListener<Response> listener) {, +            throw new UnsupportedOperationException("the task parameter is required");, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.job.scheduler.ScheduledJobRunner;, +        ScheduledJobRunner scheduledJobRunner = new ScheduledJobRunner(threadPool, client, jobProvider, dataProcessor,, +                new JobLifeCycleService(settings, client, clusterService, dataProcessor, threadPool.generic()),, +                jobDataCountsPersister,, +                scheduledJobRunner, +        // fail quick to run autodetect process / scheduler, so no queues, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/StartJobSchedulerAction.java, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionRequestBuilder;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.tasks.CancellableTask;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.tasks.TaskId;, +import org.elasticsearch.xpack.prelert.job.metadata.Allocation;, +import org.elasticsearch.xpack.prelert.job.scheduler.ScheduledJobRunner;, +    public static final String NAME = "cluster:admin/prelert/job/scheduler/run";, +    public static class Request extends ActionRequest implements ToXContent {, +            if (schedulerState.getStatus() != JobSchedulerStatus.STARTED) {, +                        "Start job scheduler action requires the scheduler status to be [" + JobSchedulerStatus.STARTED + "]");, +        public Task createTask(long id, String type, String action, TaskId parentTaskId) {, +            return new SchedulerTask(id, type, action, parentTaskId, jobId);, +        }]