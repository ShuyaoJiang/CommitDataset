[+++ b/src/main/java/org/elasticsearch/shield/authc/esusers/tool/ESUsersTool.java, +            ImmutableSet<String> knownRoles = loadRoleNames(terminal, settings, env);, +                    Set<String> unknownRoles = Sets.difference(Sets.newHashSet(roles), knownRoles);, +                    Set<String> unknownRoles = Sets.difference(Sets.newHashSet(roles), knownRoles);, +    private static ImmutableSet<String> loadRoleNames(Terminal terminal, Settings settings, Environment env) {, +            return FileRolesStore.parseFileForRoleNames(rolesFile, null);, +        ImmutableSet<String> knownRoles = loadRoleNames(terminal, settings, env);, +        Set<String> unknownRoles = Sets.difference(Sets.newHashSet(roles), knownRoles);, +++ b/src/main/java/org/elasticsearch/shield/authc/esusers/tool/ESUsersTool.java, +            ImmutableSet<String> knownRoles = loadRoleNames(terminal, settings, env);, +                    Set<String> unknownRoles = Sets.difference(Sets.newHashSet(roles), knownRoles);, +                    Set<String> unknownRoles = Sets.difference(Sets.newHashSet(roles), knownRoles);, +    private static ImmutableSet<String> loadRoleNames(Terminal terminal, Settings settings, Environment env) {, +            return FileRolesStore.parseFileForRoleNames(rolesFile, null);, +        ImmutableSet<String> knownRoles = loadRoleNames(terminal, settings, env);, +        Set<String> unknownRoles = Sets.difference(Sets.newHashSet(roles), knownRoles);, +++ b/src/main/java/org/elasticsearch/shield/authz/store/FileRolesStore.java, +    public static ImmutableSet<String> parseFileForRoleNames(Path path, ESLogger logger) {, +        ImmutableMap<String, Permission.Global.Role> roleMap = parseFile(path, Collections.<Permission.Global.Role>emptySet(), logger, false);, +        if (roleMap == null) {, +            return ImmutableSet.<String>builder().build();, +        }, +        return roleMap.keySet();, +        return parseFile(path, reservedRoles, logger, true);, +    }, +, +    public static ImmutableMap<String, Permission.Global.Role> parseFile(Path path, Set<Permission.Global.Role> reservedRoles, ESLogger logger, boolean resolvePermission) {, +                Permission.Global.Role role = parseRole(segment, path, logger, resolvePermission);, +    private static Permission.Global.Role parseRole(String segment, Path path, ESLogger logger, boolean resolvePermissions) {, +, +                    if (resolvePermissions == false) {, +                        return permission.build();, +                    }, +, +++ b/src/main/java/org/elasticsearch/shield/authc/esusers/tool/ESUsersTool.java, +            ImmutableSet<String> knownRoles = loadRoleNames(terminal, settings, env);, +                    Set<String> unknownRoles = Sets.difference(Sets.newHashSet(roles), knownRoles);, +                    Set<String> unknownRoles = Sets.difference(Sets.newHashSet(roles), knownRoles);, +    private static ImmutableSet<String> loadRoleNames(Terminal terminal, Settings settings, Environment env) {, +            return FileRolesStore.parseFileForRoleNames(rolesFile, null);, +        ImmutableSet<String> knownRoles = loadRoleNames(terminal, settings, env);, +        Set<String> unknownRoles = Sets.difference(Sets.newHashSet(roles), knownRoles);, +++ b/src/main/java/org/elasticsearch/shield/authz/store/FileRolesStore.java, +    public static ImmutableSet<String> parseFileForRoleNames(Path path, ESLogger logger) {, +        ImmutableMap<String, Permission.Global.Role> roleMap = parseFile(path, Collections.<Permission.Global.Role>emptySet(), logger, false);, +        if (roleMap == null) {, +            return ImmutableSet.<String>builder().build();, +        }, +        return roleMap.keySet();, +        return parseFile(path, reservedRoles, logger, true);, +    }, +, +    public static ImmutableMap<String, Permission.Global.Role> parseFile(Path path, Set<Permission.Global.Role> reservedRoles, ESLogger logger, boolean resolvePermission) {, +                Permission.Global.Role role = parseRole(segment, path, logger, resolvePermission);, +    private static Permission.Global.Role parseRole(String segment, Path path, ESLogger logger, boolean resolvePermissions) {, +, +                    if (resolvePermissions == false) {, +                        return permission.build();, +                    }, +, +++ b/src/test/java/org/elasticsearch/shield/authc/esusers/tool/ESUsersToolTests.java, +, +    @Test, +    public void testUseradd_CustomRole() throws Exception {, +        Path usersFile = createTempFile();, +        Path userRolesFile = createTempFile();, +        Path rolesFile = writeFile("plugin_admin:\n" +, +                "  manage_plugin");, +        Settings settings = Settings.builder(), +                .put("shield.authc.realms.esusers.type", "esusers"), +                .put("shield.authc.realms.esusers.files.users", usersFile), +                .put("shield.authc.realms.esusers.files.users_roles", userRolesFile), +                .put("shield.authz.store.files.roles", rolesFile), +                .put("path.home", createTempDir()), +                .build();, +, +        final CaptureOutputTerminal terminal = new CaptureOutputTerminal();, +        ESUsersTool.Useradd cmd = new ESUsersTool.Useradd(terminal, "user1", SecuredStringTests.build("changeme"), "plugin_admin");, +, +        CliTool.ExitStatus status = execute(cmd, settings);, +        assertThat(status, is(CliTool.ExitStatus.OK));, +        assertThat(terminal.getTerminalOutput(), hasSize(0));, +    }, +, +    @Test, +    public void testUseradd_NonExistantRole() throws Exception {, +        Path usersFile = createTempFile();, +        Path userRolesFile = createTempFile();, +        Path rolesFile = writeFile("plugin_admin:\n" +, +                "  manage_plugin");, +        Settings settings = Settings.builder(), +                .put("shield.authc.realms.esusers.type", "esusers"), +                .put("shield.authc.realms.esusers.files.users", usersFile), +                .put("shield.authc.realms.esusers.files.users_roles", userRolesFile), +                .put("shield.authz.store.files.roles", rolesFile), +                .put("path.home", createTempDir()), +                .build();, +, +        final CaptureOutputTerminal terminal = new CaptureOutputTerminal();, +        ESUsersTool.Useradd cmd = new ESUsersTool.Useradd(terminal, "user1", SecuredStringTests.build("changeme"), "plugin_admin_2");]