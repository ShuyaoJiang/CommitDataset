[+++ b/src/main/java/org/elasticsearch/action/delete/index/IndexDeleteResponse.java, +    IndexDeleteResponse(String index, int failedShards, ShardDeleteResponse[] deleteResponses) {, +        this.successfulShards = deleteResponses.length;, +++ b/src/main/java/org/elasticsearch/action/delete/index/IndexDeleteResponse.java, +    IndexDeleteResponse(String index, int failedShards, ShardDeleteResponse[] deleteResponses) {, +        this.successfulShards = deleteResponses.length;, +++ b/src/main/java/org/elasticsearch/action/delete/index/TransportIndexDeleteAction.java, +import org.elasticsearch.action.ShardOperationFailedException;, +import java.util.List;, +    protected IndexDeleteResponse newResponseInstance(IndexDeleteRequest request, List<ShardDeleteResponse> shardDeleteResponses, int failuresCount, List<ShardOperationFailedException> shardFailures) {, +        return new IndexDeleteResponse(request.index(), failuresCount, shardDeleteResponses.toArray(new ShardDeleteResponse[shardDeleteResponses.size()]));, +++ b/src/main/java/org/elasticsearch/action/delete/index/IndexDeleteResponse.java, +    IndexDeleteResponse(String index, int failedShards, ShardDeleteResponse[] deleteResponses) {, +        this.successfulShards = deleteResponses.length;, +++ b/src/main/java/org/elasticsearch/action/delete/index/TransportIndexDeleteAction.java, +import org.elasticsearch.action.ShardOperationFailedException;, +import java.util.List;, +    protected IndexDeleteResponse newResponseInstance(IndexDeleteRequest request, List<ShardDeleteResponse> shardDeleteResponses, int failuresCount, List<ShardOperationFailedException> shardFailures) {, +        return new IndexDeleteResponse(request.index(), failuresCount, shardDeleteResponses.toArray(new ShardDeleteResponse[shardDeleteResponses.size()]));, +++ b/src/main/java/org/elasticsearch/action/deletebyquery/TransportIndexDeleteByQueryAction.java, +    protected IndexDeleteByQueryResponse newResponseInstance(IndexDeleteByQueryRequest request, List<ShardDeleteByQueryResponse> shardDeleteByQueryResponses, int failuresCount, List<ShardOperationFailedException> shardFailures) {, +        return new IndexDeleteByQueryResponse(request.index(), shardDeleteByQueryResponses.size(), failuresCount, shardFailures);, +++ b/src/main/java/org/elasticsearch/action/delete/index/IndexDeleteResponse.java, +    IndexDeleteResponse(String index, int failedShards, ShardDeleteResponse[] deleteResponses) {, +        this.successfulShards = deleteResponses.length;, +++ b/src/main/java/org/elasticsearch/action/delete/index/TransportIndexDeleteAction.java, +import org.elasticsearch.action.ShardOperationFailedException;, +import java.util.List;, +    protected IndexDeleteResponse newResponseInstance(IndexDeleteRequest request, List<ShardDeleteResponse> shardDeleteResponses, int failuresCount, List<ShardOperationFailedException> shardFailures) {, +        return new IndexDeleteResponse(request.index(), failuresCount, shardDeleteResponses.toArray(new ShardDeleteResponse[shardDeleteResponses.size()]));, +++ b/src/main/java/org/elasticsearch/action/deletebyquery/TransportIndexDeleteByQueryAction.java, +    protected IndexDeleteByQueryResponse newResponseInstance(IndexDeleteByQueryRequest request, List<ShardDeleteByQueryResponse> shardDeleteByQueryResponses, int failuresCount, List<ShardOperationFailedException> shardFailures) {, +        return new IndexDeleteByQueryResponse(request.index(), shardDeleteByQueryResponses.size(), failuresCount, shardFailures);, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportIndexReplicationOperationAction.java, +import com.google.common.collect.Lists;, +import org.elasticsearch.action.ShardOperationFailedException;, +import org.elasticsearch.action.support.DefaultShardOperationFailedException;, +import java.util.List;, +        final AtomicInteger failureCounter = new AtomicInteger();, +        final AtomicReferenceArray<ShardActionResult> shardsResponses = new AtomicReferenceArray<ShardActionResult>(groups.size());, +                    shardsResponses.set(indexCounter.getAndIncrement(), new ShardActionResult(result));, +                    returnIfNeeded();, +                    failureCounter.getAndIncrement();, +                        shardsResponses.set(index, new ShardActionResult(, +                                new DefaultShardOperationFailedException(request.index, shardIt.shardId().id(), e)));, +                    returnIfNeeded();, +                }, +, +                private void returnIfNeeded() {, +                        List<ShardResponse> responses = Lists.newArrayList();, +                        List<ShardOperationFailedException> failures = Lists.newArrayList();, +                        for (int i = 0; i < shardsResponses.length(); i++) {, +                            ShardActionResult shardActionResult = shardsResponses.get(i);, +                            if (shardActionResult == null) {, +                                assert !accumulateExceptions();, +                                continue;, +                            }, +                            if (shardActionResult.isFailure()) {, +                                assert accumulateExceptions() && shardActionResult.shardFailure != null;, +                                failures.add(shardActionResult.shardFailure);, +                            } else {, +                                responses.add(shardActionResult.shardResponse);, +                            }, +                        }, +, +                        assert failures.size() == 0 || failures.size() == failureCounter.get();, +                        listener.onResponse(newResponseInstance(request, responses, failureCounter.get(), failures));, +    protected abstract Response newResponseInstance(Request request, List<ShardResponse> shardResponses, int failuresCount, List<ShardOperationFailedException> shardFailures);, +    private class ShardActionResult {, +, +        private final ShardResponse shardResponse;, +        private final ShardOperationFailedException shardFailure;, +, +        private ShardActionResult(ShardResponse shardResponse) {, +            assert shardResponse != null;, +            this.shardResponse = shardResponse;, +            this.shardFailure = null;, +        }, +, +        private ShardActionResult(ShardOperationFailedException shardOperationFailedException) {, +            assert shardOperationFailedException != null;, +            this.shardFailure = shardOperationFailedException;, +            this.shardResponse = null;, +        }, +, +        boolean isFailure() {, +            return shardFailure != null;, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/action/delete/index/IndexDeleteResponse.java, +    IndexDeleteResponse(String index, int failedShards, ShardDeleteResponse[] deleteResponses) {, +        this.successfulShards = deleteResponses.length;, +++ b/src/main/java/org/elasticsearch/action/delete/index/TransportIndexDeleteAction.java, +import org.elasticsearch.action.ShardOperationFailedException;, +import java.util.List;, +    protected IndexDeleteResponse newResponseInstance(IndexDeleteRequest request, List<ShardDeleteResponse> shardDeleteResponses, int failuresCount, List<ShardOperationFailedException> shardFailures) {, +        return new IndexDeleteResponse(request.index(), failuresCount, shardDeleteResponses.toArray(new ShardDeleteResponse[shardDeleteResponses.size()]));, +++ b/src/main/java/org/elasticsearch/action/deletebyquery/TransportIndexDeleteByQueryAction.java, +    protected IndexDeleteByQueryResponse newResponseInstance(IndexDeleteByQueryRequest request, List<ShardDeleteByQueryResponse> shardDeleteByQueryResponses, int failuresCount, List<ShardOperationFailedException> shardFailures) {]