[+++ b/server/src/main/java/org/elasticsearch/search/SearchService.java, +            throw e;, +    private SearchPhaseResult executeQueryPhase(ShardSearchRequest request, SearchTask task) throws Exception {, +            final long afterQueryTime;, +            try (SearchOperationListenerExecutor executor = new SearchOperationListenerExecutor(context)) {, +                afterQueryTime = executor.success();, +            }, +                return executeFetchPhase(context, afterQueryTime);, +            throw e;, +    private QueryFetchSearchResult executeFetchPhase(SearchContext context, long afterQueryTime) {, +        try (SearchOperationListenerExecutor executor = new SearchOperationListenerExecutor(context, true, afterQueryTime)){, +            executor.success();, +            try (SearchOperationListenerExecutor executor = new SearchOperationListenerExecutor(context)) {, +                executor.success();, +                throw e;, +            try (SearchOperationListenerExecutor executor = new SearchOperationListenerExecutor(context)) {, +                executor.success();, +                throw e;, +            context.incRef();, +            try (SearchOperationListenerExecutor executor = new SearchOperationListenerExecutor(context)){, +                final long afterQueryTime = executor.success();, +                QueryFetchSearchResult fetchSearchResult = executeFetchPhase(context, afterQueryTime);, +                throw e;, +                try (SearchOperationListenerExecutor executor = new SearchOperationListenerExecutor(context, true, System.nanoTime())) {, +                    executor.success();, +                }, +                throw e;, +            throw e;, +    private void contextScrollKeepAlive(SearchContext context, long keepAlive) {, +    private void processScroll(InternalScrollSearchRequest request, SearchContext context) {, +, +    /**, +     * This helper class ensures we only execute either the success or the failure path for {@link SearchOperationListener}., +     * This is crucial for some implementations like {@link org.elasticsearch.index.search.stats.ShardSearchStats}., +     */, +    private static final class SearchOperationListenerExecutor implements AutoCloseable {, +        private final SearchOperationListener listener;, +        private final SearchContext context;, +        private final long time;, +        private final boolean fetch;, +        private long afterQueryTime = -1;, +        private boolean closed = false;, +, +        SearchOperationListenerExecutor(SearchContext context) {, +            this(context, false, System.nanoTime());, +        }, +, +        SearchOperationListenerExecutor(SearchContext context, boolean fetch, long startTime) {, +            this.listener = context.indexShard().getSearchOperationListener();, +            this.context = context;, +            time = startTime;, +            this.fetch = fetch;, +            if (fetch) {, +                listener.onPreFetchPhase(context);, +            } else {, +                listener.onPreQueryPhase(context);, +            }, +        }, +, +        long success() {, +            return afterQueryTime = System.nanoTime();, +        }, +, +        @Override, +        public void close() {, +            assert closed == false : "already closed - while technically ok double closing is a likely a bug in this case";, +            if (closed == false) {, +                closed = true;, +                if (afterQueryTime != -1) {, +                    if (fetch) {, +                        listener.onFetchPhase(context, afterQueryTime - time);, +                    } else {, +                        listener.onQueryPhase(context, afterQueryTime - time);, +                    }, +                } else {, +                    if (fetch) {, +                        listener.onFailedFetchPhase(context);, +                    } else {, +                        listener.onFailedQueryPhase(context);, +                    }, +                }, +            }, +        }, +    }]