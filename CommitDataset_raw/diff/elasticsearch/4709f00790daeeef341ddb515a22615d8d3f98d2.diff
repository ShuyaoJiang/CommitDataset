[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/IndexStore.java, +import org.elasticsearch.common.unit.ByteSizeValue;, + * Index store is an index level information of the {@link Store} each shard will use., + *, +    /**, +     * The shard store class that should be used for each shard., +     */, +, +    /**, +     * Returns the backing store total space. Return <tt>-1</tt> if not available., +     */, +    ByteSizeValue backingStoreTotalSpace();, +, +    /**, +     * Returns the backing store free space. Return <tt>-1</tt> if not available., +     */, +    ByteSizeValue backingStoreFreeSpace();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/IndexStore.java, +import org.elasticsearch.common.unit.ByteSizeValue;, + * Index store is an index level information of the {@link Store} each shard will use., + *, +    /**, +     * The shard store class that should be used for each shard., +     */, +, +    /**, +     * Returns the backing store total space. Return <tt>-1</tt> if not available., +     */, +    ByteSizeValue backingStoreTotalSpace();, +, +    /**, +     * Returns the backing store free space. Return <tt>-1</tt> if not available., +     */, +    ByteSizeValue backingStoreFreeSpace();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsIndexStore.java, +import org.elasticsearch.common.unit.ByteSizeValue;, +    @Override public ByteSizeValue backingStoreTotalSpace() {, +        long totalSpace = location.getTotalSpace();, +        if (totalSpace == 0) {, +            totalSpace = -1;, +        }, +        return new ByteSizeValue(totalSpace);, +    }, +, +    @Override public ByteSizeValue backingStoreFreeSpace() {, +        long usableSpace = location.getUsableSpace();, +        if (usableSpace == 0) {, +            usableSpace = -1;, +        }, +        return new ByteSizeValue(usableSpace);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/IndexStore.java, +import org.elasticsearch.common.unit.ByteSizeValue;, + * Index store is an index level information of the {@link Store} each shard will use., + *, +    /**, +     * The shard store class that should be used for each shard., +     */, +, +    /**, +     * Returns the backing store total space. Return <tt>-1</tt> if not available., +     */, +    ByteSizeValue backingStoreTotalSpace();, +, +    /**, +     * Returns the backing store free space. Return <tt>-1</tt> if not available., +     */, +    ByteSizeValue backingStoreFreeSpace();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsIndexStore.java, +import org.elasticsearch.common.unit.ByteSizeValue;, +    @Override public ByteSizeValue backingStoreTotalSpace() {, +        long totalSpace = location.getTotalSpace();, +        if (totalSpace == 0) {, +            totalSpace = -1;, +        }, +        return new ByteSizeValue(totalSpace);, +    }, +, +    @Override public ByteSizeValue backingStoreFreeSpace() {, +        long usableSpace = location.getUsableSpace();, +        if (usableSpace == 0) {, +            usableSpace = -1;, +        }, +        return new ByteSizeValue(usableSpace);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/memory/ByteBufferIndexStore.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.monitor.jvm.JvmInfo;, +import org.elasticsearch.monitor.jvm.JvmStats;, +    private final boolean direct;, +, +        this.direct = componentSettings.getAsBoolean("direct", true);, +, +    @Override public ByteSizeValue backingStoreTotalSpace() {, +        if (direct) {, +            // TODO, we can use sigar..., +            return new ByteSizeValue(-1, ByteSizeUnit.BYTES);]