[+++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        // no templates are defined, we use float by default instead of double, +                        // since this is much more space-efficient and should be enough most of, +                        // the time, +                        builder = MapperBuilders.floatField(currentFieldName);, +                    // no templates are defined, we use float by default instead of double, +                    // since this is much more space-efficient and should be enough most of, +                    // the time, +                    builder = MapperBuilders.floatField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        // no templates are defined, we use float by default instead of double, +                        // since this is much more space-efficient and should be enough most of, +                        // the time, +                        builder = MapperBuilders.floatField(currentFieldName);, +                    // no templates are defined, we use float by default instead of double, +                    // since this is much more space-efficient and should be enough most of, +                    // the time, +                    builder = MapperBuilders.floatField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            static class MultiFieldParserContext extends ParserContext {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        // no templates are defined, we use float by default instead of double, +                        // since this is much more space-efficient and should be enough most of, +                        // the time, +                        builder = MapperBuilders.floatField(currentFieldName);, +                    // no templates are defined, we use float by default instead of double, +                    // since this is much more space-efficient and should be enough most of, +                    // the time, +                    builder = MapperBuilders.floatField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            static class MultiFieldParserContext extends ParserContext {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        this(preparedSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());, +    Node(Settings preparedSettings, Version version, Collection<Class<? extends Plugin>> classpathPlugins) {, +        final Settings pSettings = settingsBuilder().put(preparedSettings), +        Environment tmpEnv = InternalSettingsPreparer.prepareEnvironment(pSettings, null);, +        Settings tmpSettings = TribeService.processSettings(tmpEnv.settings());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        // no templates are defined, we use float by default instead of double, +                        // since this is much more space-efficient and should be enough most of, +                        // the time, +                        builder = MapperBuilders.floatField(currentFieldName);, +                    // no templates are defined, we use float by default instead of double, +                    // since this is much more space-efficient and should be enough most of, +                    // the time, +                    builder = MapperBuilders.floatField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            static class MultiFieldParserContext extends ParserContext {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        this(preparedSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());, +    Node(Settings preparedSettings, Version version, Collection<Class<? extends Plugin>> classpathPlugins) {, +        final Settings pSettings = settingsBuilder().put(preparedSettings), +        Environment tmpEnv = InternalSettingsPreparer.prepareEnvironment(pSettings, null);, +        Settings tmpSettings = TribeService.processSettings(tmpEnv.settings());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        // no templates are defined, we use float by default instead of double, +                        // since this is much more space-efficient and should be enough most of, +                        // the time, +                        builder = MapperBuilders.floatField(currentFieldName);, +                    // no templates are defined, we use float by default instead of double, +                    // since this is much more space-efficient and should be enough most of, +                    // the time, +                    builder = MapperBuilders.floatField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            static class MultiFieldParserContext extends ParserContext {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        this(preparedSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());, +    Node(Settings preparedSettings, Version version, Collection<Class<? extends Plugin>> classpathPlugins) {, +        final Settings pSettings = settingsBuilder().put(preparedSettings), +        Environment tmpEnv = InternalSettingsPreparer.prepareEnvironment(pSettings, null);, +        Settings tmpSettings = TribeService.processSettings(tmpEnv.settings());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeService.java, +            sb.put("node.name", settings.get("name") + "/" + entry.getKey());, +            sb.put(InternalSettingsPreparer.IGNORE_SYSTEM_PROPERTIES_SETTING, true);, +            nodes.add(NodeBuilder.nodeBuilder().settings(sb).client(true).build());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        // no templates are defined, we use float by default instead of double, +                        // since this is much more space-efficient and should be enough most of, +                        // the time, +                        builder = MapperBuilders.floatField(currentFieldName);, +                    // no templates are defined, we use float by default instead of double, +                    // since this is much more space-efficient and should be enough most of, +                    // the time, +                    builder = MapperBuilders.floatField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            static class MultiFieldParserContext extends ParserContext {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        this(preparedSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());, +    Node(Settings preparedSettings, Version version, Collection<Class<? extends Plugin>> classpathPlugins) {, +        final Settings pSettings = settingsBuilder().put(preparedSettings), +        Environment tmpEnv = InternalSettingsPreparer.prepareEnvironment(pSettings, null);, +        Settings tmpSettings = TribeService.processSettings(tmpEnv.settings());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeService.java, +            sb.put("node.name", settings.get("name") + "/" + entry.getKey());, +            sb.put(InternalSettingsPreparer.IGNORE_SYSTEM_PROPERTIES_SETTING, true);, +            nodes.add(NodeBuilder.nodeBuilder().settings(sb).client(true).build());, +++ b/core/src/test/java/org/elasticsearch/fieldstats/FieldStatsTests.java]