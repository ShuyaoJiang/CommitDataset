[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                /* The Elasticsearch test runner doesn't support the warnings, +                 * construct unless you output this skip. Since we don't know, +                 * if this snippet will use the warnings construct we emit this, +                 * warning every time. */, +                current.println("  - skip:"), +                current.println("      features: "), +                current.println("        - warnings"), +                if (test.continued) {, +                    throw new InvalidUserDataException("Continued snippets ", +                        + "can't be skipped"), +                }, +                current.println("        - always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                /* The Elasticsearch test runner doesn't support the warnings, +                 * construct unless you output this skip. Since we don't know, +                 * if this snippet will use the warnings construct we emit this, +                 * warning every time. */, +                current.println("  - skip:"), +                current.println("      features: "), +                current.println("        - warnings"), +                if (test.continued) {, +                    throw new InvalidUserDataException("Continued snippets ", +                        + "can't be skipped"), +                }, +                current.println("        - always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit|NOCOMMIT/), +        patterns.put('nocommit should be all lowercase or all uppercase',, +            /((?i)nocommit)(?<!(nocommit|NOCOMMIT))/), +            patterns.put('norelease', /norelease|NORELEASE/), +        patterns.put('norelease should be all lowercase or all uppercase',, +            /((?i)norelease)(?<!(norelease|NORELEASE))/), +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                /* The Elasticsearch test runner doesn't support the warnings, +                 * construct unless you output this skip. Since we don't know, +                 * if this snippet will use the warnings construct we emit this, +                 * warning every time. */, +                current.println("  - skip:"), +                current.println("      features: "), +                current.println("        - warnings"), +                if (test.continued) {, +                    throw new InvalidUserDataException("Continued snippets ", +                        + "can't be skipped"), +                }, +                current.println("        - always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit|NOCOMMIT/), +        patterns.put('nocommit should be all lowercase or all uppercase',, +            /((?i)nocommit)(?<!(nocommit|NOCOMMIT))/), +            patterns.put('norelease', /norelease|NORELEASE/), +        patterns.put('norelease should be all lowercase or all uppercase',, +            /((?i)norelease)(?<!(norelease|NORELEASE))/), +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/SameShardAllocationDecider.java, +        Decision decision = decideSameNode(shardRouting, node, allocation, assignedShards);, +        if (decision.type() == Decision.Type.NO || sameHost == false) {, +            // if its already a NO decision looking at the node, or we aren't configured to look at the host, return the decision, +            return decision;, +        return allocation.decision(Decision.YES, NAME, "the shard does not exist on the same host");, +, +    @Override, +    public Decision canForceAllocatePrimary(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation) {, +        assert shardRouting.primary() : "must not call force allocate on a non-primary shard";, +        Iterable<ShardRouting> assignedShards = allocation.routingNodes().assignedShards(shardRouting.shardId());, +        return decideSameNode(shardRouting, node, allocation, assignedShards);, +    }, +, +    private Decision decideSameNode(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation,, +                                    Iterable<ShardRouting> assignedShards) {, +        for (ShardRouting assignedShard : assignedShards) {, +            if (node.nodeId().equals(assignedShard.currentNodeId())) {, +                if (assignedShard.isSameAllocation(shardRouting)) {, +                    return allocation.decision(Decision.NO, NAME,, +                        "the shard cannot be allocated to the node on which it already exists [%s]",, +                        shardRouting.toString());, +                } else {, +                    return allocation.decision(Decision.NO, NAME,, +                        "the shard cannot be allocated to the same node on which a copy of the shard already exists [%s]",, +                        assignedShard.toString());, +                }, +            }, +        }, +        return allocation.decision(Decision.YES, NAME, "the shard does not exist on the same node");, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                /* The Elasticsearch test runner doesn't support the warnings, +                 * construct unless you output this skip. Since we don't know, +                 * if this snippet will use the warnings construct we emit this, +                 * warning every time. */, +                current.println("  - skip:"), +                current.println("      features: "), +                current.println("        - warnings"), +                if (test.continued) {, +                    throw new InvalidUserDataException("Continued snippets ", +                        + "can't be skipped"), +                }, +                current.println("        - always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit|NOCOMMIT/)]