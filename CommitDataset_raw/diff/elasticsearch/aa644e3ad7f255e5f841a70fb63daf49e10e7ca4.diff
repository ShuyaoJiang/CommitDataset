[+++ b/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java, +        protected boolean isEmpty() {, +            return (coordinate == null && (children == null || children.isEmpty()));, +        }, +, +        protected static void validatePointNode(CoordinateNode node) {, +            if (node.isEmpty()) {, +                throw new ElasticsearchParseException("Invalid number of points (0) provided when expecting a single coordinate ", +                        + "([lat, lng])");, +            } else if (node.coordinate == null) {, +                if (node.children.isEmpty() == false) {, +                    throw new ElasticsearchParseException("multipoint data provided when single point data expected.");, +                }, +            }, +        }, +, +            validatePointNode(node);, +        protected static void validateMultiPointNode(CoordinateNode coordinates) {, +            if (coordinates.children == null || coordinates.children.isEmpty()) {, +                if (coordinates.coordinate != null) {, +                    throw new ElasticsearchParseException("single coordinate found when expecting an array of " +, +                            "coordinates. change type to point or change data to an array of >0 coordinates");, +                }, +                throw new ElasticsearchParseException("No data provided for multipoint object when expecting " +, +                        ">0 points (e.g., [[lat, lng]] or [[lat, lng], ...])");, +            } else {, +                for (CoordinateNode point : coordinates.children) {, +                    validatePointNode(point);, +                }, +            }, +        }, +, +            validateMultiPointNode(coordinates);, +, +            if (coordinates.children == null || coordinates.children.isEmpty()) {, +                throw new ElasticsearchParseException("Invalid LinearRing provided for type polygon. Linear ring must be an array of " +, +                        "coordinates");, +            }, +, +++ b/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java, +        protected boolean isEmpty() {, +            return (coordinate == null && (children == null || children.isEmpty()));, +        }, +, +        protected static void validatePointNode(CoordinateNode node) {, +            if (node.isEmpty()) {, +                throw new ElasticsearchParseException("Invalid number of points (0) provided when expecting a single coordinate ", +                        + "([lat, lng])");, +            } else if (node.coordinate == null) {, +                if (node.children.isEmpty() == false) {, +                    throw new ElasticsearchParseException("multipoint data provided when single point data expected.");, +                }, +            }, +        }, +, +            validatePointNode(node);, +        protected static void validateMultiPointNode(CoordinateNode coordinates) {, +            if (coordinates.children == null || coordinates.children.isEmpty()) {, +                if (coordinates.coordinate != null) {, +                    throw new ElasticsearchParseException("single coordinate found when expecting an array of " +, +                            "coordinates. change type to point or change data to an array of >0 coordinates");, +                }, +                throw new ElasticsearchParseException("No data provided for multipoint object when expecting " +, +                        ">0 points (e.g., [[lat, lng]] or [[lat, lng], ...])");, +            } else {, +                for (CoordinateNode point : coordinates.children) {, +                    validatePointNode(point);, +                }, +            }, +        }, +, +            validateMultiPointNode(coordinates);, +, +            if (coordinates.children == null || coordinates.children.isEmpty()) {, +                throw new ElasticsearchParseException("Invalid LinearRing provided for type polygon. Linear ring must be an array of " +, +                        "coordinates");, +            }, +, +++ b/src/test/java/org/elasticsearch/common/geo/GeoJSONShapeParserTests.java, +    public void testParse_invalidPoint() throws IOException {, +        // test case 1: create an invalid point object with multipoint data format, +        String invalidPoint1 = XContentFactory.jsonBuilder().startObject().field("type", "point"), +                .startArray("coordinates"), +                .startArray().value(-74.011).value(40.753).endArray(), +                .endArray(), +                .endObject().string();, +        XContentParser parser = JsonXContent.jsonXContent.createParser(invalidPoint1);, +        parser.nextToken();, +        ElasticsearchGeoAssertions.assertValidException(parser, ElasticsearchParseException.class);, +, +        // test case 2: create an invalid point object with an empty number of coordinates, +        String invalidPoint2 = XContentFactory.jsonBuilder().startObject().field("type", "point"), +                .startArray("coordinates"), +                .endArray(), +                .endObject().string();, +        parser = JsonXContent.jsonXContent.createParser(invalidPoint2);, +        parser.nextToken();, +        ElasticsearchGeoAssertions.assertValidException(parser, ElasticsearchParseException.class);, +    }, +]