[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +    private Map<String, String> serviceAttributes;, +    public Map<String, String> getServiceAttributes() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +    private Map<String, String> serviceAttributes;, +    public Map<String, String> getServiceAttributes() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportNodesSnapshotsStatus.java, +, +import java.util.HashMap;, +import static java.util.Collections.unmodifiableMap;, +, +        Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> snapshotMapBuilder = new HashMap<>();, +                Map<ShardId, SnapshotIndexShardStatus> shardMapBuilder = new HashMap<>();, +                snapshotMapBuilder.put(snapshotId, unmodifiableMap(shardMapBuilder));, +            return new NodeSnapshotStatus(clusterService.localNode(), unmodifiableMap(snapshotMapBuilder));, +        private Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> status;, +        public NodeSnapshotStatus(DiscoveryNode node, Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> status) {, +        public Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> status() {, +            Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> snapshotMapBuilder = new HashMap<>(numberOfSnapshots);, +                Map<ShardId, SnapshotIndexShardStatus> shardMapBuilder = new HashMap<>(numberOfShards);, +                snapshotMapBuilder.put(snapshotId, unmodifiableMap(shardMapBuilder));, +            status = unmodifiableMap(snapshotMapBuilder);, +                for (Map.Entry<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> entry : status.entrySet()) {, +                    for (Map.Entry<ShardId, SnapshotIndexShardStatus> shardEntry : entry.getValue().entrySet()) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +    private Map<String, String> serviceAttributes;, +    public Map<String, String> getServiceAttributes() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportNodesSnapshotsStatus.java, +, +import java.util.HashMap;, +import static java.util.Collections.unmodifiableMap;, +, +        Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> snapshotMapBuilder = new HashMap<>();, +                Map<ShardId, SnapshotIndexShardStatus> shardMapBuilder = new HashMap<>();, +                snapshotMapBuilder.put(snapshotId, unmodifiableMap(shardMapBuilder));, +            return new NodeSnapshotStatus(clusterService.localNode(), unmodifiableMap(snapshotMapBuilder));, +        private Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> status;, +        public NodeSnapshotStatus(DiscoveryNode node, Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> status) {, +        public Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> status() {, +            Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> snapshotMapBuilder = new HashMap<>(numberOfSnapshots);, +                Map<ShardId, SnapshotIndexShardStatus> shardMapBuilder = new HashMap<>(numberOfShards);, +                snapshotMapBuilder.put(snapshotId, unmodifiableMap(shardMapBuilder));, +            status = unmodifiableMap(snapshotMapBuilder);, +                for (Map.Entry<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> entry : status.entrySet()) {, +                    for (Map.Entry<ShardId, SnapshotIndexShardStatus> shardEntry : entry.getValue().entrySet()) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +                            Map<ShardId, SnapshotIndexShardStatus> shardStatues = nodeStatus.status().get(entry.snapshotId());, +                        Map<ShardId, IndexShardSnapshotStatus> shardStatues = snapshotsService.snapshotShards(snapshotId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +    private Map<String, String> serviceAttributes;, +    public Map<String, String> getServiceAttributes() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportNodesSnapshotsStatus.java, +, +import java.util.HashMap;, +import static java.util.Collections.unmodifiableMap;, +, +        Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> snapshotMapBuilder = new HashMap<>();, +                Map<ShardId, SnapshotIndexShardStatus> shardMapBuilder = new HashMap<>();, +                snapshotMapBuilder.put(snapshotId, unmodifiableMap(shardMapBuilder));, +            return new NodeSnapshotStatus(clusterService.localNode(), unmodifiableMap(snapshotMapBuilder));, +        private Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> status;, +        public NodeSnapshotStatus(DiscoveryNode node, Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> status) {, +        public Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> status() {, +            Map<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> snapshotMapBuilder = new HashMap<>(numberOfSnapshots);, +                Map<ShardId, SnapshotIndexShardStatus> shardMapBuilder = new HashMap<>(numberOfShards);, +                snapshotMapBuilder.put(snapshotId, unmodifiableMap(shardMapBuilder));, +            status = unmodifiableMap(snapshotMapBuilder);, +                for (Map.Entry<SnapshotId, Map<ShardId, SnapshotIndexShardStatus>> entry : status.entrySet()) {, +                    for (Map.Entry<ShardId, SnapshotIndexShardStatus> shardEntry : entry.getValue().entrySet()) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +                            Map<ShardId, SnapshotIndexShardStatus> shardStatues = nodeStatus.status().get(entry.snapshotId());, +                        Map<ShardId, IndexShardSnapshotStatus> shardStatues = snapshotsService.snapshotShards(snapshotId);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/GetFieldMappingsResponse.java, +, +import java.util.HashMap;, +import static java.util.Collections.unmodifiableMap;, +, +    private Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappings = ImmutableMap.of();, +    GetFieldMappingsResponse(Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappings) {, +    public Map<String, Map<String, Map<String, FieldMappingMetaData>>> mappings() {, +        Map<String, Map<String, FieldMappingMetaData>> indexMapping = mappings.get(index);, +        Map<String, FieldMappingMetaData> typeMapping = indexMapping.get(type);, +        for (Map.Entry<String, Map<String, Map<String, FieldMappingMetaData>>> indexEntry : mappings.entrySet()) {, +            for (Map.Entry<String, Map<String, FieldMappingMetaData>> typeEntry : indexEntry.getValue().entrySet()) {, +        Map<String, Map<String, Map<String, FieldMappingMetaData>>> indexMapBuilder = new HashMap<>(size);, +            Map<String, Map<String, FieldMappingMetaData>> typeMapBuilder = new HashMap<>(typesSize);, +                Map<String, FieldMappingMetaData> fieldMapBuilder = new HashMap<>(fieldSize);, +                typeMapBuilder.put(type, unmodifiableMap(fieldMapBuilder));, +            indexMapBuilder.put(index, unmodifiableMap(typeMapBuilder));, +        mappings = unmodifiableMap(indexMapBuilder);, +        for (Map.Entry<String, Map<String, Map<String, FieldMappingMetaData>>> indexEntry : mappings.entrySet()) {, +            for (Map.Entry<String, Map<String, FieldMappingMetaData>> typeEntry : indexEntry.getValue().entrySet()) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +    private Map<String, String> serviceAttributes;, +    public Map<String, String> getServiceAttributes() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportNodesSnapshotsStatus.java, +, +import java.util.HashMap;, +import static java.util.Collections.unmodifiableMap;, +]