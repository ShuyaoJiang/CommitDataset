[+++ b/dev-tools/prepare_release_candidate.py, +deb http://%(bucket)s/elasticsearch/staging/%(version)s-%(hash)s/repos/%(major_minor_version)s/debian/ stable main, +baseurl=http://%(bucket)s/elasticsearch/staging/%(version)s-%(hash)s/repos/%(major_minor_version)s/centos, + python3 -B ./dev-tools/smoke_test_rc.py --version %(version)s --hash %(hash)s --plugins license,shield,watcher, +[2] http://%(bucket)s/elasticsearch/staging/%(version)s-%(hash)s/org/elasticsearch/distribution/zip/elasticsearch/%(version)s/elasticsearch-%(version)s.zip, +[3] http://%(bucket)s/elasticsearch/staging/%(version)s-%(hash)s/org/elasticsearch/distribution/tar/elasticsearch/%(version)s/elasticsearch-%(version)s.tar.gz, +[4] http://%(bucket)s/elasticsearch/staging/%(version)s-%(hash)s/org/elasticsearch/distribution/rpm/elasticsearch/%(version)s/elasticsearch-%(version)s.rpm, +[5] http://%(bucket)s/elasticsearch/staging/%(version)s-%(hash)s/org/elasticsearch/distribution/deb/elasticsearch/%(version)s/elasticsearch-%(version)s.deb, +, +# console colors, +COLOR_OK = '\033[92m', +COLOR_END = '\033[0m', +COLOR_FAIL = '\033[91m', +, +def run(command, env_vars=None):, +  print('*** Running: %s%s%s' % (COLOR_OK, command, COLOR_END)), +  checks.append(check_env_var('Checking for AWS env configuration AWS_SECRET_KEY... ', 'AWS_SECRET_KEY')), +  checks.append(check_env_var('Checking for AWS env configuration AWS_ACCESS_KEY... ', 'AWS_ACCESS_KEY')), +  parser.add_argument('--deploy-sonatype', dest='deploy_sonatype', action='store_true',, +                      help='Installs and Deploys the release on a sonatype staging repository.'), +  parser.add_argument('--deploy-s3', dest='deploy_s3', action='store_true',, +  parser.add_argument('--deploy-s3-repos', dest='deploy_s3_repos', action='store_true',, +                      help='Creates package repositories in S3 repo'), +  parser.add_argument('--no-install', dest='no_install', action='store_true',, +                      help='Does not run "mvn install", expects this to be run already and reuses artifacts from local repo, only useful with --deploy-s3/--deploy-s3-repos, after sonatype deplomeny to ensure same artifacts'), +  parser.add_argument('--skip-doc-check', dest='skip_doc_check', action='store_false',, +                      help='Skips any checks for pending documentation changes'), +  parser.add_argument('--skip-tests', dest='skip_tests', action='store_true',, +                      help='Skips any test runs'), +  parser.add_argument('--gpg-key', dest='gpg_key', default="D88E42B4",, +  parser.add_argument('--bucket', '-b', dest='bucket', default="download.elasticsearch.org",, +                      help='Allows you to specify a different s3 bucket to upload the artifacts to'), +  parser.add_argument('--quiet', dest='quiet', action='store_true',, +                      help='Runs the script in quiet mode'), +  parser.add_argument('--check', dest='check', action='store_true',, +  # by default, we only run mvn install and dont push anything repo, +  parser.set_defaults(deploy_sonatype=False), +  parser.set_defaults(deploy_s3=False), +  parser.set_defaults(deploy_s3_repos=False), +  parser.set_defaults(no_install=False), +  # other defaults, +  parser.set_defaults(skip_doc_check=False), +  parser.set_defaults(quiet=False), +  parser.set_defaults(skip_tests=False), +, +  args = parser.parse_args(), +  skip_doc_check = args.skip_doc_check, +  gpg_key = args.gpg_key, +  bucket = args.bucket, +  deploy_sonatype = args.deploy_sonatype, +  deploy_s3 = args.deploy_s3, +  deploy_s3_repos = args.deploy_s3_repos, +  run_mvn_install = not args.no_install, +  skip_tests = args.skip_tests, +, +  check_environment_and_commandline_tools(args.check), +, +  if not run_mvn_install and deploy_sonatype:, +    print('Using --no-install and --deploy-sonatype together does not work. Exiting'), +    sys.exit(-1), +, +  print('*** Preparing a release candidate: ', end=''), +  print('deploy sonatype: %s%s%s' % (COLOR_OK if deploy_sonatype else COLOR_FAIL, 'yes' if deploy_sonatype else 'no', COLOR_END), end=''), +  print(', deploy s3: %s%s%s' % (COLOR_OK if deploy_s3 else COLOR_FAIL, 'yes' if deploy_s3 else 'no', COLOR_END), end=''), +  print(', deploy s3 repos: %s%s%s' % (COLOR_OK if deploy_s3_repos else COLOR_FAIL, 'yes' if deploy_s3_repos else 'no', COLOR_END), end=''), +  print(''), +, +  shortHash = subprocess.check_output('git log --pretty=format:"%h" -n 1', shell=True).decode('utf-8'), +  releaseDirectory = os.getenv('HOME') + '/elastic-releases', +  release_version = find_release_version(), +  localRepo = '%s/elasticsearch-%s-%s' % (releaseDirectory, release_version, shortHash), +  localRepoElasticsearch = localRepo + '/org/elasticsearch', +  if not os.path.exists(releaseDirectory):, +  if os.path.exists(localRepoElasticsearch) and run_mvn_install:, +  mvn_target = 'deploy' if deploy_sonatype else 'install', +  tests = '-DskipTests' if skip_tests else '-Dskip.integ.tests=true', +  install_command = 'mvn clean %s -Prelease %s -Dgpg.key="%s" -Dpackaging.rpm.rpmbuild=/usr/bin/rpmbuild -Drpm.sign=true -Dmaven.repo.local=%s -Dno.commit.pattern="\\bno(n|)commit\\b" -Dforbidden.test.signatures=""' % (mvn_target, tests, gpg_key, localRepo), +, +  if not run_mvn_install:, +    print(''), +    print('*** By choosing --no-install we assume you ran the following commands successfully:'), +    print('  %s' % (install_command)), +    print('  1. Remove all _remote.repositories: %s' % (clean_repo_command)), +    print('  2. Rename all maven metadata files: %s' % (rename_metadata_files_command)), +  else:, +  print('Ensuring that RPM has been signed'), +  s3cmd_sync_to_staging_bucket_cmd = 's3cmd sync -P %s s3://%s/elasticsearch/staging/%s-%s/org/' % (localRepoElasticsearch, bucket, release_version, shortHash), +  s3_bucket_sync_to = '%s/elasticsearch/staging/%s-%s/repos/' % (bucket, release_version, shortHash), +  debs3_prefix = 'elasticsearch/staging/%s-%s/repos/%s/debian' % (release_version, shortHash, major_minor_version), +  debs3_upload_cmd = 'deb-s3 upload --preserve-versions %s/distribution/deb/elasticsearch/%s/elasticsearch-%s.deb -b %s --prefix %s --sign %s --arch amd64' % (localRepoElasticsearch, release_version, release_version, bucket, debs3_prefix, gpg_key), +  debs3_list_cmd = 'deb-s3 list -b %s --prefix %s' % (bucket, debs3_prefix), +  debs3_verify_cmd = 'deb-s3 verify -b %s --prefix %s' % (bucket, debs3_prefix), +  rpms3_prefix = 'elasticsearch/staging/%s-%s/repos/%s/centos' % (release_version, shortHash, major_minor_version), +  rpms3_upload_cmd = 'rpm-s3 -v -b %s -p %s --sign --visibility public-read -k 0 %s' % (bucket, rpms3_prefix, rpm), +  if deploy_s3:, +, +  if deploy_s3_repos:, +    print('*** Syncing official package repository into staging s3 bucket'), +    run(s3cmd_sync_official_repo_cmd), +    print('*** Uploading debian package (you will be prompted for the passphrase!)')]