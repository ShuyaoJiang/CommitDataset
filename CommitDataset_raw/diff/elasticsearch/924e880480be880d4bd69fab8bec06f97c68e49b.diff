[+++ b/core/src/main/java/org/elasticsearch/action/termvectors/TransportShardMultiTermsVectorAction.java, +                                                IndexNameExpressionResolver indexNameExpressionResolver) {, +                TermVectorsResponse termVectorsResponse = indexShard.getTermVectors(termVectorsRequest);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TransportShardMultiTermsVectorAction.java, +                                                IndexNameExpressionResolver indexNameExpressionResolver) {, +                TermVectorsResponse termVectorsResponse = indexShard.getTermVectors(termVectorsRequest);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TransportTermVectorsAction.java, +                                      IndexNameExpressionResolver indexNameExpressionResolver) {, +        TermVectorsResponse response = indexShard.getTermVectors(request);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TransportShardMultiTermsVectorAction.java, +                                                IndexNameExpressionResolver indexNameExpressionResolver) {, +                TermVectorsResponse termVectorsResponse = indexShard.getTermVectors(termVectorsRequest);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TransportTermVectorsAction.java, +                                      IndexNameExpressionResolver indexNameExpressionResolver) {, +        TermVectorsResponse response = indexShard.getTermVectors(request);, +++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java, +, +    /***, +     * @return the current value of minimum master nodes, or -1 for not set, +     */, +    int getMinimumMasterNodes();, +, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TransportShardMultiTermsVectorAction.java, +                                                IndexNameExpressionResolver indexNameExpressionResolver) {, +                TermVectorsResponse termVectorsResponse = indexShard.getTermVectors(termVectorsRequest);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TransportTermVectorsAction.java, +                                      IndexNameExpressionResolver indexNameExpressionResolver) {, +        TermVectorsResponse response = indexShard.getTermVectors(request);, +++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java, +, +    /***, +     * @return the current value of minimum master nodes, or -1 for not set, +     */, +    int getMinimumMasterNodes();, +, +++ b/core/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +    @Override, +    public int getMinimumMasterNodes() {, +        return -1;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TransportShardMultiTermsVectorAction.java, +                                                IndexNameExpressionResolver indexNameExpressionResolver) {, +                TermVectorsResponse termVectorsResponse = indexShard.getTermVectors(termVectorsRequest);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TransportTermVectorsAction.java, +                                      IndexNameExpressionResolver indexNameExpressionResolver) {, +        TermVectorsResponse response = indexShard.getTermVectors(request);, +++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java, +, +    /***, +     * @return the current value of minimum master nodes, or -1 for not set, +     */, +    int getMinimumMasterNodes();, +, +++ b/core/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +    @Override, +    public int getMinimumMasterNodes() {, +        return -1;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    @Override, +    public int getMinimumMasterNodes() {, +        return electMaster.minimumMasterNodes();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TransportShardMultiTermsVectorAction.java, +                                                IndexNameExpressionResolver indexNameExpressionResolver) {, +                TermVectorsResponse termVectorsResponse = indexShard.getTermVectors(termVectorsRequest);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TransportTermVectorsAction.java, +                                      IndexNameExpressionResolver indexNameExpressionResolver) {, +        TermVectorsResponse response = indexShard.getTermVectors(request);, +++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java, +, +    /***, +     * @return the current value of minimum master nodes, or -1 for not set, +     */, +    int getMinimumMasterNodes();, +, +++ b/core/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +    @Override, +    public int getMinimumMasterNodes() {, +        return -1;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    @Override, +    public int getMinimumMasterNodes() {, +        return electMaster.minimumMasterNodes();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/gateway/Gateway.java, +import org.elasticsearch.discovery.Discovery;, +import java.util.function.Supplier;, +    private final Supplier<Integer> minimumMasterNodesProvider;, +, +                   TransportNodesListGatewayMetaState listGatewayMetaState, ClusterName clusterName, Discovery discovery) {, +        this.minimumMasterNodesProvider = discovery::getMinimumMasterNodes;, +        int requiredAllocation = Math.max(1, minimumMasterNodesProvider.get());, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TransportShardMultiTermsVectorAction.java]