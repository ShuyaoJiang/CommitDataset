[+++ b/core/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +import org.elasticsearch.ElasticsearchTimeoutException;, +import org.elasticsearch.Version;, +++ b/core/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +import org.elasticsearch.ElasticsearchTimeoutException;, +import org.elasticsearch.Version;, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-lang-python", +            } catch (ElasticsearchTimeoutException e) {, +                } catch (ElasticsearchTimeoutException e) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/staging/%s/org/elasticsearch/plugin/%s/%s/%s-%s.zip", Build.CURRENT.hashShort(), repo, version, repo, version));, +                    addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +import org.elasticsearch.ElasticsearchTimeoutException;, +import org.elasticsearch.Version;, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-lang-python", +            } catch (ElasticsearchTimeoutException e) {, +                } catch (ElasticsearchTimeoutException e) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/staging/%s/org/elasticsearch/plugin/%s/%s/%s-%s.zip", Build.CURRENT.hashShort(), repo, version, repo, version));, +                    addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueFormat.java, +            return new DateTime(format, new ValueFormatter.DateTime(format, timezone), new ValueParser.DateMath(format, timezone));, +            return new DateTime(fieldType.dateTimeFormatter().format(), ValueFormatter.DateTime.mapper(fieldType, timezone), ValueParser.DateMath.mapper(fieldType, timezone));, +        private DateTime(String pattern, ValueFormatter formatter, ValueParser parser) {, +++ b/core/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +import org.elasticsearch.ElasticsearchTimeoutException;, +import org.elasticsearch.Version;, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-lang-python", +            } catch (ElasticsearchTimeoutException e) {, +                } catch (ElasticsearchTimeoutException e) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/staging/%s/org/elasticsearch/plugin/%s/%s/%s-%s.zip", Build.CURRENT.hashShort(), repo, version, repo, version));, +                    addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueFormat.java, +            return new DateTime(format, new ValueFormatter.DateTime(format, timezone), new ValueParser.DateMath(format, timezone));, +            return new DateTime(fieldType.dateTimeFormatter().format(), ValueFormatter.DateTime.mapper(fieldType, timezone), ValueParser.DateMath.mapper(fieldType, timezone));, +        private DateTime(String pattern, ValueFormatter formatter, ValueParser parser) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueParser.java, +import org.elasticsearch.common.Nullable;, +import org.joda.time.DateTimeZone;, +        public static final DateMath DEFAULT = new ValueParser.DateMath(new DateMathParser(DateFieldMapper.Defaults.DATE_TIME_FORMATTER), DateTimeZone.UTC);, +        private DateTimeZone timezone = DateTimeZone.UTC;, +, +        public DateMath(String format, DateTimeZone timezone) {, +            this(new DateMathParser(Joda.forPattern(format)), timezone);, +        public DateMath(DateMathParser parser, @Nullable DateTimeZone timeZone) {, +            if (timeZone != null) {, +                this.timezone = timeZone;, +            }, +            return parser.parse(value, now, false, timezone);, +        public static DateMath mapper(DateFieldMapper.DateFieldType fieldType, @Nullable DateTimeZone timezone) {, +            return new DateMath(new DateMathParser(fieldType.dateTimeFormatter()), timezone);, +++ b/core/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +import org.elasticsearch.ElasticsearchTimeoutException;, +import org.elasticsearch.Version;, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-lang-python", +            } catch (ElasticsearchTimeoutException e) {, +                } catch (ElasticsearchTimeoutException e) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/staging/%s/org/elasticsearch/plugin/%s/%s/%s-%s.zip", Build.CURRENT.hashShort(), repo, version, repo, version));, +                    addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueFormat.java, +            return new DateTime(format, new ValueFormatter.DateTime(format, timezone), new ValueParser.DateMath(format, timezone));, +            return new DateTime(fieldType.dateTimeFormatter().format(), ValueFormatter.DateTime.mapper(fieldType, timezone), ValueParser.DateMath.mapper(fieldType, timezone));, +        private DateTime(String pattern, ValueFormatter formatter, ValueParser parser) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueParser.java, +import org.elasticsearch.common.Nullable;, +import org.joda.time.DateTimeZone;, +        public static final DateMath DEFAULT = new ValueParser.DateMath(new DateMathParser(DateFieldMapper.Defaults.DATE_TIME_FORMATTER), DateTimeZone.UTC);, +        private DateTimeZone timezone = DateTimeZone.UTC;, +, +        public DateMath(String format, DateTimeZone timezone) {, +            this(new DateMathParser(Joda.forPattern(format)), timezone);, +        public DateMath(DateMathParser parser, @Nullable DateTimeZone timeZone) {, +            if (timeZone != null) {, +                this.timezone = timeZone;, +            }, +            return parser.parse(value, now, false, timezone);, +        public static DateMath mapper(DateFieldMapper.DateFieldType fieldType, @Nullable DateTimeZone timezone) {, +            return new DateMath(new DateMathParser(fieldType.dateTimeFormatter()), timezone);, +++ b/core/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +++ b/core/src/main/java/org/elasticsearch/common/http/client/HttpDownloadHelper.java, +import org.elasticsearch.ElasticsearchTimeoutException;, +import org.elasticsearch.Version;, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +                    "elasticsearch-lang-python", +            } catch (ElasticsearchTimeoutException e) {, +                } catch (ElasticsearchTimeoutException e) {, +                        addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/staging/%s/org/elasticsearch/plugin/%s/%s/%s-%s.zip", Build.CURRENT.hashShort(), repo, version, repo, version));, +                    addUrl(urls, String.format(Locale.ROOT, "http://download.elastic.co/elasticsearch/release/org/elasticsearch/plugin/%s/%s/%s-%s.zip", repo, version, repo, version));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueFormat.java, +            return new DateTime(format, new ValueFormatter.DateTime(format, timezone), new ValueParser.DateMath(format, timezone));, +            return new DateTime(fieldType.dateTimeFormatter().format(), ValueFormatter.DateTime.mapper(fieldType, timezone), ValueParser.DateMath.mapper(fieldType, timezone));, +        private DateTime(String pattern, ValueFormatter formatter, ValueParser parser) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueParser.java, +import org.elasticsearch.common.Nullable;, +import org.joda.time.DateTimeZone;, +        public static final DateMath DEFAULT = new ValueParser.DateMath(new DateMathParser(DateFieldMapper.Defaults.DATE_TIME_FORMATTER), DateTimeZone.UTC);, +        private DateTimeZone timezone = DateTimeZone.UTC;]