[+++ b/pom.xml, +            <!-- joda 2.0 moved to using volatile fields for datetime -->, +            <!-- When updating to a new version, make sure to update our copy of BaseDateTime -->, +            <version>2.1</version>, +++ b/pom.xml, +            <!-- joda 2.0 moved to using volatile fields for datetime -->, +            <!-- When updating to a new version, make sure to update our copy of BaseDateTime -->, +            <version>2.1</version>, +++ b/src/main/java/org/joda/time/base/BaseDateTime.java, +/*, + *  Copyright 2001-2011 Stephen Colebourne, + *, + *  Licensed under the Apache License, Version 2.0 (the "License");, + *  you may not use this file except in compliance with the License., + *  You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing, software, + *  distributed under the License is distributed on an "AS IS" BASIS,, + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *  See the License for the specific language governing permissions and, + *  limitations under the License., + */, +package org.joda.time.base;, +, +import org.joda.time.Chronology;, +import org.joda.time.DateTimeUtils;, +import org.joda.time.DateTimeZone;, +import org.joda.time.ReadableDateTime;, +import org.joda.time.chrono.ISOChronology;, +import org.joda.time.convert.ConverterManager;, +import org.joda.time.convert.InstantConverter;, +, +import java.io.Serializable;, +, +/**, + * WE COPIED THIS FILE TO REMOVE THE volatile from it!..., + */, +, +/**, + * BaseDateTime is an abstract implementation of ReadableDateTime that stores, + * data in <code>long</code> and <code>Chronology</code> fields., + * <p/>, + * This class should generally not be used directly by API users., + * The {@link ReadableDateTime} interface should be used when different, + * kinds of date/time objects are to be referenced., + * <p/>, + * BaseDateTime subclasses may be mutable and not thread-safe., + *, + * @author Stephen Colebourne, + * @author Kandarp Shah, + * @author Brian S O'Neill, + * @since 1.0, + */, +public abstract class BaseDateTime, +        extends AbstractDateTime, +        implements ReadableDateTime, Serializable {, +, +    /**, +     * Serialization lock, +     */, +    private static final long serialVersionUID = -6728882245981L;, +, +    /**, +     * The millis from 1970-01-01T00:00:00Z, +     */, +    private long iMillis;, +    /**, +     * The chronology to use, +     */, +    private Chronology iChronology;, +, +    //-----------------------------------------------------------------------, +, +    /**, +     * Constructs an instance set to the current system millisecond time, +     * using <code>ISOChronology</code> in the default time zone., +     */, +    public BaseDateTime() {, +        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());, +    }, +, +    /**, +     * Constructs an instance set to the current system millisecond time, +     * using <code>ISOChronology</code> in the specified time zone., +     * <p/>, +     * If the specified time zone is null, the default zone is used., +     *, +     * @param zone the time zone, null means default zone, +     */, +    public BaseDateTime(DateTimeZone zone) {, +        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));, +    }, +, +    /**, +     * Constructs an instance set to the current system millisecond time, +     * using the specified chronology., +     * <p/>, +     * If the chronology is null, <code>ISOChronology</code>]