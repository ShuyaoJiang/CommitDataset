[+++ b/.ci/java-versions.properties, +++ b/.ci/java-versions.properties, +++ /dev/null, +++ b/.ci/java-versions.properties, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        if (bwcVersion != null && bwcVersion.before("6.5.0-SNAPSHOT")) {, +            return numNodes > 1 ? numNodes : -1, +        } else {, +            return numNodes > 1 ? numNodes.intdiv(2) + 1 : -1, +        }, +++ b/.ci/java-versions.properties, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        if (bwcVersion != null && bwcVersion.before("6.5.0-SNAPSHOT")) {, +            return numNodes > 1 ? numNodes : -1, +        } else {, +            return numNodes > 1 ? numNodes.intdiv(2) + 1 : -1, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        if (esConfig.containsKey('discovery.zen.master_election.wait_for_joins_timeout') == false) {, +            // If a node decides to become master based on partial information from the pinging, don't let it hang for 30 seconds to correct, +            // its mistake. Instead, only wait 5s to do another round of pinging., +            // This is necessary since we use 30s as the default timeout in REST requests waiting for cluster formation, +            // so we need to bail quicker than the default 30s for the cluster to form in time., +            esConfig['discovery.zen.master_election.wait_for_joins_timeout'] = '5s', +        }, +++ b/.ci/java-versions.properties, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        if (bwcVersion != null && bwcVersion.before("6.5.0-SNAPSHOT")) {, +            return numNodes > 1 ? numNodes : -1, +        } else {, +            return numNodes > 1 ? numNodes.intdiv(2) + 1 : -1, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        if (esConfig.containsKey('discovery.zen.master_election.wait_for_joins_timeout') == false) {, +            // If a node decides to become master based on partial information from the pinging, don't let it hang for 30 seconds to correct, +            // its mistake. Instead, only wait 5s to do another round of pinging., +            // This is necessary since we use 30s as the default timeout in REST requests waiting for cluster formation, +            // so we need to bail quicker than the default 30s for the cluster to form in time., +            esConfig['discovery.zen.master_election.wait_for_joins_timeout'] = '5s', +        }, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/FilePermissionsTask.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.gradle.precommit;, +, +import java.io.File;, +import java.io.IOException;, +import java.nio.file.Files;, +import java.nio.file.attribute.PosixFileAttributeView;, +import java.nio.file.attribute.PosixFilePermission;, +import java.util.List;, +import java.util.Set;, +import java.util.stream.Collectors;, +, +import org.apache.tools.ant.taskdefs.condition.Os;, +import org.gradle.api.DefaultTask;, +import org.gradle.api.GradleException;, +import org.gradle.api.file.FileCollection;, +import org.gradle.api.file.FileTree;, +import org.gradle.api.plugins.JavaPluginConvention;, +import org.gradle.api.tasks.InputFiles;, +import org.gradle.api.tasks.OutputFile;, +import org.gradle.api.tasks.SkipWhenEmpty;, +import org.gradle.api.tasks.SourceSetContainer;, +import org.gradle.api.tasks.StopExecutionException;, +import org.gradle.api.tasks.TaskAction;, +import org.gradle.api.tasks.util.PatternFilterable;, +import org.gradle.api.tasks.util.PatternSet;, +, +/**, + * Checks source files for correct file permissions., + */, +public class FilePermissionsTask extends DefaultTask {, +, +    /**, +     * A pattern set of which files should be checked., +     */, +    private final PatternFilterable filesFilter = new PatternSet(), +            // we always include all source files, and exclude what should not be checked, +            .include("**"), +            // exclude sh files that might have the executable bit set]