[+++ b/dev-tools/build_release.py, +def build_release(run_tests=False, dry_run=True, cpus=1, bwc_version=None):, +  if bwc_version:, +      print('Running Backwards compatibilty tests against version [%s]' % (bwc_version)), +      run_mvn('clean', 'test -Dtests.filter=@backwards -Dtests.bwc.version=%s -Dtests.bwc=true -Dtests.jvms=1' % bwc_version), +# finds the highest available bwc version to test against, +def find_bwc_version(release_version, bwc_dir='backwards'):, +  log('Lookup bwc version in directory [%s]' % bwc_dir), +  bwc_version = None, +  max_version = [int(x) for x in release_version.split('.')], +  for dir in os.listdir(bwc_dir):, +    if os.path.isdir(os.path.join(bwc_dir, dir)) and dir.startswith('elasticsearch-'):, +      version = [int(x) for x in dir[len('elasticsearch-'):].split('.')], +      if version < max_version: # bwc tests only against smaller versions, +        if (not bwc_version) or version > [int(x) for x in bwc_version.split('.')]:, +          bwc_version = dir[len('elasticsearch-'):], +  log('Using bwc version [%s]' % bwc_version), +  return bwc_version, +, +  parser.add_argument('--bwc', '-w', dest='bwc', metavar='backwards', default='backwards',, +                      help='Backwards compatibility version path to use to run compatibility tests against'), +  bwc_path = args.bwc, +      build_release(run_tests=run_tests, dry_run=dry_run, cpus=cpus, bwc_version=find_bwc_version(release_version, bwc_path))]