[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import com.google.common.collect.Maps;, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.util.json.JsonBuilder;, +import java.util.Map;, +    private Map<String, String> mappings = Maps.newHashMap();, +, +     * Adds mapping that will be added when the index gets created., +     *, +     * @param type   The mapping type, +     * @param source The mapping source, +     */, +    public CreateIndexRequest mapping(String type, String source) {, +        mappings.put(type, source);, +        return this;, +    }, +, +    /**, +     * Adds mapping that will be added when the index gets created., +     *, +     * @param type   The mapping type, +     * @param source The mapping source, +     */, +    public CreateIndexRequest mapping(String type, JsonBuilder source) {, +        try {, +            mappings.put(type, source.string());, +        } catch (IOException e) {, +            throw new ElasticSearchIllegalArgumentException("Failed to build json for mapping request", e);, +        }, +        return this;, +    }, +, +    Map<String, String> mappings() {, +        return this.mappings;, +    }, +, +    /**, +        int size = in.readInt();, +        for (int i = 0; i < size; i++) {, +            mappings.put(in.readUTF(), in.readUTF());, +        }, +        out.writeInt(mappings.size());, +        for (Map.Entry<String, String> entry : mappings.entrySet()) {, +            out.writeUTF(entry.getKey());, +            out.writeUTF(entry.getValue());, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import com.google.common.collect.Maps;, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.util.json.JsonBuilder;, +import java.util.Map;, +    private Map<String, String> mappings = Maps.newHashMap();, +, +     * Adds mapping that will be added when the index gets created., +     *, +     * @param type   The mapping type, +     * @param source The mapping source, +     */, +    public CreateIndexRequest mapping(String type, String source) {, +        mappings.put(type, source);, +        return this;, +    }, +, +    /**, +     * Adds mapping that will be added when the index gets created., +     *, +     * @param type   The mapping type, +     * @param source The mapping source, +     */, +    public CreateIndexRequest mapping(String type, JsonBuilder source) {, +        try {, +            mappings.put(type, source.string());, +        } catch (IOException e) {, +            throw new ElasticSearchIllegalArgumentException("Failed to build json for mapping request", e);, +        }, +        return this;, +    }, +, +    Map<String, String> mappings() {, +        return this.mappings;, +    }, +, +    /**, +        int size = in.readInt();, +        for (int i = 0; i < size; i++) {, +            mappings.put(in.readUTF(), in.readUTF());, +        }, +        out.writeInt(mappings.size());, +        for (Map.Entry<String, String> entry : mappings.entrySet()) {, +            out.writeUTF(entry.getKey());, +            out.writeUTF(entry.getValue());, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/TransportCreateIndexAction.java, +        MetaDataService.CreateIndexResult createIndexResult = metaDataService.createIndex(request.index(), request.settings(), request.mappings(), request.timeout());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import com.google.common.collect.Maps;, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.util.json.JsonBuilder;, +import java.util.Map;, +    private Map<String, String> mappings = Maps.newHashMap();]