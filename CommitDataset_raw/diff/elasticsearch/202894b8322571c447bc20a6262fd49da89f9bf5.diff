[+++ b/client/rest-high-level/build.gradle, +, +integTestCluster {, +  setting 'xpack.license.self_generated.type', 'trial', +}, +++ b/client/rest-high-level/build.gradle, +, +integTestCluster {, +  setting 'xpack.license.self_generated.type', 'trial', +}, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.protocol.xpack.watcher.PutWatchRequest;, +    static Request xPackWatcherPutWatch(PutWatchRequest putWatchRequest) {, +        String endpoint = new EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("watcher"), +            .addPathPartAsIs("watch"), +            .addPathPart(putWatchRequest.getId()), +            .build();, +, +        Request request = new Request(HttpPut.METHOD_NAME, endpoint);, +        Params params = new Params(request).withVersion(putWatchRequest.getVersion());, +        if (putWatchRequest.isActive() == false) {, +            params.putParam("active", "false");, +        }, +        ContentType contentType = createContentType(putWatchRequest.xContentType());, +        BytesReference source = putWatchRequest.getSource();, +        request.setEntity(new ByteArrayEntity(source.toBytesRef().bytes, 0, source.length(), contentType));, +        return request;, +    }, +, +++ b/client/rest-high-level/build.gradle, +, +integTestCluster {, +  setting 'xpack.license.self_generated.type', 'trial', +}, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.protocol.xpack.watcher.PutWatchRequest;, +    static Request xPackWatcherPutWatch(PutWatchRequest putWatchRequest) {, +        String endpoint = new EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("watcher"), +            .addPathPartAsIs("watch"), +            .addPathPart(putWatchRequest.getId()), +            .build();, +, +        Request request = new Request(HttpPut.METHOD_NAME, endpoint);, +        Params params = new Params(request).withVersion(putWatchRequest.getVersion());, +        if (putWatchRequest.isActive() == false) {, +            params.putParam("active", "false");, +        }, +        ContentType contentType = createContentType(putWatchRequest.xContentType());, +        BytesReference source = putWatchRequest.getSource();, +        request.setEntity(new ByteArrayEntity(source.toBytesRef().bytes, 0, source.length(), contentType));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherClient.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.client;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.protocol.xpack.watcher.PutWatchRequest;, +import org.elasticsearch.protocol.xpack.watcher.PutWatchResponse;, +, +import java.io.IOException;, +, +import static java.util.Collections.emptySet;, +, +public final class WatcherClient {, +, +    private final RestHighLevelClient restHighLevelClient;, +, +    WatcherClient(RestHighLevelClient restHighLevelClient) {, +        this.restHighLevelClient = restHighLevelClient;, +    }, +, +    /**, +     * Put a watch into the cluster, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized]