[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = "-ea" +, +        " " + "-Xms" + System.getProperty('tests.heap.size', '512m') +, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = "-ea" +, +        " " + "-Xms" + System.getProperty('tests.heap.size', '512m') +, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import java.util.concurrent.TimeUnit, +            project.configurations.elasticsearchBwcDistro.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS), +            project.configurations.elasticsearchBwcPlugins.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = "-ea" +, +        " " + "-Xms" + System.getProperty('tests.heap.size', '512m') +, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import java.util.concurrent.TimeUnit, +            project.configurations.elasticsearchBwcDistro.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS), +            project.configurations.elasticsearchBwcPlugins.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = "-ea" +, +        " " + "-Xms" + System.getProperty('tests.heap.size', '512m') +, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import java.util.concurrent.TimeUnit, +            project.configurations.elasticsearchBwcDistro.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS), +            project.configurations.elasticsearchBwcPlugins.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = "-ea" +, +        " " + "-Xms" + System.getProperty('tests.heap.size', '512m') +, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import java.util.concurrent.TimeUnit, +            project.configurations.elasticsearchBwcDistro.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS), +            project.configurations.elasticsearchBwcPlugins.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.LocalClusterUpdateTask;, +            if (request.local()) {, +                clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", new LocalClusterUpdateTask(request.waitForEvents()) {, +                    @Override, +                    public ClusterTasksResult<LocalClusterUpdateTask> execute(ClusterState currentState) {, +                        return unchanged();, +                    }, +, +                    @Override, +                    public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +                        final long timeoutInMillis = Math.max(0, endTimeMS - TimeValue.nsecToMSec(System.nanoTime()));, +                        final TimeValue newTimeout = TimeValue.timeValueMillis(timeoutInMillis);, +                        request.timeout(newTimeout);, +                        executeHealth(request, listener);, +                    }, +, +                    @Override, +                    public void onFailure(String source, Exception e) {, +                        logger.error((Supplier<?>) () -> new ParameterizedMessage("unexpected failure during [{}]", source), e);, +                        listener.onFailure(e);, +                    }, +                });, +            } else {, +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = "-ea" +, +        " " + "-Xms" + System.getProperty('tests.heap.size', '512m') +, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import java.util.concurrent.TimeUnit, +            project.configurations.elasticsearchBwcDistro.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS), +            project.configurations.elasticsearchBwcPlugins.resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/build.gradle, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +import org.elasticsearch.cluster.LocalClusterUpdateTask;, +            if (request.local()) {, +                clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])", new LocalClusterUpdateTask(request.waitForEvents()) {, +                    @Override, +                    public ClusterTasksResult<LocalClusterUpdateTask> execute(ClusterState currentState) {, +                        return unchanged();, +                    }, +, +                    @Override, +                    public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +                        final long timeoutInMillis = Math.max(0, endTimeMS - TimeValue.nsecToMSec(System.nanoTime()));, +                        final TimeValue newTimeout = TimeValue.timeValueMillis(timeoutInMillis);, +                        request.timeout(newTimeout);, +                        executeHealth(request, listener);, +                    }, +, +                    @Override, +                    public void onFailure(String source, Exception e) {, +                        logger.error((Supplier<?>) () -> new ParameterizedMessage("unexpected failure during [{}]", source), e);, +                        listener.onFailure(e);, +                    }, +                });, +            } else {]