[+++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +import org.elasticsearch.xpack.sql.querydsl.agg.GroupByColumnAgg;, +import org.elasticsearch.xpack.sql.querydsl.agg.GroupingAgg;, +, +        // push limit onto group aggs, +        if (container.limit() > 0) {, +            List<GroupingAgg> groups = new ArrayList<>(aggs.groups());, +            if (groups.size() > 0) {, +                // get just the root agg, +                GroupingAgg mainAgg = groups.get(0);, +                if (mainAgg instanceof GroupByColumnAgg) {, +                    groups.set(0, ((GroupByColumnAgg) mainAgg).withLimit(container.limit()));, +                    aggs = aggs.with(groups);, +                }, +            }, +        }, +, +, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +import org.elasticsearch.xpack.sql.querydsl.agg.GroupByColumnAgg;, +import org.elasticsearch.xpack.sql.querydsl.agg.GroupingAgg;, +, +        // push limit onto group aggs, +        if (container.limit() > 0) {, +            List<GroupingAgg> groups = new ArrayList<>(aggs.groups());, +            if (groups.size() > 0) {, +                // get just the root agg, +                GroupingAgg mainAgg = groups.get(0);, +                if (mainAgg instanceof GroupByColumnAgg) {, +                    groups.set(0, ((GroupByColumnAgg) mainAgg).withLimit(container.limit()));, +                    aggs = aggs.with(groups);, +                }, +            }, +        }, +, +, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/plan/physical/EsQueryExec.java, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +import org.elasticsearch.xpack.sql.querydsl.agg.GroupByColumnAgg;, +import org.elasticsearch.xpack.sql.querydsl.agg.GroupingAgg;, +, +        // push limit onto group aggs, +        if (container.limit() > 0) {, +            List<GroupingAgg> groups = new ArrayList<>(aggs.groups());, +            if (groups.size() > 0) {, +                // get just the root agg, +                GroupingAgg mainAgg = groups.get(0);, +                if (mainAgg instanceof GroupByColumnAgg) {, +                    groups.set(0, ((GroupByColumnAgg) mainAgg).withLimit(container.limit()));, +                    aggs = aggs.with(groups);, +                }, +            }, +        }, +, +, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/plan/physical/EsQueryExec.java, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Aggs.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +import org.elasticsearch.search.aggregations.PipelineAggregationBuilder;, +import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;, +, +    public Aggs with(List<GroupingAgg> groups) {, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +import org.elasticsearch.xpack.sql.querydsl.agg.GroupByColumnAgg;, +import org.elasticsearch.xpack.sql.querydsl.agg.GroupingAgg;, +, +        // push limit onto group aggs, +        if (container.limit() > 0) {, +            List<GroupingAgg> groups = new ArrayList<>(aggs.groups());, +            if (groups.size() > 0) {, +                // get just the root agg, +                GroupingAgg mainAgg = groups.get(0);, +                if (mainAgg instanceof GroupByColumnAgg) {, +                    groups.set(0, ((GroupByColumnAgg) mainAgg).withLimit(container.limit()));, +                    aggs = aggs.with(groups);, +                }, +            }, +        }, +, +, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/plan/physical/EsQueryExec.java, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/Aggs.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +import org.elasticsearch.search.aggregations.PipelineAggregationBuilder;, +import org.elasticsearch.xpack.sql.SqlIllegalArgumentException;, +, +    public Aggs with(List<GroupingAgg> groups) {, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByColumnAgg.java, +    private static final int DEFAULT_LIMIT = 512;, +    private final int limit;, +, +        this(id, propertyPath, fieldName, emptyList(), emptyList(), emptyMap(), -1);, +    public GroupByColumnAgg(String id, String propertyPath, String fieldName, List<LeafAgg> subAggs, List<PipelineAgg> subPipelines, Map<String, Direction> order, int limit) {, +        this.limit = limit < 0 ? DEFAULT_LIMIT : Math.min(limit, DEFAULT_LIMIT);, +    }, +, +    public int limit() {, +        return limit;, +        TermsAggregationBuilder terms = termsTarget(terms(id()).size(limit));, +        return new GroupByColumnAgg(id, propertyPath, fieldName, subAggs, subPipelines, order, limit);]