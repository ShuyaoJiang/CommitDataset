[+++ b/pom.xml, +            <version>0.4.1</version>, +            <version>1.13</version>, +++ b/pom.xml, +            <version>0.4.1</version>, +            <version>1.13</version>, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BaseLineStringBuilder.java, +import com.spatial4j.core.shape.ShapeCollection;, +        return jtsGeometry(geometry);, +++ b/pom.xml, +            <version>0.4.1</version>, +            <version>1.13</version>, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BaseLineStringBuilder.java, +import com.spatial4j.core.shape.ShapeCollection;, +        return jtsGeometry(geometry);, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java, +        return jtsGeometry(buildGeometry(FACTORY, wrapdateline));, +++ b/pom.xml, +            <version>0.4.1</version>, +            <version>1.13</version>, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BaseLineStringBuilder.java, +import com.spatial4j.core.shape.ShapeCollection;, +        return jtsGeometry(geometry);, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java, +        return jtsGeometry(buildGeometry(FACTORY, wrapdateline));, +++ b/src/main/java/org/elasticsearch/common/geo/builders/MultiLineStringBuilder.java, +        return jtsGeometry(geometry);, +++ b/pom.xml, +            <version>0.4.1</version>, +            <version>1.13</version>, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BaseLineStringBuilder.java, +import com.spatial4j.core.shape.ShapeCollection;, +        return jtsGeometry(geometry);, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java, +        return jtsGeometry(buildGeometry(FACTORY, wrapdateline));, +++ b/src/main/java/org/elasticsearch/common/geo/builders/MultiLineStringBuilder.java, +        return jtsGeometry(geometry);, +++ b/src/main/java/org/elasticsearch/common/geo/builders/MultiPointBuilder.java, +import com.spatial4j.core.shape.Point;, +import com.spatial4j.core.shape.ShapeCollection;, +import java.util.ArrayList;, +import java.util.List;, +        //Could wrap JtsGeometry but probably slower due to conversions to/from JTS in relate(), +        //MultiPoint geometry = FACTORY.createMultiPoint(points.toArray(new Coordinate[points.size()]));, +        List<Point> shapes = new ArrayList<Point>(points.size());, +        for (Coordinate coord : points) {, +            shapes.add(SPATIAL_CONTEXT.makePoint(coord.x, coord.y));, +        }, +        return new ShapeCollection<Point>(shapes, SPATIAL_CONTEXT);, +++ b/pom.xml, +            <version>0.4.1</version>, +            <version>1.13</version>, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BaseLineStringBuilder.java, +import com.spatial4j.core.shape.ShapeCollection;, +        return jtsGeometry(geometry);, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java, +        return jtsGeometry(buildGeometry(FACTORY, wrapdateline));, +++ b/src/main/java/org/elasticsearch/common/geo/builders/MultiLineStringBuilder.java, +        return jtsGeometry(geometry);, +++ b/src/main/java/org/elasticsearch/common/geo/builders/MultiPointBuilder.java, +import com.spatial4j.core.shape.Point;, +import com.spatial4j.core.shape.ShapeCollection;, +import java.util.ArrayList;, +import java.util.List;, +        //Could wrap JtsGeometry but probably slower due to conversions to/from JTS in relate(), +        //MultiPoint geometry = FACTORY.createMultiPoint(points.toArray(new Coordinate[points.size()]));, +        List<Point> shapes = new ArrayList<Point>(points.size());, +        for (Coordinate coord : points) {, +            shapes.add(SPATIAL_CONTEXT.makePoint(coord.x, coord.y));, +        }, +        return new ShapeCollection<Point>(shapes, SPATIAL_CONTEXT);, +++ b/src/main/java/org/elasticsearch/common/geo/builders/MultiPolygonBuilder.java, +import java.util.List;, +import com.spatial4j.core.shape.ShapeCollection;, +        List<Shape> shapes = new ArrayList<Shape>(this.polygons.size());, +                    shapes.add(jtsGeometry(PolygonBuilder.polygon(FACTORY, part)));, +            for (BasePolygonBuilder<?> polygon : this.polygons) {, +                shapes.add(jtsGeometry(polygon.toPolygon(FACTORY)));, +        if (shapes.size() == 1), +            return shapes.get(0);, +        else, +            return new ShapeCollection<Shape>(shapes, SPATIAL_CONTEXT);, +        //note: ShapeCollection is probably faster than a Multi* geom., +++ b/pom.xml, +            <version>0.4.1</version>, +            <version>1.13</version>, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BaseLineStringBuilder.java, +import com.spatial4j.core.shape.ShapeCollection;, +        return jtsGeometry(geometry);, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java, +        return jtsGeometry(buildGeometry(FACTORY, wrapdateline));, +++ b/src/main/java/org/elasticsearch/common/geo/builders/MultiLineStringBuilder.java, +        return jtsGeometry(geometry);, +++ b/src/main/java/org/elasticsearch/common/geo/builders/MultiPointBuilder.java, +import com.spatial4j.core.shape.Point;, +import com.spatial4j.core.shape.ShapeCollection;, +import java.util.ArrayList;, +import java.util.List;, +        //Could wrap JtsGeometry but probably slower due to conversions to/from JTS in relate(), +        //MultiPoint geometry = FACTORY.createMultiPoint(points.toArray(new Coordinate[points.size()]));]