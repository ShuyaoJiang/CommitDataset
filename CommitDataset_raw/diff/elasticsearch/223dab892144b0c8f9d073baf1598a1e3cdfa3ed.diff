[+++ b/pom.xml, +        <lucene.version>4.10.0</lucene.version>, +++ b/pom.xml, +        <lucene.version>4.10.0</lucene.version>, +++ /dev/null, +++ b/pom.xml, +        <lucene.version>4.10.0</lucene.version>, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +        <lucene.version>4.10.0</lucene.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +        <lucene.version>4.10.0</lucene.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +        <lucene.version>4.10.0</lucene.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +        <lucene.version>4.10.0</lucene.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +        <lucene.version>4.10.0</lucene.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +        <lucene.version>4.10.0</lucene.version>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +import org.apache.lucene.util.automaton.Automaton;, +import org.apache.lucene.util.automaton.Operations;, +import org.apache.lucene.util.automaton.Transition;, +  private Automaton replaceSep(Automaton a) {, +      Automaton result = new Automaton();, +, +      // Copy all states over, +      int numStates = a.getNumStates();, +      for(int s=0;s<numStates;s++) {, +        result.createState();, +        result.setAccept(s, a.isAccept(s));, +      }, +      Transition t = new Transition();, +      int[] topoSortStates = topoSortStates(a);, +      for(int i=0;i<topoSortStates.length;i++) {, +        int state = topoSortStates[topoSortStates.length-1-i];, +        int count = a.initTransition(state, t);, +        for(int j=0;j<count;j++) {, +          a.getNextTransition(t);, +          if (t.min == TokenStreamToAutomaton.POS_SEP) {, +            assert t.max == TokenStreamToAutomaton.POS_SEP;, +              result.addTransition(state, t.dest, SEP_LABEL);, +              result.addEpsilon(state, t.dest);, +          } else if (t.min == TokenStreamToAutomaton.HOLE) {, +            assert t.max == TokenStreamToAutomaton.HOLE;, +            result.addEpsilon(state, t.dest);, +            result.addTransition(state, t.dest, t.min, t.max);, +, +      result.finishState();, +, +      return result;, +      a = Operations.concatenate(Arrays.asList(queryPrefix, a));, +      a = Operations.determinize(a);, +  private int[] topoSortStates(Automaton a) {, +      int[] states = new int[a.getNumStates()];, +      final Set<Integer> visited = new HashSet<>();, +      final LinkedList<Integer> worklist = new LinkedList<>();, +      worklist.add(0);, +      visited.add(0);, +      int upto = 0;, +      states[upto] = 0;, +      upto++;, +      Transition t = new Transition();, +      while (worklist.size() > 0) {, +        int s = worklist.removeFirst();, +        int count = a.initTransition(s, t);]