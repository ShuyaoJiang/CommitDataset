[+++ b/plugins/repository-s3/build.gradle, +import org.apache.tools.ant.taskdefs.condition.Os, +import org.elasticsearch.gradle.LoggedExec, +import org.elasticsearch.gradle.MavenFilteringHack, +import org.elasticsearch.gradle.test.AntFixture, +import org.elasticsearch.gradle.test.ClusterConfiguration, +import org.elasticsearch.gradle.test.RestIntegTestTask, +, +import java.lang.reflect.Field, +, +boolean useFixture = false, +, +// We test against two repositories, one which uses the usual two-part "permanent" credentials and, +// the other which uses three-part "temporary" or "session" credentials., +, +String s3PermanentAccessKey = System.getenv("amazon_s3_access_key"), +String s3PermanentSecretKey = System.getenv("amazon_s3_secret_key"), +String s3PermanentBucket = System.getenv("amazon_s3_bucket"), +String s3PermanentBasePath = System.getenv("amazon_s3_base_path"), +, +String s3TemporaryAccessKey = System.getenv("amazon_s3_access_key_temporary"), +String s3TemporarySecretKey = System.getenv("amazon_s3_secret_key_temporary"), +String s3TemporarySessionToken = System.getenv("amazon_s3_session_token_temporary"), +String s3TemporaryBucket = System.getenv("amazon_s3_bucket_temporary"), +String s3TemporaryBasePath = System.getenv("amazon_s3_base_path_temporary"), +, +// If all these variables are missing then we are testing against the internal fixture instead, which has the following, +// credentials hard-coded in., +, +if (!s3PermanentAccessKey && !s3PermanentSecretKey && !s3PermanentBucket && !s3PermanentBasePath, +        && !s3TemporaryAccessKey && !s3TemporarySecretKey && !s3TemporaryBucket && !s3TemporaryBasePath && !s3TemporarySessionToken) {, +, +  s3PermanentAccessKey = 's3_integration_test_permanent_access_key', +  s3PermanentSecretKey = 's3_integration_test_permanent_secret_key', +  s3PermanentBucket = 'permanent-bucket-test', +  s3PermanentBasePath = 'integration_test', +, +  s3TemporaryAccessKey = 's3_integration_test_temporary_access_key', +  s3TemporarySecretKey = 's3_integration_test_temporary_secret_key', +  s3TemporaryBucket = 'temporary-bucket-test', +  s3TemporaryBasePath = 'integration_test', +  s3TemporarySessionToken = 's3_integration_test_temporary_session_token', +, +  useFixture = true, +} else if (!s3PermanentAccessKey || !s3PermanentSecretKey || !s3PermanentBucket || !s3PermanentBasePath, +        || !s3TemporaryAccessKey || !s3TemporarySecretKey || !s3TemporaryBucket || !s3TemporaryBasePath || !s3TemporarySessionToken) {, +  throw new IllegalArgumentException("not all options specified to run against external S3 service"), +}, +, +final String minioVersion = 'RELEASE.2018-06-22T23-48-46Z', +final String minioBinDir = "${buildDir}/minio/bin", +final String minioDataDir = "${buildDir}/minio/data", +final String minioAddress = "127.0.0.1:60920", +, +final String minioDistribution, +final String minioCheckSum, +if (Os.isFamily(Os.FAMILY_MAC)) {, +  minioDistribution = 'darwin-amd64', +  minioCheckSum = '96b0bcb2f590e8e65fb83d5c3e221f9bd1106b49fa6f22c6b726b80b845d7c60', +} else if (Os.isFamily(Os.FAMILY_UNIX)) {, +  minioDistribution = 'linux-amd64', +  minioCheckSum = '713dac7c105285eab3b92649be92b5e793b29d3525c7929fa7aaed99374fad99', +} else {, +  minioDistribution = null, +  minioCheckSum = null, +}, +, +buildscript {, +  repositories {, +    maven {, +      url 'https://plugins.gradle.org/m2/', +    }, +  }, +  dependencies {, +    classpath 'de.undercouch:gradle-download-task:3.4.3', +  }, +}, +, +if (useFixture && minioDistribution) {, +  apply plugin: 'de.undercouch.download', +, +  final String minioFileName = "minio.${minioVersion}", +  final String minioDownloadURL = "https://dl.minio.io/server/minio/release/${minioDistribution}/archive/${minioFileName}", +  final String minioFilePath = "${gradle.gradleUserHomeDir}/downloads/minio/${minioDistribution}/${minioFileName}", +, +  task downloadMinio(type: Download) {, +    src minioDownloadURL, +    dest minioFilePath, +    onlyIfModified true, +  }, +, +  task verifyMinioChecksum(type: Verify, dependsOn: downloadMinio) {, +    src minioFilePath, +    algorithm 'SHA-256', +    checksum minioCheckSum, +  }, +, +  task installMinio(type: Sync, dependsOn: verifyMinioChecksum) {, +    from minioFilePath, +    into minioBinDir]