[+++ b/buildSrc/src/main/resources/checkstyle.xml, +    <!-- only one statement per line should be allowed -->, +    <module name="OneStatementPerLine"/>, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <!-- only one statement per line should be allowed -->, +    <module name="OneStatementPerLine"/>, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +            case MUL:, +                math(GeneratorAdapter.MUL, getType(clazz));, +                break;, +            case DIV:, +                math(GeneratorAdapter.DIV, getType(clazz));, +                break;, +            case REM:, +                math(GeneratorAdapter.REM, getType(clazz));, +                break;, +            case ADD:, +                math(GeneratorAdapter.ADD, getType(clazz));, +                break;, +            case SUB:, +                math(GeneratorAdapter.SUB, getType(clazz));, +                break;, +            case LSH:, +                math(GeneratorAdapter.SHL, getType(clazz));, +                break;, +            case USH:, +                math(GeneratorAdapter.USHR, getType(clazz));, +                break;, +            case RSH:, +                math(GeneratorAdapter.SHR, getType(clazz));, +                break;, +            case BWAND:, +                math(GeneratorAdapter.AND, getType(clazz));, +                break;, +            case XOR:, +                math(GeneratorAdapter.XOR, getType(clazz));, +                break;, +            case BWOR:, +                math(GeneratorAdapter.OR, getType(clazz));, +                break;, +++ b/buildSrc/src/main/resources/checkstyle.xml, +    <!-- only one statement per line should be allowed -->, +    <module name="OneStatementPerLine"/>, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +            case MUL:, +                math(GeneratorAdapter.MUL, getType(clazz));, +                break;, +            case DIV:, +                math(GeneratorAdapter.DIV, getType(clazz));, +                break;, +            case REM:, +                math(GeneratorAdapter.REM, getType(clazz));, +                break;, +            case ADD:, +                math(GeneratorAdapter.ADD, getType(clazz));, +                break;, +            case SUB:, +                math(GeneratorAdapter.SUB, getType(clazz));, +                break;, +            case LSH:, +                math(GeneratorAdapter.SHL, getType(clazz));, +                break;, +            case USH:, +                math(GeneratorAdapter.USHR, getType(clazz));, +                break;, +            case RSH:, +                math(GeneratorAdapter.SHR, getType(clazz));, +                break;, +            case BWAND:, +                math(GeneratorAdapter.AND, getType(clazz));, +                break;, +            case XOR:, +                math(GeneratorAdapter.XOR, getType(clazz));, +                break;, +            case BWOR:, +                math(GeneratorAdapter.OR, getType(clazz));, +                break;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SSource.java, +                case org.objectweb.asm.Type.VOID:, +                    break;, +                case org.objectweb.asm.Type.BOOLEAN:, +                    writer.push(false);, +                    break;, +                case org.objectweb.asm.Type.BYTE:, +                    writer.push(0);, +                    break;, +                case org.objectweb.asm.Type.SHORT:, +                    writer.push(0);, +                    break;, +                case org.objectweb.asm.Type.INT:, +                    writer.push(0);, +                    break;, +                case org.objectweb.asm.Type.LONG:, +                    writer.push(0L);, +                    break;, +                case org.objectweb.asm.Type.FLOAT:, +                    writer.push(0f);, +                    break;, +                case org.objectweb.asm.Type.DOUBLE:, +                    writer.push(0d);]