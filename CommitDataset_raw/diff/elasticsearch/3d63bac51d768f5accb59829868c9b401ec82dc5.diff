[+++ b/rest-api-spec/test/indices.validate_query/10_basic.yaml, +  - do:, +      indices.validate_query:, +        explain: true, +, +  - is_true: valid, +  - match: {_shards.failed: 0}, +  - match: {explanations.0.index: 'testing'}, +  - match: {explanations.0.explanation: 'ConstantScore(*:*)'}, +, +++ b/rest-api-spec/test/indices.validate_query/10_basic.yaml, +  - do:, +      indices.validate_query:, +        explain: true, +, +  - is_true: valid, +  - match: {_shards.failed: 0}, +  - match: {explanations.0.index: 'testing'}, +  - match: {explanations.0.explanation: 'ConstantScore(*:*)'}, +, +++ b/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +, +        DefaultSearchContext searchContext = new DefaultSearchContext(0,, +                new ShardSearchRequest().types(request.types()).nowInMillis(request.nowInMillis()), +                        .filteringAliases(request.filteringAliases()),, +                scriptService, cacheRecycler, pageCacheRecycler, bigArrays, +        );, +        SearchContext.setCurrent(searchContext);, +            if (request.source() != null && request.source().length() > 0) {, +                searchContext.parsedQuery(queryParserService.parseQuery(request.source()));, +            }, +            searchContext.preProcess();, +, +                explanation = searchContext.query().toString();, +, +++ b/rest-api-spec/test/indices.validate_query/10_basic.yaml, +  - do:, +      indices.validate_query:, +        explain: true, +, +  - is_true: valid, +  - match: {_shards.failed: 0}, +  - match: {explanations.0.index: 'testing'}, +  - match: {explanations.0.explanation: 'ConstantScore(*:*)'}, +, +++ b/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +, +        DefaultSearchContext searchContext = new DefaultSearchContext(0,, +                new ShardSearchRequest().types(request.types()).nowInMillis(request.nowInMillis()), +                        .filteringAliases(request.filteringAliases()),, +                scriptService, cacheRecycler, pageCacheRecycler, bigArrays, +        );, +        SearchContext.setCurrent(searchContext);, +            if (request.source() != null && request.source().length() > 0) {, +                searchContext.parsedQuery(queryParserService.parseQuery(request.source()));, +            }, +            searchContext.preProcess();, +, +                explanation = searchContext.query().toString();, +, +++ b/src/test/java/org/elasticsearch/validate/SimpleValidateQueryTests.java, +import org.elasticsearch.action.admin.indices.alias.Alias;, +import org.elasticsearch.indices.IndexMissingException;, +        assertExplanation(QueryBuilders.queryString("_id:1"), equalTo("filtered(ConstantScore(_uid:type1#1))->cache(_type:type1)"));, +                equalTo("filtered(ConstantScore(_uid:type1#1 _uid:type1#2))->cache(_type:type1)"));, +        assertExplanation(QueryBuilders.queryString("foo"), equalTo("filtered(_all:foo)->cache(_type:type1)"));, +        ), equalTo("filtered(filtered(foo:1)->cache(bar:[2 TO 2]) cache(baz:3))->cache(_type:type1)"));, +        ), equalTo("filtered(filtered(foo:1)->cache(bar:[2 TO 2]))->cache(_type:type1)"));, +        ), equalTo("filtered(ConstantScore(GeoPolygonFilter(pin.location, [[40.0, -70.0], [30.0, -80.0], [20.0, -90.0], [40.0, -70.0]])))->cache(_type:type1)"));, +        ), equalTo("filtered(ConstantScore(GeoBoundingBoxFilter(pin.location, [40.0, -80.0], [20.0, -70.0])))->cache(_type:type1)"));, +        ), equalTo("filtered(ConstantScore(GeoDistanceFilter(pin.location, PLANE, 15.0, 10.0, 20.0)))->cache(_type:type1)"));, +        ), equalTo("filtered(ConstantScore(GeoDistanceFilter(pin.location, PLANE, 15.0, 10.0, 20.0)))->cache(_type:type1)"));, +        ), equalTo("filtered(ConstantScore(GeoDistanceRangeFilter(pin.location, PLANE, [15.0 - 25.0], 10.0, 20.0)))->cache(_type:type1)"));, +        ), equalTo("filtered(ConstantScore(GeoDistanceRangeFilter(pin.location, PLANE, [" + DistanceUnit.DEFAULT.convert(15.0, DistanceUnit.MILES) + " - " + DistanceUnit.DEFAULT.convert(25.0, DistanceUnit.MILES) + "], 10.0, 20.0)))->cache(_type:type1)"));, +        ), equalTo("filtered(filtered(foo:1)->+cache(bar:[2 TO 2]) +cache(baz:3))->cache(_type:type1)"));, +                equalTo("filtered(ConstantScore(cache(foo:1 foo:2 foo:3)))->cache(_type:type1)"));, +                equalTo("filtered(ConstantScore(NotFilter(cache(foo:bar))))->cache(_type:type1)"));, +        ), equalTo("filtered(filtered(foo:1)->CustomQueryWrappingFilter(child_filter[child-type/type1](filtered(foo:1)->cache(_type:child-type))))->cache(_type:type1)"));, +        ), equalTo("filtered(filtered(foo:1)->ScriptFilter(true))->cache(_type:type1)"));, +    @Test(expected = IndexMissingException.class), +    public void validateEmptyCluster() {, +        client().admin().indices().prepareValidateQuery().get();, +    }, +, +    @Test, +    public void explainNoQuery() {, +        createIndex("test");, +        ensureGreen();, +, +        ValidateQueryResponse validateQueryResponse = client().admin().indices().prepareValidateQuery().setExplain(true).get();, +        assertThat(validateQueryResponse.isValid(), equalTo(true));, +        assertThat(validateQueryResponse.getQueryExplanation().size(), equalTo(1));, +        assertThat(validateQueryResponse.getQueryExplanation().get(0).getIndex(), equalTo("test"));, +        assertThat(validateQueryResponse.getQueryExplanation().get(0).getExplanation(), equalTo("ConstantScore(*:*)"));, +    }, +, +    @Test, +    public void explainFilteredAlias() {, +        assertAcked(prepareCreate("test"), +                .addMapping("test", "field", "type=string")]