[+++ b/src/test/java/org/elasticsearch/test/rest/client/RestClient.java, +        HttpRequestBuilder httpRequestBuilder = httpRequestBuilder();, +, +        if (Strings.hasLength(body)) {, +            if (!restApi.isBodySupported()) {, +                throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api");, +            }, +            httpRequestBuilder.body(body);, +        } else {, +            if (restApi.isBodyRequired()) {, +                throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api");, +            }, +        }, +                    if (!restApi.getParams().contains(entry.getKey())) {, +                        throw new IllegalArgumentException("param [" + entry.getKey() + "] not supported in [" + restApi.getName() + "] api");, +                    }, +++ b/src/test/java/org/elasticsearch/test/rest/client/RestClient.java, +        HttpRequestBuilder httpRequestBuilder = httpRequestBuilder();, +, +        if (Strings.hasLength(body)) {, +            if (!restApi.isBodySupported()) {, +                throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api");, +            }, +            httpRequestBuilder.body(body);, +        } else {, +            if (restApi.isBodyRequired()) {, +                throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api");, +            }, +        }, +                    if (!restApi.getParams().contains(entry.getKey())) {, +                        throw new IllegalArgumentException("param [" + entry.getKey() + "] not supported in [" + restApi.getName() + "] api");, +                    }, +++ b/src/test/java/org/elasticsearch/test/rest/junit/RestTestSuiteRunner.java, +        RestResponse restResponse = restTestExecutionContext.callApiInternal("cluster.state", "metric", "metadata");, +++ b/src/test/java/org/elasticsearch/test/rest/client/RestClient.java, +        HttpRequestBuilder httpRequestBuilder = httpRequestBuilder();, +, +        if (Strings.hasLength(body)) {, +            if (!restApi.isBodySupported()) {, +                throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api");, +            }, +            httpRequestBuilder.body(body);, +        } else {, +            if (restApi.isBodyRequired()) {, +                throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api");, +            }, +        }, +                    if (!restApi.getParams().contains(entry.getKey())) {, +                        throw new IllegalArgumentException("param [" + entry.getKey() + "] not supported in [" + restApi.getName() + "] api");, +                    }, +++ b/src/test/java/org/elasticsearch/test/rest/junit/RestTestSuiteRunner.java, +        RestResponse restResponse = restTestExecutionContext.callApiInternal("cluster.state", "metric", "metadata");, +++ b/src/test/java/org/elasticsearch/test/rest/spec/RestApi.java, +    private List<String> params = Lists.newArrayList();, +    private BODY body = BODY.NOT_SUPPORTED;, +, +    public static enum BODY {, +        NOT_SUPPORTED, OPTIONAL, REQUIRED, +    }, +        this(restApi, name, restApi.getPaths(), Arrays.asList(methods));, +        this(restApi, restApi.getName(), paths, restApi.getMethods());, +    }, +, +    private RestApi(RestApi restApi, String name, List<String> paths, List<String> methods) {, +        this.name = name;, +        this.methods.addAll(methods);, +        this.pathParts.addAll(restApi.getPathParts());, +        this.params.addAll(restApi.getParams());, +        this.body = restApi.body;, +    public List<String> getParams() {, +        return params;, +    }, +, +    void addParam(String param) {, +        this.params.add(param);, +    }, +, +    void setBodyOptional() {, +        this.body = BODY.OPTIONAL;, +    }, +, +    void setBodyRequired() {, +        this.body = BODY.REQUIRED;, +    }, +, +    public boolean isBodySupported() {, +        return body != BODY.NOT_SUPPORTED;, +    }, +, +    public boolean isBodyRequired() {, +        return body == BODY.REQUIRED;, +    }, +, +            throw new IllegalArgumentException("unable to find matching rest path for api [" + name + "] and path params " + pathParams);, +            for (Map.Entry<String, String> paramEntry : restPath.parts.entrySet()) {, +     * (e.g. /{index}/{type}/{id} when the path params are exactly index, type and id)., +            if (restPath.parts.size() == restParams.size()) {, +                if (restPath.parts.values().containsAll(restParams)) {, +        final Map<String, String> parts;, +            this.parts = extractParts(path);]