[+++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ldap/LdapSessionFactoryTests.java, +import org.elasticsearch.common.network.NetworkAddress;, +import java.net.InetAddress;, +        InetAddress listenAddress = ldapServer.getListenAddress(protocol);, +        if (listenAddress == null) {, +            listenAddress = InetAddress.getLoopbackAddress();, +        }, +        String ldapUrl = new LDAPURL(protocol, NetworkAddress.format(listenAddress), ldapServer.getListenPort(protocol),, +            null, null, null, null).toString();, +        InetAddress listenAddress = ldapServer.getListenAddress("ldaps");, +        if (listenAddress == null) {, +            listenAddress = InetAddress.getLoopbackAddress();, +        }, +        String ldapUrl = new LDAPURL("ldaps", NetworkAddress.format(listenAddress), ldapServer.getListenPort("ldaps"),, +            null, null, null, null).toString();, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ldap/LdapSessionFactoryTests.java, +import org.elasticsearch.common.network.NetworkAddress;, +import java.net.InetAddress;, +        InetAddress listenAddress = ldapServer.getListenAddress(protocol);, +        if (listenAddress == null) {, +            listenAddress = InetAddress.getLoopbackAddress();, +        }, +        String ldapUrl = new LDAPURL(protocol, NetworkAddress.format(listenAddress), ldapServer.getListenPort(protocol),, +            null, null, null, null).toString();, +        InetAddress listenAddress = ldapServer.getListenAddress("ldaps");, +        if (listenAddress == null) {, +            listenAddress = InetAddress.getLoopbackAddress();, +        }, +        String ldapUrl = new LDAPURL("ldaps", NetworkAddress.format(listenAddress), ldapServer.getListenPort("ldaps"),, +            null, null, null, null).toString();, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ldap/support/LdapTestCase.java, +import org.elasticsearch.common.network.NetworkAddress;, +import org.elasticsearch.xpack.core.XPackSettings;, +import java.net.InetAddress;, +            listeners.add(InMemoryListenerConfig.createLDAPConfig("ldap", null, 0, null));, +                final SSLContext context = SSLContext.getInstance(XPackSettings.DEFAULT_SUPPORTED_PROTOCOLS.get(0));, +    public void stopLdap() {, +            InetAddress listenAddress = ldapServers[i].getListenAddress();, +            if (listenAddress == null) {, +                listenAddress = InetAddress.getLoopbackAddress();, +            }, +            LDAPURL url = new LDAPURL("ldap", NetworkAddress.format(listenAddress), ldapServers[i].getListenPort(), null, null, null, null);, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ldap/LdapSessionFactoryTests.java, +import org.elasticsearch.common.network.NetworkAddress;, +import java.net.InetAddress;, +        InetAddress listenAddress = ldapServer.getListenAddress(protocol);, +        if (listenAddress == null) {, +            listenAddress = InetAddress.getLoopbackAddress();, +        }, +        String ldapUrl = new LDAPURL(protocol, NetworkAddress.format(listenAddress), ldapServer.getListenPort(protocol),, +            null, null, null, null).toString();, +        InetAddress listenAddress = ldapServer.getListenAddress("ldaps");, +        if (listenAddress == null) {, +            listenAddress = InetAddress.getLoopbackAddress();, +        }, +        String ldapUrl = new LDAPURL("ldaps", NetworkAddress.format(listenAddress), ldapServer.getListenPort("ldaps"),, +            null, null, null, null).toString();, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ldap/support/LdapTestCase.java, +import org.elasticsearch.common.network.NetworkAddress;, +import org.elasticsearch.xpack.core.XPackSettings;, +import java.net.InetAddress;, +            listeners.add(InMemoryListenerConfig.createLDAPConfig("ldap", null, 0, null));, +                final SSLContext context = SSLContext.getInstance(XPackSettings.DEFAULT_SUPPORTED_PROTOCOLS.get(0));, +    public void stopLdap() {, +            InetAddress listenAddress = ldapServers[i].getListenAddress();, +            if (listenAddress == null) {, +                listenAddress = InetAddress.getLoopbackAddress();, +            }, +            LDAPURL url = new LDAPURL("ldap", NetworkAddress.format(listenAddress), ldapServers[i].getListenPort(), null, null, null, null);, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ldap/support/SessionFactoryLoadBalancingTests.java, +import com.unboundid.ldap.sdk.LDAPException;, +import com.unboundid.ldap.sdk.SimpleBindRequest;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.elasticsearch.common.network.InetAddressHelper;, +import org.elasticsearch.core.internal.io.IOUtils;, +import java.net.NoRouteToHostException;, +import java.util.Collections;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.stream.Collectors;, +import static org.hamcrest.Matchers.containsString;, +    public void shutdown() {, +                try (LDAPConnection connection = LdapUtils.privilegedConnect(testSessionFactory.getServerSet()::getConnection)) {, +        assumeTrue("at least two ldap servers should be present for this test", ldapServers.length > 1);, +        for (InMemoryDirectoryServer ldapServer : ldapServers) {, +            ports.add(ldapServer.getListenPort());, +        final MockServerSocket mockServerSocket = new MockServerSocket(0, 0);, +            final AtomicBoolean success = new AtomicBoolean(true);, +                final int port = ldapServers[index].getListenPort();, +                assertTrue(ports.remove(Integer.valueOf(port)));, +                logger.debug("opening mock client sockets bound to [{}]", port);, +                Runnable runnable = new PortBlockingRunnable(mockServerSocket.getInetAddress(), mockServerSocket.getLocalPort(), port,, +                    latch, closeLatch, success);, +, +            assumeTrue("Failed to open sockets on all addresses with the port that an LDAP server was bound to. Some operating systems " +, +                "allow binding to an address and port combination even if an application is bound to the port on a wildcard address",, +                success.get());, +            logger.debug("list of all open ports {}", ports);, +                    LDAPConnection connection = null;, +                    try {, +                        do {]