[+++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    private final ReentrantLock failEngineLock = new ReentrantLock();, +                if (isClosed.get() == false) {, +    }, +                    commitIndexWriter(indexWriter);, +                maybeFailEngine("start", e);, +        if (isClosed.get() == false) {, +            maybeFailEngine("create", t);, +            maybeFailEngine("index", t);, +                if (isClosed.get()) {, +            maybeFailEngine("delete", t);, +            maybeFailEngine("delete_by_query", t);, +            maybeFailEngine("refresh", e);, +                            commitIndexWriter(indexWriter);, +                        commitIndexWriter(indexWriter);, +            store.incRef();, +                if (isClosed.get() == false) {, +            } finally {, +                store.decRef();, +            maybeFailEngine("flush", ex);, +        if (isClosed.get()) {, +                maybeFailEngine("optimize", t);, +            maybeFailEngine("recovery", e);, +            maybeFailEngine("recovery phase 1", e);, +            maybeFailEngine("snapshot recovery", e);, +            maybeFailEngine("recovery phase 2", e);, +            maybeFailEngine("recovery phase 3", e);, +    private boolean maybeFailEngine(String source, Throwable t) {, +        } else if (t instanceof AlreadyClosedException) {, +            // if we are already closed due to some tragic exception, +            // we need to fail the engine. it might have already been failed before, +            // but we are double-checking it's failed and closed, +            if (indexWriter.isOpen() == false && indexWriter.getTragicException() != null) {, +                failEngine("already closed by tragic event", indexWriter.getTragicException());, +            }, +            return true;, +        } else if (t != null && indexWriter.isOpen() == false && indexWriter.getTragicException() == t) {, +            // this spot on - we are handling the tragic event exception here so we have to fail the engine, +            // right away, +            failEngine(source, t);, +            return true;, +        if (isClosed.get()) {, +        if (isClosed.get() == false) { // don't acquire the write lock if we are already closed, +            logger.trace("close now acquire writeLock");, +                logger.trace("close now acquired writeLock");, +                closeNoLock("api");, +            }, +        }, +    }, +, +    /**, +     * Closes the engine without acquiring the write lock. This should only be, +     * called while the write lock is hold or in a disaster condition ie. if the engine, +     * is failed., +     */, +    private void closeNoLock(String reason) throws ElasticsearchException {, +            assert rwl.isWriteLockedByCurrentThread() || failEngineLock.isHeldByCurrentThread() : "Either the write lock must be held or the engine must be currently be failing itself";, +                logger.trace("close searcherManager");, +                logger.trace("rollback indexWriter");, +                logger.trace("rollback indexWriter done");, +                logger.debug("engine closed [{}]", reason);, +            store.incRef();, +                    // we just go and close this engine - no way to recover, +                    closeNoLock("engine failed on: [" + reason + "]");, +                store.decRef();, +                        if (isClosed.get() == false) {, +                    if (isClosed.get() == false) {, +, +, +    private void commitIndexWriter(IndexWriter writer) throws IOException {, +        try {, +            writer.commit();, +        } catch (Throwable ex) {, +            failEngine("lucene commit failed", ex);, +            throw ex;, +        }, +    }, +++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    private final ReentrantLock failEngineLock = new ReentrantLock();, +                if (isClosed.get() == false) {, +    }, +                    commitIndexWriter(indexWriter);, +                maybeFailEngine("start", e);, +        if (isClosed.get() == false) {, +            maybeFailEngine("create", t);, +            maybeFailEngine("index", t);, +                if (isClosed.get()) {, +            maybeFailEngine("delete", t);, +            maybeFailEngine("delete_by_query", t);, +            maybeFailEngine("refresh", e);, +                            commitIndexWriter(indexWriter);, +                        commitIndexWriter(indexWriter);, +            store.incRef();, +                if (isClosed.get() == false) {, +            } finally {, +                store.decRef();, +            maybeFailEngine("flush", ex);, +        if (isClosed.get()) {, +                maybeFailEngine("optimize", t);, +            maybeFailEngine("recovery", e);]