[+++ b/Vagrantfile, +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +    private static final String BATS_TEST_COMMAND ="cd \$BATS_ARCHIVES && sudo -E bats --tap \$BATS_TESTS/*.$BATS", +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +    private static final String BATS_TEST_COMMAND ="cd \$BATS_ARCHIVES && sudo -E bats --tap \$BATS_TESTS/*.$BATS", +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +    private static final String BATS_TEST_COMMAND ="cd \$BATS_ARCHIVES && sudo -E bats --tap \$BATS_TESTS/*.$BATS", +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +            if (timeZone.isFixed() == false && timeZone.getOffset(utcMillis) != timeZone.getOffset(rounded)) {, +                // in this case, we crossed a time zone transition. In some edge, +                // cases this will, +                // result in a value that is not a rounded value itself. We need, +                // to round again, +                // to make sure. This will have no affect in cases where, +                // 'rounded' was already a proper, +                // rounded value, +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +    private static final String BATS_TEST_COMMAND ="cd \$BATS_ARCHIVES && sudo -E bats --tap \$BATS_TESTS/*.$BATS", +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +            if (timeZone.isFixed() == false && timeZone.getOffset(utcMillis) != timeZone.getOffset(rounded)) {, +                // in this case, we crossed a time zone transition. In some edge, +                // cases this will, +                // result in a value that is not a rounded value itself. We need, +                // to round again, +                // to make sure. This will have no affect in cases where, +                // 'rounded' was already a proper, +                // rounded value, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/UnicastZenPing.java, +import java.io.Closeable;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Queue;, +import java.util.Set;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.RejectedExecutionException;, +import java.util.concurrent.ThreadFactory;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReference;, +import java.util.function.Function;, +, +import org.apache.lucene.util.IOUtils;, +    public void close() throws IOException {, +        IOUtils.close(receivedResponses.values());, +    class SendPingsHandler implements Closeable {, +++ b/Vagrantfile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +    private static final String BATS_TEST_COMMAND ="cd \$BATS_ARCHIVES && sudo -E bats --tap \$BATS_TESTS/*.$BATS", +++ b/core/src/main/java/org/elasticsearch/client/transport/support/TransportProxyClient.java, +import java.util.Collections;, +++ b/core/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +            if (timeZone.isFixed() == false && timeZone.getOffset(utcMillis) != timeZone.getOffset(rounded)) {, +                // in this case, we crossed a time zone transition. In some edge, +                // cases this will, +                // result in a value that is not a rounded value itself. We need, +                // to round again, +                // to make sure. This will have no affect in cases where, +                // 'rounded' was already a proper, +                // rounded value, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/UnicastZenPing.java, +import java.io.Closeable;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Queue;, +import java.util.Set;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.RejectedExecutionException;, +import java.util.concurrent.ThreadFactory;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReference;, +import java.util.function.Function;, +, +import org.apache.lucene.util.IOUtils;, +    public void close() throws IOException {, +        IOUtils.close(receivedResponses.values());]