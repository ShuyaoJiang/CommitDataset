[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String javaVendor = System.getProperty('java.vendor'), +            String javaVersion = System.getProperty('java.version'), +            String gradleJavaVersionDetails = "${javaVendor} ${javaVersion}" +, +                javaVendor = findJavaVendor(project, javaHome), +            // this block of code detecting buggy JDK 8 compiler versions can be removed when minimum Java version is incremented, +            assert minimumJava == JavaVersion.VERSION_1_8 : "Remove JDK compiler bug detection only applicable to JDK 8", +            if (javaVersionEnum == JavaVersion.VERSION_1_8) {, +                if (Objects.equals("Oracle Corporation", javaVendor)) {, +                    def matcher = javaVersion =~ /1\.8\.0(?:_(\d+))?/, +                    if (matcher.matches()) {, +                        int update;, +                        if (matcher.group(1) == null) {, +                            update = 0, +                        } else {, +                            update = matcher.group(1).toInteger(), +                        }, +                        if (update < 40) {, +                            throw new GradleException("JDK ${javaVendor} ${javaVersion} has compiler bug JDK-8052388, update your JDK to at least 8u40"), +                        }, +                    }, +                }, +            }, +, +    private static String findJavaVendor(Project project, String javaHome) {, +        String vendorScript = 'print(java.lang.System.getProperty("java.vendor"));', +        return runJavascript(project, javaHome, vendorScript), +    }, +, +            String revision = (luceneVersion =~ /\w+-snapshot-([a-z0-9]+)/)[0][1], +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String javaVendor = System.getProperty('java.vendor'), +            String javaVersion = System.getProperty('java.version'), +            String gradleJavaVersionDetails = "${javaVendor} ${javaVersion}" +, +                javaVendor = findJavaVendor(project, javaHome), +            // this block of code detecting buggy JDK 8 compiler versions can be removed when minimum Java version is incremented, +            assert minimumJava == JavaVersion.VERSION_1_8 : "Remove JDK compiler bug detection only applicable to JDK 8", +            if (javaVersionEnum == JavaVersion.VERSION_1_8) {, +                if (Objects.equals("Oracle Corporation", javaVendor)) {, +                    def matcher = javaVersion =~ /1\.8\.0(?:_(\d+))?/, +                    if (matcher.matches()) {, +                        int update;, +                        if (matcher.group(1) == null) {, +                            update = 0, +                        } else {, +                            update = matcher.group(1).toInteger(), +                        }, +                        if (update < 40) {, +                            throw new GradleException("JDK ${javaVendor} ${javaVersion} has compiler bug JDK-8052388, update your JDK to at least 8u40"), +                        }, +                    }, +                }, +            }, +, +    private static String findJavaVendor(Project project, String javaHome) {, +        String vendorScript = 'print(java.lang.System.getProperty("java.vendor"));', +        return runJavascript(project, javaHome, vendorScript), +    }, +, +            String revision = (luceneVersion =~ /\w+-snapshot-([a-z0-9]+)/)[0][1], +++ b/buildSrc/version.properties, +lucene            = 5.5.0-snapshot-4de5f1d, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String javaVendor = System.getProperty('java.vendor'), +            String javaVersion = System.getProperty('java.version'), +            String gradleJavaVersionDetails = "${javaVendor} ${javaVersion}" +, +                javaVendor = findJavaVendor(project, javaHome), +            // this block of code detecting buggy JDK 8 compiler versions can be removed when minimum Java version is incremented, +            assert minimumJava == JavaVersion.VERSION_1_8 : "Remove JDK compiler bug detection only applicable to JDK 8", +            if (javaVersionEnum == JavaVersion.VERSION_1_8) {, +                if (Objects.equals("Oracle Corporation", javaVendor)) {, +                    def matcher = javaVersion =~ /1\.8\.0(?:_(\d+))?/, +                    if (matcher.matches()) {, +                        int update;, +                        if (matcher.group(1) == null) {, +                            update = 0, +                        } else {, +                            update = matcher.group(1).toInteger(), +                        }, +                        if (update < 40) {, +                            throw new GradleException("JDK ${javaVendor} ${javaVersion} has compiler bug JDK-8052388, update your JDK to at least 8u40"), +                        }, +                    }, +                }, +            }, +, +    private static String findJavaVendor(Project project, String javaHome) {, +        String vendorScript = 'print(java.lang.System.getProperty("java.vendor"));', +        return runJavascript(project, javaHome, vendorScript), +    }, +, +            String revision = (luceneVersion =~ /\w+-snapshot-([a-z0-9]+)/)[0][1], +++ b/buildSrc/version.properties, +lucene            = 5.5.0-snapshot-4de5f1d, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import static java.util.Collections.unmodifiableMap;, +    public boolean contains(Class<? extends Throwable> exType) {, +    /**, +     * This is the list of Exceptions Elasticsearch can throw over the wire or save into a corruption marker. Each value in the enum is a, +     * single exception tying the Class to an id for use of the encode side and the id back to a constructor for use on the decode side. As]