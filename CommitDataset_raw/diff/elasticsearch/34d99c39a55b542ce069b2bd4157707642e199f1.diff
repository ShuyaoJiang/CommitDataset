[+++ b/.idea/dictionaries/kimchy.xml, +      <w>xson</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>xson</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/CountRequest.java, +import org.elasticsearch.ElasticSearchGenerationException;, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.Actions;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.util.io.FastByteArrayOutputStream;, +import org.elasticsearch.util.xcontent.XContentFactory;, +import org.elasticsearch.util.xcontent.XContentType;, +import org.elasticsearch.util.xcontent.builder.BinaryXContentBuilder;, +import java.util.Map;, +    private static final XContentType contentType = Requests.CONTENT_TYPE;, +, +    private transient QueryBuilder queryBuilder = null;, +, +    @Override public ActionRequestValidationException validate() {, +        ActionRequestValidationException validationException = super.validate();, +        if (querySource == null && queryBuilder == null) {, +            validationException = Actions.addValidationError("query is missing", validationException);, +        }, +        return validationException;, +    }, +, +        if (querySource == null && queryBuilder != null) {, +            // did not get serialized..., +            querySource = queryBuilder.buildAsBytes(contentType);, +        }, +        this.queryBuilder = queryBuilder;, +        return this;, +    }, +, +    /**, +     * The query source to execute in the form of a map., +     */, +    @Required public CountRequest query(Map querySource) {, +        try {, +            BinaryXContentBuilder builder = XContentFactory.contentBinaryBuilder(contentType);, +            builder.map(querySource);, +            this.querySource = builder.copiedBytes();, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + querySource + "]", e);, +        }, +        return this;, +        if (querySource != null) {, +        } else {, +            FastByteArrayOutputStream os = queryBuilder.buildAsUnsafeBytes(contentType);, +            out.writeVInt(os.size());, +            out.writeBytes(os.unsafeByteArray(), 0, os.size());, +        }, +++ b/.idea/dictionaries/kimchy.xml, +      <w>xson</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/count/CountRequest.java, +import org.elasticsearch.ElasticSearchGenerationException;, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.Actions;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.util.io.FastByteArrayOutputStream;, +import org.elasticsearch.util.xcontent.XContentFactory;, +import org.elasticsearch.util.xcontent.XContentType;, +import org.elasticsearch.util.xcontent.builder.BinaryXContentBuilder;, +import java.util.Map;, +    private static final XContentType contentType = Requests.CONTENT_TYPE;, +, +    private transient QueryBuilder queryBuilder = null;, +, +    @Override public ActionRequestValidationException validate() {, +        ActionRequestValidationException validationException = super.validate();, +        if (querySource == null && queryBuilder == null) {, +            validationException = Actions.addValidationError("query is missing", validationException);, +        }, +        return validationException;, +    }, +, +        if (querySource == null && queryBuilder != null) {, +            // did not get serialized..., +            querySource = queryBuilder.buildAsBytes(contentType);, +        }, +        this.queryBuilder = queryBuilder;, +        return this;, +    }, +, +    /**, +     * The query source to execute in the form of a map., +     */, +    @Required public CountRequest query(Map querySource) {, +        try {, +            BinaryXContentBuilder builder = XContentFactory.contentBinaryBuilder(contentType);, +            builder.map(querySource);, +            this.querySource = builder.copiedBytes();, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + querySource + "]", e);, +        }, +        return this;, +        if (querySource != null) {, +        } else {, +            FastByteArrayOutputStream os = queryBuilder.buildAsUnsafeBytes(contentType);, +            out.writeVInt(os.size());]