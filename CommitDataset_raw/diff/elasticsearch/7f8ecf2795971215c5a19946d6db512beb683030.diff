[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/repositories/ClearCcrRestoreSessionAction.java, +    public static final String NAME = "internal:admin/ccr/restore/session/clear";, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/repositories/ClearCcrRestoreSessionAction.java, +    public static final String NAME = "internal:admin/ccr/restore/session/clear";, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/repositories/PutCcrRestoreSessionAction.java, +    public static final String NAME = "internal:admin/ccr/restore/session/put";, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/repositories/ClearCcrRestoreSessionAction.java, +    public static final String NAME = "internal:admin/ccr/restore/session/clear";, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/repositories/PutCcrRestoreSessionAction.java, +    public static final String NAME = "internal:admin/ccr/restore/session/put";, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/CcrRepositoryIT.java, +import org.elasticsearch.xpack.ccr.action.repositories.PutCcrRestoreSessionAction;, +import java.util.concurrent.CountDownLatch;, +        List<MockTransportService> transportServices = new ArrayList<>();, +        CountDownLatch latch = new CountDownLatch(1);, +        AtomicBoolean updateSent = new AtomicBoolean(false);, +        Runnable updateMappings = () -> {, +            if (updateSent.compareAndSet(false, true)) {, +                leaderClient(), +                    .admin(), +                    .indices(), +                    .preparePutMapping(leaderIndex), +                    .setType("doc"), +                    .setSource("{\"properties\":{\"k\":{\"type\":\"long\"}}}", XContentType.JSON), +                    .execute(ActionListener.wrap(latch::countDown));, +            }, +            try {, +                latch.await();, +            } catch (InterruptedException e) {, +                throw ExceptionsHelper.convertToRuntime(e);, +            }, +        };, +, +        for (TransportService transportService : getFollowerCluster().getDataOrMasterNodeInstances(TransportService.class)) {, +            MockTransportService mockTransportService = (MockTransportService) transportService;, +            transportServices.add(mockTransportService);, +            mockTransportService.addSendBehavior((connection, requestId, action, request, options) -> {, +                if (action.equals(PutCcrRestoreSessionAction.NAME)) {, +                    updateMappings.run();, +                    connection.sendRequest(requestId, action, request, options);, +                } else {, +                    connection.sendRequest(requestId, action, request, options);, +                }, +            });, +        }, +, +        try {, +        } finally {, +            for (MockTransportService transportService : transportServices) {, +                transportService.clearAllRules();, +            }, +        }]