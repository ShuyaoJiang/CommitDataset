[+++ b/src/main/java/org/elasticsearch/action/support/single/shard/TransportShardSingleOperationAction.java, +                if (node == null) {, +                    onFailure(shardRouting, new NoShardAvailableActionException(shardIt.shardId()));, +                } else {, +    }, +++ b/src/main/java/org/elasticsearch/action/support/single/shard/TransportShardSingleOperationAction.java, +                if (node == null) {, +                    onFailure(shardRouting, new NoShardAvailableActionException(shardIt.shardId()));, +                } else {, +    }, +++ b/src/test/java/org/elasticsearch/percolator/RecoveryPercolatorTests.java, +import com.google.common.base.Predicate;, +import org.elasticsearch.test.AbstractIntegrationTest;, +import static org.elasticsearch.test.AbstractIntegrationTest.ClusterScope;, +import static org.elasticsearch.test.AbstractIntegrationTest.Scope;, +@ClusterScope(scope = Scope.TEST, numNodes = 0), +public class RecoveryPercolatorTests extends AbstractIntegrationTest {, +        Settings settings = settingsBuilder(), +                .put(super.getSettings()), +                .put("gateway.type", "local"), +                .build();, +        cluster().startNode(settings);, +        client().admin().indices().prepareCreate("test").setSettings(, +                settingsBuilder().put("index.number_of_shards", 1).put(), +        ).execute().actionGet();, +        client().prepareIndex("test", "_percolator", "kuku"), +        PercolateResponse percolate = client().preparePercolate(), +        cluster().restartAllNodes();, +        ClusterHealthResponse clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();, +        percolate = client().preparePercolate(), +        Settings settings = settingsBuilder(), +                .put(super.getSettings()), +                .put("gateway.type", "local"), +                .build();, +        cluster().startNode(settings);, +        client().admin().indices().prepareCreate("test"), +        client().prepareIndex("test", "_percolator", "kuku"), +        assertThat(client().prepareCount().setTypes("_percolator").setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(1l));, +        PercolateResponse percolate = client().preparePercolate(), +        cluster().restartAllNodes();, +        ClusterHealthResponse clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();, +        assertThat(client().prepareCount().setTypes("_percolator").setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(1l));, +        DeleteIndexResponse actionGet = client().admin().indices().prepareDelete("test").execute().actionGet();, +        client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", 1)).execute().actionGet();, +        clusterHealth = client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();, +        assertThat(client().prepareCount().setTypes("_percolator").setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(0l));, +        percolate = client().preparePercolate(), +        client().prepareIndex("test", "_percolator", "kuku"), +        assertThat(client().prepareCount().setTypes("_percolator").setQuery(matchAllQuery()).execute().actionGet().getCount(), equalTo(1l));, +        percolate = client().preparePercolate(), +                .put(super.getSettings()), +                .put("gateway.type", "local"), +                .build();, +        logger.info("--> Starting 2 nodes");, +        cluster().startNode(settings);, +        cluster().startNode(settings);, +        client().admin().indices().prepareDelete().execute().actionGet();, +        ensureGreen();, +        client().admin().indices().prepareCreate("test"), +        ensureGreen();, +        client().prepareIndex("test", "type1", "1").setSource("field1", 0).execute().actionGet();, +        client().prepareIndex("test", "type2", "1").setSource("field1", "0").execute().actionGet();, +            client().prepareIndex("test", "_percolator", Integer.toString(i)), +        PercolateResponse response = client().preparePercolate(), +        client().admin().indices().prepareClose("test").execute().actionGet();, +        ensureGreen();, +        client().admin().indices().prepareOpen("test").execute().actionGet();, +        ensureGreen();, +        response = client().preparePercolate(), +        logger.info("--> ensuring exactly 2 nodes");, +        cluster().ensureAtLeastNumNodes(2);, +        cluster().ensureAtMostNumNodes(2);, +        logger.info("--> Adding 3th node");, +        cluster().startNode(settingsBuilder().put("node.stay", true));, +        client().admin().indices().prepareDelete().execute().actionGet();, +        ensureGreen();, +        client().admin().indices().prepareCreate("test"), +        ensureGreen();, +        final Client client = cluster().client(new Predicate<Settings>() {, +            @Override, +            public boolean apply(Settings input) {, +                return input.getAsBoolean("node.stay", false);, +            }, +        });, +        Predicate<Settings> nodePredicate = new Predicate<Settings>() {, +            @Override, +            public boolean apply(Settings input) {, +                return !input.getAsBoolean("node.stay", false);, +            }, +        };, +                cluster().stopRandomNode(nodePredicate);, +                cluster().stopRandomNode(nodePredicate);, +                cluster().startNode();, +                cluster().startNode();, +++ b/src/main/java/org/elasticsearch/action/support/single/shard/TransportShardSingleOperationAction.java, +                if (node == null) {, +                    onFailure(shardRouting, new NoShardAvailableActionException(shardIt.shardId()));, +                } else {, +    }, +++ b/src/test/java/org/elasticsearch/percolator/RecoveryPercolatorTests.java]