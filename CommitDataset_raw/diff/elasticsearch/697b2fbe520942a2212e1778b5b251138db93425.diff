[+++ b/docs/reference/migration/migrate_7_0/api.asciidoc, +, +[float], +==== When {security-features} are enabled, index monitoring APIs over restricted indices are not authorized implicitly anymore, +, +Restricted indices (currently only `.security-6` and `.security`) are special internal, +indices that require setting the `allow_restricted_indices` flag on every index, +permission that covers them. If this flag is `false` (default) the permission, +will not cover these and actions against them will not be authorized., +However, the monitoring APIs were the only exception to this rule. This exception, +has been forfeited and index monitoring privileges have to be granted explicitly,, +using the `allow_restricted_indices` flag on the permission (as any other index, +privilege)., +++ b/docs/reference/migration/migrate_7_0/api.asciidoc, +, +[float], +==== When {security-features} are enabled, index monitoring APIs over restricted indices are not authorized implicitly anymore, +, +Restricted indices (currently only `.security-6` and `.security`) are special internal, +indices that require setting the `allow_restricted_indices` flag on every index, +permission that covers them. If this flag is `false` (default) the permission, +will not cover these and actions against them will not be authorized., +However, the monitoring APIs were the only exception to this rule. This exception, +has been forfeited and index monitoring privileges have to be granted explicitly,, +using the `allow_restricted_indices` flag on the permission (as any other index, +privilege)., +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/permission/IndicesPermission.java, +            return check(action) && indexNameMatcher.test(index), +                    && (allowRestrictedIndices || (false == RestrictedIndicesNames.NAMES_SET.contains(index)));, +++ b/docs/reference/migration/migrate_7_0/api.asciidoc, +, +[float], +==== When {security-features} are enabled, index monitoring APIs over restricted indices are not authorized implicitly anymore, +, +Restricted indices (currently only `.security-6` and `.security`) are special internal, +indices that require setting the `allow_restricted_indices` flag on every index, +permission that covers them. If this flag is `false` (default) the permission, +will not cover these and actions against them will not be authorized., +However, the monitoring APIs were the only exception to this rule. This exception, +has been forfeited and index monitoring privileges have to be granted explicitly,, +using the `allow_restricted_indices` flag on the permission (as any other index, +privilege)., +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/permission/IndicesPermission.java, +            return check(action) && indexNameMatcher.test(index), +                    && (allowRestrictedIndices || (false == RestrictedIndicesNames.NAMES_SET.contains(index)));, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/store/ReservedRolesStoreTests.java, +import java.util.List;, +        assertMonitoringOnRestrictedIndices(remoteMonitoringAgentRole);, +, +    private void assertMonitoringOnRestrictedIndices(Role role) {, +        final Settings indexSettings = Settings.builder().put("index.version.created", Version.CURRENT).build();, +        final MetaData metaData = new MetaData.Builder(), +                .put(new IndexMetaData.Builder(RestrictedIndicesNames.INTERNAL_SECURITY_INDEX), +                        .settings(indexSettings), +                        .numberOfShards(1), +                        .numberOfReplicas(0), +                        .putAlias(new AliasMetaData.Builder(RestrictedIndicesNames.SECURITY_INDEX_NAME).build()), +                        .build(), true), +                .build();, +        final FieldPermissionsCache fieldPermissionsCache = new FieldPermissionsCache(Settings.EMPTY);, +        final List<String> indexMonitoringActionNamesList = Arrays.asList(IndicesStatsAction.NAME, IndicesSegmentsAction.NAME,, +                GetSettingsAction.NAME, IndicesShardStoresAction.NAME, UpgradeStatusAction.NAME, RecoveryAction.NAME);, +        for (final String indexMonitoringActionName : indexMonitoringActionNamesList) {, +            final Map<String, IndexAccessControl> authzMap = role.indices().authorize(indexMonitoringActionName,, +                    Sets.newHashSet(RestrictedIndicesNames.INTERNAL_SECURITY_INDEX, RestrictedIndicesNames.SECURITY_INDEX_NAME), metaData,, +                    fieldPermissionsCache);, +            assertThat(authzMap.get(RestrictedIndicesNames.INTERNAL_SECURITY_INDEX).isGranted(), is(true));, +            assertThat(authzMap.get(RestrictedIndicesNames.SECURITY_INDEX_NAME).isGranted(), is(true));, +        }, +    }, +, +++ b/docs/reference/migration/migrate_7_0/api.asciidoc, +, +[float], +==== When {security-features} are enabled, index monitoring APIs over restricted indices are not authorized implicitly anymore, +, +Restricted indices (currently only `.security-6` and `.security`) are special internal, +indices that require setting the `allow_restricted_indices` flag on every index, +permission that covers them. If this flag is `false` (default) the permission, +will not cover these and actions against them will not be authorized., +However, the monitoring APIs were the only exception to this rule. This exception, +has been forfeited and index monitoring privileges have to be granted explicitly,, +using the `allow_restricted_indices` flag on the permission (as any other index, +privilege)., +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/permission/IndicesPermission.java, +            return check(action) && indexNameMatcher.test(index), +                    && (allowRestrictedIndices || (false == RestrictedIndicesNames.NAMES_SET.contains(index)));, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/store/ReservedRolesStoreTests.java, +import java.util.List;, +        assertMonitoringOnRestrictedIndices(remoteMonitoringAgentRole);, +, +    private void assertMonitoringOnRestrictedIndices(Role role) {, +        final Settings indexSettings = Settings.builder().put("index.version.created", Version.CURRENT).build();, +        final MetaData metaData = new MetaData.Builder(), +                .put(new IndexMetaData.Builder(RestrictedIndicesNames.INTERNAL_SECURITY_INDEX), +                        .settings(indexSettings), +                        .numberOfShards(1), +                        .numberOfReplicas(0), +                        .putAlias(new AliasMetaData.Builder(RestrictedIndicesNames.SECURITY_INDEX_NAME).build()), +                        .build(), true)]