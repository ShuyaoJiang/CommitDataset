[+++ b/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractConcurrentMapFilterCache.java, +            return "cache(" + filter + ")";, +++ b/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractConcurrentMapFilterCache.java, +            return "cache(" + filter + ")";, +++ b/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractWeightedFilterCache.java, +            return "cache(" + filter + ")";, +++ b/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractConcurrentMapFilterCache.java, +            return "cache(" + filter + ")";, +++ b/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractWeightedFilterCache.java, +            return "cache(" + filter + ")";, +++ b/src/test/java/org/elasticsearch/test/unit/index/aliases/IndexAliasesServiceTests.java, +        assertThat(indexAliasesService.aliasFilter("cats").toString(), equalTo("cache(animal:cat)"));, +        assertThat(indexAliasesService.aliasFilter("cats", "dogs").toString(), equalTo("BooleanFilter( cache(animal:cat) cache(animal:dog))"));, +        assertThat(indexAliasesService.aliasFilter("dogs", "cats").toString(), equalTo("BooleanFilter( cache(animal:canine) cache(animal:feline))"));, +        assertThat(indexAliasesService.aliasFilter("dogs").toString(), equalTo("cache(animal:dog)"));, +        assertThat(indexAliasesService.aliasFilter("dogs", "cats").toString(), equalTo("BooleanFilter( cache(animal:dog) cache(animal:cat))"));, +        assertThat(indexAliasesService.aliasFilter("dogs", "cats").toString(), equalTo("BooleanFilter( cache(animal:canine) cache(animal:feline))"));, +    @Test, +        try {, +            assert false;, +        } catch (InvalidAliasNameException e) {, +            // all is well, +        }]