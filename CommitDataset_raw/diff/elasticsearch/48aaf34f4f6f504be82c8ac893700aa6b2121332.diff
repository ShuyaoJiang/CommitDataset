[+++ b/src/main/java/org/elasticsearch/river/routing/RiversRouter.java, +import org.elasticsearch.index.mapper.MapperService;, +, +        boolean metaFound = true;, +            if (MapperService.DEFAULT_MAPPING.equals(mappingType)) {, +                continue;, +            }, +                    if (getResponse.isExists()) {, +, +                        logger.debug("{}/{}/_meta document found.", riverIndexName, mappingType);, +, +                        String riverType = XContentMapValues.nodeStringValue(getResponse.getSourceAsMap().get("type"), null);, +                        if (riverType == null) {, +                            logger.warn("no river type provided for [{}], ignoring...", riverIndexName);, +                        } else {, +                            routingBuilder.put(new RiverRouting(new RiverName(riverType, mappingType), null));, +                            dirty = true;, +                        }, +                    } else {, +                        // At least one type does not have _meta, +                        metaFound = false;, +                    }, +                } catch (NoShardAvailableActionException e) {, +                    // ignore, we will get it next time..., +                } catch (ClusterBlockException e) {, +                    // ignore, we will get it next time, +                } catch (IndexMissingException e) {, +                    // ignore, we will get it next time, +                } catch (IllegalIndexShardStateException e) {, +                    // ignore, we will get it next time, +                } catch (Exception e) {, +                    logger.warn("failed to get/parse _meta for [{}]", e, mappingType);, +                }, +            }, +        }, +, +        // At least one type does not have _meta, so we are, +        // going to reschedule some checks, +        if (!metaFound) {, +                logger.debug("no river _meta document found retrying in {} ms", RIVER_START_RETRY_INTERVAL.millis());, +, +++ b/src/main/java/org/elasticsearch/river/routing/RiversRouter.java, +import org.elasticsearch.index.mapper.MapperService;, +, +        boolean metaFound = true;, +            if (MapperService.DEFAULT_MAPPING.equals(mappingType)) {, +                continue;, +            }, +                    if (getResponse.isExists()) {, +, +                        logger.debug("{}/{}/_meta document found.", riverIndexName, mappingType);, +, +                        String riverType = XContentMapValues.nodeStringValue(getResponse.getSourceAsMap().get("type"), null);, +                        if (riverType == null) {, +                            logger.warn("no river type provided for [{}], ignoring...", riverIndexName);, +                        } else {, +                            routingBuilder.put(new RiverRouting(new RiverName(riverType, mappingType), null));, +                            dirty = true;, +                        }, +                    } else {, +                        // At least one type does not have _meta, +                        metaFound = false;, +                    }, +                } catch (NoShardAvailableActionException e) {, +                    // ignore, we will get it next time..., +                } catch (ClusterBlockException e) {, +                    // ignore, we will get it next time, +                } catch (IndexMissingException e) {, +                    // ignore, we will get it next time, +                } catch (IllegalIndexShardStateException e) {, +                    // ignore, we will get it next time, +                } catch (Exception e) {, +                    logger.warn("failed to get/parse _meta for [{}]", e, mappingType);, +                }, +            }, +        }, +, +        // At least one type does not have _meta, so we are, +        // going to reschedule some checks, +        if (!metaFound) {, +                logger.debug("no river _meta document found retrying in {} ms", RIVER_START_RETRY_INTERVAL.millis());, +, +++ b/src/test/java/org/elasticsearch/river/RiverTests.java, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.index.mapper.MapperService;, +@ElasticsearchIntegrationTest.ClusterScope(scope = ElasticsearchIntegrationTest.Scope.SUITE), +        startAndCheckRiverIsStarted("dummy-river-test");, +    }, +, +    @Test, +    public void testMultipleRiversStart() throws Exception {, +        int nbRivers = between(2,10);, +        logger.info("-->  testing with {} rivers...", nbRivers);, +, +        for (int i = 0; i < nbRivers; i++) {, +            final String riverName = "dummy-river-test-" + i;, +            startAndCheckRiverIsStarted(riverName);, +        }, +    }, +]