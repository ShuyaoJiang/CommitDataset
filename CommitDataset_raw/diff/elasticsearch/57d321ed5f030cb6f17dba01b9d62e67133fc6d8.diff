[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/Job.java, +     * A good starting name for the index storing the job's results., +     * This defaults to the shared results index if a specific index name is not set., +     * This method must <em>only</em> be used during initial job creation., +     * After that the read/write aliases must always be used to access the job's, +     * results index, as the underlying index may roll or be reindexed., +     * @return The job's initial results index name, +    public String getInitialResultsIndexName() {, +     * Get the unmodified <code>results_index_name</code> field from the job., +     * This is provided to allow a job to be copied via the builder., +     * After creation this does not necessarily reflect the actual concrete, +     * index used by the job.  A job's results must always be read and written, +     * using the read and write aliases., +     * @return The job's configured "index name", +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/Job.java, +     * A good starting name for the index storing the job's results., +     * This defaults to the shared results index if a specific index name is not set., +     * This method must <em>only</em> be used during initial job creation., +     * After that the read/write aliases must always be used to access the job's, +     * results index, as the underlying index may roll or be reindexed., +     * @return The job's initial results index name, +    public String getInitialResultsIndexName() {, +     * Get the unmodified <code>results_index_name</code> field from the job., +     * This is provided to allow a job to be copied via the builder., +     * After creation this does not necessarily reflect the actual concrete, +     * index used by the job.  A job's results must always be read and written, +     * using the read and write aliases., +     * @return The job's configured "index name", +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/config/JobTests.java, +                job.getInitialResultsIndexName());, +        assertEquals(AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + "custom-carol", job.getInitialResultsIndexName());, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/Job.java, +     * A good starting name for the index storing the job's results., +     * This defaults to the shared results index if a specific index name is not set., +     * This method must <em>only</em> be used during initial job creation., +     * After that the read/write aliases must always be used to access the job's, +     * results index, as the underlying index may roll or be reindexed., +     * @return The job's initial results index name, +    public String getInitialResultsIndexName() {, +     * Get the unmodified <code>results_index_name</code> field from the job., +     * This is provided to allow a job to be copied via the builder., +     * After creation this does not necessarily reflect the actual concrete, +     * index used by the job.  A job's results must always be read and written, +     * using the read and write aliases., +     * @return The job's configured "index name", +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/config/JobTests.java, +                job.getInitialResultsIndexName());, +        assertEquals(AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + "custom-carol", job.getInitialResultsIndexName());, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlJobIT.java, +import org.elasticsearch.xpack.core.ml.job.config.Job;, +    public void testGetJob_GivenNoSuchJob() {, +        // Make the job's results span an extra two indices, i.e. three in total., +        // To do this the job's results alias needs to encompass all three indices., +        Request extraIndex1 = new Request("PUT", indexName + "-001");, +        extraIndex1.setJsonEntity("{\n" +, +            "    \"aliases\" : {\n" +, +            "        \"" + AnomalyDetectorsIndex.jobResultsAliasedName(jobId)+ "\" : {\n" +, +            "            \"filter\" : {\n" +, +            "                \"term\" : {\"" + Job.ID + "\" : \"" + jobId + "\" }\n" +, +            "            }\n" +, +            "        }\n" +, +            "    }\n" +, +            "}");, +        client().performRequest(extraIndex1);, +        Request extraIndex2 = new Request("PUT", indexName + "-002");, +        extraIndex2.setJsonEntity("{\n" +, +            "    \"aliases\" : {\n" +, +            "        \"" + AnomalyDetectorsIndex.jobResultsAliasedName(jobId)+ "\" : {\n" +, +            "            \"filter\" : {\n" +, +            "                \"term\" : {\"" + Job.ID + "\" : \"" + jobId + "\" }\n" +, +            "            }\n" +, +            "        }\n" +, +            "    }\n" +, +            "}");, +        client().performRequest(extraIndex2);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/Job.java, +     * A good starting name for the index storing the job's results., +     * This defaults to the shared results index if a specific index name is not set., +     * This method must <em>only</em> be used during initial job creation., +     * After that the read/write aliases must always be used to access the job's, +     * results index, as the underlying index may roll or be reindexed., +     * @return The job's initial results index name, +    public String getInitialResultsIndexName() {, +     * Get the unmodified <code>results_index_name</code> field from the job., +     * This is provided to allow a job to be copied via the builder., +     * After creation this does not necessarily reflect the actual concrete, +     * index used by the job.  A job's results must always be read and written, +     * using the read and write aliases., +     * @return The job's configured "index name", +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/config/JobTests.java, +                job.getInitialResultsIndexName());, +        assertEquals(AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + "custom-carol", job.getInitialResultsIndexName());, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlJobIT.java, +import org.elasticsearch.xpack.core.ml.job.config.Job;, +    public void testGetJob_GivenNoSuchJob() {, +        // Make the job's results span an extra two indices, i.e. three in total., +        // To do this the job's results alias needs to encompass all three indices., +        Request extraIndex1 = new Request("PUT", indexName + "-001");, +        extraIndex1.setJsonEntity("{\n" +, +            "    \"aliases\" : {\n" +]