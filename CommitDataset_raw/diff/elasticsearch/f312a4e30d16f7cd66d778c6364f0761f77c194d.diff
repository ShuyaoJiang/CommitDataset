[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +public class JarHell {, +    public static void checkJarHell() throws Exception {, +        checkJarHell(((URLClassLoader)loader).getURLs());, +    }, +, +    /**, +     * Checks the set of URLs for duplicate classes, +     * @throws IllegalStateException if jar hell was found, +     */, +    @SuppressForbidden(reason = "needs JarFile for speed, just reading entries"), +    public static void checkJarHell(URL urls[]) throws Exception {, +        for (final URL url : urls) {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +public class JarHell {, +    public static void checkJarHell() throws Exception {, +        checkJarHell(((URLClassLoader)loader).getURLs());, +    }, +, +    /**, +     * Checks the set of URLs for duplicate classes, +     * @throws IllegalStateException if jar hell was found, +     */, +    @SuppressForbidden(reason = "needs JarFile for speed, just reading entries"), +    public static void checkJarHell(URL urls[]) throws Exception {, +        for (final URL url : urls) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, +public final class NotSerializableExceptionWrapper extends ElasticsearchException {, +    public NotSerializableExceptionWrapper(Throwable other) {, +        super(other.getMessage(), other.getCause());, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +public class JarHell {, +    public static void checkJarHell() throws Exception {, +        checkJarHell(((URLClassLoader)loader).getURLs());, +    }, +, +    /**, +     * Checks the set of URLs for duplicate classes, +     * @throws IllegalStateException if jar hell was found, +     */, +    @SuppressForbidden(reason = "needs JarFile for speed, just reading entries"), +    public static void checkJarHell(URL urls[]) throws Exception {, +        for (final URL url : urls) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, +public final class NotSerializableExceptionWrapper extends ElasticsearchException {, +    public NotSerializableExceptionWrapper(Throwable other) {, +        super(other.getMessage(), other.getCause());, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    return (T) readStackTrace(new IllegalStateException(readOptionalString(), readThrowable()), this);, +                    return (T) readStackTrace(new AlreadyClosedException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +public class JarHell {, +    public static void checkJarHell() throws Exception {, +        checkJarHell(((URLClassLoader)loader).getURLs());, +    }, +, +    /**, +     * Checks the set of URLs for duplicate classes, +     * @throws IllegalStateException if jar hell was found, +     */, +    @SuppressForbidden(reason = "needs JarFile for speed, just reading entries"), +    public static void checkJarHell(URL urls[]) throws Exception {, +        for (final URL url : urls) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, +public final class NotSerializableExceptionWrapper extends ElasticsearchException {, +    public NotSerializableExceptionWrapper(Throwable other) {, +        super(other.getMessage(), other.getCause());, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    return (T) readStackTrace(new IllegalStateException(readOptionalString(), readThrowable()), this);, +                    return (T) readStackTrace(new AlreadyClosedException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +            } else if (throwable instanceof IllegalStateException) {, +            } else if (throwable instanceof AlreadyClosedException) {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +public class JarHell {, +    public static void checkJarHell() throws Exception {, +        checkJarHell(((URLClassLoader)loader).getURLs());, +    }, +, +    /**, +     * Checks the set of URLs for duplicate classes, +     * @throws IllegalStateException if jar hell was found, +     */, +    @SuppressForbidden(reason = "needs JarFile for speed, just reading entries"), +    public static void checkJarHell(URL urls[]) throws Exception {, +        for (final URL url : urls) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NotSerializableExceptionWrapper.java, +public final class NotSerializableExceptionWrapper extends ElasticsearchException {, +    public NotSerializableExceptionWrapper(Throwable other) {, +        super(other.getMessage(), other.getCause());, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    return (T) readStackTrace(new IllegalStateException(readOptionalString(), readThrowable()), this);, +                    return (T) readStackTrace(new AlreadyClosedException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java]