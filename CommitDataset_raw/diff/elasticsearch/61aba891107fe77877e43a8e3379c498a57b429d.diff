[+++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +     * Add a aggregation definition., +     */, +    public PercolateRequestBuilder addAggregation(AggregationBuilder aggregationBuilder) {, +        sourceBuilder().addAggregation(aggregationBuilder);, +        return this;, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +     * Add a aggregation definition., +     */, +    public PercolateRequestBuilder addAggregation(AggregationBuilder aggregationBuilder) {, +        sourceBuilder().addAggregation(aggregationBuilder);, +        return this;, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java, +import org.elasticsearch.search.aggregations.InternalAggregations;, +    private InternalAggregations aggregations;, +                             Match[] matches, long count, long tookInMillis, InternalFacets facets, InternalAggregations aggregations) {, +        this.aggregations = aggregations;, +    public InternalAggregations getAggregations() {, +        return aggregations;, +    }, +, +        if (aggregations != null) {, +            aggregations.toXContent(builder, params);, +        }, +, +        aggregations = InternalAggregations.readOptionalAggregations(in);, +        out.writeOptionalStreamable(aggregations);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +     * Add a aggregation definition., +     */, +    public PercolateRequestBuilder addAggregation(AggregationBuilder aggregationBuilder) {, +        sourceBuilder().addAggregation(aggregationBuilder);, +        return this;, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java, +import org.elasticsearch.search.aggregations.InternalAggregations;, +    private InternalAggregations aggregations;, +                             Match[] matches, long count, long tookInMillis, InternalFacets facets, InternalAggregations aggregations) {, +        this.aggregations = aggregations;, +    public InternalAggregations getAggregations() {, +        return aggregations;, +    }, +, +        if (aggregations != null) {, +            aggregations.toXContent(builder, params);, +        }, +, +        aggregations = InternalAggregations.readOptionalAggregations(in);, +        out.writeOptionalStreamable(aggregations);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +import com.google.common.collect.ImmutableList;, +import org.elasticsearch.search.aggregations.InternalAggregations;, +import org.elasticsearch.search.query.QuerySearchResult;, +    private static final BytesRef[] EMPTY_MATCHES = new BytesRef[0];, +    private static final float[] EMPTY_SCORES = new float[0];, +    private static final List<Map<String, HighlightField>> EMPTY_HL = ImmutableList.of();, +    private List<Map<String, HighlightField>> hls;, +    private InternalAggregations aggregations;, +        hls = new ArrayList<Map<String, HighlightField>>();, +        QuerySearchResult result = context.queryResult();, +        if (result != null) {, +            if (result.facets() != null) {, +                this.facets = new InternalFacets(result.facets().facets());, +            }, +            if (result.aggregations() != null) {, +                this.aggregations = (InternalAggregations) result.aggregations();, +            }, +        }, +        this(matches, EMPTY_HL, count, scores, context, index, shardId);, +        this(matches, hls, count, EMPTY_SCORES, context, index, shardId);, +        this(EMPTY_MATCHES, EMPTY_HL, count, EMPTY_SCORES, context, index, shardId);, +        this(EMPTY_MATCHES, EMPTY_HL, 0, EMPTY_SCORES, context, index, shardId);, +    public InternalAggregations aggregations() {, +        return aggregations;, +    }, +, +        aggregations = InternalAggregations.readOptionalAggregations(in);, +        out.writeOptionalStreamable(aggregations);, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.aggregations.AggregationBuilder;, +     * Add a aggregation definition., +     */, +    public PercolateRequestBuilder addAggregation(AggregationBuilder aggregationBuilder) {, +        sourceBuilder().addAggregation(aggregationBuilder);, +        return this;, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java]