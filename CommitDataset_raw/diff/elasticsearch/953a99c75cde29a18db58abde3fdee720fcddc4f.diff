[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/Directories.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/Directories.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/CommitPoint.java, +            if (checksum == null || md.checksum() == null) {, +                return false;, +            return length == md.length() && checksum.equals(md.checksum());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/Directories.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/CommitPoint.java, +            if (checksum == null || md.checksum() == null) {, +                return false;, +            return length == md.length() && checksum.equals(md.checksum());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/RecoverySource.java, +        logger.debug("using concurrent_streams [{}], file_chunk_size [{}], translog_size [{}], translog_ops [{}], and compress [{}]",, +                concurrentStreams, fileChunkSize, translogSize, translogOps, compress);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/Directories.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/CommitPoint.java, +            if (checksum == null || md.checksum() == null) {, +                return false;, +            return length == md.length() && checksum.equals(md.checksum());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/RecoverySource.java, +        logger.debug("using concurrent_streams [{}], file_chunk_size [{}], translog_size [{}], translog_ops [{}], and compress [{}]",, +                concurrentStreams, fileChunkSize, translogSize, translogOps, compress);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/StoreFileMetaData.java, +        if (checksum == null || other.checksum == null) {, +            return false;, +        return length == other.length && checksum.equals(other.checksum);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/Directories.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/CommitPoint.java, +            if (checksum == null || md.checksum() == null) {, +                return false;, +            return length == md.length() && checksum.equals(md.checksum());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/RecoverySource.java, +        logger.debug("using concurrent_streams [{}], file_chunk_size [{}], translog_size [{}], translog_ops [{}], and compress [{}]",, +                concurrentStreams, fileChunkSize, translogSize, translogOps, compress);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/StoreFileMetaData.java, +        if (checksum == null || other.checksum == null) {, +            return false;, +        return length == other.length && checksum.equals(other.checksum);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/support/AbstractStore.java, +    static final String CHECKSUMS_PREFIX = "_checksums-";, +, +        String[] files = directory().listAll();, +        IOException lastException = null;, +        for (String file : files) {, +            if (file.startsWith(CHECKSUMS_PREFIX)) {, +                ((StoreDirectory) directory()).deleteFileChecksum(file);, +            } else {, +                try {, +                    directory().deleteFile(file);, +                } catch (FileNotFoundException e) {, +                    // ignore, +                } catch (IOException e) {, +                    lastException = e;, +                }, +            }, +        }, +        if (lastException != null) {, +            throw lastException;, +        }, +            if (!name.startsWith(CHECKSUMS_PREFIX)) {, +            long current = Long.parseLong(name.substring(CHECKSUMS_PREFIX.length()));, +        IndexInput indexInput = dir.openInput(CHECKSUMS_PREFIX + lastFound);, +        String checksumName = CHECKSUMS_PREFIX + System.currentTimeMillis();, +            if (metaData.name().startsWith(CHECKSUMS_PREFIX) && !checksumName.equals(metaData.name())) {, +                    dir.deleteFileChecksum(metaData.name());, +        public void deleteFileChecksum(String name) throws IOException {, +            delegate.deleteFile(name);, +            synchronized (mutex) {, +                filesMetadata = MapBuilder.newMapBuilder(filesMetadata).remove(name).immutableMap();, +                files = filesMetadata.keySet().toArray(new String[filesMetadata.size()]);, +            }, +        }, +, +            // we don't allow to delete the checksums files, only using the deleteChecksum method, +            if (name.startsWith(CHECKSUMS_PREFIX)) {, +                return;, +            }]