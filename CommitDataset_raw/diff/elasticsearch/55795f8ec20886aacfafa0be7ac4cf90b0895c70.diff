[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);, +    private static Environment initialSettings(boolean foreground) {, +        return InternalSettingsPreparer.prepareEnvironment(EMPTY_SETTINGS, terminal);, +        Environment environment = initialSettings(foreground);, +        Settings settings = environment.settings();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);, +    private static Environment initialSettings(boolean foreground) {, +        return InternalSettingsPreparer.prepareEnvironment(EMPTY_SETTINGS, terminal);, +        Environment environment = initialSettings(foreground);, +        Settings settings = environment.settings();, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            Settings settings = InternalSettingsPreparer.prepareSettings(this.settings);, +            settings = settingsBuilder(), +                    .put(settings), +            PluginsService pluginsService = new PluginsService(settings, null, pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);, +    private static Environment initialSettings(boolean foreground) {, +        return InternalSettingsPreparer.prepareEnvironment(EMPTY_SETTINGS, terminal);, +        Environment environment = initialSettings(foreground);, +        Settings settings = environment.settings();, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            Settings settings = InternalSettingsPreparer.prepareSettings(this.settings);, +            settings = settingsBuilder(), +                    .put(settings), +            PluginsService pluginsService = new PluginsService(settings, null, pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +        env = InternalSettingsPreparer.prepareEnvironment(EMPTY_SETTINGS, terminal);, +        settings = env.settings();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);, +    private static Environment initialSettings(boolean foreground) {, +        return InternalSettingsPreparer.prepareEnvironment(EMPTY_SETTINGS, terminal);, +        Environment environment = initialSettings(foreground);, +        Settings settings = environment.settings();, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            Settings settings = InternalSettingsPreparer.prepareSettings(this.settings);, +            settings = settingsBuilder(), +                    .put(settings), +            PluginsService pluginsService = new PluginsService(settings, null, pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +        env = InternalSettingsPreparer.prepareEnvironment(EMPTY_SETTINGS, terminal);, +        settings = env.settings();, +++ b/core/src/main/java/org/elasticsearch/common/logging/log4j/LogConfigurator.java, +import static org.elasticsearch.common.Strings.cleanPath;, +        // TODO: this is partly a copy of InternalSettingsPreparer...we should pass in Environment and not do all this..., +        // ensure explicit path to logs dir exists, +        props.put("path.logs", cleanPath(environment.logsFile().toAbsolutePath().toString()));, +    static void reset() {, +    static void resolveConfig(Environment env, final Settings.Builder settingsBuilder) {, +    static void loadConfig(Path file, Settings.Builder settingsBuilder) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);, +    private static Environment initialSettings(boolean foreground) {, +        return InternalSettingsPreparer.prepareEnvironment(EMPTY_SETTINGS, terminal);, +        Environment environment = initialSettings(foreground);, +        Settings settings = environment.settings();, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            Settings settings = InternalSettingsPreparer.prepareSettings(this.settings);, +            settings = settingsBuilder(), +                    .put(settings), +            PluginsService pluginsService = new PluginsService(settings, null, pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +        env = InternalSettingsPreparer.prepareEnvironment(EMPTY_SETTINGS, terminal);, +        settings = env.settings();, +++ b/core/src/main/java/org/elasticsearch/common/logging/log4j/LogConfigurator.java, +import static org.elasticsearch.common.Strings.cleanPath;, +        // TODO: this is partly a copy of InternalSettingsPreparer...we should pass in Environment and not do all this..., +        // ensure explicit path to logs dir exists, +        props.put("path.logs", cleanPath(environment.logsFile().toAbsolutePath().toString()));, +    static void reset() {, +    static void resolveConfig(Environment env, final Settings.Builder settingsBuilder) {, +    static void loadConfig(Path file, Settings.Builder settingsBuilder) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +    public Node(Settings preparedSettings) {, +        this(preparedSettings, Version.CURRENT, Collections.<Class<? extends Plugin>>emptyList());, +    Node(Settings preparedSettings, Version version, Collection<Class<? extends Plugin>> classpathPlugins) {, +        Environment tmpEnv = InternalSettingsPreparer.prepareEnvironment(pSettings, null);, +        Settings tmpSettings = TribeService.processSettings(tmpEnv.settings());, +        ESLogger logger = Loggers.getLogger(Node.class, tmpSettings.get("name"));, +                tmpEnv.configFile(), Arrays.toString(tmpEnv.dataFiles()), tmpEnv.logsFile(), tmpEnv.pluginsFile());, +        this.pluginsService = new PluginsService(tmpSettings, tmpEnv.pluginsFile(), classpathPlugins);, +            modules.add(new SettingsModule(this.settings));, +            modules.add(new ScriptModule(this.settings));, +            modules.add(new ClusterNameModule(this.settings));, +            modules.add(new DiscoveryModule(this.settings));, +            modules.add(new ClusterModule(this.settings));, +            modules.add(new RestModule(this.settings));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);, +    private static Environment initialSettings(boolean foreground) {, +        return InternalSettingsPreparer.prepareEnvironment(EMPTY_SETTINGS, terminal);, +        Environment environment = initialSettings(foreground);, +        Settings settings = environment.settings();, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            Settings settings = InternalSettingsPreparer.prepareSettings(this.settings);, +            settings = settingsBuilder(), +                    .put(settings)]