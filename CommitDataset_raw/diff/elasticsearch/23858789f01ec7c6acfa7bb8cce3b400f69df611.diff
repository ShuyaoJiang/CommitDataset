[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +        if (actual.dynamic) {, +            if (expected.clazz == boolean.class) {, +            } else if (expected.clazz == byte.class) {, +            } else if (expected.clazz == short.class) {, +            } else if (expected.clazz == char.class) {, +            } else if (expected.clazz == int.class) {, +            } else if (expected.clazz == long.class) {, +            } else if (expected.clazz == float.class) {, +            } else if (expected.clazz == double.class) {, +        } else if (actual.clazz == Object.class) {, +            if (expected.clazz == byte.class && explicit && internal) {, +                return new Cast(OBJECT_TYPE, BYTE_OBJ_TYPE, true, null, BYTE_TYPE, null, null);, +            } else if (expected.clazz == short.class && explicit && internal) {, +                return new Cast(OBJECT_TYPE, SHORT_OBJ_TYPE, true, null, SHORT_TYPE, null, null);, +            } else if (expected.clazz == char.class && explicit && internal) {, +                return new Cast(OBJECT_TYPE, CHAR_OBJ_TYPE, true, null, CHAR_TYPE, null, null);, +            } else if (expected.clazz == int.class && explicit && internal) {, +                return new Cast(OBJECT_TYPE, INT_OBJ_TYPE, true, null, INT_TYPE, null, null);, +            } else if (expected.clazz == long.class && explicit && internal) {, +                return new Cast(OBJECT_TYPE, LONG_OBJ_TYPE, true, null, LONG_TYPE, null, null);, +            } else if (expected.clazz == float.class && explicit && internal) {, +                return new Cast(OBJECT_TYPE, FLOAT_OBJ_TYPE, true, null, FLOAT_TYPE, null, null);, +            } else if (expected.clazz == double.class && explicit && internal) {, +                return new Cast(OBJECT_TYPE, DOUBLE_OBJ_TYPE, true, null, DOUBLE_TYPE, null, null);, +            }, +        } else if (actual.clazz == Number.class) {, +            if (expected.clazz == byte.class && explicit && internal) {, +                return new Cast(NUMBER_TYPE, BYTE_OBJ_TYPE, true, null, BYTE_TYPE, null, null);, +            } else if (expected.clazz == short.class && explicit && internal) {, +                return new Cast(NUMBER_TYPE, SHORT_OBJ_TYPE, true, null, SHORT_TYPE, null, null);, +            } else if (expected.clazz == char.class && explicit && internal) {, +                return new Cast(NUMBER_TYPE, CHAR_OBJ_TYPE, true, null, CHAR_TYPE, null, null);, +            } else if (expected.clazz == int.class && explicit && internal) {, +                return new Cast(NUMBER_TYPE, INT_OBJ_TYPE, true, null, INT_TYPE, null, null);, +            } else if (expected.clazz == long.class && explicit && internal) {, +                return new Cast(NUMBER_TYPE, LONG_OBJ_TYPE, true, null, LONG_TYPE, null, null);, +            } else if (expected.clazz == float.class && explicit && internal) {, +                return new Cast(NUMBER_TYPE, FLOAT_OBJ_TYPE, true, null, FLOAT_TYPE, null, null);, +            } else if (expected.clazz == double.class && explicit && internal) {, +                return new Cast(NUMBER_TYPE, DOUBLE_OBJ_TYPE, true, null, DOUBLE_TYPE, null, null);, +            }, +        } else if (actual.clazz == String.class) {, +            if (expected.clazz == char.class && explicit) {, +            }, +        } else if (actual.clazz == boolean.class) {, +            if (expected.dynamic) {, +                return new Cast(BOOLEAN_OBJ_TYPE, DEF_TYPE, explicit, null, null, BOOLEAN_TYPE, null);, +            } else if (expected.clazz == Object.class && internal) {, +                return new Cast(BOOLEAN_OBJ_TYPE, OBJECT_TYPE, explicit, null, null, BOOLEAN_TYPE, null);, +            } else if (expected.clazz == Boolean.class && internal) {, +                return new Cast(BOOLEAN_TYPE, BOOLEAN_TYPE, explicit, null, null, null, BOOLEAN_TYPE);, +            }, +        } else if (actual.clazz == byte.class) {, +            if (expected.dynamic) {, +                return new Cast(BYTE_OBJ_TYPE, DEF_TYPE, explicit, null, null, BYTE_TYPE, null);, +            } else if (expected.clazz == Object.class && internal) {, +                return new Cast(BYTE_OBJ_TYPE, OBJECT_TYPE, explicit, null, null, BYTE_TYPE, null);, +            } else if (expected.clazz == Number.class && internal) {, +                return new Cast(BYTE_OBJ_TYPE, NUMBER_TYPE, explicit, null, null, BYTE_TYPE, null);, +            } else if (expected.clazz == short.class) {, +                return new Cast(BYTE_TYPE, SHORT_TYPE, explicit);, +            } else if (expected.clazz == char.class && explicit) {, +                return new Cast(BYTE_TYPE, CHAR_TYPE, true);, +            } else if (expected.clazz == int.class) {, +                return new Cast(BYTE_TYPE, INT_TYPE, explicit);, +            } else if (expected.clazz == long.class) {, +                return new Cast(BYTE_TYPE, LONG_TYPE, explicit);, +            } else if (expected.clazz == float.class) {, +                return new Cast(BYTE_TYPE, FLOAT_TYPE, explicit);, +            } else if (expected.clazz == double.class) {, +                return new Cast(BYTE_TYPE, DOUBLE_TYPE, explicit);, +            } else if (expected.clazz == Byte.class && internal) {, +                return new Cast(BYTE_TYPE, BYTE_TYPE, explicit, null, null, null, BYTE_TYPE);, +            } else if (expected.clazz == Short.class && internal) {, +                return new Cast(BYTE_TYPE, SHORT_TYPE, explicit, null, null, null, SHORT_TYPE);, +            } else if (expected.clazz == Character.class && explicit && internal) {, +                return new Cast(BYTE_TYPE, CHAR_TYPE, true, null, null, null, CHAR_TYPE);, +            } else if (expected.clazz == Integer.class && internal) {, +                return new Cast(BYTE_TYPE, INT_TYPE, explicit, null, null, null, INT_TYPE);, +            } else if (expected.clazz == Long.class && internal) {, +                return new Cast(BYTE_TYPE, LONG_TYPE, explicit, null, null, null, LONG_TYPE);, +            } else if (expected.clazz == Float.class && internal) {, +                return new Cast(BYTE_TYPE, FLOAT_TYPE, explicit, null, null, null, FLOAT_TYPE);, +            } else if (expected.clazz == Double.class && internal) {, +                return new Cast(BYTE_TYPE, DOUBLE_TYPE, explicit, null, null, null, DOUBLE_TYPE);, +            }, +        } else if (actual.clazz == short.class) {, +            if (expected.dynamic) {, +                return new Cast(SHORT_OBJ_TYPE, DEF_TYPE, explicit, null, null, SHORT_TYPE, null);, +            } else if (expected.clazz == Object.class && internal) {, +                return new Cast(SHORT_OBJ_TYPE, OBJECT_TYPE, explicit, null, null, SHORT_TYPE, null);, +            } else if (expected.clazz == Number.class && internal) {, +                return new Cast(SHORT_OBJ_TYPE, NUMBER_TYPE, explicit, null, null, SHORT_TYPE, null);, +            } else if (expected.clazz == byte.class && explicit) {, +                return new Cast(SHORT_TYPE, BYTE_TYPE, true);, +            } else if (expected.clazz == char.class && explicit) {, +                return new Cast(SHORT_TYPE, CHAR_TYPE, true);, +            } else if (expected.clazz == int.class) {, +                return new Cast(SHORT_TYPE, INT_TYPE, explicit);]