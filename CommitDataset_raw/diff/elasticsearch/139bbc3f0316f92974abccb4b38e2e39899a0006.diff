[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RollupIT.java, +        GetRollupJobRequest getRollupJobRequest = randomBoolean() ? new GetRollupJobRequest() : new GetRollupJobRequest(id);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RollupIT.java, +        GetRollupJobRequest getRollupJobRequest = randomBoolean() ? new GetRollupJobRequest() : new GetRollupJobRequest(id);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/RollupDocumentationIT.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RollupIT.java, +        GetRollupJobRequest getRollupJobRequest = randomBoolean() ? new GetRollupJobRequest() : new GetRollupJobRequest(id);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/RollupDocumentationIT.java, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java, +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +import java.nio.charset.StandardCharsets;, +     * {@link #preserveIndicesUponCompletion()}, {@link #preserveTemplatesUponCompletion()}, {@link #preserveReposUponCompletion()},, +     * {@link #preserveSnapshotsUponCompletion()}, and {@link #preserveRollupJobsUponCompletion()}., +    /**, +     * Returns whether to preserve the rollup jobs of this test. Defaults to, +     * not preserving them. Only runs at all if xpack is installed on the, +     * cluster being tested., +     */, +    protected boolean preserveRollupJobsUponCompletion() {, +        return false;, +    }, +, +    private void wipeCluster() throws Exception {, +        boolean hasXPack = hasXPack();, +, +            if (hasXPack) {, +, +        if (hasXPack && false == preserveRollupJobsUponCompletion()) {, +            wipeRollupJobs();, +            waitForPendingRollupTasks();, +        }, +    private void wipeRollupJobs() throws IOException {, +        Response response = adminClient().performRequest(new Request("GET", "/_xpack/rollup/job/_all"));, +        Map<String, Object> jobs = entityAsMap(response);, +        @SuppressWarnings("unchecked"), +        List<Map<String, Object>> jobConfigs =, +                (List<Map<String, Object>>) XContentMapValues.extractValue("jobs", jobs);, +, +        if (jobConfigs == null) {, +            return;, +        }, +, +        for (Map<String, Object> jobConfig : jobConfigs) {, +            @SuppressWarnings("unchecked"), +            String jobId = (String) ((Map<String, Object>) jobConfig.get("config")).get("id");, +            Request request = new Request("DELETE", "/_xpack/rollup/job/" + jobId);, +            request.addParameter("ignore", "404"); // Ignore 404s because they imply someone was racing us to delete this, +            logger.debug("deleting rollup job [{}]", jobId);, +            adminClient().performRequest(request);, +        }, +    }, +, +    private void waitForPendingRollupTasks() throws Exception {, +        assertBusy(() -> {, +            try {, +                Request request = new Request("GET", "/_cat/tasks");, +                request.addParameter("detailed", "true");, +                Response response = adminClient().performRequest(request);, +, +                try (BufferedReader responseReader = new BufferedReader(, +                        new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))) {, +                    int activeTasks = 0;, +                    String line;, +                    StringBuilder tasksListString = new StringBuilder();, +                    while ((line = responseReader.readLine()) != null) {, +, +                        // We only care about Rollup jobs, otherwise this fails too easily due to unrelated tasks, +                        if (line.startsWith("xpack/rollup/job") == true) {, +                            activeTasks++;, +                            tasksListString.append(line).append('\n');, +                        }, +                    }, +                    assertEquals(activeTasks + " active tasks found:\n" + tasksListString, 0, activeTasks);, +                }, +            } catch (IOException e) {, +                // Throw an assertion error so we retry, +                throw new AssertionError("Error getting active tasks list", e);, +            }, +        });, +    }, +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RollupIT.java, +        GetRollupJobRequest getRollupJobRequest = randomBoolean() ? new GetRollupJobRequest() : new GetRollupJobRequest(id);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/RollupDocumentationIT.java, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java, +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +import java.nio.charset.StandardCharsets;, +     * {@link #preserveIndicesUponCompletion()}, {@link #preserveTemplatesUponCompletion()}, {@link #preserveReposUponCompletion()},, +     * {@link #preserveSnapshotsUponCompletion()}, and {@link #preserveRollupJobsUponCompletion()}., +    /**, +     * Returns whether to preserve the rollup jobs of this test. Defaults to, +     * not preserving them. Only runs at all if xpack is installed on the, +     * cluster being tested., +     */, +    protected boolean preserveRollupJobsUponCompletion() {, +        return false;, +    }, +]