[+++ b/.idea/dictionaries/kimchy.xml, +      <w>booleans</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>booleans</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +import org.elasticsearch.util.Booleans;, +        return Booleans.parseBoolean(param(key), defaultValue);, +++ b/.idea/dictionaries/kimchy.xml, +      <w>booleans</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +import org.elasticsearch.util.Booleans;, +        return Booleans.parseBoolean(param(key), defaultValue);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/json/BoolJsonQueryParser.java, +import org.elasticsearch.util.Booleans;, + * @author kimchy (shay.banon), +                } else if ("boost".equals(currentFieldName)) {, +                    boost = jp.getIntValue();, +                }, +            } else if (token == JsonToken.VALUE_NUMBER_FLOAT) {, +                if ("boost".equals(currentFieldName)) {, +                    boost = jp.getFloatValue();, +                }, +            } else if (token == JsonToken.VALUE_STRING) {, +                if ("disableCoord".equals(currentFieldName)) {, +                    disableCoord = Booleans.parseBoolean(jp.getText(), false);, +                } else if ("minimumNumberShouldMatch".equals(currentFieldName)) {, +                    minimumNumberShouldMatch = Integer.parseInt(jp.getText());, +                } else if ("boost".equals(currentFieldName)) {, +                    boost = Float.parseFloat(jp.getText());, +++ b/.idea/dictionaries/kimchy.xml, +      <w>booleans</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +import org.elasticsearch.util.Booleans;, +        return Booleans.parseBoolean(param(key), defaultValue);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/json/BoolJsonQueryParser.java, +import org.elasticsearch.util.Booleans;, + * @author kimchy (shay.banon), +                } else if ("boost".equals(currentFieldName)) {, +                    boost = jp.getIntValue();, +                }, +            } else if (token == JsonToken.VALUE_NUMBER_FLOAT) {, +                if ("boost".equals(currentFieldName)) {, +                    boost = jp.getFloatValue();, +                }, +            } else if (token == JsonToken.VALUE_STRING) {, +                if ("disableCoord".equals(currentFieldName)) {, +                    disableCoord = Booleans.parseBoolean(jp.getText(), false);, +                } else if ("minimumNumberShouldMatch".equals(currentFieldName)) {, +                    minimumNumberShouldMatch = Integer.parseInt(jp.getText());, +                } else if ("boost".equals(currentFieldName)) {, +                    boost = Float.parseFloat(jp.getText());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/json/ConstantScoreQueryJsonQueryParser.java, + * @author kimchy (shay.banon), +            } else if (token == JsonToken.VALUE_STRING) {, +                if ("boost".equals(currentFieldName)) {, +                    boost = Float.parseFloat(jp.getText());, +                }, +++ b/.idea/dictionaries/kimchy.xml, +      <w>booleans</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +import org.elasticsearch.util.Booleans;, +        return Booleans.parseBoolean(param(key), defaultValue);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/json/BoolJsonQueryParser.java, +import org.elasticsearch.util.Booleans;, + * @author kimchy (shay.banon), +                } else if ("boost".equals(currentFieldName)) {, +                    boost = jp.getIntValue();, +                }, +            } else if (token == JsonToken.VALUE_NUMBER_FLOAT) {, +                if ("boost".equals(currentFieldName)) {, +                    boost = jp.getFloatValue();, +                }, +            } else if (token == JsonToken.VALUE_STRING) {, +                if ("disableCoord".equals(currentFieldName)) {, +                    disableCoord = Booleans.parseBoolean(jp.getText(), false);, +                } else if ("minimumNumberShouldMatch".equals(currentFieldName)) {, +                    minimumNumberShouldMatch = Integer.parseInt(jp.getText());, +                } else if ("boost".equals(currentFieldName)) {, +                    boost = Float.parseFloat(jp.getText());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/json/ConstantScoreQueryJsonQueryParser.java, + * @author kimchy (shay.banon), +            } else if (token == JsonToken.VALUE_STRING) {, +                if ("boost".equals(currentFieldName)) {, +                    boost = Float.parseFloat(jp.getText());, +                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/json/DisMaxJsonQueryParser.java, +                    if (token == JsonToken.VALUE_STRING) {, +                        boost = Float.parseFloat(jp.getText());, +                    } else {, +                    }, +                    if (token == JsonToken.VALUE_STRING) {, +                        tieBreakerMultiplier = Float.parseFloat(jp.getText());, +                    } else {, +                    }, +                    if (token == JsonToken.VALUE_STRING) {, +                        tieBreakerMultiplier = Float.parseFloat(jp.getText());, +                    } else {, +        }, +++ b/.idea/dictionaries/kimchy.xml, +      <w>booleans</w>]