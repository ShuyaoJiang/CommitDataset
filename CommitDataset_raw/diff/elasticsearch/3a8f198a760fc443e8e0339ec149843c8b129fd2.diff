[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/store/IndicesStore.java, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.index.shard.ShardId;, +import java.util.Map;, +                // checking if the index was completely relocated to another nodes but left unused shards, +                for (Map.Entry<Integer, IndexShardRoutingTable> shardEntry : indexRoutingTable.getShards().entrySet()) {, +                    if (indexRoutingTable != null) {, +                        IndexShardRoutingTable indexShardRoutingTable = indexRoutingTable.shard(shardEntry.getKey());, +                        if (indexShardRoutingTable != null) {, +                            boolean shardCanBeDeleted = true;, +                            for (ShardRouting routing : indexShardRoutingTable) {, +                                // The shard is not yet started - we cannot make determination if it's used or not yet, +                                if (!routing.started()) {, +                                    shardCanBeDeleted = false;, +                                    break;, +                                }, +                                String localNodeId = clusterService.localNode().id();, +                                // Check if shard is active on the current node or is getting relocated to the current node, +                                if (localNodeId.equals(routing.currentNodeId()) || localNodeId.equals(routing.relocatingNodeId())) {, +                                    // Shard is used locally - keep it, +                                    shardCanBeDeleted = false;, +                                    break;, +                                }, +                            }, +                            if (shardCanBeDeleted) {, +                                ShardId shardId = shardEntry.getValue().getShardId();, +                                logger.debug("[{}] deleting shard that is no longer used", shardId);, +                                FileSystemUtils.deleteRecursively(nodeEnv.shardLocation(shardId));, +                            }, +                        }, +                    }, +                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/store/IndicesStore.java, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.index.shard.ShardId;, +import java.util.Map;, +                // checking if the index was completely relocated to another nodes but left unused shards, +                for (Map.Entry<Integer, IndexShardRoutingTable> shardEntry : indexRoutingTable.getShards().entrySet()) {, +                    if (indexRoutingTable != null) {, +                        IndexShardRoutingTable indexShardRoutingTable = indexRoutingTable.shard(shardEntry.getKey());, +                        if (indexShardRoutingTable != null) {, +                            boolean shardCanBeDeleted = true;, +                            for (ShardRouting routing : indexShardRoutingTable) {, +                                // The shard is not yet started - we cannot make determination if it's used or not yet, +                                if (!routing.started()) {, +                                    shardCanBeDeleted = false;, +                                    break;, +                                }, +                                String localNodeId = clusterService.localNode().id();, +                                // Check if shard is active on the current node or is getting relocated to the current node, +                                if (localNodeId.equals(routing.currentNodeId()) || localNodeId.equals(routing.relocatingNodeId())) {, +                                    // Shard is used locally - keep it, +                                    shardCanBeDeleted = false;, +                                    break;, +                                }, +                            }, +                            if (shardCanBeDeleted) {, +                                ShardId shardId = shardEntry.getValue().getShardId();, +                                logger.debug("[{}] deleting shard that is no longer used", shardId);, +                                FileSystemUtils.deleteRecursively(nodeEnv.shardLocation(shardId));, +                            }, +                        }, +                    }, +                }, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/indices/store/IndicesStoreTests.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.integration.indices.store;, +, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.env.NodeEnvironment;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.node.internal.InternalNode;, +import org.elasticsearch.test.integration.AbstractNodesTests;, +import org.testng.annotations.AfterClass;, +import org.testng.annotations.BeforeClass;, +import org.testng.annotations.Test;, +, +import java.io.File;, +, +import static org.elasticsearch.client.Requests.*;, +import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;]