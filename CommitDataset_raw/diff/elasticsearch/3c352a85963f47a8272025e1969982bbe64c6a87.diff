[+++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +        updateFsyncTaskIfNecessary();, +            updateFsyncTaskIfNecessary();, +    private void updateFsyncTaskIfNecessary() {, +        if (indexSettings.getTranslogDurability() == Translog.Durability.REQUEST) {, +                fsyncTask = null;, +            }, +        } else if (fsyncTask == null) {, +            fsyncTask = new AsyncTranslogFSync(this);, +        } else {, +            fsyncTask.updateIfNeeded();, +        void updateIfNeeded() {, +            final TimeValue newInterval = indexService.getIndexSettings().getTranslogSyncInterval();, +            if (newInterval.equals(getInterval()) == false) {, +                setInterval(newInterval);, +            }, +        }, +, +++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +        updateFsyncTaskIfNecessary();, +            updateFsyncTaskIfNecessary();, +    private void updateFsyncTaskIfNecessary() {, +        if (indexSettings.getTranslogDurability() == Translog.Durability.REQUEST) {, +                fsyncTask = null;, +            }, +        } else if (fsyncTask == null) {, +            fsyncTask = new AsyncTranslogFSync(this);, +        } else {, +            fsyncTask.updateIfNeeded();, +        void updateIfNeeded() {, +            final TimeValue newInterval = indexService.getIndexSettings().getTranslogSyncInterval();, +            if (newInterval.equals(getInterval()) == false) {, +                setInterval(newInterval);, +            }, +        }, +, +++ b/server/src/main/java/org/elasticsearch/index/IndexSettings.java, +            Property.Dynamic, Property.IndexScope);, +    private volatile TimeValue syncInterval;, +        scopedSettings.addSettingsUpdateConsumer(INDEX_TRANSLOG_SYNC_INTERVAL_SETTING, this::setTranslogSyncInterval);, +    public void setTranslogSyncInterval(TimeValue translogSyncInterval) {, +        this.syncInterval = translogSyncInterval;, +    }, +    , +++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +        updateFsyncTaskIfNecessary();, +            updateFsyncTaskIfNecessary();, +    private void updateFsyncTaskIfNecessary() {, +        if (indexSettings.getTranslogDurability() == Translog.Durability.REQUEST) {, +                fsyncTask = null;, +            }, +        } else if (fsyncTask == null) {, +            fsyncTask = new AsyncTranslogFSync(this);, +        } else {, +            fsyncTask.updateIfNeeded();, +        void updateIfNeeded() {, +            final TimeValue newInterval = indexService.getIndexSettings().getTranslogSyncInterval();, +            if (newInterval.equals(getInterval()) == false) {, +                setInterval(newInterval);, +            }, +        }, +, +++ b/server/src/main/java/org/elasticsearch/index/IndexSettings.java, +            Property.Dynamic, Property.IndexScope);, +    private volatile TimeValue syncInterval;, +        scopedSettings.addSettingsUpdateConsumer(INDEX_TRANSLOG_SYNC_INTERVAL_SETTING, this::setTranslogSyncInterval);, +    public void setTranslogSyncInterval(TimeValue translogSyncInterval) {, +        this.syncInterval = translogSyncInterval;, +    }, +    , +++ b/server/src/test/java/org/elasticsearch/index/IndexServiceTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +        assertBusy(() -> assertFalse(shard.isSyncNeeded()));, +, +    public void testUpdateSyncIntervalDynamically() {, +        Settings settings = Settings.builder(), +            .put(IndexSettings.INDEX_TRANSLOG_SYNC_INTERVAL_SETTING.getKey(), "10s") // very often :), +            .build();, +        IndexService indexService = createIndex("test", settings);, +        ensureGreen("test");, +        assertNull(indexService.getFsyncTask());, +, +        Settings.Builder builder = Settings.builder().put(IndexSettings.INDEX_TRANSLOG_SYNC_INTERVAL_SETTING.getKey(), "5s"), +            .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC.name());, +, +        client(), +            .admin(), +            .indices(), +            .prepareUpdateSettings("test"), +            .setSettings(builder), +            .get();, +, +        assertNotNull(indexService.getFsyncTask());, +        assertTrue(indexService.getFsyncTask().mustReschedule());, +, +        IndexMetaData indexMetaData = client().admin().cluster().prepareState().execute().actionGet().getState().metaData().index("test");, +        assertEquals("5s", indexMetaData.getSettings().get(IndexSettings.INDEX_TRANSLOG_SYNC_INTERVAL_SETTING.getKey()));, +, +        client().admin().indices().prepareClose("test").get();, +        client()]