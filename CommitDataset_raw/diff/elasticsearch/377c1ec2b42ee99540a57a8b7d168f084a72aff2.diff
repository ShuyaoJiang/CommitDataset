[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.persistent.PersistentTasks;, +                new NamedWriteableRegistry.Entry(MetaData.Custom.class, PersistentTasks.TYPE, PersistentTasks::new),, +                new NamedWriteableRegistry.Entry(NamedDiff.class, PersistentTasks.TYPE, PersistentTasks::readDiffFrom),, +                new NamedXContentRegistry.Entry(MetaData.Custom.class, new ParseField(PersistentTasks.TYPE),, +                        PersistentTasks::fromXContent),, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.persistent.PersistentTasks;, +                new NamedWriteableRegistry.Entry(MetaData.Custom.class, PersistentTasks.TYPE, PersistentTasks::new),, +                new NamedWriteableRegistry.Entry(NamedDiff.class, PersistentTasks.TYPE, PersistentTasks::readDiffFrom),, +                new NamedXContentRegistry.Entry(MetaData.Custom.class, new ParseField(PersistentTasks.TYPE),, +                        PersistentTasks::fromXContent),, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +import org.elasticsearch.xpack.persistent.PersistentTasks;, +import org.elasticsearch.xpack.persistent.PersistentTasks.PersistentTask;, +        public Builder deleteJob(String jobId, PersistentTasks tasks) {, +        public Builder updateDatafeed(DatafeedUpdate update, PersistentTasks persistentTasks) {, +                    DatafeedState.STARTED), datafeedId, persistentTasks);, +        public Builder removeDatafeed(String datafeedId, PersistentTasks persistentTasks) {, +                    DatafeedState.STARTED), datafeedId, persistentTasks);, +        private void checkDatafeedIsStopped(Supplier<String> msg, String datafeedId, PersistentTasks persistentTasks) {, +            if (persistentTasks != null) {, +                Predicate<PersistentTask<?>> predicate = t -> {, +                if (persistentTasks.tasksExist(StartDatafeedAction.NAME, predicate)) {, +        public void markJobAsDeleted(String jobId, PersistentTasks tasks) {, +    public static PersistentTask<?> getJobTask(String jobId, @Nullable PersistentTasks tasks) {, +            Predicate<PersistentTask<?>> p = t -> {, +            for (PersistentTask<?> task : tasks.findTasks(OpenJobAction.NAME, p)) {, +    public static PersistentTask<?> getDatafeedTask(String datafeedId, @Nullable PersistentTasks tasks) {, +            Predicate<PersistentTask<?>> p = t -> {, +            for (PersistentTask<?> task : tasks.findTasks(StartDatafeedAction.NAME, p)) {, +    public static JobState getJobState(String jobId, @Nullable PersistentTasks tasks) {, +        PersistentTask<?> task = getJobTask(jobId, tasks);, +    public static DatafeedState getDatafeedState(String datafeedId, @Nullable PersistentTasks tasks) {, +        PersistentTask<?> task = getDatafeedTask(datafeedId, tasks);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.persistent.PersistentTasks;, +                new NamedWriteableRegistry.Entry(MetaData.Custom.class, PersistentTasks.TYPE, PersistentTasks::new),, +                new NamedWriteableRegistry.Entry(NamedDiff.class, PersistentTasks.TYPE, PersistentTasks::readDiffFrom),, +                new NamedXContentRegistry.Entry(MetaData.Custom.class, new ParseField(PersistentTasks.TYPE),, +                        PersistentTasks::fromXContent),, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +import org.elasticsearch.xpack.persistent.PersistentTasks;, +import org.elasticsearch.xpack.persistent.PersistentTasks.PersistentTask;, +        public Builder deleteJob(String jobId, PersistentTasks tasks) {, +        public Builder updateDatafeed(DatafeedUpdate update, PersistentTasks persistentTasks) {, +                    DatafeedState.STARTED), datafeedId, persistentTasks);, +        public Builder removeDatafeed(String datafeedId, PersistentTasks persistentTasks) {, +                    DatafeedState.STARTED), datafeedId, persistentTasks);, +        private void checkDatafeedIsStopped(Supplier<String> msg, String datafeedId, PersistentTasks persistentTasks) {, +            if (persistentTasks != null) {, +                Predicate<PersistentTask<?>> predicate = t -> {, +                if (persistentTasks.tasksExist(StartDatafeedAction.NAME, predicate)) {, +        public void markJobAsDeleted(String jobId, PersistentTasks tasks) {, +    public static PersistentTask<?> getJobTask(String jobId, @Nullable PersistentTasks tasks) {, +            Predicate<PersistentTask<?>> p = t -> {, +            for (PersistentTask<?> task : tasks.findTasks(OpenJobAction.NAME, p)) {, +    public static PersistentTask<?> getDatafeedTask(String datafeedId, @Nullable PersistentTasks tasks) {, +            Predicate<PersistentTask<?>> p = t -> {, +            for (PersistentTask<?> task : tasks.findTasks(StartDatafeedAction.NAME, p)) {, +    public static JobState getJobState(String jobId, @Nullable PersistentTasks tasks) {, +        PersistentTask<?> task = getJobTask(jobId, tasks);, +    public static DatafeedState getDatafeedState(String datafeedId, @Nullable PersistentTasks tasks) {, +        PersistentTask<?> task = getDatafeedTask(datafeedId, tasks);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +import org.elasticsearch.xpack.persistent.PersistentTasks;, +import org.elasticsearch.xpack.persistent.PersistentTasks.PersistentTask;, +    static PersistentTask<?> validateAndFindTask(String jobId, ClusterState state) {, +        PersistentTasks tasks = state.getMetaData().custom(PersistentTasks.TYPE);, +            Predicate<PersistentTask<?>> p = t -> {, +            for (PersistentTask<?> task : tasks.findTasks(OpenJobAction.NAME, p)) {, +        PersistentTask<?> task = validateAndFindTask(jobId, currentState);, +        PersistentTasks currentTasks = currentState.getMetaData().custom(PersistentTasks.TYPE);, +        Map<Long, PersistentTask<?>> updatedTasks = new HashMap<>(currentTasks.taskMap());, +        PersistentTask<?> taskToUpdate = currentTasks.getTask(task.getId());, +        taskToUpdate = new PersistentTask<>(taskToUpdate, JobState.CLOSING);, +        PersistentTasks newTasks = new PersistentTasks(currentTasks.getCurrentId(), updatedTasks);, +                        .putCustom(PersistentTasks.TYPE, newTasks)), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.persistent.PersistentTasks;, +                new NamedWriteableRegistry.Entry(MetaData.Custom.class, PersistentTasks.TYPE, PersistentTasks::new),, +                new NamedWriteableRegistry.Entry(NamedDiff.class, PersistentTasks.TYPE, PersistentTasks::readDiffFrom),, +                new NamedXContentRegistry.Entry(MetaData.Custom.class, new ParseField(PersistentTasks.TYPE),, +                        PersistentTasks::fromXContent),, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlMetadata.java, +import org.elasticsearch.xpack.persistent.PersistentTasks;, +import org.elasticsearch.xpack.persistent.PersistentTasks.PersistentTask;, +        public Builder deleteJob(String jobId, PersistentTasks tasks) {, +        public Builder updateDatafeed(DatafeedUpdate update, PersistentTasks persistentTasks) {, +                    DatafeedState.STARTED), datafeedId, persistentTasks);, +        public Builder removeDatafeed(String datafeedId, PersistentTasks persistentTasks) {, +                    DatafeedState.STARTED), datafeedId, persistentTasks);, +        private void checkDatafeedIsStopped(Supplier<String> msg, String datafeedId, PersistentTasks persistentTasks) {, +            if (persistentTasks != null) {, +                Predicate<PersistentTask<?>> predicate = t -> {, +                if (persistentTasks.tasksExist(StartDatafeedAction.NAME, predicate)) {, +        public void markJobAsDeleted(String jobId, PersistentTasks tasks) {, +    public static PersistentTask<?> getJobTask(String jobId, @Nullable PersistentTasks tasks) {, +            Predicate<PersistentTask<?>> p = t -> {, +            for (PersistentTask<?> task : tasks.findTasks(OpenJobAction.NAME, p)) {]