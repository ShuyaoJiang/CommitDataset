[+++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.util.ArrayUtil;, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.common.collect.Tuple;, +import java.util.stream.Collectors;, +            LevensteinDistance ld = new LevensteinDistance();, +            List<Tuple<Float, String>> scoredKeys = new ArrayList<>();, +            for (String k : this.keySettings.keySet()) {, +                float distance = ld.getDistance(key, k);, +                if (distance > 0.7f) {, +                    scoredKeys.add(new Tuple<>(distance, k));, +                }, +            }, +            CollectionUtil.timSort(scoredKeys, (a,b) -> b.v1().compareTo(a.v1()));, +            String msg = "unknown setting [" + key + "]";, +            List<String> keys = scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList());, +            if (keys.isEmpty() == false) {, +                msg += " did you mean " + (keys.size() == 1 ? "[" + keys.get(0) + "]": "any of " + keys.toString()) + "?";, +            }, +            throw new IllegalArgumentException(msg);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.util.ArrayUtil;, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.common.collect.Tuple;, +import java.util.stream.Collectors;, +            LevensteinDistance ld = new LevensteinDistance();, +            List<Tuple<Float, String>> scoredKeys = new ArrayList<>();, +            for (String k : this.keySettings.keySet()) {, +                float distance = ld.getDistance(key, k);, +                if (distance > 0.7f) {, +                    scoredKeys.add(new Tuple<>(distance, k));, +                }, +            }, +            CollectionUtil.timSort(scoredKeys, (a,b) -> b.v1().compareTo(a.v1()));, +            String msg = "unknown setting [" + key + "]";, +            List<String> keys = scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList());, +            if (keys.isEmpty() == false) {, +                msg += " did you mean " + (keys.size() == 1 ? "[" + keys.get(0) + "]": "any of " + keys.toString()) + "?";, +            }, +            throw new IllegalArgumentException(msg);, +++ b/core/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java, +    public void testValidateWithSuggestion() {, +        IndexScopedSettings settings = new IndexScopedSettings(, +            Settings.EMPTY,, +            IndexScopedSettings.BUILT_IN_INDEX_SETTINGS);, +        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,, +            () -> settings.validate(Settings.builder().put("index.numbe_of_replica", "1").build()));, +        assertEquals(iae.getMessage(), "unknown setting [index.numbe_of_replica] did you mean [index.number_of_replicas]?");, +    }, +]