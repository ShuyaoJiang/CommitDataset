[+++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcDatabaseMetaData.java, +        // TABLE_CAT is the first column, +        Object[][] data = queryColumn(con, "SYS TABLES CATALOG LIKE '%'", 1);, +        return memorySet(con.cfg, columnInfo("", "TABLE_CAT"), data);, +        // TABLE_TYPE (4), +        Object[][] data = queryColumn(con, "SYS TABLES TYPE '%'", 4);, +        return memorySet(con.cfg, columnInfo("", "TABLE_TYPE"), data);, +    //, +    // Utility methods, +    //, +, +    private static Object[][] queryColumn(JdbcConnection con, String query, int... cols) throws SQLException {, +        List<Object[]> data = new ArrayList<>();, +        try (ResultSet rs = con.createStatement().executeQuery(query)) {, +            while (rs.next()) {, +                Object[] row = new Object[cols.length];, +                for (int i = 0; i < cols.length; i++) {, +                    row[i] = rs.getObject(cols[i]);, +                }, +                data.add(row);, +            }, +        }, +        , +        return data.toArray(new Object[][] {});, +    }, +, +, +    private static class InMemoryCursor implements Cursor {, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcDatabaseMetaData.java, +        // TABLE_CAT is the first column, +        Object[][] data = queryColumn(con, "SYS TABLES CATALOG LIKE '%'", 1);, +        return memorySet(con.cfg, columnInfo("", "TABLE_CAT"), data);, +        // TABLE_TYPE (4), +        Object[][] data = queryColumn(con, "SYS TABLES TYPE '%'", 4);, +        return memorySet(con.cfg, columnInfo("", "TABLE_TYPE"), data);, +    //, +    // Utility methods, +    //, +, +    private static Object[][] queryColumn(JdbcConnection con, String query, int... cols) throws SQLException {, +        List<Object[]> data = new ArrayList<>();, +        try (ResultSet rs = con.createStatement().executeQuery(query)) {, +            while (rs.next()) {, +                Object[] row = new Object[cols.length];, +                for (int i = 0; i < cols.length; i++) {, +                    row[i] = rs.getObject(cols[i]);, +                }, +                data.add(row);, +            }, +        }, +        , +        return data.toArray(new Object[][] {});, +    }, +, +, +    private static class InMemoryCursor implements Cursor {, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/DatabaseMetaDataTestCase.java, +    public void testGetTypeOfTables() throws Exception {, +            h2.createStatement().executeUpdate("RUNSCRIPT FROM 'classpath:/setup_mock_metadata_get_types_of_table.sql'");, +    public void testGetTableTypes() throws Exception {, +        index("test1", body -> body.field("name", "bob"));, +        index("test2", body -> body.field("name", "bob"));, +, +        try (Connection h2 = LocalH2.anonymousDb(); Connection es = esJdbc()) {, +            h2.createStatement().executeUpdate("RUNSCRIPT FROM 'classpath:/setup_mock_metadata_get_table_types.sql'");, +            assertResultSets(h2.createStatement().executeQuery("SELECT * FROM mock"), es.getMetaData().getTableTypes());, +        }, +    }, +, +    public void testGetCatalogs() throws Exception {, +        try (Connection h2 = LocalH2.anonymousDb(); Connection es = esJdbc()) {, +            assertResultSets(h2.createStatement().executeQuery("SELECT '" + clusterName() + "' AS TABLE_CAT"),, +                    es.getMetaData().getCatalogs());, +        }, +    }, +, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcDatabaseMetaData.java, +        // TABLE_CAT is the first column, +        Object[][] data = queryColumn(con, "SYS TABLES CATALOG LIKE '%'", 1);, +        return memorySet(con.cfg, columnInfo("", "TABLE_CAT"), data);, +        // TABLE_TYPE (4), +        Object[][] data = queryColumn(con, "SYS TABLES TYPE '%'", 4);, +        return memorySet(con.cfg, columnInfo("", "TABLE_TYPE"), data);, +    //, +    // Utility methods, +    //, +, +    private static Object[][] queryColumn(JdbcConnection con, String query, int... cols) throws SQLException {, +        List<Object[]> data = new ArrayList<>();, +        try (ResultSet rs = con.createStatement().executeQuery(query)) {, +            while (rs.next()) {, +                Object[] row = new Object[cols.length];, +                for (int i = 0; i < cols.length; i++) {, +                    row[i] = rs.getObject(cols[i]);, +                }, +                data.add(row);, +            }, +        }, +        , +        return data.toArray(new Object[][] {});]