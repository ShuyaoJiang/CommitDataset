[+++ b/src/main/java/org/apache/lucene/search/vectorhighlight/AbstractFragmentsBuilder.java, +        int limitFragments = maxNumFragments < fragInfos.size() ? maxNumFragments : fragInfos.size();, +        List<String> fragments = new ArrayList<String>(limitFragments);, +, +        for (int n = 0; n < limitFragments; n++) {, +++ b/src/main/java/org/apache/lucene/search/vectorhighlight/AbstractFragmentsBuilder.java, +        int limitFragments = maxNumFragments < fragInfos.size() ? maxNumFragments : fragInfos.size();, +        List<String> fragments = new ArrayList<String>(limitFragments);, +, +        for (int n = 0; n < limitFragments; n++) {, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +                    int numberOfFragments = field.numberOfFragments() == 0 ? Integer.MAX_VALUE : field.numberOfFragments();, +                    int fragmentCharSize = field.numberOfFragments() == 0 ? Integer.MAX_VALUE : field.fragmentCharSize();, +                    fragments = cache.fvh.getBestFragments(fieldQuery, hitContext.reader(), hitContext.docId(), mapper.names().indexName(), fragmentCharSize, numberOfFragments,, +++ b/src/main/java/org/apache/lucene/search/vectorhighlight/AbstractFragmentsBuilder.java, +        int limitFragments = maxNumFragments < fragInfos.size() ? maxNumFragments : fragInfos.size();, +        List<String> fragments = new ArrayList<String>(limitFragments);, +, +        for (int n = 0; n < limitFragments; n++) {, +++ b/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +                    int numberOfFragments = field.numberOfFragments() == 0 ? Integer.MAX_VALUE : field.numberOfFragments();, +                    int fragmentCharSize = field.numberOfFragments() == 0 ? Integer.MAX_VALUE : field.fragmentCharSize();, +                    fragments = cache.fvh.getBestFragments(fieldQuery, hitContext.reader(), hitContext.docId(), mapper.names().indexName(), fragmentCharSize, numberOfFragments,, +++ b/src/test/java/org/elasticsearch/test/integration/search/highlight/HighlighterSearchTests.java, +import org.elasticsearch.index.query.QueryBuilders;, +, +    @Test, +    public void testFSHHighlightAllMvFragments() throws Exception {, +        try {, +            client.admin().indices().prepareDelete("test").execute().actionGet();, +        } catch (Exception e) {, +            // ignore, +        }, +, +        client.admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder(), +                .put("number_of_shards", 1).put("number_of_replicas", 0)), +                .addMapping("type1", jsonBuilder().startObject().startObject("type1").startObject("properties"), +                        .startObject("tags").field("type", "string").field("term_vector", "with_positions_offsets").endObject(), +                        .endObject().endObject().endObject()), +                .execute().actionGet();, +, +        client.prepareIndex("test", "type1", "1"), +                .setSource(jsonBuilder().startObject().field("tags",, +                        "this is a really long tag i would like to highlight",, +                        "here is another one that is very long and has the tag token near the end").endObject()), +                .setRefresh(true).execute().actionGet();, +, +        SearchResponse response = client.prepareSearch("test"), +                .setQuery(QueryBuilders.matchQuery("tags", "tag")), +                .addHighlightedField("tags", -1, 0), +                .execute().actionGet();, +, +        assertThat(2, equalTo(response.hits().hits()[0].highlightFields().get("tags").fragments().length));, +        assertThat("this is a really long <em>tag</em> i would like to highlight", equalTo(response.hits().hits()[0].highlightFields().get("tags").fragments()[0].string()));, +        assertThat("here is another one that is very long and has the <em>tag</em> token near the end", equalTo(response.hits().hits()[0].highlightFields().get("tags").fragments()[1].string()));, +    }]