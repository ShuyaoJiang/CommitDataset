[+++ b/core/src/main/java/org/elasticsearch/http/HttpServerTransport.java, +    /**, +     * Dispatches HTTP requests., +     */, +, +         *, +         * @param threadContext the thread context, +        void dispatchRequest(RestRequest request, RestChannel channel, ThreadContext threadContext);, +, +        /**, +         * Dispatches a bad request. For example, if a request is malformed it will be dispatched via this method with the cause of the bad, +         * request., +         *, +         * @param request       the request to dispatch, +         * @param channel       the response channel of this request, +         * @param threadContext the thread context, +         * @param cause         the cause of the bad request, +         */, +        void dispatchBadRequest(RestRequest request, RestChannel channel, ThreadContext threadContext, Throwable cause);, +, +, +++ b/core/src/main/java/org/elasticsearch/http/HttpServerTransport.java, +    /**, +     * Dispatches HTTP requests., +     */, +, +         *, +         * @param threadContext the thread context, +        void dispatchRequest(RestRequest request, RestChannel channel, ThreadContext threadContext);, +, +        /**, +         * Dispatches a bad request. For example, if a request is malformed it will be dispatched via this method with the cause of the bad, +         * request., +         *, +         * @param request       the request to dispatch, +         * @param channel       the response channel of this request, +         * @param threadContext the thread context, +         * @param cause         the cause of the bad request, +         */, +        void dispatchBadRequest(RestRequest request, RestChannel channel, ThreadContext threadContext, Throwable cause);, +, +, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +                    threadPool, bigArrays, circuitBreakerService, namedWriteableRegistry, xContentRegistry, networkService, restController);, +++ b/core/src/main/java/org/elasticsearch/http/HttpServerTransport.java, +    /**, +     * Dispatches HTTP requests., +     */, +, +         *, +         * @param threadContext the thread context, +        void dispatchRequest(RestRequest request, RestChannel channel, ThreadContext threadContext);, +, +        /**, +         * Dispatches a bad request. For example, if a request is malformed it will be dispatched via this method with the cause of the bad, +         * request., +         *, +         * @param request       the request to dispatch, +         * @param channel       the response channel of this request, +         * @param threadContext the thread context, +         * @param cause         the cause of the bad request, +         */, +        void dispatchBadRequest(RestRequest request, RestChannel channel, ThreadContext threadContext, Throwable cause);, +, +, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +                    threadPool, bigArrays, circuitBreakerService, namedWriteableRegistry, xContentRegistry, networkService, restController);, +++ b/core/src/main/java/org/elasticsearch/rest/RestController.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.http.HttpServerTransport;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.List;, +import java.util.Locale;, +import java.util.Objects;, +import java.util.Set;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.function.Supplier;, +import java.util.function.UnaryOperator;, +public class RestController extends AbstractComponent implements HttpServerTransport.Dispatcher {, +, +    @Override, +    @Override, +    public void dispatchBadRequest(, +            final RestRequest request,, +            final RestChannel channel,, +            final ThreadContext threadContext,, +            final Throwable cause) {, +        try {, +            final Exception e;, +            if (cause == null) {, +                e = new ElasticsearchException("unknown cause");, +            } else if (cause instanceof Exception) {, +                e = (Exception) cause;, +            } else {, +                e = new ElasticsearchException(cause);, +            }]