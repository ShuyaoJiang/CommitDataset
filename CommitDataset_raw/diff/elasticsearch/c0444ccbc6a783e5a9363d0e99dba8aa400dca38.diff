[+++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +         * @param settings     the settings to look up the key to find the implementation to bind, +         * @param defaultValue the default value if the settings do not contain the key, or null if there is no default, +            if (type == null) {, +                throw new IllegalArgumentException("Missing setting [" + settingsKey + "]");, +            }, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +         * @param settings     the settings to look up the key to find the implementation to bind, +         * @param defaultValue the default value if the settings do not contain the key, or null if there is no default, +            if (type == null) {, +                throw new IllegalArgumentException("Missing setting [" + settingsKey + "]");, +            }, +++ b/core/src/main/java/org/elasticsearch/repositories/RepositoriesModule.java, +import org.elasticsearch.index.snapshots.IndexShardRepository;, +import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;, +import org.elasticsearch.snapshots.SnapshotsService;, + * Sets up classes for Snapshot/Restore., + *, + * Plugins can add custom repository types by calling {@link #registerRepository(String, Class, Class)}., +    private final RepositoryTypesRegistry repositoryTypes = new RepositoryTypesRegistry();, +        registerRepository(FsRepository.TYPE, FsRepository.class, BlobStoreIndexShardRepository.class);, +        registerRepository(URLRepository.TYPE, URLRepository.class, BlobStoreIndexShardRepository.class);, +    /** Registers a custom repository type to the given {@link Repository} and {@link IndexShardRepository}. */, +    public void registerRepository(String type, Class<? extends Repository> repositoryType, Class<? extends IndexShardRepository> shardRepositoryType) {, +        repositoryTypes.registerRepository(type, repositoryType, shardRepositoryType);, +        bind(RepositoryTypesRegistry.class).toInstance(repositoryTypes);, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +         * @param settings     the settings to look up the key to find the implementation to bind, +         * @param defaultValue the default value if the settings do not contain the key, or null if there is no default, +            if (type == null) {, +                throw new IllegalArgumentException("Missing setting [" + settingsKey + "]");, +            }, +++ b/core/src/main/java/org/elasticsearch/repositories/RepositoriesModule.java, +import org.elasticsearch.index.snapshots.IndexShardRepository;, +import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;, +import org.elasticsearch.snapshots.SnapshotsService;, + * Sets up classes for Snapshot/Restore., + *, + * Plugins can add custom repository types by calling {@link #registerRepository(String, Class, Class)}., +    private final RepositoryTypesRegistry repositoryTypes = new RepositoryTypesRegistry();, +        registerRepository(FsRepository.TYPE, FsRepository.class, BlobStoreIndexShardRepository.class);, +        registerRepository(URLRepository.TYPE, URLRepository.class, BlobStoreIndexShardRepository.class);, +    /** Registers a custom repository type to the given {@link Repository} and {@link IndexShardRepository}. */, +    public void registerRepository(String type, Class<? extends Repository> repositoryType, Class<? extends IndexShardRepository> shardRepositoryType) {, +        repositoryTypes.registerRepository(type, repositoryType, shardRepositoryType);, +        bind(RepositoryTypesRegistry.class).toInstance(repositoryTypes);, +++ b/core/src/main/java/org/elasticsearch/repositories/RepositoryModule.java, + * Binds repository classes for the specific repository type., +public class RepositoryModule extends AbstractModule {, +        typesRegistry.bindType(binder(), repositoryName.type());, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +         * @param settings     the settings to look up the key to find the implementation to bind, +         * @param defaultValue the default value if the settings do not contain the key, or null if there is no default, +            if (type == null) {, +                throw new IllegalArgumentException("Missing setting [" + settingsKey + "]");, +            }, +++ b/core/src/main/java/org/elasticsearch/repositories/RepositoriesModule.java, +import org.elasticsearch.index.snapshots.IndexShardRepository;, +import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;, +import org.elasticsearch.snapshots.SnapshotsService;, + * Sets up classes for Snapshot/Restore., + *, + * Plugins can add custom repository types by calling {@link #registerRepository(String, Class, Class)}., +    private final RepositoryTypesRegistry repositoryTypes = new RepositoryTypesRegistry();, +        registerRepository(FsRepository.TYPE, FsRepository.class, BlobStoreIndexShardRepository.class);, +        registerRepository(URLRepository.TYPE, URLRepository.class, BlobStoreIndexShardRepository.class);, +    /** Registers a custom repository type to the given {@link Repository} and {@link IndexShardRepository}. */, +    public void registerRepository(String type, Class<? extends Repository> repositoryType, Class<? extends IndexShardRepository> shardRepositoryType) {, +        repositoryTypes.registerRepository(type, repositoryType, shardRepositoryType);, +        bind(RepositoryTypesRegistry.class).toInstance(repositoryTypes);, +++ b/core/src/main/java/org/elasticsearch/repositories/RepositoryModule.java, + * Binds repository classes for the specific repository type., +public class RepositoryModule extends AbstractModule {, +        typesRegistry.bindType(binder(), repositoryName.type());, +++ b/core/src/main/java/org/elasticsearch/repositories/RepositoryTypesRegistry.java, +import org.elasticsearch.common.inject.Binder;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.ExtensionPoint;, +import org.elasticsearch.index.snapshots.IndexShardRepository;, + * A mapping from type name to implementations of {@link Repository} and {@link IndexShardRepository}., +    // invariant: repositories and shardRepositories have the same keyset, +    private final ExtensionPoint.TypeExtensionPoint<Repository> repositoryTypes =, +        new ExtensionPoint.TypeExtensionPoint<>("repository", Repository.class);, +    private final ExtensionPoint.TypeExtensionPoint<IndexShardRepository> shardRepositoryTypes =, +        new ExtensionPoint.TypeExtensionPoint<>("index_repository", IndexShardRepository.class);, +    /** Adds a new repository type to the registry, bound to the given implementation classes. */, +    public void registerRepository(String name, Class<? extends Repository> repositoryType, Class<? extends IndexShardRepository> shardRepositoryType) {, +        repositoryTypes.registerExtension(name, repositoryType);, +        shardRepositoryTypes.registerExtension(name, shardRepositoryType);, +     * Looks up the given type and binds the implementation into the given binder., +     * Throws an {@link IllegalArgumentException} if the given type does not exist., +    public void bindType(Binder binder, String type) {, +        Settings settings = Settings.builder().put("type", type).build();, +        repositoryTypes.bindType(binder, settings, "type", null);, +        shardRepositoryTypes.bindType(binder, settings, "type", null);, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +         * @param settings     the settings to look up the key to find the implementation to bind, +         * @param defaultValue the default value if the settings do not contain the key, or null if there is no default, +            if (type == null) {, +                throw new IllegalArgumentException("Missing setting [" + settingsKey + "]");]