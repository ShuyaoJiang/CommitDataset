[+++ b/server/src/main/java/org/elasticsearch/action/support/master/AcknowledgedRequest.java, +    protected AcknowledgedRequest(StreamInput in) throws IOException {, +        super(in);, +        this.timeout = in.readTimeValue();, +    }, +, +++ b/server/src/main/java/org/elasticsearch/action/support/master/AcknowledgedRequest.java, +    protected AcknowledgedRequest(StreamInput in) throws IOException {, +        super(in);, +        this.timeout = in.readTimeValue();, +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +        public Map<String, String> removeCustom(String type) {, +            return this.customMetaData.remove(type);, +        }, +, +++ b/server/src/main/java/org/elasticsearch/action/support/master/AcknowledgedRequest.java, +    protected AcknowledgedRequest(StreamInput in) throws IOException {, +        super(in);, +        this.timeout = in.readTimeValue();, +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +        public Map<String, String> removeCustom(String type) {, +            return this.customMetaData.remove(type);, +        }, +, +++ b/x-pack/plugin/ccr/qa/rest/src/test/resources/rest-api-spec/test/ccr/follow_and_unfollow.yml, +, +  - do:, +      indices.close:, +        index: bar, +  - is_true: acknowledged, +, +  - do:, +      ccr.unfollow:, +        index: bar, +  - is_true: acknowledged, +++ b/server/src/main/java/org/elasticsearch/action/support/master/AcknowledgedRequest.java, +    protected AcknowledgedRequest(StreamInput in) throws IOException {, +        super(in);, +        this.timeout = in.readTimeValue();, +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +        public Map<String, String> removeCustom(String type) {, +            return this.customMetaData.remove(type);, +        }, +, +++ b/x-pack/plugin/ccr/qa/rest/src/test/resources/rest-api-spec/test/ccr/follow_and_unfollow.yml, +, +  - do:, +      indices.close:, +        index: bar, +  - is_true: acknowledged, +, +  - do:, +      ccr.unfollow:, +        index: bar, +  - is_true: acknowledged, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +import org.elasticsearch.xpack.ccr.action.TransportUnfollowAction;, +import org.elasticsearch.xpack.ccr.rest.RestUnfollowAction;, +import org.elasticsearch.xpack.core.ccr.action.UnfollowAction;, +                new ActionHandler<>(UnfollowAction.INSTANCE, TransportUnfollowAction.class),, +                new RestUnfollowAction(settings, restController),, +++ b/server/src/main/java/org/elasticsearch/action/support/master/AcknowledgedRequest.java, +    protected AcknowledgedRequest(StreamInput in) throws IOException {, +        super(in);, +        this.timeout = in.readTimeValue();, +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +        public Map<String, String> removeCustom(String type) {, +            return this.customMetaData.remove(type);, +        }, +, +++ b/x-pack/plugin/ccr/qa/rest/src/test/resources/rest-api-spec/test/ccr/follow_and_unfollow.yml, +, +  - do:, +      indices.close:, +        index: bar, +  - is_true: acknowledged, +, +  - do:, +      ccr.unfollow:, +        index: bar, +  - is_true: acknowledged, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +import org.elasticsearch.xpack.ccr.action.TransportUnfollowAction;, +import org.elasticsearch.xpack.ccr.rest.RestUnfollowAction;, +import org.elasticsearch.xpack.core.ccr.action.UnfollowAction;, +                new ActionHandler<>(UnfollowAction.INSTANCE, TransportUnfollowAction.class),, +                new RestUnfollowAction(settings, restController),, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportUnfollowAction.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License.]