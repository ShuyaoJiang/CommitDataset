[+++ b/src/main/java/org/elasticsearch/shield/ssl/AbstractSSLService.java, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.Socket;, +        SSLSocketFactory socketFactory = sslContext().getSocketFactory();, +        return new ShieldSSLSocketFactory(socketFactory, supportedProtocols(), supportedCiphers(socketFactory.getSupportedCipherSuites(), ciphers()));, +, +    /**, +     * This socket factory set the protocols and ciphers on each SSLSocket after it is created, +     */, +    static class ShieldSSLSocketFactory extends SSLSocketFactory {, +, +        private final SSLSocketFactory delegate;, +        private final String[] supportedProtocols;, +        private final String[] ciphers;, +, +        ShieldSSLSocketFactory(SSLSocketFactory delegate, String[] supportedProtocols, String[] ciphers) {, +            this.delegate = delegate;, +            this.supportedProtocols = supportedProtocols;, +            this.ciphers = ciphers;, +        }, +, +        @Override, +        public String[] getDefaultCipherSuites() {, +            return ciphers;, +        }, +, +        @Override, +        public String[] getSupportedCipherSuites() {, +            return delegate.getSupportedCipherSuites();, +        }, +, +        @Override, +        public Socket createSocket() throws IOException {, +            SSLSocket sslSocket = (SSLSocket) delegate.createSocket();, +            configureSSLSocket(sslSocket);, +            return sslSocket;, +        }, +, +        @Override, +        public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException {, +            SSLSocket sslSocket = (SSLSocket) delegate.createSocket(socket, host, port, autoClose);, +            configureSSLSocket(sslSocket);, +            return sslSocket;, +        }, +, +        @Override, +        public Socket createSocket(String host, int port) throws IOException {, +            SSLSocket sslSocket = (SSLSocket) delegate.createSocket(host, port);, +            configureSSLSocket(sslSocket);, +            return sslSocket;, +        }, +, +        @Override, +        public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException {, +            SSLSocket sslSocket = (SSLSocket) delegate.createSocket(host, port, localHost, localPort);, +            configureSSLSocket(sslSocket);, +            return sslSocket;, +        }, +, +        @Override, +        public Socket createSocket(InetAddress host, int port) throws IOException {, +            SSLSocket sslSocket = (SSLSocket) delegate.createSocket(host, port);, +            configureSSLSocket(sslSocket);, +            return sslSocket;, +        }, +, +        @Override, +        public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException {, +            SSLSocket sslSocket = (SSLSocket) delegate.createSocket(address, port, localAddress, localPort);, +            configureSSLSocket(sslSocket);, +            return sslSocket;, +        }, +, +        private void configureSSLSocket(SSLSocket socket) {, +            socket.setEnabledProtocols(supportedProtocols);, +            socket.setEnabledCipherSuites(ciphers);, +        }, +    }, +++ b/src/main/java/org/elasticsearch/shield/ssl/AbstractSSLService.java, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.Socket;, +        SSLSocketFactory socketFactory = sslContext().getSocketFactory();, +        return new ShieldSSLSocketFactory(socketFactory, supportedProtocols(), supportedCiphers(socketFactory.getSupportedCipherSuites(), ciphers()));, +, +    /**, +     * This socket factory set the protocols and ciphers on each SSLSocket after it is created, +     */, +    static class ShieldSSLSocketFactory extends SSLSocketFactory {, +, +        private final SSLSocketFactory delegate;, +        private final String[] supportedProtocols;, +        private final String[] ciphers;, +, +        ShieldSSLSocketFactory(SSLSocketFactory delegate, String[] supportedProtocols, String[] ciphers) {, +            this.delegate = delegate;, +            this.supportedProtocols = supportedProtocols;, +            this.ciphers = ciphers;, +        }]