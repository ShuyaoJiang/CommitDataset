[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/cumulativesum/CumulativeSumParser.java, +        CumulativeSumPipelineAggregator.Factory factory = new CumulativeSumPipelineAggregator.Factory(pipelineAggregatorName, bucketsPaths);, +            factory.format(format);, +        }, +        return factory;, +        return new CumulativeSumPipelineAggregator.Factory(null, null);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/cumulativesum/CumulativeSumParser.java, +        CumulativeSumPipelineAggregator.Factory factory = new CumulativeSumPipelineAggregator.Factory(pipelineAggregatorName, bucketsPaths);, +            factory.format(format);, +        }, +        return factory;, +        return new CumulativeSumPipelineAggregator.Factory(null, null);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/cumulativesum/CumulativeSumPipelineAggregator.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.BucketMetricsParser;, +import org.elasticsearch.search.aggregations.support.format.ValueFormat;, +import java.util.Objects;, +        private String format;, +        public Factory(String name, String[] bucketsPaths) {, +        }, +, +        /**, +         * Sets the format to use on the output of this aggregation., +         */, +        public void format(String format) {, +            this.format = format;, +        }, +, +        /**, +         * Gets the format to use on the output of this aggregation., +         */, +        public String format() {, +            return format;, +        }, +, +        protected ValueFormatter formatter() {, +            if (format != null) {, +                return ValueFormat.Patternable.Number.format(format).formatter();, +            } else {, +                return ValueFormatter.RAW;, +            }, +            return new CumulativeSumPipelineAggregator(name, bucketsPaths, formatter(), metaData);, +        @Override, +        protected final XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {, +            if (format != null) {, +                builder.field(BucketMetricsParser.FORMAT.getPreferredName(), format);, +            }, +            return builder;, +        }, +, +        @Override, +        protected final PipelineAggregatorFactory doReadFrom(String name, String[] bucketsPaths, StreamInput in) throws IOException {, +            Factory factory = new Factory(name, bucketsPaths);, +            factory.format = in.readOptionalString();, +            return factory;, +        }, +, +        @Override, +        protected final void doWriteTo(StreamOutput out) throws IOException {, +            out.writeOptionalString(format);, +        }, +, +        @Override, +        protected int doHashCode() {, +            return Objects.hash(format);, +        }, +, +        @Override, +        protected boolean doEquals(Object obj) {, +            Factory other = (Factory) obj;, +            return Objects.equals(format, other.format);, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/cumulativesum/CumulativeSumParser.java, +        CumulativeSumPipelineAggregator.Factory factory = new CumulativeSumPipelineAggregator.Factory(pipelineAggregatorName, bucketsPaths);, +            factory.format(format);, +        }, +        return factory;, +        return new CumulativeSumPipelineAggregator.Factory(null, null);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/cumulativesum/CumulativeSumPipelineAggregator.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.search.aggregations.pipeline.bucketmetrics.BucketMetricsParser;, +import org.elasticsearch.search.aggregations.support.format.ValueFormat;, +import java.util.Objects;, +        private String format;, +        public Factory(String name, String[] bucketsPaths) {, +        }, +, +        /**, +         * Sets the format to use on the output of this aggregation., +         */, +        public void format(String format) {, +            this.format = format;, +        }, +, +        /**, +         * Gets the format to use on the output of this aggregation., +         */, +        public String format() {, +            return format;, +        }]