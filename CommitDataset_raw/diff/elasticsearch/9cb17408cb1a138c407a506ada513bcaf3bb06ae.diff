[+++ b/docs/reference/search/aggregations/bucket/geohashgrid-aggregation.asciidoc, +                added[1.1.0] A value of `0` will return all buckets that, +                contain a hit, use with caution as this could use a lot of CPU, +                and network bandwith if there are many buckets., +                added[1.1.0] A value of `0` makes the shard size unlimited., +++ b/docs/reference/search/aggregations/bucket/geohashgrid-aggregation.asciidoc, +                added[1.1.0] A value of `0` will return all buckets that, +                contain a hit, use with caution as this could use a lot of CPU, +                and network bandwith if there are many buckets., +                added[1.1.0] A value of `0` makes the shard size unlimited., +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregation.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.io.IOException;, +    /**, +     * Read a size under the assumption that a value of 0 means unlimited., +     */, +    protected static int readSize(StreamInput in) throws IOException {, +        final int size = in.readVInt();, +        return size == 0 ? Integer.MAX_VALUE : size;, +    }, +, +    /**, +     * Write a size under the assumption that a value of 0 means unlimited., +     */, +    protected static void writeSize(int size, StreamOutput out) throws IOException {, +        if (size == Integer.MAX_VALUE) {, +            size = 0;, +        }, +        out.writeVInt(size);, +    }, +++ b/docs/reference/search/aggregations/bucket/geohashgrid-aggregation.asciidoc, +                added[1.1.0] A value of `0` will return all buckets that, +                contain a hit, use with caution as this could use a lot of CPU, +                and network bandwith if there are many buckets., +                added[1.1.0] A value of `0` makes the shard size unlimited., +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregation.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.io.IOException;, +    /**, +     * Read a size under the assumption that a value of 0 means unlimited., +     */, +    protected static int readSize(StreamInput in) throws IOException {, +        final int size = in.readVInt();, +        return size == 0 ? Integer.MAX_VALUE : size;, +    }, +, +    /**, +     * Write a size under the assumption that a value of 0 means unlimited., +     */, +    protected static void writeSize(int size, StreamOutput out) throws IOException {, +        if (size == Integer.MAX_VALUE) {, +            size = 0;, +        }, +        out.writeVInt(size);, +    }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketUtils.java, +        final long shardSampleSize = (long) finalSize * Math.min(10, numberOfShards);, +        return (int) Math.min(Integer.MAX_VALUE, Math.max(10, shardSampleSize));, +++ b/docs/reference/search/aggregations/bucket/geohashgrid-aggregation.asciidoc, +                added[1.1.0] A value of `0` will return all buckets that, +                contain a hit, use with caution as this could use a lot of CPU, +                and network bandwith if there are many buckets., +                added[1.1.0] A value of `0` makes the shard size unlimited., +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregation.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.io.IOException;, +    /**, +     * Read a size under the assumption that a value of 0 means unlimited., +     */, +    protected static int readSize(StreamInput in) throws IOException {, +        final int size = in.readVInt();, +        return size == 0 ? Integer.MAX_VALUE : size;, +    }, +, +    /**, +     * Write a size under the assumption that a value of 0 means unlimited., +     */, +    protected static void writeSize(int size, StreamOutput out) throws IOException {, +        if (size == Integer.MAX_VALUE) {, +            size = 0;, +        }, +        out.writeVInt(size);, +    }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/BucketUtils.java, +        final long shardSampleSize = (long) finalSize * Math.min(10, numberOfShards);, +        return (int) Math.min(Integer.MAX_VALUE, Math.max(10, shardSampleSize));, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParser.java, +        int shardSize = -1;, +, +            shardSize = Integer.MAX_VALUE;, +        }, +, +        if (requiredSize == 0) {, +            requiredSize = Integer.MAX_VALUE;, +        }, +, +        if (shardSize < 0) {]