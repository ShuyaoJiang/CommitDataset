[+++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +import org.apache.lucene.search.MatchNoDocsQuery;, +        boolean fieldExists = false;, +            if (terms != null) {, +                fieldExists = true;, +        }, +        if (fieldExists == false) {, +            Query rewritten = new MatchNoDocsQuery();, +            rewritten.setBoost(getBoost());, +            return rewritten;, +        }, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +import org.apache.lucene.search.MatchNoDocsQuery;, +        boolean fieldExists = false;, +            if (terms != null) {, +                fieldExists = true;, +        }, +        if (fieldExists == false) {, +            Query rewritten = new MatchNoDocsQuery();, +            rewritten.setBoost(getBoost());, +            return rewritten;, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        public static final FormatDateTimeFormatter DATE_TIME_FORMATTER = Joda.forPattern("strictDateOptionalTime||epoch_millis", Locale.ROOT);, +        public static final FormatDateTimeFormatter DATE_TIME_FORMATTER_BEFORE_2_0 = Joda.forPattern("dateOptionalTime", Locale.ROOT);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +import org.apache.lucene.search.MatchNoDocsQuery;, +        boolean fieldExists = false;, +            if (terms != null) {, +                fieldExists = true;, +        }, +        if (fieldExists == false) {, +            Query rewritten = new MatchNoDocsQuery();, +            rewritten.setBoost(getBoost());, +            return rewritten;, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        public static final FormatDateTimeFormatter DATE_TIME_FORMATTER = Joda.forPattern("strictDateOptionalTime||epoch_millis", Locale.ROOT);, +        public static final FormatDateTimeFormatter DATE_TIME_FORMATTER_BEFORE_2_0 = Joda.forPattern("dateOptionalTime", Locale.ROOT);, +++ b/core/src/test/java/org/elasticsearch/index/mapper/date/SimpleDateMappingTests.java, +        assertDateFormat("epoch_millis||dateOptionalTime");, +                .startObject("properties").startObject("date_field").field("type", "date").field("format", "dateOptionalTime").endObject().endObject(), +        assertDateFormat("epoch_millis||dateOptionalTime");, +                .field("format", "strictDateOptionalTime||epoch_millis"), +        assertDateFormat("strictDateOptionalTime||epoch_millis");, +++ b/core/src/main/java/org/elasticsearch/common/lucene/all/AllTermQuery.java, +import org.apache.lucene.search.MatchNoDocsQuery;, +        boolean fieldExists = false;, +            if (terms != null) {, +                fieldExists = true;, +        }, +        if (fieldExists == false) {, +            Query rewritten = new MatchNoDocsQuery();, +            rewritten.setBoost(getBoost());, +            return rewritten;, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        public static final FormatDateTimeFormatter DATE_TIME_FORMATTER = Joda.forPattern("strictDateOptionalTime||epoch_millis", Locale.ROOT);, +        public static final FormatDateTimeFormatter DATE_TIME_FORMATTER_BEFORE_2_0 = Joda.forPattern("dateOptionalTime", Locale.ROOT);, +++ b/core/src/test/java/org/elasticsearch/index/mapper/date/SimpleDateMappingTests.java, +        assertDateFormat("epoch_millis||dateOptionalTime");, +                .startObject("properties").startObject("date_field").field("type", "date").field("format", "dateOptionalTime").endObject().endObject(), +        assertDateFormat("epoch_millis||dateOptionalTime");, +                .field("format", "strictDateOptionalTime||epoch_millis"), +        assertDateFormat("strictDateOptionalTime||epoch_millis");, +++ b/core/src/test/java/org/elasticsearch/search/query/SearchQueryTests.java, +    public void testAllFieldEmptyMapping() throws Exception {, +        client().prepareIndex("myindex", "mytype").setId("1").setSource("{}").setRefresh(true).get();, +        SearchResponse response = client().prepareSearch("myindex").setQuery(matchQuery("_all", "foo")).get();, +        assertNoFailures(response);, +    }, +, +    @Test, +    public void testAllDisabledButQueried() throws Exception {, +        createIndex("myindex");, +        assertAcked(client().admin().indices().preparePutMapping("myindex").setType("mytype").setSource(, +                jsonBuilder().startObject().startObject("mytype").startObject("_all").field("enabled", false)));, +        client().prepareIndex("myindex", "mytype").setId("1").setSource("bar", "foo").setRefresh(true).get();, +        SearchResponse response = client().prepareSearch("myindex").setQuery(matchQuery("_all", "foo")).get();, +        assertNoFailures(response);, +        assertHitCount(response, 0);, +    }, +, +    @Test]