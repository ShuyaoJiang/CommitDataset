[+++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java, +import com.amazonaws.services.s3.model.DeleteObjectsRequest;, +    /**, +     * Maximum number of deletes in a {@link DeleteObjectsRequest}., +     * @see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/multiobjectdeleteapi.html">S3 Documentation</a>., +     */, +    private static final int MAX_BULK_DELETES = 1000;, +, +    public void deleteBlobsIgnoringIfNotExists(List<String> blobNames) throws IOException {, +        if (blobNames.isEmpty()) {, +            return;, +        }, +        try (AmazonS3Reference clientReference = blobStore.clientReference()) {, +            // S3 API only allows 1k blobs per delete so we split up the given blobs into requests of max. 1k deletes, +            final List<DeleteObjectsRequest> deleteRequests = new ArrayList<>();, +            final List<String> partition = new ArrayList<>();, +            for (String blob : blobNames) {, +                partition.add(buildKey(blob));, +                if (partition.size() == MAX_BULK_DELETES ) {, +                    deleteRequests.add(bulkDelete(blobStore.bucket(), partition));, +                    partition.clear();, +                }, +            }, +            if (partition.isEmpty() == false) {, +                deleteRequests.add(bulkDelete(blobStore.bucket(), partition));, +            }, +            SocketAccess.doPrivilegedVoid(() -> {, +                AmazonClientException aex = null;, +                for (DeleteObjectsRequest deleteRequest : deleteRequests) {, +                    try {, +                        clientReference.client().deleteObjects(deleteRequest);, +                    } catch (AmazonClientException e) {, +                        if (aex == null) {, +                            aex = e;, +                        } else {, +                            aex.addSuppressed(e);, +                        }, +                    }, +                }, +                if (aex != null) {, +                    throw aex;, +                }, +            });, +        } catch (final AmazonClientException e) {, +            throw new IOException("Exception when deleting blobs [" + blobNames + "]", e);, +        }, +    }, +, +    private static DeleteObjectsRequest bulkDelete(String bucket, List<String> blobs) {, +        return new DeleteObjectsRequest(bucket).withKeys(blobs.toArray(Strings.EMPTY_ARRAY)).withQuiet(true);, +    }, +, +    @Override, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java, +import com.amazonaws.services.s3.model.DeleteObjectsRequest;, +    /**, +     * Maximum number of deletes in a {@link DeleteObjectsRequest}., +     * @see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/multiobjectdeleteapi.html">S3 Documentation</a>., +     */, +    private static final int MAX_BULK_DELETES = 1000;, +, +    public void deleteBlobsIgnoringIfNotExists(List<String> blobNames) throws IOException {, +        if (blobNames.isEmpty()) {, +            return;, +        }, +        try (AmazonS3Reference clientReference = blobStore.clientReference()) {, +            // S3 API only allows 1k blobs per delete so we split up the given blobs into requests of max. 1k deletes, +            final List<DeleteObjectsRequest> deleteRequests = new ArrayList<>();, +            final List<String> partition = new ArrayList<>();, +            for (String blob : blobNames) {, +                partition.add(buildKey(blob));, +                if (partition.size() == MAX_BULK_DELETES ) {, +                    deleteRequests.add(bulkDelete(blobStore.bucket(), partition));, +                    partition.clear();, +                }, +            }, +            if (partition.isEmpty() == false) {, +                deleteRequests.add(bulkDelete(blobStore.bucket(), partition));, +            }, +            SocketAccess.doPrivilegedVoid(() -> {, +                AmazonClientException aex = null;, +                for (DeleteObjectsRequest deleteRequest : deleteRequests) {, +                    try {, +                        clientReference.client().deleteObjects(deleteRequest);, +                    } catch (AmazonClientException e) {, +                        if (aex == null) {, +                            aex = e;, +                        } else {, +                            aex.addSuppressed(e);, +                        }, +                    }, +                }, +                if (aex != null) {, +                    throw aex;, +                }, +            });, +        } catch (final AmazonClientException e) {, +            throw new IOException("Exception when deleting blobs [" + blobNames + "]", e);, +        }, +    }]