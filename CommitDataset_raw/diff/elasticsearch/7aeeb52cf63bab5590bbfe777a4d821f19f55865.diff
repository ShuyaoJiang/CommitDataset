[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.gateway.MetaDataStateFormat;, +    public static final String INDEX_STATE_FILE_PREFIX = "state-";, +    private static final ToXContent.Params FORMAT_PARAMS = new MapParams(Collections.singletonMap("binary", "true"));, +, +    /**, +     * State format for {@link IndexMetaData} to write to and load from disk, +     */, +    public static final MetaDataStateFormat<IndexMetaData> FORMAT = new MetaDataStateFormat<IndexMetaData>(XContentType.SMILE, INDEX_STATE_FILE_PREFIX) {, +, +        @Override, +        public void toXContent(XContentBuilder builder, IndexMetaData state) throws IOException {, +            Builder.toXContent(state, builder, FORMAT_PARAMS);, +        }, +, +        @Override, +        public IndexMetaData fromXContent(XContentParser parser) throws IOException {, +            return Builder.fromXContent(parser);, +        }, +    };, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.gateway.MetaDataStateFormat;, +    public static final String INDEX_STATE_FILE_PREFIX = "state-";, +    private static final ToXContent.Params FORMAT_PARAMS = new MapParams(Collections.singletonMap("binary", "true"));, +, +    /**, +     * State format for {@link IndexMetaData} to write to and load from disk, +     */, +    public static final MetaDataStateFormat<IndexMetaData> FORMAT = new MetaDataStateFormat<IndexMetaData>(XContentType.SMILE, INDEX_STATE_FILE_PREFIX) {, +, +        @Override, +        public void toXContent(XContentBuilder builder, IndexMetaData state) throws IOException {, +            Builder.toXContent(state, builder, FORMAT_PARAMS);, +        }, +, +        @Override, +        public IndexMetaData fromXContent(XContentParser parser) throws IOException {, +            return Builder.fromXContent(parser);, +        }, +    };, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.gateway.MetaDataStateFormat;, +    public static final String GLOBAL_STATE_FILE_PREFIX = "global-";, +, +, +    private final static ToXContent.Params FORMAT_PARAMS;, +    static {, +        Map<String, String> params = new HashMap<>(2);, +        params.put("binary", "true");, +        params.put(MetaData.CONTEXT_MODE_PARAM, MetaData.CONTEXT_MODE_GATEWAY);, +        FORMAT_PARAMS = new MapParams(params);, +    }, +, +    /**, +     * State format for {@link MetaData} to write to and load from disk, +     */, +    public final static MetaDataStateFormat<MetaData> FORMAT = new MetaDataStateFormat<MetaData>(XContentType.SMILE, GLOBAL_STATE_FILE_PREFIX) {, +, +        @Override, +        public void toXContent(XContentBuilder builder, MetaData state) throws IOException {, +            Builder.toXContent(state, builder, FORMAT_PARAMS);, +        }, +, +        @Override, +        public MetaData fromXContent(XContentParser parser) throws IOException {, +            return Builder.fromXContent(parser);, +        }, +    };, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.gateway.MetaDataStateFormat;, +    public static final String INDEX_STATE_FILE_PREFIX = "state-";, +    private static final ToXContent.Params FORMAT_PARAMS = new MapParams(Collections.singletonMap("binary", "true"));, +, +    /**, +     * State format for {@link IndexMetaData} to write to and load from disk, +     */, +    public static final MetaDataStateFormat<IndexMetaData> FORMAT = new MetaDataStateFormat<IndexMetaData>(XContentType.SMILE, INDEX_STATE_FILE_PREFIX) {, +, +        @Override, +        public void toXContent(XContentBuilder builder, IndexMetaData state) throws IOException {, +            Builder.toXContent(state, builder, FORMAT_PARAMS);, +        }, +, +        @Override, +        public IndexMetaData fromXContent(XContentParser parser) throws IOException {, +            return Builder.fromXContent(parser);, +        }, +    };, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.gateway.MetaDataStateFormat;, +    public static final String GLOBAL_STATE_FILE_PREFIX = "global-";, +, +, +    private final static ToXContent.Params FORMAT_PARAMS;, +    static {, +        Map<String, String> params = new HashMap<>(2);, +        params.put("binary", "true");]