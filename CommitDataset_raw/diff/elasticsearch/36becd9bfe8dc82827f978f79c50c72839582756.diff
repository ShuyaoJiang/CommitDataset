[+++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +import java.util.Collections;, +    /**, +     * A convenience method for splitting a delimited string into, +     * a set and trimming leading and trailing whitespace from all, +     * split strings., +     *, +     * @param s the string to split, +     * @param c the delimiter to split on, +     * @return the set of split strings, +     */, +        if (s == null || s.isEmpty()) {, +            return Collections.emptySet();, +        }, +        int end = 0; // the position of the end of the current token, +                int size = end - start;, +                end = start;, +            } else if (Character.isWhitespace(chars[pos])) {, +                if (start == pos) {, +                    // skip over preceding whitespace, +                    start++;, +                }, +            } else {, +                end = pos + 1;, +        int size = end - start;, +++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +import java.util.Collections;, +    /**, +     * A convenience method for splitting a delimited string into, +     * a set and trimming leading and trailing whitespace from all, +     * split strings., +     *, +     * @param s the string to split, +     * @param c the delimiter to split on, +     * @return the set of split strings, +     */, +        if (s == null || s.isEmpty()) {, +            return Collections.emptySet();, +        }, +        int end = 0; // the position of the end of the current token, +                int size = end - start;, +                end = start;, +            } else if (Character.isWhitespace(chars[pos])) {, +                if (start == pos) {, +                    // skip over preceding whitespace, +                    start++;, +                }, +            } else {, +                end = pos + 1;, +        int size = end - start;, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +import java.util.Collections;, +    /**, +     * A convenience method for splitting a delimited string into, +     * a set and trimming leading and trailing whitespace from all, +     * split strings., +     *, +     * @param s the string to split, +     * @param c the delimiter to split on, +     * @return the set of split strings, +     */, +        if (s == null || s.isEmpty()) {, +            return Collections.emptySet();, +        }, +        int end = 0; // the position of the end of the current token, +                int size = end - start;, +                end = start;, +            } else if (Character.isWhitespace(chars[pos])) {, +                if (start == pos) {, +                    // skip over preceding whitespace, +                    start++;, +                }, +            } else {, +                end = pos + 1;, +        int size = end - start;, +++ b/core/src/main/java/org/elasticsearch/http/HttpTransportSettings.java, +++ b/core/src/test/java/org/elasticsearch/common/StringsTests.java, +import org.elasticsearch.common.util.set.Sets;, +, +    public void testSplitStringToSet() {, +        assertEquals(Strings.splitStringByCommaToSet(null), Sets.newHashSet());, +        assertEquals(Strings.splitStringByCommaToSet(""), Sets.newHashSet());, +        assertEquals(Strings.splitStringByCommaToSet("a,b,c"), Sets.newHashSet("a","b","c"));, +        assertEquals(Strings.splitStringByCommaToSet("a, b, c"), Sets.newHashSet("a","b","c"));, +        assertEquals(Strings.splitStringByCommaToSet(" a ,  b, c  "), Sets.newHashSet("a","b","c"));, +        assertEquals(Strings.splitStringByCommaToSet("aa, bb, cc"), Sets.newHashSet("aa","bb","cc"));, +        assertEquals(Strings.splitStringByCommaToSet(" a "), Sets.newHashSet("a"));, +        assertEquals(Strings.splitStringByCommaToSet("   a   "), Sets.newHashSet("a"));, +        assertEquals(Strings.splitStringByCommaToSet("   aa   "), Sets.newHashSet("aa"));, +        assertEquals(Strings.splitStringByCommaToSet("   "), Sets.newHashSet());, +, +        assertEquals(Strings.splitStringToSet(null, ' '), Sets.newHashSet());, +        assertEquals(Strings.splitStringToSet("", ' '), Sets.newHashSet());, +        assertEquals(Strings.splitStringToSet("a b c", ' '), Sets.newHashSet("a","b","c"));, +        assertEquals(Strings.splitStringToSet("a, b, c", ' '), Sets.newHashSet("a,","b,","c"));, +        assertEquals(Strings.splitStringToSet(" a   b c  ", ' '), Sets.newHashSet("a","b","c"));, +        assertEquals(Strings.splitStringToSet("  a   b   c  ", ' '), Sets.newHashSet("a","b","c"));, +        assertEquals(Strings.splitStringToSet("aa bb cc", ' '), Sets.newHashSet("aa","bb","cc"));, +        assertEquals(Strings.splitStringToSet(" a ", ' '), Sets.newHashSet("a"));]