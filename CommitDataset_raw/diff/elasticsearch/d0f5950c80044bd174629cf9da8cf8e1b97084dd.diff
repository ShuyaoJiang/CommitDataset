[+++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcEclipse(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanEclipse', 'eclipse'], +}, +tasks.eclipse.dependsOn(buildSrcEclipse), +++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcEclipse(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanEclipse', 'eclipse'], +}, +tasks.eclipse.dependsOn(buildSrcEclipse), +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +    static EnumMap<? extends TestStatus, String> statusNames;, +++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcEclipse(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanEclipse', 'eclipse'], +}, +tasks.eclipse.dependsOn(buildSrcEclipse), +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +    static EnumMap<? extends TestStatus, String> statusNames;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.http.netty.NettyHttpServerTransport;, +import org.elasticsearch.transport.netty.NettyTransport;, +import java.net.SocketPermission;, +    /** returns dynamic Permissions to configured paths and bind ports */, +        addFilePermissions(policy, environment);, +        addBindPermissions(policy, environment.settings());, +        return policy;, +    }, +    , +    /**, +     * Adds access to all configurable paths., +     */, +    static void addFilePermissions(Permissions policy, Environment environment) {, +    }, +    , +    static void addBindPermissions(Permissions policy, Settings settings) throws IOException {, +        // http is simple, +        String httpRange = settings.get("http.netty.port", , +                               settings.get("http.port", , +                                       NettyHttpServerTransport.DEFAULT_PORT_RANGE));, +        policy.add(new SocketPermission("localhost:" + httpRange, "listen,resolve"));, +        // transport is waaaay overengineered, +        Map<String, Settings> profiles = settings.getGroups("transport.profiles", true);, +        if (!profiles.containsKey(NettyTransport.DEFAULT_PROFILE)) {, +            profiles = new HashMap<>(profiles);, +            profiles.put(NettyTransport.DEFAULT_PROFILE, Settings.EMPTY);, +        }, +, +        // loop through all profiles and add permissions for each one, if its valid., +        // (otherwise NettyTransport is lenient and ignores it), +        for (Map.Entry<String, Settings> entry : profiles.entrySet()) {, +            Settings profileSettings = entry.getValue();, +            String name = entry.getKey();, +            String transportRange = profileSettings.get("port", , +                                        settings.get("transport.tcp.port", , +                                                NettyTransport.DEFAULT_PORT_RANGE));, +, +            // a profile is only valid if its the default profile, or if it has an actual name and specifies a port, +            boolean valid = NettyTransport.DEFAULT_PROFILE.equals(name) || (Strings.hasLength(name) && profileSettings.get("port") != null);, +            if (valid) {, +                policy.add(new SocketPermission("localhost:" + transportRange, "listen,resolve"));, +            }, +        }, +++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcEclipse(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanEclipse', 'eclipse'], +}, +tasks.eclipse.dependsOn(buildSrcEclipse), +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +    static EnumMap<? extends TestStatus, String> statusNames;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.http.netty.NettyHttpServerTransport;, +import org.elasticsearch.transport.netty.NettyTransport;, +import java.net.SocketPermission;, +    /** returns dynamic Permissions to configured paths and bind ports */, +        addFilePermissions(policy, environment);, +        addBindPermissions(policy, environment.settings());, +        return policy;, +    }, +    , +    /**, +     * Adds access to all configurable paths., +     */, +    static void addFilePermissions(Permissions policy, Environment environment) {, +    }, +    , +    static void addBindPermissions(Permissions policy, Settings settings) throws IOException {, +        // http is simple]