[+++ /dev/null, +++ /dev/null, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/BulkIndexByScrollResponseMatcher.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.reindex;, +, +import org.hamcrest.Description;, +import org.hamcrest.Matcher;, +import org.hamcrest.TypeSafeMatcher;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.nullValue;, +, +public class BulkIndexByScrollResponseMatcher extends TypeSafeMatcher<BulkIndexByScrollResponse> {, +, +    private Matcher<Long> createdMatcher = equalTo(0L);, +    private Matcher<Long> updatedMatcher = equalTo(0L);, +    /**, +     * Matches for number of batches. Optional., +     */, +    private Matcher<Integer> batchesMatcher;, +    private Matcher<Long> versionConflictsMatcher = equalTo(0L);, +    private Matcher<Integer> failuresMatcher = equalTo(0);, +    private Matcher<String> reasonCancelledMatcher = nullValue(String.class);, +, +    public BulkIndexByScrollResponseMatcher created(Matcher<Long> createdMatcher) {, +        this.createdMatcher = createdMatcher;, +        return this;, +    }, +, +    public BulkIndexByScrollResponseMatcher created(long created) {, +        return created(equalTo(created));, +    }, +, +    public BulkIndexByScrollResponseMatcher updated(Matcher<Long> updatedMatcher) {, +        this.updatedMatcher = updatedMatcher;, +        return this;, +    }, +, +    public BulkIndexByScrollResponseMatcher updated(long updated) {, +        return updated(equalTo(updated));, +    }, +, +    /**, +     * Set the matches for the number of batches. Defaults to matching any, +     * integer because we usually don't care about how many batches the job, +     * takes., +     */, +    public BulkIndexByScrollResponseMatcher batches(Matcher<Integer> batchesMatcher) {, +        this.batchesMatcher = batchesMatcher;, +        return this;, +    }, +, +    public BulkIndexByScrollResponseMatcher batches(int batches) {, +        return batches(equalTo(batches));, +    }, +, +    public BulkIndexByScrollResponseMatcher batches(int total, int batchSize) {, +        // Round up, +        return batches((total + batchSize - 1) / batchSize);, +    }, +, +    public BulkIndexByScrollResponseMatcher versionConflicts(Matcher<Long> versionConflictsMatcher) {, +        this.versionConflictsMatcher = versionConflictsMatcher;, +        return this;, +    }, +, +    public BulkIndexByScrollResponseMatcher versionConflicts(long versionConflicts) {, +        return versionConflicts(equalTo(versionConflicts));, +    }, +, +    /**, +     * Set the matcher for the size of the failures list. For more in depth, +     * matching do it by hand. The type signatures required to match the, +     * actual failures list here just don't work., +     */, +    public BulkIndexByScrollResponseMatcher failures(Matcher<Integer> failuresMatcher) {, +        this.failuresMatcher = failuresMatcher;, +        return this;, +    }, +, +    /**]