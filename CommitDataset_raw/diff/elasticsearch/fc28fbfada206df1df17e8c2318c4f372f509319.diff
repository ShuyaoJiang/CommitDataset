[+++ b/src/test/java/org/elasticsearch/search/functionscore/DecayFunctionScoreTests.java, +        indexRandom(true, indexBuilders);, +        indexRandom(true, indexBuilders);, +        indexRandom(false, indexBuilders); // force no dummy docs, +        refresh();, +        assertThat(sh.getAt(0).getId(), isOneOf("1"));, +        client().prepareIndex(), +                                .endObject()).setRefresh(true).get();, +        client().prepareIndex().setType("type1").setId("1").setIndex("test"), +                .setSource(jsonBuilder().startObject().field("test", "value").field("num", 1.0).endObject()).setRefresh(true).get();, +        indexRandom(true, indexBuilders);, +++ b/src/test/java/org/elasticsearch/search/functionscore/DecayFunctionScoreTests.java, +        indexRandom(true, indexBuilders);, +        indexRandom(true, indexBuilders);, +        indexRandom(false, indexBuilders); // force no dummy docs, +        refresh();, +        assertThat(sh.getAt(0).getId(), isOneOf("1"));, +        client().prepareIndex(), +                                .endObject()).setRefresh(true).get();, +        client().prepareIndex().setType("type1").setId("1").setIndex("test"), +                .setSource(jsonBuilder().startObject().field("test", "value").field("num", 1.0).endObject()).setRefresh(true).get();, +        indexRandom(true, indexBuilders);, +++ b/src/test/java/org/elasticsearch/search/query/SimpleQueryTests.java, +                .setSettings(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)); // only one shard otherwise IDF might be different for comparing scores, +        SearchResponse searchResponse = client().prepareSearch().setQuery(matchQuery("_all", "quick")).setExplain(true).get();, +++ b/src/test/java/org/elasticsearch/search/functionscore/DecayFunctionScoreTests.java, +        indexRandom(true, indexBuilders);, +        indexRandom(true, indexBuilders);, +        indexRandom(false, indexBuilders); // force no dummy docs, +        refresh();, +        assertThat(sh.getAt(0).getId(), isOneOf("1"));, +        client().prepareIndex(), +                                .endObject()).setRefresh(true).get();, +        client().prepareIndex().setType("type1").setId("1").setIndex("test"), +                .setSource(jsonBuilder().startObject().field("test", "value").field("num", 1.0).endObject()).setRefresh(true).get();, +        indexRandom(true, indexBuilders);, +++ b/src/test/java/org/elasticsearch/search/query/SimpleQueryTests.java, +                .setSettings(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)); // only one shard otherwise IDF might be different for comparing scores, +        SearchResponse searchResponse = client().prepareSearch().setQuery(matchQuery("_all", "quick")).setExplain(true).get();, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +, +    private static final String RANDOM_BOGUS_TYPE = "RANDOM_BOGUS_TYPE______";, +        Set<Tuple<String, String>> bogusIds = new HashSet<>();, +        if (random.nextBoolean() && !builders.isEmpty() && forceRefresh) {, +            // we only do this if we forceRefresh=true since we need to refresh to reflect the deletes, +            builders = new ArrayList<>(builders);, +            final String[] indices = indicesSet.toArray(new String[0]);, +            // inject some bogus docs, +            final int numBogusDocs = scaledRandomIntBetween(1, builders.size()*2);, +            final int unicodeLen = between(1, 10);, +            for (int i = 0; i < numBogusDocs; i++) {, +                String id = randomRealisticUnicodeOfLength(unicodeLen);, +                String index = RandomPicks.randomFrom(random, indices);, +                bogusIds.add(new Tuple<String, String>(index, id));, +                builders.add(client().prepareIndex(index, RANDOM_BOGUS_TYPE, id).setSource("{}"));, +            }, +        }, +        if (!bogusIds.isEmpty()) {, +           // delete the bogus types again - it might trigger merges or at least holes in the segments and enforces deleted docs!, +           for (Tuple<String, String> doc : bogusIds) {, +               client().prepareDelete(doc.v1(), RANDOM_BOGUS_TYPE, doc.v2()).get();, +           }, +        }, +]