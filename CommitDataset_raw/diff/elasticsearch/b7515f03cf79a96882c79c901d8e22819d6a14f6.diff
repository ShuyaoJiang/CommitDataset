[+++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +            LdapUtils.maybeForkThenBindAndRevert(pool, bind, threadPool, new ActionRunnable<LdapSession>(listener) {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +            LdapUtils.maybeForkThenBindAndRevert(pool, bind, threadPool, new ActionRunnable<LdapSession>(listener) {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapUserSearchSessionFactory.java, +                final SimpleBindRequest bind = new SimpleBindRequest(dn, passwordBytes);, +                LdapUtils.maybeForkThenBindAndRevert(connectionPool, bind, threadPool, new ActionRunnable<LdapSession>(listener) {, +                                    LdapUtils.maybeForkThenBind(connection, bind, threadPool, new AbstractRunnable() {, +, +                                        @Override, +                                        protected void doRun() throws Exception {, +                                            listener.onResponse(new LdapSession(logger, config, connection, dn, groupResolver,, +                                                    metaDataResolver, timeout, entry.getAttributes()));, +                                        }, +, +                                        @Override, +                                        public void onFailure(Exception e) {, +                                            IOUtils.closeWhileHandlingException(connection);, +                                            listener.onFailure(e);, +                                        }, +                                    });, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java, +            LdapUtils.maybeForkThenBindAndRevert(pool, bind, threadPool, new ActionRunnable<LdapSession>(listener) {, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapUserSearchSessionFactory.java, +                final SimpleBindRequest bind = new SimpleBindRequest(dn, passwordBytes);, +                LdapUtils.maybeForkThenBindAndRevert(connectionPool, bind, threadPool, new ActionRunnable<LdapSession>(listener) {, +                                    LdapUtils.maybeForkThenBind(connection, bind, threadPool, new AbstractRunnable() {, +, +                                        @Override, +                                        protected void doRun() throws Exception {, +                                            listener.onResponse(new LdapSession(logger, config, connection, dn, groupResolver,, +                                                    metaDataResolver, timeout, entry.getAttributes()));, +                                        }, +, +                                        @Override, +                                        public void onFailure(Exception e) {, +                                            IOUtils.closeWhileHandlingException(connection);, +                                            listener.onFailure(e);, +                                        }, +                                    });, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/support/LdapUtils.java, +     * If necessary, fork before executing the runnable. A deadlock will happen if, +     * the same thread which handles bind responses blocks on the bind call, waiting, +     * for the response which he itself should handle., +     */, +    private static void maybeForkAndRun(ThreadPool threadPool, Runnable runnable) {, +        if (isLdapConnectionThread(Thread.currentThread())) {, +            // only fork if binding on the LDAPConnectionReader thread, +            threadPool.executor(ThreadPool.Names.GENERIC).execute(runnable);, +        } else {, +            // avoids repeated forking, +            runnable.run();, +        }, +    }, +, +    /**, +     * This method submits the {@code bind} request over one connection from the, +     * pool. The bind authentication is then reverted and the connection is returned, +     * to the pool, so that the connection can be safely reused, see, +     * {@code LDAPConnectionPool#bindAndRevertAuthentication}. This validates the, +     * bind credentials., +     * Reader thread (as returned by {@code LdapUtils#isLdapConnectionThread}), the, +     * thread will be blocked until it is interrupted by something else such as a, +     * timeout timer. <b>Do not call bind</b> outside this method or, +     * {@link LdapUtils#maybeForkThenBind(LDAPConnection, BindRequest, ThreadPool, AbstractRunnable)}, +     * @param ldapPool, +     *            The LDAP connection pool on which to submit the bind operation., +    public static void maybeForkThenBindAndRevert(LDAPConnectionPool ldapPool, BindRequest bind, ThreadPool threadPool,, +        final Runnable bindRunnable = new AbstractRunnable() {, +                privilegedConnect(() -> ldapPool.bindAndRevertAuthentication(bind.duplicate()));, +        maybeForkAndRun(threadPool, bindRunnable);, +, +    /**, +     * This method submits the {@code bind} request over the ldap connection. Its, +     * authentication status changes. The connection can be subsequently reused., +     * This validates the bind credentials., +     *, +     * Bind calls are blocking and if a bind is executed on the LDAP Connection, +     * Reader thread (as returned by {@code LdapUtils#isLdapConnectionThread}), the, +     * thread will be blocked until it is interrupted by something else such as a, +     * timeout timer. <b>Do not call bind</b> outside this method or, +     * {@link LdapUtils#maybeForkThenBind(LDAPConnection, BindRequest, ThreadPool, AbstractRunnable)}, +     *, +     * @param ldap, +     *            The LDAP connection on which to submit the bind operation., +     * @param bind, +     *            The request object of the bind operation., +     * @param threadPool, +     *            The threads that will call the blocking bind operation, in case, +     *            the calling thread is a connection reader, see:, +     *            {@code LdapUtils#isLdapConnectionThread}., +     * @param runnable, +     *            The runnable that continues the program flow after the bind, +     *            operation. It is executed on the same thread as the prior bind., +     */, +    public static void maybeForkThenBind(LDAPConnection ldap, BindRequest bind, ThreadPool threadPool, AbstractRunnable runnable) {, +        final Runnable bindRunnable = new AbstractRunnable() {, +            @Override, +            @SuppressForbidden(reason = "Bind allowed if forking of the LDAP Connection Reader Thread."), +            protected void doRun() throws Exception {]