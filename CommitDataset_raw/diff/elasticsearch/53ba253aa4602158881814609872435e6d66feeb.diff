[+++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/FollowIndexRequestTests.java, +import org.elasticsearch.action.ActionRequestValidationException;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.hamcrest.Matchers.nullValue;, +, +, +    public void testValidate() {, +        FollowIndexAction.Request request = new FollowIndexAction.Request("index1", "index2", null, null, null, null,, +            null, TimeValue.ZERO, null);, +        ActionRequestValidationException validationException = request.validate();, +        assertThat(validationException, notNullValue());, +        assertThat(validationException.getMessage(), containsString("[max_retry_delay] must be positive but was [0ms]"));, +, +        request = new FollowIndexAction.Request("index1", "index2", null, null, null, null, null, TimeValue.timeValueMinutes(10), null);, +        validationException = request.validate();, +        assertThat(validationException, notNullValue());, +        assertThat(validationException.getMessage(), containsString("[max_retry_delay] must be less than [5m] but was [10m]"));, +, +        request = new FollowIndexAction.Request("index1", "index2", null, null, null, null, null, TimeValue.timeValueMinutes(1), null);, +        validationException = request.validate();, +        assertThat(validationException, nullValue());, +    }, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/FollowIndexRequestTests.java, +import org.elasticsearch.action.ActionRequestValidationException;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.hamcrest.Matchers.nullValue;, +, +, +    public void testValidate() {, +        FollowIndexAction.Request request = new FollowIndexAction.Request("index1", "index2", null, null, null, null,, +            null, TimeValue.ZERO, null);, +        ActionRequestValidationException validationException = request.validate();, +        assertThat(validationException, notNullValue());, +        assertThat(validationException.getMessage(), containsString("[max_retry_delay] must be positive but was [0ms]"));, +, +        request = new FollowIndexAction.Request("index1", "index2", null, null, null, null, null, TimeValue.timeValueMinutes(10), null);, +        validationException = request.validate();, +        assertThat(validationException, notNullValue());, +        assertThat(validationException.getMessage(), containsString("[max_retry_delay] must be less than [5m] but was [10m]"));, +, +        request = new FollowIndexAction.Request("index1", "index2", null, null, null, null, null, TimeValue.timeValueMinutes(1), null);, +        validationException = request.validate();, +        assertThat(validationException, nullValue());, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ccr/AutoFollowMetadata.java, +        public static final ParseField MAX_RETRY_DELAY = new ParseField("max_retry_delay");, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/FollowIndexRequestTests.java, +import org.elasticsearch.action.ActionRequestValidationException;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.hamcrest.Matchers.nullValue;, +, +, +    public void testValidate() {, +        FollowIndexAction.Request request = new FollowIndexAction.Request("index1", "index2", null, null, null, null,, +            null, TimeValue.ZERO, null);, +        ActionRequestValidationException validationException = request.validate();, +        assertThat(validationException, notNullValue());, +        assertThat(validationException.getMessage(), containsString("[max_retry_delay] must be positive but was [0ms]"));, +, +        request = new FollowIndexAction.Request("index1", "index2", null, null, null, null, null, TimeValue.timeValueMinutes(10), null);, +        validationException = request.validate();, +        assertThat(validationException, notNullValue());, +        assertThat(validationException.getMessage(), containsString("[max_retry_delay] must be less than [5m] but was [10m]"));, +, +        request = new FollowIndexAction.Request("index1", "index2", null, null, null, null, null, TimeValue.timeValueMinutes(1), null);, +        validationException = request.validate();, +        assertThat(validationException, nullValue());, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ccr/AutoFollowMetadata.java, +        public static final ParseField MAX_RETRY_DELAY = new ParseField("max_retry_delay");, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ccr/action/FollowIndexAction.java, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +    static final TimeValue DEFAULT_MAX_RETRY_DELAY = new TimeValue(500);, +    static final TimeValue DEFAULT_IDLE_SHARD_RETRY_DELAY = TimeValue.timeValueSeconds(10);, +    static final TimeValue MAX_RETRY_DELAY = TimeValue.timeValueMinutes(5);, +        private static final ParseField MAX_RETRY_DELAY_FIELD = new ParseField("max_retry_delay");, +                    (p, c) -> TimeValue.parseTimeValue(p.text(), MAX_RETRY_DELAY_FIELD.getPreferredName()),, +                MAX_RETRY_DELAY_FIELD,, +            final TimeValue actualRetryTimeout = maxRetryDelay == null ? DEFAULT_MAX_RETRY_DELAY : maxRetryDelay;, +            ActionRequestValidationException validationException = null;, +, +            if (maxRetryDelay.millis() <= 0) {, +                String message = "[" + MAX_RETRY_DELAY_FIELD.getPreferredName() + "] must be positive but was [" +, +                    maxRetryDelay.getStringRep() + "]";, +                validationException = addValidationError(message, validationException);, +            }, +            if (maxRetryDelay.millis() > FollowIndexAction.MAX_RETRY_DELAY.millis()) {, +                String message = "[" + MAX_RETRY_DELAY_FIELD.getPreferredName() + "] must be less than [" + MAX_RETRY_DELAY +, +                    "] but was [" + maxRetryDelay.getStringRep() + "]";, +                validationException = addValidationError(message, validationException);, +            }, +, +            return validationException;, +                builder.field(MAX_RETRY_DELAY_FIELD.getPreferredName(), maxRetryDelay.getStringRep());, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/FollowIndexRequestTests.java, +import org.elasticsearch.action.ActionRequestValidationException;]