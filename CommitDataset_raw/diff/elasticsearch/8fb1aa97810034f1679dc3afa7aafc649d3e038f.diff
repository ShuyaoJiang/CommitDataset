[+++ b/core/src/main/java/org/elasticsearch/common/Numbers.java, +    /** Returns true if value is neither NaN nor infinite. */, +    public static boolean isValidDouble(double value) {, +        if (Double.isNaN(value) || Double.isInfinite(value)) {, +            return false;, +        }, +        return true;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/Numbers.java, +    /** Returns true if value is neither NaN nor infinite. */, +    public static boolean isValidDouble(double value) {, +        if (Double.isNaN(value) || Double.isInfinite(value)) {, +            return false;, +        }, +        return true;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoDistance.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +import java.io.IOException;, +public enum GeoDistance implements Writeable<GeoDistance> {, +    PLANE {, +    FACTOR {, +    ARC {, +    SLOPPY_ARC {, +    /** Returns a GeoDistance object as read from the StreamInput. */, +    @Override, +    public GeoDistance readFrom(StreamInput in) throws IOException {, +        int ord = in.readVInt();, +        if (ord < 0 || ord >= values().length) {, +            throw new IOException("Unknown GeoDistance ordinal [" + ord + "]");, +        }, +        return GeoDistance.values()[ord];, +    }, +, +    public static GeoDistance readGeoDistanceFrom(StreamInput in) throws IOException {, +        return DEFAULT.readFrom(in);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVInt(this.ordinal());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/Numbers.java, +    /** Returns true if value is neither NaN nor infinite. */, +    public static boolean isValidDouble(double value) {, +        if (Double.isNaN(value) || Double.isInfinite(value)) {, +            return false;, +        }, +        return true;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoDistance.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +import java.io.IOException;, +public enum GeoDistance implements Writeable<GeoDistance> {, +    PLANE {, +    FACTOR {, +    ARC {, +    SLOPPY_ARC {, +    /** Returns a GeoDistance object as read from the StreamInput. */, +    @Override, +    public GeoDistance readFrom(StreamInput in) throws IOException {, +        int ord = in.readVInt();, +        if (ord < 0 || ord >= values().length) {, +            throw new IOException("Unknown GeoDistance ordinal [" + ord + "]");, +        }, +        return GeoDistance.values()[ord];, +    }, +, +    public static GeoDistance readGeoDistanceFrom(StreamInput in) throws IOException {, +        return DEFAULT.readFrom(in);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVInt(this.ordinal());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/geo/GeoPoint.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +import java.io.IOException;, +, +public final class GeoPoint implements Writeable<GeoPoint> {, +    // for serialization purposes, +    private static final GeoPoint PROTOTYPE = new GeoPoint(Double.NaN, Double.NaN);, +, +        GeoPoint point = new GeoPoint(latLon);, +    , +    @Override, +    public GeoPoint readFrom(StreamInput in) throws IOException {, +        double lat = in.readDouble();]