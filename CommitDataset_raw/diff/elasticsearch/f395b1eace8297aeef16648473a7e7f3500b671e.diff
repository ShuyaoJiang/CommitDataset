[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/Netty4Plugin.java, +import org.elasticsearch.Version;, +        return Collections.singletonMap(NETTY_TRANSPORT_NAME, () -> new Netty4Transport(settings, Version.CURRENT, threadPool,, +            networkService, bigArrays, namedWriteableRegistry, circuitBreakerService));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/Netty4Plugin.java, +import org.elasticsearch.Version;, +        return Collections.singletonMap(NETTY_TRANSPORT_NAME, () -> new Netty4Transport(settings, Version.CURRENT, threadPool,, +            networkService, bigArrays, namedWriteableRegistry, circuitBreakerService));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4TcpChannel.java, +import io.netty.channel.ChannelFuture;, +, +, +import org.elasticsearch.common.Nullable;, +    private final CompletableContext<Void> connectContext;, +    Netty4TcpChannel(Channel channel, String profile, @Nullable ChannelFuture connectFuture) {, +        this.connectContext = new CompletableContext<>();, +, +        connectFuture.addListener(f -> {, +            if (f.isSuccess()) {, +                connectContext.complete(null);, +            } else {, +                Throwable cause = f.cause();, +                if (cause instanceof Error) {, +                    ExceptionsHelper.maybeDieOnAnotherThread(cause);, +                    connectContext.completeExceptionally(new Exception(cause));, +                } else {, +                    connectContext.completeExceptionally((Exception) cause);, +                }, +            }, +        });, +    public void addConnectListener(ActionListener<Void> listener) {, +        connectContext.addListener(ActionListener.toBiConsumer(listener));, +    }, +, +    @Override, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/Netty4Plugin.java, +import org.elasticsearch.Version;, +        return Collections.singletonMap(NETTY_TRANSPORT_NAME, () -> new Netty4Transport(settings, Version.CURRENT, threadPool,, +            networkService, bigArrays, namedWriteableRegistry, circuitBreakerService));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4TcpChannel.java, +import io.netty.channel.ChannelFuture;, +, +, +import org.elasticsearch.common.Nullable;, +    private final CompletableContext<Void> connectContext;, +    Netty4TcpChannel(Channel channel, String profile, @Nullable ChannelFuture connectFuture) {, +        this.connectContext = new CompletableContext<>();, +, +        connectFuture.addListener(f -> {, +            if (f.isSuccess()) {, +                connectContext.complete(null);, +            } else {, +                Throwable cause = f.cause();, +                if (cause instanceof Error) {, +                    ExceptionsHelper.maybeDieOnAnotherThread(cause);, +                    connectContext.completeExceptionally(new Exception(cause));, +                } else {, +                    connectContext.completeExceptionally((Exception) cause);, +                }, +            }, +        });, +    public void addConnectListener(ActionListener<Void> listener) {, +        connectContext.addListener(ActionListener.toBiConsumer(listener));, +    }, +, +    @Override, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +import org.elasticsearch.Version;, +    public Netty4Transport(Settings settings, Version version, ThreadPool threadPool, NetworkService networkService, BigArrays bigArrays,, +        super("netty", settings, version, threadPool, bigArrays, circuitBreakerService, namedWriteableRegistry, networkService);, +    protected Netty4TcpChannel initiateChannel(DiscoveryNode node) throws IOException {, +        ChannelFuture connectFuture = bootstrapWithHandler.connect();, +        Channel channel = connectFuture.channel();, +            ExceptionsHelper.maybeDieOnAnotherThread(connectFuture.cause());, +            throw new IOException(connectFuture.cause());, +        Netty4TcpChannel nettyChannel = new Netty4TcpChannel(channel, "default", connectFuture);, +            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, name, ch.newSucceededFuture());, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/Netty4Plugin.java, +import org.elasticsearch.Version;, +        return Collections.singletonMap(NETTY_TRANSPORT_NAME, () -> new Netty4Transport(settings, Version.CURRENT, threadPool,, +            networkService, bigArrays, namedWriteableRegistry, circuitBreakerService));, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4TcpChannel.java, +import io.netty.channel.ChannelFuture;, +, +, +import org.elasticsearch.common.Nullable;, +    private final CompletableContext<Void> connectContext;, +    Netty4TcpChannel(Channel channel, String profile, @Nullable ChannelFuture connectFuture) {, +        this.connectContext = new CompletableContext<>();, +, +        connectFuture.addListener(f -> {, +            if (f.isSuccess()) {, +                connectContext.complete(null);, +            } else {, +                Throwable cause = f.cause();, +                if (cause instanceof Error) {, +                    ExceptionsHelper.maybeDieOnAnotherThread(cause);, +                    connectContext.completeExceptionally(new Exception(cause));, +                } else {, +                    connectContext.completeExceptionally((Exception) cause);]