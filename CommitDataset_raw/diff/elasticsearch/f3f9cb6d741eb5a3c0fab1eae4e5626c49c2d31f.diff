[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final String UTILITY_THREAD_POOL_NAME = NAME + "_utility";, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME));, +        // 4 threads per job: for cpp logging, result processing, state processing and, +        // 4 threads per job: processing logging, result and state of the renormalization process., +        // Renormalization does't run for the entire lifetime of a job, so additionally autodetect process, +        // based operation (open, close, flush, post data), datafeed based operations (start and stop), +        // and deleting expired data use this threadpool too and queue up if all threads are busy., +        FixedExecutorBuilder renormalizer = new FixedExecutorBuilder(settings, UTILITY_THREAD_POOL_NAME,, +                maxNumberOfJobs * 4, 500, "xpack.ml.utility_thread_pool");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final String UTILITY_THREAD_POOL_NAME = NAME + "_utility";, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME));, +        // 4 threads per job: for cpp logging, result processing, state processing and, +        // 4 threads per job: processing logging, result and state of the renormalization process., +        // Renormalization does't run for the entire lifetime of a job, so additionally autodetect process, +        // based operation (open, close, flush, post data), datafeed based operations (start and stop), +        // and deleting expired data use this threadpool too and queue up if all threads are busy., +        FixedExecutorBuilder renormalizer = new FixedExecutorBuilder(settings, UTILITY_THREAD_POOL_NAME,, +                maxNumberOfJobs * 4, 500, "xpack.ml.utility_thread_pool");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME).execute(new AbstractRunnable() {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final String UTILITY_THREAD_POOL_NAME = NAME + "_utility";, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME));, +        // 4 threads per job: for cpp logging, result processing, state processing and, +        // 4 threads per job: processing logging, result and state of the renormalization process., +        // Renormalization does't run for the entire lifetime of a job, so additionally autodetect process, +        // based operation (open, close, flush, post data), datafeed based operations (start and stop), +        // and deleting expired data use this threadpool too and queue up if all threads are busy., +        FixedExecutorBuilder renormalizer = new FixedExecutorBuilder(settings, UTILITY_THREAD_POOL_NAME,, +                maxNumberOfJobs * 4, 500, "xpack.ml.utility_thread_pool");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME).execute(new AbstractRunnable() {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteExpiredDataAction.java, +import org.elasticsearch.xpack.ml.MachineLearning;, +            threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME).execute(() -> deleteExpiredData(listener));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final String UTILITY_THREAD_POOL_NAME = NAME + "_utility";, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME));, +        // 4 threads per job: for cpp logging, result processing, state processing and, +        // 4 threads per job: processing logging, result and state of the renormalization process., +        // Renormalization does't run for the entire lifetime of a job, so additionally autodetect process, +        // based operation (open, close, flush, post data), datafeed based operations (start and stop), +        // and deleting expired data use this threadpool too and queue up if all threads are busy., +        FixedExecutorBuilder renormalizer = new FixedExecutorBuilder(settings, UTILITY_THREAD_POOL_NAME,, +                maxNumberOfJobs * 4, 500, "xpack.ml.utility_thread_pool");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME).execute(new AbstractRunnable() {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteExpiredDataAction.java, +import org.elasticsearch.xpack.ml.MachineLearning;, +            threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME).execute(() -> deleteExpiredData(listener));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +            super(settings, TASK_NAME, MachineLearning.UTILITY_THREAD_POOL_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final String UTILITY_THREAD_POOL_NAME = NAME + "_utility";, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME));, +        // 4 threads per job: for cpp logging, result processing, state processing and, +        // 4 threads per job: processing logging, result and state of the renormalization process., +        // Renormalization does't run for the entire lifetime of a job, so additionally autodetect process, +        // based operation (open, close, flush, post data), datafeed based operations (start and stop), +        // and deleting expired data use this threadpool too and queue up if all threads are busy., +        FixedExecutorBuilder renormalizer = new FixedExecutorBuilder(settings, UTILITY_THREAD_POOL_NAME,, +                maxNumberOfJobs * 4, 500, "xpack.ml.utility_thread_pool");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME).execute(new AbstractRunnable() {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteExpiredDataAction.java, +import org.elasticsearch.xpack.ml.MachineLearning;, +            threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME).execute(() -> deleteExpiredData(listener));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +            super(settings, TASK_NAME, MachineLearning.UTILITY_THREAD_POOL_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.xpack.ml.MachineLearning;, +            super(settings, TASK_NAME, MachineLearning.UTILITY_THREAD_POOL_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final String UTILITY_THREAD_POOL_NAME = NAME + "_utility";, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME));, +        // 4 threads per job: for cpp logging, result processing, state processing and, +        // 4 threads per job: processing logging, result and state of the renormalization process., +        // Renormalization does't run for the entire lifetime of a job, so additionally autodetect process, +        // based operation (open, close, flush, post data), datafeed based operations (start and stop), +        // and deleting expired data use this threadpool too and queue up if all threads are busy., +        FixedExecutorBuilder renormalizer = new FixedExecutorBuilder(settings, UTILITY_THREAD_POOL_NAME,, +                maxNumberOfJobs * 4, 500, "xpack.ml.utility_thread_pool");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME).execute(new AbstractRunnable() {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteExpiredDataAction.java, +import org.elasticsearch.xpack.ml.MachineLearning;, +            threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME).execute(() -> deleteExpiredData(listener));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +            super(settings, TASK_NAME, MachineLearning.UTILITY_THREAD_POOL_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.xpack.ml.MachineLearning;, +            super(settings, TASK_NAME, MachineLearning.UTILITY_THREAD_POOL_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StopDatafeedAction.java, +import org.elasticsearch.xpack.ml.MachineLearning;, +                    indexNameExpressionResolver, Request::new, Response::new, MachineLearning.UTILITY_THREAD_POOL_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final String UTILITY_THREAD_POOL_NAME = NAME + "_utility";, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME));]