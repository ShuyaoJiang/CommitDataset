[+++ b/build.gradle, +++ b/build.gradle, +++ b/buildSrc/build.gradle, +++ b/build.gradle, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.plugins.JavaPlugin, +        configureJavadocJar(project), +        configureSourcesJar(project), +    /** Adds a javadocJar task to generate a jar containing javadocs. */, +    static void configureJavadocJar(Project project) {, +        Jar javadocJarTask = project.task('javadocJar', type: Jar), +        javadocJarTask.classifier = 'javadoc', +        javadocJarTask.group = 'build', +        javadocJarTask.description = 'Assembles a jar containing javadocs.', +        javadocJarTask.from(project.tasks.getByName(JavaPlugin.JAVADOC_TASK_NAME)), +        project.assemble.dependsOn(javadocJarTask), +    }, +, +    static void configureSourcesJar(Project project) {, +        Jar sourcesJarTask = project.task('sourcesJar', type: Jar), +        sourcesJarTask.classifier = 'sources', +        sourcesJarTask.group = 'build', +        sourcesJarTask.description = 'Assembles a jar containing source files.', +        sourcesJarTask.from(project.sourceSets.main.allSource), +        project.assemble.dependsOn(sourcesJarTask), +    }, +, +++ b/build.gradle, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.plugins.JavaPlugin, +        configureJavadocJar(project), +        configureSourcesJar(project), +    /** Adds a javadocJar task to generate a jar containing javadocs. */, +    static void configureJavadocJar(Project project) {, +        Jar javadocJarTask = project.task('javadocJar', type: Jar), +        javadocJarTask.classifier = 'javadoc', +        javadocJarTask.group = 'build', +        javadocJarTask.description = 'Assembles a jar containing javadocs.', +        javadocJarTask.from(project.tasks.getByName(JavaPlugin.JAVADOC_TASK_NAME)), +        project.assemble.dependsOn(javadocJarTask), +    }, +, +    static void configureSourcesJar(Project project) {, +        Jar sourcesJarTask = project.task('sourcesJar', type: Jar), +        sourcesJarTask.classifier = 'sources', +        sourcesJarTask.group = 'build', +        sourcesJarTask.description = 'Assembles a jar containing source files.', +        sourcesJarTask.from(project.sourceSets.main.allSource), +        project.assemble.dependsOn(sourcesJarTask), +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        clientJar.dependsOn(project.jar, project.javadocJar, project.sourcesJar), +                clientJar(MavenPublication) {, +                }, +                // HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +                // when the packaging type is set to 'pom'. So here we create another publication using the same, +                // name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +                // in alphabetical order. We cannot setup a dependency between the tasks because the publishing, +                // tasks are created *extremely* late in the configuration phase, so that we cannot get ahold, +                // of the actual task. Furthermore, this entire hack only exists so we can make publishing to, +                // maven local work, since we publish to maven central externally., +                zipReal(MavenPublication) {, +++ b/build.gradle, +++ b/buildSrc/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.plugins.JavaPlugin, +        configureJavadocJar(project), +        configureSourcesJar(project), +    /** Adds a javadocJar task to generate a jar containing javadocs. */, +    static void configureJavadocJar(Project project) {, +        Jar javadocJarTask = project.task('javadocJar', type: Jar), +        javadocJarTask.classifier = 'javadoc', +        javadocJarTask.group = 'build', +        javadocJarTask.description = 'Assembles a jar containing javadocs.', +        javadocJarTask.from(project.tasks.getByName(JavaPlugin.JAVADOC_TASK_NAME)), +        project.assemble.dependsOn(javadocJarTask), +    }, +, +    static void configureSourcesJar(Project project) {, +        Jar sourcesJarTask = project.task('sourcesJar', type: Jar), +        sourcesJarTask.classifier = 'sources', +        sourcesJarTask.group = 'build', +        sourcesJarTask.description = 'Assembles a jar containing source files.', +        sourcesJarTask.from(project.sourceSets.main.allSource), +        project.assemble.dependsOn(sourcesJarTask), +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        clientJar.dependsOn(project.jar, project.javadocJar, project.sourcesJar), +                clientJar(MavenPublication) {, +                }, +                // HUGE HACK: the underlying maven publication library refuses to deploy any attached artifacts, +                // when the packaging type is set to 'pom'. So here we create another publication using the same, +                // name that has the "real" pom, and rely on the fact that gradle will execute the publish tasks, +                // in alphabetical order. We cannot setup a dependency between the tasks because the publishing, +                // tasks are created *extremely* late in the configuration phase, so that we cannot get ahold, +                // of the actual task. Furthermore, this entire hack only exists so we can make publishing to]