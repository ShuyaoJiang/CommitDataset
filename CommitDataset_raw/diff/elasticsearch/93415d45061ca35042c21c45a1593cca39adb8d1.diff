[+++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexModule.INDEX_STORE_PRE_LOAD_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexModule.INDEX_STORE_PRE_LOAD_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import java.util.Collections;, +, +    /** On which extensions to load data into the file-system cache upon opening of files., +     *  This only works with the mmap directory, and even in that case is still, +     *  best-effort only. */, +    public static final Setting<List<String>> INDEX_STORE_PRE_LOAD_SETTING =, +            Setting.listSetting("index.store.preload", Collections.emptyList(), Function.identity(),, +                    Property.IndexScope, Property.NodeScope);, +, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexModule.INDEX_STORE_PRE_LOAD_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import java.util.Collections;, +, +    /** On which extensions to load data into the file-system cache upon opening of files., +     *  This only works with the mmap directory, and even in that case is still, +     *  best-effort only. */, +    public static final Setting<List<String>> INDEX_STORE_PRE_LOAD_SETTING =, +            Setting.listSetting("index.store.preload", Collections.emptyList(), Function.identity(),, +                    Property.IndexScope, Property.NodeScope);, +, +++ b/core/src/main/java/org/elasticsearch/index/store/FsDirectoryService.java, +import java.util.HashSet;, +        final LockFactory lockFactory = indexSettings.getValue(INDEX_LOCK_FACTOR_SETTING);, +        Directory wrapped = newFSDirectory(location, lockFactory);, +        Set<String> preLoadExtensions = new HashSet<>(, +                indexSettings.getValue(IndexModule.INDEX_STORE_PRE_LOAD_SETTING));, +        wrapped = setPreload(wrapped, location, lockFactory, preLoadExtensions);, +        if (IndexModule.Type.FS.match(storeType) || IndexModule.Type.DEFAULT.match(storeType)) {, +            return FSDirectory.open(location, lockFactory); // use lucene defaults, +    private static Directory setPreload(Directory directory, Path location, LockFactory lockFactory,, +            Set<String> preLoadExtensions) throws IOException {, +        if (preLoadExtensions.isEmpty() == false, +                && directory instanceof MMapDirectory, +                && ((MMapDirectory) directory).getPreload() == false) {, +            if (preLoadExtensions.contains("*")) {, +                ((MMapDirectory) directory).setPreload(true);, +                return directory;, +            MMapDirectory primary = new MMapDirectory(location, lockFactory);, +            primary.setPreload(true);, +            return new FileSwitchDirectory(preLoadExtensions, primary, directory, true) {, +                    // avoid listing twice, +                    return primary.listAll();, +        return directory;, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexModule.INDEX_STORE_PRE_LOAD_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import java.util.Collections;, +, +    /** On which extensions to load data into the file-system cache upon opening of files., +     *  This only works with the mmap directory, and even in that case is still, +     *  best-effort only. */, +    public static final Setting<List<String>> INDEX_STORE_PRE_LOAD_SETTING =, +            Setting.listSetting("index.store.preload", Collections.emptyList(), Function.identity(),, +                    Property.IndexScope, Property.NodeScope);, +, +++ b/core/src/main/java/org/elasticsearch/index/store/FsDirectoryService.java, +import java.util.HashSet;, +        final LockFactory lockFactory = indexSettings.getValue(INDEX_LOCK_FACTOR_SETTING);, +        Directory wrapped = newFSDirectory(location, lockFactory);, +        Set<String> preLoadExtensions = new HashSet<>(, +                indexSettings.getValue(IndexModule.INDEX_STORE_PRE_LOAD_SETTING));, +        wrapped = setPreload(wrapped, location, lockFactory, preLoadExtensions);, +        if (IndexModule.Type.FS.match(storeType) || IndexModule.Type.DEFAULT.match(storeType)) {, +            return FSDirectory.open(location, lockFactory); // use lucene defaults, +    private static Directory setPreload(Directory directory, Path location, LockFactory lockFactory,, +            Set<String> preLoadExtensions) throws IOException {, +        if (preLoadExtensions.isEmpty() == false, +                && directory instanceof MMapDirectory, +                && ((MMapDirectory) directory).getPreload() == false) {, +            if (preLoadExtensions.contains("*")) {, +                ((MMapDirectory) directory).setPreload(true);, +                return directory;, +            MMapDirectory primary = new MMapDirectory(location, lockFactory);, +            primary.setPreload(true);, +            return new FileSwitchDirectory(preLoadExtensions, primary, directory, true) {, +                    // avoid listing twice, +                    return primary.listAll();, +        return directory;, +    }, +++ b/core/src/test/java/org/elasticsearch/index/store/FsDirectoryServiceTests.java, +import org.apache.lucene.store.FileSwitchDirectory;, +import org.apache.lucene.store.MMapDirectory;, +import java.util.Arrays;, +, +    public void testPreload() throws IOException {, +        doTestPreload();, +        doTestPreload("nvd", "dvd", "tim");, +        doTestPreload("*");, +    }, +, +    private void doTestPreload(String...preload) throws IOException {, +        Settings build = Settings.builder(), +                .put(IndexModule.INDEX_STORE_TYPE_SETTING.getKey(), "mmapfs")]