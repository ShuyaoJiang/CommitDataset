[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    private final ExtensionPoint.ClassSet<IndexTemplateFilter> indexTemplateFilters = new ExtensionPoint.ClassSet<>("index_template_filter", IndexTemplateFilter.class);, +    public void registerIndexTemplateFilter(Class<? extends IndexTemplateFilter> indexTemplateFilter) {, +        indexTemplateFilters.registerExtension(indexTemplateFilter);, +    }, +, +        indexTemplateFilters.bind(binder());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    private final ExtensionPoint.ClassSet<IndexTemplateFilter> indexTemplateFilters = new ExtensionPoint.ClassSet<>("index_template_filter", IndexTemplateFilter.class);, +    public void registerIndexTemplateFilter(Class<? extends IndexTemplateFilter> indexTemplateFilter) {, +        indexTemplateFilters.registerExtension(indexTemplateFilter);, +    }, +, +        indexTemplateFilters.bind(binder());, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateFilter.java, +, +    class Compound implements IndexTemplateFilter {, +, +        private IndexTemplateFilter[] filters;, +, +        Compound(IndexTemplateFilter... filters) {, +            this.filters = filters;, +        }, +, +        @Override, +        public boolean apply(CreateIndexClusterStateUpdateRequest request, IndexTemplateMetaData template) {, +            for (IndexTemplateFilter filter : filters) {, +                if (!filter.apply(request, template)) {, +                    return false;, +                }, +            }, +            return true;, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    private final ExtensionPoint.ClassSet<IndexTemplateFilter> indexTemplateFilters = new ExtensionPoint.ClassSet<>("index_template_filter", IndexTemplateFilter.class);, +    public void registerIndexTemplateFilter(Class<? extends IndexTemplateFilter> indexTemplateFilter) {, +        indexTemplateFilters.registerExtension(indexTemplateFilter);, +    }, +, +        indexTemplateFilters.bind(binder());, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateFilter.java, +, +    class Compound implements IndexTemplateFilter {, +, +        private IndexTemplateFilter[] filters;, +, +        Compound(IndexTemplateFilter... filters) {, +            this.filters = filters;, +        }, +, +        @Override, +        public boolean apply(CreateIndexClusterStateUpdateRequest request, IndexTemplateMetaData template) {, +            for (IndexTemplateFilter filter : filters) {, +                if (!filter.apply(request, template)) {, +                    return false;, +                }, +            }, +            return true;, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +    private static final DefaultIndexTemplateFilter DEFAULT_INDEX_TEMPLATE_FILTER = new DefaultIndexTemplateFilter();, +    private final IndexTemplateFilter indexTemplateFilter;, +                                      AliasValidator aliasValidator,, +                                      Set<IndexTemplateFilter> indexTemplateFilters, Environment env,, +, +        if (indexTemplateFilters.isEmpty()) {, +            this.indexTemplateFilter = DEFAULT_INDEX_TEMPLATE_FILTER;, +        } else {, +            IndexTemplateFilter[] templateFilters = new IndexTemplateFilter[indexTemplateFilters.size() + 1];, +            templateFilters[0] = DEFAULT_INDEX_TEMPLATE_FILTER;, +            int i = 1;, +            for (IndexTemplateFilter indexTemplateFilter : indexTemplateFilters) {, +                templateFilters[i++] = indexTemplateFilter;, +            }, +            this.indexTemplateFilter = new IndexTemplateFilter.Compound(templateFilters);, +        }, +                            List<IndexTemplateMetaData> templates = findTemplates(request, currentState, indexTemplateFilter);, +    private List<IndexTemplateMetaData> findTemplates(CreateIndexClusterStateUpdateRequest request, ClusterState state, IndexTemplateFilter indexTemplateFilter) throws IOException {, +            if (indexTemplateFilter.apply(request, template)) {, +    private static class DefaultIndexTemplateFilter implements IndexTemplateFilter {, +        @Override, +        public boolean apply(CreateIndexClusterStateUpdateRequest request, IndexTemplateMetaData template) {, +            return Regex.simpleMatch(template.template(), request.index());, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +    private final ExtensionPoint.ClassSet<IndexTemplateFilter> indexTemplateFilters = new ExtensionPoint.ClassSet<>("index_template_filter", IndexTemplateFilter.class);, +    public void registerIndexTemplateFilter(Class<? extends IndexTemplateFilter> indexTemplateFilter) {, +        indexTemplateFilters.registerExtension(indexTemplateFilter);, +    }, +, +        indexTemplateFilters.bind(binder());, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateFilter.java, +, +    class Compound implements IndexTemplateFilter {, +, +        private IndexTemplateFilter[] filters;]