[+++ b/docs/reference/modules/transport.asciidoc, +, +[float], +coming[1.5.0], +=== Transport Tracer, +, +The transport module has a dedicated tracer logger which, when activated, logs incoming and out going requests. The log can be dynamically activated, +by settings the level of the `transport.tracer` logger to `TRACE`:, +, +[source,js], +--------------------------------------------------, +curl -XPUT localhost:9200/_cluster/settings -d '{, +    "transient" : {, +        "logger.transport.tracer" : "TRACE", +    }, +}', +--------------------------------------------------, +, +You can also control which actions will be traced, using a set of include and exclude wildcard patterns. By default every request will be traced, +except for fault detection pings:, +, +[source,js], +--------------------------------------------------, +curl -XPUT localhost:9200/_cluster/settings -d '{, +    "transient" : {, +        "transport.tracer.include" : "*", +        "transport.tracer.exclude" : "internal:discovery/zen/fd*", +    }, +}', +--------------------------------------------------, +, +, +++ b/docs/reference/modules/transport.asciidoc, +, +[float], +coming[1.5.0], +=== Transport Tracer, +, +The transport module has a dedicated tracer logger which, when activated, logs incoming and out going requests. The log can be dynamically activated, +by settings the level of the `transport.tracer` logger to `TRACE`:, +, +[source,js], +--------------------------------------------------, +curl -XPUT localhost:9200/_cluster/settings -d '{, +    "transient" : {, +        "logger.transport.tracer" : "TRACE", +    }, +}', +--------------------------------------------------, +, +You can also control which actions will be traced, using a set of include and exclude wildcard patterns. By default every request will be traced, +except for fault detection pings:, +, +[source,js], +--------------------------------------------------, +curl -XPUT localhost:9200/_cluster/settings -d '{, +    "transient" : {, +        "transport.tracer.include" : "*", +        "transport.tracer.exclude" : "internal:discovery/zen/fd*", +    }, +}', +--------------------------------------------------, +, +, +++ b/src/main/java/org/elasticsearch/transport/TransportService.java, +import org.elasticsearch.cluster.settings.ClusterDynamicSettings;, +import org.elasticsearch.cluster.settings.DynamicSettings;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.regex.Regex;, +import org.elasticsearch.node.settings.NodeSettingsService;, +import java.util.Arrays;, +    private final TransportService.Adapter adapter;, +, +    // tracer log, +, +    public static final String SETTING_TRACE_LOG_INCLUDE = "transport.tracer.include";, +    public static final String SETTING_TRACE_LOG_EXCLUDE = "transport.tracer.exclude";, +, +    private final ESLogger tracerLog;, +, +    volatile String[] tracerLogInclude;, +    volatile String[] tracelLogExclude;, +    private final ApplySettings settingsListener = new ApplySettings();, +        this.tracerLogInclude = settings.getAsArray(SETTING_TRACE_LOG_INCLUDE, Strings.EMPTY_ARRAY, true);, +        this.tracelLogExclude = settings.getAsArray(SETTING_TRACE_LOG_EXCLUDE, new String[]{"internal:discovery/zen/fd*"}, true);, +        tracerLog = Loggers.getLogger(logger, ".tracer");, +        adapter = createAdapter();, +    }, +, +    protected Adapter createAdapter() {, +        return new Adapter();, +    }, +, +    // These need to be optional as they don't exist in the context of a transport client, +    @Inject(optional = true), +    public void setDynamicSettings(NodeSettingsService nodeSettingsService, @ClusterDynamicSettings DynamicSettings dynamicSettings) {, +        dynamicSettings.addDynamicSettings(SETTING_TRACE_LOG_INCLUDE, SETTING_TRACE_LOG_INCLUDE + ".*");, +        dynamicSettings.addDynamicSettings(SETTING_TRACE_LOG_EXCLUDE, SETTING_TRACE_LOG_EXCLUDE + ".*");]