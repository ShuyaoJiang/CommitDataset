[+++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        // now try as maven coordinates, a valid URL would only have a colon and slash, +        if (coordinates.length == 3 && pluginId.contains("/") == false) {, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        // now try as maven coordinates, a valid URL would only have a colon and slash, +        if (coordinates.length == 3 && pluginId.contains("/") == false) {, +++ b/plugins/lang-painless/src/main/java/org/elasticsearch/painless/PainlessLexer.java, +import org.antlr.v4.runtime.Lexer;, +import org.antlr.v4.runtime.CharStream;, +import org.antlr.v4.runtime.Token;, +import org.antlr.v4.runtime.TokenStream;, +import org.antlr.v4.runtime.*;, +import org.antlr.v4.runtime.atn.*;, +import org.antlr.v4.runtime.dfa.DFA;, +import org.antlr.v4.runtime.misc.*;, +, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        // now try as maven coordinates, a valid URL would only have a colon and slash, +        if (coordinates.length == 3 && pluginId.contains("/") == false) {, +++ b/plugins/lang-painless/src/main/java/org/elasticsearch/painless/PainlessLexer.java, +import org.antlr.v4.runtime.Lexer;, +import org.antlr.v4.runtime.CharStream;, +import org.antlr.v4.runtime.Token;, +import org.antlr.v4.runtime.TokenStream;, +import org.antlr.v4.runtime.*;, +import org.antlr.v4.runtime.atn.*;, +import org.antlr.v4.runtime.dfa.DFA;, +import org.antlr.v4.runtime.misc.*;, +, +++ b/plugins/lang-painless/src/main/java/org/elasticsearch/painless/PainlessParser.java, +import org.antlr.v4.runtime.atn.*;, +import org.antlr.v4.runtime.*;, +import org.antlr.v4.runtime.misc.*;, +import org.antlr.v4.runtime.tree.*;, +import java.util.Iterator;, +import java.util.ArrayList;, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        // now try as maven coordinates, a valid URL would only have a colon and slash, +        if (coordinates.length == 3 && pluginId.contains("/") == false) {, +++ b/plugins/lang-painless/src/main/java/org/elasticsearch/painless/PainlessLexer.java, +import org.antlr.v4.runtime.Lexer;, +import org.antlr.v4.runtime.CharStream;, +import org.antlr.v4.runtime.Token;, +import org.antlr.v4.runtime.TokenStream;, +import org.antlr.v4.runtime.*;, +import org.antlr.v4.runtime.atn.*;, +import org.antlr.v4.runtime.dfa.DFA;, +import org.antlr.v4.runtime.misc.*;, +, +++ b/plugins/lang-painless/src/main/java/org/elasticsearch/painless/PainlessParser.java, +import org.antlr.v4.runtime.atn.*;, +import org.antlr.v4.runtime.*;, +import org.antlr.v4.runtime.misc.*;, +import org.antlr.v4.runtime.tree.*;, +import java.util.Iterator;, +import java.util.ArrayList;, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java, +import java.net.MalformedURLException;, +    public void testMalformedUrlNotMaven() throws Exception {, +        // has two colons, so it appears similar to maven coordinates, +        MalformedURLException e = expectThrows(MalformedURLException.class, () -> {, +            installPlugin("://host:1234", createEnv());, +        });, +        assertTrue(e.getMessage(), e.getMessage().contains("no protocol"));, +    }, +]