[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    public NodeAllocations(Settings settings, NodeSettingsService nodeSettingsService) {, +                .add(new ThrottlingNodeAllocation(settings, nodeSettingsService)), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    public NodeAllocations(Settings settings, NodeSettingsService nodeSettingsService) {, +                .add(new ThrottlingNodeAllocation(settings, nodeSettingsService)), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ShardsAllocation.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +        this(settings, new NodeAllocations(settings, new NodeSettingsService(ImmutableSettings.Builder.EMPTY_SETTINGS)));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    public NodeAllocations(Settings settings, NodeSettingsService nodeSettingsService) {, +                .add(new ThrottlingNodeAllocation(settings, nodeSettingsService)), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ShardsAllocation.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +        this(settings, new NodeAllocations(settings, new NodeSettingsService(ImmutableSettings.Builder.EMPTY_SETTINGS)));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ThrottlingNodeAllocation.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    @Inject public ThrottlingNodeAllocation(Settings settings, NodeSettingsService nodeSettingsService) {, +        nodeSettingsService.addListener(new ApplySettings());, +    class ApplySettings implements NodeSettingsService.Listener {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    public NodeAllocations(Settings settings, NodeSettingsService nodeSettingsService) {, +                .add(new ThrottlingNodeAllocation(settings, nodeSettingsService)), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ShardsAllocation.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +        this(settings, new NodeAllocations(settings, new NodeSettingsService(ImmutableSettings.Builder.EMPTY_SETTINGS)));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ThrottlingNodeAllocation.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    @Inject public ThrottlingNodeAllocation(Settings settings, NodeSettingsService nodeSettingsService) {, +        nodeSettingsService.addListener(new ApplySettings());, +    class ApplySettings implements NodeSettingsService.Listener {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    private final NodeSettingsService nodeSettingsService;, +                                          NodeSettingsService nodeSettingsService, ThreadPool threadPool) {, +        this.nodeSettingsService = nodeSettingsService;, +        this.nodeSettingsService.setClusterService(this);, +    public NodeSettingsService settingsService() {, +        return this.nodeSettingsService;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    public NodeAllocations(Settings settings, NodeSettingsService nodeSettingsService) {, +                .add(new ThrottlingNodeAllocation(settings, nodeSettingsService)), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ShardsAllocation.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +        this(settings, new NodeAllocations(settings, new NodeSettingsService(ImmutableSettings.Builder.EMPTY_SETTINGS)));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ThrottlingNodeAllocation.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    @Inject public ThrottlingNodeAllocation(Settings settings, NodeSettingsService nodeSettingsService) {, +        nodeSettingsService.addListener(new ApplySettings());, +    class ApplySettings implements NodeSettingsService.Listener {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    private final NodeSettingsService nodeSettingsService;, +                                          NodeSettingsService nodeSettingsService, ThreadPool threadPool) {, +        this.nodeSettingsService = nodeSettingsService;, +        this.nodeSettingsService.setClusterService(this);, +    public NodeSettingsService settingsService() {, +        return this.nodeSettingsService;, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    public NodeAllocations(Settings settings, NodeSettingsService nodeSettingsService) {, +                .add(new ThrottlingNodeAllocation(settings, nodeSettingsService)), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ShardsAllocation.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +        this(settings, new NodeAllocations(settings, new NodeSettingsService(ImmutableSettings.Builder.EMPTY_SETTINGS)));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/ThrottlingNodeAllocation.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    @Inject public ThrottlingNodeAllocation(Settings settings, NodeSettingsService nodeSettingsService) {, +        nodeSettingsService.addListener(new ApplySettings());, +    class ApplySettings implements NodeSettingsService.Listener {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    private final NodeSettingsService nodeSettingsService;, +                                          NodeSettingsService nodeSettingsService, ThreadPool threadPool) {, +        this.nodeSettingsService = nodeSettingsService;, +        this.nodeSettingsService.setClusterService(this);, +    public NodeSettingsService settingsService() {, +        return this.nodeSettingsService;, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +                                TransportService transportService, ClusterService clusterService, NodeSettingsService nodeSettingsService,, +        this.electMaster = new ElectMasterService(settings, nodeSettingsService);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    public NodeAllocations(Settings settings, NodeSettingsService nodeSettingsService) {]