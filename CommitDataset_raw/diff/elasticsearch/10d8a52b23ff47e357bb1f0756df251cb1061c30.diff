[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/DeleteModelSnapshotAction.java, +import org.elasticsearch.xpack.prelert.job.persistence.JobDataDeleter;, +            jobProvider.modelSnapshots(, +                    request.getJobId(), 0, 1, null, null, null, true, request.getSnapshotId(), null,, +                    page -> {, +                        List<ModelSnapshot> deleteCandidates = page.results();, +                            listener.onFailure(new ResourceNotFoundException(, +                                    Messages.getMessage(Messages.REST_NO_SUCH_MODEL_SNAPSHOT, request.getJobId())));, +                    }, listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/DeleteModelSnapshotAction.java, +import org.elasticsearch.xpack.prelert.job.persistence.JobDataDeleter;, +            jobProvider.modelSnapshots(, +                    request.getJobId(), 0, 1, null, null, null, true, request.getSnapshotId(), null,, +                    page -> {, +                        List<ModelSnapshot> deleteCandidates = page.results();, +                            listener.onFailure(new ResourceNotFoundException(, +                                    Messages.getMessage(Messages.REST_NO_SUCH_MODEL_SNAPSHOT, request.getJobId())));, +                    }, listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetModelSnapshotsAction.java, +            jobProvider.modelSnapshots(request.getJobId(), request.pageParams.getFrom(), request.pageParams.getSize(),, +                    request.getStart(), request.getEnd(), request.getSort(), request.getDescOrder(), null, request.getDescriptionString(),, +                    page -> {, +                        clearQuantiles(page);, +                    }, listener::onFailure);, +        public static void clearQuantiles(QueryPage<ModelSnapshot> page) {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/DeleteModelSnapshotAction.java, +import org.elasticsearch.xpack.prelert.job.persistence.JobDataDeleter;, +            jobProvider.modelSnapshots(, +                    request.getJobId(), 0, 1, null, null, null, true, request.getSnapshotId(), null,, +                    page -> {, +                        List<ModelSnapshot> deleteCandidates = page.results();, +                            listener.onFailure(new ResourceNotFoundException(, +                                    Messages.getMessage(Messages.REST_NO_SUCH_MODEL_SNAPSHOT, request.getJobId())));, +                    }, listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetModelSnapshotsAction.java, +            jobProvider.modelSnapshots(request.getJobId(), request.pageParams.getFrom(), request.pageParams.getSize(),, +                    request.getStart(), request.getEnd(), request.getSort(), request.getDescOrder(), null, request.getDescriptionString(),, +                    page -> {, +                        clearQuantiles(page);, +                    }, listener::onFailure);, +        public static void clearQuantiles(QueryPage<ModelSnapshot> page) {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/RevertModelSnapshotAction.java, +import java.util.function.Consumer;, +            getModelSnapshot(request, jobProvider, modelSnapshot -> {, +                ActionListener<Response> wrappedListener = listener;, +                    wrappedListener = wrapDeleteOldDataListener(wrappedListener, modelSnapshot, request.getJobId());, +                    wrappedListener = wrapRevertDataCountsListener(wrappedListener, modelSnapshot, request.getJobId());, +                jobManager.revertSnapshot(request, wrappedListener, modelSnapshot);, +            }, listener::onFailure);, +        private void getModelSnapshot(Request request, JobProvider provider, Consumer<ModelSnapshot> handler,, +                                      Consumer<Exception> errorHandler) {, +            provider.modelSnapshots(request.getJobId(), 0, 1, null, request.getTime(),, +                    ModelSnapshot.TIMESTAMP.getPreferredName(), true, request.getSnapshotId(), request.getDescription(),, +                    page -> {, +                        List<ModelSnapshot> revertCandidates = page.results();, +                            throw new ResourceNotFoundException(, +                                    Messages.getMessage(Messages.REST_NO_SUCH_MODEL_SNAPSHOT, request.getJobId()));, +                        handler.accept(modelSnapshot);, +                    }, errorHandler);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/DeleteModelSnapshotAction.java, +import org.elasticsearch.xpack.prelert.job.persistence.JobDataDeleter;, +            jobProvider.modelSnapshots(, +                    request.getJobId(), 0, 1, null, null, null, true, request.getSnapshotId(), null,, +                    page -> {, +                        List<ModelSnapshot> deleteCandidates = page.results();, +                            listener.onFailure(new ResourceNotFoundException(, +                                    Messages.getMessage(Messages.REST_NO_SUCH_MODEL_SNAPSHOT, request.getJobId())));, +                    }, listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetModelSnapshotsAction.java, +            jobProvider.modelSnapshots(request.getJobId(), request.pageParams.getFrom(), request.pageParams.getSize(),, +                    request.getStart(), request.getEnd(), request.getSort(), request.getDescOrder(), null, request.getDescriptionString(),, +                    page -> {, +                        clearQuantiles(page);, +                    }, listener::onFailure);, +        public static void clearQuantiles(QueryPage<ModelSnapshot> page) {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/RevertModelSnapshotAction.java, +import java.util.function.Consumer;, +            getModelSnapshot(request, jobProvider, modelSnapshot -> {, +                ActionListener<Response> wrappedListener = listener;, +                    wrappedListener = wrapDeleteOldDataListener(wrappedListener, modelSnapshot, request.getJobId());, +                    wrappedListener = wrapRevertDataCountsListener(wrappedListener, modelSnapshot, request.getJobId());, +                jobManager.revertSnapshot(request, wrappedListener, modelSnapshot);, +            }, listener::onFailure);, +        private void getModelSnapshot(Request request, JobProvider provider, Consumer<ModelSnapshot> handler,, +                                      Consumer<Exception> errorHandler) {, +            provider.modelSnapshots(request.getJobId(), 0, 1, null, request.getTime(),, +                    ModelSnapshot.TIMESTAMP.getPreferredName(), true, request.getSnapshotId(), request.getDescription(),, +                    page -> {, +                        List<ModelSnapshot> revertCandidates = page.results();, +                            throw new ResourceNotFoundException(, +                                    Messages.getMessage(Messages.REST_NO_SUCH_MODEL_SNAPSHOT, request.getJobId()));, +                        handler.accept(modelSnapshot);, +                    }, errorHandler);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/UpdateModelSnapshotAction.java, +import java.util.function.Consumer;, +            getChangeCandidates(request, changeCandidates -> {, +                checkForClashes(request, aVoid -> {, +                }, listener::onFailure);, +            }, listener::onFailure);, +        private void getChangeCandidates(Request request, Consumer<List<ModelSnapshot>> handler, Consumer<Exception> errorHandler) {]