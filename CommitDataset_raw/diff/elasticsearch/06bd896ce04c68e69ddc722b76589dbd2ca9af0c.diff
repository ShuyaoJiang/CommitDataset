[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(new AggregationSpec(GeoGridAggregationBuilder::new, new GeoHashGridParser(),, +                GeoGridAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalGeoHashGrid::new));, +        registerAggregation(new AggregationSpec(GeoBoundsAggregationBuilder::new, new GeoBoundsParser(),, +                GeoBoundsAggregationBuilder.AGGREGATION_NAME_FIED).addResultReader(InternalGeoBounds::new));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(new AggregationSpec(GeoGridAggregationBuilder::new, new GeoHashGridParser(),, +                GeoGridAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalGeoHashGrid::new));, +        registerAggregation(new AggregationSpec(GeoBoundsAggregationBuilder::new, new GeoBoundsParser(),, +                GeoBoundsAggregationBuilder.AGGREGATION_NAME_FIED).addResultReader(InternalGeoBounds::new));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +import org.elasticsearch.search.aggregations.InternalAggregation.Type;, +    public static final String NAME = "geohash_grid";, +    private static final Type TYPE = new Type(NAME);, +        super(name, TYPE, ValuesSourceType.GEOPOINT, ValueType.GEOPOINT);, +        super(in, TYPE, ValuesSourceType.GEOPOINT, ValueType.GEOPOINT);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(new AggregationSpec(GeoGridAggregationBuilder::new, new GeoHashGridParser(),, +                GeoGridAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalGeoHashGrid::new));, +        registerAggregation(new AggregationSpec(GeoBoundsAggregationBuilder::new, new GeoBoundsParser(),, +                GeoBoundsAggregationBuilder.AGGREGATION_NAME_FIED).addResultReader(InternalGeoBounds::new));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +import org.elasticsearch.search.aggregations.InternalAggregation.Type;, +    public static final String NAME = "geohash_grid";, +    private static final Type TYPE = new Type(NAME);, +        super(name, TYPE, ValuesSourceType.GEOPOINT, ValueType.GEOPOINT);, +        super(in, TYPE, ValuesSourceType.GEOPOINT, ValueType.GEOPOINT);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/InternalGeoHashGrid.java, +import static java.util.Collections.unmodifiableList;, +, +        /**, +         * Read from a stream., +         */, +        private Bucket(StreamInput in) throws IOException {, +            geohashAsLong = in.readLong();, +            docCount = in.readVLong();, +            aggregations = InternalAggregations.readAggregations(in);, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeLong(geohashAsLong);, +            out.writeVLong(docCount);, +            aggregations.writeTo(out);, +        }, +, +, +    private final int requiredSize;, +    private final List<Bucket> buckets;, +    public InternalGeoHashGrid(String name, int requiredSize, List<Bucket> buckets, List<PipelineAggregator> pipelineAggregators,, +    /**, +     * Read from a stream., +     */, +    public InternalGeoHashGrid(StreamInput in) throws IOException {, +        super(in);, +        requiredSize = readSize(in);, +        buckets = in.readList(Bucket::new);, +    }, +, +    protected void doWriteTo(StreamOutput out) throws IOException {, +        writeSize(requiredSize, out);, +        out.writeList(buckets);, +    }, +, +    @Override, +    public String getWriteableName() {, +        return GeoGridAggregationBuilder.NAME;, +        return unmodifiableList(buckets);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(new AggregationSpec(GeoGridAggregationBuilder::new, new GeoHashGridParser(),, +                GeoGridAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalGeoHashGrid::new));, +        registerAggregation(new AggregationSpec(GeoBoundsAggregationBuilder::new, new GeoBoundsParser(),, +                GeoBoundsAggregationBuilder.AGGREGATION_NAME_FIED).addResultReader(InternalGeoBounds::new));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +import org.elasticsearch.search.aggregations.InternalAggregation.Type;, +    public static final String NAME = "geohash_grid";, +    private static final Type TYPE = new Type(NAME);, +        super(name, TYPE, ValuesSourceType.GEOPOINT, ValueType.GEOPOINT);, +        super(in, TYPE, ValuesSourceType.GEOPOINT, ValueType.GEOPOINT);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/InternalGeoHashGrid.java, +import static java.util.Collections.unmodifiableList;, +, +        /**, +         * Read from a stream., +         */, +        private Bucket(StreamInput in) throws IOException {, +            geohashAsLong = in.readLong();, +            docCount = in.readVLong();, +            aggregations = InternalAggregations.readAggregations(in);, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeLong(geohashAsLong);, +            out.writeVLong(docCount);]