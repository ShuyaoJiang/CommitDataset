[+++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.facet.FacetBuilder;, +    public SearchRequestBuilder addFacet(FacetBuilder facet) {, +++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.facet.FacetBuilder;, +    public SearchRequestBuilder addFacet(FacetBuilder facet) {, +++ b/src/main/java/org/elasticsearch/common/lucene/MultiCollector.java, +import org.elasticsearch.common.lucene.search.XCollector;, +public class MultiCollector extends XCollector {, +, +    @Override, +    public void postCollection() {, +        if (collector instanceof XCollector) {, +            ((XCollector) collector).postCollection();, +        }, +        for (Collector collector : collectors) {, +            if (collector instanceof XCollector) {, +                ((XCollector) collector).postCollection();, +            }, +        }, +    }, +++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.facet.FacetBuilder;, +    public SearchRequestBuilder addFacet(FacetBuilder facet) {, +++ b/src/main/java/org/elasticsearch/common/lucene/MultiCollector.java, +import org.elasticsearch.common.lucene.search.XCollector;, +public class MultiCollector extends XCollector {, +, +    @Override, +    public void postCollection() {, +        if (collector instanceof XCollector) {, +            ((XCollector) collector).postCollection();, +        }, +        for (Collector collector : collectors) {, +            if (collector instanceof XCollector) {, +                ((XCollector) collector).postCollection();, +            }, +        }, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/docset/ContextDocIdSet.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.lucene.docset;, +, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.search.DocIdSet;, +, +/**, + */, +public class ContextDocIdSet {, +, +    public final AtomicReaderContext context;, +    public final DocIdSet docSet;, +, +    public ContextDocIdSet(AtomicReaderContext context, DocIdSet docSet) {, +        this.context = context;, +        this.docSet = docSet;, +    }, +}, +++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.facet.FacetBuilder;, +    public SearchRequestBuilder addFacet(FacetBuilder facet) {, +++ b/src/main/java/org/elasticsearch/common/lucene/MultiCollector.java, +import org.elasticsearch.common.lucene.search.XCollector;, +public class MultiCollector extends XCollector {, +, +    @Override, +    public void postCollection() {, +        if (collector instanceof XCollector) {, +            ((XCollector) collector).postCollection();, +        }, +        for (Collector collector : collectors) {, +            if (collector instanceof XCollector) {, +                ((XCollector) collector).postCollection();, +            }, +        }, +    }, +++ b/src/main/java/org/elasticsearch/common/lucene/docset/ContextDocIdSet.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this]