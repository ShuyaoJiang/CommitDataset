[+++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +            boolean enabledSet = false;, +                    enabledSet = true;, +            if (enabledSet == false && parserContext.indexVersionCreated().before(Version.V_6_0_0_alpha1)) {, +                // So there is no "enabled" field, however, the index was created prior to 6.0,, +                // and therefore the default for this particular index should be "true" for, +                // enabling _all, +                builder.enabled(EnabledAttributeMapper.ENABLED);, +            }, +                if (context.indexVersionCreated().before(Version.V_6_0_0_alpha1)) {, +                    // The index was created prior to 6.0, and therefore the default for this, +                    // particular index should be "true" for enabling _all, +                    return new AllFieldMapper(fieldType.clone(), EnabledAttributeMapper.ENABLED, indexSettings);, +                } else {, +                }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java, +            boolean enabledSet = false;, +                    enabledSet = true;, +            if (enabledSet == false && parserContext.indexVersionCreated().before(Version.V_6_0_0_alpha1)) {, +                // So there is no "enabled" field, however, the index was created prior to 6.0,, +                // and therefore the default for this particular index should be "true" for, +                // enabling _all, +                builder.enabled(EnabledAttributeMapper.ENABLED);, +            }, +                if (context.indexVersionCreated().before(Version.V_6_0_0_alpha1)) {, +                    // The index was created prior to 6.0, and therefore the default for this, +                    // particular index should be "true" for enabling _all, +                    return new AllFieldMapper(fieldType.clone(), EnabledAttributeMapper.ENABLED, indexSettings);, +                } else {, +                }, +++ b/core/src/test/java/org/elasticsearch/index/mapper/AllFieldIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.elasticsearch.test.InternalSettingsPlugin;, +, +import java.util.Arrays;, +import java.util.Collection;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchHits;, +, +public class AllFieldIT extends ESIntegTestCase {, +, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return Arrays.asList(InternalSettingsPlugin.class); // uses index.version.created, +    }, +, +    public void test5xIndicesContinueToUseAll() throws Exception {, +        // Default 5.x settings, +        assertAcked(prepareCreate("test").setSettings("index.version.created", Version.V_5_1_1.id));, +        client().prepareIndex("test", "type", "1").setSource("body", "foo").get();, +        refresh();, +        SearchResponse resp = client().prepareSearch("test").setQuery(QueryBuilders.matchQuery("_all", "foo")).get();, +        assertHitCount(resp, 1);, +        assertSearchHits(resp, "1");, +, +        // _all explicitly enabled, +        assertAcked(prepareCreate("test2"), +                .setSource(jsonBuilder(), +                        .startObject(), +                        .startObject("mappings"), +                        .startObject("type"), +                        .startObject("_all"), +                        .field("enabled", true), +                        .endObject() // _all, +                        .endObject() // type, +                        .endObject() // mappings, +                        .endObject()), +                .setSettings("index.version.created", Version.V_5_4_0_ID));, +        client().prepareIndex("test2", "type", "1").setSource("foo", "bar").get();, +        refresh();, +        resp = client().prepareSearch("test2").setQuery(QueryBuilders.matchQuery("_all", "bar")).get();, +        assertHitCount(resp, 1);]