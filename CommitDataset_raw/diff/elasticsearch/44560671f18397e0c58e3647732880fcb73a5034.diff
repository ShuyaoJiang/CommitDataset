[+++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcDateUtils.java, +    static Time asTime(long millisSinceEpoch) {, +        return new Time(utcMillisRemoveDate(millisSinceEpoch));, +    }, +, +    /**, +     * In contrast to {@link JdbcDateUtils#asDate(String)} here we just want to eliminate, +     * the date part and just set it to EPOCH (1970-01-1), +     */, +        return asTime(asMillisSinceEpoch(date));, +    }, +, +    static Timestamp asTimestamp(long millisSinceEpoch) {, +        return new Timestamp(millisSinceEpoch);, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcDateUtils.java, +    static Time asTime(long millisSinceEpoch) {, +        return new Time(utcMillisRemoveDate(millisSinceEpoch));, +    }, +, +    /**, +     * In contrast to {@link JdbcDateUtils#asDate(String)} here we just want to eliminate, +     * the date part and just set it to EPOCH (1970-01-1), +     */, +        return asTime(asMillisSinceEpoch(date));, +    }, +, +    static Timestamp asTimestamp(long millisSinceEpoch) {, +        return new Timestamp(millisSinceEpoch);, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcResultSet.java, +        return asDate(columnIndex);, +        return asTime(columnIndex);, +        return asTimeStamp(columnIndex);, +    private Long dateTimeAsMillis(int columnIndex) throws SQLException {, +    private Date asDate(int columnIndex) throws SQLException {, +        Object val = column(columnIndex);, +, +        if (val == null) {, +            return null;, +        }, +, +        try {, +            return JdbcDateUtils.asDate(val.toString());, +        } catch (Exception e) {, +            EsType type = columnType(columnIndex);, +            throw new SQLException(, +                format(Locale.ROOT, "Unable to convert value [%.128s] of type [%s] to a Date", val, type.getName()), e);, +        }, +    }, +, +    private Time asTime(int columnIndex) throws SQLException {, +        Object val = column(columnIndex);, +, +        if (val == null) {, +            return null;, +        }, +, +        EsType type = columnType(columnIndex);, +        if (type == EsType.DATE) {, +            return new Time(0L);, +        }, +, +        try {, +            return JdbcDateUtils.asTime(val.toString());, +        } catch (Exception e) {, +            throw new SQLException(, +                format(Locale.ROOT, "Unable to convert value [%.128s] of type [%s] to a Time", val, type.getName()), e);, +        }, +    }, +, +    private Timestamp asTimeStamp(int columnIndex) throws SQLException {, +        Object val = column(columnIndex);, +, +        if (val == null) {, +            return null;, +        }, +, +        try {, +            if (val instanceof Number) {, +                return JdbcDateUtils.asTimestamp(((Number) val).longValue());, +            }, +            return JdbcDateUtils.asTimestamp(val.toString());, +        } catch (Exception e) {, +            EsType type = columnType(columnIndex);, +            throw new SQLException(, +                format(Locale.ROOT, "Unable to convert value [%.128s] of type [%s] to a Timestamp", val, type.getName()), e);, +        }, +    }, +, +        return TypeConverter.convertDate(dateTimeAsMillis(columnIndex), safeCalendar(cal));, +        return TypeConverter.convertTime(dateTimeAsMillis(columnIndex), safeCalendar(cal));, +        return TypeConverter.convertTimestamp(dateTimeAsMillis(columnIndex), safeCalendar(cal));, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/JdbcDateUtils.java, +    static Time asTime(long millisSinceEpoch) {, +        return new Time(utcMillisRemoveDate(millisSinceEpoch));, +    }, +, +    /**, +     * In contrast to {@link JdbcDateUtils#asDate(String)} here we just want to eliminate, +     * the date part and just set it to EPOCH (1970-01-1), +     */]