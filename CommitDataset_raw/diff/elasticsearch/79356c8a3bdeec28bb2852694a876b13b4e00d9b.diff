[+++ b/core/src/main/java/org/elasticsearch/index/query/ConstantScoreQueryParser.java, +        QueryBuilder<?> query = null;, +                    if (queryFound) {, +                        throw new ParsingException(parser.getTokenLocation(), "[" + ConstantScoreQueryBuilder.NAME + "]", +                                + " accepts only one 'filter' element.");, +                    }, +            } else {, +                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "]");, +++ b/core/src/main/java/org/elasticsearch/index/query/ConstantScoreQueryParser.java, +        QueryBuilder<?> query = null;, +                    if (queryFound) {, +                        throw new ParsingException(parser.getTokenLocation(), "[" + ConstantScoreQueryBuilder.NAME + "]", +                                + " accepts only one 'filter' element.");, +                    }, +            } else {, +                throw new ParsingException(parser.getTokenLocation(), "unexpected token [" + token + "]");, +++ b/core/src/test/java/org/elasticsearch/index/query/ConstantScoreQueryBuilderTests.java, +        String queryString = "{ \"" + ConstantScoreQueryBuilder.NAME + "\" : {} }";, +    /**, +     * test that multiple "filter" elements causes {@link ParsingException}, +     */, +    public void testMultipleFilterElements() throws IOException {, +        String queryString = "{ \"" + ConstantScoreQueryBuilder.NAME + "\" : {\n" +, +                                    "\"filter\" : { \"term\": { \"foo\": \"a\" } },\n" +, +                                    "\"filter\" : { \"term\": { \"foo\": \"x\" } },\n" +, +                            "} }";, +        try {, +            parseQuery(queryString);, +            fail("Expected ParsingException");, +        } catch (ParsingException e) {, +            assertThat(e.getMessage(), containsString("accepts only one 'filter' element"));, +        }, +    }, +, +    /**, +     * test that "filter" does not accept an array of queries, throws {@link ParsingException}, +     */, +    public void testNoArrayAsFilterElements() throws IOException {, +        String queryString = "{ \"" + ConstantScoreQueryBuilder.NAME + "\" : {\n" +, +                                    "\"filter\" : [ { \"term\": { \"foo\": \"a\" } },\n" +, +                                                   "{ \"term\": { \"foo\": \"x\" } } ]\n" +, +                            "} }";, +        try {, +            parseQuery(queryString);, +            fail("Expected ParsingException");, +        } catch (ParsingException e) {, +            assertThat(e.getMessage(), containsString("unexpected token [START_ARRAY]"));, +        }, +    }, +]