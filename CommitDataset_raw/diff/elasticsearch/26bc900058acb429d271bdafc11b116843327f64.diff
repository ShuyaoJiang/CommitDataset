[+++ b/client/rest/src/test/java/org/elasticsearch/client/documentation/RestClientDocumentation.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.client.documentation;, +, +import org.apache.http.Header;, +import org.apache.http.HttpEntity;, +import org.apache.http.HttpHost;, +import org.apache.http.RequestLine;, +import org.apache.http.auth.AuthScope;, +import org.apache.http.auth.UsernamePasswordCredentials;, +import org.apache.http.client.CredentialsProvider;, +import org.apache.http.client.config.RequestConfig;, +import org.apache.http.entity.ContentType;, +import org.apache.http.impl.client.BasicCredentialsProvider;, +import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;, +import org.apache.http.impl.nio.reactor.IOReactorConfig;, +import org.apache.http.message.BasicHeader;, +import org.apache.http.nio.entity.NStringEntity;, +import org.apache.http.util.EntityUtils;, +import org.elasticsearch.client.HttpAsyncResponseConsumerFactory;, +import org.elasticsearch.client.Response;, +import org.elasticsearch.client.ResponseListener;, +import org.elasticsearch.client.RestClient;, +import org.elasticsearch.client.RestClientBuilder;, +, +import javax.net.ssl.SSLContext;, +import java.io.IOException;, +import java.io.InputStream;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.nio.file.Paths;, +import java.security.KeyStore;, +import java.security.KeyStoreException;, +import java.security.NoSuchAlgorithmException;, +import java.security.cert.CertificateException;, +import java.util.Collections;, +import java.util.Map;, +import java.util.concurrent.CountDownLatch;, +, +/**, + * This class is used to generate the Java low-level REST client documentation., + * You need to wrap your code between two tags like:, + * // tag::example[], + * // end::example[], + *, + * Where example is your tag name., + *, + * Then in the documentation, you can extract what is between tag and end tags with, + * ["source","java",subs="attributes,callouts,macros"], + * --------------------------------------------------, + * include-tagged::{doc-tests}/RestClientDocumentation.java[example], + * --------------------------------------------------, + *, + * Note that this is not a test class as we are only interested in testing that docs snippets compile. We don't want, + * to send requests to a node and we don't even have the tools to do it., + */, +@SuppressWarnings("unused"), +public class RestClientDocumentation {, +, +    @SuppressWarnings("unused"), +    public void testUsage() throws IOException, InterruptedException {, +, +        //tag::rest-client-init, +        RestClient restClient = RestClient.builder(, +                new HttpHost("localhost", 9200, "http"),, +                new HttpHost("localhost", 9201, "http")).build();, +        //end::rest-client-init, +, +        //tag::rest-client-close, +        restClient.close();, +        //end::rest-client-close, +, +        {, +            //tag::rest-client-init-default-headers, +            RestClientBuilder builder = RestClient.builder(new HttpHost("localhost", 9200, "http"));, +            Header[] defaultHeaders = new Header[]{new BasicHeader("header", "value")};, +            builder.setDefaultHeaders(defaultHeaders); // <1>, +            //end::rest-client-init-default-headers, +        }, +        {, +            //tag::rest-client-init-max-retry-timeout, +            RestClientBuilder builder = RestClient.builder(new HttpHost("localhost", 9200, "http"));]