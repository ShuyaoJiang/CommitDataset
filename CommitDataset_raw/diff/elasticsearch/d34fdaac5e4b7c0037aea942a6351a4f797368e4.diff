[+++ b/core/src/main/java/org/elasticsearch/script/ScriptMetaData.java, +import org.elasticsearch.common.bytes.BytesArray;, +        return scriptAsBytes.utf8ToString();, +            if (parser.currentToken() == Token.END_OBJECT) {, +                throw new IllegalArgumentException("Empty script");, +            }, +                case VALUE_STRING:, +                    scripts.put(key, new ScriptAsBytes(new BytesArray(parser.text())));, +            builder.field(entry.getKey(), entry.getValue().script.utf8ToString());, +            BytesReference scriptBytest = new BytesArray(parseStoredScript(script));, +            scripts.put(toKey(lang, id), new ScriptAsBytes(scriptBytest));, +++ b/core/src/main/java/org/elasticsearch/script/ScriptMetaData.java, +import org.elasticsearch.common.bytes.BytesArray;, +        return scriptAsBytes.utf8ToString();, +            if (parser.currentToken() == Token.END_OBJECT) {, +                throw new IllegalArgumentException("Empty script");, +            }, +                case VALUE_STRING:, +                    scripts.put(key, new ScriptAsBytes(new BytesArray(parser.text())));, +            builder.field(entry.getKey(), entry.getValue().script.utf8ToString());, +            BytesReference scriptBytest = new BytesArray(parseStoredScript(script));, +            scripts.put(toKey(lang, id), new ScriptAsBytes(scriptBytest));, +++ b/core/src/test/java/org/elasticsearch/script/ScriptMetaDataTests.java, +        builder.storeScript("lang", "1", new BytesArray("{\"foo\":\"abc\"}"));, +        builder.storeScript("lang", "2", new BytesArray("{\"foo\":\"def\"}"));, +        builder.storeScript("lang", "3", new BytesArray("{\"foo\":\"ghi\"}"));, +        builder.storeScript("lang", "2", new BytesArray("{\"foo\":\"changed\"}"));, +        builder.storeScript("lang", "4", new BytesArray("{\"foo\":\"jkl\"}"));, +        assertEquals(new BytesArray("{\"foo\":\"abc\"}"), result.getScriptAsBytes("lang", "1"));, +        assertEquals(new BytesArray("{\"foo\":\"changed\"}"), result.getScriptAsBytes("lang", "2"));, +        assertEquals(new BytesArray("{\"foo\":\"jkl\"}"), result.getScriptAsBytes("lang", "4"));, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +            () -> builder.storeScript("_lang#", "_id", new BytesArray("{\"foo\": \"bar\"}")));, +        e = expectThrows(IllegalArgumentException.class, () -> builder.storeScript("_lang", "_id#", new BytesArray("{\"foo\": \"bar\"}")));, +++ b/core/src/main/java/org/elasticsearch/script/ScriptMetaData.java, +import org.elasticsearch.common.bytes.BytesArray;, +        return scriptAsBytes.utf8ToString();, +            if (parser.currentToken() == Token.END_OBJECT) {, +                throw new IllegalArgumentException("Empty script");, +            }, +                case VALUE_STRING:, +                    scripts.put(key, new ScriptAsBytes(new BytesArray(parser.text())));, +            builder.field(entry.getKey(), entry.getValue().script.utf8ToString());, +            BytesReference scriptBytest = new BytesArray(parseStoredScript(script));, +            scripts.put(toKey(lang, id), new ScriptAsBytes(scriptBytest));, +++ b/core/src/test/java/org/elasticsearch/script/ScriptMetaDataTests.java, +        builder.storeScript("lang", "1", new BytesArray("{\"foo\":\"abc\"}"));, +        builder.storeScript("lang", "2", new BytesArray("{\"foo\":\"def\"}"));, +        builder.storeScript("lang", "3", new BytesArray("{\"foo\":\"ghi\"}"));, +        builder.storeScript("lang", "2", new BytesArray("{\"foo\":\"changed\"}"));, +        builder.storeScript("lang", "4", new BytesArray("{\"foo\":\"jkl\"}"));, +        assertEquals(new BytesArray("{\"foo\":\"abc\"}"), result.getScriptAsBytes("lang", "1"));, +        assertEquals(new BytesArray("{\"foo\":\"changed\"}"), result.getScriptAsBytes("lang", "2"));, +        assertEquals(new BytesArray("{\"foo\":\"jkl\"}"), result.getScriptAsBytes("lang", "4"));, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +            () -> builder.storeScript("_lang#", "_id", new BytesArray("{\"foo\": \"bar\"}")));, +        e = expectThrows(IllegalArgumentException.class, () -> builder.storeScript("_lang", "_id#", new BytesArray("{\"foo\": \"bar\"}")));, +++ b/core/src/test/java/org/elasticsearch/script/ScriptServiceTests.java, +                                new ScriptMetaData.Builder(null).storeScript("_lang", "_id",, +                                    new BytesArray("{\"script\":\"abc\"}")).build()))]