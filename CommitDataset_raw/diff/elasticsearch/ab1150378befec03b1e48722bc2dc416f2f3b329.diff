[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java, +import org.elasticsearch.search.aggregations.AggregationBuilders;, +import org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregation;, +import org.elasticsearch.search.aggregations.bucket.composite.CompositeValuesSourceBuilder;, +import org.elasticsearch.search.aggregations.bucket.composite.TermsValuesSourceBuilder;, +    public void testSearchWithCompositeAgg() throws IOException {, +        SearchRequest searchRequest = new SearchRequest();, +        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +        List<CompositeValuesSourceBuilder<?>> sources, +            = Collections.singletonList(new TermsValuesSourceBuilder("terms").field("type.keyword").missingBucket(true).order("asc"));, +        searchSourceBuilder.aggregation(AggregationBuilders.composite("composite", sources));, +        searchSourceBuilder.size(0);, +        searchRequest.source(searchSourceBuilder);, +        searchRequest.indices("index");, +        SearchResponse searchResponse = execute(searchRequest, highLevelClient()::search, highLevelClient()::searchAsync);, +        assertSearchHeader(searchResponse);, +        assertNull(searchResponse.getSuggest());, +        assertEquals(Collections.emptyMap(), searchResponse.getProfileResults());, +        assertEquals(0, searchResponse.getHits().getHits().length);, +        assertEquals(Float.NaN, searchResponse.getHits().getMaxScore(), 0f);, +        CompositeAggregation compositeAgg = searchResponse.getAggregations().get("composite");, +        assertEquals("composite", compositeAgg.getName());, +        assertEquals(2, compositeAgg.getBuckets().size());, +        CompositeAggregation.Bucket bucket1 = compositeAgg.getBuckets().get(0);, +        assertEquals(3, bucket1.getDocCount());, +        assertEquals("{terms=type1}", bucket1.getKeyAsString());, +        assertEquals(0, bucket1.getAggregations().asList().size());, +        CompositeAggregation.Bucket bucket2 = compositeAgg.getBuckets().get(1);, +        assertEquals(2, bucket2.getDocCount());, +        assertEquals("{terms=type2}", bucket2.getKeyAsString());, +        assertEquals(0, bucket2.getAggregations().asList().size());, +    }, +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java, +import org.elasticsearch.search.aggregations.AggregationBuilders;, +import org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregation;, +import org.elasticsearch.search.aggregations.bucket.composite.CompositeValuesSourceBuilder;, +import org.elasticsearch.search.aggregations.bucket.composite.TermsValuesSourceBuilder;, +    public void testSearchWithCompositeAgg() throws IOException {, +        SearchRequest searchRequest = new SearchRequest();, +        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();, +        List<CompositeValuesSourceBuilder<?>> sources, +            = Collections.singletonList(new TermsValuesSourceBuilder("terms").field("type.keyword").missingBucket(true).order("asc"));, +        searchSourceBuilder.aggregation(AggregationBuilders.composite("composite", sources));, +        searchSourceBuilder.size(0);, +        searchRequest.source(searchSourceBuilder);, +        searchRequest.indices("index");, +        SearchResponse searchResponse = execute(searchRequest, highLevelClient()::search, highLevelClient()::searchAsync);, +        assertSearchHeader(searchResponse);, +        assertNull(searchResponse.getSuggest());, +        assertEquals(Collections.emptyMap(), searchResponse.getProfileResults());, +        assertEquals(0, searchResponse.getHits().getHits().length);, +        assertEquals(Float.NaN, searchResponse.getHits().getMaxScore(), 0f);, +        CompositeAggregation compositeAgg = searchResponse.getAggregations().get("composite");, +        assertEquals("composite", compositeAgg.getName());, +        assertEquals(2, compositeAgg.getBuckets().size());, +        CompositeAggregation.Bucket bucket1 = compositeAgg.getBuckets().get(0);, +        assertEquals(3, bucket1.getDocCount());, +        assertEquals("{terms=type1}", bucket1.getKeyAsString());, +        assertEquals(0, bucket1.getAggregations().asList().size());, +        CompositeAggregation.Bucket bucket2 = compositeAgg.getBuckets().get(1);, +        assertEquals(2, bucket2.getDocCount());, +        assertEquals("{terms=type2}", bucket2.getKeyAsString());, +        assertEquals(0, bucket2.getAggregations().asList().size());, +    }, +, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilders.java, +import org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregationBuilder;, +import org.elasticsearch.search.aggregations.bucket.composite.CompositeValuesSourceBuilder;, +import java.util.List;, +, +    /**, +     * Create a new {@link CompositeAggregationBuilder} aggregation with the given name., +     */, +    public static CompositeAggregationBuilder composite(String name, List<CompositeValuesSourceBuilder<?>> sources) {, +        return new CompositeAggregationBuilder(name, sources);, +    }]