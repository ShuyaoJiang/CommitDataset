[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocation.java, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.settings.Settings;, +public abstract class NodeAllocation extends AbstractComponent {, +    public static enum Decision {, +    protected NodeAllocation(Settings settings) {, +        super(settings);, +    }, +    public boolean allocate(NodeAllocations nodeAllocations, RoutingNodes routingNodes, DiscoveryNodes nodes) {, +        return false;, +    }, +, +    public boolean canRebalance(ShardRouting shardRouting, RoutingNodes routingNodes, DiscoveryNodes nodes) {, +        return true;, +    }, +, +    public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingNodes routingNodes) {, +        return Decision.YES;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocation.java, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.settings.Settings;, +public abstract class NodeAllocation extends AbstractComponent {, +    public static enum Decision {, +    protected NodeAllocation(Settings settings) {, +        super(settings);, +    }, +    public boolean allocate(NodeAllocations nodeAllocations, RoutingNodes routingNodes, DiscoveryNodes nodes) {, +        return false;, +    }, +, +    public boolean canRebalance(ShardRouting shardRouting, RoutingNodes routingNodes, DiscoveryNodes nodes) {, +        return true;, +    }, +, +    public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingNodes routingNodes) {, +        return Decision.YES;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +public class NodeAllocations extends NodeAllocation {, +                .add(new RebalanceOnlyWhenActiveNodeAllocation(settings)), +    @Override public boolean canRebalance(ShardRouting shardRouting, RoutingNodes routingNodes, DiscoveryNodes nodes) {, +        for (NodeAllocation allocation : allocations) {, +            if (!allocation.canRebalance(shardRouting, routingNodes, nodes)) {, +                return false;, +            }, +        }, +        return true;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocation.java, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.settings.Settings;, +public abstract class NodeAllocation extends AbstractComponent {, +    public static enum Decision {, +    protected NodeAllocation(Settings settings) {, +        super(settings);, +    }, +    public boolean allocate(NodeAllocations nodeAllocations, RoutingNodes routingNodes, DiscoveryNodes nodes) {, +        return false;, +    }, +, +    public boolean canRebalance(ShardRouting shardRouting, RoutingNodes routingNodes, DiscoveryNodes nodes) {, +        return true;, +    }, +, +    public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingNodes routingNodes) {, +        return Decision.YES;, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/NodeAllocations.java, +public class NodeAllocations extends NodeAllocation {, +                .add(new RebalanceOnlyWhenActiveNodeAllocation(settings)), +    @Override public boolean canRebalance(ShardRouting shardRouting, RoutingNodes routingNodes, DiscoveryNodes nodes) {, +        for (NodeAllocation allocation : allocations) {, +            if (!allocation.canRebalance(shardRouting, routingNodes, nodes)) {, +                return false;, +            }, +        }, +        return true;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/allocation/RebalanceOnlyWhenActiveNodeAllocation.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */]