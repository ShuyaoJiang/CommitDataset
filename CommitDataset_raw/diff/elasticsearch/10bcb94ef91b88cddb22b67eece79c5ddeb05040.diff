[+++ b/x-pack/qa/rolling-upgrade-multi-cluster/build.gradle, +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +++ b/x-pack/qa/rolling-upgrade-multi-cluster/build.gradle, +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +++ b/x-pack/qa/rolling-upgrade-multi-cluster/src/test/java/org/elasticsearch/upgrades/AbstractMultiClusterUpgradeTestCase.java, +import org.elasticsearch.Version;, +    protected static final Version UPGRADE_FROM_VERSION =, +        Version.fromString(System.getProperty("tests.upgrade_from_version"));, +, +++ b/x-pack/qa/rolling-upgrade-multi-cluster/build.gradle, +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +        systemProperty 'tests.upgrade_from_version', version.toString().replace('-SNAPSHOT', ''), +++ b/x-pack/qa/rolling-upgrade-multi-cluster/src/test/java/org/elasticsearch/upgrades/AbstractMultiClusterUpgradeTestCase.java, +import org.elasticsearch.Version;, +    protected static final Version UPGRADE_FROM_VERSION =, +        Version.fromString(System.getProperty("tests.upgrade_from_version"));, +, +++ b/x-pack/qa/rolling-upgrade-multi-cluster/src/test/java/org/elasticsearch/upgrades/CcrRollingUpgradeIT.java, +import org.elasticsearch.common.xcontent.ObjectPath;, +    public void testAutoFollowing() throws Exception {, +        final Settings indexSettings = Settings.builder(), +            .put("index.soft_deletes.enabled", true), +            .put("index.number_of_shards", 1), +            .build();, +, +        String leaderIndex1 = "logs-20200101";, +        String leaderIndex2 = "logs-20200102";, +        String leaderIndex3 = "logs-20200103";, +, +        if (clusterName == ClusterName.LEADER) {, +            switch (upgradeState) {, +                case NONE:, +                case ONE_THIRD:, +                case TWO_THIRD:, +                    break;, +                case ALL:, +                    index(leaderClient(), leaderIndex1, 64);, +                    assertBusy(() -> {, +                        String followerIndex = "copy-" + leaderIndex1;, +                        assertTotalHitCount(followerIndex, 320, followerClient());, +                    });, +                    index(leaderClient(), leaderIndex2, 64);, +                    assertBusy(() -> {, +                        String followerIndex = "copy-" + leaderIndex2;, +                        assertTotalHitCount(followerIndex, 256, followerClient());, +                    });, +                    index(leaderClient(), leaderIndex3, 64);, +                    assertBusy(() -> {, +                        String followerIndex = "copy-" + leaderIndex3;, +                        assertTotalHitCount(followerIndex, 192, followerClient());, +                    });, +, +                    deleteAutoFollowPattern(followerClient(), "test_pattern");, +                    stopIndexFollowing(followerClient(), "copy-" + leaderIndex1);, +                    stopIndexFollowing(followerClient(), "copy-" + leaderIndex2);, +                    stopIndexFollowing(followerClient(), "copy-" + leaderIndex3);, +                    break;, +                default:, +                    throw new AssertionError("unexpected upgrade_state [" + upgradeState + "]");, +            }, +        } else if (clusterName == ClusterName.FOLLOWER) {, +            switch (upgradeState) {, +                case NONE:, +                    putAutoFollowPattern(followerClient(), "test_pattern", "leader", "logs-*");, +                    createIndex(leaderIndex1, indexSettings);, +                    index(leaderClient(), leaderIndex1, 64);, +                    assertBusy(() -> {, +                        String followerIndex = "copy-" + leaderIndex1;, +                        assertThat(getNumberOfSuccessfulFollowedIndices(), equalTo(1));, +                        assertTotalHitCount(followerIndex, 64, followerClient());, +                    });, +                    break;, +                case ONE_THIRD:, +                    index(leaderClient(), leaderIndex1, 64);, +                    assertBusy(() -> {, +                        String followerIndex = "copy-" + leaderIndex1;, +                        assertTotalHitCount(followerIndex, 128, followerClient());, +                    });, +                    // Auto follow stats are kept in-memory on master elected node, +                    // and if this node get updated then auto follow stats are reset]