[+++ b/docs/reference/rest-api/info.asciidoc, +++ b/docs/reference/rest-api/info.asciidoc, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java, +import org.apache.logging.log4j.core.Appender;, +import org.apache.logging.log4j.core.LogEvent;, +import org.apache.logging.log4j.core.appender.AbstractAppender;, +import org.apache.logging.log4j.core.layout.PatternLayout;, +    private static final Collection<String> nettyLoggedLeaks = new ArrayList<>();, +, +        // Enable Netty leak detection and monitor logger for logged leak errors, +        System.setProperty("io.netty.leakDetection.level", "advanced");, +        String leakLoggerName = "io.netty.util.ResourceLeakDetector";, +        Logger leakLogger = LogManager.getLogger(leakLoggerName);, +        Appender leakAppender = new AbstractAppender(leakLoggerName, null,, +            PatternLayout.newBuilder().withPattern("%m").build()) {, +            @Override, +            public void append(LogEvent event) {, +                String message = event.getMessage().getFormattedMessage();, +                if (Level.ERROR.equals(event.getLevel()) && message.contains("LEAK:")) {, +                    synchronized (nettyLoggedLeaks) {, +                        nettyLoggedLeaks.add(message);, +                    }, +                }, +            }, +        };, +        leakAppender.start();, +        Loggers.addAppender(leakLogger, leakAppender);, +, +            leakAppender.stop();, +        synchronized (nettyLoggedLeaks) {, +            try {, +                assertThat(nettyLoggedLeaks, empty());, +            } finally {, +                nettyLoggedLeaks.clear();, +            }, +        }, +++ b/docs/reference/rest-api/info.asciidoc, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java, +import org.apache.logging.log4j.core.Appender;, +import org.apache.logging.log4j.core.LogEvent;, +import org.apache.logging.log4j.core.appender.AbstractAppender;, +import org.apache.logging.log4j.core.layout.PatternLayout;, +    private static final Collection<String> nettyLoggedLeaks = new ArrayList<>();, +, +        // Enable Netty leak detection and monitor logger for logged leak errors, +        System.setProperty("io.netty.leakDetection.level", "advanced");, +        String leakLoggerName = "io.netty.util.ResourceLeakDetector";, +        Logger leakLogger = LogManager.getLogger(leakLoggerName);, +        Appender leakAppender = new AbstractAppender(leakLoggerName, null,, +            PatternLayout.newBuilder().withPattern("%m").build()) {, +            @Override, +            public void append(LogEvent event) {, +                String message = event.getMessage().getFormattedMessage();, +                if (Level.ERROR.equals(event.getLevel()) && message.contains("LEAK:")) {, +                    synchronized (nettyLoggedLeaks) {, +                        nettyLoggedLeaks.add(message);, +                    }, +                }, +            }, +        };, +        leakAppender.start();, +        Loggers.addAppender(leakLogger, leakAppender);, +, +            leakAppender.stop();, +        synchronized (nettyLoggedLeaks) {, +            try {, +                assertThat(nettyLoggedLeaks, empty());, +            } finally {, +                nettyLoggedLeaks.clear();, +            }, +        }, +++ /dev/null, +++ b/docs/reference/rest-api/info.asciidoc, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java, +import org.apache.logging.log4j.core.Appender;, +import org.apache.logging.log4j.core.LogEvent;, +import org.apache.logging.log4j.core.appender.AbstractAppender;, +import org.apache.logging.log4j.core.layout.PatternLayout;, +    private static final Collection<String> nettyLoggedLeaks = new ArrayList<>();, +, +        // Enable Netty leak detection and monitor logger for logged leak errors, +        System.setProperty("io.netty.leakDetection.level", "advanced");, +        String leakLoggerName = "io.netty.util.ResourceLeakDetector";, +        Logger leakLogger = LogManager.getLogger(leakLoggerName);, +        Appender leakAppender = new AbstractAppender(leakLoggerName, null,, +            PatternLayout.newBuilder().withPattern("%m").build()) {, +            @Override, +            public void append(LogEvent event) {, +                String message = event.getMessage().getFormattedMessage();, +                if (Level.ERROR.equals(event.getLevel()) && message.contains("LEAK:")) {, +                    synchronized (nettyLoggedLeaks) {, +                        nettyLoggedLeaks.add(message);, +                    }, +                }, +            }, +        };, +        leakAppender.start();, +        Loggers.addAppender(leakLogger, leakAppender);, +, +            leakAppender.stop();]