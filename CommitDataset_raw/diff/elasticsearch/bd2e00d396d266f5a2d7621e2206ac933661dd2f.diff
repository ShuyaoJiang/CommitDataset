[+++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private List<AggregatorBuilder<?>> aggregationBuilders;, +    private List<PipelineAggregatorBuilder> pipelineAggregationBuilders;, +        if (aggregationBuilders == null) {, +            aggregationBuilders = new ArrayList<>();, +        aggregationBuilders.add(aggregationBuilder);, +        if (pipelineAggregationBuilders == null) {, +            pipelineAggregationBuilders = new ArrayList<>();, +        pipelineAggregationBuilders.add(aggregationBuilder);, +        if (aggregationBuilders != null || pipelineAggregationBuilders != null) {, +            if (aggregationBuilders != null) {, +                for (AggregatorBuilder<?> aggregation : aggregationBuilders) {, +            if (pipelineAggregationBuilders != null) {, +                for (PipelineAggregatorBuilder aggregation : pipelineAggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private List<AggregatorBuilder<?>> aggregationBuilders;, +    private List<PipelineAggregatorBuilder> pipelineAggregationBuilders;, +        if (aggregationBuilders == null) {, +            aggregationBuilders = new ArrayList<>();, +        aggregationBuilders.add(aggregationBuilder);, +        if (pipelineAggregationBuilders == null) {, +            pipelineAggregationBuilders = new ArrayList<>();, +        pipelineAggregationBuilders.add(aggregationBuilder);, +        if (aggregationBuilders != null || pipelineAggregationBuilders != null) {, +            if (aggregationBuilders != null) {, +                for (AggregatorBuilder<?> aggregation : aggregationBuilders) {, +            if (pipelineAggregationBuilders != null) {, +                for (PipelineAggregatorBuilder aggregation : pipelineAggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +    public void writeAggregatorBuilder(AggregatorBuilder<?> builder) throws IOException {, +        writeNamedWriteable(builder);, +    public void writePipelineAggregatorBuilder(PipelineAggregatorBuilder<?> builder) throws IOException {, +        writeNamedWriteable(builder);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private List<AggregatorBuilder<?>> aggregationBuilders;, +    private List<PipelineAggregatorBuilder> pipelineAggregationBuilders;, +        if (aggregationBuilders == null) {, +            aggregationBuilders = new ArrayList<>();, +        aggregationBuilders.add(aggregationBuilder);, +        if (pipelineAggregationBuilders == null) {, +            pipelineAggregationBuilders = new ArrayList<>();, +        pipelineAggregationBuilders.add(aggregationBuilder);, +        if (aggregationBuilders != null || pipelineAggregationBuilders != null) {, +            if (aggregationBuilders != null) {, +                for (AggregatorBuilder<?> aggregation : aggregationBuilders) {, +            if (pipelineAggregationBuilders != null) {, +                for (PipelineAggregatorBuilder aggregation : pipelineAggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +    public void writeAggregatorBuilder(AggregatorBuilder<?> builder) throws IOException {, +        writeNamedWriteable(builder);, +    public void writePipelineAggregatorBuilder(PipelineAggregatorBuilder<?> builder) throws IOException {, +        writeNamedWriteable(builder);, +++ b/core/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +                // prevent easy OOM if more than the total number of docs that, +                // exist is requested..., +                    // No sort or tracking scores was provided, so use special, +                    // value to indicate to not show the scores:, +                    InternalAggregation newAgg = pipelineAggregator.doReduce(new InternalAggregations(newAggs),, +                            new InternalAggregation.ReduceContext(bigArrays, scriptService));, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private List<AggregatorBuilder<?>> aggregationBuilders;, +    private List<PipelineAggregatorBuilder> pipelineAggregationBuilders;, +        if (aggregationBuilders == null) {, +            aggregationBuilders = new ArrayList<>();, +        aggregationBuilders.add(aggregationBuilder);, +        if (pipelineAggregationBuilders == null) {, +            pipelineAggregationBuilders = new ArrayList<>();, +        pipelineAggregationBuilders.add(aggregationBuilder);, +        if (aggregationBuilders != null || pipelineAggregationBuilders != null) {, +            if (aggregationBuilders != null) {, +                for (AggregatorBuilder<?> aggregation : aggregationBuilders) {, +            if (pipelineAggregationBuilders != null) {, +                for (PipelineAggregatorBuilder aggregation : pipelineAggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +    public void writeAggregatorBuilder(AggregatorBuilder<?> builder) throws IOException {, +        writeNamedWriteable(builder);, +    public void writePipelineAggregatorBuilder(PipelineAggregatorBuilder<?> builder) throws IOException {, +        writeNamedWriteable(builder);, +++ b/core/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +                // prevent easy OOM if more than the total number of docs that, +                // exist is requested..., +                    // No sort or tracking scores was provided, so use special, +                    // value to indicate to not show the scores:, +                    InternalAggregation newAgg = pipelineAggregator.doReduce(new InternalAggregations(newAggs),, +                            new InternalAggregation.ReduceContext(bigArrays, scriptService));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +        private final List<PipelineAggregatorBuilder<?>> pipelineAggregatorBuilders = new ArrayList<>();, +            this.pipelineAggregatorBuilders.add(pipelineAggregatorFactory);, +            if (aggregatorBuilders.isEmpty() && pipelineAggregatorBuilders.isEmpty()) {, +                orderedpipelineAggregators = new ArrayList<>(pipelineAggregatorBuilders);, +                orderedpipelineAggregators = resolvePipelineAggregatorOrder(this.pipelineAggregatorBuilders, this.aggregatorBuilders);, +                List<PipelineAggregatorBuilder<?>> pipelineAggregatorBuilders, List<AggregatorBuilder<?>> aggBuilders) {, +            Map<String, PipelineAggregatorBuilder<?>> pipelineAggregatorBuildersMap = new HashMap<>();, +            for (PipelineAggregatorBuilder<?> builder : pipelineAggregatorBuilders) {, +                pipelineAggregatorBuildersMap.put(builder.getName(), builder);, +            Map<String, AggregatorBuilder<?>> aggBuildersMap = new HashMap<>();, +            for (AggregatorBuilder<?> aggBuilder : aggBuilders) {, +                aggBuildersMap.put(aggBuilder.name, aggBuilder);, +            List<PipelineAggregatorBuilder<?>> unmarkedBuilders = new ArrayList<PipelineAggregatorBuilder<?>>(pipelineAggregatorBuilders);, +            while (!unmarkedBuilders.isEmpty()) {]