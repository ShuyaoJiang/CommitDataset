[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                    String fileName = PathUtils.get(url.toURI()).getFileName().toString();, +                    if (fileName.endsWith(".jar") == false) {, +                    // We attempt to use a versionless identifier for each codebase. This assumes a specific version, +                    // format in the jar filename. While we cannot ensure all jars in all plugins use this format, nonconformity, +                    // only means policy grants would need to include the entire jar filename as they always have before., +                    String property = "codebase." + fileName;, +                    String aliasProperty = "codebase." + fileName.replaceFirst("-\\d+\\.\\d+.*\\.jar", "");, +                    if (aliasProperty.equals(property) == false) {, +                        propertiesSet.add(aliasProperty);, +                        String previous = System.setProperty(aliasProperty, url.toString());, +                        if (previous != null) {, +                            throw new IllegalStateException("codebase property already set: " + aliasProperty + " -> " + previous +, +                                                            ", cannot set to " + url.toString());, +                        }, +                        throw new IllegalStateException("codebase property already set: " + property + " -> " + previous +, +                                                        ", cannot set to " + url.toString());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                    String fileName = PathUtils.get(url.toURI()).getFileName().toString();, +                    if (fileName.endsWith(".jar") == false) {, +                    // We attempt to use a versionless identifier for each codebase. This assumes a specific version, +                    // format in the jar filename. While we cannot ensure all jars in all plugins use this format, nonconformity, +                    // only means policy grants would need to include the entire jar filename as they always have before., +                    String property = "codebase." + fileName;, +                    String aliasProperty = "codebase." + fileName.replaceFirst("-\\d+\\.\\d+.*\\.jar", "");, +                    if (aliasProperty.equals(property) == false) {, +                        propertiesSet.add(aliasProperty);, +                        String previous = System.setProperty(aliasProperty, url.toString());, +                        if (previous != null) {, +                            throw new IllegalStateException("codebase property already set: " + aliasProperty + " -> " + previous +, +                                                            ", cannot set to " + url.toString());, +                        }, +                        throw new IllegalStateException("codebase property already set: " + property + " -> " + previous +, +                                                        ", cannot set to " + url.toString());, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +grant codeBase "${codebase.securesm}" {, +grant codeBase "${codebase.lucene-core}" {, +grant codeBase "${codebase.lucene-misc}" {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                    String fileName = PathUtils.get(url.toURI()).getFileName().toString();, +                    if (fileName.endsWith(".jar") == false) {, +                    // We attempt to use a versionless identifier for each codebase. This assumes a specific version, +                    // format in the jar filename. While we cannot ensure all jars in all plugins use this format, nonconformity, +                    // only means policy grants would need to include the entire jar filename as they always have before., +                    String property = "codebase." + fileName;, +                    String aliasProperty = "codebase." + fileName.replaceFirst("-\\d+\\.\\d+.*\\.jar", "");, +                    if (aliasProperty.equals(property) == false) {, +                        propertiesSet.add(aliasProperty);, +                        String previous = System.setProperty(aliasProperty, url.toString());, +                        if (previous != null) {, +                            throw new IllegalStateException("codebase property already set: " + aliasProperty + " -> " + previous +, +                                                            ", cannot set to " + url.toString());, +                        }, +                        throw new IllegalStateException("codebase property already set: " + property + " -> " + previous +, +                                                        ", cannot set to " + url.toString());, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +grant codeBase "${codebase.securesm}" {, +grant codeBase "${codebase.lucene-core}" {, +grant codeBase "${codebase.lucene-misc}" {, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/test-framework.policy, +grant codeBase "${codebase.securemock}" {, +grant codeBase "${codebase.lucene-test-framework}" {, +grant codeBase "${codebase.randomizedtesting-runner}" {, +grant codeBase "${codebase.junit}" {, +grant codeBase "${codebase.mocksocket}" {, +grant codeBase "${codebase.httpcore-nio}" {, +grant codeBase "${codebase.httpasyncclient}" {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                    String fileName = PathUtils.get(url.toURI()).getFileName().toString();, +                    if (fileName.endsWith(".jar") == false) {, +                    // We attempt to use a versionless identifier for each codebase. This assumes a specific version, +                    // format in the jar filename. While we cannot ensure all jars in all plugins use this format, nonconformity, +                    // only means policy grants would need to include the entire jar filename as they always have before., +                    String property = "codebase." + fileName;, +                    String aliasProperty = "codebase." + fileName.replaceFirst("-\\d+\\.\\d+.*\\.jar", "");, +                    if (aliasProperty.equals(property) == false) {, +                        propertiesSet.add(aliasProperty);, +                        String previous = System.setProperty(aliasProperty, url.toString());, +                        if (previous != null) {, +                            throw new IllegalStateException("codebase property already set: " + aliasProperty + " -> " + previous +, +                                                            ", cannot set to " + url.toString());, +                        }, +                        throw new IllegalStateException("codebase property already set: " + property + " -> " + previous +, +                                                        ", cannot set to " + url.toString());, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +grant codeBase "${codebase.securesm}" {, +grant codeBase "${codebase.lucene-core}" {, +grant codeBase "${codebase.lucene-misc}" {, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/test-framework.policy, +grant codeBase "${codebase.securemock}" {, +grant codeBase "${codebase.lucene-test-framework}" {, +grant codeBase "${codebase.randomizedtesting-runner}" {, +grant codeBase "${codebase.junit}" {, +grant codeBase "${codebase.mocksocket}" {, +grant codeBase "${codebase.httpcore-nio}" {, +grant codeBase "${codebase.httpasyncclient}" {, +++ b/modules/reindex/src/main/plugin-metadata/plugin-security.policy, +grant codeBase "${codebase.httpasyncclient}" {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +                    String fileName = PathUtils.get(url.toURI()).getFileName().toString();]