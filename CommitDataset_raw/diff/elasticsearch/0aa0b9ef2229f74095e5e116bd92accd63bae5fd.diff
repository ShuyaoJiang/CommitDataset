[+++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +            XContentHelper.update(updatedSourceAsMap, indexRequest.underlyingSourceAsMap());, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +            XContentHelper.update(updatedSourceAsMap, indexRequest.underlyingSourceAsMap());, +++ b/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +        routing = in.readOptionalUTF();, +        script = in.readOptionalUTF();, +        scriptLang = in.readOptionalUTF();, +        percolate = in.readOptionalUTF();, +        out.writeOptionalUTF(routing);, +        out.writeOptionalUTF(script);, +        out.writeOptionalUTF(scriptLang);, +        out.writeOptionalUTF(percolate);, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +            XContentHelper.update(updatedSourceAsMap, indexRequest.underlyingSourceAsMap());, +++ b/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +        routing = in.readOptionalUTF();, +        script = in.readOptionalUTF();, +        scriptLang = in.readOptionalUTF();, +        percolate = in.readOptionalUTF();, +        out.writeOptionalUTF(routing);, +        out.writeOptionalUTF(script);, +        out.writeOptionalUTF(scriptLang);, +        out.writeOptionalUTF(percolate);, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +@SuppressWarnings("unchecked"), +     * Updates the provided changes into the source. If the key exists in the changes, it overrides the one in source, +     * unless both are Maps, in which case it recuersively updated it., +     */, +    public static void update(Map<String, Object> source, Map<String, Object> changes) {, +        for (Map.Entry<String, Object> changesEntry : changes.entrySet()) {, +            if (!source.containsKey(changesEntry.getKey())) {, +                // safe to copy, change does not exist in source, +                source.put(changesEntry.getKey(), changesEntry.getValue());, +            } else {, +                if (source.get(changesEntry.getKey()) instanceof Map && changesEntry.getValue() instanceof Map) {, +                    // recursive merge maps, +                    update((Map<String, Object>) source.get(changesEntry.getKey()), (Map<String, Object>) changesEntry.getValue());, +                } else {, +                    // update the field, +                    source.put(changesEntry.getKey(), changesEntry.getValue());, +                }, +            }, +        }, +    }, +, +    /**]