[+++ b/dev-tools/prepare_release_candidate.py, +    bin/elasticsearch-plugin -Des.plugins.staging=true install cloud-aws, +++ b/dev-tools/prepare_release_candidate.py, +    bin/elasticsearch-plugin -Des.plugins.staging=true install cloud-aws, +++ b/dev-tools/smoke_test_rc.py, +      run('%s; %s -Des.plugins.staging=true %s %s' % (java_exe(), es_plugin_path, 'install -b', plugin)), +++ b/dev-tools/prepare_release_candidate.py, +    bin/elasticsearch-plugin -Des.plugins.staging=true install cloud-aws, +++ b/dev-tools/smoke_test_rc.py, +      run('%s; %s -Des.plugins.staging=true %s %s' % (java_exe(), es_plugin_path, 'install -b', plugin)), +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ScoreTests.java, +import java.io.IOException;, +import java.util.Collections;, +import java.util.concurrent.atomic.AtomicBoolean;, +import org.apache.lucene.search.DocIdSetIterator;, +import org.apache.lucene.search.Scorer;, +public class ScoreTests extends ScriptTestCase {, +, +    /** Most of a dummy scorer impl that requires overriding just score(). */, +    abstract class MockScorer extends Scorer {, +        MockScorer() {, +            super(null);, +        }, +        public int docID() {, +            return 0;, +        }, +        @Override, +        public int freq() throws IOException {, +            throw new UnsupportedOperationException();, +        }, +        @Override, +        public DocIdSetIterator iterator() {, +            throw new UnsupportedOperationException();, +        }, +    public void testScoreWorks() {, +        assertEquals(2.5, exec("_score", Collections.emptyMap(), Collections.emptyMap(),, +            new MockScorer() {, +                @Override, +                public float score() throws IOException {, +                    return 2.5f;, +                }, +            }));, +    public void testScoreNotUsed() {, +        assertEquals(3.5, exec("3.5", Collections.emptyMap(), Collections.emptyMap(),, +            new MockScorer() {, +                @Override, +                public float score() throws IOException {, +                    throw new AssertionError("score() should not be called");, +                }, +            }));, +    }, +, +    public void testScoreCached() {, +        assertEquals(9.0, exec("_score + _score", Collections.emptyMap(), Collections.emptyMap(),, +            new MockScorer() {, +                private boolean used = false;, +                @Override, +                public float score() throws IOException {, +                    if (used == false) {, +                        return 4.5f;, +                    }, +                    throw new AssertionError("score() should not be called twice");, +                }, +            }));, +++ b/dev-tools/prepare_release_candidate.py, +    bin/elasticsearch-plugin -Des.plugins.staging=true install cloud-aws, +++ b/dev-tools/smoke_test_rc.py, +      run('%s; %s -Des.plugins.staging=true %s %s' % (java_exe(), es_plugin_path, 'install -b', plugin)), +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/ScoreTests.java, +import java.io.IOException;, +import java.util.Collections;, +import java.util.concurrent.atomic.AtomicBoolean;, +import org.apache.lucene.search.DocIdSetIterator;, +import org.apache.lucene.search.Scorer;, +public class ScoreTests extends ScriptTestCase {, +, +    /** Most of a dummy scorer impl that requires overriding just score(). */, +    abstract class MockScorer extends Scorer {, +        MockScorer() {, +            super(null);, +        }, +        public int docID() {, +            return 0;, +        }, +        @Override, +        public int freq() throws IOException {, +            throw new UnsupportedOperationException();, +        }, +        @Override, +        public DocIdSetIterator iterator() {, +            throw new UnsupportedOperationException();, +        }, +    public void testScoreWorks() {, +        assertEquals(2.5, exec("_score", Collections.emptyMap(), Collections.emptyMap(),, +            new MockScorer() {, +                @Override, +                public float score() throws IOException {, +                    return 2.5f;, +                }, +            }));]