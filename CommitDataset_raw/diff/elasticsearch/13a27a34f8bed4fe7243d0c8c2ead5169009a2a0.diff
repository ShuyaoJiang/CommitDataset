[+++ b/client/src/test/java/org/elasticsearch/client/RestClientIntegTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.client;, +, +import com.carrotsearch.randomizedtesting.generators.RandomInts;, +import com.carrotsearch.randomizedtesting.generators.RandomStrings;, +import com.sun.net.httpserver.Headers;, +import com.sun.net.httpserver.HttpExchange;, +import com.sun.net.httpserver.HttpHandler;, +import com.sun.net.httpserver.HttpServer;, +import org.apache.http.Consts;, +import org.apache.http.Header;, +import org.apache.http.HttpHost;, +import org.apache.http.entity.StringEntity;, +import org.apache.http.message.BasicHeader;, +import org.apache.http.util.EntityUtils;, +import org.apache.lucene.util.LuceneTestCase;, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.OutputStream;, +import java.net.InetSocketAddress;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import static org.elasticsearch.client.RestClientTestUtil.getAllStatusCodes;, +import static org.elasticsearch.client.RestClientTestUtil.getHttpMethods;, +import static org.elasticsearch.client.RestClientTestUtil.randomStatusCode;, +import static org.hamcrest.CoreMatchers.equalTo;, +, +/**, + * Integration test to check interaction between {@link RestClient} and {@link org.apache.http.client.HttpClient}., + * Works against a real http server, one single host., + */, +public class RestClientIntegTests extends LuceneTestCase {, +, +    private static HttpServer httpServer;, +    private static RestClient restClient;, +    private static Header[] defaultHeaders;, +, +    @BeforeClass, +    public static void startHttpServer() throws Exception {, +        httpServer = HttpServer.create(new InetSocketAddress(0), 0);, +        httpServer.start();, +        //returns a different status code depending on the path, +        for (int statusCode : getAllStatusCodes()) {, +            createStatusCodeContext(httpServer, statusCode);, +        }, +        int numHeaders = RandomInts.randomIntBetween(random(), 0, 3);, +        defaultHeaders = new Header[numHeaders];, +        for (int i = 0; i < numHeaders; i++) {, +            String headerName = "Header-default" + (random().nextBoolean() ? i : "");, +            String headerValue = RandomStrings.randomAsciiOfLengthBetween(random(), 3, 10);, +            defaultHeaders[i] = new BasicHeader(headerName, headerValue);, +        }, +        restClient = RestClient.builder().setDefaultHeaders(defaultHeaders), +                .setHosts(new HttpHost(httpServer.getAddress().getHostName(), httpServer.getAddress().getPort())).build();, +    }, +, +    private static void createStatusCodeContext(HttpServer httpServer, final int statusCode) {, +        httpServer.createContext("/" + statusCode, new HttpHandler() {, +            @Override, +            public void handle(HttpExchange httpExchange) throws IOException {, +                StringBuilder body = new StringBuilder();, +                try (InputStreamReader reader = new InputStreamReader(httpExchange.getRequestBody(), Consts.UTF_8)) {, +                    char[] buffer = new char[256];, +                    int read;, +                    while ((read = reader.read(buffer)) != -1) {, +                        body.append(buffer, 0, read);, +                    }, +                }, +                Headers requestHeaders = httpExchange.getRequestHeaders();, +                Headers responseHeaders = httpExchange.getResponseHeaders();, +                for (Map.Entry<String, List<String>> header : requestHeaders.entrySet()) {, +                    responseHeaders.put(header.getKey(), header.getValue());]