[+++ b/docs/reference/search/aggregations/bucket/significantterms-aggregation.asciidoc, +coming[1.2.0] If set to `0`, the `size` will be set to `Integer.MAX_VALUE`., +, +will cause extra network traffic and RAM usage so this is  quality/cost trade off that needs to be balanced.  If `shard_size` is set to -1 (the default) then `shard_size` will be automatically estimated based on the number of shards and the `size` parameter. , +, +, +coming[1.2.0] If set to `0`, the `shard_size` will be set to `Integer.MAX_VALUE`., + , +coming[1.2.0] `shard_min_doc_count` parameter, +, +++ b/docs/reference/search/aggregations/bucket/significantterms-aggregation.asciidoc, +coming[1.2.0] If set to `0`, the `size` will be set to `Integer.MAX_VALUE`., +, +will cause extra network traffic and RAM usage so this is  quality/cost trade off that needs to be balanced.  If `shard_size` is set to -1 (the default) then `shard_size` will be automatically estimated based on the number of shards and the `size` parameter. , +, +, +coming[1.2.0] If set to `0`, the `shard_size` will be set to `Integer.MAX_VALUE`., + , +coming[1.2.0] `shard_min_doc_count` parameter, +, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +size buckets was not returned). If set to `0`, the `size` will be set to `Integer.MAX_VALUE`., +, +the client. If set to `0`, the `shard_size` will be set to `Integer.MAX_VALUE`., +, +, +Terms are collected and ordered on a shard level and merged with the terms collected from other shards in a second step. However, the shard does not have the information about the global document count available. The decision if a term is added to a candidate list depends only on the order computed on the shard using local shard frequencies. The `min_doc_count` criterion is only applied after merging local terms statistics of all shards. In a way the decision to add the term as a candidate is made without being very _certain_ about if the term will actually reach the required `min_doc_count`. This might cause many (globally) high frequent terms to be missing in the final result if low frequent terms populated the candidate lists. To avoid this, the `shard_size` parameter can be increased to allow more candidate terms on the shards. However, this increases memory consumption and network traffic., +, +coming[1.2.0] `shard_min_doc_count` parameter, +, +The parameter `shard_min_doc_count` regulates the _certainty_ a shard has if the term should actually be added to the candidate list or not with respect to the `min_doc_count`. Terms will only be considered if their local shard frequency within the set is higher than the `shard_min_doc_count`. If your dictionary contains many low frequent terms and you are not interested in those (for example misspellings), then you can set the `shard_min_doc_count` parameter to filter out candidate terms on a shard level that will with a resonable certainty not reach the required `min_doc_count` even after merging the local counts. `shard_min_doc_count` is set to `0` per default and has no effect unless you explicitly set it., +, +, +, +         Setting `shard_min_doc_count` too high will cause terms to be filtered out on a shard level. This value should be set much lower than `min_doc_count/#shards`., +++ b/docs/reference/search/aggregations/bucket/significantterms-aggregation.asciidoc, +coming[1.2.0] If set to `0`, the `size` will be set to `Integer.MAX_VALUE`., +, +will cause extra network traffic and RAM usage so this is  quality/cost trade off that needs to be balanced.  If `shard_size` is set to -1 (the default) then `shard_size` will be automatically estimated based on the number of shards and the `size` parameter. , +, +, +coming[1.2.0] If set to `0`, the `shard_size` will be set to `Integer.MAX_VALUE`., + , +coming[1.2.0] `shard_min_doc_count` parameter, +, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +size buckets was not returned). If set to `0`, the `size` will be set to `Integer.MAX_VALUE`., +, +the client. If set to `0`, the `shard_size` will be set to `Integer.MAX_VALUE`., +, +, +Terms are collected and ordered on a shard level and merged with the terms collected from other shards in a second step. However, the shard does not have the information about the global document count available. The decision if a term is added to a candidate list depends only on the order computed on the shard using local shard frequencies. The `min_doc_count` criterion is only applied after merging local terms statistics of all shards. In a way the decision to add the term as a candidate is made without being very _certain_ about if the term will actually reach the required `min_doc_count`. This might cause many (globally) high frequent terms to be missing in the final result if low frequent terms populated the candidate lists. To avoid this, the `shard_size` parameter can be increased to allow more candidate terms on the shards. However, this increases memory consumption and network traffic., +, +coming[1.2.0] `shard_min_doc_count` parameter, +, +The parameter `shard_min_doc_count` regulates the _certainty_ a shard has if the term should actually be added to the candidate list or not with respect to the `min_doc_count`. Terms will only be considered if their local shard frequency within the set is higher than the `shard_min_doc_count`. If your dictionary contains many low frequent terms and you are not interested in those (for example misspellings), then you can set the `shard_min_doc_count` parameter to filter out candidate terms on a shard level that will with a resonable certainty not reach the required `min_doc_count` even after merging the local counts. `shard_min_doc_count` is set to `0` per default and has no effect unless you explicitly set it., +, +, +, +         Setting `shard_min_doc_count` too high will cause terms to be filtered out on a shard level. This value should be set much lower than `min_doc_count/#shards`., +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTermsAggregator.java, +            if (bucketCountThresholds.getShardMinDocCount() <= spare.docCount) {, +        }, +++ b/docs/reference/search/aggregations/bucket/significantterms-aggregation.asciidoc, +coming[1.2.0] If set to `0`, the `size` will be set to `Integer.MAX_VALUE`., +, +will cause extra network traffic and RAM usage so this is  quality/cost trade off that needs to be balanced.  If `shard_size` is set to -1 (the default) then `shard_size` will be automatically estimated based on the number of shards and the `size` parameter. , +, +, +coming[1.2.0] If set to `0`, the `shard_size` will be set to `Integer.MAX_VALUE`., + , +coming[1.2.0] `shard_min_doc_count` parameter, +, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +size buckets was not returned). If set to `0`, the `size` will be set to `Integer.MAX_VALUE`., +, +the client. If set to `0`, the `shard_size` will be set to `Integer.MAX_VALUE`., +, +, +Terms are collected and ordered on a shard level and merged with the terms collected from other shards in a second step. However, the shard does not have the information about the global document count available. The decision if a term is added to a candidate list depends only on the order computed on the shard using local shard frequencies. The `min_doc_count` criterion is only applied after merging local terms statistics of all shards. In a way the decision to add the term as a candidate is made without being very _certain_ about if the term will actually reach the required `min_doc_count`. This might cause many (globally) high frequent terms to be missing in the final result if low frequent terms populated the candidate lists. To avoid this, the `shard_size` parameter can be increased to allow more candidate terms on the shards. However, this increases memory consumption and network traffic., +, +coming[1.2.0] `shard_min_doc_count` parameter, +, +The parameter `shard_min_doc_count` regulates the _certainty_ a shard has if the term should actually be added to the candidate list or not with respect to the `min_doc_count`. Terms will only be considered if their local shard frequency within the set is higher than the `shard_min_doc_count`. If your dictionary contains many low frequent terms and you are not interested in those (for example misspellings), then you can set the `shard_min_doc_count` parameter to filter out candidate terms on a shard level that will with a resonable certainty not reach the required `min_doc_count` even after merging the local counts. `shard_min_doc_count` is set to `0` per default and has no effect unless you explicitly set it., +, +, +, +         Setting `shard_min_doc_count` too high will cause terms to be filtered out on a shard level. This value should be set much lower than `min_doc_count/#shards`., +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTermsAggregator.java, +            if (bucketCountThresholds.getShardMinDocCount() <= spare.docCount) {, +        }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java, +            if (bucketCountThresholds.getShardMinDocCount() <= spare.docCount) {, +        }, +++ b/docs/reference/search/aggregations/bucket/significantterms-aggregation.asciidoc, +coming[1.2.0] If set to `0`, the `size` will be set to `Integer.MAX_VALUE`., +, +will cause extra network traffic and RAM usage so this is  quality/cost trade off that needs to be balanced.  If `shard_size` is set to -1 (the default) then `shard_size` will be automatically estimated based on the number of shards and the `size` parameter. , +, +]