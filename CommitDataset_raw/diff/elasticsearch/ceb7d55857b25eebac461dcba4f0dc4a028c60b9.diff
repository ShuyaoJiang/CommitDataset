[+++ b/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java, +import org.elasticsearch.cluster.routing.ShardRouting;, +    private ImmutableMap<ShardRouting, CommonStats> shardStatsMap;, +    public ImmutableMap<ShardRouting, CommonStats> asMap() {, +        if (shardStatsMap == null) {, +            ImmutableMap.Builder<ShardRouting, CommonStats> mb = ImmutableMap.builder();, +                mb.put(ss.getShardRouting(), ss.getStats());, +            shardStatsMap = mb.build();, +        return shardStatsMap;, +++ b/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java, +import org.elasticsearch.cluster.routing.ShardRouting;, +    private ImmutableMap<ShardRouting, CommonStats> shardStatsMap;, +    public ImmutableMap<ShardRouting, CommonStats> asMap() {, +        if (shardStatsMap == null) {, +            ImmutableMap.Builder<ShardRouting, CommonStats> mb = ImmutableMap.builder();, +                mb.put(ss.getShardRouting(), ss.getStats());, +            shardStatsMap = mb.build();, +        return shardStatsMap;, +++ b/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +     *, +++ b/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java, +import org.elasticsearch.cluster.routing.ShardRouting;, +    private ImmutableMap<ShardRouting, CommonStats> shardStatsMap;, +    public ImmutableMap<ShardRouting, CommonStats> asMap() {, +        if (shardStatsMap == null) {, +            ImmutableMap.Builder<ShardRouting, CommonStats> mb = ImmutableMap.builder();, +                mb.put(ss.getShardRouting(), ss.getStats());, +            shardStatsMap = mb.build();, +        return shardStatsMap;, +++ b/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +     *, +++ b/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +++ b/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java, +import org.elasticsearch.cluster.routing.ShardRouting;, +    private ImmutableMap<ShardRouting, CommonStats> shardStatsMap;, +    public ImmutableMap<ShardRouting, CommonStats> asMap() {, +        if (shardStatsMap == null) {, +            ImmutableMap.Builder<ShardRouting, CommonStats> mb = ImmutableMap.builder();, +                mb.put(ss.getShardRouting(), ss.getStats());, +            shardStatsMap = mb.build();, +        return shardStatsMap;, +++ b/src/main/java/org/elasticsearch/cluster/routing/ImmutableShardRouting.java, +     *, +++ b/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +++ b/src/main/java/org/elasticsearch/common/Table.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common;, +, +import com.google.common.collect.ImmutableMap;, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +/**, + */, +public class Table {, +, +    private List<Cell> headers = new ArrayList<Cell>();, +    private List<List<Cell>> rows = new ArrayList<List<Cell>>();, +, +    private List<Cell> currentCells;, +, +    private boolean inHeaders = false;, +, +    public Table startHeaders() {, +        inHeaders = true;, +        currentCells = new ArrayList<Cell>();, +        return this;, +    }, +, +    public Table endHeaders() {, +        inHeaders = false;, +        headers = currentCells;, +        currentCells = null;, +        return this;, +    }, +, +    public Table startRow() {, +        if (headers.isEmpty()) {]