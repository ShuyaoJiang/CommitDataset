[+++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +import org.elasticsearch.common.Booleans;, +        final boolean buildSnapshot = Booleans.parseBoolean(System.getProperty("build.snapshot", "true"));, +        assertThat(, +                "[" + VersionUtils.getPreviousMinorVersion() + "] should" + (!buildSnapshot ? " not" : "") + " be compatible with 7.0.0",, +                isCompatible(VersionUtils.getPreviousMinorVersion(), Version.fromString("7.0.0")),, +                equalTo(!buildSnapshot));, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +import org.elasticsearch.common.Booleans;, +        final boolean buildSnapshot = Booleans.parseBoolean(System.getProperty("build.snapshot", "true"));, +        assertThat(, +                "[" + VersionUtils.getPreviousMinorVersion() + "] should" + (!buildSnapshot ? " not" : "") + " be compatible with 7.0.0",, +                isCompatible(VersionUtils.getPreviousMinorVersion(), Version.fromString("7.0.0")),, +                equalTo(!buildSnapshot));, +++ b/test/framework/src/main/java/org/elasticsearch/test/VersionUtils.java, +import org.elasticsearch.common.Booleans;, +, +        if (!Booleans.parseBoolean(System.getProperty("build.snapshot", "true"))) {, +            return Tuple.tuple(versions, Collections.emptyList());, +        }, +, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +import org.elasticsearch.common.Booleans;, +        final boolean buildSnapshot = Booleans.parseBoolean(System.getProperty("build.snapshot", "true"));, +        assertThat(, +                "[" + VersionUtils.getPreviousMinorVersion() + "] should" + (!buildSnapshot ? " not" : "") + " be compatible with 7.0.0",, +                isCompatible(VersionUtils.getPreviousMinorVersion(), Version.fromString("7.0.0")),, +                equalTo(!buildSnapshot));, +++ b/test/framework/src/main/java/org/elasticsearch/test/VersionUtils.java, +import org.elasticsearch.common.Booleans;, +, +        if (!Booleans.parseBoolean(System.getProperty("build.snapshot", "true"))) {, +            return Tuple.tuple(versions, Collections.emptyList());, +        }, +, +++ b/test/framework/src/test/java/org/elasticsearch/test/VersionUtilsTests.java, +import org.elasticsearch.common.Booleans;, +import java.util.Collections;, +import static org.hamcrest.Matchers.equalTo;, +        if (Booleans.parseBoolean(System.getProperty("build.snapshot", "true"))) {, +            final Version unreleased = randomFrom(VersionUtils.allUnreleasedVersions());, +    }, +, +        final List<Version> expectedReleased;, +        final List<Version> expectedUnreleased;, +        if (Booleans.parseBoolean(System.getProperty("build.snapshot", "true"))) {, +            expectedReleased = Arrays.asList(, +                    TestReleaseBranch.V_5_3_0,, +                    TestReleaseBranch.V_5_3_1,, +                    TestReleaseBranch.V_5_3_2,, +                    TestReleaseBranch.V_5_4_0);, +            expectedUnreleased = Collections.singletonList(TestReleaseBranch.V_5_4_1);, +        } else {, +            expectedReleased = Arrays.asList(, +                    TestReleaseBranch.V_5_3_0,, +                    TestReleaseBranch.V_5_3_1,, +                    TestReleaseBranch.V_5_3_2,, +                    TestReleaseBranch.V_5_4_0,, +                    TestReleaseBranch.V_5_4_1);, +            expectedUnreleased = Collections.emptyList();, +        }, +, +        assertThat(released, equalTo(expectedReleased));, +        assertThat(unreleased, equalTo(expectedUnreleased));, +, +        final List<Version> expectedReleased;, +        final List<Version> expectedUnreleased;, +        if (Booleans.parseBoolean(System.getProperty("build.snapshot", "true"))) {, +            expectedReleased = Arrays.asList(TestStableBranch.V_5_3_0, TestStableBranch.V_5_3_1);, +            expectedUnreleased = Arrays.asList(TestStableBranch.V_5_3_2, TestStableBranch.V_5_4_0);, +        } else {, +            expectedReleased =, +                    Arrays.asList(TestStableBranch.V_5_3_0, TestStableBranch.V_5_3_1, TestStableBranch.V_5_3_2, TestStableBranch.V_5_4_0);, +            expectedUnreleased = Collections.emptyList();, +        }, +, +        assertThat(released, equalTo(expectedReleased));, +        assertThat(unreleased, equalTo(expectedUnreleased));, +, +        final List<Version> expectedReleased;, +        final List<Version> expectedUnreleased;, +        if (Booleans.parseBoolean(System.getProperty("build.snapshot", "true"))) {, +            expectedReleased = Arrays.asList(TestStableBranchBehindStableBranch.V_5_3_0, TestStableBranchBehindStableBranch.V_5_3_1);, +            expectedUnreleased = Arrays.asList(, +                    TestStableBranchBehindStableBranch.V_5_3_2,, +                    TestStableBranchBehindStableBranch.V_5_4_0,, +                    TestStableBranchBehindStableBranch.V_5_5_0);, +        } else {, +            expectedReleased = Arrays.asList(, +                    TestStableBranchBehindStableBranch.V_5_3_0,, +                    TestStableBranchBehindStableBranch.V_5_3_1,, +                    TestStableBranchBehindStableBranch.V_5_3_2,, +                    TestStableBranchBehindStableBranch.V_5_4_0,, +                    TestStableBranchBehindStableBranch.V_5_5_0);, +            expectedUnreleased = Collections.emptyList();, +        }, +        assertThat(released, equalTo(expectedReleased));, +        assertThat(unreleased, equalTo(expectedUnreleased));, +, +        final List<Version> expectedReleased;]