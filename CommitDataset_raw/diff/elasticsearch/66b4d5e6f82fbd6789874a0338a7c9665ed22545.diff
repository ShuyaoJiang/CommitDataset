[+++ b/src/main/java/org/elasticsearch/shield/authz/store/FileRolesStore.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.common.base.Charsets;, +import org.elasticsearch.shield.support.NoOpLogger;, +import java.util.ArrayList;, +import java.util.List;, +    private static final Pattern IN_SEGMENT_LINE = Pattern.compile("^\\s+.+");, +    private static final Pattern SKIP_LINE = Pattern.compile("(^#.*|^\\s*)");, +        if (logger == null) {, +            logger = NoOpLogger.INSTANCE;, +        logger.trace("reading roles file located at [{}]", path);, +, +, +        try {, +, +            List<String> roleSegments = roleSegments(path);, +            for (String segment : roleSegments) {, +                Permission.Global.Role role = parseRole(segment, path, logger);, +                if (role != null) {, +                    roles.put(role.name(), role);, +                }, +            }, +, +        } catch (IOException ioe) {, +            logger.error("failed to read roles file [{}]. skipping all roles...", ioe, path.toAbsolutePath());, +        }, +        return roles.build();, +    }, +, +    private static Permission.Global.Role parseRole(String segment, Path path, ESLogger logger) {, +        String roleName = null;, +        try {, +            XContentParser parser = YamlXContent.yamlXContent.createParser(segment);, +            XContentParser.Token token = parser.nextToken();, +            if (token == XContentParser.Token.START_OBJECT) {, +                token = parser.nextToken();, +                    roleName = parser.currentName();, +                        logger.error("invalid role definition [{}] in roles file [{}]. invalid role name - {}. skipping role... ", roleName, path.toAbsolutePath(), validationError);, +                        return null;, +                    token = parser.nextToken();, +                    if (token == XContentParser.Token.START_OBJECT) {, +                        String currentFieldName = null;, +                                    logger.error("invalid role definition [{}] in roles file [{}]. [cluster] field value can either " +, +                                                    "be a string or a list of strings, but [{}] was found instead. skipping role...",, +                                            roleName, path.toAbsolutePath(), token);, +                                    return null;, +                                    try {, +                                    } catch (ElasticsearchIllegalArgumentException e) {, +                                        logger.error("invalid role definition [{}] in roles file [{}]. could not resolve cluster privileges [{}]. skipping role...", roleName, path.toAbsolutePath(), name);, +                                        return null;, +                                    }, +                                                        logger.error("invalid role definition [{}] in roles file [{}]. could not parse " +, +                                                                "[{}] as index privilege. privilege names must be strings. skipping role...", roleName, path.toAbsolutePath(), token);, +                                                        return null;, +                                                logger.error("invalid role definition [{}] in roles file [{}]. could not parse [{}] as index privileges. privilege lists must either " +, +                                                        "be a comma delimited string or an array of strings. skipping role...", roleName, path.toAbsolutePath(), token);, +                                                return null;, +                                                try {, +                                                } catch (ElasticsearchIllegalArgumentException e) {, +                                                    logger.error("invalid role definition [{}] in roles file [{}]. could not resolve indices privileges [{}]. skipping role...", roleName, path.toAbsolutePath(), name);, +                                                    return null;, +                                                }, +                                    logger.error("invalid role definition [{}] in roles file [{}]. [indices] field value must be an array of indices-privileges mappings defined as a string" +, +                                                    " in the form <comma-separated list of index name patterns>::<comma-separated list of privileges> , but [{}] was found instead. skipping role...",, +                                            roleName, path.toAbsolutePath(), token);, +                                    return null;, +                                }, +                            }, +                        }, +                        return permission.build();, +                    }, +                    logger.error("invalid role definition [{}] in roles file [{}]. skipping role...", roleName, path.toAbsolutePath());, +                }, +            }, +        } catch (YAMLException | IOException e) {, +            if (roleName != null) {, +                logger.error("invalid role definition [{}] in roles file [{}]. skipping role...", e, roleName, path);, +            } else {, +                logger.error("invalid role definition in roles file [{}]. skipping role...", e, path);, +            }, +        }, +        return null;, +    }, +, +    private static List<String> roleSegments(Path path) throws IOException {, +        List<String> segments = new ArrayList<>();, +        StringBuilder builder = null;, +        for (String line : Files.readAllLines(path, Charsets.UTF_8)) {, +            if (!SKIP_LINE.matcher(line).matches()) {, +                if (IN_SEGMENT_LINE.matcher(line).matches()) {, +                    if (builder != null) {, +                        builder.append(line).append("\n");, +                    if (builder != null) {, +                        segments.add(builder.toString());, +                    }, +                    builder = new StringBuilder(line).append("\n");, +        if (builder != null) {, +            segments.add(builder.toString());, +        return segments;, +++ b/src/main/java/org/elasticsearch/shield/authz/store/FileRolesStore.java]