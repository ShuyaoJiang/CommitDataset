[+++ b/server/src/main/java/org/elasticsearch/index/query/functionscore/ScoreFunctionBuilder.java, +        weight = checkWeight(in.readOptionalFloat());, +        this.weight = checkWeight(weight);, +    private Float checkWeight(Float weight) {, +        if (weight != null && Float.compare(weight, 0) < 0) {, +            throw new IllegalArgumentException("[weight] cannot be negative for a filtering function");, +        }, +        return weight;, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/query/functionscore/ScoreFunctionBuilder.java, +        weight = checkWeight(in.readOptionalFloat());, +        this.weight = checkWeight(weight);, +    private Float checkWeight(Float weight) {, +        if (weight != null && Float.compare(weight, 0) < 0) {, +            throw new IllegalArgumentException("[weight] cannot be negative for a filtering function");, +        }, +        return weight;, +    }, +, +++ b/server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java, +, +        expectThrows(IllegalArgumentException.class,, +                () -> new FunctionScoreQueryBuilder.FilterFunctionBuilder(new WeightBuilder().setWeight(-1 * randomFloat())));]