[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        if (request.timeout().millis() == 0) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        if (request.timeout().millis() == 0) {, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeAction.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        if (request.timeout().millis() == 0) {, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeAction.java, +++ b/core/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionTookTests.java, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +    static private ThreadPool threadPool;, +    @BeforeClass, +    public static void beforeClass() {, +        threadPool = new ThreadPool("TransportBulkActionTookTests");, +    }, +, +    @AfterClass, +    public static void afterClass() {, +        ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS);, +        threadPool = null;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        if (request.timeout().millis() == 0) {, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeAction.java, +++ b/core/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionTookTests.java, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +    static private ThreadPool threadPool;, +    @BeforeClass, +    public static void beforeClass() {, +        threadPool = new ThreadPool("TransportBulkActionTookTests");, +    }, +, +    @AfterClass, +    public static void afterClass() {, +        ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS);, +        threadPool = null;, +    }, +, +++ b/core/src/test/java/org/elasticsearch/cluster/health/ClusterStateHealthTests.java, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.admin.cluster.health.TransportClusterHealthAction;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.PlainActionFuture;, +import org.elasticsearch.cluster.ClusterStateUpdateTask;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.test.gateway.NoopGatewayAllocator;, +import org.elasticsearch.test.transport.CapturingTransport;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.TransportService;, +import org.junit.After;, +import org.junit.AfterClass;, +import org.junit.Before;, +import org.junit.BeforeClass;, +import java.util.HashSet;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeUnit;, +import static org.elasticsearch.cluster.service.ClusterServiceUtils.createClusterService;, +, +    private static ThreadPool threadPool;, +, +    private ClusterService clusterService;, +    private TransportService transportService;, +    private CapturingTransport transport;, +, +    @BeforeClass, +    public static void beforeClass() {, +        threadPool = new ThreadPool("ClusterStateHealthTests");, +    }, +, +    @Override, +    @Before, +    public void setUp() throws Exception {, +        super.setUp();, +        transport = new CapturingTransport();, +        clusterService = createClusterService(threadPool);, +        transportService = new TransportService(transport, threadPool);, +        transportService.start();, +        transportService.acceptIncomingRequests();, +    }, +, +    @After, +    public void tearDown() throws Exception {, +        super.tearDown();, +        clusterService.close();, +        transportService.close();, +    }, +, +    @AfterClass, +    public static void afterClass() {, +        ThreadPool.terminate(threadPool, 30, TimeUnit.SECONDS);, +        threadPool = null;, +    }, +, +    public void testClusterHealthWaitsForClusterStateApplication() throws InterruptedException, ExecutionException {, +        final CountDownLatch applyLatch = new CountDownLatch(1);]