[+++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +  , +  public int getMaxAnalyzedPathsForOneInput() {, +      return maxAnalyzedPathsForOneInput;, +  }, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +  , +  public int getMaxAnalyzedPathsForOneInput() {, +      return maxAnalyzedPathsForOneInput;, +  }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/SecurityTests.java, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +  , +  public int getMaxAnalyzedPathsForOneInput() {, +      return maxAnalyzedPathsForOneInput;, +  }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/SecurityTests.java, +++ b/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java, +    // TODO: on next upgrade of lucene, just use new getter, +        // assertEquals(expected, dictionary.getIgnoreCase());, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +  , +  public int getMaxAnalyzedPathsForOneInput() {, +      return maxAnalyzedPathsForOneInput;, +  }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/SecurityTests.java, +++ b/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java, +    // TODO: on next upgrade of lucene, just use new getter, +        // assertEquals(expected, dictionary.getIgnoreCase());, +++ /dev/null, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +  , +  public int getMaxAnalyzedPathsForOneInput() {, +      return maxAnalyzedPathsForOneInput;, +  }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/SecurityTests.java, +++ b/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java, +    // TODO: on next upgrade of lucene, just use new getter, +        // assertEquals(expected, dictionary.getIgnoreCase());, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/search/suggest/completion/CompletionPostingsFormatTests.java, +        if (buildAnalyzingLookup instanceof XAnalyzingSuggester) {, +            assertEquals(reference.getMaxAnalyzedPathsForOneInput(), ((XAnalyzingSuggester) buildAnalyzingLookup).getMaxAnalyzedPathsForOneInput());, +        }, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +  , +  public int getMaxAnalyzedPathsForOneInput() {, +      return maxAnalyzedPathsForOneInput;, +  }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/SecurityTests.java, +++ b/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java, +    // TODO: on next upgrade of lucene, just use new getter, +        // assertEquals(expected, dictionary.getIgnoreCase());, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/search/suggest/completion/CompletionPostingsFormatTests.java, +        if (buildAnalyzingLookup instanceof XAnalyzingSuggester) {, +            assertEquals(reference.getMaxAnalyzedPathsForOneInput(), ((XAnalyzingSuggester) buildAnalyzingLookup).getMaxAnalyzedPathsForOneInput());, +        }, +++ b/core/src/test/java/org/elasticsearch/test/ESTestCase.java, +import org.apache.lucene.util.TestRuleMarkFailure;, +    , +    /** Returns the suite failure marker: internal use only! */, +    public static TestRuleMarkFailure getSuiteFailureMarker() {, +        return suiteFailureMarker;, +    }, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +  , +  public int getMaxAnalyzedPathsForOneInput() {, +      return maxAnalyzedPathsForOneInput;, +  }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/SecurityTests.java, +++ b/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java, +    // TODO: on next upgrade of lucene, just use new getter, +        // assertEquals(expected, dictionary.getIgnoreCase());, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/search/suggest/completion/CompletionPostingsFormatTests.java, +        if (buildAnalyzingLookup instanceof XAnalyzingSuggester) {, +            assertEquals(reference.getMaxAnalyzedPathsForOneInput(), ((XAnalyzingSuggester) buildAnalyzingLookup).getMaxAnalyzedPathsForOneInput());, +        }, +++ b/core/src/test/java/org/elasticsearch/test/ESTestCase.java, +import org.apache.lucene.util.TestRuleMarkFailure;, +    , +    /** Returns the suite failure marker: internal use only! */, +    public static TestRuleMarkFailure getSuiteFailureMarker() {, +        return suiteFailureMarker;, +    }, +++ b/core/src/test/java/org/elasticsearch/test/store/MockFSDirectoryService.java, +            this.failureMarker = ESTestCase.getSuiteFailureMarker();, +++ b/core/src/main/java/org/apache/lucene/search/suggest/analyzing/XAnalyzingSuggester.java, +  , +  public int getMaxAnalyzedPathsForOneInput() {, +      return maxAnalyzedPathsForOneInput;, +  }, +++ b/core/src/test/java/org/elasticsearch/bootstrap/SecurityTests.java, +++ b/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java, +    // TODO: on next upgrade of lucene, just use new getter, +        // assertEquals(expected, dictionary.getIgnoreCase());, +++ /dev/null, +++ b/core/src/test/java/org/elasticsearch/search/suggest/completion/CompletionPostingsFormatTests.java, +        if (buildAnalyzingLookup instanceof XAnalyzingSuggester) {]