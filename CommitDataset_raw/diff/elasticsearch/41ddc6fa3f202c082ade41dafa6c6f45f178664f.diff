[+++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder addSort(SortBuilder<?> sort) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder addSort(SortBuilder<?> sort) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private QueryBuilder<?> queryBuilder;, +    private List<SortBuilder<?>> sorts;, +    private List<PipelineAggregatorBuilder<?>> pipelineAggregationBuilders;, +    public PercolateSourceBuilder setQueryBuilder(QueryBuilder<?> queryBuilder) {, +    public PercolateSourceBuilder addSort(SortBuilder<?> sort) {, +    public PercolateSourceBuilder addAggregation(PipelineAggregatorBuilder<?> aggregationBuilder) {, +            for (SortBuilder<?> sort : sorts) {, +                for (PipelineAggregatorBuilder<?> aggregation : pipelineAggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder addSort(SortBuilder<?> sort) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private QueryBuilder<?> queryBuilder;, +    private List<SortBuilder<?>> sorts;, +    private List<PipelineAggregatorBuilder<?>> pipelineAggregationBuilders;, +    public PercolateSourceBuilder setQueryBuilder(QueryBuilder<?> queryBuilder) {, +    public PercolateSourceBuilder addSort(SortBuilder<?> sort) {, +    public PercolateSourceBuilder addAggregation(PipelineAggregatorBuilder<?> aggregationBuilder) {, +            for (SortBuilder<?> sort : sorts) {, +                for (PipelineAggregatorBuilder<?> aggregation : pipelineAggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.aggregations.AggregatorBuilder;, +import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilder;, +import org.elasticsearch.search.sort.SortBuilder;, +    public AggregatorBuilder<?> readAggregatorFactory() throws IOException {, +    public PipelineAggregatorBuilder<?> readPipelineAggregatorFactory() throws IOException {, +    public QueryBuilder<?> readQuery() throws IOException {, +     * Reads a {@link SortBuilder} from the current stream, +     */, +    public SortBuilder<?> readSortBuilder() throws IOException {, +        return readNamedWriteable(SortBuilder.class);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder addSort(SortBuilder<?> sort) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private QueryBuilder<?> queryBuilder;, +    private List<SortBuilder<?>> sorts;, +    private List<PipelineAggregatorBuilder<?>> pipelineAggregationBuilders;, +    public PercolateSourceBuilder setQueryBuilder(QueryBuilder<?> queryBuilder) {, +    public PercolateSourceBuilder addSort(SortBuilder<?> sort) {, +    public PercolateSourceBuilder addAggregation(PipelineAggregatorBuilder<?> aggregationBuilder) {, +            for (SortBuilder<?> sort : sorts) {, +                for (PipelineAggregatorBuilder<?> aggregation : pipelineAggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.aggregations.AggregatorBuilder;, +import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilder;, +import org.elasticsearch.search.sort.SortBuilder;, +    public AggregatorBuilder<?> readAggregatorFactory() throws IOException {, +    public PipelineAggregatorBuilder<?> readPipelineAggregatorFactory() throws IOException {, +    public QueryBuilder<?> readQuery() throws IOException {, +     * Reads a {@link SortBuilder} from the current stream, +     */, +    public SortBuilder<?> readSortBuilder() throws IOException {, +        return readNamedWriteable(SortBuilder.class);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.search.rescore.RescoreBuilder;, +import org.elasticsearch.search.sort.SortBuilder;, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +import org.elasticsearch.search.suggest.phrase.SmoothingModel;, +import org.elasticsearch.tasks.Task;, +    public void writeOptionalWriteable(@Nullable Writeable<?> writeable) throws IOException {, +    void writeNamedWriteable(NamedWriteable<?> namedWriteable) throws IOException {, +    public void writeQuery(QueryBuilder<?> queryBuilder) throws IOException {, +    public void writeSuggestion(SuggestionBuilder<?> suggestion) throws IOException {, +    /**, +     * Writes a {@link SortBuilder} to the current stream, +     */, +    public void writeSortBuilder(SortBuilder<?> sort) throws IOException {, +        writeNamedWriteable(sort);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder addSort(SortBuilder<?> sort) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private QueryBuilder<?> queryBuilder;, +    private List<SortBuilder<?>> sorts;, +    private List<PipelineAggregatorBuilder<?>> pipelineAggregationBuilders;, +    public PercolateSourceBuilder setQueryBuilder(QueryBuilder<?> queryBuilder) {, +    public PercolateSourceBuilder addSort(SortBuilder<?> sort) {, +    public PercolateSourceBuilder addAggregation(PipelineAggregatorBuilder<?> aggregationBuilder) {, +            for (SortBuilder<?> sort : sorts) {, +                for (PipelineAggregatorBuilder<?> aggregation : pipelineAggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.aggregations.AggregatorBuilder;, +import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilder;, +import org.elasticsearch.search.sort.SortBuilder;, +    public AggregatorBuilder<?> readAggregatorFactory() throws IOException {, +    public PipelineAggregatorBuilder<?> readPipelineAggregatorFactory() throws IOException {, +    public QueryBuilder<?> readQuery() throws IOException {, +     * Reads a {@link SortBuilder} from the current stream, +     */]