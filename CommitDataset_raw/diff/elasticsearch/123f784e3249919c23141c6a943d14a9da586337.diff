[+++ b/server/src/test/java/org/elasticsearch/index/query/GeoDistanceQueryBuilderTests.java, +        assertGeoDistanceRangeQuery(query, 40, -70, 12, DistanceUnit.MILES);, +        assertGeoDistanceRangeQuery(query, 40, -70, 12, DistanceUnit.MILES);, +        assertGeoDistanceRangeQuery(query, 40, -70, 12, DistanceUnit.MILES);, +        GeoPoint geoPoint = GeoPoint.fromGeohash("drn5x1g8cu2y");, +        assertGeoDistanceRangeQuery(query, geoPoint.getLat(), geoPoint.getLon(), 12, DistanceUnit.MILES);, +        assertGeoDistanceRangeQuery(query, 40, -70, 12, DistanceUnit.MILES);, +        assertGeoDistanceRangeQuery(query, 40, -70, 12, DistanceUnit.MILES);, +        assertGeoDistanceRangeQuery(query, 40, -70, 19.312128, DistanceUnit.DEFAULT);, +        assertGeoDistanceRangeQuery(query, 40, -70, 19.312128, DistanceUnit.DEFAULT);, +        assertGeoDistanceRangeQuery(query, 40, -70, 19.312128, DistanceUnit.KILOMETERS);, +        assertGeoDistanceRangeQuery(query, 40, -70, 19.312128, DistanceUnit.KILOMETERS);, +        assertGeoDistanceRangeQuery(query, 40, -70, 19.312128, DistanceUnit.KILOMETERS);, +        assertGeoDistanceRangeQuery(query, 40, -70, 12, DistanceUnit.MILES);, +        Query parsedQuery = parseQuery(query).toQuery(createShardContext());, +        // The parsedQuery contains IndexOrDocValuesQuery, which wraps LatLonPointDistanceQuery which in turn has default visibility,, +        // so we cannot access its fields directly to check and have to use toString() here instead., +        assertEquals(parsedQuery.toString(),, +            "mapped_geo_point:" + lat + "," + lon + " +/- " + distanceUnit.toMeters(distance) + " meters");]