[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        // update the request with the version so it will go to the replicas, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        // update the request with the version so it will go to the replicas, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsTransportAction.java, +                    if (indexConstraintFieldStats == null) {, +                        continue;, +                    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        // update the request with the version so it will go to the replicas, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsTransportAction.java, +                    if (indexConstraintFieldStats == null) {, +                        continue;, +                    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java, +        } catch (InterruptedException e) {, +            logger.warn("[{}] failed to lock all shards for index - interrupted", index);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        // update the request with the version so it will go to the replicas, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsTransportAction.java, +                    if (indexConstraintFieldStats == null) {, +                        continue;, +                    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java, +        } catch (InterruptedException e) {, +            logger.warn("[{}] failed to lock all shards for index - interrupted", index);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRunnable.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        // update the request with the version so it will go to the replicas, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsTransportAction.java, +                    if (indexConstraintFieldStats == null) {, +                        continue;, +                    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java, +        } catch (InterruptedException e) {, +            logger.warn("[{}] failed to lock all shards for index - interrupted", index);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRunnable.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +    public void processPendingDeletes(Index index, IndexSettings indexSettings, TimeValue timeout) throws IOException, InterruptedException {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        // update the request with the version so it will go to the replicas, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsTransportAction.java, +                    if (indexConstraintFieldStats == null) {, +                        continue;, +                    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java, +        } catch (InterruptedException e) {, +            logger.warn("[{}] failed to lock all shards for index - interrupted", index);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRunnable.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +    public void processPendingDeletes(Index index, IndexSettings indexSettings, TimeValue timeout) throws IOException, InterruptedException {, +++ b/core/src/main/java/org/elasticsearch/indices/ttl/IndicesTTLService.java, +            // we intentionally do not want to restore the interruption flag, we're about to shutdown anyway, +                // we intentionally do not want to restore the interruption flag, we're about to shutdown anyway, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +        // update the request with the version so it will go to the replicas, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/TransportFieldStatsTransportAction.java, +                    if (indexConstraintFieldStats == null) {, +                        continue;, +                    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java, +        } catch (InterruptedException e) {, +            logger.warn("[{}] failed to lock all shards for index - interrupted", index);, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRunnable.java, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +    public void processPendingDeletes(Index index, IndexSettings indexSettings, TimeValue timeout) throws IOException, InterruptedException {, +++ b/core/src/main/java/org/elasticsearch/indices/ttl/IndicesTTLService.java, +            // we intentionally do not want to restore the interruption flag, we're about to shutdown anyway, +                // we intentionally do not want to restore the interruption flag, we're about to shutdown anyway, +++ b/core/src/test/java/org/elasticsearch/fieldstats/FieldStatsTests.java, +    public void testEmptyIndex() {, +        createIndex("test1", Settings.EMPTY, "type", "value", "type=date");, +        FieldStatsResponse response = client().prepareFieldStats(), +                .setFields("value"), +                .setLevel("indices"), +                .get();, +        assertThat(response.getIndicesMergedFieldStats().size(), equalTo(1));, +        assertThat(response.getIndicesMergedFieldStats().get("test1").size(), equalTo(0));, +, +        response = client().prepareFieldStats(), +                .setFields("value"), +                .setIndexContraints(new IndexConstraint("value", MIN, GTE, "1998-01-01T00:00:00.000Z")), +                .setLevel("indices"), +                .get();, +        assertThat(response.getIndicesMergedFieldStats().size(), equalTo(1));, +        assertThat(response.getIndicesMergedFieldStats().get("test1").size(), equalTo(0));]