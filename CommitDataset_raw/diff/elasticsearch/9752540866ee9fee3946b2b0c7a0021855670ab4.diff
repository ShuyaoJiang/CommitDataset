[+++ b/server/src/main/java/org/elasticsearch/index/shard/GlobalCheckpointListeners.java, +++ b/server/src/main/java/org/elasticsearch/index/shard/GlobalCheckpointListeners.java, +++ b/server/src/test/java/org/elasticsearch/index/shard/GlobalCheckpointListenersTests.java, +        final long globalCheckpoint = randomLongBetween(NO_OPS_PERFORMED, Long.MAX_VALUE);, +        final AtomicInteger notified = new AtomicInteger();, +            globalCheckpointListeners.add(NO_OPS_PERFORMED, (g, e) -> {, +                notified.incrementAndGet();, +                assertThat(g, equalTo(globalCheckpoint));, +                assertNull(e);, +            });, +        globalCheckpointListeners.globalCheckpointUpdated(globalCheckpoint);, +        assertThat(notified.get(), equalTo(numberOfListeners));, +    public void testNotificationOnClosedUsesExecutor() throws IOException {, +        final AtomicInteger count = new AtomicInteger();, +        final Executor executor = command -> {, +            count.incrementAndGet();, +            command.run();, +        };, +        final GlobalCheckpointListeners globalCheckpointListeners = new GlobalCheckpointListeners(shardId, executor, logger);, +        globalCheckpointListeners.close();, +        final AtomicInteger notified = new AtomicInteger();, +        final int numberOfListeners = randomIntBetween(0, 16);, +        for (int i = 0; i < numberOfListeners; i++) {, +            globalCheckpointListeners.add(NO_OPS_PERFORMED, (g, e) -> {, +                notified.incrementAndGet();, +                assertThat(g, equalTo(UNASSIGNED_SEQ_NO));, +                assertNotNull(e);, +                assertThat(e.getShardId(), equalTo(shardId));, +            });, +        }, +        assertThat(notified.get(), equalTo(numberOfListeners));, +        assertThat(count.get(), equalTo(numberOfListeners));, +    }, +, +    public void testListenersReadyToBeNotifiedUsesExecutor() {, +        final AtomicInteger count = new AtomicInteger();, +        final Executor executor = command -> {, +            count.incrementAndGet();, +            command.run();, +        };, +        final GlobalCheckpointListeners globalCheckpointListeners = new GlobalCheckpointListeners(shardId, executor, logger);, +        final long globalCheckpoint = randomNonNegativeLong();, +        globalCheckpointListeners.globalCheckpointUpdated(globalCheckpoint);, +        final AtomicInteger notified = new AtomicInteger();, +        final int numberOfListeners = randomIntBetween(0, 16);, +        for (int i = 0; i < numberOfListeners; i++) {, +            globalCheckpointListeners.add(randomLongBetween(0, globalCheckpoint), (g, e) -> {, +                notified.incrementAndGet();, +                assertThat(g, equalTo(globalCheckpoint));, +                assertNull(e);, +            });, +        }, +        assertThat(notified.get(), equalTo(numberOfListeners));, +        assertThat(count.get(), equalTo(numberOfListeners));, +    }, +]