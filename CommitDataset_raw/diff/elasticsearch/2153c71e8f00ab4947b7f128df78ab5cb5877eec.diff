[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.xpack.security.InternalClient;, +import java.util.List;, +        private final InternalClient client;, +        private final ClusterService clusterService;, +                               IndexNameExpressionResolver indexNameExpressionResolver, InternalClient client,, +                               ClusterService clusterService) {, +            this.client = client;, +            this.clusterService = clusterService;, +                        waitForYellow(taskId, request, listener);, +        void waitForYellow(long taskId, Request request, ActionListener<Response> listener) {, +            ClusterState state = clusterService.state();, +            MlMetadata mlMetadata = state.metaData().custom(MlMetadata.TYPE);, +            DatafeedConfig config = mlMetadata.getDatafeed(request.getDatafeedId());, +            List<String> indices = config.getIndexes();, +            if (!indices.isEmpty()) {, +                ClusterHealthRequest healthRequest = new ClusterHealthRequest(indices.toArray(new String[]{}));, +                healthRequest.waitForYellowStatus();, +                client.admin().cluster().health(healthRequest, ActionListener.wrap(clusterHealthResponse -> {, +                    waitForDatafeedStarted(taskId, request, listener);, +                }, listener::onFailure));, +            } else {, +                waitForDatafeedStarted(taskId, request, listener);, +            }, +        }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.xpack.security.InternalClient;, +import java.util.List;, +        private final InternalClient client;, +        private final ClusterService clusterService;, +                               IndexNameExpressionResolver indexNameExpressionResolver, InternalClient client,, +                               ClusterService clusterService) {, +            this.client = client;, +            this.clusterService = clusterService;, +                        waitForYellow(taskId, request, listener);, +        void waitForYellow(long taskId, Request request, ActionListener<Response> listener) {, +            ClusterState state = clusterService.state();, +            MlMetadata mlMetadata = state.metaData().custom(MlMetadata.TYPE);, +            DatafeedConfig config = mlMetadata.getDatafeed(request.getDatafeedId());, +            List<String> indices = config.getIndexes();, +            if (!indices.isEmpty()) {, +                ClusterHealthRequest healthRequest = new ClusterHealthRequest(indices.toArray(new String[]{}));, +                healthRequest.waitForYellowStatus();, +                client.admin().cluster().health(healthRequest, ActionListener.wrap(clusterHealthResponse -> {, +                    waitForDatafeedStarted(taskId, request, listener);, +                }, listener::onFailure));, +            } else {, +                waitForDatafeedStarted(taskId, request, listener);, +            }, +        }, +, +++ b/plugin/src/test/java/org/elasticsearch/license/MachineLearningLicensingTests.java, +        createIndex("foo");, +        createIndex("foo");, +        createIndex("foo");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.xpack.security.InternalClient;, +import java.util.List;, +        private final InternalClient client;, +        private final ClusterService clusterService;, +                               IndexNameExpressionResolver indexNameExpressionResolver, InternalClient client,, +                               ClusterService clusterService) {, +            this.client = client;, +            this.clusterService = clusterService;, +                        waitForYellow(taskId, request, listener);, +        void waitForYellow(long taskId, Request request, ActionListener<Response> listener) {, +            ClusterState state = clusterService.state();, +            MlMetadata mlMetadata = state.metaData().custom(MlMetadata.TYPE);, +            DatafeedConfig config = mlMetadata.getDatafeed(request.getDatafeedId());, +            List<String> indices = config.getIndexes();, +            if (!indices.isEmpty()) {, +                ClusterHealthRequest healthRequest = new ClusterHealthRequest(indices.toArray(new String[]{}));, +                healthRequest.waitForYellowStatus();, +                client.admin().cluster().health(healthRequest, ActionListener.wrap(clusterHealthResponse -> {, +                    waitForDatafeedStarted(taskId, request, listener);, +                }, listener::onFailure));, +            } else {, +                waitForDatafeedStarted(taskId, request, listener);, +            }, +        }, +, +++ b/plugin/src/test/java/org/elasticsearch/license/MachineLearningLicensingTests.java, +        createIndex("foo");, +        createIndex("foo");, +        createIndex("foo");, +++ b/plugin/src/test/resources/rest-api-spec/test/ml/get_datafeed_stats.yaml, +      indices.create:, +        index: index-1, +        body:, +          settings:, +            index:, +              number_of_replicas: 1, +]