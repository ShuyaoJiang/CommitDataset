[+++ b/core/src/main/java/org/elasticsearch/ingest/processor/ForEachProcessor.java, +            Map<String, Object> innerSource = new HashMap<>(ingestDocument.getSourceAndMetadata());, +            innerSource.put("_value", value); // scalar value to access the list item being evaluated, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/ForEachProcessor.java, +            Map<String, Object> innerSource = new HashMap<>(ingestDocument.getSourceAndMetadata());, +            innerSource.put("_value", value); // scalar value to access the list item being evaluated, +++ b/core/src/test/java/org/elasticsearch/ingest/processor/ForEachProcessorTests.java, +import org.elasticsearch.ingest.TestTemplateService;, +import org.elasticsearch.ingest.core.TemplateService;, +import org.elasticsearch.ingest.core.ValueSource;, +    public void testRestOfTheDocumentIsAvailable() throws Exception {, +        List<Map<String, Object>> values = new ArrayList<>();, +        for (int i = 0; i < 5; i++) {, +            Map<String, Object> object = new HashMap<>();, +            object.put("field", "value");, +            values.add(object);, +        }, +        Map<String, Object> document = new HashMap<>();, +        document.put("values", values);, +        document.put("flat_values", new ArrayList<>());, +        document.put("other", "value");, +        IngestDocument ingestDocument = new IngestDocument("_index", "_type", "_id", null, null, null, null, document);, +, +        TemplateService ts = TestTemplateService.instance();, +        ForEachProcessor processor = new ForEachProcessor(, +                "_tag", "values", Arrays.asList(, +                new AppendProcessor("_tag", ts.compile("flat_values"), ValueSource.wrap("value", ts)),, +                new SetProcessor("_tag", ts.compile("_value.new_field"), (model) -> model.get("other"))), +        );, +        processor.execute(ingestDocument);, +, +        assertThat(ingestDocument.getFieldValue("values.0.new_field", String.class), equalTo("value"));, +        assertThat(ingestDocument.getFieldValue("values.1.new_field", String.class), equalTo("value"));, +        assertThat(ingestDocument.getFieldValue("values.2.new_field", String.class), equalTo("value"));, +        assertThat(ingestDocument.getFieldValue("values.3.new_field", String.class), equalTo("value"));, +        assertThat(ingestDocument.getFieldValue("values.4.new_field", String.class), equalTo("value"));, +, +        List<String> flatValues = ingestDocument.getFieldValue("flat_values", List.class);, +        assertThat(flatValues.size(), equalTo(5));, +        assertThat(flatValues.get(0), equalTo("value"));, +        assertThat(flatValues.get(1), equalTo("value"));, +        assertThat(flatValues.get(2), equalTo("value"));, +        assertThat(flatValues.get(3), equalTo("value"));, +        assertThat(flatValues.get(4), equalTo("value"));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/ForEachProcessor.java, +            Map<String, Object> innerSource = new HashMap<>(ingestDocument.getSourceAndMetadata());, +            innerSource.put("_value", value); // scalar value to access the list item being evaluated, +++ b/core/src/test/java/org/elasticsearch/ingest/processor/ForEachProcessorTests.java, +import org.elasticsearch.ingest.TestTemplateService;, +import org.elasticsearch.ingest.core.TemplateService;, +import org.elasticsearch.ingest.core.ValueSource;, +    public void testRestOfTheDocumentIsAvailable() throws Exception {, +        List<Map<String, Object>> values = new ArrayList<>();, +        for (int i = 0; i < 5; i++) {, +            Map<String, Object> object = new HashMap<>();, +            object.put("field", "value");, +            values.add(object);, +        }, +        Map<String, Object> document = new HashMap<>();, +        document.put("values", values);, +        document.put("flat_values", new ArrayList<>());, +        document.put("other", "value");, +        IngestDocument ingestDocument = new IngestDocument("_index", "_type", "_id", null, null, null, null, document);, +, +        TemplateService ts = TestTemplateService.instance();, +        ForEachProcessor processor = new ForEachProcessor(, +                "_tag", "values", Arrays.asList(, +                new AppendProcessor("_tag", ts.compile("flat_values"), ValueSource.wrap("value", ts)),, +                new SetProcessor("_tag", ts.compile("_value.new_field"), (model) -> model.get("other"))), +        );, +        processor.execute(ingestDocument);, +, +        assertThat(ingestDocument.getFieldValue("values.0.new_field", String.class), equalTo("value"));, +        assertThat(ingestDocument.getFieldValue("values.1.new_field", String.class), equalTo("value"));, +        assertThat(ingestDocument.getFieldValue("values.2.new_field", String.class), equalTo("value"));, +        assertThat(ingestDocument.getFieldValue("values.3.new_field", String.class), equalTo("value"));, +        assertThat(ingestDocument.getFieldValue("values.4.new_field", String.class), equalTo("value"));, +, +        List<String> flatValues = ingestDocument.getFieldValue("flat_values", List.class);, +        assertThat(flatValues.size(), equalTo(5));, +        assertThat(flatValues.get(0), equalTo("value"));, +        assertThat(flatValues.get(1), equalTo("value"));, +        assertThat(flatValues.get(2), equalTo("value"));, +        assertThat(flatValues.get(3), equalTo("value"));, +        assertThat(flatValues.get(4), equalTo("value"));, +    }, +, +++ b/qa/smoke-test-ingest-with-all-dependencies/src/test/resources/rest-api-spec/test/ingest/10_pipeline_with_mustache_templates.yaml, +, +---, +"Test rolling up json object arrays":, +  - do:, +      ingest.put_pipeline:, +        id: "_id", +        body:  >, +          {, +            "processors": [, +               {]