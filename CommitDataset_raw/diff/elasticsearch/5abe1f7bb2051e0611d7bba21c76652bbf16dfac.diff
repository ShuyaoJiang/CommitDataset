[+++ b/.github/PULL_REQUEST_TEMPLATE.md, +- Have you followed the [contributor guidelines](https://github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md)?, +++ b/.github/PULL_REQUEST_TEMPLATE.md, +- Have you followed the [contributor guidelines](https://github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md)?, +++ b/core/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, +import org.joda.time.IllegalInstantException;, +            try {, +                return timeZone.convertLocalToUTC(rounded, true, utcMillis);, +            } catch (IllegalInstantException e) {, +                /*, +                 * The rounded local time is illegal and landed in a DST gap. In, +                 * this case, we choose 1ms tick after the transition date. We, +                 * don't want the transition date itself because those dates,, +                 * when rounded themselves, fall into the previous interval., +                 * This would violate the invariant that the rounding operation, +                 * should be idempotent., +                 */, +                return timeZone.previousTransition(utcMillis) + 1;, +            }, +++ b/.github/PULL_REQUEST_TEMPLATE.md, +- Have you followed the [contributor guidelines](https://github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md)?, +++ b/core/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, +import org.joda.time.IllegalInstantException;, +            try {, +                return timeZone.convertLocalToUTC(rounded, true, utcMillis);, +            } catch (IllegalInstantException e) {, +                /*, +                 * The rounded local time is illegal and landed in a DST gap. In, +                 * this case, we choose 1ms tick after the transition date. We, +                 * don't want the transition date itself because those dates,, +                 * when rounded themselves, fall into the previous interval., +                 * This would violate the invariant that the rounding operation, +                 * should be idempotent., +                 */, +                return timeZone.previousTransition(utcMillis) + 1;, +            }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +        if (size < -1) {, +                    "[size] must be greater than or equal to 0. Found [" + shardSize + "] in [" + name + "]");, +        if (shardSize < -1) {, +                    "[shardSize] must be greater than or equal to 0. Found [" + shardSize + "] in [" + name + "]");, +        if (shardSize == 0) {, +            shardSize = Integer.MAX_VALUE;, +        int requiredSize = this.requiredSize;, +        if (requiredSize == 0) {, +            requiredSize = Integer.MAX_VALUE;, +        }, +, +        if (shardSize < 0) {, +            // Use default heuristic to avoid any wrong-ranking caused by distributed counting, +            shardSize = BucketUtils.suggestShardSideQueueSize(requiredSize, context.searchContext().numberOfShards());, +++ b/.github/PULL_REQUEST_TEMPLATE.md, +- Have you followed the [contributor guidelines](https://github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md)?, +++ b/core/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, +import org.joda.time.IllegalInstantException;, +            try {, +                return timeZone.convertLocalToUTC(rounded, true, utcMillis);, +            } catch (IllegalInstantException e) {, +                /*, +                 * The rounded local time is illegal and landed in a DST gap. In, +                 * this case, we choose 1ms tick after the transition date. We, +                 * don't want the transition date itself because those dates,, +                 * when rounded themselves, fall into the previous interval., +                 * This would violate the invariant that the rounding operation, +                 * should be idempotent., +                 */, +                return timeZone.previousTransition(utcMillis) + 1;, +            }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoGridAggregationBuilder.java, +        if (size < -1) {, +                    "[size] must be greater than or equal to 0. Found [" + shardSize + "] in [" + name + "]");, +        if (shardSize < -1) {, +                    "[shardSize] must be greater than or equal to 0. Found [" + shardSize + "] in [" + name + "]");, +        if (shardSize == 0) {, +            shardSize = Integer.MAX_VALUE;, +        int requiredSize = this.requiredSize;, +        if (requiredSize == 0) {, +            requiredSize = Integer.MAX_VALUE;, +        }, +, +        if (shardSize < 0) {, +            // Use default heuristic to avoid any wrong-ranking caused by distributed counting, +            shardSize = BucketUtils.suggestShardSideQueueSize(requiredSize, context.searchContext().numberOfShards());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregationBuilder.java, +        if (size < 0) {, +            throw new IllegalArgumentException("[size] must be greater than or equal to 0. Found [" + size + "] in [" + name + "]");, +        if (shardSize < 0) {, +                    "[shardSize] must be greater than or equal to 0. Found [" + shardSize + "] in [" + name + "]");, +++ b/.github/PULL_REQUEST_TEMPLATE.md, +- Have you followed the [contributor guidelines](https://github.com/elastic/elasticsearch/blob/master/CONTRIBUTING.md)?, +++ b/core/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, +import org.joda.time.IllegalInstantException;, +            try {, +                return timeZone.convertLocalToUTC(rounded, true, utcMillis);, +            } catch (IllegalInstantException e) {, +                /*, +                 * The rounded local time is illegal and landed in a DST gap. In, +                 * this case, we choose 1ms tick after the transition date. We, +                 * don't want the transition date itself because those dates,, +                 * when rounded themselves, fall into the previous interval.]