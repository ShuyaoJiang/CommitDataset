[+++ b/src/main/java/org/elasticsearch/index/mapper/internal/EnabledAttributeMapper.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.mapper.internal;, +, +public enum EnabledAttributeMapper {, +    ENABLED(true), UNSET_ENABLED(true), DISABLED(false), UNSET_DISABLED(false);, +, +    public final boolean enabled;, +, +    EnabledAttributeMapper(boolean enabled) {, +        this.enabled = enabled;, +    }, +, +    public boolean unset() {, +        return this == UNSET_DISABLED || this == UNSET_ENABLED;, +    }, +}, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/EnabledAttributeMapper.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.mapper.internal;, +, +public enum EnabledAttributeMapper {, +    ENABLED(true), UNSET_ENABLED(true), DISABLED(false), UNSET_DISABLED(false);, +, +    public final boolean enabled;, +, +    EnabledAttributeMapper(boolean enabled) {, +        this.enabled = enabled;, +    }, +, +    public boolean unset() {, +        return this == UNSET_DISABLED || this == UNSET_ENABLED;, +    }, +}, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.DISABLED;, +        private EnabledAttributeMapper enabledState = EnabledAttributeMapper.UNSET_DISABLED;, +        public Builder enabled(EnabledAttributeMapper enabled) {, +            this.enabledState = enabled;, +            return new TTLFieldMapper(fieldType, enabledState, defaultTTL, ignoreMalformed(context), provider, fieldDataSettings);, +                if (fieldName.equals("enabled") && ("true".equals(fieldNode.toString()) || "yes".equals(fieldNode.toString()))) {, +                    builder.enabled(EnabledAttributeMapper.ENABLED);, +    private EnabledAttributeMapper enabledState;, +        this(new FieldType(Defaults.TTL_FIELD_TYPE), Defaults.ENABLED_STATE, Defaults.DEFAULT, Defaults.IGNORE_MALFORMED, null, null);, +    protected TTLFieldMapper(FieldType fieldType, EnabledAttributeMapper enabled, long defaultTTL, Explicit<Boolean> ignoreMalformed,, +        this.enabledState = enabled;, +        return this.enabledState.enabled;, +        if (enabledState.enabled) {, +        if (enabledState == Defaults.ENABLED_STATE && defaultTTL == Defaults.DEFAULT) {, +        if (enabledState != Defaults.ENABLED_STATE) {, +            builder.field("enabled", enabledState.enabled);, +            if (ttlMergeWith.enabledState != enabledState && !ttlMergeWith.enabledState.unset()) {, +                this.enabledState = ttlMergeWith.enabledState;, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/EnabledAttributeMapper.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *]