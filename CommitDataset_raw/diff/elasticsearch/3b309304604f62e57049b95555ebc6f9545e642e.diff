[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/IndexStore.java, +    /**, +     * Returns <tt>true</tt> if this shard is allocated on this node. Allocated means, +     * that it has storage files that can be deleted using {@link #deleteUnallocated(org.elasticsearch.index.shard.ShardId)}., +     */, +    boolean canDeleteUnallocated(ShardId shardId);, +, +    /**, +     * Deletes this shard store since its no longer allocated., +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/IndexStore.java, +    /**, +     * Returns <tt>true</tt> if this shard is allocated on this node. Allocated means, +     * that it has storage files that can be deleted using {@link #deleteUnallocated(org.elasticsearch.index.shard.ShardId)}., +     */, +    boolean canDeleteUnallocated(ShardId shardId);, +, +    /**, +     * Deletes this shard store since its no longer allocated., +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsIndexStore.java, +    @Override public boolean canDeleteUnallocated(ShardId shardId) {, +        if (location == null) {, +            return false;, +        }, +        if (indexService.hasShard(shardId.id())) {, +            return false;, +        }, +        return shardLocation(shardId).exists();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/IndexStore.java, +    /**, +     * Returns <tt>true</tt> if this shard is allocated on this node. Allocated means, +     * that it has storage files that can be deleted using {@link #deleteUnallocated(org.elasticsearch.index.shard.ShardId)}., +     */, +    boolean canDeleteUnallocated(ShardId shardId);, +, +    /**, +     * Deletes this shard store since its no longer allocated., +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsIndexStore.java, +    @Override public boolean canDeleteUnallocated(ShardId shardId) {, +        if (location == null) {, +            return false;, +        }, +        if (indexService.hasShard(shardId.id())) {, +            return false;, +        }, +        return shardLocation(shardId).exists();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/support/AbstractIndexStore.java, +    @Override public boolean canDeleteUnallocated(ShardId shardId) {, +        return false;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/IndexStore.java, +    /**, +     * Returns <tt>true</tt> if this shard is allocated on this node. Allocated means, +     * that it has storage files that can be deleted using {@link #deleteUnallocated(org.elasticsearch.index.shard.ShardId)}., +     */, +    boolean canDeleteUnallocated(ShardId shardId);, +, +    /**, +     * Deletes this shard store since its no longer allocated., +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsIndexStore.java, +    @Override public boolean canDeleteUnallocated(ShardId shardId) {, +        if (location == null) {, +            return false;, +        }, +        if (indexService.hasShard(shardId.id())) {, +            return false;, +        }, +        return shardLocation(shardId).exists();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/support/AbstractIndexStore.java, +    @Override public boolean canDeleteUnallocated(ShardId shardId) {, +        return false;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/store/IndicesStore.java, +                if (!indexService.store().canDeleteUnallocated(indexShardRoutingTable.shardId())) {, +                    continue;, +                }]