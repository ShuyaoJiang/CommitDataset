[+++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/plugin/build.gradle, +  compile 'com.google.guava:guava:16.0.1' // needed by watcher for the html sanitizer and security tests for jimfs, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/plugin/build.gradle, +  compile 'com.google.guava:guava:16.0.1' // needed by watcher for the html sanitizer and security tests for jimfs, +++ /dev/null, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/plugin/build.gradle, +  compile 'com.google.guava:guava:16.0.1' // needed by watcher for the html sanitizer and security tests for jimfs, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/plugin/build.gradle, +  compile 'com.google.guava:guava:16.0.1' // needed by watcher for the html sanitizer and security tests for jimfs, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/plugin/build.gradle, +  compile 'com.google.guava:guava:16.0.1' // needed by watcher for the html sanitizer and security tests for jimfs, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import javax.security.auth.DestroyFailedException;, +        return templates -> {, +            templates = watcher.getIndexTemplateMetaDataUpgrader().apply(templates);, +            templates = security.getIndexTemplateMetaDataUpgrader().apply(templates);, +            return templates;, +        };, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/plugin/build.gradle, +  compile 'com.google.guava:guava:16.0.1' // needed by watcher for the html sanitizer and security tests for jimfs, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import javax.security.auth.DestroyFailedException;, +        return templates -> {, +            templates = watcher.getIndexTemplateMetaDataUpgrader().apply(templates);, +            templates = security.getIndexTemplateMetaDataUpgrader().apply(templates);, +            return templates;, +        };, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import java.nio.charset.StandardCharsets;, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexTemplateMetaData;, +import org.elasticsearch.common.xcontent.XContent;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.xpack.security.support.IndexLifecycleManager;, +import org.elasticsearch.xpack.template.TemplateUtils;, +import static org.elasticsearch.xpack.security.SecurityLifecycleService.SECURITY_TEMPLATE_NAME;, +, +    public UnaryOperator<Map<String, IndexTemplateMetaData>> getIndexTemplateMetaDataUpgrader() {, +        return templates -> {, +            final byte[] securityTemplate = TemplateUtils.loadTemplate("/" + SECURITY_TEMPLATE_NAME + ".json",, +                Version.CURRENT.toString(), IndexLifecycleManager.TEMPLATE_VERSION_PATTERN).getBytes(StandardCharsets.UTF_8);, +            final XContent xContent = XContentFactory.xContent(XContentType.JSON);, +, +            try (XContentParser parser = xContent.createParser(NamedXContentRegistry.EMPTY, securityTemplate)) {, +                templates.put(SECURITY_TEMPLATE_NAME, IndexTemplateMetaData.Builder.fromXContent(parser, SECURITY_TEMPLATE_NAME));, +            } catch (IOException e) {, +                // TODO: should we handle this with a thrown exception?, +                logger.error("Error loading security template [{}] as part of metadata upgrading", SECURITY_TEMPLATE_NAME);, +            }, +, +            return templates;, +        };, +    }, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/plugin/build.gradle, +  compile 'com.google.guava:guava:16.0.1' // needed by watcher for the html sanitizer and security tests for jimfs, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/plugin/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import javax.security.auth.DestroyFailedException;, +        return templates -> {]