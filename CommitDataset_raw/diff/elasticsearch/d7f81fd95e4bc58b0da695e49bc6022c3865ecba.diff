[+++ b/docs/en/security/securing-communications/setting-up-ssl.asciidoc, +{ref}/configuring-tls.html#node-certificates[Generating Node Certificates]., +{ref}/configuring-tls.html#enable-ssl[Enabling TLS on {es} Nodes]., +++ b/docs/en/security/securing-communications/setting-up-ssl.asciidoc, +{ref}/configuring-tls.html#node-certificates[Generating Node Certificates]., +{ref}/configuring-tls.html#enable-ssl[Enabling TLS on {es} Nodes]., +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import java.util.stream.Collectors;, +        final String auditIndex;, +            auditIndex = "," + IndexAuditTrail.INDEX_NAME_PREFIX + "*";, +        } else {, +            auditIndex = "";, +        }, +        String securityIndices = SecurityLifecycleService.indexNames().stream(), +                .collect(Collectors.joining(","));, +                        " restrictive. disable [action.auto_create_index] or set it to " +, +                        "[{}{}]", (Object) value, securityIndices, auditIndex);, +        List<String> indices = new ArrayList<>(SecurityLifecycleService.indexNames());, +        if (indexAuditingEnabled) {, +        }, +        if (indexAuditingEnabled) {, +            final byte[] securityTemplate = TemplateUtils.loadTemplate("/" + SECURITY_TEMPLATE_NAME + ".json",, +                    Version.CURRENT.toString(), IndexLifecycleManager.TEMPLATE_VERSION_PATTERN).getBytes(StandardCharsets.UTF_8);, +, +            try (XContentParser parser = xContent.createParser(NamedXContentRegistry.EMPTY, securityTemplate)) {, +                templates.put(SECURITY_TEMPLATE_NAME, IndexTemplateMetaData.Builder.fromXContent(parser, SECURITY_TEMPLATE_NAME));, +            } catch (IOException e) {, +                // TODO: should we handle this with a thrown exception?, +                logger.error("Error loading template [{}] as part of metadata upgrading", SECURITY_TEMPLATE_NAME);, +            }, +, +++ b/docs/en/security/securing-communications/setting-up-ssl.asciidoc, +{ref}/configuring-tls.html#node-certificates[Generating Node Certificates]., +{ref}/configuring-tls.html#enable-ssl[Enabling TLS on {es} Nodes]., +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import java.util.stream.Collectors;, +        final String auditIndex;, +            auditIndex = "," + IndexAuditTrail.INDEX_NAME_PREFIX + "*";, +        } else {, +            auditIndex = "";, +        }, +        String securityIndices = SecurityLifecycleService.indexNames().stream(), +                .collect(Collectors.joining(","));, +                        " restrictive. disable [action.auto_create_index] or set it to " +, +                        "[{}{}]", (Object) value, securityIndices, auditIndex);, +        List<String> indices = new ArrayList<>(SecurityLifecycleService.indexNames());, +        if (indexAuditingEnabled) {, +        }, +        if (indexAuditingEnabled) {, +            final byte[] securityTemplate = TemplateUtils.loadTemplate("/" + SECURITY_TEMPLATE_NAME + ".json",, +                    Version.CURRENT.toString(), IndexLifecycleManager.TEMPLATE_VERSION_PATTERN).getBytes(StandardCharsets.UTF_8);, +, +            try (XContentParser parser = xContent.createParser(NamedXContentRegistry.EMPTY, securityTemplate)) {, +                templates.put(SECURITY_TEMPLATE_NAME, IndexTemplateMetaData.Builder.fromXContent(parser, SECURITY_TEMPLATE_NAME));, +            } catch (IOException e) {, +                // TODO: should we handle this with a thrown exception?, +                logger.error("Error loading template [{}] as part of metadata upgrading", SECURITY_TEMPLATE_NAME);, +            }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import org.elasticsearch.action.ActionListener;, +        this.securityIndex = new IndexLifecycleManager(settings, client, SECURITY_INDEX_NAME, SECURITY_TEMPLATE_NAME);, +    public boolean isSecurityIndexWriteable() {, +        return securityIndex.isWritable();, +    public static boolean securityIndexMappingAndTemplateSufficientToRead(ClusterState clusterState,, +                                                                  Logger logger) {, +        return checkTemplateAndMappingVersions(clusterState, logger, MIN_READ_VERSION::onOrBefore);, +    public static boolean securityIndexMappingAndTemplateUpToDate(ClusterState clusterState,, +                                                                  Logger logger) {, +        return checkTemplateAndMappingVersions(clusterState, logger, Version.CURRENT::equals);, +    private static boolean checkTemplateAndMappingVersions(ClusterState clusterState, Logger logger,, +                                                           Predicate<Version> versionPredicate) {, +        return IndexLifecycleManager.checkTemplateExistsAndVersionMatches(SECURITY_TEMPLATE_NAME,, +                clusterState, logger, versionPredicate) &&, +                IndexLifecycleManager.checkIndexMappingVersionMatches(SECURITY_INDEX_NAME,, +                        clusterState, logger, versionPredicate);, +     * Creates the security index, if it does not already exist, then runs the given, +     * action on the security index., +    public <T> void createIndexIfNeededThenExecute(final ActionListener<T> listener, final Runnable andThen) {, +        if (!isSecurityIndexExisting() || isSecurityIndexUpToDate()) {, +            securityIndex.createIndexIfNeededThenExecute(listener, andThen);, +        } else {, +            listener.onFailure(new IllegalStateException(, +                "Security index is not on the current version - the native realm will not be operational until " +, +                "the upgrade API is run on the security index"));, +        }, +++ b/docs/en/security/securing-communications/setting-up-ssl.asciidoc, +{ref}/configuring-tls.html#node-certificates[Generating Node Certificates]., +{ref}/configuring-tls.html#enable-ssl[Enabling TLS on {es} Nodes]., +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +import java.util.stream.Collectors;, +        final String auditIndex;, +            auditIndex = "," + IndexAuditTrail.INDEX_NAME_PREFIX + "*";, +        } else {, +            auditIndex = "";, +        }, +        String securityIndices = SecurityLifecycleService.indexNames().stream(), +                .collect(Collectors.joining(","));, +                        " restrictive. disable [action.auto_create_index] or set it to " +, +                        "[{}{}]", (Object) value, securityIndices, auditIndex);]