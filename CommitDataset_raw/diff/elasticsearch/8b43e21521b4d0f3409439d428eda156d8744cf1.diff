[+++ b/server/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +    public QueryStringQueryBuilder type(MultiMatchQueryBuilder.Type type) {, +        return this;, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +    public QueryStringQueryBuilder type(MultiMatchQueryBuilder.Type type) {, +        return this;, +++ b/server/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +                return zeroTermsQuery();, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +    public QueryStringQueryBuilder type(MultiMatchQueryBuilder.Type type) {, +        return this;, +++ b/server/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +                return zeroTermsQuery();, +++ b/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java, +            if (query == null) {, +                return null;, +            }, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +    public QueryStringQueryBuilder type(MultiMatchQueryBuilder.Type type) {, +        return this;, +++ b/server/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +                return zeroTermsQuery();, +++ b/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java, +            if (query == null) {, +                return null;, +            }, +++ b/server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java, +import org.apache.lucene.search.BooleanClause;, +    public void testWithStopWords() throws Exception {, +        Query query = new MultiMatchQueryBuilder("the quick fox"), +            .field(STRING_FIELD_NAME), +            .analyzer("stop"), +            .toQuery(createShardContext());, +        Query expected = new BooleanQuery.Builder(), +            .add(new TermQuery(new Term(STRING_FIELD_NAME, "quick")), BooleanClause.Occur.SHOULD), +            .add(new TermQuery(new Term(STRING_FIELD_NAME, "fox")), BooleanClause.Occur.SHOULD), +            .build();, +        assertEquals(expected, query);, +, +        query = new MultiMatchQueryBuilder("the quick fox"), +            .field(STRING_FIELD_NAME), +            .field(STRING_FIELD_NAME_2), +            .analyzer("stop"), +            .toQuery(createShardContext());, +        expected = new DisjunctionMaxQuery(, +            Arrays.asList(, +                new BooleanQuery.Builder(), +                    .add(new TermQuery(new Term(STRING_FIELD_NAME, "quick")), BooleanClause.Occur.SHOULD), +                    .add(new TermQuery(new Term(STRING_FIELD_NAME, "fox")), BooleanClause.Occur.SHOULD), +                    .build(),, +                new BooleanQuery.Builder(), +                    .add(new TermQuery(new Term(STRING_FIELD_NAME_2, "quick")), BooleanClause.Occur.SHOULD), +                    .add(new TermQuery(new Term(STRING_FIELD_NAME_2, "fox")), BooleanClause.Occur.SHOULD), +                    .build(), +            ), 0f);, +        assertEquals(expected, query);, +, +        query = new MultiMatchQueryBuilder("the"), +            .field(STRING_FIELD_NAME), +            .field(STRING_FIELD_NAME_2), +            .analyzer("stop"), +            .toQuery(createShardContext());, +        expected = new DisjunctionMaxQuery(Arrays.asList(new MatchNoDocsQuery(), new MatchNoDocsQuery()), 0f);, +        assertEquals(expected, query);, +, +        query = new BoolQueryBuilder(), +            .should(, +                new MultiMatchQueryBuilder("the"), +                    .field(STRING_FIELD_NAME), +                    .analyzer("stop"), +            ), +            .toQuery(createShardContext());, +        expected = new BooleanQuery.Builder(), +            .add(new MatchNoDocsQuery(), BooleanClause.Occur.SHOULD), +            .build();, +        assertEquals(expected, query);, +, +        query = new BoolQueryBuilder(), +            .should(, +                new MultiMatchQueryBuilder("the"), +                    .field(STRING_FIELD_NAME), +                    .field(STRING_FIELD_NAME_2), +                    .analyzer("stop"), +            ), +            .toQuery(createShardContext());, +        expected = new BooleanQuery.Builder(), +            .add(new DisjunctionMaxQuery(Arrays.asList(new MatchNoDocsQuery(), new MatchNoDocsQuery()), 0f), BooleanClause.Occur.SHOULD), +            .build();, +        assertEquals(expected, query);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +    public QueryStringQueryBuilder type(MultiMatchQueryBuilder.Type type) {, +        return this;, +++ b/server/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +                return zeroTermsQuery();, +++ b/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java, +            if (query == null) {, +                return null;, +            }]