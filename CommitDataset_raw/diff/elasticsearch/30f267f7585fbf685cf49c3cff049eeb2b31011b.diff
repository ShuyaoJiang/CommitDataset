[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +    /** Simple driver class, can be used eg. from builds. Returns non-zero on jar-hell */, +    public static void main(String args[]) throws Exception {, +        checkJarHell();, +    }, +, +            logger.debug("java.class.path: {}", System.getProperty("java.class.path"));, +            logger.debug("sun.boot.class.path: {}", System.getProperty("sun.boot.class.path"));, +            logger.debug("classloader urls: {}", Arrays.toString(((URLClassLoader)loader).getURLs()));, +        ESLogger logger = Loggers.getLogger(JarHell.class);, +        // we don't try to be sneaky and use deprecated/internal/not portable stuff, +        // like sun.boot.class.path, and with jigsaw we don't yet have a way to get, +        // a "list" at all. So just exclude any elements underneath the java home, +        String javaHome = System.getProperty("java.home");, +            // exclude system resources, +            if (path.startsWith(javaHome)) {, +                logger.debug("excluding system resource: {}", path);, +                continue;, +            }, +                    logger.debug("excluding duplicate classpath element: {}", path);, +                logger.debug("examining jar: {}", path);, +                logger.debug("examining directory: {}", path);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +    /** Simple driver class, can be used eg. from builds. Returns non-zero on jar-hell */, +    public static void main(String args[]) throws Exception {, +        checkJarHell();, +    }, +, +            logger.debug("java.class.path: {}", System.getProperty("java.class.path"));, +            logger.debug("sun.boot.class.path: {}", System.getProperty("sun.boot.class.path"));, +            logger.debug("classloader urls: {}", Arrays.toString(((URLClassLoader)loader).getURLs()));, +        ESLogger logger = Loggers.getLogger(JarHell.class);, +        // we don't try to be sneaky and use deprecated/internal/not portable stuff, +        // like sun.boot.class.path, and with jigsaw we don't yet have a way to get, +        // a "list" at all. So just exclude any elements underneath the java home, +        String javaHome = System.getProperty("java.home");, +            // exclude system resources, +            if (path.startsWith(javaHome)) {, +                logger.debug("excluding system resource: {}", path);, +                continue;, +            }, +                    logger.debug("excluding duplicate classpath element: {}", path);, +                logger.debug("examining jar: {}", path);, +                logger.debug("examining directory: {}", path);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.elasticsearch.index.fielddata.FieldDataType;, +        private Map<Class<? extends RootMapper>, RootMapper> rootMappers = new LinkedHashMap<>();, +        public Builder put(RootMapper.Builder mapper) {, +            RootMapper rootMapper = (RootMapper) mapper.build(builderContext);, +            rootMappers.put(rootMapper.getClass(), rootMapper);, +                          Map<Class<? extends RootMapper>, RootMapper> rootMappers,, +                rootMappers.values().toArray(new RootMapper[rootMappers.values().size()]),, +        for (RootMapper rootMapper : this.mapping.rootMappers) {, +            if (rootMapper instanceof FieldMapper) {, +                newFieldMappers.add((FieldMapper) rootMapper);, +    public <T extends RootMapper> T rootMapper(Class<T> type) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +    /** Simple driver class, can be used eg. from builds. Returns non-zero on jar-hell */, +    public static void main(String args[]) throws Exception {, +        checkJarHell();, +    }, +, +            logger.debug("java.class.path: {}", System.getProperty("java.class.path"));, +            logger.debug("sun.boot.class.path: {}", System.getProperty("sun.boot.class.path"));, +            logger.debug("classloader urls: {}", Arrays.toString(((URLClassLoader)loader).getURLs()));, +        ESLogger logger = Loggers.getLogger(JarHell.class);, +        // we don't try to be sneaky and use deprecated/internal/not portable stuff, +        // like sun.boot.class.path, and with jigsaw we don't yet have a way to get, +        // a "list" at all. So just exclude any elements underneath the java home, +        String javaHome = System.getProperty("java.home");, +            // exclude system resources, +            if (path.startsWith(javaHome)) {, +                logger.debug("excluding system resource: {}", path);, +                continue;, +            }, +                    logger.debug("excluding duplicate classpath element: {}", path);, +                logger.debug("examining jar: {}", path);, +                logger.debug("examining directory: {}", path);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.elasticsearch.index.fielddata.FieldDataType;, +        private Map<Class<? extends RootMapper>, RootMapper> rootMappers = new LinkedHashMap<>();, +        public Builder put(RootMapper.Builder mapper) {, +            RootMapper rootMapper = (RootMapper) mapper.build(builderContext);, +            rootMappers.put(rootMapper.getClass(), rootMapper);, +                          Map<Class<? extends RootMapper>, RootMapper> rootMappers,, +                rootMappers.values().toArray(new RootMapper[rootMappers.values().size()]),, +        for (RootMapper rootMapper : this.mapping.rootMappers) {, +            if (rootMapper instanceof FieldMapper) {, +                newFieldMappers.add((FieldMapper) rootMapper);, +    public <T extends RootMapper> T rootMapper(Class<T> type) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                    docBuilder.put(typeParser.parse(fieldName, fieldNodeMap, parserContext));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +    /** Simple driver class, can be used eg. from builds. Returns non-zero on jar-hell */, +    public static void main(String args[]) throws Exception {, +        checkJarHell();, +    }, +, +            logger.debug("java.class.path: {}", System.getProperty("java.class.path"));, +            logger.debug("sun.boot.class.path: {}", System.getProperty("sun.boot.class.path"));]