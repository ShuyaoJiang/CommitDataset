[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.client.indices.GetIndexTemplatesRequest;, +import org.elasticsearch.client.indices.IndexTemplatesExistRequest;, +     * Uses the Index Templates API to determine if index templates exist, +     *, +     * @param indexTemplatesRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return true if any index templates in the request exist, false otherwise, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public boolean existsTemplate(IndexTemplatesExistRequest indexTemplatesRequest, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequest(indexTemplatesRequest, IndicesRequestConverters::templatesExist, options,, +            RestHighLevelClient::convertExistsResponse, emptySet());, +    }, +, +    /**, +     * Uses the Index Templates API to determine if index templates exist, +     *, +     * @param indexTemplatesExistRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion. The listener will be called with the value {@code true}, +     *                 if any index templates in the request exist, false otherwise, +     */, +    public void existsTemplateAsync(IndexTemplatesExistRequest indexTemplatesExistRequest,, +                                    RequestOptions options,, +                                    ActionListener<Boolean> listener) {, +, +        restHighLevelClient.performRequestAsync(indexTemplatesExistRequest, IndicesRequestConverters::templatesExist, options,, +            RestHighLevelClient::convertExistsResponse, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.client.indices.GetIndexTemplatesRequest;, +import org.elasticsearch.client.indices.IndexTemplatesExistRequest;, +     * Uses the Index Templates API to determine if index templates exist, +     *, +     * @param indexTemplatesRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return true if any index templates in the request exist, false otherwise, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public boolean existsTemplate(IndexTemplatesExistRequest indexTemplatesRequest, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequest(indexTemplatesRequest, IndicesRequestConverters::templatesExist, options,, +            RestHighLevelClient::convertExistsResponse, emptySet());, +    }, +, +    /**, +     * Uses the Index Templates API to determine if index templates exist, +     *, +     * @param indexTemplatesExistRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion. The listener will be called with the value {@code true}, +     *                 if any index templates in the request exist, false otherwise, +     */, +    public void existsTemplateAsync(IndexTemplatesExistRequest indexTemplatesExistRequest,, +                                    RequestOptions options,, +                                    ActionListener<Boolean> listener) {, +, +        restHighLevelClient.performRequestAsync(indexTemplatesExistRequest, IndicesRequestConverters::templatesExist, options,, +            RestHighLevelClient::convertExistsResponse, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesRequestConverters.java, +import org.elasticsearch.client.indices.GetIndexTemplatesRequest;, +import org.elasticsearch.client.indices.IndexTemplatesExistRequest;, +    static Request getTemplates(GetIndexTemplatesRequest getIndexTemplatesRequest) {, +        final String endpoint = new RequestConverters.EndpointBuilder(), +            .addPathPartAsIs("_template"), +            .addCommaSeparatedPathParts(getIndexTemplatesRequest.names()), +            .build();, +        final Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +        final RequestConverters.Params params = new RequestConverters.Params(request);, +        params.withLocal(getIndexTemplatesRequest.isLocal());, +        params.withMasterTimeout(getIndexTemplatesRequest.getMasterNodeTimeout());, +        return request;, +    }, +, +    static Request templatesExist(IndexTemplatesExistRequest indexTemplatesExistRequest) {, +        final String endpoint = new RequestConverters.EndpointBuilder(), +            .addPathPartAsIs("_template"), +            .addCommaSeparatedPathParts(indexTemplatesExistRequest.names()), +            .build();, +        final Request request = new Request(HttpHead.METHOD_NAME, endpoint);, +        final RequestConverters.Params params = new RequestConverters.Params(request);, +        params.withLocal(indexTemplatesExistRequest.isLocal());, +        params.withMasterTimeout(indexTemplatesExistRequest.getMasterNodeTimeout());, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.client.indices.GetIndexTemplatesRequest;, +import org.elasticsearch.client.indices.IndexTemplatesExistRequest;, +     * Uses the Index Templates API to determine if index templates exist, +     *, +     * @param indexTemplatesRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return true if any index templates in the request exist, false otherwise, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public boolean existsTemplate(IndexTemplatesExistRequest indexTemplatesRequest, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequest(indexTemplatesRequest, IndicesRequestConverters::templatesExist, options,]