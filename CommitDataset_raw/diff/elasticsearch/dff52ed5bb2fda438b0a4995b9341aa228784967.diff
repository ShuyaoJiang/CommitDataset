[+++ b/.gitignore, +html_docs, +++ b/.gitignore, +html_docs, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import org.apache.lucene.util.ToStringUtils;, +    private final float[] boosts;, +    public BlendedTermQuery(Term[] terms, float[] boosts) {, +        if (boosts != null && boosts.length != terms.length) {, +            throw new IllegalArgumentException("boosts must have the same size as terms");, +        }, +        this.boosts = boosts;, +        StringBuilder builder = new StringBuilder("blended(terms:[");, +        for (int i = 0; i < terms.length; ++i) {, +            builder.append(terms[i]);, +            float boost = 1f;, +            if (boosts != null) {, +                boost = boosts[i];, +            }, +            builder.append(ToStringUtils.boost(boost));, +            builder.append(", ");, +        }, +        if (terms.length > 0) {, +            builder.setLength(builder.length() - 2);, +        }, +        builder.append("])");, +        builder.append(ToStringUtils.boost(getBoost()));, +        return builder.toString();, +        return new BlendedTermQuery(terms, boosts) {, +        return new BlendedTermQuery(terms, boosts) {, +        return new BlendedTermQuery(terms, boosts) {, +++ b/.gitignore, +html_docs, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import org.apache.lucene.util.ToStringUtils;, +    private final float[] boosts;, +    public BlendedTermQuery(Term[] terms, float[] boosts) {, +        if (boosts != null && boosts.length != terms.length) {, +            throw new IllegalArgumentException("boosts must have the same size as terms");, +        }, +        this.boosts = boosts;, +        StringBuilder builder = new StringBuilder("blended(terms:[");, +        for (int i = 0; i < terms.length; ++i) {, +            builder.append(terms[i]);, +            float boost = 1f;, +            if (boosts != null) {, +                boost = boosts[i];, +            }, +            builder.append(ToStringUtils.boost(boost));, +            builder.append(", ");, +        }, +        if (terms.length > 0) {, +            builder.setLength(builder.length() - 2);, +        }, +        builder.append("])");, +        builder.append(ToStringUtils.boost(getBoost()));, +        return builder.toString();, +        return new BlendedTermQuery(terms, boosts) {, +        return new BlendedTermQuery(terms, boosts) {, +        return new BlendedTermQuery(terms, boosts) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +                    numberOfPendingTasks, numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(System.currentTimeMillis(), settings, clusterState),, +                numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(System.currentTimeMillis(), settings, clusterState), pendingTaskTimeInQueue);, +++ b/.gitignore, +html_docs, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import org.apache.lucene.util.ToStringUtils;, +    private final float[] boosts;, +    public BlendedTermQuery(Term[] terms, float[] boosts) {, +        if (boosts != null && boosts.length != terms.length) {, +            throw new IllegalArgumentException("boosts must have the same size as terms");, +        }, +        this.boosts = boosts;, +        StringBuilder builder = new StringBuilder("blended(terms:[");, +        for (int i = 0; i < terms.length; ++i) {, +            builder.append(terms[i]);, +            float boost = 1f;, +            if (boosts != null) {, +                boost = boosts[i];, +            }, +            builder.append(ToStringUtils.boost(boost));, +            builder.append(", ");, +        }, +        if (terms.length > 0) {, +            builder.setLength(builder.length() - 2);, +        }, +        builder.append("])");, +        builder.append(ToStringUtils.boost(getBoost()));, +        return builder.toString();, +        return new BlendedTermQuery(terms, boosts) {, +        return new BlendedTermQuery(terms, boosts) {, +        return new BlendedTermQuery(terms, boosts) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +                    numberOfPendingTasks, numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(System.currentTimeMillis(), settings, clusterState),, +                numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(System.currentTimeMillis(), settings, clusterState), pendingTaskTimeInQueue);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shards/TransportIndicesShardStoresAction.java, +        final RoutingNodes routingNodes = state.getRoutingNodes();, +++ b/.gitignore, +html_docs, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java]