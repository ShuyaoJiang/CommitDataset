[+++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/analyze/RestAnalyzeAction.java, +        public static final ParseField TOKEN_FILTERS = new ParseField("filter", "token_filter");, +        public static final ParseField CHAR_FILTERS = new ParseField("char_filter");, +        analyzeRequest.tokenFilters(request.paramAsStringArray("filter", request.paramAsStringArray("token_filter", analyzeRequest.tokenFilters())));, +        analyzeRequest.charFilters(request.paramAsStringArray("char_filter", analyzeRequest.charFilters()));, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/analyze/RestAnalyzeAction.java, +        public static final ParseField TOKEN_FILTERS = new ParseField("filter", "token_filter");, +        public static final ParseField CHAR_FILTERS = new ParseField("char_filter");, +        analyzeRequest.tokenFilters(request.paramAsStringArray("filter", request.paramAsStringArray("token_filter", analyzeRequest.tokenFilters())));, +        analyzeRequest.charFilters(request.paramAsStringArray("char_filter", analyzeRequest.charFilters()));, +++ b/core/src/test/java/org/elasticsearch/rest/action/admin/indices/analyze/RestAnalyzeActionTests.java, +            .array("filter", "lowercase"), +    public void testDeprecatedParamException() throws Exception {, +        BytesReference content =  XContentFactory.jsonBuilder(), +            .startObject(), +            .field("text", "THIS IS A TEST"), +            .field("tokenizer", "keyword"), +            .array("filters", "lowercase"), +            .endObject().bytes();, +, +        AnalyzeRequest analyzeRequest = new AnalyzeRequest("for test");, +, +        try {, +            RestAnalyzeAction.buildFromContent(content, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY));, +        } catch (Exception e) {, +            assertThat(e, instanceOf(IllegalArgumentException.class));, +            assertThat(e.getMessage(), startsWith("Unknown parameter [filters]"));, +        }, +, +        content =  XContentFactory.jsonBuilder(), +            .startObject(), +            .field("text", "THIS IS A TEST"), +            .field("tokenizer", "keyword"), +            .array("token_filters", "lowercase"), +            .endObject().bytes();, +, +        analyzeRequest = new AnalyzeRequest("for test");, +, +        try {, +            RestAnalyzeAction.buildFromContent(content, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY));, +        } catch (Exception e) {, +            assertThat(e, instanceOf(IllegalArgumentException.class));, +            assertThat(e.getMessage(), startsWith("Unknown parameter [token_filters]"));, +        }, +, +        content =  XContentFactory.jsonBuilder(), +            .startObject(), +            .field("text", "THIS IS A TEST"), +            .field("tokenizer", "keyword"), +            .array("char_filters", "lowercase"), +            .endObject().bytes();, +, +        analyzeRequest = new AnalyzeRequest("for test");, +, +        try {, +            RestAnalyzeAction.buildFromContent(content, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY));, +        } catch (Exception e) {, +            assertThat(e, instanceOf(IllegalArgumentException.class));, +            assertThat(e.getMessage(), startsWith("Unknown parameter [char_filters]"));, +        }, +, +    }, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/analyze/RestAnalyzeAction.java, +        public static final ParseField TOKEN_FILTERS = new ParseField("filter", "token_filter");, +        public static final ParseField CHAR_FILTERS = new ParseField("char_filter");, +        analyzeRequest.tokenFilters(request.paramAsStringArray("filter", request.paramAsStringArray("token_filter", analyzeRequest.tokenFilters())));, +        analyzeRequest.charFilters(request.paramAsStringArray("char_filter", analyzeRequest.charFilters()));, +++ b/core/src/test/java/org/elasticsearch/rest/action/admin/indices/analyze/RestAnalyzeActionTests.java, +            .array("filter", "lowercase"), +    public void testDeprecatedParamException() throws Exception {, +        BytesReference content =  XContentFactory.jsonBuilder(), +            .startObject(), +            .field("text", "THIS IS A TEST"), +            .field("tokenizer", "keyword"), +            .array("filters", "lowercase"), +            .endObject().bytes();, +, +        AnalyzeRequest analyzeRequest = new AnalyzeRequest("for test");, +, +        try {, +            RestAnalyzeAction.buildFromContent(content, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY));, +        } catch (Exception e) {, +            assertThat(e, instanceOf(IllegalArgumentException.class));, +            assertThat(e.getMessage(), startsWith("Unknown parameter [filters]"));, +        }, +, +        content =  XContentFactory.jsonBuilder(), +            .startObject(), +            .field("text", "THIS IS A TEST"), +            .field("tokenizer", "keyword"), +            .array("token_filters", "lowercase"), +            .endObject().bytes();, +, +        analyzeRequest = new AnalyzeRequest("for test");, +, +        try {, +            RestAnalyzeAction.buildFromContent(content, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY));, +        } catch (Exception e) {, +            assertThat(e, instanceOf(IllegalArgumentException.class));, +            assertThat(e.getMessage(), startsWith("Unknown parameter [token_filters]"));]