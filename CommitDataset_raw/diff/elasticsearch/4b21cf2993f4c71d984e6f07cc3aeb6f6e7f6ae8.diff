[+++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                    .timestamp(timestamp).ttl(ttl), +                    .percolate(request.percolate());, +                    update.matches(response.matches());, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                    .timestamp(timestamp).ttl(ttl), +                    .percolate(request.percolate());, +                    update.matches(response.matches());, +++ b/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +    private String percolate;, +, +     * Causes the update request document to be percolated. The parameter is the percolate query, +     * to use to reduce the percolated queries that are going to run against this doc. Can be, +     * set to <tt>*</tt> to indicate that all percolate queries should be run., +     */, +    public UpdateRequest percolate(String percolate) {, +        this.percolate = percolate;, +        return this;, +    }, +, +    public String percolate() {, +        return this.percolate;, +    }, +, +    /**, +        if (in.readBoolean()) {, +            percolate = in.readUTF();, +        }, +        if (percolate == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            out.writeUTF(percolate);, +        }, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                    .timestamp(timestamp).ttl(ttl), +                    .percolate(request.percolate());, +                    update.matches(response.matches());, +++ b/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +    private String percolate;, +, +     * Causes the update request document to be percolated. The parameter is the percolate query, +     * to use to reduce the percolated queries that are going to run against this doc. Can be, +     * set to <tt>*</tt> to indicate that all percolate queries should be run., +     */, +    public UpdateRequest percolate(String percolate) {, +        this.percolate = percolate;, +        return this;, +    }, +, +    public String percolate() {, +        return this.percolate;, +    }, +, +    /**, +        if (in.readBoolean()) {, +            percolate = in.readUTF();, +        }, +        if (percolate == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeBoolean(true);, +            out.writeUTF(percolate);, +        }, +++ b/src/main/java/org/elasticsearch/action/update/UpdateResponse.java, +import com.google.common.collect.ImmutableList;, +import java.util.ArrayList;, +import java.util.List;, +    private List<String> matches;, +, +    /**, +     * Returns the percolate queries matches. <tt>null</tt> if no percolation was requested., +     */, +    public List<String> matches() {, +        return this.matches;, +    }, +, +    /**, +     * Returns the percolate queries matches. <tt>null</tt> if no percolation was requested., +     */, +    public List<String> getMatches() {, +        return this.matches;, +    }, +, +    /**, +     * Internal., +     */, +    public void matches(List<String> matches) {, +        this.matches = matches;, +    }, +, +        if (in.readBoolean()) {, +            int size = in.readVInt();, +            if (size == 0) {, +                matches = ImmutableList.of();, +            } else if (size == 1) {, +                matches = ImmutableList.of(in.readUTF());, +            } else if (size == 2) {, +                matches = ImmutableList.of(in.readUTF(), in.readUTF());, +            } else if (size == 3) {]