[+++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryParser.java, +            } else if ("fields".equals(currentFieldName)) {, +                if (token == XContentParser.Token.START_ARRAY) {, +                        extractFieldAndBoost(parseContext, parser, fieldNameWithBoosts);, +                } else if (token.isValue()) {, +                    extractFieldAndBoost(parseContext, parser, fieldNameWithBoosts);, +, +    private void extractFieldAndBoost(QueryParseContext parseContext, XContentParser parser, Map<String, Float> fieldNameWithBoosts) throws IOException {, +        String fField = null;, +        Float fBoost = null;, +        char[] fieldText = parser.textCharacters();, +        int end = parser.textOffset() + parser.textLength();, +        for (int i = parser.textOffset(); i < end; i++) {, +            if (fieldText[i] == '^') {, +                int relativeLocation = i - parser.textOffset();, +                fField = new String(fieldText, parser.textOffset(), relativeLocation);, +                fBoost = Float.parseFloat(new String(fieldText, i + 1, parser.textLength() - relativeLocation - 1));, +                break;, +            }, +        }, +        if (fField == null) {, +            fField = parser.text();, +        }, +, +        if (Regex.isSimpleMatchPattern(fField)) {, +            for (String field : parseContext.mapperService().simpleMatchToIndexNames(fField)) {, +                fieldNameWithBoosts.put(field, fBoost);, +            }, +        } else {, +            fieldNameWithBoosts.put(fField, fBoost);, +        }, +    }, +++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryParser.java, +            } else if ("fields".equals(currentFieldName)) {, +                if (token == XContentParser.Token.START_ARRAY) {, +                        extractFieldAndBoost(parseContext, parser, fieldNameWithBoosts);, +                } else if (token.isValue()) {, +                    extractFieldAndBoost(parseContext, parser, fieldNameWithBoosts);, +, +    private void extractFieldAndBoost(QueryParseContext parseContext, XContentParser parser, Map<String, Float> fieldNameWithBoosts) throws IOException {, +        String fField = null;, +        Float fBoost = null;, +        char[] fieldText = parser.textCharacters();, +        int end = parser.textOffset() + parser.textLength();, +        for (int i = parser.textOffset(); i < end; i++) {, +            if (fieldText[i] == '^') {, +                int relativeLocation = i - parser.textOffset();, +                fField = new String(fieldText, parser.textOffset(), relativeLocation);, +                fBoost = Float.parseFloat(new String(fieldText, i + 1, parser.textLength() - relativeLocation - 1));, +                break;, +            }, +        }, +        if (fField == null) {, +            fField = parser.text();, +        }, +, +        if (Regex.isSimpleMatchPattern(fField)) {, +            for (String field : parseContext.mapperService().simpleMatchToIndexNames(fField)) {, +                fieldNameWithBoosts.put(field, fBoost);, +            }, +        } else {, +            fieldNameWithBoosts.put(fField, fBoost);, +        }, +    }, +++ b/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java, +, +    @Test, +    public void testMultiMatchQuery() throws Exception {, +        IndexQueryParserService queryParser = queryParser();, +        String query = copyToStringFromClasspath("/org/elasticsearch/index/query/multiMatch-query-simple.json");, +        Query parsedQuery = queryParser.parse(query).query();, +        assertThat(parsedQuery, instanceOf(DisjunctionMaxQuery.class));, +    }, +, +    @Test, +    public void testMultiMatchQueryWithFieldsAsString() throws Exception {, +        IndexQueryParserService queryParser = queryParser();, +        String query = copyToStringFromClasspath("/org/elasticsearch/index/query/multiMatch-query-fields-as-string.json");, +        Query parsedQuery = queryParser.parse(query).query();, +        assertThat(parsedQuery, instanceOf(BooleanQuery.class));, +    }, +++ b/src/main/java/org/elasticsearch/index/query/MultiMatchQueryParser.java, +            } else if ("fields".equals(currentFieldName)) {, +                if (token == XContentParser.Token.START_ARRAY) {, +                        extractFieldAndBoost(parseContext, parser, fieldNameWithBoosts);, +                } else if (token.isValue()) {, +                    extractFieldAndBoost(parseContext, parser, fieldNameWithBoosts);, +, +    private void extractFieldAndBoost(QueryParseContext parseContext, XContentParser parser, Map<String, Float> fieldNameWithBoosts) throws IOException {, +        String fField = null;, +        Float fBoost = null;, +        char[] fieldText = parser.textCharacters();, +        int end = parser.textOffset() + parser.textLength();, +        for (int i = parser.textOffset(); i < end; i++) {, +            if (fieldText[i] == '^') {, +                int relativeLocation = i - parser.textOffset();, +                fField = new String(fieldText, parser.textOffset(), relativeLocation);, +                fBoost = Float.parseFloat(new String(fieldText, i + 1, parser.textLength() - relativeLocation - 1));, +                break;, +            }]