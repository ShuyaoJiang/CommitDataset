[+++ b/docs/reference/testing/testing-framework.asciidoc, +First, you need to include the testing dependency in your project, along with the elasticsearch dependency you have already added. If you use maven and its `pom.xml` file, it looks like this, +Replace the elasticsearch version and the lucene version with the corresponding elasticsearch version and its accompanying lucene release., +We provide a few classes that you can inherit from in your own test classes which provide:, +, +* pre-defined loggers, +* randomized testing infrastructure, +* a number of helper methods, +If your test is a well isolated unit test which doesn't need a running elasticsearch cluster, you can use the `ESTestCase`. If you are testing lucene features, use `ESTestCase` and if you are testing concrete token streams, use the `ESTokenStreamTestCase` class. Those specific classes execute additional checks which ensure that no resources leaks are happening, after the test has run., +The class your tests have to inherit from is `ESIntegTestCase`. By inheriting from this class, you will no longer need to start elasticsearch nodes manually in your test, although you might need to ensure that at least a certain number of nodes are up. The integration test behaviour can be configured heavily by specifying different system properties on test runs. See the `TESTING.asciidoc` documentation in the https://github.com/elastic/elasticsearch/blob/master/TESTING.asciidoc[source repository] for more information., +, +The rule of thumb is not to specify the number of shards unless needed, so that each test will use a different one all the time. Alternatively you can override the `numberOfShards()` method. The same applies to the `numberOfReplicas()` method., +, +There are a couple of helper methods in `ESIntegTestCase`, which will make your tests shorter and more concise., +The `InternalTestCluster` class is the heart of the cluster functionality in a randomized test and allows you to configure a specific setting or replay certain types of outages to check, how your custom code reacts., +[[changing-node-settings]], +==== Changing node settings, +, +If you want to ensure a certain configuration for the nodes, which are started as part of the `EsIntegTestCase`, you can override the `nodeSettings()` method, +, +[source,java], +-----------------------------------------, +public class Mytests extends ESIntegTestCase {, +, +  @Override, +  protected Settings nodeSettings(int nodeOrdinal) {, +      return settingsBuilder().put(super.nodeSettings(nodeOrdinal)), +             .put("node.mode", "network"), +             .build();, +  }, +, +}, +-----------------------------------------, +, +, +In order to execute any actions, you have to use a client. You can use the `ESIntegTestCase.client()` method to get back a random client. This client can be a `TransportClient` or a `NodeClient` - and usually you do not need to care as long as the action gets executed. There are several more methods for client selection inside of the `InternalTestCluster` class, which can be accessed using the `ESIntegTestCase.internalCluster()` method., +public class CustomSuggesterSearchTests extends ESIntegTestCase {, +==== Changing plugins via configuration, +`randomFrom()`::        Returns a random element from a list/array, +, +As many elasticsearch tests are checking for a similar output, like the amount of hits or the first hit or special highlighting, a couple of predefined assertions have been created. Those have been put into the `ElasticsearchAssertions` class. There is also a specific geo assertions in `ElasticsearchGeoAssertions`., +`hasScore()`::  Matcher to check for a certain score of a hit, +`hasStatus()`:: Matcher to check for a certain `RestStatus` of a response]