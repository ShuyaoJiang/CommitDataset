[+++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java, +import org.apache.lucene.util.BytesRefBuilder;, +                    BytesRefBuilder builder = new BytesRefBuilder();, +                    Store.MetadataSnapshot.hashFile(builder, stream, fileInfo.length());, +                    BytesRef hash = metadata.hash();, +                    hash.bytes = builder.bytes();, +                    hash.offset = 0;, +                    hash.length = builder.length();, +++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java, +import org.apache.lucene.util.BytesRefBuilder;, +                    BytesRefBuilder builder = new BytesRefBuilder();, +                    Store.MetadataSnapshot.hashFile(builder, stream, fileInfo.length());, +                    BytesRef hash = metadata.hash();, +                    hash.bytes = builder.bytes();, +                    hash.offset = 0;, +                    hash.length = builder.length();, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +import org.apache.lucene.util.BytesRefBuilder;, +import org.elasticsearch.common.io.Streams;, +import org.elasticsearch.common.lucene.store.InputStreamIndexInput;, +            final BytesRefBuilder fileHash = new BytesRefBuilder();, +            try (final IndexInput in = directory.openInput(file, IOContext.READONCE)) {, +                       hashFile(fileHash, new InputStreamIndexInput(in, in.length()), in.length());, +                builder.put(file, new StoreFileMetaData(file, directory.fileLength(file), checksum, version, fileHash.get()));, +        public static void hashFile(BytesRefBuilder fileHash, InputStream in, long size) throws IOException {, +            final int len = (int)Math.min(1024 * 1024, size); // for safety we limit this to 1MB, +            fileHash.setLength(len);, +            Streams.readFully(in, fileHash.bytes(), 0, len);, +            assert fileHash.length() == len;]