[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +                assertEquals(1, hit.getRating().getAsInt());, +                assertEquals(1, hit.getRating().getAsInt());, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +                assertEquals(1, hit.getRating().getAsInt());, +                assertEquals(1, hit.getRating().getAsInt());, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +import java.util.OptionalInt;, +    public OptionalInt forcedSearchSize() {, +        return OptionalInt.of(k);, +            if (hit.getRating().isPresent()) {, +                ratingsInSearchHits.add(hit.getRating().getAsInt());, +            } else {, +                ratingsInSearchHits.add(unknownDocRating);, +            }, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +                assertEquals(1, hit.getRating().getAsInt());, +                assertEquals(1, hit.getRating().getAsInt());, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +import java.util.OptionalInt;, +    public OptionalInt forcedSearchSize() {, +        return OptionalInt.of(k);, +            if (hit.getRating().isPresent()) {, +                ratingsInSearchHits.add(hit.getRating().getAsInt());, +            } else {, +                ratingsInSearchHits.add(unknownDocRating);, +            }, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvaluationMetric.java, +import java.util.OptionalInt;, +                ratedSearchHits.add(new RatedSearchHit(hit, OptionalInt.of(ratedDoc.getRating())));, +                ratedSearchHits.add(new RatedSearchHit(hit, OptionalInt.empty()));, +    default OptionalInt forcedSearchSize() {, +        return OptionalInt.empty();, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +                assertEquals(1, hit.getRating().getAsInt());, +                assertEquals(1, hit.getRating().getAsInt());, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +import java.util.OptionalInt;, +    public OptionalInt forcedSearchSize() {, +        return OptionalInt.of(k);, +            if (hit.getRating().isPresent()) {, +                ratingsInSearchHits.add(hit.getRating().getAsInt());, +            } else {, +                ratingsInSearchHits.add(unknownDocRating);, +            }, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvaluationMetric.java, +import java.util.OptionalInt;, +                ratedSearchHits.add(new RatedSearchHit(hit, OptionalInt.of(ratedDoc.getRating())));, +                ratedSearchHits.add(new RatedSearchHit(hit, OptionalInt.empty()));, +    default OptionalInt forcedSearchSize() {, +        return OptionalInt.empty();, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/ExpectedReciprocalRank.java, +import java.util.OptionalInt;, +    public OptionalInt forcedSearchSize() {, +        return OptionalInt.of(k);, +            if (hit.getRating().isPresent()) {, +                ratingsInSearchHits.add(hit.getRating().getAsInt());, +            } else {, +                // unknownDocRating might be null, in which case unrated docs will be ignored in the dcg calculation., +                ratingsInSearchHits.add(unknownDocRating);, +            }, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +                assertEquals(1, hit.getRating().getAsInt());, +                assertEquals(1, hit.getRating().getAsInt());, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +import java.util.OptionalInt;, +    public OptionalInt forcedSearchSize() {, +        return OptionalInt.of(k);, +            if (hit.getRating().isPresent()) {, +                ratingsInSearchHits.add(hit.getRating().getAsInt());, +            } else {, +                ratingsInSearchHits.add(unknownDocRating);, +            }, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvaluationMetric.java, +import java.util.OptionalInt;, +                ratedSearchHits.add(new RatedSearchHit(hit, OptionalInt.of(ratedDoc.getRating())));, +                ratedSearchHits.add(new RatedSearchHit(hit, OptionalInt.empty()));, +    default OptionalInt forcedSearchSize() {, +        return OptionalInt.empty();, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/ExpectedReciprocalRank.java, +import java.util.OptionalInt;, +    public OptionalInt forcedSearchSize() {, +        return OptionalInt.of(k);, +            if (hit.getRating().isPresent()) {, +                ratingsInSearchHits.add(hit.getRating().getAsInt());, +            } else {, +                // unknownDocRating might be null, in which case unrated docs will be ignored in the dcg calculation., +                ratingsInSearchHits.add(unknownDocRating);, +            }, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/MeanReciprocalRank.java, +import java.util.OptionalInt;, +    public OptionalInt forcedSearchSize() {, +        return OptionalInt.of(k);, +            OptionalInt rating = hit.getRating();, +                if (rating.getAsInt() >= this.relevantRatingThreshhold) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +                assertEquals(1, hit.getRating().getAsInt());, +                assertEquals(1, hit.getRating().getAsInt());, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +import java.util.OptionalInt;]