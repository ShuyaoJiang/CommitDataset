[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +    private final List<Runnable> listeners;, +, +    private Status status = new Status(OperationMode.TRIAL, true);, +    private boolean isSecurityEnabledByTrialVersion;, +        this.listeners = new CopyOnWriteArrayList<>();, +    private XPackLicenseState(XPackLicenseState xPackLicenseState) {, +        this.listeners = xPackLicenseState.listeners;, +        this.isSecurityEnabled = xPackLicenseState.isSecurityEnabled;, +        this.isSecurityExplicitlyEnabled = xPackLicenseState.isSecurityExplicitlyEnabled;, +        this.status = xPackLicenseState.status;, +        this.isSecurityEnabledByTrialVersion = xPackLicenseState.isSecurityEnabledByTrialVersion;, +    }, +, +        synchronized (this) {, +        }, +    public synchronized OperationMode getOperationMode() {, +    public synchronized boolean isActive() {, +    public synchronized boolean isAuthAllowed() {, +        final boolean isSecurityCurrentlyEnabled =, +            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled);, +        return isSecurityCurrentlyEnabled && (mode == OperationMode.STANDARD || mode == OperationMode.GOLD, +            || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL);, +    public synchronized boolean isIpFilteringAllowed() {, +        final boolean isSecurityCurrentlyEnabled =, +            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled);, +        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL);, +    public synchronized boolean isAuditingAllowed() {, +        final boolean isSecurityCurrentlyEnabled =, +            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled);, +        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL);, +    public synchronized boolean isStatsAndHealthAllowed() {, +    public synchronized boolean isDocumentAndFieldLevelSecurityAllowed() {, +        final boolean isSecurityCurrentlyEnabled =, +            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled);, +        return isSecurityCurrentlyEnabled && (mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM);, +    public synchronized AllowedRealmType allowedRealmType() {, +        final boolean isSecurityCurrentlyEnabled =, +            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled);, +        if (isSecurityCurrentlyEnabled) {, +        } else {, +            return AllowedRealmType.NONE;, +        }, +    public synchronized boolean isCustomRoleProvidersAllowed() {, +        final boolean isSecurityCurrentlyEnabled =, +            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled);, +        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL), +                && status.active;, +    public synchronized boolean isAuthorizationRealmAllowed() {, +        final boolean isSecurityCurrentlyEnabled =, +            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled);, +        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL), +            && status.active;, +    public synchronized boolean isWatcherAllowed() {, +    public synchronized boolean isMonitoringAllowed() {, +    public synchronized boolean isMonitoringClusterAlertsAllowed() {, +    public synchronized boolean isUpdateRetentionAllowed() {, +    public synchronized boolean isGraphAllowed() {, +    public synchronized boolean isMachineLearningAllowed() {, +    public synchronized boolean isRollupAllowed() {, +    public synchronized boolean isLogstashAllowed() {, +    public synchronized boolean isBeatsAllowed() {, +    public synchronized boolean isDeprecationAllowed() {, +    public synchronized boolean isUpgradeAllowed() {, +        return status.active;, +    public synchronized boolean isSqlAllowed() {, +    public synchronized boolean isJdbcAllowed() {, +    public synchronized boolean isTrialLicense() {, +    /**, +     * @return true if security is available to be used with the current license type, +     */, +    public synchronized boolean isSecurityAvailable() {, +    /**, +     * @return true if security has been disabled by a trial license which is the case of the, +     *         default distribution post 6.3.0. The conditions necessary for this are:, +     *         <ul>, +     *             <li>A trial license generated in 6.3.0+</li>, +     *             <li>xpack.security.enabled not specified as a setting</li>, +     *         </ul>, +     */, +    public synchronized boolean isSecurityDisabledByTrialLicense() {, +        return status.mode == OperationMode.TRIAL && isSecurityEnabled, +            && isSecurityExplicitlyEnabled == false, +            && isSecurityEnabledByTrialVersion == false;, +    }, +, +    private static boolean isSecurityEnabled(final OperationMode mode, final boolean isSecurityExplicitlyEnabled,, +                                             final boolean isSecurityEnabledByTrialVersion, final boolean isSecurityEnabled) {, +    public synchronized boolean isCcrAllowed() {, +    /**, +     * Creates a copy of this object based on the state at the time the method was called. The, +     * returned object will not be modified by a license update/expiration so it can be used to, +     * make multiple method calls on the license state safely. This object should not be long, +     * lived but instead used within a method when a consistent view of the license state, +     * is needed for multiple interactions with the license state., +     */, +    public synchronized XPackLicenseState copyCurrentLicenseState() {, +        return new XPackLicenseState(this);, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java]