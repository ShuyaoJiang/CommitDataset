[+++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/settings/MarvelSettingsService.java, +    public static final String INDEX_STATS_TIMEOUT = PREFIX + "index.stats.timeout";, +    final TimeValueSetting indexStatsTimeout = MarvelSetting.timeSetting(INDEX_STATS_TIMEOUT, TimeValue.timeValueMinutes(10),, +    public static final String INDICES = PREFIX + "indices";, +    final StringArraySetting indices = MarvelSetting.arraySetting(INDICES, Strings.EMPTY_ARRAY,, +    public static final String CLUSTER_STATE_TIMEOUT = PREFIX + "cluster.state.timeout";, +    final TimeValueSetting clusterStateTimeout = MarvelSetting.timeSetting(CLUSTER_STATE_TIMEOUT, TimeValue.timeValueMinutes(10),, +    public static final String INDEX_RECOVERY_TIMEOUT = PREFIX + "index.recovery.timeout";, +    final TimeValueSetting recoveryTimeout = MarvelSetting.timeSetting(INDEX_RECOVERY_TIMEOUT, TimeValue.timeValueMinutes(10),, +    public static final String INDEX_RECOVERY_ACTIVE_ONLY = PREFIX + "index.recovery.active_only";, +    final MarvelSetting.BooleanSetting recoveryActiveOnly = MarvelSetting.booleanSetting(INDEX_RECOVERY_ACTIVE_ONLY, Boolean.FALSE,, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/settings/MarvelSettingsService.java, +    public static final String INDEX_STATS_TIMEOUT = PREFIX + "index.stats.timeout";, +    final TimeValueSetting indexStatsTimeout = MarvelSetting.timeSetting(INDEX_STATS_TIMEOUT, TimeValue.timeValueMinutes(10),, +    public static final String INDICES = PREFIX + "indices";, +    final StringArraySetting indices = MarvelSetting.arraySetting(INDICES, Strings.EMPTY_ARRAY,, +    public static final String CLUSTER_STATE_TIMEOUT = PREFIX + "cluster.state.timeout";, +    final TimeValueSetting clusterStateTimeout = MarvelSetting.timeSetting(CLUSTER_STATE_TIMEOUT, TimeValue.timeValueMinutes(10),, +    public static final String INDEX_RECOVERY_TIMEOUT = PREFIX + "index.recovery.timeout";, +    final TimeValueSetting recoveryTimeout = MarvelSetting.timeSetting(INDEX_RECOVERY_TIMEOUT, TimeValue.timeValueMinutes(10),, +    public static final String INDEX_RECOVERY_ACTIVE_ONLY = PREFIX + "index.recovery.active_only";, +    final MarvelSetting.BooleanSetting recoveryActiveOnly = MarvelSetting.booleanSetting(INDEX_RECOVERY_ACTIVE_ONLY, Boolean.FALSE,, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/indices/IndexRecoveryCollectorTests.java, +import org.elasticsearch.cluster.block.ClusterBlocks;, +import java.util.concurrent.TimeUnit;, +    private boolean activeOnly = false;, +        return settingsBuilder(), +                .put(super.nodeSettings(nodeOrdinal)), +                .put(MarvelSettingsService.INDEX_RECOVERY_ACTIVE_ONLY, activeOnly), +                .build();, +        waitForNoBlocksOnNode(node1);, +        assertAcked(prepareCreate(indexName, 1, settingsBuilder().put(SETTING_NUMBER_OF_SHARDS, 3).put(SETTING_NUMBER_OF_REPLICAS, 1)));, +        logger.info("--> start second node");, +        final String node2 = internalCluster().startNode();, +        waitForNoBlocksOnNode(node2);, +        waitForRelocation();, +        for (MarvelSettingsService marvelSettingsService : internalCluster().getInstances(MarvelSettingsService.class)) {, +            assertThat(marvelSettingsService.recoveryActiveOnly(), equalTo(activeOnly));, +        results = newIndexRecoveryCollector().doCollect();, +                assertThat(shardRecovery.recoveryState().getType(), anyOf(equalTo(RecoveryState.Type.RELOCATION), equalTo(RecoveryState.Type.STORE), equalTo(RecoveryState.Type.REPLICA)));, +, +    public void waitForNoBlocksOnNode(final String nodeId) throws Exception {, +        assertBusy(new Callable<Void>() {, +            @Override, +            public Void call() throws Exception {, +                ClusterBlocks clusterBlocks = client(nodeId).admin().cluster().prepareState().setLocal(true).execute().actionGet().getState().blocks();, +                assertTrue(clusterBlocks.global().isEmpty());, +                assertTrue(clusterBlocks.indices().values().isEmpty());, +                return null;, +            }, +        }, 30L, TimeUnit.SECONDS);, +    }]