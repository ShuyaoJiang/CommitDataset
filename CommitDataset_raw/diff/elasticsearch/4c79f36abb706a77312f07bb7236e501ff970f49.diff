[+++ b/TESTING.asciidoc, +build. To add your plugin, create a directory called x-plugins as a sibling, +of elasticsearch. Checkout your plugin underneath x-plugins and the build, +will automatically pick it up. You can verify the plugin is included as part, +of the build by checking the projects of the build., +++ b/TESTING.asciidoc, +build. To add your plugin, create a directory called x-plugins as a sibling, +of elasticsearch. Checkout your plugin underneath x-plugins and the build, +will automatically pick it up. You can verify the plugin is included as part, +of the build by checking the projects of the build., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("  - skip:"), +                current.println("      features: always_skip"), +++ b/TESTING.asciidoc, +build. To add your plugin, create a directory called x-plugins as a sibling, +of elasticsearch. Checkout your plugin underneath x-plugins and the build, +will automatically pick it up. You can verify the plugin is included as part, +of the build by checking the projects of the build., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("  - skip:"), +                current.println("      features: always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit/), +            patterns.put('norelease', /norelease/), +++ b/TESTING.asciidoc, +build. To add your plugin, create a directory called x-plugins as a sibling, +of elasticsearch. Checkout your plugin underneath x-plugins and the build, +will automatically pick it up. You can verify the plugin is included as part, +of the build by checking the projects of the build., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("  - skip:"), +                current.println("      features: always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit/), +            patterns.put('norelease', /norelease/), +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +++ b/TESTING.asciidoc, +build. To add your plugin, create a directory called x-plugins as a sibling, +of elasticsearch. Checkout your plugin underneath x-plugins and the build, +will automatically pick it up. You can verify the plugin is included as part, +of the build by checking the projects of the build., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("  - skip:"), +                current.println("      features: always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit/), +            patterns.put('norelease', /norelease/), +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseListener.java, +++ b/TESTING.asciidoc, +build. To add your plugin, create a directory called x-plugins as a sibling, +of elasticsearch. Checkout your plugin underneath x-plugins and the build, +will automatically pick it up. You can verify the plugin is included as part, +of the build by checking the projects of the build., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("  - skip:"), +                current.println("      features: always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit/), +            patterns.put('norelease', /norelease/), +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseListener.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +    public static final int DEFAULT_SOCKET_TIMEOUT_MILLIS = 10000;, +        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom().setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +++ b/TESTING.asciidoc, +build. To add your plugin, create a directory called x-plugins as a sibling, +of elasticsearch. Checkout your plugin underneath x-plugins and the build, +will automatically pick it up. You can verify the plugin is included as part, +of the build by checking the projects of the build., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                current.println("  - skip:"), +                current.println("      features: always_skip"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('nocommit', /nocommit/), +            patterns.put('norelease', /norelease/), +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/ResponseListener.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +    public static final int DEFAULT_SOCKET_TIMEOUT_MILLIS = 10000;, +        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom().setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +import com.carrotsearch.randomizedtesting.generators.RandomNumbers;, +import org.apache.http.client.methods.HttpRequestBase;, +        HttpHost host = new HttpHost("localhost", 9200, getRandom().nextBoolean() ? "http" : "https");, +, +, +        HttpRequestBase request;, +        int requestType = RandomNumbers.randomIntBetween(getRandom(), 0, 7);, +        switch(requestType) {, +            case 0:, +                request = new HttpGetWithEntity(uri);, +                break;, +            case 1:, +                request = new HttpPost(uri);, +                break;, +            case 2:, +                request = new HttpPut(uri);, +                break;, +            case 3:]