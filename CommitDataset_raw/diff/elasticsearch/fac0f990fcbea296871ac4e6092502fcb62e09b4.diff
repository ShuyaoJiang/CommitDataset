[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            // TODO: remove setting logging level via system property, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            // TODO: remove setting logging level via system property, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +import java.time.LocalDateTime, +, +    Map<String, String> esSettings = new HashMap<>();, +, +    void esSetting(String setting, String value) {, +        esSettings.put(setting, value);, +    }, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            // TODO: remove setting logging level via system property, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +import java.time.LocalDateTime, +, +    Map<String, String> esSettings = new HashMap<>();, +, +    void esSetting(String setting, String value) {, +        esSettings.put(setting, value);, +    }, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        configureDistributionDependency(project, config.distribution), +        List<Task> startTasks = [], +            NodeInfo node = new NodeInfo(config, i, project, task), +            startTasks.add(configureNode(project, task, node)), +    static void configureDistributionDependency(Project project, String distro) {, +        String elasticsearchVersion = VersionProperties.elasticsearch, +        project.configurations {, +            elasticsearchDistro, +        }, +        project.dependencies {, +            elasticsearchDistro "org.elasticsearch.distribution.${distro}:elasticsearch:${elasticsearchVersion}@${packaging}", +        }, +    static Task configureNode(Project project, Task task, NodeInfo node) {, +        Task setup = project.tasks.create(name: taskName(task, node, 'clean'), type: Delete, dependsOn: task.dependsOn.collect()) {, +        setup = configureExtractTask(taskName(task, node, 'extract'), project, setup, node), +    static Task configureExtractTask(String name, Project project, Task setup, NodeInfo node) {, +        List extractDependsOn = [project.configurations.elasticsearchDistro, setup], +        /* project.configurations.elasticsearchDistro.singleFile will be an, +          external artifact if this is being run by a plugin not living in the, +          elasticsearch source tree. If this is a plugin built in the, +          elasticsearch source tree or this is a distro in the elasticsearch, +          source tree then this should be the version of elasticsearch built, +          by the source tree. If it isn't then Bad Things(TM) will happen. */, +                    from { project.zipTree(project.configurations.elasticsearchDistro.singleFile) }, +                        project.tarTree(project.resources.gzip(project.configurations.elasticsearchDistro.singleFile)), +                Object rpm = "${ -> project.configurations.elasticsearchDistro.singleFile}", +                Object deb = "${ -> project.configurations.elasticsearchDistro.singleFile}", +                'path.repo'                    : "${node.homeDir}/repo",, +                'path.shared_data'             : "${node.homeDir}/../",, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            // TODO: remove setting logging level via system property, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +import java.time.LocalDateTime, +, +    Map<String, String> esSettings = new HashMap<>();, +, +    void esSetting(String setting, String value) {, +        esSettings.put(setting, value);, +    }, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        configureDistributionDependency(project, config.distribution), +        List<Task> startTasks = [], +            NodeInfo node = new NodeInfo(config, i, project, task), +            startTasks.add(configureNode(project, task, node)), +    static void configureDistributionDependency(Project project, String distro) {, +        String elasticsearchVersion = VersionProperties.elasticsearch, +        project.configurations {, +            elasticsearchDistro, +        }, +        project.dependencies {, +            elasticsearchDistro "org.elasticsearch.distribution.${distro}:elasticsearch:${elasticsearchVersion}@${packaging}", +        }, +    static Task configureNode(Project project, Task task, NodeInfo node) {, +        Task setup = project.tasks.create(name: taskName(task, node, 'clean'), type: Delete, dependsOn: task.dependsOn.collect()) {, +        setup = configureExtractTask(taskName(task, node, 'extract'), project, setup, node), +    static Task configureExtractTask(String name, Project project, Task setup, NodeInfo node) {, +        List extractDependsOn = [project.configurations.elasticsearchDistro, setup], +        /* project.configurations.elasticsearchDistro.singleFile will be an, +          external artifact if this is being run by a plugin not living in the, +          elasticsearch source tree. If this is a plugin built in the, +          elasticsearch source tree or this is a distro in the elasticsearch, +          source tree then this should be the version of elasticsearch built, +          by the source tree. If it isn't then Bad Things(TM) will happen. */, +                    from { project.zipTree(project.configurations.elasticsearchDistro.singleFile) }, +                        project.tarTree(project.resources.gzip(project.configurations.elasticsearchDistro.singleFile)), +                Object rpm = "${ -> project.configurations.elasticsearchDistro.singleFile}", +                Object deb = "${ -> project.configurations.elasticsearchDistro.singleFile}", +                'path.repo'                    : "${node.homeDir}/repo",, +                'path.shared_data'             : "${node.homeDir}/../",, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +    NodeInfo(ClusterConfiguration config, int nodeNum, Project project, Task task) {]