[+++ b/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +        aggregatorCollector.preCollection();, +++ b/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +        aggregatorCollector.preCollection();, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                    final BucketCollector collector = BucketCollector.wrap(collectors);, +                    collector.preCollection();, +                    context.searcher().queryCollectors().put(AggregationPhase.class, collector);, +                }, +            } catch (IOException e) {, +                throw new AggregationInitializationException("Could not initialize aggregators", e);, +            BucketCollector globalsCollector = BucketCollector.wrap(globals);, +                globalsCollector.preCollection();, +                context.searcher().search(query, globalsCollector);, +++ b/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +        aggregatorCollector.preCollection();, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                    final BucketCollector collector = BucketCollector.wrap(collectors);, +                    collector.preCollection();, +                    context.searcher().queryCollectors().put(AggregationPhase.class, collector);, +                }, +            } catch (IOException e) {, +                throw new AggregationInitializationException("Could not initialize aggregators", e);, +            BucketCollector globalsCollector = BucketCollector.wrap(globals);, +                globalsCollector.preCollection();, +                context.searcher().search(query, globalsCollector);, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorBase.java, +        for (Aggregator agg : subAggregators) {, +            if (agg.needsScores()) {, +                return true;, +            }, +        }, +        return false;, +        collectableSubAggregators.preCollection();, +++ b/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +        aggregatorCollector.preCollection();, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                    final BucketCollector collector = BucketCollector.wrap(collectors);, +                    collector.preCollection();, +                    context.searcher().queryCollectors().put(AggregationPhase.class, collector);, +                }, +            } catch (IOException e) {, +                throw new AggregationInitializationException("Could not initialize aggregators", e);, +            BucketCollector globalsCollector = BucketCollector.wrap(globals);, +                globalsCollector.preCollection();, +                context.searcher().search(query, globalsCollector);, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorBase.java, +        for (Aggregator agg : subAggregators) {, +            if (agg.needsScores()) {, +                return true;, +            }, +        }, +        return false;, +        collectableSubAggregators.preCollection();, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +            aggregators[i] = factories[i].create(parent.context(), parent, collectsFromSingleBucket);, +            aggregators[i] = factories[i].create(ctx, null, collectsFromSingleBucket);, +++ b/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +        aggregatorCollector.preCollection();, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                    final BucketCollector collector = BucketCollector.wrap(collectors);, +                    collector.preCollection();, +                    context.searcher().queryCollectors().put(AggregationPhase.class, collector);, +                }, +            } catch (IOException e) {, +                throw new AggregationInitializationException("Could not initialize aggregators", e);, +            BucketCollector globalsCollector = BucketCollector.wrap(globals);, +                globalsCollector.preCollection();, +                context.searcher().search(query, globalsCollector);, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorBase.java, +        for (Aggregator agg : subAggregators) {, +            if (agg.needsScores()) {, +                return true;, +            }, +        }, +        return false;, +        collectableSubAggregators.preCollection();, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +            aggregators[i] = factories[i].create(parent.context(), parent, collectsFromSingleBucket);, +            aggregators[i] = factories[i].create(ctx, null, collectsFromSingleBucket);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/DeferringBucketCollector.java, +        return false;, +        if (collector.needsScores()) {, +            throw new ElasticsearchIllegalStateException("Cannot defer if scores are needed");, +        }, +++ b/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +        aggregatorCollector.preCollection();, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +                    final BucketCollector collector = BucketCollector.wrap(collectors);, +                    collector.preCollection();, +                    context.searcher().queryCollectors().put(AggregationPhase.class, collector);, +                }, +            } catch (IOException e) {, +                throw new AggregationInitializationException("Could not initialize aggregators", e);, +            BucketCollector globalsCollector = BucketCollector.wrap(globals);, +                globalsCollector.preCollection();, +                context.searcher().search(query, globalsCollector);, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorBase.java, +        for (Aggregator agg : subAggregators) {, +            if (agg.needsScores()) {]