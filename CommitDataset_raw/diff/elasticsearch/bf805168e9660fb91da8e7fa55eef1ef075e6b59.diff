[+++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_6_0 = new Version(V_1_6_0_ID, false, org.apache.lucene.util.Version.LUCENE_4_10_4);, +    public static final int V_1_6_1_ID = 1060199;, +    public static final Version V_1_6_1 = new Version(V_1_6_1_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +            case V_1_6_1_ID:, +                return V_1_6_1;, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_6_0 = new Version(V_1_6_0_ID, false, org.apache.lucene.util.Version.LUCENE_4_10_4);, +    public static final int V_1_6_1_ID = 1060199;, +    public static final Version V_1_6_1 = new Version(V_1_6_1_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +            case V_1_6_1_ID:, +                return V_1_6_1;, +++ b/core/src/main/java/org/elasticsearch/common/component/AbstractComponent.java, +import com.google.common.base.Strings;, +, +    /**, +     * Checks for a deprecated setting and logs the correct alternative, +     */, +    protected void logDeprecatedSetting(String settingName, String alternativeName) {, +        if (!Strings.isNullOrEmpty(settings.get(settingName))) {, +            deprecationLogger.deprecated("Setting [{}] is deprecated, use [{}] instead", settingName, alternativeName);, +        }, +    }, +, +    /**, +     * Checks for a removed setting and logs the correct alternative, +     */, +    protected void logRemovedSetting(String settingName, String alternativeName) {, +        if (!Strings.isNullOrEmpty(settings.get(settingName))) {, +            deprecationLogger.deprecated("Setting [{}] has been removed, use [{}] instead", settingName, alternativeName);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_6_0 = new Version(V_1_6_0_ID, false, org.apache.lucene.util.Version.LUCENE_4_10_4);, +    public static final int V_1_6_1_ID = 1060199;, +    public static final Version V_1_6_1 = new Version(V_1_6_1_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +            case V_1_6_1_ID:, +                return V_1_6_1;, +++ b/core/src/main/java/org/elasticsearch/common/component/AbstractComponent.java, +import com.google.common.base.Strings;, +, +    /**, +     * Checks for a deprecated setting and logs the correct alternative, +     */, +    protected void logDeprecatedSetting(String settingName, String alternativeName) {, +        if (!Strings.isNullOrEmpty(settings.get(settingName))) {, +            deprecationLogger.deprecated("Setting [{}] is deprecated, use [{}] instead", settingName, alternativeName);, +        }, +    }, +, +    /**, +     * Checks for a removed setting and logs the correct alternative, +     */, +    protected void logRemovedSetting(String settingName, String alternativeName) {, +        if (!Strings.isNullOrEmpty(settings.get(settingName))) {, +            deprecationLogger.deprecated("Setting [{}] has been removed, use [{}] instead", settingName, alternativeName);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +, +import org.apache.lucene.index.SegmentInfos;, +    // If enabled, the [verbose] SegmentInfos.infoStream logging is sent to System.out:, +    public static final String SETTING_ENABLE_LUCENE_SEGMENT_INFOS_TRACE = "node.enable_lucene_segment_infos_trace";, +, +    @SuppressForbidden(reason = "System.out.*"), +, +        if (settings.getAsBoolean(SETTING_ENABLE_LUCENE_SEGMENT_INFOS_TRACE, false)) {, +            SegmentInfos.setInfoStream(System.out);, +        }, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_1_6_0 = new Version(V_1_6_0_ID, false, org.apache.lucene.util.Version.LUCENE_4_10_4);, +    public static final int V_1_6_1_ID = 1060199;, +    public static final Version V_1_6_1 = new Version(V_1_6_1_ID, true, org.apache.lucene.util.Version.LUCENE_4_10_4);, +            case V_1_6_1_ID:, +                return V_1_6_1;, +++ b/core/src/main/java/org/elasticsearch/common/component/AbstractComponent.java, +import com.google.common.base.Strings;, +, +    /**, +     * Checks for a deprecated setting and logs the correct alternative, +     */, +    protected void logDeprecatedSetting(String settingName, String alternativeName) {, +        if (!Strings.isNullOrEmpty(settings.get(settingName))) {, +            deprecationLogger.deprecated("Setting [{}] is deprecated, use [{}] instead", settingName, alternativeName);, +        }, +    }, +, +    /**, +     * Checks for a removed setting and logs the correct alternative, +     */, +    protected void logRemovedSetting(String settingName, String alternativeName) {, +        if (!Strings.isNullOrEmpty(settings.get(settingName))) {, +            deprecationLogger.deprecated("Setting [{}] has been removed, use [{}] instead", settingName, alternativeName);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +, +import org.apache.lucene.index.SegmentInfos;, +    // If enabled, the [verbose] SegmentInfos.infoStream logging is sent to System.out:, +    public static final String SETTING_ENABLE_LUCENE_SEGMENT_INFOS_TRACE = "node.enable_lucene_segment_infos_trace";]