[+++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/roles.yml, +    - names: [ 'allowed-index', 'logs-eu-*' ], +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/roles.yml, +    - names: [ 'allowed-index', 'logs-eu-*' ], +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +import org.apache.http.HttpHost;, +    public void testAutoFollowPatterns() throws Exception {, +        assumeFalse("Test should only run when both clusters are running", runningAgainstLeaderCluster);, +        String allowedIndex = "logs-eu-20190101";, +        String disallowedIndex = "logs-us-20190101";, +, +        Request request = new Request("PUT", "/_ccr/auto_follow/leader_cluster");, +        request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"]}");, +        assertOK(client().performRequest(request));, +, +        try (RestClient leaderClient = buildLeaderClient()) {, +            for (String index : new String[]{allowedIndex, disallowedIndex}) {, +                Settings settings = Settings.builder(), +                    .put("index.soft_deletes.enabled", true), +                    .build();, +                String requestBody = "{\"settings\": " + Strings.toString(settings) +, +                    ", \"mappings\": {\"_doc\": {\"properties\": {\"field\": {\"type\": \"keyword\"}}}} }";, +                request = new Request("PUT", "/" + index);, +                request.setJsonEntity(requestBody);, +                assertOK(leaderClient.performRequest(request));, +, +                for (int i = 0; i < 5; i++) {, +                    String id = Integer.toString(i);, +                    index(leaderClient, index, id, "field", i, "filtered_field", "true");, +                }, +            }, +        }, +, +        assertBusy(() -> {, +            ensureYellow(allowedIndex);, +            verifyDocuments(adminClient(), allowedIndex, 5);, +        });, +        assertThat(indexExists(adminClient(), disallowedIndex), is(false));, +, +        // Cleanup by deleting auto follow pattern and unfollowing:, +        request = new Request("DELETE", "/_ccr/auto_follow/leader_cluster");, +        assertOK(client().performRequest(request));, +        unfollowIndex(allowedIndex);, +    }, +, +        index(adminClient(), index, id, fields);, +    }, +, +    private static void index(RestClient client, String index, String id, Object... fields) throws IOException {, +        assertOK(client.performRequest(request));, +    private static void ensureYellow(String index) throws IOException {, +        Request request = new Request("GET", "/_cluster/health/" + index);, +        request.addParameter("wait_for_status", "yellow");, +        request.addParameter("wait_for_no_relocating_shards", "true");, +        request.addParameter("wait_for_no_initializing_shards", "true");, +        request.addParameter("timeout", "70s");, +        request.addParameter("level", "shards");, +        adminClient().performRequest(request);, +    }, +, +    private RestClient buildLeaderClient() throws IOException {, +        assert runningAgainstLeaderCluster == false;, +        String leaderUrl = System.getProperty("tests.leader_host");, +        int portSeparator = leaderUrl.lastIndexOf(':');, +        HttpHost httpHost = new HttpHost(leaderUrl.substring(0, portSeparator),, +            Integer.parseInt(leaderUrl.substring(portSeparator + 1)), getProtocol());, +        return buildClient(restAdminSettings(), new HttpHost[]{httpHost});, +    }, +, +    private static void unfollowIndex(String followIndex) throws IOException {, +        assertOK(client().performRequest(new Request("POST", "/" + followIndex + "/_ccr/unfollow")));, +    }, +, +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/roles.yml, +    - names: [ 'allowed-index', 'logs-eu-*' ], +++ b/x-pack/plugin/ccr/qa/multi-cluster-with-security/src/test/java/org/elasticsearch/xpack/ccr/FollowIndexSecurityIT.java, +import org.apache.http.HttpHost;, +    public void testAutoFollowPatterns() throws Exception {, +        assumeFalse("Test should only run when both clusters are running", runningAgainstLeaderCluster);, +        String allowedIndex = "logs-eu-20190101";, +        String disallowedIndex = "logs-us-20190101";, +, +        Request request = new Request("PUT", "/_ccr/auto_follow/leader_cluster");, +        request.setJsonEntity("{\"leader_index_patterns\": [\"logs-*\"]}");, +        assertOK(client().performRequest(request));, +, +        try (RestClient leaderClient = buildLeaderClient()) {, +            for (String index : new String[]{allowedIndex, disallowedIndex}) {, +                Settings settings = Settings.builder(), +                    .put("index.soft_deletes.enabled", true), +                    .build();, +                String requestBody = "{\"settings\": " + Strings.toString(settings) +, +                    ", \"mappings\": {\"_doc\": {\"properties\": {\"field\": {\"type\": \"keyword\"}}}} }";, +                request = new Request("PUT", "/" + index);, +                request.setJsonEntity(requestBody);, +                assertOK(leaderClient.performRequest(request));, +, +                for (int i = 0; i < 5; i++) {, +                    String id = Integer.toString(i);, +                    index(leaderClient, index, id, "field", i, "filtered_field", "true");]