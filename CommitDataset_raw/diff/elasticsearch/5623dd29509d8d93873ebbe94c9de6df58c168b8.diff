[+++ b/core/src/main/java/org/elasticsearch/search/builder/NewSearchSourceBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.index.query.QueryParseContext;, +import org.elasticsearch.index.query.QueryParsingException;, +import java.util.Objects;, +    public static final ParseField FROM_FIELD = new ParseField("from");, +    public static final ParseField SIZE_FIELD = new ParseField("size");, +    public static final ParseField TIMEOUT_FIELD = new ParseField("timeout");, +    public static final ParseField TERMINATE_AFTER_FIELD = new ParseField("terminate_after");, +    public static final ParseField QUERY_FIELD = new ParseField("query");, +    public static final ParseField POST_FILTER_FIELD = new ParseField("post_filter");, +    public static final ParseField MIN_SCORE_FIELD = new ParseField("min_score");, +    public static final ParseField VERSION_FIELD = new ParseField("version");, +    public static final ParseField EXPLAIN_FIELD = new ParseField("explain");, +    public static final ParseField _SOURCE_FIELD = new ParseField("_source");, +    public static final ParseField FIELDS_FIELD = new ParseField("fields");, +    public static final ParseField FIELDDATA_FIELDS_FIELD = new ParseField("fielddata_fields");, +    public static final ParseField SCRIPT_FIELDS_FIELD = new ParseField("script_fields");, +    public static final ParseField SCRIPT_FIELD = new ParseField("script");, +    public static final ParseField SORT_FIELD = new ParseField("sort");, +    public static final ParseField TRACK_SCORES_FIELD = new ParseField("track_scores");, +    public static final ParseField INDICES_BOOST_FIELD = new ParseField("indices_boost");, +    public static final ParseField AGGREGATIONS_FIELD = new ParseField("aggregations");, +    public static final ParseField HIGHLIGHT_FIELD = new ParseField("highlight");, +    public static final ParseField INNER_HITS_FIELD = new ParseField("inner_hits");, +    public static final ParseField SUGGEST_FIELD = new ParseField("suggest");, +    public static final ParseField RESCORE_FIELD = new ParseField("rescore");, +    public static final ParseField STATS_FIELD = new ParseField("stats");, +, +    public NewSearchSourceBuilder postFilter(QueryBuilder<?> postFilter) {, +    public NewSearchSourceBuilder fromXContent(XContentParser parser, QueryParseContext context) throws IOException {, +        NewSearchSourceBuilder builder = new NewSearchSourceBuilder();, +        XContentParser.Token token;, +        String currentFieldName = null;, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if (context.parseFieldMatcher().match(currentFieldName, FROM_FIELD)) {, +                    builder.from = parser.intValue();, +                } else if (context.parseFieldMatcher().match(currentFieldName, SIZE_FIELD)) {, +                    builder.size = parser.intValue();, +                } else if (context.parseFieldMatcher().match(currentFieldName, TIMEOUT_FIELD)) {, +                    builder.timeoutInMillis = parser.longValue();, +                } else if (context.parseFieldMatcher().match(currentFieldName, TERMINATE_AFTER_FIELD)) {, +                    builder.terminateAfter = parser.intValue();, +                } else if (context.parseFieldMatcher().match(currentFieldName, MIN_SCORE_FIELD)) {, +                    builder.minScore = parser.floatValue();, +                } else if (context.parseFieldMatcher().match(currentFieldName, VERSION_FIELD)) {, +                    builder.version = parser.booleanValue();, +                } else if (context.parseFieldMatcher().match(currentFieldName, EXPLAIN_FIELD)) {, +                    builder.explain = parser.booleanValue();, +                } else if (context.parseFieldMatcher().match(currentFieldName, TRACK_SCORES_FIELD)) {, +                    builder.trackScores = parser.booleanValue();, +                } else {, +                    throw new QueryParsingException(context, "Unknown key for a " + token + " in [" + currentFieldName + "].",, +                            parser.getTokenLocation());, +                }, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                if (context.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) {, +                    builder.queryBuilder = context.parseInnerQueryBuilder();, +                } else if (context.parseFieldMatcher().match(currentFieldName, POST_FILTER_FIELD)) {, +                    builder.postQueryBuilder = context.parseInnerQueryBuilder();, +                } else if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELDS_FIELD)) {, +                    List<ScriptField> scriptFields = new ArrayList<>();, +                    while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                        parser.nextToken();, +                        String scriptFieldName = parser.currentName();, +                        parser.nextToken();, +                        if (token == XContentParser.Token.START_OBJECT) {, +                            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                                if (token == XContentParser.Token.FIELD_NAME) {, +                                    currentFieldName = parser.currentName();, +                                } else if (token.isValue()) {, +                                    if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELD)) {, +                                        scriptFields, +                                                .add(new ScriptField(scriptFieldName, Script.parse(parser, context.parseFieldMatcher())));, +                                    } else {, +                                        throw new QueryParsingException(context, "Unknown key for a " + token + " in [" + currentFieldName, +                                                + "].", parser.getTokenLocation());, +                                    }, +                                } else {, +                                    throw new QueryParsingException(context, "Unknown key for a " + token + " in [" + currentFieldName, +                                            + "].", parser.getTokenLocation());, +                                }, +                            }, +                        } else {, +                            throw new QueryParsingException(context, "Expected [" + XContentParser.Token.START_OBJECT + "] in [", +                                    + currentFieldName + "] but found [" + token + "]", parser.getTokenLocation());, +                        }, +                    }, +                    builder.scriptFields = scriptFields;, +                } else if (context.parseFieldMatcher().match(currentFieldName, INDICES_BOOST_FIELD)) {, +                    ObjectFloatHashMap<String> indexBoost = new ObjectFloatHashMap<String>();, +                    while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                        if (token == XContentParser.Token.FIELD_NAME) {, +                            currentFieldName = parser.currentName();, +                        } else if (token.isValue()) {, +                            if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELD)) {, +                                indexBoost.put(currentFieldName, parser.floatValue());]