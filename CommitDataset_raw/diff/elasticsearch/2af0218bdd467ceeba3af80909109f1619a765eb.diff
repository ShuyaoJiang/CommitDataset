[+++ /dev/null, +++ /dev/null, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalSpecTests.java, +            specs.add(RatedRequestsTests.createTestItem(indices, types));, +++ /dev/null, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalSpecTests.java, +            specs.add(RatedRequestsTests.createTestItem(indices, types));, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RatedRequestsTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.rankeval;, +, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.ParseFieldRegistry;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.query.MatchAllQueryBuilder;, +import org.elasticsearch.index.query.QueryParseContext;, +import org.elasticsearch.indices.query.IndicesQueriesRegistry;, +import org.elasticsearch.search.SearchModule;, +import org.elasticsearch.search.SearchRequestParsers;, +import org.elasticsearch.search.aggregations.AggregatorParsers;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.search.suggest.Suggesters;, +import org.elasticsearch.test.ESTestCase;, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +, +import static java.util.Collections.emptyList;, +, +public class RatedRequestsTests extends ESTestCase {, +, +    private static SearchModule searchModule;, +    private static SearchRequestParsers searchRequestParsers;, +, +    /**, +    * setup for the whole base test class, +    */, +    @BeforeClass, +    public static void init() throws IOException {, +        AggregatorParsers aggsParsers = new AggregatorParsers(new ParseFieldRegistry<>("aggregation"),, +                new ParseFieldRegistry<>("aggregation_pipes"));, +        searchModule = new SearchModule(Settings.EMPTY, false, emptyList());, +        IndicesQueriesRegistry queriesRegistry = searchModule.getQueryParserRegistry();, +        Suggesters suggesters = searchModule.getSuggesters();, +        searchRequestParsers = new SearchRequestParsers(queriesRegistry, aggsParsers, suggesters);, +    }, +, +    @AfterClass, +    public static void afterClass() throws Exception {, +        searchModule = null;, +        searchRequestParsers = null;, +    }, +, +    public static RatedRequest createTestItem(List<String> indices, List<String> types) {, +        String specId = randomAsciiOfLength(50);, +, +        SearchSourceBuilder testRequest = new SearchSourceBuilder();, +        testRequest.size(randomInt());, +        testRequest.query(new MatchAllQueryBuilder());, +, +        List<RatedDocument> ratedDocs = new ArrayList<>();, +        int size = randomIntBetween(0, 2);, +        for (int i = 0; i < size; i++) {, +            ratedDocs.add(RatedDocumentTests.createTestItem());, +        }, +        , +        return new RatedRequest(specId, testRequest, indices, types, ratedDocs);, +    }, +, +    public void testXContentRoundtrip() throws IOException {, +        List<String> indices = new ArrayList<>();, +        int size = randomIntBetween(0, 20);, +        for (int i = 0; i < size; i++) {, +            indices.add(randomAsciiOfLengthBetween(0, 50));, +        }, +, +        List<String> types = new ArrayList<>();]