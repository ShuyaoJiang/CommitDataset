[+++ b/modules/reindex/build.gradle, +import org.apache.tools.ant.taskdefs.condition.Os, +, +import static org.elasticsearch.gradle.BuildPlugin.getJavaHome, +, +, +// Support for testing reindex-from-remote against old Elaticsearch versions, +configurations {, +  oldesFixture, +  es2, +  es1, +  es090, +}, +, +dependencies {, +  oldesFixture project(':test:fixtures:old-elasticsearch'), +  /* Right now we just test against the latest version of each major we expect, +   * reindex-from-remote to work against. We could randomize the versions but, +   * that doesn't seem worth it at this point. */, +  es2 'org.elasticsearch.distribution.zip:elasticsearch:2.4.5@zip', +  es1 'org.elasticsearch:elasticsearch:1.7.6@zip', +  es090 'org.elasticsearch:elasticsearch:0.90.13@zip', +}, +, +if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +  // we can't get the pid files in windows so we skip reindex-from-old, +  integTestRunner.systemProperty "tests.fromOld", "false", +} else {, +  integTestRunner.systemProperty "tests.fromOld", "true", +  /* Set up tasks to unzip and run the old versions of ES before running the, +   * integration tests. */, +  for (String version : ['2', '1', '090']) {, +    Task unzip = task("unzipEs${version}", type: Sync) {, +      Configuration oldEsDependency = configurations['es' + version], +      dependsOn oldEsDependency, +      /* Use a closure here to delay resolution of the dependency until we need, +       * it */, +      from {, +        oldEsDependency.collect { zipTree(it) }, +      }, +      into temporaryDir, +    }, +    Task fixture = task("oldEs${version}Fixture",, +          type: org.elasticsearch.gradle.test.AntFixture) {, +      dependsOn project.configurations.oldesFixture, +      dependsOn unzip, +      executable = new File(project.runtimeJavaHome, 'bin/java'), +      env 'CLASSPATH', "${ -> project.configurations.oldesFixture.asPath }", +      env 'JAVA_HOME', getJavaHome(it, 7), +      args 'oldes.OldElasticsearch',, +           baseDir,, +           unzip.temporaryDir,, +           version == '090', +    }, +    integTest.dependsOn fixture, +    integTestRunner {, +      /* Use a closure on the string to delay evaluation until right before we, +       * run the integration tests so that we can be sure that the file is, +       * ready. */, +      systemProperty "es${version}.port", "${ -> fixture.addressAndPort }", +    }, +  }, +}, +++ b/modules/reindex/build.gradle, +import org.apache.tools.ant.taskdefs.condition.Os, +, +import static org.elasticsearch.gradle.BuildPlugin.getJavaHome, +, +, +// Support for testing reindex-from-remote against old Elaticsearch versions, +configurations {, +  oldesFixture, +  es2, +  es1, +  es090, +}, +, +dependencies {, +  oldesFixture project(':test:fixtures:old-elasticsearch'), +  /* Right now we just test against the latest version of each major we expect, +   * reindex-from-remote to work against. We could randomize the versions but, +   * that doesn't seem worth it at this point. */, +  es2 'org.elasticsearch.distribution.zip:elasticsearch:2.4.5@zip', +  es1 'org.elasticsearch:elasticsearch:1.7.6@zip', +  es090 'org.elasticsearch:elasticsearch:0.90.13@zip', +}, +, +if (Os.isFamily(Os.FAMILY_WINDOWS)) {, +  // we can't get the pid files in windows so we skip reindex-from-old, +  integTestRunner.systemProperty "tests.fromOld", "false", +} else {, +  integTestRunner.systemProperty "tests.fromOld", "true", +  /* Set up tasks to unzip and run the old versions of ES before running the, +   * integration tests. */, +  for (String version : ['2', '1', '090']) {, +    Task unzip = task("unzipEs${version}", type: Sync) {, +      Configuration oldEsDependency = configurations['es' + version], +      dependsOn oldEsDependency, +      /* Use a closure here to delay resolution of the dependency until we need, +       * it */]