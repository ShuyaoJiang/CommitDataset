[+++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +            //e.g. _name stays as-is, _first_name becomes _firstName, +            if (c == '_' && i > 0) {, +++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +            //e.g. _name stays as-is, _first_name becomes _firstName, +            if (c == '_' && i > 0) {, +++ b/core/src/main/java/org/elasticsearch/index/query/PrefixQueryParser.java, +import org.elasticsearch.common.ParseField;, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of prefix query");, +, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +            //e.g. _name stays as-is, _first_name becomes _firstName, +            if (c == '_' && i > 0) {, +++ b/core/src/main/java/org/elasticsearch/index/query/PrefixQueryParser.java, +import org.elasticsearch.common.ParseField;, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of prefix query");, +, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/RangeQueryParser.java, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of range query");, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +            //e.g. _name stays as-is, _first_name becomes _firstName, +            if (c == '_' && i > 0) {, +++ b/core/src/main/java/org/elasticsearch/index/query/PrefixQueryParser.java, +import org.elasticsearch.common.ParseField;, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of prefix query");, +, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/RangeQueryParser.java, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of range query");, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/RegexpQueryParser.java, +import org.elasticsearch.common.ParseField;, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of regexp query");, +, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +            //e.g. _name stays as-is, _first_name becomes _firstName, +            if (c == '_' && i > 0) {, +++ b/core/src/main/java/org/elasticsearch/index/query/PrefixQueryParser.java, +import org.elasticsearch.common.ParseField;, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of prefix query");, +, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/RangeQueryParser.java, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of range query");, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/RegexpQueryParser.java, +import org.elasticsearch.common.ParseField;, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of regexp query");, +, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/TermQueryParser.java, +import org.elasticsearch.common.ParseField;, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of term query");, +    private static final ParseField BOOST_FIELD = new ParseField("boost").withAllDeprecated("boost is not supported in short version of term query");, +, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, BOOST_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +            //e.g. _name stays as-is, _first_name becomes _firstName, +            if (c == '_' && i > 0) {, +++ b/core/src/main/java/org/elasticsearch/index/query/PrefixQueryParser.java, +import org.elasticsearch.common.ParseField;, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of prefix query");, +, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/RangeQueryParser.java, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of range query");, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/RegexpQueryParser.java, +import org.elasticsearch.common.ParseField;, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of regexp query");, +, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/TermQueryParser.java, +import org.elasticsearch.common.ParseField;, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of term query");, +    private static final ParseField BOOST_FIELD = new ParseField("boost").withAllDeprecated("boost is not supported in short version of term query");, +, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +                } else if (parseContext.parseFieldMatcher().match(currentFieldName, BOOST_FIELD)) {, +++ b/core/src/test/java/org/elasticsearch/common/StringsTests.java, +        assertEquals("_foo", Strings.toCamelCase("_foo"));, +        assertEquals("_fooBar", Strings.toCamelCase("_foo_bar_"));, +++ b/core/src/main/java/org/elasticsearch/common/Strings.java, +            //e.g. _name stays as-is, _first_name becomes _firstName, +            if (c == '_' && i > 0) {, +++ b/core/src/main/java/org/elasticsearch/index/query/PrefixQueryParser.java, +import org.elasticsearch.common.ParseField;, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of prefix query");, +, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/RangeQueryParser.java, +    private static final ParseField NAME_FIELD = new ParseField("_name").withAllDeprecated("query name is not supported in short version of range query");, +                if (parseContext.parseFieldMatcher().match(currentFieldName, NAME_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/RegexpQueryParser.java, +import org.elasticsearch.common.ParseField;]