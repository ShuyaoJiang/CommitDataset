[+++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/exporter/local/LocalExporterTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.marvel.agent.exporter.local;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthStatus;, +import org.elasticsearch.action.admin.indices.recovery.RecoveryResponse;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.support.IndicesOptions;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.metadata.IndexTemplateMetaData;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.marvel.agent.collector.cluster.ClusterStateCollector;, +import org.elasticsearch.marvel.agent.collector.cluster.ClusterStateMarvelDoc;, +import org.elasticsearch.marvel.agent.collector.indices.IndexRecoveryCollector;, +import org.elasticsearch.marvel.agent.collector.indices.IndexRecoveryMarvelDoc;, +import org.elasticsearch.marvel.agent.exporter.Exporter;, +import org.elasticsearch.marvel.agent.exporter.Exporters;, +import org.elasticsearch.marvel.agent.exporter.MarvelDoc;, +import org.elasticsearch.marvel.agent.settings.MarvelSettings;, +import org.elasticsearch.marvel.test.MarvelIntegTestCase;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.test.ESIntegTestCase.ClusterScope;, +import org.elasticsearch.test.ESIntegTestCase.Scope;, +import org.joda.time.format.DateTimeFormat;, +import org.junit.Test;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicLong;, +, +import static org.elasticsearch.marvel.agent.exporter.http.HttpExporter.MIN_SUPPORTED_TEMPLATE_VERSION;, +import static org.elasticsearch.marvel.agent.exporter.http.HttpExporterUtils.MARVEL_VERSION_FIELD;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.hamcrest.Matchers.equalTo;, +, +@ClusterScope(scope = Scope.TEST, numDataNodes = 0, numClientNodes = 0, transportClientRatio = 0.0), +public class LocalExporterTests extends MarvelIntegTestCase {, +, +    private final static AtomicLong timeStampGenerator = new AtomicLong();, +, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        return Settings.builder(), +                .put(super.nodeSettings(nodeOrdinal)), +                .put(MarvelSettings.STARTUP_DELAY, "1h"), +                .build();, +    }, +, +    @Test, +    public void testSimpleExport() throws Exception {, +        internalCluster().startNode(Settings.builder(), +                .put("marvel.agent.exporters._local.type", LocalExporter.TYPE), +                .put("marvel.agent.exporters._local.enabled", true), +                .build());, +        ensureGreen();, +, +        Exporter exporter = getExporter("_local");, +, +        logger.debug("--> exporting a single marvel doc");, +        exporter.export(Collections.singletonList(newRandomMarvelDoc()));, +        assertMarvelDocsCount(1);, +, +        wipeMarvelIndices();, +, +        final List<MarvelDoc> marvelDocs = new ArrayList<>();, +        for (int i=0; i < randomIntBetween(2, 50); i++) {, +            marvelDocs.add(newRandomMarvelDoc());, +        }, +, +        logger.debug("--> exporting {} marvel docs", marvelDocs.size());, +        exporter.export(marvelDocs);, +        assertMarvelDocsCount(marvelDocs.size());, +, +        SearchResponse response = client().prepareSearch(MarvelSettings.MARVEL_INDICES_PREFIX + "*").get();, +        for (SearchHit hit : response.getHits().hits()) {, +            Map<String, Object> source = hit.sourceAsMap();, +            assertNotNull(source.get("cluster_uuid"));, +            assertNotNull(source.get("timestamp"));, +        }, +    }, +, +    @Test, +    public void testTemplateCreation() throws Exception {, +        internalCluster().startNode(Settings.builder(), +                .put("marvel.agent.exporters._local.type", LocalExporter.TYPE), +                .build());, +        ensureGreen();, +, +        LocalExporter exporter = getExporter("_local");, +        assertTrue(exporter.shouldUpdateTemplate(null, Version.CURRENT));, +]