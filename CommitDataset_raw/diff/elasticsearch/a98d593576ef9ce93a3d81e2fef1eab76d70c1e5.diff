[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +                           jobTaskState.isStatusStale(task); // previous executor node failed and, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +                           jobTaskState.isStatusStale(task); // previous executor node failed and, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +        if (taskStatus.isStatusStale(jobTask)) {, +            String reason = "cannot start datafeed [" + datafeed.getId() + "], job [" + datafeed.getJobId() + "] status is stale";, +            logger.debug(reason);, +            return new Assignment(null, reason);, +        }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +                           jobTaskState.isStatusStale(task); // previous executor node failed and, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +        if (taskStatus.isStatusStale(jobTask)) {, +            String reason = "cannot start datafeed [" + datafeed.getId() + "], job [" + datafeed.getJobId() + "] status is stale";, +            logger.debug(reason);, +            return new Assignment(null, reason);, +        }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/JobTaskStatus.java, +    public boolean isStatusStale(PersistentTask<?> task) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +                           jobTaskState.isStatusStale(task); // previous executor node failed and, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +        if (taskStatus.isStatusStale(jobTask)) {, +            String reason = "cannot start datafeed [" + datafeed.getId() + "], job [" + datafeed.getJobId() + "] status is stale";, +            logger.debug(reason);, +            return new Assignment(null, reason);, +        }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/JobTaskStatus.java, +    public boolean isStatusStale(PersistentTask<?> task) {, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/action/StartDatafeedActionTests.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +        // Set to lower allocationId, so job task is stale:, +        tasksBuilder.updateTaskStatus(MlMetadata.jobTaskId(job.getId()), new JobTaskStatus(JobState.OPENED, 0));, +        assertEquals("cannot start datafeed [datafeed_id], job [job_id] status is stale",, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +                           jobTaskState.isStatusStale(task); // previous executor node failed and, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +        if (taskStatus.isStatusStale(jobTask)) {, +            String reason = "cannot start datafeed [" + datafeed.getId() + "], job [" + datafeed.getJobId() + "] status is stale";, +            logger.debug(reason);, +            return new Assignment(null, reason);, +        }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/config/JobTaskStatus.java, +    public boolean isStatusStale(PersistentTask<?> task) {, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/action/StartDatafeedActionTests.java, +import org.elasticsearch.xpack.ml.job.config.JobTaskStatus;, +        // Set to lower allocationId, so job task is stale:, +        tasksBuilder.updateTaskStatus(MlMetadata.jobTaskId(job.getId()), new JobTaskStatus(JobState.OPENED, 0));, +        assertEquals("cannot start datafeed [datafeed_id], job [job_id] status is stale",, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/BasicDistributedJobsIT.java, +                            (jobTaskState == null || jobTaskState.isStatusStale(task));]