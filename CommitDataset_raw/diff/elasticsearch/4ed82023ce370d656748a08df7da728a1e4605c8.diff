[+++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/search/embedded/SingleShardEmbeddedSearchTests.java, +import org.elasticsearch.common.collect.Maps;, +import org.elasticsearch.search.internal.InternalSearchResponse;, +    @Test public void testQueryAndFetchIterateWithFrom() throws Exception {, +        QueryFetchSearchResult result = searchService.executeFetchPhase(searchRequest(searchSource().query(matchAllQuery()).from(0).size(2).sort("age", SortOrder.DESC)));, +        assertThat(result.queryResult().topDocs().totalHits, equalTo(5));, +, +        Set<String> idsLoaded = Sets.newHashSet();, +, +        ShardDoc[] sortedShardList = searchPhaseController.sortDocs(newArrayList(result));, +        Map<SearchShardTarget, QueryFetchSearchResult> queryResults = Maps.newHashMap();, +        queryResults.put(result.queryResult().shardTarget(), result);, +        InternalSearchResponse searchResponse = searchPhaseController.merge(sortedShardList, queryResults, queryResults);, +, +        for (SearchHit hit : searchResponse.hits()) {, +            idsLoaded.add(hit.id());, +        }, +, +        // iterate to the next 2, +        result = searchService.executeFetchPhase(searchRequest(searchSource().query(matchAllQuery()).from(2).size(2).sort("age", SortOrder.DESC)));, +        assertThat(result.queryResult().topDocs().totalHits, equalTo(5));, +, +        sortedShardList = searchPhaseController.sortDocs(newArrayList(result));, +        queryResults = Maps.newHashMap();, +        queryResults.put(result.queryResult().shardTarget(), result);, +        searchResponse = searchPhaseController.merge(sortedShardList, queryResults, queryResults);, +, +        for (SearchHit hit : searchResponse.hits()) {, +            idsLoaded.add(hit.id());, +        }, +        result = searchService.executeFetchPhase(searchRequest(searchSource().query(matchAllQuery()).from(4).size(2).sort("age", SortOrder.DESC)));, +        assertThat(result.queryResult().topDocs().totalHits, equalTo(5));, +, +        sortedShardList = searchPhaseController.sortDocs(newArrayList(result));, +        queryResults = Maps.newHashMap();, +        queryResults.put(result.queryResult().shardTarget(), result);, +        searchResponse = searchPhaseController.merge(sortedShardList, queryResults, queryResults);, +, +        for (SearchHit hit : searchResponse.hits()) {, +            idsLoaded.add(hit.id());, +        }, +, +        // verify all ids were loaded, +        Set<String> expectedIds = Sets.newHashSet("1", "2", "3", "4", "5");, +        assertThat(idsLoaded, equalTo(expectedIds));, +    }, +]