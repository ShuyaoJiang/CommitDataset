[+++ b/core/bin/plugin, +exec "$JAVA" $JAVA_OPTS $ES_JAVA_OPTS -Xmx64m -Xms16m -Delasticsearch -Des.path.home="$ES_HOME" $properties -cp "$ES_HOME/lib/*" org.elasticsearch.plugins.PluginManagerCliParser $args, +++ b/core/bin/plugin, +exec "$JAVA" $JAVA_OPTS $ES_JAVA_OPTS -Xmx64m -Xms16m -Delasticsearch -Des.path.home="$ES_HOME" $properties -cp "$ES_HOME/lib/*" org.elasticsearch.plugins.PluginManagerCliParser $args, +++ b/core/bin/plugin.bat, +"%JAVA_HOME%\bin\java" %JAVA_OPTS% %ES_JAVA_OPTS% -Xmx64m -Xms16m -Des.path.home="%ES_HOME%" -cp "%ES_HOME%/lib/*;" "org.elasticsearch.plugins.PluginManagerCliParser" %*, +++ b/core/bin/plugin, +exec "$JAVA" $JAVA_OPTS $ES_JAVA_OPTS -Xmx64m -Xms16m -Delasticsearch -Des.path.home="$ES_HOME" $properties -cp "$ES_HOME/lib/*" org.elasticsearch.plugins.PluginManagerCliParser $args, +++ b/core/bin/plugin.bat, +"%JAVA_HOME%\bin\java" %JAVA_OPTS% %ES_JAVA_OPTS% -Xmx64m -Xms16m -Des.path.home="%ES_HOME%" -cp "%ES_HOME%/lib/*;" "org.elasticsearch.plugins.PluginManagerCliParser" %*, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +++ b/core/bin/plugin, +exec "$JAVA" $JAVA_OPTS $ES_JAVA_OPTS -Xmx64m -Xms16m -Delasticsearch -Des.path.home="$ES_HOME" $properties -cp "$ES_HOME/lib/*" org.elasticsearch.plugins.PluginManagerCliParser $args, +++ b/core/bin/plugin.bat, +"%JAVA_HOME%\bin\java" %JAVA_OPTS% %ES_JAVA_OPTS% -Xmx64m -Xms16m -Des.path.home="%ES_HOME%" -cp "%ES_HOME%/lib/*;" "org.elasticsearch.plugins.PluginManagerCliParser" %*, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.concurrent.ConcurrentMap;, +    private final ConcurrentMap<String, IndexFieldData<?>> loadedFieldData = ConcurrentCollections.newConcurrentMap();, +            final Collection<IndexFieldData<?>> fieldDataValues = loadedFieldData.values();, +            for (IndexFieldData<?> fieldData : fieldDataValues) {, +                try {, +                    fieldData.clear();, +                } catch (Throwable t) {, +                    exceptions.add(t);, +                }, +            }, +            fieldDataValues.clear();, +            final IndexFieldData<?> fieldData = loadedFieldData.remove(fieldName);, +            if (fieldData != null) {, +                try {, +                    fieldData.clear();, +                } catch (Throwable t) {, +                    exceptions.add(t);, +                }, +            }, +    public void onMappingUpdate() {, +        // synchronize to make sure to not miss field data instances that are being loaded, +        fieldLoadingLock.globalLock().lock();, +        try {, +            // important: do not clear fieldDataCaches: the cache may be reused, +            loadedFieldData.clear();, +        } finally {, +            fieldLoadingLock.globalLock().unlock();, +        }, +    }, +, +        IndexFieldData<?> fieldData = loadedFieldData.get(key);, +        if (fieldData == null) {, +                fieldData = loadedFieldData.get(key);, +                if (fieldData == null) {, +                    fieldData = builder.build(index, indexSettings, fieldType, cache, circuitBreakerService, indexService.mapperService());, +                    loadedFieldData.put(fieldNames.indexName(), fieldData);, +                }, +        return (IFD) fieldData;, +    }, +++ b/core/bin/plugin, +exec "$JAVA" $JAVA_OPTS $ES_JAVA_OPTS -Xmx64m -Xms16m -Delasticsearch -Des.path.home="$ES_HOME" $properties -cp "$ES_HOME/lib/*" org.elasticsearch.plugins.PluginManagerCliParser $args, +++ b/core/bin/plugin.bat, +"%JAVA_HOME%\bin\java" %JAVA_OPTS% %ES_JAVA_OPTS% -Xmx64m -Xms16m -Des.path.home="%ES_HOME%" -cp "%ES_HOME%/lib/*;" "org.elasticsearch.plugins.PluginManagerCliParser" %*, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import java.util.concurrent.ConcurrentMap;, +    private final ConcurrentMap<String, IndexFieldData<?>> loadedFieldData = ConcurrentCollections.newConcurrentMap();, +            final Collection<IndexFieldData<?>> fieldDataValues = loadedFieldData.values();, +            for (IndexFieldData<?> fieldData : fieldDataValues) {, +                try {, +                    fieldData.clear();, +                } catch (Throwable t) {, +                    exceptions.add(t);, +                }, +            }, +            fieldDataValues.clear();, +            final IndexFieldData<?> fieldData = loadedFieldData.remove(fieldName);, +            if (fieldData != null) {, +                try {, +                    fieldData.clear();, +                } catch (Throwable t) {, +                    exceptions.add(t);, +                }, +            }, +    public void onMappingUpdate() {, +        // synchronize to make sure to not miss field data instances that are being loaded, +        fieldLoadingLock.globalLock().lock();, +        try {, +            // important: do not clear fieldDataCaches: the cache may be reused, +            loadedFieldData.clear();, +        } finally {, +            fieldLoadingLock.globalLock().unlock();, +        }, +    }, +, +        IndexFieldData<?> fieldData = loadedFieldData.get(key);, +        if (fieldData == null) {, +                fieldData = loadedFieldData.get(key);, +                if (fieldData == null) {, +                    fieldData = builder.build(index, indexSettings, fieldType, cache, circuitBreakerService, indexService.mapperService());, +                    loadedFieldData.put(fieldNames.indexName(), fieldData);]