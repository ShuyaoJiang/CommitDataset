[+++ b/docs/reference/modules/scripting/painless-syntax.asciidoc, +The `?:` (aka Elvis) operator coalesces null values. So `x ?: 0` is `0` if `x`, +is `null` and whatever value `x` has otherwise. It is a convenient way to write, +default values like `doc['x'].value ?: 0` which is 0 if `x` is not in the, +document being processed. It can also work with null safe dereferences to, +efficiently handle null in chains. For example,, +`doc['foo.keyword'].value?.length() ?: 0` is 0 if the document being processed, +doesn't have a `foo.keyword` field but is the length of that field if it does., +Lastly, `?:` is lazy so the right hand side is not evaluated at all if the left, +hand side isn't null., +, +NOTE: Unlike Groovy, Painless' `?:` operator only coalesces `null`, not `false`, +or http://groovy-lang.org/semantics.html#Groovy-Truth[falsy] values. Strictly, +speaking Painless' `?:` is more like Kotlin's `?:` than Groovy's `?:`., +, +, +++ b/docs/reference/modules/scripting/painless-syntax.asciidoc, +The `?:` (aka Elvis) operator coalesces null values. So `x ?: 0` is `0` if `x`, +is `null` and whatever value `x` has otherwise. It is a convenient way to write, +default values like `doc['x'].value ?: 0` which is 0 if `x` is not in the, +document being processed. It can also work with null safe dereferences to, +efficiently handle null in chains. For example,, +`doc['foo.keyword'].value?.length() ?: 0` is 0 if the document being processed, +doesn't have a `foo.keyword` field but is the length of that field if it does., +Lastly, `?:` is lazy so the right hand side is not evaluated at all if the left, +hand side isn't null., +, +NOTE: Unlike Groovy, Painless' `?:` operator only coalesces `null`, not `false`, +or http://groovy-lang.org/semantics.html#Groovy-Truth[falsy] values. Strictly, +speaking Painless' `?:` is more like Kotlin's `?:` than Groovy's `?:`., +, +, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +NSDOT:     '?.' -> mode(AFTER_DOT);, +ELVIS:   '?:';, +++ b/docs/reference/modules/scripting/painless-syntax.asciidoc, +The `?:` (aka Elvis) operator coalesces null values. So `x ?: 0` is `0` if `x`, +is `null` and whatever value `x` has otherwise. It is a convenient way to write, +default values like `doc['x'].value ?: 0` which is 0 if `x` is not in the, +document being processed. It can also work with null safe dereferences to, +efficiently handle null in chains. For example,, +`doc['foo.keyword'].value?.length() ?: 0` is 0 if the document being processed, +doesn't have a `foo.keyword` field but is the length of that field if it does., +Lastly, `?:` is lazy so the right hand side is not evaluated at all if the left, +hand side isn't null., +, +NOTE: Unlike Groovy, Painless' `?:` operator only coalesces `null`, not `false`, +or http://groovy-lang.org/semantics.html#Groovy-Truth[falsy] values. Strictly, +speaking Painless' `?:` is more like Kotlin's `?:` than Groovy's `?:`., +, +, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +NSDOT:     '?.' -> mode(AFTER_DOT);, +ELVIS:   '?:';, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.tokens, +NSDOT=10, +COMMA=11, +SEMICOLON=12, +IF=13, +IN=14, +ELSE=15, +WHILE=16, +DO=17, +FOR=18, +CONTINUE=19, +BREAK=20, +RETURN=21, +NEW=22, +TRY=23, +CATCH=24, +THROW=25, +THIS=26, +INSTANCEOF=27, +BOOLNOT=28, +BWNOT=29, +MUL=30, +DIV=31, +REM=32, +ADD=33, +SUB=34, +LSH=35, +RSH=36, +USH=37, +LT=38, +LTE=39, +GT=40, +GTE=41, +EQ=42, +EQR=43, +NE=44, +NER=45, +BWAND=46, +XOR=47, +BWOR=48, +BOOLAND=49, +BOOLOR=50, +COND=51, +COLON=52, +ELVIS=53, +REF=54]