[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ /dev/null, +++ b/build.gradle, +// IDE configuration, +  apply plugin: 'eclipse', +, +  // TODO: similar for intellij, +  eclipse {, +    classpath {, +      defaultOutputDir = new File(project.buildDir, 'eclipse'), +    }, +  }, +  if (project != null) {, +    // could be null, if this project is attached to another..., +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ /dev/null, +++ b/build.gradle, +// IDE configuration, +  apply plugin: 'eclipse', +, +  // TODO: similar for intellij, +  eclipse {, +    classpath {, +      defaultOutputDir = new File(project.buildDir, 'eclipse'), +    }, +  }, +  if (project != null) {, +    // could be null, if this project is attached to another..., +++ b/buildSrc/build.gradle, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ /dev/null, +++ b/build.gradle, +// IDE configuration, +  apply plugin: 'eclipse', +, +  // TODO: similar for intellij, +  eclipse {, +    classpath {, +      defaultOutputDir = new File(project.buildDir, 'eclipse'), +    }, +  }, +  if (project != null) {, +    // could be null, if this project is attached to another..., +++ b/buildSrc/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ /dev/null, +++ b/build.gradle, +// IDE configuration, +  apply plugin: 'eclipse', +, +  // TODO: similar for intellij, +  eclipse {, +    classpath {, +      defaultOutputDir = new File(project.buildDir, 'eclipse'), +    }, +  }, +  if (project != null) {, +    // could be null, if this project is attached to another..., +++ b/buildSrc/build.gradle, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE by running `gradle eclipse` and then importing the project into their workspace: `File > Import > Existing project into workspace` and make sure to select `Search for nested projects...` option as Elasticsearch is a multi-module maven project. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ /dev/null, +++ b/build.gradle, +// IDE configuration, +  apply plugin: 'eclipse', +, +  // TODO: similar for intellij, +  eclipse {, +    classpath {, +      defaultOutputDir = new File(project.buildDir, 'eclipse'), +    }]