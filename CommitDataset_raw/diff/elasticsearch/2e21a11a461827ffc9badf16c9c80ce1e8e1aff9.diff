[+++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/EnableAllocationDecider.java, +    private void setEnableRebalance(Rebalance enableRebalance) {, +    private void setEnableAllocation(Allocation enableAllocation) {, +        return canAllocate(shardRouting, allocation);, +    }, +, +    @Override, +    public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation) {, +    public Decision canRebalance(RoutingAllocation allocation) {, +        if (allocation.ignoreDisable()) {, +            return allocation.decision(Decision.YES, NAME, "allocation is explicitly ignoring any disabling of rebalancing");, +        }, +, +        if (enableRebalance == Rebalance.NONE) {, +            for (IndexMetaData indexMetaData : allocation.metaData()) {, +                if (INDEX_ROUTING_REBALANCE_ENABLE_SETTING.exists(indexMetaData.getSettings()), +                    && INDEX_ROUTING_REBALANCE_ENABLE_SETTING.get(indexMetaData.getSettings()) != Rebalance.NONE) {, +                    return allocation.decision(Decision.YES, NAME, "rebalancing is permitted on one or more indices");, +                }, +            }, +            return allocation.decision(Decision.NO, NAME, "no rebalancing is allowed due to %s", setting(enableRebalance, false));, +        }, +, +        return allocation.decision(Decision.YES, NAME, "rebalancing is not globally disabled");, +    }, +, +    @Override, +            return allocation.decision(Decision.YES, NAME, "allocation is explicitly ignoring any disabling of rebalancing");, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/EnableAllocationDecider.java, +    private void setEnableRebalance(Rebalance enableRebalance) {, +    private void setEnableAllocation(Allocation enableAllocation) {, +        return canAllocate(shardRouting, allocation);, +    }, +, +    @Override, +    public Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation) {, +    public Decision canRebalance(RoutingAllocation allocation) {, +        if (allocation.ignoreDisable()) {, +            return allocation.decision(Decision.YES, NAME, "allocation is explicitly ignoring any disabling of rebalancing");, +        }, +, +        if (enableRebalance == Rebalance.NONE) {, +            for (IndexMetaData indexMetaData : allocation.metaData()) {, +                if (INDEX_ROUTING_REBALANCE_ENABLE_SETTING.exists(indexMetaData.getSettings()), +                    && INDEX_ROUTING_REBALANCE_ENABLE_SETTING.get(indexMetaData.getSettings()) != Rebalance.NONE) {, +                    return allocation.decision(Decision.YES, NAME, "rebalancing is permitted on one or more indices");, +                }, +            }, +            return allocation.decision(Decision.NO, NAME, "no rebalancing is allowed due to %s", setting(enableRebalance, false));, +        }, +, +        return allocation.decision(Decision.YES, NAME, "rebalancing is not globally disabled");, +    }, +, +    @Override, +            return allocation.decision(Decision.YES, NAME, "allocation is explicitly ignoring any disabling of rebalancing");, +++ b/server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/EnableAllocationShortCircuitTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.cluster.routing.allocation.decider;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.ClusterModule;, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ESAllocationTestCase;, +import org.elasticsearch.cluster.EmptyClusterInfoService;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.cluster.routing.RoutingNode;, +import org.elasticsearch.cluster.routing.RoutingTable;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.cluster.routing.allocation.AllocationService;, +import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;, +import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.plugins.ClusterPlugin;, +import org.elasticsearch.test.gateway.TestGatewayAllocator;, +, +import java.util.ArrayList;, +import java.util.Collection;]