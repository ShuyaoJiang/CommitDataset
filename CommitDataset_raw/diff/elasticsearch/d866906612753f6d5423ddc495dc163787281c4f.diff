[+++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ /dev/null, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/highlight/AbstractHighlighterBuilder.java, +import org.elasticsearch.common.ParseField;, +public abstract class AbstractHighlighterBuilder<HB extends AbstractHighlighterBuilder<?>> {, +, +    public static final ParseField PRE_TAGS_FIELD = new ParseField("pre_tags");, +    public static final ParseField POST_TAGS_FIELD = new ParseField("post_tags");, +    public static final ParseField FIELDS_FIELD = new ParseField("fields");, +    public static final ParseField ORDER_FIELD = new ParseField("order");, +    public static final ParseField TAGS_SCHEMA_FIELD = new ParseField("tags_schema");, +    public static final ParseField HIGHLIGHT_FILTER_FIELD = new ParseField("highlight_filter");, +    public static final ParseField FRAGMENT_SIZE_FIELD = new ParseField("fragment_size");, +    public static final ParseField FRAGMENT_OFFSET_FIELD = new ParseField("fragment_offset");, +    public static final ParseField NUMBER_OF_FRAGMENTS_FIELD = new ParseField("number_of_fragments");, +    public static final ParseField ENCODER_FIELD = new ParseField("encoder");, +    public static final ParseField REQUIRE_FIELD_MATCH_FIELD = new ParseField("require_field_match");, +    public static final ParseField BOUNDARY_MAX_SCAN_FIELD = new ParseField("boundary_max_scan");, +    public static final ParseField BOUNDARY_CHARS_FIELD = new ParseField("boundary_chars");, +    public static final ParseField TYPE_FIELD = new ParseField("type");, +    public static final ParseField FRAGMENTER_FIELD = new ParseField("fragmenter");, +    public static final ParseField NO_MATCH_SIZE_FIELD = new ParseField("no_match_size");, +    public static final ParseField FORCE_SOURCE_FIELD = new ParseField("force_source");, +    public static final ParseField PHRASE_LIMIT_FIELD = new ParseField("phrase_limit");, +    public static final ParseField OPTIONS_FIELD = new ParseField("options");, +    public static final ParseField HIGHLIGHT_QUERY_FIELD = new ParseField("highlight_query");, +    public static final ParseField MATCHED_FIELDS_FIELD = new ParseField("matched_fields");, +    protected QueryBuilder<?> highlightQuery;, +    public HB highlightQuery(QueryBuilder<?> highlightQuery) {, +    public QueryBuilder<?> highlightQuery() {, +            builder.array(PRE_TAGS_FIELD.getPreferredName(), preTags);, +            builder.array(POST_TAGS_FIELD.getPreferredName(), postTags);, +            builder.field(FRAGMENT_SIZE_FIELD.getPreferredName(), fragmentSize);, +            builder.field(NUMBER_OF_FRAGMENTS_FIELD.getPreferredName(), numOfFragments);, +            builder.field(TYPE_FIELD.getPreferredName(), highlighterType);, +            builder.field(FRAGMENTER_FIELD.getPreferredName(), fragmenter);, +            builder.field(HIGHLIGHT_QUERY_FIELD.getPreferredName(), highlightQuery);, +            builder.field(ORDER_FIELD.getPreferredName(), order);, +            builder.field(HIGHLIGHT_FILTER_FIELD.getPreferredName(), highlightFilter);, +            builder.field(BOUNDARY_MAX_SCAN_FIELD.getPreferredName(), boundaryMaxScan);, +            builder.field(BOUNDARY_CHARS_FIELD.getPreferredName(), new String(boundaryChars));, +            builder.field(OPTIONS_FIELD.getPreferredName(), options);, +            builder.field(FORCE_SOURCE_FIELD.getPreferredName(), forceSource);, +            builder.field(REQUIRE_FIELD_MATCH_FIELD.getPreferredName(), requireFieldMatch);, +            builder.field(NO_MATCH_SIZE_FIELD.getPreferredName(), noMatchSize);, +            builder.field(PHRASE_LIMIT_FIELD.getPreferredName(), phraseLimit);, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestReportLogger.groovy, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/highlight/AbstractHighlighterBuilder.java, +import org.elasticsearch.common.ParseField;, +public abstract class AbstractHighlighterBuilder<HB extends AbstractHighlighterBuilder<?>> {, +, +    public static final ParseField PRE_TAGS_FIELD = new ParseField("pre_tags");, +    public static final ParseField POST_TAGS_FIELD = new ParseField("post_tags");, +    public static final ParseField FIELDS_FIELD = new ParseField("fields");, +    public static final ParseField ORDER_FIELD = new ParseField("order");, +    public static final ParseField TAGS_SCHEMA_FIELD = new ParseField("tags_schema");, +    public static final ParseField HIGHLIGHT_FILTER_FIELD = new ParseField("highlight_filter");, +    public static final ParseField FRAGMENT_SIZE_FIELD = new ParseField("fragment_size");, +    public static final ParseField FRAGMENT_OFFSET_FIELD = new ParseField("fragment_offset");, +    public static final ParseField NUMBER_OF_FRAGMENTS_FIELD = new ParseField("number_of_fragments");, +    public static final ParseField ENCODER_FIELD = new ParseField("encoder");, +    public static final ParseField REQUIRE_FIELD_MATCH_FIELD = new ParseField("require_field_match");, +    public static final ParseField BOUNDARY_MAX_SCAN_FIELD = new ParseField("boundary_max_scan");, +    public static final ParseField BOUNDARY_CHARS_FIELD = new ParseField("boundary_chars");, +    public static final ParseField TYPE_FIELD = new ParseField("type");, +    public static final ParseField FRAGMENTER_FIELD = new ParseField("fragmenter");, +    public static final ParseField NO_MATCH_SIZE_FIELD = new ParseField("no_match_size");, +    public static final ParseField FORCE_SOURCE_FIELD = new ParseField("force_source");, +    public static final ParseField PHRASE_LIMIT_FIELD = new ParseField("phrase_limit");, +    public static final ParseField OPTIONS_FIELD = new ParseField("options");, +    public static final ParseField HIGHLIGHT_QUERY_FIELD = new ParseField("highlight_query");, +    public static final ParseField MATCHED_FIELDS_FIELD = new ParseField("matched_fields");, +    protected QueryBuilder<?> highlightQuery;, +    public HB highlightQuery(QueryBuilder<?> highlightQuery) {, +    public QueryBuilder<?> highlightQuery() {, +            builder.array(PRE_TAGS_FIELD.getPreferredName(), preTags);, +            builder.array(POST_TAGS_FIELD.getPreferredName(), postTags);, +            builder.field(FRAGMENT_SIZE_FIELD.getPreferredName(), fragmentSize);, +            builder.field(NUMBER_OF_FRAGMENTS_FIELD.getPreferredName(), numOfFragments);, +            builder.field(TYPE_FIELD.getPreferredName(), highlighterType);, +            builder.field(FRAGMENTER_FIELD.getPreferredName(), fragmenter);, +            builder.field(HIGHLIGHT_QUERY_FIELD.getPreferredName(), highlightQuery);, +            builder.field(ORDER_FIELD.getPreferredName(), order);, +            builder.field(HIGHLIGHT_FILTER_FIELD.getPreferredName(), highlightFilter);, +            builder.field(BOUNDARY_MAX_SCAN_FIELD.getPreferredName(), boundaryMaxScan);, +            builder.field(BOUNDARY_CHARS_FIELD.getPreferredName(), new String(boundaryChars));, +            builder.field(OPTIONS_FIELD.getPreferredName(), options);, +            builder.field(FORCE_SOURCE_FIELD.getPreferredName(), forceSource);, +            builder.field(REQUIRE_FIELD_MATCH_FIELD.getPreferredName(), requireFieldMatch);, +            builder.field(NO_MATCH_SIZE_FIELD.getPreferredName(), noMatchSize);, +            builder.field(PHRASE_LIMIT_FIELD.getPreferredName(), phraseLimit);, +++ b/core/src/main/java/org/elasticsearch/search/highlight/HighlightBuilder.java, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.query.QueryParseContext;, +    public static final String HIGHLIGHT_ELEMENT_NAME = "highlight";]