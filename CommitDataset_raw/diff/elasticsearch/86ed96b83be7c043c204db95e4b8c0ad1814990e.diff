[+++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/License.java, +        STANDARD,, +                case "standard":, +                    return STANDARD;, +++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/License.java, +        STANDARD,, +                case "standard":, +                    return STANDARD;, +++ b/elasticsearch/license/base/src/test/java/org/elasticsearch/license/core/LicenseOperationModeTests.java, +    public void testResolveStandard() {, +        // assert expected (2.x+) variant (note: no 1.x variant of STANDARD), +        assertResolve(OperationMode.STANDARD, "StAnDARd", "standard");, +    }, +, +        String[] types = { "unknown", "fake" };, +++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/License.java, +        STANDARD,, +                case "standard":, +                    return STANDARD;, +++ b/elasticsearch/license/base/src/test/java/org/elasticsearch/license/core/LicenseOperationModeTests.java, +    public void testResolveStandard() {, +        // assert expected (2.x+) variant (note: no 1.x variant of STANDARD), +        assertResolve(OperationMode.STANDARD, "StAnDARd", "standard");, +    }, +, +        String[] types = { "unknown", "fake" };, +++ b/elasticsearch/license/plugin-api/src/main/java/org/elasticsearch/license/plugin/core/Licensee.java, +     * return status.getLicenseState() != LicenseState.DISABLED &amp;&amp;, +     *        (status.getMode() == OperationMode.TRAIL || status.getMode == OperationMode.PLATINUM);, +++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/License.java, +        STANDARD,, +                case "standard":, +                    return STANDARD;, +++ b/elasticsearch/license/base/src/test/java/org/elasticsearch/license/core/LicenseOperationModeTests.java, +    public void testResolveStandard() {, +        // assert expected (2.x+) variant (note: no 1.x variant of STANDARD), +        assertResolve(OperationMode.STANDARD, "StAnDARd", "standard");, +    }, +, +        String[] types = { "unknown", "fake" };, +++ b/elasticsearch/license/plugin-api/src/main/java/org/elasticsearch/license/plugin/core/Licensee.java, +     * return status.getLicenseState() != LicenseState.DISABLED &amp;&amp;, +     *        (status.getMode() == OperationMode.TRAIL || status.getMode == OperationMode.PLATINUM);, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/graph/license/GraphLicensee.java, +            case STANDARD:, +++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/License.java, +        STANDARD,, +                case "standard":, +                    return STANDARD;, +++ b/elasticsearch/license/base/src/test/java/org/elasticsearch/license/core/LicenseOperationModeTests.java, +    public void testResolveStandard() {, +        // assert expected (2.x+) variant (note: no 1.x variant of STANDARD), +        assertResolve(OperationMode.STANDARD, "StAnDARd", "standard");, +    }, +, +        String[] types = { "unknown", "fake" };, +++ b/elasticsearch/license/plugin-api/src/main/java/org/elasticsearch/license/plugin/core/Licensee.java, +     * return status.getLicenseState() != LicenseState.DISABLED &amp;&amp;, +     *        (status.getMode() == OperationMode.TRAIL || status.getMode == OperationMode.PLATINUM);, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/graph/license/GraphLicensee.java, +            case STANDARD:, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/core/AbstractLicenseeTestCase.java, +     * Randomly get {@link OperationMode#TRIAL}, {@link OperationMode#STANDARD}, {@link OperationMode#GOLD}, or, +     * {@link OperationMode#PLATINUM}., +    public static OperationMode randomTrialStandardGoldOrPlatinumMode() {, +        return randomFrom(OperationMode.TRIAL, OperationMode.STANDARD, OperationMode.GOLD, OperationMode.PLATINUM);, +++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/License.java, +        STANDARD,, +                case "standard":, +                    return STANDARD;, +++ b/elasticsearch/license/base/src/test/java/org/elasticsearch/license/core/LicenseOperationModeTests.java, +    public void testResolveStandard() {, +        // assert expected (2.x+) variant (note: no 1.x variant of STANDARD), +        assertResolve(OperationMode.STANDARD, "StAnDARd", "standard");, +    }, +, +        String[] types = { "unknown", "fake" };, +++ b/elasticsearch/license/plugin-api/src/main/java/org/elasticsearch/license/plugin/core/Licensee.java, +     * return status.getLicenseState() != LicenseState.DISABLED &amp;&amp;, +     *        (status.getMode() == OperationMode.TRAIL || status.getMode == OperationMode.PLATINUM);, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/graph/license/GraphLicensee.java, +            case STANDARD:, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/core/AbstractLicenseeTestCase.java, +     * Randomly get {@link OperationMode#TRIAL}, {@link OperationMode#STANDARD}, {@link OperationMode#GOLD}, or, +     * {@link OperationMode#PLATINUM}., +    public static OperationMode randomTrialStandardGoldOrPlatinumMode() {, +        return randomFrom(OperationMode.TRIAL, OperationMode.STANDARD, OperationMode.GOLD, OperationMode.PLATINUM);, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/license/MarvelLicensee.java, +                        case STANDARD:, +     * Only users with a non-{@link OperationMode#BASIC} license can update the retention period., +     * <p>, +++ b/elasticsearch/license/base/src/main/java/org/elasticsearch/license/core/License.java, +        STANDARD,, +                case "standard":, +                    return STANDARD;, +++ b/elasticsearch/license/base/src/test/java/org/elasticsearch/license/core/LicenseOperationModeTests.java, +    public void testResolveStandard() {, +        // assert expected (2.x+) variant (note: no 1.x variant of STANDARD), +        assertResolve(OperationMode.STANDARD, "StAnDARd", "standard");, +    }]