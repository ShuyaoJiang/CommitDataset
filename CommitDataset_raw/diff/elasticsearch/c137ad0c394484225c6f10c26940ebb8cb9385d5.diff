[+++ b/server/src/main/java/org/elasticsearch/common/geo/parsers/GeoWKTParser.java, +import org.locationtech.jts.geom.Coordinate;, +import java.io.StringReader;, +        try (StringReader reader = new StringReader(parser.text())) {, +++ b/server/src/main/java/org/elasticsearch/common/geo/parsers/GeoWKTParser.java, +import org.locationtech.jts.geom.Coordinate;, +import java.io.StringReader;, +        try (StringReader reader = new StringReader(parser.text())) {, +++ b/server/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +        try {, +            return loadWordList(path, "#");, +    private static List<String> loadWordList(Path path, String comment) throws IOException {, +        try (BufferedReader br = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {, +++ b/server/src/main/java/org/elasticsearch/common/geo/parsers/GeoWKTParser.java, +import org.locationtech.jts.geom.Coordinate;, +import java.io.StringReader;, +        try (StringReader reader = new StringReader(parser.text())) {, +++ b/server/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +        try {, +            return loadWordList(path, "#");, +    private static List<String> loadWordList(Path path, String comment) throws IOException {, +        try (BufferedReader br = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/server/src/main/java/org/elasticsearch/common/geo/parsers/GeoWKTParser.java, +import org.locationtech.jts.geom.Coordinate;, +import java.io.StringReader;, +        try (StringReader reader = new StringReader(parser.text())) {, +++ b/server/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +        try {, +            return loadWordList(path, "#");, +    private static List<String> loadWordList(Path path, String comment) throws IOException {, +        try (BufferedReader br = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/server/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    get.close();, +            get.close();, +++ b/server/src/main/java/org/elasticsearch/common/geo/parsers/GeoWKTParser.java, +import org.locationtech.jts.geom.Coordinate;, +import java.io.StringReader;, +        try (StringReader reader = new StringReader(parser.text())) {, +++ b/server/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +        try {, +            return loadWordList(path, "#");, +    private static List<String> loadWordList(Path path, String comment) throws IOException {, +        try (BufferedReader br = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/server/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    get.close();, +            get.close();, +++ b/server/src/main/java/org/elasticsearch/index/termvectors/TermVectorsService.java, +        try (Engine.GetResult get = indexShard.get(new Engine.Get(request.realtime(), false, request.type(), request.id(), uidTerm), +                .version(request.version()).versionType(request.versionType()));, +                Engine.Searcher searcher = indexShard.acquireSearcher("term_vector")) {, +                termVectorsResponse.setFields(termVectorsByField, request.selectedFields(), request.getFlags(), topLevelFields, dfs,, +                        termVectorsFilter);, +++ b/server/src/main/java/org/elasticsearch/common/geo/parsers/GeoWKTParser.java, +import org.locationtech.jts.geom.Coordinate;, +import java.io.StringReader;, +        try (StringReader reader = new StringReader(parser.text())) {, +++ b/server/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +        try {, +            return loadWordList(path, "#");, +    private static List<String> loadWordList(Path path, String comment) throws IOException {, +        try (BufferedReader br = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/server/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    get.close();, +            get.close();, +++ b/server/src/main/java/org/elasticsearch/index/termvectors/TermVectorsService.java, +        try (Engine.GetResult get = indexShard.get(new Engine.Get(request.realtime(), false, request.type(), request.id(), uidTerm), +                .version(request.version()).versionType(request.versionType()));, +                Engine.Searcher searcher = indexShard.acquireSearcher("term_vector")) {, +                termVectorsResponse.setFields(termVectorsByField, request.selectedFields(), request.getFlags(), topLevelFields, dfs,, +                        termVectorsFilter);, +++ b/server/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.core.internal.io.IOUtils;, +import org.elasticsearch.threadpool.ThreadPool;, +        try (SearchContext context = removeContext(id)) {, +    }, +++ b/server/src/main/java/org/elasticsearch/common/geo/parsers/GeoWKTParser.java, +import org.locationtech.jts.geom.Coordinate;, +import java.io.StringReader;, +        try (StringReader reader = new StringReader(parser.text())) {, +++ b/server/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +        try {, +            return loadWordList(path, "#");, +    private static List<String> loadWordList(Path path, String comment) throws IOException {, +        try (BufferedReader br = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +++ b/server/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                    get.close();, +            get.close();, +++ b/server/src/main/java/org/elasticsearch/index/termvectors/TermVectorsService.java, +        try (Engine.GetResult get = indexShard.get(new Engine.Get(request.realtime(), false, request.type(), request.id(), uidTerm), +                .version(request.version()).versionType(request.versionType()));, +                Engine.Searcher searcher = indexShard.acquireSearcher("term_vector")) {, +                termVectorsResponse.setFields(termVectorsByField, request.selectedFields(), request.getFlags(), topLevelFields, dfs,, +                        termVectorsFilter);, +++ b/server/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.core.internal.io.IOUtils;]