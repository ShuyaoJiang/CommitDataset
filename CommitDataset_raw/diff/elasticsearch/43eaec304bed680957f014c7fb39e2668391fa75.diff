[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.CLUSTER);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.CLUSTER);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "shards");, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.CLUSTER);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "shards");, +++ b/docs/java-rest/high-level/cluster/health.asciidoc, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.CLUSTER);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "shards");, +++ b/docs/java-rest/high-level/cluster/health.asciidoc, +++ b/docs/reference/migration/migrate_7_0/restclient.asciidoc, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.CLUSTER);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "shards");, +++ b/docs/java-rest/high-level/cluster/health.asciidoc, +++ b/docs/reference/migration/migrate_7_0/restclient.asciidoc, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +    private Level level = Level.SHARDS;, +     * Only used by the high-level REST Client, +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.CLUSTER);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "shards");, +++ b/docs/java-rest/high-level/cluster/health.asciidoc, +++ b/docs/reference/migration/migrate_7_0/restclient.asciidoc, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +    private Level level = Level.SHARDS;, +     * Only used by the high-level REST Client, +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        indexScopedSettings.validate(normalizedSettings.filter(s -> Regex.isSimpleMatchPattern(s) == false  /* don't validate wildcards */),, +            false); //don't validate dependencies here we check it below never allow to change the number of shards, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.CLUSTER);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "shards");, +++ b/docs/java-rest/high-level/cluster/health.asciidoc, +++ b/docs/reference/migration/migrate_7_0/restclient.asciidoc, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +    private Level level = Level.SHARDS;, +     * Only used by the high-level REST Client, +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        indexScopedSettings.validate(normalizedSettings.filter(s -> Regex.isSimpleMatchPattern(s) == false  /* don't validate wildcards */),, +            false); //don't validate dependencies here we check it below never allow to change the number of shards, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +                validate(key, settings, validateDependencies);, +     * Validates that the setting is valid, +    void validate(String key, Settings settings, boolean validateDependencies) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.CLUSTER);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "shards");, +++ b/docs/java-rest/high-level/cluster/health.asciidoc, +++ b/docs/reference/migration/migrate_7_0/restclient.asciidoc, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +    private Level level = Level.SHARDS;, +     * Only used by the high-level REST Client, +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        indexScopedSettings.validate(normalizedSettings.filter(s -> Regex.isSimpleMatchPattern(s) == false  /* don't validate wildcards */),, +            false); //don't validate dependencies here we check it below never allow to change the number of shards, +++ b/server/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +                validate(key, settings, validateDependencies);, +     * Validates that the setting is valid, +    void validate(String key, Settings settings, boolean validateDependencies) {, +++ b/server/src/main/java/org/elasticsearch/common/settings/Setting.java, +        NotCopyableOnResize, +            if (propertiesAsSet.contains(Property.NotCopyableOnResize) && propertiesAsSet.contains(Property.IndexScope) == false) {, +                throw new IllegalArgumentException(, +                        "non-index-scoped setting [" + key + "] can not have property [" + Property.NotCopyableOnResize + "]");, +            }, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ClusterClientIT.java, +        request.level(ClusterHealthRequest.Level.CLUSTER);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            expectedParams.put("level", "shards");, +++ b/docs/java-rest/high-level/cluster/health.asciidoc, +++ b/docs/reference/migration/migrate_7_0/restclient.asciidoc, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +    private Level level = Level.SHARDS;, +     * Only used by the high-level REST Client, +     * The default value is 'shards' so it is backward compatible with the transport client behaviour., +     * The default value is 'shards' so it is backward compatible with the transport client behaviour.]