[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +        if (value instanceof Boolean) {, +        } else {, +            throw new ClassCastException(, +                    "cannot cast def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to boolean");, +        }, +        if (value instanceof Byte) {, +        } else {, +            throw new ClassCastException("cannot implicitly cast " +, +                    "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to byte");, +        }, +        } else if (value instanceof Short) {, +        } else {, +            throw new ClassCastException("cannot implicitly cast " +, +                    "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to short");, +        if (value instanceof Character) {, +        } else {, +            throw new ClassCastException("cannot implicitly cast " +, +                    "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to char");, +        }, +        } else if (value instanceof Integer) {, +        } else {, +            throw new ClassCastException("cannot implicitly cast " +, +                    "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to int");, +        } else if (value instanceof Long) {, +        } else {, +            throw new ClassCastException(, +                    "cannot implicitly cast " +, +                            "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to long");, +        } else if (value instanceof Float) {, +        } else {, +            throw new ClassCastException(, +                    "cannot implicitly cast " +, +                            "def [" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + "] to float");, +        } else if (value instanceof Double) {, +        } else {, +            throw new ClassCastException("cannot implicitly cast def [" + value.getClass().getCanonicalName() + "] to double");, +        } else if (, +                value instanceof Byte    ||, +                value instanceof Short   ||, +                value instanceof Integer ||, +                value instanceof Long    ||, +                value instanceof Float   ||, +                value instanceof Double, +        ) {, +        } else {, +            throw new ClassCastException("cannot explicitly cast def [" + value.getClass().getCanonicalName() + "] to byte");, +        } else if (, +                value instanceof Byte    ||, +                value instanceof Short   ||, +                value instanceof Integer ||, +                value instanceof Long    ||, +                value instanceof Float   ||, +                value instanceof Double, +        ) {, +        } else {, +            throw new ClassCastException("cannot explicitly cast def [" + value.getClass().getCanonicalName() + "] to short");, +        } else if (, +                value instanceof Byte    ||, +                value instanceof Short   ||, +                value instanceof Integer ||, +                value instanceof Long    ||, +                value instanceof Float   ||, +                value instanceof Double, +        ) {, +        } else {, +            throw new ClassCastException("cannot explicitly cast def [" + value.getClass().getCanonicalName() + "] to char");, +        } else if (, +                value instanceof Byte    ||, +                value instanceof Short   ||, +                value instanceof Integer ||, +                value instanceof Long    ||, +                value instanceof Float   ||, +                value instanceof Double, +        ) {, +        } else {, +            throw new ClassCastException("cannot explicitly cast def [" + value.getClass().getCanonicalName() + "] to int");, +        } else if (, +                value instanceof Byte    ||, +                value instanceof Short   ||, +                value instanceof Integer ||, +                value instanceof Long    ||, +                value instanceof Float   ||, +                value instanceof Double, +        ) {, +        } else {, +            throw new ClassCastException("cannot explicitly cast def [" + value.getClass().getCanonicalName() + "] to long");, +        } else if (, +                value instanceof Byte    ||, +                value instanceof Short   ||, +                value instanceof Integer ||, +                value instanceof Long    ||, +                value instanceof Float   ||, +                value instanceof Double, +        ) {, +        } else {, +            throw new ClassCastException("cannot explicitly cast def [" + value.getClass().getCanonicalName() + "] to float");, +        } else if (, +                value instanceof Byte    ||, +                value instanceof Short   ||]