[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                if (request.searchSource() != null) {, +                    searchRequest.source(request.searchSource());, +                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/mlt/TransportMoreLikeThisAction.java, +                if (request.searchSource() != null) {, +                    searchRequest.source(request.searchSource());, +                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +import org.apache.lucene.util.UnicodeUtil;, +import org.elasticsearch.util.xcontent.builder.XContentBuilder;, +import java.util.Arrays;, +    private int sourceOffset;, +    private int sourceLength;, +    private boolean sourceUnsafe;, +    private int extraSourceOffset;, +    private int extraSourceLength;, +    private boolean extraSourceUnsafe;, +        if (source == null && extraSource == null) {, +     * Internal., +     */, +    public void beforeLocalFork() {, +        if (source != null && sourceUnsafe) {, +            source = Arrays.copyOfRange(source, sourceOffset, sourceLength);, +            sourceOffset = 0;, +            sourceUnsafe = false;, +        }, +        if (extraSource != null && extraSourceUnsafe) {, +            extraSource = Arrays.copyOfRange(extraSource, extraSourceOffset, extraSourceLength);, +            extraSourceOffset = 0;, +            extraSourceUnsafe = false;, +        }, +    }, +, +    /**, +        FastByteArrayOutputStream bos = sourceBuilder.buildAsUnsafeBytes();, +        this.source = bos.unsafeByteArray();, +        this.sourceOffset = 0;, +        this.sourceLength = bos.size();, +        this.sourceUnsafe = true;, +        UnicodeUtil.UTF8Result result = Unicode.fromStringAsUtf8(source);, +        this.source = result.result;, +        this.sourceOffset = 0;, +        this.sourceLength = result.length;, +        this.sourceUnsafe = true;, +        return this;, +            return source(builder);, +    }, +, +    public SearchRequest source(XContentBuilder builder) {, +        try {, +            this.source = builder.unsafeBytes();, +            this.sourceOffset = 0;, +            this.sourceLength = builder.unsafeBytesLength();, +            this.sourceUnsafe = true;, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + builder + "]", e);, +        }, +        return source(source, 0, source.length);, +    }, +, +    /**, +     * The search source to execute., +     */, +    public SearchRequest source(byte[] source, int offset, int length) {, +        this.sourceOffset = offset;, +        this.sourceLength = length;, +        this.sourceUnsafe = false;, +    public int sourceOffset() {, +        return sourceOffset;, +    }, +, +    public int sourceLength() {, +        return sourceLength;, +    }, +, +        FastByteArrayOutputStream bos = sourceBuilder.buildAsUnsafeBytes();, +        this.extraSource = bos.unsafeByteArray();, +        this.extraSourceOffset = 0;, +        this.extraSourceLength = bos.size();, +        this.extraSourceUnsafe = true;, +            return extraSource(builder);, +    }, +, +    public SearchRequest extraSource(XContentBuilder builder) {, +        try {, +            this.extraSource = builder.unsafeBytes();, +            this.extraSourceOffset = 0;, +            this.extraSourceLength = builder.unsafeBytesLength();, +            this.extraSourceUnsafe = true;, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate [" + builder + "]", e);, +        }, +        UnicodeUtil.UTF8Result result = Unicode.fromStringAsUtf8(source);, +        this.extraSource = result.result;, +        this.extraSourceOffset = 0;, +        this.extraSourceLength = result.length;, +        this.extraSourceUnsafe = true;, +        return this;, +        return extraSource(source, 0, source.length);]