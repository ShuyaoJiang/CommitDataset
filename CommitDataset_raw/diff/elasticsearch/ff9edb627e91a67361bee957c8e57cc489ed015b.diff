[+++ b/docs/plugins/analysis-icu.asciidoc, +Which letters are normalized can be controlled by specifying the, +`unicodeSetFilter` parameter, which accepts a, +http://icu-project.org/apiref/icu4j/com/ibm/icu/text/UnicodeSet.html[UnicodeSet]., +, +Which letters are normalized can be controlled by specifying the, +`unicodeSetFilter` parameter, which accepts a, +http://icu-project.org/apiref/icu4j/com/ibm/icu/text/UnicodeSet.html[UnicodeSet]., +, +++ b/docs/plugins/analysis-icu.asciidoc, +Which letters are normalized can be controlled by specifying the, +`unicodeSetFilter` parameter, which accepts a, +http://icu-project.org/apiref/icu4j/com/ibm/icu/text/UnicodeSet.html[UnicodeSet]., +, +Which letters are normalized can be controlled by specifying the, +`unicodeSetFilter` parameter, which accepts a, +http://icu-project.org/apiref/icu4j/com/ibm/icu/text/UnicodeSet.html[UnicodeSet]., +, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuFoldingTokenFilterFactory.java, +, +    /** Store here the same Normalizer used by the lucene ICUFoldingFilter */, +    private static final Normalizer2 ICU_FOLDING_NORMALIZER = Normalizer2.getInstance(, +            ICUFoldingFilter.class.getResourceAsStream("utr30.nrm"), "utr30", Normalizer2.Mode.COMPOSE);, +, +    private final Normalizer2 normalizer;, +        this.normalizer = IcuNormalizerTokenFilterFactory.wrapWithUnicodeSetFilter(ICU_FOLDING_NORMALIZER, settings);, +        return new org.apache.lucene.analysis.icu.ICUNormalizer2Filter(tokenStream, normalizer);, +++ b/docs/plugins/analysis-icu.asciidoc, +Which letters are normalized can be controlled by specifying the, +`unicodeSetFilter` parameter, which accepts a, +http://icu-project.org/apiref/icu4j/com/ibm/icu/text/UnicodeSet.html[UnicodeSet]., +, +Which letters are normalized can be controlled by specifying the, +`unicodeSetFilter` parameter, which accepts a, +http://icu-project.org/apiref/icu4j/com/ibm/icu/text/UnicodeSet.html[UnicodeSet]., +, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuFoldingTokenFilterFactory.java, +, +    /** Store here the same Normalizer used by the lucene ICUFoldingFilter */, +    private static final Normalizer2 ICU_FOLDING_NORMALIZER = Normalizer2.getInstance(, +            ICUFoldingFilter.class.getResourceAsStream("utr30.nrm"), "utr30", Normalizer2.Mode.COMPOSE);, +, +    private final Normalizer2 normalizer;, +        this.normalizer = IcuNormalizerTokenFilterFactory.wrapWithUnicodeSetFilter(ICU_FOLDING_NORMALIZER, settings);, +        return new org.apache.lucene.analysis.icu.ICUNormalizer2Filter(tokenStream, normalizer);, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuNormalizerCharFilterFactory.java, +, + * <p>The <tt>unicodeSetFilter</tt> attribute can be used to provide the UniCodeSet for filtering.</p>, +        String method = settings.get("name", "nfkc_cf");, +        Normalizer2 normalizer = Normalizer2.getInstance(, +            null, method, "compose".equals(mode) ? Normalizer2.Mode.COMPOSE : Normalizer2.Mode.DECOMPOSE);, +        this.normalizer = IcuNormalizerTokenFilterFactory.wrapWithUnicodeSetFilter(normalizer, settings);, +++ b/docs/plugins/analysis-icu.asciidoc, +Which letters are normalized can be controlled by specifying the, +`unicodeSetFilter` parameter, which accepts a, +http://icu-project.org/apiref/icu4j/com/ibm/icu/text/UnicodeSet.html[UnicodeSet]., +, +Which letters are normalized can be controlled by specifying the, +`unicodeSetFilter` parameter, which accepts a, +http://icu-project.org/apiref/icu4j/com/ibm/icu/text/UnicodeSet.html[UnicodeSet]., +, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuFoldingTokenFilterFactory.java, +, +    /** Store here the same Normalizer used by the lucene ICUFoldingFilter */, +    private static final Normalizer2 ICU_FOLDING_NORMALIZER = Normalizer2.getInstance(, +            ICUFoldingFilter.class.getResourceAsStream("utr30.nrm"), "utr30", Normalizer2.Mode.COMPOSE);, +, +    private final Normalizer2 normalizer;, +        this.normalizer = IcuNormalizerTokenFilterFactory.wrapWithUnicodeSetFilter(ICU_FOLDING_NORMALIZER, settings);, +        return new org.apache.lucene.analysis.icu.ICUNormalizer2Filter(tokenStream, normalizer);, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuNormalizerCharFilterFactory.java, +, + * <p>The <tt>unicodeSetFilter</tt> attribute can be used to provide the UniCodeSet for filtering.</p>, +        String method = settings.get("name", "nfkc_cf");, +        Normalizer2 normalizer = Normalizer2.getInstance(, +            null, method, "compose".equals(mode) ? Normalizer2.Mode.COMPOSE : Normalizer2.Mode.DECOMPOSE);, +        this.normalizer = IcuNormalizerTokenFilterFactory.wrapWithUnicodeSetFilter(normalizer, settings);, +++ b/plugins/analysis-icu/src/main/java/org/elasticsearch/index/analysis/IcuNormalizerTokenFilterFactory.java, +import com.ibm.icu.text.FilteredNormalizer2;, +import com.ibm.icu.text.UnicodeSet;, +, + * <p>The <tt>name</tt> can be used to provide the type of normalization to perform.</p>, + * <p>The <tt>unicodeSetFilter</tt> attribute can be used to provide the UniCodeSet for filtering.</p>, +    private final Normalizer2 normalizer;, +        String method = settings.get("name", "nfkc_cf");, +        Normalizer2 normalizer = Normalizer2.getInstance(null, method, Normalizer2.Mode.COMPOSE);, +        this.normalizer = wrapWithUnicodeSetFilter(normalizer, settings);, +        return new org.apache.lucene.analysis.icu.ICUNormalizer2Filter(tokenStream, normalizer);, +, +    static Normalizer2 wrapWithUnicodeSetFilter(final Normalizer2 normalizer, Settings settings) {, +        String unicodeSetFilter = settings.get("unicodeSetFilter");, +        if (unicodeSetFilter != null) {, +            UnicodeSet unicodeSet = new UnicodeSet(unicodeSetFilter);, +, +            unicodeSet.freeze();, +            return new FilteredNormalizer2(normalizer, unicodeSet);, +        }, +        return normalizer;, +    }, +++ b/docs/plugins/analysis-icu.asciidoc]