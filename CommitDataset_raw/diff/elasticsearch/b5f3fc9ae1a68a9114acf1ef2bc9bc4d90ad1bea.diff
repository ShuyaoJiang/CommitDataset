[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +import com.google.common.collect.ImmutableMap;, +import org.elasticsearch.util.settings.ImmutableSettings;, +import org.elasticsearch.util.settings.Settings;, +import java.io.DataOutput;, +import java.util.Map;, +    private ImmutableMap<String, String> attributes;, +, +    private Settings settings;, +, +    NodeInfo() {, +    public NodeInfo(Node node, Map<String, String> attributes, Settings settings) {, +        this(node, ImmutableMap.copyOf(attributes), settings);, +    }, +, +    public NodeInfo(Node node, ImmutableMap<String, String> attributes, Settings settings) {, +        this.attributes = attributes;, +        this.settings = settings;, +    }, +, +    public ImmutableMap<String, String> attributes() {, +        return this.attributes;, +    }, +, +    public Settings settings() {, +        return this.settings;, +, +    @Override public void readFrom(DataInput in) throws IOException, ClassNotFoundException {, +        super.readFrom(in);, +        ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();, +        int size = in.readInt();, +        for (int i = 0; i < size; i++) {, +            builder.put(in.readUTF(), in.readUTF());, +        }, +        attributes = builder.build();, +        settings = ImmutableSettings.readSettingsFromStream(in);, +    }, +, +    @Override public void writeTo(DataOutput out) throws IOException {, +        super.writeTo(out);, +        out.writeInt(attributes.size());, +        for (Map.Entry<String, String> entry : attributes.entrySet()) {, +            out.writeUTF(entry.getKey());, +            out.writeUTF(entry.getValue());, +        }, +        ImmutableSettings.writeSettingsToStream(settings, out);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +import com.google.common.collect.ImmutableMap;, +import org.elasticsearch.util.settings.ImmutableSettings;, +import org.elasticsearch.util.settings.Settings;, +import java.io.DataOutput;, +import java.util.Map;, +    private ImmutableMap<String, String> attributes;, +, +    private Settings settings;, +, +    NodeInfo() {, +    public NodeInfo(Node node, Map<String, String> attributes, Settings settings) {, +        this(node, ImmutableMap.copyOf(attributes), settings);, +    }, +, +    public NodeInfo(Node node, ImmutableMap<String, String> attributes, Settings settings) {, +        this.attributes = attributes;, +        this.settings = settings;, +    }, +, +    public ImmutableMap<String, String> attributes() {, +        return this.attributes;, +    }, +, +    public Settings settings() {, +        return this.settings;, +, +    @Override public void readFrom(DataInput in) throws IOException, ClassNotFoundException {, +        super.readFrom(in);, +        ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();, +        int size = in.readInt();, +        for (int i = 0; i < size; i++) {, +            builder.put(in.readUTF(), in.readUTF());, +        }, +        attributes = builder.build();, +        settings = ImmutableSettings.readSettingsFromStream(in);, +    }, +, +    @Override public void writeTo(DataOutput out) throws IOException {, +        super.writeTo(out);, +        out.writeInt(attributes.size());, +        for (Map.Entry<String, String> entry : attributes.entrySet()) {, +            out.writeUTF(entry.getKey());, +            out.writeUTF(entry.getValue());, +        }, +        ImmutableSettings.writeSettingsToStream(settings, out);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/info/TransportNodesInfo.java, +import com.google.common.collect.ImmutableMap;, +import org.elasticsearch.util.MapBuilder;, +    private volatile ImmutableMap<String, String> nodeAttributes = ImmutableMap.of();, +, +    public synchronized void putNodeAttribute(String key, String value) {]