[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/IndexersService.java, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.indexer.cluster.IndexerClusterChangedEvent;, +import org.elasticsearch.indexer.cluster.IndexerClusterService;, +import org.elasticsearch.indexer.cluster.IndexerClusterState;, +import org.elasticsearch.indexer.cluster.IndexerClusterStateListener;, +import org.elasticsearch.indexer.metadata.IndexerMetaData;, +import org.elasticsearch.indexer.routing.IndexerRouting;, +    private final ClusterService clusterService;, +, +    @Inject public IndexersService(Settings settings, ThreadPool threadPool, ClusterService clusterService, IndexerClusterService indexerClusterService, Injector injector) {, +        this.clusterService = clusterService;, +        indexerClusterService.add(new ApplyIndexers());, +    }, +    private class ApplyIndexers implements IndexerClusterStateListener {, +        @Override public void indexerClusterChanged(IndexerClusterChangedEvent event) {, +            DiscoveryNode localNode = clusterService.localNode();, +            IndexerClusterState state = event.state();, +, +            // first, go over and delete ones that either don't exists or are not allocated, +            for (IndexerName indexerName : indexers.keySet()) {, +                // if its not on the metadata, it was deleted, delete it, +                IndexerMetaData indexerMetaData = state.metaData().indexer(indexerName);, +                if (indexerMetaData == null) {, +                    deleteIndexer(indexerName);, +                }, +, +                IndexerRouting routing = state.routing().routing(indexerName);, +                if (routing == null || !localNode.equals(routing.node())) {, +                    // not routed at all, and not allocated here, clean it (we delete the relevant ones before), +                    cleanIndexer(indexerName);, +                }, +            }, +, +            for (IndexerRouting routing : state.routing()) {, +                // only apply changes to the local node, +                if (!routing.node().equals(localNode)) {, +                    continue;, +                }, +, +                IndexerMetaData indexerMetaData = state.metaData().indexer(routing.indexerName());, +, +                createIndexer(indexerMetaData.indexerName(), indexerMetaData.settings());, +            }, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/IndexersService.java, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.indexer.cluster.IndexerClusterChangedEvent;, +import org.elasticsearch.indexer.cluster.IndexerClusterService;, +import org.elasticsearch.indexer.cluster.IndexerClusterState;, +import org.elasticsearch.indexer.cluster.IndexerClusterStateListener;, +import org.elasticsearch.indexer.metadata.IndexerMetaData;, +import org.elasticsearch.indexer.routing.IndexerRouting;, +    private final ClusterService clusterService;, +, +    @Inject public IndexersService(Settings settings, ThreadPool threadPool, ClusterService clusterService, IndexerClusterService indexerClusterService, Injector injector) {, +        this.clusterService = clusterService;, +        indexerClusterService.add(new ApplyIndexers());, +    }, +    private class ApplyIndexers implements IndexerClusterStateListener {, +        @Override public void indexerClusterChanged(IndexerClusterChangedEvent event) {, +            DiscoveryNode localNode = clusterService.localNode();, +            IndexerClusterState state = event.state();, +, +            // first, go over and delete ones that either don't exists or are not allocated, +            for (IndexerName indexerName : indexers.keySet()) {, +                // if its not on the metadata, it was deleted, delete it, +                IndexerMetaData indexerMetaData = state.metaData().indexer(indexerName);, +                if (indexerMetaData == null) {, +                    deleteIndexer(indexerName);, +                }, +, +                IndexerRouting routing = state.routing().routing(indexerName);, +                if (routing == null || !localNode.equals(routing.node())) {, +                    // not routed at all, and not allocated here, clean it (we delete the relevant ones before), +                    cleanIndexer(indexerName);, +                }, +            }, +, +            for (IndexerRouting routing : state.routing()) {, +                // only apply changes to the local node, +                if (!routing.node().equals(localNode)) {, +                    continue;, +                }, +, +                IndexerMetaData indexerMetaData = state.metaData().indexer(routing.indexerName());, +, +                createIndexer(indexerMetaData.indexerName(), indexerMetaData.settings());, +            }, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/metadata/IndexersMetaData.java, +    public IndexerMetaData indexer(IndexerName indexerName) {, +        return indexers.get(indexerName);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indexer/IndexersService.java, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.node.DiscoveryNode;]