[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.common.Nullable;, +    /**, +     * Gets the location of the written document as a string suitable for a {@code Location} header., +     * @param routing any routing used in the request. If null the location doesn't include routing information., +     */, +    public String getLocation(@Nullable String routing) {, +        // Absolute path for the location of the document. This should be allowed as of HTTP/1.1:, +        // https://tools.ietf.org/html/rfc7231#section-7.1.2, +        String index = getIndex();, +        String type = getType();, +        String id = getId();, +        String routingStart = "?routing=";, +        int bufferSize = 3 + index.length() + type.length() + id.length();, +        if (routing != null) {, +            bufferSize += routingStart.length() + routing.length();, +        }, +        StringBuilder location = new StringBuilder(bufferSize);, +        location.append('/').append(index);, +        location.append('/').append(type);, +        location.append('/').append(id);, +        if (routing != null) {, +            location.append(routingStart).append(routing);, +        }, +        return location.toString();, +    }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.common.Nullable;, +    /**, +     * Gets the location of the written document as a string suitable for a {@code Location} header., +     * @param routing any routing used in the request. If null the location doesn't include routing information., +     */, +    public String getLocation(@Nullable String routing) {, +        // Absolute path for the location of the document. This should be allowed as of HTTP/1.1:, +        // https://tools.ietf.org/html/rfc7231#section-7.1.2, +        String index = getIndex();, +        String type = getType();, +        String id = getId();, +        String routingStart = "?routing=";, +        int bufferSize = 3 + index.length() + type.length() + id.length();, +        if (routing != null) {, +            bufferSize += routingStart.length() + routing.length();, +        }, +        StringBuilder location = new StringBuilder(bufferSize);, +        location.append('/').append(index);, +        location.append('/').append(type);, +        location.append('/').append(id);, +        if (routing != null) {, +            location.append(routingStart).append(routing);, +        }, +        return location.toString();, +    }, +++ b/core/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    public CircuitBreakerService breakerService() {, +        return this.circuitBreakingInstance.breakerService;, +    }, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.common.Nullable;, +    /**, +     * Gets the location of the written document as a string suitable for a {@code Location} header., +     * @param routing any routing used in the request. If null the location doesn't include routing information., +     */, +    public String getLocation(@Nullable String routing) {, +        // Absolute path for the location of the document. This should be allowed as of HTTP/1.1:, +        // https://tools.ietf.org/html/rfc7231#section-7.1.2, +        String index = getIndex();, +        String type = getType();, +        String id = getId();, +        String routingStart = "?routing=";, +        int bufferSize = 3 + index.length() + type.length() + id.length();, +        if (routing != null) {, +            bufferSize += routingStart.length() + routing.length();, +        }, +        StringBuilder location = new StringBuilder(bufferSize);, +        location.append('/').append(index);, +        location.append('/').append(type);, +        location.append('/').append(id);, +        if (routing != null) {, +            location.append(routingStart).append(routing);, +        }, +        return location.toString();, +    }, +++ b/core/src/main/java/org/elasticsearch/common/util/BigArrays.java, +    public CircuitBreakerService breakerService() {, +        return this.circuitBreakingInstance.breakerService;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/StatusToXContent.java, + * Objects that can both render themselves in as json/yaml/etc and can provide a {@link RestStatus} for their response. Usually should be, + * implemented by top level responses sent back to users from REST endpoints., +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.common.Nullable;, +    /**, +     * Gets the location of the written document as a string suitable for a {@code Location} header.]