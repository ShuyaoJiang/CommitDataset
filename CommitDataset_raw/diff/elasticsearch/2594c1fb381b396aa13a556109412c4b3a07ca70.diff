[+++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +    // 53 bits defaultPrecision ~ 15(15.95) decimal digits (53log10(2)),, +    DOUBLE(      JDBCType.DOUBLE,    Double.class,    Double.BYTES,      15,                25, false, true, true),, +    // since ODBC and JDBC interpret precision for Date as display size,, +    // the precision is 23 (number of chars in ISO8601 with millis) + Z (the UTC timezone), +    // see https://github.com/elastic/elasticsearch/issues/30386#issuecomment-386807288, +    DATE(        JDBCType.TIMESTAMP, Timestamp.class, Long.BYTES,        24,                24);, +     * String representation (assuming the maximum allowed defaultPrecision of the fractional milliseconds component)., +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +    // 53 bits defaultPrecision ~ 15(15.95) decimal digits (53log10(2)),, +    DOUBLE(      JDBCType.DOUBLE,    Double.class,    Double.BYTES,      15,                25, false, true, true),, +    // since ODBC and JDBC interpret precision for Date as display size,, +    // the precision is 23 (number of chars in ISO8601 with millis) + Z (the UTC timezone), +    // see https://github.com/elastic/elasticsearch/issues/30386#issuecomment-386807288, +    DATE(        JDBCType.TIMESTAMP, Timestamp.class, Long.BYTES,        24,                24);, +     * String representation (assuming the maximum allowed defaultPrecision of the fractional milliseconds component)., +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysColumns.java, +import org.elasticsearch.xpack.sql.type.DataTypes;, +                        DataTypes.metaSqlRadix(type),, +                        DataTypes.metaSqlDataType(type),, +                        DataTypes.metaSqlDateTimeSub(type),, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +    // 53 bits defaultPrecision ~ 15(15.95) decimal digits (53log10(2)),, +    DOUBLE(      JDBCType.DOUBLE,    Double.class,    Double.BYTES,      15,                25, false, true, true),, +    // since ODBC and JDBC interpret precision for Date as display size,, +    // the precision is 23 (number of chars in ISO8601 with millis) + Z (the UTC timezone), +    // see https://github.com/elastic/elasticsearch/issues/30386#issuecomment-386807288, +    DATE(        JDBCType.TIMESTAMP, Timestamp.class, Long.BYTES,        24,                24);, +     * String representation (assuming the maximum allowed defaultPrecision of the fractional milliseconds component)., +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysColumns.java, +import org.elasticsearch.xpack.sql.type.DataTypes;, +                        DataTypes.metaSqlRadix(type),, +                        DataTypes.metaSqlDataType(type),, +                        DataTypes.metaSqlDateTimeSub(type),, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTableTypes.java, +import java.util.Comparator;, +                // *DBC requires ascending order, +                .sorted(Comparator.comparing(t -> t.toSql())), +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +    // 53 bits defaultPrecision ~ 15(15.95) decimal digits (53log10(2)),, +    DOUBLE(      JDBCType.DOUBLE,    Double.class,    Double.BYTES,      15,                25, false, true, true),, +    // since ODBC and JDBC interpret precision for Date as display size,, +    // the precision is 23 (number of chars in ISO8601 with millis) + Z (the UTC timezone), +    // see https://github.com/elastic/elasticsearch/issues/30386#issuecomment-386807288, +    DATE(        JDBCType.TIMESTAMP, Timestamp.class, Long.BYTES,        24,                24);, +     * String representation (assuming the maximum allowed defaultPrecision of the fractional milliseconds component)., +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysColumns.java, +import org.elasticsearch.xpack.sql.type.DataTypes;, +                        DataTypes.metaSqlRadix(type),, +                        DataTypes.metaSqlDataType(type),, +                        DataTypes.metaSqlDateTimeSub(type),, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTableTypes.java, +import java.util.Comparator;, +                // *DBC requires ascending order, +                .sorted(Comparator.comparing(t -> t.toSql())), +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTypes.java, +import org.elasticsearch.xpack.sql.type.DataTypes;, +                .sorted(Comparator.comparing(t -> t.jdbcType.getVendorTypeNumber())), +                        //https://docs.microsoft.com/en-us/sql/odbc/reference/appendixes/column-size?view=sql-server-2017, +                        Boolean.FALSE,, +                        // not auto-incremented, +                        Boolean.FALSE,, +                        DataTypes.metaSqlMinimumScale(t),, +                        DataTypes.metaSqlMaximumScale(t),, +                        DataTypes.metaSqlDataType(t),, +                        DataTypes.metaSqlDateTimeSub(t),, +                        DataTypes.metaSqlRadix(t),, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +    // 53 bits defaultPrecision ~ 15(15.95) decimal digits (53log10(2)),, +    DOUBLE(      JDBCType.DOUBLE,    Double.class,    Double.BYTES,      15,                25, false, true, true),, +    // since ODBC and JDBC interpret precision for Date as display size,, +    // the precision is 23 (number of chars in ISO8601 with millis) + Z (the UTC timezone), +    // see https://github.com/elastic/elasticsearch/issues/30386#issuecomment-386807288, +    DATE(        JDBCType.TIMESTAMP, Timestamp.class, Long.BYTES,        24,                24);, +     * String representation (assuming the maximum allowed defaultPrecision of the fractional milliseconds component)., +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysColumns.java, +import org.elasticsearch.xpack.sql.type.DataTypes;, +                        DataTypes.metaSqlRadix(type),, +                        DataTypes.metaSqlDataType(type),, +                        DataTypes.metaSqlDateTimeSub(type),, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTableTypes.java, +import java.util.Comparator;, +                // *DBC requires ascending order, +                .sorted(Comparator.comparing(t -> t.toSql())), +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTypes.java, +import org.elasticsearch.xpack.sql.type.DataTypes;, +                .sorted(Comparator.comparing(t -> t.jdbcType.getVendorTypeNumber())), +                        //https://docs.microsoft.com/en-us/sql/odbc/reference/appendixes/column-size?view=sql-server-2017, +                        Boolean.FALSE,, +                        // not auto-incremented, +                        Boolean.FALSE,, +                        DataTypes.metaSqlMinimumScale(t),, +                        DataTypes.metaSqlMaximumScale(t),, +                        DataTypes.metaSqlDataType(t),, +                        DataTypes.metaSqlDateTimeSub(t),, +                        DataTypes.metaSqlRadix(t),, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/type/DataTypes.java, +, +    //, +    // Metadata methods, mainly for ODBC.]