[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/support/IncludeExclude.java, +        if (isPartitionBased()) {, +            builder.field(PARTITION_FIELD.getPreferredName(), incZeroBasedPartition);, +            builder.field(NUM_PARTITIONS_FIELD.getPreferredName(), incNumPartitions);, +        }, +        return Objects.hash(, +                include == null ? null : include.getOriginalString(),, +                exclude == null ? null : exclude.getOriginalString(),, +                includeValues, excludeValues, incZeroBasedPartition, incNumPartitions);, +                && Objects.equals(excludeValues, other.excludeValues), +                && Objects.equals(incZeroBasedPartition, other.incZeroBasedPartition), +                && Objects.equals(incNumPartitions, other.incNumPartitions);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/support/IncludeExclude.java, +        if (isPartitionBased()) {, +            builder.field(PARTITION_FIELD.getPreferredName(), incZeroBasedPartition);, +            builder.field(NUM_PARTITIONS_FIELD.getPreferredName(), incNumPartitions);, +        }, +        return Objects.hash(, +                include == null ? null : include.getOriginalString(),, +                exclude == null ? null : exclude.getOriginalString(),, +                includeValues, excludeValues, incZeroBasedPartition, incNumPartitions);, +                && Objects.equals(excludeValues, other.excludeValues), +                && Objects.equals(incZeroBasedPartition, other.incZeroBasedPartition), +                && Objects.equals(incNumPartitions, other.incNumPartitions);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TermsTests.java, +            switch (randomInt(6)) {, +            case 6:, +                final int numPartitions = randomIntBetween(1, 100);, +                final int partition = randomIntBetween(0, numPartitions - 1);, +                incExc = new IncludeExclude(partition, numPartitions);, +                break;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/support/IncludeExclude.java, +        if (isPartitionBased()) {, +            builder.field(PARTITION_FIELD.getPreferredName(), incZeroBasedPartition);, +            builder.field(NUM_PARTITIONS_FIELD.getPreferredName(), incNumPartitions);, +        }, +        return Objects.hash(, +                include == null ? null : include.getOriginalString(),, +                exclude == null ? null : exclude.getOriginalString(),, +                includeValues, excludeValues, incZeroBasedPartition, incNumPartitions);, +                && Objects.equals(excludeValues, other.excludeValues), +                && Objects.equals(incZeroBasedPartition, other.incZeroBasedPartition), +                && Objects.equals(incNumPartitions, other.incNumPartitions);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TermsTests.java, +            switch (randomInt(6)) {, +            case 6:, +                final int numPartitions = randomIntBetween(1, 100);, +                final int partition = randomIntBetween(0, numPartitions - 1);, +                incExc = new IncludeExclude(partition, numPartitions);, +                break;, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/support/IncludeExcludeTests.java, +    public void testEquals() {, +        assertEquals(new IncludeExclude(3, 20), new IncludeExclude(3, 20));, +        assertEquals(new IncludeExclude(3, 20).hashCode(), new IncludeExclude(3, 20).hashCode());, +        assertFalse(new IncludeExclude(3, 20).equals(new IncludeExclude(4, 20)));, +        assertTrue(new IncludeExclude(3, 20).hashCode() != new IncludeExclude(4, 20).hashCode());, +        assertFalse(new IncludeExclude(3, 20).equals(new IncludeExclude(3, 21)));, +        assertTrue(new IncludeExclude(3, 20).hashCode() != new IncludeExclude(3, 21).hashCode());, +    }, +]