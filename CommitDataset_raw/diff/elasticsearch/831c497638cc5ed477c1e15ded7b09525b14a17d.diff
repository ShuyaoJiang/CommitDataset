[+++ b/core/src/main/java/org/elasticsearch/Version.java, +        if (major == 6) { // we only specialize for current major here, +            bwcMajor = Version.V_5_4_0.major;, +            bwcMinor = Version.V_5_4_0.minor;, +        } else if (major > 6) { // all the future versions are compatible with first minor..., +            bwcMinor = 0;, +++ b/core/src/main/java/org/elasticsearch/Version.java, +        if (major == 6) { // we only specialize for current major here, +            bwcMajor = Version.V_5_4_0.major;, +            bwcMinor = Version.V_5_4_0.minor;, +        } else if (major > 6) { // all the future versions are compatible with first minor..., +            bwcMinor = 0;, +++ b/core/src/test/java/org/elasticsearch/VersionTests.java, +        assertTrue(isCompatible(Version.fromString("6.0.0"), Version.fromString("7.0.0")));, +        if (Version.CURRENT.isRelease()) {, +            assertTrue(isCompatible(Version.CURRENT, Version.fromString("7.0.0")));, +        } else {, +            assertFalse(isCompatible(Version.CURRENT, Version.fromString("7.0.0")));, +        }, +        assertFalse("only compatible with the latest minor",, +            isCompatible(VersionUtils.getPreviousMinorVersion(), Version.fromString("7.0.0")));, +        assertFalse(isCompatible(Version.V_5_0_0, Version.fromString("6.0.0")));, +        assertFalse(isCompatible(Version.V_5_0_0, Version.fromString("7.0.0")));]