[+++ b/docs/reference/index-modules/allocation.asciidoc, +watermark for disk usage. It defaults to 70%, meaning ES will not, +watermark. It defaults to 85%, meaning ES will attempt to relocate, +++ b/docs/reference/index-modules/allocation.asciidoc, +watermark for disk usage. It defaults to 70%, meaning ES will not, +watermark. It defaults to 85%, meaning ES will attempt to relocate, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +import org.elasticsearch.common.unit.RatioValue;, +        String lowWatermark = settings.get(CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK, "70%");, +        String highWatermark = settings.get(CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK, "85%");, +            return RatioValue.parseRatioValue(watermark).getAsPercent();, +        } catch (ElasticsearchParseException ex) {, +            RatioValue.parseRatioValue(watermark);, +        } catch (ElasticsearchParseException e) {, +++ b/docs/reference/index-modules/allocation.asciidoc, +watermark for disk usage. It defaults to 70%, meaning ES will not, +watermark. It defaults to 85%, meaning ES will attempt to relocate, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +import org.elasticsearch.common.unit.RatioValue;, +        String lowWatermark = settings.get(CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK, "70%");, +        String highWatermark = settings.get(CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK, "85%");, +            return RatioValue.parseRatioValue(watermark).getAsPercent();, +        } catch (ElasticsearchParseException ex) {, +            RatioValue.parseRatioValue(watermark);, +        } catch (ElasticsearchParseException e) {, +++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +    public RatioValue getAsRatio(String setting, String defaultValue) throws SettingsException {, +        return RatioValue.parseRatioValue(get(setting, defaultValue));, +    }, +, +    @Override, +    public RatioValue getAsRatio(String[] settings, String defaultValue) throws SettingsException {, +        return RatioValue.parseRatioValue(get(settings, defaultValue));, +    }, +, +    @Override, +++ b/docs/reference/index-modules/allocation.asciidoc, +watermark for disk usage. It defaults to 70%, meaning ES will not, +watermark. It defaults to 85%, meaning ES will attempt to relocate, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +import org.elasticsearch.common.unit.RatioValue;, +        String lowWatermark = settings.get(CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK, "70%");, +        String highWatermark = settings.get(CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK, "85%");, +            return RatioValue.parseRatioValue(watermark).getAsPercent();, +        } catch (ElasticsearchParseException ex) {, +            RatioValue.parseRatioValue(watermark);, +        } catch (ElasticsearchParseException e) {, +++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +    public RatioValue getAsRatio(String setting, String defaultValue) throws SettingsException {, +        return RatioValue.parseRatioValue(get(setting, defaultValue));, +    }, +, +    @Override, +    public RatioValue getAsRatio(String[] settings, String defaultValue) throws SettingsException {, +        return RatioValue.parseRatioValue(get(settings, defaultValue));, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/settings/Settings.java, +import org.elasticsearch.common.unit.RatioValue;, +     * Returns the setting value (as a RatioValue) associated with the setting key. Provided values can, +     * either be a percentage value (eg. 23%), or expressed as a floating point number (eg. 0.23). If, +     * it does not exist, parses the default value provided., +     */, +    RatioValue getAsRatio(String setting, String defaultValue) throws SettingsException;, +, +    /**, +     * Returns the setting value (as a RatioValue) associated with the setting key. Provided values can, +     * either be a percentage value (eg. 23%), or expressed as a floating point number (eg. 0.23). If, +     * it does not exist, parses the default value provided., +     */, +    RatioValue getAsRatio(String[] settings, String defaultValue) throws SettingsException;, +, +    /**, +++ b/docs/reference/index-modules/allocation.asciidoc, +watermark for disk usage. It defaults to 70%, meaning ES will not, +watermark. It defaults to 85%, meaning ES will attempt to relocate, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +import org.elasticsearch.common.unit.RatioValue;, +        String lowWatermark = settings.get(CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK, "70%");, +        String highWatermark = settings.get(CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK, "85%");, +            return RatioValue.parseRatioValue(watermark).getAsPercent();, +        } catch (ElasticsearchParseException ex) {, +            RatioValue.parseRatioValue(watermark);, +        } catch (ElasticsearchParseException e) {, +++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +    public RatioValue getAsRatio(String setting, String defaultValue) throws SettingsException {, +        return RatioValue.parseRatioValue(get(setting, defaultValue));, +    }, +, +    @Override, +    public RatioValue getAsRatio(String[] settings, String defaultValue) throws SettingsException {, +        return RatioValue.parseRatioValue(get(settings, defaultValue));, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/common/settings/Settings.java, +import org.elasticsearch.common.unit.RatioValue;, +     * Returns the setting value (as a RatioValue) associated with the setting key. Provided values can, +     * either be a percentage value (eg. 23%), or expressed as a floating point number (eg. 0.23). If]