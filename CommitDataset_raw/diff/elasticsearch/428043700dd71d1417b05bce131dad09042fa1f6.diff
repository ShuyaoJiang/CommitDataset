[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.rescore.RescoreBaseBuilder;, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder rescorer, int window) {, +    public SearchRequestBuilder addRescorer(RescoreBuilder rescorer) {, +        sourceBuilder().addRescorer(new RescoreBaseBuilder(rescorer));, +    public SearchRequestBuilder addRescorer(RescoreBuilder rescorer, int window) {, +        sourceBuilder().addRescorer(new RescoreBaseBuilder(rescorer).windowSize(window));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.rescore.RescoreBaseBuilder;, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder rescorer, int window) {, +    public SearchRequestBuilder addRescorer(RescoreBuilder rescorer) {, +        sourceBuilder().addRescorer(new RescoreBaseBuilder(rescorer));, +    public SearchRequestBuilder addRescorer(RescoreBuilder rescorer, int window) {, +        sourceBuilder().addRescorer(new RescoreBaseBuilder(rescorer).windowSize(window));, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.rescore.RescoreBuilder;, +     * Reads a {@link RescoreBuilder} from the current stream, +    public RescoreBuilder readRescorer() throws IOException {, +        return readNamedWriteable(RescoreBuilder.class);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.rescore.RescoreBaseBuilder;, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder rescorer, int window) {, +    public SearchRequestBuilder addRescorer(RescoreBuilder rescorer) {, +        sourceBuilder().addRescorer(new RescoreBaseBuilder(rescorer));, +    public SearchRequestBuilder addRescorer(RescoreBuilder rescorer, int window) {, +        sourceBuilder().addRescorer(new RescoreBaseBuilder(rescorer).windowSize(window));, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.rescore.RescoreBuilder;, +     * Reads a {@link RescoreBuilder} from the current stream, +    public RescoreBuilder readRescorer() throws IOException {, +        return readNamedWriteable(RescoreBuilder.class);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.search.rescore.RescoreBuilder;, +     * Writes a {@link RescoreBuilder} to the current stream, +    public void writeRescorer(RescoreBuilder rescorer) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.rescore.RescoreBaseBuilder;, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder rescorer, int window) {, +    public SearchRequestBuilder addRescorer(RescoreBuilder rescorer) {, +        sourceBuilder().addRescorer(new RescoreBaseBuilder(rescorer));, +    public SearchRequestBuilder addRescorer(RescoreBuilder rescorer, int window) {, +        sourceBuilder().addRescorer(new RescoreBaseBuilder(rescorer).windowSize(window));, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.rescore.RescoreBuilder;, +     * Reads a {@link RescoreBuilder} from the current stream, +    public RescoreBuilder readRescorer() throws IOException {, +        return readNamedWriteable(RescoreBuilder.class);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.search.rescore.RescoreBuilder;, +     * Writes a {@link RescoreBuilder} to the current stream, +    public void writeRescorer(RescoreBuilder rescorer) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +import org.elasticsearch.search.rescore.RescoreBaseBuilder;, +    public SearchSourceBuilder addRescorer(RescoreBaseBuilder rescoreBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.rescore.RescoreBaseBuilder;, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder rescorer) {, +     * {@link #addRescorer(org.elasticsearch.search.rescore.RescoreBuilder, int)}., +    public SearchRequestBuilder setRescorer(RescoreBuilder rescorer, int window) {, +    public SearchRequestBuilder addRescorer(RescoreBuilder rescorer) {, +        sourceBuilder().addRescorer(new RescoreBaseBuilder(rescorer));, +    public SearchRequestBuilder addRescorer(RescoreBuilder rescorer, int window) {, +        sourceBuilder().addRescorer(new RescoreBaseBuilder(rescorer).windowSize(window));, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.rescore.RescoreBuilder;, +     * Reads a {@link RescoreBuilder} from the current stream, +    public RescoreBuilder readRescorer() throws IOException {, +        return readNamedWriteable(RescoreBuilder.class);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.search.rescore.RescoreBuilder;, +     * Writes a {@link RescoreBuilder} to the current stream, +    public void writeRescorer(RescoreBuilder rescorer) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +import org.elasticsearch.search.rescore.RescoreBaseBuilder;, +    public SearchSourceBuilder addRescorer(RescoreBaseBuilder rescoreBuilder) {, +++ b/core/src/main/java/org/elasticsearch/search/rescore/QueryRescorer.java, +import org.elasticsearch.index.query.QueryShardContext;, +    private static final ObjectParser<QueryRescoreContext, QueryShardContext> RESCORE_PARSER = new ObjectParser<>("query", null);, +        RESCORE_PARSER.declareObject(QueryRescoreContext::setQuery, (p, c) -> c.parse(p).query(), new ParseField("rescore_query"));, +    public RescoreSearchContext parse(XContentParser parser, QueryShardContext context) throws IOException {, +        static final int DEFAULT_WINDOW_SIZE = 10;, +, +            super(NAME, DEFAULT_WINDOW_SIZE, rescorer);, +        private Query query;, +        public void setQuery(Query query) {, +            this.query = query;, +            return query;]