[+++ b/dev-tools/build_release.py, +import github3, +import smtplib, +import sys, +from email.mime.multipart import MIMEMultipart, +from email.mime.text import MIMEText, +from os.path import dirname, abspath, + This tool builds a release from the a given elasticsearch plugin branch., +   $ python3 dev_tools/build_release.py --branch master --publish --remote origin, + '--publish' option is set the actual release is done., +, +   $ python3 dev_tools/build_release.py --publish --remote origin, +, + The script takes over almost all, +  - run prerequisite checks, +  - creates a version release branch & updates pom.xml to point to a release version rather than a snapshot, +  - builds the artifacts, +  - commits the new version and merges the version release branch into the source branch, +  - merges the master release branch into the master branch, +  - creates a tag and pushes branch and master to the specified origin (--remote), +  - publishes the releases to sonatype, +ROOT_DIR = abspath(os.path.join(abspath(dirname(__file__)), '../')), +POM_FILE = ROOT_DIR + '/pom.xml', +##########################################################, +#, +# Utility methods (log and run), +#, +##########################################################, +# Log a message, +, +# Purge the log file, +def purge_log():, +    try:, +        os.remove(LOG), +    except FileNotFoundError:, +        pass, +, +, +# Log a message to the LOG file, +, +# Run a command and log it, +##########################################################, +#, +# Clean logs and check JAVA and Maven, +#, +##########################################################, +    purge_log(), +    MVN = 'mvn', +    run('mvn3 --version', quiet=True), +except RuntimeError:, +    pass, +, +##########################################################, +#, +# String and file manipulation utils, +#, +##########################################################, +def release_branch(branchsource, version):, +    return 'release_branch_%s_%s' % (branchsource, version), +, +# Split a version x.y.z as an array of digits [x,y,z], +def split_version_to_digits(version):, +    return list(map(int, re.findall(r'\d+', version))), +, +, +# Guess the next snapshot version number (increment last digit), +def guess_snapshot(version):, +    digits = split_version_to_digits(version), +    source = '%s.%s.%s' % (digits[0], digits[1], digits[2]), +    destination = '%s.%s.%s' % (digits[0], digits[1], digits[2] + 1), +    return version.replace(source, destination), +, +, +# Guess the anchor in generated documentation, +# Looks like this "#version-230-for-elasticsearch-13", +def get_doc_anchor(release, esversion):, +    plugin_digits = split_version_to_digits(release), +    es_digits = split_version_to_digits(esversion), +    return '#version-%s%s%s-for-elasticsearch-%s%s' % (, +        plugin_digits[0], plugin_digits[1], plugin_digits[2], es_digits[0], es_digits[1]), +, +    pattern = '<version>%s-SNAPSHOT</version>' % release, +    replacement = '<version>%s</version>' % release, +, +, +, +# Moves the pom.xml file to the next snapshot, +def add_maven_snapshot(pom, release, snapshot):, +    pattern = '<version>%s</version>' % release, +    replacement = '<version>%s-SNAPSHOT</version>' % snapshot, +, +    process_file(pom, callback), +# Checks the pom.xml for the release version. <version>2.0.0-SNAPSHOT</version>, +    git_checkout(src_branch), +    with open(POM_FILE, encoding='utf-8') as file:, +# extract a value from pom.xml, +def find_from_pom(tag):, +    with open(POM_FILE, encoding='utf-8') as file:, +        for line in file:, +            match = re.search(r'<%s>(.+)</%s>' % (tag, tag), line)]