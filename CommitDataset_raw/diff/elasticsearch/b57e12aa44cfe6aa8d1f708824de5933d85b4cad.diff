[+++ b/server/src/main/java/org/elasticsearch/search/SearchHit.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +, +     * An array of the (formatted) sort values used., +        return sortValues.getFormattedSortValues();, +    }, +, +    /**, +     * An array of the (raw) sort values used., +     */, +    public Object[] getRawSortValues() {, +        return sortValues.getRawSortValues();, +++ b/server/src/main/java/org/elasticsearch/search/SearchHit.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +, +     * An array of the (formatted) sort values used., +        return sortValues.getFormattedSortValues();, +    }, +, +    /**, +     * An array of the (raw) sort values used., +     */, +    public Object[] getRawSortValues() {, +        return sortValues.getRawSortValues();, +++ b/server/src/main/java/org/elasticsearch/search/SearchSortValues.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.lucene.Lucene;, +    private static final Object[] EMPTY_ARRAY = new Object[0];, +    static final SearchSortValues EMPTY = new SearchSortValues(EMPTY_ARRAY);, +, +    private final Object[] formattedSortValues;, +    private final Object[] rawSortValues;, +        this.formattedSortValues = Objects.requireNonNull(sortValues, "sort values must not be empty");, +        this.rawSortValues = EMPTY_ARRAY;, +    public SearchSortValues(Object[] rawSortValues, DocValueFormat[] sortValueFormats) {, +        Objects.requireNonNull(rawSortValues);, +        if (rawSortValues.length != sortValueFormats.length) {, +            throw new IllegalArgumentException("formattedSortValues and sortValueFormats must hold the same number of items");, +        }, +        this.rawSortValues = rawSortValues;, +        this.formattedSortValues = Arrays.copyOf(rawSortValues, rawSortValues.length);, +        for (int i = 0; i < rawSortValues.length; ++i) {, +            //we currently format only BytesRef but we may want to change that in the future, +            Object sortValue = rawSortValues[i];, +            if (sortValue instanceof BytesRef) {, +                this.formattedSortValues[i] = sortValueFormats[i].format((BytesRef) sortValue);, +    SearchSortValues(StreamInput in) throws IOException {, +        this.formattedSortValues = in.readArray(Lucene::readSortValue, Object[]::new);, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            this.rawSortValues = in.readArray(Lucene::readSortValue, Object[]::new);, +            this.rawSortValues = EMPTY_ARRAY;, +        out.writeArray(Lucene::writeSortValue, this.formattedSortValues);, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeArray(Lucene::writeSortValue, this.rawSortValues);, +        if (formattedSortValues.length > 0) {, +            for (Object sortValue : formattedSortValues) {, +    /**, +     * Returns the formatted version of the values that sorting was performed against, +     */, +    public Object[] getFormattedSortValues() {, +        return formattedSortValues;, +    }, +, +    /**, +     * Returns the raw version of the values that sorting was performed against, +     */, +    public Object[] getRawSortValues() {, +        return rawSortValues;, +    public boolean equals(Object o) {, +        if (this == o) {, +        if (o == null || getClass() != o.getClass()) {, +        SearchSortValues that = (SearchSortValues) o;, +        return Arrays.equals(formattedSortValues, that.formattedSortValues) &&, +            Arrays.equals(rawSortValues, that.rawSortValues);, +        int result = Arrays.hashCode(formattedSortValues);, +        result = 31 * result + Arrays.hashCode(rawSortValues);, +        return result;, +++ b/server/src/main/java/org/elasticsearch/search/SearchHit.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Iterator;]