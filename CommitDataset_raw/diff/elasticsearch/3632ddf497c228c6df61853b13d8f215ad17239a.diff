[+++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/package-info.java, +  ^^^^^ note: the methods from this test using mustache were moved to the mustache module under its messy tests package., +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/package-info.java, +  ^^^^^ note: the methods from this test using mustache were moved to the mustache module under its messy tests package., +++ b/modules/lang-mustache/build.gradle, +compileTestJava.options.compilerArgs << '-Xlint:-rawtypes,-unchecked', +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/package-info.java, +  ^^^^^ note: the methods from this test using mustache were moved to the mustache module under its messy tests package., +++ b/modules/lang-mustache/build.gradle, +compileTestJava.options.compilerArgs << '-Xlint:-rawtypes,-unchecked', +++ b/modules/lang-mustache/src/test/java/org/elasticsearch/messy/tests/ContextAndHeaderTransportTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.messy.tests;, +, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionModule;, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionRequestBuilder;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;, +import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;, +import org.elasticsearch.action.get.GetRequest;, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.action.indexedscripts.put.PutIndexedScriptRequest;, +import org.elasticsearch.action.indexedscripts.put.PutIndexedScriptResponse;, +import org.elasticsearch.action.search.SearchRequestBuilder;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.support.ActionFilter;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.FilterClient;, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.script.ScriptService.ScriptType;, +import org.elasticsearch.script.Template;, +import org.elasticsearch.script.mustache.MustachePlugin;, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;, +import org.elasticsearch.search.suggest.Suggest;, +import org.elasticsearch.search.suggest.SuggestBuilder;, +import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.elasticsearch.test.ESIntegTestCase.ClusterScope;, +import org.junit.After;, +import org.junit.Before;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.concurrent.CopyOnWriteArrayList;, +, +import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_SHARDS;, +import static org.elasticsearch.common.settings.Settings.settingsBuilder;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.node.Node.HTTP_ENABLED;, +import static org.elasticsearch.search.suggest.SuggestBuilders.phraseSuggestion;, +import static org.elasticsearch.test.ESIntegTestCase.Scope.SUITE;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSuggestionSize;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.hasSize;, +import static org.hamcrest.Matchers.is;, +, +@ClusterScope(scope = SUITE)]