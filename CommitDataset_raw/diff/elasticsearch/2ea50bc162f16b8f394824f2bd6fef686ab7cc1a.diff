[+++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        public void allocateUnassigned(RoutingAllocation allocation) {, +            // noop, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        public void allocateUnassigned(RoutingAllocation allocation) {, +            // noop, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.cluster.routing.allocation.IndexMetaDataUpdater;, +     * that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges(MetaData)}., +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        public void allocateUnassigned(RoutingAllocation allocation) {, +            // noop, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +import org.elasticsearch.cluster.routing.allocation.IndexMetaDataUpdater;, +     * that can be indexed into) is larger than 0. See {@link IndexMetaDataUpdater#applyChanges(MetaData)}., +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingChangesObserver.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.routing;, +, +/**, + * Records changes made to {@link RoutingNodes} during an allocation round., + */, +public interface RoutingChangesObserver {, +    /**, +     * Called when unassigned shard is initialized. Does not include initializing relocation target shards., +     */, +    void shardInitialized(ShardRouting unassignedShard);, +, +    /**, +     * Called when an initializing shard is started., +     */, +    void shardStarted(ShardRouting initializingShard, ShardRouting startedShard);, +, +    /**, +     * Called when relocation of a started shard is initiated., +     */, +    void relocationStarted(ShardRouting startedShard, ShardRouting targetRelocatingShard);, +, +    /**, +     * Called when an unassigned shard's unassigned information was updated, +     */, +    void unassignedInfoUpdated(ShardRouting unassignedShard, UnassignedInfo newUnassignedInfo);, +, +    /**, +     * Called when a shard is failed or cancelled., +     */, +    void shardFailed(ShardRouting failedShard, UnassignedInfo unassignedInfo);, +, +    /**, +     * Called on relocation source when relocation completes after relocation target is started., +     */, +    void relocationCompleted(ShardRouting removedRelocationSource);, +, +    /**, +     * Called on replica relocation target when replica relocation source fails. Promotes the replica relocation target to ordinary, +     * initializing shard., +     */, +    void relocationSourceRemoved(ShardRouting removedReplicaRelocationSource);, +, +    /**, +     * Called on started primary shard after it has been promoted from replica to primary and is reinitialized due to shadow replicas., +     */, +    void startedPrimaryReinitialized(ShardRouting startedPrimaryShard, ShardRouting initializedShard);, +, +    /**, +     * Called when started replica is promoted to primary., +     */, +    void replicaPromoted(ShardRouting replicaShard);, +, +, +    /**, +     * Abstract implementation of {@link RoutingChangesObserver} that does not take any action. Useful for subclasses that only override, +     * certain methods., +     */, +    class AbstractRoutingChangesObserver implements RoutingChangesObserver {, +, +        @Override, +        public void shardInitialized(ShardRouting unassignedShard) {, +, +        }, +, +        @Override]