[+++ b/core/src/main/java/org/elasticsearch/common/joda/Joda.java, +        } else if ("timeNoMillis".equals(input) || "time_no_millis".equals(input)) {, +            formatter = ISODateTimeFormat.timeNoMillis();, +        } else if ("weekDateTimeNoMillis".equals(input) || "week_date_time_no_millis".equals(input)) {, +            formatter = ISODateTimeFormat.weekDateTimeNoMillis();, +        } else if ("weekyearWeek".equals(input) || "weekyear_week".equals(input)) {, +        } else if ("weekyearWeekDay".equals(input) || "weekyear_week_day".equals(input)) {, +            formatter = ISODateTimeFormat.weekyearWeekDay();, +        // strict date formats here, must be at least 4 digits for year and two for months and two for day, +        } else if ("strictBasicWeekDate".equals(input) || "strict_basic_week_date".equals(input)) {, +            formatter = StrictISODateTimeFormat.basicWeekDate();, +        } else if ("strictBasicWeekDateTime".equals(input) || "strict_basic_week_date_time".equals(input)) {, +            formatter = StrictISODateTimeFormat.basicWeekDateTime();, +        } else if ("strictBasicWeekDateTimeNoMillis".equals(input) || "strict_basic_week_date_time_no_millis".equals(input)) {, +            formatter = StrictISODateTimeFormat.basicWeekDateTimeNoMillis();, +        } else if ("strictDate".equals(input) || "strict_date".equals(input)) {, +            formatter = StrictISODateTimeFormat.date();, +        } else if ("strictDateHour".equals(input) || "strict_date_hour".equals(input)) {, +            formatter = StrictISODateTimeFormat.dateHour();, +        } else if ("strictDateHourMinute".equals(input) || "strict_date_hour_minute".equals(input)) {, +            formatter = StrictISODateTimeFormat.dateHourMinute();, +        } else if ("strictDateHourMinuteSecond".equals(input) || "strict_date_hour_minute_second".equals(input)) {, +            formatter = StrictISODateTimeFormat.dateHourMinuteSecond();, +        } else if ("strictDateHourMinuteSecondFraction".equals(input) || "strict_date_hour_minute_second_fraction".equals(input)) {, +            formatter = StrictISODateTimeFormat.dateHourMinuteSecondFraction();, +        } else if ("strictDateHourMinuteSecondMillis".equals(input) || "strict_date_hour_minute_second_millis".equals(input)) {, +            formatter = StrictISODateTimeFormat.dateHourMinuteSecondMillis();, +        } else if ("strictDateOptionalTime".equals(input) || "strict_date_optional_time".equals(input)) {, +            // in this case, we have a separate parser and printer since the dataOptionalTimeParser can't print, +            // this sucks we should use the root local by default and not be dependent on the node, +            return new FormatDateTimeFormatter(input,, +                    StrictISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC),, +                    StrictISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC), locale);, +        } else if ("strictDateTime".equals(input) || "strict_date_time".equals(input)) {, +            formatter = StrictISODateTimeFormat.dateTime();, +        } else if ("strictDateTimeNoMillis".equals(input) || "strict_date_time_no_millis".equals(input)) {, +            formatter = StrictISODateTimeFormat.dateTimeNoMillis();, +        } else if ("strictHour".equals(input) || "strict_hour".equals(input)) {, +            formatter = StrictISODateTimeFormat.hour();, +        } else if ("strictHourMinute".equals(input) || "strict_hour_minute".equals(input)) {, +            formatter = StrictISODateTimeFormat.hourMinute();, +        } else if ("strictHourMinuteSecond".equals(input) || "strict_hour_minute_second".equals(input)) {, +            formatter = StrictISODateTimeFormat.hourMinuteSecond();, +        } else if ("strictHourMinuteSecondFraction".equals(input) || "strict_hour_minute_second_fraction".equals(input)) {, +            formatter = StrictISODateTimeFormat.hourMinuteSecondFraction();, +        } else if ("strictHourMinuteSecondMillis".equals(input) || "strict_hour_minute_second_millis".equals(input)) {, +            formatter = StrictISODateTimeFormat.hourMinuteSecondMillis();, +        } else if ("strictOrdinalDate".equals(input) || "strict_ordinal_date".equals(input)) {, +            formatter = StrictISODateTimeFormat.ordinalDate();, +        } else if ("strictOrdinalDateTime".equals(input) || "strict_ordinal_date_time".equals(input)) {, +            formatter = StrictISODateTimeFormat.ordinalDateTime();, +        } else if ("strictOrdinalDateTimeNoMillis".equals(input) || "strict_ordinal_date_time_no_millis".equals(input)) {, +            formatter = StrictISODateTimeFormat.ordinalDateTimeNoMillis();, +        } else if ("strictTime".equals(input) || "strict_time".equals(input)) {, +            formatter = StrictISODateTimeFormat.time();, +        } else if ("strictTimeNoMillis".equals(input) || "strict_time_no_millis".equals(input)) {, +            formatter = StrictISODateTimeFormat.timeNoMillis();, +        } else if ("strictTTime".equals(input) || "strict_t_time".equals(input)) {, +            formatter = StrictISODateTimeFormat.tTime();, +        } else if ("strictTTimeNoMillis".equals(input) || "strict_t_time_no_millis".equals(input)) {, +            formatter = StrictISODateTimeFormat.tTimeNoMillis();, +        } else if ("strictWeekDate".equals(input) || "strict_week_date".equals(input)) {, +            formatter = StrictISODateTimeFormat.weekDate();, +        } else if ("strictWeekDateTime".equals(input) || "strict_week_date_time".equals(input)) {, +            formatter = StrictISODateTimeFormat.weekDateTime();, +        } else if ("strictWeekDateTimeNoMillis".equals(input) || "strict_week_date_time_no_millis".equals(input)) {, +            formatter = StrictISODateTimeFormat.weekDateTimeNoMillis();, +        } else if ("strictWeekyear".equals(input) || "strict_weekyear".equals(input)) {, +            formatter = StrictISODateTimeFormat.weekyear();, +        } else if ("strictWeekyearWeek".equals(input) || "strict_weekyear_week".equals(input)) {, +            formatter = StrictISODateTimeFormat.weekyearWeek();, +        } else if ("strictWeekyearWeekDay".equals(input) || "strict_weekyear_week_day".equals(input)) {, +            formatter = StrictISODateTimeFormat.weekyearWeekDay();, +        } else if ("strictYear".equals(input) || "strict_year".equals(input)) {, +            formatter = StrictISODateTimeFormat.year();, +        } else if ("strictYearMonth".equals(input) || "strict_year_month".equals(input)) {, +            formatter = StrictISODateTimeFormat.yearMonth();, +        } else if ("strictYearMonthDay".equals(input) || "strict_year_month_day".equals(input)) {, +            formatter = StrictISODateTimeFormat.yearMonthDay();, +    public static FormatDateTimeFormatter getStrictStandardDateFormatter() {, +        // 2014/10/10, +        DateTimeFormatter shortFormatter = new DateTimeFormatterBuilder(), +                .appendFixedDecimal(DateTimeFieldType.year(), 4), +                .appendLiteral('/'), +                .appendFixedDecimal(DateTimeFieldType.monthOfYear(), 2), +                .appendLiteral('/'), +                .appendFixedDecimal(DateTimeFieldType.dayOfMonth(), 2), +                .toFormatter(), +                .withZoneUTC();, +, +        // 2014/10/10 12:12:12, +        DateTimeFormatter longFormatter = new DateTimeFormatterBuilder(), +                .appendFixedDecimal(DateTimeFieldType.year(), 4), +                .appendLiteral('/'), +                .appendFixedDecimal(DateTimeFieldType.monthOfYear(), 2), +                .appendLiteral('/'), +                .appendFixedDecimal(DateTimeFieldType.dayOfMonth(), 2), +                .appendLiteral(' '), +                .appendFixedSignedDecimal(DateTimeFieldType.hourOfDay(), 2), +                .appendLiteral(':')]