[+++ b/server/src/main/java/org/elasticsearch/common/unit/Fuzziness.java, +        if (this.equals(AUTO) || isAutoWithCustomValues()) { //AUTO, +++ b/server/src/main/java/org/elasticsearch/common/unit/Fuzziness.java, +        if (this.equals(AUTO) || isAutoWithCustomValues()) { //AUTO, +++ b/server/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java, +, +    public void testAsDistanceString() {, +        Fuzziness fuzziness = Fuzziness.build("0");, +        assertEquals(0, fuzziness.asDistance(randomAlphaOfLengthBetween(0, 10)));, +        fuzziness = Fuzziness.build("1");, +        assertEquals(1, fuzziness.asDistance(randomAlphaOfLengthBetween(0, 10)));, +        fuzziness = Fuzziness.build("2");, +        assertEquals(2, fuzziness.asDistance(randomAlphaOfLengthBetween(0, 10)));, +, +        fuzziness = Fuzziness.build("AUTO");, +        assertEquals(0, fuzziness.asDistance(""));, +        assertEquals(0, fuzziness.asDistance("ab"));, +        assertEquals(1, fuzziness.asDistance("abc"));, +        assertEquals(1, fuzziness.asDistance("abcde"));, +        assertEquals(2, fuzziness.asDistance("abcdef"));, +, +        fuzziness = Fuzziness.build("AUTO:5,7");, +        assertEquals(0, fuzziness.asDistance(""));, +        assertEquals(0, fuzziness.asDistance("abcd"));, +        assertEquals(1, fuzziness.asDistance("abcde"));, +        assertEquals(1, fuzziness.asDistance("abcdef"));, +        assertEquals(2, fuzziness.asDistance("abcdefg"));, +, +    }, +++ b/server/src/main/java/org/elasticsearch/common/unit/Fuzziness.java, +        if (this.equals(AUTO) || isAutoWithCustomValues()) { //AUTO, +++ b/server/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java, +, +    public void testAsDistanceString() {, +        Fuzziness fuzziness = Fuzziness.build("0");, +        assertEquals(0, fuzziness.asDistance(randomAlphaOfLengthBetween(0, 10)));, +        fuzziness = Fuzziness.build("1");, +        assertEquals(1, fuzziness.asDistance(randomAlphaOfLengthBetween(0, 10)));, +        fuzziness = Fuzziness.build("2");, +        assertEquals(2, fuzziness.asDistance(randomAlphaOfLengthBetween(0, 10)));, +, +        fuzziness = Fuzziness.build("AUTO");, +        assertEquals(0, fuzziness.asDistance(""));, +        assertEquals(0, fuzziness.asDistance("ab"));, +        assertEquals(1, fuzziness.asDistance("abc"));, +        assertEquals(1, fuzziness.asDistance("abcde"));, +        assertEquals(2, fuzziness.asDistance("abcdef"));, +, +        fuzziness = Fuzziness.build("AUTO:5,7");, +        assertEquals(0, fuzziness.asDistance(""));, +        assertEquals(0, fuzziness.asDistance("abcd"));, +        assertEquals(1, fuzziness.asDistance("abcde"));, +        assertEquals(1, fuzziness.asDistance("abcdef"));, +        assertEquals(2, fuzziness.asDistance("abcdefg"));, +, +    }, +++ b/server/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java, +    public void testMatchQueryFuzzy() throws Exception {, +        assertAcked(prepareCreate("test").addMapping("_doc", "text", "type=text"));, +, +        indexRandom(true, client().prepareIndex("test", "_doc", "1").setSource("text", "Unit"),, +                client().prepareIndex("test", "_doc", "2").setSource("text", "Unity"));, +, +        SearchResponse searchResponse = client().prepareSearch().setQuery(matchQuery("text", "uniy").fuzziness("0")).get();, +        assertHitCount(searchResponse, 0L);, +, +        searchResponse = client().prepareSearch().setQuery(matchQuery("text", "uniy").fuzziness("1")).get();, +        assertHitCount(searchResponse, 2L);, +        assertSearchHits(searchResponse, "1", "2");, +, +        searchResponse = client().prepareSearch().setQuery(matchQuery("text", "uniy").fuzziness("AUTO")).get();, +        assertHitCount(searchResponse, 2L);, +        assertSearchHits(searchResponse, "1", "2");, +, +        searchResponse = client().prepareSearch().setQuery(matchQuery("text", "uniy").fuzziness("AUTO:5,7")).get();, +        assertHitCount(searchResponse, 0L);, +, +        searchResponse = client().prepareSearch().setQuery(matchQuery("text", "unify").fuzziness("AUTO:5,7")).get();, +        assertHitCount(searchResponse, 1L);, +        assertSearchHits(searchResponse, "2");, +    }, +, +]