[+++ b/src/main/java/org/elasticsearch/index/analysis/ASCIIFoldingTokenFilterFactory.java, +import org.apache.lucene.analysis.miscellaneous.ASCIIFoldingFilter;, +++ b/src/main/java/org/elasticsearch/index/analysis/ASCIIFoldingTokenFilterFactory.java, +import org.apache.lucene.analysis.miscellaneous.ASCIIFoldingFilter;, +++ b/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +import com.google.common.collect.ImmutableList;, +import org.apache.lucene.analysis.util.CharArraySet;, +    public static CharArraySet parseStemExclusion(Settings settings, CharArraySet defaultStemExclusion, Version version) {, +                return CharArraySet.EMPTY_SET;, +                // LUCENE 4 UPGRADE: Should be settings.getAsBoolean("stem_exclusion_case", false)?, +                return new CharArraySet(version, Strings.commaDelimitedListToSet(value), false);, +            // LUCENE 4 UPGRADE: Should be settings.getAsBoolean("stem_exclusion_case", false)?, +            return new CharArraySet(version, ImmutableList.of(stopWords), false);, +    public static CharArraySet parseArticles(Environment env, Settings settings, Version version) {, +    public static CharArraySet parseStopWords(Environment env, Settings settings, CharArraySet defaultStopWords, Version version) {, +        return parseStopWords(env, settings, defaultStopWords, version, settings.getAsBoolean("stopwords_case", false));, +    }, +, +    public static CharArraySet parseStopWords(Environment env, Settings settings, CharArraySet defaultStopWords, Version version, boolean ignore_case) {, +                return new CharArraySet(version, Strings.commaDelimitedListToSet(value), ignore_case);, +            CharArraySet setStopWords = new CharArraySet(version, stopWords.length, ignore_case);, +            CharArraySet setStopWords = new CharArraySet(version, pathLoadedStopWords.size(), ignore_case);, +++ b/src/main/java/org/elasticsearch/index/analysis/ASCIIFoldingTokenFilterFactory.java, +import org.apache.lucene.analysis.miscellaneous.ASCIIFoldingFilter;, +++ b/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +import com.google.common.collect.ImmutableList;, +import org.apache.lucene.analysis.util.CharArraySet;, +    public static CharArraySet parseStemExclusion(Settings settings, CharArraySet defaultStemExclusion, Version version) {, +                return CharArraySet.EMPTY_SET;, +                // LUCENE 4 UPGRADE: Should be settings.getAsBoolean("stem_exclusion_case", false)?, +                return new CharArraySet(version, Strings.commaDelimitedListToSet(value), false);, +            // LUCENE 4 UPGRADE: Should be settings.getAsBoolean("stem_exclusion_case", false)?, +            return new CharArraySet(version, ImmutableList.of(stopWords), false);, +    public static CharArraySet parseArticles(Environment env, Settings settings, Version version) {, +    public static CharArraySet parseStopWords(Environment env, Settings settings, CharArraySet defaultStopWords, Version version) {, +        return parseStopWords(env, settings, defaultStopWords, version, settings.getAsBoolean("stopwords_case", false));, +    }, +, +    public static CharArraySet parseStopWords(Environment env, Settings settings, CharArraySet defaultStopWords, Version version, boolean ignore_case) {, +                return new CharArraySet(version, Strings.commaDelimitedListToSet(value), ignore_case);, +            CharArraySet setStopWords = new CharArraySet(version, stopWords.length, ignore_case);, +            CharArraySet setStopWords = new CharArraySet(version, pathLoadedStopWords.size(), ignore_case);, +++ b/src/main/java/org/elasticsearch/index/analysis/ArabicAnalyzerProvider.java, +import org.apache.lucene.analysis.util.CharArraySet;, +                Analysis.parseStemExclusion(settings, CharArraySet.EMPTY_SET, version));, +++ b/src/main/java/org/elasticsearch/index/analysis/ASCIIFoldingTokenFilterFactory.java, +import org.apache.lucene.analysis.miscellaneous.ASCIIFoldingFilter;, +++ b/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +import com.google.common.collect.ImmutableList;, +import org.apache.lucene.analysis.util.CharArraySet;, +    public static CharArraySet parseStemExclusion(Settings settings, CharArraySet defaultStemExclusion, Version version) {, +                return CharArraySet.EMPTY_SET;, +                // LUCENE 4 UPGRADE: Should be settings.getAsBoolean("stem_exclusion_case", false)?, +                return new CharArraySet(version, Strings.commaDelimitedListToSet(value), false);, +            // LUCENE 4 UPGRADE: Should be settings.getAsBoolean("stem_exclusion_case", false)?, +            return new CharArraySet(version, ImmutableList.of(stopWords), false);, +    public static CharArraySet parseArticles(Environment env, Settings settings, Version version) {, +    public static CharArraySet parseStopWords(Environment env, Settings settings, CharArraySet defaultStopWords, Version version) {, +        return parseStopWords(env, settings, defaultStopWords, version, settings.getAsBoolean("stopwords_case", false));, +    }, +, +    public static CharArraySet parseStopWords(Environment env, Settings settings, CharArraySet defaultStopWords, Version version, boolean ignore_case) {, +                return new CharArraySet(version, Strings.commaDelimitedListToSet(value), ignore_case);, +            CharArraySet setStopWords = new CharArraySet(version, stopWords.length, ignore_case);, +            CharArraySet setStopWords = new CharArraySet(version, pathLoadedStopWords.size(), ignore_case);, +++ b/src/main/java/org/elasticsearch/index/analysis/ArabicAnalyzerProvider.java, +import org.apache.lucene.analysis.util.CharArraySet;, +                Analysis.parseStemExclusion(settings, CharArraySet.EMPTY_SET, version));, +++ b/src/main/java/org/elasticsearch/index/analysis/ArmenianAnalyzerProvider.java, +import org.apache.lucene.analysis.util.CharArraySet;, +                Analysis.parseStemExclusion(settings, CharArraySet.EMPTY_SET, version));, +++ b/src/main/java/org/elasticsearch/index/analysis/ASCIIFoldingTokenFilterFactory.java, +import org.apache.lucene.analysis.miscellaneous.ASCIIFoldingFilter;, +++ b/src/main/java/org/elasticsearch/index/analysis/Analysis.java, +import com.google.common.collect.ImmutableList;, +import org.apache.lucene.analysis.util.CharArraySet;, +    public static CharArraySet parseStemExclusion(Settings settings, CharArraySet defaultStemExclusion, Version version) {, +                return CharArraySet.EMPTY_SET;, +                // LUCENE 4 UPGRADE: Should be settings.getAsBoolean("stem_exclusion_case", false)?, +                return new CharArraySet(version, Strings.commaDelimitedListToSet(value), false);, +            // LUCENE 4 UPGRADE: Should be settings.getAsBoolean("stem_exclusion_case", false)?, +            return new CharArraySet(version, ImmutableList.of(stopWords), false);, +    public static CharArraySet parseArticles(Environment env, Settings settings, Version version) {, +    public static CharArraySet parseStopWords(Environment env, Settings settings, CharArraySet defaultStopWords, Version version) {, +        return parseStopWords(env, settings, defaultStopWords, version, settings.getAsBoolean("stopwords_case", false));, +    }, +, +    public static CharArraySet parseStopWords(Environment env, Settings settings, CharArraySet defaultStopWords, Version version, boolean ignore_case) {, +                return new CharArraySet(version, Strings.commaDelimitedListToSet(value), ignore_case);, +            CharArraySet setStopWords = new CharArraySet(version, stopWords.length, ignore_case);, +            CharArraySet setStopWords = new CharArraySet(version, pathLoadedStopWords.size(), ignore_case);, +++ b/src/main/java/org/elasticsearch/index/analysis/ArabicAnalyzerProvider.java, +import org.apache.lucene.analysis.util.CharArraySet;, +                Analysis.parseStemExclusion(settings, CharArraySet.EMPTY_SET, version));, +++ b/src/main/java/org/elasticsearch/index/analysis/ArmenianAnalyzerProvider.java, +import org.apache.lucene.analysis.util.CharArraySet;, +                Analysis.parseStemExclusion(settings, CharArraySet.EMPTY_SET, version));, +++ b/src/main/java/org/elasticsearch/index/analysis/BasqueAnalyzerProvider.java, +import org.apache.lucene.analysis.util.CharArraySet;, +                Analysis.parseStemExclusion(settings, CharArraySet.EMPTY_SET, version));]