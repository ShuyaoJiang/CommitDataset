[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +import nebula.plugin.publishing.maven.MavenScmPlugin, +            if (project.path.startsWith(':modules:')) {, +                addPomGeneration(project), +    /**, +     * Adds the plugin jar and zip as publications., +     */, +    protected static void addPomGeneration(Project project) {, +        project.plugins.apply(MavenBasePublishPlugin.class), +        project.plugins.apply(MavenScmPlugin.class), +                nebula {, +                    pom.withXml {, +                        // overwrite the name/description in the pom nebula set up, +                        Node root = asNode(), +                        for (Node node : root.children()) {, +                            if (node.name() == 'name') {, +                                node.setValue(project.pluginProperties.extension.name), +                            } else if (node.name() == 'description') {, +                                node.setValue(project.pluginProperties.extension.description), +, +    }, +}, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +import nebula.plugin.publishing.maven.MavenScmPlugin, +            if (project.path.startsWith(':modules:')) {, +                addPomGeneration(project), +    /**, +     * Adds the plugin jar and zip as publications., +     */, +    protected static void addPomGeneration(Project project) {, +        project.plugins.apply(MavenBasePublishPlugin.class), +        project.plugins.apply(MavenScmPlugin.class), +                nebula {, +                    pom.withXml {, +                        // overwrite the name/description in the pom nebula set up, +                        Node root = asNode(), +                        for (Node node : root.children()) {, +                            if (node.name() == 'name') {, +                                node.setValue(project.pluginProperties.extension.name), +                            } else if (node.name() == 'description') {, +                                node.setValue(project.pluginProperties.extension.description), +, +    }, +}, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +import nebula.plugin.publishing.maven.MavenScmPlugin, +            if (project.path.startsWith(':modules:')) {, +                addPomGeneration(project), +    /**, +     * Adds the plugin jar and zip as publications., +     */, +    protected static void addPomGeneration(Project project) {, +        project.plugins.apply(MavenBasePublishPlugin.class), +        project.plugins.apply(MavenScmPlugin.class), +                nebula {, +                    pom.withXml {, +                        // overwrite the name/description in the pom nebula set up, +                        Node root = asNode(), +                        for (Node node : root.children()) {, +                            if (node.name() == 'name') {, +                                node.setValue(project.pluginProperties.extension.name), +                            } else if (node.name() == 'description') {, +                                node.setValue(project.pluginProperties.extension.description), +, +    }, +}, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]InternalAggregation.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]significant[/\\]InternalSignificantTerms.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]significant[/\\]SignificantLongTerms.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]significant[/\\]SignificantStringTerms.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]significant[/\\]UnmappedSignificantTerms.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]metrics[/\\]geobounds[/\\]InternalGeoBounds.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]pipeline[/\\]derivative[/\\]InternalDerivative.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]http[/\\]netty[/\\]NettyHttpServerPipeliningTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]search[/\\]aggregations[/\\]bucket[/\\]significant[/\\]SignificanceHeuristicTests.java" checks="LineLength" />, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +        project.plugins.withType(MavenBasePublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenBasePublishPlugin, +import nebula.plugin.publishing.maven.MavenScmPlugin, +            if (project.path.startsWith(':modules:')) {]