[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +    void recover(boolean indexShouldExists, RecoveryStatus recoveryStatus) throws IndexShardGatewayRecoveryException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +    void recover(boolean indexShouldExists, RecoveryStatus recoveryStatus) throws IndexShardGatewayRecoveryException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayRecoveryException.java, +    public IndexShardGatewayRecoveryException(ShardId shardId, String msg) {, +        super(shardId, msg);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +    void recover(boolean indexShouldExists, RecoveryStatus recoveryStatus) throws IndexShardGatewayRecoveryException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayRecoveryException.java, +    public IndexShardGatewayRecoveryException(ShardId shardId, String msg) {, +        super(shardId, msg);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +    public void recover(final boolean indexShouldExists, final RecoveryListener listener) throws IndexShardGatewayRecoveryException, IgnoreGatewayRecoveryException {, +                    shardGateway.recover(indexShouldExists, recoveryStatus);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +    void recover(boolean indexShouldExists, RecoveryStatus recoveryStatus) throws IndexShardGatewayRecoveryException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayRecoveryException.java, +    public IndexShardGatewayRecoveryException(ShardId shardId, String msg) {, +        super(shardId, msg);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +    public void recover(final boolean indexShouldExists, final RecoveryListener listener) throws IndexShardGatewayRecoveryException, IgnoreGatewayRecoveryException {, +                    shardGateway.recover(indexShouldExists, recoveryStatus);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +import org.elasticsearch.common.blobstore.BlobContainer;, +import org.elasticsearch.common.blobstore.BlobMetaData;, +import org.elasticsearch.common.blobstore.BlobPath;, +import org.elasticsearch.common.blobstore.BlobStore;, +import org.elasticsearch.common.blobstore.ImmutableBlobContainer;, +import org.elasticsearch.index.gateway.CommitPoint;, +import org.elasticsearch.index.gateway.CommitPoints;, +import org.elasticsearch.index.gateway.IndexGateway;, +import org.elasticsearch.index.gateway.IndexShardGateway;, +import org.elasticsearch.index.gateway.IndexShardGatewayRecoveryException;, +import org.elasticsearch.index.gateway.IndexShardGatewaySnapshotFailedException;, +import org.elasticsearch.index.gateway.RecoveryStatus;, +import org.elasticsearch.index.gateway.SnapshotStatus;, +    @Override public void recover(boolean indexShouldExists, RecoveryStatus recoveryStatus) throws IndexShardGatewayRecoveryException {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +    void recover(boolean indexShouldExists, RecoveryStatus recoveryStatus) throws IndexShardGatewayRecoveryException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayRecoveryException.java, +    public IndexShardGatewayRecoveryException(ShardId shardId, String msg) {, +        super(shardId, msg);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +    public void recover(final boolean indexShouldExists, final RecoveryListener listener) throws IndexShardGatewayRecoveryException, IgnoreGatewayRecoveryException {, +                    shardGateway.recover(indexShouldExists, recoveryStatus);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +import org.elasticsearch.common.blobstore.BlobContainer;, +import org.elasticsearch.common.blobstore.BlobMetaData;, +import org.elasticsearch.common.blobstore.BlobPath;, +import org.elasticsearch.common.blobstore.BlobStore;, +import org.elasticsearch.common.blobstore.ImmutableBlobContainer;, +import org.elasticsearch.index.gateway.CommitPoint;, +import org.elasticsearch.index.gateway.CommitPoints;, +import org.elasticsearch.index.gateway.IndexGateway;, +import org.elasticsearch.index.gateway.IndexShardGateway;, +import org.elasticsearch.index.gateway.IndexShardGatewayRecoveryException;, +import org.elasticsearch.index.gateway.IndexShardGatewaySnapshotFailedException;, +import org.elasticsearch.index.gateway.RecoveryStatus;, +import org.elasticsearch.index.gateway.SnapshotStatus;, +    @Override public void recover(boolean indexShouldExists, RecoveryStatus recoveryStatus) throws IndexShardGatewayRecoveryException {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/local/LocalIndexShardGateway.java, +    @Override public void recover(boolean indexShouldExists, RecoveryStatus recoveryStatus) throws IndexShardGatewayRecoveryException {, +            } else if (indexShouldExists) {, +                throw new IndexShardGatewayRecoveryException(shardId(), "shard allocated for local recovery (post api), should exists, but doesn't");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGateway.java, +    void recover(boolean indexShouldExists, RecoveryStatus recoveryStatus) throws IndexShardGatewayRecoveryException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayRecoveryException.java, +    public IndexShardGatewayRecoveryException(ShardId shardId, String msg) {, +        super(shardId, msg);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/IndexShardGatewayService.java, +    public void recover(final boolean indexShouldExists, final RecoveryListener listener) throws IndexShardGatewayRecoveryException, IgnoreGatewayRecoveryException {, +                    shardGateway.recover(indexShouldExists, recoveryStatus);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +import org.elasticsearch.common.blobstore.BlobContainer;, +import org.elasticsearch.common.blobstore.BlobMetaData;, +import org.elasticsearch.common.blobstore.BlobPath;, +import org.elasticsearch.common.blobstore.BlobStore;, +import org.elasticsearch.common.blobstore.ImmutableBlobContainer;, +import org.elasticsearch.index.gateway.CommitPoint;, +import org.elasticsearch.index.gateway.CommitPoints;, +import org.elasticsearch.index.gateway.IndexGateway;, +import org.elasticsearch.index.gateway.IndexShardGateway;, +import org.elasticsearch.index.gateway.IndexShardGatewayRecoveryException;, +import org.elasticsearch.index.gateway.IndexShardGatewaySnapshotFailedException;, +import org.elasticsearch.index.gateway.RecoveryStatus;, +import org.elasticsearch.index.gateway.SnapshotStatus;, +    @Override public void recover(boolean indexShouldExists, RecoveryStatus recoveryStatus) throws IndexShardGatewayRecoveryException {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/local/LocalIndexShardGateway.java, +    @Override public void recover(boolean indexShouldExists, RecoveryStatus recoveryStatus) throws IndexShardGatewayRecoveryException {]