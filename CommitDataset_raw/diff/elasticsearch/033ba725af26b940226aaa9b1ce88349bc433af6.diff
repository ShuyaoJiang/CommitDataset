[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/PutWatchRequest.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/PutWatchRequest.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            if (opType != DocWriteRequest.OpType.UPDATE && randomBoolean()) {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/PutWatchRequest.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            if (opType != DocWriteRequest.OpType.UPDATE && randomBoolean()) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/WatcherRequestConvertersTests.java, +import org.elasticsearch.client.watcher.PutWatchRequest;, +            long seqNo = randomNonNegativeLong();, +            long ifPrimaryTerm = randomLongBetween(1, 200);, +            putWatchRequest.setIfSeqNo(seqNo);, +            putWatchRequest.setIfPrimaryTerm(ifPrimaryTerm);, +            expectedParams.put("if_seq_no", String.valueOf(seqNo));, +            expectedParams.put("if_primary_term", String.valueOf(ifPrimaryTerm));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/PutWatchRequest.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            if (opType != DocWriteRequest.OpType.UPDATE && randomBoolean()) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/WatcherRequestConvertersTests.java, +import org.elasticsearch.client.watcher.PutWatchRequest;, +            long seqNo = randomNonNegativeLong();, +            long ifPrimaryTerm = randomLongBetween(1, 200);, +            putWatchRequest.setIfSeqNo(seqNo);, +            putWatchRequest.setIfPrimaryTerm(ifPrimaryTerm);, +            expectedParams.put("if_seq_no", String.valueOf(seqNo));, +            expectedParams.put("if_primary_term", String.valueOf(ifPrimaryTerm));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                .setIfSeqNo(10L), +                .setIfPrimaryTerm(20);, +                    .setIfSeqNo(101L), +                    .setIfPrimaryTerm(200L);, +            // tag::update-request-cas, +            request.setIfSeqNo(2L); // <1>, +            request.setIfPrimaryTerm(1L); // <2>, +            // end::update-request-request-cas, +                    new DeleteRequest("posts", "1").setIfSeqNo(100).setIfPrimaryTerm(2),, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/PutWatchRequest.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            if (opType != DocWriteRequest.OpType.UPDATE && randomBoolean()) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/WatcherRequestConvertersTests.java, +import org.elasticsearch.client.watcher.PutWatchRequest;, +            long seqNo = randomNonNegativeLong();, +            long ifPrimaryTerm = randomLongBetween(1, 200);, +            putWatchRequest.setIfSeqNo(seqNo);, +            putWatchRequest.setIfPrimaryTerm(ifPrimaryTerm);, +            expectedParams.put("if_seq_no", String.valueOf(seqNo));, +            expectedParams.put("if_primary_term", String.valueOf(ifPrimaryTerm));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                .setIfSeqNo(10L), +                .setIfPrimaryTerm(20);, +                    .setIfSeqNo(101L), +                    .setIfPrimaryTerm(200L);, +            // tag::update-request-cas, +            request.setIfSeqNo(2L); // <1>, +            request.setIfPrimaryTerm(1L); // <2>, +            // end::update-request-request-cas, +                    new DeleteRequest("posts", "1").setIfSeqNo(100).setIfPrimaryTerm(2),, +++ b/docs/java-rest/high-level/document/update.asciidoc, +include-tagged::{doc-tests-file}[{api}-request-cas], +<1> ifSeqNo, +<2> ifPrimaryTerm, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/WatcherRequestConverters.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/watcher/PutWatchRequest.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestConvertersTests.java, +            if (opType != DocWriteRequest.OpType.UPDATE && randomBoolean()) {, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/WatcherRequestConvertersTests.java, +import org.elasticsearch.client.watcher.PutWatchRequest;, +            long seqNo = randomNonNegativeLong();, +            long ifPrimaryTerm = randomLongBetween(1, 200);, +            putWatchRequest.setIfSeqNo(seqNo);, +            putWatchRequest.setIfPrimaryTerm(ifPrimaryTerm);, +            expectedParams.put("if_seq_no", String.valueOf(seqNo));, +            expectedParams.put("if_primary_term", String.valueOf(ifPrimaryTerm));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +                .setIfSeqNo(10L), +                .setIfPrimaryTerm(20);, +                    .setIfSeqNo(101L), +                    .setIfPrimaryTerm(200L);, +            // tag::update-request-cas, +            request.setIfSeqNo(2L); // <1>, +            request.setIfPrimaryTerm(1L); // <2>, +            // end::update-request-request-cas, +                    new DeleteRequest("posts", "1").setIfSeqNo(100).setIfPrimaryTerm(2),, +++ b/docs/java-rest/high-level/document/update.asciidoc, +include-tagged::{doc-tests-file}[{api}-request-cas], +<1> ifSeqNo, +<2> ifPrimaryTerm, +++ b/docs/reference/migration/migrate_7_0/api.asciidoc, +==== Internal Versioning is no longer supported for optimistic concurrency control, +, +Elasticsearch maintains a numeric version field for each document it stores. That field, +is incremented by one with every change to the document. Until 7.0.0 the API allowed using, +that field for optimistic concurrency control, i.e., making a write operation conditional, +on the current document version. Sadly, that approach is flawed because the value of the]