[+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/AbstractObjectParser.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.xcontent;, +, +import org.elasticsearch.common.CheckedFunction;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ObjectParser.NamedObjectParser;, +import org.elasticsearch.common.xcontent.ObjectParser.ValueType;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.function.BiConsumer;, +import java.util.function.BiFunction;, +import java.util.function.Consumer;, +, +/**, + * Superclass for {@link ObjectParser} and {@link ConstructingObjectParser}. Defines most of the "declare" methods so they can be shared., + */, +public abstract class AbstractObjectParser<Value, Context>, +        implements BiFunction<XContentParser, Context, Value>, ContextParser<Context, Value> {, +, +    /**, +     * Declare some field. Usually it is easier to use {@link #declareString(BiConsumer, ParseField)} or, +     * {@link #declareObject(BiConsumer, ContextParser, ParseField)} rather than call this directly., +     */, +    public abstract <T> void declareField(BiConsumer<Value, T> consumer, ContextParser<Context, T> parser, ParseField parseField,, +            ValueType type);, +, +    /**, +     * Declares named objects in the style of aggregations. These are named, +     * inside and object like this:, +     *, +     * <pre>, +     * <code>, +     * {, +     *   "aggregations": {, +     *     "name_1": { "aggregation_type": {} },, +     *     "name_2": { "aggregation_type": {} },, +     *     "name_3": { "aggregation_type": {} }, +     *     }, +     *   }, +     * }, +     * </code>, +     * </pre>, +     *, +     * Unlike the other version of this method, "ordered" mode (arrays of, +     * objects) is not supported., +     *, +     * See NamedObjectHolder in ObjectParserTests for examples of how to invoke, +     * this., +     *, +     * @param consumer, +     *            sets the values once they have been parsed, +     * @param namedObjectParser, +     *            parses each named object, +     * @param parseField, +     *            the field to parse, +     */, +    public abstract <T> void declareNamedObjects(BiConsumer<Value, List<T>> consumer, NamedObjectParser<T, Context> namedObjectParser,, +            ParseField parseField);, +, +    /**, +     * Declares named objects in the style of highlighting's field element., +     * These are usually named inside and object like this:, +     *, +     * <pre>, +     * <code>, +     * {, +     *   "highlight": {, +     *     "fields": {        &lt;------ this one, +     *       "title": {},, +     *       "body": {},, +     *       "category": {}, +     *     }, +     *   }, +     * }, +     * </code>, +     * </pre>, +     *, +     * but, when order is important, some may be written this way:, +     *]