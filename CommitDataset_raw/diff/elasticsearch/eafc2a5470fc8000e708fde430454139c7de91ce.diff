[+++ b/docs/reference/mapping.asciidoc, +    The maximum number of fields in an index. Field and object mappings, as well as, +    field aliases count towards this limit. The default value is `1000`., +++ b/docs/reference/mapping.asciidoc, +    The maximum number of fields in an index. Field and object mappings, as well as, +    field aliases count towards this limit. The default value is `1000`., +++ b/server/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +, +            MetadataFieldMapper[] metadataMappers = newMapper.mapping().metadataMappers;, +            Collections.addAll(fieldMappers, metadataMappers);, +                // Also, don't take metadata mappers into account for the field limit check, +                checkTotalFieldsLimit(objectMappers.size() + fieldMappers.size() - metadataMappers.length + fieldAliasMappers.size() );, +++ b/docs/reference/mapping.asciidoc, +    The maximum number of fields in an index. Field and object mappings, as well as, +    field aliases count towards this limit. The default value is `1000`., +++ b/server/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +, +            MetadataFieldMapper[] metadataMappers = newMapper.mapping().metadataMappers;, +            Collections.addAll(fieldMappers, metadataMappers);, +                // Also, don't take metadata mappers into account for the field limit check, +                checkTotalFieldsLimit(objectMappers.size() + fieldMappers.size() - metadataMappers.length + fieldAliasMappers.size() );, +++ b/server/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +    /**, +     * Test that we can have at least the number of fields in new mappings that are defined by "index.mapping.total_fields.limit"., +     * Any additional field should trigger an IllegalArgumentException., +     */, +    public void testTotalFieldsLimit() throws Throwable {, +        int totalFieldsLimit = randomIntBetween(1, 10);, +        Settings settings = Settings.builder().put(MapperService.INDEX_MAPPING_TOTAL_FIELDS_LIMIT_SETTING.getKey(), totalFieldsLimit).build();, +        createIndex("test1", settings).mapperService().merge("type", createMappingSpecifyingNumberOfFields(totalFieldsLimit),, +                MergeReason.MAPPING_UPDATE);, +, +        // adding one more field should trigger exception, +            createIndex("test2", settings).mapperService().merge("type", createMappingSpecifyingNumberOfFields(totalFieldsLimit + 1),, +                    MergeReason.MAPPING_UPDATE);, +        assertTrue(e.getMessage(),, +                e.getMessage().contains("Limit of total fields [" + totalFieldsLimit + "] in index [test2] has been exceeded"));, +    }, +, +    private CompressedXContent createMappingSpecifyingNumberOfFields(int numberOfFields) throws IOException {, +        XContentBuilder mappingBuilder = XContentFactory.jsonBuilder().startObject(), +                .startObject("properties");, +        for (int i = 0; i < numberOfFields; i++) {, +            mappingBuilder.startObject("field" + i);, +            mappingBuilder.field("type", randomFrom("long", "integer", "date", "keyword", "text"));, +            mappingBuilder.endObject();, +        }, +        mappingBuilder.endObject().endObject();, +        return new CompressedXContent(BytesReference.bytes(mappingBuilder));, +        indexService1.mapperService().merge("type", createMappingSpecifyingNumberOfFields(1), MergeReason.MAPPING_UPDATE);, +        int numberOfFieldsIncludingAlias = 2;, +        createIndex("test1", Settings.builder(), +                .put(MapperService.INDEX_MAPPING_TOTAL_FIELDS_LIMIT_SETTING.getKey(), numberOfFieldsIncludingAlias).build()).mapperService(), +        int numberOfNonAliasFields = 1;, +            createIndex("test2",, +                    Settings.builder().put(MapperService.INDEX_MAPPING_TOTAL_FIELDS_LIMIT_SETTING.getKey(), numberOfNonAliasFields).build()), +                            .mapperService().merge("type", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);, +        assertEquals("Limit of total fields [" + numberOfNonAliasFields + "] in index [test2] has been exceeded", e.getMessage());]