[+++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BooleanFieldMapper.java, +import static org.elasticsearch.index.mapper.core.TypeParsers.parseMultiField;, +                } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {, +                    iterator.remove();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BooleanFieldMapper.java, +import static org.elasticsearch.index.mapper.core.TypeParsers.parseMultiField;, +                } else if (parseMultiField(builder, name, parserContext, propName, propNode)) {, +                    iterator.remove();, +++ b/core/src/test/java/org/elasticsearch/index/mapper/core/BooleanFieldMapperTests.java, +import org.elasticsearch.common.bytes.BytesReference;, +, +    public void testMultiFields() throws IOException {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties"), +                    .startObject("field"), +                        .field("type", "boolean"), +                        .startObject("fields"), +                            .startObject("as_string"), +                                .field("type", "string"), +                                .field("index", "not_analyzed"), +                            .endObject(), +                        .endObject(), +                    .endObject().endObject(), +                .endObject().endObject().string();, +        DocumentMapper mapper = indexService.mapperService().merge("type", new CompressedXContent(mapping), true, false);, +        assertEquals(mapping, mapper.mappingSource().toString());, +        BytesReference source = XContentFactory.jsonBuilder(), +                .startObject(), +                    .field("field", false), +                .endObject().bytes();, +        ParsedDocument doc = mapper.parse("test", "type", "1", source);, +        assertNotNull(doc.rootDoc().getField("field.as_string"));, +    }]