[+++ b/.idea/modules/plugin-transport-memcached.iml, +          <root url="jar://$GRADLE_REPOSITORY$/spy/memcached/jars/memcached-2.5.jar!/" />, +++ b/.idea/modules/plugin-transport-memcached.iml, +          <root url="jar://$GRADLE_REPOSITORY$/spy/memcached/jars/memcached-2.5.jar!/" />, +++ b/plugins/transport/memcached/build.gradle, +    testCompile 'spy:memcached:2.5', +++ b/.idea/modules/plugin-transport-memcached.iml, +          <root url="jar://$GRADLE_REPOSITORY$/spy/memcached/jars/memcached-2.5.jar!/" />, +++ b/plugins/transport/memcached/build.gradle, +    testCompile 'spy:memcached:2.5', +++ b/plugins/transport/memcached/src/main/java/org/elasticsearch/memcached/MemcachedRestRequest.java, +    private boolean quiet;, +, +    public boolean isQuiet() {, +        return quiet;, +    }, +, +    public void setQuiet(boolean quiet) {, +        this.quiet = quiet;, +    }, +, +++ b/.idea/modules/plugin-transport-memcached.iml, +          <root url="jar://$GRADLE_REPOSITORY$/spy/memcached/jars/memcached-2.5.jar!/" />, +++ b/plugins/transport/memcached/build.gradle, +    testCompile 'spy:memcached:2.5', +++ b/plugins/transport/memcached/src/main/java/org/elasticsearch/memcached/MemcachedRestRequest.java, +    private boolean quiet;, +, +    public boolean isQuiet() {, +        return quiet;, +    }, +, +    public void setQuiet(boolean quiet) {, +        this.quiet = quiet;, +    }, +, +++ b/plugins/transport/memcached/src/main/java/org/elasticsearch/memcached/netty/MemcachedDecoder.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.netty.buffer.ChannelBuffers;, +    private final ESLogger logger;, +, +    public MemcachedDecoder(ESLogger logger) {, +        this.logger = logger;, +                if (opcode == 0x00) { // GET, +                    byte[] key = new byte[keyLength];, +                    buffer.readBytes(key);, +                    String uri = Unicode.fromBytes(key);, +                } else if (opcode == 0x01/* || opcode == 0x11*/) { // SET, +                    byte[] key = new byte[keyLength];, +                    buffer.readBytes(key);, +                    String uri = Unicode.fromBytes(key);, +                    request.setQuiet(opcode == 0x11);, +                } else if (opcode == 0x0A || opcode == 0x10) { // NOOP or STATS, +                    // TODO once we support setQ we need to wait for them to flush, +                    ChannelBuffer writeBuffer = ChannelBuffers.dynamicBuffer(24);, +                    writeBuffer.writeByte(0x81);  // magic, +                    writeBuffer.writeByte(opcode); // opcode, +                    writeBuffer.writeShort(0); // key length, +                    writeBuffer.writeByte(0); // extra length = flags + expiry, +                    writeBuffer.writeByte(0); // data type unused, +                    writeBuffer.writeShort(0x0000); // OK, +                    writeBuffer.writeInt(0); // data length, +                    writeBuffer.writeInt(opaque); // opaque, +                    writeBuffer.writeLong(0); // cas, +                    channel.write(writeBuffer);, +                    return MemcachedDispatcher.IGNORE_REQUEST;, +                } else {, +                    logger.error("Unsupported opcode [0x{}], ignoring and closing connection", Integer.toHexString(opcode));, +                    channel.disconnect();, +                    return null;, +                } else {, +                    logger.error("Unsupported command [{}], ignoring and closing connection", cmd);, +                    channel.disconnect();, +                    return null;, +++ b/.idea/modules/plugin-transport-memcached.iml, +          <root url="jar://$GRADLE_REPOSITORY$/spy/memcached/jars/memcached-2.5.jar!/" />, +++ b/plugins/transport/memcached/build.gradle, +    testCompile 'spy:memcached:2.5', +++ b/plugins/transport/memcached/src/main/java/org/elasticsearch/memcached/MemcachedRestRequest.java, +    private boolean quiet;, +, +    public boolean isQuiet() {, +        return quiet;, +    }, +, +    public void setQuiet(boolean quiet) {, +        this.quiet = quiet;, +    }, +, +++ b/plugins/transport/memcached/src/main/java/org/elasticsearch/memcached/netty/MemcachedDecoder.java, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.netty.buffer.ChannelBuffers;, +    private final ESLogger logger;, +, +    public MemcachedDecoder(ESLogger logger) {, +        this.logger = logger;, +                if (opcode == 0x00) { // GET, +                    byte[] key = new byte[keyLength];, +                    buffer.readBytes(key);, +                    String uri = Unicode.fromBytes(key);]