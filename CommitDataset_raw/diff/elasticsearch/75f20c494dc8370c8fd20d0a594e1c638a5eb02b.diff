[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/serialdiff/SerialDiffParser.java, +        GapPolicy gapPolicy = null;, +        Integer lag = null;, +        SerialDiffPipelineAggregator.Factory factory = new SerialDiffPipelineAggregator.Factory(reducerName, bucketsPaths);, +        if (lag != null) {, +            factory.lag(lag);, +        }, +            factory.format(format);, +        }, +        if (gapPolicy != null) {, +            factory.gapPolicy(gapPolicy);, +        }, +        return factory;, +        return new SerialDiffPipelineAggregator.Factory(null, null);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/serialdiff/SerialDiffParser.java, +        GapPolicy gapPolicy = null;, +        Integer lag = null;, +        SerialDiffPipelineAggregator.Factory factory = new SerialDiffPipelineAggregator.Factory(reducerName, bucketsPaths);, +        if (lag != null) {, +            factory.lag(lag);, +        }, +            factory.format(format);, +        }, +        if (gapPolicy != null) {, +            factory.gapPolicy(gapPolicy);, +        }, +        return factory;, +        return new SerialDiffPipelineAggregator.Factory(null, null);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/serialdiff/SerialDiffPipelineAggregator.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.search.aggregations.pipeline.BucketHelpers.GapPolicy;, +import org.elasticsearch.search.aggregations.support.format.ValueFormat;, +import java.util.Objects;, +        private String format;, +        private GapPolicy gapPolicy = GapPolicy.SKIP;, +        private int lag = 1;, +        public Factory(String name, String[] bucketsPaths) {, +        }, +, +        /**, +         * Sets the lag to use when calculating the serial difference., +         */, +        public void lag(int lag) {, +        /**, +         * Gets the lag to use when calculating the serial difference., +         */, +        public int lag() {, +            return lag;, +        }, +, +        /**, +         * Sets the format to use on the output of this aggregation., +         */, +        public void format(String format) {, +            this.format = format;, +        }, +, +        /**, +         * Gets the format to use on the output of this aggregation., +         */, +        public String format() {, +            return format;, +        }, +, +        /**, +         * Sets the GapPolicy to use on the output of this aggregation., +         */, +        public void gapPolicy(GapPolicy gapPolicy) {, +            this.gapPolicy = gapPolicy;, +        }, +, +        /**, +         * Gets the GapPolicy to use on the output of this aggregation., +         */, +        public GapPolicy gapPolicy() {, +            return gapPolicy;, +        }, +, +        protected ValueFormatter formatter() {, +            if (format != null) {, +                return ValueFormat.Patternable.Number.format(format).formatter();, +            } else {, +                return ValueFormatter.RAW;, +            }, +        }, +, +            return new SerialDiffPipelineAggregator(name, bucketsPaths, formatter(), gapPolicy, lag, metaData);, +        }, +, +        @Override, +        protected XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {, +            if (format != null) {, +                builder.field(SerialDiffParser.FORMAT.getPreferredName(), format);, +            }, +            builder.field(SerialDiffParser.GAP_POLICY.getPreferredName(), gapPolicy.getName());, +            builder.field(SerialDiffParser.LAG.getPreferredName(), lag);, +            return builder;, +        }, +, +        @Override]