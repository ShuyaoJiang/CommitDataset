[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +        Index index = new Index(indexMetaData.getIndex());, +        Settings settings = indexMetaData.getSettings();, +            SimilarityService similarityService = new SimilarityService(index, settings);, +            try (AnalysisService analysisService = new FakeAnalysisService(index, settings)) {, +                try (MapperService mapperService = new MapperService(index, settings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(Index index, Settings indexSettings) {, +            super(index, indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +        Index index = new Index(indexMetaData.getIndex());, +        Settings settings = indexMetaData.getSettings();, +            SimilarityService similarityService = new SimilarityService(index, settings);, +            try (AnalysisService analysisService = new FakeAnalysisService(index, settings)) {, +                try (MapperService mapperService = new MapperService(index, settings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(Index index, Settings indexSettings) {, +            super(index, indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +                    Decision decision = allocation.deciders().canAllocate(shard, target, allocation);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +        Index index = new Index(indexMetaData.getIndex());, +        Settings settings = indexMetaData.getSettings();, +            SimilarityService similarityService = new SimilarityService(index, settings);, +            try (AnalysisService analysisService = new FakeAnalysisService(index, settings)) {, +                try (MapperService mapperService = new MapperService(index, settings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(Index index, Settings indexSettings) {, +            super(index, indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +                    Decision decision = allocation.deciders().canAllocate(shard, target, allocation);, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.index.settings.IndexSettings;, +    public void deleteShardDirectorySafe(ShardId shardId, @IndexSettings Settings indexSettings) throws IOException {, +    public static void acquireFSLockForPaths(@IndexSettings Settings indexSettings, Path... shardPaths) throws IOException {, +    public void deleteShardDirectoryUnderLock(ShardLock lock, @IndexSettings Settings indexSettings) throws IOException {, +    public void deleteIndexDirectorySafe(Index index, long lockTimeoutMS, @IndexSettings Settings indexSettings) throws IOException {, +    public void deleteIndexDirectoryUnderLock(Index index, @IndexSettings Settings indexSettings) throws IOException {, +    public List<ShardLock> lockAllForIndex(Index index, @IndexSettings Settings settings, long lockTimeoutMS) throws IOException {, +    public static boolean hasCustomDataPath(@IndexSettings Settings indexSettings) {, +    private Path resolveCustomLocation(@IndexSettings Settings indexSettings) {, +    private Path resolveCustomLocation(@IndexSettings Settings indexSettings, final String indexName) {, +    public Path resolveCustomLocation(@IndexSettings Settings indexSettings, final ShardId shardId) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +        Index index = new Index(indexMetaData.getIndex());, +        Settings settings = indexMetaData.getSettings();, +            SimilarityService similarityService = new SimilarityService(index, settings);, +            try (AnalysisService analysisService = new FakeAnalysisService(index, settings)) {, +                try (MapperService mapperService = new MapperService(index, settings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(Index index, Settings indexSettings) {, +            super(index, indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +                    Decision decision = allocation.deciders().canAllocate(shard, target, allocation);, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.index.settings.IndexSettings;, +    public void deleteShardDirectorySafe(ShardId shardId, @IndexSettings Settings indexSettings) throws IOException {, +    public static void acquireFSLockForPaths(@IndexSettings Settings indexSettings, Path... shardPaths) throws IOException {, +    public void deleteShardDirectoryUnderLock(ShardLock lock, @IndexSettings Settings indexSettings) throws IOException {, +    public void deleteIndexDirectorySafe(Index index, long lockTimeoutMS, @IndexSettings Settings indexSettings) throws IOException {, +    public void deleteIndexDirectoryUnderLock(Index index, @IndexSettings Settings indexSettings) throws IOException {, +    public List<ShardLock> lockAllForIndex(Index index, @IndexSettings Settings settings, long lockTimeoutMS) throws IOException {, +    public static boolean hasCustomDataPath(@IndexSettings Settings indexSettings) {, +    private Path resolveCustomLocation(@IndexSettings Settings indexSettings) {, +    private Path resolveCustomLocation(@IndexSettings Settings indexSettings, final String indexName) {, +    public Path resolveCustomLocation(@IndexSettings Settings indexSettings, final ShardId shardId) {, +++ b/core/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java, +import org.elasticsearch.index.settings.IndexSettings;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +            NodesAndVersions nodesAndVersions = buildNodesAndVersions(shard, recoverOnAnyNode(indexMetaData.getSettings()), allocation.getIgnoreNodes(shard.shardId()), shardState);, +    private boolean recoverOnAnyNode(@IndexSettings Settings idxSettings) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +        Index index = new Index(indexMetaData.getIndex());, +        Settings settings = indexMetaData.getSettings();, +            SimilarityService similarityService = new SimilarityService(index, settings);, +            try (AnalysisService analysisService = new FakeAnalysisService(index, settings)) {, +                try (MapperService mapperService = new MapperService(index, settings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(Index index, Settings indexSettings) {, +            super(index, indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +                    Decision decision = allocation.deciders().canAllocate(shard, target, allocation);, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.elasticsearch.index.settings.IndexSettings;, +    public void deleteShardDirectorySafe(ShardId shardId, @IndexSettings Settings indexSettings) throws IOException {, +    public static void acquireFSLockForPaths(@IndexSettings Settings indexSettings, Path... shardPaths) throws IOException {, +    public void deleteShardDirectoryUnderLock(ShardLock lock, @IndexSettings Settings indexSettings) throws IOException {, +    public void deleteIndexDirectorySafe(Index index, long lockTimeoutMS, @IndexSettings Settings indexSettings) throws IOException {, +    public void deleteIndexDirectoryUnderLock(Index index, @IndexSettings Settings indexSettings) throws IOException {, +    public List<ShardLock> lockAllForIndex(Index index, @IndexSettings Settings settings, long lockTimeoutMS) throws IOException {, +    public static boolean hasCustomDataPath(@IndexSettings Settings indexSettings) {, +    private Path resolveCustomLocation(@IndexSettings Settings indexSettings) {, +    private Path resolveCustomLocation(@IndexSettings Settings indexSettings, final String indexName) {, +    public Path resolveCustomLocation(@IndexSettings Settings indexSettings, final ShardId shardId) {, +++ b/core/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java, +import org.elasticsearch.index.settings.IndexSettings;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Comparator;]