[+++ b/core/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java, +            this.threadedListener = DiscoveryNode.clientNode(settings) || TransportClient.CLIENT_TYPE.equals(Client.CLIENT_TYPE_SETTING_S.get(settings));, +++ b/core/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java, +            this.threadedListener = DiscoveryNode.clientNode(settings) || TransportClient.CLIENT_TYPE.equals(Client.CLIENT_TYPE_SETTING_S.get(settings));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +                .put(InternalSettingsPreparer.IGNORE_SYSTEM_PROPERTIES_SETTING.getKey(), true), +++ b/core/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java, +            this.threadedListener = DiscoveryNode.clientNode(settings) || TransportClient.CLIENT_TYPE.equals(Client.CLIENT_TYPE_SETTING_S.get(settings));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +                .put(InternalSettingsPreparer.IGNORE_SYSTEM_PROPERTIES_SETTING.getKey(), true), +++ b/core/src/main/java/org/elasticsearch/client/Client.java, +import org.elasticsearch.common.settings.Setting;, +    Setting<String> CLIENT_TYPE_SETTING_S = new Setting<>("client.type", "node", (s) -> {, +        switch (s) {, +            case "node":, +            case "transport":, +                return s;, +            default:, +                throw new IllegalArgumentException("Can't parse [client.type] must be one of [node, transport]");, +        }, +    }, false, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java, +            this.threadedListener = DiscoveryNode.clientNode(settings) || TransportClient.CLIENT_TYPE.equals(Client.CLIENT_TYPE_SETTING_S.get(settings));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +                .put(InternalSettingsPreparer.IGNORE_SYSTEM_PROPERTIES_SETTING.getKey(), true), +++ b/core/src/main/java/org/elasticsearch/client/Client.java, +import org.elasticsearch.common.settings.Setting;, +    Setting<String> CLIENT_TYPE_SETTING_S = new Setting<>("client.type", "node", (s) -> {, +        switch (s) {, +            case "node":, +            case "transport":, +                return s;, +            default:, +                throw new IllegalArgumentException("Can't parse [client.type] must be one of [node, transport]");, +        }, +    }, false, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                .put(CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE);, +++ b/core/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java, +            this.threadedListener = DiscoveryNode.clientNode(settings) || TransportClient.CLIENT_TYPE.equals(Client.CLIENT_TYPE_SETTING_S.get(settings));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +                .put(InternalSettingsPreparer.IGNORE_SYSTEM_PROPERTIES_SETTING.getKey(), true), +++ b/core/src/main/java/org/elasticsearch/client/Client.java, +import org.elasticsearch.common.settings.Setting;, +    Setting<String> CLIENT_TYPE_SETTING_S = new Setting<>("client.type", "node", (s) -> {, +        switch (s) {, +            case "node":, +            case "transport":, +                return s;, +            default:, +                throw new IllegalArgumentException("Can't parse [client.type] must be one of [node, transport]");, +        }, +    }, false, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                .put(CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterName.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<String> CLUSTER_NAME_SETTING = new Setting<>("cluster.name", "elasticsearch", (s) -> {, +        if (s.isEmpty()) {, +            throw new IllegalArgumentException("[cluster.name] must not be empty");, +        }, +        return s;, +    }, false, Setting.Scope.CLUSTER);, +, +    public static final ClusterName DEFAULT = new ClusterName(CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY).intern());, +        return new ClusterName(CLUSTER_NAME_SETTING.get(settings));, +++ b/core/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java, +            this.threadedListener = DiscoveryNode.clientNode(settings) || TransportClient.CLIENT_TYPE.equals(Client.CLIENT_TYPE_SETTING_S.get(settings));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +                .put(InternalSettingsPreparer.IGNORE_SYSTEM_PROPERTIES_SETTING.getKey(), true), +++ b/core/src/main/java/org/elasticsearch/client/Client.java, +import org.elasticsearch.common.settings.Setting;, +    Setting<String> CLIENT_TYPE_SETTING_S = new Setting<>("client.type", "node", (s) -> {, +        switch (s) {, +            case "node":, +            case "transport":, +                return s;, +            default:, +                throw new IllegalArgumentException("Can't parse [client.type] must be one of [node, transport]");, +        }, +    }, false, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                .put(CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterName.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<String> CLUSTER_NAME_SETTING = new Setting<>("cluster.name", "elasticsearch", (s) -> {, +        if (s.isEmpty()) {, +            throw new IllegalArgumentException("[cluster.name] must not be empty");, +        }, +        return s;, +    }, false, Setting.Scope.CLUSTER);, +, +    public static final ClusterName DEFAULT = new ClusterName(CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY).intern());, +        return new ClusterName(CLUSTER_NAME_SETTING.get(settings));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.node.internal.InternalSettingsPreparer;, +import org.elasticsearch.rest.BaseRestHandler;, +        BaseRestHandler.MULTI_ALLOW_EXPLICIT_INDEX,]