[+++ b/server/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +    public Float tieBreaker() {, +     * The optional analyzer used to analyze the query string. Note, if a field has search analyzer, +     * defined for it, then it will be used automatically. Defaults to the smart search analyzer., +     */, +    public String analyzer() {, +        return analyzer;, +    }, +, +    /**, +     * The optional analyzer used to analyze the query string for phrase searches. Note, if a field has search (quote) analyzer, +     * defined for it, then it will be used automatically. Defaults to the smart search analyzer., +     */, +    public String quoteAnalyzer() {, +        return quoteAnalyzer;, +    }, +, +    /**, +                Objects.equals(, +                        timeZone == null ? null : timeZone.getID(), , +                        other.timeZone == null ? null : other.timeZone.getID()) &&, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +    public Float tieBreaker() {, +     * The optional analyzer used to analyze the query string. Note, if a field has search analyzer, +     * defined for it, then it will be used automatically. Defaults to the smart search analyzer., +     */, +    public String analyzer() {, +        return analyzer;, +    }, +, +    /**, +     * The optional analyzer used to analyze the query string for phrase searches. Note, if a field has search (quote) analyzer, +     * defined for it, then it will be used automatically. Defaults to the smart search analyzer., +     */, +    public String quoteAnalyzer() {, +        return quoteAnalyzer;, +    }, +, +    /**, +                Objects.equals(, +                        timeZone == null ? null : timeZone.getID(), , +                        other.timeZone == null ? null : other.timeZone.getID()) &&, +++ b/server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java, +import java.util.HashMap;, +import java.util.Map;, +    public QueryStringQueryBuilder mutateInstance(QueryStringQueryBuilder instance) throws IOException {, +        String query = instance.queryString();, +        String defaultField = instance.defaultField();, +        Map<String, Float> fields = instance.fields();, +        Operator operator = instance.defaultOperator();, +        Fuzziness fuzziness = instance.fuzziness();, +        String analyzer = instance.analyzer();, +        String quoteAnalyzer = instance.quoteAnalyzer();, +        Boolean allowLeadingWildCard = instance.allowLeadingWildcard();, +        Boolean analyzeWildcard = instance.analyzeWildcard();, +        int maxDeterminizedStates = instance.maxDeterminizedStates();, +        boolean enablePositionIncrements = instance.enablePositionIncrements();, +        boolean escape = instance.escape();, +        int phraseSlop = instance.phraseSlop();, +        int fuzzyMaxExpansions = instance.fuzzyMaxExpansions();, +        int fuzzyPrefixLength = instance.fuzzyPrefixLength();, +        String fuzzyRewrite = instance.fuzzyRewrite();, +        String rewrite = instance.rewrite();, +        String quoteFieldSuffix = instance.quoteFieldSuffix();, +        Float tieBreaker = instance.tieBreaker();, +        String minimumShouldMatch = instance.minimumShouldMatch();, +        String timeZone = instance.timeZone() == null ? null : instance.timeZone().getID();, +        boolean autoGenerateSynonymsPhraseQuery = instance.autoGenerateSynonymsPhraseQuery();, +        boolean fuzzyTranspositions = instance.fuzzyTranspositions();, +, +        switch (between(0, 23)) {, +        case 0:, +            query = query + " foo";, +            break;, +        case 1:, +            if (defaultField == null) {, +                defaultField = randomAlphaOfLengthBetween(1, 10);, +            } else {, +                defaultField = defaultField + randomAlphaOfLength(5);, +            }, +            break;, +        case 2:, +            fields = new HashMap<>(fields);, +            fields.put(randomAlphaOfLength(10), 1.0f);, +            break;, +        case 3:, +            operator = randomValueOtherThan(operator, () -> randomFrom(Operator.values()));, +            break;, +        case 4:, +            fuzziness = randomValueOtherThan(fuzziness, () -> randomFrom(Fuzziness.AUTO, Fuzziness.ZERO, Fuzziness.ONE, Fuzziness.TWO));, +            break;, +        case 5:, +            if (analyzer == null) {, +                analyzer = randomAnalyzer();, +            } else {, +                analyzer = null;, +            }, +            break;, +        case 6:, +            if (quoteAnalyzer == null) {]