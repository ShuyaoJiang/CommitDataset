[+++ b/src/main/java/org/elasticsearch/search/facet/termsstats/TermsStatsFacet.java, +        /**, +         * Order by the (higher) total of each term., +         */, +                int i = -Double.compare(o1.total(), o2.total());, +                if (i == 0) {, +                    i = COUNT.comparator().compare(o1, o2);, +                return i;, +        /**, +         * Order by the (lower) total of each term., +         */, +        /**, +         * Order by the (lower) min of each term., +         */, +                int i = Double.compare(o1.min(), o2.min());, +                if (i == 0) {, +                    i = COUNT.comparator().compare(o1, o2);, +                return i;, +        /**, +         * Order by the (higher) min of each term., +         */, +        /**, +         * Order by the (higher) max of each term., +         */, +                int i =  -Double.compare(o1.max(), o2.max());, +                if (i == 0) {, +                    i = COUNT.comparator().compare(o1, o2);, +                return i;, +        /**, +         * Order by the (lower) max of each term., +         */, +        }),, +        /**, +         * Order by the (higher) mean of each term., +         */, +        MEAN((byte) 10, new Comparator<Entry>() {, +            @Override, +            public int compare(Entry o1, Entry o2) {, +                // push nulls to the end, +                if (o1 == null) {, +                    if (o2 == null) {, +                        return 0;, +                    }, +                    return 1;, +                }, +                if (o2 == null) {, +                    return -1;, +                }, +                int i =  -Double.compare(o1.mean(), o2.mean());, +                if (i == 0) {, +                    i = COUNT.comparator().compare(o1, o2);, +                }, +                return i;, +            }, +        }),, +        /**, +         * Order by the (lower) mean of each term., +         */, +        REVERSE_MEAN((byte) 11, new Comparator<Entry>() {, +            @Override, +            public int compare(Entry o1, Entry o2) {, +                // push nulls to the end, +                if (o1 == null) {, +                    if (o2 == null) {, +                        return 0;, +                    }, +                    return 1;, +                }, +                if (o2 == null) {, +                    return -1;, +                }, +                return -MEAN.comparator().compare(o1, o2);, +            }, +            } else if (id == MEAN.id()) {, +                return MEAN;, +            } else if (id == REVERSE_MEAN.id()) {, +                return  REVERSE_MEAN;, +            } else if ("mean".equals(type)) {, +                return MEAN;, +            } else if ("reverse_mean".equals(type) || "reverseMean".equals(type)) {, +                return REVERSE_MEAN;]