[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateObserver.java, +                    logger.trace("observer: postAdded - predicate approved state but observing context has changed - ignoring ({})",, +                        newState);, +                logger.trace("observer: timeout notification from cluster service. timeout setting [{}], time since start [{}]",, +                    timeOutValue, new TimeValue(timeSinceStartMS));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateObserver.java, +                    logger.trace("observer: postAdded - predicate approved state but observing context has changed - ignoring ({})",, +                        newState);, +                logger.trace("observer: timeout notification from cluster service. timeout setting [{}], time since start [{}]",, +                    timeOutValue, new TimeValue(timeSinceStartMS));, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateObserver.java, +                    logger.trace("observer: postAdded - predicate approved state but observing context has changed - ignoring ({})",, +                        newState);, +                logger.trace("observer: timeout notification from cluster service. timeout setting [{}], time since start [{}]",, +                    timeOutValue, new TimeValue(timeSinceStartMS));, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +    public ShardIterator getShards(ClusterState clusterState, String index, String id, @Nullable String routing,, +                                   @Nullable String preference) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateObserver.java, +                    logger.trace("observer: postAdded - predicate approved state but observing context has changed - ignoring ({})",, +                        newState);, +                logger.trace("observer: timeout notification from cluster service. timeout setting [{}], time since start [{}]",, +                    timeOutValue, new TimeValue(timeSinceStartMS));, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +    public ShardIterator getShards(ClusterState clusterState, String index, String id, @Nullable String routing,, +                                   @Nullable String preference) {, +++ b/server/src/test/java/org/elasticsearch/cluster/SimpleClusterStateIT.java, +        int estimatedBytesSize = scaledRandomIntBetween(, +            ByteSizeValue.parseBytesSizeValue("10k", "estimatedBytesSize").bytesAsInt(),, +            client().admin().cluster().prepareState().clear().setMetaData(true), +                .setIndices("fzzbzz").setIndicesOptions(allowNoIndices).get();, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateObserver.java, +                    logger.trace("observer: postAdded - predicate approved state but observing context has changed - ignoring ({})",, +                        newState);, +                logger.trace("observer: timeout notification from cluster service. timeout setting [{}], time since start [{}]",, +                    timeOutValue, new TimeValue(timeSinceStartMS));, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +    public ShardIterator getShards(ClusterState clusterState, String index, String id, @Nullable String routing,, +                                   @Nullable String preference) {, +++ b/server/src/test/java/org/elasticsearch/cluster/SimpleClusterStateIT.java, +        int estimatedBytesSize = scaledRandomIntBetween(, +            ByteSizeValue.parseBytesSizeValue("10k", "estimatedBytesSize").bytesAsInt(),, +            client().admin().cluster().prepareState().clear().setMetaData(true), +                .setIndices("fzzbzz").setIndicesOptions(allowNoIndices).get();, +++ b/server/src/test/java/org/elasticsearch/cluster/ack/AckIT.java, +        AcknowledgedResponse indicesAliasesResponse = client().admin().indices().prepareAliases(), +            .addAlias("test", "alias").setTimeout("0s").get();, +        AcknowledgedResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("test"), +            .setSource("field", "type=keyword").setTimeout("0s").get();, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateObserver.java, +                    logger.trace("observer: postAdded - predicate approved state but observing context has changed - ignoring ({})",, +                        newState);, +                logger.trace("observer: timeout notification from cluster service. timeout setting [{}], time since start [{}]",, +                    timeOutValue, new TimeValue(timeSinceStartMS));, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +    public ShardIterator getShards(ClusterState clusterState, String index, String id, @Nullable String routing,, +                                   @Nullable String preference) {, +++ b/server/src/test/java/org/elasticsearch/cluster/SimpleClusterStateIT.java, +        int estimatedBytesSize = scaledRandomIntBetween(, +            ByteSizeValue.parseBytesSizeValue("10k", "estimatedBytesSize").bytesAsInt(),, +            client().admin().cluster().prepareState().clear().setMetaData(true), +                .setIndices("fzzbzz").setIndicesOptions(allowNoIndices).get();, +++ b/server/src/test/java/org/elasticsearch/cluster/ack/AckIT.java, +        AcknowledgedResponse indicesAliasesResponse = client().admin().indices().prepareAliases(), +            .addAlias("test", "alias").setTimeout("0s").get();, +        AcknowledgedResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("test"), +            .setSource("field", "type=keyword").setTimeout("0s").get();, +++ b/server/src/test/java/org/elasticsearch/cluster/metadata/DateMathExpressionResolverTests.java, +        assertThat(results.get(0),, +            equalTo(".marvel-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(new DateTime(context.getStartTime(), UTC))));, +        assertThat(result.get(0),, +            equalTo(".mar{v}el-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(new DateTime(context.getStartTime(), UTC))));, +        assertThat(result.get(0),, +            equalTo(".marvel-" + DateTimeFormat.forPattern("'{year}'YYYY").print(new DateTime(context.getStartTime(), UTC))));, +        assertThat(result.get(1),, +            equalTo(".marvel-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(new DateTime(context.getStartTime(), UTC))));, +        assertThat(result.get(3), equalTo(".logstash-" +, +            DateTimeFormat.forPattern("YYYY.MM").print(new DateTime(context.getStartTime(), UTC).withDayOfMonth(1))));, +            now = DateTime.now(UTC).plusHours(hoursOffset).plusMinutes(minutesOffset), +                .withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateObserver.java, +                    logger.trace("observer: postAdded - predicate approved state but observing context has changed - ignoring ({})",, +                        newState);, +                logger.trace("observer: timeout notification from cluster service. timeout setting [{}], time since start [{}]",, +                    timeOutValue, new TimeValue(timeSinceStartMS));, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateUpdateTask.java, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java]