[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/user/privileges/Role.java, +        public static final String MANAGE_ILM = "manage_ilm";, +        public static final String READ_ILM = "read_ilm";, +                MANAGE_SECURITY, MANAGE_SAML, MANAGE_TOKEN, MANAGE_PIPELINE, MANAGE_CCR, READ_CCR, MANAGE_ILM, READ_ILM };, +        public static final String MANAGE_ILM = "manage_ilm";, +                DELETE_INDEX, CREATE_INDEX, VIEW_INDEX_METADATA, MANAGE_FOLLOW_INDEX, MANAGE_ILM };, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/user/privileges/Role.java, +        public static final String MANAGE_ILM = "manage_ilm";, +        public static final String READ_ILM = "read_ilm";, +                MANAGE_SECURITY, MANAGE_SAML, MANAGE_TOKEN, MANAGE_PIPELINE, MANAGE_CCR, READ_CCR, MANAGE_ILM, READ_ILM };, +        public static final String MANAGE_ILM = "manage_ilm";, +                DELETE_INDEX, CREATE_INDEX, VIEW_INDEX_METADATA, MANAGE_FOLLOW_INDEX, MANAGE_ILM };, +++ b/distribution/src/config/jvm.options, +## DNS cache policy, +# cache ttl in seconds for positive DNS lookups noting that this overrides the, +# JDK security property networkaddress.cache.ttl; set to -1 to cache forever, +-Des.networkaddress.cache.ttl=60, +# cache ttl in seconds for negative DNS lookups noting that this overrides the, +# JDK security property networkaddress.cache.negative ttl; set to -1 to cache, +# forever, +-Des.networkaddress.cache.negative.ttl=10, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/user/privileges/Role.java, +        public static final String MANAGE_ILM = "manage_ilm";, +        public static final String READ_ILM = "read_ilm";, +                MANAGE_SECURITY, MANAGE_SAML, MANAGE_TOKEN, MANAGE_PIPELINE, MANAGE_CCR, READ_CCR, MANAGE_ILM, READ_ILM };, +        public static final String MANAGE_ILM = "manage_ilm";, +                DELETE_INDEX, CREATE_INDEX, VIEW_INDEX_METADATA, MANAGE_FOLLOW_INDEX, MANAGE_ILM };, +++ b/distribution/src/config/jvm.options, +## DNS cache policy, +# cache ttl in seconds for positive DNS lookups noting that this overrides the, +# JDK security property networkaddress.cache.ttl; set to -1 to cache forever, +-Des.networkaddress.cache.ttl=60, +# cache ttl in seconds for negative DNS lookups noting that this overrides the, +# JDK security property networkaddress.cache.negative ttl; set to -1 to cache, +# forever, +-Des.networkaddress.cache.negative.ttl=10, +, +++ b/docs/reference/setup/sysconfig/dns-cache.asciidoc, +place, the JVM defaults to caching positive hostname resolutions indefinitely, +and defaults to caching negative hostname resolutions for ten, +seconds. Elasticsearch overrides this behavior with default values to cache, +positive lookups for sixty seconds, and to cache negative lookups for ten, +seconds. These values should be suitable for most environments, including, +environments where DNS resolutions vary with time. If not, you can edit the, +values `es.networkaddress.cache.ttl` and `es.networkaddress.cache.negative.ttl`, +in the <<jvm-options,JVM options>>. Note that the values, +and, +in the, +security policy] are ignored by Elasticsearch unless you remove the settings for, +`es.networkaddress.cache.ttl` and `es.networkaddress.cache.negative.ttl`., +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/user/privileges/Role.java, +        public static final String MANAGE_ILM = "manage_ilm";, +        public static final String READ_ILM = "read_ilm";, +                MANAGE_SECURITY, MANAGE_SAML, MANAGE_TOKEN, MANAGE_PIPELINE, MANAGE_CCR, READ_CCR, MANAGE_ILM, READ_ILM };, +        public static final String MANAGE_ILM = "manage_ilm";, +                DELETE_INDEX, CREATE_INDEX, VIEW_INDEX_METADATA, MANAGE_FOLLOW_INDEX, MANAGE_ILM };, +++ b/distribution/src/config/jvm.options, +## DNS cache policy, +# cache ttl in seconds for positive DNS lookups noting that this overrides the, +# JDK security property networkaddress.cache.ttl; set to -1 to cache forever, +-Des.networkaddress.cache.ttl=60, +# cache ttl in seconds for negative DNS lookups noting that this overrides the, +# JDK security property networkaddress.cache.negative ttl; set to -1 to cache, +# forever, +-Des.networkaddress.cache.negative.ttl=10, +, +++ b/docs/reference/setup/sysconfig/dns-cache.asciidoc, +place, the JVM defaults to caching positive hostname resolutions indefinitely, +and defaults to caching negative hostname resolutions for ten, +seconds. Elasticsearch overrides this behavior with default values to cache, +positive lookups for sixty seconds, and to cache negative lookups for ten, +seconds. These values should be suitable for most environments, including, +environments where DNS resolutions vary with time. If not, you can edit the, +values `es.networkaddress.cache.ttl` and `es.networkaddress.cache.negative.ttl`, +in the <<jvm-options,JVM options>>. Note that the values, +and, +in the, +security policy] are ignored by Elasticsearch unless you remove the settings for, +`es.networkaddress.cache.ttl` and `es.networkaddress.cache.negative.ttl`., +++ b/server/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +import java.security.Security;, +        overrideDnsCachePolicyProperties();, +        /*, +         * We want the JVM to think there is a security manager installed so that if internal policy decisions that would be based on the, +         * presence of a security manager or lack thereof act as if there is a security manager present (e.g., DNS cache policy). This, +         * forces such policies to take effect immediately., +         */, +, +, +    private static void overrideDnsCachePolicyProperties() {, +        for (final String property : new String[] {"networkaddress.cache.ttl", "networkaddress.cache.negative.ttl" }) {, +            final String overrideProperty = "es." + property;, +            final String overrideValue = System.getProperty(overrideProperty);, +            if (overrideValue != null) {, +                try {, +                    // round-trip the property to an integer and back to a string to ensure that it parses properly, +                    Security.setProperty(property, Integer.toString(Integer.valueOf(overrideValue)));, +                } catch (final NumberFormatException e) {, +                    throw new IllegalArgumentException(]