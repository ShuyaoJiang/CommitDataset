[+++ b/sql-clients/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/Message.java, +++ b/sql-clients/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/Message.java, +++ b/sql-clients/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/ProtoUtils.java, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Action;, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Status;, +, +                throw new IOException("Don't know how to read type [" + type + " / " + JDBCType.valueOf(type) + "]");, +++ b/sql-clients/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/Message.java, +++ b/sql-clients/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/ProtoUtils.java, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Action;, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Status;, +, +                throw new IOException("Don't know how to read type [" + type + " / " + JDBCType.valueOf(type) + "]");, +++ b/sql-clients/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/HttpClient.java, +++ b/sql-clients/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/Message.java, +++ b/sql-clients/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/ProtoUtils.java, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Action;, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Status;, +, +                throw new IOException("Don't know how to read type [" + type + " / " + JDBCType.valueOf(type) + "]");, +++ b/sql-clients/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/HttpClient.java, +++ b/sql-clients/test-utils/build.gradle, +, +forbiddenApisMain {, +  //we are using jdk-internal instead of jdk-non-portable to allow for com.sun.net.httpserver.* usage, +  bundledSignatures -= 'jdk-non-portable', +  bundledSignatures += 'jdk-internal', +}, +++ b/sql-clients/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/Message.java, +++ b/sql-clients/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/ProtoUtils.java, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Action;, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Status;, +, +                throw new IOException("Don't know how to read type [" + type + " / " + JDBCType.valueOf(type) + "]");, +++ b/sql-clients/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/HttpClient.java, +++ b/sql-clients/test-utils/build.gradle, +, +forbiddenApisMain {, +  //we are using jdk-internal instead of jdk-non-portable to allow for com.sun.net.httpserver.* usage, +  bundledSignatures -= 'jdk-non-portable', +  bundledSignatures += 'jdk-internal', +}, +++ b/sql-clients/test-utils/src/main/java/org/elasticsearch/xpack/sql/test/server/ProtoHttpServer.java, +import java.net.InetAddress;, +        server = HttpServer.create(new InetSocketAddress(InetAddress.getLoopbackAddress(), port), 0);, +        return server != null ? "localhost:" + address().getPort() + defaultPrefix + protoPrefix : "<not started>";, +++ b/sql-clients/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/Message.java, +++ b/sql-clients/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/ProtoUtils.java, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Action;, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Status;, +, +                throw new IOException("Don't know how to read type [" + type + " / " + JDBCType.valueOf(type) + "]");, +++ b/sql-clients/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/HttpClient.java, +++ b/sql-clients/test-utils/build.gradle, +, +forbiddenApisMain {, +  //we are using jdk-internal instead of jdk-non-portable to allow for com.sun.net.httpserver.* usage, +  bundledSignatures -= 'jdk-non-portable', +  bundledSignatures += 'jdk-internal', +}, +++ b/sql-clients/test-utils/src/main/java/org/elasticsearch/xpack/sql/test/server/ProtoHttpServer.java, +import java.net.InetAddress;, +        server = HttpServer.create(new InetSocketAddress(InetAddress.getLoopbackAddress(), port), 0);, +        return server != null ? "localhost:" + address().getPort() + defaultPrefix + protoPrefix : "<not started>";, +++ b/sql-clients/test-utils/src/main/java/org/elasticsearch/xpack/sql/test/server/RootHttpHandler.java, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.common.logging.ESLoggerFactory;, +, +import java.io.IOException;, +, +    private static final Logger logger = ESLoggerFactory.getLogger(RootHttpHandler.class);, +        logger.debug("Received ping call...");]