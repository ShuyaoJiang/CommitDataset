[+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +            snapshotsService.executeSnapshot(request,, +                ActionListener.wrap(snapshotInfo-> listener.onResponse(new CreateSnapshotResponse(snapshotInfo)), listener::onFailure));, +            snapshotsService.createSnapshot(request,, +                ActionListener.wrap(snapshot -> listener.onResponse(new CreateSnapshotResponse()), listener::onFailure));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +            snapshotsService.executeSnapshot(request,, +                ActionListener.wrap(snapshotInfo-> listener.onResponse(new CreateSnapshotResponse(snapshotInfo)), listener::onFailure));, +            snapshotsService.createSnapshot(request,, +                ActionListener.wrap(snapshot -> listener.onResponse(new CreateSnapshotResponse()), listener::onFailure));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        snapshotsService.deleteSnapshot(request.repository(), request.snapshot(),, +            ActionListener.wrap(v -> listener.onResponse(new AcknowledgedResponse(true)), listener::onFailure), false);, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +            snapshotsService.executeSnapshot(request,, +                ActionListener.wrap(snapshotInfo-> listener.onResponse(new CreateSnapshotResponse(snapshotInfo)), listener::onFailure));, +            snapshotsService.createSnapshot(request,, +                ActionListener.wrap(snapshot -> listener.onResponse(new CreateSnapshotResponse()), listener::onFailure));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/delete/TransportDeleteSnapshotAction.java, +        snapshotsService.deleteSnapshot(request.repository(), request.snapshot(),, +            ActionListener.wrap(v -> listener.onResponse(new AcknowledgedResponse(true)), listener::onFailure), false);, +++ b/server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +import java.util.concurrent.ConcurrentHashMap;, + * <li>On the master node the {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} is called and makes sure that, + * the {@link #beginSnapshot(ClusterState, SnapshotsInProgress.Entry, boolean, ActionListener)} method kicks in and initializes, +    private final Map<Snapshot, List<ActionListener<SnapshotInfo>>> snapshotCompletionListeners = new ConcurrentHashMap<>();, +     * Same as {@link #createSnapshot(CreateSnapshotRequest, ActionListener)} but invokes its callback on completion of, +     * the snapshot., +     *, +     * @param request snapshot request, +     * @param listener snapshot completion listener, +     */, +    public void executeSnapshot(final CreateSnapshotRequest request, final ActionListener<SnapshotInfo> listener) {, +        createSnapshot(request, ActionListener.wrap(snapshot -> addListener(snapshot, listener), listener::onFailure));, +    }, +, +    /**, +    public void createSnapshot(final CreateSnapshotRequest request, final ActionListener<Snapshot> listener) {, +                               final ActionListener<Snapshot> userCreateSnapshotListener) {, +        private final ActionListener<Snapshot> userCreateSnapshotListener;, +                                  ActionListener<Snapshot> userCreateSnapshotListener, Exception e) {, +                            deleteSnapshot(snapshot.snapshot(), new ActionListener<Void>() {, +                                public void onResponse(Void aVoid) {, +                final List<ActionListener<SnapshotInfo>> completionListeners = snapshotCompletionListeners.remove(snapshot);, +                if (completionListeners != null) {, +                        if (snapshotInfo == null) {, +                            ActionListener.onFailure(completionListeners, failure);, +                            ActionListener.onResponse(completionListeners, snapshotInfo);, +                    } catch (Exception e) {, +                        logger.warn("Failed to notify listeners", e);, +    public void deleteSnapshot(final String repositoryName, final String snapshotName, final ActionListener<Void> listener,, +    private void deleteSnapshot(final Snapshot snapshot, final ActionListener<Void> listener, final long repositoryStateId,, +                    clusterStateBuilder.putCustom(SnapshotsInProgress.TYPE, new SnapshotsInProgress(newSnapshot));, +                    addListener(snapshot, ActionListener.wrap(, +                        snapshotInfo -> {, +                                        deleteSnapshot(snapshot.getRepository(), snapshot.getSnapshotId().getName(), listener, true);, +                                        logger.warn(() -> new ParameterizedMessage("[{}] failed to delete snapshot", snapshot), ex);, +                        },, +                        e -> {, +                                    deleteSnapshot(snapshot.getRepository(), snapshot.getSnapshotId().getName(), listener, true);, +                                        "Tried deleting in-progress snapshot [{}], but it could not be found after failing to abort.",, +                    ));, +    private void deleteSnapshotFromRepository(Snapshot snapshot, @Nullable ActionListener<Void> listener, long repositoryStateId) {, +                                                        @Nullable final ActionListener<Void> listener) {, +                        listener.onResponse(null);, +     * @param snapshot Snapshot to listen for, +    private void addListener(Snapshot snapshot, ActionListener<SnapshotInfo> listener) {, +        snapshotCompletionListeners.computeIfAbsent(snapshot, k -> new CopyOnWriteArrayList<>()).add(listener);]