[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String inFipsJvmScript = 'print(java.security.Security.getProviders()[0].name.toLowerCase().contains("fips"));', +            boolean inFipsJvm = Boolean.parseBoolean(runJavascript(project, runtimeJavaHome, inFipsJvmScript)), +, +            project.rootProject.ext.inFipsJvm = inFipsJvm, +        project.ext.inFipsJvm = project.rootProject.ext.inFipsJvm, +            // Set the system keystore/truststore password if we're running tests in a FIPS-140 JVM, +            if (project.inFipsJvm) {, +                systemProperty 'javax.net.ssl.trustStorePassword', 'password', +                systemProperty 'javax.net.ssl.keyStorePassword', 'password', +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String inFipsJvmScript = 'print(java.security.Security.getProviders()[0].name.toLowerCase().contains("fips"));', +            boolean inFipsJvm = Boolean.parseBoolean(runJavascript(project, runtimeJavaHome, inFipsJvmScript)), +, +            project.rootProject.ext.inFipsJvm = inFipsJvm, +        project.ext.inFipsJvm = project.rootProject.ext.inFipsJvm, +            // Set the system keystore/truststore password if we're running tests in a FIPS-140 JVM, +            if (project.inFipsJvm) {, +                systemProperty 'javax.net.ssl.trustStorePassword', 'password', +                systemProperty 'javax.net.ssl.keyStorePassword', 'password', +            }, +++ b/plugins/discovery-gce/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String inFipsJvmScript = 'print(java.security.Security.getProviders()[0].name.toLowerCase().contains("fips"));', +            boolean inFipsJvm = Boolean.parseBoolean(runJavascript(project, runtimeJavaHome, inFipsJvmScript)), +, +            project.rootProject.ext.inFipsJvm = inFipsJvm, +        project.ext.inFipsJvm = project.rootProject.ext.inFipsJvm, +            // Set the system keystore/truststore password if we're running tests in a FIPS-140 JVM, +            if (project.inFipsJvm) {, +                systemProperty 'javax.net.ssl.trustStorePassword', 'password', +                systemProperty 'javax.net.ssl.keyStorePassword', 'password', +            }, +++ b/plugins/discovery-gce/build.gradle, +++ b/server/src/test/java/org/elasticsearch/action/admin/ReloadSecureSettingsIT.java, +                                // Running in a JVM with a BouncyCastle FIPS Security Provider, decrypting the Keystore with the wrong, +                                // password returns a SecurityException if the DataInputStream can't be fully consumed, +                                if (inFipsJvm()) {, +                                    assertThat(nodeResponse.reloadException(), instanceOf(SecurityException.class));, +                                } else {, +, +                            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String inFipsJvmScript = 'print(java.security.Security.getProviders()[0].name.toLowerCase().contains("fips"));', +            boolean inFipsJvm = Boolean.parseBoolean(runJavascript(project, runtimeJavaHome, inFipsJvmScript)), +, +            project.rootProject.ext.inFipsJvm = inFipsJvm, +        project.ext.inFipsJvm = project.rootProject.ext.inFipsJvm, +            // Set the system keystore/truststore password if we're running tests in a FIPS-140 JVM, +            if (project.inFipsJvm) {, +                systemProperty 'javax.net.ssl.trustStorePassword', 'password', +                systemProperty 'javax.net.ssl.keyStorePassword', 'password', +            }, +++ b/plugins/discovery-gce/build.gradle, +++ b/server/src/test/java/org/elasticsearch/action/admin/ReloadSecureSettingsIT.java, +                                // Running in a JVM with a BouncyCastle FIPS Security Provider, decrypting the Keystore with the wrong, +                                // password returns a SecurityException if the DataInputStream can't be fully consumed, +                                if (inFipsJvm()) {, +                                    assertThat(nodeResponse.reloadException(), instanceOf(SecurityException.class));, +                                } else {, +, +                            }, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java, +import java.security.Security;, +    public static boolean inFipsJvm() {, +        return Security.getProviders()[0].getName().toLowerCase(Locale.ROOT).contains("fips");, +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String inFipsJvmScript = 'print(java.security.Security.getProviders()[0].name.toLowerCase().contains("fips"));', +            boolean inFipsJvm = Boolean.parseBoolean(runJavascript(project, runtimeJavaHome, inFipsJvmScript)), +, +            project.rootProject.ext.inFipsJvm = inFipsJvm, +        project.ext.inFipsJvm = project.rootProject.ext.inFipsJvm, +            // Set the system keystore/truststore password if we're running tests in a FIPS-140 JVM, +            if (project.inFipsJvm) {, +                systemProperty 'javax.net.ssl.trustStorePassword', 'password', +                systemProperty 'javax.net.ssl.keyStorePassword', 'password', +            }, +++ b/plugins/discovery-gce/build.gradle, +++ b/server/src/test/java/org/elasticsearch/action/admin/ReloadSecureSettingsIT.java, +                                // Running in a JVM with a BouncyCastle FIPS Security Provider, decrypting the Keystore with the wrong, +                                // password returns a SecurityException if the DataInputStream can't be fully consumed, +                                if (inFipsJvm()) {, +                                    assertThat(nodeResponse.reloadException(), instanceOf(SecurityException.class));, +                                } else {, +, +                            }, +++ b/test/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java, +import java.security.Security;, +    public static boolean inFipsJvm() {, +        return Security.getProviders()[0].getName().toLowerCase(Locale.ROOT).contains("fips");, +    }, +++ b/x-pack/plugin/build.gradle, +// location for keys and certificates, +File nodeKey = file("$keystoreDir/testnode.pem"), +File nodeCert = file("$keystoreDir/testnode.crt"), +// Add key and certs to test classpath: it expects them there, +// User cert and key PEM files instead of a JKS Keystore for the cluster's trust material so that, +// it can run in a FIPS 140 JVM]