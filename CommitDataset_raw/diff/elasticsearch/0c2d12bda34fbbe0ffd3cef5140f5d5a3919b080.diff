[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/geo/builders/BaseLineStringBuilder.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.geo.builders;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +, +import org.elasticsearch.common.xcontent.XContentBuilder;, +, +import com.spatial4j.core.shape.Shape;, +import com.spatial4j.core.shape.jts.JtsGeometry;, +import com.vividsolutions.jts.geom.Coordinate;, +import com.vividsolutions.jts.geom.Geometry;, +import com.vividsolutions.jts.geom.GeometryFactory;, +import com.vividsolutions.jts.geom.LineString;, +, +public abstract class BaseLineStringBuilder<E extends BaseLineStringBuilder<E>> extends PointCollection<E> {, +, +    protected BaseLineStringBuilder() {, +        this(new ArrayList<Coordinate>());, +    }, +, +    protected BaseLineStringBuilder(ArrayList<Coordinate> points) {, +        super(points);, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        return coordinatesToXcontent(builder, false);, +    }, +, +    @Override, +    public Shape build() {, +        Coordinate[] coordinates = points.toArray(new Coordinate[points.size()]);, +        Geometry geometry;, +        if(wrapdateline) {, +            ArrayList<LineString> strings = decompose(FACTORY, coordinates, new ArrayList<LineString>());, +, +            if(strings.size() == 1) {, +                geometry = strings.get(0);, +            } else {, +                LineString[] linestrings = strings.toArray(new LineString[strings.size()]);, +                geometry = FACTORY.createMultiLineString(linestrings);, +            }, +, +        } else {, +            geometry = FACTORY.createLineString(coordinates);, +        }, +        return new JtsGeometry(geometry, SPATIAL_CONTEXT, !wrapdateline);, +    }, +, +    protected static ArrayList<LineString> decompose(GeometryFactory factory, Coordinate[] coordinates, ArrayList<LineString> strings) {, +        for(Coordinate[] part : decompose(+DATELINE, coordinates)) {, +            for(Coordinate[] line : decompose(-DATELINE, part)) {, +                strings.add(factory.createLineString(line));, +            }, +        }, +        return strings;, +    }, +, +    /**, +     * Decompose a linestring given as array of coordinates at a vertical line., +     * , +     * @param dateline x-axis intercept of the vertical line, +     * @param coordinates coordinates forming the linestring, +     * @return array of linestrings given as coordinate arrays , +     */]