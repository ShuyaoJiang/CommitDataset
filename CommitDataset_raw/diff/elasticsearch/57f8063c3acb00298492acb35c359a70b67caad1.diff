[+++ b/elasticsearch/x-pack/src/test/java/org/elasticsearch/xpack/test/rest/XPackRestTestCase.java, +, +import org.apache.http.util.EntityUtils;, +import org.elasticsearch.client.ElasticsearchResponse;, +import org.elasticsearch.client.ElasticsearchResponseException;, +import org.elasticsearch.shield.authc.esnative.ReservedRealm;, +import org.elasticsearch.shield.authz.store.ReservedRolesStore;, +        try (ElasticsearchResponse response = getRestClient(), +                .performRequest("PUT", "/_xpack/watcher/_start", Collections.emptyMap(), null)) {, +            assertThat(response.getStatusLine().getStatusCode(), is(200));, +        try (ElasticsearchResponse response = getRestClient(), +                .performRequest("PUT", "/_xpack/watcher/_stop", Collections.emptyMap(), null)) {, +            assertThat(response.getStatusLine().getStatusCode(), is(200));, +        String response;, +        try (ElasticsearchResponse elasticsearchResponse = getRestClient(), +                .performRequest("GET", "/_xpack/security/user", Collections.emptyMap(), null)) {, +            assertThat(elasticsearchResponse.getStatusLine().getStatusCode(), is(200));, +            response = Streams.copyToString(new InputStreamReader(elasticsearchResponse.getEntity().getContent(), StandardCharsets.UTF_8));, +        }, +        Map<String, Object> responseMap = XContentFactory.xContent(response).createParser(response).map();, +            if (ReservedRealm.isReserved(user) == false) {, +                try (ElasticsearchResponse elasticsearchResponse = getRestClient(), +                        .performRequest("DELETE", "/_xpack/security/user/" + user, Collections.emptyMap(), null)) {, +                    assertThat(EntityUtils.toString(elasticsearchResponse.getEntity()), elasticsearchResponse.getStatusLine().getStatusCode(), is(200));, +                } catch(ElasticsearchResponseException e) {, +                    logger.error(e.getResponseBody());, +        try (ElasticsearchResponse elasticsearchResponse = getRestClient(), +                .performRequest("GET", "/_xpack/security/role", Collections.emptyMap(), null)) {, +            assertThat(elasticsearchResponse.getStatusLine().getStatusCode(), is(200));, +            response = Streams.copyToString(new InputStreamReader(elasticsearchResponse.getEntity().getContent(), StandardCharsets.UTF_8));, +        }, +        responseMap = XContentFactory.xContent(response).createParser(response).map();, +        // in the structure of this API, the roles are the keyset, +            if (ReservedRolesStore.isReserved(role) == false) {, +                try (ElasticsearchResponse elasticsearchResponse = getRestClient(), +                        .performRequest("DELETE", "/_xpack/security/role/" + role, Collections.emptyMap(), null)) {, +                    assertThat(elasticsearchResponse.getStatusLine().getStatusCode(), is(200));]