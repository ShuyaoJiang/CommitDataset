[+++ b/libs/nio/src/main/java/org/elasticsearch/nio/ChannelFactory.java, +    public static class RawChannelFactory {, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/ChannelFactory.java, +    public static class RawChannelFactory {, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/transport/nio/NioTransport.java, +import java.util.function.Function;, +    private volatile Function<DiscoveryNode, TcpChannelFactory> clientChannelFactory;, +        return nioGroup.openChannel(address, clientChannelFactory.apply(node));, +            clientChannelFactory = clientChannelFactoryFunction(clientProfileSettings);, +                    TcpChannelFactory factory = serverChannelFactory(profileSettings);, +    protected TcpChannelFactory serverChannelFactory(ProfileSettings profileSettings) {, +        return new TcpChannelFactoryImpl(profileSettings);, +    }, +, +    protected Function<DiscoveryNode, TcpChannelFactory> clientChannelFactoryFunction(ProfileSettings profileSettings) {, +        return (n) -> new TcpChannelFactoryImpl(profileSettings);, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/ChannelFactory.java, +    public static class RawChannelFactory {, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/transport/nio/NioTransport.java, +import java.util.function.Function;, +    private volatile Function<DiscoveryNode, TcpChannelFactory> clientChannelFactory;, +        return nioGroup.openChannel(address, clientChannelFactory.apply(node));, +            clientChannelFactory = clientChannelFactoryFunction(clientProfileSettings);, +                    TcpChannelFactory factory = serverChannelFactory(profileSettings);, +    protected TcpChannelFactory serverChannelFactory(ProfileSettings profileSettings) {, +        return new TcpChannelFactoryImpl(profileSettings);, +    }, +, +    protected Function<DiscoveryNode, TcpChannelFactory> clientChannelFactoryFunction(ProfileSettings profileSettings) {, +        return (n) -> new TcpChannelFactoryImpl(profileSettings);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java, +    public SSLContext sslContext() {, +     * Returns the {@link SSLContext} for the configuration. Mainly used for testing, +    public SSLContext sslContext(SSLConfiguration configuration) {, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/ChannelFactory.java, +    public static class RawChannelFactory {, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/transport/nio/NioTransport.java, +import java.util.function.Function;, +    private volatile Function<DiscoveryNode, TcpChannelFactory> clientChannelFactory;, +        return nioGroup.openChannel(address, clientChannelFactory.apply(node));, +            clientChannelFactory = clientChannelFactoryFunction(clientProfileSettings);, +                    TcpChannelFactory factory = serverChannelFactory(profileSettings);, +    protected TcpChannelFactory serverChannelFactory(ProfileSettings profileSettings) {, +        return new TcpChannelFactoryImpl(profileSettings);, +    }, +, +    protected Function<DiscoveryNode, TcpChannelFactory> clientChannelFactoryFunction(ProfileSettings profileSettings) {, +        return (n) -> new TcpChannelFactoryImpl(profileSettings);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java, +    public SSLContext sslContext() {, +     * Returns the {@link SSLContext} for the configuration. Mainly used for testing, +    public SSLContext sslContext(SSLConfiguration configuration) {, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/nio/SecurityNioTransport.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.nio.ChannelFactory;, +import org.elasticsearch.transport.ConnectTransportException;, +import javax.net.ssl.SNIHostName;, +import javax.net.ssl.SSLParameters;, +import java.util.function.Function;, +    protected TcpChannelFactory serverChannelFactory(ProfileSettings profileSettings) {, +        return new SecurityTcpChannelFactory(profileSettings, false);, +    }, +, +    @Override, +    protected Function<DiscoveryNode, TcpChannelFactory> clientChannelFactoryFunction(ProfileSettings profileSettings) {, +        return (node) -> {, +            final ChannelFactory.RawChannelFactory rawChannelFactory = new ChannelFactory.RawChannelFactory(profileSettings.tcpNoDelay,, +                profileSettings.tcpKeepAlive, profileSettings.reuseAddress, Math.toIntExact(profileSettings.sendBufferSize.getBytes()),, +                Math.toIntExact(profileSettings.receiveBufferSize.getBytes()));, +            SNIHostName serverName;, +            String configuredServerName = node.getAttributes().get("server_name");, +            if (configuredServerName != null) {, +                try {, +                    serverName = new SNIHostName(configuredServerName);, +                } catch (IllegalArgumentException e) {, +                    throw new ConnectTransportException(node, "invalid DiscoveryNode server_name [" + configuredServerName + "]", e);, +                }, +            } else {, +                serverName = null;, +            }, +            return new SecurityClientTcpChannelFactory(rawChannelFactory, serverName);, +        };, +            this(new RawChannelFactory(profileSettings.tcpNoDelay,, +                Math.toIntExact(profileSettings.receiveBufferSize.getBytes())), profileSettings.profileName, isClient);, +        }, +, +        private SecurityTcpChannelFactory(RawChannelFactory rawChannelFactory, String profileName, boolean isClient) {, +            super(rawChannelFactory);, +            this.profileName = profileName;, +                SSLDriver sslDriver = new SSLDriver(createSSLEngine(channel), isClient);, +, +        protected SSLEngine createSSLEngine(SocketChannel channel) throws IOException {, +            SSLEngine sslEngine;, +            SSLConfiguration defaultConfig = profileConfiguration.get(TcpTransport.DEFAULT_PROFILE);, +            SSLConfiguration sslConfig = profileConfiguration.getOrDefault(profileName, defaultConfig);, +            boolean hostnameVerificationEnabled = sslConfig.verificationMode().isHostnameVerificationEnabled();, +            if (hostnameVerificationEnabled) {, +                InetSocketAddress inetSocketAddress = (InetSocketAddress) channel.getRemoteAddress();, +                // we create the socket based on the name given. don't reverse DNS, +                sslEngine = sslService.createSSLEngine(sslConfig, inetSocketAddress.getHostString(), inetSocketAddress.getPort());]