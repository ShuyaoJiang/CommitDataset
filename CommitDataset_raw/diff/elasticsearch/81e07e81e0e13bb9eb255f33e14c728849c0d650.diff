[+++ b/core/src/test/java/org/elasticsearch/cluster/PublishClusterStateActionTests.java, +import org.elasticsearch.common.logging.ESLogger;, +    public static class MockNode implements PublishClusterStateAction.NewClusterStateListener {, +        public PublishClusterStateAction action;, +        public final ClusterStateListener listener;, +        public volatile ClusterState clusterState;, +, +        private final ESLogger logger;, +, +        public MockNode(DiscoveryNode discoveryNode, MockTransportService service, MockDiscoveryNodesProvider nodesProvider, @Nullable ClusterStateListener listener, ESLogger logger) {, +            this.listener = listener;, +            this.logger = logger;, +            this.clusterState = ClusterState.builder(ClusterName.DEFAULT).nodes(DiscoveryNodes.builder().put(discoveryNode).localNodeId(discoveryNode.id()).build()).build();, +, +        @Override, +        public void onNewClusterState(ClusterState newClusterState, NewStateProcessed newStateProcessed) {, +            logger.debug("[{}] received version [{}], uuid [{}]", discoveryNode.name(), newClusterState.version(), newClusterState.stateUUID());, +            if (listener != null) {, +                ClusterChangedEvent event = new ClusterChangedEvent("", newClusterState, clusterState);, +                listener.clusterChanged(event);, +            }, +            clusterState = newClusterState;, +            newStateProcessed.onNewClusterStateProcessed();, +        }, +        return createMockNode(name, settings, version, null);, +    public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception {, +        MockNode node = new MockNode(discoveryNode, service, nodesProvider, listener, logger);, +        node.action = buildPublishClusterStateAction(settings, service, nodesProvider, node);, +        MockNode nodeA = createMockNode("nodeA", Settings.EMPTY, Version.CURRENT);, +        MockNode nodeB = createMockNode("nodeB", Settings.EMPTY, Version.CURRENT);, +        assertSameStateFromFull(nodeB.clusterState, clusterState);, +        assertSameStateFromDiff(nodeB.clusterState, clusterState);, +        assertThat(nodeB.clusterState.blocks().global().size(), equalTo(1));, +        assertSameStateFromDiff(nodeB.clusterState, clusterState);, +        assertTrue(nodeB.clusterState.wasReadFromDiff());, +        MockNode nodeC = createMockNode("nodeC", Settings.EMPTY, Version.CURRENT);, +        assertSameStateFromDiff(nodeB.clusterState, clusterState);, +        // First state, +        assertSameStateFromFull(nodeC.clusterState, clusterState);, +        assertSameStateFromDiff(nodeB.clusterState, clusterState);, +        assertThat(nodeB.clusterState.blocks().global().size(), equalTo(0));, +        assertSameStateFromDiff(nodeC.clusterState, clusterState);, +        assertThat(nodeC.clusterState.blocks().global().size(), equalTo(0));, +        assertSameStateFromFull(nodeB.clusterState, clusterState);, +        assertSameStateFromFull(nodeC.clusterState, clusterState);, +        assertFalse(nodeC.clusterState.wasReadFromDiff());, +        assertSameStateFromFull(nodeA.clusterState, clusterState);, +        assertSameStateFromFull(nodeC.clusterState, clusterState);, +        MockNode nodeA = createMockNode("nodeA", Settings.EMPTY, Version.CURRENT, new ClusterStateListener() {, +            public void clusterChanged(ClusterChangedEvent event) {, +        MockNode nodeB = createMockNode("nodeB", Settings.EMPTY, Version.CURRENT);, +        assertSameStateFromFull(nodeB.clusterState, clusterState);, +        assertSameStateFromDiff(nodeB.clusterState, clusterState);, +        MockNode nodeA = createMockNode("nodeA", noDiffPublishingSettings, Version.CURRENT, new ClusterStateListener() {, +            public void clusterChanged(ClusterChangedEvent event) {, +        MockNode nodeB = createMockNode("nodeB", noDiffPublishingSettings, Version.CURRENT, new ClusterStateListener() {, +            public void clusterChanged(ClusterChangedEvent event) {, +                assertFalse(event.state().wasReadFromDiff());, +    /**, +     * Test concurrent publishing works correctly (although not strictly required, it's a good testamne, +     */, +        Settings settings = Settings.builder().put(DiscoverySettings.PUBLISH_DIFF_ENABLE, randomBoolean()).build();, +            nodes[i] = createMockNode(name, settings, Version.CURRENT, new ClusterStateListener() {, +                public void clusterChanged(ClusterChangedEvent event) {, +                    assertProperMetaDataForVersion(event.state().metaData(), event.state().version());, +        discoveryNodesBuilder.localNodeId(nodes[0].discoveryNode.id());, +, +        // fake node[0] - it is the master, +        nodes[0].clusterState = clusterState;, +, +        for (MockNode node : nodes) {, +            assertThat(node.discoveryNode + " misses a cluster state", node.clusterState, notNullValue());, +            assertThat(node.discoveryNode + " unexpected cluster state: " + node.clusterState, node.clusterState.version(), equalTo(clusterState.version()));, +            assertThat(node.clusterState.nodes().localNode(), equalTo(node.discoveryNode));, +        }, +        MockNode nodeA = createMockNode("nodeA", Settings.EMPTY, Version.CURRENT, new ClusterStateListener() {, +            public void clusterChanged(ClusterChangedEvent event) {, +        MockNode nodeB = createMockNode("nodeB", Settings.EMPTY, Version.CURRENT);, +        assertSameStateFromFull(nodeB.clusterState, clusterState);, +, +    void assertSameState(ClusterState actual, ClusterState expected) {, +        assertThat(actual, notNullValue());, +        assertThat("\n--> actual ClusterState: " + actual.prettyPrint() + "\n--> expected ClusterState:" + expected.prettyPrint(), actual.stateUUID(), equalTo(expected.stateUUID()));, +    }, +, +    void assertSameStateFromDiff(ClusterState actual, ClusterState expected) {, +        assertSameState(actual, expected);, +        assertTrue(actual.wasReadFromDiff());, +    }, +, +    void assertSameStateFromFull(ClusterState actual, ClusterState expected) {, +        assertSameState(actual, expected);, +        assertFalse(actual.wasReadFromDiff());, +    }]