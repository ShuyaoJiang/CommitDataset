[+++ b/build.gradle, +    buildTools, +    buildTools 'de.thetaphi:forbiddenapis:2.0', +    buildTools 'org.apache.rat:apache-rat:0.11', +, +  idea {, +    module {, +      // same as for the IntelliJ Gradle tooling integration, +      inheritOutputDirs = false, +      outputDir = file('build/classes/main'), +      testOutputDir = file('build/classes/test'), +, +      iml {, +        // fix so that Gradle idea plugin properly generates support for resource folders, +        // see also https://issues.gradle.org/browse/GRADLE-2975, +        withXml {, +          it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/main/resources' }.each {, +            it.attributes().remove('isTestSource'), +            it.attributes().put('type', 'java-resource'), +          }, +          it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/test/resources' }.each {, +            it.attributes().remove('isTestSource'), +            it.attributes().put('type', 'java-test-resource'), +          }, +        }, +      }, +    }, +  }, +++ b/build.gradle, +    buildTools, +    buildTools 'de.thetaphi:forbiddenapis:2.0', +    buildTools 'org.apache.rat:apache-rat:0.11', +, +  idea {, +    module {, +      // same as for the IntelliJ Gradle tooling integration, +      inheritOutputDirs = false, +      outputDir = file('build/classes/main'), +      testOutputDir = file('build/classes/test'), +, +      iml {, +        // fix so that Gradle idea plugin properly generates support for resource folders, +        // see also https://issues.gradle.org/browse/GRADLE-2975, +        withXml {, +          it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/main/resources' }.each {, +            it.attributes().remove('isTestSource'), +            it.attributes().put('type', 'java-resource'), +          }, +          it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/test/resources' }.each {, +            it.attributes().remove('isTestSource'), +            it.attributes().put('type', 'java-test-resource'), +          }, +        }, +      }, +    }, +  }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.gradle.precommit, +, +import java.nio.file.Files, +, +import org.gradle.api.DefaultTask, +import org.gradle.api.tasks.SourceSet, +import org.gradle.api.tasks.TaskAction, +, +import groovy.xml.NamespaceBuilder, +import groovy.xml.NamespaceBuilderSupport, +, +/**, + * Checks files for license headers., + * <p>, + * This is a port of the apache lucene check, + */, +public class LicenseHeadersTask extends DefaultTask {, +, +    LicenseHeadersTask() {, +        description = "Checks sources for missing, incorrect, or unacceptable license headers", +    }, +, +    @TaskAction, +    public void check() {, +        // load rat tasks]