[+++ b/README.asciidoc, +++ b/README.asciidoc, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +import org.elasticsearch.xpack.ml.action.UpdateDatafeedAction;, +import org.elasticsearch.xpack.ml.rest.datafeeds.RestUpdateDatafeedAction;, +            new RestUpdateDatafeedAction(settings, restController),, +                new ActionHandler<>(UpdateDatafeedAction.INSTANCE, UpdateDatafeedAction.TransportAction.class),, +    public static Path resolveConfigFile(Environment env, String name) {, +        return env.configFile().resolve(NAME).resolve(name);, +    }, +, +++ b/README.asciidoc, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +import org.elasticsearch.xpack.ml.action.UpdateDatafeedAction;, +import org.elasticsearch.xpack.ml.rest.datafeeds.RestUpdateDatafeedAction;, +            new RestUpdateDatafeedAction(settings, restController),, +                new ActionHandler<>(UpdateDatafeedAction.INSTANCE, UpdateDatafeedAction.TransportAction.class),, +    public static Path resolveConfigFile(Environment env, String name) {, +        return env.configFile().resolve(NAME).resolve(name);, +    }, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        PersistentTaskInProgress<?> task = MlMetadata.getTask(jobId, tasks);, +++ b/README.asciidoc, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +import org.elasticsearch.xpack.ml.action.UpdateDatafeedAction;, +import org.elasticsearch.xpack.ml.rest.datafeeds.RestUpdateDatafeedAction;, +            new RestUpdateDatafeedAction(settings, restController),, +                new ActionHandler<>(UpdateDatafeedAction.INSTANCE, UpdateDatafeedAction.TransportAction.class),, +    public static Path resolveConfigFile(Environment env, String name) {, +        return env.configFile().resolve(NAME).resolve(name);, +    }, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        PersistentTaskInProgress<?> task = MlMetadata.getTask(jobId, tasks);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import java.util.function.Predicate;, +            return Objects.hash(datafeedId, startTime, endTime);, +                    Objects.equals(endTime, other.endTime);, +                               DatafeedJobRunner datafeedJobRunner) {, +            StartDatafeedAction.validate(request.getDatafeedId(), mlMetadata, tasks);, +            PersistentTasksInProgress persistentTasksInProgress = clusterState.custom(PersistentTasksInProgress.TYPE);, +            if (persistentTasksInProgress == null) {, +                return;, +            }, +, +            Predicate<PersistentTasksInProgress.PersistentTaskInProgress<?>> predicate = taskInProgress -> {, +                Request storedRequest = (Request) taskInProgress.getRequest();, +                return storedRequest.getDatafeedId().equals(request.getDatafeedId());, +            };, +            if (persistentTasksInProgress.tasksExist(NAME, predicate)) {, +                throw new ElasticsearchStatusException("datafeed already started, expected datafeed state [{}], but got [{}]",, +                        RestStatus.CONFLICT, DatafeedState.STOPPED, DatafeedState.STARTED);, +            }, +        protected void nodeOperation(PersistentTask task, Request request, ActionListener<TransportResponse.Empty> listener) {, +            DatafeedTask datafeedTask = (DatafeedTask) task;, +    public static void validate(String datafeedId, MlMetadata mlMetadata, PersistentTasksInProgress tasks) {, +++ b/README.asciidoc, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +import org.elasticsearch.xpack.ml.action.UpdateDatafeedAction;, +import org.elasticsearch.xpack.ml.rest.datafeeds.RestUpdateDatafeedAction;, +            new RestUpdateDatafeedAction(settings, restController),, +                new ActionHandler<>(UpdateDatafeedAction.INSTANCE, UpdateDatafeedAction.TransportAction.class),, +    public static Path resolveConfigFile(Environment env, String name) {, +        return env.configFile().resolve(NAME).resolve(name);, +    }, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        PersistentTaskInProgress<?> task = MlMetadata.getTask(jobId, tasks);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/StartDatafeedAction.java, +import java.util.function.Predicate;, +            return Objects.hash(datafeedId, startTime, endTime);, +                    Objects.equals(endTime, other.endTime);, +                               DatafeedJobRunner datafeedJobRunner) {, +            StartDatafeedAction.validate(request.getDatafeedId(), mlMetadata, tasks);, +            PersistentTasksInProgress persistentTasksInProgress = clusterState.custom(PersistentTasksInProgress.TYPE);, +            if (persistentTasksInProgress == null) {, +                return;, +            }, +, +            Predicate<PersistentTasksInProgress.PersistentTaskInProgress<?>> predicate = taskInProgress -> {, +                Request storedRequest = (Request) taskInProgress.getRequest();, +                return storedRequest.getDatafeedId().equals(request.getDatafeedId());, +            };, +            if (persistentTasksInProgress.tasksExist(NAME, predicate)) {, +                throw new ElasticsearchStatusException("datafeed already started, expected datafeed state [{}], but got [{}]",, +                        RestStatus.CONFLICT, DatafeedState.STOPPED, DatafeedState.STARTED);, +            }, +        protected void nodeOperation(PersistentTask task, Request request, ActionListener<TransportResponse.Empty> listener) {, +            DatafeedTask datafeedTask = (DatafeedTask) task;, +    public static void validate(String datafeedId, MlMetadata mlMetadata, PersistentTasksInProgress tasks) {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/StopDatafeedAction.java, +            if (tasks != null) {, +                for (PersistentTaskInProgress<?> task : tasks.findTasks(StartDatafeedAction.NAME, p -> true)) {, +                    StartDatafeedAction.Request storedRequest = (StartDatafeedAction.Request) task.getRequest();, +                    if (storedRequest.getDatafeedId().equals(datafeedId)) {, +                        return;, +                    }, +                }, +            }]