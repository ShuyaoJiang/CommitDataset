[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, + * @author kimchy (shay.banon), +    // nodes that are added to be discovered, +    private volatile ImmutableList<DiscoveryNode> listedNodes = ImmutableList.of();, +        ImmutableList.Builder<TransportAddress> lstBuilder = ImmutableList.builder();, +        for (DiscoveryNode listedNode : listedNodes) {, +            lstBuilder.add(listedNode.address());, +        }, +        return lstBuilder.build();, +            ImmutableList.Builder<DiscoveryNode> builder = ImmutableList.builder();, +            listedNodes = builder.addAll(listedNodes).add(new DiscoveryNode("#temp#-" + tempNodeIdGenerator.incrementAndGet(), transportAddress)).build();, +            ImmutableList.Builder<DiscoveryNode> builder = ImmutableList.builder();, +            for (DiscoveryNode otherNode : listedNodes) {, +                if (!otherNode.address().equals(transportAddress)) {, +                    builder.add(otherNode);, +            listedNodes = builder.build();, +        for (DiscoveryNode listedNode : listedNodes), +            transportService.disconnectFromNode(listedNode);, +        for (DiscoveryNode node : event.nodesDelta().addedNodes()) {, +            try {, +                transportService.connectToNode(node);, +            } catch (Exception e) {, +                logger.warn("Failed to connect to discovered node [" + node + "]", e);, +            }, +        }, +        for (DiscoveryNode node : event.nodesDelta().removedNodes()) {, +            transportService.disconnectFromNode(node);, +        }, +            ImmutableList<DiscoveryNode> listedNodes = TransportClientNodesService.this.listedNodes;, +            final CountDownLatch latch = new CountDownLatch(listedNodes.size());, +            for (final DiscoveryNode listedNode : listedNodes) {, +                            transportService.connectToNode(listedNode); // make sure we are connected to it, +                            transportService.sendRequest(listedNode, TransportActions.Admin.Cluster.Node.INFO, Requests.nodesInfo("_local"), new BaseTransportResponseHandler<NodesInfoResponse>() {, +                                    logger.debug("Failed to get node info from " + listedNode + ", removed from nodes list", exp);, +                            logger.debug("Failed to get node info from " + listedNode + ", removed from nodes list", e);, +            // now, make sure we are connected to all the updated nodes, +            for (DiscoveryNode node : newNodes) {, +                try {, +                    transportService.connectToNode(node);, +                } catch (Exception e) {, +                    logger.debug("Failed to connect to discovered node [" + node + "]", e);, +                }, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, + * @author kimchy (shay.banon), +    // nodes that are added to be discovered, +    private volatile ImmutableList<DiscoveryNode> listedNodes = ImmutableList.of();, +        ImmutableList.Builder<TransportAddress> lstBuilder = ImmutableList.builder();, +        for (DiscoveryNode listedNode : listedNodes) {, +            lstBuilder.add(listedNode.address());, +        }, +        return lstBuilder.build();, +            ImmutableList.Builder<DiscoveryNode> builder = ImmutableList.builder();, +            listedNodes = builder.addAll(listedNodes).add(new DiscoveryNode("#temp#-" + tempNodeIdGenerator.incrementAndGet(), transportAddress)).build();, +            ImmutableList.Builder<DiscoveryNode> builder = ImmutableList.builder();, +            for (DiscoveryNode otherNode : listedNodes) {, +                if (!otherNode.address().equals(transportAddress)) {, +                    builder.add(otherNode);, +            listedNodes = builder.build();, +        for (DiscoveryNode listedNode : listedNodes), +            transportService.disconnectFromNode(listedNode);, +        for (DiscoveryNode node : event.nodesDelta().addedNodes()) {, +            try {, +                transportService.connectToNode(node);, +            } catch (Exception e) {, +                logger.warn("Failed to connect to discovered node [" + node + "]", e);, +            }, +        }, +        for (DiscoveryNode node : event.nodesDelta().removedNodes()) {, +            transportService.disconnectFromNode(node);, +        }, +            ImmutableList<DiscoveryNode> listedNodes = TransportClientNodesService.this.listedNodes;, +            final CountDownLatch latch = new CountDownLatch(listedNodes.size());, +            for (final DiscoveryNode listedNode : listedNodes) {, +                            transportService.connectToNode(listedNode); // make sure we are connected to it, +                            transportService.sendRequest(listedNode, TransportActions.Admin.Cluster.Node.INFO, Requests.nodesInfo("_local"), new BaseTransportResponseHandler<NodesInfoResponse>() {, +                                    logger.debug("Failed to get node info from " + listedNode + ", removed from nodes list", exp);, +                            logger.debug("Failed to get node info from " + listedNode + ", removed from nodes list", e);, +            // now, make sure we are connected to all the updated nodes, +            for (DiscoveryNode node : newNodes) {, +                try {, +                    transportService.connectToNode(node);, +                } catch (Exception e) {, +                    logger.debug("Failed to connect to discovered node [" + node + "]", e);, +                }, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +                    // TODO, do this in parallel (and wait), +                    for (DiscoveryNode node : nodesDelta.addedNodes()) {, +                        try {, +                            transportService.connectToNode(node);, +                        } catch (Exception e) {, +                            // TODO, need to mark this node as failed..., +                            logger.warn("Failed to connect to node [" + node + "]", e);, +                    }, +                            for (DiscoveryNode node : nodesDelta.removedNodes()) {, +                                transportService.disconnectFromNode(node);, +                            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java]