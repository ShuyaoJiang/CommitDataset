[+++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import java.util.function.Consumer;, +        this.nodeRemovalExecutor = new NodeRemovalClusterStateTaskExecutor(allocationService, electMaster, this::submitRejoin, logger);, +            submitRejoin("zen-disco-failed-to-publish");, +    private void submitRejoin(String source) {, +        clusterService.submitStateUpdateTask(source, new ClusterStateUpdateTask(Priority.IMMEDIATE) {, +            @Override, +            public ClusterState execute(ClusterState currentState) {, +                return rejoin(currentState, source);, +            }, +, +            @Override, +            public void onFailure(String source, Exception e) {, +                logger.error((Supplier<?>) () -> new ParameterizedMessage("unexpected failure during [{}]", source), e);, +            }, +, +        });, +    }, +, +        private final Consumer<String> rejoin;, +                final Consumer<String> rejoin,, +                rejoin.accept("not enough master nodes");, +                return resultBuilder.build(currentState);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import java.util.function.Consumer;, +        this.nodeRemovalExecutor = new NodeRemovalClusterStateTaskExecutor(allocationService, electMaster, this::submitRejoin, logger);, +            submitRejoin("zen-disco-failed-to-publish");, +    private void submitRejoin(String source) {, +        clusterService.submitStateUpdateTask(source, new ClusterStateUpdateTask(Priority.IMMEDIATE) {, +            @Override, +            public ClusterState execute(ClusterState currentState) {, +                return rejoin(currentState, source);, +            }, +, +            @Override, +            public void onFailure(String source, Exception e) {, +                logger.error((Supplier<?>) () -> new ParameterizedMessage("unexpected failure during [{}]", source), e);, +            }, +, +        });, +    }, +, +        private final Consumer<String> rejoin;, +                final Consumer<String> rejoin,, +                rejoin.accept("not enough master nodes");, +                return resultBuilder.build(currentState);, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/NodeRemovalClusterStateTaskExecutorTests.java, +import java.util.function.Consumer;, +        final AtomicBoolean rejoinCalled = new AtomicBoolean();, +        final Consumer<String> submitRejoin = source -> rejoinCalled.set(true);, +                new ZenDiscovery.NodeRemovalClusterStateTaskExecutor(allocationService, electMasterService, submitRejoin, logger) {, +        assertTrue(rejoinCalled.get());, +        assertThat(result.resultingState, equalTo(clusterState));, +            assertNotNull(result.resultingState.nodes().get(task.node().getId()));, +        final Consumer<String> submitRejoin = source -> fail("rejoin should not be invoked");, +                new ZenDiscovery.NodeRemovalClusterStateTaskExecutor(allocationService, electMasterService, submitRejoin, logger) {]