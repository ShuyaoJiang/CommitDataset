[+++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +        List<SearchShardIterator> shards = new ArrayList<>(remoteShardIterators);, +                    public void run() {, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +        List<SearchShardIterator> shards = new ArrayList<>(remoteShardIterators);, +                    public void run() {, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterConnection.java, +import org.elasticsearch.core.internal.io.IOUtils;, +        final DiscoveryNode node = connectedNodes.getAny();, +            final DiscoveryNode node = connectedNodes.getAny();, +     * Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}., +     * If such node is not connected, the returned connection will be a proxy connection that redirects to it., +        if (transportService.nodeConnected(remoteClusterNode)) {, +            return transportService.getConnection(remoteClusterNode);, +        }, +        DiscoveryNode discoveryNode = connectedNodes.getAny();, +        return new ProxyConnection(connection, remoteClusterNode);, +    }, +, +    static final class ProxyConnection implements Transport.Connection {, +        private final Transport.Connection proxyConnection;, +        private final DiscoveryNode targetNode;, +, +        private ProxyConnection(Transport.Connection proxyConnection, DiscoveryNode targetNode) {, +            this.proxyConnection = proxyConnection;, +            this.targetNode = targetNode;, +        }, +, +            return targetNode;, +            proxyConnection.sendRequest(requestId, TransportActionProxy.getProxyAction(action),, +                    TransportActionProxy.wrapRequest(targetNode, request), options);, +        public void close() {, +            return proxyConnection.getVersion();, +        return transportService.getConnection(getAnyConnectedNode());, +                protected void doRun() {, +    DiscoveryNode getAnyConnectedNode() {, +        return connectedNodes.getAny();, +    private static final class ConnectedNodes {, +        public synchronized DiscoveryNode getAny() {, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +        List<SearchShardIterator> shards = new ArrayList<>(remoteShardIterators);, +                    public void run() {, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterConnection.java, +import org.elasticsearch.core.internal.io.IOUtils;, +        final DiscoveryNode node = connectedNodes.getAny();, +            final DiscoveryNode node = connectedNodes.getAny();, +     * Returns a connection to the remote cluster, preferably a direct connection to the provided {@link DiscoveryNode}., +     * If such node is not connected, the returned connection will be a proxy connection that redirects to it., +        if (transportService.nodeConnected(remoteClusterNode)) {, +            return transportService.getConnection(remoteClusterNode);, +        }, +        DiscoveryNode discoveryNode = connectedNodes.getAny();, +        return new ProxyConnection(connection, remoteClusterNode);, +    }, +, +    static final class ProxyConnection implements Transport.Connection {, +        private final Transport.Connection proxyConnection;, +        private final DiscoveryNode targetNode;, +, +        private ProxyConnection(Transport.Connection proxyConnection, DiscoveryNode targetNode) {, +            this.proxyConnection = proxyConnection;, +            this.targetNode = targetNode;, +        }, +, +            return targetNode;, +            proxyConnection.sendRequest(requestId, TransportActionProxy.getProxyAction(action),, +                    TransportActionProxy.wrapRequest(targetNode, request), options);, +        public void close() {, +            return proxyConnection.getVersion();, +        return transportService.getConnection(getAnyConnectedNode());, +                protected void doRun() {, +    DiscoveryNode getAnyConnectedNode() {, +        return connectedNodes.getAny();, +    private static final class ConnectedNodes {, +        public synchronized DiscoveryNode getAny() {, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterConnectionTests.java, +import static org.hamcrest.Matchers.sameInstance;, +                                        DiscoveryNode node = connection.getAnyConnectedNode();, +, +    public void testGetConnection() throws Exception {, +        List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();, +        try (MockTransportService seedTransport = startTransport("seed_node", knownNodes, Version.CURRENT);, +             MockTransportService discoverableTransport = startTransport("discoverable_node", knownNodes, Version.CURRENT)) {, +, +            DiscoveryNode connectedNode = seedTransport.getLocalDiscoNode();, +            assertThat(connectedNode, notNullValue());, +            knownNodes.add(connectedNode);, +, +            DiscoveryNode disconnectedNode = discoverableTransport.getLocalDiscoNode();, +            assertThat(disconnectedNode, notNullValue());, +            knownNodes.add(disconnectedNode);, +, +            try (MockTransportService service = MockTransportService.createNewService(Settings.EMPTY, Version.CURRENT, threadPool, null)) {, +                Transport.Connection seedConnection = new Transport.Connection() {, +                    @Override, +                    public DiscoveryNode getNode() {, +                        return connectedNode;, +                    }, +, +                    @Override]