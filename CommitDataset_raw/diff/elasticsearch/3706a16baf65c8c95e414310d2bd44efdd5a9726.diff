[+++ b/core/src/main/java/org/elasticsearch/common/LegacyTimeBasedUUIDGenerator.java, + * These are essentially flake ids, but we use 6 (not 8) bytes for timestamp, and use 3 (not 2) bytes for sequence number., + * For more information about flake ids, check out, + * https://archive.fo/2015.07.08-082503/http://www.boundary.com/blog/2012/01/flake-a-decentralized-k-ordered-unique-id-generator-in-erlang/, +++ b/core/src/main/java/org/elasticsearch/common/LegacyTimeBasedUUIDGenerator.java, + * These are essentially flake ids, but we use 6 (not 8) bytes for timestamp, and use 3 (not 2) bytes for sequence number., + * For more information about flake ids, check out, + * https://archive.fo/2015.07.08-082503/http://www.boundary.com/blog/2012/01/flake-a-decentralized-k-ordered-unique-id-generator-in-erlang/, +++ b/core/src/main/java/org/elasticsearch/common/TimeBasedUUIDGenerator.java, +/**, + * These are essentially flake ids but we use 6 (not 8) bytes for timestamp, and use 3 (not 2) bytes for sequence number. We also reorder, + * bytes in a way that does not make ids sort in order anymore, but is more friendly to the way that the Lucene terms dictionary is, + * structured., + * For more information about flake ids, check out, + * https://archive.fo/2015.07.08-082503/http://www.boundary.com/blog/2012/01/flake-a-decentralized-k-ordered-unique-id-generator-in-erlang/, + */]