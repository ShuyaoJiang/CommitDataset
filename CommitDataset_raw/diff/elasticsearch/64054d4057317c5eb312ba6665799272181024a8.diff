[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/Actions.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/Actions.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +        if (state.nodes().isAllNodes(request.nodesIds)) {, +            final String[] nodesIds = state.nodes().resolveNodes(request.nodesIds);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/Actions.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +        if (state.nodes().isAllNodes(request.nodesIds)) {, +            final String[] nodesIds = state.nodes().resolveNodes(request.nodesIds);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +import org.elasticsearch.transport.BaseTransportRequestHandler;, +import org.elasticsearch.transport.BaseTransportResponseHandler;, +import org.elasticsearch.transport.TransportChannel;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportRequestOptions;, +import org.elasticsearch.transport.TransportResponseOptions;, +import org.elasticsearch.transport.TransportService;, +            String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/Actions.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +        if (state.nodes().isAllNodes(request.nodesIds)) {, +            final String[] nodesIds = state.nodes().resolveNodes(request.nodesIds);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +import org.elasticsearch.transport.BaseTransportRequestHandler;, +import org.elasticsearch.transport.BaseTransportResponseHandler;, +import org.elasticsearch.transport.TransportChannel;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportRequestOptions;, +import org.elasticsearch.transport.TransportResponseOptions;, +import org.elasticsearch.transport.TransportService;, +            String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.common.regex.Regex;, +import java.util.HashSet;, +    public boolean isAllNodes(String... nodesIds) {, +        return nodesIds == null || nodesIds.length == 0 || (nodesIds.length == 1 && nodesIds[0].equals("_all"));, +    }, +, +    public String[] resolveNodes(String... nodesIds) {, +        if (isAllNodes(nodesIds)) {, +            int index = 0;, +            nodesIds = new String[nodes.size()];, +            for (DiscoveryNode node : this) {, +                nodesIds[index++] = node.id();, +            }, +            return nodesIds;, +        } else {, +            Set<String> resolvedNodesIds = new HashSet<String>(nodesIds.length);, +            for (String nodeId : nodesIds) {, +                if (nodeId.equals("_local")) {, +                    resolvedNodesIds.add(localNodeId());, +                } else if (nodeId.equals("_master")) {, +                    resolvedNodesIds.add(masterNodeId());, +                } else if (nodeExists(nodeId)) {, +                    resolvedNodesIds.add(nodeId);, +                } else {, +                    // not a node id, try and search by name, +                    for (DiscoveryNode node : this) {, +                        if (Regex.simpleMatch(nodeId, node.name())) {, +                            resolvedNodesIds.add(node.id());, +                        }, +                    }, +                    for (DiscoveryNode node : this) {, +                        if (node.address().match(nodeId)) {, +                            resolvedNodesIds.add(node.id());, +                        }, +                    }, +                    int index = nodeId.indexOf(':');, +                    if (index != -1) {, +                        String matchAttrName = nodeId.substring(0, index);, +                        String matchAttrValue = nodeId.substring(index + 1);, +                        for (DiscoveryNode node : this) {, +                            for (Map.Entry<String, String> entry : node.attributes().entrySet()) {, +                                String attrName = entry.getKey();, +                                String attrValue = entry.getValue();, +                                if (Regex.simpleMatch(matchAttrName, attrName) && Regex.simpleMatch(matchAttrValue, attrValue)) {, +                                    resolvedNodesIds.add(node.id());, +                                }, +                            }, +                        }, +                    }, +                }, +            }, +            return resolvedNodesIds.toArray(new String[resolvedNodesIds.size()]);, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/Actions.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +        if (state.nodes().isAllNodes(request.nodesIds)) {, +            final String[] nodesIds = state.nodes().resolveNodes(request.nodesIds);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/nodes/TransportNodesOperationAction.java, +import org.elasticsearch.transport.BaseTransportRequestHandler;, +import org.elasticsearch.transport.BaseTransportResponseHandler;, +import org.elasticsearch.transport.TransportChannel;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportRequestOptions;, +import org.elasticsearch.transport.TransportResponseOptions;, +import org.elasticsearch.transport.TransportService;, +            String[] nodesIds = clusterState.nodes().resolveNodes(request.nodesIds());]