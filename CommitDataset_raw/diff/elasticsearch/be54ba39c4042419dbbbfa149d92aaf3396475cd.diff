[+++ b/server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            throw new MapperParsingException("failed to parse field [{}] of type [{}]", e, fieldType().name(),, +                    fieldType().typeName());, +++ b/server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            throw new MapperParsingException("failed to parse field [{}] of type [{}]", e, fieldType().name(),, +                    fieldType().typeName());, +++ b/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeFieldMapper.java, +                throw new MapperParsingException("failed to parse field [{}] of type [{}]", e, fieldType().name(),, +                        fieldType().typeName());, +++ b/server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            throw new MapperParsingException("failed to parse field [{}] of type [{}]", e, fieldType().name(),, +                    fieldType().typeName());, +++ b/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeFieldMapper.java, +                throw new MapperParsingException("failed to parse field [{}] of type [{}]", e, fieldType().name(),, +                        fieldType().typeName());, +++ b/server/src/test/java/org/elasticsearch/index/mapper/BooleanFieldMapperTests.java, +        assertEquals("failed to parse field [field] of type [boolean]", ex.getMessage());, +++ b/server/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +            throw new MapperParsingException("failed to parse field [{}] of type [{}]", e, fieldType().name(),, +                    fieldType().typeName());, +++ b/server/src/main/java/org/elasticsearch/index/mapper/GeoShapeFieldMapper.java, +                throw new MapperParsingException("failed to parse field [{}] of type [{}]", e, fieldType().name(),, +                        fieldType().typeName());, +++ b/server/src/test/java/org/elasticsearch/index/mapper/BooleanFieldMapperTests.java, +        assertEquals("failed to parse field [field] of type [boolean]", ex.getMessage());, +++ b/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java, +    public void testUnexpectedFieldMappingType() throws Exception {, +        DocumentMapperParser mapperParser = createIndex("test").mapperService().documentMapperParser();, +        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties"), +                .startObject("foo").field("type", "long").endObject(), +                .startObject("bar").field("type", "boolean").endObject(), +                .startObject("geo").field("type", "geo_shape").endObject(), +                .endObject().endObject().endObject());, +        DocumentMapper mapper = mapperParser.parse("type", new CompressedXContent(mapping));, +        {, +            BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("foo", true).endObject());, +            MapperException exception = expectThrows(MapperException.class,, +                    () -> mapper.parse(SourceToParse.source("test", "type", "1", bytes, XContentType.JSON)));, +            assertThat(exception.getMessage(), containsString("failed to parse field [foo] of type [long]"));, +        }, +        {, +            BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("bar", "bar").endObject());, +            MapperException exception = expectThrows(MapperException.class,, +                    () -> mapper.parse(SourceToParse.source("test", "type", "2", bytes, XContentType.JSON)));, +            assertThat(exception.getMessage(), containsString("failed to parse field [bar] of type [boolean]"));, +        }, +        {, +            BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field("geo", 123).endObject());, +            MapperException exception = expectThrows(MapperException.class,, +                    () -> mapper.parse(SourceToParse.source("test", "type", "2", bytes, XContentType.JSON)));, +            assertThat(exception.getMessage(), containsString("failed to parse field [geo] of type [geo_shape]"));, +        }, +, +    }, +]