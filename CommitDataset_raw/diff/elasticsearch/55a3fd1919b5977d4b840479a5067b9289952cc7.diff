[+++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +import org.elasticsearch.node.NodeValidationException;, +import static org.elasticsearch.discovery.DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING;, +            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :, +                "automatically managing min master nodes require nodes to complete a join cycle" +, +                    "when starting";, +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +import org.elasticsearch.node.NodeValidationException;, +import static org.elasticsearch.discovery.DiscoverySettings.INITIAL_STATE_TIMEOUT_SETTING;, +            assert finalSettings.get(INITIAL_STATE_TIMEOUT_SETTING.getKey()) == null :, +                "automatically managing min master nodes require nodes to complete a join cycle" +, +                    "when starting";, +++ b/test/framework/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java, +import java.util.ArrayList;, +        InternalTestCluster cluster = new InternalTestCluster(randomLong(), baseDir, false,, +            false, 0, 0, "test", new NodeConfigurationSource() {, +        List<DiscoveryNode.Role> roles = new ArrayList<>();, +        for (int i = 0; i < numNodes; i++) {, +            final DiscoveryNode.Role role = i == numNodes - 1 && roles.contains(MASTER) == false ?, +                MASTER : // last node and still no master, +                randomFrom(MASTER, DiscoveryNode.Role.DATA, DiscoveryNode.Role.INGEST);, +            roles.add(role);, +        }, +, +        final Settings minMasterNodes = Settings.builder(), +            .put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(),, +                roles.stream().filter(role -> role == MASTER).count() / 2 + 1, +            ).build();, +                final DiscoveryNode.Role role = roles.get(i);, +                        node = cluster.startMasterOnlyNode(minMasterNodes);, +                        node = cluster.startDataOnlyNode(minMasterNodes);, +                        node = cluster.startCoordinatingOnlyNode(minMasterNodes);]