[+++ b/src/main/java/org/elasticsearch/search/highlight/PostingsHighlighter.java, +import org.apache.lucene.search.MultiTermQuery;, +import org.apache.lucene.search.ScoringRewrite;, +import org.apache.lucene.search.TopTermsRewrite;, +            //get the non rewritten query and rewrite it, +                query = rewrite(context, hitContext.topLevelReader());, +                Snippet[] fieldSnippets = highlighter.highlightDoc(highlighterContext.fieldName, mapperHighlighterEntry.filteredQueryTerms, context.searcher(), hitContext.docId(), numberOfFragments);, +    private static Query rewrite(SearchContext searchContext, IndexReader reader) throws IOException {, +        //rewrite is expensive: if the query was already rewritten we try not to rewrite, +        boolean mustRewrite = !searchContext.queryRewritten();, +        Query original = searchContext.parsedQuery().query();, +, +        MultiTermQuery originalMultiTermQuery = null;, +        MultiTermQuery.RewriteMethod originalRewriteMethod = null;, +        if (original instanceof MultiTermQuery) {, +            originalMultiTermQuery = (MultiTermQuery) original;, +            if (!allowsForTermExtraction(originalMultiTermQuery.getRewriteMethod())) {, +                originalRewriteMethod = originalMultiTermQuery.getRewriteMethod();, +                originalMultiTermQuery.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(50));, +                //we need to rewrite anyway if it is a multi term query which was rewritten with the wrong rewrite method, +                mustRewrite = true;, +            }, +        }, +, +        if (!mustRewrite) {, +            //return the rewritten query, +            return searchContext.query();, +        }, +, +        for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;, +             rewrittenQuery = query.rewrite(reader)) {, +, +        if (originalMultiTermQuery != null) {, +            if (originalRewriteMethod != null) {, +                //set back the original rewrite method after the rewrite is done, +                originalMultiTermQuery.setRewriteMethod(originalRewriteMethod);, +            }, +        }, +, +    private static boolean allowsForTermExtraction(MultiTermQuery.RewriteMethod rewriteMethod) {, +        return rewriteMethod instanceof TopTermsRewrite || rewriteMethod instanceof ScoringRewrite;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/highlight/PostingsHighlighter.java, +import org.apache.lucene.search.MultiTermQuery;, +import org.apache.lucene.search.ScoringRewrite;, +import org.apache.lucene.search.TopTermsRewrite;, +            //get the non rewritten query and rewrite it, +                query = rewrite(context, hitContext.topLevelReader());, +                Snippet[] fieldSnippets = highlighter.highlightDoc(highlighterContext.fieldName, mapperHighlighterEntry.filteredQueryTerms, context.searcher(), hitContext.docId(), numberOfFragments);, +    private static Query rewrite(SearchContext searchContext, IndexReader reader) throws IOException {, +        //rewrite is expensive: if the query was already rewritten we try not to rewrite, +        boolean mustRewrite = !searchContext.queryRewritten();, +        Query original = searchContext.parsedQuery().query();, +, +        MultiTermQuery originalMultiTermQuery = null;, +        MultiTermQuery.RewriteMethod originalRewriteMethod = null;, +        if (original instanceof MultiTermQuery) {, +            originalMultiTermQuery = (MultiTermQuery) original;, +            if (!allowsForTermExtraction(originalMultiTermQuery.getRewriteMethod())) {, +                originalRewriteMethod = originalMultiTermQuery.getRewriteMethod();, +                originalMultiTermQuery.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(50));, +                //we need to rewrite anyway if it is a multi term query which was rewritten with the wrong rewrite method, +                mustRewrite = true;, +            }, +        }, +, +        if (!mustRewrite) {, +            //return the rewritten query, +            return searchContext.query();, +        }, +, +        for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;, +             rewrittenQuery = query.rewrite(reader)) {, +, +        if (originalMultiTermQuery != null) {, +            if (originalRewriteMethod != null) {, +                //set back the original rewrite method after the rewrite is done, +                originalMultiTermQuery.setRewriteMethod(originalRewriteMethod);, +            }, +        }, +, +    private static boolean allowsForTermExtraction(MultiTermQuery.RewriteMethod rewriteMethod) {, +        return rewriteMethod instanceof TopTermsRewrite || rewriteMethod instanceof ScoringRewrite;, +    }, +, +++ b/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchTests.java, +                .setSource("field1", "this is a test", "field2", "The quick brown fox jumps over the lazy quick dog").setRefresh(true).get();, +        assertThat(searchResponse.getHits().getAt(0).highlightFields().get("field2").fragments()[0].string(), equalTo("The <xxx>quick</xxx> brown fox jumps over the lazy <xxx>quick</xxx> dog"));, +                .query(matchPhraseQuery("_all", "quick brown")), +        //phrase query results in highlighting all different terms regardless of their positions, +        assertThat(searchResponse.getHits().getAt(0).highlightFields().get("field2").fragments()[0].string(), equalTo("The <xxx>quick</xxx> <xxx>brown</xxx> fox jumps over the lazy <xxx>quick</xxx> dog"));, +        //lets fall back to the standard highlighter then, what people would do to highlight query matches, +                .query(matchPhraseQuery("_all", "quick brown")), +        assertThat(searchResponse.getHits().getAt(0).highlightFields().get("field2").fragments()[0].string(), equalTo("The <xxx>quick</xxx> <xxx>brown</xxx> fox jumps over the lazy quick dog"));, +    private static final String[] REWRITE_METHODS = new String[]{"constant_score_auto", "scoring_boolean", "constant_score_boolean",, +            "constant_score_filter", "top_terms_boost_50", "top_terms_50"};, +, +    @Test, +    public void testPostingsHighlighterPrefixQuery() throws Exception {]