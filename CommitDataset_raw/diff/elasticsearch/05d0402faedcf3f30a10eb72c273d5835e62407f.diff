[+++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestUtils.java, +    private static final Comparator<SuggestWord> LUCENE_FREQUENCY = new SuggestWordFrequencyComparator();, +    private static final Comparator<SuggestWord> SCORE_COMPARATOR = SuggestWordQueue.DEFAULT_COMPARATOR;, +            success = true;, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestUtils.java, +    private static final Comparator<SuggestWord> LUCENE_FREQUENCY = new SuggestWordFrequencyComparator();, +    private static final Comparator<SuggestWord> SCORE_COMPARATOR = SuggestWordQueue.DEFAULT_COMPARATOR;, +            success = true;, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGeneratorBuilder.java, +import org.apache.lucene.search.spell.DirectSpellChecker;, +import org.apache.lucene.search.spell.JaroWinklerDistance;, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.search.spell.LuceneLevenshteinDistance;, +import org.apache.lucene.search.spell.NGramDistance;, +import org.apache.lucene.search.spell.StringDistance;, +import org.apache.lucene.search.spell.SuggestMode;, +import java.util.Locale;, +            generator.suggestMode(resolveSuggestMode(this.suggestMode));, +            generator.stringDistance(resolveDistance(this.stringDistance));, +    private static SuggestMode resolveSuggestMode(String suggestMode) {, +        suggestMode = suggestMode.toLowerCase(Locale.US);, +        if ("missing".equals(suggestMode)) {, +            return SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;, +        } else if ("popular".equals(suggestMode)) {, +            return SuggestMode.SUGGEST_MORE_POPULAR;, +        } else if ("always".equals(suggestMode)) {, +            return SuggestMode.SUGGEST_ALWAYS;, +        } else {, +            throw new IllegalArgumentException("Illegal suggest mode " + suggestMode);, +        }, +    }, +, +    private static StringDistance resolveDistance(String distanceVal) {, +        distanceVal = distanceVal.toLowerCase(Locale.US);, +        if ("internal".equals(distanceVal)) {, +            return DirectSpellChecker.INTERNAL_LEVENSHTEIN;, +        } else if ("damerau_levenshtein".equals(distanceVal) || "damerauLevenshtein".equals(distanceVal)) {, +            return new LuceneLevenshteinDistance();, +        } else if ("levenstein".equals(distanceVal)) {, +            return new LevensteinDistance();, +            //TODO Jaro and Winkler are 2 people - so apply same naming logic as damerau_levenshtein, +        } else if ("jarowinkler".equals(distanceVal)) {, +            return new JaroWinklerDistance();, +        } else if ("ngram".equals(distanceVal)) {, +            return new NGramDistance();, +        } else {, +            throw new IllegalArgumentException("Illegal distance option " + distanceVal);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestUtils.java, +    private static final Comparator<SuggestWord> LUCENE_FREQUENCY = new SuggestWordFrequencyComparator();, +    private static final Comparator<SuggestWord> SCORE_COMPARATOR = SuggestWordQueue.DEFAULT_COMPARATOR;, +            success = true;, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGeneratorBuilder.java, +import org.apache.lucene.search.spell.DirectSpellChecker;, +import org.apache.lucene.search.spell.JaroWinklerDistance;, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.search.spell.LuceneLevenshteinDistance;, +import org.apache.lucene.search.spell.NGramDistance;, +import org.apache.lucene.search.spell.StringDistance;, +import org.apache.lucene.search.spell.SuggestMode;, +import java.util.Locale;, +            generator.suggestMode(resolveSuggestMode(this.suggestMode));, +            generator.stringDistance(resolveDistance(this.stringDistance));, +    private static SuggestMode resolveSuggestMode(String suggestMode) {, +        suggestMode = suggestMode.toLowerCase(Locale.US);, +        if ("missing".equals(suggestMode)) {, +            return SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;, +        } else if ("popular".equals(suggestMode)) {, +            return SuggestMode.SUGGEST_MORE_POPULAR;, +        } else if ("always".equals(suggestMode)) {, +            return SuggestMode.SUGGEST_ALWAYS;, +        } else {, +            throw new IllegalArgumentException("Illegal suggest mode " + suggestMode);, +        }, +    }, +, +    private static StringDistance resolveDistance(String distanceVal) {, +        distanceVal = distanceVal.toLowerCase(Locale.US);, +        if ("internal".equals(distanceVal)) {, +            return DirectSpellChecker.INTERNAL_LEVENSHTEIN;, +        } else if ("damerau_levenshtein".equals(distanceVal) || "damerauLevenshtein".equals(distanceVal)) {, +            return new LuceneLevenshteinDistance();, +        } else if ("levenstein".equals(distanceVal)) {, +            return new LevensteinDistance();, +            //TODO Jaro and Winkler are 2 people - so apply same naming logic as damerau_levenshtein, +        } else if ("jarowinkler".equals(distanceVal)) {, +            return new JaroWinklerDistance();, +        } else if ("ngram".equals(distanceVal)) {, +            return new NGramDistance();, +        } else {, +            throw new IllegalArgumentException("Illegal distance option " + distanceVal);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +import org.apache.lucene.analysis.Analyzer;, +import org.elasticsearch.index.analysis.CustomAnalyzer;, +import org.elasticsearch.index.analysis.NamedAnalyzer;]