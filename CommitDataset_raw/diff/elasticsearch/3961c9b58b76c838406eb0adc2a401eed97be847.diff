[+++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `gradle eclipse` then `File: Import: Existing Projects into Workspace`. Select the option `Search for nested projects`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `gradle eclipse` then `File: Import: Existing Projects into Workspace`. Select the option `Search for nested projects`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +import org.gradle.plugins.ide.eclipse.model.SourceFolder, +// eclipse configuration, +  plugins.withType(JavaBasePlugin) {, +    eclipse.classpath.defaultOutputDir = new File(project.buildDir, 'eclipse'), +    eclipse.classpath.file.whenMerged { classpath ->, +      // give each source folder a unique corresponding output folder, +      int i = 0;, +      classpath.entries.findAll { it instanceof SourceFolder }.each { folder ->, +        i++;, +        // this is *NOT* a path or a file., +        folder.output = "build/eclipse/" + i, +      }, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `gradle eclipse` then `File: Import: Existing Projects into Workspace`. Select the option `Search for nested projects`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/build.gradle, +import org.gradle.plugins.ide.eclipse.model.SourceFolder, +// eclipse configuration, +  plugins.withType(JavaBasePlugin) {, +    eclipse.classpath.defaultOutputDir = new File(project.buildDir, 'eclipse'), +    eclipse.classpath.file.whenMerged { classpath ->, +      // give each source folder a unique corresponding output folder, +      int i = 0;, +      classpath.entries.findAll { it instanceof SourceFolder }.each { folder ->, +        i++;, +        // this is *NOT* a path or a file., +        folder.output = "build/eclipse/" + i, +      }, +++ /dev/null]