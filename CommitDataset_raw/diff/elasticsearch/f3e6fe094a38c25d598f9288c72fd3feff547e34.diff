[+++ b/src/test/java/org/elasticsearch/test/integration/search/facet/SimpleFacetsTests.java, +                    .field("multiValued", ""+i, "" + (90 + i%10)), +        String[] execHint = new String[] {"map", null};, +        for (String hint : execHint) {, +            , +                    .addFacet(termsFacet("double").executionHint(hint).field("double").size(10)), +                    .addFacet(termsFacet("float").executionHint(hint).field("float").size(10)), +                    .addFacet(termsFacet("integer").executionHint(hint).field("integer").size(10)), +                    .addFacet(termsFacet("long").executionHint(hint).field("long").size(10)), +                    .addFacet(termsFacet("short").executionHint(hint).field("short").size(10)), +                    .addFacet(termsFacet("byte").executionHint(hint).field("byte").size(10)), +                    .addFacet(termsFacet("termFacet").executionHint(hint).field("name").size(10)), +                    .addFacet(termsFacet("termFacetRegex").executionHint(hint).field("multiValued").regex("9\\d").size(20)), +                    .addFacet(termsFacet("termFacetScript").executionHint(hint).field("multiValued").script("Integer.toHexString(Integer.parseInt(term))").size(10)), +                    .addFacet(termsFacet("termFacetScriptRegex").executionHint(hint).field("multiValued").script("Integer.toHexString(Integer.parseInt(term))").regex("9\\d").size(20)), +            facet = searchResponse.getFacets().facet("termFacetRegex");, +            assertThat(facet.getName(), equalTo("termFacetRegex"));, +            assertThat(facet.getEntries().size(), equalTo(10));, +            assertThat(facet.getTotalCount(), equalTo(190l));, +            assertThat(facet.getOtherCount(), equalTo(90l));, +            assertThat(facet.getMissingCount(), equalTo(10l));, +            , +            int count = 99;, +            for (Entry entry : facet) {, +                assertThat(Integer.parseInt(entry.getTerm().string()), equalTo(count--));, +                assertThat(entry.getCount(), equalTo(10));, +            }, +            , +            facet = searchResponse.getFacets().facet("termFacetScriptRegex");, +            assertThat(facet.getName(), equalTo("termFacetScriptRegex"));, +            assertThat(facet.getEntries().size(), equalTo(10));, +            assertThat(facet.getTotalCount(), equalTo(190l));, +            assertThat(facet.getOtherCount(), equalTo(90l));, +            assertThat(facet.getMissingCount(), equalTo(10l));, +            , +            count = 99;, +            for (Entry entry : facet) {, +                assertThat(entry.getTerm().string(), equalTo(Integer.toHexString(count--)));, +                assertThat(entry.getCount(), equalTo(10));, +            }, +            , +            facet = searchResponse.getFacets().facet("termFacetScript");, +            assertThat(facet.getName(), equalTo("termFacetScript"));, +            assertThat(facet.getEntries().size(), equalTo(10));, +            assertThat(facet.getTotalCount(), equalTo(190l));, +            assertThat(facet.getOtherCount(), equalTo(90l));, +            assertThat(facet.getMissingCount(), equalTo(10l));, +            , +            count = 99;, +            for (Entry entry : facet) {, +                assertThat(entry.getTerm().string(), equalTo(Integer.toHexString(count--)));, +                assertThat(entry.getCount(), equalTo(10));, +            }, +            , +        }        , +                     switch(count.incrementAndGet() % 6) {, +                     case 4:, +                         facetRequest = client.prepareSearch(), +                          .setQuery(matchAllQuery()), +                          .addFacet(termsFacet("termFacet").executionHint("map").field("name").script("\"\" + (Integer.parseInt(term) % 100)").size(10));, +                         break;, +                     case 3:, +                         facetRequest = client.prepareSearch(), +                          .setQuery(matchAllQuery()), +                          .addFacet(termsFacet("termFacet").field("name").regex("\\d+").size(10));, +                         break;, +        ]