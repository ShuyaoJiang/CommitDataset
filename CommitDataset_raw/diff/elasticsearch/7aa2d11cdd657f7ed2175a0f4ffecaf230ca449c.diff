[+++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.action.ActionRequest;, +     * Constructs a new request to create an index that was triggered by a different request,, +     * provided as an argument so that its headers and context can be copied to the new request., +     */, +    public CreateIndexRequest(ActionRequest request) {, +        super(request);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.action.ActionRequest;, +     * Constructs a new request to create an index that was triggered by a different request,, +     * provided as an argument so that its headers and context can be copied to the new request., +     */, +    public CreateIndexRequest(ActionRequest request) {, +        super(request);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                    createIndexAction.execute(new CreateIndexRequest(bulkRequest).index(index).cause("auto(bulk api)").masterNodeTimeout(bulkRequest.timeout()), new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.action.ActionRequest;, +     * Constructs a new request to create an index that was triggered by a different request,, +     * provided as an argument so that its headers and context can be copied to the new request., +     */, +    public CreateIndexRequest(ActionRequest request) {, +        super(request);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                    createIndexAction.execute(new CreateIndexRequest(bulkRequest).index(index).cause("auto(bulk api)").masterNodeTimeout(bulkRequest.timeout()), new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +            createIndexAction.execute(new CreateIndexRequest(request).index(request.index()).cause("auto(delete api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.action.ActionRequest;, +     * Constructs a new request to create an index that was triggered by a different request,, +     * provided as an argument so that its headers and context can be copied to the new request., +     */, +    public CreateIndexRequest(ActionRequest request) {, +        super(request);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                    createIndexAction.execute(new CreateIndexRequest(bulkRequest).index(index).cause("auto(bulk api)").masterNodeTimeout(bulkRequest.timeout()), new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +            createIndexAction.execute(new CreateIndexRequest(request).index(request.index()).cause("auto(delete api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +            createIndexAction.execute(new CreateIndexRequest(request).index(request.index()).cause("auto(index api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.action.ActionRequest;, +     * Constructs a new request to create an index that was triggered by a different request,, +     * provided as an argument so that its headers and context can be copied to the new request., +     */, +    public CreateIndexRequest(ActionRequest request) {, +        super(request);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                    createIndexAction.execute(new CreateIndexRequest(bulkRequest).index(index).cause("auto(bulk api)").masterNodeTimeout(bulkRequest.timeout()), new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +            createIndexAction.execute(new CreateIndexRequest(request).index(request.index()).cause("auto(delete api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +            createIndexAction.execute(new CreateIndexRequest(request).index(request.index()).cause("auto(index api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/support/master/AcknowledgedRequest.java, +import org.elasticsearch.action.ActionRequest;, +    protected AcknowledgedRequest(ActionRequest request) {, +        super(request);, +    }, +, +++ b/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +import org.elasticsearch.action.ActionRequest;, +     * Constructs a new request to create an index that was triggered by a different request,, +     * provided as an argument so that its headers and context can be copied to the new request., +     */, +    public CreateIndexRequest(ActionRequest request) {, +        super(request);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                    createIndexAction.execute(new CreateIndexRequest(bulkRequest).index(index).cause("auto(bulk api)").masterNodeTimeout(bulkRequest.timeout()), new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +            createIndexAction.execute(new CreateIndexRequest(request).index(request.index()).cause("auto(delete api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java, +            createIndexAction.execute(new CreateIndexRequest(request).index(request.index()).cause("auto(index api)").masterNodeTimeout(request.timeout()), new ActionListener<CreateIndexResponse>() {, +++ b/src/main/java/org/elasticsearch/action/support/master/AcknowledgedRequest.java, +import org.elasticsearch.action.ActionRequest;, +    protected AcknowledgedRequest(ActionRequest request) {, +        super(request);, +    }, +, +++ b/src/main/java/org/elasticsearch/action/support/master/MasterNodeOperationRequest.java, +    protected MasterNodeOperationRequest() {, +, +    }]