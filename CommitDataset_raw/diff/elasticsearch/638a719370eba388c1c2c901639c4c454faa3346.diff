[+++ b/docs/reference/aggregations/bucket/iprange-aggregation.asciidoc, +                    "key": "*-10.0.0.5",, +                    "key": "10.0.0.5-*",, +++ b/docs/reference/aggregations/bucket/iprange-aggregation.asciidoc, +                    "key": "*-10.0.0.5",, +                    "key": "10.0.0.5-*",, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search.aggregation/40_range.yml, +"IP Range Key Generation":, +  - skip:, +     version: " - 6.99.99", +     reason: "Before 7.0.0, ip_range did not always generate bucket keys (see #21045).", +, +  - do:, +      search:, +        body: { "size" : 0, "aggs" : { "ip_range" : { "ip_range" : { "field" : "ip", "ranges": [ { "to": "192.168.0.0" }, { "from": "192.168.0.0", "to": "192.169.0.0" }, { "from": "192.169.0.0" } ] } } } }, +, +  - length: { aggregations.ip_range.buckets: 3 }, +  - match: { aggregations.ip_range.buckets.0.key: "*-192.168.0.0" }, +  - match: { aggregations.ip_range.buckets.1.key: "192.168.0.0-192.169.0.0" }, +  - match: { aggregations.ip_range.buckets.2.key: "192.169.0.0-*" }, +, +---, +++ b/docs/reference/aggregations/bucket/iprange-aggregation.asciidoc, +                    "key": "*-10.0.0.5",, +                    "key": "10.0.0.5-*",, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search.aggregation/40_range.yml, +"IP Range Key Generation":, +  - skip:, +     version: " - 6.99.99", +     reason: "Before 7.0.0, ip_range did not always generate bucket keys (see #21045).", +, +  - do:, +      search:, +        body: { "size" : 0, "aggs" : { "ip_range" : { "ip_range" : { "field" : "ip", "ranges": [ { "to": "192.168.0.0" }, { "from": "192.168.0.0", "to": "192.169.0.0" }, { "from": "192.169.0.0" } ] } } } }, +, +  - length: { aggregations.ip_range.buckets: 3 }, +  - match: { aggregations.ip_range.buckets.0.key: "*-192.168.0.0" }, +  - match: { aggregations.ip_range.buckets.1.key: "192.168.0.0-192.169.0.0" }, +  - match: { aggregations.ip_range.buckets.2.key: "192.169.0.0-*" }, +, +---, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/InternalBinaryRange.java, +import org.elasticsearch.Version;, +            this.key = key != null ? key : generateKey(from, to, format);, +        private static String generateKey(BytesRef from, BytesRef to, DocValueFormat format) {, +            StringBuilder builder = new StringBuilder(), +                .append(from == null ? "*" : format.format(from)), +                .append("-"), +                .append(to == null ? "*" : format.format(to));, +            return builder.toString();, +, +        private static Bucket createFromStream(StreamInput in, DocValueFormat format, boolean keyed) throws IOException {, +            String key = in.getVersion().onOrAfter(Version.V_7_0_0_alpha1), +                ? in.readString(), +                : in.readOptionalString();, +, +            BytesRef from = in.readBoolean() ? in.readBytesRef() : null;, +            BytesRef to = in.readBoolean() ? in.readBytesRef() : null;, +            long docCount = in.readLong();, +            InternalAggregations aggregations = InternalAggregations.readAggregations(in);, +, +            return new Bucket(format, keyed, key, from, to, docCount, aggregations);, +            if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +                out.writeString(key);, +            } else {, +            }, +        buckets = in.readList(stream -> Bucket.createFromStream(stream, format, keyed));, +++ b/docs/reference/aggregations/bucket/iprange-aggregation.asciidoc, +                    "key": "*-10.0.0.5",, +                    "key": "10.0.0.5-*",, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search.aggregation/40_range.yml, +"IP Range Key Generation":, +  - skip:, +     version: " - 6.99.99", +     reason: "Before 7.0.0, ip_range did not always generate bucket keys (see #21045).", +, +  - do:, +      search:, +        body: { "size" : 0, "aggs" : { "ip_range" : { "ip_range" : { "field" : "ip", "ranges": [ { "to": "192.168.0.0" }, { "from": "192.168.0.0", "to": "192.169.0.0" }, { "from": "192.169.0.0" } ] } } } }, +, +  - length: { aggregations.ip_range.buckets: 3 }, +  - match: { aggregations.ip_range.buckets.0.key: "*-192.168.0.0" }, +  - match: { aggregations.ip_range.buckets.1.key: "192.168.0.0-192.169.0.0" }, +  - match: { aggregations.ip_range.buckets.2.key: "192.169.0.0-*" }, +, +---, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/range/InternalBinaryRange.java, +import org.elasticsearch.Version;, +            this.key = key != null ? key : generateKey(from, to, format);, +        private static String generateKey(BytesRef from, BytesRef to, DocValueFormat format) {, +            StringBuilder builder = new StringBuilder(), +                .append(from == null ? "*" : format.format(from)), +                .append("-"), +                .append(to == null ? "*" : format.format(to));, +            return builder.toString();, +, +        private static Bucket createFromStream(StreamInput in, DocValueFormat format, boolean keyed) throws IOException {, +            String key = in.getVersion().onOrAfter(Version.V_7_0_0_alpha1), +                ? in.readString(), +                : in.readOptionalString();]