[+++ b/src/test/java/org/elasticsearch/test/InternalTestCluster.java, +import static com.carrotsearch.randomizedtesting.RandomizedTest.isNightly;, +        return new NodeAndClient(name, node);, +        NodeAndClient(String name, Node node) {, +            double nextDouble = random.nextDouble();, +            if (nextDouble < transportClientRatio) {, +                if (logger.isDebugEnabled()) {, +                    logger.debug("Using transport client for node [{}] sniff: [{}]", node.settings().get("name"), false);, +                return getOrBuildTransportClient();, +            } else {, +                return getOrBuildNodeClient();, +            }, +            return getOrBuildNodeClient();, +            return getOrBuildTransportClient();, +, +        private Client getOrBuildNodeClient() {, +            if (nodeClient != null) {, +                return nodeClient;, +            return nodeClient = node.client();, +        }, +, +        private Client getOrBuildTransportClient() {, +            if (transportClient != null) {, +            /* no sniff client for now - doesn't work will all tests since it might throw NoNodeAvailableException if nodes are shut down., +             * we first need support of transportClientRatio as annotations or so, +             */, +            return transportClient = TransportClientFactory.noSniff(settingsSource.transportClient()).client(node, clusterName, random);, +        }, +            Releasables.close(nodeClient, transportClient);, +            resetClient();, +            resetClient();, +    static class TransportClientFactory {, +        randomlyResetClients();, +        randomlyResetClients(); /* reset all clients - each test gets its own client based on the Random instance created above. */, +    private void randomlyResetClients() throws IOException {, +        // only reset the clients on nightly tests, it causes heavy load..., +        if (isNightly() && rarely(random)) {, +    }]