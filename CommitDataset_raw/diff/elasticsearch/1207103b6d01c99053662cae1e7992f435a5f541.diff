[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            }, +++ b/plugins/repository-s3/build.gradle, +integTestCluster {, +  keystoreSetting 's3.client.default.access_key', 'myaccesskey', +  keystoreSetting 's3.client.default.secret_key', 'mysecretkey', +}, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            }, +++ b/plugins/repository-s3/build.gradle, +integTestCluster {, +  keystoreSetting 's3.client.default.access_key', 'myaccesskey', +  keystoreSetting 's3.client.default.secret_key', 'mysecretkey', +}, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/InternalAwsS3Service.java, +    private final Map<String, S3ClientSettings> clientsSettings;, +    private final Map<String, AmazonS3Client> clientsCache = new HashMap<>();, +, +    InternalAwsS3Service(Settings settings, Map<String, S3ClientSettings> clientsSettings) {, +        this.clientsSettings = clientsSettings;, +        AmazonS3Client client = clientsCache.get(clientName);, +        S3ClientSettings clientSettings = clientsSettings.get(clientName);, +        if (clientSettings == null) {, +            throw new IllegalArgumentException("Unknown s3 client name [" + clientName + "]. " +, +                "Existing client configs: " +, +                Strings.collectionToDelimitedString(clientsSettings.keySet(), ","));, +        }, +, +        String endpoint = findEndpoint(logger, clientSettings, repositorySettings);, +            clientName, endpoint, maxRetries, useThrottleRetries, pathStyleAccess);, +        AWSCredentialsProvider credentials = buildCredentials(logger, deprecationLogger, clientSettings, repositorySettings);, +        ClientConfiguration configuration = buildConfiguration(logger, clientSettings, repositorySettings, maxRetries, endpoint, useThrottleRetries);, +, +        client = new AmazonS3Client(credentials, configuration);, +        if (Strings.hasText(endpoint)) {, +            client.setEndpoint(endpoint);, +        clientsCache.put(clientName, client);, +    static ClientConfiguration buildConfiguration(Logger logger, S3ClientSettings clientSettings, Settings repositorySettings,, +                                                  Integer maxRetries, String endpoint, boolean useThrottleRetries) {, +        Protocol protocol = getRepoValue(repositorySettings, S3Repository.Repository.PROTOCOL_SETTING, clientSettings.protocol);, +        if (Strings.hasText(clientSettings.proxyHost)) {, +            // TODO: remove this leniency, these settings should exist together and be validated, +            clientConfiguration.setProxyHost(clientSettings.proxyHost);, +            clientConfiguration.setProxyPort(clientSettings.proxyPort);, +            clientConfiguration.setProxyUsername(clientSettings.proxyUsername);, +            clientConfiguration.setProxyPassword(clientSettings.proxyPassword);, +        clientConfiguration.setSocketTimeout(clientSettings.readTimeoutMillis);, +    // pkg private for tests, +    static AWSCredentialsProvider buildCredentials(Logger logger, DeprecationLogger deprecationLogger,, +                                                   S3ClientSettings clientSettings, Settings repositorySettings) {, +        BasicAWSCredentials credentials = clientSettings.credentials;, +        if (S3Repository.Repository.KEY_SETTING.exists(repositorySettings)) {, +            if (S3Repository.Repository.SECRET_SETTING.exists(repositorySettings) == false) {, +                throw new IllegalArgumentException("Repository setting [" + S3Repository.Repository.KEY_SETTING +, +                    " must be accompanied by setting [" + S3Repository.Repository.SECRET_SETTING + "]");, +            }, +            // backcompat for reading keys out of repository settings, +            deprecationLogger.deprecated("Using s3 access/secret key from repository settings. Instead " +, +                "store these in named clients and the elasticsearch keystore for secure settings.");, +            try (SecureString key = S3Repository.Repository.KEY_SETTING.get(repositorySettings);, +                 SecureString secret = S3Repository.Repository.SECRET_SETTING.get(repositorySettings)) {, +                credentials = new BasicAWSCredentials(key.toString(), secret.toString());, +            }, +        } else if (S3Repository.Repository.SECRET_SETTING.exists(repositorySettings)) {, +            throw new IllegalArgumentException("Repository setting [" + S3Repository.Repository.SECRET_SETTING +, +                " must be accompanied by setting [" + S3Repository.Repository.KEY_SETTING + "]");, +        }, +        if (credentials == null) {, +            return new StaticCredentialsProvider(credentials);, +    static String findEndpoint(Logger logger, S3ClientSettings clientSettings, Settings repositorySettings) {, +        String endpoint = getRepoValue(repositorySettings, S3Repository.Repository.ENDPOINT_SETTING, clientSettings.endpoint);, +        if (Strings.hasText(endpoint)) {, +    /** Returns the value for a given setting from the repository, or returns the fallback value. */, +    private static <T> T getRepoValue(Settings repositorySettings, Setting<T> repositorySetting, T fallback) {, +        if (repositorySetting.exists(repositorySettings)) {, +            return repositorySetting.get(repositorySettings);, +        return fallback;, +        for (AmazonS3Client client : clientsCache.values()) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            }, +++ b/plugins/repository-s3/build.gradle, +integTestCluster {, +  keystoreSetting 's3.client.default.access_key', 'myaccesskey', +  keystoreSetting 's3.client.default.secret_key', 'mysecretkey', +}, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/InternalAwsS3Service.java, +    private final Map<String, S3ClientSettings> clientsSettings;, +    private final Map<String, AmazonS3Client> clientsCache = new HashMap<>();, +, +    InternalAwsS3Service(Settings settings, Map<String, S3ClientSettings> clientsSettings) {, +        this.clientsSettings = clientsSettings;, +        AmazonS3Client client = clientsCache.get(clientName);, +        S3ClientSettings clientSettings = clientsSettings.get(clientName);, +        if (clientSettings == null) {, +            throw new IllegalArgumentException("Unknown s3 client name [" + clientName + "]. " +]