[+++ b/x-pack/plugin/sql/qa/src/main/resources/datetime.csv-spec, +-5.631552E11, +-5.586624E11, +-5.56416E11, +-5.539104E11, +-5.517504E11, +-5.492448E11, +-5.406912E11, +-5.371488E11, +-5.359392E11, +SELECT CAST(hire_date AS LONG) AS date FROM test_emp GROUP BY date ORDER BY date LIMIT 10;, +    date:l, +477532800000, +478051200000, +484790400000, +489715200000, +495763200000, +498096000000, +498614400000, +501206400000, +501292800000, +501379200000, +++ b/x-pack/plugin/sql/qa/src/main/resources/datetime.csv-spec, +-5.631552E11, +-5.586624E11, +-5.56416E11, +-5.539104E11, +-5.517504E11, +-5.492448E11, +-5.406912E11, +-5.371488E11, +-5.359392E11, +SELECT CAST(hire_date AS LONG) AS date FROM test_emp GROUP BY date ORDER BY date LIMIT 10;, +    date:l, +477532800000, +478051200000, +484790400000, +489715200000, +495763200000, +498096000000, +498614400000, +501206400000, +501292800000, +501379200000, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/type/DataTypeConversion.java, +            return l -> converter.apply(((ZonedDateTime) l).toInstant().toEpochMilli());, +++ b/x-pack/plugin/sql/qa/src/main/resources/datetime.csv-spec, +-5.631552E11, +-5.586624E11, +-5.56416E11, +-5.539104E11, +-5.517504E11, +-5.492448E11, +-5.406912E11, +-5.371488E11, +-5.359392E11, +SELECT CAST(hire_date AS LONG) AS date FROM test_emp GROUP BY date ORDER BY date LIMIT 10;, +    date:l, +477532800000, +478051200000, +484790400000, +489715200000, +495763200000, +498096000000, +498614400000, +501206400000, +501292800000, +501379200000, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/type/DataTypeConversion.java, +            return l -> converter.apply(((ZonedDateTime) l).toInstant().toEpochMilli());, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/type/DataTypeConversionTests.java, +            assertEquals(123379200000L, conversion.convert(DateUtils.asDateOnly(123456789101L)));, +            assertEquals(-123465600000L, conversion.convert(DateUtils.asDateOnly(-123456789101L)));, +            assertEquals(123456789101L, conversion.convert(asDateTime(123456789101L)));, +            assertEquals(-123456789101L, conversion.convert(asDateTime(-123456789101L)));, +            assertEquals(1.233792E11, (double) conversion.convert(DateUtils.asDateOnly(123456789101L)), 0);, +            assertEquals(-1.234656E11, (double) conversion.convert(DateUtils.asDateOnly(-123456789101L)), 0);, +            assertEquals(1.23456789101E11, (double) conversion.convert(asDateTime(123456789101L)), 0);, +            assertEquals(-1.23456789101E11, (double) conversion.convert(asDateTime(-123456789101L)), 0);, +            assertEquals(0, conversion.convert(DateUtils.asDateOnly(12345678L)));, +            assertEquals(86400000, conversion.convert(DateUtils.asDateOnly(123456789L)));, +            assertEquals(172800000, conversion.convert(DateUtils.asDateOnly(223456789L)));, +            assertEquals(-172800000, conversion.convert(DateUtils.asDateOnly(-123456789L)));, +            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(DateUtils.asDateOnly(Long.MAX_VALUE)));, +            assertEquals("[9223372036828800000] out of [integer] range", e.getMessage());, +            assertEquals(12345678, conversion.convert(DateUtils.asDateTime(12345678L)));, +            assertEquals(223456789, conversion.convert(DateUtils.asDateTime(223456789L)));, +            assertEquals(-123456789, conversion.convert(DateUtils.asDateTime(-123456789L)));, +            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(DateUtils.asDateTime(Long.MAX_VALUE)));, +            assertEquals("[" + Long.MAX_VALUE + "] out of [integer] range", e.getMessage());, +        DataType to = SHORT;, +            Conversion conversion = conversionFor(DOUBLE, to);, +        {, +            Conversion conversion = conversionFor(DATE, to);, +            assertNull(conversion.convert(null));, +            assertEquals((short) 0, conversion.convert(DateUtils.asDateOnly(12345678L)));, +            Exception e = expectThrows(SqlIllegalArgumentException.class, () -> conversion.convert(DateUtils.asDateOnly(123456789L)));, +            assertEquals("[86400000] out of [short] range", e.getMessage());, +        }, +        {]