[+++ b/.ci/packer_cache.sh, +JAVA_HOME="${HOME}"/.java/${ES_BUILD_JAVA} ./gradlew --parallel  resolveAllDependencies composePull, +++ b/.ci/packer_cache.sh, +JAVA_HOME="${HOME}"/.java/${ES_BUILD_JAVA} ./gradlew --parallel  resolveAllDependencies composePull, +++ b/TESTING.asciidoc, +Some of these checks will require `docker-compose` installed for bringing up, +test fixtures. If it's not present those checks will be skipped automatically., +, +++ b/.ci/packer_cache.sh, +JAVA_HOME="${HOME}"/.java/${ES_BUILD_JAVA} ./gradlew --parallel  resolveAllDependencies composePull, +++ b/TESTING.asciidoc, +Some of these checks will require `docker-compose` installed for bringing up, +test fixtures. If it's not present those checks will be skipped automatically., +, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/.ci/packer_cache.sh, +JAVA_HOME="${HOME}"/.java/${ES_BUILD_JAVA} ./gradlew --parallel  resolveAllDependencies composePull, +++ b/TESTING.asciidoc, +Some of these checks will require `docker-compose` installed for bringing up, +test fixtures. If it's not present those checks will be skipped automatically., +, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/build.gradle, +  compile 'com.avast.gradle:docker-compose-gradle-plugin:0.4.5', +++ b/.ci/packer_cache.sh, +JAVA_HOME="${HOME}"/.java/${ES_BUILD_JAVA} ./gradlew --parallel  resolveAllDependencies composePull, +++ b/TESTING.asciidoc, +Some of these checks will require `docker-compose` installed for bringing up, +test fixtures. If it's not present those checks will be skipped automatically., +, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/build.gradle, +  compile 'com.avast.gradle:docker-compose-gradle-plugin:0.4.5', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            project.rootProject.ext.defaultParallel = findDefaultParallel(project.rootProject), +            parallelism System.getProperty('tests.jvms', project.rootProject.ext.defaultParallel), +    private static String findDefaultParallel(Project project) {, +        if (project.file("/proc/cpuinfo").exists()) {, +            // Count physical cores on any Linux distro ( don't count hyper-threading ), +            Map<String, Integer> socketToCore = [:], +            String currentID = "", +            project.file("/proc/cpuinfo").readLines().forEach({ line ->, +                if (line.contains(":")) {, +                    List<String> parts = line.split(":", 2).collect({it.trim()}), +                    String name = parts[0], value = parts[1], +                    // the ID of the CPU socket, +                    if (name == "physical id") {, +                        currentID = value, +                    }, +                    // Number  of cores not including hyper-threading, +                    if (name == "cpu cores") {, +                        assert currentID.isEmpty() == false, +                        socketToCore[currentID] = Integer.valueOf(value), +                        currentID = "", +                    }, +                }, +            }), +            return socketToCore.values().sum().toString();, +        } else if ('Mac OS X'.equals(System.getProperty('os.name'))) {, +            // Ask macOS to count physical CPUs for us, +            ByteArrayOutputStream stdout = new ByteArrayOutputStream(), +            project.exec {, +                executable 'sysctl', +                args '-n', 'hw.physicalcpu', +                standardOutput = stdout, +            }, +            return stdout.toString('UTF-8').trim();, +        }, +        return 'auto';, +    }, +, +++ b/.ci/packer_cache.sh, +JAVA_HOME="${HOME}"/.java/${ES_BUILD_JAVA} ./gradlew --parallel  resolveAllDependencies composePull, +++ b/TESTING.asciidoc, +Some of these checks will require `docker-compose` installed for bringing up, +test fixtures. If it's not present those checks will be skipped automatically., +, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/build.gradle, +  compile 'com.avast.gradle:docker-compose-gradle-plugin:0.4.5', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            project.rootProject.ext.defaultParallel = findDefaultParallel(project.rootProject), +            parallelism System.getProperty('tests.jvms', project.rootProject.ext.defaultParallel), +    private static String findDefaultParallel(Project project) {, +        if (project.file("/proc/cpuinfo").exists()) {, +            // Count physical cores on any Linux distro ( don't count hyper-threading ), +            Map<String, Integer> socketToCore = [:], +            String currentID = "", +            project.file("/proc/cpuinfo").readLines().forEach({ line ->, +                if (line.contains(":")) {, +                    List<String> parts = line.split(":", 2).collect({it.trim()}), +                    String name = parts[0], value = parts[1]]