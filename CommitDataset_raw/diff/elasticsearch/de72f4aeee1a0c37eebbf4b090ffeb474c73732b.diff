[+++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authz/accesscontrol/IndicesAccessControl.java, +            // Also, if one grants no access to fields and the other grants all access, merging should result in all access..., +            if (this.fields != null && other.getFields() != null) {, +            if (this.queries != null && other.getQueries() != null) {, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authz/accesscontrol/IndicesAccessControl.java, +            // Also, if one grants no access to fields and the other grants all access, merging should result in all access..., +            if (this.fields != null && other.getFields() != null) {, +            if (this.queries != null && other.getQueries() != null) {, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authz/accesscontrol/ShieldIndexSearcherWrapper.java, +import org.apache.lucene.search.ConstantScoreQuery;, +import static org.apache.lucene.search.BooleanClause.Occur.SHOULD;, +                BooleanQuery.Builder filter = new BooleanQuery.Builder();, +                    filter.add(parsedQuery.query(), SHOULD);, +                // at least one of the queries should match, +                filter.setMinimumNumberShouldMatch(1);, +                reader = DocumentSubsetReader.wrap(reader, bitsetFilterCache, new ConstantScoreQuery(filter.build()));, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authz/accesscontrol/IndicesAccessControl.java, +            // Also, if one grants no access to fields and the other grants all access, merging should result in all access..., +            if (this.fields != null && other.getFields() != null) {, +            if (this.queries != null && other.getQueries() != null) {, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authz/accesscontrol/ShieldIndexSearcherWrapper.java, +import org.apache.lucene.search.ConstantScoreQuery;, +import static org.apache.lucene.search.BooleanClause.Occur.SHOULD;, +                BooleanQuery.Builder filter = new BooleanQuery.Builder();, +                    filter.add(parsedQuery.query(), SHOULD);, +                // at least one of the queries should match, +                filter.setMinimumNumberShouldMatch(1);, +                reader = DocumentSubsetReader.wrap(reader, bitsetFilterCache, new ConstantScoreQuery(filter.build()));, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/integration/DocumentAndFieldLevelSecurityTests.java, +                "user3:" + USERS_PASSWD_HASHED + "\n" +, +                "user4:" + USERS_PASSWD_HASHED + "\n";, +                "role1:user1,user4\n" +, +                "role2:user2,user4\n" +, +                "role3:user3,user4\n";, +, +        response = client().filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue("user4", USERS_PASSWD))), +                .prepareSearch("test"), +                .get();, +        assertHitCount(response, 2);, +        assertSearchHits(response, "1", "2");, +        assertThat(response.getHits().getAt(0).getSource().get("field1").toString(), equalTo("value1"));, +        assertThat(response.getHits().getAt(1).getSource().get("field2").toString(), equalTo("value2"));, +, +            // user4 has all roles, +            response = client().filterWithHeader(, +                    Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue("user4", USERS_PASSWD))), +                    .prepareSearch("test"), +                    .get();, +            assertHitCount(response, 2);, +            assertThat(response.getHits().getAt(0).getId(), equalTo("1"));, +            assertThat(response.getHits().getAt(0).sourceAsMap().size(), equalTo(1));, +            assertThat(response.getHits().getAt(0).sourceAsMap().get("field1"), equalTo("value1"));, +            assertThat(response.getHits().getAt(1).getId(), equalTo("2"));, +            assertThat(response.getHits().getAt(1).sourceAsMap().size(), equalTo(1));, +            assertThat(response.getHits().getAt(1).sourceAsMap().get("field2"), equalTo("value2"));, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authz/accesscontrol/IndicesAccessControl.java, +            // Also, if one grants no access to fields and the other grants all access, merging should result in all access..., +            if (this.fields != null && other.getFields() != null) {, +            if (this.queries != null && other.getQueries() != null) {, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authz/accesscontrol/ShieldIndexSearcherWrapper.java, +import org.apache.lucene.search.ConstantScoreQuery;, +import static org.apache.lucene.search.BooleanClause.Occur.SHOULD;, +                BooleanQuery.Builder filter = new BooleanQuery.Builder();, +                    filter.add(parsedQuery.query(), SHOULD);, +                // at least one of the queries should match, +                filter.setMinimumNumberShouldMatch(1);, +                reader = DocumentSubsetReader.wrap(reader, bitsetFilterCache, new ConstantScoreQuery(filter.build()));, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/integration/DocumentAndFieldLevelSecurityTests.java, +                "user3:" + USERS_PASSWD_HASHED + "\n" +, +                "user4:" + USERS_PASSWD_HASHED + "\n";, +                "role1:user1,user4\n" +, +                "role2:user2,user4\n" +, +                "role3:user3,user4\n";, +, +        response = client().filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue("user4", USERS_PASSWD))), +                .prepareSearch("test"), +                .get();, +        assertHitCount(response, 2);, +        assertSearchHits(response, "1", "2");, +        assertThat(response.getHits().getAt(0).getSource().get("field1").toString(), equalTo("value1"));, +        assertThat(response.getHits().getAt(1).getSource().get("field2").toString(), equalTo("value2"));, +, +            // user4 has all roles, +            response = client().filterWithHeader(, +                    Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue("user4", USERS_PASSWD))), +                    .prepareSearch("test"), +                    .get();, +            assertHitCount(response, 2);, +            assertThat(response.getHits().getAt(0).getId(), equalTo("1"));, +            assertThat(response.getHits().getAt(0).sourceAsMap().size(), equalTo(1));, +            assertThat(response.getHits().getAt(0).sourceAsMap().get("field1"), equalTo("value1"));, +            assertThat(response.getHits().getAt(1).getId(), equalTo("2"));, +            assertThat(response.getHits().getAt(1).sourceAsMap().size(), equalTo(1));, +            assertThat(response.getHits().getAt(1).sourceAsMap().get("field2"), equalTo("value2"));, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/integration/DocumentLevelSecurityTests.java, +import org.elasticsearch.index.query.QueryBuilder;, +                "user2:" + USERS_PASSWD_HASHED + "\n" +, +                "user3:" + USERS_PASSWD_HASHED + "\n" ;, +                "role1:user1,user3\n" +, +                "role2:user2,user3\n";]