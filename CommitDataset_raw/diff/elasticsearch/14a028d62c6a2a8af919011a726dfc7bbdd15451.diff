[+++ b/src/main/java/org/elasticsearch/plugins/PluginManager.java, +    // Valid directory names for plugin ZIP files when it has only one single dir, +    private static final ImmutableSet<Object> VALID_TOP_LEVEL_PLUGIN_DIRS = ImmutableSet.builder(), +            .add("_site",, +                    "bin",, +                    "config",, +                    "_dict").build();, +, +        // It could potentially be a non explicit _site plugin, +        boolean potentialSitePlugin = true;, +            potentialSitePlugin = false;, +            potentialSitePlugin = false;, +            if (potentialSitePlugin && !FileSystemUtils.hasExtensions(extractLocation, ".class", ".jar")) {, +, +        if (topLevelDirNames.size() == 1) {, +            return !VALID_TOP_LEVEL_PLUGIN_DIRS.contains(topLevelDirNames.iterator().next());, +        }, +, +        return false;, +++ b/src/main/java/org/elasticsearch/plugins/PluginManager.java, +    // Valid directory names for plugin ZIP files when it has only one single dir, +    private static final ImmutableSet<Object> VALID_TOP_LEVEL_PLUGIN_DIRS = ImmutableSet.builder(), +            .add("_site",, +                    "bin",, +                    "config",, +                    "_dict").build();, +, +        // It could potentially be a non explicit _site plugin, +        boolean potentialSitePlugin = true;, +            potentialSitePlugin = false;, +            potentialSitePlugin = false;, +            if (potentialSitePlugin && !FileSystemUtils.hasExtensions(extractLocation, ".class", ".jar")) {, +, +        if (topLevelDirNames.size() == 1) {, +            return !VALID_TOP_LEVEL_PLUGIN_DIRS.contains(topLevelDirNames.iterator().next());, +        }, +, +        return false;, +++ b/src/test/java/org/elasticsearch/plugin/PluginManagerTests.java, +    // For #7152, +    @Test, +    public void testLocalPluginInstallWithBinOnly_7152() throws Exception {, +        String pluginName = "plugin-test";, +        Tuple<Settings, Environment> initialSettings = InternalSettingsPreparer.prepareSettings(, +                ImmutableSettings.settingsBuilder().build(), false);, +        Environment env = initialSettings.v2();, +        File binDir = new File(env.homeFile(), "bin");, +        if (!binDir.exists() && !FileSystemUtils.mkdirs(binDir)) {, +            throw new IOException("Could not create bin directory [" + binDir.getAbsolutePath() + "]");, +        }, +        File pluginBinDir = new File(binDir, pluginName);, +        try {, +            PluginManager pluginManager = pluginManager(getPluginUrlForResource("plugin_with_bin_only.zip"), initialSettings);, +            pluginManager.downloadAndExtract(pluginName);, +            File[] plugins = pluginManager.getListInstalledPlugins();, +            assertThat(plugins.length, is(1));, +            assertTrue(pluginBinDir.exists());, +        } finally {, +            // we need to clean up the copied dirs, +            FileSystemUtils.deleteRecursively(pluginBinDir);, +        }, +    }, +]