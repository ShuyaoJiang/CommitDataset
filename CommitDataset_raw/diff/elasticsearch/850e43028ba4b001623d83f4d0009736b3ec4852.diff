[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +        JobManager jobManager = new JobManager(settings, jobProvider, jobResultsPersister, clusterService);, +                new PrelertInitializationService(settings, threadPool, clusterService, jobProvider),, +                jobDataCountsPersister, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +        JobManager jobManager = new JobManager(settings, jobProvider, jobResultsPersister, clusterService);, +                new PrelertInitializationService(settings, threadPool, clusterService, jobProvider),, +                jobDataCountsPersister, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/RevertModelSnapshotAction.java, +import org.elasticsearch.xpack.prelert.job.DataCounts;, +import org.elasticsearch.xpack.prelert.job.persistence.JobDataCountsPersister;, +        private final JobDataCountsPersister jobDataCountsPersister;, +                ClusterService clusterService, ElasticsearchBulkDeleterFactory bulkDeleterFactory,, +                JobDataCountsPersister jobDataCountsPersister) {, +            this.jobDataCountsPersister = jobDataCountsPersister;, +                listener = wrapDeleteOldDataListener(listener, modelSnapshot, request.getJobId());, +                listener = wrapRevertDataCountsListener(listener, modelSnapshot, request.getJobId());, +        private ActionListener<RevertModelSnapshotAction.Response> wrapDeleteOldDataListener(, +                ActionListener<RevertModelSnapshotAction.Response> listener,, +            // wrap the listener with one that invokes the OldDataRemover on, +        private ActionListener<RevertModelSnapshotAction.Response> wrapRevertDataCountsListener(, +                ActionListener<RevertModelSnapshotAction.Response> listener,, +                ModelSnapshot modelSnapshot, String jobId) {, +, +, +            return ActionListener.wrap(response -> {, +                if (response.isAcknowledged()) {, +                    DataCounts counts = jobProvider.dataCounts(jobId);, +                    counts.setLatestRecordTimeStamp(modelSnapshot.getLatestRecordTimeStamp());, +                    jobDataCountsPersister.persistDataCounts(jobId, counts, new ActionListener<Boolean>() {, +                        @Override, +                        public void onResponse(Boolean aBoolean) {, +                            listener.onResponse(response);, +                        }, +, +                        @Override, +                        public void onFailure(Exception e) {, +                            listener.onFailure(e);, +                        }, +                    });, +                }, +            }, listener::onFailure);, +        }, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +        JobManager jobManager = new JobManager(settings, jobProvider, jobResultsPersister, clusterService);, +                new PrelertInitializationService(settings, threadPool, clusterService, jobProvider),, +                jobDataCountsPersister, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/RevertModelSnapshotAction.java, +import org.elasticsearch.xpack.prelert.job.DataCounts;, +import org.elasticsearch.xpack.prelert.job.persistence.JobDataCountsPersister;, +        private final JobDataCountsPersister jobDataCountsPersister;, +                ClusterService clusterService, ElasticsearchBulkDeleterFactory bulkDeleterFactory,, +                JobDataCountsPersister jobDataCountsPersister) {, +            this.jobDataCountsPersister = jobDataCountsPersister;, +                listener = wrapDeleteOldDataListener(listener, modelSnapshot, request.getJobId());, +                listener = wrapRevertDataCountsListener(listener, modelSnapshot, request.getJobId());, +        private ActionListener<RevertModelSnapshotAction.Response> wrapDeleteOldDataListener(, +                ActionListener<RevertModelSnapshotAction.Response> listener,, +            // wrap the listener with one that invokes the OldDataRemover on, +        private ActionListener<RevertModelSnapshotAction.Response> wrapRevertDataCountsListener(, +                ActionListener<RevertModelSnapshotAction.Response> listener,, +                ModelSnapshot modelSnapshot, String jobId) {, +, +, +            return ActionListener.wrap(response -> {, +                if (response.isAcknowledged()) {, +                    DataCounts counts = jobProvider.dataCounts(jobId);, +                    counts.setLatestRecordTimeStamp(modelSnapshot.getLatestRecordTimeStamp());, +                    jobDataCountsPersister.persistDataCounts(jobId, counts, new ActionListener<Boolean>() {, +                        @Override, +                        public void onResponse(Boolean aBoolean) {, +                            listener.onResponse(response);, +                        }, +, +                        @Override, +                        public void onFailure(Exception e) {, +                            listener.onFailure(e);, +                        }, +                    });, +                }, +            }, listener::onFailure);, +        }, +, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/manager/JobManager.java, +                      ClusterService clusterService) {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +        JobManager jobManager = new JobManager(settings, jobProvider, jobResultsPersister, clusterService);, +                new PrelertInitializationService(settings, threadPool, clusterService, jobProvider),, +                jobDataCountsPersister, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/RevertModelSnapshotAction.java, +import org.elasticsearch.xpack.prelert.job.DataCounts;, +import org.elasticsearch.xpack.prelert.job.persistence.JobDataCountsPersister;, +        private final JobDataCountsPersister jobDataCountsPersister;, +                ClusterService clusterService, ElasticsearchBulkDeleterFactory bulkDeleterFactory,, +                JobDataCountsPersister jobDataCountsPersister) {, +            this.jobDataCountsPersister = jobDataCountsPersister;, +                listener = wrapDeleteOldDataListener(listener, modelSnapshot, request.getJobId());, +                listener = wrapRevertDataCountsListener(listener, modelSnapshot, request.getJobId());, +        private ActionListener<RevertModelSnapshotAction.Response> wrapDeleteOldDataListener(]