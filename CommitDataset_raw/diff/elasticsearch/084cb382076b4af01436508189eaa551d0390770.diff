[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/InternalScriptedMetric.java, +import java.util.Objects;, +    @Override, +    protected boolean doEquals(Object obj) {, +        InternalScriptedMetric other = (InternalScriptedMetric) obj;, +        return Objects.equals(reduceScript, other.reduceScript) &&, +                Objects.equals(aggregation, other.aggregation);, +    }, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(reduceScript, aggregation);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/InternalScriptedMetric.java, +import java.util.Objects;, +    @Override, +    protected boolean doEquals(Object obj) {, +        InternalScriptedMetric other = (InternalScriptedMetric) obj;, +        return Objects.equals(reduceScript, other.reduceScript) &&, +                Objects.equals(aggregation, other.aggregation);, +    }, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(reduceScript, aggregation);, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/InternalAggregationTestCase.java, +import org.elasticsearch.script.ScriptService;, +    protected abstract T createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData);, +        ScriptService mockScriptService = mockScriptService();, +        if (randomBoolean() && toReduce.size() > 1) {, +            // we leave at least the first element in the list, +            List<InternalAggregation> internalAggregations = randomSubsetOf(randomIntBetween(1, toReduceSize - 1),, +                    toReduce.subList(1, toReduceSize));, +            InternalAggregation.ReduceContext context = new InternalAggregation.ReduceContext(null, mockScriptService, false);, +        InternalAggregation.ReduceContext context = new InternalAggregation.ReduceContext(null, mockScriptService, true);, +    /**, +     * overwrite in tests that need it, +     */, +    protected ScriptService mockScriptService() {, +        return null;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/InternalScriptedMetric.java, +import java.util.Objects;, +    @Override, +    protected boolean doEquals(Object obj) {, +        InternalScriptedMetric other = (InternalScriptedMetric) obj;, +        return Objects.equals(reduceScript, other.reduceScript) &&, +                Objects.equals(aggregation, other.aggregation);, +    }, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(reduceScript, aggregation);, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/InternalAggregationTestCase.java, +import org.elasticsearch.script.ScriptService;, +    protected abstract T createTestInstance(String name, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData);, +        ScriptService mockScriptService = mockScriptService();, +        if (randomBoolean() && toReduce.size() > 1) {, +            // we leave at least the first element in the list, +            List<InternalAggregation> internalAggregations = randomSubsetOf(randomIntBetween(1, toReduceSize - 1),, +                    toReduce.subList(1, toReduceSize));, +            InternalAggregation.ReduceContext context = new InternalAggregation.ReduceContext(null, mockScriptService, false);, +        InternalAggregation.ReduceContext context = new InternalAggregation.ReduceContext(null, mockScriptService, true);, +    /**, +     * overwrite in tests that need it, +     */, +    protected ScriptService mockScriptService() {, +        return null;, +    }, +, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/scripted/InternalScriptedMetricTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.aggregations.metrics.scripted;, +, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.io.stream.Writeable.Reader;]