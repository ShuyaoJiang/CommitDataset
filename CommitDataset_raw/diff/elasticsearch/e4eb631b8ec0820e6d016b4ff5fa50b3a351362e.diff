[+++ b/server/src/main/java/org/elasticsearch/index/shard/GlobalCheckpointListeners.java, +import java.util.concurrent.TimeoutException;, +         * non-null and an instance of {@link TimeoutException}. If the global checkpoint is updated, the exception will be null., +     * notified after if the timeout elapses. In this case, the listener will be notified with a {@link TimeoutException}. Passing null for, +     * the timeout means no timeout will be associated to the listener., +                                        final TimeoutException e = new TimeoutException(timeout.getStringRep());, +                assert e instanceof TimeoutException : e;, +++ b/server/src/main/java/org/elasticsearch/index/shard/GlobalCheckpointListeners.java, +import java.util.concurrent.TimeoutException;, +         * non-null and an instance of {@link TimeoutException}. If the global checkpoint is updated, the exception will be null., +     * notified after if the timeout elapses. In this case, the listener will be notified with a {@link TimeoutException}. Passing null for, +     * the timeout means no timeout will be associated to the listener., +                                        final TimeoutException e = new TimeoutException(timeout.getStringRep());, +                assert e instanceof TimeoutException : e;, +++ b/server/src/test/java/org/elasticsearch/index/shard/GlobalCheckpointListenersTests.java, +import java.util.concurrent.TimeoutException;, +                        assertThat(e, instanceOf(TimeoutException.class));, +                        final ArgumentCaptor<TimeoutException> t = ArgumentCaptor.forClass(TimeoutException.class);, +                        assertThat(e, instanceOf(TimeoutException.class));, +++ b/server/src/main/java/org/elasticsearch/index/shard/GlobalCheckpointListeners.java, +import java.util.concurrent.TimeoutException;, +         * non-null and an instance of {@link TimeoutException}. If the global checkpoint is updated, the exception will be null., +     * notified after if the timeout elapses. In this case, the listener will be notified with a {@link TimeoutException}. Passing null for, +     * the timeout means no timeout will be associated to the listener., +                                        final TimeoutException e = new TimeoutException(timeout.getStringRep());, +                assert e instanceof TimeoutException : e;, +++ b/server/src/test/java/org/elasticsearch/index/shard/GlobalCheckpointListenersTests.java, +import java.util.concurrent.TimeoutException;, +                        assertThat(e, instanceOf(TimeoutException.class));, +                        final ArgumentCaptor<TimeoutException> t = ArgumentCaptor.forClass(TimeoutException.class);, +                        assertThat(e, instanceOf(TimeoutException.class));, +++ b/server/src/test/java/org/elasticsearch/index/shard/IndexShardIT.java, +import java.util.concurrent.TimeoutException;, +                        assertThat(e, instanceOf(TimeoutException.class));]