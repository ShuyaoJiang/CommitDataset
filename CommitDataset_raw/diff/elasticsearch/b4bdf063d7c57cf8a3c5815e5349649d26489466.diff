[+++ b/server/src/main/java/org/elasticsearch/action/search/SearchResponseMerger.java, +import org.elasticsearch.search.suggest.completion.CompletionSuggestion;, +                List<CompletionSuggestion> completionSuggestions = suggest.filter(CompletionSuggestion.class);, +                for (CompletionSuggestion completionSuggestion : completionSuggestions) {, +                    for (CompletionSuggestion.Entry options : completionSuggestion) {, +                        for (CompletionSuggestion.Entry.Option option : options) {, +                            SearchShardTarget shard = option.getHit().getShard();, +                            ShardIdAndClusterAlias shardId = new ShardIdAndClusterAlias(shard.getShardId(), shard.getClusterAlias());, +                            shards.putIfAbsent(shardId, null);, +                        }, +                    }, +                }, +        setTopDocsShardIndex(shards, topDocsList);, +        setSuggestShardIndex(shards, groupedSuggestions);, +        //make failures ordering consistent between ordinary search and CCS by looking at the shard they come from, +    private static void setTopDocsShardIndex(Map<ShardIdAndClusterAlias, Integer> shards, List<TopDocs> topDocsList) {, +        assignShardIndex(shards);, +    private static void setSuggestShardIndex(Map<ShardIdAndClusterAlias, Integer> shards,, +                                             Map<String, List<Suggest.Suggestion>> groupedSuggestions) {, +        assignShardIndex(shards);, +        for (List<Suggest.Suggestion> suggestions : groupedSuggestions.values()) {, +            for (Suggest.Suggestion suggestion : suggestions) {, +                if (suggestion instanceof CompletionSuggestion) {, +                    CompletionSuggestion completionSuggestion = (CompletionSuggestion) suggestion;, +                    for (CompletionSuggestion.Entry options : completionSuggestion) {, +                        for (CompletionSuggestion.Entry.Option option : options) {, +                            SearchShardTarget shard = option.getHit().getShard();, +                            ShardIdAndClusterAlias shardId = new ShardIdAndClusterAlias(shard.getShardId(), shard.getClusterAlias());, +                            assert shards.containsKey(shardId);, +                            option.setShardIndex(shards.get(shardId));, +                        }, +                    }, +                }, +            }, +        }, +    }, +, +    private static void assignShardIndex(Map<ShardIdAndClusterAlias, Integer> shards) {, +        //assign a different shardIndex to each shard, based on their shardId natural ordering and their cluster alias, +        int shardIndex = 0;, +        for (Map.Entry<ShardIdAndClusterAlias, Integer> shard : shards.entrySet()) {, +            shard.setValue(shardIndex++);, +        }, +    }, +, +            assert clusterAlias != null : "clusterAlias is null";, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchResponseMerger.java, +import org.elasticsearch.search.suggest.completion.CompletionSuggestion;, +                List<CompletionSuggestion> completionSuggestions = suggest.filter(CompletionSuggestion.class);, +                for (CompletionSuggestion completionSuggestion : completionSuggestions) {, +                    for (CompletionSuggestion.Entry options : completionSuggestion) {, +                        for (CompletionSuggestion.Entry.Option option : options) {, +                            SearchShardTarget shard = option.getHit().getShard();, +                            ShardIdAndClusterAlias shardId = new ShardIdAndClusterAlias(shard.getShardId(), shard.getClusterAlias());, +                            shards.putIfAbsent(shardId, null);, +                        }, +                    }, +                }, +        setTopDocsShardIndex(shards, topDocsList);, +        setSuggestShardIndex(shards, groupedSuggestions);, +        //make failures ordering consistent between ordinary search and CCS by looking at the shard they come from, +    private static void setTopDocsShardIndex(Map<ShardIdAndClusterAlias, Integer> shards, List<TopDocs> topDocsList) {, +        assignShardIndex(shards);, +    private static void setSuggestShardIndex(Map<ShardIdAndClusterAlias, Integer> shards,, +                                             Map<String, List<Suggest.Suggestion>> groupedSuggestions) {, +        assignShardIndex(shards);, +        for (List<Suggest.Suggestion> suggestions : groupedSuggestions.values()) {, +            for (Suggest.Suggestion suggestion : suggestions) {, +                if (suggestion instanceof CompletionSuggestion) {, +                    CompletionSuggestion completionSuggestion = (CompletionSuggestion) suggestion;, +                    for (CompletionSuggestion.Entry options : completionSuggestion) {, +                        for (CompletionSuggestion.Entry.Option option : options) {, +                            SearchShardTarget shard = option.getHit().getShard();, +                            ShardIdAndClusterAlias shardId = new ShardIdAndClusterAlias(shard.getShardId(), shard.getClusterAlias());, +                            assert shards.containsKey(shardId);, +                            option.setShardIndex(shards.get(shardId));, +                        }, +                    }, +                }, +            }, +        }, +    }, +, +    private static void assignShardIndex(Map<ShardIdAndClusterAlias, Integer> shards) {, +        //assign a different shardIndex to each shard, based on their shardId natural ordering and their cluster alias, +        int shardIndex = 0;, +        for (Map.Entry<ShardIdAndClusterAlias, Integer> shard : shards.entrySet()) {, +            shard.setValue(shardIndex++);, +        }, +    }, +, +            assert clusterAlias != null : "clusterAlias is null";, +++ b/server/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestion.java, +            int compare = COMPARATOR.compare(a.current, b.current);, +            if (compare != 0) {, +                return compare < 0;, +            }, +            ScoreDoc aDoc = a.current.getDoc();, +            ScoreDoc bDoc = b.current.getDoc();, +            if (aDoc.shardIndex == bDoc.shardIndex) {]