[+++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/UnassignedShardDecision.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.routing.allocation;, +, +import org.elasticsearch.cluster.routing.UnassignedInfo.AllocationStatus;, +import org.elasticsearch.cluster.routing.allocation.decider.Decision;, +import org.elasticsearch.cluster.routing.allocation.decider.Decision.Type;, +import org.elasticsearch.common.Nullable;, +, +import java.util.Collections;, +import java.util.Map;, +import java.util.Objects;, +, +/**, + * Represents the allocation decision by an allocator for an unassigned shard., + */, +public class UnassignedShardDecision {, +    /** a constant representing a shard decision where no decision was taken */, +    public static final UnassignedShardDecision DECISION_NOT_TAKEN =, +        new UnassignedShardDecision(null, null, null, null, null, null);, +, +    @Nullable, +    private final Decision finalDecision;, +    @Nullable, +    private final AllocationStatus allocationStatus;, +    @Nullable, +    private final String finalExplanation;, +    @Nullable, +    private final String assignedNodeId;, +    @Nullable, +    private final String allocationId;, +    @Nullable, +    private final Map<String, Decision> nodeDecisions;, +, +    private UnassignedShardDecision(Decision finalDecision,, +                                    AllocationStatus allocationStatus,, +                                    String finalExplanation,, +                                    String assignedNodeId,, +                                    String allocationId,, +                                    Map<String, Decision> nodeDecisions) {, +        assert finalExplanation != null || finalDecision == null :, +            "if a decision was taken, there must be an explanation for it";, +        assert assignedNodeId != null || finalDecision == null || finalDecision.type() != Type.YES :, +            "a yes decision must have a node to assign the shard to";, +        assert allocationStatus != null || finalDecision == null || finalDecision.type() == Type.YES :, +            "only a yes decision should not have an allocation status";, +        assert allocationId == null || assignedNodeId != null :, +            "allocation id can only be null if the assigned node is null";, +        this.finalDecision = finalDecision;, +        this.allocationStatus = allocationStatus;, +        this.finalExplanation = finalExplanation;, +        this.assignedNodeId = assignedNodeId;, +        this.allocationId = allocationId;, +        this.nodeDecisions = nodeDecisions != null ? Collections.unmodifiableMap(nodeDecisions) : null;, +    }, +, +    /**, +     * Creates a NO decision with the given {@link AllocationStatus} and explanation for the NO decision., +     */, +    public static UnassignedShardDecision noDecision(AllocationStatus allocationStatus, String explanation) {, +        return noDecision(allocationStatus, explanation, null);, +    }, +, +    /**, +     * Creates a NO decision with the given {@link AllocationStatus} and explanation for the NO decision,, +     * as well as the individual node-level decisions that comprised the final NO decision., +     */, +    public static UnassignedShardDecision noDecision(AllocationStatus allocationStatus,, +                                                     String explanation,, +                                                     @Nullable Map<String, Decision> nodeDecisions) {, +        Objects.requireNonNull(explanation, "explanation must not be null");, +        Objects.requireNonNull(allocationStatus, "allocationStatus must not be null");, +        return new UnassignedShardDecision(Decision.NO, allocationStatus, explanation, null, null, nodeDecisions);, +    }, +, +    /**, +     * Creates a THROTTLE decision with the given explanation and individual node-level decisions that, +     * comprised the final THROTTLE decision., +     */, +    public static UnassignedShardDecision throttleDecision(String explanation,]