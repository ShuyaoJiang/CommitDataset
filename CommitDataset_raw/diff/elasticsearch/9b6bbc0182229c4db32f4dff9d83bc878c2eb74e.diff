[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.UpdateJobRequest;, +    static Request updateJob(UpdateJobRequest updateJobRequest) throws IOException {, +        String endpoint = new EndpointBuilder(), +                .addPathPartAsIs("_xpack"), +                .addPathPartAsIs("ml"), +                .addPathPartAsIs("anomaly_detectors"), +                .addPathPart(updateJobRequest.getJobUpdate().getJobId()), +                .addPathPartAsIs("_update"), +                .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        request.setEntity(createEntity(updateJobRequest.getJobUpdate(), REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.UpdateJobRequest;, +    static Request updateJob(UpdateJobRequest updateJobRequest) throws IOException {, +        String endpoint = new EndpointBuilder(), +                .addPathPartAsIs("_xpack"), +                .addPathPartAsIs("ml"), +                .addPathPartAsIs("anomaly_detectors"), +                .addPathPart(updateJobRequest.getJobUpdate().getJobId()), +                .addPathPartAsIs("_update"), +                .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        request.setEntity(createEntity(updateJobRequest.getJobUpdate(), REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MachineLearningClient.java, +import org.elasticsearch.client.ml.UpdateJobRequest;, +     * @throws IOException when there is a serialization issue sending the request or receiving the response, +     * Updates a Machine Learning {@link org.elasticsearch.client.ml.job.config.Job}, +     *, +     * @param request the {@link UpdateJobRequest} object enclosing the desired updates, +     * @param options  Additional request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return a PutJobResponse object containing the updated job object, +     * @throws IOException when there is a serialization issue sending the request or receiving the response, +     */, +    public PutJobResponse updateJob(UpdateJobRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request,, +            MLRequestConverters::updateJob,, +            options,, +            PutJobResponse::fromXContent,, +            Collections.emptySet());, +    }, +, +    /**, +     * Updates a Machine Learning {@link org.elasticsearch.client.ml.job.config.Job} asynchronously, +     *, +     * @param request the {@link UpdateJobRequest} object enclosing the desired updates, +     * @param options  Additional request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener Listener to be notified upon request completion, +     */, +    public void updateJobAsync(UpdateJobRequest request, RequestOptions options, ActionListener<PutJobResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request,, +            MLRequestConverters::updateJob,, +            options,, +            PutJobResponse::fromXContent,, +            listener,, +            Collections.emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.client.ml.UpdateJobRequest;, +    static Request updateJob(UpdateJobRequest updateJobRequest) throws IOException {, +        String endpoint = new EndpointBuilder(), +                .addPathPartAsIs("_xpack"), +                .addPathPartAsIs("ml"), +                .addPathPartAsIs("anomaly_detectors"), +                .addPathPart(updateJobRequest.getJobUpdate().getJobId()), +                .addPathPartAsIs("_update"), +                .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        request.setEntity(createEntity(updateJobRequest.getJobUpdate(), REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MachineLearningClient.java, +import org.elasticsearch.client.ml.UpdateJobRequest;, +     * @throws IOException when there is a serialization issue sending the request or receiving the response, +     * Updates a Machine Learning {@link org.elasticsearch.client.ml.job.config.Job}, +     *, +     * @param request the {@link UpdateJobRequest} object enclosing the desired updates, +     * @param options  Additional request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return a PutJobResponse object containing the updated job object, +     * @throws IOException when there is a serialization issue sending the request or receiving the response, +     */, +    public PutJobResponse updateJob(UpdateJobRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request,, +            MLRequestConverters::updateJob,, +            options,, +            PutJobResponse::fromXContent,, +            Collections.emptySet());, +    }, +, +    /**, +     * Updates a Machine Learning {@link org.elasticsearch.client.ml.job.config.Job} asynchronously]