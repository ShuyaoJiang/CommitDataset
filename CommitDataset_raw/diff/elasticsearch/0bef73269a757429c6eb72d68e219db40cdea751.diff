[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                                    UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey()));, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                                    UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey()));, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<TimeValue> INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING = Setting.timeSetting("index.unassigned.node_left.delayed_timeout", DEFAULT_DELAYED_NODE_LEFT_TIMEOUT, true, Setting.Scope.INDEX);, +, +        TimeValue delayTimeout = INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.get(indexSettings, settings);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                                    UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey()));, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<TimeValue> INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING = Setting.timeSetting("index.unassigned.node_left.delayed_timeout", DEFAULT_DELAYED_NODE_LEFT_TIMEOUT, true, Setting.Scope.INDEX);, +, +        TimeValue delayTimeout = INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.get(indexSettings, settings);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ShardsLimitAllocationDecider.java, +        final int indexShardLimit = INDEX_TOTAL_SHARDS_PER_NODE_SETTING.get(indexMd.getSettings(), settings);, +        final int indexShardLimit = INDEX_TOTAL_SHARDS_PER_NODE_SETTING.get(indexMd.getSettings(), settings);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                                    UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey()));, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<TimeValue> INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING = Setting.timeSetting("index.unassigned.node_left.delayed_timeout", DEFAULT_DELAYED_NODE_LEFT_TIMEOUT, true, Setting.Scope.INDEX);, +, +        TimeValue delayTimeout = INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.get(indexSettings, settings);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ShardsLimitAllocationDecider.java, +        final int indexShardLimit = INDEX_TOTAL_SHARDS_PER_NODE_SETTING.get(indexMd.getSettings(), settings);, +        final int indexShardLimit = INDEX_TOTAL_SHARDS_PER_NODE_SETTING.get(indexMd.getSettings(), settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +     * Returns the value for this setting but falls back to the second provided settings object, +     */, +    public final T get(Settings primary, Settings secondary) {, +        if (exists(primary)) {, +            return get(primary);, +        }, +        return get(secondary);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                                    UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey()));, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<TimeValue> INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING = Setting.timeSetting("index.unassigned.node_left.delayed_timeout", DEFAULT_DELAYED_NODE_LEFT_TIMEOUT, true, Setting.Scope.INDEX);, +, +        TimeValue delayTimeout = INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.get(indexSettings, settings);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ShardsLimitAllocationDecider.java, +        final int indexShardLimit = INDEX_TOTAL_SHARDS_PER_NODE_SETTING.get(indexMd.getSettings(), settings);, +        final int indexShardLimit = INDEX_TOTAL_SHARDS_PER_NODE_SETTING.get(indexMd.getSettings(), settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +     * Returns the value for this setting but falls back to the second provided settings object, +     */, +    public final T get(Settings primary, Settings secondary) {, +        if (exists(primary)) {, +            return get(primary);, +        }, +        return get(secondary);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +import org.elasticsearch.indices.cache.request.IndicesRequestCache;, +        IndexSettings.INDEX_GC_DELETES_SETTING,, +        IndicesRequestCache.INDEX_CACHE_REQUEST_ENABLED_SETTING, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +                                    UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey()));, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<TimeValue> INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING = Setting.timeSetting("index.unassigned.node_left.delayed_timeout", DEFAULT_DELAYED_NODE_LEFT_TIMEOUT, true, Setting.Scope.INDEX);, +, +        TimeValue delayTimeout = INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.get(indexSettings, settings);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ShardsLimitAllocationDecider.java, +        final int indexShardLimit = INDEX_TOTAL_SHARDS_PER_NODE_SETTING.get(indexMd.getSettings(), settings);, +        final int indexShardLimit = INDEX_TOTAL_SHARDS_PER_NODE_SETTING.get(indexMd.getSettings(), settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +     * Returns the value for this setting but falls back to the second provided settings object, +     */, +    public final T get(Settings primary, Settings secondary) {, +        if (exists(primary)) {, +            return get(primary);, +        }, +        return get(secondary);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +import org.elasticsearch.indices.cache.request.IndicesRequestCache;, +        IndexSettings.INDEX_GC_DELETES_SETTING,, +        IndicesRequestCache.INDEX_CACHE_REQUEST_ENABLED_SETTING, +++ b/core/src/main/java/org/elasticsearch/indices/cache/request/IndicesRequestCache.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<Boolean> INDEX_CACHE_REQUEST_ENABLED_SETTING = Setting.boolSetting("index.requests.cache.enable", true, true, Setting.Scope.INDEX);]