[+++ b/dev-tools/forbidden/core-signatures.txt, +, +@defaultMessage Don't interrupt threads use FutureUtils#cancel(Future<T>) instead, +java.util.concurrent.Future#cancel(boolean), +++ b/dev-tools/forbidden/core-signatures.txt, +, +@defaultMessage Don't interrupt threads use FutureUtils#cancel(Future<T>) instead, +java.util.concurrent.Future#cancel(boolean), +++ b/pom.xml, +                                <!-- start exclude for Future utility class -->, +                                <exclude>org/elasticsearch/common/util/concurrent/FutureUtils.class</exclude>, +                                <!-- end exclude for Future utility class -->, +++ b/dev-tools/forbidden/core-signatures.txt, +, +@defaultMessage Don't interrupt threads use FutureUtils#cancel(Future<T>) instead, +java.util.concurrent.Future#cancel(boolean), +++ b/pom.xml, +                                <!-- start exclude for Future utility class -->, +                                <exclude>org/elasticsearch/common/util/concurrent/FutureUtils.class</exclude>, +                                <!-- end exclude for Future utility class -->, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +            FutureUtils.cancel(this.scheduledFuture);, +++ b/dev-tools/forbidden/core-signatures.txt, +, +@defaultMessage Don't interrupt threads use FutureUtils#cancel(Future<T>) instead, +java.util.concurrent.Future#cancel(boolean), +++ b/pom.xml, +                                <!-- start exclude for Future utility class -->, +                                <exclude>org/elasticsearch/common/util/concurrent/FutureUtils.class</exclude>, +                                <!-- end exclude for Future utility class -->, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +            FutureUtils.cancel(this.scheduledFuture);, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +            FutureUtils.cancel(nodesSamplerFuture);, +++ b/dev-tools/forbidden/core-signatures.txt, +, +@defaultMessage Don't interrupt threads use FutureUtils#cancel(Future<T>) instead, +java.util.concurrent.Future#cancel(boolean), +++ b/pom.xml, +                                <!-- start exclude for Future utility class -->, +                                <exclude>org/elasticsearch/common/util/concurrent/FutureUtils.class</exclude>, +                                <!-- end exclude for Future utility class -->, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +            FutureUtils.cancel(this.scheduledFuture);, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +            FutureUtils.cancel(nodesSamplerFuture);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataDeleteIndexService.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +                FutureUtils.cancel(future);, +                FutureUtils.cancel(future);, +++ b/dev-tools/forbidden/core-signatures.txt, +, +@defaultMessage Don't interrupt threads use FutureUtils#cancel(Future<T>) instead, +java.util.concurrent.Future#cancel(boolean), +++ b/pom.xml, +                                <!-- start exclude for Future utility class -->, +                                <exclude>org/elasticsearch/common/util/concurrent/FutureUtils.class</exclude>, +                                <!-- end exclude for Future utility class -->, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +            FutureUtils.cancel(this.scheduledFuture);, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +            FutureUtils.cancel(nodesSamplerFuture);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataDeleteIndexService.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +                FutureUtils.cancel(future);, +                FutureUtils.cancel(future);, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +        FutureUtils.cancel(scheduledRoutingTableFuture);, +            FutureUtils.cancel(scheduledRoutingTableFuture);, +++ b/dev-tools/forbidden/core-signatures.txt, +, +@defaultMessage Don't interrupt threads use FutureUtils#cancel(Future<T>) instead, +java.util.concurrent.Future#cancel(boolean), +++ b/pom.xml, +                                <!-- start exclude for Future utility class -->, +                                <exclude>org/elasticsearch/common/util/concurrent/FutureUtils.class</exclude>, +                                <!-- end exclude for Future utility class -->, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +            FutureUtils.cancel(this.scheduledFuture);, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +            FutureUtils.cancel(nodesSamplerFuture);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataDeleteIndexService.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +                FutureUtils.cancel(future);, +                FutureUtils.cancel(future);, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +        FutureUtils.cancel(scheduledRoutingTableFuture);, +            FutureUtils.cancel(scheduledRoutingTableFuture);, +++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java]