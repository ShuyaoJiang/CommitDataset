[+++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +                            fromTo[1] == MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +                            fromTo[1] == MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.range.ip.IpRangeAggregatorBuilder;, +import org.elasticsearch.search.aggregations.bucket.range.InternalBinaryRange;, +import org.elasticsearch.search.aggregations.bucket.range.ip.IpRangeParser;, +        registerAggregation(IpRangeAggregatorBuilder::new, new IpRangeParser(), IpRangeAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        InternalBinaryRange.registerStream();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +                            fromTo[1] == MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.range.ip.IpRangeAggregatorBuilder;, +import org.elasticsearch.search.aggregations.bucket.range.InternalBinaryRange;, +import org.elasticsearch.search.aggregations.bucket.range.ip.IpRangeParser;, +        registerAggregation(IpRangeAggregatorBuilder::new, new IpRangeParser(), IpRangeAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        InternalBinaryRange.registerStream();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilders.java, +import org.elasticsearch.search.aggregations.bucket.range.ip.IpRangeAggregatorBuilder;, +     * Create a new {@link IpRangeAggregatorBuilder} aggregation with the, +    public static IpRangeAggregatorBuilder ipRange(String name) {, +        return new IpRangeAggregatorBuilder(name);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ip/LegacyIpFieldMapper.java, +                            fromTo[1] == MAX_IP ? null : fromTo[1], true, false);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.range.ip.IpRangeAggregatorBuilder;, +import org.elasticsearch.search.aggregations.bucket.range.InternalBinaryRange;, +import org.elasticsearch.search.aggregations.bucket.range.ip.IpRangeParser;, +        registerAggregation(IpRangeAggregatorBuilder::new, new IpRangeParser(), IpRangeAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        InternalBinaryRange.registerStream();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilders.java, +import org.elasticsearch.search.aggregations.bucket.range.ip.IpRangeAggregatorBuilder;, +     * Create a new {@link IpRangeAggregatorBuilder} aggregation with the, +    public static IpRangeAggregatorBuilder ipRange(String name) {, +        return new IpRangeAggregatorBuilder(name);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/BinaryRangeAggregator.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search.aggregations.bucket.range;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Comparator;, +import java.util.List;, +import java.util.Map;, +, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.SortedSetDocValues;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.search.DocValueFormat;, +import org.elasticsearch.search.aggregations.Aggregator;, +import org.elasticsearch.search.aggregations.AggregatorFactories;, +import org.elasticsearch.search.aggregations.InternalAggregation;, +import org.elasticsearch.search.aggregations.LeafBucketCollector;, +import org.elasticsearch.search.aggregations.LeafBucketCollectorBase;, +import org.elasticsearch.search.aggregations.bucket.BucketsAggregator;, +import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;, +import org.elasticsearch.search.aggregations.support.AggregationContext;, +import org.elasticsearch.search.aggregations.support.ValuesSource;, +, +/** A range aggregator for values that are stored in SORTED_SET doc values. */, +public final class BinaryRangeAggregator extends BucketsAggregator {, +, +    public static class Range {, +, +        final String key;, +        final BytesRef from, to;, +, +        public Range(String key, BytesRef from, BytesRef to) {, +            this.key = key;, +            this.from = from;, +            this.to = to;, +        }, +    }, +, +    static final Comparator<Range> RANGE_COMPARATOR = (a, b) -> {, +        int cmp = compare(a.from, b.from, 1);, +        if (cmp == 0) {, +            cmp = compare(a.to, b.to, -1);, +        }, +        return cmp;, +    };, +]