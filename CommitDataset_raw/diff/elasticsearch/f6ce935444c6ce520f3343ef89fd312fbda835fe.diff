[+++ b/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/indexlifecycle/action/TransportGetLifecycleAction.java, +import java.util.Collections;, +            if (request.getPolicyNames().length == 0) {, +                listener.onResponse(new Response(Collections.emptyList()));, +            } else {, +                listener.onFailure(new ResourceNotFoundException("Lifecycle policy not found: {}",, +                    Arrays.toString(request.getPolicyNames())));, +            }, +++ b/x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/indexlifecycle/action/TransportGetLifecycleAction.java, +import java.util.Collections;, +            if (request.getPolicyNames().length == 0) {, +                listener.onResponse(new Response(Collections.emptyList()));, +            } else {, +                listener.onFailure(new ResourceNotFoundException("Lifecycle policy not found: {}",, +                    Arrays.toString(request.getPolicyNames())));, +            }, +++ b/x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/indexlifecycle/IndexLifecycleInitialisationTests.java, +import java.util.concurrent.ExecutionException;, +import static org.hamcrest.Matchers.containsString;, +, +        // test get-lifecycle behavior when IndexLifecycleMetaData is null, +        GetLifecycleAction.Response getUninitializedLifecycleResponse = client().execute(GetLifecycleAction.INSTANCE,, +            new GetLifecycleAction.Request()).get();, +        assertThat(getUninitializedLifecycleResponse.getPolicies().size(), equalTo(0));, +        ExecutionException exception = expectThrows(ExecutionException.class,() -> client(), +            .execute(GetLifecycleAction.INSTANCE, new GetLifecycleAction.Request("non-existent-policy")).get());, +        assertThat(exception.getMessage(), containsString("Lifecycle policy not found: [non-existent-policy]"));, +]