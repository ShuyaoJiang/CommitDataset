[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +, +            Settings transientFinalSettings = transientSettings.build();, +            Settings persistentFinalSettings = persistentSettings.build();, +            // both transient and persistent settings must be consistent by itself we can't allow dependencies to be, +            // in either of them otherwise a full cluster restart will break the settings validation, +            clusterSettings.validate(transientFinalSettings, true);, +            clusterSettings.validate(persistentFinalSettings, true);, +, +                    .persistentSettings(persistentFinalSettings), +                    .transientSettings(transientFinalSettings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +, +            Settings transientFinalSettings = transientSettings.build();, +            Settings persistentFinalSettings = persistentSettings.build();, +            // both transient and persistent settings must be consistent by itself we can't allow dependencies to be, +            // in either of them otherwise a full cluster restart will break the settings validation, +            clusterSettings.validate(transientFinalSettings, true);, +            clusterSettings.validate(persistentFinalSettings, true);, +, +                    .persistentSettings(persistentFinalSettings), +                    .transientSettings(transientFinalSettings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +        indexScopedSettings.validate(templateSettingsBuilder.build(), true); // templates must be consistent with regards to dependencies, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +, +            Settings transientFinalSettings = transientSettings.build();, +            Settings persistentFinalSettings = persistentSettings.build();, +            // both transient and persistent settings must be consistent by itself we can't allow dependencies to be, +            // in either of them otherwise a full cluster restart will break the settings validation, +            clusterSettings.validate(transientFinalSettings, true);, +            clusterSettings.validate(persistentFinalSettings, true);, +, +                    .persistentSettings(persistentFinalSettings), +                    .transientSettings(transientFinalSettings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +        indexScopedSettings.validate(templateSettingsBuilder.build(), true); // templates must be consistent with regards to dependencies, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        Settings build = updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX).build();, +        indexScopedSettings.validate(build, true); // we do validate here - index setting must be consistent, +        request.settings(build);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +, +            Settings transientFinalSettings = transientSettings.build();, +            Settings persistentFinalSettings = persistentSettings.build();, +            // both transient and persistent settings must be consistent by itself we can't allow dependencies to be, +            // in either of them otherwise a full cluster restart will break the settings validation, +            clusterSettings.validate(transientFinalSettings, true);, +            clusterSettings.validate(persistentFinalSettings, true);, +, +                    .persistentSettings(persistentFinalSettings), +                    .transientSettings(transientFinalSettings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +        indexScopedSettings.validate(templateSettingsBuilder.build(), true); // templates must be consistent with regards to dependencies, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        Settings build = updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX).build();, +        indexScopedSettings.validate(build, true); // we do validate here - index setting must be consistent, +        request.settings(build);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java, +            indexScopedSettings.validate(request.settings, true); // templates must be consistent with regards to dependencies, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +, +            Settings transientFinalSettings = transientSettings.build();, +            Settings persistentFinalSettings = persistentSettings.build();, +            // both transient and persistent settings must be consistent by itself we can't allow dependencies to be, +            // in either of them otherwise a full cluster restart will break the settings validation, +            clusterSettings.validate(transientFinalSettings, true);, +            clusterSettings.validate(persistentFinalSettings, true);, +, +                    .persistentSettings(persistentFinalSettings), +                    .transientSettings(transientFinalSettings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java, +        indexScopedSettings.validate(templateSettingsBuilder.build(), true); // templates must be consistent with regards to dependencies, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        Settings build = updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX).build();, +        indexScopedSettings.validate(build, true); // we do validate here - index setting must be consistent, +        request.settings(build);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java, +            indexScopedSettings.validate(request.settings, true); // templates must be consistent with regards to dependencies, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +import java.util.function.Predicate;, +        indexScopedSettings.validate(normalizedSettings, false); // don't validate dependencies here we check it below, +                            Settings finalSettings = indexSettings.build();, +                            indexScopedSettings.validate(finalSettings.filter(k -> indexScopedSettings.isPrivateSetting(k) == false), true);, +                            metaDataBuilder.put(IndexMetaData.builder(indexMetaData).settings(finalSettings));, +                            Settings finalSettings = indexSettings.build();, +                            indexScopedSettings.validate(finalSettings.filter(k -> indexScopedSettings.isPrivateSetting(k) == false), true);, +                            metaDataBuilder.put(IndexMetaData.builder(indexMetaData).settings(finalSettings));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/SettingsUpdater.java, +, +            Settings transientFinalSettings = transientSettings.build();, +            Settings persistentFinalSettings = persistentSettings.build();, +            // both transient and persistent settings must be consistent by itself we can't allow dependencies to be, +            // in either of them otherwise a full cluster restart will break the settings validation, +            clusterSettings.validate(transientFinalSettings, true);, +            clusterSettings.validate(persistentFinalSettings, true);, +, +                    .persistentSettings(persistentFinalSettings), +                    .transientSettings(transientFinalSettings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/template/put/TransportPutIndexTemplateAction.java]