[+++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    protected Term createTerm(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    protected Term createTerm(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +    protected boolean forceAnalyzeQueryString() {, +        return false;, +    }, +, +        if (fieldType != null && fieldType.useTermQueryWithQueryString() && !forceAnalyzeQueryString()) {, +                return fieldType.termQuery(value, context);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    protected Term createTerm(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +    protected boolean forceAnalyzeQueryString() {, +        return false;, +    }, +, +        if (fieldType != null && fieldType.useTermQueryWithQueryString() && !forceAnalyzeQueryString()) {, +                return fieldType.termQuery(value, context);, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +                final FieldAndFieldType fieldAndFieldType = group.get(0);, +                Query q = parseGroup(type.matchQueryType(), fieldAndFieldType.field, 1f, value, minimumShouldMatch);, +    protected boolean forceAnalyzeQueryString() {, +        return this.queryBuilder == null ? super.forceAnalyzeQueryString() : this.queryBuilder.forceAnalyzeQueryString();, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +    protected Term createTerm(Object value) {, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +    protected boolean forceAnalyzeQueryString() {, +        return false;, +    }, +, +        if (fieldType != null && fieldType.useTermQueryWithQueryString() && !forceAnalyzeQueryString()) {, +                return fieldType.termQuery(value, context);, +++ b/core/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +                final FieldAndFieldType fieldAndFieldType = group.get(0);, +                Query q = parseGroup(type.matchQueryType(), fieldAndFieldType.field, 1f, value, minimumShouldMatch);, +    protected boolean forceAnalyzeQueryString() {, +        return this.queryBuilder == null ? super.forceAnalyzeQueryString() : this.queryBuilder.forceAnalyzeQueryString();, +++ b/core/src/test/java/org/elasticsearch/search/query/MultiMatchQueryIT.java]