[+++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    /**, +     * Check whether this exception contains an exception of the given type:, +     * either it is of the given class itself or it contains a nested cause, +     * of the given type., +     *, +     * @param exType the exception type to look for, +     * @return whether there is a nested exception of the specified type, +     */, +    public boolean contains(Class<? extends Throwable> exType) {, +        if (exType == null) {, +            return false;, +        }, +        if (exType.isInstance(this)) {, +            return true;, +        }, +        Throwable cause = getCause();, +        if (cause == this) {, +            return false;, +        }, +        if (cause instanceof ElasticsearchException) {, +            return ((ElasticsearchException) cause).contains(exType);, +        } else {, +            while (cause != null) {, +                if (exType.isInstance(cause)) {, +                    return true;, +                }, +                if (cause.getCause() == cause) {, +                    break;, +                }, +                cause = cause.getCause();, +            }, +            return false;, +        }, +    }, +, +        SCRIPT_EXCEPTION(org.elasticsearch.script.ScriptException.class, org.elasticsearch.script.ScriptException::new, 25),, +                ShardStateAction.NoLongerPrimaryShardException::new, 142);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    /**, +     * Check whether this exception contains an exception of the given type:, +     * either it is of the given class itself or it contains a nested cause, +     * of the given type., +     *, +     * @param exType the exception type to look for, +     * @return whether there is a nested exception of the specified type, +     */, +    public boolean contains(Class<? extends Throwable> exType) {, +        if (exType == null) {, +            return false;, +        }, +        if (exType.isInstance(this)) {, +            return true;, +        }, +        Throwable cause = getCause();, +        if (cause == this) {, +            return false;, +        }, +        if (cause instanceof ElasticsearchException) {, +            return ((ElasticsearchException) cause).contains(exType);, +        } else {, +            while (cause != null) {, +                if (exType.isInstance(cause)) {, +                    return true;, +                }, +                if (cause.getCause() == cause) {, +                    break;, +                }, +                cause = cause.getCause();, +            }, +            return false;, +        }, +    }, +, +        SCRIPT_EXCEPTION(org.elasticsearch.script.ScriptException.class, org.elasticsearch.script.ScriptException::new, 25),, +                ShardStateAction.NoLongerPrimaryShardException::new, 142);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        addPath(policy, Environment.PATH_HOME_SETTING.getKey(), environment.pluginsFile(), "read,readlink");, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    /**, +     * Check whether this exception contains an exception of the given type:, +     * either it is of the given class itself or it contains a nested cause, +     * of the given type., +     *, +     * @param exType the exception type to look for, +     * @return whether there is a nested exception of the specified type, +     */, +    public boolean contains(Class<? extends Throwable> exType) {, +        if (exType == null) {, +            return false;, +        }, +        if (exType.isInstance(this)) {, +            return true;, +        }, +        Throwable cause = getCause();, +        if (cause == this) {]