[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashMap;, +        private Map<String, RootMapper> rootMappers = new HashMap<String, RootMapper>();, +, +            // add default mappers, +            this.rootMappers.put(SizeFieldMapper.NAME, new SizeFieldMapper());, +            this.rootMappers.put(IndexFieldMapper.NAME, new IndexFieldMapper());, +            this.rootMappers.put(SourceFieldMapper.NAME, new SourceFieldMapper());, +            this.rootMappers.put(TypeFieldMapper.NAME, new TypeFieldMapper());, +            this.rootMappers.put(AllFieldMapper.NAME, new AllFieldMapper());, +            this.rootMappers.put(AnalyzerMapper.NAME, new AnalyzerMapper());, +        public Builder put(RootMapper.Builder mapper) {, +            rootMappers.put(mapper.name(), (RootMapper) mapper.build(builderContext));, +            return new DocumentMapper(index, docMapperParser, rootObjectMapper, meta, uidFieldMapper, idFieldMapper,, +                    parentFieldMapper, routingFieldMapper, indexAnalyzer, searchAnalyzer, boostFieldMapper,, +                    rootMappers);, +    private final ImmutableMap<String, RootMapper> rootMappers;, +    private final RootMapper[] rootMappersOrdered;, +    private final RootMapper[] rootMappersNotIncludedInObject;, +, +                          @Nullable BoostFieldMapper boostFieldMapper,, +                          Map<String, RootMapper> rootMappers) {, +        this.rootMappers = ImmutableMap.copyOf(rootMappers);, +        this.rootMappersOrdered = rootMappers.values().toArray(new RootMapper[rootMappers.values().size()]);, +        List<RootMapper> rootMappersNotIncludedInObjectLst = newArrayList();, +        for (RootMapper rootMapper : rootMappersOrdered) {, +            if (!rootMapper.includeInObject()) {, +                rootMappersNotIncludedInObjectLst.add(rootMapper);, +            }, +        }, +        this.rootMappersNotIncludedInObject = rootMappersNotIncludedInObjectLst.toArray(new RootMapper[rootMappersNotIncludedInObjectLst.size()]);, +, +        for (RootMapper rootMapper : rootMappersOrdered) {, +            if (rootMapper.includeInObject()) {, +                rootObjectMapper.putMapper(rootMapper);, +            } else {, +                if (rootMapper instanceof FieldMapper) {, +                    tempFieldMappers.add((FieldMapper) rootMapper);, +            }, +        }, +, +        // add the basic ones, +    @SuppressWarnings({"unchecked"}) public <T extends RootMapper> T rootMapper(String name) {, +        return (T) rootMappers.get(name);, +        return rootMapper(TypeFieldMapper.NAME);, +        return rootMapper(SourceFieldMapper.NAME);, +        return rootMapper(AllFieldMapper.NAME);, +            for (RootMapper rootMapper : rootMappersOrdered) {, +                rootMapper.preParse(context);, +, +            for (RootMapper rootMapper : rootMappersOrdered) {, +                rootMapper.postParse(context);, +            }, +, +, +, +            for (RootMapper rootMapper : rootMappersOrdered) {, +                rootMapper.validate(context);, +            }, +, +            for (RootMapper rootMapper : rootMappersOrdered) {, +                if (!rootMapper.includeInObject() && rootMapper instanceof FieldMapper) {, +                    fieldMapperListener.fieldMapper((FieldMapper) rootMapper);, +                }, +            }, +        for (Map.Entry<String, RootMapper> entry : rootMappers.entrySet()) {, +            // root mappers included in root object will get merge in the rootObjectMapper, +            if (entry.getValue().includeInObject()) {, +                continue;, +            }, +            RootMapper mergeWithRootMapper = mergeWith.rootMappers.get(entry.getKey());, +            if (mergeWithRootMapper != null) {, +                entry.getValue().merge(mergeWithRootMapper, mergeContext);, +            }, +        }, +        for (RootMapper rootMapper : rootMappersOrdered) {, +            rootMapper.close();, +        }, +        List<Mapper> additional = new ArrayList<Mapper>();, +        additional.addAll(Arrays.asList(rootMappersNotIncludedInObject));, +        }, additional.toArray(new Mapper[additional.size()]));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashMap;, +        private Map<String, RootMapper> rootMappers = new HashMap<String, RootMapper>();, +, +            // add default mappers, +            this.rootMappers.put(SizeFieldMapper.NAME, new SizeFieldMapper());, +            this.rootMappers.put(IndexFieldMapper.NAME, new IndexFieldMapper());, +            this.rootMappers.put(SourceFieldMapper.NAME, new SourceFieldMapper());, +            this.rootMappers.put(TypeFieldMapper.NAME, new TypeFieldMapper());, +            this.rootMappers.put(AllFieldMapper.NAME, new AllFieldMapper());, +            this.rootMappers.put(AnalyzerMapper.NAME, new AnalyzerMapper());, +        public Builder put(RootMapper.Builder mapper) {, +            rootMappers.put(mapper.name(), (RootMapper) mapper.build(builderContext));, +            return new DocumentMapper(index, docMapperParser, rootObjectMapper, meta, uidFieldMapper, idFieldMapper,, +                    parentFieldMapper, routingFieldMapper, indexAnalyzer, searchAnalyzer, boostFieldMapper,]