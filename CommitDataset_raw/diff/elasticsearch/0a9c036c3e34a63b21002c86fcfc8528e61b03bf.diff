[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +    private static final List<String> DEFINITION_FILES = Collections.unmodifiableList(, +        Arrays.asList("org.elasticsearch.txt", , +                      "java.lang.txt",, +                      "java.math.txt",, +                      "java.text.txt",, +                      "java.util.txt",, +                      "java.util.function.txt",, +                      "java.util.stream.txt"));, +        private Constructor(String name, Struct owner, List<Type> arguments,, +                            org.objectweb.asm.commons.Method method) {, +        public final int modifiers;, +        private Method(String name, Struct owner, Type rtn, List<Type> arguments,, +                       org.objectweb.asm.commons.Method method, int modifiers, MethodHandle handle) {, +            this.modifiers = modifiers;, +        public final String javaName;, +        public final int modifiers;, +        private final MethodHandle getter;, +        private final MethodHandle setter;, +        private Field(String name, String javaName, Struct owner, Type type, int modifiers, MethodHandle getter, MethodHandle setter) {, +            this.javaName = javaName;, +            this.modifiers = modifiers;, +        for (String file : DEFINITION_FILES) {, +                try (InputStream stream = Definition.class.getResourceAsStream(file);, +                throw new RuntimeException("syntax error in " + file + ", line: " + currentLine, e);, +            }, +        for (String file : DEFINITION_FILES) {, +                try (InputStream stream = Definition.class.getResourceAsStream(file);, +                throw new RuntimeException("syntax error in " + file + ", line: " + currentLine, e);, +            }, +        if (!name.matches("^[_a-zA-Z][\\.,_a-zA-Z0-9]*$")) {, +        final Constructor constructor = new Constructor(name, owner, Arrays.asList(args), asm);, +        final Method method = new Method(name, owner, rtn, Arrays.asList(args), asm, modifiers, handle);, +        final Field field = new Field(name, reflect.getName(), owner, type, modifiers, getter, setter);, +    private void copyStruct(String struct, List<String> children) {, +            if (child == null) {, +                        new Method(method.name, owner, method.rtn, method.arguments, method.method, method.modifiers, method.handle));, +            for (Field field : child.members.values()) {, +                        new Field(field.name, field.javaName, owner, field.type, field.modifiers, field.getter, field.setter));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +    private static final List<String> DEFINITION_FILES = Collections.unmodifiableList(, +        Arrays.asList("org.elasticsearch.txt", , +                      "java.lang.txt",, +                      "java.math.txt",, +                      "java.text.txt",, +                      "java.util.txt",, +                      "java.util.function.txt",, +                      "java.util.stream.txt"));, +        private Constructor(String name, Struct owner, List<Type> arguments,, +                            org.objectweb.asm.commons.Method method) {, +        public final int modifiers;, +        private Method(String name, Struct owner, Type rtn, List<Type> arguments,, +                       org.objectweb.asm.commons.Method method, int modifiers, MethodHandle handle) {, +            this.modifiers = modifiers;, +        public final String javaName;, +        public final int modifiers;, +        private final MethodHandle getter;, +        private final MethodHandle setter;, +        private Field(String name, String javaName, Struct owner, Type type, int modifiers, MethodHandle getter, MethodHandle setter) {, +            this.javaName = javaName;, +            this.modifiers = modifiers;, +        for (String file : DEFINITION_FILES) {, +                try (InputStream stream = Definition.class.getResourceAsStream(file);, +                throw new RuntimeException("syntax error in " + file + ", line: " + currentLine, e);, +            }, +        for (String file : DEFINITION_FILES) {, +                try (InputStream stream = Definition.class.getResourceAsStream(file);, +                throw new RuntimeException("syntax error in " + file + ", line: " + currentLine, e);, +            }, +        if (!name.matches("^[_a-zA-Z][\\.,_a-zA-Z0-9]*$")) {, +        final Constructor constructor = new Constructor(name, owner, Arrays.asList(args), asm);, +        final Method method = new Method(name, owner, rtn, Arrays.asList(args), asm, modifiers, handle);, +        final Field field = new Field(name, reflect.getName(), owner, type, modifiers, getter, setter);, +    private void copyStruct(String struct, List<String> children) {, +            if (child == null) {, +                        new Method(method.name, owner, method.rtn, method.arguments, method.method, method.modifiers, method.handle));, +            for (Field field : child.members.values()) {, +                        new Field(field.name, field.javaName, owner, field.type, field.modifiers, field.getter, field.setter));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/LCall.java, +        if (java.lang.reflect.Modifier.isStatic(method.modifiers)) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +    private static final List<String> DEFINITION_FILES = Collections.unmodifiableList(, +        Arrays.asList("org.elasticsearch.txt", , +                      "java.lang.txt",, +                      "java.math.txt",, +                      "java.text.txt",, +                      "java.util.txt",, +                      "java.util.function.txt",, +                      "java.util.stream.txt"));, +        private Constructor(String name, Struct owner, List<Type> arguments,, +                            org.objectweb.asm.commons.Method method) {, +        public final int modifiers;, +        private Method(String name, Struct owner, Type rtn, List<Type> arguments,, +                       org.objectweb.asm.commons.Method method, int modifiers, MethodHandle handle) {, +            this.modifiers = modifiers;, +        public final String javaName;, +        public final int modifiers;, +        private final MethodHandle getter;, +        private final MethodHandle setter;, +        private Field(String name, String javaName, Struct owner, Type type, int modifiers, MethodHandle getter, MethodHandle setter) {]