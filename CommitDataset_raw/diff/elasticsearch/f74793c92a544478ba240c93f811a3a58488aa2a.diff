[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/local/LocalGateway.java, +    private boolean requiresStatePersistence;, +        if (!requiresStatePersistence) {, +            requiresStatePersistence = false;, +            requiresStatePersistence = true;, +                    File latest = findLatestMetaStateVersion();, +                    if (latest != null) {, +                        logger.debug("[find_latest_state]: loading metadata from [{}]", latest.getAbsolutePath());, +                        this.currentMetaState = readMetaState(Streams.copyToByteArray(new FileInputStream(latest)));, +                    File latest = findLatestStartedShardsVersion();, +                    if (latest != null) {, +                        logger.debug("[find_latest_state]: loading started shards from [{}]", latest.getAbsolutePath());, +                        this.currentStartedShards = readStartedShards(Streams.copyToByteArray(new FileInputStream(latest)));, +    private File findLatestStartedShardsVersion() throws IOException {, +        File latest = null;, +        for (File dataLocation : nodeEnv.nodeDataLocations()) {, +            File stateLocation = new File(dataLocation, "_state");, +            if (!stateLocation.exists()) {, +                continue;, +            }, +            File[] stateFiles = stateLocation.listFiles();, +            if (stateFiles == null) {, +                continue;, +            }, +            for (File stateFile : stateFiles) {, +                        latest = stateFile;, +        }, +        return latest;, +    private File findLatestMetaStateVersion() throws IOException {, +        File latest = null;, +        for (File dataLocation : nodeEnv.nodeDataLocations()) {, +            File stateLocation = new File(dataLocation, "_state");, +            if (!stateLocation.exists()) {, +                continue;, +            }, +            File[] stateFiles = stateLocation.listFiles();, +            if (stateFiles == null) {, +                continue;, +            }, +            for (File stateFile : stateFiles) {, +                        latest = stateFile;, +        }, +        return latest;, +                File stateLocation = new File(nodeEnv.nodeDataLocations()[0], "_state");, +                if (!stateLocation.exists()) {, +                    FileSystemUtils.mkdirs(stateLocation);, +                }, +                File stateFile = new File(stateLocation, "metadata-" + version);, +                for (File dataLocation : nodeEnv.nodeDataLocations()) {, +                    stateLocation = new File(dataLocation, "_state");, +                    if (!stateLocation.exists()) {, +                        continue;, +                    }, +                    File[] files = stateLocation.listFiles(new FilenameFilter() {, +                }, +                File stateLocation = new File(nodeEnv.nodeDataLocations()[0], "_state");, +                if (!stateLocation.exists()) {, +                    FileSystemUtils.mkdirs(stateLocation);, +                }, +                File stateFile = new File(stateLocation, "shards-" + event.state().version());, +            for (File dataLocation : nodeEnv.nodeDataLocations()) {, +                File stateLocation = new File(dataLocation, "_state");, +                if (!stateLocation.exists()) {, +                    continue;, +                }, +                File[] files = stateLocation.listFiles(new FilenameFilter() {, +}, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/local/LocalGateway.java, +    private boolean requiresStatePersistence;, +        if (!requiresStatePersistence) {, +            requiresStatePersistence = false;, +            requiresStatePersistence = true;, +                    File latest = findLatestMetaStateVersion();, +                    if (latest != null) {, +                        logger.debug("[find_latest_state]: loading metadata from [{}]", latest.getAbsolutePath());, +                        this.currentMetaState = readMetaState(Streams.copyToByteArray(new FileInputStream(latest)));, +                    File latest = findLatestStartedShardsVersion();, +                    if (latest != null) {, +                        logger.debug("[find_latest_state]: loading started shards from [{}]", latest.getAbsolutePath());, +                        this.currentStartedShards = readStartedShards(Streams.copyToByteArray(new FileInputStream(latest)));, +    private File findLatestStartedShardsVersion() throws IOException {, +        File latest = null;, +        for (File dataLocation : nodeEnv.nodeDataLocations()) {, +            File stateLocation = new File(dataLocation, "_state");, +            if (!stateLocation.exists()) {, +                continue;, +            }, +            File[] stateFiles = stateLocation.listFiles();, +            if (stateFiles == null) {, +                continue;, +            }, +            for (File stateFile : stateFiles) {, +                        latest = stateFile;, +        }, +        return latest;, +    private File findLatestMetaStateVersion() throws IOException {, +        File latest = null;, +        for (File dataLocation : nodeEnv.nodeDataLocations()) {, +            File stateLocation = new File(dataLocation, "_state");, +            if (!stateLocation.exists()) {]