[+++ b/src/main/java/org/elasticsearch/http/HttpInfo.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +    static final class Fields {, +        static final XContentBuilderString HTTP = new XContentBuilderString("http");, +        static final XContentBuilderString BOUND_ADDRESS = new XContentBuilderString("bound_address");, +        static final XContentBuilderString PUBLISH_ADDRESS = new XContentBuilderString("publish_address");, +    }, +, +        builder.startObject(Fields.HTTP);, +        builder.field(Fields.BOUND_ADDRESS, address.boundAddress().toString());, +        builder.field(Fields.PUBLISH_ADDRESS, address.publishAddress().toString());, +++ b/src/main/java/org/elasticsearch/http/HttpInfo.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +    static final class Fields {, +        static final XContentBuilderString HTTP = new XContentBuilderString("http");, +        static final XContentBuilderString BOUND_ADDRESS = new XContentBuilderString("bound_address");, +        static final XContentBuilderString PUBLISH_ADDRESS = new XContentBuilderString("publish_address");, +    }, +, +        builder.startObject(Fields.HTTP);, +        builder.field(Fields.BOUND_ADDRESS, address.boundAddress().toString());, +        builder.field(Fields.PUBLISH_ADDRESS, address.publishAddress().toString());, +++ b/src/main/java/org/elasticsearch/http/HttpStats.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +    static final class Fields {, +        static final XContentBuilderString HTTP = new XContentBuilderString("http");, +        static final XContentBuilderString CURRENT_OPEN = new XContentBuilderString("current_open");, +        static final XContentBuilderString TOTAL_OPENED = new XContentBuilderString("total_opened");, +    }, +, +        builder.startObject(Fields.HTTP);, +        builder.field(Fields.CURRENT_OPEN, serverOpen);, +        builder.field(Fields.TOTAL_OPENED, totalOpen);, +++ b/src/main/java/org/elasticsearch/http/HttpInfo.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +    static final class Fields {, +        static final XContentBuilderString HTTP = new XContentBuilderString("http");, +        static final XContentBuilderString BOUND_ADDRESS = new XContentBuilderString("bound_address");, +        static final XContentBuilderString PUBLISH_ADDRESS = new XContentBuilderString("publish_address");, +    }, +, +        builder.startObject(Fields.HTTP);, +        builder.field(Fields.BOUND_ADDRESS, address.boundAddress().toString());, +        builder.field(Fields.PUBLISH_ADDRESS, address.publishAddress().toString());, +++ b/src/main/java/org/elasticsearch/http/HttpStats.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +    static final class Fields {, +        static final XContentBuilderString HTTP = new XContentBuilderString("http");, +        static final XContentBuilderString CURRENT_OPEN = new XContentBuilderString("current_open");, +        static final XContentBuilderString TOTAL_OPENED = new XContentBuilderString("total_opened");, +    }, +, +        builder.startObject(Fields.HTTP);, +        builder.field(Fields.CURRENT_OPEN, serverOpen);, +        builder.field(Fields.TOTAL_OPENED, totalOpen);, +++ b/src/main/java/org/elasticsearch/monitor/fs/FsStats.java, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +    static final class Fields {, +        static final XContentBuilderString FS = new XContentBuilderString("fs");, +        static final XContentBuilderString TIMESTAMP = new XContentBuilderString("timestamp");, +        static final XContentBuilderString DATA = new XContentBuilderString("data");, +        static final XContentBuilderString PATH = new XContentBuilderString("path");, +        static final XContentBuilderString MOUNT = new XContentBuilderString("mount");, +        static final XContentBuilderString DEV = new XContentBuilderString("dev");, +        static final XContentBuilderString TOTAL = new XContentBuilderString("total");, +        static final XContentBuilderString TOTAL_IN_BYTES = new XContentBuilderString("total_in_bytes");, +        static final XContentBuilderString FREE = new XContentBuilderString("free");, +        static final XContentBuilderString FREE_IN_BYTES = new XContentBuilderString("free_in_bytes");, +        static final XContentBuilderString AVAILABLE = new XContentBuilderString("available");, +        static final XContentBuilderString AVAILABLE_IN_BYTES = new XContentBuilderString("available_in_bytes");, +        static final XContentBuilderString DISK_READS = new XContentBuilderString("disk_reads");, +        static final XContentBuilderString DISK_WRITES = new XContentBuilderString("disk_writes");, +        static final XContentBuilderString DISK_READ_SIZE = new XContentBuilderString("disk_read_size");, +        static final XContentBuilderString DISK_READ_SIZE_IN_BYTES = new XContentBuilderString("disk_read_size_in_bytes");, +        static final XContentBuilderString DISK_WRITE_SIZE = new XContentBuilderString("disk_write_size");, +        static final XContentBuilderString DISK_WRITE_SIZE_IN_BYTES = new XContentBuilderString("disk_write_size_in_bytes");, +        static final XContentBuilderString DISK_QUEUE = new XContentBuilderString("disk_queue");, +        static final XContentBuilderString DISK_SERVICE_TIME = new XContentBuilderString("disk_service_time");, +    }, +, +        builder.startObject(Fields.FS);, +        builder.field(Fields.TIMESTAMP, timestamp);, +        builder.startArray(Fields.DATA);, +            builder.field(Fields.PATH, info.path);, +                builder.field(Fields.MOUNT, info.mount);, +                builder.field(Fields.DEV, info.dev);, +                builder.field(Fields.TOTAL, info.total().toString());, +                builder.field(Fields.TOTAL_IN_BYTES, info.total);, +                builder.field(Fields.FREE, info.free().toString());, +                builder.field(Fields.FREE_IN_BYTES, info.free);, +                builder.field(Fields.AVAILABLE, info.available().toString());, +                builder.field(Fields.AVAILABLE_IN_BYTES, info.available);, +                builder.field(Fields.DISK_READS, info.diskReads);, +                builder.field(Fields.DISK_WRITES, info.diskWrites);, +                builder.field(Fields.DISK_READ_SIZE, info.diskReadSizeSize().toString());, +                builder.field(Fields.DISK_READ_SIZE_IN_BYTES, info.diskReadSizeInBytes());, +                builder.field(Fields.DISK_WRITE_SIZE, info.diskWriteSizeSize().toString());, +                builder.field(Fields.DISK_WRITE_SIZE_IN_BYTES, info.diskWriteSizeInBytes());, +                builder.field(Fields.DISK_QUEUE, Strings.format1Decimals(info.diskQueue, ""));, +                builder.field(Fields.DISK_SERVICE_TIME, Strings.format1Decimals(info.diskServiceTime, ""));]