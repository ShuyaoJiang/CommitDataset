[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder addTermFacet(String name, String fieldName, int size) {, +        facetsBuilder().termFacet(name, fieldName, size);, +    public SearchRequestBuilder addTermFacet(String name, String fieldName, int size, boolean global) {, +        facetsBuilder().termFacet(name, fieldName, size, global);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder addTermFacet(String name, String fieldName, int size) {, +        facetsBuilder().termFacet(name, fieldName, size);, +    public SearchRequestBuilder addTermFacet(String name, String fieldName, int size, boolean global) {, +        facetsBuilder().termFacet(name, fieldName, size, global);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/builder/SearchSourceFacetsBuilder.java, +import org.elasticsearch.search.facets.collector.query.QueryFacetCollectorParser;, +import org.elasticsearch.search.facets.collector.term.TermFacetCollectorParser;, +    private List<TermFacet> termFacets;, +    public SearchSourceFacetsBuilder termFacet(String name, String fieldName, int size) {, +        return termFacet(name, fieldName, size, null);, +    public SearchSourceFacetsBuilder termFacet(String name, String fieldName, int size, Boolean global) {, +        if (termFacets == null) {, +            termFacets = newArrayListWithCapacity(2);, +        termFacets.add(new TermFacet(name, fieldName, size, global));, +        if (queryFacets == null && termFacets == null) {, +                builder.field(QueryFacetCollectorParser.NAME);, +        if (termFacets != null) {, +            for (TermFacet termFacet : termFacets) {, +                builder.startObject(termFacet.name());, +                builder.startObject(TermFacetCollectorParser.NAME);, +                builder.field("field", termFacet.fieldName());, +                builder.field("size", termFacet.size());, +                if (termFacet.global() != null) {, +                    builder.field("global", termFacet.global());, +    private static class TermFacet {, +        private TermFacet(String name, String fieldName, int size, Boolean global) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder addTermFacet(String name, String fieldName, int size) {, +        facetsBuilder().termFacet(name, fieldName, size);, +    public SearchRequestBuilder addTermFacet(String name, String fieldName, int size, boolean global) {, +        facetsBuilder().termFacet(name, fieldName, size, global);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/builder/SearchSourceFacetsBuilder.java, +import org.elasticsearch.search.facets.collector.query.QueryFacetCollectorParser;, +import org.elasticsearch.search.facets.collector.term.TermFacetCollectorParser;, +    private List<TermFacet> termFacets;, +    public SearchSourceFacetsBuilder termFacet(String name, String fieldName, int size) {, +        return termFacet(name, fieldName, size, null);, +    public SearchSourceFacetsBuilder termFacet(String name, String fieldName, int size, Boolean global) {, +        if (termFacets == null) {, +            termFacets = newArrayListWithCapacity(2);, +        termFacets.add(new TermFacet(name, fieldName, size, global));, +        if (queryFacets == null && termFacets == null) {, +                builder.field(QueryFacetCollectorParser.NAME);, +        if (termFacets != null) {, +            for (TermFacet termFacet : termFacets) {, +                builder.startObject(termFacet.name());, +                builder.startObject(TermFacetCollectorParser.NAME);, +                builder.field("field", termFacet.fieldName());, +                builder.field("size", termFacet.size());, +                if (termFacet.global() != null) {, +                    builder.field("global", termFacet.global());, +    private static class TermFacet {, +        private TermFacet(String name, String fieldName, int size, Boolean global) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/FacetsParseElement.java, +import org.elasticsearch.search.facets.collector.term.TermFacetCollectorParser;, +        builder.put(TermFacetCollectorParser.NAME, new TermFacetCollectorParser());, +        builder.put(QueryFacetCollectorParser.NAME, new QueryFacetCollectorParser());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder addTermFacet(String name, String fieldName, int size) {, +        facetsBuilder().termFacet(name, fieldName, size);, +    public SearchRequestBuilder addTermFacet(String name, String fieldName, int size, boolean global) {, +        facetsBuilder().termFacet(name, fieldName, size, global);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/builder/SearchSourceFacetsBuilder.java, +import org.elasticsearch.search.facets.collector.query.QueryFacetCollectorParser;, +import org.elasticsearch.search.facets.collector.term.TermFacetCollectorParser;, +    private List<TermFacet> termFacets;, +    public SearchSourceFacetsBuilder termFacet(String name, String fieldName, int size) {, +        return termFacet(name, fieldName, size, null);, +    public SearchSourceFacetsBuilder termFacet(String name, String fieldName, int size, Boolean global) {, +        if (termFacets == null) {, +            termFacets = newArrayListWithCapacity(2);, +        termFacets.add(new TermFacet(name, fieldName, size, global));, +        if (queryFacets == null && termFacets == null) {, +                builder.field(QueryFacetCollectorParser.NAME);, +        if (termFacets != null) {, +            for (TermFacet termFacet : termFacets) {, +                builder.startObject(termFacet.name());, +                builder.startObject(TermFacetCollectorParser.NAME);, +                builder.field("field", termFacet.fieldName());, +                builder.field("size", termFacet.size());, +                if (termFacet.global() != null) {, +                    builder.field("global", termFacet.global());, +    private static class TermFacet {, +        private TermFacet(String name, String fieldName, int size, Boolean global) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/FacetsParseElement.java, +import org.elasticsearch.search.facets.collector.term.TermFacetCollectorParser;, +        builder.put(TermFacetCollectorParser.NAME, new TermFacetCollectorParser());, +        builder.put(QueryFacetCollectorParser.NAME, new QueryFacetCollectorParser());, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder addTermFacet(String name, String fieldName, int size) {, +        facetsBuilder().termFacet(name, fieldName, size);, +    public SearchRequestBuilder addTermFacet(String name, String fieldName, int size, boolean global) {, +        facetsBuilder().termFacet(name, fieldName, size, global);]