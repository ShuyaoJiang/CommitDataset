[+++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +    private ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +    public BulkRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {, +        this.waitForActiveShards = waitForActiveShards;, +        return this.waitForActiveShards;, +        waitForActiveShards = ActiveShardCount.readFrom(in);, +        waitForActiveShards.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +    private ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +    public BulkRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {, +        this.waitForActiveShards = waitForActiveShards;, +        return this.waitForActiveShards;, +        waitForActiveShards = ActiveShardCount.readFrom(in);, +        waitForActiveShards.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequestBuilder.java, +    public BulkRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards) {, +        request.waitForActiveShards(waitForActiveShards);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +    private ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +    public BulkRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {, +        this.waitForActiveShards = waitForActiveShards;, +        return this.waitForActiveShards;, +        waitForActiveShards = ActiveShardCount.readFrom(in);, +        waitForActiveShards.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequestBuilder.java, +    public BulkRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards) {, +        request.waitForActiveShards(waitForActiveShards);, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java, +    /**, +     * Validates that the instance is valid for the given number of replicas in an index., +     */, +    public boolean validate(final int numberOfReplicas) {, +        return value <= numberOfReplicas + 1;, +    }, +, +        switch (value) {, +            if (enoughShardsActive(shardRouting.value) == false) {, +    public boolean enoughShardsActive(final IndexShardRoutingTable shardRoutingTable) {, +        if (this == ActiveShardCount.ALL) {, +            return shardRoutingTable.allShardsStarted();, +        } else if (this == ActiveShardCount.DEFAULT) {, +            return shardRoutingTable.primaryShard().started();, +        } else {, +            return shardRoutingTable.activeShards().size() >= value;, +        }, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +    private ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +    public BulkRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {, +        this.waitForActiveShards = waitForActiveShards;, +        return this.waitForActiveShards;, +        waitForActiveShards = ActiveShardCount.readFrom(in);, +        waitForActiveShards.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequestBuilder.java, +    public BulkRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards) {, +        request.waitForActiveShards(waitForActiveShards);, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java, +    /**, +     * Validates that the instance is valid for the given number of replicas in an index., +     */, +    public boolean validate(final int numberOfReplicas) {, +        return value <= numberOfReplicas + 1;, +    }, +, +        switch (value) {, +            if (enoughShardsActive(shardRouting.value) == false) {, +    public boolean enoughShardsActive(final IndexShardRoutingTable shardRoutingTable) {, +        if (this == ActiveShardCount.ALL) {, +            return shardRoutingTable.allShardsStarted();, +        } else if (this == ActiveShardCount.DEFAULT) {, +            return shardRoutingTable.primaryShard().started();, +        } else {, +            return shardRoutingTable.activeShards().size() >= value;, +        }, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +        if (waitForActiveShards == ActiveShardCount.NONE) {, +            return null;  // not waiting for any shards, +        }, +        if (waitForActiveShards.enoughShardsActive(shardRoutingTable)) {, +            final String resolvedShards = waitForActiveShards == ActiveShardCount.ALL ? Integer.toString(shardRoutingTable.shards().size()), +                                              : waitForActiveShards.toString();, +                         "request [{}]", shardId, waitForActiveShards, shardRoutingTable.activeShards().size(),, +                         resolvedShards, opType, request);, +            return "Not enough active copies to meet shard count of [" + waitForActiveShards + "] (have " +, +                       shardRoutingTable.activeShards().size() + ", needed " + resolvedShards + ").";, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +    private ActiveShardCount waitForActiveShards = ActiveShardCount.DEFAULT;, +    public BulkRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {, +        this.waitForActiveShards = waitForActiveShards;, +        return this.waitForActiveShards;, +        waitForActiveShards = ActiveShardCount.readFrom(in);, +        waitForActiveShards.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequestBuilder.java, +    public BulkRequestBuilder setWaitForActiveShards(ActiveShardCount waitForActiveShards) {, +        request.waitForActiveShards(waitForActiveShards);, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java, +    /**, +     * Validates that the instance is valid for the given number of replicas in an index., +     */, +    public boolean validate(final int numberOfReplicas) {, +        return value <= numberOfReplicas + 1;]