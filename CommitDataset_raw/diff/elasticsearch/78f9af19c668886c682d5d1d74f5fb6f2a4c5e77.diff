[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/InvalidateTokenRequest.java, +    private final String realmName;, +    private final String username;, +        this(accessToken, refreshToken, null, null);, +    }, +, +    public InvalidateTokenRequest(@Nullable String accessToken, @Nullable String refreshToken,, +                                  @Nullable String realmName, @Nullable String username) {, +        if (Strings.hasText(realmName) || Strings.hasText(username)) {, +            if (Strings.hasText(accessToken)) {, +                throw new IllegalArgumentException("access token is not allowed when realm name or username are specified");, +            }, +            if (refreshToken != null) {, +                throw new IllegalArgumentException("refresh token is not allowed when realm name or username are specified");, +            }, +        } else {, +                    throw new IllegalArgumentException("Either access token or refresh token is required when neither realm name or " +, +                        "username are specified");, +                throw new IllegalArgumentException("Cannot supply both access token and refresh token");, +            }, +        this.realmName = realmName;, +        this.username = username;, +    public static InvalidateTokenRequest realmTokens(String realmName) {, +        if (Strings.isNullOrEmpty(realmName)) {, +            throw new IllegalArgumentException("realm name is required");, +        }, +        return new InvalidateTokenRequest(null, null, realmName, null);, +    }, +, +    public static InvalidateTokenRequest userTokens(String username) {, +        if (Strings.isNullOrEmpty(username)) {, +            throw new IllegalArgumentException("username is required");, +        }, +        return new InvalidateTokenRequest(null, null, null, username);, +    }, +, +    public String getRealmName() {, +        return realmName;, +    }, +, +    public String getUsername() {, +        return username;, +    }, +, +        if (realmName != null) {, +            builder.field("realm_name", realmName);, +        }, +        if (username != null) {, +            builder.field("username", username);, +        }, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +        InvalidateTokenRequest that = (InvalidateTokenRequest) o;, +        return Objects.equals(accessToken, that.accessToken) &&, +            Objects.equals(refreshToken, that.refreshToken) &&, +            Objects.equals(realmName, that.realmName) &&, +            Objects.equals(username, that.username);, +        return Objects.hash(accessToken, refreshToken, realmName, username);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/InvalidateTokenRequest.java, +    private final String realmName;, +    private final String username;, +        this(accessToken, refreshToken, null, null);, +    }, +, +    public InvalidateTokenRequest(@Nullable String accessToken, @Nullable String refreshToken,, +                                  @Nullable String realmName, @Nullable String username) {, +        if (Strings.hasText(realmName) || Strings.hasText(username)) {, +            if (Strings.hasText(accessToken)) {, +                throw new IllegalArgumentException("access token is not allowed when realm name or username are specified");, +            }, +            if (refreshToken != null) {, +                throw new IllegalArgumentException("refresh token is not allowed when realm name or username are specified");, +            }, +        } else {, +                    throw new IllegalArgumentException("Either access token or refresh token is required when neither realm name or " +, +                        "username are specified");, +                throw new IllegalArgumentException("Cannot supply both access token and refresh token");, +            }, +        this.realmName = realmName;, +        this.username = username;, +    public static InvalidateTokenRequest realmTokens(String realmName) {, +        if (Strings.isNullOrEmpty(realmName)) {, +            throw new IllegalArgumentException("realm name is required");, +        }, +        return new InvalidateTokenRequest(null, null, realmName, null);, +    }, +, +    public static InvalidateTokenRequest userTokens(String username) {, +        if (Strings.isNullOrEmpty(username)) {, +            throw new IllegalArgumentException("username is required");, +        }, +        return new InvalidateTokenRequest(null, null, null, username);, +    }, +, +    public String getRealmName() {, +        return realmName;, +    }, +, +    public String getUsername() {, +        return username;]