[+++ b/src/main/java/org/elasticsearch/license/core/ESLicense.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +import org.elasticsearch.common.xcontent.XContentParser;, +public class ESLicense implements Comparable<ESLicense>, ToXContent {, +    static ESLicense readESLicense(StreamInput in) throws IOException {, +        in.readVInt(); // Version for future extensibility, +        Builder builder = builder();, +        builder.uid(in.readString());, +        builder.type(Type.fromString(in.readString()));, +        builder.subscriptionType(SubscriptionType.fromString(in.readString()));, +        builder.issueDate(in.readLong());, +        builder.feature(in.readString());, +        builder.expiryDate(in.readLong());, +        builder.maxNodes(in.readInt());, +        builder.issuedTo(in.readString());, +        builder.issuer(in.readString());, +        builder.signature(in.readOptionalString());, +        return builder.verifyAndBuild();, +    }, +, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVInt(VERSION);, +        out.writeString(uid);, +        out.writeString(type.string());, +        out.writeString(subscriptionType.string());, +        out.writeLong(issueDate);, +        out.writeString(feature);, +        out.writeLong(expiryDate);, +        out.writeInt(maxNodes);, +        out.writeString(issuedTo);, +        out.writeString(issuer);, +        out.writeOptionalString(signature);, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        builder.field(XFields.UID, uid);, +        builder.field(XFields.TYPE, type.string());, +        builder.field(XFields.SUBSCRIPTION_TYPE, subscriptionType.string());, +        builder.field(XFields.ISSUE_DATE, issueDate);, +        builder.field(XFields.FEATURE, feature);, +        builder.field(XFields.EXPIRY_DATE, expiryDate);, +        builder.field(XFields.MAX_NODES, maxNodes);, +        builder.field(XFields.ISSUED_TO, issuedTo);, +        builder.field(XFields.ISSUER, issuer);, +        if (signature != null) {, +            builder.field(XFields.SIGNATURE, signature);, +        }, +        builder.endObject();, +        return builder;, +    }, +, +    private final static int VERSION = 1;, +, +    final static class Fields {, +        static final String UID = "uid";, +        static final String TYPE = "type";, +        static final String SUBSCRIPTION_TYPE = "subscription_type";, +        static final String ISSUE_DATE = "issue_date";, +        static final String FEATURE = "feature";, +        static final String EXPIRY_DATE = "expiry_date";, +        static final String MAX_NODES = "max_nodes";, +        static final String ISSUED_TO = "issued_to";, +        static final String ISSUER = "issuer";, +        static final String SIGNATURE = "signature";, +    }, +, +    private final static class XFields {, +        static final XContentBuilderString UID = new XContentBuilderString(Fields.UID);, +        static final XContentBuilderString TYPE = new XContentBuilderString(Fields.TYPE);, +        static final XContentBuilderString SUBSCRIPTION_TYPE = new XContentBuilderString(Fields.SUBSCRIPTION_TYPE);, +        static final XContentBuilderString ISSUE_DATE = new XContentBuilderString(Fields.ISSUE_DATE);, +        static final XContentBuilderString FEATURE = new XContentBuilderString(Fields.FEATURE);, +        static final XContentBuilderString EXPIRY_DATE = new XContentBuilderString(Fields.EXPIRY_DATE);, +        static final XContentBuilderString MAX_NODES = new XContentBuilderString(Fields.MAX_NODES);, +        static final XContentBuilderString ISSUED_TO = new XContentBuilderString(Fields.ISSUED_TO);, +        static final XContentBuilderString ISSUER = new XContentBuilderString(Fields.ISSUER);, +        static final XContentBuilderString SIGNATURE = new XContentBuilderString(Fields.SIGNATURE);, +    }, +, +    public static ESLicense fromXContent(XContentParser parser) throws IOException {, +        Builder builder = new Builder();, +        XContentParser.Token token = parser.currentToken();, +        if (token == XContentParser.Token.START_OBJECT) {, +            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                if (token == XContentParser.Token.FIELD_NAME) {, +                    String currentFieldName = parser.currentName();, +                    token = parser.nextToken();, +                    if (token.isValue()) {, +                        if (Fields.UID.equals(currentFieldName)) {, +                            builder.uid(parser.text());, +                        } else if (Fields.TYPE.equals(currentFieldName)) {, +                            builder.type(Type.fromString(parser.text()));, +                        } else if (Fields.SUBSCRIPTION_TYPE.equals(currentFieldName)) {, +                            builder.subscriptionType(SubscriptionType.fromString(parser.text()));, +                        } else if (Fields.ISSUE_DATE.equals(currentFieldName)) {, +                            builder.issueDate(parser.longValue());]