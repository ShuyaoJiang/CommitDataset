[+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ClusterBootstrapService.java, +        if (bootstrappingPermitted.get() && transportService.getLocalNode().isMasterNode() && bootstrapRequirements.isEmpty() == false, +            if (nodesMatchingRequirements.contains(transportService.getLocalNode()) == false) {, +                logger.info("skipping cluster bootstrapping as local node does not match bootstrap requirements: {}",, +                    bootstrapRequirements);, +                bootstrappingPermitted.set(false);, +                return;, +            }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ClusterBootstrapService.java, +        if (bootstrappingPermitted.get() && transportService.getLocalNode().isMasterNode() && bootstrapRequirements.isEmpty() == false, +            if (nodesMatchingRequirements.contains(transportService.getLocalNode()) == false) {, +                logger.info("skipping cluster bootstrapping as local node does not match bootstrap requirements: {}",, +                    bootstrapRequirements);, +                bootstrappingPermitted.set(false);, +                return;, +            }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +                if (electionQuorumContainsLocalNode(getLastAcceptedState()) == false) {, +                    logger.trace("skip election as local node is not part of election quorum: {}",, +                        getLastAcceptedState().coordinationMetaData());, +                    return;, +                }, +, +    private static boolean electionQuorumContainsLocalNode(ClusterState lastAcceptedState) {, +        final String localNodeId = lastAcceptedState.nodes().getLocalNodeId();, +        assert localNodeId != null;, +        return lastAcceptedState.getLastCommittedConfiguration().getNodeIds().contains(localNodeId), +            || lastAcceptedState.getLastAcceptedConfiguration().getNodeIds().contains(localNodeId);, +    }, +, +            if (getLocalNode().isMasterNode() == false) {, +                logger.debug("skip setting initial configuration as local node is not a master-eligible node");, +                throw new CoordinationStateRejectedException(, +                    "this node is not master-eligible, but cluster bootstrapping can only happen on a master-eligible node");, +            }, +, +            if (votingConfiguration.getNodeIds().contains(getLocalNode().getId()) == false) {, +                logger.debug("skip setting initial configuration as local node is not part of initial configuration");, +                throw new CoordinationStateRejectedException("local node is not part of initial configuration");, +            }, +, +, +                logger.debug("skip setting initial configuration as not enough nodes discovered to form a quorum in the " +, +                    "initial configuration [knownNodes={}, {}]", knownNodes, votingConfiguration);, +            assert electionQuorumContainsLocalNode(getLastAcceptedState()) :, +                "initial state does not have local node in its election quorum: " + getLastAcceptedState().coordinationMetaData();, +                        final ClusterState lastAcceptedState = coordinationState.get().getLastAcceptedState();, +, +                        if (electionQuorumContainsLocalNode(lastAcceptedState) == false) {, +                            logger.trace("skip prevoting as local node is not part of election quorum: {}",, +                                lastAcceptedState.coordinationMetaData());, +                            return;, +                        }, +, +, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ClusterBootstrapService.java, +        if (bootstrappingPermitted.get() && transportService.getLocalNode().isMasterNode() && bootstrapRequirements.isEmpty() == false, +            if (nodesMatchingRequirements.contains(transportService.getLocalNode()) == false) {, +                logger.info("skipping cluster bootstrapping as local node does not match bootstrap requirements: {}",, +                    bootstrapRequirements);, +                bootstrappingPermitted.set(false);, +                return;, +            }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +                if (electionQuorumContainsLocalNode(getLastAcceptedState()) == false) {, +                    logger.trace("skip election as local node is not part of election quorum: {}",, +                        getLastAcceptedState().coordinationMetaData());, +                    return;, +                }, +, +    private static boolean electionQuorumContainsLocalNode(ClusterState lastAcceptedState) {, +        final String localNodeId = lastAcceptedState.nodes().getLocalNodeId();, +        assert localNodeId != null;, +        return lastAcceptedState.getLastCommittedConfiguration().getNodeIds().contains(localNodeId), +            || lastAcceptedState.getLastAcceptedConfiguration().getNodeIds().contains(localNodeId);, +    }, +, +            if (getLocalNode().isMasterNode() == false) {, +                logger.debug("skip setting initial configuration as local node is not a master-eligible node");, +                throw new CoordinationStateRejectedException(, +                    "this node is not master-eligible, but cluster bootstrapping can only happen on a master-eligible node");, +            }, +, +            if (votingConfiguration.getNodeIds().contains(getLocalNode().getId()) == false) {, +                logger.debug("skip setting initial configuration as local node is not part of initial configuration");, +                throw new CoordinationStateRejectedException("local node is not part of initial configuration");, +            }, +, +, +                logger.debug("skip setting initial configuration as not enough nodes discovered to form a quorum in the " +, +                    "initial configuration [knownNodes={}, {}]", knownNodes, votingConfiguration);, +            assert electionQuorumContainsLocalNode(getLastAcceptedState()) :, +                "initial state does not have local node in its election quorum: " + getLastAcceptedState().coordinationMetaData();, +                        final ClusterState lastAcceptedState = coordinationState.get().getLastAcceptedState();, +, +                        if (electionQuorumContainsLocalNode(lastAcceptedState) == false) {, +                            logger.trace("skip prevoting as local node is not part of election quorum: {}",]