[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.action.PostDataAction;, +import org.elasticsearch.xpack.prelert.action.UpdateModelSnapshotAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestPostDataAction;, +import org.elasticsearch.xpack.prelert.rest.modelsnapshots.RestUpdateModelSnapshotAction;, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.action.PostDataAction;, +import org.elasticsearch.xpack.prelert.action.UpdateModelSnapshotAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestPostDataAction;, +import org.elasticsearch.xpack.prelert.rest.modelsnapshots.RestUpdateModelSnapshotAction;, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +            jobProvider.influencers(request.jobId, query, page -> listener.onResponse(new Response(page)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.action.PostDataAction;, +import org.elasticsearch.xpack.prelert.action.UpdateModelSnapshotAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestPostDataAction;, +import org.elasticsearch.xpack.prelert.rest.modelsnapshots.RestUpdateModelSnapshotAction;, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +            jobProvider.influencers(request.jobId, query, page -> listener.onResponse(new Response(page)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/DataDescription.java, +        // TODO norelease, this can now be removed, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.action.PostDataAction;, +import org.elasticsearch.xpack.prelert.action.UpdateModelSnapshotAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestPostDataAction;, +import org.elasticsearch.xpack.prelert.rest.modelsnapshots.RestUpdateModelSnapshotAction;, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +            jobProvider.influencers(request.jobId, query, page -> listener.onResponse(new Response(page)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/DataDescription.java, +        // TODO norelease, this can now be removed, +++ /dev/null, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.action.PostDataAction;, +import org.elasticsearch.xpack.prelert.action.UpdateModelSnapshotAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestPostDataAction;, +import org.elasticsearch.xpack.prelert.rest.modelsnapshots.RestUpdateModelSnapshotAction;, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +            jobProvider.influencers(request.jobId, query, page -> listener.onResponse(new Response(page)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/DataDescription.java, +        // TODO norelease, this can now be removed, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.action.PostDataAction;, +import org.elasticsearch.xpack.prelert.action.UpdateModelSnapshotAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestPostDataAction;, +import org.elasticsearch.xpack.prelert.rest.modelsnapshots.RestUpdateModelSnapshotAction;, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +            jobProvider.influencers(request.jobId, query, page -> listener.onResponse(new Response(page)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/DataDescription.java, +        // TODO norelease, this can now be removed, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/JobProvider.java, +    public void influencers(String jobId, InfluencersQuery query, Consumer<QueryPage<Influencer>> handler,, +                            Consumer<Exception> errorHandler) {, +                () -> (query.getSortField() != null) ?, +                        " with sort " + (query.isSortDescending() ? "descending" : "ascending") + " on field " + query.getSortField() : "",, +                query::getFrom, query::getSize);, +        QueryBuilder qb = new BoolQueryBuilder(), +                .filter(fb), +        FieldSortBuilder sb = query.getSortField() == null ? SortBuilders.fieldSort(ElasticsearchMappings.ES_DOC), +                : new FieldSortBuilder(query.getSortField()).order(query.isSortDescending() ? SortOrder.DESC : SortOrder.ASC);, +        searchRequest.source(new SearchSourceBuilder().query(qb).from(query.getFrom()).size(query.getSize()).sort(sb));, +        client.search(searchRequest, ActionListener.wrap(response -> {, +            QueryPage<Influencer> result = new QueryPage<>(influencers, response.getHits().getTotalHits(), Influencer.RESULTS_FIELD);, +            handler.accept(result);, +        }, errorHandler));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.action.PostDataAction;, +import org.elasticsearch.xpack.prelert.action.UpdateModelSnapshotAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestPostDataAction;, +import org.elasticsearch.xpack.prelert.rest.modelsnapshots.RestUpdateModelSnapshotAction;, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetInfluencersAction.java, +            jobProvider.influencers(request.jobId, query, page -> listener.onResponse(new Response(page)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/DataDescription.java, +        // TODO norelease, this can now be removed, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/JobProvider.java, +    public void influencers(String jobId, InfluencersQuery query, Consumer<QueryPage<Influencer>> handler,, +                            Consumer<Exception> errorHandler) {, +                () -> (query.getSortField() != null) ?, +                        " with sort " + (query.isSortDescending() ? "descending" : "ascending") + " on field " + query.getSortField() : "",, +                query::getFrom, query::getSize);, +        QueryBuilder qb = new BoolQueryBuilder(), +                .filter(fb), +        FieldSortBuilder sb = query.getSortField() == null ? SortBuilders.fieldSort(ElasticsearchMappings.ES_DOC), +                : new FieldSortBuilder(query.getSortField()).order(query.isSortDescending() ? SortOrder.DESC : SortOrder.ASC);, +        searchRequest.source(new SearchSourceBuilder().query(qb).from(query.getFrom()).size(query.getSize()).sort(sb));, +        client.search(searchRequest, ActionListener.wrap(response -> {, +            QueryPage<Influencer> result = new QueryPage<>(influencers, response.getHits().getTotalHits(), Influencer.RESULTS_FIELD);, +            handler.accept(result);, +        }, errorHandler));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/process/autodetect/writer/AbstractJsonRecordReader.java, +    AbstractJsonRecordReader(JsonParser parser, Map<String, Integer> fieldMap, Logger logger) {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/PrelertPlugin.java, +import org.elasticsearch.xpack.prelert.action.PostDataAction;, +import org.elasticsearch.xpack.prelert.action.UpdateModelSnapshotAction;, +import org.elasticsearch.xpack.prelert.rest.job.RestPostDataAction;]