[+++ b/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java, +import org.elasticsearch.index.mapper.MapperService;, +                            MapperService.SmartNameFieldMappers mappers = parseContext.smartFieldMappers(fField);, +                            if (mappers != null && mappers.hasMapper()) {, +                                fieldsAndWeights.put(mappers.mapper().names().indexName(), fBoost);, +                            } else {, +                    }, +++ b/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java, +import org.elasticsearch.index.mapper.MapperService;, +                            MapperService.SmartNameFieldMappers mappers = parseContext.smartFieldMappers(fField);, +                            if (mappers != null && mappers.hasMapper()) {, +                                fieldsAndWeights.put(mappers.mapper().names().indexName(), fBoost);, +                            } else {, +                    }, +++ b/src/test/java/org/elasticsearch/search/query/SimpleQueryTests.java, +    public void testNestedFieldSimpleQueryString() throws IOException {, +        assertAcked(client().admin().indices().prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS, 1), +                .addMapping("type1", jsonBuilder(), +                        .startObject(), +                        .startObject("type1"), +                        .startObject("properties"), +                        .startObject("body").field("type", "string"), +                        .startObject("fields"), +                        .startObject("sub").field("type", "string"), +                        .endObject() // sub, +                        .endObject() // fields, +                        .endObject() // body, +                        .endObject() // properties, +                        .endObject() // type1, +                        .endObject()));, +        client().prepareIndex("test", "type1", "1").setSource("body", "foo bar baz").get();, +        refresh();, +, +        SearchResponse searchResponse = client().prepareSearch().setQuery(, +                simpleQueryString("foo bar baz").field("body")).get();, +        assertHitCount(searchResponse, 1l);, +        assertSearchHits(searchResponse, "1");, +, +        searchResponse = client().prepareSearch().setQuery(, +                simpleQueryString("foo bar baz").field("type1.body")).get();, +        assertHitCount(searchResponse, 1l);, +        assertSearchHits(searchResponse, "1");, +, +        searchResponse = client().prepareSearch().setQuery(, +                simpleQueryString("foo bar baz").field("body.sub")).get();, +        assertHitCount(searchResponse, 1l);, +        assertSearchHits(searchResponse, "1");, +, +        searchResponse = client().prepareSearch().setQuery(, +                simpleQueryString("foo bar baz").field("type1.body.sub")).get();, +        assertHitCount(searchResponse, 1l);, +        assertSearchHits(searchResponse, "1");, +    }, +, +    @Test]