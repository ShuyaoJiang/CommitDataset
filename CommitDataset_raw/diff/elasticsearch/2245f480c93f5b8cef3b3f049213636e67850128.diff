[+++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +    /**, +     * Adds a settings consumer for this index, +     */, +    /**, +     * Returns the index {@link Settings} for this index, +     */, +    public Settings getSettings() {, +    /**, +     * Returns the index this module is associated with, +     */, +    public Index getIndex() {, +        return indexSettings.getIndex();, +    }, +, +    /**, +     * Adds an {@link IndexEventListener} for this index. All listeners added here, +     * are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these, +     * listeners go out of scope., +     * <p>, +     * Note: an index might be created on a node multiple times. For instance if the last shard from an index is, +     * relocated to another node the internal representation will be destroyed which includes the registered listeners., +     * Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again., +     * Listeners can't be unregistered the will stay alive for the entire time the index is allocated on a node., +     * </p>, +     */, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +    /**, +     * Adds a settings consumer for this index, +     */, +    /**, +     * Returns the index {@link Settings} for this index, +     */, +    public Settings getSettings() {, +    /**, +     * Returns the index this module is associated with, +     */, +    public Index getIndex() {, +        return indexSettings.getIndex();, +    }, +, +    /**, +     * Adds an {@link IndexEventListener} for this index. All listeners added here, +     * are maintained for the entire index lifecycle on this node. Once an index is closed or deleted these, +     * listeners go out of scope., +     * <p>, +     * Note: an index might be created on a node multiple times. For instance if the last shard from an index is, +     * relocated to another node the internal representation will be destroyed which includes the registered listeners., +     * Once the node holds at least one shard of an index all modules are reloaded and listeners are registered again., +     * Listeners can't be unregistered the will stay alive for the entire time the index is allocated on a node., +     * </p>, +     */, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +/**, + * This class encapsulates all index level settings and handles settings updates., + * It's created per index and available to all index level classes and allows them to retrieve, + * the latest updated settings instance. Classes that need to listen to settings updates can register, + * a settings consumer at index creation via {@link IndexModule#addIndexSettingsListener(Consumer)} that will, + * be called for each settings update., + */, +    private final String uuid;, +    private final String nodeName;, +    /**, +     * Creates a new {@link IndexSettings} instance, +     * @param index the index this settings object is associated with, +     * @param settings the actual settings including the node level settings, +     * @param updateListeners a collection of listeners / consumers that should be notified if one or more settings are updated, +     */, +        uuid = settings.get(IndexMetaData.SETTING_INDEX_UUID, IndexMetaData.INDEX_UUID_NA_VALUE);, +        nodeName = settings.get("name", "");, +    /**, +     * Returns the settings for this index. These settings contain the node and index level settings where, +     * settings that are specified on both index and node level are overwritten by the index settings., +     */, +    /**, +     * Returns the index this settings object belongs to, +     */, +    /**, +     * Returns the indexes UUID, +     */, +        return uuid;, +    /**, +     * Returns <code>true</code> if the index has a custom data path, +     */, +    /**, +     * Returns the version the index was created on., +     * @see Version#indexCreated(Settings), +     */, +    public Version getIndexVersionCreated() {, +    /**, +     * Returns the current node name, +     */, +        return nodeName;, +    /**, +     * Notifies  all registered settings consumers with the new settings iff at least one setting has changed., +     *, +     * @return <code>true</code> iff any setting has been updated otherwise <code>false</code>., +     */, +            throw new IllegalArgumentException("version mismatch on settings update expected: " + version + " but was: " + Version.indexCreated(settings));, +        }]