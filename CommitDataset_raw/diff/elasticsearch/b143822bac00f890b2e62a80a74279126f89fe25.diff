[+++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +        public Builder loadFromDelimitedString(String value, char delimiter) {, +            String[] values = Strings.splitStringToArray(value, delimiter);, +            for (String s : values) {, +                int index = s.indexOf('=');, +                if (index == -1) {, +                    throw new ElasticSearchIllegalArgumentException("value [" + s + "] for settings loaded with delimiter [" + delimiter + "] is malformed, missing =");, +                }, +                map.put(s.substring(0, index), s.substring(index + 1));, +            }, +            return this;, +        }, +, +++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +        public Builder loadFromDelimitedString(String value, char delimiter) {, +            String[] values = Strings.splitStringToArray(value, delimiter);, +            for (String s : values) {, +                int index = s.indexOf('=');, +                if (index == -1) {, +                    throw new ElasticSearchIllegalArgumentException("value [" + s + "] for settings loaded with delimiter [" + delimiter + "] is malformed, missing =");, +                }, +                map.put(s.substring(0, index), s.substring(index + 1));, +            }, +            return this;, +        }, +, +++ b/src/test/java/org/elasticsearch/test/unit/common/settings/ImmutableSettingsTests.java, +    @Test, +    public void testLoadFromDelimitedString() {, +        Settings settings = settingsBuilder(), +                .loadFromDelimitedString("key1=value1;key2=value2", ';'), +                .build();, +        assertThat(settings.get("key1"), equalTo("value1"));, +        assertThat(settings.get("key2"), equalTo("value2"));, +        assertThat(settings.getAsMap().size(), equalTo(2));, +, +        settings = settingsBuilder(), +                .loadFromDelimitedString("key1=value1;key2=value2;", ';'), +                .build();, +        assertThat(settings.get("key1"), equalTo("value1"));, +        assertThat(settings.get("key2"), equalTo("value2"));, +        assertThat(settings.getAsMap().size(), equalTo(2));, +    }, +]