[+++ b/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    /** Just like {@link #getLogger(Class,Settings,ShardId,String...)} but String loggerName instead of Class. */, +    public static ESLogger getLogger(String loggerName, Settings settings, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, settings, Lists.asList(shardId.index().name(), Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +    }, +, +++ b/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    /** Just like {@link #getLogger(Class,Settings,ShardId,String...)} but String loggerName instead of Class. */, +    public static ESLogger getLogger(String loggerName, Settings settings, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, settings, Lists.asList(shardId.index().name(), Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +    }, +, +++ b/src/main/java/org/elasticsearch/common/lucene/LoggerInfoStream.java, +import org.apache.lucene.util.InfoStream;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.shard.ShardId;, +/** An InfoStream (for Lucene's IndexWriter) that redirects, + *  messages to Logger.trace. */, +public final class LoggerInfoStream extends InfoStream {, +    public LoggerInfoStream(Settings settings, ShardId shardId) {, +        logger = Loggers.getLogger("lucene.iw", settings, shardId);, +    public void message(String component, String message) {, +        logger.trace("{}: {}",  component, message);, +    }, +  , +    public boolean isEnabled(String component) {, +        // TP is a special "test point" component; we don't want, +        // to log it:, +        return logger.isTraceEnabled() && component.equals("TP") == false;, +    }, +, +    public void close() {, +++ b/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    /** Just like {@link #getLogger(Class,Settings,ShardId,String...)} but String loggerName instead of Class. */, +    public static ESLogger getLogger(String loggerName, Settings settings, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, settings, Lists.asList(shardId.index().name(), Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +    }, +, +++ b/src/main/java/org/elasticsearch/common/lucene/LoggerInfoStream.java, +import org.apache.lucene.util.InfoStream;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.shard.ShardId;, +/** An InfoStream (for Lucene's IndexWriter) that redirects, + *  messages to Logger.trace. */, +public final class LoggerInfoStream extends InfoStream {, +    public LoggerInfoStream(Settings settings, ShardId shardId) {, +        logger = Loggers.getLogger("lucene.iw", settings, shardId);, +    public void message(String component, String message) {, +        logger.trace("{}: {}",  component, message);, +    }, +  , +    public boolean isEnabled(String component) {, +        // TP is a special "test point" component; we don't want, +        // to log it:, +        return logger.isTraceEnabled() && component.equals("TP") == false;, +    }, +, +    public void close() {, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +import org.elasticsearch.common.lucene.LoggerInfoStream;, +            config.setInfoStream(new LoggerInfoStream(indexSettings, shardId));, +++ b/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    /** Just like {@link #getLogger(Class,Settings,ShardId,String...)} but String loggerName instead of Class. */, +    public static ESLogger getLogger(String loggerName, Settings settings, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, settings, Lists.asList(shardId.index().name(), Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +    }, +, +++ b/src/main/java/org/elasticsearch/common/lucene/LoggerInfoStream.java, +import org.apache.lucene.util.InfoStream;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.shard.ShardId;, +/** An InfoStream (for Lucene's IndexWriter) that redirects, + *  messages to Logger.trace. */, +public final class LoggerInfoStream extends InfoStream {, +    public LoggerInfoStream(Settings settings, ShardId shardId) {, +        logger = Loggers.getLogger("lucene.iw", settings, shardId);, +    public void message(String component, String message) {, +        logger.trace("{}: {}",  component, message);, +    }, +  , +    public boolean isEnabled(String component) {, +        // TP is a special "test point" component; we don't want, +        // to log it:, +        return logger.isTraceEnabled() && component.equals("TP") == false;, +    }, +, +    public void close() {, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +import org.elasticsearch.common.lucene.LoggerInfoStream;, +            config.setInfoStream(new LoggerInfoStream(indexSettings, shardId));, +++ b/src/test/java/org/elasticsearch/common/lucene/LuceneTest.java, +     * simple test that ensures that we bump the version on Upgrade, +++ b/src/main/java/org/elasticsearch/common/logging/Loggers.java, +    /** Just like {@link #getLogger(Class,Settings,ShardId,String...)} but String loggerName instead of Class. */, +    public static ESLogger getLogger(String loggerName, Settings settings, ShardId shardId, String... prefixes) {, +        return getLogger(loggerName, settings, Lists.asList(shardId.index().name(), Integer.toString(shardId.id()), prefixes).toArray(new String[0]));, +    }, +, +++ b/src/main/java/org/elasticsearch/common/lucene/LoggerInfoStream.java, +import org.apache.lucene.util.InfoStream;]