[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.search.TermsFilter;, +     * A filter to filter based on several types., +     */, +    public Filter typesFilter(String... types) {, +        if (types.length == 1) {, +            return documentMapper(types[0]).typeFilter();, +        }, +        TermsFilter termsFilter = new TermsFilter();, +        for (String type : types) {, +            termsFilter.addTerm(new Term(TypeFieldMapper.NAME, type));, +        }, +        return termsFilter;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.search.TermsFilter;, +     * A filter to filter based on several types., +     */, +    public Filter typesFilter(String... types) {, +        if (types.length == 1) {, +            return documentMapper(types[0]).typeFilter();, +        }, +        TermsFilter termsFilter = new TermsFilter();, +        for (String type : types) {, +            termsFilter.addTerm(new Term(TypeFieldMapper.NAME, type));, +        }, +        return termsFilter;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +            query = new FilteredQuery(query, indexCache.filter().cache(mapperService.typesFilter(types)));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.search.TermsFilter;, +     * A filter to filter based on several types., +     */, +    public Filter typesFilter(String... types) {, +        if (types.length == 1) {, +            return documentMapper(types[0]).typeFilter();, +        }, +        TermsFilter termsFilter = new TermsFilter();, +        for (String type : types) {, +            termsFilter.addTerm(new Term(TypeFieldMapper.NAME, type));, +        }, +        return termsFilter;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +            query = new FilteredQuery(query, indexCache.filter().cache(mapperService.typesFilter(types)));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/FacetsPhase.java, +                query = new FilteredQuery(query, context.filterCache().cache(context.mapperService().typesFilter(context.types())));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.search.TermsFilter;, +     * A filter to filter based on several types., +     */, +    public Filter typesFilter(String... types) {, +        if (types.length == 1) {, +            return documentMapper(types[0]).typeFilter();, +        }, +        TermsFilter termsFilter = new TermsFilter();, +        for (String type : types) {, +            termsFilter.addTerm(new Term(TypeFieldMapper.NAME, type));, +        }, +        return termsFilter;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +            query = new FilteredQuery(query, indexCache.filter().cache(mapperService.typesFilter(types)));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/FacetsPhase.java, +                query = new FilteredQuery(query, context.filterCache().cache(context.mapperService().typesFilter(context.types())));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +import org.apache.lucene.search.FilteredQuery;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.SortField;, +import org.apache.lucene.search.TopDocs;, +                query = new FilteredQuery(query, searchContext.filterCache().cache(searchContext.mapperService().typesFilter(searchContext.types())));]