[+++ b/docs/reference/docs.asciidoc, +include::docs/delete-by-query.asciidoc[], +, +++ b/docs/reference/docs.asciidoc, +include::docs/delete-by-query.asciidoc[], +, +++ b/docs/reference/docs/delete-by-query.asciidoc, +[[docs-delete-by-query]], +== Delete By Query API, +, +experimental[The delete-by-query API is new and should still be considered experimental.  The API may change in ways that are not backwards compatible], +, +The simplest usage of `_delete_by_query` just performs a deletion on every, +document that match a query. Here is the API:, +, +[source,js], +--------------------------------------------------, +POST twitter/_delete_by_query, +{, +  "query": { <1>, +    "match": {, +      "message": "some message", +    }, +  }, +}, +--------------------------------------------------, +// CONSOLE, +// TEST[setup:big_twitter], +, +<1> The query must be passed as a value to the `query` key, in the same, +way as the <<search-search,Search API>>. You can also use the `q`, +parameter in the same way as the search api., +, +That will return something like this:, +, +[source,js], +--------------------------------------------------, +{, +  "took" : 147,, +  "timed_out": false,, +  "deleted": 119,, +  "batches": 1,, +  "version_conflicts": 0,, +  "noops": 0,, +  "retries": {, +    "bulk": 0,, +    "search": 0, +  },, +  "throttled_millis": 0,, +  "requests_per_second": "unlimited",, +  "throttled_until_millis": 0,, +  "total": 119,, +  "failures" : [ ], +}, +--------------------------------------------------, +// TESTRESPONSE[s/"took" : 147/"took" : "$body.took"/], +, +`_delete_by_query` gets a snapshot of the index when it starts and deletes what, +it finds using `internal` versioning. That means that you'll get a version, +conflict if the document changes between the time when the snapshot was taken, +and when the delete request is processed. When the versions match the document, +is deleted., +, +During the `_delete_by_query` execution, multiple search requests are sequentially, +executed in order to find all the matching documents to delete. Every time a batch, +of documents is found, a corresponding bulk request is executed to delete all, +these documents. In case a search or bulk request got rejected, `_delete_by_query`, + relies on a default policy to retry rejected requests (up to 10 times, with, + exponential back off). Reaching the maximum retries limit causes the `_delete_by_query`, + to abort and all failures are returned in the `failures` of the response., + The deletions that have been performed still stick. In other words, the process, + is not rolled back, only aborted. While the first failure causes the abort all, + failures that are returned by the failing bulk request are returned in the `failures`, + element so it's possible for there to be quite a few., +, +If you'd like to count version conflicts rather than cause them to abort then, +set `conflicts=proceed` on the url or `"conflicts": "proceed"` in the request body., +, +Back to the API format, you can limit `_delete_by_query` to a single type. This, +will only delete `tweet` documents from the `twitter` index:, +, +[source,js], +--------------------------------------------------, +POST twitter/tweet/_delete_by_query?conflicts=proceed, +{, +  "query": {, +    "match_all": {}, +  }, +}, +--------------------------------------------------, +// CONSOLE, +// TEST[setup:twitter], +, +It's also possible to delete documents of multiple indexes and multiple, +types at once, just like the search API:, +, +[source,js], +--------------------------------------------------, +POST twitter,blog/tweet,post/_delete_by_query, +{]