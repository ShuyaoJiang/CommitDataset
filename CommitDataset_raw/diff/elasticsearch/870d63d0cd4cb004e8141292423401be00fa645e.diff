[+++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +     * get the candidate generators., +     */, +    Map<String, List<CandidateGenerator>> getCandidateGenerators() {, +        return this.generators;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +     * get the candidate generators., +     */, +    Map<String, List<CandidateGenerator>> getCandidateGenerators() {, +        return this.generators;, +    }, +, +    /**, +++ b/core/src/test/java/org/elasticsearch/search/suggest/AbstractSuggestionBuilderTestCase.java, +import org.elasticsearch.ingest.TestTemplateService;, +            when(scriptService.compile(any(Script.class), any())).then(invocation -> new TestTemplateService.MockTemplateScript.Factory(, +                    ((Script) invocation.getArguments()[0]).getIdOrCode()));, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +     * get the candidate generators., +     */, +    Map<String, List<CandidateGenerator>> getCandidateGenerators() {, +        return this.generators;, +    }, +, +    /**, +++ b/core/src/test/java/org/elasticsearch/search/suggest/AbstractSuggestionBuilderTestCase.java, +import org.elasticsearch.ingest.TestTemplateService;, +            when(scriptService.compile(any(Script.class), any())).then(invocation -> new TestTemplateService.MockTemplateScript.Factory(, +                    ((Script) invocation.getArguments()[0]).getIdOrCode()));, +++ b/core/src/test/java/org/elasticsearch/search/suggest/completion/CompletionSuggesterBuilderTests.java, +    private static List<ContextMapping> contextMappings = new ArrayList<>();, +        // lazy initialization of context names and mappings, cannot be done in some init method because other test, +        // also create random CompletionSuggestionBuilder instances, +        if (categoryContextName == null) {, +            categoryContextName = randomAlphaOfLength(10);, +        }, +        if (geoQueryContextName == null) {, +            geoQueryContextName = randomAlphaOfLength(10);, +        }, +        if (contextMappings.isEmpty()) {, +            contextMappings.add(ContextBuilder.category(categoryContextName).build());, +            contextMappings.add(ContextBuilder.geo(geoQueryContextName).build());, +        }, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +     * get the candidate generators., +     */, +    Map<String, List<CandidateGenerator>> getCandidateGenerators() {, +        return this.generators;, +    }, +, +    /**, +++ b/core/src/test/java/org/elasticsearch/search/suggest/AbstractSuggestionBuilderTestCase.java, +import org.elasticsearch.ingest.TestTemplateService;, +            when(scriptService.compile(any(Script.class), any())).then(invocation -> new TestTemplateService.MockTemplateScript.Factory(, +                    ((Script) invocation.getArguments()[0]).getIdOrCode()));, +++ b/core/src/test/java/org/elasticsearch/search/suggest/completion/CompletionSuggesterBuilderTests.java, +    private static List<ContextMapping> contextMappings = new ArrayList<>();, +        // lazy initialization of context names and mappings, cannot be done in some init method because other test, +        // also create random CompletionSuggestionBuilder instances, +        if (categoryContextName == null) {, +            categoryContextName = randomAlphaOfLength(10);, +        }, +        if (geoQueryContextName == null) {, +            geoQueryContextName = randomAlphaOfLength(10);, +        }, +        if (contextMappings.isEmpty()) {, +            contextMappings.add(ContextBuilder.category(categoryContextName).build());, +            contextMappings.add(ContextBuilder.geo(geoQueryContextName).build());, +        }, +++ b/core/src/test/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilderTests.java, +import static org.hamcrest.Matchers.instanceOf;, +, +        assertThat(context, instanceOf(PhraseSuggestionContext.class));, +        assertThat(context.getSuggester(), instanceOf(PhraseSuggester.class));, +        PhraseSuggestionContext phraseSuggesterCtx = (PhraseSuggestionContext) context;, +        assertOptionalEquals(builder.confidence(), phraseSuggesterCtx.confidence(), PhraseSuggestionContext.DEFAULT_CONFIDENCE);, +        assertOptionalEquals(builder.collatePrune(), phraseSuggesterCtx.collatePrune(), PhraseSuggestionContext.DEFAULT_COLLATE_PRUNE);, +        assertEquals(builder.separator(), phraseSuggesterCtx.separator().utf8ToString());, +        assertOptionalEquals(builder.realWordErrorLikelihood(), phraseSuggesterCtx.realworldErrorLikelyhood(),, +                PhraseSuggestionContext.DEFAULT_RWE_ERRORLIKELIHOOD);, +        assertOptionalEquals(builder.maxErrors(), phraseSuggesterCtx.maxErrors(), PhraseSuggestionContext.DEFAULT_MAX_ERRORS);, +        assertOptionalEquals(builder.forceUnigrams(), phraseSuggesterCtx.getRequireUnigram(),, +                PhraseSuggestionContext.DEFAULT_REQUIRE_UNIGRAM);, +        assertOptionalEquals(builder.tokenLimit(), phraseSuggesterCtx.getTokenLimit(), NoisyChannelSpellChecker.DEFAULT_TOKEN_LIMIT);, +        assertEquals(builder.preTag(), phraseSuggesterCtx.getPreTag() != null ? phraseSuggesterCtx.getPreTag().utf8ToString() : null);, +        assertEquals(builder.postTag(), phraseSuggesterCtx.getPostTag() != null ? phraseSuggesterCtx.getPostTag().utf8ToString() : null);, +        assertOptionalEquals(builder.gramSize(), phraseSuggesterCtx.gramSize(), PhraseSuggestionContext.DEFAULT_GRAM_SIZE);, +        if (builder.collateQuery() != null) {, +            assertEquals(builder.collateQuery().getIdOrCode(), phraseSuggesterCtx.getCollateQueryScript().newInstance(null).execute());, +        }, +        if (builder.collateParams() != null) {, +            assertEquals(builder.collateParams(), phraseSuggesterCtx.getCollateScriptParams());, +        }, +        if (builder.smoothingModel() != null) {, +            assertEquals(builder.smoothingModel().buildWordScorerFactory().getClass(), phraseSuggesterCtx.model().getClass());, +        }, +        if (builder.getCandidateGenerators().isEmpty() == false) {]