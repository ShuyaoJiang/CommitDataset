[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/analysis/FingerprintAnalyzerProvider.java, +    public static ParseField SEPARATOR = new ParseField("separator");, +    public static ParseField MAX_OUTPUT_SIZE = new ParseField("max_output_size");, +    public static int DEFAULT_MAX_OUTPUT_SIZE = 255;, +    public static final char DEFAULT_SEPARATOR  = ' ';, +        char separator = parseSeparator(settings);, +, +    public static char parseSeparator(Settings settings) throws IllegalArgumentException {, +        String customSeparator = settings.get(SEPARATOR.getPreferredName());, +        if (customSeparator == null) {, +            return DEFAULT_SEPARATOR;, +        } else if (customSeparator.length() == 1) {, +            return customSeparator.charAt(0);, +        }, +, +        throw new IllegalArgumentException("Setting [separator] must be a single, non-null character. [", +                + customSeparator + "] was provided.");, +    }, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/analysis/FingerprintAnalyzerProvider.java, +    public static ParseField SEPARATOR = new ParseField("separator");, +    public static ParseField MAX_OUTPUT_SIZE = new ParseField("max_output_size");, +    public static int DEFAULT_MAX_OUTPUT_SIZE = 255;, +    public static final char DEFAULT_SEPARATOR  = ' ';, +        char separator = parseSeparator(settings);, +, +    public static char parseSeparator(Settings settings) throws IllegalArgumentException {, +        String customSeparator = settings.get(SEPARATOR.getPreferredName());, +        if (customSeparator == null) {, +            return DEFAULT_SEPARATOR;, +        } else if (customSeparator.length() == 1) {, +            return customSeparator.charAt(0);, +        }, +, +        throw new IllegalArgumentException("Setting [separator] must be a single, non-null character. [", +                + customSeparator + "] was provided.");, +    }, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/analysis/FingerprintAnalyzerProvider.java, +    public static ParseField SEPARATOR = new ParseField("separator");, +    public static ParseField MAX_OUTPUT_SIZE = new ParseField("max_output_size");, +    public static int DEFAULT_MAX_OUTPUT_SIZE = 255;, +    public static final char DEFAULT_SEPARATOR  = ' ';, +        char separator = parseSeparator(settings);, +, +    public static char parseSeparator(Settings settings) throws IllegalArgumentException {, +        String customSeparator = settings.get(SEPARATOR.getPreferredName());, +        if (customSeparator == null) {, +            return DEFAULT_SEPARATOR;, +        } else if (customSeparator.length() == 1) {, +            return customSeparator.charAt(0);, +        }, +, +        throw new IllegalArgumentException("Setting [separator] must be a single, non-null character. [", +                + customSeparator + "] was provided.");, +    }, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/analysis/FingerprintAnalyzerProvider.java, +    public static ParseField SEPARATOR = new ParseField("separator");, +    public static ParseField MAX_OUTPUT_SIZE = new ParseField("max_output_size");, +    public static int DEFAULT_MAX_OUTPUT_SIZE = 255;, +    public static final char DEFAULT_SEPARATOR  = ' ';, +        char separator = parseSeparator(settings);, +, +    public static char parseSeparator(Settings settings) throws IllegalArgumentException {, +        String customSeparator = settings.get(SEPARATOR.getPreferredName());, +        if (customSeparator == null) {, +            return DEFAULT_SEPARATOR;, +        } else if (customSeparator.length() == 1) {, +            return customSeparator.charAt(0);, +        }, +, +        throw new IllegalArgumentException("Setting [separator] must be a single, non-null character. [", +                + customSeparator + "] was provided.");]