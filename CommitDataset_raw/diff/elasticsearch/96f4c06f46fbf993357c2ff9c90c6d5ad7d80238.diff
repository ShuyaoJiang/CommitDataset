[+++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SETTING_PREFIX = "index.";, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SETTING_PREFIX = "index.";, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +                        templateSettingsBuilder.put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SETTING_PREFIX = "index.";, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +                        templateSettingsBuilder.put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SETTING_PREFIX = "index.";, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +                        templateSettingsBuilder.put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java, +        updatedSettingsBuilder.put(request.settings).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SETTING_PREFIX = "index.";, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +                        templateSettingsBuilder.put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java, +        updatedSettingsBuilder.put(request.settings).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SETTING_PREFIX = "index.";, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +                        templateSettingsBuilder.put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java, +        updatedSettingsBuilder.put(request.settings).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +         * Checks that all settings in the builder start with the specified prefix., +         *, +         * If a setting doesn't start with the prefix, the builder appends the prefix to such setting., +         */, +        public Builder normalizePrefix(String prefix) {, +            Map<String, String> replacements = Maps.newHashMap();, +            Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator();, +            while(iterator.hasNext()) {, +                Map.Entry<String, String> entry = iterator.next();, +                if (entry.getKey().startsWith(prefix) == false) {, +                    replacements.put(prefix + entry.getKey(), entry.getValue());, +                    iterator.remove();, +                }, +            }, +            map.putAll(replacements);, +            return this;, +        }, +, +        /**, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SETTING_PREFIX = "index.";, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +                        templateSettingsBuilder.put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java, +        updatedSettingsBuilder.put(request.settings).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +         * Checks that all settings in the builder start with the specified prefix., +         *, +         * If a setting doesn't start with the prefix, the builder appends the prefix to such setting., +         */, +        public Builder normalizePrefix(String prefix) {, +            Map<String, String> replacements = Maps.newHashMap();, +            Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator();, +            while(iterator.hasNext()) {, +                Map.Entry<String, String> entry = iterator.next();, +                if (entry.getKey().startsWith(prefix) == false) {, +                    replacements.put(prefix + entry.getKey(), entry.getValue());, +                    iterator.remove();, +                }, +            }, +            map.putAll(replacements);, +            return this;, +        }, +, +        /**, +++ b/src/main/java/org/elasticsearch/index/settings/IndexSettingsService.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +        if (this.settings.getByPrefix(IndexMetaData.INDEX_SETTING_PREFIX).getAsMap().equals(settings.getByPrefix(IndexMetaData.INDEX_SETTING_PREFIX).getAsMap())) {, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +    public static final String INDEX_SETTING_PREFIX = "index.";, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +                        templateSettingsBuilder.put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +        updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java]