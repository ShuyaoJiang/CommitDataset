[+++ b/CONTRIBUTING.md, +Elasticsearch uses it as its build system. Gradle must be version 2.13 _exactly_ in, +order to build successfully., +++ b/CONTRIBUTING.md, +Elasticsearch uses it as its build system. Gradle must be version 2.13 _exactly_ in, +order to build successfully., +++ b/README.textile, +Elasticsearch uses "Gradle":https://gradle.org for its build system. You'll need to have version 2.13 of Gradle installed., +++ b/CONTRIBUTING.md, +Elasticsearch uses it as its build system. Gradle must be version 2.13 _exactly_ in, +order to build successfully., +++ b/README.textile, +Elasticsearch uses "Gradle":https://gradle.org for its build system. You'll need to have version 2.13 of Gradle installed., +++ b/TESTING.asciidoc, +++ b/CONTRIBUTING.md, +Elasticsearch uses it as its build system. Gradle must be version 2.13 _exactly_ in, +order to build successfully., +++ b/README.textile, +Elasticsearch uses "Gradle":https://gradle.org for its build system. You'll need to have version 2.13 of Gradle installed., +++ b/TESTING.asciidoc, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.common.transport.TransportAddress;, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.util.concurrent.atomic.AtomicInteger;, +    private static final AtomicInteger portGenerator = new AtomicInteger();, +, +        return new DiscoveryNode("", nodeId, new TransportAddress(TransportAddress.META_ADDRESS,, +            portGenerator.incrementAndGet()), attributes, Sets.newHashSet(DiscoveryNode.Role.MASTER,, +++ b/CONTRIBUTING.md, +Elasticsearch uses it as its build system. Gradle must be version 2.13 _exactly_ in, +order to build successfully., +++ b/README.textile, +Elasticsearch uses "Gradle":https://gradle.org for its build system. You'll need to have version 2.13 of Gradle installed., +++ b/TESTING.asciidoc, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.common.transport.TransportAddress;, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.util.concurrent.atomic.AtomicInteger;, +    private static final AtomicInteger portGenerator = new AtomicInteger();, +, +        return new DiscoveryNode("", nodeId, new TransportAddress(TransportAddress.META_ADDRESS,, +            portGenerator.incrementAndGet()), attributes, Sets.newHashSet(DiscoveryNode.Role.MASTER,, +++ b/buildSrc/version.properties, +log4j             = 2.7, +++ b/CONTRIBUTING.md, +Elasticsearch uses it as its build system. Gradle must be version 2.13 _exactly_ in, +order to build successfully., +++ b/README.textile, +Elasticsearch uses "Gradle":https://gradle.org for its build system. You'll need to have version 2.13 of Gradle installed., +++ b/TESTING.asciidoc, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.common.transport.TransportAddress;, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.util.concurrent.atomic.AtomicInteger;, +    private static final AtomicInteger portGenerator = new AtomicInteger();, +, +        return new DiscoveryNode("", nodeId, new TransportAddress(TransportAddress.META_ADDRESS,, +            portGenerator.incrementAndGet()), attributes, Sets.newHashSet(DiscoveryNode.Role.MASTER,, +++ b/buildSrc/version.properties, +log4j             = 2.7, +++ b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/transport/TransportClientBenchmark.java, +import org.elasticsearch.common.transport.TransportAddress;, +        client.addTransportAddress(new TransportAddress(InetAddress.getByName(benchmarkTargetHost), 9300));, +++ b/CONTRIBUTING.md, +Elasticsearch uses it as its build system. Gradle must be version 2.13 _exactly_ in, +order to build successfully., +++ b/README.textile, +Elasticsearch uses "Gradle":https://gradle.org for its build system. You'll need to have version 2.13 of Gradle installed., +++ b/TESTING.asciidoc, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.common.transport.TransportAddress;, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.util.concurrent.atomic.AtomicInteger;, +    private static final AtomicInteger portGenerator = new AtomicInteger();, +, +        return new DiscoveryNode("", nodeId, new TransportAddress(TransportAddress.META_ADDRESS,, +            portGenerator.incrementAndGet()), attributes, Sets.newHashSet(DiscoveryNode.Role.MASTER,, +++ b/buildSrc/version.properties, +log4j             = 2.7, +++ b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/transport/TransportClientBenchmark.java, +import org.elasticsearch.common.transport.TransportAddress;, +        client.addTransportAddress(new TransportAddress(InetAddress.getByName(benchmarkTargetHost), 9300));, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, "update",, +++ b/CONTRIBUTING.md, +Elasticsearch uses it as its build system. Gradle must be version 2.13 _exactly_ in, +order to build successfully., +++ b/README.textile, +Elasticsearch uses "Gradle":https://gradle.org for its build system. You'll need to have version 2.13 of Gradle installed., +++ b/TESTING.asciidoc, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +import org.elasticsearch.common.transport.TransportAddress;, +import java.net.InetAddress;, +import java.net.UnknownHostException;, +import java.util.concurrent.atomic.AtomicInteger;, +    private static final AtomicInteger portGenerator = new AtomicInteger();]