[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +     * @param name the name for the suggestion that will also be used in the response, +     * @param suggestion the suggestion configuration, +    public SuggestRequestBuilder addSuggestion(String name, SuggestionBuilder<?> suggestion) {, +        suggest.addSuggestion(name, suggestion);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +     * @param name the name for the suggestion that will also be used in the response, +     * @param suggestion the suggestion configuration, +    public SuggestRequestBuilder addSuggestion(String name, SuggestionBuilder<?> suggestion) {, +        suggest.addSuggestion(name, suggestion);, +++ b/core/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java, +import org.elasticsearch.search.suggest.term.TermSuggestionBuilder.SuggestMode;, +            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,, +                    termSuggestion().field(suggestField), +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +     * @param name the name for the suggestion that will also be used in the response, +     * @param suggestion the suggestion configuration, +    public SuggestRequestBuilder addSuggestion(String name, SuggestionBuilder<?> suggestion) {, +        suggest.addSuggestion(name, suggestion);, +++ b/core/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java, +import org.elasticsearch.search.suggest.term.TermSuggestionBuilder.SuggestMode;, +            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,, +                    termSuggestion().field(suggestField), +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestBuilder.java, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Map.Entry;, +    private final Map<String, SuggestionBuilder<?>> suggestions = new HashMap<>();, +     * @throws IllegalArgumentException if two suggestions added have the same name, +    public SuggestBuilder addSuggestion(String name, SuggestionBuilder<?> suggestion) {, +        Objects.requireNonNull(name, "every suggestion needs a name");, +        if (suggestions.get(name) == null) {, +            suggestions.put(name, suggestion);, +        } else {, +            throw new IllegalArgumentException("already added another suggestion with name [" + name + "]");, +        }, +     * Get all the <code>Suggestions</code> that were added to the global {@link SuggestBuilder},, +     * together with their names, +    public Map<String, SuggestionBuilder<?>> getSuggestions() {, +        for (Entry<String, SuggestionBuilder<?>> suggestion : suggestions.entrySet()) {, +            builder.startObject(suggestion.getKey());, +            suggestion.getValue().toXContent(builder, params);, +            builder.endObject();, +                suggestBuilder.addSuggestion(suggestionName, SuggestionBuilder.fromXContent(parseContext, suggesters));, +        for (Entry<String, SuggestionBuilder<?>> suggestion : suggestions.entrySet()) {, +            SuggestionContext suggestionContext = suggestion.getValue().build(context);, +            suggestionSearchContext.addSuggestion(suggestion.getKey(), suggestionContext);, +            builder.suggestions.put(in.readString(), in.readSuggestion());, +        for (Entry<String, SuggestionBuilder<?>> suggestion : suggestions.entrySet()) {, +            out.writeString(suggestion.getKey());, +            out.writeSuggestion(suggestion.getValue());, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +     * @param name the name for the suggestion that will also be used in the response, +     * @param suggestion the suggestion configuration, +    public SuggestRequestBuilder addSuggestion(String name, SuggestionBuilder<?> suggestion) {, +        suggest.addSuggestion(name, suggestion);, +++ b/core/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java, +import org.elasticsearch.search.suggest.term.TermSuggestionBuilder.SuggestMode;, +            searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(suggestField,, +                    termSuggestion().field(suggestField), +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestBuilder.java, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Map.Entry;, +    private final Map<String, SuggestionBuilder<?>> suggestions = new HashMap<>();, +     * @throws IllegalArgumentException if two suggestions added have the same name, +    public SuggestBuilder addSuggestion(String name, SuggestionBuilder<?> suggestion) {, +        Objects.requireNonNull(name, "every suggestion needs a name");, +        if (suggestions.get(name) == null) {, +            suggestions.put(name, suggestion);, +        } else {, +            throw new IllegalArgumentException("already added another suggestion with name [" + name + "]");, +        }, +     * Get all the <code>Suggestions</code> that were added to the global {@link SuggestBuilder},, +     * together with their names, +    public Map<String, SuggestionBuilder<?>> getSuggestions() {, +        for (Entry<String, SuggestionBuilder<?>> suggestion : suggestions.entrySet()) {, +            builder.startObject(suggestion.getKey());, +            suggestion.getValue().toXContent(builder, params);, +            builder.endObject();, +                suggestBuilder.addSuggestion(suggestionName, SuggestionBuilder.fromXContent(parseContext, suggesters));, +        for (Entry<String, SuggestionBuilder<?>> suggestion : suggestions.entrySet()) {, +            SuggestionContext suggestionContext = suggestion.getValue().build(context);, +            suggestionSearchContext.addSuggestion(suggestion.getKey(), suggestionContext);, +            builder.suggestions.put(in.readString(), in.readSuggestion());, +        for (Entry<String, SuggestionBuilder<?>> suggestion : suggestions.entrySet()) {, +            out.writeString(suggestion.getKey());, +            out.writeSuggestion(suggestion.getValue());, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestBuilders.java, +    public static TermSuggestionBuilder termSuggestion() {]