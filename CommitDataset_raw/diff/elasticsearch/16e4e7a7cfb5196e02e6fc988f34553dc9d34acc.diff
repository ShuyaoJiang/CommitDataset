[+++ b/client/rest/src/main/java/org/elasticsearch/client/NodeSelector.java, + * Use with {@link RestClientBuilder#setNodeSelector(NodeSelector)}., +    NodeSelector SKIP_DEDICATED_MASTERS = new NodeSelector() {, +            return "SKIP_DEDICATED_MASTERS";, +++ b/client/rest/src/main/java/org/elasticsearch/client/NodeSelector.java, + * Use with {@link RestClientBuilder#setNodeSelector(NodeSelector)}., +    NodeSelector SKIP_DEDICATED_MASTERS = new NodeSelector() {, +            return "SKIP_DEDICATED_MASTERS";, +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestOptions.java, +            Collections.<Header>emptyList(), HeapBufferedResponseConsumerFactory.DEFAULT).build();, +        return new Builder(headers, httpAsyncResponseConsumerFactory);, +        return Objects.hash(headers, httpAsyncResponseConsumerFactory);, +        private Builder(List<Header> headers, HttpAsyncResponseConsumerFactory httpAsyncResponseConsumerFactory) {, +++ b/client/rest/src/main/java/org/elasticsearch/client/NodeSelector.java, + * Use with {@link RestClientBuilder#setNodeSelector(NodeSelector)}., +    NodeSelector SKIP_DEDICATED_MASTERS = new NodeSelector() {, +            return "SKIP_DEDICATED_MASTERS";, +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestOptions.java, +            Collections.<Header>emptyList(), HeapBufferedResponseConsumerFactory.DEFAULT).build();, +        return new Builder(headers, httpAsyncResponseConsumerFactory);, +        return Objects.hash(headers, httpAsyncResponseConsumerFactory);, +        private Builder(List<Header> headers, HttpAsyncResponseConsumerFactory httpAsyncResponseConsumerFactory) {, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +import javax.net.ssl.SSLHandshakeException;, +    private final NodeSelector nodeSelector;, +               List<Node> nodes, String pathPrefix, FailureListener failureListener, NodeSelector nodeSelector) {, +        this.nodeSelector = nodeSelector;, +     * @deprecated prefer {@link #setNodes(Collection)} because it allows you, +        for (HttpHost host : hosts) {, +            nodes.add(new Node(host));, +        performRequestAsync(startTime, nextNode(), httpRequest, ignoreErrorCodes,, +    private NodeTuple<Iterator<Node>> nextNode() throws IOException {, +++ b/client/rest/src/main/java/org/elasticsearch/client/NodeSelector.java, + * Use with {@link RestClientBuilder#setNodeSelector(NodeSelector)}., +    NodeSelector SKIP_DEDICATED_MASTERS = new NodeSelector() {, +            return "SKIP_DEDICATED_MASTERS";, +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestOptions.java, +            Collections.<Header>emptyList(), HeapBufferedResponseConsumerFactory.DEFAULT).build();, +        return new Builder(headers, httpAsyncResponseConsumerFactory);, +        return Objects.hash(headers, httpAsyncResponseConsumerFactory);, +        private Builder(List<Header> headers, HttpAsyncResponseConsumerFactory httpAsyncResponseConsumerFactory) {, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +import javax.net.ssl.SSLHandshakeException;, +    private final NodeSelector nodeSelector;, +               List<Node> nodes, String pathPrefix, FailureListener failureListener, NodeSelector nodeSelector) {, +        this.nodeSelector = nodeSelector;, +     * @deprecated prefer {@link #setNodes(Collection)} because it allows you, +        for (HttpHost host : hosts) {, +            nodes.add(new Node(host));, +        performRequestAsync(startTime, nextNode(), httpRequest, ignoreErrorCodes,, +    private NodeTuple<Iterator<Node>> nextNode() throws IOException {, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +    private NodeSelector nodeSelector = NodeSelector.ANY;, +     * Sets the {@link NodeSelector} to be used for all requests., +     * @throws NullPointerException if the provided nodeSelector is null, +     */, +    public RestClientBuilder setNodeSelector(NodeSelector nodeSelector) {, +        Objects.requireNonNull(nodeSelector, "nodeSelector must not be null");, +        this.nodeSelector = nodeSelector;, +        return this;, +    }, +, +    /**, +        RestClient restClient = new RestClient(httpClient, maxRetryTimeout, defaultHeaders, nodes,, +                pathPrefix, failureListener, nodeSelector);, +++ b/client/rest/src/main/java/org/elasticsearch/client/NodeSelector.java, + * Use with {@link RestClientBuilder#setNodeSelector(NodeSelector)}., +    NodeSelector SKIP_DEDICATED_MASTERS = new NodeSelector() {, +            return "SKIP_DEDICATED_MASTERS";, +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestOptions.java, +            Collections.<Header>emptyList(), HeapBufferedResponseConsumerFactory.DEFAULT).build();, +        return new Builder(headers, httpAsyncResponseConsumerFactory);, +        return Objects.hash(headers, httpAsyncResponseConsumerFactory);, +        private Builder(List<Header> headers, HttpAsyncResponseConsumerFactory httpAsyncResponseConsumerFactory) {, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +import javax.net.ssl.SSLHandshakeException;, +    private final NodeSelector nodeSelector;, +               List<Node> nodes, String pathPrefix, FailureListener failureListener, NodeSelector nodeSelector) {, +        this.nodeSelector = nodeSelector;, +     * @deprecated prefer {@link #setNodes(Collection)} because it allows you, +        for (HttpHost host : hosts) {, +            nodes.add(new Node(host));, +        performRequestAsync(startTime, nextNode(), httpRequest, ignoreErrorCodes,, +    private NodeTuple<Iterator<Node>> nextNode() throws IOException {, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +    private NodeSelector nodeSelector = NodeSelector.ANY;, +     * Sets the {@link NodeSelector} to be used for all requests., +     * @throws NullPointerException if the provided nodeSelector is null, +     */, +    public RestClientBuilder setNodeSelector(NodeSelector nodeSelector) {, +        Objects.requireNonNull(nodeSelector, "nodeSelector must not be null");, +        this.nodeSelector = nodeSelector;, +        return this;, +    }, +, +    /**, +        RestClient restClient = new RestClient(httpClient, maxRetryTimeout, defaultHeaders, nodes,, +                pathPrefix, failureListener, nodeSelector);, +++ b/client/rest/src/test/java/org/elasticsearch/client/NodeSelectorTests.java, +        NodeSelector.SKIP_DEDICATED_MASTERS.select(nodes);]