[+++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +import org.elasticsearch.index.search.nested.NonNestedDocsFilter;, +            boolean isNested = indexShard.mapperService().documentMapper(request.documentType()).hasNestedObjects();, +                assert isNested;, +            return action.doPercolate(request, context, isNested);, +        PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested);, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                    if (isNested) {, +                        context.docSearcher().search(entry.getValue(), NonNestedDocsFilter.INSTANCE, collector);, +                    } else {, +                    }, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                Count countCollector = count(logger, context, isNested);, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                    if (isNested) {, +                        context.docSearcher().search(entry.getValue(), NonNestedDocsFilter.INSTANCE, collector);, +                    } else {, +                    }, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                Match match = match(logger, context, highlightPhase, isNested);, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                MatchAndScore matchAndScore = matchAndScore(logger, context, highlightPhase, isNested);, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                MatchAndSort matchAndSort = QueryCollector.matchAndSort(logger, context, isNested);, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +import org.elasticsearch.index.search.nested.NonNestedDocsFilter;, +            boolean isNested = indexShard.mapperService().documentMapper(request.documentType()).hasNestedObjects();, +                assert isNested;, +            return action.doPercolate(request, context, isNested);, +        PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested);, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                    if (isNested) {, +                        context.docSearcher().search(entry.getValue(), NonNestedDocsFilter.INSTANCE, collector);, +                    } else {, +                    }, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                Count countCollector = count(logger, context, isNested);, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                    if (isNested) {, +                        context.docSearcher().search(entry.getValue(), NonNestedDocsFilter.INSTANCE, collector);, +                    } else {, +                    }, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                Match match = match(logger, context, highlightPhase, isNested);, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                MatchAndScore matchAndScore = matchAndScore(logger, context, highlightPhase, isNested);, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                MatchAndSort matchAndSort = QueryCollector.matchAndSort(logger, context, isNested);, +++ b/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +import org.elasticsearch.index.search.nested.NonNestedDocsFilter;, +    boolean isNestedDoc = false;, +    QueryCollector(ESLogger logger, PercolateContext context, boolean isNestedDoc) {, +        this.isNestedDoc = isNestedDoc;, +    static Match match(ESLogger logger, PercolateContext context, HighlightPhase highlightPhase, boolean isNestedDoc) {, +        return new Match(logger, context, highlightPhase, isNestedDoc);, +    static Count count(ESLogger logger, PercolateContext context, boolean isNestedDoc) {, +        return new Count(logger, context, isNestedDoc);, +    static MatchAndScore matchAndScore(ESLogger logger, PercolateContext context, HighlightPhase highlightPhase, boolean isNestedDoc) {, +        return new MatchAndScore(logger, context, highlightPhase, isNestedDoc);, +    static MatchAndSort matchAndSort(ESLogger logger, PercolateContext context, boolean isNestedDoc) {, +        return new MatchAndSort(logger, context, isNestedDoc);, +        Match(ESLogger logger, PercolateContext context, HighlightPhase highlightPhase, boolean isNestedDoc) {, +            super(logger, context, isNestedDoc);, +                if (isNestedDoc) {, +                    searcher.search(query, NonNestedDocsFilter.INSTANCE, collector);, +                } else {, +                }, +        MatchAndSort(ESLogger logger, PercolateContext context, boolean isNestedDoc) {, +            super(logger, context, isNestedDoc);, +                if (isNestedDoc) {, +                    searcher.search(query, NonNestedDocsFilter.INSTANCE, collector);, +                } else {, +                }, +        MatchAndScore(ESLogger logger, PercolateContext context, HighlightPhase highlightPhase, boolean isNestedDoc) {, +            super(logger, context, isNestedDoc);, +                if (isNestedDoc) {, +                    searcher.search(query, NonNestedDocsFilter.INSTANCE, collector);, +                } else {, +                }, +        Count(ESLogger logger, PercolateContext context, boolean isNestedDoc) {, +            super(logger, context, isNestedDoc);, +                if (isNestedDoc) {, +                    searcher.search(query, NonNestedDocsFilter.INSTANCE, collector);, +                } else {, +                }, +++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java, +import org.elasticsearch.index.search.nested.NonNestedDocsFilter;, +            boolean isNested = indexShard.mapperService().documentMapper(request.documentType()).hasNestedObjects();, +                assert isNested;, +            return action.doPercolate(request, context, isNested);, +        PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested);, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                    if (isNested) {, +                        context.docSearcher().search(entry.getValue(), NonNestedDocsFilter.INSTANCE, collector);, +                    } else {, +                    }, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                Count countCollector = count(logger, context, isNested);, +        public PercolateShardResponse doPercolate(PercolateShardRequest request, PercolateContext context, boolean isNested) {, +                    if (isNested) {]