[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +import org.elasticsearch.index.VersionType;, +            VersionType versionType = VersionType.INTERNAL;, +                    } else if ("_version_type".equals(currentFieldName) || "_versionType".equals(currentFieldName)) {, +                        versionType = VersionType.fromString(parser.text());, +                add(new DeleteRequest(index, type, id).parent(parent).versionType(versionType).routing(routing));, +                        add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                        add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                    add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +import org.elasticsearch.index.VersionType;, +            VersionType versionType = VersionType.INTERNAL;, +                    } else if ("_version_type".equals(currentFieldName) || "_versionType".equals(currentFieldName)) {, +                        versionType = VersionType.fromString(parser.text());, +                add(new DeleteRequest(index, type, id).parent(parent).versionType(versionType).routing(routing));, +                        add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                        add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                    add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                        Engine.Index index = indexShard.prepareIndex(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +                        Engine.Create create = indexShard.prepareCreate(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +                    Engine.Delete delete = indexShard.prepareDelete(deleteRequest.type(), deleteRequest.id(), deleteRequest.version()).versionType(deleteRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +import org.elasticsearch.index.VersionType;, +            VersionType versionType = VersionType.INTERNAL;, +                    } else if ("_version_type".equals(currentFieldName) || "_versionType".equals(currentFieldName)) {, +                        versionType = VersionType.fromString(parser.text());, +                add(new DeleteRequest(index, type, id).parent(parent).versionType(versionType).routing(routing));, +                        add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                        add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                    add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                        Engine.Index index = indexShard.prepareIndex(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +                        Engine.Create create = indexShard.prepareCreate(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +                    Engine.Delete delete = indexShard.prepareDelete(deleteRequest.type(), deleteRequest.id(), deleteRequest.version()).versionType(deleteRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.index.VersionType;, +    private VersionType versionType = VersionType.INTERNAL;, +    public DeleteRequest versionType(VersionType versionType) {, +        this.versionType = versionType;, +        return this;, +    }, +, +    public VersionType versionType() {, +        return this.versionType;, +    }, +, +        versionType = VersionType.fromValue(in.readByte());, +        out.writeByte(versionType.getValue());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +import org.elasticsearch.index.VersionType;, +            VersionType versionType = VersionType.INTERNAL;, +                    } else if ("_version_type".equals(currentFieldName) || "_versionType".equals(currentFieldName)) {, +                        versionType = VersionType.fromString(parser.text());, +                add(new DeleteRequest(index, type, id).parent(parent).versionType(versionType).routing(routing));, +                        add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                        add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                    add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                        Engine.Index index = indexShard.prepareIndex(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +                        Engine.Create create = indexShard.prepareCreate(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +                    Engine.Delete delete = indexShard.prepareDelete(deleteRequest.type(), deleteRequest.id(), deleteRequest.version()).versionType(deleteRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.index.VersionType;, +    private VersionType versionType = VersionType.INTERNAL;, +    public DeleteRequest versionType(VersionType versionType) {, +        this.versionType = versionType;, +        return this;, +    }, +, +    public VersionType versionType() {, +        return this.versionType;, +    }, +, +        versionType = VersionType.fromValue(in.readByte());, +        out.writeByte(versionType.getValue());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +                .versionType(request.versionType()), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +import org.elasticsearch.index.VersionType;, +            VersionType versionType = VersionType.INTERNAL;, +                    } else if ("_version_type".equals(currentFieldName) || "_versionType".equals(currentFieldName)) {, +                        versionType = VersionType.fromString(parser.text());, +                add(new DeleteRequest(index, type, id).parent(parent).versionType(versionType).routing(routing));, +                        add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                        add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +                    add(new IndexRequest(index, type, id).routing(routing).parent(parent).version(version).versionType(versionType), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                        Engine.Index index = indexShard.prepareIndex(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +                        Engine.Create create = indexShard.prepareCreate(sourceToParse).version(indexRequest.version()).versionType(indexRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +                    Engine.Delete delete = indexShard.prepareDelete(deleteRequest.type(), deleteRequest.id(), deleteRequest.version()).versionType(deleteRequest.versionType()).origin(Engine.Operation.Origin.PRIMARY);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.index.VersionType;, +    private VersionType versionType = VersionType.INTERNAL;, +    public DeleteRequest versionType(VersionType versionType) {, +        this.versionType = versionType;, +        return this;, +    }, +, +    public VersionType versionType() {]