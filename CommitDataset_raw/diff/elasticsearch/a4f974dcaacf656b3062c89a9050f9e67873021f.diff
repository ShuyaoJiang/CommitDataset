[+++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                    IndexShard shard = indexService.shard(request.request().shardId());, +                    if (shard != null) {, +                        shard.indexingService().noopUpdate(request.request().type());, +                    }, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                    IndexShard shard = indexService.shard(request.request().shardId());, +                    if (shard != null) {, +                        shard.indexingService().noopUpdate(request.request().type());, +                    }, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.cluster.AckedClusterStateUpdateTask;, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ProcessedClusterStateUpdateTask;, +                        IndexService indexService = indicesService.indexServiceSafe(index);, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                    IndexShard shard = indexService.shard(request.request().shardId());, +                    if (shard != null) {, +                        shard.indexingService().noopUpdate(request.request().type());, +                    }, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.cluster.AckedClusterStateUpdateTask;, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ProcessedClusterStateUpdateTask;, +                        IndexService indexService = indicesService.indexServiceSafe(index);, +++ b/src/main/java/org/elasticsearch/index/service/IndexService.java, +import org.elasticsearch.common.Nullable;, +    /**, +     * Return the shard with the provided id, or null if there is no such shard., +     */, +    @Nullable, +    /**, +     * Return the shard with the provided id, or throw an exception if it doesn't exist., +     */, +    /**, +     * Return the shard injector for the provided id, or null if there is no such shard., +     */, +    @Nullable, +    /**, +     * Return the shard injector for the provided id, or throw an exception if there is no such shard., +     */, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                    IndexShard shard = indexService.shard(request.request().shardId());, +                    if (shard != null) {, +                        shard.indexingService().noopUpdate(request.request().type());, +                    }, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.cluster.AckedClusterStateUpdateTask;, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ProcessedClusterStateUpdateTask;, +                        IndexService indexService = indicesService.indexServiceSafe(index);, +++ b/src/main/java/org/elasticsearch/index/service/IndexService.java, +import org.elasticsearch.common.Nullable;, +    /**, +     * Return the shard with the provided id, or null if there is no such shard., +     */, +    @Nullable, +    /**, +     * Return the shard with the provided id, or throw an exception if it doesn't exist., +     */, +    /**, +     * Return the shard injector for the provided id, or null if there is no such shard., +     */, +    @Nullable, +    /**, +     * Return the shard injector for the provided id, or throw an exception if there is no such shard., +     */, +++ b/src/main/java/org/elasticsearch/indices/IndicesService.java, +import org.elasticsearch.common.Nullable;, +    @Nullable, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());, +++ b/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                    IndexShard shard = indexService.shard(request.request().shardId());, +                    if (shard != null) {, +                        shard.indexingService().noopUpdate(request.request().type());, +                    }, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.cluster.AckedClusterStateUpdateTask;, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ProcessedClusterStateUpdateTask;, +                        IndexService indexService = indicesService.indexServiceSafe(index);, +++ b/src/main/java/org/elasticsearch/index/service/IndexService.java, +import org.elasticsearch.common.Nullable;, +    /**, +     * Return the shard with the provided id, or null if there is no such shard.]