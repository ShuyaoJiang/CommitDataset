[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetBucketsAction.java, +        private PageParams pageParams;, +        private Double anomalyScore;, +        private Double maxNormalizedProbability;, +            if (pageParams != null || start != null || end != null || anomalyScore != null || maxNormalizedProbability != null) {, +                throw new IllegalArgumentException("Param [" + TIMESTAMP.getPreferredName() + "] is incompatible with [", +                                + PageParams.FROM.getPreferredName() + ",", +                                + PageParams.SIZE.getPreferredName() + ",", +                                + START.getPreferredName() + ",", +                                + END.getPreferredName() + ",", +                                + ANOMALY_SCORE.getPreferredName() + ",", +                                + MAX_NORMALIZED_PROBABILITY.getPreferredName() + "]");, +            }, +            if (timestamp != null) {, +                throw new IllegalArgumentException("Param [" + PARTITION_VALUE.getPreferredName() + "] is incompatible with [", +                        + TIMESTAMP.getPreferredName() + "].");, +            }, +            this.partitionValue = partitionValue;, +            if (timestamp != null) {, +                throw new IllegalArgumentException("Param [" + START.getPreferredName() + "] is incompatible with [", +                        + TIMESTAMP.getPreferredName() + "].");, +            }, +            if (timestamp != null) {, +                throw new IllegalArgumentException("Param [" + END.getPreferredName() + "] is incompatible with [", +                        + TIMESTAMP.getPreferredName() + "].");, +            }, +            if (timestamp != null) {, +                throw new IllegalArgumentException("Param [" + PageParams.FROM.getPreferredName() , +                        + ", " + PageParams.SIZE.getPreferredName() + "] is incompatible with [" + TIMESTAMP.getPreferredName() + "].");, +            }, +            if (timestamp != null) {, +                throw new IllegalArgumentException("Param [" + ANOMALY_SCORE.getPreferredName() + "] is incompatible with [", +                        + TIMESTAMP.getPreferredName() + "].");, +            }, +            if (timestamp != null) {, +                throw new IllegalArgumentException("Param [" + MAX_NORMALIZED_PROBABILITY.getPreferredName() + "] is incompatible with [", +                        + TIMESTAMP.getPreferredName() + "].");, +            }, +            anomalyScore = in.readOptionalDouble();, +            maxNormalizedProbability = in.readOptionalDouble();, +            out.writeOptionalDouble(anomalyScore);, +            out.writeOptionalDouble(maxNormalizedProbability);, +            if (start != null) {, +            }, +            if (end != null) {, +            }, +            if (anomalyScore != null) {, +            }, +            if (maxNormalizedProbability != null) {, +            }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetBucketsAction.java, +        private PageParams pageParams;, +        private Double anomalyScore;, +        private Double maxNormalizedProbability;, +            if (pageParams != null || start != null || end != null || anomalyScore != null || maxNormalizedProbability != null) {, +                throw new IllegalArgumentException("Param [" + TIMESTAMP.getPreferredName() + "] is incompatible with [", +                                + PageParams.FROM.getPreferredName() + ",", +                                + PageParams.SIZE.getPreferredName() + ",", +                                + START.getPreferredName() + ",", +                                + END.getPreferredName() + ",", +                                + ANOMALY_SCORE.getPreferredName() + ",", +                                + MAX_NORMALIZED_PROBABILITY.getPreferredName() + "]");, +            }, +            if (timestamp != null) {, +                throw new IllegalArgumentException("Param [" + PARTITION_VALUE.getPreferredName() + "] is incompatible with [", +                        + TIMESTAMP.getPreferredName() + "].");, +            }, +            this.partitionValue = partitionValue;, +            if (timestamp != null) {, +                throw new IllegalArgumentException("Param [" + START.getPreferredName() + "] is incompatible with [", +                        + TIMESTAMP.getPreferredName() + "].");, +            }, +            if (timestamp != null) {, +                throw new IllegalArgumentException("Param [" + END.getPreferredName() + "] is incompatible with [", +                        + TIMESTAMP.getPreferredName() + "].");, +            }, +            if (timestamp != null) {, +                throw new IllegalArgumentException("Param [" + PageParams.FROM.getPreferredName() , +                        + ", " + PageParams.SIZE.getPreferredName() + "] is incompatible with [" + TIMESTAMP.getPreferredName() + "].");, +            }, +            if (timestamp != null) {, +                throw new IllegalArgumentException("Param [" + ANOMALY_SCORE.getPreferredName() + "] is incompatible with [", +                        + TIMESTAMP.getPreferredName() + "].");, +            }, +            if (timestamp != null) {, +                throw new IllegalArgumentException("Param [" + MAX_NORMALIZED_PROBABILITY.getPreferredName() + "] is incompatible with [", +                        + TIMESTAMP.getPreferredName() + "].");, +            }, +            anomalyScore = in.readOptionalDouble();, +            maxNormalizedProbability = in.readOptionalDouble();, +            out.writeOptionalDouble(anomalyScore);, +            out.writeOptionalDouble(maxNormalizedProbability);, +            if (start != null) {, +            }, +            if (end != null) {, +            }, +            if (anomalyScore != null) {, +            }, +            if (maxNormalizedProbability != null) {, +            }]