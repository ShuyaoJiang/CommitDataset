[+++ b/client/src/main/java/org/elasticsearch/client/ElasticsearchResponseException.java, +import org.apache.http.StatusLine;, +    private final StatusLine statusLine;, +    private final String responseBody;, +    public ElasticsearchResponseException(RequestLine requestLine, HttpHost host, StatusLine statusLine, String responseBody) {, +        super(buildMessage(requestLine, host, statusLine));, +        this.responseBody = responseBody;, +        this.statusLine = statusLine;, +    private static String buildMessage(RequestLine requestLine, HttpHost host, StatusLine statusLine) {, +        return requestLine.getMethod() + " " + host + requestLine.getUri() + ": " + statusLine.toString();, +    public StatusLine getStatusLine() {, +        return statusLine;, +    }, +, +    public String getResponseBody() {, +        return responseBody;, +++ b/client/src/main/java/org/elasticsearch/client/ElasticsearchResponseException.java, +import org.apache.http.StatusLine;, +    private final StatusLine statusLine;, +    private final String responseBody;, +    public ElasticsearchResponseException(RequestLine requestLine, HttpHost host, StatusLine statusLine, String responseBody) {, +        super(buildMessage(requestLine, host, statusLine));, +        this.responseBody = responseBody;, +        this.statusLine = statusLine;, +    private static String buildMessage(RequestLine requestLine, HttpHost host, StatusLine statusLine) {, +        return requestLine.getMethod() + " " + host + requestLine.getUri() + ": " + statusLine.toString();, +    public StatusLine getStatusLine() {, +        return statusLine;, +    }, +, +    public String getResponseBody() {, +        return responseBody;, +++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +import org.apache.http.util.EntityUtils;, +                connectionPool.onFailure(connection);, +                lastSeenException = addSuppressedException(lastSeenException, e);, +                continue;, +            int statusCode = response.getStatusLine().getStatusCode();, +            //TODO make ignore status code configurable. rest-spec and tests support that parameter (ignore_missing), +            if (statusCode < 300 || request.getMethod().equals(HttpHead.METHOD_NAME) && statusCode == 404) {, +                connectionPool.onSuccess(connection);, +                String responseBody = null;, +                if (response.getEntity() != null) {, +                    responseBody = EntityUtils.toString(response.getEntity());, +                ElasticsearchResponseException elasticsearchResponseException = new ElasticsearchResponseException(, +                        request.getRequestLine(), connection.getHost(), response.getStatusLine(), responseBody);, +                lastSeenException = addSuppressedException(lastSeenException, elasticsearchResponseException);, +                //clients don't retry on 500 because elasticsearch still misuses it instead of 400 in some places, +                if (statusCode == 502 || statusCode == 503 || statusCode == 504) {, +                    connectionPool.onFailure(connection);, +                } else {, +                    //don't retry and call onSuccess as the error should be a request problem, the node is alive, +                    connectionPool.onSuccess(connection);, +                    break;, +                }, +            }, +        }, +        assert lastSeenException != null;, +        throw lastSeenException;, +++ b/client/src/main/java/org/elasticsearch/client/ElasticsearchResponseException.java, +import org.apache.http.StatusLine;, +    private final StatusLine statusLine;, +    private final String responseBody;, +    public ElasticsearchResponseException(RequestLine requestLine, HttpHost host, StatusLine statusLine, String responseBody) {, +        super(buildMessage(requestLine, host, statusLine));, +        this.responseBody = responseBody;, +        this.statusLine = statusLine;, +    private static String buildMessage(RequestLine requestLine, HttpHost host, StatusLine statusLine) {, +        return requestLine.getMethod() + " " + host + requestLine.getUri() + ": " + statusLine.toString();, +    public StatusLine getStatusLine() {, +        return statusLine;, +    }, +, +    public String getResponseBody() {, +        return responseBody;, +++ b/client/src/main/java/org/elasticsearch/client/RestClient.java, +import org.apache.http.util.EntityUtils;, +                connectionPool.onFailure(connection);, +                lastSeenException = addSuppressedException(lastSeenException, e);, +                continue;, +            int statusCode = response.getStatusLine().getStatusCode();, +            //TODO make ignore status code configurable. rest-spec and tests support that parameter (ignore_missing), +            if (statusCode < 300 || request.getMethod().equals(HttpHead.METHOD_NAME) && statusCode == 404) {, +                connectionPool.onSuccess(connection);, +                String responseBody = null;, +                if (response.getEntity() != null) {, +                    responseBody = EntityUtils.toString(response.getEntity());, +                ElasticsearchResponseException elasticsearchResponseException = new ElasticsearchResponseException(, +                        request.getRequestLine(), connection.getHost(), response.getStatusLine(), responseBody);, +                lastSeenException = addSuppressedException(lastSeenException, elasticsearchResponseException);, +                //clients don't retry on 500 because elasticsearch still misuses it instead of 400 in some places, +                if (statusCode == 502 || statusCode == 503 || statusCode == 504) {, +                    connectionPool.onFailure(connection);, +                } else {, +                    //don't retry and call onSuccess as the error should be a request problem, the node is alive, +                    connectionPool.onSuccess(connection);, +                    break;, +                }, +            }, +        }]