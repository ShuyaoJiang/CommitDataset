[+++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.common.ParsingException.class, 40);, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.common.ParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_beta2_ID = 2000002;, +    public static final Version V_2_0_0_beta2 = new Version(V_2_0_0_beta2_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +            case V_2_0_0_beta2_ID:, +                return V_2_0_0_beta2;, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.common.ParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_beta2_ID = 2000002;, +    public static final Version V_2_0_0_beta2 = new Version(V_2_0_0_beta2_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +            case V_2_0_0_beta2_ID:, +                return V_2_0_0_beta2;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.ParsingException;, +        } catch (ParsingException e) {, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.common.ParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_beta2_ID = 2000002;, +    public static final Version V_2_0_0_beta2 = new Version(V_2_0_0_beta2_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +            case V_2_0_0_beta2_ID:, +                return V_2_0_0_beta2;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.ParsingException;, +        } catch (ParsingException e) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.common.ParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_beta2_ID = 2000002;, +    public static final Version V_2_0_0_beta2 = new Version(V_2_0_0_beta2_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +            case V_2_0_0_beta2_ID:, +                return V_2_0_0_beta2;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.ParsingException;, +        } catch (ParsingException e) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI policyUri = getClass().getResource(POLICY_RESOURCE).toURI();, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(policyUri));, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));, +                // run groovy scripts with no permissions (except logging property), +                    return groovy.implies(domain, permission);, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.common.ParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_beta2_ID = 2000002;, +    public static final Version V_2_0_0_beta2 = new Version(V_2_0_0_beta2_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +            case V_2_0_0_beta2_ID:, +                return V_2_0_0_beta2;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.common.ParsingException;, +        } catch (ParsingException e) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI policyUri = getClass().getResource(POLICY_RESOURCE).toURI();, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(policyUri));, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));]