[+++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +            deleteSnapshotBlobIgnoringErrors(snapshot, snapshotId.getUUID());, +            deleteGlobalMetaDataBlobIgnoringErrors(snapshot, snapshotId.getUUID());, +    private void deleteSnapshotBlobIgnoringErrors(final SnapshotInfo snapshotInfo, final String blobId) {, +        try {, +            snapshotFormat.delete(snapshotsBlobContainer, blobId);, +        } catch (IOException e) {, +                logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] Unable to delete snapshot file [{}]",, +                    snapshotInfo.snapshotId(), blobId), e);, +    private void deleteGlobalMetaDataBlobIgnoringErrors(final SnapshotInfo snapshotInfo, final String blobId) {, +        try {, +            globalMetaDataFormat.delete(snapshotsBlobContainer, blobId);, +        } catch (IOException e) {, +                logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] Unable to delete global metadata file [{}]",, +                    snapshotInfo.snapshotId(), blobId), e);, +            if (globalMetaDataFormat.exists(snapshotsBlobContainer, snapshotId.getUUID()) == false) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +            deleteSnapshotBlobIgnoringErrors(snapshot, snapshotId.getUUID());, +            deleteGlobalMetaDataBlobIgnoringErrors(snapshot, snapshotId.getUUID());, +    private void deleteSnapshotBlobIgnoringErrors(final SnapshotInfo snapshotInfo, final String blobId) {, +        try {, +            snapshotFormat.delete(snapshotsBlobContainer, blobId);, +        } catch (IOException e) {, +                logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] Unable to delete snapshot file [{}]",, +                    snapshotInfo.snapshotId(), blobId), e);, +    private void deleteGlobalMetaDataBlobIgnoringErrors(final SnapshotInfo snapshotInfo, final String blobId) {, +        try {, +            globalMetaDataFormat.delete(snapshotsBlobContainer, blobId);, +        } catch (IOException e) {, +                logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] Unable to delete global metadata file [{}]",, +                    snapshotInfo.snapshotId(), blobId), e);, +            if (globalMetaDataFormat.exists(snapshotsBlobContainer, snapshotId.getUUID()) == false) {, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +            deleteSnapshotBlobIgnoringErrors(snapshot, snapshotId.getUUID());, +            deleteGlobalMetaDataBlobIgnoringErrors(snapshot, snapshotId.getUUID());, +    private void deleteSnapshotBlobIgnoringErrors(final SnapshotInfo snapshotInfo, final String blobId) {, +        try {, +            snapshotFormat.delete(snapshotsBlobContainer, blobId);, +        } catch (IOException e) {, +                logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] Unable to delete snapshot file [{}]",, +                    snapshotInfo.snapshotId(), blobId), e);, +    private void deleteGlobalMetaDataBlobIgnoringErrors(final SnapshotInfo snapshotInfo, final String blobId) {, +        try {, +            globalMetaDataFormat.delete(snapshotsBlobContainer, blobId);, +        } catch (IOException e) {, +                logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] Unable to delete global metadata file [{}]",, +                    snapshotInfo.snapshotId(), blobId), e);, +            if (globalMetaDataFormat.exists(snapshotsBlobContainer, snapshotId.getUUID()) == false) {, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +, +            logger.info("snapshot [{}] started", snapshot.snapshot());, +        threadPool.executor(ThreadPool.Names.SNAPSHOT).execute(() -> {, +                logger.info("snapshot [{}] completed with state [{}]", snapshot, snapshotInfo.state());, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +            deleteSnapshotBlobIgnoringErrors(snapshot, snapshotId.getUUID());, +            deleteGlobalMetaDataBlobIgnoringErrors(snapshot, snapshotId.getUUID());, +    private void deleteSnapshotBlobIgnoringErrors(final SnapshotInfo snapshotInfo, final String blobId) {, +        try {, +            snapshotFormat.delete(snapshotsBlobContainer, blobId);, +        } catch (IOException e) {, +                logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] Unable to delete snapshot file [{}]",, +                    snapshotInfo.snapshotId(), blobId), e);, +    private void deleteGlobalMetaDataBlobIgnoringErrors(final SnapshotInfo snapshotInfo, final String blobId) {, +        try {, +            globalMetaDataFormat.delete(snapshotsBlobContainer, blobId);, +        } catch (IOException e) {, +                logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] Unable to delete global metadata file [{}]",, +                    snapshotInfo.snapshotId(), blobId), e);, +            if (globalMetaDataFormat.exists(snapshotsBlobContainer, snapshotId.getUUID()) == false) {, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java, +, +            logger.info("snapshot [{}] started", snapshot.snapshot());, +        threadPool.executor(ThreadPool.Names.SNAPSHOT).execute(() -> {, +                logger.info("snapshot [{}] completed with state [{}]", snapshot, snapshotInfo.state());, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java, +            return SocketAccess.doPrivileged(() -> blobStore.client().doesObjectExist(blobStore.bucket(), buildKey(blobName)));, +            throw new BlobStoreException("Failed to check if blob [" + blobName +"] exists", e);, +            throw new FileAlreadyExistsException("Blob [" + blobName + "] already exists, cannot overwrite");, +        if (blobExists(blobName) == false) {, +++ b/core/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +            deleteSnapshotBlobIgnoringErrors(snapshot, snapshotId.getUUID());, +            deleteGlobalMetaDataBlobIgnoringErrors(snapshot, snapshotId.getUUID());, +    private void deleteSnapshotBlobIgnoringErrors(final SnapshotInfo snapshotInfo, final String blobId) {, +        try {, +            snapshotFormat.delete(snapshotsBlobContainer, blobId);, +        } catch (IOException e) {, +                logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] Unable to delete snapshot file [{}]",, +                    snapshotInfo.snapshotId(), blobId), e);, +    private void deleteGlobalMetaDataBlobIgnoringErrors(final SnapshotInfo snapshotInfo, final String blobId) {, +        try {, +            globalMetaDataFormat.delete(snapshotsBlobContainer, blobId);, +        } catch (IOException e) {, +                logger.warn((Supplier<?>) () -> new ParameterizedMessage("[{}] Unable to delete global metadata file [{}]",, +                    snapshotInfo.snapshotId(), blobId), e);, +            if (globalMetaDataFormat.exists(snapshotsBlobContainer, snapshotId.getUUID()) == false) {, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java]