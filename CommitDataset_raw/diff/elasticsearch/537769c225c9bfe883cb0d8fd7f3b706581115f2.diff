[+++ b/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +    /**, +     * Create a new DiskUsage, if {@code totalBytes} is 0, {@get getFreeDiskAsPercentage}, +     * will always return 100.0% free, +     */, +        this.totalBytes = totalBytes;, +    }, +, +    public String getNodeId() {, +        return nodeId;, +    }, +, +    public String getNodeName() {, +        return nodeName;, +        // We return 100.0% in order to fail "open", in that if we have invalid, +        // numbers for the total bytes, it's as if we don't know disk usage., +        if (totalBytes == 0) {, +            return 100.0;, +        }, +        return 100.0 * ((double)freeBytes / totalBytes);, +++ b/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +    /**, +     * Create a new DiskUsage, if {@code totalBytes} is 0, {@get getFreeDiskAsPercentage}, +     * will always return 100.0% free, +     */, +        this.totalBytes = totalBytes;, +    }, +, +    public String getNodeId() {, +        return nodeId;, +    }, +, +    public String getNodeName() {, +        return nodeName;, +        // We return 100.0% in order to fail "open", in that if we have invalid, +        // numbers for the total bytes, it's as if we don't know disk usage., +        if (totalBytes == 0) {, +            return 100.0;, +        }, +        return 100.0 * ((double)freeBytes / totalBytes);, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +        if (usages.size() == 0) {, +            return new DiskUsage(node.nodeId(), node.node().name(), 0, 0);, +        }, +        DiskUsage newUsage = new DiskUsage(usage.getNodeId(), usage.getNodeName(),, +                usage.getTotalBytes(), usage.getFreeBytes() - shardSize);, +        return newUsage.getFreeDiskAsPercentage();, +++ b/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +    /**, +     * Create a new DiskUsage, if {@code totalBytes} is 0, {@get getFreeDiskAsPercentage}, +     * will always return 100.0% free, +     */, +        this.totalBytes = totalBytes;, +    }, +, +    public String getNodeId() {, +        return nodeId;, +    }, +, +    public String getNodeName() {, +        return nodeName;, +        // We return 100.0% in order to fail "open", in that if we have invalid, +        // numbers for the total bytes, it's as if we don't know disk usage., +        if (totalBytes == 0) {, +            return 100.0;, +        }, +        return 100.0 * ((double)freeBytes / totalBytes);, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +        if (usages.size() == 0) {, +            return new DiskUsage(node.nodeId(), node.node().name(), 0, 0);, +        }, +        DiskUsage newUsage = new DiskUsage(usage.getNodeId(), usage.getNodeName(),, +                usage.getTotalBytes(), usage.getFreeBytes() - shardSize);, +        return newUsage.getFreeDiskAsPercentage();, +++ b/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java, +        // Test that DiskUsage handles invalid numbers, as reported by some, +        // filesystems (ZFS & NTFS), +        DiskUsage du2 = new DiskUsage("node1", "n1", 100, 101);, +        assertThat(du2.getFreeDiskAsPercentage(), equalTo(101.0));, +        assertThat(du2.getFreeBytes(), equalTo(101L));, +        assertThat(du2.getUsedBytes(), equalTo(-1L));, +        assertThat(du2.getTotalBytes(), equalTo(100L));, +, +        DiskUsage du3 = new DiskUsage("node1", "n1", -1, -1);, +        assertThat(du3.getFreeDiskAsPercentage(), equalTo(100.0));, +        assertThat(du3.getFreeBytes(), equalTo(-1L));, +        assertThat(du3.getUsedBytes(), equalTo(0L));, +        assertThat(du3.getTotalBytes(), equalTo(-1L));, +, +        DiskUsage du4 = new DiskUsage("node1", "n1", 0, 0);, +        assertThat(du4.getFreeDiskAsPercentage(), equalTo(100.0));, +        assertThat(du4.getFreeBytes(), equalTo(0L));, +        assertThat(du4.getUsedBytes(), equalTo(0L));, +        assertThat(du4.getTotalBytes(), equalTo(0L));, +            if (total == 0) {, +                assertThat(du.getFreeBytes(), equalTo(free));, +                assertThat(du.getTotalBytes(), equalTo(0L));, +                assertThat(du.getUsedBytes(), equalTo(-free));, +                assertThat(du.getFreeDiskAsPercentage(), equalTo(100.0));, +            } else {]