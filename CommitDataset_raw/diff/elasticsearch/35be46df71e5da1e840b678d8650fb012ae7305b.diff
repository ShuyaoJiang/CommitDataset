[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +, +    @Override public String toString() {, +        try {, +            XContentBuilder builder = XContentFactory.jsonBuilder().prettyPrint();, +            builder.startObject();, +            toXContent(builder, EMPTY_PARAMS);, +            builder.endObject();, +            return builder.string();, +        } catch (IOException e) {, +            return "{ \"error\" : \"" + e.getMessage() + "\"}";, +        }, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +, +    @Override public String toString() {, +        try {, +            XContentBuilder builder = XContentFactory.jsonBuilder().prettyPrint();, +            builder.startObject();, +            toXContent(builder, EMPTY_PARAMS);, +            builder.endObject();, +            return builder.string();, +        } catch (IOException e) {, +            return "{ \"error\" : \"" + e.getMessage() + "\"}";, +        }, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +        } else if (type == Short.class) {, +            field(name, ((Short) value).shortValue());, +        } else if (type == Byte.class) {, +            field(name, ((Byte) value).byteValue());, +        } else if (type == Short.class) {, +            field(name, ((Short) value).shortValue());, +        } else if (type == Byte.class) {, +            field(name, ((Byte) value).byteValue());, +        } else if (type == Short.class) {, +            value(((Short) value).shortValue());, +        } else if (type == Byte.class) {, +            value(((Byte) value).byteValue());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +, +    @Override public String toString() {, +        try {, +            XContentBuilder builder = XContentFactory.jsonBuilder().prettyPrint();, +            builder.startObject();, +            toXContent(builder, EMPTY_PARAMS);, +            builder.endObject();, +            return builder.string();, +        } catch (IOException e) {, +            return "{ \"error\" : \"" + e.getMessage() + "\"}";, +        }, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +        } else if (type == Short.class) {, +            field(name, ((Short) value).shortValue());, +        } else if (type == Byte.class) {, +            field(name, ((Byte) value).byteValue());, +        } else if (type == Short.class) {, +            field(name, ((Short) value).shortValue());, +        } else if (type == Byte.class) {, +            field(name, ((Byte) value).byteValue());, +        } else if (type == Short.class) {, +            value(((Short) value).shortValue());, +        } else if (type == Byte.class) {, +            value(((Byte) value).byteValue());, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/search/sort/SimpleSortTests.java, +        assertThat(searchResponse.toString(), not(containsString("error")));, +, +        assertThat(searchResponse.toString(), not(containsString("error")));, +, +        assertThat(searchResponse.toString(), not(containsString("error")));, +, +        assertThat(searchResponse.toString(), not(containsString("error")));, +, +        assertThat(searchResponse.toString(), not(containsString("error")));, +, +        assertThat(searchResponse.toString(), not(containsString("error")));, +, +        assertThat(searchResponse.toString(), not(containsString("error")));, +, +        assertThat(searchResponse.toString(), not(containsString("error")));, +, +        assertThat(searchResponse.toString(), not(containsString("error")));, +, +        assertThat(searchResponse.toString(), not(containsString("error")));, +, +, +        assertThat(searchResponse.toString(), not(containsString("error")));]