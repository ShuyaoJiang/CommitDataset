[+++ b/src/main/java/org/elasticsearch/index/cache/bloom/simple/SimpleBloomCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/cache/bloom/simple/SimpleBloomCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/cache/bloom/simple/SimpleBloomCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/cache/filter/weighted/WeightedFilterCache.java, +                    if (previous == null && (reader instanceof SegmentReader)) {, +++ b/src/main/java/org/elasticsearch/index/cache/bloom/simple/SimpleBloomCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/cache/filter/weighted/WeightedFilterCache.java, +                    if (previous == null && (reader instanceof SegmentReader)) {, +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/cache/bloom/simple/SimpleBloomCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/cache/filter/weighted/WeightedFilterCache.java, +                    if (previous == null && (reader instanceof SegmentReader)) {, +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/percolator/PercolatorExecutor.java, +    private synchronized void addQuery(String name, Query query) {, +, +        try {, +        } finally {, +            // explicitly clear the reader, since we can only register on callback on SegmentReader, +        }, +++ b/src/main/java/org/elasticsearch/index/cache/bloom/simple/SimpleBloomCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/cache/field/data/support/AbstractConcurrentMapFieldDataCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/cache/filter/weighted/WeightedFilterCache.java, +                    if (previous == null && (reader instanceof SegmentReader)) {, +++ b/src/main/java/org/elasticsearch/index/cache/id/simple/SimpleIdCache.java, +                    if (reader instanceof SegmentReader) {, +                    }, +++ b/src/main/java/org/elasticsearch/index/percolator/PercolatorExecutor.java, +    private synchronized void addQuery(String name, Query query) {, +, +        try {, +        } finally {, +            // explicitly clear the reader, since we can only register on callback on SegmentReader, +        }, +++ b/src/test/java/org/elasticsearch/test/unit/index/percolator/PercolatorExecutorTests.java, +import org.elasticsearch.index.query.FilterBuilders;, +import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;, +                //.put("index.cache.filter.type", "none"), +, +        // add a range query (cached), +        // add a query, +        percolatorExecutor.addQuery("test1", constantScoreQuery(FilterBuilders.rangeFilter("field2").from("value").includeLower(true)));, +, +        percolate = percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1", source));, +        assertThat(percolate.matches(), hasSize(1));, +        assertThat(percolate.matches(), hasItem("test1"));]