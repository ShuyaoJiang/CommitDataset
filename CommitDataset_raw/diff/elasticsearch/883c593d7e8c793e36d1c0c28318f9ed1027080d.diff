[+++ b/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.cluster.ProcessedClusterStateUpdateTask;, +import java.util.concurrent.atomic.AtomicBoolean;, +    private final AtomicBoolean rerouteRequired = new AtomicBoolean();, +        clusterService.submitStateUpdateTask("shard-started (" + shardRouting + "), reason [" + reason + "]", Priority.HIGH, new ProcessedClusterStateUpdateTask() {, +                // we don't do reroute right away, we do it after publishing the fact that it was started, +                RoutingAllocation.Result routingResult = allocationService.applyStartedShards(currentState, shards, false);, +, +            @Override, +            public void clusterStateProcessed(ClusterState clusterState) {, +                rerouteRequired.set(true);, +                clusterService.submitStateUpdateTask("reroute post shard-started (" + shardRouting + "), reason [" + reason + "]", new ClusterStateUpdateTask() {, +                    @Override, +                    public ClusterState execute(ClusterState currentState) {, +                        if (rerouteRequired.compareAndSet(true, false)) {, +                            RoutingAllocation.Result routingResult = allocationService.reroute(currentState);, +                            if (!routingResult.changed()) {, +                                return currentState;, +                            }, +                            return newClusterStateBuilder().state(currentState).routingResult(routingResult).build();, +                        } else {, +                            return currentState;, +                        }, +                    }, +                });, +            }, +++ b/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.cluster.ProcessedClusterStateUpdateTask;, +import java.util.concurrent.atomic.AtomicBoolean;, +    private final AtomicBoolean rerouteRequired = new AtomicBoolean();, +        clusterService.submitStateUpdateTask("shard-started (" + shardRouting + "), reason [" + reason + "]", Priority.HIGH, new ProcessedClusterStateUpdateTask() {, +                // we don't do reroute right away, we do it after publishing the fact that it was started, +                RoutingAllocation.Result routingResult = allocationService.applyStartedShards(currentState, shards, false);, +, +            @Override, +            public void clusterStateProcessed(ClusterState clusterState) {, +                rerouteRequired.set(true);, +                clusterService.submitStateUpdateTask("reroute post shard-started (" + shardRouting + "), reason [" + reason + "]", new ClusterStateUpdateTask() {, +                    @Override, +                    public ClusterState execute(ClusterState currentState) {, +                        if (rerouteRequired.compareAndSet(true, false)) {, +                            RoutingAllocation.Result routingResult = allocationService.reroute(currentState);, +                            if (!routingResult.changed()) {, +                                return currentState;, +                            }, +                            return newClusterStateBuilder().state(currentState).routingResult(routingResult).build();, +                        } else {, +                            return currentState;, +                        }, +                    }, +                });, +            }, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +        return applyStartedShards(clusterState, startedShards, true);, +    }, +, +    public RoutingAllocation.Result applyStartedShards(ClusterState clusterState, List<? extends ShardRouting> startedShards, boolean withReroute) {, +        if (withReroute) {, +        }]