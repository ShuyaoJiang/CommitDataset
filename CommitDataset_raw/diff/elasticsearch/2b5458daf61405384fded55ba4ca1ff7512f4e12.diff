[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsImmutableBlobContainer.java, +import java.io.File;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.RandomAccessFile;, +                    // clean the file if it exists, +                    raf.setLength(0);, +                } catch (Exception e) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsImmutableBlobContainer.java, +import java.io.File;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.RandomAccessFile;, +                    // clean the file if it exists, +                    raf.setLength(0);, +                } catch (Exception e) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/Translog.java, +    void newTranslog(long id) throws TranslogException;, +        void seekForward(long length);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsImmutableBlobContainer.java, +import java.io.File;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.RandomAccessFile;, +                    // clean the file if it exists, +                    raf.setLength(0);, +                } catch (Exception e) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/Translog.java, +    void newTranslog(long id) throws TranslogException;, +        void seekForward(long length);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/fs/FsSnapshot.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.translog.fs;, +, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.index.translog.Translog;, +import org.elasticsearch.index.translog.TranslogException;, +import org.elasticsearch.index.translog.TranslogStreams;, +, +import java.io.DataInputStream;, +import java.io.FileInputStream;, +import java.io.FileNotFoundException;, +import java.io.IOException;, +, +/**, + * @author kimchy (shay.banon), + */, +public class FsSnapshot implements Translog.Snapshot {, +, +    private final ShardId shardId;, +, +    private final long id;, +, +    private final RafReference raf;, +, +    private final long length;, +, +    private final DataInputStream dis;, +, +    private Translog.Operation lastOperationRead = null;, +, +    private int position = 0;, +, +    public FsSnapshot(ShardId shardId, long id, RafReference raf, long length) throws FileNotFoundException {, +        this.shardId = shardId;, +        this.id = id;, +        this.raf = raf;, +        this.length = length;, +        this.dis = new DataInputStream(new FileInputStream(raf.file()));, +    }, +, +    @Override public long translogId() {, +        return this.id;, +    }, +, +    @Override public long position() {, +        return this.position;, +    }, +, +    @Override public long length() {]