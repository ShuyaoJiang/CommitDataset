[+++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    /**, +     * fail engine due to some error. the engine will also be closed., +     * The underlying store is marked corrupted iff failure is caused by index corruption, +     */, +    public void failEngine(String reason, @Nullable Throwable failure) {, +                    failedEngine = (failure != null) ? failure : new IllegalStateException(reason);, +                    // we first mark the store as corrupted before we notify any listeners, +                    // this must happen first otherwise we might try to reallocate so quickly, +                    // on the same node that we don't see the corrupted marker file when, +                    // the shard is initializing, +                    if (Lucene.isCorruptionException(failure)) {, +                        try {, +                            store.markStoreCorrupted(new IOException("failed engine (reason: [" + reason + "])", ExceptionsHelper.unwrapCorruption(failure)));, +                        } catch (IOException e) {, +                            logger.warn("Couldn't mark store corrupted", e);, +                        }, +                    }, +            failEngine("corrupt file (source: [" + source + "])", t);, +            failEngine("out of memory (source: [" + source + "])", t);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    /**, +     * fail engine due to some error. the engine will also be closed., +     * The underlying store is marked corrupted iff failure is caused by index corruption, +     */, +    public void failEngine(String reason, @Nullable Throwable failure) {, +                    failedEngine = (failure != null) ? failure : new IllegalStateException(reason);, +                    // we first mark the store as corrupted before we notify any listeners, +                    // this must happen first otherwise we might try to reallocate so quickly, +                    // on the same node that we don't see the corrupted marker file when, +                    // the shard is initializing, +                    if (Lucene.isCorruptionException(failure)) {, +                        try {, +                            store.markStoreCorrupted(new IOException("failed engine (reason: [" + reason + "])", ExceptionsHelper.unwrapCorruption(failure)));, +                        } catch (IOException e) {, +                            logger.warn("Couldn't mark store corrupted", e);, +                        }, +                    }, +            failEngine("corrupt file (source: [" + source + "])", t);, +            failEngine("out of memory (source: [" + source + "])", t);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    /**, +     * Fails the shard and marks the shard store as corrupted if, +     * <code>e</code> is caused by index corruption, +     */, +    public void failShard(String reason, @Nullable Throwable e) {, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    /**, +     * fail engine due to some error. the engine will also be closed., +     * The underlying store is marked corrupted iff failure is caused by index corruption, +     */, +    public void failEngine(String reason, @Nullable Throwable failure) {, +                    failedEngine = (failure != null) ? failure : new IllegalStateException(reason);, +                    // we first mark the store as corrupted before we notify any listeners, +                    // this must happen first otherwise we might try to reallocate so quickly, +                    // on the same node that we don't see the corrupted marker file when, +                    // the shard is initializing, +                    if (Lucene.isCorruptionException(failure)) {, +                        try {, +                            store.markStoreCorrupted(new IOException("failed engine (reason: [" + reason + "])", ExceptionsHelper.unwrapCorruption(failure)));, +                        } catch (IOException e) {, +                            logger.warn("Couldn't mark store corrupted", e);, +                        }, +                    }, +            failEngine("corrupt file (source: [" + source + "])", t);, +            failEngine("out of memory (source: [" + source + "])", t);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    /**, +     * Fails the shard and marks the shard store as corrupted if, +     * <code>e</code> is caused by index corruption, +     */, +    public void failShard(String reason, @Nullable Throwable e) {, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/SharedFSRecoverySourceHandler.java, +                // pass the failure as null, as we want to ensure the store is not marked as corrupted, +                shard.failShard("primary relocation failed on shared filesystem caused by: [" + t.getMessage() + "]", null);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +    /**, +     * fail engine due to some error. the engine will also be closed., +     * The underlying store is marked corrupted iff failure is caused by index corruption, +     */, +    public void failEngine(String reason, @Nullable Throwable failure) {, +                    failedEngine = (failure != null) ? failure : new IllegalStateException(reason);, +                    // we first mark the store as corrupted before we notify any listeners, +                    // this must happen first otherwise we might try to reallocate so quickly, +                    // on the same node that we don't see the corrupted marker file when, +                    // the shard is initializing, +                    if (Lucene.isCorruptionException(failure)) {, +                        try {, +                            store.markStoreCorrupted(new IOException("failed engine (reason: [" + reason + "])", ExceptionsHelper.unwrapCorruption(failure)));, +                        } catch (IOException e) {, +                            logger.warn("Couldn't mark store corrupted", e);, +                        }, +                    }, +            failEngine("corrupt file (source: [" + source + "])", t);, +            failEngine("out of memory (source: [" + source + "])", t);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    /**, +     * Fails the shard and marks the shard store as corrupted if, +     * <code>e</code> is caused by index corruption, +     */]