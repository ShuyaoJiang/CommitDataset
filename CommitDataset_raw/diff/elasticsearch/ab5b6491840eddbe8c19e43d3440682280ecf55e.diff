[+++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/Data.java, +        Object property = innerMap.get(leafKey);, +        if (property == null) {, +            return null;, +        }, +        if (clazz.isInstance(property)) {, +            return clazz.cast(property);, +        }, +        throw new IllegalArgumentException("field [" + path + "] of type [" + property.getClass().getName() + "] cannot be cast to [" + clazz.getName() + "]");, +    }, +, +    /**, +     * Checks whether the document contains a value for the provided path, +     * @param path The path within the document in dot-notation, +     * @return true if the document contains a value for the property, false otherwise, +     */, +    public boolean hasPropertyValue(String path) {, +        if (path == null || path.length() == 0) {, +            return false;, +        }, +        String[] pathElements = Strings.splitStringToArray(path, '.');, +        assert pathElements.length > 0;, +, +        Map<String, Object> innerMap = document;, +        for (int i = 0; i < pathElements.length - 1; i++) {, +            Object obj = innerMap.get(pathElements[i]);, +            if (obj instanceof Map) {, +                @SuppressWarnings("unchecked"), +                Map<String, Object> stringObjectMap = (Map<String, Object>) obj;, +                innerMap = stringObjectMap;, +            } else {, +                return false;, +            }, +        }, +, +        String leafKey = pathElements[pathElements.length - 1];, +        return innerMap.containsKey(leafKey);, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/Data.java, +        Object property = innerMap.get(leafKey);, +        if (property == null) {, +            return null;, +        }, +        if (clazz.isInstance(property)) {, +            return clazz.cast(property);, +        }, +        throw new IllegalArgumentException("field [" + path + "] of type [" + property.getClass().getName() + "] cannot be cast to [" + clazz.getName() + "]");, +    }, +, +    /**, +     * Checks whether the document contains a value for the provided path, +     * @param path The path within the document in dot-notation, +     * @return true if the document contains a value for the property, false otherwise, +     */, +    public boolean hasPropertyValue(String path) {, +        if (path == null || path.length() == 0) {, +            return false;, +        }, +        String[] pathElements = Strings.splitStringToArray(path, '.');, +        assert pathElements.length > 0;, +, +        Map<String, Object> innerMap = document;, +        for (int i = 0; i < pathElements.length - 1; i++) {, +            Object obj = innerMap.get(pathElements[i]);, +            if (obj instanceof Map) {, +                @SuppressWarnings("unchecked"), +                Map<String, Object> stringObjectMap = (Map<String, Object>) obj;, +                innerMap = stringObjectMap;, +            } else {, +                return false;, +            }, +        }, +, +        String leafKey = pathElements[pathElements.length - 1];, +        return innerMap.containsKey(leafKey);, +++ b/plugins/ingest/src/test/java/org/elasticsearch/ingest/DataTests.java, +        document.put("foo_null", null);, +    public void testGetPropertyValueNullValue() {, +        assertThat(data.getPropertyValue("foo_null", Object.class), nullValue());, +    }, +, +    public void testHasPropertyValueNullValue() {, +        assertTrue(data.hasPropertyValue("foo_null"));, +    }, +, +    public void testSetPropertyValueNullValue() {, +        data.setPropertyValue("new_field", null);, +        assertThat(data.getDocument().containsKey("new_field"), equalTo(true));, +        assertThat(data.getDocument().get("new_field"), nullValue());, +    }, +]