[+++ b/TESTING.asciidoc, +and port) or fire a test cluster (default). It's possible to provide a, +comma separated list of addresses to send requests in a round-robin fashion., +++ b/TESTING.asciidoc, +and port) or fire a test cluster (default). It's possible to provide a, +comma separated list of addresses to send requests in a round-robin fashion., +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +    private int getMinNumNodes() {, +        ClusterScope annotation = getAnnotation(this.getClass());, +        return annotation == null ? TestCluster.DEFAULT_MIN_NUM_NODES : annotation.minNumNodes();, +    }, +, +    private int getMaxNumNodes() {, +        ClusterScope annotation = getAnnotation(this.getClass());, +        return annotation == null ? TestCluster.DEFAULT_MAX_NUM_NODES : annotation.maxNumNodes();, +    }, +, +        int minNumNodes, maxNumNodes;, +        if (numNodes >= 0) {, +            minNumNodes = maxNumNodes = numNodes;, +        } else {, +            minNumNodes = getMinNumNodes();, +            maxNumNodes = getMaxNumNodes();, +        }, +, +        return new TestCluster(currentClusterSeed, minNumNodes, maxNumNodes, clusterName(scope.name(), ElasticsearchTestCase.CHILD_VM_ID, currentClusterSeed), nodeSettingsSource);, +         * a random number of nodes is used, where the minimum and maximum number of nodes, +         * are either the specified ones or the default ones if not specified., +         * Returns the minimum number of nodes in the cluster. Default is {@link TestCluster#DEFAULT_MIN_NUM_NODES}., +         * Ignored when {@link ClusterScope#numNodes()} is set., +         */, +        int minNumNodes() default TestCluster.DEFAULT_MIN_NUM_NODES;, +, +        /**, +         * Returns the maximum number of nodes in the cluster.  Default is {@link TestCluster#DEFAULT_MAX_NUM_NODES}., +         * Ignored when {@link ClusterScope#numNodes()} is set., +         */, +        int maxNumNodes() default TestCluster.DEFAULT_MAX_NUM_NODES;, +, +        /**, +++ b/TESTING.asciidoc, +and port) or fire a test cluster (default). It's possible to provide a, +comma separated list of addresses to send requests in a round-robin fashion., +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +    private int getMinNumNodes() {, +        ClusterScope annotation = getAnnotation(this.getClass());, +        return annotation == null ? TestCluster.DEFAULT_MIN_NUM_NODES : annotation.minNumNodes();, +    }, +, +    private int getMaxNumNodes() {, +        ClusterScope annotation = getAnnotation(this.getClass());, +        return annotation == null ? TestCluster.DEFAULT_MAX_NUM_NODES : annotation.maxNumNodes();, +    }, +, +        int minNumNodes, maxNumNodes;, +        if (numNodes >= 0) {, +            minNumNodes = maxNumNodes = numNodes;, +        } else {, +            minNumNodes = getMinNumNodes();, +            maxNumNodes = getMaxNumNodes();, +        }, +, +        return new TestCluster(currentClusterSeed, minNumNodes, maxNumNodes, clusterName(scope.name(), ElasticsearchTestCase.CHILD_VM_ID, currentClusterSeed), nodeSettingsSource);, +         * a random number of nodes is used, where the minimum and maximum number of nodes, +         * are either the specified ones or the default ones if not specified., +         * Returns the minimum number of nodes in the cluster. Default is {@link TestCluster#DEFAULT_MIN_NUM_NODES}., +         * Ignored when {@link ClusterScope#numNodes()} is set., +         */, +        int minNumNodes() default TestCluster.DEFAULT_MIN_NUM_NODES;, +, +        /**, +         * Returns the maximum number of nodes in the cluster.  Default is {@link TestCluster#DEFAULT_MAX_NUM_NODES}., +         * Ignored when {@link ClusterScope#numNodes()} is set., +         */, +        int maxNumNodes() default TestCluster.DEFAULT_MAX_NUM_NODES;, +, +        /**, +++ b/src/test/java/org/elasticsearch/test/TestCluster.java, +    static final int DEFAULT_MIN_NUM_NODES = 2;, +, +    static final int DEFAULT_MAX_NUM_NODES = 6;, +, +    public TestCluster(long clusterSeed, String clusterName) {, +        this(clusterSeed, DEFAULT_MIN_NUM_NODES, DEFAULT_MAX_NUM_NODES, clusterName, NodeSettingsSource.EMPTY);, +    public TestCluster(long clusterSeed, int minNumNodes, int maxNumNodes, String clusterName) {, +        this(clusterSeed, minNumNodes, maxNumNodes, clusterName, NodeSettingsSource.EMPTY);, +    public TestCluster(long clusterSeed, int minNumNodes, int maxNumNodes, String clusterName, NodeSettingsSource nodeSettingsSource) {, +, +        if (minNumNodes < 0 || maxNumNodes < 0) {, +            throw new IllegalArgumentException("minimum and maximum number of nodes must be >= 0");, +        }, +, +        if (maxNumNodes < minNumNodes) {, +            throw new IllegalArgumentException("maximum number of nodes must be >= minimum number of nodes");, +        }, +, +, +        int numSharedNodes;, +        if (minNumNodes == maxNumNodes) {, +            numSharedNodes = minNumNodes;]