[+++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/UpdateJobAction.java, +        private boolean waitForAck = true;, +        public boolean isWaitForAck() {, +            return waitForAck;, +        }, +, +        public void setWaitForAck(boolean waitForAck) {, +            this.waitForAck = waitForAck;, +        }, +, +            if (in.getVersion().onOrAfter(Version.V_6_3_0)) {, +                waitForAck = in.readBoolean();, +            } else {, +                waitForAck = true;, +            }, +            if (out.getVersion().onOrAfter(Version.V_6_3_0)) {, +                out.writeBoolean(waitForAck);, +            }, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/UpdateJobAction.java, +        private boolean waitForAck = true;, +        public boolean isWaitForAck() {, +            return waitForAck;, +        }, +, +        public void setWaitForAck(boolean waitForAck) {, +            this.waitForAck = waitForAck;, +        }, +, +            if (in.getVersion().onOrAfter(Version.V_6_3_0)) {, +                waitForAck = in.readBoolean();, +            } else {, +                waitForAck = true;, +            }, +            if (out.getVersion().onOrAfter(Version.V_6_3_0)) {, +                out.writeBoolean(waitForAck);, +            }, +++ b/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/UpdateJobActionRequestTests.java, +        UpdateJobAction.Request request = new UpdateJobAction.Request(jobId, jobUpdate.build());, +        request.setWaitForAck(randomBoolean());, +        return request;, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/action/UpdateJobAction.java, +        private boolean waitForAck = true;, +        public boolean isWaitForAck() {, +            return waitForAck;, +        }, +, +        public void setWaitForAck(boolean waitForAck) {, +            this.waitForAck = waitForAck;, +        }, +, +            if (in.getVersion().onOrAfter(Version.V_6_3_0)) {, +                waitForAck = in.readBoolean();, +            } else {, +                waitForAck = true;, +            }, +            if (out.getVersion().onOrAfter(Version.V_6_3_0)) {, +                out.writeBoolean(waitForAck);, +            }, +++ b/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/UpdateJobActionRequestTests.java, +        UpdateJobAction.Request request = new UpdateJobAction.Request(jobId, jobUpdate.build());, +        request.setWaitForAck(randomBoolean());, +        return request;, +++ b/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +import org.elasticsearch.cluster.ClusterChangedEvent;, +import org.elasticsearch.cluster.ClusterStateUpdateTask;, +, +        Job job = getJobOrThrowIfUnknown(request.getJobId());, +        final Job updatedJob = request.getJobUpdate().mergeWithJob(job, maxModelMemoryLimit);, +        if (updatedJob.equals(job)) {, +            // No change will results in a clusterstate update no-op so don't, +            // submit the request., +            actionListener.onResponse(new PutJobAction.Response(updatedJob));, +            return;, +        }, +, +        if (request.isWaitForAck()) {, +            // Use the ack cluster state update, +                            afterClusterStateUpdate(newState, request);, +                        }, +                    });, +        } else {, +            clusterService.submitStateUpdateTask("update-job-" + request.getJobId(), new ClusterStateUpdateTask() {, +, +                @Override, +                public ClusterState execute(ClusterState currentState) throws Exception {, +                    return updateClusterState(updatedJob, true, currentState);, +                }, +, +                @Override, +                public void onFailure(String source, Exception e) {, +                    actionListener.onFailure(e);, +                }, +, +                @Override, +                public void clusterStatePublished(ClusterChangedEvent clusterChangedEvent) {, +                    afterClusterStateUpdate(clusterChangedEvent.state(), request);, +                    actionListener.onResponse(new PutJobAction.Response(updatedJob));, +, +                }, +            });]