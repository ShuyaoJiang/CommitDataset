[+++ b/src/main/java/org/elasticsearch/index/search/child/HasChildFilter.java, +                return acceptDocs.get(doc) && parents.contains(typeCache.idByDoc(doc));, +++ b/src/main/java/org/elasticsearch/index/search/child/HasChildFilter.java, +                return acceptDocs.get(doc) && parents.contains(typeCache.idByDoc(doc));, +++ b/src/main/java/org/elasticsearch/index/search/child/HasParentFilter.java, +                return acceptDocs.get(doc) && parents.contains(idReaderTypeCache.parentIdByDoc(doc));, +                if (!acceptDocs.get(doc) || doc == -1) {, +++ b/src/main/java/org/elasticsearch/index/search/child/HasChildFilter.java, +                return acceptDocs.get(doc) && parents.contains(typeCache.idByDoc(doc));, +++ b/src/main/java/org/elasticsearch/index/search/child/HasParentFilter.java, +                return acceptDocs.get(doc) && parents.contains(idReaderTypeCache.parentIdByDoc(doc));, +                if (!acceptDocs.get(doc) || doc == -1) {, +++ b/src/main/java/org/elasticsearch/index/search/child/TopChildrenQuery.java, +                if (parentDocId != -1 && indexReader.getLiveDocs().get(parentDocId)) {, +++ b/src/main/java/org/elasticsearch/index/search/child/HasChildFilter.java, +                return acceptDocs.get(doc) && parents.contains(typeCache.idByDoc(doc));, +++ b/src/main/java/org/elasticsearch/index/search/child/HasParentFilter.java, +                return acceptDocs.get(doc) && parents.contains(idReaderTypeCache.parentIdByDoc(doc));, +                if (!acceptDocs.get(doc) || doc == -1) {, +++ b/src/main/java/org/elasticsearch/index/search/child/TopChildrenQuery.java, +                if (parentDocId != -1 && indexReader.getLiveDocs().get(parentDocId)) {, +++ b/src/main/java/org/elasticsearch/index/search/nested/BlockJoinQuery.java, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.util.Bits;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Locale;, +    public Weight createWeight(IndexSearcher searcher) throws IOException {, +        public float getValueForNormalization() throws IOException {, +            return childWeight.getValueForNormalization() * joinQuery.getBoost() * joinQuery.getBoost();, +        public void normalize(float norm, float topLevelBoost) {, +            childWeight.normalize(norm, topLevelBoost * joinQuery.getBoost());, +        public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Bits acceptDocs) throws IOException {, +            final Scorer childScorer = childWeight.scorer(context, true, false, null);, +            DocIdSet parents = parentsFilter.getDocIdSet(context, null);, +                childCollector.setNextReader(context);, +            return new BlockJoinScorer(this, childScorer, (FixedBitSet) parents, firstChildDoc, scoreMode, childCollector, acceptDocs);, +        public Explanation explain(AtomicReaderContext context, int doc) throws IOException {, +            BlockJoinScorer scorer = (BlockJoinScorer) scorer(context, true, false, context.reader().getLiveDocs());, +            if (scorer != null) {, +                if (scorer.advance(doc) == doc) {, +                    return scorer.explain(context.docBase);, +                }, +            }, +            return new ComplexExplanation(false, 0.0f, "Not a match");, +        private final Bits acceptDocs; // LUCENE 4 UPGRADE: Why not make the parentBits already be filtered by acceptDocs?, +        private int prevParentDoc;, +        private float parentFreq;, +        public BlockJoinScorer(Weight weight, Scorer childScorer, FixedBitSet parentBits, int firstChildDoc, ScoreMode scoreMode, Collector childCollector, Bits acceptDocs) {, +            this.acceptDocs = acceptDocs;, +        public Collection<ChildScorer> getChildren() {, +            return Collections.singleton(new ChildScorer(childScorer, "BLOCK_JOIN"));, +            // Loop until we hit a parentDoc that's accepted, +            while (true) {, +                // Gather all children sharing the same parent as, +                // nextChildDoc, +, +, +                //System.out.println("  nextChildDoc=" + nextChildDoc);, +                if (acceptDocs != null && !acceptDocs.get(parentDoc)) {, +                    // Parent doc not accepted; skip child docs until, +                    // we hit a new parent doc:, +                    do {, +                        nextChildDoc = childScorer.nextDoc();, +                    } while (nextChildDoc < parentDoc);, +                    continue;, +                }, +, +                float totalFreq = 0;, +                float maxFreq = 0;, +, +                    if (scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {, +                        pendingChildScores = ArrayUtil.grow(pendingChildScores);, +                        final float childFreq = childScorer.freq();, +                        maxFreq = Math.max(childFreq, maxFreq);, +                        totalFreq += childFreq;, +                        parentFreq = totalFreq / childDocUpto;, +                        parentFreq = maxFreq;, +                        parentFreq = totalFreq;, +        }, +        public float freq() throws IOException {, +            return parentFreq;, +        }, +, +        @Override, +            prevParentDoc = parentBits.prevSetBit(parentTarget - 1);, +, +        public Explanation explain(int docBase) throws IOException {, +            int start = docBase + prevParentDoc + 1; // +1 b/c prevParentDoc is previous parent doc, +            int end = docBase + parentDoc - 1; // -1 b/c parentDoc is parent doc, +            return new ComplexExplanation(, +                    true, score(), String.format(Locale.ROOT, "Score based on child doc range from %d to %d", start, end), +            );, +        }, +, +    public Query clone() {, +        return new BlockJoinQuery(origChildQuery.clone(),, +++ b/src/main/java/org/elasticsearch/index/search/child/HasChildFilter.java, +                return acceptDocs.get(doc) && parents.contains(typeCache.idByDoc(doc));, +++ b/src/main/java/org/elasticsearch/index/search/child/HasParentFilter.java]