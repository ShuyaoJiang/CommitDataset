[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregationBuilder.java, +        Boolean otherBucket = null;, +        if (otherBucket == null && otherBucketKey != null) {, +            // automatically enable the other bucket if a key is set, as per the doc, +            otherBucket = true;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregationBuilder.java, +        Boolean otherBucket = null;, +        if (otherBucket == null && otherBucketKey != null) {, +            // automatically enable the other bucket if a key is set, as per the doc, +            otherBucket = true;, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/FiltersTests.java, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.index.query.QueryParseContext;, +import org.elasticsearch.indices.query.IndicesQueriesRegistry;, +import org.elasticsearch.search.slice.SliceBuilder;, +, +import java.io.IOException;, +, +    public void testOtherBucket() throws IOException {, +        XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()));, +        builder.startObject();, +        builder.startArray("filters").endArray();, +        builder.endObject();, +        XContentParser parser = XContentHelper.createParser(shuffleXContent(builder).bytes());, +        parser.nextToken();, +        QueryParseContext context = new QueryParseContext(new IndicesQueriesRegistry(), parser,, +            ParseFieldMatcher.STRICT);, +        FiltersAggregationBuilder filters = FiltersAggregationBuilder.parse("agg_name", context);, +        // The other bucket is disabled by default, +        assertFalse(filters.otherBucket());, +, +        builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()));, +        builder.startObject();, +        builder.startArray("filters").endArray();, +        builder.field("other_bucket_key", "some_key");, +        builder.endObject();, +        parser = XContentHelper.createParser(shuffleXContent(builder).bytes());, +        parser.nextToken();, +        context = new QueryParseContext(new IndicesQueriesRegistry(), parser, ParseFieldMatcher.STRICT);, +        filters = FiltersAggregationBuilder.parse("agg_name", context);, +        // but setting a key enables it automatically, +        assertTrue(filters.otherBucket());, +, +        builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()));, +        builder.startObject();, +        builder.startArray("filters").endArray();, +        builder.field("other_bucket", false);, +        builder.field("other_bucket_key", "some_key");, +        builder.endObject();, +        parser = XContentHelper.createParser(shuffleXContent(builder).bytes());, +        parser.nextToken();, +        context = new QueryParseContext(new IndicesQueriesRegistry(), parser, ParseFieldMatcher.STRICT);, +        filters = FiltersAggregationBuilder.parse("agg_name", context);, +        // unless the other bucket is explicitly disabled, +        assertFalse(filters.otherBucket());, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregationBuilder.java, +        Boolean otherBucket = null;, +        if (otherBucket == null && otherBucketKey != null) {, +            // automatically enable the other bucket if a key is set, as per the doc, +            otherBucket = true;, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/FiltersTests.java, +import org.elasticsearch.common.ParseFieldMatcher;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.index.query.QueryParseContext;, +import org.elasticsearch.indices.query.IndicesQueriesRegistry;, +import org.elasticsearch.search.slice.SliceBuilder;, +, +import java.io.IOException;, +, +    public void testOtherBucket() throws IOException {, +        XContentBuilder builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()));, +        builder.startObject();, +        builder.startArray("filters").endArray();, +        builder.endObject();, +        XContentParser parser = XContentHelper.createParser(shuffleXContent(builder).bytes());, +        parser.nextToken();, +        QueryParseContext context = new QueryParseContext(new IndicesQueriesRegistry(), parser,, +            ParseFieldMatcher.STRICT);, +        FiltersAggregationBuilder filters = FiltersAggregationBuilder.parse("agg_name", context);, +        // The other bucket is disabled by default, +        assertFalse(filters.otherBucket());, +, +        builder = XContentFactory.contentBuilder(randomFrom(XContentType.values()));, +        builder.startObject();, +        builder.startArray("filters").endArray();, +        builder.field("other_bucket_key", "some_key");, +        builder.endObject();, +        parser = XContentHelper.createParser(shuffleXContent(builder).bytes());, +        parser.nextToken();, +        context = new QueryParseContext(new IndicesQueriesRegistry(), parser, ParseFieldMatcher.STRICT);]