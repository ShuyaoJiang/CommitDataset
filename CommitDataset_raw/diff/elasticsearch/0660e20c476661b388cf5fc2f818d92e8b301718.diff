[+++ b/src/main/java/org/apache/lucene/search/DeletionAwareConstantScoreQuery.java, +// LUCENE 4 UPGRADE: we probably don't need this anymore, because of acceptDocs, +++ b/src/main/java/org/apache/lucene/search/DeletionAwareConstantScoreQuery.java, +// LUCENE 4 UPGRADE: we probably don't need this anymore, because of acceptDocs, +++ b/src/main/java/org/apache/lucene/search/XTermsFilter.java, +import org.apache.lucene.index.*;, +// LUCENE 4 UPGRADE: Make sure to sync this against latest 4.1, +// LUCENE 4.1: once its out, we can use TermsFilter from it, +++ b/src/main/java/org/apache/lucene/search/DeletionAwareConstantScoreQuery.java, +// LUCENE 4 UPGRADE: we probably don't need this anymore, because of acceptDocs, +++ b/src/main/java/org/apache/lucene/search/XTermsFilter.java, +import org.apache.lucene.index.*;, +// LUCENE 4 UPGRADE: Make sure to sync this against latest 4.1, +// LUCENE 4.1: once its out, we can use TermsFilter from it, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +        UidFilter filter = new UidFilter(context.queryTypes(), ImmutableList.of(value));, +        return new UidFilter(context.queryTypes(), ImmutableList.of(value));, +++ b/src/main/java/org/apache/lucene/search/DeletionAwareConstantScoreQuery.java, +// LUCENE 4 UPGRADE: we probably don't need this anymore, because of acceptDocs, +++ b/src/main/java/org/apache/lucene/search/XTermsFilter.java, +import org.apache.lucene.index.*;, +// LUCENE 4 UPGRADE: Make sure to sync this against latest 4.1, +// LUCENE 4.1: once its out, we can use TermsFilter from it, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +        UidFilter filter = new UidFilter(context.queryTypes(), ImmutableList.of(value));, +        return new UidFilter(context.queryTypes(), ImmutableList.of(value));, +++ b/src/main/java/org/elasticsearch/index/search/UidFilter.java, +import org.apache.lucene.index.*;, +// LUCENE 4 UPGRADE: we can potentially use TermsFilter here, specifically, now when we don't do bloom filter, batching, and with optimization on single field terms, +]