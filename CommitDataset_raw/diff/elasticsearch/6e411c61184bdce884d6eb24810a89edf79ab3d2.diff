[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final String ALLOCATION_ENABLED_ATTR = "xpack.ml.allocation_enabled";, +    public static final Setting<Boolean> ALLOCATION_ENABLED = Setting.boolSetting("node.attr." + ALLOCATION_ENABLED_ATTR,, +            XPackSettings.MACHINE_LEARNING_ENABLED, Setting.Property.NodeScope);, +, +                        ALLOCATION_ENABLED,, +    public Settings additionalSettings() {, +        Boolean allocationEnabled = settings.getAsBoolean(ALLOCATION_ENABLED.getKey(), null);, +        if (allocationEnabled != null) {, +            if (enabled == false && allocationEnabled) {, +                // if the ml plugin has been disabled the ml allocation enabled node attribute shouldn't be set,, +                // otherwise other nodes will allocate jobs to this node and that will fail, because ml hasn't been loaded., +                throw new IllegalArgumentException("Can't specify [" + ALLOCATION_ENABLED.getKey() + "] to true when [" +, +                        XPackSettings.MACHINE_LEARNING_ENABLED.getKey() + "] has been set to false");, +            }, +            return super.additionalSettings();, +        } else {, +            // Make sure that we explicitly set allocation enabled node attribute if it has been specified in the node, +            // settings. So we can always rely on it during assigning job tasks to nodes., +            return Settings.builder(), +                    .put(ALLOCATION_ENABLED.getKey(), ALLOCATION_ENABLED.get(settings)), +                    .build();, +        }, +    }, +, +    @Override, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final String ALLOCATION_ENABLED_ATTR = "xpack.ml.allocation_enabled";, +    public static final Setting<Boolean> ALLOCATION_ENABLED = Setting.boolSetting("node.attr." + ALLOCATION_ENABLED_ATTR,, +            XPackSettings.MACHINE_LEARNING_ENABLED, Setting.Property.NodeScope);, +, +                        ALLOCATION_ENABLED,, +    public Settings additionalSettings() {, +        Boolean allocationEnabled = settings.getAsBoolean(ALLOCATION_ENABLED.getKey(), null);, +        if (allocationEnabled != null) {, +            if (enabled == false && allocationEnabled) {, +                // if the ml plugin has been disabled the ml allocation enabled node attribute shouldn't be set,, +                // otherwise other nodes will allocate jobs to this node and that will fail, because ml hasn't been loaded., +                throw new IllegalArgumentException("Can't specify [" + ALLOCATION_ENABLED.getKey() + "] to true when [" +, +                        XPackSettings.MACHINE_LEARNING_ENABLED.getKey() + "] has been set to false");, +            }, +            return super.additionalSettings();, +        } else {, +            // Make sure that we explicitly set allocation enabled node attribute if it has been specified in the node, +            // settings. So we can always rely on it during assigning job tasks to nodes., +            return Settings.builder(), +                    .put(ALLOCATION_ENABLED.getKey(), ALLOCATION_ENABLED.get(settings)), +                    .build();, +        }, +    }, +, +    @Override, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.xpack.ml.MachineLearning;, +import java.util.Map;, +        public DiscoveryNode executorNode(Request request, ClusterState clusterState) {, +            return selectLeastLoadedNode(clusterState, node -> {, +                Map<String, String> nodeAttributes = node.getAttributes();, +                String allocationEnabled = nodeAttributes.get(MachineLearning.ALLOCATION_ENABLED_ATTR);, +                return "true".equals(allocationEnabled);, +            });, +        }, +, +        @Override, +        if (task != null && jobState == JobState.OPENED) {, +            if (task.getExecutorNode() == null) {, +                // We can skip the job state check below, because the task got unassigned after we went into, +                // opened state on a node that disappeared and we didn't have the opportunity to set the status to failed, +                return;, +            } else if (nodes.nodeExists(task.getExecutorNode()) == false) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +    public static final String ALLOCATION_ENABLED_ATTR = "xpack.ml.allocation_enabled";, +    public static final Setting<Boolean> ALLOCATION_ENABLED = Setting.boolSetting("node.attr." + ALLOCATION_ENABLED_ATTR,, +            XPackSettings.MACHINE_LEARNING_ENABLED, Setting.Property.NodeScope);, +, +                        ALLOCATION_ENABLED,, +    public Settings additionalSettings() {, +        Boolean allocationEnabled = settings.getAsBoolean(ALLOCATION_ENABLED.getKey(), null);, +        if (allocationEnabled != null) {, +            if (enabled == false && allocationEnabled) {, +                // if the ml plugin has been disabled the ml allocation enabled node attribute shouldn't be set,, +                // otherwise other nodes will allocate jobs to this node and that will fail, because ml hasn't been loaded., +                throw new IllegalArgumentException("Can't specify [" + ALLOCATION_ENABLED.getKey() + "] to true when [" +, +                        XPackSettings.MACHINE_LEARNING_ENABLED.getKey() + "] has been set to false");, +            }, +            return super.additionalSettings();, +        } else {, +            // Make sure that we explicitly set allocation enabled node attribute if it has been specified in the node, +            // settings. So we can always rely on it during assigning job tasks to nodes., +            return Settings.builder(), +                    .put(ALLOCATION_ENABLED.getKey(), ALLOCATION_ENABLED.get(settings)), +                    .build();, +        }, +    }, +, +    @Override, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.xpack.ml.MachineLearning;]