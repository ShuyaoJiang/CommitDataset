[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                replicationPhase = new ReplicationPhase(primaryResponse.v2(), primaryResponse.v1(), shardId, channel, indexShardReference);, +                                TransportChannel channel, Releasable indexShardReference) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                replicationPhase = new ReplicationPhase(primaryResponse.v2(), primaryResponse.v1(), shardId, channel, indexShardReference);, +                                TransportChannel channel, Releasable indexShardReference) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.transport.NodeDisconnectedException;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, failure);, +        sendShardFailed(observer, shardRoutingEntry, listener);, +    private void sendShardFailed(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +            waitForNewMasterAndRetry(observer, shardRoutingEntry, listener);, +                SHARD_FAILED_ACTION_NAME, shardRoutingEntry, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +                        if (isMasterChannelException(exp.getCause())) {, +                            waitForNewMasterAndRetry(observer, shardRoutingEntry, listener);, +    private static Set<Class<?>> MASTER_CHANNEL_EXCEPTIONS = new HashSet<>(Arrays.asList(NotMasterException.class, NodeDisconnectedException.class));, +    private static boolean isMasterChannelException(Throwable cause) {, +        return MASTER_CHANNEL_EXCEPTIONS.contains(cause.getClass());, +    protected void waitForNewMasterAndRetry(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +                sendShardFailed(observer, shardRoutingEntry, listener);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                replicationPhase = new ReplicationPhase(primaryResponse.v2(), primaryResponse.v1(), shardId, channel, indexShardReference);, +                                TransportChannel channel, Releasable indexShardReference) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.transport.NodeDisconnectedException;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, failure);, +        sendShardFailed(observer, shardRoutingEntry, listener);, +    private void sendShardFailed(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +            waitForNewMasterAndRetry(observer, shardRoutingEntry, listener);, +                SHARD_FAILED_ACTION_NAME, shardRoutingEntry, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +                        if (isMasterChannelException(exp.getCause())) {, +                            waitForNewMasterAndRetry(observer, shardRoutingEntry, listener);, +    private static Set<Class<?>> MASTER_CHANNEL_EXCEPTIONS = new HashSet<>(Arrays.asList(NotMasterException.class, NodeDisconnectedException.class));, +    private static boolean isMasterChannelException(Throwable cause) {, +        return MASTER_CHANNEL_EXCEPTIONS.contains(cause.getClass());, +    protected void waitForNewMasterAndRetry(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +                sendShardFailed(observer, shardRoutingEntry, listener);, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +                        request.shardId(), createTransportChannel(listener), reference);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                replicationPhase = new ReplicationPhase(primaryResponse.v2(), primaryResponse.v1(), shardId, channel, indexShardReference);, +                                TransportChannel channel, Releasable indexShardReference) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.transport.NodeDisconnectedException;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, failure);, +        sendShardFailed(observer, shardRoutingEntry, listener);, +    private void sendShardFailed(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +            waitForNewMasterAndRetry(observer, shardRoutingEntry, listener);, +                SHARD_FAILED_ACTION_NAME, shardRoutingEntry, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +                        if (isMasterChannelException(exp.getCause())) {, +                            waitForNewMasterAndRetry(observer, shardRoutingEntry, listener);, +    private static Set<Class<?>> MASTER_CHANNEL_EXCEPTIONS = new HashSet<>(Arrays.asList(NotMasterException.class, NodeDisconnectedException.class));, +    private static boolean isMasterChannelException(Throwable cause) {, +        return MASTER_CHANNEL_EXCEPTIONS.contains(cause.getClass());, +    protected void waitForNewMasterAndRetry(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +                sendShardFailed(observer, shardRoutingEntry, listener);, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +                        request.shardId(), createTransportChannel(listener), reference);, +++ b/core/src/test/java/org/elasticsearch/cluster/action/shard/ShardStateActionTests.java, +import org.elasticsearch.transport.NodeDisconnectedException;, +import java.util.ArrayList;, +import java.util.List;, +        protected void waitForNewMasterAndRetry(ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +            super.waitForNewMasterAndRetry(observer, shardRoutingEntry, listener);, +    public void testMasterChannelException() throws InterruptedException {, +, +            @Override, +            public void onShardFailedFailure(Exception e) {, +                success.set(false);, +                latch.countDown();, +            }, +        List<Exception> possibleExceptions = new ArrayList<>();, +        possibleExceptions.add(new NotMasterException("simulated"));, +        possibleExceptions.add(new NodeDisconnectedException(clusterService.state().nodes().masterNode(), ShardStateAction.SHARD_FAILED_ACTION_NAME));, +        transport.handleResponse(capturedRequests[0].requestId, randomFrom(possibleExceptions));]