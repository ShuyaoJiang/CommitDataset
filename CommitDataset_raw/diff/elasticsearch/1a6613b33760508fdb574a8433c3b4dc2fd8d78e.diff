[+++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        // mlockall if requested, +        if (mlockAll) {, +            if (Constants.WINDOWS) {, +               Natives.tryVirtualLock();, +            } else {, +               Natives.tryMlockall();, +            }, +        }, +++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        // mlockall if requested, +        if (mlockAll) {, +            if (Constants.WINDOWS) {, +               Natives.tryVirtualLock();, +            } else {, +               Natives.tryMlockall();, +            }, +        }, +++ b/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, + *, +class JNACLibrary {, +    public static final int MCL_FUTURE = 2;, +, +            logger.warn("unable to link C library. native methods (mlockall) will be disabled.");, +++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        // mlockall if requested, +        if (mlockAll) {, +            if (Constants.WINDOWS) {, +               Natives.tryVirtualLock();, +            } else {, +               Natives.tryMlockall();, +            }, +        }, +++ b/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, + *, +class JNACLibrary {, +    public static final int MCL_FUTURE = 2;, +, +            logger.warn("unable to link C library. native methods (mlockall) will be disabled.");, +++ b/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +import java.util.Locale;, +, +            if (result != 0) {, +                LOCAL_MLOCKALL = true;, +        if (errno != Integer.MIN_VALUE) {, +            if (errno == JNACLibrary.ENOMEM && System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("linux")) {, +                logger.warn("Unable to lock JVM memory (ENOMEM).", +                        + " This can result in part of the JVM being swapped out.", +                        + " Increase RLIMIT_MEMLOCK (ulimit).");, +            } else if (!System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("mac")) {, +                // OS X allows mlockall to be called, but always returns an error, +                logger.warn("Unknown mlockall error " + errno);, +++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        // mlockall if requested, +        if (mlockAll) {, +            if (Constants.WINDOWS) {, +               Natives.tryVirtualLock();, +            } else {, +               Natives.tryMlockall();, +            }, +        }, +++ b/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, + *, +class JNACLibrary {, +    public static final int MCL_FUTURE = 2;, +, +            logger.warn("unable to link C library. native methods (mlockall) will be disabled.");, +++ b/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +import java.util.Locale;, +, +            if (result != 0) {, +                LOCAL_MLOCKALL = true;, +        if (errno != Integer.MIN_VALUE) {, +            if (errno == JNACLibrary.ENOMEM && System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("linux")) {, +                logger.warn("Unable to lock JVM memory (ENOMEM).", +                        + " This can result in part of the JVM being swapped out.", +                        + " Increase RLIMIT_MEMLOCK (ulimit).");, +            } else if (!System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("mac")) {, +                // OS X allows mlockall to be called, but always returns an error, +                logger.warn("Unknown mlockall error " + errno);, +++ b/src/test/java/org/elasticsearch/index/translog/TranslogTests.java, +        boolean validPathString;, +        } while (Translog.PARSE_ID_PATTERN.matcher(string).matches() || validPathString == false);]