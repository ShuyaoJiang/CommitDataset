[+++ b/server/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +        // a misconfigured java.io.tmpdir can cause hard-to-diagnose problems later, so reject it immediately, +        try {, +            env.validateTmpFile();, +        } catch (IOException e) {, +            throw new UserException(ExitCodes.CONFIG, e.getMessage());, +        }, +, +++ b/server/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +        // a misconfigured java.io.tmpdir can cause hard-to-diagnose problems later, so reject it immediately, +        try {, +            env.validateTmpFile();, +        } catch (IOException e) {, +            throw new UserException(ExitCodes.CONFIG, e.getMessage());, +        }, +, +++ b/server/src/main/java/org/elasticsearch/env/Environment.java, +import java.io.FileNotFoundException;, +    private final Path tmpFile;, +        this(settings, configPath, PathUtils.get(System.getProperty("java.io.tmpdir")));, +    }, +, +    // Should only be called directly by this class's unit tests, +    Environment(final Settings settings, final Path configPath, final Path tmpPath) {, +        tmpFile = Objects.requireNonNull(tmpPath);, +, +    /** Ensure the configured temp directory is a valid directory */, +    public void validateTmpFile() throws IOException {, +        if (Files.exists(tmpFile) == false) {, +            throw new FileNotFoundException("Temporary file directory [" + tmpFile + "] does not exist or is not accessible");, +        }, +        if (Files.isDirectory(tmpFile) == false) {, +            throw new IOException("Configured temporary file directory [" + tmpFile + "] is not a directory");, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +        // a misconfigured java.io.tmpdir can cause hard-to-diagnose problems later, so reject it immediately, +        try {, +            env.validateTmpFile();, +        } catch (IOException e) {, +            throw new UserException(ExitCodes.CONFIG, e.getMessage());, +        }, +, +++ b/server/src/main/java/org/elasticsearch/env/Environment.java, +import java.io.FileNotFoundException;, +    private final Path tmpFile;, +        this(settings, configPath, PathUtils.get(System.getProperty("java.io.tmpdir")));, +    }, +, +    // Should only be called directly by this class's unit tests, +    Environment(final Settings settings, final Path configPath, final Path tmpPath) {, +        tmpFile = Objects.requireNonNull(tmpPath);, +, +    /** Ensure the configured temp directory is a valid directory */, +    public void validateTmpFile() throws IOException {, +        if (Files.exists(tmpFile) == false) {, +            throw new FileNotFoundException("Temporary file directory [" + tmpFile + "] does not exist or is not accessible");, +        }, +        if (Files.isDirectory(tmpFile) == false) {, +            throw new IOException("Configured temporary file directory [" + tmpFile + "] is not a directory");, +        }, +    }, +, +++ b/server/src/test/java/org/elasticsearch/env/EnvironmentTests.java, +import java.io.FileNotFoundException;, +import static org.hamcrest.CoreMatchers.startsWith;, +    public Environment newEnvironment() {, +    public Environment newEnvironment(Settings settings) {, +    public void testNonExistentTempPathValidation() {, +        Settings build = Settings.builder(), +            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +            .build();, +        Environment environment = new Environment(build, null, createTempDir().resolve("this_does_not_exist"));, +        FileNotFoundException e = expectThrows(FileNotFoundException.class, environment::validateTmpFile);, +        assertThat(e.getMessage(), startsWith("Temporary file directory ["));, +        assertThat(e.getMessage(), endsWith("this_does_not_exist] does not exist or is not accessible"));, +    }, +, +    public void testTempPathValidationWhenRegularFile() throws IOException {, +        Settings build = Settings.builder(), +            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +            .build();, +        Environment environment = new Environment(build, null, createTempFile("something", ".test"));, +        IOException e = expectThrows(IOException.class, environment::validateTmpFile);, +        assertThat(e.getMessage(), startsWith("Configured temporary file directory ["));, +        assertThat(e.getMessage(), endsWith(".test] is not a directory"));, +    }]