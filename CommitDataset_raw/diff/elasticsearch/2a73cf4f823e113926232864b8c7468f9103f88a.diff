[+++ b/src/main/java/org/elasticsearch/common/Table.java, +        public Cell(Object value, Cell other) {, +            this.value = value;, +            this.attr = other.attr;, +        }, +, +++ b/src/main/java/org/elasticsearch/common/Table.java, +        public Cell(Object value, Cell other) {, +            this.value = value;, +            this.attr = other.attr;, +        }, +, +++ b/src/main/java/org/elasticsearch/rest/action/cat/AbstractCatAction.java, +                pad(new Table.Cell(cell.attr.containsKey("alias") ? cell.attr.get("alias") : ""), width[1], request, out);, +                out.append(" | ");, +                pad(new Table.Cell(cell.attr.containsKey("desc") ? cell.attr.get("desc") : "not available"), width[2], request, out);, +++ b/src/main/java/org/elasticsearch/common/Table.java, +        public Cell(Object value, Cell other) {, +            this.value = value;, +            this.attr = other.attr;, +        }, +, +++ b/src/main/java/org/elasticsearch/rest/action/cat/AbstractCatAction.java, +                pad(new Table.Cell(cell.attr.containsKey("alias") ? cell.attr.get("alias") : ""), width[1], request, out);, +                out.append(" | ");, +                pad(new Table.Cell(cell.attr.containsKey("desc") ? cell.attr.get("desc") : "not available"), width[2], request, out);, +++ b/src/main/java/org/elasticsearch/rest/action/cat/RestNodesAction.java, +        table.addCell("version", "default:false;alias:v;desc:es version");, +        table.addCell("build", "default:false;alias:b;desc:es build hash");, +++ b/src/main/java/org/elasticsearch/common/Table.java, +        public Cell(Object value, Cell other) {, +            this.value = value;, +            this.attr = other.attr;, +        }, +, +++ b/src/main/java/org/elasticsearch/rest/action/cat/AbstractCatAction.java, +                pad(new Table.Cell(cell.attr.containsKey("alias") ? cell.attr.get("alias") : ""), width[1], request, out);, +                out.append(" | ");, +                pad(new Table.Cell(cell.attr.containsKey("desc") ? cell.attr.get("desc") : "not available"), width[2], request, out);, +++ b/src/main/java/org/elasticsearch/rest/action/cat/RestNodesAction.java, +        table.addCell("version", "default:false;alias:v;desc:es version");, +        table.addCell("build", "default:false;alias:b;desc:es build hash");, +++ b/src/main/java/org/elasticsearch/rest/action/support/RestTable.java, +        List<DisplayHeader> displayHeaders = buildDisplayHeaders(table, request);, +            for (DisplayHeader header : displayHeaders) {, +                builder.field(header.display, renderValue(request, table.getAsMap().get(header.name).get(row).value));, +        List<DisplayHeader> headers = buildDisplayHeaders(table, request);, +                DisplayHeader header = headers.get(col);, +                pad(new Table.Cell(header.display, table.findHeaderByName(header.name)), width[col], request, out);, +                DisplayHeader header = headers.get(col);, +                pad(table.getAsMap().get(header.name).get(row), width[col], request, out);, +    private static List<DisplayHeader> buildDisplayHeaders(Table table, RestRequest request) {, +        List<DisplayHeader> display = new ArrayList<DisplayHeader>();, +                    display.add(new DisplayHeader(possibility, possibility));, +                } else {, +                    for (Table.Cell headerCell : table.getHeaders()) {, +                        String aliases = headerCell.attr.get("alias");, +                        if (aliases != null) {, +                            for (String alias : Strings.splitStringByCommaToArray(aliases)) {, +                                if (possibility.equals(alias)) {, +                                    display.add(new DisplayHeader(headerCell.value.toString(), alias));, +                                    break;, +                                }, +                            }, +                        }, +                    }, +                    display.add(new DisplayHeader(cell.value.toString(), cell.value.toString()));, +        int[] width = new int[3];, +            v = renderValue(request, cell.attr.containsKey("alias") ? cell.attr.get("alias") : "");, +, +            v = renderValue(request, cell.attr.containsKey("desc") ? cell.attr.get("desc") : "not available");, +            vWidth = v == null ? 0 : v.length();, +            if (width[2] < vWidth) {, +                width[2] = vWidth;, +            }, +    private static int[] buildWidths(Table table, RestRequest request, boolean verbose, List<DisplayHeader> headers) {, +            for (DisplayHeader hdr : headers) {, +                int vWidth = hdr.display.length();, +        for (DisplayHeader hdr : headers) {, +            for (Table.Cell cell : table.getAsMap().get(hdr.name)) {, +, +    static class DisplayHeader {, +        public final String name;, +        public final String display;, +, +        DisplayHeader(String name, String display) {, +            this.name = name;, +            this.display = display;, +        }, +    }]