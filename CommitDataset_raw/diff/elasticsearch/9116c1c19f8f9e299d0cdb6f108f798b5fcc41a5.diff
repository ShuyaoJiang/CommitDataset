[+++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/builder/OldSearchSourceBuilder.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.builder;, +, +import com.carrotsearch.hppc.ObjectFloatHashMap;, +, +import org.elasticsearch.ElasticsearchGenerationException;, +import org.elasticsearch.action.support.QuerySourceBuilder;, +import org.elasticsearch.action.support.ToXContentToBytes;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.query.QueryBuilder;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.search.aggregations.AbstractAggregationBuilder;, +import org.elasticsearch.search.fetch.innerhits.InnerHitsBuilder;, +import org.elasticsearch.search.fetch.source.FetchSourceContext;, +import org.elasticsearch.search.highlight.HighlightBuilder;, +import org.elasticsearch.search.internal.SearchContext;, +import org.elasticsearch.search.rescore.RescoreBuilder;, +import org.elasticsearch.search.sort.SortBuilder;, +import org.elasticsearch.search.sort.SortBuilders;, +import org.elasticsearch.search.sort.SortOrder;, +import org.elasticsearch.search.suggest.SuggestBuilder;, +, +import java.io.IOException;, +import java.nio.charset.StandardCharsets;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +, +/**, + * A search source builder allowing to easily build search source. Simple, + * construction using, + * {@link org.elasticsearch.search.builder.OldSearchSourceBuilder#searchSource()}, + * ., + *, + * @see org.elasticsearch.action.search.SearchRequest#source(OldSearchSourceBuilder), + */, +public class OldSearchSourceBuilder extends ToXContentToBytes {, +, +    /**, +     * A static factory method to construct a new search source., +     */, +    public static OldSearchSourceBuilder searchSource() {, +        return new OldSearchSourceBuilder();, +    }, +, +    /**, +     * A static factory method to construct new search highlights., +     */, +    public static HighlightBuilder highlight() {, +        return new HighlightBuilder();, +    }, +, +    private QuerySourceBuilder querySourceBuilder;, +, +    private QueryBuilder postQueryBuilder;, +, +    private BytesReference filterBinary;, +, +    private int from = -1;, +, +    private int size = -1;, +, +    private Boolean explain;, +, +    private Boolean version;, +, +    private List<SortBuilder> sorts;, +, +    private boolean trackScores = false;, +]