[+++ b/marvel/src/main/resources/marvel_index_template.json, +          "properties": {, +            "state": {, +              "type": "string",, +              "index": "not_analyzed", +            },, +            "primary": {, +              "type": "boolean", +            },, +            "index": {, +              "type": "string",, +              "index": "not_analyzed", +            },, +            "relocating_node": {, +              "type": "string",, +              "index": "not_analyzed", +            },, +            "shard": {, +              "type": "long", +            },, +            "node": {, +              "type": "string",, +              "index": "not_analyzed", +            }, +          }, +++ b/marvel/src/main/resources/marvel_index_template.json, +          "properties": {, +            "state": {, +              "type": "string",, +              "index": "not_analyzed", +            },, +            "primary": {, +              "type": "boolean", +            },, +            "index": {, +              "type": "string",, +              "index": "not_analyzed", +            },, +            "relocating_node": {, +              "type": "string",, +              "index": "not_analyzed", +            },, +            "shard": {, +              "type": "long", +            },, +            "node": {, +              "type": "string",, +              "index": "not_analyzed", +            }, +          }, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/renderer/shards/ShardsIT.java, +import org.elasticsearch.action.search.SearchRequestBuilder;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.search.aggregations.Aggregation;, +import org.elasticsearch.search.aggregations.AggregationBuilders;, +import org.elasticsearch.search.aggregations.bucket.terms.StringTerms;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.hamcrest.Matchers.*;, +    private static final String INDEX_PREFIX = "test-shards-";, +, +                .put(MarvelSettings.INDICES, INDEX_PREFIX + "*"), +            client().prepareIndex(INDEX_PREFIX + i, "foo").setRefresh(true).setSource("field1", "value1").get();, +, +    /**, +     * This test uses a terms aggregation to check that the "not_analyzed", +     * fields of the "shards" document type are indeed not analyzed, +     */, +    @Test, +    public void testNotAnalyzedFields() throws Exception {, +        final String indexName = INDEX_PREFIX + randomInt();, +        assertAcked(prepareCreate(indexName).setSettings(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1, IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0));, +, +        awaitMarvelDocsCount(greaterThan(0L), ShardsCollector.TYPE);, +, +        SearchRequestBuilder searchRequestBuilder = client(), +                .prepareSearch(), +                .setTypes(ShardsCollector.TYPE), +                .setQuery(QueryBuilders.termQuery("shard.index", indexName));, +, +        String[] notAnalyzedFields = {"state_uuid", "shard.state", "shard.index", "shard.node"};, +        for (String field : notAnalyzedFields) {, +            searchRequestBuilder.addAggregation(AggregationBuilders.terms("agg_" + field.replace('.', '_')).field(field));, +        }, +, +        SearchResponse response = searchRequestBuilder.get();, +        assertThat(response.getHits().getTotalHits(), greaterThanOrEqualTo(1L));, +, +        for (Aggregation aggregation : response.getAggregations()) {, +            assertThat(aggregation, instanceOf(StringTerms.class));, +            assertThat(((StringTerms) aggregation).getBuckets().size(), equalTo(1));, +        }, +    }]