[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +import javax.annotation.Nullable;, +     * Adds a sort script., +     *, +     * @param script The script to execute., +     * @param type   The type of the result (can either be "string" or "number")., +     * @param order  The order., +     */, +    public SearchRequestBuilder addSortScript(String script, String type, SearchSourceBuilder.Order order) {, +        return addSortScript(script, type, order, null);, +    }, +, +    /**, +     * Adds a sort script., +     *, +     * @param script The script to execute., +     * @param type   The type of the result (can either be "string" or "number")., +     * @param order  The order., +     * @param params Optional parameters to the script., +     */, +    public SearchRequestBuilder addSortScript(String script, String type, SearchSourceBuilder.Order order, @Nullable Map<String, Object> params) {, +        sourceBuilder().sortScript(script, type, order, params);, +        return this;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +import javax.annotation.Nullable;, +     * Adds a sort script., +     *, +     * @param script The script to execute., +     * @param type   The type of the result (can either be "string" or "number")., +     * @param order  The order., +     */, +    public SearchRequestBuilder addSortScript(String script, String type, SearchSourceBuilder.Order order) {, +        return addSortScript(script, type, order, null);, +    }, +, +    /**, +     * Adds a sort script., +     *, +     * @param script The script to execute., +     * @param type   The type of the result (can either be "string" or "number")., +     * @param order  The order., +     * @param params Optional parameters to the script., +     */, +    public SearchRequestBuilder addSortScript(String script, String type, SearchSourceBuilder.Order order, @Nullable Map<String, Object> params) {, +        sourceBuilder().sortScript(script, type, order, params);, +        return this;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/function/sort/DoubleFieldsFunctionDataComparator.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.field.function.sort;, +, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.search.FieldComparator;, +import org.apache.lucene.search.FieldComparatorSource;, +import org.elasticsearch.index.field.function.FieldsFunction;, +, +import java.io.IOException;, +import java.util.Map;, +, +/**, + * @author kimchy (shay.banon), + */, +// LUCENE MONITOR: Monitor against FieldComparator.Double, +public class DoubleFieldsFunctionDataComparator extends FieldComparator {, +, +    public static FieldComparatorSource comparatorSource(FieldsFunction fieldsFunction, Map<String, Object> params) {, +        return new InnerSource(fieldsFunction, params);, +    }, +, +    private static class InnerSource extends FieldComparatorSource {, +, +        private final FieldsFunction fieldsFunction;, +, +        private final Map<String, Object> params;, +, +        private InnerSource(FieldsFunction fieldsFunction, Map<String, Object> params) {, +            this.fieldsFunction = fieldsFunction;]