[+++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +    public static Map<String, String> readPerFieldAnalyzer(Map<String, Object> map) {, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +    public static Map<String, String> readPerFieldAnalyzer(Map<String, Object> map) {, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +    public void setUnlikeText(Fields... unlikeFields) {, +        this.unlikeFields = unlikeFields;, +    public void setUnlikeText(List<String> unlikeText) {, +        this.unlikeText = unlikeText.toArray(Strings.EMPTY_ARRAY);, +++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +    public static Map<String, String> readPerFieldAnalyzer(Map<String, Object> map) {, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +    public void setUnlikeText(Fields... unlikeFields) {, +        this.unlikeFields = unlikeFields;, +    public void setUnlikeText(List<String> unlikeText) {, +        this.unlikeText = unlikeText.toArray(Strings.EMPTY_ARRAY);, +++ b/core/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.action.termvectors.TermVectorsRequest;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParseFieldMatcher;, +import java.util.*;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, + * A more like this query that finds documents that are "like" the provided set of document(s)., + *, + * The documents are provided as a set of strings and/or a list of {@link Item}., +     * A single item to be used for a {@link MoreLikeThisQueryBuilder}., +    public static final class Item implements ToXContent {, +        public interface Field {, +            ParseField INDEX = new ParseField("_index");, +            ParseField TYPE = new ParseField("_type");, +            ParseField ID = new ParseField("_id");, +            ParseField DOC = new ParseField("doc");, +            ParseField FIELDS = new ParseField("fields");, +            ParseField PER_FIELD_ANALYZER = new ParseField("per_field_analyzer");, +            ParseField ROUTING = new ParseField("_routing");, +            ParseField VERSION = new ParseField("_version");, +            ParseField VERSION_TYPE = new ParseField("_version_type");, +        }, +, +        private String index;, +        private String type;, +        private String id;, +        private String[] fields;, +        private Map<String, String> perFieldAnalyzer;, +        private String routing;, +        private long version = Versions.MATCH_ANY;, +        private VersionType versionType = VersionType.INTERNAL;, +, +        /**, +         * Constructor for a given item / document request, +         *, +         * @param index the index where the document is located, +         * @param type the type of the document, +         * @param id and its id, +         */, +            this.index = index;, +            this.type = type;, +            this.id = id;, +        /**, +         * Constructor for an artificial document request, that is not present in the index., +         *, +         * @param index the index to be used for parsing the doc, +         * @param type the type to be used for parsing the doc, +         * @param doc the document specification, +         */, +        public Item(String index, String type, XContentBuilder doc) {, +            this.index = index;, +            this.type = type;, +            this.doc(doc);, +        }, +, +        public String index() {, +            return index;, +        }, +, +        public Item index(String index) {, +            this.index = index;, +            return this;, +        }, +, +        public String type() {, +            return type;, +        }, +, +        public Item type(String type) {, +            this.type = type;, +            return this;, +        }, +, +        public String id() {, +            return id;, +        }, +, +        public Item id(String id) {, +            this.id = id;, +            return this;, +        /**]