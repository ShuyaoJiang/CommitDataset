[+++ b/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +import java.util.Calendar;, +        } else if (value instanceof Calendar) {, +            field(name, convertCalendar((Calendar) value));, +        } else if (value instanceof Calendar) {, +            value(convertCalendar((Calendar) value));, +    private Date convertCalendar(Calendar value) {, +        return value.getTime();, +    }, +, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +import java.util.Calendar;, +        } else if (value instanceof Calendar) {, +            field(name, convertCalendar((Calendar) value));, +        } else if (value instanceof Calendar) {, +            value(convertCalendar((Calendar) value));, +    private Date convertCalendar(Calendar value) {, +        return value.getTime();, +    }, +, +++ b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapConverter.java, +        } else if (value instanceof Calendar) {, +            gen.writeString(XContentBuilder.defaultDatePrinter.print((((Calendar) value)).getTimeInMillis()));, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java, +import java.util.Calendar;, +        } else if (value instanceof Calendar) {, +            field(name, convertCalendar((Calendar) value));, +        } else if (value instanceof Calendar) {, +            value(convertCalendar((Calendar) value));, +    private Date convertCalendar(Calendar value) {, +        return value.getTime();, +    }, +, +++ b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapConverter.java, +        } else if (value instanceof Calendar) {, +            gen.writeString(XContentBuilder.defaultDatePrinter.print((((Calendar) value)).getTimeInMillis()));, +++ b/src/test/java/org/elasticsearch/test/unit/common/xcontent/builder/XContentBuilderTests.java, +import java.util.*;, +, +, +    @Test, +    public void testDateTypesConversion() throws Exception {, +        Date date = new Date();, +        String expectedDate = XContentBuilder.defaultDatePrinter.print(date.getTime());, +        Calendar calendar = new GregorianCalendar();, +        String expectedCalendar = XContentBuilder.defaultDatePrinter.print(calendar.getTimeInMillis());, +        XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON);, +        builder.startObject().field("date", date).endObject();, +        assertThat(builder.string(), equalTo("{\"date\":\"" + expectedDate + "\"}"));, +, +        builder = XContentFactory.contentBuilder(XContentType.JSON);, +        builder.startObject().field("calendar", calendar).endObject();, +        assertThat(builder.string(), equalTo("{\"calendar\":\"" + expectedCalendar + "\"}"));, +, +        builder = XContentFactory.contentBuilder(XContentType.JSON);, +        Map<String, Object> map = new HashMap<String, Object>();, +        map.put("date", date);, +        builder.map(map);, +        assertThat(builder.string(), equalTo("{\"date\":\"" + expectedDate + "\"}"));, +, +        builder = XContentFactory.contentBuilder(XContentType.JSON);, +        map = new HashMap<String, Object>();, +        map.put("calendar", calendar);, +        builder.map(map);, +        assertThat(builder.string(), equalTo("{\"calendar\":\"" + expectedCalendar + "\"}"));, +    }]