[+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/TestClustersPlugin.java, +        // When the daemon is used, but does not work correctly and eventually dies off (e.x. due to non interruptible, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/TestClustersPlugin.java, +        // When the daemon is used, but does not work correctly and eventually dies off (e.x. due to non interruptible, +++ b/server/src/main/java/org/elasticsearch/common/util/CancellableThreads.java, + * executed via {@link #execute(Interruptible)}, which will capture the executing thread and make sure it is interrupted in the case, +     * run the Interruptible, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread, +     * @param interruptible code to run, +    public void execute(Interruptible interruptible) {, +            executeIO(interruptible);, +            assert false : "the passed interruptible can not result in an IOException";, +     * run the Interruptible, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread, +     * @param interruptible code to run, +    public void executeIO(IOInterruptible interruptible) throws IOException {, +            interruptible.run();, +    public interface Interruptible extends IOInterruptible {, +    public interface IOInterruptible {, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/TestClustersPlugin.java, +        // When the daemon is used, but does not work correctly and eventually dies off (e.x. due to non interruptible, +++ b/server/src/main/java/org/elasticsearch/common/util/CancellableThreads.java, + * executed via {@link #execute(Interruptible)}, which will capture the executing thread and make sure it is interrupted in the case, +     * run the Interruptible, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread, +     * @param interruptible code to run, +    public void execute(Interruptible interruptible) {, +            executeIO(interruptible);, +            assert false : "the passed interruptible can not result in an IOException";, +     * run the Interruptible, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread, +     * @param interruptible code to run, +    public void executeIO(IOInterruptible interruptible) throws IOException {, +            interruptible.run();, +    public interface Interruptible extends IOInterruptible {, +    public interface IOInterruptible {, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +    static void runUnderPrimaryPermit(CancellableThreads.Interruptible runnable, String reason,, +        final CancellableThreads.IOInterruptible sendBatch = () -> {, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/TestClustersPlugin.java, +        // When the daemon is used, but does not work correctly and eventually dies off (e.x. due to non interruptible, +++ b/server/src/main/java/org/elasticsearch/common/util/CancellableThreads.java, + * executed via {@link #execute(Interruptible)}, which will capture the executing thread and make sure it is interrupted in the case, +     * run the Interruptible, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread, +     * @param interruptible code to run, +    public void execute(Interruptible interruptible) {, +            executeIO(interruptible);, +            assert false : "the passed interruptible can not result in an IOException";, +     * run the Interruptible, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread, +     * @param interruptible code to run, +    public void executeIO(IOInterruptible interruptible) throws IOException {, +            interruptible.run();, +    public interface Interruptible extends IOInterruptible {, +    public interface IOInterruptible {, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +    static void runUnderPrimaryPermit(CancellableThreads.Interruptible runnable, String reason,, +        final CancellableThreads.IOInterruptible sendBatch = () -> {, +++ b/server/src/test/java/org/elasticsearch/common/util/CancellableThreadsTests.java, +import org.elasticsearch.common.util.CancellableThreads.IOInterruptible;, +import org.elasticsearch.common.util.CancellableThreads.Interruptible;, +    static class TestRunnable implements Interruptible {, +    static class TestIORunnable implements IOInterruptible {]