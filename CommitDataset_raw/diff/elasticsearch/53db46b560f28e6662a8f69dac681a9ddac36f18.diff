[+++ b/core/pom.xml, +++ b/core/pom.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/pom.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        Query query = MissingQueryParser.newFilter(parseContext, queryText, MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/pom.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        Query query = MissingQueryParser.newFilter(parseContext, queryText, MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +++ b/core/pom.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        Query query = MissingQueryParser.newFilter(parseContext, queryText, MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollScanAction.java, +                    queryFetchResults.set(shardIndex, result.result());, +            for (AtomicArray.Entry<QueryFetchSearchResult> entry : queryFetchResults.asList()) {, +            ScoreDoc[] docs = new ScoreDoc[numberOfHits];, +            int counter = 0;, +            for (AtomicArray.Entry<QueryFetchSearchResult> entry : queryFetchResults.asList()) {, +                    docs[counter++] = scoreDoc;, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(docs, queryFetchResults, queryFetchResults);, +            for (AtomicArray.Entry<QueryFetchSearchResult> entry : queryFetchResults.asList()) {, +                    // we found more than we want for this round, remove this from our scrolling, +++ b/core/pom.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        Query query = MissingQueryParser.newFilter(parseContext, queryText, MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE);, +        if (query != null) {, +            return new ConstantScoreQuery(query);, +        }, +        return null;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +++ b/core/src/main/java/org/elasticsearch/action/search/type/TransportSearchScrollScanAction.java, +                    queryFetchResults.set(shardIndex, result.result());, +            for (AtomicArray.Entry<QueryFetchSearchResult> entry : queryFetchResults.asList()) {, +            ScoreDoc[] docs = new ScoreDoc[numberOfHits];, +            int counter = 0;, +            for (AtomicArray.Entry<QueryFetchSearchResult> entry : queryFetchResults.asList()) {, +                    docs[counter++] = scoreDoc;, +            final InternalSearchResponse internalResponse = searchPhaseController.merge(docs, queryFetchResults, queryFetchResults);, +            for (AtomicArray.Entry<QueryFetchSearchResult> entry : queryFetchResults.asList()) {, +                    // we found more than we want for this round, remove this from our scrolling, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        long getDateNS = System.nanoTime();, +                throw new DocumentMissingException(new ShardId(indexShard.indexService().index().name(), request.shardId()), request.type(), request.id());, +            Long ttl = null;, +            if (request.scriptedUpsert() && (request.script() != null)) {, +                try {, +                    ExecutableScript script = scriptService.executable(request.script, ScriptContext.Standard.UPDATE);, +                    script.setNextVar("ctx", ctx);, +                    script.run();, +                    // we need to unwrap the ctx..., +                    ctx = (Map<String, Object>) script.unwrap(ctx);, +                } catch (Exception e) {, +                    throw new IllegalArgumentException("failed to execute script", e);, +                //Allow the script to set TTL using ctx._ttl, +                ttl = getTTLFromScriptContext(ctx);, +                    .ttl(ttl), +            throw new DocumentSourceMissingException(new ShardId(indexShard.indexService().index().name(), request.shardId()), request.type(), request.id());, +            try {, +                ExecutableScript script = scriptService.executable(request.script, ScriptContext.Standard.UPDATE);, +                script.setNextVar("ctx", ctx);, +                script.run();, +                // we need to unwrap the ctx..., +                ctx = (Map<String, Object>) script.unwrap(ctx);, +            } catch (Exception e) {, +                throw new IllegalArgumentException("failed to execute script", e);, +            }, +            update.setGetResult(extractGetResult(request, indexShard.indexService().index().name(), getResult.getVersion(), updatedSourceAsMap, updateSourceContentType, getResult.internalSourceRef()));, +++ b/core/pom.xml, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryBuilder;, +        return new ConstantScoreQuery(ExistsQueryBuilder.newFilter(parseContext, queryText));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java]