[+++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/Exporter.java, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/Exporter.java, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/MarvelTemplateUtils.java, +import org.elasticsearch.common.logging.ESLogger;, +    public static final Version MIN_SUPPORTED_TEMPLATE_VERSION = Version.V_2_0_0_beta2;, +    public static Version loadDefaultTemplateVersion() {, +        return parseTemplateVersion(loadDefaultTemplate());, +    }, +, +            try {, +            } catch (IllegalArgumentException e) {, +                return null;, +            }, +        try {, +        } catch (IllegalArgumentException e) {, +            return null;, +        }, +    public static boolean installedTemplateVersionIsSufficient(Version installed) {, +        // null indicates couldn't parse the version from the installed template, this means it is probably too old or invalid..., +        if (installed == null) {, +            return false;, +        }, +        // ensure the template is not too old, +        if (installed.before(MIN_SUPPORTED_TEMPLATE_VERSION)) {, +            return false;, +        }, +, +        // We do not enforce that versions are equivalent to the current version as we may be in a rolling upgrade scenario, +        // and until a master is elected with the new version, data nodes that have been upgraded will not be able to ship, +        // data. This means that there is an implication that the new shippers will ship data correctly even with an old template., +        // There is also no upper bound and we rely on elasticsearch nodes not being able to connect to each other across major, +        // versions, +        return true;, +    }, +, +    public static boolean installedTemplateVersionMandatesAnUpdate(Version current, Version installed, ESLogger logger, String exporterName) {, +        if (installed == null) {, +            logger.debug("exporter [{}] - currently installed marvel template is missing a version - installing a new one [{}]", exporterName, current);, +            return true;, +        }, +        // Never update a very old template, +        if (installed.before(MIN_SUPPORTED_TEMPLATE_VERSION)) {, +            return false;, +        }, +        // Always update a template to the last up-to-date version, +        if (current.after(installed)) {, +            logger.debug("exporter [{}] - currently installed marvel template version [{}] will be updated to a newer version [{}]", exporterName, installed, current);, +            return true;, +            // When the template is up-to-date, do not update, +        } else if (current.equals(installed)) {, +            logger.debug("exporter [{}] - currently installed marvel template version [{}] is up-to-date", exporterName, installed);, +            return false;, +            // Never update a template that is newer than the expected one, +        } else {, +            logger.debug("exporter [{}] - currently installed marvel template version [{}] is newer than the one required [{}]... keeping it.", exporterName, installed, current);, +            return false;, +        }, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/Exporter.java, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/MarvelTemplateUtils.java, +import org.elasticsearch.common.logging.ESLogger;, +    public static final Version MIN_SUPPORTED_TEMPLATE_VERSION = Version.V_2_0_0_beta2;, +    public static Version loadDefaultTemplateVersion() {, +        return parseTemplateVersion(loadDefaultTemplate());, +    }, +, +            try {, +            } catch (IllegalArgumentException e) {, +                return null;, +            }, +        try {, +        } catch (IllegalArgumentException e) {, +            return null;, +        }, +    public static boolean installedTemplateVersionIsSufficient(Version installed) {, +        // null indicates couldn't parse the version from the installed template, this means it is probably too old or invalid..., +        if (installed == null) {, +            return false;, +        }, +        // ensure the template is not too old, +        if (installed.before(MIN_SUPPORTED_TEMPLATE_VERSION)) {, +            return false;, +        }, +, +        // We do not enforce that versions are equivalent to the current version as we may be in a rolling upgrade scenario, +        // and until a master is elected with the new version, data nodes that have been upgraded will not be able to ship, +        // data. This means that there is an implication that the new shippers will ship data correctly even with an old template., +        // There is also no upper bound and we rely on elasticsearch nodes not being able to connect to each other across major, +        // versions, +        return true;, +    }, +, +    public static boolean installedTemplateVersionMandatesAnUpdate(Version current, Version installed, ESLogger logger, String exporterName) {, +        if (installed == null) {, +            logger.debug("exporter [{}] - currently installed marvel template is missing a version - installing a new one [{}]", exporterName, current);, +            return true;, +        }, +        // Never update a very old template, +        if (installed.before(MIN_SUPPORTED_TEMPLATE_VERSION)) {, +            return false;, +        }]