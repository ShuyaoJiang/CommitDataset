[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +        if (ccrLicenseChecker.isCcrAllowed() == false) {, +            // TODO: set non-compliant status on auto-follow coordination that can be viewed via a stats API, +            LOGGER.warn("skipping auto-follower coordination", LicenseUtils.newComplianceException("ccr"));, +            threadPool.schedule(pollInterval, ThreadPool.Names.SAME, this::doAutoFollow);, +            return;, +        }, +, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +        if (ccrLicenseChecker.isCcrAllowed() == false) {, +            // TODO: set non-compliant status on auto-follow coordination that can be viewed via a stats API, +            LOGGER.warn("skipping auto-follower coordination", LicenseUtils.newComplianceException("ccr"));, +            threadPool.schedule(pollInterval, ThreadPool.Names.SAME, this::doAutoFollow);, +            return;, +        }, +, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/CcrLicenseIT.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ClusterStateUpdateTask;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.xpack.core.ccr.AutoFollowMetadata;, +import org.elasticsearch.xpack.core.ccr.AutoFollowMetadata.AutoFollowPattern;, +        // Update the cluster state so that we have auto follow patterns and verify that we log a warning in case of incompatible license:, +        CountDownLatch latch = new CountDownLatch(1);, +        ClusterService clusterService = getInstanceFromNode(ClusterService.class);, +        clusterService.submitStateUpdateTask("test-add-auto-follow-pattern", new ClusterStateUpdateTask() {, +, +            @Override, +            public ClusterState execute(ClusterState currentState) throws Exception {, +                AutoFollowPattern autoFollowPattern =, +                    new AutoFollowPattern(Collections.singletonList("logs-*"), null, null, null, null, null, null, null, null);, +                AutoFollowMetadata autoFollowMetadata = new AutoFollowMetadata(, +                    Collections.singletonMap("test_alias", autoFollowPattern),, +                    Collections.emptyMap(), +                );, +, +                ClusterState.Builder newState = ClusterState.builder(currentState);, +                newState.metaData(MetaData.builder(currentState.getMetaData()), +                    .putCustom(AutoFollowMetadata.TYPE, autoFollowMetadata), +                    .build());, +                return newState.build();, +            }, +, +            @Override, +            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +                latch.countDown();, +            }, +, +            @Override, +            public void onFailure(String source, Exception e) {, +                latch.countDown();, +                fail("unexpected error [" + e.getMessage() + "]");, +            }, +        });, +        latch.await();, +]