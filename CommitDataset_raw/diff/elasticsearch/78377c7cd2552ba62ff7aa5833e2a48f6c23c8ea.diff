[+++ b/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserPasswdStore.java, +            if (line.startsWith("#")) { // comment, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserPasswdStore.java, +            if (line.startsWith("#")) { // comment, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserRolesStore.java, +import java.util.*;, +    private static final Pattern USERS_DELIM = Pattern.compile("\\s*,\\s*");, +     * an empty map is returned. The read file holds a mapping per line of the form "role -> users" while the returned, +     * map holds entries of the form  "user -> roles"., +        Map<String, List<String>> userToRoles = new HashMap<>();, +            if (line.startsWith("#")) {  //comment, +                continue;, +            }, +                    logger.error("Invalid entry in users_roles file [" + path.toAbsolutePath() + "], line [" + lineNr + "]. Skipping...");, +            String role = line.substring(0, i).trim();, +            if (Strings.isEmpty(role)) {, +                    logger.error("Invalid username entry in users_roles file [" + path.toAbsolutePath() + "], line [" + lineNr + "]. Skipping...");, +            String usersStr = line.substring(i + 1).trim();, +            if (Strings.isEmpty(usersStr)) {, +                    logger.error("Invalid roles entry in users_roles file [" + path.toAbsolutePath() + "], line [" + lineNr + "]. Skipping...");, +            String[] roleUsers = USERS_DELIM.split(usersStr);, +            if (roleUsers.length == 0) {, +                    logger.error("Invalid roles entry in users_roles file [" + path.toAbsolutePath() + "], line [" + lineNr + "]. Skipping...");, +, +            for (String user : roleUsers) {, +                List<String> roles = userToRoles.get(user);, +                if (roles == null) {, +                    roles = new ArrayList<>();, +                    userToRoles.put(user, roles);, +                }, +                roles.add(role);, +            }, +        }, +, +        ImmutableMap.Builder<String, String[]> usersRoles = ImmutableMap.builder();, +        for (Map.Entry<String, List<String>> entry : userToRoles.entrySet()) {, +            usersRoles.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));, +    /**, +     * Accepts a mapping of user -> list of roles, +     */, +    public static void writeFile(Map<String, String[]> userToRoles, Path path) {, +        HashMap<String, List<String>> roleToUsers = new HashMap<>();, +        for (Map.Entry<String, String[]> entry : userToRoles.entrySet()) {, +            for (String role : entry.getValue()) {, +                List<String> users = roleToUsers.get(role);, +                if (users == null) {, +                    users = new ArrayList<>();, +                    roleToUsers.put(role, users);, +                }, +                users.add(entry.getKey());, +            }, +        }, +            for (Map.Entry<String, List<String>> entry : roleToUsers.entrySet()) {, +                writer.printf(Locale.ROOT, "%s:%s%s", entry.getKey(), Strings.collectionToCommaDelimitedString(entry.getValue()), System.lineSeparator());, +++ b/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserPasswdStore.java, +            if (line.startsWith("#")) { // comment, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserRolesStore.java, +import java.util.*;, +    private static final Pattern USERS_DELIM = Pattern.compile("\\s*,\\s*");, +     * an empty map is returned. The read file holds a mapping per line of the form "role -> users" while the returned, +     * map holds entries of the form  "user -> roles"., +        Map<String, List<String>> userToRoles = new HashMap<>();, +            if (line.startsWith("#")) {  //comment, +                continue;, +            }, +                    logger.error("Invalid entry in users_roles file [" + path.toAbsolutePath() + "], line [" + lineNr + "]. Skipping...");, +            String role = line.substring(0, i).trim();, +            if (Strings.isEmpty(role)) {, +                    logger.error("Invalid username entry in users_roles file [" + path.toAbsolutePath() + "], line [" + lineNr + "]. Skipping...");, +            String usersStr = line.substring(i + 1).trim();, +            if (Strings.isEmpty(usersStr)) {, +                    logger.error("Invalid roles entry in users_roles file [" + path.toAbsolutePath() + "], line [" + lineNr + "]. Skipping...");, +            String[] roleUsers = USERS_DELIM.split(usersStr);, +            if (roleUsers.length == 0) {, +                    logger.error("Invalid roles entry in users_roles file [" + path.toAbsolutePath() + "], line [" + lineNr + "]. Skipping...");, +, +            for (String user : roleUsers) {, +                List<String> roles = userToRoles.get(user);, +                if (roles == null) {, +                    roles = new ArrayList<>();, +                    userToRoles.put(user, roles);, +                }, +                roles.add(role);, +            }, +        }, +, +        ImmutableMap.Builder<String, String[]> usersRoles = ImmutableMap.builder();, +        for (Map.Entry<String, List<String>> entry : userToRoles.entrySet()) {, +            usersRoles.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));, +    /**, +     * Accepts a mapping of user -> list of roles, +     */, +    public static void writeFile(Map<String, String[]> userToRoles, Path path) {, +        HashMap<String, List<String>> roleToUsers = new HashMap<>();]