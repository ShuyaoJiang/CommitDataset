[+++ b/core/pom.xml, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchF.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchF.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +    @SuppressForbidden(reason = "command line tool"), +        System.out.println("checking for jar hell...");, +        System.out.println("no jar hell found");, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchF.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +    @SuppressForbidden(reason = "command line tool"), +        System.out.println("checking for jar hell...");, +        System.out.println("no jar hell found");, +++ b/core/src/main/java/org/elasticsearch/index/shard/ShardUtils.java, +                // We need to use FilterDirectoryReader#getDelegate and not FilterDirectoryReader#unwrap, because, +                // If there are multiple levels of filtered leaf readers then with the unwrap() method it immediately, +                // returns the most inner leaf reader and thus skipping of over any other filtered leaf reader that, +                // may be instance of ElasticsearchLeafReader. This can cause us to miss the shardId., +                return getElasticsearchDirectoryReader(((FilterDirectoryReader) reader).getDelegate());, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchF.java, +    public static void main(String[] args) throws Throwable {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +    @SuppressForbidden(reason = "command line tool"), +        System.out.println("checking for jar hell...");, +        System.out.println("no jar hell found");, +++ b/core/src/main/java/org/elasticsearch/index/shard/ShardUtils.java, +                // We need to use FilterDirectoryReader#getDelegate and not FilterDirectoryReader#unwrap, because, +                // If there are multiple levels of filtered leaf readers then with the unwrap() method it immediately, +                // returns the most inner leaf reader and thus skipping of over any other filtered leaf reader that, +                // may be instance of ElasticsearchLeafReader. This can cause us to miss the shardId., +                return getElasticsearchDirectoryReader(((FilterDirectoryReader) reader).getDelegate());, +++ b/core/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.search.fetch.FetchSubPhaseContext;, +    private final Map<String, FetchSubPhaseContext> subPhaseContexts = new HashMap<>();, +    @Override, +    public <SubPhaseContext extends FetchSubPhaseContext> SubPhaseContext getFetchSubPhaseContext(FetchSubPhase.ContextFactory<SubPhaseContext> contextFactory) {, +        String subPhaseName = contextFactory.getName();, +        if (subPhaseContexts.get(subPhaseName) == null) {, +            subPhaseContexts.put(subPhaseName, contextFactory.newContextInstance());, +        }, +        return (SubPhaseContext) subPhaseContexts.get(subPhaseName);, +    }, +, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    public static void main(String[] args) throws Throwable {, +        Settings settings = tuple.v1();, +        Environment environment = tuple.v2();, +            throw e;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    public static void main(String[] args) throws Throwable {]