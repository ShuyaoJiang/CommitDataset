[+++ b/core/src/test/java/org/elasticsearch/search/sort/FieldSortBuilderTests.java, +import org.elasticsearch.test.ESTestCase;, +import java.util.Arrays;, +import java.util.List;, +    private List<Object> missingContent = Arrays.asList(, +            "_last",, +            "_first",, +            ESTestCase.randomAsciiOfLength(10), ESTestCase.randomUnicodeOfCodepointLengthBetween(5, 15),, +            ESTestCase.randomInt());, +, +, +    public FieldSortBuilder randomFieldSortBuilder() {, +            builder.order(randomFrom(SortOrder.values()));, +            builder.missing(randomFrom(missingContent));, +            builder.unmappedType(ESTestCase.randomAsciiOfLengthBetween(1, 10));, +            builder.sortMode(randomFrom(SortMode.values()));, +            builder.setNestedFilter(NestedQueryBuilderGenerator.randomNestedFilter());, +            builder.setNestedPath(ESTestCase.randomAsciiOfLengthBetween(1, 10));, +            mutated.setNestedPath(ESTestCase.randomValueOtherThan(, +                    original.getNestedPath(),, +                    () -> ESTestCase.randomAsciiOfLengthBetween(1, 10)));, +            mutated.setNestedFilter(ESTestCase.randomValueOtherThan(, +                    original.getNestedFilter(),, +                    () -> NestedQueryBuilderGenerator.randomNestedFilter()));, +            mutated.sortMode(ESTestCase.randomValueOtherThan(original.sortMode(), () -> randomFrom(SortMode.values())));, +            mutated.unmappedType(ESTestCase.randomValueOtherThan(, +                    original.unmappedType(),, +                    () -> ESTestCase.randomAsciiOfLengthBetween(1, 10)));, +            mutated.missing(ESTestCase.randomValueOtherThan(original.missing(), () -> randomFrom(missingContent)));, +            mutated.order(ESTestCase.randomValueOtherThan(original.order(), () -> randomFrom(SortOrder.values())));, +++ b/core/src/test/java/org/elasticsearch/search/sort/FieldSortBuilderTests.java, +import org.elasticsearch.test.ESTestCase;, +import java.util.Arrays;, +import java.util.List;, +    private List<Object> missingContent = Arrays.asList(, +            "_last",, +            "_first",, +            ESTestCase.randomAsciiOfLength(10), ESTestCase.randomUnicodeOfCodepointLengthBetween(5, 15),, +            ESTestCase.randomInt());, +, +, +    public FieldSortBuilder randomFieldSortBuilder() {, +            builder.order(randomFrom(SortOrder.values()));, +            builder.missing(randomFrom(missingContent));, +            builder.unmappedType(ESTestCase.randomAsciiOfLengthBetween(1, 10));, +            builder.sortMode(randomFrom(SortMode.values()));, +            builder.setNestedFilter(NestedQueryBuilderGenerator.randomNestedFilter());, +            builder.setNestedPath(ESTestCase.randomAsciiOfLengthBetween(1, 10));, +            mutated.setNestedPath(ESTestCase.randomValueOtherThan(, +                    original.getNestedPath(),, +                    () -> ESTestCase.randomAsciiOfLengthBetween(1, 10)));, +            mutated.setNestedFilter(ESTestCase.randomValueOtherThan(, +                    original.getNestedFilter(),, +                    () -> NestedQueryBuilderGenerator.randomNestedFilter()));, +            mutated.sortMode(ESTestCase.randomValueOtherThan(original.sortMode(), () -> randomFrom(SortMode.values())));, +            mutated.unmappedType(ESTestCase.randomValueOtherThan(, +                    original.unmappedType(),, +                    () -> ESTestCase.randomAsciiOfLengthBetween(1, 10)));, +            mutated.missing(ESTestCase.randomValueOtherThan(original.missing(), () -> randomFrom(missingContent)));, +            mutated.order(ESTestCase.randomValueOtherThan(original.order(), () -> randomFrom(SortOrder.values())));, +++ b/core/src/test/java/org/elasticsearch/search/sort/GeoDistanceSortBuilderTests.java, +import org.elasticsearch.test.ESTestCase;, +            result.order(randomFrom(SortOrder.values()));, +            result.setNestedFilter(NestedQueryBuilderGenerator.randomNestedFilter());, +            result.setNestedPath(, +                    ESTestCase.randomValueOtherThan(, +                            result.getNestedPath(),, +                            () -> ESTestCase.randomAsciiOfLengthBetween(1, 10)));, +            result.order(ESTestCase.randomValueOtherThan(original.order(), () -> randomFrom(SortOrder.values())));, +            result.setNestedFilter(ESTestCase.randomValueOtherThan(, +                    original.getNestedFilter(),, +                    () -> NestedQueryBuilderGenerator.randomNestedFilter()));, +            result.setNestedPath(ESTestCase.randomValueOtherThan(, +                    result.getNestedPath(),, +                    () -> ESTestCase.randomAsciiOfLengthBetween(1, 10)));, +++ b/core/src/test/java/org/elasticsearch/search/sort/FieldSortBuilderTests.java, +import org.elasticsearch.test.ESTestCase;, +import java.util.Arrays;, +import java.util.List;, +    private List<Object> missingContent = Arrays.asList(, +            "_last",, +            "_first",, +            ESTestCase.randomAsciiOfLength(10), ESTestCase.randomUnicodeOfCodepointLengthBetween(5, 15),, +            ESTestCase.randomInt());, +, +, +    public FieldSortBuilder randomFieldSortBuilder() {, +            builder.order(randomFrom(SortOrder.values()));, +            builder.missing(randomFrom(missingContent));, +            builder.unmappedType(ESTestCase.randomAsciiOfLengthBetween(1, 10));, +            builder.sortMode(randomFrom(SortMode.values()));, +            builder.setNestedFilter(NestedQueryBuilderGenerator.randomNestedFilter());, +            builder.setNestedPath(ESTestCase.randomAsciiOfLengthBetween(1, 10));, +            mutated.setNestedPath(ESTestCase.randomValueOtherThan(, +                    original.getNestedPath(),, +                    () -> ESTestCase.randomAsciiOfLengthBetween(1, 10)));, +            mutated.setNestedFilter(ESTestCase.randomValueOtherThan(, +                    original.getNestedFilter(),, +                    () -> NestedQueryBuilderGenerator.randomNestedFilter()));, +            mutated.sortMode(ESTestCase.randomValueOtherThan(original.sortMode(), () -> randomFrom(SortMode.values())));]