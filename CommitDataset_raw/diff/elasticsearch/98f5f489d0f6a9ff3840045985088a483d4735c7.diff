[+++ b/shield/src/main/java/org/elasticsearch/shield/action/ShieldActionFilter.java, +    private static final Predicate<String> LICESE_EXPIRATION_ACTION_MATCHER = Privilege.HEALTH_AND_STATS.predicate();, +        if (!licenseEnabled && LICESE_EXPIRATION_ACTION_MATCHER.apply(action)) {, +++ b/shield/src/main/java/org/elasticsearch/shield/action/ShieldActionFilter.java, +    private static final Predicate<String> LICESE_EXPIRATION_ACTION_MATCHER = Privilege.HEALTH_AND_STATS.predicate();, +        if (!licenseEnabled && LICESE_EXPIRATION_ACTION_MATCHER.apply(action)) {, +++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditTrail.java, +                    .addPlugin(ShieldPlugin.class), +++ b/shield/src/main/java/org/elasticsearch/shield/action/ShieldActionFilter.java, +    private static final Predicate<String> LICESE_EXPIRATION_ACTION_MATCHER = Privilege.HEALTH_AND_STATS.predicate();, +        if (!licenseEnabled && LICESE_EXPIRATION_ACTION_MATCHER.apply(action)) {, +++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditTrail.java, +                    .addPlugin(ShieldPlugin.class), +++ b/shield/src/test/java/org/elasticsearch/shield/authc/pki/PkiOptionalClientAuthTests.java, +        try (TransportClient client = TransportClient.builder().settings(settings).addPlugin(ShieldPlugin.class).build()) {, +++ b/shield/src/main/java/org/elasticsearch/shield/action/ShieldActionFilter.java, +    private static final Predicate<String> LICESE_EXPIRATION_ACTION_MATCHER = Privilege.HEALTH_AND_STATS.predicate();, +        if (!licenseEnabled && LICESE_EXPIRATION_ACTION_MATCHER.apply(action)) {, +++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditTrail.java, +                    .addPlugin(ShieldPlugin.class), +++ b/shield/src/test/java/org/elasticsearch/shield/authc/pki/PkiOptionalClientAuthTests.java, +        try (TransportClient client = TransportClient.builder().settings(settings).addPlugin(ShieldPlugin.class).build()) {, +++ b/shield/src/test/java/org/elasticsearch/shield/transport/TransportFilterTests.java, +import java.util.Arrays;, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return Arrays.asList(InternalPlugin.class, InternalPluginServerTransportService.TestPlugin.class);, +    }, +, +    @Override, +    protected Collection<Class<? extends Plugin>> transportClientPlugins() {, +        return nodePlugins();, +    }, +, +++ b/shield/src/main/java/org/elasticsearch/shield/action/ShieldActionFilter.java, +    private static final Predicate<String> LICESE_EXPIRATION_ACTION_MATCHER = Privilege.HEALTH_AND_STATS.predicate();, +        if (!licenseEnabled && LICESE_EXPIRATION_ACTION_MATCHER.apply(action)) {, +++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditTrail.java, +                    .addPlugin(ShieldPlugin.class), +++ b/shield/src/test/java/org/elasticsearch/shield/authc/pki/PkiOptionalClientAuthTests.java, +        try (TransportClient client = TransportClient.builder().settings(settings).addPlugin(ShieldPlugin.class).build()) {, +++ b/shield/src/test/java/org/elasticsearch/shield/transport/TransportFilterTests.java, +import java.util.Arrays;, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return Arrays.asList(InternalPlugin.class, InternalPluginServerTransportService.TestPlugin.class);, +    }, +, +    @Override, +    protected Collection<Class<? extends Plugin>> transportClientPlugins() {, +        return nodePlugins();, +    }, +, +++ b/shield/src/test/java/org/elasticsearch/shield/transport/ssl/SslMultiPortTests.java, +        return TransportClient.builder().settings(settings).loadConfigSettings(false), +                .addPlugin(licensePluginClass()), +                .addPlugin(ShieldPlugin.class), +                .build();, +        try (TransportClient transportClient = TransportClient.builder().settings(settings).loadConfigSettings(false).addPlugin(ShieldPlugin.class).addPlugin(licensePluginClass()).build()) {, +        try (TransportClient transportClient = TransportClient.builder().settings(settings).loadConfigSettings(false).addPlugin(ShieldPlugin.class).addPlugin(licensePluginClass()).build()) {, +++ b/shield/src/main/java/org/elasticsearch/shield/action/ShieldActionFilter.java, +    private static final Predicate<String> LICESE_EXPIRATION_ACTION_MATCHER = Privilege.HEALTH_AND_STATS.predicate();, +        if (!licenseEnabled && LICESE_EXPIRATION_ACTION_MATCHER.apply(action)) {, +++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditTrail.java, +                    .addPlugin(ShieldPlugin.class), +++ b/shield/src/test/java/org/elasticsearch/shield/authc/pki/PkiOptionalClientAuthTests.java, +        try (TransportClient client = TransportClient.builder().settings(settings).addPlugin(ShieldPlugin.class).build()) {, +++ b/shield/src/test/java/org/elasticsearch/shield/transport/TransportFilterTests.java, +import java.util.Arrays;, +    @Override, +    protected Collection<Class<? extends Plugin>> nodePlugins() {, +        return Arrays.asList(InternalPlugin.class, InternalPluginServerTransportService.TestPlugin.class);, +    }, +, +    @Override, +    protected Collection<Class<? extends Plugin>> transportClientPlugins() {, +        return nodePlugins();, +    }, +, +++ b/shield/src/test/java/org/elasticsearch/shield/transport/ssl/SslMultiPortTests.java, +        return TransportClient.builder().settings(settings).loadConfigSettings(false), +                .addPlugin(licensePluginClass()), +                .addPlugin(ShieldPlugin.class), +                .build();, +        try (TransportClient transportClient = TransportClient.builder().settings(settings).loadConfigSettings(false).addPlugin(ShieldPlugin.class).addPlugin(licensePluginClass()).build()) {, +        try (TransportClient transportClient = TransportClient.builder().settings(settings).loadConfigSettings(false).addPlugin(ShieldPlugin.class).addPlugin(licensePluginClass()).build()) {, +++ b/shield/src/test/java/org/elasticsearch/test/ShieldIntegTestCase.java, +import org.junit.AfterClass;, +import org.junit.Before;, +import org.junit.BeforeClass;, +import org.junit.Rule;, +            // TODO: disable this assertion for now, because the test framework randomly runs with mock plugins. Maybe we should run without mock plugins?, +//            assertThat(nodeInfo.getPlugins().getInfos(), hasSize(2));, +            Collection<String> pluginNames = Collections2.transform(nodeInfo.getPlugins().getInfos(), new Function<PluginInfo, String>() {, +            });, +            assertThat("plugin [" + ShieldPlugin.NAME + "] not found in [" + pluginNames + "]", pluginNames.contains(ShieldPlugin.NAME), is(true));, +            assertThat("plugin [" + licensePluginName() + "] not found in [" + pluginNames + "]", pluginNames.contains(licensePluginName()), is(true));, +++ b/shield/src/main/java/org/elasticsearch/shield/action/ShieldActionFilter.java, +    private static final Predicate<String> LICESE_EXPIRATION_ACTION_MATCHER = Privilege.HEALTH_AND_STATS.predicate();, +        if (!licenseEnabled && LICESE_EXPIRATION_ACTION_MATCHER.apply(action)) {]