[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/process/ProcessCtrl.java, +import org.elasticsearch.common.Randomness;, +import org.elasticsearch.monitor.jvm.JvmInfo;, +    /**, +     * This must match the value defined in CLicenseValidator::validate() in the C++ code, +     */, +    static final long VALIDATION_NUMBER = 926213;, +    static final String LICENSE_VALIDATION_ARG = "--licenseValidation=";, +        command.add(makeLicenseArg());, +        command.add(makeLicenseArg());, +, +    /**, +     * The number must be equal to the JVM PID modulo a magic number., +     */, +    private static String makeLicenseArg() {, +        // Get a random int rather than long so we don't overflow when multiplying by VALIDATION_NUMBER, +        long rand = Randomness.get().nextInt();, +        long val = JvmInfo.jvmInfo().pid() + (((rand < 0) ? -rand : rand) + 1) * VALIDATION_NUMBER;, +        return LICENSE_VALIDATION_ARG + val;, +    }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/process/ProcessCtrl.java, +import org.elasticsearch.common.Randomness;, +import org.elasticsearch.monitor.jvm.JvmInfo;, +    /**, +     * This must match the value defined in CLicenseValidator::validate() in the C++ code, +     */, +    static final long VALIDATION_NUMBER = 926213;, +    static final String LICENSE_VALIDATION_ARG = "--licenseValidation=";, +        command.add(makeLicenseArg());, +        command.add(makeLicenseArg());, +, +    /**, +     * The number must be equal to the JVM PID modulo a magic number., +     */, +    private static String makeLicenseArg() {, +        // Get a random int rather than long so we don't overflow when multiplying by VALIDATION_NUMBER, +        long rand = Randomness.get().nextInt();, +        long val = JvmInfo.jvmInfo().pid() + (((rand < 0) ? -rand : rand) + 1) * VALIDATION_NUMBER;, +        return LICENSE_VALIDATION_ARG + val;, +    }, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/prelert/job/process/ProcessCtrlTests.java, +import org.elasticsearch.monitor.jvm.JvmInfo;, +        assertTrue(hasValidLicense(command));, +        assertTrue(hasValidLicense(command));, +, +    private boolean hasValidLicense(List<String> command) throws NumberFormatException {, +        int matches = 0;, +        for (String arg : command) {, +            if (arg.startsWith(ProcessCtrl.LICENSE_VALIDATION_ARG)) {, +                ++matches;, +                String[] argAndVal = arg.split("=");, +                if (argAndVal.length != 2) {, +                    return false;, +                }, +                long val = Long.parseLong(argAndVal[1]);, +                if ((val % ProcessCtrl.VALIDATION_NUMBER) != (JvmInfo.jvmInfo().pid() % ProcessCtrl.VALIDATION_NUMBER)) {, +                    return false;, +                }, +            }, +        }, +        return matches == 1;, +    }]