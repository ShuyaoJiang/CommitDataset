[+++ b/core/src/main/java/org/elasticsearch/common/joda/Joda.java, +            if (bucket.getZone() != DateTimeZone.UTC) {, +                String format = hasMilliSecondPrecision ? "epoch_millis" : "epoch_second";, +                throw new IllegalArgumentException("time_zone must be UTC for format [" + format + "]");, +            } else if (isPositive && isTooLong) {, +++ b/core/src/main/java/org/elasticsearch/common/joda/Joda.java, +            if (bucket.getZone() != DateTimeZone.UTC) {, +                String format = hasMilliSecondPrecision ? "epoch_millis" : "epoch_second";, +                throw new IllegalArgumentException("time_zone must be UTC for format [" + format + "]");, +            } else if (isPositive && isTooLong) {, +++ b/core/src/test/java/org/elasticsearch/deps/joda/SimpleJodaTests.java, +    public void testForInvalidTimeZoneWithEpochSeconds() {, +        DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder(), +            .append(new Joda.EpochTimeParser(false)), +            .toFormatter(), +            .withZone(DateTimeZone.forOffsetHours(1));, +        FormatDateTimeFormatter formatter =, +            new FormatDateTimeFormatter("epoch_seconds", dateTimeFormatter, Locale.ROOT);, +        try {, +            formatter.parser().parseDateTime("1433144433655");, +            fail("Expected IllegalArgumentException");, +        } catch (IllegalArgumentException e) {, +            assertThat(e.getMessage(), containsString("time_zone must be UTC"));, +        }, +    }, +, +    public void testForInvalidTimeZoneWithEpochMillis() {, +        DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder(), +            .append(new Joda.EpochTimeParser(true)), +            .toFormatter(), +            .withZone(DateTimeZone.forOffsetHours(1));, +        FormatDateTimeFormatter formatter =, +            new FormatDateTimeFormatter("epoch_millis", dateTimeFormatter, Locale.ROOT);, +        try {, +            formatter.parser().parseDateTime("1433144433");, +            fail("Expected IllegalArgumentException");, +        } catch (IllegalArgumentException e) {, +            assertThat(e.getMessage(), containsString("time_zone must be UTC"));, +        }, +    }, +]