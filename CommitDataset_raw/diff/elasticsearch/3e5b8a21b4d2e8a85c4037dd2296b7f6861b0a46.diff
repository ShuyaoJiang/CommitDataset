[+++ b/docs/reference/query-dsl/queries/template-query.asciidoc, +            "query": { "match": { "text": "{query_string}" }}},, +            "query": "{ \"match\": { \"text\": \"{query_string}\" }}}", <1>, +    "template": { "match": { "text": "{query_string}" }}},, +++ b/docs/reference/query-dsl/queries/template-query.asciidoc, +            "query": { "match": { "text": "{query_string}" }}},, +            "query": "{ \"match\": { \"text\": \"{query_string}\" }}}", <1>, +    "template": { "match": { "text": "{query_string}" }}},, +++ b/pom.xml, +        <lucene.snapshot.revision>1675363</lucene.snapshot.revision>, +                <phase>exec</phase>, +++ b/docs/reference/query-dsl/queries/template-query.asciidoc, +            "query": { "match": { "text": "{query_string}" }}},, +            "query": "{ \"match\": { \"text\": \"{query_string}\" }}}", <1>, +    "template": { "match": { "text": "{query_string}" }}},, +++ b/pom.xml, +        <lucene.snapshot.revision>1675363</lucene.snapshot.revision>, +                <phase>exec</phase>, +++ b/src/main/java/org/elasticsearch/action/ActionWriteResponse.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import java.util.Collections;, +        @Override, +        public String toString() {, +            return Strings.toString(this);, +        }, +, +++ b/docs/reference/query-dsl/queries/template-query.asciidoc, +            "query": { "match": { "text": "{query_string}" }}},, +            "query": "{ \"match\": { \"text\": \"{query_string}\" }}}", <1>, +    "template": { "match": { "text": "{query_string}" }}},, +++ b/pom.xml, +        <lucene.snapshot.revision>1675363</lucene.snapshot.revision>, +                <phase>exec</phase>, +++ b/src/main/java/org/elasticsearch/action/ActionWriteResponse.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import java.util.Collections;, +        @Override, +        public String toString() {, +            return Strings.toString(this);, +        }, +, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +            } else {, +                throw new ElasticsearchIllegalStateException("Unexpected index operation: " + item.request());, +    protected void shardOperationOnReplica(ShardId shardId, BulkShardRequest request) {, +                        Mapping update = index.parsedDoc().dynamicMappingsUpdate();, +                        if (update != null) {, +                            throw new RetryOnReplicaException(shardId, "Mappings are not available on the replica yet, triggered update: " + update);, +                        Mapping update = create.parsedDoc().dynamicMappingsUpdate();, +                        if (update != null) {, +                            throw new RetryOnReplicaException(shardId, "Mappings are not available on the replica yet, triggered update: " + update);, +            } else {, +                throw new ElasticsearchIllegalStateException("Unexpected index operation: " + item.request());, +++ b/docs/reference/query-dsl/queries/template-query.asciidoc, +            "query": { "match": { "text": "{query_string}" }}},, +            "query": "{ \"match\": { \"text\": \"{query_string}\" }}}", <1>, +    "template": { "match": { "text": "{query_string}" }}},, +++ b/pom.xml, +        <lucene.snapshot.revision>1675363</lucene.snapshot.revision>, +                <phase>exec</phase>, +++ b/src/main/java/org/elasticsearch/action/ActionWriteResponse.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import java.util.Collections;, +        @Override, +        public String toString() {, +            return Strings.toString(this);, +        }, +, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +            } else {, +                throw new ElasticsearchIllegalStateException("Unexpected index operation: " + item.request());, +    protected void shardOperationOnReplica(ShardId shardId, BulkShardRequest request) {, +                        Mapping update = index.parsedDoc().dynamicMappingsUpdate();, +                        if (update != null) {, +                            throw new RetryOnReplicaException(shardId, "Mappings are not available on the replica yet, triggered update: " + update);, +                        Mapping update = create.parsedDoc().dynamicMappingsUpdate();, +                        if (update != null) {, +                            throw new RetryOnReplicaException(shardId, "Mappings are not available on the replica yet, triggered update: " + update);, +            } else {, +                throw new ElasticsearchIllegalStateException("Unexpected index operation: " + item.request());, +++ b/src/main/java/org/elasticsearch/action/index/IndexResponse.java, +, +    @Override, +    public String toString() {, +        StringBuilder builder = new StringBuilder();, +        builder.append("IndexResponse[");, +        builder.append("index=").append(index);, +        builder.append(",type=").append(type);, +        builder.append(",id=").append(id);, +        builder.append(",version=").append(version);, +        builder.append(",created=").append(created);, +        builder.append(",shards=").append(getShardInfo());, +        return builder.append("]").toString();, +    }, +++ b/docs/reference/query-dsl/queries/template-query.asciidoc, +            "query": { "match": { "text": "{query_string}" }}},, +            "query": "{ \"match\": { \"text\": \"{query_string}\" }}}", <1>]