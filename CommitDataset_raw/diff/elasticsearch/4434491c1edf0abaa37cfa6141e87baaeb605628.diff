[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import org.elasticsearch.gradle.Version, +import org.elasticsearch.gradle.VersionProperties, +import org.gradle.api.InvalidUserDataException, +import org.gradle.api.Task, +import org.gradle.api.tasks.Copy, +class PluginBuildPlugin extends BuildPlugin {, +, +    public static final String PLUGIN_EXTENSION_NAME = 'esplugin', +    void apply(Project project) {, +, +        PluginPropertiesExtension extension = project.extensions.create(PLUGIN_EXTENSION_NAME, PluginPropertiesExtension, project), +            String name = extension.name, +            project.description = extension.description, +            configurePublishing(project, extension), +                    project.testClusters.integTest.module(, +                            project.file(project.tasks.bundlePlugin.archiveFile), +                    ), +, +                project.extensions.getByType(PluginPropertiesExtension).extendedPlugins.each { pluginName ->, +                    // Auto add dependent modules to the test cluster, +                    if (project.findProject(":modules:${pluginName}") != null) {, +                        project.testClusters.integTest.module(, +                                project.file(project.project(":modules:${pluginName}").tasks.bundlePlugin.archiveFile), +                        ), +                    }, +                }, +                addNoticeGeneration(project, extension), +        createBundleTasks(project, extension), +    private void configurePublishing(Project project, PluginPropertiesExtension extension) {, +        if (extension.hasClientJar) {, +            project.publishing.publications.nebula(MavenPublication).artifactId(extension.name + "-client"), +                project.publishing.publications.nebula(MavenPublication).artifactId(extension.name), +    private static void createBundleTasks(Project project, PluginPropertiesExtension extension) {, +        File templateFile = new File(project.buildDir, "templates/plugin-descriptor.properties"), +        // create tasks to build the properties file for this plugin, +        Task copyPluginPropertiesTemplate = project.tasks.create('copyPluginPropertiesTemplate') {, +            outputs.file(templateFile), +            doLast {, +                InputStream resourceTemplate = PluginBuildPlugin.getResourceAsStream("/${templateFile.name}"), +                templateFile.setText(resourceTemplate.getText('UTF-8'), 'UTF-8'), +            }, +        }, +, +        Copy buildProperties = project.tasks.create('pluginProperties', Copy) {, +            dependsOn(copyPluginPropertiesTemplate), +            from(templateFile), +            into("${project.buildDir}/generated-resources"), +        }, +, +        project.afterEvaluate {, +            // check require properties are set, +            if (extension.name == null) {, +                throw new InvalidUserDataException('name is a required setting for esplugin'), +            }, +            if (extension.description == null) {, +                throw new InvalidUserDataException('description is a required setting for esplugin'), +            }, +            if (extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin'), +            }, +, +            Map<String, String> properties = [, +                    'name': extension.name,, +                    'description': extension.description,, +                    'version': extension.version,, +                    'elasticsearchVersion': Version.fromString(VersionProperties.elasticsearch).toString(),, +                    'javaVersion': project.targetCompatibility as String,, +                    'classname': extension.classname,, +                    'extendedPlugins': extension.extendedPlugins.join(','),, +                    'hasNativeController': extension.hasNativeController,, +                    'requiresKeystore': extension.requiresKeystore, +            ], +, +            buildProperties.configure {, +                expand(properties), +                inputs.properties(properties), +            }, +        }, +        testSourceSet.output.dir(buildProperties.destinationDir, builtBy: buildProperties), +        Zip bundle = project.tasks.create(name: 'bundlePlugin', type: Zip) {, +            from buildProperties, +    protected void addNoticeGeneration(Project project, PluginPropertiesExtension extension) {, +        File licenseFile = extension.licenseFile, +        File noticeFile = extension.noticeFile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import org.elasticsearch.gradle.Version, +import org.elasticsearch.gradle.VersionProperties, +import org.gradle.api.InvalidUserDataException, +import org.gradle.api.Task, +import org.gradle.api.tasks.Copy, +class PluginBuildPlugin extends BuildPlugin {, +, +    public static final String PLUGIN_EXTENSION_NAME = 'esplugin', +    void apply(Project project) {, +, +        PluginPropertiesExtension extension = project.extensions.create(PLUGIN_EXTENSION_NAME, PluginPropertiesExtension, project), +            String name = extension.name, +            project.description = extension.description, +            configurePublishing(project, extension)]