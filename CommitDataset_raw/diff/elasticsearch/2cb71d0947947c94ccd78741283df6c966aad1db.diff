[+++ b/server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java, +import org.elasticsearch.Version;, +import java.util.Collection;, +import java.util.EnumSet;, +import java.util.HashSet;, +import java.util.Set;, +    public enum WildcardStates {, +        OPEN,, +        CLOSED;, +        public static final EnumSet<WildcardStates> NONE = EnumSet.noneOf(WildcardStates.class);, +        public static EnumSet<WildcardStates> parseParameter(Object value, EnumSet<WildcardStates> defaultStates) {, +            if (value == null) {, +                return defaultStates;, +            }, +, +            Set<WildcardStates> states = new HashSet<>();, +            String[] wildcards = nodeStringArrayValue(value);, +            for (String wildcard : wildcards) {, +                if ("open".equals(wildcard)) {, +                    states.add(OPEN);, +                } else if ("closed".equals(wildcard)) {, +                    states.add(CLOSED);, +                } else if ("none".equals(wildcard)) {, +                    states.clear();, +                } else if ("all".equals(wildcard)) {, +                    states.add(OPEN);, +                    states.add(CLOSED);, +                } else {, +                    throw new IllegalArgumentException("No valid expand wildcard value [" + wildcard + "]");, +                }, +            }, +, +            return states.isEmpty() ? NONE : EnumSet.copyOf(states);, +        }, +    }, +, +    public enum Option {, +        IGNORE_UNAVAILABLE,, +        IGNORE_ALIASES,, +        ALLOW_NO_INDICES,, +        FORBID_ALIASES_TO_MULTIPLE_INDICES,, +        FORBID_CLOSED_INDICES;, +, +        public static final EnumSet<Option> NONE = EnumSet.noneOf(Option.class);, +    }, +, +    public static final IndicesOptions STRICT_EXPAND_OPEN =, +        new IndicesOptions(EnumSet.of(Option.ALLOW_NO_INDICES), EnumSet.of(WildcardStates.OPEN));, +    public static final IndicesOptions LENIENT_EXPAND_OPEN =, +        new IndicesOptions(EnumSet.of(Option.ALLOW_NO_INDICES, Option.IGNORE_UNAVAILABLE), EnumSet.of(WildcardStates.OPEN));, +    public static final IndicesOptions STRICT_EXPAND_OPEN_CLOSED =, +        new IndicesOptions(EnumSet.of(Option.ALLOW_NO_INDICES), EnumSet.of(WildcardStates.OPEN, WildcardStates.CLOSED));, +    public static final IndicesOptions STRICT_EXPAND_OPEN_FORBID_CLOSED =, +        new IndicesOptions(EnumSet.of(Option.ALLOW_NO_INDICES, Option.FORBID_CLOSED_INDICES), EnumSet.of(WildcardStates.OPEN));, +    public static final IndicesOptions STRICT_SINGLE_INDEX_NO_EXPAND_FORBID_CLOSED =, +        new IndicesOptions(EnumSet.of(Option.FORBID_ALIASES_TO_MULTIPLE_INDICES, Option.FORBID_CLOSED_INDICES),, +            EnumSet.noneOf(WildcardStates.class));, +, +    private final EnumSet<Option> options;, +    private final EnumSet<WildcardStates> expandWildcards;, +, +    public IndicesOptions(EnumSet<Option> options, EnumSet<WildcardStates> expandWildcards) {, +        this.options = options;, +        this.expandWildcards = expandWildcards;, +    }, +, +    private IndicesOptions(Collection<Option> options, Collection<WildcardStates> expandWildcards) {, +        this(options.isEmpty() ? Option.NONE : EnumSet.copyOf(options),, +            expandWildcards.isEmpty() ? WildcardStates.NONE : EnumSet.copyOf(expandWildcards));, +    }, +, +    // Package visible for testing, +    static IndicesOptions fromByte(final byte id) {, +        // IGNORE_UNAVAILABLE = 1;, +        // ALLOW_NO_INDICES = 2;, +        // EXPAND_WILDCARDS_OPEN = 4;, +        // EXPAND_WILDCARDS_CLOSED = 8;, +        // FORBID_ALIASES_TO_MULTIPLE_INDICES = 16;, +        // FORBID_CLOSED_INDICES = 32;, +        // IGNORE_ALIASES = 64;, +, +        Set<Option> opts = new HashSet<>();, +        Set<WildcardStates> wildcards = new HashSet<>();, +        if ((id & 1) != 0) {, +            opts.add(Option.IGNORE_UNAVAILABLE);, +        }, +        if ((id & 2) != 0) {, +            opts.add(Option.ALLOW_NO_INDICES);, +        }, +        if ((id & 4) != 0) {, +            wildcards.add(WildcardStates.OPEN);, +        }, +        if ((id & 8) != 0) {, +            wildcards.add(WildcardStates.CLOSED);, +        }, +        if ((id & 16) != 0) {, +            opts.add(Option.FORBID_ALIASES_TO_MULTIPLE_INDICES);, +        }, +        if ((id & 32) != 0) {, +            opts.add(Option.FORBID_CLOSED_INDICES);]