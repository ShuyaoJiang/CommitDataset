[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.metrics.scripted.ScriptedMetricAggregatorBuilder;, +        registerAggregation(ScriptedMetricAggregatorBuilder::new, ScriptedMetricAggregatorBuilder::parse,, +                ScriptedMetricAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.metrics.scripted.ScriptedMetricAggregatorBuilder;, +        registerAggregation(ScriptedMetricAggregatorBuilder::new, ScriptedMetricAggregatorBuilder::parse,, +                ScriptedMetricAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +    protected AB doReadFrom(String name, StreamInput in) throws IOException {, +        throw new UnsupportedOperationException(); // NORELEASE remove before 5.0.0GA, +    }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.metrics.scripted.ScriptedMetricAggregatorBuilder;, +        registerAggregation(ScriptedMetricAggregatorBuilder::new, ScriptedMetricAggregatorBuilder::parse,, +                ScriptedMetricAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +    protected AB doReadFrom(String name, StreamInput in) throws IOException {, +        throw new UnsupportedOperationException(); // NORELEASE remove before 5.0.0GA, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/ScriptedMetricAggregatorBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.query.QueryParseContext;, +import org.elasticsearch.script.ScriptParameterParser;, +import org.elasticsearch.script.ScriptParameterParser.ScriptParameterValue;, +import org.elasticsearch.search.aggregations.AggregatorFactory;, +import java.util.HashSet;, +import java.util.Set;, +    public static final String NAME = InternalScriptedMetric.TYPE.name();, +    public static final ParseField AGGREGATION_NAME_FIELD = new ParseField(NAME);, +, +    private static final ParseField INIT_SCRIPT_FIELD = new ParseField("init_script");, +    private static final ParseField MAP_SCRIPT_FIELD = new ParseField("map_script");, +    private static final ParseField COMBINE_SCRIPT_FIELD = new ParseField("combine_script");, +    private static final ParseField REDUCE_SCRIPT_FIELD = new ParseField("reduce_script");, +    private static final ParseField PARAMS_FIELD = new ParseField("params");, +    private static final ParseField REDUCE_PARAMS_FIELD = new ParseField("reduce_params");, +     * Read from a stream., +     */, +    public ScriptedMetricAggregatorBuilder(StreamInput in) throws IOException {, +        super(in, InternalScriptedMetric.TYPE);, +        initScript = in.readOptionalStreamable(Script.SUPPLIER);, +        mapScript = in.readOptionalStreamable(Script.SUPPLIER);, +        combineScript = in.readOptionalStreamable(Script.SUPPLIER);, +        reduceScript = in.readOptionalStreamable(Script.SUPPLIER);, +        if (in.readBoolean()) {, +            params = in.readMap();, +        }, +    }, +, +    @Override, +    protected void doWriteTo(StreamOutput out) throws IOException {, +        out.writeOptionalStreamable(initScript);, +        out.writeOptionalStreamable(mapScript);, +        out.writeOptionalStreamable(combineScript);, +        out.writeOptionalStreamable(reduceScript);, +        boolean hasParams = params != null;, +        out.writeBoolean(hasParams);, +        if (hasParams) {, +            out.writeMap(params);, +        }, +    }, +, +    @Override, +    protected boolean usesNewStyleSerialization() {, +        return true;, +    }, +, +    /**, +            builder.field(INIT_SCRIPT_FIELD.getPreferredName(), initScript);, +            builder.field(MAP_SCRIPT_FIELD.getPreferredName(), mapScript);, +            builder.field(COMBINE_SCRIPT_FIELD.getPreferredName(), combineScript);, +            builder.field(REDUCE_SCRIPT_FIELD.getPreferredName(), reduceScript);, +            builder.field(PARAMS_FIELD.getPreferredName());, +    public static ScriptedMetricAggregatorBuilder parse(String aggregationName, XContentParser parser,, +            QueryParseContext context) throws IOException {, +        Script initScript = null;, +        Script mapScript = null;, +        Script combineScript = null;, +        Script reduceScript = null;, +        Map<String, Object> params = null;, +        Map<String, Object> reduceParams = null;, +        XContentParser.Token token;, +        String currentFieldName = null;, +        Set<String> scriptParameters = new HashSet<>();, +        scriptParameters.add(INIT_SCRIPT_FIELD.getPreferredName());, +        scriptParameters.add(MAP_SCRIPT_FIELD.getPreferredName());, +        scriptParameters.add(COMBINE_SCRIPT_FIELD.getPreferredName());, +        scriptParameters.add(REDUCE_SCRIPT_FIELD.getPreferredName());, +        ScriptParameterParser scriptParameterParser = new ScriptParameterParser(scriptParameters);, +, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();]