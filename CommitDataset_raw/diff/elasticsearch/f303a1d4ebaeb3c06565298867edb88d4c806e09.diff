[+++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java, +import org.elasticsearch.Version;, +    private Version version;, +, +        version = snapshot.version();, +     * Returns the version of elasticsearch that the snapshot was created with, +     *, +     * @return version of elasticsearch that the snapshot was created with, +     */, +    public Version version() {, +        return version;, +    }, +, +    /**, +        static final XContentBuilderString VERSION_ID = new XContentBuilderString("version_id");, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +        builder.field(Fields.VERSION_ID, version.id);, +        builder.field(Fields.VERSION, version.toString());, +        version = Version.readVersion(in);, +        Version.writeVersion(version, out);, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java, +import org.elasticsearch.Version;, +    private Version version;, +, +        version = snapshot.version();, +     * Returns the version of elasticsearch that the snapshot was created with, +     *, +     * @return version of elasticsearch that the snapshot was created with, +     */, +    public Version version() {, +        return version;, +    }, +, +    /**, +        static final XContentBuilderString VERSION_ID = new XContentBuilderString("version_id");, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +        builder.field(Fields.VERSION_ID, version.id);, +        builder.field(Fields.VERSION, version.toString());, +        version = Version.readVersion(in);, +        Version.writeVersion(version, out);, +++ b/core/src/test/java/org/elasticsearch/bwcompat/RestoreBackwardsCompatTests.java, +import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;, +import org.elasticsearch.snapshots.SnapshotInfo;, +        logger.info("--> get snapshot and check its version");, +        GetSnapshotsResponse getSnapshotsResponse = client().admin().cluster().prepareGetSnapshots(repo).setSnapshots(snapshot).get();, +        assertThat(getSnapshotsResponse.getSnapshots().size(), equalTo(1));, +        SnapshotInfo snapshotInfo = getSnapshotsResponse.getSnapshots().get(0);, +        assertThat(snapshotInfo.version().toString(), equalTo(version));, +, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java, +import org.elasticsearch.Version;, +    private Version version;, +, +        version = snapshot.version();, +     * Returns the version of elasticsearch that the snapshot was created with, +     *, +     * @return version of elasticsearch that the snapshot was created with, +     */, +    public Version version() {, +        return version;, +    }, +, +    /**, +        static final XContentBuilderString VERSION_ID = new XContentBuilderString("version_id");, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +        builder.field(Fields.VERSION_ID, version.id);, +        builder.field(Fields.VERSION, version.toString());, +        version = Version.readVersion(in);, +        Version.writeVersion(version, out);, +++ b/core/src/test/java/org/elasticsearch/bwcompat/RestoreBackwardsCompatTests.java, +import org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsResponse;, +import org.elasticsearch.snapshots.SnapshotInfo;, +        logger.info("--> get snapshot and check its version");, +        GetSnapshotsResponse getSnapshotsResponse = client().admin().cluster().prepareGetSnapshots(repo).setSnapshots(snapshot).get();, +        assertThat(getSnapshotsResponse.getSnapshots().size(), equalTo(1));, +        SnapshotInfo snapshotInfo = getSnapshotsResponse.getSnapshots().get(0);, +        assertThat(snapshotInfo.version().toString(), equalTo(version));, +, +++ b/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java, +import org.elasticsearch.Version;, +        SnapshotInfo snapshotInfo = client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get().getSnapshots().get(0);, +        assertThat(snapshotInfo.state(), equalTo(SnapshotState.SUCCESS));, +        assertThat(snapshotInfo.version(), equalTo(Version.CURRENT));, +++ b/core/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java, +import org.elasticsearch.Version;, +    private Version version;, +, +        version = snapshot.version();, +     * Returns the version of elasticsearch that the snapshot was created with, +     *, +     * @return version of elasticsearch that the snapshot was created with, +     */, +    public Version version() {, +        return version;, +    }, +, +    /**, +        static final XContentBuilderString VERSION_ID = new XContentBuilderString("version_id");, +        static final XContentBuilderString VERSION = new XContentBuilderString("version");, +        builder.field(Fields.VERSION_ID, version.id);]