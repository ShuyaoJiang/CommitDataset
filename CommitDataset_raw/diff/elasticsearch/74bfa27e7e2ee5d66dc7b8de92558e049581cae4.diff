[+++ b/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +    public boolean isEnableGeohashPrefix() {, +        return enableGeohashPrefix;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +    public boolean isEnableGeohashPrefix() {, +        return enableGeohashPrefix;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/query/FilterBuilders.java, +     * @param name The geo point field name., +    public static GeohashCellFilter.Builder geoHashCellFilter(String name) {, +        return new GeohashCellFilter.Builder(name);, +     * @param name The geo point field name., +    public static GeohashCellFilter.Builder geoHashCellFilter(String name, String geohash) {, +        return new GeohashCellFilter.Builder(name, geohash);, +     * @param name The geo point field name., +    public static GeohashCellFilter.Builder geoHashCellFilter(String name, GeoPoint point) {, +        return new GeohashCellFilter.Builder(name, point);, +     * @param name The geo point field name, +    public static GeohashCellFilter.Builder geoHashCellFilter(String name, String geohash, boolean neighbors) {, +        return new GeohashCellFilter.Builder(name, geohash, neighbors);, +++ b/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java, +    public boolean isEnableGeohashPrefix() {, +        return enableGeohashPrefix;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/query/FilterBuilders.java, +     * @param name The geo point field name., +    public static GeohashCellFilter.Builder geoHashCellFilter(String name) {, +        return new GeohashCellFilter.Builder(name);, +     * @param name The geo point field name., +    public static GeohashCellFilter.Builder geoHashCellFilter(String name, String geohash) {, +        return new GeohashCellFilter.Builder(name, geohash);, +     * @param name The geo point field name., +    public static GeohashCellFilter.Builder geoHashCellFilter(String name, GeoPoint point) {, +        return new GeohashCellFilter.Builder(name, point);, +     * @param name The geo point field name, +    public static GeohashCellFilter.Builder geoHashCellFilter(String name, String geohash, boolean neighbors) {, +        return new GeohashCellFilter.Builder(name, geohash, neighbors);, +++ b/src/main/java/org/elasticsearch/index/query/GeohashCellFilter.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.query;, +, +import org.apache.lucene.search.Filter;, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +import org.elasticsearch.ElasticSearchParseException;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.geo.GeoHashUtils;, +import org.elasticsearch.common.geo.GeoPoint;, +import org.elasticsearch.common.geo.GeoUtils;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.unit.DistanceUnit;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentParser.Token;, +import org.elasticsearch.index.mapper.FieldMapper;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.mapper.core.StringFieldMapper;, +import org.elasticsearch.index.mapper.geo.GeoPointFieldMapper;, +, +import java.io.IOException;, +import java.util.List;, +, +/**, + * A geohash cell filter that filters {@link GeoPoint}s by their geohashes. Basically the a, + * Geohash prefix is defined by the filter and all geohashes that are matching this, + * prefix will be returned. The <code>neighbors</code> flag allows to filter, + * geohashes that surround the given geohash. In general the neighborhood of a, + * geohash is defined by its eight adjacent cells.<br />, + * The structure of the {@link GeohashCellFilter} is defined as:, + * <pre>, + * &quot;geohash_bbox&quot; {, + *     &quot;field&quot;:&quot;location&quot;,, + *     &quot;geohash&quot;:&quot;u33d8u5dkx8k&quot;,, + *     &quot;neighbors&quot;:false, + * }, + * </pre>, + */, +public class GeohashCellFilter {]