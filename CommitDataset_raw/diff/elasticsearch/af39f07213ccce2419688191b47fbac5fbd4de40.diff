[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/Uid.java, +    public static String idFromUid(String uid) {, +        int delimiterIndex = uid.indexOf(DELIMITER); // type is not allowed to have # in it..., ids can, +        return uid.substring(delimiterIndex + 1);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/Uid.java, +    public static String idFromUid(String uid) {, +        int delimiterIndex = uid.indexOf(DELIMITER); // type is not allowed to have # in it..., ids can, +        return uid.substring(delimiterIndex + 1);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/IdFieldMapper.java, +        public static final Field.Index INDEX = Field.Index.NO;, +        this(Defaults.NAME, Defaults.INDEX_NAME, Defaults.INDEX);, +    protected IdFieldMapper(Field.Index index) {, +        this(Defaults.NAME, Defaults.INDEX_NAME, index);, +    }, +, +    protected IdFieldMapper(String name, String indexName, Field.Index index) {, +        this(name, indexName, index, Defaults.STORE, Defaults.TERM_VECTOR, Defaults.BOOST,, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/Uid.java, +    public static String idFromUid(String uid) {, +        int delimiterIndex = uid.indexOf(DELIMITER); // type is not allowed to have # in it..., ids can, +        return uid.substring(delimiterIndex + 1);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/IdFieldMapper.java, +        public static final Field.Index INDEX = Field.Index.NO;, +        this(Defaults.NAME, Defaults.INDEX_NAME, Defaults.INDEX);, +    protected IdFieldMapper(Field.Index index) {, +        this(Defaults.NAME, Defaults.INDEX_NAME, index);, +    }, +, +    protected IdFieldMapper(String name, String indexName, Field.Index index) {, +        this(name, indexName, index, Defaults.STORE, Defaults.TERM_VECTOR, Defaults.BOOST,, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDocumentMapper.java, +import org.apache.lucene.document.Field;, +import org.elasticsearch.common.Booleans;, +import org.elasticsearch.common.settings.Settings;, +        public Builder(String index, @Nullable Settings indexSettings, RootObjectMapper.Builder builder) {, +            if (indexSettings != null) {, +                String idIndexed = indexSettings.get("index.mapping._id.indexed");, +                if (idIndexed != null && Booleans.parseBoolean(idIndexed, false)) {, +                    idFieldMapper = new IdFieldMapper(Field.Index.NOT_ANALYZED);, +                }, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/Uid.java, +    public static String idFromUid(String uid) {, +        int delimiterIndex = uid.indexOf(DELIMITER); // type is not allowed to have # in it..., ids can, +        return uid.substring(delimiterIndex + 1);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/IdFieldMapper.java, +        public static final Field.Index INDEX = Field.Index.NO;, +        this(Defaults.NAME, Defaults.INDEX_NAME, Defaults.INDEX);, +    protected IdFieldMapper(Field.Index index) {, +        this(Defaults.NAME, Defaults.INDEX_NAME, index);, +    }, +, +    protected IdFieldMapper(String name, String indexName, Field.Index index) {, +        this(name, indexName, index, Defaults.STORE, Defaults.TERM_VECTOR, Defaults.BOOST,, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDocumentMapper.java, +import org.apache.lucene.document.Field;, +import org.elasticsearch.common.Booleans;, +import org.elasticsearch.common.settings.Settings;, +        public Builder(String index, @Nullable Settings indexSettings, RootObjectMapper.Builder builder) {, +            if (indexSettings != null) {, +                String idIndexed = indexSettings.get("index.mapping._id.indexed");, +                if (idIndexed != null && Booleans.parseBoolean(idIndexed, false)) {, +                    idFieldMapper = new IdFieldMapper(Field.Index.NOT_ANALYZED);, +                }, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDocumentMapperParser.java, +        XContentDocumentMapper.Builder docBuilder = doc(index.name(), indexSettings, (RootObjectMapper.Builder) rootObjectTypeParser.parse(type, mapping, parserContext));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/Uid.java, +    public static String idFromUid(String uid) {, +        int delimiterIndex = uid.indexOf(DELIMITER); // type is not allowed to have # in it..., ids can, +        return uid.substring(delimiterIndex + 1);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/IdFieldMapper.java, +        public static final Field.Index INDEX = Field.Index.NO;, +        this(Defaults.NAME, Defaults.INDEX_NAME, Defaults.INDEX);, +    protected IdFieldMapper(Field.Index index) {, +        this(Defaults.NAME, Defaults.INDEX_NAME, index);, +    }, +, +    protected IdFieldMapper(String name, String indexName, Field.Index index) {, +        this(name, indexName, index, Defaults.STORE, Defaults.TERM_VECTOR, Defaults.BOOST,, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDocumentMapper.java, +import org.apache.lucene.document.Field;, +import org.elasticsearch.common.Booleans;, +import org.elasticsearch.common.settings.Settings;, +        public Builder(String index, @Nullable Settings indexSettings, RootObjectMapper.Builder builder) {, +            if (indexSettings != null) {, +                String idIndexed = indexSettings.get("index.mapping._id.indexed");, +                if (idIndexed != null && Booleans.parseBoolean(idIndexed, false)) {, +                    idFieldMapper = new IdFieldMapper(Field.Index.NOT_ANALYZED);, +                }]