[+++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            generatePOMTask.ext.pomFileName = "${project.archivesBaseName}-${project.version}.pom", +                    rename { generatePOMTask.ext.pomFileName }, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            generatePOMTask.ext.pomFileName = "${project.archivesBaseName}-${project.version}.pom", +                    rename { generatePOMTask.ext.pomFileName }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenScmPlugin, +import org.gradle.api.publish.maven.tasks.GenerateMavenPom, +import org.gradle.jvm.tasks.Jar, +            // set teh project description so it will be picked up by publishing, +            project.description = project.pluginProperties.extension.description, +, +            configurePublishing(project), +    private void configurePublishing(Project project) {, +        // Only configure publishing if applied externally, +        if (project.pluginProperties.extension.hasClientJar) {, +            project.plugins.apply(MavenScmPlugin.class), +            // Only change Jar tasks, we don't want a -client zip so we can't change archivesBaseName, +            project.tasks.withType(Jar) {, +                baseName = baseName + "-client", +            }, +            // always configure publishing for client jars, +            project.plugins.apply(MavenScmPlugin.class), +            project.publishing.publications.nebula(MavenPublication).artifactId(, +                    project.pluginProperties.extension.name + "-client", +            ), +            project.tasks.withType(GenerateMavenPom.class) { GenerateMavenPom generatePOMTask ->, +                generatePOMTask.ext.pomFileName = "${project.archivesBaseName}-client-${project.version}.pom", +            }, +        } else {, +            project.plugins.withType(MavenPublishPlugin).whenPluginAdded {, +                project.publishing.publications.nebula(MavenPublication).artifactId(, +                        project.pluginProperties.extension.name, +                ), +            }, +, +        }, +    }, +, +        project.plugins.apply(MavenScmPlugin.class), +        project.description = project.pluginProperties.extension.description, +++ b/build.gradle, +final boolean bwc_tests_enabled = true, +final String bwc_tests_disabled_issue = "" /* place a PR link here when committing bwc changes */, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            generatePOMTask.ext.pomFileName = "${project.archivesBaseName}-${project.version}.pom", +                    rename { generatePOMTask.ext.pomFileName }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import nebula.plugin.publishing.maven.MavenScmPlugin, +import org.gradle.api.publish.maven.tasks.GenerateMavenPom, +import org.gradle.jvm.tasks.Jar, +            // set teh project description so it will be picked up by publishing, +            project.description = project.pluginProperties.extension.description, +, +            configurePublishing(project), +    private void configurePublishing(Project project) {, +        // Only configure publishing if applied externally, +        if (project.pluginProperties.extension.hasClientJar) {, +            project.plugins.apply(MavenScmPlugin.class), +            // Only change Jar tasks, we don't want a -client zip so we can't change archivesBaseName, +            project.tasks.withType(Jar) {, +                baseName = baseName + "-client", +            }, +            // always configure publishing for client jars, +            project.plugins.apply(MavenScmPlugin.class), +            project.publishing.publications.nebula(MavenPublication).artifactId(, +                    project.pluginProperties.extension.name + "-client", +            ), +            project.tasks.withType(GenerateMavenPom.class) { GenerateMavenPom generatePOMTask ->, +                generatePOMTask.ext.pomFileName = "${project.archivesBaseName}-client-${project.version}.pom", +            }, +        } else {, +            project.plugins.withType(MavenPublishPlugin).whenPluginAdded {, +                project.publishing.publications.nebula(MavenPublication).artifactId(, +                        project.pluginProperties.extension.name, +                ), +            }, +, +        }, +    }, +, +        project.plugins.apply(MavenScmPlugin.class), +        project.description = project.pluginProperties.extension.description, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/MLRequestConverters.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.protocol.xpack.ml.CloseJobRequest;, +    static Request closeJob(CloseJobRequest closeJobRequest) {, +        String endpoint = new EndpointBuilder(), +            .addPathPartAsIs("_xpack"), +            .addPathPartAsIs("ml")]