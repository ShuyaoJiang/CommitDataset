[+++ b/docs/CHANGELOG.asciidoc, +Do not ignore request analysis/similarity settings on index resize operations when the source index already contains such settings ({pull}30216[#30216]), +, +++ b/docs/CHANGELOG.asciidoc, +Do not ignore request analysis/similarity settings on index resize operations when the source index already contains such settings ({pull}30216[#30216]), +, +++ b/docs/reference/indices/shrink-index.asciidoc, +NOTE: Mappings may not be specified in the `_shrink` request., +, +NOTE: By default, with the exception of `index.analysis`, `index.similarity`, and `index.sort` settings, index settings on the source, +index are not copied during a shrink operation., +++ b/docs/CHANGELOG.asciidoc, +Do not ignore request analysis/similarity settings on index resize operations when the source index already contains such settings ({pull}30216[#30216]), +, +++ b/docs/reference/indices/shrink-index.asciidoc, +NOTE: Mappings may not be specified in the `_shrink` request., +, +NOTE: By default, with the exception of `index.analysis`, `index.similarity`, and `index.sort` settings, index settings on the source, +index are not copied during a shrink operation., +++ b/docs/reference/indices/split-index.asciidoc, +NOTE: Mappings may not be specified in the `_split` request., +, +NOTE: By default, with the exception of `index.analysis`, `index.similarity`, and `index.sort` settings, index settings on the source, +index are not copied during a shrink operation., +++ b/docs/CHANGELOG.asciidoc, +Do not ignore request analysis/similarity settings on index resize operations when the source index already contains such settings ({pull}30216[#30216]), +, +++ b/docs/reference/indices/shrink-index.asciidoc, +NOTE: Mappings may not be specified in the `_shrink` request., +, +NOTE: By default, with the exception of `index.analysis`, `index.similarity`, and `index.sort` settings, index settings on the source, +index are not copied during a shrink operation., +++ b/docs/reference/indices/split-index.asciidoc, +NOTE: Mappings may not be specified in the `_split` request., +, +NOTE: By default, with the exception of `index.analysis`, `index.similarity`, and `index.sort` settings, index settings on the source, +index are not copied during a shrink operation., +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.common.settings.Setting;, +        final Predicate<String> sourceSettingsPredicate =, +                (s) -> (s.startsWith("index.similarity.") || s.startsWith("index.analysis.") || s.startsWith("index.sort.")), +                        && indexSettingsBuilder.keys().contains(s) == false;, +++ b/docs/CHANGELOG.asciidoc, +Do not ignore request analysis/similarity settings on index resize operations when the source index already contains such settings ({pull}30216[#30216]), +, +++ b/docs/reference/indices/shrink-index.asciidoc, +NOTE: Mappings may not be specified in the `_shrink` request., +, +NOTE: By default, with the exception of `index.analysis`, `index.similarity`, and `index.sort` settings, index settings on the source, +index are not copied during a shrink operation., +++ b/docs/reference/indices/split-index.asciidoc, +NOTE: Mappings may not be specified in the `_split` request., +, +NOTE: By default, with the exception of `index.analysis`, `index.similarity`, and `index.sort` settings, index settings on the source, +index are not copied during a shrink operation., +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.common.settings.Setting;, +        final Predicate<String> sourceSettingsPredicate =, +                (s) -> (s.startsWith("index.similarity.") || s.startsWith("index.analysis.") || s.startsWith("index.sort.")), +                        && indexSettingsBuilder.keys().contains(s) == false;, +++ b/server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexServiceTests.java, +import static org.hamcrest.Matchers.equalTo;, +                .put("index.analysis.analyzer.default.tokenizer", "keyword"), +        {, +            final Settings.Builder builder = Settings.builder();, +            MetaDataCreateIndexService.prepareResizeIndexSettings(, +                    clusterState,, +                    Collections.emptySet(),, +                    builder,, +                    clusterState.metaData().index(indexName).getIndex(),, +                    "target",, +                    ResizeType.SHRINK);, +            final Settings settings = builder.build();, +            assertThat("similarity settings must be copied", settings.get("index.similarity.default.type"), equalTo("BM25"));, +            assertThat(, +                    "analysis settings must be copied", settings.get("index.analysis.analyzer.default.tokenizer"), equalTo("keyword"));, +            assertThat(settings.get("index.routing.allocation.initial_recovery._id"), equalTo("node1"));, +            assertThat(settings.get("index.allocation.max_retries"), equalTo("1"));, +            assertThat(settings.getAsVersion("index.version.created", null), equalTo(version));, +            assertThat(settings.getAsVersion("index.version.upgraded", null), equalTo(upgraded));, +        }, +, +        // analysis settings from the request are not overwritten, +        {, +            final Settings.Builder builder = Settings.builder();, +            builder.put("index.number_of_shards", 1);, +            builder.put("index.analysis.analyzer.default.tokenizer", "whitespace");, +            MetaDataCreateIndexService.prepareResizeIndexSettings(, +                    clusterState,, +                    Collections.emptySet(),, +                    builder,, +                    clusterState.metaData().index(indexName).getIndex(),, +                    "target",, +                    ResizeType.SHRINK);, +            final Settings settings = builder.build();, +            assertThat(, +                    "analysis settings are not overwritten",, +                    settings.get("index.analysis.analyzer.default.tokenizer"),, +                    equalTo("whitespace"));, +        }]