[+++ b/server/src/main/java/org/elasticsearch/cluster/DiffableUtils.java, +                if(valueSerializer.supportsVersion(entry.getValue(), version)) {, +    }, +++ b/server/src/main/java/org/elasticsearch/cluster/DiffableUtils.java, +                if(valueSerializer.supportsVersion(entry.getValue(), version)) {, +    }, +++ b/server/src/test/java/org/elasticsearch/cluster/serialization/ClusterSerializationTests.java, +import org.elasticsearch.cluster.AbstractNamedDiffable;, +import org.elasticsearch.cluster.ClusterState.Custom;, +import org.elasticsearch.cluster.NamedDiff;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import java.util.List;, +, +    public static class TestCustomOne extends AbstractNamedDiffable<Custom> implements Custom {, +, +        public static final String TYPE = "test_custom_one";, +        private final String strObject;, +, +        public TestCustomOne(String strObject) {, +            this.strObject = strObject;, +        }, +, +        public TestCustomOne(StreamInput in) throws IOException {, +            this.strObject = in.readString();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeString(strObject);, +        }, +, +        @Override, +        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +            builder.startObject();, +            {, +                builder.field("custom_string_object", strObject);, +            }, +            builder.endObject();, +            return builder;, +        }, +, +        @Override, +        public String getWriteableName() {, +            return TYPE;, +        }, +, +        public static NamedDiff<Custom> readDiffFrom(StreamInput in) throws IOException {, +            return readDiffFrom(Custom.class, TYPE, in);, +        }, +, +        @Override, +        public Version getMinimalSupportedVersion() {, +            return Version.CURRENT;, +        }, +, +    }, +, +    public static class TestCustomTwo extends AbstractNamedDiffable<Custom>  implements Custom {, +, +        public static final String TYPE = "test_custom_two";, +        private final Integer intObject;, +, +        public TestCustomTwo(Integer intObject) {, +            this.intObject = intObject;, +        }, +, +        public TestCustomTwo(StreamInput in) throws IOException {, +            this.intObject = in.readInt();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeInt(intObject);, +        }, +, +        @Override, +        public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +            builder.startObject();, +            {, +                builder.field("custom_integer_object", intObject);, +            }, +            builder.endObject();, +            return builder;, +        }, +, +        @Override, +        public String getWriteableName() {, +            return TYPE;, +        }, +, +        public static NamedDiff<Custom> readDiffFrom(StreamInput in) throws IOException {, +            return readDiffFrom(Custom.class, TYPE, in);, +        }, +, +        @Override, +        public Version getMinimalSupportedVersion() {, +            return Version.CURRENT.minimumCompatibilityVersion();, +        }, +]