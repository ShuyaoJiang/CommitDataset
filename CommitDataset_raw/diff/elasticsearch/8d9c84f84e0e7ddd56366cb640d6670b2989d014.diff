[+++ b/src/main/java/org/elasticsearch/common/inject/InheritingState.java, +import com.google.common.collect.ImmutableSet;, +import org.elasticsearch.common.inject.internal.*;, +import org.elasticsearch.common.inject.spi.InjectionPoint;, +    @Override, +    public void makeAllBindingsToEagerSingletons(Injector injector) {, +        Map<Key<?>, Binding<?>> x = Maps.newLinkedHashMap();, +        for (Map.Entry<Key<?>, Binding<?>> entry : this.explicitBindingsMutable.entrySet()) {, +            Key key = entry.getKey();, +            BindingImpl<?> binding = (BindingImpl<?>) entry.getValue();, +            Object value = binding.getProvider().get();, +            x.put(key, new InstanceBindingImpl<Object>(injector, key, SourceProvider.UNKNOWN_SOURCE, new InternalFactory.Instance(value), ImmutableSet.<InjectionPoint>of(), value));, +        }, +        this.explicitBindingsMutable.clear();, +        this.explicitBindingsMutable.putAll(x);, +    }, +, +++ b/src/main/java/org/elasticsearch/common/inject/InheritingState.java, +import com.google.common.collect.ImmutableSet;, +import org.elasticsearch.common.inject.internal.*;, +import org.elasticsearch.common.inject.spi.InjectionPoint;, +    @Override, +    public void makeAllBindingsToEagerSingletons(Injector injector) {, +        Map<Key<?>, Binding<?>> x = Maps.newLinkedHashMap();, +        for (Map.Entry<Key<?>, Binding<?>> entry : this.explicitBindingsMutable.entrySet()) {, +            Key key = entry.getKey();, +            BindingImpl<?> binding = (BindingImpl<?>) entry.getValue();, +            Object value = binding.getProvider().get();, +            x.put(key, new InstanceBindingImpl<Object>(injector, key, SourceProvider.UNKNOWN_SOURCE, new InternalFactory.Instance(value), ImmutableSet.<InjectionPoint>of(), value));, +        }, +        this.explicitBindingsMutable.clear();, +        this.explicitBindingsMutable.putAll(x);, +    }, +, +++ b/src/main/java/org/elasticsearch/common/inject/InjectorImpl.java, +    boolean readOnly;, +    BindingsMultimap bindingsMultimap = new BindingsMultimap();, +        if (parent != null && !parent.readOnly /* ES: don't check on parent if its read only, its already created all the bindings it can*/) {, +        // ES: optimize for a common case of read only instance getting from the parent..., +        if (factory instanceof InternalFactory.Instance) {, +            return new Provider<T>() {, +                @Override, +                public T get() {, +                    try {, +                        return (T) ((InternalFactory.Instance) factory).get(null, null, null);, +                    } catch (ErrorsException e) {, +                        // ignore, +                    }, +                    // should never happen..., +                    assert false;, +                    return null;, +                }, +            };, +        }, +        final Dependency<T> dependency = Dependency.get(key);, +, +    // ES_GUICE: make all registered bindings act as eager singletons, +    public void readOnlyAllSingletons() {, +        readOnly = true;, +        state.makeAllBindingsToEagerSingletons(this);, +        bindingsMultimap = new BindingsMultimap();, +        // reindex the bindings, +        index();, +    }, +++ b/src/main/java/org/elasticsearch/common/inject/InheritingState.java, +import com.google.common.collect.ImmutableSet;, +import org.elasticsearch.common.inject.internal.*;, +import org.elasticsearch.common.inject.spi.InjectionPoint;, +    @Override, +    public void makeAllBindingsToEagerSingletons(Injector injector) {, +        Map<Key<?>, Binding<?>> x = Maps.newLinkedHashMap();, +        for (Map.Entry<Key<?>, Binding<?>> entry : this.explicitBindingsMutable.entrySet()) {, +            Key key = entry.getKey();, +            BindingImpl<?> binding = (BindingImpl<?>) entry.getValue();, +            Object value = binding.getProvider().get();, +            x.put(key, new InstanceBindingImpl<Object>(injector, key, SourceProvider.UNKNOWN_SOURCE, new InternalFactory.Instance(value), ImmutableSet.<InjectionPoint>of(), value));, +        }, +        this.explicitBindingsMutable.clear();, +        this.explicitBindingsMutable.putAll(x);, +    }, +, +++ b/src/main/java/org/elasticsearch/common/inject/InjectorImpl.java, +    boolean readOnly;, +    BindingsMultimap bindingsMultimap = new BindingsMultimap();, +        if (parent != null && !parent.readOnly /* ES: don't check on parent if its read only, its already created all the bindings it can*/) {, +        // ES: optimize for a common case of read only instance getting from the parent..., +        if (factory instanceof InternalFactory.Instance) {, +            return new Provider<T>() {, +                @Override, +                public T get() {, +                    try {, +                        return (T) ((InternalFactory.Instance) factory).get(null, null, null);, +                    } catch (ErrorsException e) {, +                        // ignore, +                    }, +                    // should never happen..., +                    assert false;, +                    return null;, +                }, +            };]