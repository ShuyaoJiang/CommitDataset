[+++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/input/ExecutableInput.java, +    protected ExecutableInput(I input) {, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/input/ExecutableInput.java, +    protected ExecutableInput(I input) {, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +        transformFactories.put(ScriptTransform.TYPE, new ScriptTransformFactory(scriptService));, +        actionFactoryMap.put(WebhookAction.TYPE, new WebhookActionFactory(httpClient, templateEngine));, +        actionFactoryMap.put(HipChatAction.TYPE, new HipChatActionFactory(templateEngine, hipChatService));, +        actionFactoryMap.put(JiraAction.TYPE, new JiraActionFactory(templateEngine, jiraService));, +        actionFactoryMap.put(SlackAction.TYPE, new SlackActionFactory(templateEngine, slackService));, +        actionFactoryMap.put(PagerDutyAction.TYPE, new PagerDutyActionFactory(templateEngine, pagerDutyService));, +        inputFactories.put(SimpleInput.TYPE, new SimpleInputFactory());, +        inputFactories.put(NoneInput.TYPE, new NoneInputFactory());, +        inputFactories.put(TransformInput.TYPE, new TransformInputFactory(transformRegistry));, +        final InputRegistry inputRegistry = new InputRegistry(inputFactories);, +        inputFactories.put(ChainInput.TYPE, new ChainInputFactory(inputRegistry));, +        return new AsyncTriggerEventConsumer(executionService);, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/input/ExecutableInput.java, +    protected ExecutableInput(I input) {, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +        transformFactories.put(ScriptTransform.TYPE, new ScriptTransformFactory(scriptService));, +        actionFactoryMap.put(WebhookAction.TYPE, new WebhookActionFactory(httpClient, templateEngine));, +        actionFactoryMap.put(HipChatAction.TYPE, new HipChatActionFactory(templateEngine, hipChatService));, +        actionFactoryMap.put(JiraAction.TYPE, new JiraActionFactory(templateEngine, jiraService));, +        actionFactoryMap.put(SlackAction.TYPE, new SlackActionFactory(templateEngine, slackService));, +        actionFactoryMap.put(PagerDutyAction.TYPE, new PagerDutyActionFactory(templateEngine, pagerDutyService));, +        inputFactories.put(SimpleInput.TYPE, new SimpleInputFactory());, +        inputFactories.put(NoneInput.TYPE, new NoneInputFactory());, +        inputFactories.put(TransformInput.TYPE, new TransformInputFactory(transformRegistry));, +        final InputRegistry inputRegistry = new InputRegistry(inputFactories);, +        inputFactories.put(ChainInput.TYPE, new ChainInputFactory(inputRegistry));, +        return new AsyncTriggerEventConsumer(executionService);, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/email/EmailActionFactory.java, +import org.apache.logging.log4j.LogManager;, +        super(LogManager.getLogger(ExecutableEmailAction.class));, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/input/ExecutableInput.java, +    protected ExecutableInput(I input) {, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +        transformFactories.put(ScriptTransform.TYPE, new ScriptTransformFactory(scriptService));, +        actionFactoryMap.put(WebhookAction.TYPE, new WebhookActionFactory(httpClient, templateEngine));, +        actionFactoryMap.put(HipChatAction.TYPE, new HipChatActionFactory(templateEngine, hipChatService));, +        actionFactoryMap.put(JiraAction.TYPE, new JiraActionFactory(templateEngine, jiraService));, +        actionFactoryMap.put(SlackAction.TYPE, new SlackActionFactory(templateEngine, slackService));, +        actionFactoryMap.put(PagerDutyAction.TYPE, new PagerDutyActionFactory(templateEngine, pagerDutyService));, +        inputFactories.put(SimpleInput.TYPE, new SimpleInputFactory());, +        inputFactories.put(NoneInput.TYPE, new NoneInputFactory());, +        inputFactories.put(TransformInput.TYPE, new TransformInputFactory(transformRegistry));, +        final InputRegistry inputRegistry = new InputRegistry(inputFactories);, +        inputFactories.put(ChainInput.TYPE, new ChainInputFactory(inputRegistry));, +        return new AsyncTriggerEventConsumer(executionService);, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/email/EmailActionFactory.java, +import org.apache.logging.log4j.LogManager;, +        super(LogManager.getLogger(ExecutableEmailAction.class));, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/hipchat/HipChatActionFactory.java, +import org.apache.logging.log4j.LogManager;, +    public HipChatActionFactory(TextTemplateEngine templateEngine, HipChatService hipchatService) {, +        super(LogManager.getLogger(ExecutableHipChatAction.class));, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/input/ExecutableInput.java, +    protected ExecutableInput(I input) {, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +        transformFactories.put(ScriptTransform.TYPE, new ScriptTransformFactory(scriptService));, +        actionFactoryMap.put(WebhookAction.TYPE, new WebhookActionFactory(httpClient, templateEngine));, +        actionFactoryMap.put(HipChatAction.TYPE, new HipChatActionFactory(templateEngine, hipChatService));, +        actionFactoryMap.put(JiraAction.TYPE, new JiraActionFactory(templateEngine, jiraService));, +        actionFactoryMap.put(SlackAction.TYPE, new SlackActionFactory(templateEngine, slackService));, +        actionFactoryMap.put(PagerDutyAction.TYPE, new PagerDutyActionFactory(templateEngine, pagerDutyService));, +        inputFactories.put(SimpleInput.TYPE, new SimpleInputFactory());, +        inputFactories.put(NoneInput.TYPE, new NoneInputFactory());, +        inputFactories.put(TransformInput.TYPE, new TransformInputFactory(transformRegistry));, +        final InputRegistry inputRegistry = new InputRegistry(inputFactories);, +        inputFactories.put(ChainInput.TYPE, new ChainInputFactory(inputRegistry));, +        return new AsyncTriggerEventConsumer(executionService);, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/email/EmailActionFactory.java, +import org.apache.logging.log4j.LogManager;, +        super(LogManager.getLogger(ExecutableEmailAction.class));, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/hipchat/HipChatActionFactory.java, +import org.apache.logging.log4j.LogManager;, +    public HipChatActionFactory(TextTemplateEngine templateEngine, HipChatService hipchatService) {, +        super(LogManager.getLogger(ExecutableHipChatAction.class));, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/actions/index/IndexActionFactory.java, +import org.apache.logging.log4j.LogManager;, +        super(LogManager.getLogger(IndexActionFactory.class));, +++ b/server/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/input/ExecutableInput.java, +    protected ExecutableInput(I input) {, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +        transformFactories.put(ScriptTransform.TYPE, new ScriptTransformFactory(scriptService));, +        actionFactoryMap.put(WebhookAction.TYPE, new WebhookActionFactory(httpClient, templateEngine));, +        actionFactoryMap.put(HipChatAction.TYPE, new HipChatActionFactory(templateEngine, hipChatService));, +        actionFactoryMap.put(JiraAction.TYPE, new JiraActionFactory(templateEngine, jiraService));, +        actionFactoryMap.put(SlackAction.TYPE, new SlackActionFactory(templateEngine, slackService));, +        actionFactoryMap.put(PagerDutyAction.TYPE, new PagerDutyActionFactory(templateEngine, pagerDutyService));, +        inputFactories.put(SimpleInput.TYPE, new SimpleInputFactory());, +        inputFactories.put(NoneInput.TYPE, new NoneInputFactory());]