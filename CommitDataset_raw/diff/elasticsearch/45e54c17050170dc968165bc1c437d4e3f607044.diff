[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +import org.elasticsearch.cluster.ClusterChangedEvent;, +import org.elasticsearch.cluster.TimeoutClusterStateListener;, +import org.elasticsearch.common.unit.TimeValue;, +        innerExecute(request, listener, false);, +    }, +, +    private void innerExecute(final Request request, final ActionListener<Response> listener, final boolean retrying) {, +                @Override public void handleException(final RemoteTransportException exp) {, +                    if (retrying) {, +                    } else {, +                        if (exp.unwrapCause() instanceof ConnectTransportException) {, +                            // we want to retry here a bit to see if a new master is elected, +                            clusterService.add(TimeValue.timeValueSeconds(30), new TimeoutClusterStateListener() {, +                                @Override public void postAdded() {, +                                    ClusterState clusterStateV2 = clusterService.state();, +                                    if (!clusterState.nodes().masterNodeId().equals(clusterStateV2.nodes().masterNodeId())) {, +                                        // master changes while adding the listener, try here , +                                        clusterService.remove(this);, +                                        innerExecute(request, listener, true);, +                                    }, +                                }, +, +                                @Override public void onClose() {, +                                    clusterService.remove(this);, +                                    listener.onFailure(new ElasticSearchIllegalStateException("node is shutting down"));, +                                }, +, +                                @Override public void onTimeout(TimeValue timeout) {, +                                    clusterService.remove(this);, +                                    listener.onFailure(exp);, +                                }, +, +                                @Override public void clusterChanged(ClusterChangedEvent event) {, +                                    if (event.nodesDelta().masterNodeChanged()) {, +                                        clusterService.remove(this);, +                                        innerExecute(request, listener, true);, +                                    }, +                                }, +                            });, +                        } else {, +                            listener.onFailure(exp);, +                        }, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +import org.elasticsearch.cluster.ClusterChangedEvent;, +import org.elasticsearch.cluster.TimeoutClusterStateListener;, +import org.elasticsearch.common.unit.TimeValue;, +        innerExecute(request, listener, false);, +    }, +, +    private void innerExecute(final Request request, final ActionListener<Response> listener, final boolean retrying) {, +                @Override public void handleException(final RemoteTransportException exp) {, +                    if (retrying) {, +                    } else {, +                        if (exp.unwrapCause() instanceof ConnectTransportException) {, +                            // we want to retry here a bit to see if a new master is elected, +                            clusterService.add(TimeValue.timeValueSeconds(30), new TimeoutClusterStateListener() {, +                                @Override public void postAdded() {, +                                    ClusterState clusterStateV2 = clusterService.state();, +                                    if (!clusterState.nodes().masterNodeId().equals(clusterStateV2.nodes().masterNodeId())) {, +                                        // master changes while adding the listener, try here , +                                        clusterService.remove(this);, +                                        innerExecute(request, listener, true);, +                                    }, +                                }, +, +                                @Override public void onClose() {, +                                    clusterService.remove(this);, +                                    listener.onFailure(new ElasticSearchIllegalStateException("node is shutting down"));, +                                }, +, +                                @Override public void onTimeout(TimeValue timeout) {, +                                    clusterService.remove(this);, +                                    listener.onFailure(exp);, +                                }, +, +                                @Override public void clusterChanged(ClusterChangedEvent event) {, +                                    if (event.nodesDelta().masterNodeChanged()) {, +                                        clusterService.remove(this);, +                                        innerExecute(request, listener, true);, +                                    }, +                                }, +                            });, +                        } else {, +                            listener.onFailure(exp);, +                        }, +                    }, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/recovery/FullRollingRestartTests.java, +        closeNode("node2");, +        // make sure the cluster state is green, and all has been recovered, +        assertThat(client("node5").admin().cluster().prepareHealth().setTimeout("1m").setWaitForGreenStatus().execute().actionGet().status(), equalTo(ClusterHealthStatus.GREEN));, +, +        // make sure the cluster state is green, and all has been recovered, +        assertThat(client("node5").admin().cluster().prepareHealth().setTimeout("1m").setWaitForGreenStatus().execute().actionGet().status(), equalTo(ClusterHealthStatus.GREEN));]