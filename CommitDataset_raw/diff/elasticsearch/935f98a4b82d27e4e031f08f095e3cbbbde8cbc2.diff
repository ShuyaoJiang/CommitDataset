[+++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +        if (!clusterService.state().blocks().hasGlobalBlock(GatewayService.STATE_NOT_RECOVERED_BLOCK)) {, +    }, +                            DiscoveryNode masterNode;, +                            if ((masterNode = clusterService.state().nodes().masterNode()) != null) {, +                                transportService.sendRequest(masterNode,, +                            } else {, +                                // could not sent register trial license request to master, +                            }, +++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +        if (!clusterService.state().blocks().hasGlobalBlock(GatewayService.STATE_NOT_RECOVERED_BLOCK)) {, +    }, +                            DiscoveryNode masterNode;, +                            if ((masterNode = clusterService.state().nodes().masterNode()) != null) {, +                                transportService.sendRequest(masterNode,, +                            } else {, +                                // could not sent register trial license request to master, +                            }, +++ b/src/test/java/org/elasticsearch/license/plugin/LicensesServiceTests.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.junit.*;, +import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope.TEST;, +@ClusterScope(scope = TEST, numDataNodes = 10), +    private static String node = null;, +    @Before, +    public void beforeTest() throws Exception {, +, +        DiscoveryNodes discoveryNodes = LicensesServiceTests.masterClusterService().state().getNodes();, +        Set<String> dataNodeSet = new HashSet<>();, +        for(DiscoveryNode discoveryNode : discoveryNodes) {, +            if (discoveryNode.dataNode()) {, +                dataNodeSet.add(discoveryNode.getName());, +            }, +        }, +        String[] dataNodes = dataNodeSet.toArray(new String[dataNodeSet.size()]);, +        node = dataNodes[randomIntBetween(0, dataNodes.length - 1)];, +        LicensesManagerService licensesManagerService = masterLicensesManagerService();, +        LicensesManagerService licensesManagerService = masterLicensesManagerService();, +        LicensesManagerService licensesManagerService = masterLicensesManagerService();, +    @Test, +                logger.info("onEnabled called from LicensesClientService");, +                logger.info("onEnabled called from LicensesClientService");, +    @Test, +        LicensesManagerService masterLicensesManagerService = masterLicensesManagerService();, +        testLicenseClientListener.shouldBeEnabled.set(true);, +        masterLicensesManagerService.registerLicenses(new LicensesService.PutLicenseRequestHolder(new PutLicenseRequest().licenses(licenses), "test"), new ActionListener<ClusterStateUpdateResponse>() {, +        assertTrue(managerService.enabledFeatures().contains("shield"));, +    private LicensesManagerService masterLicensesManagerService() {, +    private LicensesManagerService licensesManagerService() {, +        return internalCluster().getInstance(LicensesManagerService.class, node);, +    }, +, +        return internalCluster().getInstance(LicensesClientService.class, node);, +    private static ClusterService masterClusterService() {, +        LicensesService masterService = clients.getInstance(LicensesService.class, clients.getMasterName());, +        masterService.clear();, +        if (node != null) {, +            LicensesService nodeService = clients.getInstance(LicensesService.class, node);, +            nodeService.clear();, +        }]