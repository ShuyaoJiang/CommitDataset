[+++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java, +                    decodeAndValidateToken(token, ActionListener.wrap(listener::onResponse, e -> {, +                        if (e instanceof IOException) {, +                            // could happen with a token that is not ours, +                            logger.debug("invalid token", e);, +                            listener.onResponse(null);, +                        } else {, +                            listener.onFailure(e);, +                        }, +                    }));, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java, +                    decodeAndValidateToken(token, ActionListener.wrap(listener::onResponse, e -> {, +                        if (e instanceof IOException) {, +                            // could happen with a token that is not ours, +                            logger.debug("invalid token", e);, +                            listener.onResponse(null);, +                        } else {, +                            listener.onFailure(e);, +                        }, +                    }));, +++ b/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/AuthenticationServiceTests.java, +            }, e -> {, +                if (e instanceof IllegalStateException) {, +                    assertThat(e.getMessage(), containsString("array length must be <= to " + ArrayUtil.MAX_ARRAY_LENGTH  + " but was: "));, +                    latch.countDown();, +                } else if (e instanceof NegativeArraySizeException) {, +                    assertThat(e.getMessage(), containsString("array size must be positive but was: "));, +                    latch.countDown();, +                } else {, +                    logger.error("unexpected exception", e);, +                    latch.countDown();, +                    fail("unexpected exception: " + e.getMessage());, +                }, +            }));]