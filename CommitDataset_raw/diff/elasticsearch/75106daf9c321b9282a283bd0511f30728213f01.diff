[+++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +    PercolateShardRequest(ShardId shardId, OriginalIndices originalIndices) {, +    void documentType(String documentType) {, +    void source(BytesReference source) {, +    void docSource(BytesReference docSource) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +    PercolateShardRequest(ShardId shardId, OriginalIndices originalIndices) {, +    void documentType(String documentType) {, +    void source(BytesReference source) {, +    void docSource(BytesReference docSource) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +import org.apache.lucene.util.BytesRef;, +    private static final BytesRef[] EMPTY_MATCHES = new BytesRef[0];, +    private static final float[] EMPTY_SCORES = new float[0];, +    private static final List<Map<String, HighlightField>> EMPTY_HL = Collections.emptyList();, +, +    private long count;, +    private float[] scores;, +    private BytesRef[] matches;, +    private List<Map<String, HighlightField>> hls;, +    private byte percolatorTypeId;, +        hls = new ArrayList<>();, +    public PercolateShardResponse(BytesRef[] matches, List<Map<String, HighlightField>> hls, long count, float[] scores, PercolateContext context, ShardId shardId) {, +        super(shardId);, +        this.matches = matches;, +        this.count = count;, +        this.scores = scores;, +        this.percolatorTypeId = context.percolatorTypeId;, +    public PercolateShardResponse(BytesRef[] matches, long count, float[] scores, PercolateContext context, ShardId shardId) {, +        this(matches, EMPTY_HL, count, scores, context, shardId);, +    public PercolateShardResponse(BytesRef[] matches, List<Map<String, HighlightField>> hls, long count, PercolateContext context, ShardId shardId) {, +        this(matches, hls, count, EMPTY_SCORES, context, shardId);, +    }, +, +    public PercolateShardResponse(long count, PercolateContext context, ShardId shardId) {, +        this(EMPTY_MATCHES, EMPTY_HL, count, EMPTY_SCORES, context, shardId);, +    }, +, +    public PercolateShardResponse(PercolateContext context, ShardId shardId) {, +        this(EMPTY_MATCHES, EMPTY_HL, 0, EMPTY_SCORES, context, shardId);, +    }, +, +    public BytesRef[] matches() {, +        return matches;, +    }, +, +    public float[] scores() {, +        return scores;, +    }, +, +    public long count() {, +        return count;, +    public List<Map<String, HighlightField>> hls() {, +    public byte percolatorTypeId() {, +        return percolatorTypeId;, +        return percolatorTypeId == 0x00;, +        percolatorTypeId = in.readByte();, +        count = in.readVLong();, +        matches = new BytesRef[in.readVInt()];, +        for (int i = 0; i < matches.length; i++) {, +            matches[i] = in.readBytesRef();, +        scores = new float[in.readVInt()];, +        for (int i = 0; i < scores.length; i++) {, +            scores[i] = in.readFloat();, +        }, +        int size = in.readVInt();, +            hls.add(fields);, +        out.writeByte(percolatorTypeId);, +        out.writeVLong(count);, +        out.writeVInt(matches.length);, +        for (BytesRef match : matches) {, +            out.writeBytesRef(match);, +        }, +        out.writeVLong(scores.length);, +        for (float score : scores) {, +            out.writeFloat(score);, +        for (Map<String, HighlightField> hl : hls) {, +            out.writeVInt(hl.size());, +            for (Map.Entry<String, HighlightField> entry : hl.entrySet()) {, +                out.writeString(entry.getKey());, +                entry.getValue().writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java, +    PercolateShardRequest(ShardId shardId, OriginalIndices originalIndices) {, +    void documentType(String documentType) {, +    void source(BytesReference source) {, +    void docSource(BytesReference docSource) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardResponse.java, +import org.apache.lucene.util.BytesRef;, +    private static final BytesRef[] EMPTY_MATCHES = new BytesRef[0];, +    private static final float[] EMPTY_SCORES = new float[0];, +    private static final List<Map<String, HighlightField>> EMPTY_HL = Collections.emptyList();, +, +    private long count;, +    private float[] scores;, +    private BytesRef[] matches;, +    private List<Map<String, HighlightField>> hls;, +    private byte percolatorTypeId;, +        hls = new ArrayList<>();, +    public PercolateShardResponse(BytesRef[] matches, List<Map<String, HighlightField>> hls, long count, float[] scores, PercolateContext context, ShardId shardId) {, +        super(shardId);]