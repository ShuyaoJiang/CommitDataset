[+++ b/shield/src/main/java/org/elasticsearch/shield/action/authc/cache/TransportClearRealmCacheAction.java, +import org.elasticsearch.shield.authc.support.CachingUsernamePasswordRealm;, +        if (!(realm instanceof CachingUsernamePasswordRealm)) {, +        CachingUsernamePasswordRealm cachingRealm = (CachingUsernamePasswordRealm) realm;, +++ b/shield/src/main/java/org/elasticsearch/shield/action/authc/cache/TransportClearRealmCacheAction.java, +import org.elasticsearch.shield.authc.support.CachingUsernamePasswordRealm;, +        if (!(realm instanceof CachingUsernamePasswordRealm)) {, +        CachingUsernamePasswordRealm cachingRealm = (CachingUsernamePasswordRealm) realm;, +++ /dev/null, +++ b/shield/src/main/java/org/elasticsearch/shield/action/authc/cache/TransportClearRealmCacheAction.java, +import org.elasticsearch.shield.authc.support.CachingUsernamePasswordRealm;, +        if (!(realm instanceof CachingUsernamePasswordRealm)) {, +        CachingUsernamePasswordRealm cachingRealm = (CachingUsernamePasswordRealm) realm;, +++ /dev/null, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +public abstract class CachingUsernamePasswordRealm extends UsernamePasswordRealm {, +++ b/shield/src/main/java/org/elasticsearch/shield/action/authc/cache/TransportClearRealmCacheAction.java, +import org.elasticsearch.shield.authc.support.CachingUsernamePasswordRealm;, +        if (!(realm instanceof CachingUsernamePasswordRealm)) {, +        CachingUsernamePasswordRealm cachingRealm = (CachingUsernamePasswordRealm) realm;, +++ /dev/null, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +public abstract class CachingUsernamePasswordRealm extends UsernamePasswordRealm {, +++ b/shield/src/main/java/org/elasticsearch/shield/authz/Permission.java, +            Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = indices.authorize(, +        Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases, MetaData metaData);, +                    Map<String, IndicesAccessControl.IndexAccessControl> temp = permission.indices().authorize(action, requestedIndicesOrAliases, metaData);, +++ b/shield/src/main/java/org/elasticsearch/shield/action/authc/cache/TransportClearRealmCacheAction.java, +import org.elasticsearch.shield.authc.support.CachingUsernamePasswordRealm;, +        if (!(realm instanceof CachingUsernamePasswordRealm)) {, +        CachingUsernamePasswordRealm cachingRealm = (CachingUsernamePasswordRealm) realm;, +++ /dev/null, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +public abstract class CachingUsernamePasswordRealm extends UsernamePasswordRealm {, +++ b/shield/src/main/java/org/elasticsearch/shield/authz/Permission.java, +            Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = indices.authorize(, +        Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases, MetaData metaData);, +                    Map<String, IndicesAccessControl.IndexAccessControl> temp = permission.indices().authorize(action, requestedIndicesOrAliases, metaData);, +++ b/shield/src/main/java/org/elasticsearch/shield/authz/accesscontrol/IndicesAccessControl.java, +, +import java.util.Collections;, +import java.util.Map;, +    public static final IndicesAccessControl ALLOW_ALL = new IndicesAccessControl(true, Collections.emptyMap());, +    private final Map<String, IndexAccessControl> indexPermissions;, +    public IndicesAccessControl(boolean granted, Map<String, IndexAccessControl> indexPermissions) {, +++ b/shield/src/main/java/org/elasticsearch/shield/action/authc/cache/TransportClearRealmCacheAction.java, +import org.elasticsearch.shield.authc.support.CachingUsernamePasswordRealm;, +        if (!(realm instanceof CachingUsernamePasswordRealm)) {, +        CachingUsernamePasswordRealm cachingRealm = (CachingUsernamePasswordRealm) realm;, +++ /dev/null, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +public abstract class CachingUsernamePasswordRealm extends UsernamePasswordRealm {, +++ b/shield/src/main/java/org/elasticsearch/shield/authz/Permission.java, +            Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = indices.authorize(, +        Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases, MetaData metaData);, +                    Map<String, IndicesAccessControl.IndexAccessControl> temp = permission.indices().authorize(action, requestedIndicesOrAliases, metaData);, +++ b/shield/src/main/java/org/elasticsearch/shield/authz/accesscontrol/IndicesAccessControl.java, +, +import java.util.Collections;, +import java.util.Map;, +    public static final IndicesAccessControl ALLOW_ALL = new IndicesAccessControl(true, Collections.emptyMap());, +    private final Map<String, IndexAccessControl> indexPermissions;, +    public IndicesAccessControl(boolean granted, Map<String, IndexAccessControl> indexPermissions) {, +++ b/watcher/docs/example-watches/watching-time-series-data.asciidoc, +  elasticsearch {, +    protocol => "http", +    host => "localhost" <2>, +  }, +, +<2> The hostname or IP address of the host to use to connect to your Elasticsearch cluster. , +++ b/shield/src/main/java/org/elasticsearch/shield/action/authc/cache/TransportClearRealmCacheAction.java, +import org.elasticsearch.shield.authc.support.CachingUsernamePasswordRealm;, +        if (!(realm instanceof CachingUsernamePasswordRealm)) {, +        CachingUsernamePasswordRealm cachingRealm = (CachingUsernamePasswordRealm) realm;, +++ /dev/null, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +public abstract class CachingUsernamePasswordRealm extends UsernamePasswordRealm {, +++ b/shield/src/main/java/org/elasticsearch/shield/authz/Permission.java, +            Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = indices.authorize(, +        Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases, MetaData metaData);, +                    Map<String, IndicesAccessControl.IndexAccessControl> temp = permission.indices().authorize(action, requestedIndicesOrAliases, metaData);, +++ b/shield/src/main/java/org/elasticsearch/shield/authz/accesscontrol/IndicesAccessControl.java, +, +import java.util.Collections;, +import java.util.Map;, +    public static final IndicesAccessControl ALLOW_ALL = new IndicesAccessControl(true, Collections.emptyMap());, +    private final Map<String, IndexAccessControl> indexPermissions;, +    public IndicesAccessControl(boolean granted, Map<String, IndexAccessControl> indexPermissions) {, +++ b/watcher/docs/example-watches/watching-time-series-data.asciidoc, +  elasticsearch {, +    protocol => "http", +    host => "localhost" <2>, +  }, +, +<2> The hostname or IP address of the host to use to connect to your Elasticsearch cluster. , +++ b/watcher/src/main/java/org/elasticsearch/watcher/support/http/HttpRequest.java, +import static java.util.Collections.emptyMap;, +, +    final Map<String, String> params;, +    final Map<String, String> headers;]