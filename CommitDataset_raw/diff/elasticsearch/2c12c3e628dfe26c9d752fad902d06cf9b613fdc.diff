[+++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +            if (queryBuilder == null) {, +                throw new ParsingException(parser.getTokenLocation(), "Required query is missing");, +            }, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +            if (queryBuilder == null) {, +                throw new ParsingException(parser.getTokenLocation(), "Required query is missing");, +            }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregation.java, +        } else if (path.get(0).equals("_bucket_count")) {, +            return getBuckets().size();, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +            if (queryBuilder == null) {, +                throw new ParsingException(parser.getTokenLocation(), "Required query is missing");, +            }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregation.java, +        } else if (path.get(0).equals("_bucket_count")) {, +            return getBuckets().size();, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +        assertThat(histo.getProperty("_bucket_count"), equalTo(3));, +        List<Histogram.Bucket> buckets = new ArrayList<>(histo.getBuckets());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +            if (queryBuilder == null) {, +                throw new ParsingException(parser.getTokenLocation(), "Required query is missing");, +            }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregation.java, +        } else if (path.get(0).equals("_bucket_count")) {, +            return getBuckets().size();, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +        assertThat(histo.getProperty("_bucket_count"), equalTo(3));, +        List<Histogram.Bucket> buckets = new ArrayList<>(histo.getBuckets());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateRangeIT.java, +        List<Range.Bucket> buckets = new ArrayList<>(range.getBuckets());, +        assertThat(range.getProperty("_bucket_count"), equalTo(3));, +        List<Range.Bucket> buckets = new ArrayList<>(dateRange.getBuckets());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +            if (queryBuilder == null) {, +                throw new ParsingException(parser.getTokenLocation(), "Required query is missing");, +            }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregation.java, +        } else if (path.get(0).equals("_bucket_count")) {, +            return getBuckets().size();, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +        assertThat(histo.getProperty("_bucket_count"), equalTo(3));, +        List<Histogram.Bucket> buckets = new ArrayList<>(histo.getBuckets());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateRangeIT.java, +        List<Range.Bucket> buckets = new ArrayList<>(range.getBuckets());, +        assertThat(range.getProperty("_bucket_count"), equalTo(3));, +        List<Range.Bucket> buckets = new ArrayList<>(dateRange.getBuckets());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DoubleTermsIT.java, +        assertThat(terms.getProperty("_bucket_count"), equalTo(5));, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +            if (queryBuilder == null) {, +                throw new ParsingException(parser.getTokenLocation(), "Required query is missing");, +            }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregation.java, +        } else if (path.get(0).equals("_bucket_count")) {, +            return getBuckets().size();, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +        assertThat(histo.getProperty("_bucket_count"), equalTo(3));, +        List<Histogram.Bucket> buckets = new ArrayList<>(histo.getBuckets());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateRangeIT.java, +        List<Range.Bucket> buckets = new ArrayList<>(range.getBuckets());, +        assertThat(range.getProperty("_bucket_count"), equalTo(3));, +        List<Range.Bucket> buckets = new ArrayList<>(dateRange.getBuckets());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DoubleTermsIT.java, +        assertThat(terms.getProperty("_bucket_count"), equalTo(5));, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FiltersIT.java, +        assertThat(filters.getProperty("_bucket_count"), equalTo(2));, +        assertThat(filters.getProperty("_bucket_count"), equalTo(3));, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +            if (queryBuilder == null) {, +                throw new ParsingException(parser.getTokenLocation(), "Required query is missing");, +            }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregation.java, +        } else if (path.get(0).equals("_bucket_count")) {, +            return getBuckets().size();, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +        assertThat(histo.getProperty("_bucket_count"), equalTo(3));, +        List<Histogram.Bucket> buckets = new ArrayList<>(histo.getBuckets());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateRangeIT.java, +        List<Range.Bucket> buckets = new ArrayList<>(range.getBuckets());, +        assertThat(range.getProperty("_bucket_count"), equalTo(3));, +        List<Range.Bucket> buckets = new ArrayList<>(dateRange.getBuckets());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DoubleTermsIT.java, +        assertThat(terms.getProperty("_bucket_count"), equalTo(5));, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FiltersIT.java, +        assertThat(filters.getProperty("_bucket_count"), equalTo(2));, +        assertThat(filters.getProperty("_bucket_count"), equalTo(3));, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/GeoDistanceIT.java, +        assertThat(geoDist.getProperty("_bucket_count"), equalTo(3));, +        List<Range.Bucket> buckets = new ArrayList<>(geoDistance.getBuckets());, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryParseContext.java, +            if (queryBuilder == null) {, +                throw new ParsingException(parser.getTokenLocation(), "Required query is missing");, +            }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregation.java, +        } else if (path.get(0).equals("_bucket_count")) {, +            return getBuckets().size();, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java]