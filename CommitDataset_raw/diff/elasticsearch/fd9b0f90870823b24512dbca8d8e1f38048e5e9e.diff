[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +     * @throws Throwable if a method reference cannot be converted to an functional interface, +             Class<?> receiverClass, String name, Object args[], long recipe) throws Throwable {, +                                         Class<?> receiverClass, String name) throws Throwable {, +     /** Returns a method handle to an implementation of clazz, given method reference signature. */, +                                                         String call, Class<?>... captures) throws Throwable {, +                                                                 getUserFunctionHandleFieldName(call, arity), , +     /** gets the field name used to lookup up the MethodHandle for a function. */, +     public static String getUserFunctionHandleFieldName(String name, int arity) {, +         return "handle$" + name + "$" + arity;, +     }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +     * @throws Throwable if a method reference cannot be converted to an functional interface, +             Class<?> receiverClass, String name, Object args[], long recipe) throws Throwable {, +                                         Class<?> receiverClass, String name) throws Throwable {, +     /** Returns a method handle to an implementation of clazz, given method reference signature. */, +                                                         String call, Class<?>... captures) throws Throwable {, +                                                                 getUserFunctionHandleFieldName(call, arity), , +     /** gets the field name used to lookup up the MethodHandle for a function. */, +     public static String getUserFunctionHandleFieldName(String name, int arity) {, +         return "handle$" + name + "$" + arity;, +     }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +import java.lang.invoke.MethodHandle;, +    public final static Type METHOD_HANDLE_TYPE = Type.getType(MethodHandle.class);, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +     * @throws Throwable if a method reference cannot be converted to an functional interface, +             Class<?> receiverClass, String name, Object args[], long recipe) throws Throwable {, +                                         Class<?> receiverClass, String name) throws Throwable {, +     /** Returns a method handle to an implementation of clazz, given method reference signature. */, +                                                         String call, Class<?>... captures) throws Throwable {, +                                                                 getUserFunctionHandleFieldName(call, arity), , +     /** gets the field name used to lookup up the MethodHandle for a function. */, +     public static String getUserFunctionHandleFieldName(String name, int arity) {, +         return "handle$" + name + "$" + arity;, +     }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +import java.lang.invoke.MethodHandle;, +    public final static Type METHOD_HANDLE_TYPE = Type.getType(MethodHandle.class);, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java, +import org.elasticsearch.painless.Def;, +    String getStaticHandleFieldName() {, +        return Def.getUserFunctionHandleFieldName(name, parameters.size());, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +     * @throws Throwable if a method reference cannot be converted to an functional interface, +             Class<?> receiverClass, String name, Object args[], long recipe) throws Throwable {, +                                         Class<?> receiverClass, String name) throws Throwable {, +     /** Returns a method handle to an implementation of clazz, given method reference signature. */, +                                                         String call, Class<?>... captures) throws Throwable {, +                                                                 getUserFunctionHandleFieldName(call, arity), , +     /** gets the field name used to lookup up the MethodHandle for a function. */, +     public static String getUserFunctionHandleFieldName(String name, int arity) {, +         return "handle$" + name + "$" + arity;, +     }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +import java.lang.invoke.MethodHandle;, +    public final static Type METHOD_HANDLE_TYPE = Type.getType(MethodHandle.class);, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFunction.java, +import org.elasticsearch.painless.Def;, +    String getStaticHandleFieldName() {, +        return Def.getUserFunctionHandleFieldName(name, parameters.size());, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SSource.java, +import org.objectweb.asm.ClassWriter;, +import org.objectweb.asm.Handle;, +import org.objectweb.asm.Opcodes;, +, +                        function.getStaticHandleFieldName(), , +                        WriterConstants.METHOD_HANDLE_TYPE.getDescriptor(), , +                                 function.getStaticHandleFieldName(), , +                                 WriterConstants.METHOD_HANDLE_TYPE);]