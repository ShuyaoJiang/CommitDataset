[+++ b/.idea/modules/plugin-river-wikipedia.iml, +      <excludeFolder url="file://$MODULE_DIR$/../../plugins/river/wikipedia/build" />, +++ b/.idea/modules/plugin-river-wikipedia.iml, +      <excludeFolder url="file://$MODULE_DIR$/../../plugins/river/wikipedia/build" />, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/river/RiverModule.java, +    private final RiversTypesRegistry typesRegistry;, +, +    public RiverModule(RiverName riverName, Map<String, Object> settings, Settings globalSettings, RiversTypesRegistry typesRegistry) {, +        this.typesRegistry = typesRegistry;, +        Class<? extends Module> registered = typesRegistry.type(type);, +        if (registered != null) {, +            return registered;, +        }, +++ b/.idea/modules/plugin-river-wikipedia.iml, +      <excludeFolder url="file://$MODULE_DIR$/../../plugins/river/wikipedia/build" />, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/river/RiverModule.java, +    private final RiversTypesRegistry typesRegistry;, +, +    public RiverModule(RiverName riverName, Map<String, Object> settings, Settings globalSettings, RiversTypesRegistry typesRegistry) {, +        this.typesRegistry = typesRegistry;, +        Class<? extends Module> registered = typesRegistry.type(type);, +        if (registered != null) {, +            return registered;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/river/RiversModule.java, +import org.elasticsearch.common.collect.ImmutableMap;, +import org.elasticsearch.common.collect.Maps;, +import org.elasticsearch.common.inject.Module;, +import java.util.Map;, +, +    private Map<String, Class<? extends Module>> riverTypes = Maps.newHashMap();, +, +    /**, +     * Registers a custom river type name against a module., +     *, +     * @param type   The type, +     * @param module The module, +     */, +    public void registerRiver(String type, Class<? extends Module> module) {, +        riverTypes.put(type, module);, +    }, +, +        bind(RiversTypesRegistry.class).toInstance(new RiversTypesRegistry(ImmutableMap.copyOf(riverTypes)));, +++ b/.idea/modules/plugin-river-wikipedia.iml, +      <excludeFolder url="file://$MODULE_DIR$/../../plugins/river/wikipedia/build" />, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/river/RiverModule.java, +    private final RiversTypesRegistry typesRegistry;, +, +    public RiverModule(RiverName riverName, Map<String, Object> settings, Settings globalSettings, RiversTypesRegistry typesRegistry) {, +        this.typesRegistry = typesRegistry;, +        Class<? extends Module> registered = typesRegistry.type(type);, +        if (registered != null) {, +            return registered;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/river/RiversModule.java, +import org.elasticsearch.common.collect.ImmutableMap;, +import org.elasticsearch.common.collect.Maps;, +import org.elasticsearch.common.inject.Module;, +import java.util.Map;, +, +    private Map<String, Class<? extends Module>> riverTypes = Maps.newHashMap();, +, +    /**, +     * Registers a custom river type name against a module., +     *, +     * @param type   The type, +     * @param module The module, +     */, +    public void registerRiver(String type, Class<? extends Module> module) {, +        riverTypes.put(type, module);, +    }, +, +        bind(RiversTypesRegistry.class).toInstance(new RiversTypesRegistry(ImmutableMap.copyOf(riverTypes)));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/river/RiversPluginsModule.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.river;, +, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.inject.Module;, +import org.elasticsearch.common.inject.PreProcessModule;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.plugins.PluginsService;]