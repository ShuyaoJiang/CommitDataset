[+++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +import org.elasticsearch.action.get.GetRequest;, +    private GetRequest getRequest;, +    private BytesReference docSource;, +    public PercolateRequest(PercolateRequest request, BytesReference docSource) {, +        this.docSource = docSource;, +    public GetRequest getRequest() {, +        return getRequest;, +    }, +, +    public void getRequest(GetRequest getRequest) {, +        this.getRequest = getRequest;, +    }, +, +    BytesReference docSource() {, +        return docSource;, +        if (source == null && getRequest == null) {, +            validationException = addValidationError("source or get is missing", validationException);, +        }, +        if (getRequest != null && getRequest.fields() != null) {, +            validationException = addValidationError("get fields option isn't supported via percolate request", validationException);, +        startTime = in.readVLong();, +        docSource = in.readBytesReference();, +        if (in.readBoolean()) {, +            getRequest = new GetRequest(null);, +            getRequest.readFrom(in);, +        }, +        out.writeVLong(startTime);, +        out.writeBytesReference(docSource);, +        if (getRequest != null) {, +            out.writeBoolean(true);, +            getRequest.writeTo(out);, +        } else {, +            out.writeBoolean(false);, +        }, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +import org.elasticsearch.action.get.GetRequest;, +    private GetRequest getRequest;, +    private BytesReference docSource;, +    public PercolateRequest(PercolateRequest request, BytesReference docSource) {, +        this.docSource = docSource;, +    public GetRequest getRequest() {, +        return getRequest;, +    }, +, +    public void getRequest(GetRequest getRequest) {, +        this.getRequest = getRequest;, +    }, +, +    BytesReference docSource() {, +        return docSource;, +        if (source == null && getRequest == null) {, +            validationException = addValidationError("source or get is missing", validationException);, +        }, +        if (getRequest != null && getRequest.fields() != null) {, +            validationException = addValidationError("get fields option isn't supported via percolate request", validationException);, +        startTime = in.readVLong();, +        docSource = in.readBytesReference();, +        if (in.readBoolean()) {, +            getRequest = new GetRequest(null);, +            getRequest.readFrom(in);, +        }, +        out.writeVLong(startTime);, +        out.writeBytesReference(docSource);, +        if (getRequest != null) {, +            out.writeBoolean(true);, +            getRequest.writeTo(out);, +        } else {, +            out.writeBoolean(false);, +        }, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.action.get.GetRequest;, +    /**, +     * Enables percolating an existing document. Instead of specifying the source of the document to percolate, define, +     * a get request that will fetch a document and use its source., +     */, +    public PercolateRequestBuilder setGetRequest(GetRequest getRequest) {, +        request.getRequest(getRequest);, +        return this;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +import org.elasticsearch.action.get.GetRequest;, +    private GetRequest getRequest;, +    private BytesReference docSource;, +    public PercolateRequest(PercolateRequest request, BytesReference docSource) {, +        this.docSource = docSource;, +    public GetRequest getRequest() {, +        return getRequest;, +    }, +, +    public void getRequest(GetRequest getRequest) {, +        this.getRequest = getRequest;, +    }, +, +    BytesReference docSource() {, +        return docSource;, +        if (source == null && getRequest == null) {, +            validationException = addValidationError("source or get is missing", validationException);, +        }]