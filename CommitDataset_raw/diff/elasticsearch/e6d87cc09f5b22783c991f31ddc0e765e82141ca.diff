[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardChangesAction.java, +import java.util.concurrent.TimeUnit;, +        private long relativeStartNanos;, +, +, +            // Starting the clock in order to know how much time is spent on fetching operations:, +            relativeStartNanos = System.nanoTime();, +        private long tookInMillis;, +, +        public long getTookInMillis() {, +            return tookInMillis;, +        }, +, +            final Translog.Operation[] operations,, +            final long tookInMillis) {, +            this.tookInMillis = tookInMillis;, +            tookInMillis = in.readVLong();, +            out.writeVLong(tookInMillis);, +                    Arrays.equals(operations, that.operations) &&, +                    tookInMillis == that.tookInMillis;, +            return Objects.hash(mappingVersion, globalCheckpoint, maxSeqNo, maxSeqNoOfUpdatesOrDeletes,, +                Arrays.hashCode(operations), tookInMillis);, +            return getResponse(mappingVersion, seqNoStats, maxSeqNoOfUpdatesOrDeletes, operations, request.relativeStartNanos);, +                    listener.onResponse(getResponse(mappingVersion, latestSeqNoStats, maxSeqNoOfUpdatesOrDeletes, EMPTY_OPERATIONS_ARRAY,, +                        request.relativeStartNanos));, +                                final long maxSeqNoOfUpdates, final Translog.Operation[] operations, long relativeStartNanos) {, +        long tookInNanos = System.nanoTime() - relativeStartNanos;, +        long tookInMillis = TimeUnit.NANOSECONDS.toMillis(tookInNanos);, +        return new Response(mappingVersion, seqNoStats.getGlobalCheckpoint(), seqNoStats.getMaxSeqNo(), maxSeqNoOfUpdates,, +            operations, tookInMillis);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardChangesAction.java, +import java.util.concurrent.TimeUnit;, +        private long relativeStartNanos;, +, +, +            // Starting the clock in order to know how much time is spent on fetching operations:, +            relativeStartNanos = System.nanoTime();, +        private long tookInMillis;, +, +        public long getTookInMillis() {, +            return tookInMillis;, +        }, +, +            final Translog.Operation[] operations,, +            final long tookInMillis) {, +            this.tookInMillis = tookInMillis;, +            tookInMillis = in.readVLong();, +            out.writeVLong(tookInMillis);, +                    Arrays.equals(operations, that.operations) &&, +                    tookInMillis == that.tookInMillis;, +            return Objects.hash(mappingVersion, globalCheckpoint, maxSeqNo, maxSeqNoOfUpdatesOrDeletes,, +                Arrays.hashCode(operations), tookInMillis);, +            return getResponse(mappingVersion, seqNoStats, maxSeqNoOfUpdatesOrDeletes, operations, request.relativeStartNanos);, +                    listener.onResponse(getResponse(mappingVersion, latestSeqNoStats, maxSeqNoOfUpdatesOrDeletes, EMPTY_OPERATIONS_ARRAY,, +                        request.relativeStartNanos));, +                                final long maxSeqNoOfUpdates, final Translog.Operation[] operations, long relativeStartNanos) {, +        long tookInNanos = System.nanoTime() - relativeStartNanos;, +        long tookInMillis = TimeUnit.NANOSECONDS.toMillis(tookInNanos);, +        return new Response(mappingVersion, seqNoStats.getGlobalCheckpoint(), seqNoStats.getMaxSeqNo(), maxSeqNoOfUpdates,, +            operations, tookInMillis);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +    private long totalFetchTookTimeMillis = 0;, +                            totalFetchTookTimeMillis += response.getTookInMillis();, +                totalFetchTookTimeMillis,, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardChangesAction.java, +import java.util.concurrent.TimeUnit;, +        private long relativeStartNanos;, +, +, +            // Starting the clock in order to know how much time is spent on fetching operations:, +            relativeStartNanos = System.nanoTime();, +        private long tookInMillis;, +, +        public long getTookInMillis() {, +            return tookInMillis;, +        }, +, +            final Translog.Operation[] operations,, +            final long tookInMillis) {, +            this.tookInMillis = tookInMillis;, +            tookInMillis = in.readVLong();, +            out.writeVLong(tookInMillis);, +                    Arrays.equals(operations, that.operations) &&, +                    tookInMillis == that.tookInMillis;, +            return Objects.hash(mappingVersion, globalCheckpoint, maxSeqNo, maxSeqNoOfUpdatesOrDeletes,, +                Arrays.hashCode(operations), tookInMillis);, +            return getResponse(mappingVersion, seqNoStats, maxSeqNoOfUpdatesOrDeletes, operations, request.relativeStartNanos);, +                    listener.onResponse(getResponse(mappingVersion, latestSeqNoStats, maxSeqNoOfUpdatesOrDeletes, EMPTY_OPERATIONS_ARRAY,, +                        request.relativeStartNanos));, +                                final long maxSeqNoOfUpdates, final Translog.Operation[] operations, long relativeStartNanos) {, +        long tookInNanos = System.nanoTime() - relativeStartNanos;, +        long tookInMillis = TimeUnit.NANOSECONDS.toMillis(tookInNanos);, +        return new Response(mappingVersion, seqNoStats.getGlobalCheckpoint(), seqNoStats.getMaxSeqNo(), maxSeqNoOfUpdates,, +            operations, tookInMillis);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +    private long totalFetchTookTimeMillis = 0;, +                            totalFetchTookTimeMillis += response.getTookInMillis();, +                totalFetchTookTimeMillis,, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/action/ShardChangesResponseTests.java, +            operations,]