[+++ b/src/main/java/org/elasticsearch/cluster/TimeoutClusterStateUpdateTask.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster;, +, +import org.elasticsearch.common.unit.TimeValue;, +, +/**, + * An extension interface to {@link org.elasticsearch.cluster.ClusterStateUpdateTask} that allows to associate, + * a timeout., + */, +public interface TimeoutClusterStateUpdateTask extends ClusterStateUpdateTask {, +, +    /**, +     * If the cluster state update task wasn't processed by the provided timeout, call, +     * {@link #onTimeout(String)}., +     */, +    TimeValue timeout();, +, +    /**, +     * Called when the cluster sate update task wasn't processed by the provided, +     * {@link #timeout()}., +     */, +    void onTimeout(String source);, +}, +++ b/src/main/java/org/elasticsearch/cluster/TimeoutClusterStateUpdateTask.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster;, +, +import org.elasticsearch.common.unit.TimeValue;, +, +/**, + * An extension interface to {@link org.elasticsearch.cluster.ClusterStateUpdateTask} that allows to associate, + * a timeout., + */, +public interface TimeoutClusterStateUpdateTask extends ClusterStateUpdateTask {, +, +    /**, +     * If the cluster state update task wasn't processed by the provided timeout, call, +     * {@link #onTimeout(String)}., +     */, +    TimeValue timeout();, +, +    /**, +     * Called when the cluster sate update task wasn't processed by the provided, +     * {@link #timeout()}., +     */, +    void onTimeout(String source);, +}, +++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +import org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor;, +    private volatile PrioritizedEsThreadPoolExecutor updateTasksExecutor;, +        updateTasksExecutor.execute(new PrioritizedRunnable(Priority.HIGH) {, +        final UpdateTask task = new UpdateTask(source, priority, updateTask);, +        if (updateTask instanceof TimeoutClusterStateUpdateTask) {, +            final TimeoutClusterStateUpdateTask timeoutUpdateTask = (TimeoutClusterStateUpdateTask) updateTask;, +            updateTasksExecutor.execute(task, threadPool.scheduler(), timeoutUpdateTask.timeout(), new Runnable() {, +                @Override, +                public void run() {, +                    threadPool.generic().execute(new Runnable() {, +                        @Override, +                        public void run() {, +                            timeoutUpdateTask.onTimeout(task.source);, +                        }, +                    });]