[+++ b/docs/en/rest-api/ml/get-bucket.asciidoc, +`desc`::, +  (boolean) If true, the buckets are sorted in descending order., +, +`sort`::, +  (string) Specifies the sort field for the requested buckets., +  By default, the buckets are sorted by the `timestamp` field., +, +++ b/docs/en/rest-api/ml/get-bucket.asciidoc, +`desc`::, +  (boolean) If true, the buckets are sorted in descending order., +, +`sort`::, +  (string) Specifies the sort field for the requested buckets., +  By default, the buckets are sorted by the `timestamp` field., +, +++ b/docs/en/rest-api/ml/get-influencer.asciidoc, +  By default the influencers are sorted by the `influencer_score` value., +++ b/docs/en/rest-api/ml/get-bucket.asciidoc, +`desc`::, +  (boolean) If true, the buckets are sorted in descending order., +, +`sort`::, +  (string) Specifies the sort field for the requested buckets., +  By default, the buckets are sorted by the `timestamp` field., +, +++ b/docs/en/rest-api/ml/get-influencer.asciidoc, +  By default the influencers are sorted by the `influencer_score` value., +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetBucketsAction.java, +import org.elasticsearch.Version;, +        public static final ParseField SORT = new ParseField("sort");, +        public static final ParseField DESCENDING = new ParseField("desc");, +            PARSER.declareString(Request::setSort, SORT);, +            PARSER.declareBoolean(Request::setDescending, DESCENDING);, +        private String sort = Result.TIMESTAMP.getPreferredName();, +        private boolean descending = false;, +        public Double getAnomalyScore() {, +        public String getSort() {, +            return sort;, +        }, +, +        public void setSort(String sort) {, +            this.sort = sort;, +        }, +, +        public boolean isDescending() {, +            return descending;, +        }, +, +        public void setDescending(boolean descending) {, +            this.descending = descending;, +        }, +, +            if (in.getVersion().after(Version.V_5_4_0)) {, +                sort = in.readString();, +                descending = in.readBoolean();, +            }, +            if (out.getVersion().after(Version.V_5_4_0)) {, +                out.writeString(sort);, +                out.writeBoolean(descending);, +            }, +            builder.field(SORT.getPreferredName(), sort);, +            builder.field(DESCENDING.getPreferredName(), descending);, +            return Objects.hash(jobId, timestamp, expand, excludeInterim, anomalyScore, pageParams, start, end, sort, descending);, +                    Objects.equals(end, other.end) &&, +                    Objects.equals(sort, other.sort) &&, +                    Objects.equals(descending, other.descending);, +                            .anomalyScoreThreshold(request.anomalyScore), +                            .sortField(request.sort), +                            .sortDescending(request.descending);, +++ b/docs/en/rest-api/ml/get-bucket.asciidoc, +`desc`::, +  (boolean) If true, the buckets are sorted in descending order., +, +`sort`::, +  (string) Specifies the sort field for the requested buckets., +  By default, the buckets are sorted by the `timestamp` field., +, +++ b/docs/en/rest-api/ml/get-influencer.asciidoc, +  By default the influencers are sorted by the `influencer_score` value., +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetBucketsAction.java, +import org.elasticsearch.Version;, +        public static final ParseField SORT = new ParseField("sort");, +        public static final ParseField DESCENDING = new ParseField("desc");, +            PARSER.declareString(Request::setSort, SORT);, +            PARSER.declareBoolean(Request::setDescending, DESCENDING);, +        private String sort = Result.TIMESTAMP.getPreferredName();, +        private boolean descending = false;, +        public Double getAnomalyScore() {, +        public String getSort() {, +            return sort;, +        }, +, +        public void setSort(String sort) {, +            this.sort = sort;, +        }, +, +        public boolean isDescending() {, +            return descending;, +        }]