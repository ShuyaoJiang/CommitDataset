[+++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +import java.util.stream.Collectors;, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.common.collect.Tuple;, +            List<String> plugins = checkMisspelledPlugin(pluginId);, +            String msg = "Unknown plugin " + pluginId;, +            if (plugins.isEmpty() == false) {, +                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?";, +            }, +            throw new UserError(ExitCodes.USAGE, msg);, +    /** Returns all the official plugin names that look similar to pluginId. **/, +    private List<String> checkMisspelledPlugin(String pluginId) {, +        LevensteinDistance ld = new LevensteinDistance();, +        List<Tuple<Float, String>> scoredKeys = new ArrayList<>();, +        for (String officialPlugin : OFFICIAL_PLUGINS) {, +            float distance = ld.getDistance(pluginId, officialPlugin);, +            if (distance > 0.7f) {, +                scoredKeys.add(new Tuple<>(distance, officialPlugin));, +            }, +        }, +        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()));, +        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +import java.util.stream.Collectors;, +import org.apache.lucene.search.spell.LevensteinDistance;, +import org.apache.lucene.util.CollectionUtil;, +import org.elasticsearch.common.collect.Tuple;, +            List<String> plugins = checkMisspelledPlugin(pluginId);, +            String msg = "Unknown plugin " + pluginId;, +            if (plugins.isEmpty() == false) {, +                msg += ", did you mean " + (plugins.size() == 1 ? "[" + plugins.get(0) + "]": "any of " + plugins.toString()) + "?";, +            }, +            throw new UserError(ExitCodes.USAGE, msg);, +    /** Returns all the official plugin names that look similar to pluginId. **/, +    private List<String> checkMisspelledPlugin(String pluginId) {, +        LevensteinDistance ld = new LevensteinDistance();, +        List<Tuple<Float, String>> scoredKeys = new ArrayList<>();, +        for (String officialPlugin : OFFICIAL_PLUGINS) {, +            float distance = ld.getDistance(pluginId, officialPlugin);, +            if (distance > 0.7f) {, +                scoredKeys.add(new Tuple<>(distance, officialPlugin));, +            }, +        }, +        CollectionUtil.timSort(scoredKeys, (a, b) -> b.v1().compareTo(a.v1()));, +        return scoredKeys.stream().map((a) -> a.v2()).collect(Collectors.toList());, +    }, +, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java, +import static org.hamcrest.CoreMatchers.containsString;, +    public void testInstallMisspelledOfficialPlugins() throws Exception {, +        Tuple<Path, Environment> env = createEnv(fs, temp);, +        UserError e = expectThrows(UserError.class, () -> installPlugin("xpack", env.v1()));, +        assertThat(e.getMessage(), containsString("Unknown plugin xpack, did you mean [x-pack]?"));, +, +        e = expectThrows(UserError.class, () -> installPlugin("analysis-smartnc", env.v1()));, +        assertThat(e.getMessage(), containsString("Unknown plugin analysis-smartnc, did you mean [analysis-smartcn]?"));, +, +        e = expectThrows(UserError.class, () -> installPlugin("repository", env.v1()));, +        assertThat(e.getMessage(), containsString("Unknown plugin repository, did you mean any of [repository-s3, repository-gcs]?"));, +, +        e = expectThrows(UserError.class, () -> installPlugin("unknown_plugin", env.v1()));, +        assertThat(e.getMessage(), containsString("Unknown plugin unknown_plugin"));, +    }, +]