[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        assertEquals("check-rollover-ready", fooResponse.getStep());, +        assertEquals("check-rollover-ready", bazResponse.getStep());, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        assertEquals("check-rollover-ready", fooResponse.getStep());, +        assertEquals("check-rollover-ready", bazResponse.getStep());, +++ b/docs/reference/ilm/update-lifecycle-policy.asciidoc, +Using this API, we can find out that `my_index` is currently checking if it is ready to be rolled over., +      "step": "check-rollover-ready",, +      "step": "check-rollover-ready",, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        assertEquals("check-rollover-ready", fooResponse.getStep());, +        assertEquals("check-rollover-ready", bazResponse.getStep());, +++ b/docs/reference/ilm/update-lifecycle-policy.asciidoc, +Using this API, we can find out that `my_index` is currently checking if it is ready to be rolled over., +      "step": "check-rollover-ready",, +      "step": "check-rollover-ready",, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverAction.java, +        StepKey waitForRolloverReadyStepKey = new StepKey(phase, NAME, WaitForRolloverReadyStep.NAME);, +        StepKey rolloverStepKey = new StepKey(phase, NAME, RolloverStep.NAME);, +, +        WaitForRolloverReadyStep waitForRolloverReadyStep = new WaitForRolloverReadyStep(waitForRolloverReadyStepKey, rolloverStepKey,, +            client, maxSize, maxAge, maxDocs);, +        RolloverStep rolloverStep = new RolloverStep(rolloverStepKey, updateDateStepKey, client);, +        return Arrays.asList(waitForRolloverReadyStep, rolloverStep, updateDateStep);, +        StepKey rolloverReadyStepKey = new StepKey(phase, NAME, WaitForRolloverReadyStep.NAME);, +        return Arrays.asList(rolloverReadyStepKey, rolloverStepKey, updateDateStepKey);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        assertEquals("check-rollover-ready", fooResponse.getStep());, +        assertEquals("check-rollover-ready", bazResponse.getStep());, +++ b/docs/reference/ilm/update-lifecycle-policy.asciidoc, +Using this API, we can find out that `my_index` is currently checking if it is ready to be rolled over., +      "step": "check-rollover-ready",, +      "step": "check-rollover-ready",, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverAction.java, +        StepKey waitForRolloverReadyStepKey = new StepKey(phase, NAME, WaitForRolloverReadyStep.NAME);, +        StepKey rolloverStepKey = new StepKey(phase, NAME, RolloverStep.NAME);, +, +        WaitForRolloverReadyStep waitForRolloverReadyStep = new WaitForRolloverReadyStep(waitForRolloverReadyStepKey, rolloverStepKey,, +            client, maxSize, maxAge, maxDocs);, +        RolloverStep rolloverStep = new RolloverStep(rolloverStepKey, updateDateStepKey, client);, +        return Arrays.asList(waitForRolloverReadyStep, rolloverStep, updateDateStep);, +        StepKey rolloverReadyStepKey = new StepKey(phase, NAME, WaitForRolloverReadyStep.NAME);, +        return Arrays.asList(rolloverReadyStepKey, rolloverStepKey, updateDateStepKey);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverStep.java, +import org.elasticsearch.cluster.ClusterState;, +/**, + * Unconditionally rolls over an index using the Rollover API., + */, +public class RolloverStep extends AsyncActionStep {, +    public RolloverStep(StepKey key, StepKey nextStepKey, Client client) {, +    public void performAction(IndexMetaData indexMetaData, ClusterState currentClusterState, Listener listener) {, +        // Calling rollover with no conditions will always roll over the index, +            ActionListener.wrap(response -> {, +                assert response.isRolledOver() : "the only way this rollover call should fail is with an exception";, +                listener.onResponse(response.isRolledOver());, +            }, listener::onFailure));, +        return Objects.hash(super.hashCode());, +        return super.equals(obj);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        assertEquals("check-rollover-ready", fooResponse.getStep());, +        assertEquals("check-rollover-ready", bazResponse.getStep());, +++ b/docs/reference/ilm/update-lifecycle-policy.asciidoc, +Using this API, we can find out that `my_index` is currently checking if it is ready to be rolled over., +      "step": "check-rollover-ready",, +      "step": "check-rollover-ready",, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverAction.java, +        StepKey waitForRolloverReadyStepKey = new StepKey(phase, NAME, WaitForRolloverReadyStep.NAME);, +        StepKey rolloverStepKey = new StepKey(phase, NAME, RolloverStep.NAME);, +, +        WaitForRolloverReadyStep waitForRolloverReadyStep = new WaitForRolloverReadyStep(waitForRolloverReadyStepKey, rolloverStepKey,, +            client, maxSize, maxAge, maxDocs);, +        RolloverStep rolloverStep = new RolloverStep(rolloverStepKey, updateDateStepKey, client);, +        return Arrays.asList(waitForRolloverReadyStep, rolloverStep, updateDateStep);, +        StepKey rolloverReadyStepKey = new StepKey(phase, NAME, WaitForRolloverReadyStep.NAME);, +        return Arrays.asList(rolloverReadyStepKey, rolloverStepKey, updateDateStepKey);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverStep.java, +import org.elasticsearch.cluster.ClusterState;, +/**, + * Unconditionally rolls over an index using the Rollover API., + */, +public class RolloverStep extends AsyncActionStep {, +    public RolloverStep(StepKey key, StepKey nextStepKey, Client client) {, +    public void performAction(IndexMetaData indexMetaData, ClusterState currentClusterState, Listener listener) {, +        // Calling rollover with no conditions will always roll over the index, +            ActionListener.wrap(response -> {, +                assert response.isRolledOver() : "the only way this rollover call should fail is with an exception";, +                listener.onResponse(response.isRolledOver());, +            }, listener::onFailure));, +        return Objects.hash(super.hashCode());, +        return super.equals(obj);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/UpdateRolloverLifecycleDateStep.java, +            throw new IllegalStateException("no rollover info found for [" + indexMetaData.getIndex().getName() + "] with alias [" +, +                rolloverAlias + "], the index has not yet rolled over with that alias");, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndexLifecycleIT.java, +        assertEquals("check-rollover-ready", fooResponse.getStep());, +        assertEquals("check-rollover-ready", bazResponse.getStep());, +++ b/docs/reference/ilm/update-lifecycle-policy.asciidoc, +Using this API, we can find out that `my_index` is currently checking if it is ready to be rolled over., +      "step": "check-rollover-ready",]