[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest;, +        return new Request(HttpHead.METHOD_NAME, endpoint, params.getParams(), null);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest;, +        return new Request(HttpHead.METHOD_NAME, endpoint, params.getParams(), null);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +import org.apache.http.client.methods.HttpPut;, +        Response response = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id", Collections.singletonMap("refresh", "wait_for"),, +                stringEntity);, +        Response response = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id", Collections.singletonMap("refresh", "wait_for"),, +                stringEntity);, +        Response r = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id1", Collections.singletonMap("refresh", "true"),, +                stringEntity);, +        r = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id2", Collections.singletonMap("refresh", "true"), stringEntity);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest;, +        return new Request(HttpHead.METHOD_NAME, endpoint, params.getParams(), null);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +import org.apache.http.client.methods.HttpPut;, +        Response response = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id", Collections.singletonMap("refresh", "wait_for"),, +                stringEntity);, +        Response response = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id", Collections.singletonMap("refresh", "wait_for"),, +                stringEntity);, +        Response r = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id1", Collections.singletonMap("refresh", "true"),, +                stringEntity);, +        r = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id2", Collections.singletonMap("refresh", "true"), stringEntity);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CustomRestHighLevelClientTests.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest;, +        return new Request(HttpHead.METHOD_NAME, endpoint, params.getParams(), null);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +import org.apache.http.client.methods.HttpPut;, +        Response response = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id", Collections.singletonMap("refresh", "wait_for"),, +                stringEntity);, +        Response response = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id", Collections.singletonMap("refresh", "wait_for"),, +                stringEntity);, +        Response r = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id1", Collections.singletonMap("refresh", "true"),, +                stringEntity);, +        r = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id2", Collections.singletonMap("refresh", "true"), stringEntity);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CustomRestHighLevelClientTests.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndicesClientIT.java, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.client.methods.HttpHead;, +import org.apache.http.client.methods.HttpPost;, +import org.apache.http.client.methods.HttpPut;, +import org.elasticsearch.action.admin.indices.alias.get.GetAliasesRequest;, +import org.elasticsearch.action.admin.indices.close.CloseIndexRequest;, +import org.elasticsearch.action.admin.indices.close.CloseIndexResponse;, +    @SuppressWarnings({ "unchecked", "rawtypes" }), +    @SuppressWarnings({ "unchecked", "rawtypes" }), +        ResponseException exception = expectThrows(ResponseException.class,, +                () -> client().performRequest(HttpGet.METHOD_NAME, index + "/_search"));, +        Response response = client().performRequest(HttpGet.METHOD_NAME, index + "/_search");, +        Response response = client().performRequest(HttpGet.METHOD_NAME, index + "/_search");, +        ResponseException exception = expectThrows(ResponseException.class,, +                () -> client().performRequest(HttpGet.METHOD_NAME, index + "/_search"));, +        Response response = client().performRequest(HttpPut.METHOD_NAME, index);, +        Response response = client().performRequest(HttpHead.METHOD_NAME, index);, +        Response response = client().performRequest(HttpPost.METHOD_NAME, index + "/_close");, +        Response response = client().performRequest(HttpHead.METHOD_NAME, "/_alias/" + alias);, +        Response response = client().performRequest(HttpHead.METHOD_NAME, "/" + index + "/_alias/" + alias);, +        client().performRequest(HttpPut.METHOD_NAME, "/index/_alias/alias");, +    @SuppressWarnings({ "unchecked", "rawtypes" }), +        Response response = client().performRequest(HttpGet.METHOD_NAME, index);, +        Response response = client().performRequest(HttpGet.METHOD_NAME, endpoint);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest;, +        return new Request(HttpHead.METHOD_NAME, endpoint, params.getParams(), null);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +import org.apache.http.client.methods.HttpPut;, +        Response response = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id", Collections.singletonMap("refresh", "wait_for"),, +                stringEntity);, +        Response response = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id", Collections.singletonMap("refresh", "wait_for"),, +                stringEntity);, +        Response r = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id1", Collections.singletonMap("refresh", "true"),, +                stringEntity);, +        r = client().performRequest(HttpPut.METHOD_NAME, "/index/type/id2", Collections.singletonMap("refresh", "true"), stringEntity);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CustomRestHighLevelClientTests.java, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IndicesClientIT.java, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.client.methods.HttpHead;, +import org.apache.http.client.methods.HttpPost;, +import org.apache.http.client.methods.HttpPut;, +import org.elasticsearch.action.admin.indices.alias.get.GetAliasesRequest;, +import org.elasticsearch.action.admin.indices.close.CloseIndexRequest;, +import org.elasticsearch.action.admin.indices.close.CloseIndexResponse;, +    @SuppressWarnings({ "unchecked", "rawtypes" }), +    @SuppressWarnings({ "unchecked", "rawtypes" }), +        ResponseException exception = expectThrows(ResponseException.class,, +                () -> client().performRequest(HttpGet.METHOD_NAME, index + "/_search"));, +        Response response = client().performRequest(HttpGet.METHOD_NAME, index + "/_search");, +        Response response = client().performRequest(HttpGet.METHOD_NAME, index + "/_search");, +        ResponseException exception = expectThrows(ResponseException.class,, +                () -> client().performRequest(HttpGet.METHOD_NAME, index + "/_search"));, +        Response response = client().performRequest(HttpPut.METHOD_NAME, index);, +        Response response = client().performRequest(HttpHead.METHOD_NAME, index);, +        Response response = client().performRequest(HttpPost.METHOD_NAME, index + "/_close");, +        Response response = client().performRequest(HttpHead.METHOD_NAME, "/_alias/" + alias);, +        Response response = client().performRequest(HttpHead.METHOD_NAME, "/" + index + "/_alias/" + alias);]