[+++ b/modules/test/integration/src/test/java/org/elasticsearch/test/stress/search1/Search1StressTest.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.stress.search1;, +, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.search.SearchType;, +import org.elasticsearch.client.action.search.SearchRequestBuilder;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.jsr166y.ThreadLocalRandom;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.index.query.xcontent.QueryBuilders;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.NodeBuilder;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.sort.SortOrder;, +, +import java.util.Arrays;, +import java.util.concurrent.atomic.AtomicLong;, +, +/**, + * @author kimchy (shay.banon), + */, +public class Search1StressTest {, +, +    private final ESLogger logger = Loggers.getLogger(getClass());, +, +, +    private int numberOfNodes = 4;, +, +    private int indexers = 0;, +    private TimeValue indexerThrottle = TimeValue.timeValueMillis(100);, +    private int searchers = 0;, +    private TimeValue searcherThrottle = TimeValue.timeValueMillis(20);, +    private int numberOfIndices = 10;, +    private int numberOfTypes = 4;, +    private int numberOfValues = 20;, +    private int numberOfHits = 300;, +, +    private Settings settings = ImmutableSettings.Builder.EMPTY_SETTINGS;, +, +    private TimeValue period = TimeValue.timeValueMinutes(20);, +, +    private AtomicLong indexCounter = new AtomicLong();, +    private AtomicLong searchCounter = new AtomicLong();, +, +, +    private Node client;, +, +    public Search1StressTest setNumberOfNodes(int numberOfNodes) {, +        this.numberOfNodes = numberOfNodes;, +        return this;, +    }, +, +    public Search1StressTest setIndexers(int indexers) {, +        this.indexers = indexers;, +        return this;, +    }, +, +    public Search1StressTest setIndexerThrottle(TimeValue indexerThrottle) {, +        this.indexerThrottle = indexerThrottle;, +        return this;, +    }, +, +    public Search1StressTest setSearchers(int searchers) {, +        this.searchers = searchers;, +        return this;, +    }, +, +    public Search1StressTest setSearcherThrottle(TimeValue searcherThrottle) {, +        this.searcherThrottle = searcherThrottle;, +        return this;, +    }, +, +    public Search1StressTest setNumberOfIndices(int numberOfIndices) {, +        this.numberOfIndices = numberOfIndices;, +        return this;, +    }]