[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +            performOnReplicas(replicaRequest, primary.globalCheckpoint(), shards);, +    private void performOnReplicas(final ReplicaRequest replicaRequest, final long globalCheckpoint, final List<ShardRouting> shards) {, +                performOnReplica(shard, replicaRequest, globalCheckpoint);, +                performOnReplica(shard.getTargetRelocatingShard(), replicaRequest, globalCheckpoint);, +    private void performOnReplica(final ShardRouting shard, final ReplicaRequest replicaRequest, final long globalCheckpoint) {, +        replicasProxy.performOn(shard, replicaRequest, globalCheckpoint, new ActionListener<ReplicaResponse>() {, +        /**, +         * Returns the local checkpoint on the primary shard., +         *, +         * @return the local checkpoint, +         */, +, +        /**, +         * Returns the global checkpoint on the primary shard., +         *, +         * @return the global checkpoint, +         */, +        long globalCheckpoint();, +, +         * Performs the the specified request on the specified replica., +         * @param replica          the shard this request should be executed on, +         * @param replicaRequest   the operation to perform, +         * @param globalCheckpoint the global checkpoint on the primary, +         * @param listener         callback for handling the response or failure, +        void performOn(ShardRouting replica, RequestT replicaRequest, long globalCheckpoint, ActionListener<ReplicaResponse> listener);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +            performOnReplicas(replicaRequest, primary.globalCheckpoint(), shards);, +    private void performOnReplicas(final ReplicaRequest replicaRequest, final long globalCheckpoint, final List<ShardRouting> shards) {, +                performOnReplica(shard, replicaRequest, globalCheckpoint);, +                performOnReplica(shard.getTargetRelocatingShard(), replicaRequest, globalCheckpoint);, +    private void performOnReplica(final ShardRouting shard, final ReplicaRequest replicaRequest, final long globalCheckpoint) {, +        replicasProxy.performOn(shard, replicaRequest, globalCheckpoint, new ActionListener<ReplicaResponse>() {, +        /**, +         * Returns the local checkpoint on the primary shard., +         *, +         * @return the local checkpoint, +         */, +, +        /**, +         * Returns the global checkpoint on the primary shard., +         *, +         * @return the global checkpoint, +         */, +        long globalCheckpoint();, +, +         * Performs the the specified request on the specified replica., +         * @param replica          the shard this request should be executed on, +         * @param replicaRequest   the operation to perform, +         * @param globalCheckpoint the global checkpoint on the primary, +         * @param listener         callback for handling the response or failure, +        void performOn(ShardRouting replica, RequestT replicaRequest, long globalCheckpoint, ActionListener<ReplicaResponse> listener);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +            () -> new ConcreteReplicaRequest<>(replicaRequest),, +     * Resolves derived values in the request. For example, the target shard id of the incoming request, if not set at request construction., +    protected void resolveRequest(final IndexMetaData indexMetaData, final Request request) {, +    class ReplicaOperationTransportHandler implements TransportRequestHandler<ConcreteReplicaRequest<ReplicaRequest>> {, +, +        public void messageReceived(, +                final ConcreteReplicaRequest<ReplicaRequest> replicaRequest, final TransportChannel channel) throws Exception {, +        public void messageReceived(, +                final ConcreteReplicaRequest<ReplicaRequest> replicaRequest,, +                final TransportChannel channel,, +                final Task task), +            new AsyncReplicaAction(, +                    replicaRequest.getRequest(),, +                    replicaRequest.getTargetAllocationID(),, +                    replicaRequest.getGlobalCheckpoint(),, +                    channel,, +                    (ReplicationTask) task).run();, +, +        private final long globalCheckpoint;]