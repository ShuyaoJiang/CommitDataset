[+++ b/plugins/hadoop/src/main/java/org/elasticsearch/gateway/hdfs/HdfsGateway.java, +import java.net.URI;, +    private final boolean closeFileSystem;, +, +    private final String uri;, +, +        this.closeFileSystem = componentSettings.getAsBoolean("close_fs", true);, +        this.uri = componentSettings.get("uri");, +        if (uri == null) {, +            throw new ElasticSearchIllegalArgumentException("hdfs gateway requires the 'uri' setting to be set");, +        }, +        logger.debug("Using uri [{}], path [{}]", this.uri, this.path);, +, +        fileSystem = FileSystem.get(URI.create(uri), conf);, +        if (closeFileSystem) {, +    }, +            if (oldFiles != null) {, +            }, +        if (files == null || files.length == 0) {, +            return -1;, +        }, +                } catch (Exception e) {, +++ b/plugins/hadoop/src/main/java/org/elasticsearch/gateway/hdfs/HdfsGateway.java, +import java.net.URI;, +    private final boolean closeFileSystem;, +, +    private final String uri;, +, +        this.closeFileSystem = componentSettings.getAsBoolean("close_fs", true);, +        this.uri = componentSettings.get("uri");, +        if (uri == null) {, +            throw new ElasticSearchIllegalArgumentException("hdfs gateway requires the 'uri' setting to be set");, +        }, +        logger.debug("Using uri [{}], path [{}]", this.uri, this.path);, +, +        fileSystem = FileSystem.get(URI.create(uri), conf);, +        if (closeFileSystem) {, +    }, +            if (oldFiles != null) {, +            }, +        if (files == null || files.length == 0) {, +            return -1;, +        }, +                } catch (Exception e) {, +++ b/plugins/hadoop/src/main/java/org/elasticsearch/index/gateway/hdfs/HdfsIndexShardGateway.java, +                if (existingFiles != null) {, +                }, +        if (files == null || files.length == 0) {, +            return new RecoveryStatus.Index(-1, 0, new SizeValue(0, SizeUnit.BYTES), TimeValue.timeValueMillis(0));, +        }, +, +                    fileStream.close();, +++ b/plugins/hadoop/src/main/java/org/elasticsearch/gateway/hdfs/HdfsGateway.java, +import java.net.URI;, +    private final boolean closeFileSystem;, +, +    private final String uri;, +, +        this.closeFileSystem = componentSettings.getAsBoolean("close_fs", true);, +        this.uri = componentSettings.get("uri");, +        if (uri == null) {, +            throw new ElasticSearchIllegalArgumentException("hdfs gateway requires the 'uri' setting to be set");, +        }, +        logger.debug("Using uri [{}], path [{}]", this.uri, this.path);, +, +        fileSystem = FileSystem.get(URI.create(uri), conf);, +        if (closeFileSystem) {, +    }, +            if (oldFiles != null) {, +            }, +        if (files == null || files.length == 0) {, +            return -1;, +        }, +                } catch (Exception e) {, +++ b/plugins/hadoop/src/main/java/org/elasticsearch/index/gateway/hdfs/HdfsIndexShardGateway.java, +                if (existingFiles != null) {, +                }, +        if (files == null || files.length == 0) {, +            return new RecoveryStatus.Index(-1, 0, new SizeValue(0, SizeUnit.BYTES), TimeValue.timeValueMillis(0));, +        }, +, +                    fileStream.close();, +++ b/plugins/hadoop/src/test/java/org/elasticsearch/hadoop/gateway/HdfsGatewayTests.java, +        // start the node and reset the gateway, +        node.close();, +        // now start the node clean, +        node = buildNode().start();, +//                .put("gateway.hdfs.uri", "hdfs://training-vm.local:8022"), +                .put("gateway.hdfs.uri", "file:///")]