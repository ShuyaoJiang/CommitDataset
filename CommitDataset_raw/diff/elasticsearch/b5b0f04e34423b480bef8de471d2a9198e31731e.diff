[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.publish.maven.plugins.MavenPublishPlugin, +        project.plugins.withType(MavenPublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.publish.maven.plugins.MavenPublishPlugin, +        project.plugins.withType(MavenPublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import org.gradle.api.Task, +import org.gradle.api.XmlProvider, +import org.gradle.api.publish.maven.MavenPublication, +import org.gradle.api.publish.maven.plugins.MavenPublishPlugin, +, +import java.nio.file.Files, +import java.nio.file.Path, +import java.nio.file.StandardCopyOption, +, +            boolean isModule = project.path.startsWith(':modules:'), +            if (project.pluginProperties.extension.hasClientJar) {, +                // for plugins which work with the transport client, we copy the jar, +                // file to a new name, copy the nebula generated pom to the same name,, +                // and generate a different pom for the zip, +                project.signArchives.enabled = false, +                addJarPomGeneration(project), +                addClientJarTask(project), +                if (isModule == false) {, +                    addZipPomGeneration(project), +                }, +            } else {, +                // no client plugin, so use the pom file from nebula, without jar, for the zip, +                project.ext.set("nebulaPublish.maven.jar", false), +            }, +, +            if (isModule) {, +                addZipPomGeneration(project), +    /** Adds a task to move jar and associated files to a "-client" name. */, +    protected static void addClientJarTask(Project project) {, +        Task clientJar = project.tasks.create('clientJar'), +        clientJar.dependsOn('generatePomFileForJarPublication', project.jar, project.javadocJar, project.sourcesJar), +        clientJar.doFirst {, +            Path jarFile = project.jar.outputs.files.singleFile.toPath(), +            String clientFileName = jarFile.fileName.toString().replace(project.version, "client-${project.version}"), +            Files.move(jarFile, jarFile.resolveSibling(clientFileName), StandardCopyOption.REPLACE_EXISTING), +, +            String pomFileName = jarFile.fileName.toString().replace('.jar', '.pom'), +            String clientPomFileName = clientFileName.replace('.jar', '.pom'), +            Files.move(jarFile.resolveSibling(pomFileName), jarFile.resolveSibling(clientPomFileName),, +                    StandardCopyOption.REPLACE_EXISTING), +, +            String sourcesFileName = jarFile.fileName.toString().replace('.jar', '-sources.jar'), +            String clientSourcesFileName = clientFileName.replace('.jar', '-sources.jar'), +            Files.move(jarFile.resolveSibling(sourcesFileName), jarFile.resolveSibling(clientSourcesFileName),, +                    StandardCopyOption.REPLACE_EXISTING), +, +            String javadocFileName = jarFile.fileName.toString().replace('.jar', '-javadoc.jar'), +            String clientJavadocFileName = clientFileName.replace('.jar', '-javadoc.jar'), +            Files.move(jarFile.resolveSibling(javadocFileName), jarFile.resolveSibling(clientJavadocFileName),, +                    StandardCopyOption.REPLACE_EXISTING), +        }, +        project.assemble.dependsOn(clientJar), +    }, +, +    /** Adds nebula publishing task to generate a pom file for the plugin. */, +    protected static void addJarPomGeneration(Project project) {, +        project.plugins.apply(MavenPublishPlugin.class), +                jar(MavenPublication) {, +                    from project.components.java, +                    pom.withXml { XmlProvider xml ->, +                        Node root = xml.asNode(), +                        root.appendNode('name', project.pluginProperties.extension.name), +                        root.appendNode('description', project.pluginProperties.extension.description), +                        Node scmNode = root.appendNode('scm'), +                        scmNode.appendNode('url', project.scminfo.origin), +    /** Adds a task to generate a*/, +    protected void addZipPomGeneration(Project project) {, +        project.plugins.apply(MavenPublishPlugin.class), +, +        project.publishing {, +            publications {, +                zip(MavenPublication) {, +                    artifact project.bundlePlugin, +                    pom.packaging = 'pom', +                    pom.withXml { XmlProvider xml ->, +                        Node root = xml.asNode(), +                        root.appendNode('name', project.pluginProperties.extension.name), +                        root.appendNode('description', project.pluginProperties.extension.description), +                        Node scmNode = root.appendNode('scm'), +                        scmNode.appendNode('url', project.scminfo.origin), +                    }, +                }, +            }, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.publish.maven.plugins.MavenPublishPlugin, +        project.plugins.withType(MavenPublishPlugin.class).whenPluginAdded {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +import org.gradle.api.Task, +import org.gradle.api.XmlProvider, +import org.gradle.api.publish.maven.MavenPublication, +import org.gradle.api.publish.maven.plugins.MavenPublishPlugin, +]