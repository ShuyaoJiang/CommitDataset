[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +import org.elasticsearch.search.internal.ShardSearchRequest;, +        TransportActionProxy.registerProxyAction(transportService, FREE_CONTEXT_SCROLL_ACTION_NAME,, +                (Supplier<TransportResponse>) SearchFreeContextResponse::new);, +        TransportActionProxy.registerProxyAction(transportService, FREE_CONTEXT_ACTION_NAME,, +                (Supplier<TransportResponse>) SearchFreeContextResponse::new);, +        TransportActionProxy.registerProxyAction(transportService, QUERY_ACTION_NAME,, +                (request) -> ((ShardSearchRequest)request).numberOfShards() == 1 ? QueryFetchSearchResult::new : QuerySearchResult::new);, +        TransportActionProxy.registerProxyAction(transportService, QUERY_CAN_MATCH_NAME,, +                (Supplier<TransportResponse>) CanMatchResponse::new);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +import org.elasticsearch.search.internal.ShardSearchRequest;, +        TransportActionProxy.registerProxyAction(transportService, FREE_CONTEXT_SCROLL_ACTION_NAME,, +                (Supplier<TransportResponse>) SearchFreeContextResponse::new);, +        TransportActionProxy.registerProxyAction(transportService, FREE_CONTEXT_ACTION_NAME,, +                (Supplier<TransportResponse>) SearchFreeContextResponse::new);, +        TransportActionProxy.registerProxyAction(transportService, QUERY_ACTION_NAME,, +                (request) -> ((ShardSearchRequest)request).numberOfShards() == 1 ? QueryFetchSearchResult::new : QuerySearchResult::new);, +        TransportActionProxy.registerProxyAction(transportService, QUERY_CAN_MATCH_NAME,, +                (Supplier<TransportResponse>) CanMatchResponse::new);, +++ b/core/src/main/java/org/elasticsearch/transport/TransportActionProxy.java, +import java.util.function.Function;, +import java.util.function.Supplier;, +        private final Function<TransportRequest, Supplier<TransportResponse>> responseFunction;, +        ProxyRequestHandler(TransportService service, String action, Function<TransportRequest,, +                Supplier<TransportResponse>> responseFunction) {, +            this.responseFunction = responseFunction;, +            service.sendRequest(targetNode, action, wrappedRequest,, +                    new ProxyResponseHandler<>(channel, responseFunction.apply(wrappedRequest)));, +     * Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the, +     * response type changes based on the upcoming request (quite rare), +     */, +    public static void registerProxyAction(TransportService service, String action,, +                                           Function<TransportRequest, Supplier<TransportResponse>> responseFunction) {, +        RequestHandlerRegistry requestHandler = service.getRequestHandler(action);, +        service.registerRequestHandler(getProxyAction(action), () -> new ProxyRequest(requestHandler::newRequest), ThreadPool.Names.SAME,, +            true, false, new ProxyRequestHandler<>(service, action, responseFunction));, +    }, +, +    /**, +     * Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the, +     * response type is always the same (most of the cases)., +                true, false, new ProxyRequestHandler<>(service, action, request -> responseSupplier));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +import org.elasticsearch.search.internal.ShardSearchRequest;, +        TransportActionProxy.registerProxyAction(transportService, FREE_CONTEXT_SCROLL_ACTION_NAME,, +                (Supplier<TransportResponse>) SearchFreeContextResponse::new);, +        TransportActionProxy.registerProxyAction(transportService, FREE_CONTEXT_ACTION_NAME,, +                (Supplier<TransportResponse>) SearchFreeContextResponse::new);, +        TransportActionProxy.registerProxyAction(transportService, QUERY_ACTION_NAME,, +                (request) -> ((ShardSearchRequest)request).numberOfShards() == 1 ? QueryFetchSearchResult::new : QuerySearchResult::new);, +        TransportActionProxy.registerProxyAction(transportService, QUERY_CAN_MATCH_NAME,, +                (Supplier<TransportResponse>) CanMatchResponse::new);, +++ b/core/src/main/java/org/elasticsearch/transport/TransportActionProxy.java, +import java.util.function.Function;, +import java.util.function.Supplier;, +        private final Function<TransportRequest, Supplier<TransportResponse>> responseFunction;, +        ProxyRequestHandler(TransportService service, String action, Function<TransportRequest,, +                Supplier<TransportResponse>> responseFunction) {, +            this.responseFunction = responseFunction;, +            service.sendRequest(targetNode, action, wrappedRequest,, +                    new ProxyResponseHandler<>(channel, responseFunction.apply(wrappedRequest)));, +     * Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the, +     * response type changes based on the upcoming request (quite rare), +     */, +    public static void registerProxyAction(TransportService service, String action,, +                                           Function<TransportRequest, Supplier<TransportResponse>> responseFunction) {, +        RequestHandlerRegistry requestHandler = service.getRequestHandler(action);, +        service.registerRequestHandler(getProxyAction(action), () -> new ProxyRequest(requestHandler::newRequest), ThreadPool.Names.SAME,, +            true, false, new ProxyRequestHandler<>(service, action, responseFunction));, +    }, +, +    /**, +     * Registers a proxy request handler that allows to forward requests for the given action to another node. To be used when the, +     * response type is always the same (most of the cases)., +                true, false, new ProxyRequestHandler<>(service, action, request -> responseSupplier));, +++ b/qa/multi-cluster-search/src/test/resources/rest-api-spec/test/multi_cluster/10_basic.yml, +, +---, +"Single shard search gets properly proxied":, +, +  - do:, +      search:, +        index: "my_remote_cluster:single_doc_index", +, +  - match: { _shards.total: 1 }, +  - match: { hits.total: 1 }, +  - match: { hits.hits.0._index: "my_remote_cluster:single_doc_index"}]