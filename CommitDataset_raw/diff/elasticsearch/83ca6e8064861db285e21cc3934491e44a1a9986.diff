[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlDailyMaintenanceService.java, +import org.elasticsearch.action.ActionListener;, +        client.execute(DeleteExpiredDataAction.INSTANCE, new DeleteExpiredDataAction.Request(), ActionListener.wrap(, +                response -> LOGGER.info("Successfully completed [ML] maintenance tasks"),, +                e -> LOGGER.error("An error occurred during maintenance tasks execution", e)));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlDailyMaintenanceService.java, +import org.elasticsearch.action.ActionListener;, +        client.execute(DeleteExpiredDataAction.INSTANCE, new DeleteExpiredDataAction.Request(), ActionListener.wrap(, +                response -> LOGGER.info("Successfully completed [ML] maintenance tasks"),, +                e -> LOGGER.error("An error occurred during maintenance tasks execution", e)));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteExpiredDataAction.java, +                remover.remove(ActionListener.wrap(, +                        booleanResponse -> deleteExpiredData(mlDataRemoversIterator, listener),, +                        listener::onFailure));, +                logger.info("Completed deletion of expired data");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlDailyMaintenanceService.java, +import org.elasticsearch.action.ActionListener;, +        client.execute(DeleteExpiredDataAction.INSTANCE, new DeleteExpiredDataAction.Request(), ActionListener.wrap(, +                response -> LOGGER.info("Successfully completed [ML] maintenance tasks"),, +                e -> LOGGER.error("An error occurred during maintenance tasks execution", e)));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteExpiredDataAction.java, +                remover.remove(ActionListener.wrap(, +                        booleanResponse -> deleteExpiredData(mlDataRemoversIterator, listener),, +                        listener::onFailure));, +                logger.info("Completed deletion of expired data");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java, +import org.elasticsearch.action.ActionListener;, +    public void remove(ActionListener<Boolean> listener) {, +        removeData(newJobIterator(), listener);, +    private void removeData(Iterator<Job> jobIterator, ActionListener<Boolean> listener) {, +            listener.onResponse(true);, +            removeData(jobIterator, listener);, +        removeDataBefore(job, cutoffEpochMs, ActionListener.wrap(response -> removeData(jobIterator, listener), listener::onFailure));, +     * Implementors need to call {@code listener.onResponse} when they are done in order to continue to the next job., +    protected abstract void removeDataBefore(Job job, long cutoffEpochMs, ActionListener<Boolean> listener);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlDailyMaintenanceService.java, +import org.elasticsearch.action.ActionListener;, +        client.execute(DeleteExpiredDataAction.INSTANCE, new DeleteExpiredDataAction.Request(), ActionListener.wrap(, +                response -> LOGGER.info("Successfully completed [ML] maintenance tasks"),, +                e -> LOGGER.error("An error occurred during maintenance tasks execution", e)));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteExpiredDataAction.java, +                remover.remove(ActionListener.wrap(, +                        booleanResponse -> deleteExpiredData(mlDataRemoversIterator, listener),, +                        listener::onFailure));, +                logger.info("Completed deletion of expired data");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java, +import org.elasticsearch.action.ActionListener;, +    public void remove(ActionListener<Boolean> listener) {, +        removeData(newJobIterator(), listener);, +    private void removeData(Iterator<Job> jobIterator, ActionListener<Boolean> listener) {, +            listener.onResponse(true);, +            removeData(jobIterator, listener);, +        removeDataBefore(job, cutoffEpochMs, ActionListener.wrap(response -> removeData(jobIterator, listener), listener::onFailure));, +     * Implementors need to call {@code listener.onResponse} when they are done in order to continue to the next job., +    protected abstract void removeDataBefore(Job job, long cutoffEpochMs, ActionListener<Boolean> listener);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java, +import org.elasticsearch.ElasticsearchException;, +    protected void removeDataBefore(Job job, long cutoffEpochMs, ActionListener<Boolean> listener) {, +            listener.onResponse(true);, +                    deleteModelSnapshots(createVolatileCursorIterator(modelSnapshots), listener);, +                listener.onFailure(new ElasticsearchException("[" + job.getId() +  "] Search for expired snapshots failed", e));, +    private void deleteModelSnapshots(Iterator<ModelSnapshot> modelSnapshotIterator, ActionListener<Boolean> listener) {, +            listener.onResponse(true);, +                        deleteModelSnapshots(modelSnapshotIterator, listener);, +                    listener.onFailure(new ElasticsearchException("[" + modelSnapshot.getJobId() +  "] Failed to delete snapshot [", +                            + modelSnapshot.getSnapshotId() + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlDailyMaintenanceService.java, +import org.elasticsearch.action.ActionListener;, +        client.execute(DeleteExpiredDataAction.INSTANCE, new DeleteExpiredDataAction.Request(), ActionListener.wrap(, +                response -> LOGGER.info("Successfully completed [ML] maintenance tasks"),, +                e -> LOGGER.error("An error occurred during maintenance tasks execution", e)));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteExpiredDataAction.java, +                remover.remove(ActionListener.wrap(, +                        booleanResponse -> deleteExpiredData(mlDataRemoversIterator, listener),, +                        listener::onFailure));, +                logger.info("Completed deletion of expired data");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/retention/AbstractExpiredJobDataRemover.java, +import org.elasticsearch.action.ActionListener;, +    public void remove(ActionListener<Boolean> listener) {, +        removeData(newJobIterator(), listener);, +    private void removeData(Iterator<Job> jobIterator, ActionListener<Boolean> listener) {, +            listener.onResponse(true);, +            removeData(jobIterator, listener);, +        removeDataBefore(job, cutoffEpochMs, ActionListener.wrap(response -> removeData(jobIterator, listener), listener::onFailure));, +     * Implementors need to call {@code listener.onResponse} when they are done in order to continue to the next job., +    protected abstract void removeDataBefore(Job job, long cutoffEpochMs, ActionListener<Boolean> listener);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java, +import org.elasticsearch.ElasticsearchException;, +    protected void removeDataBefore(Job job, long cutoffEpochMs, ActionListener<Boolean> listener) {, +            listener.onResponse(true);, +                    deleteModelSnapshots(createVolatileCursorIterator(modelSnapshots), listener);, +                listener.onFailure(new ElasticsearchException("[" + job.getId() +  "] Search for expired snapshots failed", e));, +    private void deleteModelSnapshots(Iterator<ModelSnapshot> modelSnapshotIterator, ActionListener<Boolean> listener) {, +            listener.onResponse(true);, +                        deleteModelSnapshots(modelSnapshotIterator, listener);, +                    listener.onFailure(new ElasticsearchException("[" + modelSnapshot.getJobId() +  "] Failed to delete snapshot [", +                            + modelSnapshot.getSnapshotId() + "]", e));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredResultsRemover.java, +import org.elasticsearch.ElasticsearchException;, +    protected void removeDataBefore(Job job, long cutoffEpochMs, ActionListener<Boolean> listener) {]