[+++ b/src/test/java/org/elasticsearch/test/ElasticsearchSingleNodeLuceneTestCase.java, +        ElasticsearchSingleNodeTest.cleanup(resetNodeAfterTest());, +    }, +, +    /**, +     * This method returns <code>true</code> if the node that is used in the background should be reset, +     * after each test. This is useful if the test changes the cluster state metadata etc. The default is, +     * <code>false</code>., +     */, +    protected boolean resetNodeAfterTest() {, +        return false;, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchSingleNodeLuceneTestCase.java, +        ElasticsearchSingleNodeTest.cleanup(resetNodeAfterTest());, +    }, +, +    /**, +     * This method returns <code>true</code> if the node that is used in the background should be reset, +     * after each test. This is useful if the test changes the cluster state metadata etc. The default is, +     * <code>false</code>., +     */, +    protected boolean resetNodeAfterTest() {, +        return false;, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchSingleNodeTest.java, +        private static Node NODE = newNode();, +, +        private static void reset() {, +            assert NODE != null;, +            node().stop();, +            Holder.NODE = newNode();, +        }, +    static void cleanup(boolean resetNode) {, +        if (resetNode) {, +            Holder.reset();, +        }, +        cleanup(resetNodeAfterTest());, +    }, +, +    /**, +     * This method returns <code>true</code> if the node that is used in the background should be reset, +     * after each test. This is useful if the test changes the cluster state metadata etc. The default is, +     * <code>false</code>., +     */, +    protected boolean resetNodeAfterTest() {, +        return false;]