[+++ b/docs/reference/modules/http.asciidoc, +|`http.pipelining` |Enable or disable HTTP pipelining, defaults to `true`., +, +|`http.pipelining.max_events` |The maximum number of events to be queued up in memory before a HTTP connection is closed, defaults to `10000`., +++ b/docs/reference/modules/http.asciidoc, +|`http.pipelining` |Enable or disable HTTP pipelining, defaults to `true`., +, +|`http.pipelining.max_events` |The maximum number of events to be queued up in memory before a HTTP connection is closed, defaults to `10000`., +++ b/pom.xml, +                                <exclude>src/main/java/org/elasticsearch/common/inject/**</exclude>, +                                <exclude>src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/tdigest/TDigestState.java</exclude>, +                                <!-- netty pipelining -->, +                                <exclude>src/main/java/org/elasticsearch/http/netty/pipelining/**</exclude>, +++ b/docs/reference/modules/http.asciidoc, +|`http.pipelining` |Enable or disable HTTP pipelining, defaults to `true`., +, +|`http.pipelining.max_events` |The maximum number of events to be queued up in memory before a HTTP connection is closed, defaults to `10000`., +++ b/pom.xml, +                                <exclude>src/main/java/org/elasticsearch/common/inject/**</exclude>, +                                <exclude>src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/tdigest/TDigestState.java</exclude>, +                                <!-- netty pipelining -->, +                                <exclude>src/main/java/org/elasticsearch/http/netty/pipelining/**</exclude>, +++ b/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java, +import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;, +    private final boolean httpPipeliningEnabled;, +        this.httpPipeliningEnabled = serverTransport.pipelining;, +        HttpRequest request;, +        OrderedUpstreamMessageEvent oue = null;, +        if (this.httpPipeliningEnabled && e instanceof OrderedUpstreamMessageEvent) {, +            oue = (OrderedUpstreamMessageEvent) e;, +            request = (HttpRequest) oue.getMessage();, +        } else {, +            request = (HttpRequest) e.getMessage();, +        }, +, +        if (oue != null) {, +            serverTransport.dispatchRequest(httpRequest, new NettyHttpChannel(serverTransport, httpRequest, corsPattern, oue));, +        } else {, +            serverTransport.dispatchRequest(httpRequest, new NettyHttpChannel(serverTransport, httpRequest, corsPattern));, +        }, +++ b/docs/reference/modules/http.asciidoc, +|`http.pipelining` |Enable or disable HTTP pipelining, defaults to `true`., +, +|`http.pipelining.max_events` |The maximum number of events to be queued up in memory before a HTTP connection is closed, defaults to `10000`., +++ b/pom.xml, +                                <exclude>src/main/java/org/elasticsearch/common/inject/**</exclude>, +                                <exclude>src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/tdigest/TDigestState.java</exclude>, +                                <!-- netty pipelining -->, +                                <exclude>src/main/java/org/elasticsearch/http/netty/pipelining/**</exclude>, +++ b/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java, +import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;, +    private final boolean httpPipeliningEnabled;, +        this.httpPipeliningEnabled = serverTransport.pipelining;, +        HttpRequest request;, +        OrderedUpstreamMessageEvent oue = null;, +        if (this.httpPipeliningEnabled && e instanceof OrderedUpstreamMessageEvent) {, +            oue = (OrderedUpstreamMessageEvent) e;, +            request = (HttpRequest) oue.getMessage();, +        } else {, +            request = (HttpRequest) e.getMessage();, +        }, +, +        if (oue != null) {, +            serverTransport.dispatchRequest(httpRequest, new NettyHttpChannel(serverTransport, httpRequest, corsPattern, oue));, +        } else {, +            serverTransport.dispatchRequest(httpRequest, new NettyHttpChannel(serverTransport, httpRequest, corsPattern));, +        }, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +import org.elasticsearch.http.netty.pipelining.OrderedDownstreamChannelEvent;, +import org.elasticsearch.http.netty.pipelining.OrderedUpstreamMessageEvent;, +import org.jboss.netty.channel.*;, +    private OrderedUpstreamMessageEvent orderedUpstreamMessageEvent = null;, +    public NettyHttpChannel(NettyHttpServerTransport transport, NettyHttpRequest request, Pattern corsPattern) {, +        this.channel = request.getChannel();, +    public NettyHttpChannel(NettyHttpServerTransport transport, NettyHttpRequest request, Pattern corsPattern, OrderedUpstreamMessageEvent orderedUpstreamMessageEvent) {, +        this(transport, request, corsPattern);, +        this.orderedUpstreamMessageEvent = orderedUpstreamMessageEvent;, +    }, +, +            ChannelFuture future;, +, +            if (orderedUpstreamMessageEvent != null) {, +                OrderedDownstreamChannelEvent downstreamChannelEvent = new OrderedDownstreamChannelEvent(orderedUpstreamMessageEvent, 0, true, resp);, +                future = downstreamChannelEvent.getFuture();, +                channel.getPipeline().sendDownstream(downstreamChannelEvent);, +            } else {, +                future = channel.write(resp);, +            }, +, +, +, +++ b/docs/reference/modules/http.asciidoc, +|`http.pipelining` |Enable or disable HTTP pipelining, defaults to `true`., +, +|`http.pipelining.max_events` |The maximum number of events to be queued up in memory before a HTTP connection is closed, defaults to `10000`., +++ b/pom.xml, +                                <exclude>src/main/java/org/elasticsearch/common/inject/**</exclude>, +                                <exclude>src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/tdigest/TDigestState.java</exclude>, +                                <!-- netty pipelining -->, +                                <exclude>src/main/java/org/elasticsearch/http/netty/pipelining/**</exclude>]