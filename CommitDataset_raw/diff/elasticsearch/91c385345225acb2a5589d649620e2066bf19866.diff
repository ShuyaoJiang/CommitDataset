[+++ b/src/test/java/org/elasticsearch/test/integration/recovery/RecoveryWhileUnderLoadTests.java, +        boolean error = false;, +            logCountResponse(numberOfShards, numberOfDocs, i, countResponse);, +            if (countResponse.getCount() != numberOfDocs) {, +                error = true;, +        //if there was an error we try to refresh again and run another iteration, +        //we want to find out if we had a refresh problem or if we are missing documents on a shard, +        if (error) {, +            logger.info("--> refreshing again");, +            refresh();, +                CountResponse countResponse = client().prepareCount().setQuery(matchAllQuery()).execute().actionGet();, +                logCountResponse(numberOfShards, numberOfDocs, i, countResponse);, +        //lets now make the test fail if it was supposed to fail, +        for (int i = 0; i < iterations; i++) {, +            assertHitCount(iterationResults[i], numberOfDocs);, +        }, +    }, +, +    private void logCountResponse(int numberOfShards, long numberOfDocs, int iteration, CountResponse countResponse) {, +        logger.info("iteration [{}] - successful shards: {} (expected {})", iteration, countResponse.getSuccessfulShards(), numberOfShards);, +        logger.info("iteration [{}] - failed shards: {} (expected 0)", iteration, countResponse.getFailedShards());, +        if (countResponse.getShardFailures() != null && countResponse.getShardFailures().length > 0) {, +            logger.info("iteration [{}] - shard failures: {}", iteration, Arrays.toString(countResponse.getShardFailures()));, +        }, +        logger.info("iteration [{}] - returned documents: {} (expected {})", iteration, countResponse.getCount(), numberOfDocs);, +    }, +]