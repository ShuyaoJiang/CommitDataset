[+++ b/core/src/main/java/org/elasticsearch/index/query/QueryWrappingQueryBuilder.java, +public class QueryWrappingQueryBuilder extends AbstractQueryBuilder<QueryWrappingQueryBuilder> implements SpanQueryBuilder<QueryWrappingQueryBuilder>, MultiTermQueryBuilder<QueryWrappingQueryBuilder>{, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryWrappingQueryBuilder.java, +public class QueryWrappingQueryBuilder extends AbstractQueryBuilder<QueryWrappingQueryBuilder> implements SpanQueryBuilder<QueryWrappingQueryBuilder>, MultiTermQueryBuilder<QueryWrappingQueryBuilder>{, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryBuilder.java, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.spans.SpanOrQuery;, +import org.apache.lucene.search.spans.SpanQuery;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.util.List;, +import java.util.Objects;, +    private final ArrayList<SpanQueryBuilder> clauses = new ArrayList<>();, +        clauses.add(Objects.requireNonNull(clause));, +    /**, +     * @return the {@link SpanQueryBuilder} clauses that were set for this query, +     */, +    public List<SpanQueryBuilder> clauses() {, +        return this.clauses;, +    }, +, +    protected Query doToQuery(QueryParseContext parseContext) throws IOException {, +        SpanQuery[] spanQueries = new SpanQuery[clauses.size()];, +        for (int i = 0; i < clauses.size(); i++) {, +            Query query = clauses.get(i).toQuery(parseContext);, +            assert query instanceof SpanQuery;, +            spanQueries[i] = (SpanQuery) query;, +        }, +        return new SpanOrQuery(spanQueries);, +    }, +, +    @Override, +    public QueryValidationException validate() {, +        QueryValidationException validationExceptions = null;, +        if (clauses.isEmpty()) {, +            validationExceptions =  addValidationError("query must include [clauses]", validationExceptions);, +        }, +        for (SpanQueryBuilder innerClause : clauses) {, +            validationExceptions = validateInnerQuery(innerClause, validationExceptions);, +        }, +        return validationExceptions;, +    }, +, +    @Override, +    protected SpanOrQueryBuilder doReadFrom(StreamInput in) throws IOException {, +        SpanOrQueryBuilder queryBuilder = new SpanOrQueryBuilder();, +        List<SpanQueryBuilder> clauses = in.readNamedWriteableList();, +        for (SpanQueryBuilder subClause : clauses) {, +            queryBuilder.clause(subClause);, +        }, +        return queryBuilder;, +, +    }, +, +    @Override, +    protected void doWriteTo(StreamOutput out) throws IOException {, +        out.writeNamedWriteableList(clauses);, +    }, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(clauses);, +    }, +, +    @Override, +    protected boolean doEquals(SpanOrQueryBuilder other) {, +        return Objects.equals(clauses, other.clauses);, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryWrappingQueryBuilder.java, +public class QueryWrappingQueryBuilder extends AbstractQueryBuilder<QueryWrappingQueryBuilder> implements SpanQueryBuilder<QueryWrappingQueryBuilder>, MultiTermQueryBuilder<QueryWrappingQueryBuilder>{, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryBuilder.java, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.spans.SpanOrQuery;, +import org.apache.lucene.search.spans.SpanQuery;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.util.List;, +import java.util.Objects;, +    private final ArrayList<SpanQueryBuilder> clauses = new ArrayList<>();, +        clauses.add(Objects.requireNonNull(clause));, +    /**, +     * @return the {@link SpanQueryBuilder} clauses that were set for this query, +     */, +    public List<SpanQueryBuilder> clauses() {, +        return this.clauses;, +    }, +, +    protected Query doToQuery(QueryParseContext parseContext) throws IOException {, +        SpanQuery[] spanQueries = new SpanQuery[clauses.size()];, +        for (int i = 0; i < clauses.size(); i++) {, +            Query query = clauses.get(i).toQuery(parseContext);, +            assert query instanceof SpanQuery;, +            spanQueries[i] = (SpanQuery) query;, +        }, +        return new SpanOrQuery(spanQueries);, +    }, +, +    @Override]