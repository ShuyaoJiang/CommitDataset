[+++ b/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +import org.elasticsearch.index.query.functionscore.ScoreFunctionBuilder;, +    /**, +     * A query that allows to define a custom scoring function., +     *, +     * @param queryBuilder The query to custom score, +     * @param scoreFunctionBuilder The score function used to re-score the query, +     */, +    public static FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, ScoreFunctionBuilder function) {, +        return (new FunctionScoreQueryBuilder(queryBuilder)).add(function);, +    }, +    public static FunctionScoreQueryBuilder functionScoreQuery(FilterBuilder filterBuilder, ScoreFunctionBuilder function) {, +        return (new FunctionScoreQueryBuilder(filterBuilder)).add(function);, +    }, +    , +    /**, +     * A query that allows to define a custom scoring function., +     *, +     * @param filterBuilder The filterBuilder to custom score, +     */, +++ b/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +import org.elasticsearch.index.query.functionscore.ScoreFunctionBuilder;, +    /**, +     * A query that allows to define a custom scoring function., +     *, +     * @param queryBuilder The query to custom score, +     * @param scoreFunctionBuilder The score function used to re-score the query, +     */, +    public static FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, ScoreFunctionBuilder function) {, +        return (new FunctionScoreQueryBuilder(queryBuilder)).add(function);, +    }, +    public static FunctionScoreQueryBuilder functionScoreQuery(FilterBuilder filterBuilder, ScoreFunctionBuilder function) {, +        return (new FunctionScoreQueryBuilder(filterBuilder)).add(function);, +    }, +    , +    /**, +     * A query that allows to define a custom scoring function., +     *, +     * @param filterBuilder The filterBuilder to custom score, +     */, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/ScoreFunctionBuilders.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.query.functionscore;, +, +import org.elasticsearch.index.query.functionscore.exp.ExponentialDecayFunctionBuilder;, +import org.elasticsearch.index.query.functionscore.factor.FactorBuilder;, +import org.elasticsearch.index.query.functionscore.gauss.GaussDecayFunctionBuilder;, +import org.elasticsearch.index.query.functionscore.lin.LinearDecayFunctionBuilder;, +import org.elasticsearch.index.query.functionscore.random.RandomScoreFunctionBuilder;, +import org.elasticsearch.index.query.functionscore.script.ScriptScoreFunctionBuilder;, +, +import java.util.Map;, +, +public class ScoreFunctionBuilders {, +    /**, +     * A query that match on all documents., +     */, +    public static ExponentialDecayFunctionBuilder exponentialDecayFunction(String fieldName, Object origin, Object scale) {, +        return new ExponentialDecayFunctionBuilder(fieldName, origin, scale);, +    }, +, +    public static ExponentialDecayFunctionBuilder exponentialDecayFunction(String fieldName, Object origin, Object scale, double decay) {, +        return (ExponentialDecayFunctionBuilder) (new ExponentialDecayFunctionBuilder(fieldName, origin, scale)).setDecay(decay);, +    }, +, +    public static ExponentialDecayFunctionBuilder exponentialDecayFunction(String fieldName, Object origin, Object scale, double decay,, +            double offset) {, +        return (ExponentialDecayFunctionBuilder) (new ExponentialDecayFunctionBuilder(fieldName, origin, scale)).setDecay(decay).setOffset(, +                offset);, +    }, +, +    public static GaussDecayFunctionBuilder gaussDecayFunction(String fieldName, Object origin, Object scale) {, +        return new GaussDecayFunctionBuilder(fieldName, origin, scale);, +    }, +, +    public static GaussDecayFunctionBuilder gaussDecayFunction(String fieldName, Object origin, Object scale, double decay) {, +        return (GaussDecayFunctionBuilder) (new GaussDecayFunctionBuilder(fieldName, origin, scale)).setDecay(decay);, +    }, +, +    public static GaussDecayFunctionBuilder gaussDecayFunction(String fieldName, Object origin, Object scale, double decay, double offset) {, +        return (GaussDecayFunctionBuilder) (new GaussDecayFunctionBuilder(fieldName, origin, scale)).setDecay(decay).setOffset(offset);, +    }]