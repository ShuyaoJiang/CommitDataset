[+++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import org.elasticsearch.common.xcontent.ToXContentObject;, +import org.elasticsearch.common.xcontent.XContentHelper;, +        implements DocWriteRequest<UpdateRequest>, WriteRequest<UpdateRequest>, ToXContentObject {, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        if (docAsUpsert) {, +            builder.field("doc_as_upsert", docAsUpsert);, +        }, +        if (doc != null) {, +            XContentType xContentType = doc.getContentType();, +            try (XContentParser parser = XContentHelper.createParser(NamedXContentRegistry.EMPTY, doc.source(), xContentType)) {, +                builder.field("doc");, +                builder.copyCurrentStructure(parser);, +            }, +        }, +        if (script != null) {, +            builder.field("script", script);, +        }, +        if (upsertRequest != null) {, +            XContentType xContentType = upsertRequest.getContentType();, +            try (XContentParser parser = XContentHelper.createParser(NamedXContentRegistry.EMPTY, upsertRequest.source(), xContentType)) {, +                builder.field("upsert");, +                builder.copyCurrentStructure(parser);, +            }, +        }, +        if (scriptedUpsert) {, +            builder.field("scripted_upsert", scriptedUpsert);, +        }, +        if (detectNoop == false) {, +            builder.field("detect_noop", detectNoop);, +        }, +        if (fields != null) {, +            builder.array("fields", fields);, +        }, +        if (fetchSourceContext != null) {, +            builder.field("_source", fetchSourceContext);, +        }, +        builder.endObject();, +        return builder;, +    }, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import org.elasticsearch.common.xcontent.ToXContentObject;, +import org.elasticsearch.common.xcontent.XContentHelper;, +        implements DocWriteRequest<UpdateRequest>, WriteRequest<UpdateRequest>, ToXContentObject {, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        if (docAsUpsert) {, +            builder.field("doc_as_upsert", docAsUpsert);, +        }, +        if (doc != null) {, +            XContentType xContentType = doc.getContentType();, +            try (XContentParser parser = XContentHelper.createParser(NamedXContentRegistry.EMPTY, doc.source(), xContentType)) {, +                builder.field("doc");, +                builder.copyCurrentStructure(parser);, +            }, +        }, +        if (script != null) {, +            builder.field("script", script);, +        }, +        if (upsertRequest != null) {, +            XContentType xContentType = upsertRequest.getContentType();, +            try (XContentParser parser = XContentHelper.createParser(NamedXContentRegistry.EMPTY, upsertRequest.source(), xContentType)) {, +                builder.field("upsert");, +                builder.copyCurrentStructure(parser);, +            }, +        }, +        if (scriptedUpsert) {, +            builder.field("scripted_upsert", scriptedUpsert);, +        }, +        if (detectNoop == false) {, +            builder.field("detect_noop", detectNoop);, +        }, +        if (fields != null) {, +            builder.array("fields", fields);, +        }, +        if (fetchSourceContext != null) {, +            builder.field("_source", fetchSourceContext);, +        }, +        builder.endObject();, +        return builder;, +    }, +++ b/core/src/test/java/org/elasticsearch/action/update/UpdateRequestTests.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.test.RandomObjects;, +import static org.elasticsearch.common.xcontent.XContentHelper.toXContent;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertToXContentEquivalent;, +, +    public void testFromXContent() throws Exception {, +, +    public void testToAndFromXContent() throws IOException {, +        UpdateRequest updateRequest = new UpdateRequest();, +        updateRequest.detectNoop(randomBoolean());, +]