[+++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/http/HttpExporter.java, +public class HttpExporter extends Exporter {, +    public HttpExporter(Exporter.Config config, Environment env, RendererRegistry rendererRegistry) {, +        public Factory(Environment env, RendererRegistry rendererRegistry) {, +            return new HttpExporter(config, env, rendererRegistry);, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/http/HttpExporter.java, +public class HttpExporter extends Exporter {, +    public HttpExporter(Exporter.Config config, Environment env, RendererRegistry rendererRegistry) {, +        public Factory(Environment env, RendererRegistry rendererRegistry) {, +            return new HttpExporter(config, env, rendererRegistry);, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/cleaner/CleanerService.java, +import org.joda.time.chrono.ISOChronology;, +        threadPool.schedule(executionScheduler.nextExecutionDelay(new DateTime(ISOChronology.getInstance())), executorName(), runnable);, +            DateTime start = new DateTime(ISOChronology.getInstance());, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/http/HttpExporter.java, +public class HttpExporter extends Exporter {, +    public HttpExporter(Exporter.Config config, Environment env, RendererRegistry rendererRegistry) {, +        public Factory(Environment env, RendererRegistry rendererRegistry) {, +            return new HttpExporter(config, env, rendererRegistry);, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/cleaner/CleanerService.java, +import org.joda.time.chrono.ISOChronology;, +        threadPool.schedule(executionScheduler.nextExecutionDelay(new DateTime(ISOChronology.getInstance())), executorName(), runnable);, +            DateTime start = new DateTime(ISOChronology.getInstance());, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/license/MarvelLicensee.java, +                                            "Automatic index cleanup is disabled for clusters with [{}] license.", newLicense.type()), +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/http/HttpExporter.java, +public class HttpExporter extends Exporter {, +    public HttpExporter(Exporter.Config config, Environment env, RendererRegistry rendererRegistry) {, +        public Factory(Environment env, RendererRegistry rendererRegistry) {, +            return new HttpExporter(config, env, rendererRegistry);, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/cleaner/CleanerService.java, +import org.joda.time.chrono.ISOChronology;, +        threadPool.schedule(executionScheduler.nextExecutionDelay(new DateTime(ISOChronology.getInstance())), executorName(), runnable);, +            DateTime start = new DateTime(ISOChronology.getInstance());, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/license/MarvelLicensee.java, +                                            "Automatic index cleanup is disabled for clusters with [{}] license.", newLicense.type()), +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/cleaner/AbstractIndicesCleanerTestCase.java, +import java.util.Locale;, +, +        internalCluster().startNode(Settings.builder().put(CleanerService.HISTORY_SETTING.getKey(), String.format(Locale.ROOT, "%dd", retention)));, +        internalCluster().startNode(Settings.builder().put(CleanerService.HISTORY_SETTING.getKey(), String.format(Locale.ROOT, "%dd", defaultRetention)));, +            Settings transientSettings = Settings.builder().put("marvel.agent.exporters." + exporter.name() + "." + CleanerService.HISTORY_DURATION, String.format(Locale.ROOT, "%dd", exporterRetention)).build();, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/agent/exporter/http/HttpExporter.java, +public class HttpExporter extends Exporter {, +    public HttpExporter(Exporter.Config config, Environment env, RendererRegistry rendererRegistry) {, +        public Factory(Environment env, RendererRegistry rendererRegistry) {, +            return new HttpExporter(config, env, rendererRegistry);, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/cleaner/CleanerService.java, +import org.joda.time.chrono.ISOChronology;, +        threadPool.schedule(executionScheduler.nextExecutionDelay(new DateTime(ISOChronology.getInstance())), executorName(), runnable);, +            DateTime start = new DateTime(ISOChronology.getInstance());, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/license/MarvelLicensee.java, +                                            "Automatic index cleanup is disabled for clusters with [{}] license.", newLicense.type()), +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/cleaner/AbstractIndicesCleanerTestCase.java, +import java.util.Locale;, +, +        internalCluster().startNode(Settings.builder().put(CleanerService.HISTORY_SETTING.getKey(), String.format(Locale.ROOT, "%dd", retention)));, +        internalCluster().startNode(Settings.builder().put(CleanerService.HISTORY_SETTING.getKey(), String.format(Locale.ROOT, "%dd", defaultRetention)));, +            Settings transientSettings = Settings.builder().put("marvel.agent.exporters." + exporter.name() + "." + CleanerService.HISTORY_DURATION, String.format(Locale.ROOT, "%dd", exporterRetention)).build();, +++ /dev/null]