[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetDatafeedsStatsAction.java, +import java.util.Collections;, +import java.util.List;, +import java.util.stream.Collectors;, +        protected void masterOperation(Request request, ClusterState state,, +                                       ActionListener<Response> listener) throws Exception {, +, +            if (request.getDatafeedId().equals(ALL) == false, +                    && mlMetadata.getDatafeed(request.getDatafeedId()) == null) {, +            List<String> expandedDatafeedsIds = request.getDatafeedId().equals(ALL) ?, +                    mlMetadata.getDatafeeds().values().stream(), +                            .map(d -> d.getId()).collect(Collectors.toList()), +                    : Collections.singletonList(request.getDatafeedId());, +, +            PersistentTasks tasksInProgress = state.getMetaData().custom(PersistentTasks.TYPE);, +            List<DatafeedStats> results = expandedDatafeedsIds.stream(), +                    .map(datafeedId -> getDatafeedStats(datafeedId, state, tasksInProgress)), +                    .collect(Collectors.toList());, +            QueryPage<DatafeedStats> statsPage = new QueryPage<>(results, results.size(),, +                    DatafeedConfig.RESULTS_FIELD);, +            listener.onResponse(new Response(statsPage));, +        }, +, +        private static DatafeedStats getDatafeedStats(String datafeedId, ClusterState state,, +                                                      PersistentTasks tasks) {, +            PersistentTask<?> task = MlMetadata.getDatafeedTask(datafeedId, tasks);, +            DatafeedState datafeedState = MlMetadata.getDatafeedState(datafeedId, tasks);, +            return new DatafeedStats(datafeedId, datafeedState, node, explanation);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetDatafeedsStatsAction.java, +import java.util.Collections;, +import java.util.List;, +import java.util.stream.Collectors;, +        protected void masterOperation(Request request, ClusterState state,, +                                       ActionListener<Response> listener) throws Exception {, +, +            if (request.getDatafeedId().equals(ALL) == false, +                    && mlMetadata.getDatafeed(request.getDatafeedId()) == null) {, +            List<String> expandedDatafeedsIds = request.getDatafeedId().equals(ALL) ?, +                    mlMetadata.getDatafeeds().values().stream(), +                            .map(d -> d.getId()).collect(Collectors.toList()), +                    : Collections.singletonList(request.getDatafeedId());, +, +            PersistentTasks tasksInProgress = state.getMetaData().custom(PersistentTasks.TYPE);, +            List<DatafeedStats> results = expandedDatafeedsIds.stream(), +                    .map(datafeedId -> getDatafeedStats(datafeedId, state, tasksInProgress)), +                    .collect(Collectors.toList());, +            QueryPage<DatafeedStats> statsPage = new QueryPage<>(results, results.size(),, +                    DatafeedConfig.RESULTS_FIELD);, +            listener.onResponse(new Response(statsPage));, +        }, +, +        private static DatafeedStats getDatafeedStats(String datafeedId, ClusterState state,, +                                                      PersistentTasks tasks) {, +            PersistentTask<?> task = MlMetadata.getDatafeedTask(datafeedId, tasks);, +            DatafeedState datafeedState = MlMetadata.getDatafeedState(datafeedId, tasks);, +            return new DatafeedStats(datafeedId, datafeedState, node, explanation);, +++ b/plugin/src/test/resources/rest-api-spec/test/ml/get_datafeed_stats.yaml, +"Test implicit get all datafeed stats given started datafeeds":, +, +  - do:, +      xpack.ml.open_job:, +        job_id: job-1, +, +  - do:, +      xpack.ml.start_datafeed:, +        "datafeed_id": "datafeed-1", +        "start": 0, +, +  - do:, +      xpack.ml.open_job:, +        job_id: job-2, +, +  - do:, +      xpack.ml.start_datafeed:, +        "datafeed_id": "datafeed-2", +        "start": 0, +, +  - do:, +      xpack.ml.get_datafeed_stats: {}, +  - match: { count: 2 }, +  - match: { datafeeds.0.datafeed_id: "datafeed-1"}, +  - match: { datafeeds.0.state: "started"}, +  - match: { datafeeds.1.datafeed_id: "datafeed-2"}, +  - match: { datafeeds.1.state: "started"}, +, +---, +"Test explicit get all datafeed stats given stopped datafeeds":, +"Test implicit get all datafeed stats given stopped datafeeds":]