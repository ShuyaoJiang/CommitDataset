[+++ b/src/main/java/org/elasticsearch/index/query/IndicesFilterParser.java, +import org.elasticsearch.indices.IndexMissingException;, +        final String[] concreteIndices;, +        try {, +            concreteIndices = clusterService.state().metaData().concreteIndices(indices, IgnoreIndices.MISSING, true);, +        } catch(IndexMissingException e) {, +            //Although we use IgnoreIndices.MISSING, according to MetaData#concreteIndices contract,, +            // we get IndexMissing either when we have a single index that is missing or when all indices are missing, +            return false;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/IndicesFilterParser.java, +import org.elasticsearch.indices.IndexMissingException;, +        final String[] concreteIndices;, +        try {, +            concreteIndices = clusterService.state().metaData().concreteIndices(indices, IgnoreIndices.MISSING, true);, +        } catch(IndexMissingException e) {, +            //Although we use IgnoreIndices.MISSING, according to MetaData#concreteIndices contract,, +            // we get IndexMissing either when we have a single index that is missing or when all indices are missing, +            return false;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/IndicesQueryParser.java, +import org.elasticsearch.indices.IndexMissingException;, +        final String[] concreteIndices;, +        try {, +            concreteIndices = clusterService.state().metaData().concreteIndices(indices, IgnoreIndices.MISSING, true);, +        } catch(IndexMissingException e) {, +            //Although we use IgnoreIndices.MISSING, according to MetaData#concreteIndices contract,, +            // we get IndexMissing either when we have a single index that is missing or when all indices are missing, +            return false;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/IndicesFilterParser.java, +import org.elasticsearch.indices.IndexMissingException;, +        final String[] concreteIndices;, +        try {, +            concreteIndices = clusterService.state().metaData().concreteIndices(indices, IgnoreIndices.MISSING, true);, +        } catch(IndexMissingException e) {, +            //Although we use IgnoreIndices.MISSING, according to MetaData#concreteIndices contract,, +            // we get IndexMissing either when we have a single index that is missing or when all indices are missing, +            return false;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/IndicesQueryParser.java, +import org.elasticsearch.indices.IndexMissingException;, +        final String[] concreteIndices;, +        try {, +            concreteIndices = clusterService.state().metaData().concreteIndices(indices, IgnoreIndices.MISSING, true);, +        } catch(IndexMissingException e) {, +            //Although we use IgnoreIndices.MISSING, according to MetaData#concreteIndices contract,, +            // we get IndexMissing either when we have a single index that is missing or when all indices are missing, +            return false;, +        }, +, +++ b/src/test/java/org/elasticsearch/search/query/SimpleQueryTests.java, +    public void testIndicesQueryMissingIndices() throws IOException {, +        createIndex("index1");, +        createIndex("index2");, +        ensureGreen();, +, +        client().prepareIndex("index1", "type1", "1").setSource("field", "match").get();, +        client().prepareIndex("index1", "type1", "2").setSource("field", "no_match").get();, +        client().prepareIndex("index2", "type1", "10").setSource("field", "match").get();, +        client().prepareIndex("index2", "type1", "20").setSource("field", "no_match").get();, +        client().prepareIndex("index3", "type1", "100").setSource("field", "match").get();, +        client().prepareIndex("index3", "type1", "200").setSource("field", "no_match").get();, +        refresh();, +, +        //all indices are missing, +        SearchResponse searchResponse = client().prepareSearch().setQuery(, +                indicesQuery(termQuery("field", "missing"), "test1", "test2", "test3"), +                        .noMatchQuery(termQuery("field", "match"))).get();, +, +        assertHitCount(searchResponse, 3l);, +, +        for (SearchHit hit : searchResponse.getHits().getHits()) {, +            if ("index1".equals(hit.index())) {, +                assertThat(hit, hasId("1"));, +            } else if ("index2".equals(hit.index())) {, +                assertThat(hit, hasId("10"));, +            } else if ("index3".equals(hit.index())) {, +                assertThat(hit, hasId("100"));, +            } else {, +                fail("Returned documents should belong to either index1, index2 or index3");, +            }, +        }, +, +        //only one index specified, which is missing, +        searchResponse = client().prepareSearch().setQuery(, +                indicesQuery(termQuery("field", "missing"), "test1"), +                        .noMatchQuery(termQuery("field", "match"))).get();, +, +        assertHitCount(searchResponse, 3l);, +, +        for (SearchHit hit : searchResponse.getHits().getHits()) {, +            if ("index1".equals(hit.index())) {, +                assertThat(hit, hasId("1"));, +            } else if ("index2".equals(hit.index())) {, +                assertThat(hit, hasId("10"));]