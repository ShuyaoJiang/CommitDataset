[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +        registerAction(SearchAction.INSTANCE, TransportSearchAction.class);, +        registerAction(SearchScrollAction.INSTANCE, TransportSearchScrollAction.class);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +        registerAction(SearchAction.INSTANCE, TransportSearchAction.class);, +        registerAction(SearchScrollAction.INSTANCE, TransportSearchScrollAction.class);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +import java.util.concurrent.TimeUnit;, +    private final long startTime;, +, +    private final long runningTimeNanos;, +, +    public TaskInfo(DiscoveryNode node, long id, String type, String action, String description, Task.Status status, long startTime,, +                    long runningTimeNanos, TaskId parentTaskId) {, +        this.startTime = startTime;, +        this.runningTimeNanos = runningTimeNanos;, +        startTime = in.readLong();, +        runningTimeNanos = in.readLong();, +    /**, +     * Returns the task start time, +     */, +    public long getStartTime() {, +        return startTime;, +    }, +, +    /**, +     * Returns the task running time, +     */, +    public long getRunningTimeNanos() {, +        return runningTimeNanos;, +    }, +, +    /**, +     * Returns the parent task id, +     */, +        out.writeLong(startTime);, +        out.writeLong(runningTimeNanos);, +        builder.dateValueField("start_time_in_millis", "start_time", startTime);, +        builder.timeValueField("running_time_in_nanos", "running_time", runningTimeNanos, TimeUnit.NANOSECONDS);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +        registerAction(SearchAction.INSTANCE, TransportSearchAction.class);, +        registerAction(SearchScrollAction.INSTANCE, TransportSearchScrollAction.class);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +import java.util.concurrent.TimeUnit;, +    private final long startTime;, +, +    private final long runningTimeNanos;, +, +    public TaskInfo(DiscoveryNode node, long id, String type, String action, String description, Task.Status status, long startTime,, +                    long runningTimeNanos, TaskId parentTaskId) {, +        this.startTime = startTime;, +        this.runningTimeNanos = runningTimeNanos;, +        startTime = in.readLong();, +        runningTimeNanos = in.readLong();, +    /**, +     * Returns the task start time, +     */, +    public long getStartTime() {, +        return startTime;, +    }, +, +    /**, +     * Returns the task running time, +     */, +    public long getRunningTimeNanos() {, +        return runningTimeNanos;, +    }, +, +    /**, +     * Returns the parent task id, +     */, +        out.writeLong(startTime);, +        out.writeLong(runningTimeNanos);, +        builder.dateValueField("start_time_in_millis", "start_time", startTime);, +        builder.timeValueField("running_time_in_nanos", "running_time", runningTimeNanos, TimeUnit.NANOSECONDS);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.action.delete.TransportDeleteAction;, +import org.elasticsearch.action.update.TransportUpdateAction;, +        executeBulk(bulkRequest, startTime, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTime) {, +            //the request can only be null because we set it to null in the previous step, so it gets ignored, +            if (request == null) {, +            DocumentRequest documentRequest = (DocumentRequest) request;, +            if (addFailureIfIndexIsUnavailable(documentRequest, bulkRequest, responses, i, concreteIndices, metaData)) {, +                continue;, +            }, +            String concreteIndex = concreteIndices.resolveIfAbsent(documentRequest);, +            } else if (request instanceof DeleteRequest) {, +                try {, +                    TransportDeleteAction.resolveAndValidateRouting(metaData, concreteIndex, (DeleteRequest)request);, +                } catch(RoutingMissingException e) {, +                    BulkItemResponse.Failure failure = new BulkItemResponse.Failure(concreteIndex, documentRequest.type(), documentRequest.id(), e);, +                    BulkItemResponse bulkItemResponse = new BulkItemResponse(i, "delete", failure);, +                    responses.set(i, bulkItemResponse);, +                    // make sure the request gets never processed again, +                    bulkRequest.requests.set(i, null);]