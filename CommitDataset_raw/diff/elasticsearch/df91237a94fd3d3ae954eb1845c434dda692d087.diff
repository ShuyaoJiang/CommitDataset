[+++ b/client/rest-high-level/build.gradle, +++ b/client/rest-high-level/build.gradle, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ccr/CcrStatsResponseTests.java, +import org.elasticsearch.client.ccr.AutoFollowStats.AutoFollowedCluster;, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.test.ESTestCase;, +import java.util.concurrent.TimeUnit;, +import static org.elasticsearch.test.AbstractXContentTestCase.xContentTester;, +public class CcrStatsResponseTests extends ESTestCase {, +    public void testFromXContent() throws IOException {, +        xContentTester(this::createParser,, +            CcrStatsResponseTests::createTestInstance,, +            CcrStatsResponseTests::toXContent,, +            CcrStatsResponse::fromXContent), +            .supportsUnknownFields(true), +            .assertEqualsConsumer(CcrStatsResponseTests::assertEqualInstances), +            .assertToXContentEquivalence(false), +            .test();, +    // Needed, because exceptions in IndicesFollowStats and AutoFollowStats cannot be compared, +    private static void assertEqualInstances(CcrStatsResponse expectedInstance, CcrStatsResponse newInstance) {, +        assertNotSame(expectedInstance, newInstance);, +            AutoFollowStats newAutoFollowStats = newInstance.getAutoFollowStats();, +            AutoFollowStats expectedAutoFollowStats = expectedInstance.getAutoFollowStats();, +            IndicesFollowStats newIndicesFollowStats = newInstance.getIndicesFollowStats();, +            IndicesFollowStats expectedIndicesFollowStats = expectedInstance.getIndicesFollowStats();, +                equalTo(expectedIndicesFollowStats.getShardFollowStats().size()));, +                equalTo(expectedIndicesFollowStats.getShardFollowStats().keySet()));, +                List<ShardFollowStats> expectedStats = expectedIndicesFollowStats.getShardFollowStats(indexEntry.getKey());, +                    ShardFollowStats expectedShardFollowStats = expectedStats.get(i);, +                    assertThat(actualShardFollowStats.getLeaderIndex(), equalTo(expectedShardFollowStats.getLeaderIndex()));, +                    assertThat(actualShardFollowStats.getFollowerIndex(), equalTo(expectedShardFollowStats.getFollowerIndex()));, +                        equalTo(expectedShardFollowStats.getLeaderGlobalCheckpoint()));, +                    assertThat(actualShardFollowStats.getLeaderMaxSeqNo(), equalTo(expectedShardFollowStats.getLeaderMaxSeqNo()));, +                        equalTo(expectedShardFollowStats.getFollowerGlobalCheckpoint()));, +                    assertThat(actualShardFollowStats.getLastRequestedSeqNo(), equalTo(expectedShardFollowStats.getLastRequestedSeqNo()));, +                        equalTo(expectedShardFollowStats.getOutstandingReadRequests()));, +                        equalTo(expectedShardFollowStats.getOutstandingWriteRequests()));, +                        equalTo(expectedShardFollowStats.getWriteBufferOperationCount()));, +                        equalTo(expectedShardFollowStats.getFollowerMappingVersion()));, +                        equalTo(expectedShardFollowStats.getFollowerSettingsVersion()));, +                        equalTo(expectedShardFollowStats.getTotalReadTimeMillis()));, +                        equalTo(expectedShardFollowStats.getSuccessfulReadRequests()));, +                    assertThat(actualShardFollowStats.getFailedReadRequests(), equalTo(expectedShardFollowStats.getFailedReadRequests()));, +                    assertThat(actualShardFollowStats.getOperationsReads(), equalTo(expectedShardFollowStats.getOperationsReads()));, +                    assertThat(actualShardFollowStats.getBytesRead(), equalTo(expectedShardFollowStats.getBytesRead()));, +                        equalTo(expectedShardFollowStats.getTotalWriteTimeMillis()));, +                        equalTo(expectedShardFollowStats.getSuccessfulWriteRequests()));, +                        equalTo(expectedShardFollowStats.getFailedWriteRequests()));, +                    assertThat(actualShardFollowStats.getOperationWritten(), equalTo(expectedShardFollowStats.getOperationWritten()));, +                        equalTo(expectedShardFollowStats.getReadExceptions().size()));, +                        equalTo(expectedShardFollowStats.getReadExceptions().keySet()));, +                            expectedShardFollowStats.getReadExceptions().get(entry.getKey());, +                        equalTo(expectedShardFollowStats.getTimeSinceLastReadMillis()));, +    private static void toXContent(CcrStatsResponse response, XContentBuilder builder) throws IOException {, +        builder.startObject();, +        {, +            AutoFollowStats autoFollowStats = response.getAutoFollowStats();, +            builder.startObject(CcrStatsResponse.AUTO_FOLLOW_STATS_FIELD.getPreferredName());, +            {, +                builder.field(AutoFollowStats.NUMBER_OF_SUCCESSFUL_INDICES_AUTO_FOLLOWED.getPreferredName(),, +                    autoFollowStats.getNumberOfSuccessfulFollowIndices());, +                builder.field(AutoFollowStats.NUMBER_OF_FAILED_REMOTE_CLUSTER_STATE_REQUESTS.getPreferredName(),, +                    autoFollowStats.getNumberOfFailedRemoteClusterStateRequests());, +                builder.field(AutoFollowStats.NUMBER_OF_FAILED_INDICES_AUTO_FOLLOWED.getPreferredName(),, +                    autoFollowStats.getNumberOfFailedFollowIndices());, +                builder.startArray(AutoFollowStats.RECENT_AUTO_FOLLOW_ERRORS.getPreferredName());, +                for (Map.Entry<String, Tuple<Long, ElasticsearchException>> entry :, +                    autoFollowStats.getRecentAutoFollowErrors().entrySet()) {, +                    builder.startObject();, +                    {, +                        builder.field(AutoFollowStats.LEADER_INDEX.getPreferredName(), entry.getKey());, +                        builder.field(AutoFollowStats.TIMESTAMP.getPreferredName(), entry.getValue().v1());, +                        builder.field(AutoFollowStats.AUTO_FOLLOW_EXCEPTION.getPreferredName());, +                        builder.startObject();, +                        {, +                            ElasticsearchException.generateThrowableXContent(builder, ToXContent.EMPTY_PARAMS, entry.getValue().v2());, +                        }, +                        builder.endObject();, +                    }, +                    builder.endObject();, +                }, +                builder.endArray();, +                builder.startArray(AutoFollowStats.AUTO_FOLLOWED_CLUSTERS.getPreferredName());, +                for (Map.Entry<String, AutoFollowedCluster> entry : autoFollowStats.getAutoFollowedClusters().entrySet()) {, +                    builder.startObject();, +                    {, +                        builder.field(AutoFollowStats.CLUSTER_NAME.getPreferredName(), entry.getKey());, +                        builder.field(AutoFollowStats.TIME_SINCE_LAST_CHECK_MILLIS.getPreferredName(),, +                            entry.getValue().getTimeSinceLastCheckMillis());, +                        builder.field(AutoFollowStats.LAST_SEEN_METADATA_VERSION.getPreferredName(),, +                            entry.getValue().getLastSeenMetadataVersion());, +                    }, +                    builder.endObject();, +                }, +                builder.endArray();, +            }]