[+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplanation.java, +import java.time.Instant;, +        builder.field("at",, +            UnassignedInfo.DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(unassignedInfo.getUnassignedTimeInMillis())));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplanation.java, +import java.time.Instant;, +        builder.field("at",, +            UnassignedInfo.DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(unassignedInfo.getUnassignedTimeInMillis())));, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexGraveyard.java, +import org.elasticsearch.common.time.CompoundDateTimeFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.time.Instant;, +import java.time.ZoneOffset;, +        static final CompoundDateTimeFormatter FORMATTER =, +            DateFormatters.forPattern("strict_date_optional_time").withZone(ZoneOffset.UTC);, +, +            String date = FORMATTER.format(Instant.ofEpochMilli(deleteDateInMillis));, +            return "[index=" + index + ", deleteDate=" + date + "]";, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplanation.java, +import java.time.Instant;, +        builder.field("at",, +            UnassignedInfo.DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(unassignedInfo.getUnassignedTimeInMillis())));, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexGraveyard.java, +import org.elasticsearch.common.time.CompoundDateTimeFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.time.Instant;, +import java.time.ZoneOffset;, +        static final CompoundDateTimeFormatter FORMATTER =, +            DateFormatters.forPattern("strict_date_optional_time").withZone(ZoneOffset.UTC);, +, +            String date = FORMATTER.format(Instant.ofEpochMilli(deleteDateInMillis));, +            return "[index=" + index + ", deleteDate=" + date + "]";, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +import org.elasticsearch.common.time.CompoundDateTimeFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.time.Instant;, +import java.time.ZoneOffset;, +    public static final CompoundDateTimeFormatter DATE_TIME_FORMATTER =, +        DateFormatters.forPattern("dateOptionalTime").withZone(ZoneOffset.UTC);, +        sb.append(", at[").append(DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(unassignedTimeMillis))).append("]");, +        builder.field("at", DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(unassignedTimeMillis)));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplanation.java, +import java.time.Instant;, +        builder.field("at",, +            UnassignedInfo.DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(unassignedInfo.getUnassignedTimeInMillis())));, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexGraveyard.java, +import org.elasticsearch.common.time.CompoundDateTimeFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.time.Instant;, +import java.time.ZoneOffset;, +        static final CompoundDateTimeFormatter FORMATTER =, +            DateFormatters.forPattern("strict_date_optional_time").withZone(ZoneOffset.UTC);, +, +            String date = FORMATTER.format(Instant.ofEpochMilli(deleteDateInMillis));, +            return "[index=" + index + ", deleteDate=" + date + "]";, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +import org.elasticsearch.common.time.CompoundDateTimeFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.time.Instant;, +import java.time.ZoneOffset;, +    public static final CompoundDateTimeFormatter DATE_TIME_FORMATTER =, +        DateFormatters.forPattern("dateOptionalTime").withZone(ZoneOffset.UTC);, +        sb.append(", at[").append(DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(unassignedTimeMillis))).append("]");, +        builder.field("at", DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(unassignedTimeMillis)));, +++ b/server/src/main/java/org/elasticsearch/common/Table.java, +import org.elasticsearch.common.time.CompoundDateTimeFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.time.Instant;, +import java.time.ZoneOffset;, +    private static final CompoundDateTimeFormatter FORMATTER = DateFormatters.forPattern("HH:mm:ss").withZone(ZoneOffset.UTC);, +            addCell(FORMATTER.format(Instant.ofEpochMilli(time)));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplanation.java, +import java.time.Instant;, +        builder.field("at",, +            UnassignedInfo.DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(unassignedInfo.getUnassignedTimeInMillis())));, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexGraveyard.java, +import org.elasticsearch.common.time.CompoundDateTimeFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.time.Instant;, +import java.time.ZoneOffset;, +        static final CompoundDateTimeFormatter FORMATTER =, +            DateFormatters.forPattern("strict_date_optional_time").withZone(ZoneOffset.UTC);, +, +            String date = FORMATTER.format(Instant.ofEpochMilli(deleteDateInMillis));, +            return "[index=" + index + ", deleteDate=" + date + "]";, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +import org.elasticsearch.common.time.CompoundDateTimeFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.time.Instant;, +import java.time.ZoneOffset;, +    public static final CompoundDateTimeFormatter DATE_TIME_FORMATTER =, +        DateFormatters.forPattern("dateOptionalTime").withZone(ZoneOffset.UTC);, +        sb.append(", at[").append(DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(unassignedTimeMillis))).append("]");, +        builder.field("at", DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(unassignedTimeMillis)));, +++ b/server/src/main/java/org/elasticsearch/common/Table.java, +import org.elasticsearch.common.time.CompoundDateTimeFormatter;, +import org.elasticsearch.common.time.DateFormatters;, +import java.time.Instant;, +import java.time.ZoneOffset;, +    private static final CompoundDateTimeFormatter FORMATTER = DateFormatters.forPattern("HH:mm:ss").withZone(ZoneOffset.UTC);]