[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.action.support.replication.ReplicationOperation;, +        RETRY_ON_PRIMARY_EXCEPTION(ReplicationOperation.RetryOnPrimaryException.class,, +                ReplicationOperation.RetryOnPrimaryException::new, 117),, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.action.support.replication.ReplicationOperation;, +        RETRY_ON_PRIMARY_EXCEPTION(ReplicationOperation.RetryOnPrimaryException.class,, +                ReplicationOperation.RetryOnPrimaryException::new, 117),, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected Tuple<ReplicationResponse, ShardFlushRequest> shardOperationOnPrimary(ShardFlushRequest shardRequest) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.action.support.replication.ReplicationOperation;, +        RETRY_ON_PRIMARY_EXCEPTION(ReplicationOperation.RetryOnPrimaryException.class,, +                ReplicationOperation.RetryOnPrimaryException::new, 117),, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected Tuple<ReplicationResponse, ShardFlushRequest> shardOperationOnPrimary(ShardFlushRequest shardRequest) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected Tuple<ReplicationResponse, BasicReplicationRequest> shardOperationOnPrimary(BasicReplicationRequest shardRequest) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.action.support.replication.ReplicationOperation;, +        RETRY_ON_PRIMARY_EXCEPTION(ReplicationOperation.RetryOnPrimaryException.class,, +                ReplicationOperation.RetryOnPrimaryException::new, 117),, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected Tuple<ReplicationResponse, ShardFlushRequest> shardOperationOnPrimary(ShardFlushRequest shardRequest) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected Tuple<ReplicationResponse, BasicReplicationRequest> shardOperationOnPrimary(BasicReplicationRequest shardRequest) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                    indexRequest.resolveRouting(metaData);, +                    indexRequest.process(mappingMd, allowIdGeneration, concreteIndex.getName());, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.action.support.replication.ReplicationOperation;, +        RETRY_ON_PRIMARY_EXCEPTION(ReplicationOperation.RetryOnPrimaryException.class,, +                ReplicationOperation.RetryOnPrimaryException::new, 117),, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected Tuple<ReplicationResponse, ShardFlushRequest> shardOperationOnPrimary(ShardFlushRequest shardRequest) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected Tuple<ReplicationResponse, BasicReplicationRequest> shardOperationOnPrimary(BasicReplicationRequest shardRequest) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                    indexRequest.resolveRouting(metaData);, +                    indexRequest.process(mappingMd, allowIdGeneration, concreteIndex.getName());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import static org.elasticsearch.action.support.replication.ReplicationOperation.ignoreReplicaException;, +import static org.elasticsearch.action.support.replication.ReplicationOperation.isConflictException;, +, +    protected Tuple<BulkShardResponse, BulkShardRequest> shardOperationOnPrimary(BulkShardRequest request) {, +        final IndexMetaData metaData = indexService.getIndexSettings().getIndexMetaData();, +    private Translog.Location handleItem(IndexMetaData metaData, BulkShardRequest request, IndexShard indexShard, long[] preVersions, VersionType[] preVersionTypes, Translog.Location location, int requestIndex, BulkItemRequest item) {, +    private Translog.Location index(IndexMetaData metaData, BulkShardRequest request, IndexShard indexShard, long[] preVersions, VersionType[] preVersionTypes, Translog.Location location, int requestIndex, BulkItemRequest item) {, +    private Tuple<Translog.Location, BulkItemRequest> update(IndexMetaData metaData, BulkShardRequest request, IndexShard indexShard, long[] preVersions, VersionType[] preVersionTypes, Translog.Location location, int requestIndex, BulkItemRequest item) {, +    private WriteResult shardIndexOperation(BulkShardRequest request, IndexRequest indexRequest, IndexMetaData metaData,, +        MappingMetaData mappingMd = metaData.mappingOrDefault(indexRequest.type());, +            indexRequest.process(mappingMd, allowIdGeneration, request.index());, +    private UpdateResult shardUpdateOperation(IndexMetaData metaData, BulkShardRequest bulkShardRequest, UpdateRequest updateRequest, IndexShard indexShard) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.action.support.replication.ReplicationOperation;, +        RETRY_ON_PRIMARY_EXCEPTION(ReplicationOperation.RetryOnPrimaryException.class,, +                ReplicationOperation.RetryOnPrimaryException::new, 117),, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +    protected Tuple<ReplicationResponse, ShardFlushRequest> shardOperationOnPrimary(ShardFlushRequest shardRequest) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportShardRefreshAction.java, +    protected Tuple<ReplicationResponse, BasicReplicationRequest> shardOperationOnPrimary(BasicReplicationRequest shardRequest) {, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                    indexRequest.resolveRouting(metaData);, +                    indexRequest.process(mappingMd, allowIdGeneration, concreteIndex.getName());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import static org.elasticsearch.action.support.replication.ReplicationOperation.ignoreReplicaException;, +import static org.elasticsearch.action.support.replication.ReplicationOperation.isConflictException;, +, +    protected Tuple<BulkShardResponse, BulkShardRequest> shardOperationOnPrimary(BulkShardRequest request) {, +        final IndexMetaData metaData = indexService.getIndexSettings().getIndexMetaData();, +    private Translog.Location handleItem(IndexMetaData metaData, BulkShardRequest request, IndexShard indexShard, long[] preVersions, VersionType[] preVersionTypes, Translog.Location location, int requestIndex, BulkItemRequest item) {, +    private Translog.Location index(IndexMetaData metaData, BulkShardRequest request, IndexShard indexShard, long[] preVersions, VersionType[] preVersionTypes, Translog.Location location, int requestIndex, BulkItemRequest item) {, +    private Tuple<Translog.Location, BulkItemRequest> update(IndexMetaData metaData, BulkShardRequest request, IndexShard indexShard, long[] preVersions, VersionType[] preVersionTypes, Translog.Location location, int requestIndex, BulkItemRequest item) {, +    private WriteResult shardIndexOperation(BulkShardRequest request, IndexRequest indexRequest, IndexMetaData metaData,, +        MappingMetaData mappingMd = metaData.mappingOrDefault(indexRequest.type());, +            indexRequest.process(mappingMd, allowIdGeneration, request.index());, +    private UpdateResult shardUpdateOperation(IndexMetaData metaData, BulkShardRequest bulkShardRequest, UpdateRequest updateRequest, IndexShard indexShard) {, +++ b/core/src/main/java/org/elasticsearch/action/delete/TransportDeleteAction.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +    protected void resolveRequest(final MetaData metaData, IndexMetaData indexMetaData, DeleteRequest request) {, +        resolveAndValidateRouting(metaData, indexMetaData.getIndex().getName(), request);, +        ShardId shardId = clusterService.operationRouting().shardId(clusterService.state(),, +            indexMetaData.getIndex().getName(), request.id(), request.routing());, +    public static void resolveAndValidateRouting(final MetaData metaData, final String concreteIndex,, +                                                 DeleteRequest request) {, +        if (request.routing() == null && metaData.routingRequired(concreteIndex, request.type())) {, +    protected Tuple<DeleteResponse, DeleteRequest> shardOperationOnPrimary(DeleteRequest request) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.action.support.replication.ReplicationOperation;, +        RETRY_ON_PRIMARY_EXCEPTION(ReplicationOperation.RetryOnPrimaryException.class,]