[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                        try {, +                                        } catch (Exception e) {, +                                            logger.warn("[{}] failed to temporary create in order to apply alias action", e, indexMetaData.index());, +                                            continue;, +                                        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                        try {, +                                        } catch (Exception e) {, +                                            logger.warn("[{}] failed to temporary create in order to apply alias action", e, indexMetaData.index());, +                                            continue;, +                                        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/inject/Injectors.java, +import org.elasticsearch.common.inject.spi.Message;, +    public static Throwable getFirstErrorFailure(CreationException e) {, +        if (e.getErrorMessages().isEmpty()) {, +            return e;, +        }, +        // return the first message that has root cause, probably an actual error, +        for (Message message : e.getErrorMessages()) {, +            if (message.getCause() != null) {, +                return message.getCause();, +            }, +        }, +        return e;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                        try {, +                                        } catch (Exception e) {, +                                            logger.warn("[{}] failed to temporary create in order to apply alias action", e, indexMetaData.index());, +                                            continue;, +                                        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/inject/Injectors.java, +import org.elasticsearch.common.inject.spi.Message;, +    public static Throwable getFirstErrorFailure(CreationException e) {, +        if (e.getErrorMessages().isEmpty()) {, +            return e;, +        }, +        // return the first message that has root cause, probably an actual error, +        for (Message message : e.getErrorMessages()) {, +            if (message.getCause() != null) {, +                return message.getCause();, +            }, +        }, +        return e;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/inject/MessageProcessor.java, +    //private static final Logger logger = Logger.getLogger(Guice.class.getName());, +        // ES_GUICE: don't log failures using jdk logging, +//        if (message.getCause() != null) {, +//            String rootMessage = getRootMessage(message.getCause());, +//            logger.log(Level.INFO,, +//                    "An exception was caught and reported. Message: " + rootMessage,, +//                    message.getCause());, +//        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                        try {, +                                        } catch (Exception e) {, +                                            logger.warn("[{}] failed to temporary create in order to apply alias action", e, indexMetaData.index());, +                                            continue;, +                                        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/inject/Injectors.java, +import org.elasticsearch.common.inject.spi.Message;, +    public static Throwable getFirstErrorFailure(CreationException e) {, +        if (e.getErrorMessages().isEmpty()) {, +            return e;, +        }, +        // return the first message that has root cause, probably an actual error, +        for (Message message : e.getErrorMessages()) {, +            if (message.getCause() != null) {, +                return message.getCause();, +            }, +        }, +        return e;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/inject/MessageProcessor.java, +    //private static final Logger logger = Logger.getLogger(Guice.class.getName());, +        // ES_GUICE: don't log failures using jdk logging, +//        if (message.getCause() != null) {, +//            String rootMessage = getRootMessage(message.getCause());, +//            logger.log(Level.INFO,, +//                    "An exception was caught and reported. Message: " + rootMessage,, +//                    message.getCause());, +//        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +                if (type == null) {, +                    throw new ElasticSearchIllegalArgumentException("failed to find token filter type for [" + tokenFilterName + "]", e);, +                }, +                throw new ElasticSearchIllegalArgumentException("token filter [" + tokenFilterName + "] must have a type associated with it");, +            try {, +            } catch (NoClassSettingsException e) {, +                throw new ElasticSearchIllegalArgumentException("failed to find tokenizer type for [" + tokenizerName + "]", e);, +            }, +            try {, +                        throw new ElasticSearchIllegalArgumentException("analyzer [" + analyzerName + "] must have a type associated with it or a tokenizer");, +            } catch (NoClassSettingsException e) {, +                throw new ElasticSearchIllegalArgumentException("failed to find analyzer type for [" + analyzerName + "]", e);]