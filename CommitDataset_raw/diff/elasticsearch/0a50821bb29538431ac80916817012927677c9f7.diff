[+++ b/server/src/main/java/org/elasticsearch/common/geo/builders/PolygonBuilder.java, +                //We do not have holes on the dateline as they get eliminated, +                //when breaking the polygon around it., +            //Lucene Tessellator treats different +180 and -180 and we should keep the sign., +            //normalizeLon method excludes -180., +            x[i] = Math.abs(shell[i].x) > 180 ? normalizeLon(shell[i].x) : shell[i].x;, +++ b/server/src/main/java/org/elasticsearch/common/geo/builders/PolygonBuilder.java, +                //We do not have holes on the dateline as they get eliminated, +                //when breaking the polygon around it., +            //Lucene Tessellator treats different +180 and -180 and we should keep the sign., +            //normalizeLon method excludes -180., +            x[i] = Math.abs(shell[i].x) > 180 ? normalizeLon(shell[i].x) : shell[i].x;, +++ b/server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java, +                new double[] {-180d, -180d, -177d, -177d, -180d}, +++ b/server/src/main/java/org/elasticsearch/common/geo/builders/PolygonBuilder.java, +                //We do not have holes on the dateline as they get eliminated, +                //when breaking the polygon around it., +            //Lucene Tessellator treats different +180 and -180 and we should keep the sign., +            //normalizeLon method excludes -180., +            x[i] = Math.abs(shell[i].x) > 180 ? normalizeLon(shell[i].x) : shell[i].x;, +++ b/server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java, +                new double[] {-180d, -180d, -177d, -177d, -180d}, +++ b/server/src/test/java/org/elasticsearch/search/geo/GeoShapeIntegrationIT.java, +import org.elasticsearch.common.geo.builders.PointBuilder;, +    public void testIndexPolygonDateLine() throws Exception {, +        String mappingVector = "{\n" +, +            "    \"properties\": {\n" +, +            "      \"shape\": {\n" +, +            "        \"type\": \"geo_shape\"\n" +, +            "      }\n" +, +            "    }\n" +, +            "  }";, +, +        String mappingQuad = "{\n" +, +            "    \"properties\": {\n" +, +            "      \"shape\": {\n" +, +            "        \"type\": \"geo_shape\",\n" +, +            "        \"tree\": \"quadtree\"\n" +, +            "      }\n" +, +            "    }\n" +, +            "  }";, +, +, +        // create index, +        assertAcked(client().admin().indices().prepareCreate("vector").addMapping("doc", mappingVector, XContentType.JSON).get());, +        ensureGreen();, +, +        assertAcked(client().admin().indices().prepareCreate("quad").addMapping("doc", mappingQuad, XContentType.JSON).get());, +        ensureGreen();, +, +        String source = "{\n" +, +            "    \"shape\" : \"POLYGON((179 0, -179 0, -179 2, 179 2, 179 0))\""+, +            "}";, +, +        indexRandom(true, client().prepareIndex("quad", "doc", "0").setSource(source, XContentType.JSON));, +        indexRandom(true, client().prepareIndex("vector", "doc", "0").setSource(source, XContentType.JSON));, +, +        SearchResponse searchResponse = client().prepareSearch("quad").setQuery(, +            geoShapeQuery("shape", new PointBuilder(-179.75, 1)), +        ).get();, +, +, +        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(1L));, +, +        searchResponse = client().prepareSearch("quad").setQuery(, +            geoShapeQuery("shape", new PointBuilder(90, 1)), +        ).get();, +, +        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(0L));, +, +        searchResponse = client().prepareSearch("quad").setQuery(, +            geoShapeQuery("shape", new PointBuilder(-180, 1)), +        ).get();, +, +        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(1L));, +        searchResponse = client().prepareSearch("quad").setQuery(, +            geoShapeQuery("shape", new PointBuilder(180, 1)), +        ).get();, +, +        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(1L));, +, +        searchResponse = client().prepareSearch("vector").setQuery(, +            geoShapeQuery("shape", new PointBuilder(90, 1)), +        ).get();, +, +        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(0L));, +, +        searchResponse = client().prepareSearch("vector").setQuery(, +            geoShapeQuery("shape", new PointBuilder(-179.75, 1)), +        ).get();, +, +        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(1L));, +, +        searchResponse = client().prepareSearch("vector").setQuery(, +            geoShapeQuery("shape", new PointBuilder(-180, 1)), +        ).get();, +, +        assertThat(searchResponse.getHits().getTotalHits().value, equalTo(1L));, +, +        searchResponse = client().prepareSearch("vector").setQuery(]