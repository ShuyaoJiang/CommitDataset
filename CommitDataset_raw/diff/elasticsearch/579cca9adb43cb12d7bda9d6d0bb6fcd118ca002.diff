[+++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +                validateCopyTo(fieldMappers, fullPathObjectMappers, fieldTypes);, +    private static void validateCopyTo(List<FieldMapper> fieldMappers, Map<String, ObjectMapper> fullPathObjectMappers,, +            FieldTypeLookup fieldTypes) {, +                String sourceParent = parentObject(mapper.name());, +                if (sourceParent != null && fieldTypes.get(sourceParent) != null) {, +                    throw new IllegalArgumentException("[copy_to] may not be used to copy from a multi-field: [" + mapper.name() + "]");, +                }, +, +                    String copyToParent = parentObject(copyTo);, +                    if (copyToParent != null && fieldTypes.get(copyToParent) != null) {, +                        throw new IllegalArgumentException("[copy_to] may not be used to copy to a multi-field: [" + copyTo + "]");, +                    }, +, +, +            targetIsParentOfSource = source.equals(target) || source.startsWith(target + ".");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +                validateCopyTo(fieldMappers, fullPathObjectMappers, fieldTypes);, +    private static void validateCopyTo(List<FieldMapper> fieldMappers, Map<String, ObjectMapper> fullPathObjectMappers,, +            FieldTypeLookup fieldTypes) {, +                String sourceParent = parentObject(mapper.name());, +                if (sourceParent != null && fieldTypes.get(sourceParent) != null) {, +                    throw new IllegalArgumentException("[copy_to] may not be used to copy from a multi-field: [" + mapper.name() + "]");, +                }, +, +                    String copyToParent = parentObject(copyTo);, +                    if (copyToParent != null && fieldTypes.get(copyToParent) != null) {, +                        throw new IllegalArgumentException("[copy_to] may not be used to copy to a multi-field: [" + copyTo + "]");, +                    }, +, +, +            targetIsParentOfSource = source.equals(target) || source.startsWith(target + ".");, +++ b/core/src/test/java/org/elasticsearch/index/mapper/CopyToMapperTests.java, +    public void testCopyToMultiField() throws Exception {, +        String mapping = jsonBuilder().startObject().startObject("doc"), +                .startObject("properties"), +                    .startObject("my_field"), +                        .field("type", "keyword"), +                        .field("copy_to", "my_field.bar"), +                        .startObject("fields"), +                            .startObject("bar"), +                                .field("type", "text"), +                            .endObject(), +                        .endObject(), +                    .endObject(), +                .endObject(), +                .endObject().endObject().string();, +, +        MapperService mapperService = createIndex("test").mapperService();, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                () -> mapperService.merge("doc", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE, randomBoolean()));, +        assertEquals("[copy_to] may not be used to copy to a multi-field: [my_field.bar]", e.getMessage());, +    }, +, +    public void testNestedCopyTo() throws Exception {, +        String mapping = jsonBuilder().startObject().startObject("doc"), +                .startObject("properties"), +                    .startObject("n"), +                        .field("type", "nested"), +                        .startObject("properties"), +                            .startObject("foo"), +                                .field("type", "keyword"), +                                .field("copy_to", "n.bar"), +                            .endObject(), +                            .startObject("bar"), +                                .field("type", "text"), +                            .endObject(), +                        .endObject(), +                    .endObject(), +                .endObject(), +                .endObject().endObject().string();, +, +        MapperService mapperService = createIndex("test").mapperService();, +        mapperService.merge("doc", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE, randomBoolean()); // no exception, +    }, +, +    public void testNestedCopyToMultiField() throws Exception {, +        String mapping = jsonBuilder().startObject().startObject("doc"), +                .startObject("properties"), +                    .startObject("n"), +                        .field("type", "nested"), +                        .startObject("properties"), +                            .startObject("my_field"), +                                .field("type", "keyword"), +                                .field("copy_to", "n.my_field.bar"), +                                .startObject("fields"), +                                    .startObject("bar"), +                                        .field("type", "text"), +                                    .endObject(), +                                .endObject(), +                            .endObject(), +                        .endObject(), +                    .endObject(), +                .endObject(), +                .endObject().endObject().string();, +, +        MapperService mapperService = createIndex("test").mapperService();, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                () -> mapperService.merge("doc", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE, randomBoolean()));, +        assertEquals("[copy_to] may not be used to copy to a multi-field: [n.my_field.bar]", e.getMessage());]