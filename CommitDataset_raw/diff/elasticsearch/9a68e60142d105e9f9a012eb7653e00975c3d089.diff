[+++ b/TESTING.asciidoc, +=== Test compatibility., +, +It is possible to provide a version that allows to adapt the tests behaviour, +to older features or bugs that have been changed or fixed in the meantime., +, +-----------------------------------------, +mvn test -Dtests.compatibility=1.0.0, +-----------------------------------------, +, +++ b/TESTING.asciidoc, +=== Test compatibility., +, +It is possible to provide a version that allows to adapt the tests behaviour, +to older features or bugs that have been changed or fixed in the meantime., +, +-----------------------------------------, +mvn test -Dtests.compatibility=1.0.0, +-----------------------------------------, +, +++ b/pom.xml, +                                <tests.compatibility>${tests.compatibility}</tests.compatibility>, +++ b/TESTING.asciidoc, +=== Test compatibility., +, +It is possible to provide a version that allows to adapt the tests behaviour, +to older features or bugs that have been changed or fixed in the meantime., +, +-----------------------------------------, +mvn test -Dtests.compatibility=1.0.0, +-----------------------------------------, +, +++ b/pom.xml, +                                <tests.compatibility>${tests.compatibility}</tests.compatibility>, +++ b/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.Strings;, +    /**, +     * Returns the version given its string representation, current version if the argument is null or empty, +     */, +    public static Version fromString(String version) {, +        if (!Strings.hasLength(version)) {, +            return Version.CURRENT;, +        }, +, +        String[] parts = version.split("\\.");, +        if (parts.length < 3 || parts.length > 4) {, +            throw new IllegalArgumentException("the version needs to contain major, minor and revision, and optionally the build");, +        }, +, +        try {, +            //we reverse the version id calculation based on some assumption as we can't reliably reverse the modulo, +            int major = Integer.parseInt(parts[0]) * 1000000;, +            int minor = Integer.parseInt(parts[1]) * 10000;, +            int revision = Integer.parseInt(parts[2]) * 100;, +, +            int build = 99;, +            if (parts.length == 4) {, +                String buildStr = parts[3];, +                if (buildStr.startsWith("Beta")) {, +                    build = Integer.parseInt(buildStr.substring(4));, +                }, +                if (buildStr.startsWith("RC")) {, +                    build = Integer.parseInt(buildStr.substring(2)) + 50;, +                }, +            }, +, +            return fromId(major + minor + revision + build);, +, +        } catch(NumberFormatException e) {, +            throw new IllegalArgumentException("unable to parse version " + version, e);, +        }, +    }, +, +++ b/TESTING.asciidoc, +=== Test compatibility., +, +It is possible to provide a version that allows to adapt the tests behaviour, +to older features or bugs that have been changed or fixed in the meantime., +, +-----------------------------------------, +mvn test -Dtests.compatibility=1.0.0, +-----------------------------------------, +, +++ b/pom.xml, +                                <tests.compatibility>${tests.compatibility}</tests.compatibility>, +++ b/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.Strings;, +    /**, +     * Returns the version given its string representation, current version if the argument is null or empty, +     */, +    public static Version fromString(String version) {, +        if (!Strings.hasLength(version)) {, +            return Version.CURRENT;, +        }, +, +        String[] parts = version.split("\\.");, +        if (parts.length < 3 || parts.length > 4) {, +            throw new IllegalArgumentException("the version needs to contain major, minor and revision, and optionally the build");, +        }, +]