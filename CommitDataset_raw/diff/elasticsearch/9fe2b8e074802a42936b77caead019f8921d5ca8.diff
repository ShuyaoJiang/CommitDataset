[+++ b/src/test/java/org/elasticsearch/index/search/child/ChildrenConstantScoreQueryTests.java, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.cache.filter.weighted.WeightedFilterCache;, +import org.elasticsearch.indices.cache.filter.IndicesFilterCache;, +import org.elasticsearch.node.settings.NodeSettingsService;, +import org.elasticsearch.threadpool.ThreadPool;, +        Settings settings = ImmutableSettings.EMPTY;, +                index, settings, new Environment(), new AnalysisService(index), null, null, null, +, +        ThreadPool threadPool = new ThreadPool();, +        NodeSettingsService nodeSettingsService = new NodeSettingsService(settings);, +        IndicesFilterCache indicesFilterCache = new IndicesFilterCache(settings, threadPool, cacheRecycler, nodeSettingsService);, +        WeightedFilterCache filterCache = new WeightedFilterCache(index, settings, indicesFilterCache);, +        return new TestSearchContext(cacheRecycler, idCache, indexService, filterCache);, +++ b/src/test/java/org/elasticsearch/index/search/child/ChildrenConstantScoreQueryTests.java, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.cache.filter.weighted.WeightedFilterCache;, +import org.elasticsearch.indices.cache.filter.IndicesFilterCache;, +import org.elasticsearch.node.settings.NodeSettingsService;, +import org.elasticsearch.threadpool.ThreadPool;, +        Settings settings = ImmutableSettings.EMPTY;, +                index, settings, new Environment(), new AnalysisService(index), null, null, null, +, +        ThreadPool threadPool = new ThreadPool();, +        NodeSettingsService nodeSettingsService = new NodeSettingsService(settings);, +        IndicesFilterCache indicesFilterCache = new IndicesFilterCache(settings, threadPool, cacheRecycler, nodeSettingsService);, +        WeightedFilterCache filterCache = new WeightedFilterCache(index, settings, indicesFilterCache);, +        return new TestSearchContext(cacheRecycler, idCache, indexService, filterCache);, +++ b/src/test/java/org/elasticsearch/index/search/child/ChildrenQueryTests.java, +import org.elasticsearch.common.lucene.search.NotFilter;, +import org.elasticsearch.common.lucene.search.XFilteredQuery;, +            boolean filterMe = rarely();, +            if (filterMe) {, +                document.add(new StringField("filter", "me", Field.Store.NO));, +            }, +                    if (!markParentAsDeleted && !filterMe) {, +        Filter rawParentFilter = new TermFilter(new Term(TypeFieldMapper.NAME, "parent"));, +        Filter rawFilterMe = new NotFilter(new TermFilter(new Term("filter", "me")));, +            // Randomly pick a cached version: there is specific logic inside ChildrenQuery that deals with the fact, +            // that deletes are applied at the top level when filters are cached., +            Filter parentFilter;, +            if (random().nextBoolean()) {, +                parentFilter = SearchContext.current().filterCache().cache(rawParentFilter);, +            } else {, +                parentFilter = rawParentFilter;, +            }, +, +            // Using this in FQ, will invoke / test the Scorer#advance(..), +            Filter filterMe;, +            if (random().nextBoolean()) {, +                filterMe = SearchContext.current().filterCache().cache(rawFilterMe);, +            } else {, +                filterMe = rawFilterMe;, +            }, +, +            query = new XFilteredQuery(query, filterMe);, +++ b/src/test/java/org/elasticsearch/index/search/child/ChildrenConstantScoreQueryTests.java, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.cache.filter.weighted.WeightedFilterCache;, +import org.elasticsearch.indices.cache.filter.IndicesFilterCache;, +import org.elasticsearch.node.settings.NodeSettingsService;, +import org.elasticsearch.threadpool.ThreadPool;, +        Settings settings = ImmutableSettings.EMPTY;, +                index, settings, new Environment(), new AnalysisService(index), null, null, null, +, +        ThreadPool threadPool = new ThreadPool();, +        NodeSettingsService nodeSettingsService = new NodeSettingsService(settings);, +        IndicesFilterCache indicesFilterCache = new IndicesFilterCache(settings, threadPool, cacheRecycler, nodeSettingsService);, +        WeightedFilterCache filterCache = new WeightedFilterCache(index, settings, indicesFilterCache);, +        return new TestSearchContext(cacheRecycler, idCache, indexService, filterCache);, +++ b/src/test/java/org/elasticsearch/index/search/child/ChildrenQueryTests.java, +import org.elasticsearch.common.lucene.search.NotFilter;, +import org.elasticsearch.common.lucene.search.XFilteredQuery;, +            boolean filterMe = rarely();, +            if (filterMe) {, +                document.add(new StringField("filter", "me", Field.Store.NO));, +            }, +                    if (!markParentAsDeleted && !filterMe) {, +        Filter rawParentFilter = new TermFilter(new Term(TypeFieldMapper.NAME, "parent"));, +        Filter rawFilterMe = new NotFilter(new TermFilter(new Term("filter", "me")));, +            // Randomly pick a cached version: there is specific logic inside ChildrenQuery that deals with the fact, +            // that deletes are applied at the top level when filters are cached., +            Filter parentFilter;, +            if (random().nextBoolean()) {, +                parentFilter = SearchContext.current().filterCache().cache(rawParentFilter);, +            } else {, +                parentFilter = rawParentFilter;, +            }, +, +            // Using this in FQ, will invoke / test the Scorer#advance(..), +            Filter filterMe;, +            if (random().nextBoolean()) {, +                filterMe = SearchContext.current().filterCache().cache(rawFilterMe);, +            } else {, +                filterMe = rawFilterMe;, +            }, +, +            query = new XFilteredQuery(query, filterMe);, +++ b/src/test/java/org/elasticsearch/index/search/child/TestSearchContext.java, +    final FilterCache filterCache;]