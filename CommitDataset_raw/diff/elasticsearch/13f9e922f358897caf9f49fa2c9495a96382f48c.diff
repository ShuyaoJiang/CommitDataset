[+++ b/client/rest/src/main/java/org/elasticsearch/client/DeadHostState.java, +final class DeadHostState implements Comparable<DeadHostState> {, +    private final TimeSupplier timeSupplier;, +    /**, +     * Build the initial dead state of a host. Useful when a working host stops functioning, +     * and needs to be marked dead after its first failure. In such case the host will be retried after a minute or so., +     *, +     * @param timeSupplier a way to supply the current time and allow for unit testing, +     */, +    DeadHostState(TimeSupplier timeSupplier) {, +        this.deadUntilNanos = timeSupplier.nanoTime() + MIN_CONNECTION_TIMEOUT_NANOS;, +        this.timeSupplier = timeSupplier;, +     * Build the dead state of a host given its previous dead state. Useful when a host has been failing before, hence, +     * it already failed for one or more consecutive times. The more failed attempts we register the longer we wait, +     * to retry that same host again. Minimum is 1 minute (for a node the only failed once created, +     * through {@link #DeadHostState(TimeSupplier)}), maximum is 30 minutes (for a node that failed more than 10 consecutive times), +     *, +     * @param previousDeadHostState the previous state of the host which allows us to increase the wait till the next retry attempt, +    DeadHostState(DeadHostState previousDeadHostState, TimeSupplier timeSupplier) {, +        this.deadUntilNanos = timeSupplier.nanoTime() + timeoutNanos;, +        this.timeSupplier = timeSupplier;, +    }, +, +    /**, +     * Indicates whether it's time to retry to failed host or not., +     *, +     * @return true if the host should be retried, false otherwise, +     */, +    boolean shallBeRetried() {, +        return timeSupplier.nanoTime() - deadUntilNanos > 0;, +    int getFailedAttempts() {, +        return failedAttempts;, +    }, +, +    @Override, +    public int compareTo(DeadHostState other) {, +        return Long.compare(deadUntilNanos, other.deadUntilNanos);, +    }, +, +, +    /**, +     * Time supplier that makes timing aspects pluggable to ease testing, +     */, +    interface TimeSupplier {, +, +        TimeSupplier DEFAULT = new TimeSupplier() {, +            @Override, +            public long nanoTime() {, +                return System.nanoTime();, +            }, +        };, +, +        long nanoTime();, +    }, +++ b/client/rest/src/main/java/org/elasticsearch/client/DeadHostState.java, +final class DeadHostState implements Comparable<DeadHostState> {, +    private final TimeSupplier timeSupplier;, +    /**, +     * Build the initial dead state of a host. Useful when a working host stops functioning, +     * and needs to be marked dead after its first failure. In such case the host will be retried after a minute or so., +     *, +     * @param timeSupplier a way to supply the current time and allow for unit testing, +     */, +    DeadHostState(TimeSupplier timeSupplier) {, +        this.deadUntilNanos = timeSupplier.nanoTime() + MIN_CONNECTION_TIMEOUT_NANOS;, +        this.timeSupplier = timeSupplier;, +     * Build the dead state of a host given its previous dead state. Useful when a host has been failing before, hence, +     * it already failed for one or more consecutive times. The more failed attempts we register the longer we wait, +     * to retry that same host again. Minimum is 1 minute (for a node the only failed once created, +     * through {@link #DeadHostState(TimeSupplier)}), maximum is 30 minutes (for a node that failed more than 10 consecutive times), +     *, +     * @param previousDeadHostState the previous state of the host which allows us to increase the wait till the next retry attempt, +    DeadHostState(DeadHostState previousDeadHostState, TimeSupplier timeSupplier) {, +        this.deadUntilNanos = timeSupplier.nanoTime() + timeoutNanos;, +        this.timeSupplier = timeSupplier;, +    }, +, +    /**, +     * Indicates whether it's time to retry to failed host or not., +     *, +     * @return true if the host should be retried, false otherwise, +     */, +    boolean shallBeRetried() {, +        return timeSupplier.nanoTime() - deadUntilNanos > 0;, +    int getFailedAttempts() {, +        return failedAttempts;, +    }, +, +    @Override, +    public int compareTo(DeadHostState other) {, +        return Long.compare(deadUntilNanos, other.deadUntilNanos);, +    }, +, +, +    /**, +     * Time supplier that makes timing aspects pluggable to ease testing, +     */, +    interface TimeSupplier {, +, +        TimeSupplier DEFAULT = new TimeSupplier() {]