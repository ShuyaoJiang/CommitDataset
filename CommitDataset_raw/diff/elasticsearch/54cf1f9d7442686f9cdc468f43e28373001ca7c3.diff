[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcess.java, +import org.elasticsearch.xpack.ml.job.process.autodetect.writer.AutodetectControlMsgWriter;, +        AutodetectControlMsgWriter writer = newMessageWriter();, +    private AutodetectControlMsgWriter newMessageWriter() {, +        return new AutodetectControlMsgWriter(recordWriter(), numberOfFields());, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcess.java, +import org.elasticsearch.xpack.ml.job.process.autodetect.writer.AutodetectControlMsgWriter;, +        AutodetectControlMsgWriter writer = newMessageWriter();, +    private AutodetectControlMsgWriter newMessageWriter() {, +        return new AutodetectControlMsgWriter(recordWriter(), numberOfFields());, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/writer/AutodetectControlMsgWriter.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.job.process.autodetect.writer;, +, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.xpack.core.ml.calendars.ScheduledEvent;, +import org.elasticsearch.xpack.core.ml.job.config.DetectionRule;, +import org.elasticsearch.xpack.core.ml.job.config.MlFilter;, +import org.elasticsearch.xpack.core.ml.job.config.ModelPlotConfig;, +import org.elasticsearch.xpack.ml.job.process.autodetect.params.DataLoadParams;, +import org.elasticsearch.xpack.ml.job.process.autodetect.params.FlushJobParams;, +import org.elasticsearch.xpack.ml.job.process.autodetect.params.ForecastParams;, +import org.elasticsearch.xpack.ml.process.writer.AbstractControlMsgWriter;, +import org.elasticsearch.xpack.ml.process.writer.LengthEncodedWriter;, +, +import java.io.IOException;, +import java.io.OutputStream;, +import java.io.StringWriter;, +import java.util.List;, +import java.util.concurrent.atomic.AtomicLong;, +, +/**, + * A writer for sending control messages to the C++ autodetect process., + * The data written to outputIndex is length encoded., + */, +public class AutodetectControlMsgWriter extends AbstractControlMsgWriter {, +, +    /**, +     * This must match the code defined in the api::CAnomalyJob C++ class., +     */, +    private static final String FLUSH_MESSAGE_CODE = "f";, +, +    /**, +     * This must match the code defined in the api::CAnomalyJob C++ class., +     */, +    private static final String FORECAST_MESSAGE_CODE = "p";, +, +    /**, +     * This must match the code defined in the api::CAnomalyJob C++ class., +     */, +    private static final String INTERIM_MESSAGE_CODE = "i";, +, +    /**, +     * This must match the code defined in the api::CAnomalyJob C++ class., +     */, +    public static final String RESET_BUCKETS_MESSAGE_CODE = "r";, +, +    /**, +     * This must match the code defined in the api::CAnomalyJob C++ class., +     */, +    private static final String ADVANCE_TIME_MESSAGE_CODE = "t";, +, +    /**, +     * This must match the code defined in the api::CAnomalyJob C++ class., +     */, +    private static final String SKIP_TIME_MESSAGE_CODE = "s";, +, +    /**, +     * This must match the code defined in the api::CAnomalyJob C++ class., +     */, +    public static final String UPDATE_MESSAGE_CODE = "u";, +, +    /**, +     * This must match the code defined in the api::CAnomalyJob C++ class., +     */, +    public static final String BACKGROUND_PERSIST_MESSAGE_CODE = "w";, +, +    /**, +     * An number to uniquely identify each flush so that subsequent code can, +     * wait for acknowledgement of the correct flush., +     */, +    private static AtomicLong ms_FlushNumber = new AtomicLong(1);, +, +    /**, +     * Construct the control message writer with a LengthEncodedWriter, +     *, +     * @param lengthEncodedWriter The writer, +     * @param numberOfFields      The number of fields the process expects in each record, +     */, +    public AutodetectControlMsgWriter(LengthEncodedWriter lengthEncodedWriter, int numberOfFields) {, +        super(lengthEncodedWriter, numberOfFields);]