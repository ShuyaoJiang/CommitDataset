[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.search.MultiSearchRequest;, +import org.elasticsearch.common.xcontent.XContent;, +    static Request multiSearch(MultiSearchRequest multiSearchRequest) throws IOException {, +        Params params = Params.builder();, +        params.putParam(RestSearchAction.TYPED_KEYS_PARAM, "true");, +        if (multiSearchRequest.maxConcurrentSearchRequests() != MultiSearchRequest.MAX_CONCURRENT_SEARCH_REQUESTS_DEFAULT) {, +            params.putParam("max_concurrent_searches", Integer.toString(multiSearchRequest.maxConcurrentSearchRequests()));, +        }, +        XContent xContent = REQUEST_BODY_CONTENT_TYPE.xContent();, +        byte[] source = MultiSearchRequest.writeMultiLineFormat(multiSearchRequest, xContent);, +        HttpEntity entity = new ByteArrayEntity(source, createContentType(xContent.type()));, +        return new Request("GET", "/_msearch", params.getParams(), entity);, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.search.MultiSearchRequest;, +import org.elasticsearch.common.xcontent.XContent;, +    static Request multiSearch(MultiSearchRequest multiSearchRequest) throws IOException {, +        Params params = Params.builder();, +        params.putParam(RestSearchAction.TYPED_KEYS_PARAM, "true");, +        if (multiSearchRequest.maxConcurrentSearchRequests() != MultiSearchRequest.MAX_CONCURRENT_SEARCH_REQUESTS_DEFAULT) {, +            params.putParam("max_concurrent_searches", Integer.toString(multiSearchRequest.maxConcurrentSearchRequests()));, +        }, +        XContent xContent = REQUEST_BODY_CONTENT_TYPE.xContent();, +        byte[] source = MultiSearchRequest.writeMultiLineFormat(multiSearchRequest, xContent);, +        HttpEntity entity = new ByteArrayEntity(source, createContentType(xContent.type()));, +        return new Request("GET", "/_msearch", params.getParams(), entity);, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.search.MultiSearchRequest;, +import org.elasticsearch.action.search.MultiSearchResponse;, +     * Executes a multi search using the msearch API, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html">Multi search API on, +     * elastic.co</a>, +     */, +    public final MultiSearchResponse multiSearch(MultiSearchRequest multiSearchRequest, Header... headers) throws IOException {, +        return performRequestAndParseEntity(multiSearchRequest, Request::multiSearch, MultiSearchResponse::fromXContext,, +                emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously executes a multi search using the msearch API, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html">Multi search API on, +     * elastic.co</a>, +     */, +    public final void multiSearchAsync(MultiSearchRequest searchRequest, ActionListener<MultiSearchResponse> listener, Header... headers) {, +        performRequestAsyncAndParseEntity(searchRequest, Request::multiSearch, MultiSearchResponse::fromXContext, listener,, +                emptySet(), headers);, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.search.MultiSearchRequest;, +import org.elasticsearch.common.xcontent.XContent;, +    static Request multiSearch(MultiSearchRequest multiSearchRequest) throws IOException {, +        Params params = Params.builder();, +        params.putParam(RestSearchAction.TYPED_KEYS_PARAM, "true");, +        if (multiSearchRequest.maxConcurrentSearchRequests() != MultiSearchRequest.MAX_CONCURRENT_SEARCH_REQUESTS_DEFAULT) {, +            params.putParam("max_concurrent_searches", Integer.toString(multiSearchRequest.maxConcurrentSearchRequests()));, +        }, +        XContent xContent = REQUEST_BODY_CONTENT_TYPE.xContent();, +        byte[] source = MultiSearchRequest.writeMultiLineFormat(multiSearchRequest, xContent);, +        HttpEntity entity = new ByteArrayEntity(source, createContentType(xContent.type()));, +        return new Request("GET", "/_msearch", params.getParams(), entity);, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.search.MultiSearchRequest;, +import org.elasticsearch.action.search.MultiSearchResponse;, +     * Executes a multi search using the msearch API, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html">Multi search API on, +     * elastic.co</a>, +     */, +    public final MultiSearchResponse multiSearch(MultiSearchRequest multiSearchRequest, Header... headers) throws IOException {, +        return performRequestAndParseEntity(multiSearchRequest, Request::multiSearch, MultiSearchResponse::fromXContext,, +                emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously executes a multi search using the msearch API, +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html">Multi search API on, +     * elastic.co</a>, +     */, +    public final void multiSearchAsync(MultiSearchRequest searchRequest, ActionListener<MultiSearchResponse> listener, Header... headers) {, +        performRequestAsyncAndParseEntity(searchRequest, Request::multiSearch, MultiSearchResponse::fromXContext, listener,, +                emptySet(), headers);, +    }, +, +    /**, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestTests.java, +import org.elasticsearch.action.search.MultiSearchRequest;, +import org.elasticsearch.common.CheckedBiConsumer;, +import org.elasticsearch.search.Scroll;, +import java.util.ArrayList;]