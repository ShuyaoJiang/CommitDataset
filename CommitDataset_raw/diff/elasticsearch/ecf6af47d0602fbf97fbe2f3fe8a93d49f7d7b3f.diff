[+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +        public void markShardCopyAsStaleIfNeeded(final ShardId shardId, final String allocationId, final ActionListener<Void> listener) {, +            shardStateAction.remoteShardFailed(shardId, allocationId, primaryTerm, true, "mark copy as stale", null, listener);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +        public void markShardCopyAsStaleIfNeeded(final ShardId shardId, final String allocationId, final ActionListener<Void> listener) {, +            shardStateAction.remoteShardFailed(shardId, allocationId, primaryTerm, true, "mark copy as stale", null, listener);, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +        public void failShardIfNeeded(ShardRouting replica, String message, Exception exception, ActionListener<Void> listener) {, +            shardStateAction.remoteShardFailed(, +                replica.shardId(), replica.allocationId().getId(), primaryTerm, false, message, exception, listener);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +        public void markShardCopyAsStaleIfNeeded(final ShardId shardId, final String allocationId, final ActionListener<Void> listener) {, +            shardStateAction.remoteShardFailed(shardId, allocationId, primaryTerm, true, "mark copy as stale", null, listener);, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +        public void failShardIfNeeded(ShardRouting replica, String message, Exception exception, ActionListener<Void> listener) {, +            shardStateAction.remoteShardFailed(, +                replica.shardId(), replica.allocationId().getId(), primaryTerm, false, message, exception, listener);, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +import org.elasticsearch.Assertions;, +import org.elasticsearch.cluster.action.shard.ShardStateAction;, +import org.elasticsearch.node.NodeClosedException;, +import org.elasticsearch.transport.TransportException;, +                ActionListener.wrap(r -> decPendingAndFinishIfNeeded(), ReplicationOperation.this::onNoLongerPrimary));, +                replicasProxy.failShardIfNeeded(shard, message, replicaException,, +                    ActionListener.wrap(r -> decPendingAndFinishIfNeeded(), ReplicationOperation.this::onNoLongerPrimary));, +    private void onNoLongerPrimary(Exception failure) {, +        final boolean nodeIsClosing = failure instanceof NodeClosedException ||, +            (failure instanceof TransportException && "TransportService is closed stopped can't send request".equals(failure.getMessage()));, +        final String message;, +        if (nodeIsClosing) {, +            message = String.format(Locale.ROOT,, +                "node with primary [%s] is shutting down while failing replica shard", primary.routingEntry());, +            // We prefer not to fail the primary to avoid unnecessary warning log, +            // when the node with the primary shard is gracefully shutting down., +        } else {, +            if (Assertions.ENABLED) {, +                if (failure instanceof ShardStateAction.NoLongerPrimaryShardException == false) {, +                    throw new AssertionError("unexpected failure", failure);, +                }, +            }, +            message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard", primary.routingEntry());, +            primary.failShard(message, failure);, +        }, +        finishAsFailed(new RetryOnPrimaryException(primary.routingEntry().shardId(), message, failure));, +         * @param listener  a listener that will be notified when the failing shard has been removed from the in-sync set, +        void failShardIfNeeded(ShardRouting replica, String message, Exception exception, ActionListener<Void> listener);, +         * @param listener     a listener that will be notified when the failing shard has been removed from the in-sync set, +        void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, ActionListener<Void> listener);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +        public void markShardCopyAsStaleIfNeeded(final ShardId shardId, final String allocationId, final ActionListener<Void> listener) {, +            shardStateAction.remoteShardFailed(shardId, allocationId, primaryTerm, true, "mark copy as stale", null, listener);, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +        public void failShardIfNeeded(ShardRouting replica, String message, Exception exception, ActionListener<Void> listener) {, +            shardStateAction.remoteShardFailed(, +                replica.shardId(), replica.allocationId().getId(), primaryTerm, false, message, exception, listener);, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +import org.elasticsearch.Assertions;, +import org.elasticsearch.cluster.action.shard.ShardStateAction;, +import org.elasticsearch.node.NodeClosedException;, +import org.elasticsearch.transport.TransportException;, +                ActionListener.wrap(r -> decPendingAndFinishIfNeeded(), ReplicationOperation.this::onNoLongerPrimary));, +                replicasProxy.failShardIfNeeded(shard, message, replicaException,, +                    ActionListener.wrap(r -> decPendingAndFinishIfNeeded(), ReplicationOperation.this::onNoLongerPrimary));, +    private void onNoLongerPrimary(Exception failure) {, +        final boolean nodeIsClosing = failure instanceof NodeClosedException ||, +            (failure instanceof TransportException && "TransportService is closed stopped can't send request".equals(failure.getMessage()));, +        final String message;, +        if (nodeIsClosing) {, +            message = String.format(Locale.ROOT,, +                "node with primary [%s] is shutting down while failing replica shard", primary.routingEntry());, +            // We prefer not to fail the primary to avoid unnecessary warning log, +            // when the node with the primary shard is gracefully shutting down., +        } else {, +            if (Assertions.ENABLED) {, +                if (failure instanceof ShardStateAction.NoLongerPrimaryShardException == false) {, +                    throw new AssertionError("unexpected failure", failure);, +                }, +            }, +            message = String.format(Locale.ROOT, "primary shard [%s] was demoted while failing replica shard", primary.routingEntry());, +            primary.failShard(message, failure);, +        }, +        finishAsFailed(new RetryOnPrimaryException(primary.routingEntry().shardId(), message, failure));, +         * @param listener  a listener that will be notified when the failing shard has been removed from the in-sync set, +        void failShardIfNeeded(ShardRouting replica, String message, Exception exception, ActionListener<Void> listener);, +         * @param listener     a listener that will be notified when the failing shard has been removed from the in-sync set, +        void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, ActionListener<Void> listener);, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +        public void failShardIfNeeded(ShardRouting replica, String message, Exception exception, ActionListener<Void> listener) {, +            listener.onResponse(null);, +        public void markShardCopyAsStaleIfNeeded(ShardId shardId, String allocationId, ActionListener<Void> listener) {, +            listener.onResponse(null);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +        public void markShardCopyAsStaleIfNeeded(final ShardId shardId, final String allocationId, final ActionListener<Void> listener) {, +            shardStateAction.remoteShardFailed(shardId, allocationId, primaryTerm, true, "mark copy as stale", null, listener);, +++ b/server/src/main/java/org/elasticsearch/action/resync/TransportResyncReplicationAction.java, +        public void failShardIfNeeded(ShardRouting replica, String message, Exception exception, ActionListener<Void> listener) {, +            shardStateAction.remoteShardFailed(, +                replica.shardId(), replica.allocationId().getId(), primaryTerm, false, message, exception, listener);, +++ b/server/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java, +import org.elasticsearch.Assertions;]