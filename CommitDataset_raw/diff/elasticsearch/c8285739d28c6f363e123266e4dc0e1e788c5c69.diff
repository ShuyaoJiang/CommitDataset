[+++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if ("*".equals(actualField) || "_all".equals(actualField)) {, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if ("*".equals(actualField) || "_all".equals(actualField)) {, +++ b/src/test/java/org/elasticsearch/test/unit/index/query/SimpleIndexQueryParserTests.java, +    public void testStarColonStar() throws Exception {, +        IndexQueryParserService queryParser = queryParser();, +        String query = copyToStringFromClasspath("/org/elasticsearch/test/unit/index/query/starColonStar.json");, +        Query parsedQuery = queryParser.parse(query).query();, +        assertThat(parsedQuery, instanceOf(ConstantScoreQuery.class));, +        ConstantScoreQuery constantScoreQuery = (ConstantScoreQuery) parsedQuery;, +        Filter internalFilter = constantScoreQuery.getFilter();, +        assertThat(internalFilter, instanceOf(MatchAllDocsFilter.class));, +    }, +, +    @Test, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                if ("*".equals(actualField) || "_all".equals(actualField)) {, +++ b/src/test/java/org/elasticsearch/test/unit/index/query/SimpleIndexQueryParserTests.java, +    public void testStarColonStar() throws Exception {, +        IndexQueryParserService queryParser = queryParser();, +        String query = copyToStringFromClasspath("/org/elasticsearch/test/unit/index/query/starColonStar.json");, +        Query parsedQuery = queryParser.parse(query).query();, +        assertThat(parsedQuery, instanceOf(ConstantScoreQuery.class));, +        ConstantScoreQuery constantScoreQuery = (ConstantScoreQuery) parsedQuery;, +        Filter internalFilter = constantScoreQuery.getFilter();, +        assertThat(internalFilter, instanceOf(MatchAllDocsFilter.class));, +    }, +, +    @Test, +++ b/src/test/java/org/elasticsearch/test/unit/index/query/starColonStar.json, +{, +    "query_string": {, +        "query": "*:*", +    }, +}]