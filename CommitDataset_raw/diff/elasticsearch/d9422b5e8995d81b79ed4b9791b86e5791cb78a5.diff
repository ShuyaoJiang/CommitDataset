[+++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import java.util.concurrent.CopyOnWriteArrayList;, +    private final List<SettingUpdater<?>> settingUpdaters = new CopyOnWriteArrayList<>();, +    private final Map<String, Setting<?>> complexMatchers;, +    private final Map<String, Setting<?>> keySettings;, +        Map<String, Setting<?>> complexMatchers = new HashMap<>();, +        Map<String, Setting<?>> keySettings = new HashMap<>();, +        for (Setting<?> setting : settingsSet) {, +        this.complexMatchers = Collections.unmodifiableMap(complexMatchers);, +        this.keySettings = Collections.unmodifiableMap(keySettings);, +    }, +, +    protected AbstractScopedSettings(Settings nodeSettings, Settings scopeSettings, AbstractScopedSettings other) {, +        super(nodeSettings);, +        this.lastSettingsApplied = scopeSettings;, +        this.scope = other.scope;, +        complexMatchers = other.complexMatchers;, +        keySettings = other.keySettings;, +        settingUpdaters.addAll(other.settingUpdaters);, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import java.util.concurrent.CopyOnWriteArrayList;, +    private final List<SettingUpdater<?>> settingUpdaters = new CopyOnWriteArrayList<>();, +    private final Map<String, Setting<?>> complexMatchers;, +    private final Map<String, Setting<?>> keySettings;, +        Map<String, Setting<?>> complexMatchers = new HashMap<>();, +        Map<String, Setting<?>> keySettings = new HashMap<>();, +        for (Setting<?> setting : settingsSet) {, +        this.complexMatchers = Collections.unmodifiableMap(complexMatchers);, +        this.keySettings = Collections.unmodifiableMap(keySettings);, +    }, +, +    protected AbstractScopedSettings(Settings nodeSettings, Settings scopeSettings, AbstractScopedSettings other) {, +        super(nodeSettings);, +        this.lastSettingsApplied = scopeSettings;, +        this.scope = other.scope;, +        complexMatchers = other.complexMatchers;, +        keySettings = other.keySettings;, +        settingUpdaters.addAll(other.settingUpdaters);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +        indexSettings.getScopedSettings().addSettingsUpdateConsumer(IndexStore.INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC_SETTING, store::setMaxRate);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import java.util.concurrent.CopyOnWriteArrayList;, +    private final List<SettingUpdater<?>> settingUpdaters = new CopyOnWriteArrayList<>();, +    private final Map<String, Setting<?>> complexMatchers;, +    private final Map<String, Setting<?>> keySettings;, +        Map<String, Setting<?>> complexMatchers = new HashMap<>();, +        Map<String, Setting<?>> keySettings = new HashMap<>();, +        for (Setting<?> setting : settingsSet) {, +        this.complexMatchers = Collections.unmodifiableMap(complexMatchers);, +        this.keySettings = Collections.unmodifiableMap(keySettings);, +    }, +, +    protected AbstractScopedSettings(Settings nodeSettings, Settings scopeSettings, AbstractScopedSettings other) {, +        super(nodeSettings);, +        this.lastSettingsApplied = scopeSettings;, +        this.scope = other.scope;, +        complexMatchers = other.complexMatchers;, +        keySettings = other.keySettings;, +        settingUpdaters.addAll(other.settingUpdaters);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +        indexSettings.getScopedSettings().addSettingsUpdateConsumer(IndexStore.INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC_SETTING, store::setMaxRate);, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +    IndexScopedSettings getScopedSettings() { return scopedSettings;}, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import java.util.concurrent.CopyOnWriteArrayList;, +    private final List<SettingUpdater<?>> settingUpdaters = new CopyOnWriteArrayList<>();, +    private final Map<String, Setting<?>> complexMatchers;, +    private final Map<String, Setting<?>> keySettings;, +        Map<String, Setting<?>> complexMatchers = new HashMap<>();, +        Map<String, Setting<?>> keySettings = new HashMap<>();, +        for (Setting<?> setting : settingsSet) {, +        this.complexMatchers = Collections.unmodifiableMap(complexMatchers);, +        this.keySettings = Collections.unmodifiableMap(keySettings);, +    }, +, +    protected AbstractScopedSettings(Settings nodeSettings, Settings scopeSettings, AbstractScopedSettings other) {, +        super(nodeSettings);, +        this.lastSettingsApplied = scopeSettings;, +        this.scope = other.scope;, +        complexMatchers = other.complexMatchers;, +        keySettings = other.keySettings;, +        settingUpdaters.addAll(other.settingUpdaters);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +        indexSettings.getScopedSettings().addSettingsUpdateConsumer(IndexStore.INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC_SETTING, store::setMaxRate);, +++ b/core/src/main/java/org/elasticsearch/index/IndexSettings.java, +    IndexScopedSettings getScopedSettings() { return scopedSettings;}, +++ b/core/src/main/java/org/elasticsearch/index/MergePolicyConfig.java, +import org.elasticsearch.common.settings.IndexScopedSettings;, +        IndexScopedSettings scopedSettings = indexSettings.getScopedSettings();, +        scopedSettings.addSettingsUpdateConsumer(INDEX_COMPOUND_FORMAT_SETTING, this::setNoCFSRatio);, +        scopedSettings.addSettingsUpdateConsumer(INDEX_MERGE_POLICY_EXPUNGE_DELETES_ALLOWED_SETTING, this::expungeDeletesAllowed);, +        scopedSettings.addSettingsUpdateConsumer(INDEX_MERGE_POLICY_FLOOR_SEGMENT_SETTING, this::floorSegmentSetting);, +        scopedSettings.addSettingsUpdateConsumer(INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_SETTING, this::maxMergesAtOnce);, +        scopedSettings.addSettingsUpdateConsumer(INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_EXPLICIT_SETTING, this::maxMergesAtOnceExplicit);, +        scopedSettings.addSettingsUpdateConsumer(INDEX_MERGE_POLICY_MAX_MERGED_SEGMENT_SETTING, this::maxMergedSegment);, +        scopedSettings.addSettingsUpdateConsumer(INDEX_MERGE_POLICY_SEGMENTS_PER_TIER_SETTING, this::segmentsPerTier);]