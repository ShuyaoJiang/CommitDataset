[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlInitializationService.java, +import org.elasticsearch.gateway.GatewayService;, +        if (event.state().blocks().hasGlobalBlock(GatewayService.STATE_NOT_RECOVERED_BLOCK)) {, +            // Wait until the gateway has recovered from disk., +            return;, +        }, +, +                            // If the metadata has been added already don't try to update, +                            if (currentState.metaData().custom(MlMetadata.TYPE) != null) {, +                                return currentState;, +                            }, +                            installMlMetadataCheck.set(false);, +                            logger.error("unable to install ml metadata", e);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MlInitializationService.java, +import org.elasticsearch.gateway.GatewayService;, +        if (event.state().blocks().hasGlobalBlock(GatewayService.STATE_NOT_RECOVERED_BLOCK)) {, +            // Wait until the gateway has recovered from disk., +            return;, +        }, +, +                            // If the metadata has been added already don't try to update, +                            if (currentState.metaData().custom(MlMetadata.TYPE) != null) {, +                                return currentState;, +                            }, +                            installMlMetadataCheck.set(false);, +                            logger.error("unable to install ml metadata", e);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/MlInitializationServiceTests.java, +import org.elasticsearch.cluster.ClusterStateUpdateTask;, +import org.mockito.Mockito;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicReference;, +    public void testInitialize_reintialiseAfterFailure() throws Exception {, +        MlInitializationService initializationService = new MlInitializationService(Settings.EMPTY, threadPool, clusterService, client);, +, +        // Fail the first cluster state update, +        AtomicBoolean onFailureCalled = new AtomicBoolean(false);, +        Mockito.doAnswer(invocation -> {, +            ClusterStateUpdateTask task = (ClusterStateUpdateTask) invocation.getArguments()[1];, +            task.onFailure("mock a failure", new IllegalStateException());, +            onFailureCalled.set(true);, +            return null;, +        }).when(clusterService).submitStateUpdateTask(eq("install-ml-metadata"), any(ClusterStateUpdateTask.class));, +, +        ClusterState cs = ClusterState.builder(new ClusterName("_name")), +                .nodes(DiscoveryNodes.builder(), +                        .add(new DiscoveryNode("_node_id", new LocalTransportAddress("_id"), Version.CURRENT)), +                        .localNodeId("_node_id"), +                        .masterNodeId("_node_id")), +                .metaData(MetaData.builder()), +                .build();, +        initializationService.clusterChanged(new ClusterChangedEvent("_source", cs, cs));, +        assertTrue("Something went wrong mocking the cluster update task", onFailureCalled.get());, +        verify(clusterService, times(1)).submitStateUpdateTask(eq("install-ml-metadata"), any(ClusterStateUpdateTask.class));, +, +        // 2nd update succeeds, +        AtomicReference<ClusterState> clusterStateHolder = new AtomicReference<>();, +        Mockito.doAnswer(invocation -> {, +            ClusterStateUpdateTask task = (ClusterStateUpdateTask) invocation.getArguments()[1];, +            clusterStateHolder.set(task.execute(cs));, +            return null;, +        }).when(clusterService).submitStateUpdateTask(eq("install-ml-metadata"), any(ClusterStateUpdateTask.class));, +, +        initializationService.clusterChanged(new ClusterChangedEvent("_source", cs, cs));, +        assertTrue("Something went wrong mocking the sucessful cluster update task", clusterStateHolder.get() != null);, +        verify(clusterService, times(2)).submitStateUpdateTask(eq("install-ml-metadata"), any(ClusterStateUpdateTask.class));, +, +        // 3rd update won't be called as ML Metadata has been installed, +        initializationService.clusterChanged(new ClusterChangedEvent("_source", clusterStateHolder.get(), clusterStateHolder.get()));, +        verify(clusterService, times(2)).submitStateUpdateTask(eq("install-ml-metadata"), any(ClusterStateUpdateTask.class));, +    }, +]