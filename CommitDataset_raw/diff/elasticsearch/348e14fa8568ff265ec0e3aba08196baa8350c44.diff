[+++ b/dev-tools/forbidden/core-signatures.txt, +++ b/dev-tools/forbidden/core-signatures.txt, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +++ b/dev-tools/forbidden/core-signatures.txt, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +++ b/src/main/java/org/elasticsearch/common/lucene/docset/DocIdSets.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.lucene.docset;, +, +import org.apache.lucene.search.DocIdSet;, +import org.apache.lucene.search.DocIdSetIterator;, +import org.apache.lucene.search.Scorer;, +import org.apache.lucene.search.TwoPhaseIterator;, +import org.apache.lucene.util.Bits;, +import org.elasticsearch.common.Nullable;, +, +import java.io.IOException;, +, +/**, + */, +public class DocIdSets {, +, +    /**, +     * Is it an empty {@link DocIdSet}?, +     */, +    public static boolean isEmpty(@Nullable DocIdSet set) {, +        return set == null || set == DocIdSet.EMPTY;, +    }, +, +    /**, +     * Given a {@link Scorer}, return a {@link Bits} instance that will match, +     * all documents contained in the set. Note that the returned {@link Bits}, +     * instance MUST be consumed in order., +     */, +    public static Bits asSequentialAccessBits(final int maxDoc, @Nullable Scorer scorer) throws IOException {, +        if (scorer == null) {, +            return new Bits.MatchNoBits(maxDoc);, +        }, +        final TwoPhaseIterator twoPhase = scorer.asTwoPhaseIterator();, +        final DocIdSetIterator iterator;, +        if (twoPhase == null) {, +            iterator = scorer;, +        } else {, +            iterator = twoPhase.approximation();, +        }, +, +        return new Bits() {, +, +            int previous = -1;, +            boolean previousMatched = false;, +, +            @Override, +            public boolean get(int index) {, +                if (index < 0 || index >= maxDoc) {, +                    throw new IndexOutOfBoundsException(index + " is out of bounds: [" + 0 + "-" + maxDoc + "[");, +                }, +                if (index < previous) {, +                    throw new IllegalArgumentException("This Bits instance can only be consumed in order. ", +                            + "Got called on [" + index + "] while previously called on [" + previous + "]");, +                }, +                if (index == previous) {, +                    // we cache whether it matched because it is illegal to call, +                    // twoPhase.matches() twice, +                    return previousMatched;, +                }, +                previous = index;, +, +                int doc = iterator.docID();, +                if (doc < index) {, +                    try {, +                        doc = iterator.advance(index);, +                    } catch (IOException e) {, +                        throw new IllegalStateException("Cannot advance iterator", e);, +                    }, +                }, +                if (index == doc) {, +                    try {, +                        return previousMatched = twoPhase == null || twoPhase.matches();, +                    } catch (IOException e) {, +                        throw new IllegalStateException("Cannot validate match", e);, +                    }, +                }]