[+++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.DocValueFormat;, +     * Reads a {@link DocValueFormat} from the current stream., +     */, +    public DocValueFormat readValueFormat() throws IOException {, +        return readNamedWriteable(DocValueFormat.class);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.DocValueFormat;, +     * Reads a {@link DocValueFormat} from the current stream., +     */, +    public DocValueFormat readValueFormat() throws IOException {, +        return readNamedWriteable(DocValueFormat.class);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.search.DocValueFormat;, +    /** Writes a {@link DocValueFormat}. */, +    public void writeValueFormat(DocValueFormat format) throws IOException {, +        writeNamedWriteable(format);, +    }, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.DocValueFormat;, +     * Reads a {@link DocValueFormat} from the current stream., +     */, +    public DocValueFormat readValueFormat() throws IOException {, +        return readNamedWriteable(DocValueFormat.class);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.search.DocValueFormat;, +    /** Writes a {@link DocValueFormat}. */, +    public void writeValueFormat(DocValueFormat format) throws IOException {, +        writeNamedWriteable(format);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.search.DocValueFormat;, +    /** Return a {@link DocValueFormat} that can be used to display and parse, +     *  values as returned by the fielddata API., +     *  The default implementation returns a {@link DocValueFormat#RAW}. */, +    public DocValueFormat docValueFormat(@Nullable String format, DateTimeZone timeZone) {, +        if (format != null) {, +            throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() + "] does not support custom formats");, +        }, +        if (timeZone != null) {, +            throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() + "] does not support custom time zones");, +        }, +        return DocValueFormat.RAW;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.search.DocValueFormat;, +     * Reads a {@link DocValueFormat} from the current stream., +     */, +    public DocValueFormat readValueFormat() throws IOException {, +        return readNamedWriteable(DocValueFormat.class);, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.search.DocValueFormat;, +    /** Writes a {@link DocValueFormat}. */, +    public void writeValueFormat(DocValueFormat format) throws IOException {, +        writeNamedWriteable(format);, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +import org.elasticsearch.search.DocValueFormat;, +    /** Return a {@link DocValueFormat} that can be used to display and parse, +     *  values as returned by the fielddata API., +     *  The default implementation returns a {@link DocValueFormat#RAW}. */, +    public DocValueFormat docValueFormat(@Nullable String format, DateTimeZone timeZone) {, +        if (format != null) {, +            throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() + "] does not support custom formats");, +        }, +        if (timeZone != null) {, +            throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() + "] does not support custom time zones");, +        }, +        return DocValueFormat.RAW;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BooleanFieldMapper.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.search.DocValueFormat;, +import org.joda.time.DateTimeZone;, +, +        @Override, +        public DocValueFormat docValueFormat(@Nullable String format, DateTimeZone timeZone) {, +            if (format != null) {, +                throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName() + "] does not support custom formats");, +            }, +            if (timeZone != null) {, +                throw new IllegalArgumentException("Field [" + name() + "] of type [" + typeName(), +                    + "] does not support custom time zones");, +            }, +            return DocValueFormat.BOOLEAN;, +        }]