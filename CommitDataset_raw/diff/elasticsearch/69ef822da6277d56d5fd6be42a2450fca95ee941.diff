[+++ b/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ b/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ b/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ /dev/null, +++ b/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.apache.lucene.queries.FilterClause;, +import org.elasticsearch.common.lucene.search.XTermsFilter;, +            for (FilterClause clause : booleanFilter.clauses()) {, +                if (clause.getOccur() == BooleanClause.Occur.MUST || clause.getOccur() == BooleanClause.Occur.SHOULD) {, +                    flatten(clause.getFilter(), reader, flatQueries);, +++ b/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +import org.elasticsearch.common.lucene.search.DeletionAwareConstantScoreQuery;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +import org.apache.lucene.queries.FilterClause;, +import org.elasticsearch.common.lucene.search.XTermsFilter;, +            for (FilterClause clause : booleanFilter.clauses()) {, +                if (clause.getOccur() == BooleanClause.Occur.MUST || clause.getOccur() == BooleanClause.Occur.SHOULD) {, +                    flatten(clause.getFilter(), reader, flatQueries);, +++ b/src/main/java/org/elasticsearch/common/lucene/docset/AllDocIdSet.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.lucene.docset;, +, +import org.apache.lucene.search.DocIdSet;, +import org.apache.lucene.search.DocIdSetIterator;, +import org.apache.lucene.util.Bits;, +, +import java.io.IOException;, +, +/**, + * A {@link DocIdSet} that matches all docs up to a {@code maxDoc}., + */, +public class AllDocIdSet extends DocIdSet {, +, +    private final int maxDoc;, +, +    public AllDocIdSet(int maxDoc) {, +        this.maxDoc = maxDoc;, +    }, +, +    /**, +     * Does not go to the reader and ask for data, so can be cached., +     */, +    @Override, +    public boolean isCacheable() {, +        return true;, +    }, +, +    @Override, +    public DocIdSetIterator iterator() throws IOException {, +        return new Iterator(maxDoc);]