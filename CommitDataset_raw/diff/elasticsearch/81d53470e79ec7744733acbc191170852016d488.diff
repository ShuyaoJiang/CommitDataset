[+++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/QueryAnalyzer.java, +import org.apache.lucene.search.MultiPhraseQuery;, +import java.util.Arrays;, +        map.put(MultiPhraseQuery.class, multiPhraseQuery());, +    static Function<Query, Result> multiPhraseQuery() {, +        return query -> {, +            Term[][] terms = ((MultiPhraseQuery) query).getTermArrays();, +            if (terms.length == 0) {, +                return new Result(true, Collections.emptySet());, +            }, +, +            Set<Term> bestTermArr = null;, +            for (Term[] termArr : terms) {, +                bestTermArr = selectTermListWithTheLongestShortestTerm(bestTermArr, new HashSet<>(Arrays.asList(termArr)));, +            }, +            return new Result(false, bestTermArr);, +        };, +    }, +, +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/QueryAnalyzer.java, +import org.apache.lucene.search.MultiPhraseQuery;, +import java.util.Arrays;, +        map.put(MultiPhraseQuery.class, multiPhraseQuery());, +    static Function<Query, Result> multiPhraseQuery() {, +        return query -> {, +            Term[][] terms = ((MultiPhraseQuery) query).getTermArrays();, +            if (terms.length == 0) {, +                return new Result(true, Collections.emptySet());, +            }, +, +            Set<Term> bestTermArr = null;, +            for (Term[] termArr : terms) {, +                bestTermArr = selectTermListWithTheLongestShortestTerm(bestTermArr, new HashSet<>(Arrays.asList(termArr)));, +            }, +            return new Result(false, bestTermArr);, +        };, +    }, +, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/QueryAnalyzerTests.java, +import org.apache.lucene.search.MultiPhraseQuery;, +    public void testExtractQueryMetadata_multiPhraseQuery() {, +        MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery.Builder(), +                .add(new Term("_field", "_long_term")), +                .add(new Term[] {new Term("_field", "_long_term"), new Term("_field", "_term")}), +                .add(new Term[] {new Term("_field", "_long_term"), new Term("_field", "_very_long_term")}), +                .add(new Term[] {new Term("_field", "_very_long_term")}), +                .build();, +        Result result = analyze(multiPhraseQuery);, +        assertThat(result.verified, is(false));, +        List<Term> terms = new ArrayList<>(result.terms);, +        assertThat(terms.size(), equalTo(1));, +        assertThat(terms.get(0).field(), equalTo("_field"));, +        assertThat(terms.get(0).bytes().utf8ToString(), equalTo("_very_long_term"));, +    }, +]