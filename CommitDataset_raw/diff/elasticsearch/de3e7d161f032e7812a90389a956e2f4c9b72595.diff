[+++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        Objects.requireNonNull(request, "'request' must not be null");, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        Objects.requireNonNull(request, "'request' must not be null");, +++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkRequestTests.java, +, +    public void testCannotAddNullRequests() throws Exception {, +        BulkRequest bulkRequest = new BulkRequest();, +        expectThrows(NullPointerException.class, () -> bulkRequest.add((IndexRequest) null));, +        expectThrows(NullPointerException.class, () -> bulkRequest.add((UpdateRequest) null));, +        expectThrows(NullPointerException.class, () -> bulkRequest.add((DeleteRequest) null));, +    }, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        Objects.requireNonNull(request, "'request' must not be null");, +++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkRequestTests.java, +, +    public void testCannotAddNullRequests() throws Exception {, +        BulkRequest bulkRequest = new BulkRequest();, +        expectThrows(NullPointerException.class, () -> bulkRequest.add((IndexRequest) null));, +        expectThrows(NullPointerException.class, () -> bulkRequest.add((UpdateRequest) null));, +        expectThrows(NullPointerException.class, () -> bulkRequest.add((DeleteRequest) null));, +    }, +++ b/docs/reference/search/request/from-size.asciidoc, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +        Objects.requireNonNull(request, "'request' must not be null");, +++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkRequestTests.java, +, +    public void testCannotAddNullRequests() throws Exception {, +        BulkRequest bulkRequest = new BulkRequest();, +        expectThrows(NullPointerException.class, () -> bulkRequest.add((IndexRequest) null));, +        expectThrows(NullPointerException.class, () -> bulkRequest.add((UpdateRequest) null));, +        expectThrows(NullPointerException.class, () -> bulkRequest.add((DeleteRequest) null));, +    }, +++ b/docs/reference/search/request/from-size.asciidoc, +++ b/docs/reference/search/request/sort.asciidoc, +Assuming the following index mapping:, +, +PUT /my_index, +{, +    "mappings": {, +        "my_type": {, +            "properties": {, +                "post_date": { "type": "date" },, +                "user": { , +                    "type": "keyword", +                },, +                "name": {, +                    "type": "keyword", +                },, +                "age": { "type": "integer" }, +            }, +        }, +    }, +}, +--------------------------------------------------, +// CONSOLE, +, +[source,js], +--------------------------------------------------, +GET /my_index/my_type/_search, +// CONSOLE, +// TEST[continued], +In this case the result hits will be sorted by price ascending based on, +PUT /my_index/my_type/1?refresh, +{, +   "product": "chocolate",, +    "price": [20, 4], +}, +, +POST /_search , +{, +      "term" : { "product" : "chocolate" }, +}, +// CONSOLE, +POST /_search, +{, +      "term" : { "product" : "chocolate" }, +}, +// CONSOLE, +GET /_search, +        { "price" : {"missing" : "_last"} }, +        "term" : { "product" : "chocolate" }, +// CONSOLE, +GET /_search, +        { "price" : {"unmapped_type" : "long"} }, +        "term" : { "product" : "chocolate" }, +// CONSOLE, +GET /_search, +// CONSOLE, +GET /_search, +// CONSOLE, +GET /_search, +// CONSOLE, +GET /_search, +// CONSOLE, +GET /_search, +// CONSOLE, +GET /_search, +        "term" : { "user" : "kimchy" }, +// CONSOLE]