[+++ b/buildSrc/build.gradle, +++ b/buildSrc/build.gradle, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +                        // TODO look up the task's result from the .tasks index now that it is done, +                        listener.onResponse(, +                                new GetTaskResponse(new PersistedTaskInfo(runningTask.taskInfo(clusterService.localNode(), true))));, +                listener.onResponse(new GetTaskResponse(new PersistedTaskInfo(runningTask.taskInfo(clusterService.localNode(), true))));, +     * Send a {@link GetRequest} to the results index looking for the results of the task. It'll only be found only if the task's result was, +     * persisted. Called on the node that once had the task if that node is part of the cluster or on the coordinating node if the node, +     * wasn't part of the cluster., +++ b/buildSrc/build.gradle, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +                        // TODO look up the task's result from the .tasks index now that it is done, +                        listener.onResponse(, +                                new GetTaskResponse(new PersistedTaskInfo(runningTask.taskInfo(clusterService.localNode(), true))));, +                listener.onResponse(new GetTaskResponse(new PersistedTaskInfo(runningTask.taskInfo(clusterService.localNode(), true))));, +     * Send a {@link GetRequest} to the results index looking for the results of the task. It'll only be found only if the task's result was, +     * persisted. Called on the node that once had the task if that node is part of the cluster or on the coordinating node if the node, +     * wasn't part of the cluster., +++ b/core/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java, +import java.util.concurrent.RejectedExecutionException;, +            } catch (RejectedExecutionException e) {, +++ b/buildSrc/build.gradle, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +                        // TODO look up the task's result from the .tasks index now that it is done, +                        listener.onResponse(, +                                new GetTaskResponse(new PersistedTaskInfo(runningTask.taskInfo(clusterService.localNode(), true))));, +                listener.onResponse(new GetTaskResponse(new PersistedTaskInfo(runningTask.taskInfo(clusterService.localNode(), true))));, +     * Send a {@link GetRequest} to the results index looking for the results of the task. It'll only be found only if the task's result was, +     * persisted. Called on the node that once had the task if that node is part of the cluster or on the coordinating node if the node, +     * wasn't part of the cluster., +++ b/core/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java, +import java.util.concurrent.RejectedExecutionException;, +            } catch (RejectedExecutionException e) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_5_0_0_alpha4)) {, +                throw new IllegalArgumentException("[_ttl] is removed in 5.0. As a replacement, you should use time based indexes or cron a delete-by-query with a range query on a timestamp field.");, +            }, +        if (enabled.enabled && Version.indexCreated(indexSettings).onOrAfter(Version.V_5_0_0_alpha4)) {, +            throw new IllegalArgumentException("[_ttl] is removed in 5.0. As a replacement, you should use time based indexes or cron a delete-by-query with a range query on a timestamp field.");, +        }, +++ b/buildSrc/build.gradle, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +                        // TODO look up the task's result from the .tasks index now that it is done, +                        listener.onResponse(, +                                new GetTaskResponse(new PersistedTaskInfo(runningTask.taskInfo(clusterService.localNode(), true))));, +                listener.onResponse(new GetTaskResponse(new PersistedTaskInfo(runningTask.taskInfo(clusterService.localNode(), true))));, +     * Send a {@link GetRequest} to the results index looking for the results of the task. It'll only be found only if the task's result was, +     * persisted. Called on the node that once had the task if that node is part of the cluster or on the coordinating node if the node, +     * wasn't part of the cluster., +++ b/core/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java, +import java.util.concurrent.RejectedExecutionException;, +            } catch (RejectedExecutionException e) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_5_0_0_alpha4)) {, +                throw new IllegalArgumentException("[_ttl] is removed in 5.0. As a replacement, you should use time based indexes or cron a delete-by-query with a range query on a timestamp field.");, +            }, +        if (enabled.enabled && Version.indexCreated(indexSettings).onOrAfter(Version.V_5_0_0_alpha4)) {, +            throw new IllegalArgumentException("[_ttl] is removed in 5.0. As a replacement, you should use time based indexes or cron a delete-by-query with a range query on a timestamp field.");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_5_0_0_alpha4)) {, +                throw new IllegalArgumentException("[_timestamp] is removed in 5.0. As a replacement, you can use an ingest pipeline to add a field with the current timestamp to your documents.");, +            }, +        if (enabledState.enabled && Version.indexCreated(indexSettings).onOrAfter(Version.V_5_0_0_alpha4)) {, +            throw new IllegalArgumentException("[_timestamp] is removed in 5.0. As a replacement, you can use an ingest pipeline to add a field with the current timestamp to your documents.");, +        }, +++ b/buildSrc/build.gradle, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +                        // TODO look up the task's result from the .tasks index now that it is done, +                        listener.onResponse(, +                                new GetTaskResponse(new PersistedTaskInfo(runningTask.taskInfo(clusterService.localNode(), true))));, +                listener.onResponse(new GetTaskResponse(new PersistedTaskInfo(runningTask.taskInfo(clusterService.localNode(), true))));, +     * Send a {@link GetRequest} to the results index looking for the results of the task. It'll only be found only if the task's result was, +     * persisted. Called on the node that once had the task if that node is part of the cluster or on the coordinating node if the node, +     * wasn't part of the cluster., +++ b/core/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java, +import java.util.concurrent.RejectedExecutionException;, +            } catch (RejectedExecutionException e) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_5_0_0_alpha4)) {, +                throw new IllegalArgumentException("[_ttl] is removed in 5.0. As a replacement, you should use time based indexes or cron a delete-by-query with a range query on a timestamp field.");, +            }, +        if (enabled.enabled && Version.indexCreated(indexSettings).onOrAfter(Version.V_5_0_0_alpha4)) {, +            throw new IllegalArgumentException("[_ttl] is removed in 5.0. As a replacement, you should use time based indexes or cron a delete-by-query with a range query on a timestamp field.");, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/TimestampFieldMapper.java, +import org.elasticsearch.Version;, +            if (parserContext.indexVersionCreated().onOrAfter(Version.V_5_0_0_alpha4)) {, +                throw new IllegalArgumentException("[_timestamp] is removed in 5.0. As a replacement, you can use an ingest pipeline to add a field with the current timestamp to your documents.");, +            }, +        if (enabledState.enabled && Version.indexCreated(indexSettings).onOrAfter(Version.V_5_0_0_alpha4)) {, +            throw new IllegalArgumentException("[_timestamp] is removed in 5.0. As a replacement, you can use an ingest pipeline to add a field with the current timestamp to your documents.");, +        }, +++ /dev/null, +++ b/buildSrc/build.gradle]