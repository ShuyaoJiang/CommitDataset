[+++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +        manuallyStopped = !settings.getAsBoolean("alerts.start_immediately",  true);, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +        manuallyStopped = !settings.getAsBoolean("alerts.start_immediately",  true);, +++ b/src/main/java/org/elasticsearch/alerts/ConfigurationManager.java, +    public static final String GLOBAL_CONFIG_NAME = "global";, +    private volatile CopyOnWriteArrayList<ConfigurableComponentListener> registeredComponents;, +        registeredComponents = new CopyOnWriteArrayList<>();, +     * This method gets the config, +    public Settings getGlobalConfig() {, +        GetResponse response = client.prepareGet(CONFIG_INDEX, CONFIG_TYPE, GLOBAL_CONFIG_NAME).get();, +    public void newConfig(BytesReference settingsSource) {, +        for (ConfigurableComponentListener componentListener : registeredComponents) {, +    public void registerListener(ConfigurableComponentListener configListener) {, +        if (!registeredComponents.contains(configListener)) {, +            registeredComponents.add(configListener);, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +        manuallyStopped = !settings.getAsBoolean("alerts.start_immediately",  true);, +++ b/src/main/java/org/elasticsearch/alerts/ConfigurationManager.java, +    public static final String GLOBAL_CONFIG_NAME = "global";, +    private volatile CopyOnWriteArrayList<ConfigurableComponentListener> registeredComponents;, +        registeredComponents = new CopyOnWriteArrayList<>();, +     * This method gets the config, +    public Settings getGlobalConfig() {, +        GetResponse response = client.prepareGet(CONFIG_INDEX, CONFIG_TYPE, GLOBAL_CONFIG_NAME).get();, +    public void newConfig(BytesReference settingsSource) {, +        for (ConfigurableComponentListener componentListener : registeredComponents) {, +    public void registerListener(ConfigurableComponentListener configListener) {, +        if (!registeredComponents.contains(configListener)) {, +            registeredComponents.add(configListener);, +++ b/src/main/java/org/elasticsearch/alerts/actions/AlertActionManager.java, +    private final int scrollSize;, +    private final TimeValue scrollTimeout;, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +        manuallyStopped = !settings.getAsBoolean("alerts.start_immediately",  true);, +++ b/src/main/java/org/elasticsearch/alerts/ConfigurationManager.java, +    public static final String GLOBAL_CONFIG_NAME = "global";, +    private volatile CopyOnWriteArrayList<ConfigurableComponentListener> registeredComponents;, +        registeredComponents = new CopyOnWriteArrayList<>();, +     * This method gets the config, +    public Settings getGlobalConfig() {, +        GetResponse response = client.prepareGet(CONFIG_INDEX, CONFIG_TYPE, GLOBAL_CONFIG_NAME).get();, +    public void newConfig(BytesReference settingsSource) {, +        for (ConfigurableComponentListener componentListener : registeredComponents) {, +    public void registerListener(ConfigurableComponentListener configListener) {, +        if (!registeredComponents.contains(configListener)) {, +            registeredComponents.add(configListener);, +++ b/src/main/java/org/elasticsearch/alerts/actions/AlertActionManager.java, +    private final int scrollSize;, +    private final TimeValue scrollTimeout;, +++ b/src/main/java/org/elasticsearch/alerts/actions/AlertActionRegistry.java, +                .fPut("email", new SnptAlertActionFactory(configurationManager)), +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +        manuallyStopped = !settings.getAsBoolean("alerts.start_immediately",  true);, +++ b/src/main/java/org/elasticsearch/alerts/ConfigurationManager.java, +    public static final String GLOBAL_CONFIG_NAME = "global";, +    private volatile CopyOnWriteArrayList<ConfigurableComponentListener> registeredComponents;, +        registeredComponents = new CopyOnWriteArrayList<>();, +     * This method gets the config, +    public Settings getGlobalConfig() {, +        GetResponse response = client.prepareGet(CONFIG_INDEX, CONFIG_TYPE, GLOBAL_CONFIG_NAME).get();, +    public void newConfig(BytesReference settingsSource) {, +        for (ConfigurableComponentListener componentListener : registeredComponents) {, +    public void registerListener(ConfigurableComponentListener configListener) {, +        if (!registeredComponents.contains(configListener)) {, +            registeredComponents.add(configListener);, +++ b/src/main/java/org/elasticsearch/alerts/actions/AlertActionManager.java, +    private final int scrollSize;, +    private final TimeValue scrollTimeout;, +++ b/src/main/java/org/elasticsearch/alerts/actions/AlertActionRegistry.java, +                .fPut("email", new SnptAlertActionFactory(configurationManager)), +++ /dev/null, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +        manuallyStopped = !settings.getAsBoolean("alerts.start_immediately",  true);, +++ b/src/main/java/org/elasticsearch/alerts/ConfigurationManager.java, +    public static final String GLOBAL_CONFIG_NAME = "global";, +    private volatile CopyOnWriteArrayList<ConfigurableComponentListener> registeredComponents;, +        registeredComponents = new CopyOnWriteArrayList<>();, +     * This method gets the config, +    public Settings getGlobalConfig() {, +        GetResponse response = client.prepareGet(CONFIG_INDEX, CONFIG_TYPE, GLOBAL_CONFIG_NAME).get();, +    public void newConfig(BytesReference settingsSource) {, +        for (ConfigurableComponentListener componentListener : registeredComponents) {, +    public void registerListener(ConfigurableComponentListener configListener) {, +        if (!registeredComponents.contains(configListener)) {, +            registeredComponents.add(configListener);, +++ b/src/main/java/org/elasticsearch/alerts/actions/AlertActionManager.java, +    private final int scrollSize;, +    private final TimeValue scrollTimeout;, +++ b/src/main/java/org/elasticsearch/alerts/actions/AlertActionRegistry.java, +                .fPut("email", new SnptAlertActionFactory(configurationManager)), +++ /dev/null, +++ b/src/main/java/org/elasticsearch/alerts/actions/SnptAlertActionFactory.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.alerts.actions;, +]