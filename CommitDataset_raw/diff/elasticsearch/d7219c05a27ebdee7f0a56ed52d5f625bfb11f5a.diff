[+++ b/docs/reference/search/request/docvalue-fields.asciidoc, +`*` can be used as a wild card, for example:, +, +[source,js], +--------------------------------------------------, +GET /_search, +{, +    "query" : {, +        "match_all": {}, +    },, +    "docvalue_fields" : [, +        {, +            "field": "*field", <1>, +            "format": "use_field_mapping" <2>, +        }, +    ], +}, +--------------------------------------------------, +// CONSOLE, +<1> Match all fields ending with `field`, +<2> Format to be applied to all matching fields., +, +++ b/docs/reference/search/request/docvalue-fields.asciidoc, +`*` can be used as a wild card, for example:, +, +[source,js], +--------------------------------------------------, +GET /_search, +{, +    "query" : {, +        "match_all": {}, +    },, +    "docvalue_fields" : [, +        {, +            "field": "*field", <1>, +            "format": "use_field_mapping" <2>, +        }, +    ], +}, +--------------------------------------------------, +// CONSOLE, +<1> Match all fields ending with `field`, +<2> Format to be applied to all matching fields., +, +++ b/server/src/main/java/org/elasticsearch/search/SearchService.java, +import java.util.ArrayList;, +import java.util.Collection;, +            List<DocValueFieldsContext.FieldAndFormat> docValueFields = new ArrayList<>();, +            for (DocValueFieldsContext.FieldAndFormat format : source.docValueFields()) {, +                Collection<String> fieldNames = context.mapperService().simpleMatchToFullName(format.field);, +                for (String fieldName: fieldNames) {, +                   docValueFields.add(new DocValueFieldsContext.FieldAndFormat(fieldName, format.format));, +                }, +            }, +            if (docValueFields.size() > maxAllowedDocvalueFields) {, +                        + "] but was [" + docValueFields.size() + "]. This limit can be set by changing the [", +            context.docValueFieldsContext(new DocValueFieldsContext(docValueFields));, +++ b/docs/reference/search/request/docvalue-fields.asciidoc, +`*` can be used as a wild card, for example:, +, +[source,js], +--------------------------------------------------, +GET /_search, +{, +    "query" : {, +        "match_all": {}, +    },, +    "docvalue_fields" : [, +        {, +            "field": "*field", <1>, +            "format": "use_field_mapping" <2>, +        }, +    ], +}, +--------------------------------------------------, +// CONSOLE, +<1> Match all fields ending with `field`, +<2> Format to be applied to all matching fields., +, +++ b/server/src/main/java/org/elasticsearch/search/SearchService.java, +import java.util.ArrayList;, +import java.util.Collection;, +            List<DocValueFieldsContext.FieldAndFormat> docValueFields = new ArrayList<>();, +            for (DocValueFieldsContext.FieldAndFormat format : source.docValueFields()) {, +                Collection<String> fieldNames = context.mapperService().simpleMatchToFullName(format.field);, +                for (String fieldName: fieldNames) {, +                   docValueFields.add(new DocValueFieldsContext.FieldAndFormat(fieldName, format.format));, +                }, +            }, +            if (docValueFields.size() > maxAllowedDocvalueFields) {, +                        + "] but was [" + docValueFields.size() + "]. This limit can be set by changing the [", +            context.docValueFieldsContext(new DocValueFieldsContext(docValueFields));, +++ b/server/src/test/java/org/elasticsearch/search/fields/SearchFieldsIT.java, +            .addDocValueField("*field");, +        searchResponse = builder.execute().actionGet();, +, +        assertThat(searchResponse.getHits().getTotalHits(), equalTo(1L));, +        assertThat(searchResponse.getHits().getHits().length, equalTo(1));, +        fields = new HashSet<>(searchResponse.getHits().getAt(0).getFields().keySet());, +        assertThat(fields, equalTo(newHashSet("byte_field", "short_field", "integer_field", "long_field",]