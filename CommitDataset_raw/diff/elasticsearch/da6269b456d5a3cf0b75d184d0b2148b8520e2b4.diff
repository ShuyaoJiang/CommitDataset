[+++ b/server/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +, +                                for (int shard = 0; shard < snapshotIndexMetaData.getNumberOfShards(); shard++) {, +                                    indexMdBuilder.primaryTerm(shard,, +                                        Math.max(snapshotIndexMetaData.primaryTerm(shard), currentIndexMetaData.primaryTerm(shard)));, +                                }, +, +++ b/server/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +, +                                for (int shard = 0; shard < snapshotIndexMetaData.getNumberOfShards(); shard++) {, +                                    indexMdBuilder.primaryTerm(shard,, +                                        Math.max(snapshotIndexMetaData.primaryTerm(shard), currentIndexMetaData.primaryTerm(shard)));, +                                }, +, +++ b/server/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +import java.util.stream.IntStream;, +    public void testRestoreIncreasesPrimaryTerms() {, +        final String indexName = randomAlphaOfLengthBetween(5, 10).toLowerCase(Locale.ROOT);, +        createIndex(indexName, Settings.builder(), +            .put(SETTING_NUMBER_OF_SHARDS, 2), +            .put(SETTING_NUMBER_OF_REPLICAS, 0), +            .build());, +        ensureGreen(indexName);, +, +        if (randomBoolean()) {, +            // open and close the index to increase the primary terms, +            for (int i = 0; i < randomInt(3); i++) {, +                assertAcked(client().admin().indices().prepareClose(indexName));, +                assertAcked(client().admin().indices().prepareOpen(indexName));, +            }, +        }, +, +        final IndexMetaData indexMetaData = client().admin().cluster().prepareState().clear().setIndices(indexName), +            .setMetaData(true).get().getState().metaData().index(indexName);, +        final int numPrimaries = getNumShards(indexName).numPrimaries;, +        final Map<Integer, Long> primaryTerms = IntStream.range(0, numPrimaries), +            .boxed().collect(Collectors.toMap(shardId -> shardId, indexMetaData::primaryTerm));, +, +        assertAcked(client().admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(randomRepoSettings()));, +        final CreateSnapshotResponse createSnapshotResponse = client().admin().cluster().prepareCreateSnapshot("test-repo", "test-snap"), +            .setWaitForCompletion(true).setIndices(indexName).get();, +        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(numPrimaries));, +        assertThat(createSnapshotResponse.getSnapshotInfo().failedShards(), equalTo(0));, +, +        assertAcked(client().admin().indices().prepareClose(indexName));, +, +        final RestoreSnapshotResponse restoreSnapshotResponse = client().admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap"), +            .setWaitForCompletion(true).get();, +        assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(), equalTo(numPrimaries));, +        assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(), equalTo(0));, +, +        final IndexMetaData restoredIndexMetaData = client().admin().cluster().prepareState().clear().setIndices(indexName), +            .setMetaData(true).get().getState().metaData().index(indexName);, +        for (int shardId = 0; shardId < numPrimaries; shardId++) {, +            assertThat(restoredIndexMetaData.primaryTerm(shardId), equalTo(primaryTerms.get(shardId) + 1));, +        }, +    }, +]