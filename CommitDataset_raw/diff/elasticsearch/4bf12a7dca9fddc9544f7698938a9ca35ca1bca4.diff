[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                 * -serial because we don't use java serialization., +                options.compilerArgs << '-Werror' << '-Xlint:all,-path,-serial' << '-Xdoclint:all' << '-Xdoclint:-missing', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                 * -serial because we don't use java serialization., +                options.compilerArgs << '-Werror' << '-Xlint:all,-path,-serial' << '-Xdoclint:all' << '-Xdoclint:-missing', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        // We don't use Java serialization so we fail if it looks like we're trying to., +        patterns.put('declares serialVersionUID', /serialVersionUID/), +        patterns.put('references Serializable', /java\.io\.Serializable/), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                 * -serial because we don't use java serialization., +                options.compilerArgs << '-Werror' << '-Xlint:all,-path,-serial' << '-Xdoclint:all' << '-Xdoclint:-missing', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        // We don't use Java serialization so we fail if it looks like we're trying to., +        patterns.put('declares serialVersionUID', /serialVersionUID/), +        patterns.put('references Serializable', /java\.io\.Serializable/), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +org.apache.lucene.index.IndexWriter#isLocked(org.apache.lucene.store.Directory), +@defaultMessage Use org.elasticsearch.common.Randomness#get for reproducible sources of randomness, +java.util.Random#<init>(), +java.util.concurrent.ThreadLocalRandom, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                 * -serial because we don't use java serialization., +                options.compilerArgs << '-Werror' << '-Xlint:all,-path,-serial' << '-Xdoclint:all' << '-Xdoclint:-missing', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        // We don't use Java serialization so we fail if it looks like we're trying to., +        patterns.put('declares serialVersionUID', /serialVersionUID/), +        patterns.put('references Serializable', /java\.io\.Serializable/), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +org.apache.lucene.index.IndexWriter#isLocked(org.apache.lucene.store.Directory), +@defaultMessage Use org.elasticsearch.common.Randomness#get for reproducible sources of randomness, +java.util.Random#<init>(), +java.util.concurrent.ThreadLocalRandom, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                 * -serial because we don't use java serialization., +                options.compilerArgs << '-Werror' << '-Xlint:all,-path,-serial' << '-Xdoclint:all' << '-Xdoclint:-missing', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        // We don't use Java serialization so we fail if it looks like we're trying to., +        patterns.put('declares serialVersionUID', /serialVersionUID/), +        patterns.put('references Serializable', /java\.io\.Serializable/), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +org.apache.lucene.index.IndexWriter#isLocked(org.apache.lucene.store.Directory), +@defaultMessage Use org.elasticsearch.common.Randomness#get for reproducible sources of randomness, +java.util.Random#<init>(), +java.util.concurrent.ThreadLocalRandom, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked", +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import java.util.ArrayList;, +                            * maxDoc))) {, +                List<Query> queries = new ArrayList<>(ctx.length);, +                    queries.add(query);, +                return new DisjunctionMaxQuery(queries, tieBreakerMultiplier);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                 * -serial because we don't use java serialization., +                options.compilerArgs << '-Werror' << '-Xlint:all,-path,-serial' << '-Xdoclint:all' << '-Xdoclint:-missing', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        // We don't use Java serialization so we fail if it looks like we're trying to., +        patterns.put('declares serialVersionUID', /serialVersionUID/), +        patterns.put('references Serializable', /java\.io\.Serializable/), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +org.apache.lucene.index.IndexWriter#isLocked(org.apache.lucene.store.Directory), +@defaultMessage Use org.elasticsearch.common.Randomness#get for reproducible sources of randomness, +java.util.Random#<init>(), +java.util.concurrent.ThreadLocalRandom, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-try,-unchecked", +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +import java.util.ArrayList;, +                            * maxDoc))) {, +                List<Query> queries = new ArrayList<>(ctx.length);, +                    queries.add(query);, +                return new DisjunctionMaxQuery(queries, tieBreakerMultiplier);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +            List<Query> queries = new ArrayList<>();, +                    queries.add(applyBoost(mField, q));, +            return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));, +                return new DisjunctionMaxQuery(queries, settings.tieBreaker());, +                List<Query> queries = new ArrayList<>();, +                        queries.add(applyBoost(mField, q));]