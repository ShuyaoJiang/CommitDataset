[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +    private boolean lenient;, +     * Set to true to be lenient with dependencies. By default this check will fail if it finds, +    public void setLenient(boolean value) {, +        lenient = value;, +    public boolean isLenient() {, +        return lenient;, +        // warn that you won't see any forbidden apis warnings, +        if (lenient) {, +            logger.warn("[thirdPartyAudit] WARNING: leniency is enabled, will not fail if classes are missing!"), +                            failOnMissingClasses: !lenient,, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +    private boolean lenient;, +     * Set to true to be lenient with dependencies. By default this check will fail if it finds, +    public void setLenient(boolean value) {, +        lenient = value;, +    public boolean isLenient() {, +        return lenient;, +        // warn that you won't see any forbidden apis warnings, +        if (lenient) {, +            logger.warn("[thirdPartyAudit] WARNING: leniency is enabled, will not fail if classes are missing!"), +                            failOnMissingClasses: !lenient,, +++ b/core/build.gradle, +thirdPartyAudit.lenient = true, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +    private boolean lenient;, +     * Set to true to be lenient with dependencies. By default this check will fail if it finds, +    public void setLenient(boolean value) {, +        lenient = value;, +    public boolean isLenient() {, +        return lenient;, +        // warn that you won't see any forbidden apis warnings, +        if (lenient) {, +            logger.warn("[thirdPartyAudit] WARNING: leniency is enabled, will not fail if classes are missing!"), +                            failOnMissingClasses: !lenient,, +++ b/core/build.gradle, +thirdPartyAudit.lenient = true, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH, request);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +    private boolean lenient;, +     * Set to true to be lenient with dependencies. By default this check will fail if it finds, +    public void setLenient(boolean value) {, +        lenient = value;, +    public boolean isLenient() {, +        return lenient;, +        // warn that you won't see any forbidden apis warnings, +        if (lenient) {, +            logger.warn("[thirdPartyAudit] WARNING: leniency is enabled, will not fail if classes are missing!"), +                            failOnMissingClasses: !lenient,, +++ b/core/build.gradle, +thirdPartyAudit.lenient = true, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH, request);, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +    private boolean lenient;, +     * Set to true to be lenient with dependencies. By default this check will fail if it finds, +    public void setLenient(boolean value) {, +        lenient = value;, +    public boolean isLenient() {, +        return lenient;, +        // warn that you won't see any forbidden apis warnings, +        if (lenient) {, +            logger.warn("[thirdPartyAudit] WARNING: leniency is enabled, will not fail if classes are missing!"), +                            failOnMissingClasses: !lenient,, +++ b/core/build.gradle, +thirdPartyAudit.lenient = true, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/validate/template/TransportRenderSearchTemplateAction.java, +                ExecutableScript executable = scriptService.executable(request.template(), ScriptContext.Standard.SEARCH, request);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +import org.elasticsearch.action.ActionListener;, +    public static interface Listener {, +            return new BulkProcessor(client, listener, name, concurrentRequests, bulkActions, bulkSize, flushInterval);, +    private final Client client;, +    private final Listener listener;, +, +    private final String name;, +, +    private final int concurrentRequests;, +    private final TimeValue flushInterval;, +    private final Semaphore semaphore;, +    BulkProcessor(Client client, Listener listener, @Nullable String name, int concurrentRequests, int bulkActions, ByteSizeValue bulkSize, @Nullable TimeValue flushInterval) {, +        this.client = client;, +        this.listener = listener;, +        this.name = name;, +        this.concurrentRequests = concurrentRequests;, +        this.semaphore = new Semaphore(concurrentRequests);, +        this.flushInterval = flushInterval;, +        if (this.concurrentRequests < 1) {, +            return true;, +        }, +        if (semaphore.tryAcquire(this.concurrentRequests, timeout, unit)) {, +            semaphore.release(this.concurrentRequests);, +            return true;, +        }, +        return false;, +, +        if (concurrentRequests == 0) {]