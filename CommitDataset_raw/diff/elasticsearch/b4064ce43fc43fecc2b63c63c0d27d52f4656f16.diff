[+++ b/core/src/main/java/org/elasticsearch/action/support/AbstractListenableActionFuture.java, +        listener = new ThreadedActionListener<>(logger, threadPool, ThreadPool.Names.LISTENER, listener, false);, +++ b/core/src/main/java/org/elasticsearch/action/support/AbstractListenableActionFuture.java, +        listener = new ThreadedActionListener<>(logger, threadPool, ThreadPool.Names.LISTENER, listener, false);, +++ b/core/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java, +            return new ThreadedActionListener<>(logger, threadPool, ThreadPool.Names.LISTENER, listener, false);, +    private final boolean forceExecution;, +    public ThreadedActionListener(ESLogger logger, ThreadPool threadPool, String executor, ActionListener<Response> listener,, +                                  boolean forceExecution) {, +        this.forceExecution = forceExecution;, +            public boolean isForceExecution() {, +                return forceExecution;, +            }, +, +            @Override, +            public boolean isForceExecution() {, +                return forceExecution;, +            }, +, +            @Override, +++ b/core/src/main/java/org/elasticsearch/action/support/AbstractListenableActionFuture.java, +        listener = new ThreadedActionListener<>(logger, threadPool, ThreadPool.Names.LISTENER, listener, false);, +++ b/core/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java, +            return new ThreadedActionListener<>(logger, threadPool, ThreadPool.Names.LISTENER, listener, false);, +    private final boolean forceExecution;, +    public ThreadedActionListener(ESLogger logger, ThreadPool threadPool, String executor, ActionListener<Response> listener,, +                                  boolean forceExecution) {, +        this.forceExecution = forceExecution;, +            public boolean isForceExecution() {, +                return forceExecution;, +            }, +, +            @Override, +            public boolean isForceExecution() {, +                return forceExecution;, +            }, +, +            @Override, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.common.lease.Releasables;, +    private final String executor;, +        this.executor = executor;, +     * {@link #acquireReplicaOperationLock(ShardId, long, ActionListener)}., +        public void messageReceived(Request request, TransportChannel channel, Task task) {, +            new AsyncPrimaryAction(request, channel, (ReplicationTask) task).run();, +        }, +    }, +, +    class AsyncPrimaryAction extends AbstractRunnable implements ActionListener<PrimaryShardReference> {, +, +        private final Request request;, +        private final TransportChannel channel;, +        private final ReplicationTask replicationTask;, +, +        AsyncPrimaryAction(Request request, TransportChannel channel, ReplicationTask replicationTask) {, +            this.request = request;, +            this.channel = channel;, +            this.replicationTask = replicationTask;, +        }, +, +        @Override, +        protected void doRun() throws Exception {, +            acquirePrimaryShardReference(request.shardId(), this);, +        }, +, +        @Override, +        public void onResponse(PrimaryShardReference primaryShardReference) {, +                    primaryShardReference.close(); // release shard operation lock as soon as possible, +                    final ActionListener<Response> listener = createResponseListener(primaryShardReference);, +            } catch (Throwable t) {, +                Releasables.closeWhileHandlingException(primaryShardReference); // release shard operation lock before responding to caller, +                onFailure(t);, +, +        @Override, +        public void onFailure(Throwable t) {, +            setPhase(replicationTask, "finished");, +            try {, +                channel.sendResponse(t);, +            } catch (IOException e) {, +                e.addSuppressed(t);, +                logger.warn("failed to send response", e);, +            }, +        }, +, +        private ActionListener<Response> createResponseListener(final PrimaryShardReference primaryShardReference) {, +            return new ActionListener<Response>() {, +                @Override, +                public void onResponse(Response response) {, +                    primaryShardReference.close(); // release shard operation lock before responding to caller, +                    setPhase(replicationTask, "finished");, +                    try {, +                        channel.sendResponse(response);, +                    } catch (IOException e) {, +                        onFailure(e);, +                    }, +                }, +, +                @Override, +                public void onFailure(Throwable e) {, +                    primaryShardReference.close(); // release shard operation lock before responding to caller]