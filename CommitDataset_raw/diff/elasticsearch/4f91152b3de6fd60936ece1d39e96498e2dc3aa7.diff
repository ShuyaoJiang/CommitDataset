[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Should the field query {@link #fieldQuery(String)} be used when detecting this, +    boolean useFieldQueryWithQueryString();, +    Query fieldQuery(String value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Should the field query {@link #fieldQuery(String)} be used when detecting this, +    boolean useFieldQueryWithQueryString();, +    Query fieldQuery(String value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +    @Override public Query fieldQuery(String value) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Should the field query {@link #fieldQuery(String)} be used when detecting this, +    boolean useFieldQueryWithQueryString();, +    Query fieldQuery(String value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +    @Override public Query fieldQuery(String value) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public Query queryStringTermQuery(Term term) {, +        return null;, +    }, +, +    @Override public boolean useFieldQueryWithQueryString() {, +    @Override public Query fieldQuery(String value) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Should the field query {@link #fieldQuery(String)} be used when detecting this, +    boolean useFieldQueryWithQueryString();, +    Query fieldQuery(String value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +    @Override public Query fieldQuery(String value) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public Query queryStringTermQuery(Term term) {, +        return null;, +    }, +, +    @Override public boolean useFieldQueryWithQueryString() {, +    @Override public Query fieldQuery(String value) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonNumberFieldMapper.java, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.search.Query;, +    @Override public boolean useFieldQueryWithQueryString() {, +     * Numeric field level query are basically range queries with same value and included. That's the recommended, +     * way to execute it., +     */, +    @Override public Query fieldQuery(String value) {, +        return rangeQuery(value, value, true, true);, +    }, +, +    /**, +     * Numeric field level filter are basically range queries with same value and included. That's the recommended, +     * way to execute it., +     */, +    @Override public Filter fieldFilter(String value) {, +        return rangeFilter(value, value, true, true);, +    }, +, +    @Override public abstract Query rangeQuery(String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper);, +, +    @Override public abstract Filter rangeFilter(String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper);, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Should the field query {@link #fieldQuery(String)} be used when detecting this, +    boolean useFieldQueryWithQueryString();, +    Query fieldQuery(String value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonAllFieldMapper.java, +    @Override public Query fieldQuery(String value) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonFieldMapper.java, +    @Override public Query queryStringTermQuery(Term term) {, +        return null;, +    }, +, +    @Override public boolean useFieldQueryWithQueryString() {, +    @Override public Query fieldQuery(String value) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonNumberFieldMapper.java, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.search.Query;, +    @Override public boolean useFieldQueryWithQueryString() {, +     * Numeric field level query are basically range queries with same value and included. That's the recommended, +     * way to execute it., +     */, +    @Override public Query fieldQuery(String value) {, +        return rangeQuery(value, value, true, true);, +    }, +, +    /**, +     * Numeric field level filter are basically range queries with same value and included. That's the recommended, +     * way to execute it., +     */, +    @Override public Filter fieldFilter(String value) {, +        return rangeFilter(value, value, true, true);, +    }, +, +    @Override public abstract Query rangeQuery(String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper);, +, +    @Override public abstract Filter rangeFilter(String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper);, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/json/TermJsonQueryParser.java, +                query = smartNameFieldMappers.mapper().fieldQuery(value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java]