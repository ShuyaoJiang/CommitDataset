[+++ b/dev-tools/smoke_test_plugins.py, +# Licensed to Elasticsearch under one or more contributor, +# license agreements. See the NOTICE file distributed with, +# this work for additional information regarding copyright, +# ownership. Elasticsearch licenses this file to you under, +# the Apache License, Version 2.0 (the "License"); you may, +# not use this file except in compliance  with the License., +# You may obtain a copy of the License at, +#, +#     http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing,, +# software distributed under the License is distributed on , +# an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,, +# either express or implied. See the License for the specific, +# language governing permissions and limitations under the License., +, +import datetime, +import traceback, +import json, +import os, +import shutil, +import signal, +import socket, +import subprocess, +import tempfile, +import threading, +import time, +, +from http.client import HTTPConnection, +, +LOG = os.environ.get('ES_SMOKE_TEST_PLUGINS_LOG', '/tmp/elasticsearch_smoke_test_plugins.log'), +, +print('Logging to %s' % LOG), +, +if os.path.exists(LOG):, +  raise RuntimeError('please remove old log %s first' % LOG), +, +try:, +  JAVA_HOME = os.environ['JAVA7_HOME'], +except KeyError:, +  try:, +    JAVA_HOME = os.environ['JAVA_HOME'], +  except KeyError:, +    raise RuntimeError(""", +    Please set JAVA_HOME in the env before running release tool, +    On OSX use: export JAVA_HOME=`/usr/libexec/java_home -v '1.7*'`"""), +, +JAVA_ENV = 'export JAVA_HOME="%s" PATH="%s/bin:$PATH" JAVACMD="%s/bin/java"' % (JAVA_HOME, JAVA_HOME, JAVA_HOME), +, +try:, +  # make sure mvn3 is used if mvn3 is available, +  # some systems use maven 2 as default, +  subprocess.check_output('mvn3 --version', shell=True, stderr=subprocess.STDOUT), +  MVN = 'mvn3', +except subprocess.CalledProcessError:, +  MVN = 'mvn', +, +def log(msg):, +  f = open(LOG, mode='ab'), +  f.write(('\n'+msg).encode('utf-8')), +  f.close(), +, +def run(command, quiet=False):, +  log('%s: RUN: %s\n' % (datetime.datetime.now(), command)), +  if os.system('%s >> %s 2>&1' % (command, LOG)):, +    msg = '    FAILED: %s [see log %s]' % (command, LOG), +    if not quiet:, +      print(msg), +    raise RuntimeError(msg), +, +def readServerOutput(p, startupEvent, failureEvent):, +  try:, +    while True:, +      line = p.stdout.readline(), +      if len(line) == 0:, +        p.poll(), +        if not startupEvent.isSet():, +          failureEvent.set(), +          startupEvent.set(), +        print('ES: **process exit**\n'), +        break, +      line = line.decode('utf-8'), +      if line.endswith('started') and not startupEvent.isSet():, +        startupEvent.set(), +      print('ES: %s' % line.rstrip()), +  except:, +    print(), +    print('Exception reading Elasticsearch output:'), +    traceback.print_exc(), +    failureEvent.set(), +    startupEvent.set(), +, +if __name__ == '__main__':, +  print('Build release bits...'), +, +  run('%s; %s clean package -DskipTests' % (JAVA_ENV, MVN)), +, +  for f in os.listdir('core/target/releases/'):, +    if f.endswith('.tar.gz'):]