[+++ b/core/src/main/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilter.java, +import org.elasticsearch.indices.analysis.PreBuiltCacheFactory.CachingStrategy;, +    /**, +     * Create a pre-configured token filter that may not vary at all., +     */, +    public static PreConfiguredTokenFilter singleton(String name, boolean useFilterForMultitermQueries,, +            Function<TokenStream, TokenStream> create) {, +        return new PreConfiguredTokenFilter(name, useFilterForMultitermQueries, CachingStrategy.ONE,, +                (tokenStream, version) -> create.apply(tokenStream));, +    }, +, +    /**, +     * Create a pre-configured token filter that may vary based on the Lucene version., +     */, +    public static PreConfiguredTokenFilter luceneVersion(String name, boolean useFilterForMultitermQueries,, +            BiFunction<TokenStream, org.apache.lucene.util.Version, TokenStream> create) {, +        return new PreConfiguredTokenFilter(name, useFilterForMultitermQueries, CachingStrategy.LUCENE,, +                (tokenStream, version) -> create.apply(tokenStream, version.luceneVersion));, +    }, +, +    /**, +     * Create a pre-configured token filter that may vary based on the Elasticsearch version., +     */, +    public static PreConfiguredTokenFilter elasticsearchVersion(String name, boolean useFilterForMultitermQueries,, +            BiFunction<TokenStream, org.elasticsearch.Version, TokenStream> create) {, +        return new PreConfiguredTokenFilter(name, useFilterForMultitermQueries, CachingStrategy.ELASTICSEARCH,, +                (tokenStream, version) -> create.apply(tokenStream, version));, +    }, +, +    private PreConfiguredTokenFilter(String name, boolean useFilterForMultitermQueries,, +            PreBuiltCacheFactory.CachingStrategy cache, BiFunction<TokenStream, Version, TokenStream> create) {, +        this.cache = PreBuiltCacheFactory.getCache(cache);, +++ b/core/src/main/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilter.java, +import org.elasticsearch.indices.analysis.PreBuiltCacheFactory.CachingStrategy;, +    /**, +     * Create a pre-configured token filter that may not vary at all., +     */, +    public static PreConfiguredTokenFilter singleton(String name, boolean useFilterForMultitermQueries,, +            Function<TokenStream, TokenStream> create) {, +        return new PreConfiguredTokenFilter(name, useFilterForMultitermQueries, CachingStrategy.ONE,, +                (tokenStream, version) -> create.apply(tokenStream));, +    }, +, +    /**, +     * Create a pre-configured token filter that may vary based on the Lucene version., +     */, +    public static PreConfiguredTokenFilter luceneVersion(String name, boolean useFilterForMultitermQueries,, +            BiFunction<TokenStream, org.apache.lucene.util.Version, TokenStream> create) {, +        return new PreConfiguredTokenFilter(name, useFilterForMultitermQueries, CachingStrategy.LUCENE,, +                (tokenStream, version) -> create.apply(tokenStream, version.luceneVersion));, +    }, +, +    /**, +     * Create a pre-configured token filter that may vary based on the Elasticsearch version., +     */, +    public static PreConfiguredTokenFilter elasticsearchVersion(String name, boolean useFilterForMultitermQueries,, +            BiFunction<TokenStream, org.elasticsearch.Version, TokenStream> create) {, +        return new PreConfiguredTokenFilter(name, useFilterForMultitermQueries, CachingStrategy.ELASTICSEARCH,, +                (tokenStream, version) -> create.apply(tokenStream, version));, +    }, +, +    private PreConfiguredTokenFilter(String name, boolean useFilterForMultitermQueries,, +            PreBuiltCacheFactory.CachingStrategy cache, BiFunction<TokenStream, Version, TokenStream> create) {, +        this.cache = PreBuiltCacheFactory.getCache(cache);, +++ b/core/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +        preConfiguredTokenFilters.register("lowercase", PreConfiguredTokenFilter.singleton("lowercase", true, LowerCaseFilter::new));, +        preConfiguredTokenFilters.register("standard", PreConfiguredTokenFilter.singleton("standard", false, StandardFilter::new));, +                if (CachingStrategy.ONE != preBuilt.getCachingStrategy()) {, +                    throw new UnsupportedOperationException("shim not available for " + preBuilt.getCachingStrategy());, +                }, +                preConfiguredTokenFilters.register(name, PreConfiguredTokenFilter.singleton(name, preBuilt.isMultiTermAware(),, +                        tokenStream -> preBuilt.create(tokenStream, Version.CURRENT)));, +++ b/core/src/main/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilter.java, +import org.elasticsearch.indices.analysis.PreBuiltCacheFactory.CachingStrategy;, +    /**, +     * Create a pre-configured token filter that may not vary at all., +     */, +    public static PreConfiguredTokenFilter singleton(String name, boolean useFilterForMultitermQueries,, +            Function<TokenStream, TokenStream> create) {, +        return new PreConfiguredTokenFilter(name, useFilterForMultitermQueries, CachingStrategy.ONE,, +                (tokenStream, version) -> create.apply(tokenStream));, +    }, +, +    /**, +     * Create a pre-configured token filter that may vary based on the Lucene version., +     */, +    public static PreConfiguredTokenFilter luceneVersion(String name, boolean useFilterForMultitermQueries,, +            BiFunction<TokenStream, org.apache.lucene.util.Version, TokenStream> create) {, +        return new PreConfiguredTokenFilter(name, useFilterForMultitermQueries, CachingStrategy.LUCENE,, +                (tokenStream, version) -> create.apply(tokenStream, version.luceneVersion));, +    }, +, +    /**, +     * Create a pre-configured token filter that may vary based on the Elasticsearch version., +     */, +    public static PreConfiguredTokenFilter elasticsearchVersion(String name, boolean useFilterForMultitermQueries,, +            BiFunction<TokenStream, org.elasticsearch.Version, TokenStream> create) {, +        return new PreConfiguredTokenFilter(name, useFilterForMultitermQueries, CachingStrategy.ELASTICSEARCH,, +                (tokenStream, version) -> create.apply(tokenStream, version));, +    }]