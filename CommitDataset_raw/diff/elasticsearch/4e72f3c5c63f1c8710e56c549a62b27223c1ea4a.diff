[+++ b/server/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java, +import org.elasticsearch.common.settings.Setting;, +import java.util.Collections;, +import java.util.function.Consumer;, +        return Arrays.asList(MockRepository.Plugin.class, TestCustomMetaDataPlugin.class, BrokenSettingPlugin.class);, +    public static class BrokenSettingPlugin extends Plugin {, +        private static boolean breakSetting = false;, +        private static final IllegalArgumentException EXCEPTION =  new IllegalArgumentException("this setting goes boom");, +        static void breakSetting(boolean breakSetting) {, +            BrokenSettingPlugin.breakSetting = breakSetting;, +        }, +, +        static final Setting<String> BROKEN_SETTING = new Setting<>("setting.broken", "default", s->s,, +                s-> {, +                    if ((s.equals("default") == false && breakSetting)) {, +                        throw EXCEPTION;, +                    }, +                },, +                Setting.Property.NodeScope, Setting.Property.Dynamic);, +, +        @Override, +        public List<Setting<?>> getSettings() {, +            return Collections.singletonList(BROKEN_SETTING);, +        }, +    }, +, +    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/37485"), +    public void testExceptionWhenRestoringPersistentSettings() {, +        logger.info("--> start 2 nodes");, +        internalCluster().startNodes(2);, +, +        Client client = client();, +        Consumer<String> setSettingValue = value -> {, +                            .put(BrokenSettingPlugin.BROKEN_SETTING.getKey(), value)), +        };, +        Consumer<String> assertSettingValue = value -> {, +                            .getMetaData().persistentSettings().get(BrokenSettingPlugin.BROKEN_SETTING.getKey()),, +                    equalTo(value));, +        };, +, +        logger.info("--> set test persistent setting");, +        setSettingValue.accept("new value");, +        assertSettingValue.accept("new value");, +        logger.info("--> change the test persistent setting and break it");, +        setSettingValue.accept("new value 2");, +        assertSettingValue.accept("new value 2");, +        BrokenSettingPlugin.breakSetting(true);, +, +            assertEquals(BrokenSettingPlugin.EXCEPTION.getMessage(), ex.getMessage());, +, +        assertSettingValue.accept("new value 2");]