[+++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +    public IndexFieldMapper IndexFieldMapper() {, +        return rootMapper(IndexFieldMapper.class);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +    public IndexFieldMapper IndexFieldMapper() {, +        return rootMapper(IndexFieldMapper.class);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.DISABLED;, +        private EnabledAttributeMapper enabledState = EnabledAttributeMapper.UNSET_DISABLED;, +        public Builder enabled(EnabledAttributeMapper enabledState) {, +            this.enabledState = enabledState;, +            return new IndexFieldMapper(name, indexName, boost, fieldType, enabledState, provider, fieldDataSettings);, +                    EnabledAttributeMapper mapper = nodeBooleanValue(fieldNode) ? EnabledAttributeMapper.ENABLED : EnabledAttributeMapper.DISABLED;, +                    builder.enabled(mapper);, +    private EnabledAttributeMapper enabledState;, +        this(name, indexName, Defaults.BOOST, new FieldType(Defaults.FIELD_TYPE), Defaults.ENABLED_STATE, null, null);, +    public IndexFieldMapper(String name, String indexName, float boost, FieldType fieldType, EnabledAttributeMapper enabledState,, +        this.enabledState = enabledState;, +        return this.enabledState.enabled;, +        if (!enabledState.enabled) {, +        if (fieldType().stored() == Defaults.FIELD_TYPE.stored() && enabledState == Defaults.ENABLED_STATE) {, +        if (enabledState != Defaults.ENABLED_STATE) {, +            builder.field("enabled", enabledState.enabled);, +        IndexFieldMapper indexFieldMapperMergeWith = (IndexFieldMapper) mergeWith;, +        if (!mergeContext.mergeFlags().simulate()) {, +            if (indexFieldMapperMergeWith.enabledState != enabledState && !indexFieldMapperMergeWith.enabledState.unset()) {, +                this.enabledState = indexFieldMapperMergeWith.enabledState;, +            }, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +    public IndexFieldMapper IndexFieldMapper() {, +        return rootMapper(IndexFieldMapper.class);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IndexFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.DISABLED;, +        private EnabledAttributeMapper enabledState = EnabledAttributeMapper.UNSET_DISABLED;, +        public Builder enabled(EnabledAttributeMapper enabledState) {, +            this.enabledState = enabledState;, +            return new IndexFieldMapper(name, indexName, boost, fieldType, enabledState, provider, fieldDataSettings);, +                    EnabledAttributeMapper mapper = nodeBooleanValue(fieldNode) ? EnabledAttributeMapper.ENABLED : EnabledAttributeMapper.DISABLED;, +                    builder.enabled(mapper);, +    private EnabledAttributeMapper enabledState;, +        this(name, indexName, Defaults.BOOST, new FieldType(Defaults.FIELD_TYPE), Defaults.ENABLED_STATE, null, null);, +    public IndexFieldMapper(String name, String indexName, float boost, FieldType fieldType, EnabledAttributeMapper enabledState,, +        this.enabledState = enabledState;, +        return this.enabledState.enabled;, +        if (!enabledState.enabled) {, +        if (fieldType().stored() == Defaults.FIELD_TYPE.stored() && enabledState == Defaults.ENABLED_STATE) {, +        if (enabledState != Defaults.ENABLED_STATE) {, +            builder.field("enabled", enabledState.enabled);, +        IndexFieldMapper indexFieldMapperMergeWith = (IndexFieldMapper) mergeWith;, +        if (!mergeContext.mergeFlags().simulate()) {, +            if (indexFieldMapperMergeWith.enabledState != enabledState && !indexFieldMapperMergeWith.enabledState.unset()) {, +                this.enabledState = indexFieldMapperMergeWith.enabledState;, +            }, +        }, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/index/IndexTypeMapperTests.java, +, +    @Test, +    public void testThatMergingFieldMappingAllowsDisabling() throws Exception {, +        String mappingWithIndexEnabled = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_index").field("enabled", true).field("store", "yes").endObject(), +                .endObject().endObject().string();, +        DocumentMapper mapperEnabled = MapperTests.newParser().parse(mappingWithIndexEnabled);, +, +, +        String mappingWithIndexDisabled = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_index").field("enabled", false).field("store", "yes").endObject(), +                .endObject().endObject().string();, +        DocumentMapper mapperDisabled = MapperTests.newParser().parse(mappingWithIndexDisabled);, +, +        mapperEnabled.merge(mapperDisabled, DocumentMapper.MergeFlags.mergeFlags().simulate(false));, +        assertThat(mapperEnabled.IndexFieldMapper().enabled(), is(false));, +    }]