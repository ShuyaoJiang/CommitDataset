[+++ b/docs/en/rest-api/ml/get-job.asciidoc, +        "model_memory_limit": "1024mb",, +        "categorization_examples_limit": 4, +++ b/docs/en/rest-api/ml/get-job.asciidoc, +        "model_memory_limit": "1024mb",, +        "categorization_examples_limit": 4, +++ b/docs/en/rest-api/ml/put-job.asciidoc, +    "model_memory_limit": "1024mb",, +    "categorization_examples_limit": 4, +++ b/docs/en/rest-api/ml/get-job.asciidoc, +        "model_memory_limit": "1024mb",, +        "categorization_examples_limit": 4, +++ b/docs/en/rest-api/ml/put-job.asciidoc, +    "model_memory_limit": "1024mb",, +    "categorization_examples_limit": 4, +++ b/docs/en/rest-api/ml/update-job.asciidoc, +    "model_memory_limit": "1024mb",, +    "categorization_examples_limit": 4, +++ b/docs/en/rest-api/ml/get-job.asciidoc, +        "model_memory_limit": "1024mb",, +        "categorization_examples_limit": 4, +++ b/docs/en/rest-api/ml/put-job.asciidoc, +    "model_memory_limit": "1024mb",, +    "categorization_examples_limit": 4, +++ b/docs/en/rest-api/ml/update-job.asciidoc, +    "model_memory_limit": "1024mb",, +    "categorization_examples_limit": 4, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/AnalysisLimits.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, + * Analysis limits for autodetect. In particular,, + * this is a collection of parameters that allow limiting, + * the resources used by the job., +     * is now 1GB and defined here in the Java code.  Prior to 6.3, a value of <code>null</code> means that, +     * the old default value should be used. From 6.3 onwards, the value will always be explicit., +    static final long PRE_6_1_DEFAULT_MODEL_MEMORY_LIMIT_MB = 4096L;, +, +    static final long DEFAULT_CATEGORIZATION_EXAMPLES_LIMIT = 4;, +            "analysis_limits", true, a -> new AnalysisLimits(, +                    a[0] == null ? PRE_6_1_DEFAULT_MODEL_MEMORY_LIMIT_MB : (Long) a[0],, +                    a[1] == null ? DEFAULT_CATEGORIZATION_EXAMPLES_LIMIT : (Long) a[1]));, +     * Creates a new {@code AnalysisLimits} object after validating it against external limitations, +     * and filling missing values with their defaults. Validations:, +     *, +     * <ul>, +     *   <li>check model memory limit doesn't exceed the MAX_MODEL_MEM setting</li>, +     * </ul>, +     *, +     * @param source an optional {@code AnalysisLimits} whose explicit values will be copied, +     * @param maxModelMemoryLimit the max allowed model memory limit, +     * @param defaultModelMemoryLimit the default model memory limit to be used if an explicit value is missing, +     * @return a new {@code AnalysisLimits} that is validated and has no missing values, +     */, +    public static AnalysisLimits validateAndSetDefaults(@Nullable AnalysisLimits source, @Nullable ByteSizeValue maxModelMemoryLimit,, +                                                        long defaultModelMemoryLimit) {, +, +        boolean maxModelMemoryIsSet = maxModelMemoryLimit != null && maxModelMemoryLimit.getMb() > 0;, +, +        long modelMemoryLimit = defaultModelMemoryLimit;, +        if (maxModelMemoryIsSet) {, +            modelMemoryLimit = Math.min(maxModelMemoryLimit.getMb(), modelMemoryLimit);, +        }, +, +        long categorizationExamplesLimit = DEFAULT_CATEGORIZATION_EXAMPLES_LIMIT;, +, +        if (source != null) {, +            if (source.getModelMemoryLimit() != null) {, +                modelMemoryLimit = source.getModelMemoryLimit();, +            }, +            if (source.getCategorizationExamplesLimit() != null) {, +                categorizationExamplesLimit = source.getCategorizationExamplesLimit();, +            }, +        }, +, +        if (maxModelMemoryIsSet && modelMemoryLimit > maxModelMemoryLimit.getMb()) {, +            throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.JOB_CONFIG_MODEL_MEMORY_LIMIT_GREATER_THAN_MAX,, +                    new ByteSizeValue(modelMemoryLimit, ByteSizeUnit.MB),, +                    maxModelMemoryLimit));, +        }, +, +        return new AnalysisLimits(modelMemoryLimit, categorizationExamplesLimit);, +    }, +, +    /**, +     * memory., +++ b/docs/en/rest-api/ml/get-job.asciidoc, +        "model_memory_limit": "1024mb",, +        "categorization_examples_limit": 4, +++ b/docs/en/rest-api/ml/put-job.asciidoc, +    "model_memory_limit": "1024mb",, +    "categorization_examples_limit": 4, +++ b/docs/en/rest-api/ml/update-job.asciidoc, +    "model_memory_limit": "1024mb",, +    "categorization_examples_limit": 4, +++ b/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/AnalysisLimits.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, + * Analysis limits for autodetect. In particular,, + * this is a collection of parameters that allow limiting, + * the resources used by the job., +     * is now 1GB and defined here in the Java code.  Prior to 6.3, a value of <code>null</code> means that, +     * the old default value should be used. From 6.3 onwards, the value will always be explicit.]