[+++ b/core/src/main/java/org/elasticsearch/index/seqno/GlobalCheckpointTracker.java, +     * - replica: this shard receives global checkpoint information from the primary (see, +     *   {@link #updateGlobalCheckpointOnReplica(long, String)})., +     * @param reason           the reason the global checkpoint was updated, +    public synchronized void updateGlobalCheckpointOnReplica(final long globalCheckpoint, final String reason) {, +            logger.trace("updating global checkpoint from [{}] to [{}] due to [{}]", this.globalCheckpoint, globalCheckpoint, reason);, +++ b/core/src/main/java/org/elasticsearch/index/seqno/GlobalCheckpointTracker.java, +     * - replica: this shard receives global checkpoint information from the primary (see, +     *   {@link #updateGlobalCheckpointOnReplica(long, String)})., +     * @param reason           the reason the global checkpoint was updated, +    public synchronized void updateGlobalCheckpointOnReplica(final long globalCheckpoint, final String reason) {, +            logger.trace("updating global checkpoint from [{}] to [{}] due to [{}]", this.globalCheckpoint, globalCheckpoint, reason);, +++ b/core/src/main/java/org/elasticsearch/index/seqno/SequenceNumbersService.java, +     * @param reason           the reason the global checkpoint was updated, +    public void updateGlobalCheckpointOnReplica(final long globalCheckpoint, final String reason) {, +        globalCheckpointTracker.updateGlobalCheckpointOnReplica(globalCheckpoint, reason);, +++ b/core/src/main/java/org/elasticsearch/index/seqno/GlobalCheckpointTracker.java, +     * - replica: this shard receives global checkpoint information from the primary (see, +     *   {@link #updateGlobalCheckpointOnReplica(long, String)})., +     * @param reason           the reason the global checkpoint was updated, +    public synchronized void updateGlobalCheckpointOnReplica(final long globalCheckpoint, final String reason) {, +            logger.trace("updating global checkpoint from [{}] to [{}] due to [{}]", this.globalCheckpoint, globalCheckpoint, reason);, +++ b/core/src/main/java/org/elasticsearch/index/seqno/SequenceNumbersService.java, +     * @param reason           the reason the global checkpoint was updated, +    public void updateGlobalCheckpointOnReplica(final long globalCheckpoint, final String reason) {, +        globalCheckpointTracker.updateGlobalCheckpointOnReplica(globalCheckpoint, reason);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +     * @param reason           the reason the global checkpoint was updated, +    public void updateGlobalCheckpointOnReplica(final long globalCheckpoint, final String reason) {, +        seqNoService.updateGlobalCheckpointOnReplica(globalCheckpoint, reason);, +                            updateGlobalCheckpointOnReplica(globalCheckpoint, "primary term transition");, +                                    updateGlobalCheckpointOnReplica(globalCheckpoint, "operation");, +++ b/core/src/main/java/org/elasticsearch/index/seqno/GlobalCheckpointTracker.java, +     * - replica: this shard receives global checkpoint information from the primary (see, +     *   {@link #updateGlobalCheckpointOnReplica(long, String)})., +     * @param reason           the reason the global checkpoint was updated, +    public synchronized void updateGlobalCheckpointOnReplica(final long globalCheckpoint, final String reason) {, +            logger.trace("updating global checkpoint from [{}] to [{}] due to [{}]", this.globalCheckpoint, globalCheckpoint, reason);, +++ b/core/src/main/java/org/elasticsearch/index/seqno/SequenceNumbersService.java, +     * @param reason           the reason the global checkpoint was updated, +    public void updateGlobalCheckpointOnReplica(final long globalCheckpoint, final String reason) {, +        globalCheckpointTracker.updateGlobalCheckpointOnReplica(globalCheckpoint, reason);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +     * @param reason           the reason the global checkpoint was updated, +    public void updateGlobalCheckpointOnReplica(final long globalCheckpoint, final String reason) {, +        seqNoService.updateGlobalCheckpointOnReplica(globalCheckpoint, reason);, +                            updateGlobalCheckpointOnReplica(globalCheckpoint, "primary term transition");, +                                    updateGlobalCheckpointOnReplica(globalCheckpoint, "operation");, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +        indexShard().updateGlobalCheckpointOnReplica(globalCheckpoint, "finalizing recovery");, +++ b/core/src/main/java/org/elasticsearch/index/seqno/GlobalCheckpointTracker.java, +     * - replica: this shard receives global checkpoint information from the primary (see, +     *   {@link #updateGlobalCheckpointOnReplica(long, String)})., +     * @param reason           the reason the global checkpoint was updated, +    public synchronized void updateGlobalCheckpointOnReplica(final long globalCheckpoint, final String reason) {, +            logger.trace("updating global checkpoint from [{}] to [{}] due to [{}]", this.globalCheckpoint, globalCheckpoint, reason);, +++ b/core/src/main/java/org/elasticsearch/index/seqno/SequenceNumbersService.java, +     * @param reason           the reason the global checkpoint was updated, +    public void updateGlobalCheckpointOnReplica(final long globalCheckpoint, final String reason) {, +        globalCheckpointTracker.updateGlobalCheckpointOnReplica(globalCheckpoint, reason);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +     * @param reason           the reason the global checkpoint was updated, +    public void updateGlobalCheckpointOnReplica(final long globalCheckpoint, final String reason) {, +        seqNoService.updateGlobalCheckpointOnReplica(globalCheckpoint, reason);, +                            updateGlobalCheckpointOnReplica(globalCheckpoint, "primary term transition");, +                                    updateGlobalCheckpointOnReplica(globalCheckpoint, "operation");, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +        indexShard().updateGlobalCheckpointOnReplica(globalCheckpoint, "finalizing recovery");, +++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +        indexShard.updateGlobalCheckpointOnReplica(globalCheckpointOnReplica, "test");, +        indexShard.updateGlobalCheckpointOnReplica(globalCheckpointOnReplica, "test");]