[+++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/ShardChangesIT.java, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        client().execute(ResumeFollowAction.INSTANCE, followRequest.getFollowRequest()).get();, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        PutFollowAction.Request followRequest = follow("index1", "index2");, +        followRequest.getFollowRequest().setMaxBatchOperationCount(maxReadSize);, +        followRequest.getFollowRequest().setMaxConcurrentReadBatches(randomIntBetween(2, 10));, +        followRequest.getFollowRequest().setMaxConcurrentWriteBatches(randomIntBetween(2, 10));, +        followRequest.getFollowRequest().setMaxWriteBufferSize(randomIntBetween(1024, 10240));, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        PutFollowAction.Request followRequest = follow("index1", "index2");, +        followRequest.getFollowRequest().setMaxBatchOperationCount(randomIntBetween(32, 2048));, +        followRequest.getFollowRequest().setMaxConcurrentReadBatches(randomIntBetween(2, 10));, +        followRequest.getFollowRequest().setMaxConcurrentWriteBatches(randomIntBetween(2, 10));, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        long maxNumDocsReplicated = Math.min(1000, randomLongBetween(followRequest.getFollowRequest().getMaxBatchOperationCount(),, +            followRequest.getFollowRequest().getMaxBatchOperationCount() * 10));, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        ResumeFollowAction.Request followRequest1 = resumeFollow("non-existent-leader", "test-follower");, +        ResumeFollowAction.Request followRequest2 = resumeFollow("non-test-leader", "non-existent-follower");, +        ResumeFollowAction.Request followRequest3 = resumeFollow("non-existent-leader", "non-existent-follower");, +        PutFollowAction.Request followRequest = follow("index1", "index2");, +        followRequest.getFollowRequest().setMaxOperationSizeInBytes(1L);, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        followRequest = follow("index3", "index4");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        ResumeFollowAction.Request wrongRequest1 = resumeFollow("index1", "index4");, +        ResumeFollowAction.Request wrongRequest2 = resumeFollow("index3", "index2");, +        PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +    public static PutFollowAction.Request follow(String leaderIndex, String followerIndex) {, +        return new PutFollowAction.Request(resumeFollow(leaderIndex, followerIndex));, +    }, +, +    public static ResumeFollowAction.Request resumeFollow(String leaderIndex, String followerIndex) {, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/ShardChangesIT.java, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        client().execute(ResumeFollowAction.INSTANCE, followRequest.getFollowRequest()).get();, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        PutFollowAction.Request followRequest = follow("index1", "index2");, +        followRequest.getFollowRequest().setMaxBatchOperationCount(maxReadSize);, +        followRequest.getFollowRequest().setMaxConcurrentReadBatches(randomIntBetween(2, 10));, +        followRequest.getFollowRequest().setMaxConcurrentWriteBatches(randomIntBetween(2, 10));, +        followRequest.getFollowRequest().setMaxWriteBufferSize(randomIntBetween(1024, 10240));, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        PutFollowAction.Request followRequest = follow("index1", "index2");, +        followRequest.getFollowRequest().setMaxBatchOperationCount(randomIntBetween(32, 2048));, +        followRequest.getFollowRequest().setMaxConcurrentReadBatches(randomIntBetween(2, 10));, +        followRequest.getFollowRequest().setMaxConcurrentWriteBatches(randomIntBetween(2, 10));, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        long maxNumDocsReplicated = Math.min(1000, randomLongBetween(followRequest.getFollowRequest().getMaxBatchOperationCount(),, +            followRequest.getFollowRequest().getMaxBatchOperationCount() * 10));, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        ResumeFollowAction.Request followRequest1 = resumeFollow("non-existent-leader", "test-follower");, +        ResumeFollowAction.Request followRequest2 = resumeFollow("non-test-leader", "non-existent-follower");, +        ResumeFollowAction.Request followRequest3 = resumeFollow("non-existent-leader", "non-existent-follower");, +        PutFollowAction.Request followRequest = follow("index1", "index2");, +        followRequest.getFollowRequest().setMaxOperationSizeInBytes(1L);, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        followRequest = follow("index3", "index4");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        ResumeFollowAction.Request wrongRequest1 = resumeFollow("index1", "index4");, +        ResumeFollowAction.Request wrongRequest2 = resumeFollow("index3", "index2");, +        PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +        final PutFollowAction.Request followRequest = follow("index1", "index2");, +        client().execute(PutFollowAction.INSTANCE, followRequest).get();, +    public static PutFollowAction.Request follow(String leaderIndex, String followerIndex) {, +        return new PutFollowAction.Request(resumeFollow(leaderIndex, followerIndex));, +    }, +, +    public static ResumeFollowAction.Request resumeFollow(String leaderIndex, String followerIndex) {]