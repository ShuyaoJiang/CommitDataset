[+++ b/src/main/java/org/elasticsearch/action/deletebyquery/TransportShardDeleteByQueryAction.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.Filter;, +import org.elasticsearch.cache.recycler.CacheRecycler;, +import org.elasticsearch.index.query.ParsedQuery;, +import org.elasticsearch.index.service.IndexService;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.search.internal.DefaultSearchContext;, +import org.elasticsearch.search.internal.SearchContext;, +import org.elasticsearch.search.internal.ShardSearchRequest;, +    private final ScriptService scriptService;, +    private final CacheRecycler cacheRecycler;, +, +                                             ShardStateAction shardStateAction, ScriptService scriptService, CacheRecycler cacheRecycler) {, +        this.scriptService = scriptService;, +        this.cacheRecycler = cacheRecycler;, +        IndexService indexService = indicesService.indexServiceSafe(shardRequest.request.index());, +        IndexShard indexShard = indexService.shardSafe(shardRequest.shardId);, +, +        SearchContext.setCurrent(new DefaultSearchContext(0, new ShardSearchRequest().types(request.types()), null,, +                indexShard.acquireSearcher("delete_by_query"), indexService, indexShard, scriptService, cacheRecycler));, +        try {, +            SearchContext.current().parsedQuery(new ParsedQuery(deleteByQuery.query(), ImmutableMap.<String, Filter>of()));, +        } finally {, +            SearchContext searchContext = SearchContext.current();, +            searchContext.clearAndRelease();, +            SearchContext.removeCurrent();, +        }, +        IndexService indexService = indicesService.indexServiceSafe(shardRequest.request.index());, +        IndexShard indexShard = indexService.shardSafe(shardRequest.shardId);, +, +        SearchContext.setCurrent(new DefaultSearchContext(0, new ShardSearchRequest().types(request.types()), null,, +                indexShard.acquireSearcher("delete_by_query"), indexService, indexShard, scriptService, cacheRecycler));, +        try {, +            SearchContext.current().parsedQuery(new ParsedQuery(deleteByQuery.query(), ImmutableMap.<String, Filter>of()));, +        } finally {, +            SearchContext searchContext = SearchContext.current();, +            searchContext.clearAndRelease();, +            SearchContext.removeCurrent();, +        }, +++ b/src/main/java/org/elasticsearch/action/deletebyquery/TransportShardDeleteByQueryAction.java, +import com.google.common.collect.ImmutableMap;, +import org.apache.lucene.search.Filter;, +import org.elasticsearch.cache.recycler.CacheRecycler;, +import org.elasticsearch.index.query.ParsedQuery;, +import org.elasticsearch.index.service.IndexService;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.search.internal.DefaultSearchContext;, +import org.elasticsearch.search.internal.SearchContext;, +import org.elasticsearch.search.internal.ShardSearchRequest;, +    private final ScriptService scriptService;, +    private final CacheRecycler cacheRecycler;, +, +                                             ShardStateAction shardStateAction, ScriptService scriptService, CacheRecycler cacheRecycler) {, +        this.scriptService = scriptService;, +        this.cacheRecycler = cacheRecycler;, +        IndexService indexService = indicesService.indexServiceSafe(shardRequest.request.index());, +        IndexShard indexShard = indexService.shardSafe(shardRequest.shardId);, +, +        SearchContext.setCurrent(new DefaultSearchContext(0, new ShardSearchRequest().types(request.types()), null,, +                indexShard.acquireSearcher("delete_by_query"), indexService, indexShard, scriptService, cacheRecycler));, +        try {, +            SearchContext.current().parsedQuery(new ParsedQuery(deleteByQuery.query(), ImmutableMap.<String, Filter>of()));, +        } finally {, +            SearchContext searchContext = SearchContext.current();, +            searchContext.clearAndRelease();, +            SearchContext.removeCurrent();, +        }, +        IndexService indexService = indicesService.indexServiceSafe(shardRequest.request.index());, +        IndexShard indexShard = indexService.shardSafe(shardRequest.shardId);, +, +        SearchContext.setCurrent(new DefaultSearchContext(0, new ShardSearchRequest().types(request.types()), null,, +                indexShard.acquireSearcher("delete_by_query"), indexService, indexShard, scriptService, cacheRecycler));, +        try {, +            SearchContext.current().parsedQuery(new ParsedQuery(deleteByQuery.query(), ImmutableMap.<String, Filter>of()));, +        } finally {, +            SearchContext searchContext = SearchContext.current();, +            searchContext.clearAndRelease();, +            SearchContext.removeCurrent();, +        }, +++ b/src/main/java/org/elasticsearch/common/lucene/docset/MatchDocIdSet.java, +            if (iterator instanceof NoAcceptDocsIterator) {, +                ((NoAcceptDocsIterator) iterator).shortCircuit();, +            } else if (iterator instanceof BothIterator) {, +                ((BothIterator) iterator).shortCircuit();, +            } else {, +            }, +, +        // This is invoked from matchDoc, so we can do maxDoc - 1, when nextDoc / advance is invoked, then doc == maxDoc, so we abort, +        public void shortCircuit() {, +            doc = maxDoc - 1;, +        }, +, +, +        // This is invoked from matchDoc, so we can do maxDoc - 1, when nextDoc / advance is invoked, then doc == maxDoc, so we abort, +        public void shortCircuit() {, +            doc = maxDoc - 1;, +        }, +++ b/src/main/java/org/elasticsearch/action/deletebyquery/TransportShardDeleteByQueryAction.java, +import com.google.common.collect.ImmutableMap;]