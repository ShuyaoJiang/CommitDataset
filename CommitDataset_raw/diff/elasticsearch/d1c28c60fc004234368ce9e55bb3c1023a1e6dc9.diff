[+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequest.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +            builder.field(entry.getKey());, +            XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY,, +                DeprecationHandler.THROW_UNSUPPORTED_OPERATION, entry.getValue());, +            builder.copyCurrentStructure(parser);, +, +        for (Map.Entry<String, IndexMetaData.Custom> entry : customs.entrySet()) {, +            builder.field(entry.getKey(), entry.getValue(), params);, +        }, +, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequest.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +            builder.field(entry.getKey());, +            XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY,, +                DeprecationHandler.THROW_UNSUPPORTED_OPERATION, entry.getValue());, +            builder.copyCurrentStructure(parser);, +, +        for (Map.Entry<String, IndexMetaData.Custom> entry : customs.entrySet()) {, +            builder.field(entry.getKey(), entry.getValue(), params);, +        }, +, +++ b/server/src/test/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequestTests.java, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.test.AbstractXContentTestCase;, +import java.io.UncheckedIOException;, +public class PutIndexTemplateRequestTests extends AbstractXContentTestCase<PutIndexTemplateRequest> {, +    @Override, +    protected PutIndexTemplateRequest createTestInstance() {, +            try {, +            } catch (IOException ex) {, +                throw new UncheckedIOException(ex);, +            }, +    @Override, +    protected PutIndexTemplateRequest doParseInstance(XContentParser parser) throws IOException {, +        return new PutIndexTemplateRequest().source(parser.map());, +, +    @Override, +    protected void assertEqualInstances(PutIndexTemplateRequest expected, PutIndexTemplateRequest actual) {, +        assertNotSame(expected, actual);, +        assertThat(actual.version(), equalTo(expected.version()));, +        assertThat(actual.order(), equalTo(expected.order()));, +        assertThat(actual.patterns(), equalTo(expected.patterns()));, +        assertThat(actual.aliases(), equalTo(expected.aliases()));, +        assertThat(actual.mappings(), equalTo(expected.mappings()));, +        assertThat(actual.settings(), equalTo(expected.settings()));, +    }, +, +    @Override, +    protected boolean supportsUnknownFields() {, +        return false;, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequest.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +            builder.field(entry.getKey());, +            XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY,, +                DeprecationHandler.THROW_UNSUPPORTED_OPERATION, entry.getValue());, +            builder.copyCurrentStructure(parser);, +, +        for (Map.Entry<String, IndexMetaData.Custom> entry : customs.entrySet()) {, +            builder.field(entry.getKey(), entry.getValue(), params);, +        }, +, +++ b/server/src/test/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateRequestTests.java, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.test.AbstractXContentTestCase;, +import java.io.UncheckedIOException;, +public class PutIndexTemplateRequestTests extends AbstractXContentTestCase<PutIndexTemplateRequest> {, +    @Override, +    protected PutIndexTemplateRequest createTestInstance() {, +            try {, +            } catch (IOException ex) {, +                throw new UncheckedIOException(ex);, +            }, +    @Override, +    protected PutIndexTemplateRequest doParseInstance(XContentParser parser) throws IOException {, +        return new PutIndexTemplateRequest().source(parser.map());, +, +    @Override, +    protected void assertEqualInstances(PutIndexTemplateRequest expected, PutIndexTemplateRequest actual) {, +        assertNotSame(expected, actual);, +        assertThat(actual.version(), equalTo(expected.version()));, +        assertThat(actual.order(), equalTo(expected.order()));, +        assertThat(actual.patterns(), equalTo(expected.patterns()));, +        assertThat(actual.aliases(), equalTo(expected.aliases()));, +        assertThat(actual.mappings(), equalTo(expected.mappings()));, +        assertThat(actual.settings(), equalTo(expected.settings()));, +    }, +, +    @Override, +    protected boolean supportsUnknownFields() {, +        return false;, +++ b/server/src/test/java/org/elasticsearch/action/admin/indices/template/put/PutIndexTemplateResponseTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under]