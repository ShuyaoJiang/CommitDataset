[+++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +import org.elasticsearch.index.query.GeoShapeFilterParser;, +        if (includeDefaults || enabledState != Defaults.ENABLED_STATE) {, +        if (((TTLFieldMapper) mergeWith).enabledState != Defaults.ENABLED_STATE) {//only do something if actually something was set for the document mapper that we merge with, +            if (this.enabledState == EnabledAttributeMapper.ENABLED && ((TTLFieldMapper) mergeWith).enabledState == EnabledAttributeMapper.DISABLED) {, +                mergeContext.addConflict("_ttl cannot be disabled once it was enabled.");, +            } else {, +        if (ttlMergeWith.defaultTTL != -1) {, +            // we never build the default when the field is disabled so we should also not set it, +            // (it does not make a difference though as everything that is not build in toXContent will also not be set in the cluster), +            if (!mergeContext.mergeFlags().simulate() && (enabledState == EnabledAttributeMapper.ENABLED)) {, +                this.defaultTTL = ttlMergeWith.defaultTTL;, +            }, +        }, +    }, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +import org.elasticsearch.index.query.GeoShapeFilterParser;, +        if (includeDefaults || enabledState != Defaults.ENABLED_STATE) {, +        if (((TTLFieldMapper) mergeWith).enabledState != Defaults.ENABLED_STATE) {//only do something if actually something was set for the document mapper that we merge with, +            if (this.enabledState == EnabledAttributeMapper.ENABLED && ((TTLFieldMapper) mergeWith).enabledState == EnabledAttributeMapper.DISABLED) {, +                mergeContext.addConflict("_ttl cannot be disabled once it was enabled.");, +            } else {, +        if (ttlMergeWith.defaultTTL != -1) {, +            // we never build the default when the field is disabled so we should also not set it, +            // (it does not make a difference though as everything that is not build in toXContent will also not be set in the cluster), +            if (!mergeContext.mergeFlags().simulate() && (enabledState == EnabledAttributeMapper.ENABLED)) {, +                this.defaultTTL = ttlMergeWith.defaultTTL;, +            }, +        }, +    }, +++ b/src/test/java/org/elasticsearch/index/mapper/ttl/TTLMappingTests.java, +import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;, +import org.elasticsearch.common.compress.CompressedString;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.index.mapper.*;, +import org.elasticsearch.index.service.IndexService;, +import java.io.IOException;, +, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.hamcrest.Matchers.containsString;, +, +    @Test, +    public void testThatDisablingTTLReportsConflict() throws Exception {, +        String mappingWithTtl = getMappingWithTtlEnabled().string();, +        String mappingWithTtlDisabled = getMappingWithTtlDisabled().string();, +        DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();, +        DocumentMapper initialMapper = parser.parse(mappingWithTtl);, +        DocumentMapper updatedMapper = parser.parse(mappingWithTtlDisabled);, +, +        DocumentMapper.MergeFlags mergeFlags = DocumentMapper.MergeFlags.mergeFlags().simulate(true);, +        DocumentMapper.MergeResult mergeResult = initialMapper.merge(updatedMapper, mergeFlags);, +, +        assertThat(mergeResult.hasConflicts(), equalTo(true));, +        assertThat(initialMapper.TTLFieldMapper().enabled(), equalTo(true));, +    }, +, +    @Test, +    public void testThatDisablingTTLReportsConflictOnCluster() throws Exception {, +        String mappingWithTtl = getMappingWithTtlEnabled().string();, +        String mappingWithTtlDisabled = getMappingWithTtlDisabled().string();, +        assertAcked(client().admin().indices().prepareCreate("testindex").addMapping("type", mappingWithTtl));, +        GetMappingsResponse mappingsBeforeUpdateResponse = client().admin().indices().prepareGetMappings("testindex").addTypes("type").get();, +        try {, +            client().admin().indices().preparePutMapping("testindex").setSource(mappingWithTtlDisabled).setType("type").get();, +            fail();, +        } catch (MergeMappingException mme) {, +            assertThat(mme.getDetailedMessage(), containsString("_ttl cannot be disabled once it was enabled."));, +        }, +        GetMappingsResponse mappingsAfterUpdateResponse = client().admin().indices().prepareGetMappings("testindex").addTypes("type").get();, +        assertThat(mappingsBeforeUpdateResponse.getMappings().get("testindex").get("type").source(), equalTo(mappingsAfterUpdateResponse.getMappings().get("testindex").get("type").source()));, +    }, +, +    @Test, +    public void testThatEnablingTTLAfterFirstDisablingWorks() throws Exception {, +        String mappingWithTtl = getMappingWithTtlEnabled().string();, +        String withTtlDisabled = getMappingWithTtlDisabled().string();, +        assertAcked(client().admin().indices().prepareCreate("testindex").addMapping("type", withTtlDisabled));, +        GetMappingsResponse mappingsAfterUpdateResponse = client().admin().indices().prepareGetMappings("testindex").addTypes("type").get();, +        assertThat(mappingsAfterUpdateResponse.getMappings().get("testindex").get("type").sourceAsMap().get("_ttl").toString(), equalTo("{enabled=false}"));, +        client().admin().indices().preparePutMapping("testindex").setSource(mappingWithTtl).setType("type").get();, +        mappingsAfterUpdateResponse = client().admin().indices().prepareGetMappings("testindex").addTypes("type").get();, +        assertThat(mappingsAfterUpdateResponse.getMappings().get("testindex").get("type").sourceAsMap().get("_ttl").toString(), equalTo("{enabled=true}"));, +    }, +, +    @Test, +    public void testNoConflictIfNothingSetAndDisabledLater() throws Exception {, +        IndexService indexService = createIndex("testindex", ImmutableSettings.settingsBuilder().build(), "type");, +        XContentBuilder mappingWithTtlDisabled = getMappingWithTtlDisabled("7d");, +        DocumentMapper.MergeResult mergeResult = indexService.mapperService().documentMapper("type").merge(indexService.mapperService().parse("type", new CompressedString(mappingWithTtlDisabled.string()), true), DocumentMapper.MergeFlags.mergeFlags().simulate(randomBoolean()));, +        assertFalse(mergeResult.hasConflicts());, +    }, +, +    @Test, +    public void testNoConflictIfNothingSetAndEnabledLater() throws Exception {, +        IndexService indexService = createIndex("testindex", ImmutableSettings.settingsBuilder().build(), "type");, +        XContentBuilder mappingWithTtlEnabled = getMappingWithTtlEnabled("7d");, +        DocumentMapper.MergeResult mergeResult = indexService.mapperService().documentMapper("type").merge(indexService.mapperService().parse("type", new CompressedString(mappingWithTtlEnabled.string()), true), DocumentMapper.MergeFlags.mergeFlags().simulate(randomBoolean()));, +        assertFalse(mergeResult.hasConflicts());, +    }]