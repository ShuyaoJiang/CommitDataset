[+++ b/.settings/org.eclipse.core.resources.prefs, +++ b/.settings/org.eclipse.core.resources.prefs, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/.settings/org.eclipse.core.resources.prefs, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/.settings/org.eclipse.core.resources.prefs, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/.settings/org.eclipse.core.resources.prefs, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +, +import org.elasticsearch.action.admin.indices.validate.template.RenderSearchTemplateAction;, +import org.elasticsearch.action.admin.indices.validate.template.TransportRenderSearchTemplateAction;, +        registerAction(RenderSearchTemplateAction.INSTANCE, TransportRenderSearchTemplateAction.class);, +++ b/.settings/org.eclipse.core.resources.prefs, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +, +import org.elasticsearch.action.admin.indices.validate.template.RenderSearchTemplateAction;, +import org.elasticsearch.action.admin.indices.validate.template.TransportRenderSearchTemplateAction;, +        registerAction(RenderSearchTemplateAction.INSTANCE, TransportRenderSearchTemplateAction.class);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +import org.elasticsearch.action.ActionListener;, +++ b/.settings/org.eclipse.core.resources.prefs, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        protected WithRestHeadersException(String msg, Throwable cause, Map<String, List<String>> headers) {, +            super(msg, cause);, +            this.headers = headers;, +        }, +, +                WithRestHeadersException.class,, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +, +import org.elasticsearch.action.admin.indices.validate.template.RenderSearchTemplateAction;, +import org.elasticsearch.action.admin.indices.validate.template.TransportRenderSearchTemplateAction;, +        registerAction(RenderSearchTemplateAction.INSTANCE, TransportRenderSearchTemplateAction.class);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/ValidateQueryRequestBuilder.java, +import org.elasticsearch.action.ActionListener;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/template/RenderSearchTemplateAction.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,]