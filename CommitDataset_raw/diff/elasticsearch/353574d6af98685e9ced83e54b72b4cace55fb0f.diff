[+++ b/docs/reference/migration/migrate_2_0.asciidoc, +`GetIndexRequest.features()` now returns an array of Feature Enums instrad of an array of String values., +The following deprecated methods have been removed:, +* `GetIndexRequest.addFeatures(String[])` - Please use `GetIndexRequest.addFeatures(Feature[])` instead, +* `GetIndexRequest.features(String[])` - Please use `GetIndexRequest.features(Feature[])` instead, +* `GetIndexRequestBuilder.addFeatures(String[])` - Please use `GetIndexRequestBuilder.addFeatures(Feature[])` instead, +* `GetIndexRequestBuilder.setFeatures(String[])` - Please use `GetIndexRequestBuilder.setFeatures(Feature[])` instead, +, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +`GetIndexRequest.features()` now returns an array of Feature Enums instrad of an array of String values., +The following deprecated methods have been removed:, +* `GetIndexRequest.addFeatures(String[])` - Please use `GetIndexRequest.addFeatures(Feature[])` instead, +* `GetIndexRequest.features(String[])` - Please use `GetIndexRequest.features(Feature[])` instead, +* `GetIndexRequestBuilder.addFeatures(String[])` - Please use `GetIndexRequestBuilder.addFeatures(Feature[])` instead, +* `GetIndexRequestBuilder.setFeatures(String[])` - Please use `GetIndexRequestBuilder.setFeatures(Feature[])` instead, +, +++ b/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexRequest.java, +import com.google.common.collect.ObjectArrays;, +, +import org.elasticsearch.Version;, +import java.util.Arrays;, +import java.util.List;, +    public static enum Feature {, +        ALIASES((byte) 0, "_aliases", "_alias"),, +        MAPPINGS((byte) 1, "_mappings", "_mapping"),, +        SETTINGS((byte) 2, "_settings"),, +        WARMERS((byte) 3, "_warmers", "_warmer");, +        private static final Feature[] FEATURES = new Feature[Feature.values().length];, +, +        static {, +            for (Feature feature : Feature.values()) {, +                assert feature.id() < FEATURES.length && feature.id() >= 0;, +                FEATURES[feature.id] = feature;, +            }, +        }, +, +        private final List<String> validNames;, +        private final String preferredName;, +        private final byte id;, +, +        private Feature(byte id, String... validNames) {, +            assert validNames != null && validNames.length > 0;, +            this.id = id;, +            this.validNames = Arrays.asList(validNames);, +            this.preferredName = validNames[0];, +        }, +, +        public byte id() {, +            return id;, +        }, +, +        public String preferredName() {, +            return preferredName;, +        }, +, +        public boolean validName(String name) {, +            return this.validNames.contains(name);, +        }, +, +        public static Feature fromName(String name) throws ElasticsearchIllegalArgumentException {, +            for (Feature feature : Feature.values()) {, +                if (feature.validName(name)) {, +                    return feature;, +                }, +            }, +            throw new ElasticsearchIllegalArgumentException("No feature for name [" + name + "]");, +        }, +, +        public static Feature fromId(byte id) throws ElasticsearchIllegalArgumentException {, +            if (id < 0 || id >= FEATURES.length) {, +                throw new ElasticsearchIllegalArgumentException("No mapping for id [" + id + "]");, +            }, +            return FEATURES[id];, +        }, +, +        public static Feature[] convertToFeatures(String... featureNames) {, +            Feature[] features = new Feature[featureNames.length];, +            for (int i = 0; i < featureNames.length; i++) {, +                features[i] = Feature.fromName(featureNames[i]);, +            }, +            return features;, +        }, +    }, +, +    private static final Feature[] DEFAULT_FEATURES = new Feature[] { Feature.ALIASES, Feature.MAPPINGS, Feature.SETTINGS, Feature.WARMERS };, +    private Feature[] features = DEFAULT_FEATURES;, +, +    public GetIndexRequest features(Feature... features) {, +    public GetIndexRequest addFeatures(Feature... features) {, +        if (this.features == DEFAULT_FEATURES) {, +            return features(features);, +        } else {, +            return features(ObjectArrays.concat(featuresAsEnums(), features, Feature.class));, +        }, +    }, +, +    public Feature[] features() {, +    /**, +     * @deprecated use {@link #features()} instead, +     */]