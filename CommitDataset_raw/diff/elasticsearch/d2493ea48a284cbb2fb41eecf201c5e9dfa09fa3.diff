[+++ b/core-signatures.txt, +, +@defaultMessage Use Lucene.parseLenient instead it strips off minor version, +org.apache.lucene.util.Version#parseLeniently(java.lang.String), +++ b/core-signatures.txt, +, +@defaultMessage Use Lucene.parseLenient instead it strips off minor version, +org.apache.lucene.util.Version#parseLeniently(java.lang.String), +++ b/pom.xml, +                                <!-- start exclude for Lucene utility class -->, +                                <exclude>org/elasticsearch/common/lucene/Lucene$LenientParser.class</exclude>, +                                <!-- end exclude for Lucene -->, +++ b/core-signatures.txt, +, +@defaultMessage Use Lucene.parseLenient instead it strips off minor version, +org.apache.lucene.util.Version#parseLeniently(java.lang.String), +++ b/pom.xml, +                                <!-- start exclude for Lucene utility class -->, +                                <exclude>org/elasticsearch/common/lucene/Lucene$LenientParser.class</exclude>, +                                <!-- end exclude for Lucene -->, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.elasticsearch.common.Strings;, +import java.util.Locale;, +, +import static org.elasticsearch.common.lucene.search.NoopCollector.NOOP_COLLECTOR;, +, +    /**, +     * Parses the version string lenient and returns the the default value if the given string is null or emtpy, +     */, +    public static Version parseVersionLenient(String toParse, Version defaultValue) {, +        return LenientParser.parse(toParse, defaultValue);, +    }, +, +    private static final class LenientParser {, +        public static Version parse(String toParse, Version defaultValue) {, +            if (Strings.hasLength(toParse)) {, +                try {, +                    return Version.parseLeniently(toParse);, +                } catch (IllegalArgumentException e) {, +                    final String parsedMatchVersion = toParse, +                            .toUpperCase(Locale.ROOT), +                            .replaceFirst("^(\\d+)\\.(\\d+).(\\d+)$", "LUCENE_$1_$2");, +                    return Version.valueOf(parsedMatchVersion);, +                }, +            }, +            return defaultValue;, +        }, +    }, +++ b/core-signatures.txt, +, +@defaultMessage Use Lucene.parseLenient instead it strips off minor version, +org.apache.lucene.util.Version#parseLeniently(java.lang.String), +++ b/pom.xml, +                                <!-- start exclude for Lucene utility class -->, +                                <exclude>org/elasticsearch/common/lucene/Lucene$LenientParser.class</exclude>, +                                <!-- end exclude for Lucene -->, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.elasticsearch.common.Strings;, +import java.util.Locale;, +, +import static org.elasticsearch.common.lucene.search.NoopCollector.NOOP_COLLECTOR;, +, +    /**, +     * Parses the version string lenient and returns the the default value if the given string is null or emtpy, +     */, +    public static Version parseVersionLenient(String toParse, Version defaultValue) {, +        return LenientParser.parse(toParse, defaultValue);, +    }, +, +    private static final class LenientParser {, +        public static Version parse(String toParse, Version defaultValue) {, +            if (Strings.hasLength(toParse)) {, +                try {, +                    return Version.parseLeniently(toParse);, +                } catch (IllegalArgumentException e) {, +                    final String parsedMatchVersion = toParse, +                            .toUpperCase(Locale.ROOT), +                            .replaceFirst("^(\\d+)\\.(\\d+).(\\d+)$", "LUCENE_$1_$2");, +                    return Version.valueOf(parsedMatchVersion);, +                }, +            }, +            return defaultValue;, +        }, +    }, +++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java, +import org.elasticsearch.common.lucene.Lucene;, +                                writtenBy = Lucene.parseVersionLenient(parser.text(), null);, +++ b/core-signatures.txt, +, +@defaultMessage Use Lucene.parseLenient instead it strips off minor version, +org.apache.lucene.util.Version#parseLeniently(java.lang.String), +++ b/pom.xml, +                                <!-- start exclude for Lucene utility class -->, +                                <exclude>org/elasticsearch/common/lucene/Lucene$LenientParser.class</exclude>, +                                <!-- end exclude for Lucene -->, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.elasticsearch.common.Strings;, +import java.util.Locale;, +, +import static org.elasticsearch.common.lucene.search.NoopCollector.NOOP_COLLECTOR;]