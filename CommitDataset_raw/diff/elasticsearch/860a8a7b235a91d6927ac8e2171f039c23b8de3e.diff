[+++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java, +import java.math.BigDecimal;, +            long scaledValue = Math.round(scale(value));, +                long scaledValue = Math.round(scale(value));, +                double dValue = scale(lowerTerm);, +                double dValue = scale(upperTerm);, +, +        /**, +         * Parses input value and multiplies it with the scaling factor., +         * Uses the round-trip of creating a {@link BigDecimal} from the stringified {@code double}, +         * input to ensure intuitively exact floating point operations., +         * (e.g. for a scaling factor of 100, JVM behaviour results in {@code 79.99D * 100 ==> 7998.99..} compared to, +         * {@code scale(79.99) ==> 7999}), +         * @param input Input value to parse floating point num from, +         * @return Scaled value, +         */, +        private double scale(Object input) {, +            return new BigDecimal(Double.toString(parse(input))).multiply(BigDecimal.valueOf(scalingFactor)).doubleValue();, +        }, +++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/ScaledFloatFieldMapper.java, +import java.math.BigDecimal;, +            long scaledValue = Math.round(scale(value));, +                long scaledValue = Math.round(scale(value));, +                double dValue = scale(lowerTerm);, +                double dValue = scale(upperTerm);, +, +        /**, +         * Parses input value and multiplies it with the scaling factor., +         * Uses the round-trip of creating a {@link BigDecimal} from the stringified {@code double}, +         * input to ensure intuitively exact floating point operations., +         * (e.g. for a scaling factor of 100, JVM behaviour results in {@code 79.99D * 100 ==> 7998.99..} compared to, +         * {@code scale(79.99) ==> 7999}), +         * @param input Input value to parse floating point num from, +         * @return Scaled value, +         */, +        private double scale(Object input) {, +            return new BigDecimal(Double.toString(parse(input))).multiply(BigDecimal.valueOf(scalingFactor)).doubleValue();, +        }, +++ b/modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/ScaledFloatFieldTypeTests.java, +        scaledFloatQ = ft.rangeQuery(null, 79.99, true, true, null);, +        assertEquals("scaled_float:[-9223372036854775808 TO 7999]", scaledFloatQ.toString());]