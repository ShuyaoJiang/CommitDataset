[+++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.action.search.SearchTask;, +import org.elasticsearch.tasks.Task;, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.action.search.SearchTask;, +import org.elasticsearch.tasks.Task;, +++ b/core/src/test/java/org/elasticsearch/search/SearchServiceTests.java, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.action.search.SearchTask;, +import org.elasticsearch.tasks.Task;, +++ b/core/src/test/java/org/elasticsearch/search/SearchServiceTests.java, +++ b/distribution/src/main/resources/config/log4j2.properties, +appender.rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%.10000m%n, +appender.deprecation_rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%.10000m%n, +appender.index_search_slowlog_rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %marker%.10000m%n, +appender.index_indexing_slowlog_rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %marker%.10000m%n, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.action.search.SearchTask;, +import org.elasticsearch.tasks.Task;, +++ b/core/src/test/java/org/elasticsearch/search/SearchServiceTests.java, +++ b/distribution/src/main/resources/config/log4j2.properties, +appender.rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%.10000m%n, +appender.deprecation_rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%.10000m%n, +appender.index_search_slowlog_rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %marker%.10000m%n, +appender.index_indexing_slowlog_rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %marker%.10000m%n, +++ b/docs/reference/query-dsl/multi-match-query.asciidoc, +`fuzziness`, `lenient`, `prefix_length`, `max_expansions`, `rewrite`, `zero_terms_query`, +`fuzziness`, `lenient`, `prefix_length`, `max_expansions`, `rewrite`, `zero_terms_query`, +Also, accepts `analyzer`, `boost`, `lenient`, `slop` and `zero_terms_query`  as explained, +`lenient`, `zero_terms_query` and `cutoff_frequency`, as explained in, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.action.search.SearchTask;, +import org.elasticsearch.tasks.Task;, +++ b/core/src/test/java/org/elasticsearch/search/SearchServiceTests.java, +++ b/distribution/src/main/resources/config/log4j2.properties, +appender.rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%.10000m%n, +appender.deprecation_rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%.10000m%n, +appender.index_search_slowlog_rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %marker%.10000m%n, +appender.index_indexing_slowlog_rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %marker%.10000m%n, +++ b/docs/reference/query-dsl/multi-match-query.asciidoc, +`fuzziness`, `lenient`, `prefix_length`, `max_expansions`, `rewrite`, `zero_terms_query`, +`fuzziness`, `lenient`, `prefix_length`, `max_expansions`, `rewrite`, `zero_terms_query`, +Also, accepts `analyzer`, `boost`, `lenient`, `slop` and `zero_terms_query`  as explained, +`lenient`, `zero_terms_query` and `cutoff_frequency`, as explained in, +++ b/plugins/delete-by-query/src/test/java/org/elasticsearch/action/deletebyquery/TransportDeleteByQueryActionTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.deletebyquery;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.admin.cluster.node.stats.NodeStats;, +import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;, +import org.elasticsearch.action.bulk.BulkItemResponse;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.action.delete.DeleteResponse;, +import org.elasticsearch.action.search.ClearScrollResponse;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.text.Text;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.CollectionUtils;, +import org.elasticsearch.common.util.concurrent.CountDown;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.SearchShardTarget;, +import org.elasticsearch.search.internal.InternalSearchHit;, +import org.elasticsearch.test.ESSingleNodeTestCase;, +, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +import static org.elasticsearch.index.query.QueryBuilders.rangeQuery;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.equalTo;, +, +public class TransportDeleteByQueryActionTests extends ESSingleNodeTestCase {, +    public void testExecuteScanFailsOnMissingIndex() {, +        DeleteByQueryRequest delete = new DeleteByQueryRequest().indices(new String[]{"none"});, +        TestActionListener listener = new TestActionListener();, +, +        newAsyncAction(delete, listener).executeScan();, +        waitForCompletion("scan request should fail on missing index", listener);, +]