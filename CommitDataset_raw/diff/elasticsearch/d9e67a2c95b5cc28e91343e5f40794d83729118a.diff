[+++ b/docs/reference/search/rank-eval.asciidoc, +[[search-rank-eval]], +== Ranking Evaluation API, +experimental[], +The ranking evaluation API allows to evaluate the quality of ranked search, +results over a set of typical search queries. Given this set of queries and a, +list or manually rated documents, the `_rank_eval` endpoint calculates and, +returns typical information retrieval metrics like _mean reciprocal rank_,, +_precision_ or _discounted cumulative gain_., +=== Overview, +Search quality evaluation starts with looking at the users of your search application, and the things that they are searching for., +Users have a specific _information need_, e.g. they are looking for gift in a web shop or want to book a flight for their next holiday., +They usually enters some search terms into a search box or some other web form., +All of this information, together with meta information about the user (e.g. the browser, location, earlier preferences etc...) then gets translated into a query to the underlying search system., +The challenge for search engineers is to tweak this translation process from user entries to a concrete query in such a way, that the search results contain the most relevant information with respect to the users information_need., +This can only be done if the search result quality is evaluated constantly across a representative test suit of typical user queries, so that improvements in the rankings for one particular query doesn't negatively effect the ranking for other types of queries., +In order to get started with search quality evaluation, three basic things a needed:, +, +. a collection of document you want to evaluate your query performance against, usually one or more indices, +. a collection of typical search requests that users enter into your system, +. a set of document ratings that judge the documents relevance with respect to a search request+, +  It is important to note that one set of document ratings is needed per test query, and that, +  the relevance judgements are based on the _information_need_ of the user that entered the query. , +, +The ranking evaluation API provides a convenient way to use this information in a ranking evaluation request to calculate different search evaluation metrics. This gives a first estimation of your overall search quality and give you a measurement to optimize against when fine-tuning various aspect of the query generation in your application. , +, +== Ranking evaluation request structure, +, +In its most basic form, a request to the `_rank_eval` endpoint has two sections:, +GET /my_index/_rank_eval, +    "requests": [ ... ], <1>  , +    "metric": { <2>, +      "reciprocal_rank": { ... } <3>, +   }, +// NOTCONSOLE, +<1> a set of typical search requests to your system, +<2> definition of the evaluation metric to calculate, +<3> a specific metric and its parameters, +The request section contains several search requests typical to your application, along with the document ratings for each particular search request, e.g., +, +[source,js], +-----------------------------, +    "requests": [, +        {, +            "id": "amsterdam_query", <1>, +            "request": { <2>, +                "query": { "match": { "text": "amsterdam" }}, +            },, +            "ratings": [ <3> , +                 { "_index": "my_index", "_id": "doc1", "rating": 0 },, +                 { "_index": "my_index", "_id": "doc2", "rating": 3},, +                 { "_index": "my_index", _id": "doc3", "rating": 1 }, +            ], +        },, +        {, +            "id": "berlin_query",, +            "request": {, +                "query": { "match": { "text": "berlin" }}, +            },, +            "ratings": [, +                { "_index": "my_index", "_id": "doc1", "rating": 1 }, +            ], +        }, +    ], +------------------------------, +// NOTCONSOLE, +, +<1> the search requests id, used to group result details later , +<2> the query that is being evaluated, +<3> a list of document ratings, each entry containing the documents `_index` and `_id` together with, +the rating of the documents relevance with regards to this search request, +, +A document `rating` can be any integer value that expresses the relevance of the document on a user defined scale. For some of the metrics, just giving a binary rating (e.g. `0` for irrelevant and `1` for relevant) will be sufficient, other metrics can use a more fine grained scale.  , +As an alternative to having to provide a single query per test request, it is possible to specify query templates in the evaluation request and later refer to them. Queries with similar structure that only differ in their parameters don't have to be repeated all the time in the `requests` section this way. In typical search systems where user inputs usually get filled into a small set of query templates, this helps making the evaluation request more succinct., +, +GET /my_index/_rank_eval, +   [...], +  "templates": [, +     {, +        "id": "match_one_field_query",  <1>, +        "template": { <2>, +                  "match": { "{{field}}": { "query": "{{query_string}}" }}, +                }, +            }, +        }, +     }, +  ], , +         "id": "amsterdam_query", +         "ratings": [ ... ],, +         "template_id": "match_one_field_query", <3>, +         "params": { <4>, +            "query_string": "amsterdam",, +            "field": "text", +     },, +    [...], +// NOTCONSOLE, +<1> the template id , +<2> the template definition to use, +<3> a reference to a previously defined temlate, +<4> the parameters to use to fill the template]