[+++ b/docs/reference/query-dsl/filters/numeric-range-filter.asciidoc, +, +If the `now` date math expression is used without rounding then a range numeric filter will never be cached even, +if `_cache` is set to `true`. Also any filter that wraps this filter will never be cached., +++ b/docs/reference/query-dsl/filters/numeric-range-filter.asciidoc, +, +If the `now` date math expression is used without rounding then a range numeric filter will never be cached even, +if `_cache` is set to `true`. Also any filter that wraps this filter will never be cached., +++ b/docs/reference/query-dsl/filters/range-filter.asciidoc, +, +If the `now` date math expression is used without rounding then a range filter will never be cached even if `_cache` is, +set to `true`. Also any filter that wraps this filter will never be cached., +++ b/docs/reference/query-dsl/filters/numeric-range-filter.asciidoc, +, +If the `now` date math expression is used without rounding then a range numeric filter will never be cached even, +if `_cache` is set to `true`. Also any filter that wraps this filter will never be cached., +++ b/docs/reference/query-dsl/filters/range-filter.asciidoc, +, +If the `now` date math expression is used without rounding then a range filter will never be cached even if `_cache` is, +set to `true`. Also any filter that wraps this filter will never be cached., +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        return rangeFilter(lowerTerm, upperTerm, includeLower, includeUpper, context, false);, +    }, +, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context, boolean explicitCaching) {, +        boolean cache = explicitCaching;, +            cache = explicitCaching || !hasNowExpressionWithNoRounding(value);, +            cache = explicitCaching || !hasNowExpressionWithNoRounding(value);, +        if (!cache) {, +        return rangeFilter(fieldData, lowerTerm, upperTerm, includeLower, includeUpper, context, false);, +    }, +, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context, boolean explicitCaching) {, +        boolean cache = explicitCaching;, +            cache = explicitCaching || !hasNowExpressionWithNoRounding(value);, +            cache = explicitCaching || !hasNowExpressionWithNoRounding(value);, +        if (!cache) {, +    private boolean hasNowExpressionWithNoRounding(String value) {, +        int index = value.indexOf("now");, +        if (index != -1) {, +            if (value.length() == 3) {, +                return true;, +            } else {, +                int indexOfPotentialRounding = index + 3;, +                if (indexOfPotentialRounding >= value.length()) {, +                    return true;, +                } else {, +                    char potentialRoundingChar;, +                    do {, +                        potentialRoundingChar = value.charAt(indexOfPotentialRounding++);, +                        if (potentialRoundingChar == '/') {, +                            return false; // We found the rounding char, so we shouldn't forcefully disable caching, +                        } else if (potentialRoundingChar == ' ') {, +                            return true; // Next token in the date math expression and no rounding found, so we should not cache., +                        }, +                    } while (indexOfPotentialRounding < value.length());, +                    return true; // Couldn't find rounding char, so we should not cache, +                }, +            }, +        } else {, +            return false;, +        }, +    }, +, +++ b/docs/reference/query-dsl/filters/numeric-range-filter.asciidoc, +, +If the `now` date math expression is used without rounding then a range numeric filter will never be cached even, +if `_cache` is set to `true`. Also any filter that wraps this filter will never be cached., +++ b/docs/reference/query-dsl/filters/range-filter.asciidoc, +, +If the `now` date math expression is used without rounding then a range filter will never be cached even if `_cache` is, +set to `true`. Also any filter that wraps this filter will never be cached., +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        return rangeFilter(lowerTerm, upperTerm, includeLower, includeUpper, context, false);, +    }, +, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context, boolean explicitCaching) {, +        boolean cache = explicitCaching;, +            cache = explicitCaching || !hasNowExpressionWithNoRounding(value);, +            cache = explicitCaching || !hasNowExpressionWithNoRounding(value);, +        if (!cache) {, +        return rangeFilter(fieldData, lowerTerm, upperTerm, includeLower, includeUpper, context, false);, +    }, +, +    public Filter rangeFilter(IndexFieldDataService fieldData, Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context, boolean explicitCaching) {, +        boolean cache = explicitCaching;, +            cache = explicitCaching || !hasNowExpressionWithNoRounding(value);, +            cache = explicitCaching || !hasNowExpressionWithNoRounding(value);, +        if (!cache) {, +    private boolean hasNowExpressionWithNoRounding(String value) {, +        int index = value.indexOf("now");, +        if (index != -1) {, +            if (value.length() == 3) {, +                return true;, +            } else {, +                int indexOfPotentialRounding = index + 3;, +                if (indexOfPotentialRounding >= value.length()) {, +                    return true;, +                } else {, +                    char potentialRoundingChar;]