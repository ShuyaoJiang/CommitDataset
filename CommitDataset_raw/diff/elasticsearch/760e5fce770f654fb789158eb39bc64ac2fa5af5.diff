[+++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/MultiSearchTemplateRequest.java, +    private int maxConcurrentSearchRequests = 1;, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/MultiSearchTemplateRequest.java, +    private int maxConcurrentSearchRequests = 1;, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportMultiSearchTemplateAction.java, +import org.elasticsearch.action.search.MultiSearchRequest;, +import org.elasticsearch.action.search.MultiSearchResponse;, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.TransportMultiSearchAction;, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import org.elasticsearch.script.ScriptService;, +import java.util.ArrayList;, +import java.util.List;, +, +import static org.elasticsearch.script.mustache.TransportSearchTemplateAction.convert;, +    private final ScriptService scriptService;, +    private final NamedXContentRegistry xContentRegistry;, +    private final TransportMultiSearchAction multiSearchAction;, +                                              ScriptService scriptService, NamedXContentRegistry xContentRegistry,, +                                              TransportMultiSearchAction multiSearchAction) {, +        this.scriptService = scriptService;, +        this.xContentRegistry = xContentRegistry;, +        this.multiSearchAction = multiSearchAction;, +        List<Integer> originalSlots = new ArrayList<>();, +        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();, +        multiSearchRequest.indicesOptions(request.indicesOptions());, +        if (request.maxConcurrentSearchRequests() != 0) {, +            multiSearchRequest.maxConcurrentSearchRequests(request.maxConcurrentSearchRequests());, +        }, +        MultiSearchTemplateResponse.Item[] items = new MultiSearchTemplateResponse.Item[request.requests().size()];, +        for (int i = 0; i < items.length; i++) {, +            SearchTemplateRequest searchTemplateRequest = request.requests().get(i);, +            SearchTemplateResponse searchTemplateResponse = new SearchTemplateResponse();, +            SearchRequest searchRequest;, +            try {, +                searchRequest = convert(searchTemplateRequest, searchTemplateResponse, scriptService, xContentRegistry);, +            } catch (Exception e) {, +                items[i] = new MultiSearchTemplateResponse.Item(null, e);, +                continue;, +            }, +            items[i] = new MultiSearchTemplateResponse.Item(searchTemplateResponse, null);, +            if (searchRequest != null) {, +                multiSearchRequest.add(searchRequest);, +                originalSlots.add(i);, +        multiSearchAction.execute(multiSearchRequest, ActionListener.wrap(r -> {, +            for (int i = 0; i < r.getResponses().length; i++) {, +                MultiSearchResponse.Item item = r.getResponses()[i];, +                int originalSlot = originalSlots.get(i);, +                if (item.isFailure()) {, +                    items[originalSlot] = new MultiSearchTemplateResponse.Item(null, item.getFailure());, +                } else {, +                    items[originalSlot].getResponse().setResponse(item.getResponse());, +        }, listener::onFailure));, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/MultiSearchTemplateRequest.java, +    private int maxConcurrentSearchRequests = 1;, +++ b/modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportMultiSearchTemplateAction.java, +import org.elasticsearch.action.search.MultiSearchRequest;, +import org.elasticsearch.action.search.MultiSearchResponse;, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.TransportMultiSearchAction;, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import org.elasticsearch.script.ScriptService;, +import java.util.ArrayList;, +import java.util.List;, +, +import static org.elasticsearch.script.mustache.TransportSearchTemplateAction.convert;, +    private final ScriptService scriptService;, +    private final NamedXContentRegistry xContentRegistry;, +    private final TransportMultiSearchAction multiSearchAction;, +                                              ScriptService scriptService, NamedXContentRegistry xContentRegistry,, +                                              TransportMultiSearchAction multiSearchAction) {, +        this.scriptService = scriptService;, +        this.xContentRegistry = xContentRegistry;, +        this.multiSearchAction = multiSearchAction;, +        List<Integer> originalSlots = new ArrayList<>();, +        MultiSearchRequest multiSearchRequest = new MultiSearchRequest();, +        multiSearchRequest.indicesOptions(request.indicesOptions());, +        if (request.maxConcurrentSearchRequests() != 0) {, +            multiSearchRequest.maxConcurrentSearchRequests(request.maxConcurrentSearchRequests());, +        }, +        MultiSearchTemplateResponse.Item[] items = new MultiSearchTemplateResponse.Item[request.requests().size()];, +        for (int i = 0; i < items.length; i++) {, +            SearchTemplateRequest searchTemplateRequest = request.requests().get(i);, +            SearchTemplateResponse searchTemplateResponse = new SearchTemplateResponse();, +            SearchRequest searchRequest;, +            try {, +                searchRequest = convert(searchTemplateRequest, searchTemplateResponse, scriptService, xContentRegistry);, +            } catch (Exception e) {, +                items[i] = new MultiSearchTemplateResponse.Item(null, e);, +                continue;, +            }, +            items[i] = new MultiSearchTemplateResponse.Item(searchTemplateResponse, null);, +            if (searchRequest != null) {, +                multiSearchRequest.add(searchRequest);, +                originalSlots.add(i);, +        multiSearchAction.execute(multiSearchRequest, ActionListener.wrap(r -> {, +            for (int i = 0; i < r.getResponses().length; i++) {, +                MultiSearchResponse.Item item = r.getResponses()[i];, +                int originalSlot = originalSlots.get(i);, +                if (item.isFailure()) {]