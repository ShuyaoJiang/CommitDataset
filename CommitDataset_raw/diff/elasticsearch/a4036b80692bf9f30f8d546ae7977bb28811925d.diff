[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    public void writeDynamicBinaryInstruction(Location location, Type returnType, Type lhs, Type rhs, , +                                              Operation operation, boolean compoundAssignment) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    public void writeDynamicBinaryInstruction(Location location, Type returnType, Type lhs, Type rhs, , +                                              Operation operation, boolean compoundAssignment) {, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/DivisionTests.java, +    public void testDefCompoundAssignment() {, +        // byte, +        assertEquals((byte) 15, exec("def x = (byte)45; x /= 3; return x;"));, +        assertEquals((byte) -5, exec("def x = (byte)5; x /= -1; return x;"));, +        // short, +        assertEquals((short) 15, exec("def x = (short)45; x /= 3; return x;"));, +        assertEquals((short) -5, exec("def x = (short)5; x /= -1; return x;"));, +        // char, +        assertEquals((char) 15, exec("def x = (char)45; x /= 3; return x;"));, +        // int, +        assertEquals(15, exec("def x = 45; x /= 3; return x;"));, +        assertEquals(-5, exec("def x = 5; x /= -1; return x;"));, +        // long, +        assertEquals(15L, exec("def x = 45L; x /= 3; return x;"));, +        assertEquals(-5L, exec("def x = 5L; x /= -1; return x;"));, +        // float, +        assertEquals(15F, exec("def x = 45f; x /= 3; return x;"));, +        assertEquals(-5F, exec("def x = 5f; x /= -1; return x;"));, +        // double, +        assertEquals(15D, exec("def x = 45.0; x /= 3; return x;"));, +        assertEquals(-5D, exec("def x = 5.0; x /= -1; return x;"));, +    }, +    , +        , +        // def, +        expectScriptThrows(ArithmeticException.class, () -> {, +            exec("def x = 1; x /= 0; return x;");, +        });, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    public void writeDynamicBinaryInstruction(Location location, Type returnType, Type lhs, Type rhs, , +                                              Operation operation, boolean compoundAssignment) {, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/DivisionTests.java, +    public void testDefCompoundAssignment() {, +        // byte, +        assertEquals((byte) 15, exec("def x = (byte)45; x /= 3; return x;"));, +        assertEquals((byte) -5, exec("def x = (byte)5; x /= -1; return x;"));, +        // short, +        assertEquals((short) 15, exec("def x = (short)45; x /= 3; return x;"));, +        assertEquals((short) -5, exec("def x = (short)5; x /= -1; return x;"));, +        // char, +        assertEquals((char) 15, exec("def x = (char)45; x /= 3; return x;"));, +        // int, +        assertEquals(15, exec("def x = 45; x /= 3; return x;"));, +        assertEquals(-5, exec("def x = 5; x /= -1; return x;"));, +        // long, +        assertEquals(15L, exec("def x = 45L; x /= 3; return x;"));, +        assertEquals(-5L, exec("def x = 5L; x /= -1; return x;"));, +        // float, +        assertEquals(15F, exec("def x = 45f; x /= 3; return x;"));, +        assertEquals(-5F, exec("def x = 5f; x /= -1; return x;"));, +        // double, +        assertEquals(15D, exec("def x = 45.0; x /= 3; return x;"));, +        assertEquals(-5D, exec("def x = 5.0; x /= -1; return x;"));, +    }, +    , +        , +        // def, +        expectScriptThrows(ArithmeticException.class, () -> {, +            exec("def x = 1; x /= 0; return x;");, +        });, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/IncrementTests.java, +    , +    /** incrementing def values */, +    public void testIncrementDef() {, +        assertEquals((byte)0, exec("def x = (byte)0; return x++;"));, +        assertEquals((byte)0, exec("def x = (byte)0; return x--;"));, +        assertEquals((byte)1, exec("def x = (byte)0; return ++x;"));, +        assertEquals((byte)-1, exec("def x = (byte)0; return --x;"));, +        assertEquals((char)0, exec("def x = (char)0; return x++;"));, +        assertEquals((char)1, exec("def x = (char)1; return x--;"));, +        assertEquals((char)1, exec("def x = (char)0; return ++x;"));, +        assertEquals((short)0, exec("def x = (short)0; return x++;"));, +        assertEquals((short)0, exec("def x = (short)0; return x--;"));, +        assertEquals((short)1, exec("def x = (short)0; return ++x;"));, +        assertEquals((short)-1, exec("def x = (short)0; return --x;"));, +        assertEquals(0, exec("def x = 0; return x++;"));, +        assertEquals(0, exec("def x = 0; return x--;"));, +        assertEquals(1, exec("def x = 0; return ++x;"));, +        assertEquals(-1, exec("def x = 0; return --x;"));, +        assertEquals(0L, exec("def x = 0L; return x++;"));, +        assertEquals(0L, exec("def x = 0L; return x--;"));, +        assertEquals(1L, exec("def x = 0L; return ++x;"));, +        assertEquals(-1L, exec("def x = 0L; return --x;"));, +        assertEquals(0F, exec("def x = 0F; return x++;"));, +        assertEquals(0F, exec("def x = 0F; return x--;"));, +        assertEquals(1F, exec("def x = 0F; return ++x;"));, +        assertEquals(-1F, exec("def x = 0F; return --x;"));, +        assertEquals(0D, exec("def x = 0.0; return x++;"));, +        assertEquals(0D, exec("def x = 0.0; return x--;"));, +        assertEquals(1D, exec("def x = 0.0; return ++x;"));, +        assertEquals(-1D, exec("def x = 0.0; return --x;"));, +    }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java]