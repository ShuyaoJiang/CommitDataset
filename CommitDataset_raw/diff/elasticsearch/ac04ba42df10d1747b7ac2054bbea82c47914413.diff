[+++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java, +            final String javaPath = sh.run("command -v java").stdout.trim();, +++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java, +            final String javaPath = sh.run("command -v java").stdout.trim();, +++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/PackageTestCase.java, +import java.nio.file.Path;, +import java.nio.file.Paths;, +import static org.elasticsearch.packaging.util.FileUtils.mv;, +import static org.elasticsearch.packaging.util.Packages.runInstallCommand;, +    public void test05InstallFailsWhenJavaMissing() {, +        final Shell sh = new Shell();, +        final Result java = sh.run("command -v java");, +, +        final Path originalJavaPath = Paths.get(java.stdout.trim());, +        final Path relocatedJavaPath = originalJavaPath.getParent().resolve("java.relocated");, +        try {, +            mv(originalJavaPath, relocatedJavaPath);, +            final Result installResult = runInstallCommand(distribution());, +            assertThat(installResult.exitCode, is(1));, +        } finally {, +            mv(relocatedJavaPath, originalJavaPath);, +        }, +    }, +, +++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java, +            final String javaPath = sh.run("command -v java").stdout.trim();, +++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/PackageTestCase.java, +import java.nio.file.Path;, +import java.nio.file.Paths;, +import static org.elasticsearch.packaging.util.FileUtils.mv;, +import static org.elasticsearch.packaging.util.Packages.runInstallCommand;, +    public void test05InstallFailsWhenJavaMissing() {, +        final Shell sh = new Shell();, +        final Result java = sh.run("command -v java");, +, +        final Path originalJavaPath = Paths.get(java.stdout.trim());, +        final Path relocatedJavaPath = originalJavaPath.getParent().resolve("java.relocated");, +        try {, +            mv(originalJavaPath, relocatedJavaPath);, +            final Result installResult = runInstallCommand(distribution());, +            assertThat(installResult.exitCode, is(1));, +        } finally {, +            mv(relocatedJavaPath, originalJavaPath);, +        }, +    }, +, +++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Packages.java, +                assertTrue("an uninstalled status should be indicated: " + status.stdout,, +                    Pattern.compile("(?m)^Status:.+deinstall ok").matcher(status.stdout).find() ||, +                    Pattern.compile("(?m)^Status:.+ok not-installed").matcher(status.stdout).find(), +                );, +        final Result result = runInstallCommand(distribution, version);, +        if (result.exitCode != 0) {, +            throw new RuntimeException("Installing distribution " + distribution + " version " + version + " failed: " + result);, +        }, +, +        return Installation.ofPackage(distribution.packaging);, +    }, +, +    public static Result runInstallCommand(Distribution distribution) {, +        return runInstallCommand(distribution, getCurrentVersion());, +    }, +, +    public static Result runInstallCommand(Distribution distribution, String version) {, +        if (Platforms.isRPM()) {, +            return sh.runIgnoreExitCode("rpm -i " + distributionFile);, +        } else {, +            return sh.runIgnoreExitCode("dpkg -i " + distributionFile);, +        }]