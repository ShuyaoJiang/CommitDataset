[+++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +import org.elasticsearch.Assertions;, +import org.elasticsearch.Version;, +                if (seqNoStats == null) {, +                    seqNoStats = buildSeqNoStats(lastCommittedSegmentInfos);, +                    // During a peer-recovery the global checkpoint is not known and up to date when the engine, +                    // is created, so we only check the max seq no / global checkpoint coherency when the global, +                    // checkpoint is different from the unassigned sequence number value., +                    // In addition to that we only execute the check if the index the engine belongs to has been, +                    // created after the refactoring of the Close Index API and its TransportVerifyShardBeforeCloseAction, +                    // that guarantee that all operations have been flushed to Lucene., +                    final long globalCheckpoint = engineConfig.getGlobalCheckpointSupplier().getAsLong();, +                    if (globalCheckpoint != SequenceNumbers.UNASSIGNED_SEQ_NO, +                        && engineConfig.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_7_0)) {, +                        if (seqNoStats.getMaxSeqNo() != globalCheckpoint) {, +                            assertMaxSeqNoEqualsToGlobalCheckpoint(seqNoStats.getMaxSeqNo(), globalCheckpoint);, +                            throw new IllegalStateException("Maximum sequence number [" + seqNoStats.getMaxSeqNo(), +                                + "] from last commit does not match global checkpoint [" + globalCheckpoint + "]");, +                        }, +                    }, +                }, +                this.seqNoStats = seqNoStats;, +    protected void assertMaxSeqNoEqualsToGlobalCheckpoint(final long maxSeqNo, final long globalCheckpoint) {, +        if (Assertions.ENABLED) {, +            assert false : "max seq. no. [" + maxSeqNo + "] does not match [" + globalCheckpoint + "]";, +        }, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +import org.elasticsearch.Assertions;, +import org.elasticsearch.Version;, +                if (seqNoStats == null) {, +                    seqNoStats = buildSeqNoStats(lastCommittedSegmentInfos);, +                    // During a peer-recovery the global checkpoint is not known and up to date when the engine, +                    // is created, so we only check the max seq no / global checkpoint coherency when the global, +                    // checkpoint is different from the unassigned sequence number value., +                    // In addition to that we only execute the check if the index the engine belongs to has been, +                    // created after the refactoring of the Close Index API and its TransportVerifyShardBeforeCloseAction, +                    // that guarantee that all operations have been flushed to Lucene., +                    final long globalCheckpoint = engineConfig.getGlobalCheckpointSupplier().getAsLong();, +                    if (globalCheckpoint != SequenceNumbers.UNASSIGNED_SEQ_NO, +                        && engineConfig.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_7_0)) {, +                        if (seqNoStats.getMaxSeqNo() != globalCheckpoint) {, +                            assertMaxSeqNoEqualsToGlobalCheckpoint(seqNoStats.getMaxSeqNo(), globalCheckpoint);, +                            throw new IllegalStateException("Maximum sequence number [" + seqNoStats.getMaxSeqNo(), +                                + "] from last commit does not match global checkpoint [" + globalCheckpoint + "]");, +                        }, +                    }, +                }, +                this.seqNoStats = seqNoStats;, +    protected void assertMaxSeqNoEqualsToGlobalCheckpoint(final long maxSeqNo, final long globalCheckpoint) {, +        if (Assertions.ENABLED) {, +            assert false : "max seq. no. [" + maxSeqNo + "] does not match [" + globalCheckpoint + "]";, +        }, +    }, +, +++ b/server/src/test/java/org/elasticsearch/index/engine/ReadOnlyEngineTests.java, +                    globalCheckpoint.set(i);, +    public void testEnsureMaxSeqNoIsEqualToGlobalCheckpoint() throws IOException {, +        IOUtils.close(engine, store);, +        Engine readOnlyEngine = null;, +        final AtomicLong globalCheckpoint = new AtomicLong(SequenceNumbers.NO_OPS_PERFORMED);, +        try (Store store = createStore()) {, +            EngineConfig config = config(defaultSettings, store, createTempDir(), newMergePolicy(), null, null, globalCheckpoint::get);, +            final int numDocs = scaledRandomIntBetween(10, 100);, +            try (InternalEngine engine = createEngine(config)) {, +                long maxSeqNo = SequenceNumbers.NO_OPS_PERFORMED;, +                for (int i = 0; i < numDocs; i++) {, +                    ParsedDocument doc = testParsedDocument(Integer.toString(i), null, testDocument(), new BytesArray("{}"), null);, +                    engine.index(new Engine.Index(newUid(doc), doc, i, primaryTerm.get(), 1, null, Engine.Operation.Origin.REPLICA,, +                        System.nanoTime(), -1, false, SequenceNumbers.UNASSIGNED_SEQ_NO, 0));, +                    maxSeqNo = engine.getLocalCheckpoint();, +                }, +                globalCheckpoint.set(engine.getLocalCheckpoint() - 1);, +                engine.syncTranslog();, +                engine.flushAndClose();, +, +                IllegalStateException exception = expectThrows(IllegalStateException.class,, +                    () -> new ReadOnlyEngine(engine.engineConfig, null, null, true, Function.identity()) {, +                        @Override, +                        protected void assertMaxSeqNoEqualsToGlobalCheckpoint(final long maxSeqNo, final long globalCheckpoint) {, +                            // we don't want the assertion to trip in this test, +                        }, +                    });, +                assertThat(exception.getMessage(), equalTo("Maximum sequence number [" + maxSeqNo, +                    + "] from last commit does not match global checkpoint [" + globalCheckpoint.get() + "]"));, +            } finally {, +                IOUtils.close(readOnlyEngine);, +            }, +        }, +    }, +]