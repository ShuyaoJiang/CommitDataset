[+++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +import org.elasticsearch.node.Node;, +     * If the node is not a data node, we will never need so much threads, so we, +     * just return 1 here, which still allows to execute a watch locally, but, +     * there is no need of managing any more threads here, +     *, +        boolean isDataNode = Node.NODE_DATA_SETTING.get(settings);, +        if (isDataNode) {, +        } else {, +            return 1;, +        }, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/Watcher.java, +import org.elasticsearch.node.Node;, +     * If the node is not a data node, we will never need so much threads, so we, +     * just return 1 here, which still allows to execute a watch locally, but, +     * there is no need of managing any more threads here, +     *, +        boolean isDataNode = Node.NODE_DATA_SETTING.get(settings);, +        if (isDataNode) {, +        } else {, +            return 1;, +        }, +++ b/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/WatcherPluginTests.java, +, +        Settings noDataNodeSettings = Settings.builder(), +                .put("processors", scaledRandomIntBetween(1, 100)), +                .put("node.data", false), +                .build();, +        assertThat(Watcher.getWatcherThreadPoolSize(noDataNodeSettings), is(1));]