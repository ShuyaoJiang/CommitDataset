[+++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        try (Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))))) {, +        }, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        try (Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))))) {, +        }, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +        try (Response response = getRestClient().performRequest("GET", "/",, +                new BasicHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW))) {, +    }, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        try (Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))))) {, +        }, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +        try (Response response = getRestClient().performRequest("GET", "/",, +                new BasicHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW))) {, +    }, +++ b/elasticsearch/qa/smoke-test-graph-with-security/src/test/java/org/elasticsearch/smoketest/GraphWithSecurityInsufficientRoleIT.java, +            fail();, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        try (Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))))) {, +        }, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +        try (Response response = getRestClient().performRequest("GET", "/",, +                new BasicHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW))) {, +    }, +++ b/elasticsearch/qa/smoke-test-graph-with-security/src/test/java/org/elasticsearch/smoketest/GraphWithSecurityInsufficientRoleIT.java, +            fail();, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/security/MonitoringSettingsFilterTests.java, +import java.util.Collections;, +import static org.hamcrest.Matchers.equalTo;, +        try (Response response = getRestClient().performRequest("GET", "/_nodes/settings",, +                Collections.emptyMap(), null, headers)) {, +    }, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        try (Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))))) {, +        }, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +        try (Response response = getRestClient().performRequest("GET", "/",, +                new BasicHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW))) {, +    }, +++ b/elasticsearch/qa/smoke-test-graph-with-security/src/test/java/org/elasticsearch/smoketest/GraphWithSecurityInsufficientRoleIT.java, +            fail();, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/security/MonitoringSettingsFilterTests.java, +import java.util.Collections;, +import static org.hamcrest.Matchers.equalTo;, +        try (Response response = getRestClient().performRequest("GET", "/_nodes/settings",, +                Collections.emptyMap(), null, headers)) {, +    }, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +        final SecurityContext securityContext = new SecurityContext(settings, threadPool, cryptoService);, +        components.add(securityContext);, +++ b/elasticsearch/qa/audit-tests/src/test/java/org/elasticsearch/xpack/security/audit/IndexAuditIT.java, +        try (Response response = getRestClient().performRequest("GET", "/",, +                        UsernamePasswordToken.basicAuthHeaderValue(USER, new SecuredString(PASS.toCharArray()))))) {, +        }, +++ b/elasticsearch/qa/security-example-realm/src/test/java/org/elasticsearch/example/realm/CustomRealmIT.java, +        try (Response response = getRestClient().performRequest("GET", "/",, +                new BasicHeader(CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW))) {, +    }, +++ b/elasticsearch/qa/smoke-test-graph-with-security/src/test/java/org/elasticsearch/smoketest/GraphWithSecurityInsufficientRoleIT.java, +            fail();, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/security/MonitoringSettingsFilterTests.java, +import java.util.Collections;, +import static org.hamcrest.Matchers.equalTo;, +        try (Response response = getRestClient().performRequest("GET", "/_nodes/settings",, +                Collections.emptyMap(), null, headers)) {, +    }, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +        final SecurityContext securityContext = new SecurityContext(settings, threadPool, cryptoService);, +        components.add(securityContext);, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/SecurityContext.java, +, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.security.authc.Authentication;, +import org.elasticsearch.xpack.security.authc.InternalAuthenticationService;, +import org.elasticsearch.xpack.security.crypto.CryptoService;, +import org.elasticsearch.xpack.security.user.User;, + * A lightweight utility that can find the current user and authentication information for the local thread., +public class SecurityContext {, +    private final ESLogger logger;, +    private final CryptoService cryptoService;, +    private final boolean signUserHeader;, +    /**, +     * Creates a new security context., +     * If cryptoService is null, security is disabled and {@link #getUser()}, +     * and {@link #getAuthentication()} will always return null., +     */, +    public SecurityContext(Settings settings, ThreadPool threadPool, CryptoService cryptoService) {, +        this.logger = Loggers.getLogger(getClass(), settings);, +        this.cryptoService = cryptoService;]