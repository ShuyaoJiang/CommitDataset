[+++ /dev/null, +++ /dev/null, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +            return SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Boolean>() {, +            SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Boolean>() {, +        SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Void>() {, +        return SecurityUtils.execute(blobStore.getRepository(), new FcCallback<InputStream>() {, +                return fc.open(new Path(path, blobName), blobStore.getBufferSizeInBytes());, +        SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Void>() {, +                CreateOpts[] opts = { CreateOpts.bufferSize(blobStore.getBufferSizeInBytes()) };, +                    byte[] buffer = new byte[blobStore.getBufferSizeInBytes()];, +        FileStatus[] files = SecurityUtils.execute(blobStore.getRepository(), new FcCallback<FileStatus[]>() {, +        FileStatus[] files = SecurityUtils.execute(blobStore.getRepository(), new FcCallback<FileStatus[]>() {, +++ /dev/null, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +            return SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Boolean>() {, +            SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Boolean>() {, +        SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Void>() {, +        return SecurityUtils.execute(blobStore.getRepository(), new FcCallback<InputStream>() {, +                return fc.open(new Path(path, blobName), blobStore.getBufferSizeInBytes());, +        SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Void>() {, +                CreateOpts[] opts = { CreateOpts.bufferSize(blobStore.getBufferSizeInBytes()) };, +                    byte[] buffer = new byte[blobStore.getBufferSizeInBytes()];, +        FileStatus[] files = SecurityUtils.execute(blobStore.getRepository(), new FcCallback<FileStatus[]>() {, +        FileStatus[] files = SecurityUtils.execute(blobStore.getRepository(), new FcCallback<FileStatus[]>() {, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobStore.java, +    private final HdfsRepository repository;, +    HdfsBlobStore(Settings settings, HdfsRepository repository, Path root) throws IOException {, +        this.repository = repository;, +        SecurityUtils.execute(repository, new FcCallback<Void>() {, +    HdfsRepository getRepository() {, +        return repository;, +    int getBufferSizeInBytes() {, +        SecurityUtils.execute(repository, new FcCallback<Void>() {, +++ /dev/null, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +            return SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Boolean>() {, +            SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Boolean>() {, +        SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Void>() {, +        return SecurityUtils.execute(blobStore.getRepository(), new FcCallback<InputStream>() {, +                return fc.open(new Path(path, blobName), blobStore.getBufferSizeInBytes());, +        SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Void>() {, +                CreateOpts[] opts = { CreateOpts.bufferSize(blobStore.getBufferSizeInBytes()) };, +                    byte[] buffer = new byte[blobStore.getBufferSizeInBytes()];, +        FileStatus[] files = SecurityUtils.execute(blobStore.getRepository(), new FcCallback<FileStatus[]>() {, +        FileStatus[] files = SecurityUtils.execute(blobStore.getRepository(), new FcCallback<FileStatus[]>() {, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobStore.java, +    private final HdfsRepository repository;, +    HdfsBlobStore(Settings settings, HdfsRepository repository, Path root) throws IOException {, +        this.repository = repository;, +        SecurityUtils.execute(repository, new FcCallback<Void>() {, +    HdfsRepository getRepository() {, +        return repository;, +    int getBufferSizeInBytes() {, +        SecurityUtils.execute(repository, new FcCallback<Void>() {, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsRepository.java, +public final class HdfsRepository extends BlobStoreRepository {, +    FileContext getFileContext() throws IOException {, +++ /dev/null, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobContainer.java, +            return SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Boolean>() {, +            SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Boolean>() {, +        SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Void>() {, +        return SecurityUtils.execute(blobStore.getRepository(), new FcCallback<InputStream>() {, +                return fc.open(new Path(path, blobName), blobStore.getBufferSizeInBytes());, +        SecurityUtils.execute(blobStore.getRepository(), new FcCallback<Void>() {, +                CreateOpts[] opts = { CreateOpts.bufferSize(blobStore.getBufferSizeInBytes()) };, +                    byte[] buffer = new byte[blobStore.getBufferSizeInBytes()];, +        FileStatus[] files = SecurityUtils.execute(blobStore.getRepository(), new FcCallback<FileStatus[]>() {, +        FileStatus[] files = SecurityUtils.execute(blobStore.getRepository(), new FcCallback<FileStatus[]>() {, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsBlobStore.java, +    private final HdfsRepository repository;, +    HdfsBlobStore(Settings settings, HdfsRepository repository, Path root) throws IOException {, +        this.repository = repository;, +        SecurityUtils.execute(repository, new FcCallback<Void>() {, +    HdfsRepository getRepository() {, +        return repository;, +    int getBufferSizeInBytes() {, +        SecurityUtils.execute(repository, new FcCallback<Void>() {, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsRepository.java, +public final class HdfsRepository extends BlobStoreRepository {, +    FileContext getFileContext() throws IOException {, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/SecurityUtils.java, +    static <V> V execute(HdfsRepository repository, FcCallback<V> callback) throws IOException {, +        return execute(repository.getFileContext(), callback);]