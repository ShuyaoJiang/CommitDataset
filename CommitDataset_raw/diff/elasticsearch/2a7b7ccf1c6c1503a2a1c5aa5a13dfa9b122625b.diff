[+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +            cancelActivePublication("become candidate: " + method);, +        cancelActivePublication("become follower: " + method);, +                            publication.cancel("timed out after " + publishTimeout);, +    private void cancelActivePublication(String reason) {, +            currentPublication.get().cancel(reason);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +            cancelActivePublication("become candidate: " + method);, +        cancelActivePublication("become follower: " + method);, +                            publication.cancel("timed out after " + publishTimeout);, +    private void cancelActivePublication(String reason) {, +            currentPublication.get().cancel(reason);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Publication.java, +    private boolean cancelled; // set when publication is cancelled, +    public void cancel(String reason) {, +        assert cancelled == false;, +        cancelled = true;, +            logger.debug("cancel: [{}] cancelled before committing (reason: {})", this, reason);, +            final Exception e = new ElasticsearchException("publication cancelled before committing: " + reason);, +        if (cancelled == false) {, +    private boolean publicationCompletedIffAllTargetsInactiveOrCancelled() {, +        if (cancelled == false) {, +            assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +            assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +                    assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +                assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +                assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +                assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +                assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +            cancelActivePublication("become candidate: " + method);, +        cancelActivePublication("become follower: " + method);, +                            publication.cancel("timed out after " + publishTimeout);, +    private void cancelActivePublication(String reason) {, +            currentPublication.get().cancel(reason);, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Publication.java, +    private boolean cancelled; // set when publication is cancelled, +    public void cancel(String reason) {, +        assert cancelled == false;, +        cancelled = true;, +            logger.debug("cancel: [{}] cancelled before committing (reason: {})", this, reason);, +            final Exception e = new ElasticsearchException("publication cancelled before committing: " + reason);, +        if (cancelled == false) {, +    private boolean publicationCompletedIffAllTargetsInactiveOrCancelled() {, +        if (cancelled == false) {, +            assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +            assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +                    assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +                assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +                assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +                assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +                assert publicationCompletedIffAllTargetsInactiveOrCancelled();, +++ b/server/src/test/java/org/elasticsearch/cluster/coordination/PublicationTests.java, +                    publication.cancel("timed out");, +        publication.cancel("timed out");]