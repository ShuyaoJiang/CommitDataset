[+++ b/src/main/java/org/elasticsearch/alerts/Payload.java, +import org.elasticsearch.common.collect.MapBuilder;, +        public Simple(String key, Object value) {, +            this(new MapBuilder<String, Object>().put(key, value).map());, +        }, +, +++ b/src/main/java/org/elasticsearch/alerts/Payload.java, +import org.elasticsearch.common.collect.MapBuilder;, +        public Simple(String key, Object value) {, +            this(new MapBuilder<String, Object>().put(key, value).map());, +        }, +, +++ b/src/main/java/org/elasticsearch/alerts/actions/Action.java, +import org.elasticsearch.alerts.transform.Transform;, +    protected final Transform transform;, +    protected Action(ESLogger logger, Transform transform) {, +        this.transform = transform;, +    }, +, +    /**, +     * @return the transform associated with this action (may be {@code null}), +     */, +    public Transform transform() {, +        return transform;, +    public final R execute(ExecutionContext context, Payload payload) throws IOException {, +        Transform.Result transformResult = null;, +        if (transform != null) {, +            transformResult = transform.apply(context, payload);, +            payload = transformResult.payload();, +        }, +        R result = doExecute(context, payload);, +        if (transformResult != null) {, +            result.transformResult = transformResult;, +        }, +        return result;, +    }, +, +    protected abstract R doExecute(ExecutionContext context, Payload payload) throws IOException;, +        protected Transform.Result transformResult;, +, +        public Transform.Result transformResult() {, +            return transformResult;, +        }, +, +            if (transformResult != null) {, +                builder.field(Transform.Parser.TRANSFORM_RESULT_FIELD.getPreferredName(), transformResult);, +            }, +++ b/src/main/java/org/elasticsearch/alerts/Payload.java, +import org.elasticsearch.common.collect.MapBuilder;, +        public Simple(String key, Object value) {, +            this(new MapBuilder<String, Object>().put(key, value).map());, +        }, +, +++ b/src/main/java/org/elasticsearch/alerts/actions/Action.java, +import org.elasticsearch.alerts.transform.Transform;, +    protected final Transform transform;, +    protected Action(ESLogger logger, Transform transform) {, +        this.transform = transform;, +    }, +, +    /**, +     * @return the transform associated with this action (may be {@code null}), +     */, +    public Transform transform() {, +        return transform;, +    public final R execute(ExecutionContext context, Payload payload) throws IOException {, +        Transform.Result transformResult = null;, +        if (transform != null) {, +            transformResult = transform.apply(context, payload);, +            payload = transformResult.payload();, +        }, +        R result = doExecute(context, payload);, +        if (transformResult != null) {, +            result.transformResult = transformResult;, +        }, +        return result;, +    }, +, +    protected abstract R doExecute(ExecutionContext context, Payload payload) throws IOException;, +        protected Transform.Result transformResult;, +, +        public Transform.Result transformResult() {, +            return transformResult;, +        }, +, +            if (transformResult != null) {, +                builder.field(Transform.Parser.TRANSFORM_RESULT_FIELD.getPreferredName(), transformResult);, +            }, +++ b/src/main/java/org/elasticsearch/alerts/actions/email/EmailAction.java, +import org.elasticsearch.alerts.transform.Transform;, +import org.elasticsearch.alerts.transform.TransformRegistry;, +import org.elasticsearch.common.Nullable;, +    public EmailAction(ESLogger logger, @Nullable Transform transform, EmailService emailService, Email emailPrototype, Authentication auth, Profile profile,, +        super(logger, transform);, +    public Result doExecute(ExecutionContext ctx, Payload payload) throws IOException {, +        return Objects.hash(emailPrototype, auth, profile, account, subject, textBody, htmlBody, attachPayload, transform);, +                && Objects.equals(this.attachPayload, other.attachPayload), +                && Objects.equals(this.transform, other.transform);, +        if (transform != null) {, +            builder.startObject(Transform.Parser.TRANSFORM_FIELD.getPreferredName())]