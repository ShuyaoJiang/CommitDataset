[+++ b/core/src/main/java/org/elasticsearch/common/unit/SizeValue.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class SizeValue implements Writeable {, +    private final long size;, +    private final SizeUnit sizeUnit;, +    public SizeValue(StreamInput in) throws IOException {, +        size = in.readVLong();, +        sizeUnit = SizeUnit.SINGLE;, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVLong(singles());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/unit/SizeValue.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class SizeValue implements Writeable {, +    private final long size;, +    private final SizeUnit sizeUnit;, +    public SizeValue(StreamInput in) throws IOException {, +        size = in.readVLong();, +        sizeUnit = SizeUnit.SINGLE;, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVLong(singles());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +import org.elasticsearch.common.io.stream.Writeable;, +    public static class Info implements Writeable, ToXContent {, +        private final String name;, +        private final ThreadPoolType type;, +        private final int min;, +        private final int max;, +        private final TimeValue keepAlive;, +        private final SizeValue queueSize;, +        public Info(StreamInput in) throws IOException {, +            name = in.readString();, +            type = ThreadPoolType.fromType(in.readString());, +            min = in.readInt();, +            max = in.readInt();, +            keepAlive = in.readOptionalWriteable(TimeValue::new);, +            queueSize = in.readOptionalWriteable(SizeValue::new);, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeString(name);, +            out.writeString(type.getType());, +            out.writeInt(min);, +            out.writeInt(max);, +            out.writeOptionalWriteable(keepAlive);, +            out.writeOptionalWriteable(queueSize);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/common/unit/SizeValue.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class SizeValue implements Writeable {, +    private final long size;, +    private final SizeUnit sizeUnit;, +    public SizeValue(StreamInput in) throws IOException {, +        size = in.readVLong();, +        sizeUnit = SizeUnit.SINGLE;, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeVLong(singles());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +import org.elasticsearch.common.io.stream.Writeable;, +    public static class Info implements Writeable, ToXContent {, +        private final String name;, +        private final ThreadPoolType type;, +        private final int min;, +        private final int max;, +        private final TimeValue keepAlive;, +        private final SizeValue queueSize;, +        public Info(StreamInput in) throws IOException {, +            name = in.readString();, +            type = ThreadPoolType.fromType(in.readString());, +            min = in.readInt();, +            max = in.readInt();, +            keepAlive = in.readOptionalWriteable(TimeValue::new);, +            queueSize = in.readOptionalWriteable(SizeValue::new);, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            out.writeString(name);, +            out.writeString(type.getType());, +            out.writeInt(min);, +            out.writeInt(max);, +            out.writeOptionalWriteable(keepAlive);, +            out.writeOptionalWriteable(queueSize);, +        }]