[+++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        long updateVersion = getResult.getVersion();, +, +        if (request.versionType() != VersionType.INTERNAL) {, +            assert request.versionType() == VersionType.FORCE;, +            updateVersion = request.version(); // remember, match_any is excluded by the conflict test, +        }, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        long updateVersion = getResult.getVersion();, +, +        if (request.versionType() != VersionType.INTERNAL) {, +            assert request.versionType() == VersionType.FORCE;, +            updateVersion = request.version(); // remember, match_any is excluded by the conflict test, +        }, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +        if (!(versionType == VersionType.INTERNAL || versionType == VersionType.FORCE)) {, +            validationException = addValidationError("version type [" + versionType + "] is not supported by the update API", validationException);, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        long updateVersion = getResult.getVersion();, +, +        if (request.versionType() != VersionType.INTERNAL) {, +            assert request.versionType() == VersionType.FORCE;, +            updateVersion = request.version(); // remember, match_any is excluded by the conflict test, +        }, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +        if (!(versionType == VersionType.INTERNAL || versionType == VersionType.FORCE)) {, +            validationException = addValidationError("version type [" + versionType + "] is not supported by the update API", validationException);, +++ b/core/src/main/java/org/elasticsearch/index/VersionType.java, +    },, +    /**, +     * Warning: this version type should be used with care. Concurrent indexing may result in loss of data on replicas, +     */, +    FORCE((byte) 3) {, +        @Override, +        public boolean isVersionConflictForWrites(long currentVersion, long expectedVersion, boolean deleted) {, +            if (currentVersion == Versions.NOT_FOUND) {, +                return false;, +            }, +            if (expectedVersion == Versions.MATCH_ANY) {, +                throw new IllegalStateException("you must specify a version when use VersionType.FORCE");, +            }, +            return false;, +        }, +, +        @Override, +        public String explainConflictForWrites(long currentVersion, long expectedVersion, boolean deleted) {, +            throw new AssertionError("VersionType.FORCE should never result in a write conflict");, +        }, +, +        @Override, +        public boolean isVersionConflictForReads(long currentVersion, long expectedVersion) {, +            return false;, +        }, +, +        @Override, +        public String explainConflictForReads(long currentVersion, long expectedVersion) {, +            throw new AssertionError("VersionType.FORCE should never result in a read conflict");, +        }, +, +        @Override, +        public long updateVersion(long currentVersion, long expectedVersion) {, +            return expectedVersion;, +        }, +, +        @Override, +        public boolean validateVersionForWrites(long version) {, +            return version >= 0L;, +        }, +, +        @Override, +        public boolean validateVersionForReads(long version) {, +            return version >= 0L || version == Versions.MATCH_ANY;, +        }, +, +        } else if ("force".equals(versionType)) {, +            return FORCE;, +        } else if (value == 3) {, +            return FORCE;, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateHelper.java, +        long updateVersion = getResult.getVersion();, +, +        if (request.versionType() != VersionType.INTERNAL) {, +            assert request.versionType() == VersionType.FORCE;, +            updateVersion = request.version(); // remember, match_any is excluded by the conflict test, +        }, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +        if (!(versionType == VersionType.INTERNAL || versionType == VersionType.FORCE)) {, +            validationException = addValidationError("version type [" + versionType + "] is not supported by the update API", validationException);, +++ b/core/src/main/java/org/elasticsearch/index/VersionType.java, +    },, +    /**, +     * Warning: this version type should be used with care. Concurrent indexing may result in loss of data on replicas, +     */, +    FORCE((byte) 3) {, +        @Override, +        public boolean isVersionConflictForWrites(long currentVersion, long expectedVersion, boolean deleted) {, +            if (currentVersion == Versions.NOT_FOUND) {, +                return false;, +            }, +            if (expectedVersion == Versions.MATCH_ANY) {]