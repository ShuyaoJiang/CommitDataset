[+++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/RandomExceptionCircuitBreakerTests.java, +import org.elasticsearch.test.ImmutableTestCluster;, +                final long seed = settings.getAsLong(ImmutableTestCluster.SETTING_INDEX_SEED, 0l);, +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/RandomExceptionCircuitBreakerTests.java, +import org.elasticsearch.test.ImmutableTestCluster;, +                final long seed = settings.getAsLong(ImmutableTestCluster.SETTING_INDEX_SEED, 0l);, +++ b/src/test/java/org/elasticsearch/search/basic/SearchWithRandomExceptionsTests.java, +import org.elasticsearch.test.ImmutableTestCluster;, +                final long seed = settings.getAsLong(ImmutableTestCluster.SETTING_INDEX_SEED, 0l);, +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/RandomExceptionCircuitBreakerTests.java, +import org.elasticsearch.test.ImmutableTestCluster;, +                final long seed = settings.getAsLong(ImmutableTestCluster.SETTING_INDEX_SEED, 0l);, +++ b/src/test/java/org/elasticsearch/search/basic/SearchWithRandomExceptionsTests.java, +import org.elasticsearch.test.ImmutableTestCluster;, +                final long seed = settings.getAsLong(ImmutableTestCluster.SETTING_INDEX_SEED, 0l);, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +    private static ImmutableTestCluster currentCluster;, +    private static final Map<Class<?>, ImmutableTestCluster> clusters = new IdentityHashMap<>();, +            immutableCluster().beforeTest(getRandom(), getPerTestTransportClientRatio());, +            immutableCluster().wipe();, +            immutableCluster().randomIndexTemplate();, +    public ImmutableTestCluster buildAndPutCluster(Scope currentClusterScope, boolean createIfExists) throws IOException {, +        ImmutableTestCluster testCluster = clusters.get(this.getClass());, +            for (ImmutableTestCluster cluster : clusters.values()) {, +                immutableCluster().wipe(); // wipe after to make sure we fail in the test that didn't ack the delete, +                immutableCluster().assertAfterTest();, +    public static ImmutableTestCluster immutableCluster() {, +    public static TestCluster cluster() {, +        if (!(currentCluster instanceof  TestCluster)) {, +            throw new UnsupportedOperationException("current test cluster is immutable");, +        }, +        return (TestCluster) currentCluster;, +    }, +, +        Client client = immutableCluster().client();, +, +        return immutableCluster();, +        return ImmutableTestCluster.DEFAULT_MIN_NUM_SHARDS;, +        return ImmutableTestCluster.DEFAULT_MAX_NUM_SHARDS;, +                    immutableCluster().wipeIndices(created.toArray(new String[created.size()]));, +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/RandomExceptionCircuitBreakerTests.java, +import org.elasticsearch.test.ImmutableTestCluster;, +                final long seed = settings.getAsLong(ImmutableTestCluster.SETTING_INDEX_SEED, 0l);, +++ b/src/test/java/org/elasticsearch/search/basic/SearchWithRandomExceptionsTests.java, +import org.elasticsearch.test.ImmutableTestCluster;, +                final long seed = settings.getAsLong(ImmutableTestCluster.SETTING_INDEX_SEED, 0l);, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +    private static ImmutableTestCluster currentCluster;, +    private static final Map<Class<?>, ImmutableTestCluster> clusters = new IdentityHashMap<>();, +            immutableCluster().beforeTest(getRandom(), getPerTestTransportClientRatio());, +            immutableCluster().wipe();, +            immutableCluster().randomIndexTemplate();, +    public ImmutableTestCluster buildAndPutCluster(Scope currentClusterScope, boolean createIfExists) throws IOException {, +        ImmutableTestCluster testCluster = clusters.get(this.getClass());, +            for (ImmutableTestCluster cluster : clusters.values()) {, +                immutableCluster().wipe(); // wipe after to make sure we fail in the test that didn't ack the delete, +                immutableCluster().assertAfterTest();, +    public static ImmutableTestCluster immutableCluster() {, +    public static TestCluster cluster() {, +        if (!(currentCluster instanceof  TestCluster)) {, +            throw new UnsupportedOperationException("current test cluster is immutable");, +        }, +        return (TestCluster) currentCluster;, +    }, +, +        Client client = immutableCluster().client();, +, +        return immutableCluster();, +        return ImmutableTestCluster.DEFAULT_MIN_NUM_SHARDS;, +        return ImmutableTestCluster.DEFAULT_MAX_NUM_SHARDS;, +                    immutableCluster().wipeIndices(created.toArray(new String[created.size()]));, +++ b/src/test/java/org/elasticsearch/test/ImmutableTestCluster.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test;, +, +import com.carrotsearch.hppc.ObjectArrayList;, +import com.carrotsearch.randomizedtesting.generators.RandomInts;, +import com.carrotsearch.randomizedtesting.generators.RandomPicks;, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.action.admin.cluster.node.stats.NodeStats;, +import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;, +import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;]