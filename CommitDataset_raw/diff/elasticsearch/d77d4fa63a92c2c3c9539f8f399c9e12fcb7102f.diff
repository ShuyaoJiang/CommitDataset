[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestNodesAction.java, +        final boolean fullId = request.paramAsBoolean("full_id", false);, +                                return RestTable.buildResponse(buildTable(fullId, request, clusterStateResponse, nodesInfoResponse,, +                                    nodesStatsResponse), channel);, +        table.addCell("file_desc.percent",, +            "default:false;alias:fdp,fileDescriptorPercent;text-align:right;desc:used file descriptor ratio");, +        table.addCell("node.role",, +            "alias:r,role,nodeRole;desc:m:master eligible node, d:data node, i:ingest node, -:coordinating node only");, +        table.addCell("request_cache.evictions",, +            "alias:rce,requestCacheEvictions;default:false;text-align:right;desc:request cache evictions");, +        table.addCell("request_cache.hit_count",, +            "alias:rchc,requestCacheHitCount;default:false;text-align:right;desc:request cache hit counts");, +        table.addCell("request_cache.miss_count",, +            "alias:rcmc,requestCacheMissCount;default:false;text-align:right;desc:request cache miss counts");, +        table.addCell("indexing.delete_current",, +            "alias:idc,indexingDeleteCurrent;default:false;text-align:right;desc:number of current deletions");, +        table.addCell("indexing.index_current",, +            "alias:iic,indexingIndexCurrent;default:false;text-align:right;desc:number of current indexing ops");, +        table.addCell("indexing.index_failed",, +            "alias:iif,indexingIndexFailed;default:false;text-align:right;desc:number of failed indexing ops");, +        table.addCell("merges.current_docs",, +            "alias:mcd,mergesCurrentDocs;default:false;text-align:right;desc:number of current merging docs");, +        table.addCell("script.cache_evictions",, +            "alias:scrce,scriptCacheEvictions;default:false;text-align:right;desc:script cache evictions");, +        table.addCell("search.scroll_time",, +            "alias:scti,searchScrollTime;default:false;text-align:right;desc:time scroll contexts held open");, +        table.addCell("segments.index_writer_memory",, +            "alias:siwm,segmentsIndexWriterMemory;default:false;text-align:right;desc:memory used by index writer");, +        table.addCell("segments.version_map_memory",, +            "alias:svmm,segmentsVersionMapMemory;default:false;text-align:right;desc:memory used by version map");, +        table.addCell("segments.fixed_bitset_memory",, +            "alias:sfbm,fixedBitsetMemory;default:false;text-align:right;desc:memory used by fixed bit sets for nested object field types" +, +                " and type filters for types referred in _parent fields");, +    private Table buildTable(boolean fullId, RestRequest req, ClusterStateResponse state, NodesInfoResponse nodesInfo,, +                             NodesStatsResponse nodesStats) {, +            table.addCell(processStats == null ? null : calculatePercentage(processStats.getOpenFileDescriptors(),, +                processStats.getMaxFileDescriptors()));, +            table.addCell(!hasLoadAverage || osStats.getCpu().getLoadAverage()[0] == -1 ? null :, +                String.format(Locale.ROOT, "%.2f", osStats.getCpu().getLoadAverage()[0]));, +            table.addCell(!hasLoadAverage || osStats.getCpu().getLoadAverage()[1] == -1 ? null :, +                String.format(Locale.ROOT, "%.2f", osStats.getCpu().getLoadAverage()[1]));, +            table.addCell(!hasLoadAverage || osStats.getCpu().getLoadAverage()[2] == -1 ? null :, +                String.format(Locale.ROOT, "%.2f", osStats.getCpu().getLoadAverage()[2]));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestNodesAction.java, +        final boolean fullId = request.paramAsBoolean("full_id", false);, +                                return RestTable.buildResponse(buildTable(fullId, request, clusterStateResponse, nodesInfoResponse,, +                                    nodesStatsResponse), channel);, +        table.addCell("file_desc.percent",, +            "default:false;alias:fdp,fileDescriptorPercent;text-align:right;desc:used file descriptor ratio");, +        table.addCell("node.role",, +            "alias:r,role,nodeRole;desc:m:master eligible node, d:data node, i:ingest node, -:coordinating node only");, +        table.addCell("request_cache.evictions",, +            "alias:rce,requestCacheEvictions;default:false;text-align:right;desc:request cache evictions");, +        table.addCell("request_cache.hit_count",, +            "alias:rchc,requestCacheHitCount;default:false;text-align:right;desc:request cache hit counts");, +        table.addCell("request_cache.miss_count",, +            "alias:rcmc,requestCacheMissCount;default:false;text-align:right;desc:request cache miss counts");, +        table.addCell("indexing.delete_current",, +            "alias:idc,indexingDeleteCurrent;default:false;text-align:right;desc:number of current deletions");, +        table.addCell("indexing.index_current",, +            "alias:iic,indexingIndexCurrent;default:false;text-align:right;desc:number of current indexing ops");, +        table.addCell("indexing.index_failed",, +            "alias:iif,indexingIndexFailed;default:false;text-align:right;desc:number of failed indexing ops");, +        table.addCell("merges.current_docs",, +            "alias:mcd,mergesCurrentDocs;default:false;text-align:right;desc:number of current merging docs");, +        table.addCell("script.cache_evictions",, +            "alias:scrce,scriptCacheEvictions;default:false;text-align:right;desc:script cache evictions");, +        table.addCell("search.scroll_time",, +            "alias:scti,searchScrollTime;default:false;text-align:right;desc:time scroll contexts held open");, +        table.addCell("segments.index_writer_memory",, +            "alias:siwm,segmentsIndexWriterMemory;default:false;text-align:right;desc:memory used by index writer");, +        table.addCell("segments.version_map_memory",, +            "alias:svmm,segmentsVersionMapMemory;default:false;text-align:right;desc:memory used by version map");, +        table.addCell("segments.fixed_bitset_memory",, +            "alias:sfbm,fixedBitsetMemory;default:false;text-align:right;desc:memory used by fixed bit sets for nested object field types" +, +                " and type filters for types referred in _parent fields");, +    private Table buildTable(boolean fullId, RestRequest req, ClusterStateResponse state, NodesInfoResponse nodesInfo,, +                             NodesStatsResponse nodesStats) {, +            table.addCell(processStats == null ? null : calculatePercentage(processStats.getOpenFileDescriptors(),, +                processStats.getMaxFileDescriptors()));, +            table.addCell(!hasLoadAverage || osStats.getCpu().getLoadAverage()[0] == -1 ? null :, +                String.format(Locale.ROOT, "%.2f", osStats.getCpu().getLoadAverage()[0]));, +            table.addCell(!hasLoadAverage || osStats.getCpu().getLoadAverage()[1] == -1 ? null :, +                String.format(Locale.ROOT, "%.2f", osStats.getCpu().getLoadAverage()[1]));, +            table.addCell(!hasLoadAverage || osStats.getCpu().getLoadAverage()[2] == -1 ? null :, +                String.format(Locale.ROOT, "%.2f", osStats.getCpu().getLoadAverage()[2]));, +++ b/rest-api-spec/src/main/resources/rest-api-spec/api/cat.nodes.json, +        "full_id": {, +          "type" : "boolean",, +          "description" : "Return the full node ID instead of the shortened version (default: false)", +        },, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestNodesAction.java, +        final boolean fullId = request.paramAsBoolean("full_id", false);, +                                return RestTable.buildResponse(buildTable(fullId, request, clusterStateResponse, nodesInfoResponse,, +                                    nodesStatsResponse), channel);, +        table.addCell("file_desc.percent",]