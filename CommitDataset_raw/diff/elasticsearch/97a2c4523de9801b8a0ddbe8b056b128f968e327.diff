[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JNAKernel32Library.java, +import com.sun.jna.WString;, +     * Retrieves the short path form of the specified path. See, +     * <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa364989.aspx">{@code GetShortPathName}</a>., +     *, +     * @param lpszLongPath  the path string, +     * @param lpszShortPath a buffer to receive the short name, +     * @param cchBuffer     the size of the buffer, +     * @return the length of the string copied into {@code lpszShortPath}, otherwise zero for failure, +     */, +    native int GetShortPathNameW(WString lpszLongPath, char[] lpszShortPath, int cchBuffer);, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNAKernel32Library.java, +import com.sun.jna.WString;, +     * Retrieves the short path form of the specified path. See, +     * <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa364989.aspx">{@code GetShortPathName}</a>., +     *, +     * @param lpszLongPath  the path string, +     * @param lpszShortPath a buffer to receive the short name, +     * @param cchBuffer     the size of the buffer, +     * @return the length of the string copied into {@code lpszShortPath}, otherwise zero for failure, +     */, +    native int GetShortPathNameW(WString lpszLongPath, char[] lpszShortPath, int cchBuffer);, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +import com.sun.jna.WString;, +    /**, +     * Retrieves the short path form of the specified path., +     *, +     * @param path the path, +     * @return the short path name (or the original path if getting the short path name fails for any reason), +     */, +    static String getShortPathName(String path) {, +        assert Constants.WINDOWS;, +        try {, +            final WString longPath = new WString("\\\\?\\" + path);, +            // first we get the length of the buffer needed, +            final int length = JNAKernel32Library.getInstance().GetShortPathNameW(longPath, null, 0);, +            if (length == 0) {, +                logger.warn("failed to get short path name: {}", Native.getLastError());, +                return path;, +            }, +            final char[] shortPath = new char[length];, +            // knowing the length of the buffer, now we get the short name, +            if (JNAKernel32Library.getInstance().GetShortPathNameW(longPath, shortPath, length) > 0) {, +                return Native.toString(shortPath);, +            } else {, +                logger.warn("failed to get short path name: {}", Native.getLastError());, +                return path;, +            }, +        } catch (final UnsatisfiedLinkError e) {, +            return path;, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNAKernel32Library.java, +import com.sun.jna.WString;, +     * Retrieves the short path form of the specified path. See, +     * <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa364989.aspx">{@code GetShortPathName}</a>., +     *, +     * @param lpszLongPath  the path string, +     * @param lpszShortPath a buffer to receive the short name, +     * @param cchBuffer     the size of the buffer, +     * @return the length of the string copied into {@code lpszShortPath}, otherwise zero for failure, +     */, +    native int GetShortPathNameW(WString lpszLongPath, char[] lpszShortPath, int cchBuffer);, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +import com.sun.jna.WString;, +    /**, +     * Retrieves the short path form of the specified path., +     *, +     * @param path the path, +     * @return the short path name (or the original path if getting the short path name fails for any reason), +     */, +    static String getShortPathName(String path) {, +        assert Constants.WINDOWS;, +        try {, +            final WString longPath = new WString("\\\\?\\" + path);, +            // first we get the length of the buffer needed, +            final int length = JNAKernel32Library.getInstance().GetShortPathNameW(longPath, null, 0);, +            if (length == 0) {, +                logger.warn("failed to get short path name: {}", Native.getLastError());, +                return path;, +            }, +            final char[] shortPath = new char[length];, +            // knowing the length of the buffer, now we get the short name, +            if (JNAKernel32Library.getInstance().GetShortPathNameW(longPath, shortPath, length) > 0) {, +                return Native.toString(shortPath);, +            } else {, +                logger.warn("failed to get short path name: {}", Native.getLastError());, +                return path;, +            }, +        } catch (final UnsatisfiedLinkError e) {, +            return path;, +        }, +    }]