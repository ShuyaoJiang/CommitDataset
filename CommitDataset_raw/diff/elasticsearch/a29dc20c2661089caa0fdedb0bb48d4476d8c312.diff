[+++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.apache.lucene.index.FilterLeafReader;, +import org.apache.lucene.index.LeafReader;, +import org.apache.lucene.index.SegmentReader;, +    /**, +     * Tries to extract a segment reader from the given index reader., +     * If no SegmentReader can be extracted an {@link IllegalStateException} is thrown., +     */, +    public static SegmentReader segmentReader(LeafReader reader) {, +        if (reader instanceof SegmentReader) {, +            return (SegmentReader) reader;, +        } else if (reader instanceof FilterLeafReader) {, +            final FilterLeafReader fReader = (FilterLeafReader) reader;, +            return segmentReader(FilterLeafReader.unwrap(fReader));, +        }, +        // hard fail - we can't get a SegmentReader, +        throw new IllegalStateException("Can not extract segment reader from given index reader [" + reader + "]");, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.apache.lucene.index.FilterLeafReader;, +import org.apache.lucene.index.LeafReader;, +import org.apache.lucene.index.SegmentReader;, +    /**, +     * Tries to extract a segment reader from the given index reader., +     * If no SegmentReader can be extracted an {@link IllegalStateException} is thrown., +     */, +    public static SegmentReader segmentReader(LeafReader reader) {, +        if (reader instanceof SegmentReader) {, +            return (SegmentReader) reader;, +        } else if (reader instanceof FilterLeafReader) {, +            final FilterLeafReader fReader = (FilterLeafReader) reader;, +            return segmentReader(FilterLeafReader.unwrap(fReader));, +        }, +        // hard fail - we can't get a SegmentReader, +        throw new IllegalStateException("Can not extract segment reader from given index reader [" + reader + "]");, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        final Map<String, String> diagnostics = Lucene.segmentReader(reader).getSegmentInfo().info.getDiagnostics();, +                final SegmentReader segmentReader = Lucene.segmentReader(reader.reader());, +                final SegmentReader segmentReader = Lucene.segmentReader(reader.reader());, +++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.apache.lucene.index.FilterLeafReader;, +import org.apache.lucene.index.LeafReader;, +import org.apache.lucene.index.SegmentReader;, +    /**, +     * Tries to extract a segment reader from the given index reader., +     * If no SegmentReader can be extracted an {@link IllegalStateException} is thrown., +     */, +    public static SegmentReader segmentReader(LeafReader reader) {, +        if (reader instanceof SegmentReader) {, +            return (SegmentReader) reader;, +        } else if (reader instanceof FilterLeafReader) {, +            final FilterLeafReader fReader = (FilterLeafReader) reader;, +            return segmentReader(FilterLeafReader.unwrap(fReader));, +        }, +        // hard fail - we can't get a SegmentReader, +        throw new IllegalStateException("Can not extract segment reader from given index reader [" + reader + "]");, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +        final Map<String, String> diagnostics = Lucene.segmentReader(reader).getSegmentInfo().info.getDiagnostics();, +                final SegmentReader segmentReader = Lucene.segmentReader(reader.reader());, +                final SegmentReader segmentReader = Lucene.segmentReader(reader.reader());, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.SegmentCommitInfo;, +import org.apache.lucene.index.SegmentReader;, +        // we calculate the doc stats based on the internal reader that is more up-to-date and not subject, +        // to external refreshes. For instance we don't refresh an external reader if we flush and indices with, +        // index.refresh_interval=-1 won't see any doc stats updates at all. This change will give more accurate statistics, +        // when indexing but not refreshing in general. Yet, if a refresh happens the internal reader is refresh as well so we are, +        // safe here., +        try (Engine.Searcher searcher = acquireSearcher("docStats", Engine.SearcherScope.INTERNAL)) {, +            for (LeafReaderContext reader : searcher.reader().leaves()) {, +                // we go on the segment level here to get accurate numbers, +                final SegmentReader segmentReader = Lucene.segmentReader(reader.reader());, +                SegmentCommitInfo info = segmentReader.getSegmentInfo();, +                numDocs += reader.reader().numDocs();, +                numDeletedDocs += reader.reader().numDeletedDocs();, +                try {, +                    sizeInBytes += info.sizeInBytes();, +                } catch (IOException e) {, +                    logger.trace((org.apache.logging.log4j.util.Supplier<?>), +                        () -> new ParameterizedMessage("failed to get size for [{}]", info.info.name), e);, +                }, +++ b/core/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.apache.lucene.index.FilterLeafReader;, +import org.apache.lucene.index.LeafReader;, +import org.apache.lucene.index.SegmentReader;, +    /**, +     * Tries to extract a segment reader from the given index reader., +     * If no SegmentReader can be extracted an {@link IllegalStateException} is thrown., +     */, +    public static SegmentReader segmentReader(LeafReader reader) {, +        if (reader instanceof SegmentReader) {, +            return (SegmentReader) reader;, +        } else if (reader instanceof FilterLeafReader) {]