[+++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/SqlProtocolIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.sql.qa.single_node;, +, +import org.elasticsearch.xpack.sql.qa.SqlProtocolTestCase;, +, +public class SqlProtocolIT extends SqlProtocolTestCase {, +}, +++ b/x-pack/plugin/sql/qa/single-node/src/test/java/org/elasticsearch/xpack/sql/qa/single_node/SqlProtocolIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.sql.qa.single_node;, +, +import org.elasticsearch.xpack.sql.qa.SqlProtocolTestCase;, +, +public class SqlProtocolIT extends SqlProtocolTestCase {, +}, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/SqlProtocolTestCase.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.sql.qa;, +, +import org.apache.http.entity.ContentType;, +import org.apache.http.entity.StringEntity;, +import org.elasticsearch.client.Request;, +import org.elasticsearch.client.RequestOptions;, +import org.elasticsearch.client.Response;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.common.xcontent.cbor.CborXContent;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.common.xcontent.smile.SmileXContent;, +import org.elasticsearch.common.xcontent.yaml.YamlXContent;, +import org.elasticsearch.test.rest.ESRestTestCase;, +import org.elasticsearch.xpack.sql.proto.Mode;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +, +import static org.elasticsearch.xpack.sql.proto.RequestInfo.CLIENT_IDS;, +import static org.elasticsearch.xpack.sql.qa.rest.RestSqlTestCase.mode;, +, +public abstract class SqlProtocolTestCase extends ESRestTestCase {, +, +    public void testNulls() throws IOException {, +        assertQuery("SELECT NULL", "NULL", "null", null, 0);, +    }, +    , +    public void testBooleanType() throws IOException {, +        assertQuery("SELECT TRUE", "TRUE", "boolean", true, 1);, +        assertQuery("SELECT FALSE", "FALSE", "boolean", false, 1);, +    }, +    , +    public void testNumericTypes() throws IOException {, +        assertQuery("SELECT CAST(3 AS TINYINT)", "CAST(3 AS TINYINT)", "byte", 3, 5);, +        assertQuery("SELECT CAST(-123 AS TINYINT)", "CAST(-123 AS TINYINT)", "byte", -123, 5);, +        assertQuery("SELECT CAST(5 AS SMALLINT)", "CAST(5 AS SMALLINT)", "short", 5, 6);, +        assertQuery("SELECT CAST(-25 AS SMALLINT)", "CAST(-25 AS SMALLINT)", "short", -25, 6);, +        assertQuery("SELECT 123", "123", "integer", 123, 11);, +        assertQuery("SELECT -2123", "-2123", "integer", -2123, 11);, +        assertQuery("SELECT 1234567890123", "1234567890123", "long", 1234567890123L, 20);, +        assertQuery("SELECT -1234567890123", "-1234567890123", "long", -1234567890123L, 20);, +        assertQuery("SELECT 1234567890123.34", "1234567890123.34", "double", 1234567890123.34, 25);, +        assertQuery("SELECT -1234567890123.34", "-1234567890123.34", "double", -1234567890123.34, 25);, +        assertQuery("SELECT CAST(1234.34 AS REAL)", "CAST(1234.34 AS REAL)", "float", 1234.34f, 15);, +        assertQuery("SELECT CAST(-1234.34 AS REAL)", "CAST(-1234.34 AS REAL)", "float", -1234.34f, 15);, +        assertQuery("SELECT CAST(1234567890123.34 AS FLOAT)", "CAST(1234567890123.34 AS FLOAT)", "double", 1234567890123.34, 25);, +        assertQuery("SELECT CAST(-1234567890123.34 AS FLOAT)", "CAST(-1234567890123.34 AS FLOAT)", "double", -1234567890123.34, 25);, +    }, +    , +    public void testTextualType() throws IOException {, +        assertQuery("SELECT 'abc123'", "'abc123'", "keyword", "abc123", 0);, +    }, +    , +    public void testDateTimes() throws IOException {, +        assertQuery("SELECT CAST('2019-01-14T12:29:25.000Z' AS DATE)", "CAST('2019-01-14T12:29:25.000Z' AS DATE)", "date",, +                "2019-01-14T12:29:25.000Z", 24);, +        assertQuery("SELECT CAST(-26853765751000 AS DATE)", "CAST(-26853765751000 AS DATE)", "date", "1119-01-15T12:37:29.000Z", 24);, +        assertQuery("SELECT CAST(CAST('-26853765751000' AS BIGINT) AS DATE)", "CAST(CAST('-26853765751000' AS BIGINT) AS DATE)", "date",, +                "1119-01-15T12:37:29.000Z", 24);, +    }, +    ]