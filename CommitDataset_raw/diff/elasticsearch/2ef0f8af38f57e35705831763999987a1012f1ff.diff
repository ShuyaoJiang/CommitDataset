[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        Natives.trySetMaxFileSize();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        Natives.trySetMaxFileSize();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapChecks.java, +        if (Constants.LINUX || Constants.MAC_OS_X) {, +            checks.add(new MaxFileSizeCheck());, +        }, +    /**, +     * Bootstrap check that the maximum file size is unlimited (otherwise Elasticsearch could run in to an I/O exception writing files)., +     */, +    static class MaxFileSizeCheck implements BootstrapCheck {, +, +        @Override, +        public boolean check() {, +            final long maxFileSize = getMaxFileSize();, +            return maxFileSize != Long.MIN_VALUE && maxFileSize != getRlimInfinity();, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                    Locale.ROOT,, +                    "max file size [%d] for user [%s] is too low, increase to [unlimited]",, +                    getMaxFileSize(),, +                    BootstrapInfo.getSystemProperties().get("user.name"));, +        }, +, +        long getRlimInfinity() {, +            return JNACLibrary.RLIM_INFINITY;, +        }, +, +        long getMaxFileSize() {, +            return JNANatives.MAX_FILE_SIZE;, +        }, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        Natives.trySetMaxFileSize();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapChecks.java, +        if (Constants.LINUX || Constants.MAC_OS_X) {, +            checks.add(new MaxFileSizeCheck());, +        }, +    /**, +     * Bootstrap check that the maximum file size is unlimited (otherwise Elasticsearch could run in to an I/O exception writing files)., +     */, +    static class MaxFileSizeCheck implements BootstrapCheck {, +, +        @Override, +        public boolean check() {, +            final long maxFileSize = getMaxFileSize();, +            return maxFileSize != Long.MIN_VALUE && maxFileSize != getRlimInfinity();, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                    Locale.ROOT,, +                    "max file size [%d] for user [%s] is too low, increase to [unlimited]",, +                    getMaxFileSize(),, +                    BootstrapInfo.getSystemProperties().get("user.name"));, +        }, +, +        long getRlimInfinity() {, +            return JNACLibrary.RLIM_INFINITY;, +        }, +, +        long getMaxFileSize() {, +            return JNANatives.MAX_FILE_SIZE;, +        }, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, +    public static final int RLIMIT_FSIZE = Constants.MAC_OS_X ? 1 : 1;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        Natives.trySetMaxFileSize();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapChecks.java, +        if (Constants.LINUX || Constants.MAC_OS_X) {, +            checks.add(new MaxFileSizeCheck());, +        }, +    /**, +     * Bootstrap check that the maximum file size is unlimited (otherwise Elasticsearch could run in to an I/O exception writing files)., +     */, +    static class MaxFileSizeCheck implements BootstrapCheck {, +, +        @Override, +        public boolean check() {, +            final long maxFileSize = getMaxFileSize();, +            return maxFileSize != Long.MIN_VALUE && maxFileSize != getRlimInfinity();, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                    Locale.ROOT,, +                    "max file size [%d] for user [%s] is too low, increase to [unlimited]",, +                    getMaxFileSize(),, +                    BootstrapInfo.getSystemProperties().get("user.name"));]