[+++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    @Override, +            filter, indexBoost, timeProvider.getAbsoluteStartMillis(), shardIt.getClusterAlias(), routings);, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    @Override, +            filter, indexBoost, timeProvider.getAbsoluteStartMillis(), shardIt.getClusterAlias(), routings);, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, +        SearchShardTarget shardTarget = shardIt.newSearchShardTarget(nodeId);, +                    executePhaseOnShard(shardIt, shard, new SearchActionListener<FirstResult>(, +                        shardIt.newSearchShardTarget(shard.currentNodeId()), shardIndex) {, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    @Override, +            filter, indexBoost, timeProvider.getAbsoluteStartMillis(), shardIt.getClusterAlias(), routings);, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, +        SearchShardTarget shardTarget = shardIt.newSearchShardTarget(nodeId);, +                    executePhaseOnShard(shardIt, shard, new SearchActionListener<FirstResult>(, +                        shardIt.newSearchShardTarget(shard.currentNodeId()), shardIndex) {, +++ b/server/src/main/java/org/elasticsearch/action/search/ScrollIdForNode.java, +    @Nullable, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    @Override, +            filter, indexBoost, timeProvider.getAbsoluteStartMillis(), shardIt.getClusterAlias(), routings);, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, +        SearchShardTarget shardTarget = shardIt.newSearchShardTarget(nodeId);, +                    executePhaseOnShard(shardIt, shard, new SearchActionListener<FirstResult>(, +                        shardIt.newSearchShardTarget(shard.currentNodeId()), shardIndex) {, +++ b/server/src/main/java/org/elasticsearch/action/search/ScrollIdForNode.java, +    @Nullable, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +    private final String localClusterAlias;, +, +        this.localClusterAlias = null;, +        this.localClusterAlias = searchRequest.localClusterAlias;, +        this();, +     * Creates a new search request by providing the alias of the cluster where it will be executed. Used when a {@link SearchRequest}, +     * is created and executed as part of a cross-cluster search request performing local reduction on each cluster., +     * The coordinating CCS node provides the alias to prefix index names with in the returned search results., +     */, +    SearchRequest(String localClusterAlias) {, +        this.localClusterAlias = Objects.requireNonNull(localClusterAlias, "cluster alias must not be null");, +    }, +, +    /**, +        //TODO update version after backport, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            localClusterAlias = in.readOptionalString();, +        } else {, +            localClusterAlias = null;, +        }, +        //TODO update version after backport, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeOptionalString(localClusterAlias);, +        }, +     * Returns the alias of the cluster that this search request is being executed on. A non-null value indicates that this search request, +     * is being executed as part of a locally reduced cross-cluster search request. The cluster alias is used to prefix index names, +     * returned as part of search hits with the alias of the cluster they came from., +     */, +    @Nullable, +    String getLocalClusterAlias() {, +        return localClusterAlias;, +    }, +, +    /**, +                Objects.equals(allowPartialSearchResults, that.allowPartialSearchResults) &&, +                Objects.equals(localClusterAlias, that.localClusterAlias);, +                allowPartialSearchResults, localClusterAlias);, +                ", localClusterAlias=" + localClusterAlias +, +++ b/server/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +    @Override, +            filter, indexBoost, timeProvider.getAbsoluteStartMillis(), shardIt.getClusterAlias(), routings);, +++ b/server/src/main/java/org/elasticsearch/action/search/InitialSearchPhase.java, +        SearchShardTarget shardTarget = shardIt.newSearchShardTarget(nodeId);, +                    executePhaseOnShard(shardIt, shard, new SearchActionListener<FirstResult>(, +                        shardIt.newSearchShardTarget(shard.currentNodeId()), shardIndex) {, +++ b/server/src/main/java/org/elasticsearch/action/search/ScrollIdForNode.java, +    @Nullable, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +    private final String localClusterAlias;, +, +        this.localClusterAlias = null;, +        this.localClusterAlias = searchRequest.localClusterAlias;, +        this();, +     * Creates a new search request by providing the alias of the cluster where it will be executed. Used when a {@link SearchRequest}, +     * is created and executed as part of a cross-cluster search request performing local reduction on each cluster., +     * The coordinating CCS node provides the alias to prefix index names with in the returned search results., +     */, +    SearchRequest(String localClusterAlias) {, +        this.localClusterAlias = Objects.requireNonNull(localClusterAlias, "cluster alias must not be null");, +    }, +, +    /**, +        //TODO update version after backport, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            localClusterAlias = in.readOptionalString();, +        } else {, +            localClusterAlias = null;, +        }, +        //TODO update version after backport, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeOptionalString(localClusterAlias);]