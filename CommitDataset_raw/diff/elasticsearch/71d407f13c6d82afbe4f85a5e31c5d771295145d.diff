[+++ b/build.gradle, +              task.shouldRunAfter(upstreamTask), +++ b/build.gradle, +              task.shouldRunAfter(upstreamTask), +++ b/qa/full-cluster-restart/build.gradle, +configurations {, +  testArtifacts.extendsFrom testRuntime, +}, +, +task testJar(type: Jar) {, +  appendix 'test', +  from sourceSets.test.output, +}, +, +artifacts {, +  testArtifacts testJar, +}, +++ b/build.gradle, +              task.shouldRunAfter(upstreamTask), +++ b/qa/full-cluster-restart/build.gradle, +configurations {, +  testArtifacts.extendsFrom testRuntime, +}, +, +task testJar(type: Jar) {, +  appendix 'test', +  from sourceSets.test.output, +}, +, +artifacts {, +  testArtifacts testJar, +}, +++ b/x-pack/plugin/core/build.gradle, +    testCompile(project(':x-pack:license-tools')) {, +        transitive = false, +    }, +sourceSets.test.resources {, +    srcDir 'src/main/config', +++ b/build.gradle, +              task.shouldRunAfter(upstreamTask), +++ b/qa/full-cluster-restart/build.gradle, +configurations {, +  testArtifacts.extendsFrom testRuntime, +}, +, +task testJar(type: Jar) {, +  appendix 'test', +  from sourceSets.test.output, +}, +, +artifacts {, +  testArtifacts testJar, +}, +++ b/x-pack/plugin/core/build.gradle, +    testCompile(project(':x-pack:license-tools')) {, +        transitive = false, +    }, +sourceSets.test.resources {, +    srcDir 'src/main/config', +++ b/x-pack/plugin/security/build.gradle, +processTestResources {, +    from(project(xpackModule('core')).file('src/main/config')), +    from(project(xpackModule('core')).file('src/test/resources')), +}, +, +, +++ b/build.gradle, +              task.shouldRunAfter(upstreamTask), +++ b/qa/full-cluster-restart/build.gradle, +configurations {, +  testArtifacts.extendsFrom testRuntime, +}, +, +task testJar(type: Jar) {, +  appendix 'test', +  from sourceSets.test.output, +}, +, +artifacts {, +  testArtifacts testJar, +}, +++ b/x-pack/plugin/core/build.gradle, +    testCompile(project(':x-pack:license-tools')) {, +        transitive = false, +    }, +sourceSets.test.resources {, +    srcDir 'src/main/config', +++ b/x-pack/plugin/security/build.gradle, +processTestResources {, +    from(project(xpackModule('core')).file('src/main/config')), +    from(project(xpackModule('core')).file('src/test/resources')), +}, +, +, +++ b/x-pack/plugin/sql/qa/security/build.gradle, +      mainProject.sourceSets.test.output.classesDirs.each { dir ->, +        output.addClassesDir { dir }, +      runtimeClasspath += mainProject.sourceSets.test.output, +, +  processTestResources {]