[+++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +        context.searcher().setAggregatedDfs(request.dfs());, +        context.searcher().setAggregatedDfs(request.dfs());, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +        context.searcher().setAggregatedDfs(request.dfs());, +        context.searcher().setAggregatedDfs(request.dfs());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +        context.searcher().setAggregatedDfs(request.dfs());, +        context.searcher().setAggregatedDfs(request.dfs());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.index.TermContext;, +import org.apache.lucene.search.*;, +import org.elasticsearch.search.dfs.AggregatedDfs;, +    private AggregatedDfs aggregatedDfs;, +        setQueryCache(searchContext.indexShard().indexService().cache().query());, +        setQueryCachingPolicy(searchContext.indexShard().getQueryCachingPolicy());, +    public void setAggregatedDfs(AggregatedDfs aggregatedDfs) {, +        this.aggregatedDfs = aggregatedDfs;, +        // During tests we prefer to use the wrapped IndexSearcher, because then we use the AssertingIndexSearcher, +        // it is hacky, because if we perform a dfs search, we don't use the wrapped IndexSearcher..., +            if (aggregatedDfs != null && needsScores) {, +                return super.createNormalizedWeight(query, needsScores);, +, +    @Override, +    public TermStatistics termStatistics(Term term, TermContext context) throws IOException {, +        if (aggregatedDfs == null) {, +            // we are either executing the dfs phase or the search_type doesn't include the dfs phase., +            return super.termStatistics(term, context);, +        }, +        TermStatistics termStatistics = aggregatedDfs.termStatistics().get(term);, +        if (termStatistics == null) {, +            // we don't have stats for this - this might be a must_not clauses etc. that doesn't allow extract terms on the query, +            return super.termStatistics(term, context);, +        }, +        return termStatistics;, +    }, +, +    @Override, +    public CollectionStatistics collectionStatistics(String field) throws IOException {, +        if (aggregatedDfs == null) {, +            // we are either executing the dfs phase or the search_type doesn't include the dfs phase., +            return super.collectionStatistics(field);, +        }, +        CollectionStatistics collectionStatistics = aggregatedDfs.fieldStatistics().get(field);, +        if (collectionStatistics == null) {, +            // we don't have stats for this - this might be a must_not clauses etc. that doesn't allow extract terms on the query, +            return super.collectionStatistics(field);, +        }, +        return collectionStatistics;, +    }, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +        context.searcher().setAggregatedDfs(request.dfs());, +        context.searcher().setAggregatedDfs(request.dfs());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.index.TermContext;, +import org.apache.lucene.search.*;, +import org.elasticsearch.search.dfs.AggregatedDfs;, +    private AggregatedDfs aggregatedDfs;, +        setQueryCache(searchContext.indexShard().indexService().cache().query());, +        setQueryCachingPolicy(searchContext.indexShard().getQueryCachingPolicy());, +    public void setAggregatedDfs(AggregatedDfs aggregatedDfs) {, +        this.aggregatedDfs = aggregatedDfs;, +        // During tests we prefer to use the wrapped IndexSearcher, because then we use the AssertingIndexSearcher, +        // it is hacky, because if we perform a dfs search, we don't use the wrapped IndexSearcher..., +            if (aggregatedDfs != null && needsScores) {, +                return super.createNormalizedWeight(query, needsScores);, +, +    @Override, +    public TermStatistics termStatistics(Term term, TermContext context) throws IOException {, +        if (aggregatedDfs == null) {, +            // we are either executing the dfs phase or the search_type doesn't include the dfs phase., +            return super.termStatistics(term, context);, +        }, +        TermStatistics termStatistics = aggregatedDfs.termStatistics().get(term);, +        if (termStatistics == null) {, +            // we don't have stats for this - this might be a must_not clauses etc. that doesn't allow extract terms on the query, +            return super.termStatistics(term, context);, +        }, +        return termStatistics;, +    }, +, +    @Override, +    public CollectionStatistics collectionStatistics(String field) throws IOException {, +        if (aggregatedDfs == null) {, +            // we are either executing the dfs phase or the search_type doesn't include the dfs phase., +            return super.collectionStatistics(field);, +        }, +        CollectionStatistics collectionStatistics = aggregatedDfs.fieldStatistics().get(field);, +        if (collectionStatistics == null) {, +            // we don't have stats for this - this might be a must_not clauses etc. that doesn't allow extract terms on the query, +            return super.collectionStatistics(field);, +        }, +        return collectionStatistics;, +    }, +++ b/core/src/test/java/org/elasticsearch/test/ESSingleNodeTestCase.java]