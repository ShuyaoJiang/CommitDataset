[+++ b/Vagrantfile, +, +    # see https://github.com/hashicorp/vagrant/issues/9524, +    vbox.customize ["modifyvm", :id, "--audio", "none"], +++ b/Vagrantfile, +, +    # see https://github.com/hashicorp/vagrant/issues/9524, +    vbox.customize ["modifyvm", :id, "--audio", "none"], +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/Vagrantfile, +, +    # see https://github.com/hashicorp/vagrant/issues/9524, +    vbox.customize ["modifyvm", :id, "--audio", "none"], +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/AbstractBenchmark.java, +++ b/Vagrantfile, +, +    # see https://github.com/hashicorp/vagrant/issues/9524, +    vbox.customize ["modifyvm", :id, "--audio", "none"], +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/AbstractBenchmark.java, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/GetAliasesResponse.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.client;, +, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.cluster.metadata.AliasMetaData;, +import org.elasticsearch.common.xcontent.StatusToXContentObject;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentParser.Token;, +import org.elasticsearch.rest.RestStatus;, +, +import java.io.IOException;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Set;, +, +import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;, +, +/**, + * Response obtained from the get aliases API., + * The format is pretty horrible as it holds aliases, but at the same time errors can come back through the status and error fields., + * Such errors are mostly 404 - NOT FOUND for aliases that were specified but not found. In such case the client won't throw exception, + * so it allows to retrieve the returned aliases, while at the same time checking if errors were returned., + * There's also the case where an exception is returned, like for instance an {@link org.elasticsearch.index.IndexNotFoundException}., + * We would usually throw such exception, but we configure the client to not throw for 404 to support the case above, hence we also not, + * throw in case an index is not found, although it is a hard error that doesn't come back with aliases., + */, +public class GetAliasesResponse extends ActionResponse implements StatusToXContentObject {, +, +    private final RestStatus status;, +    private final String error;, +    private final ElasticsearchException exception;, +, +    private final Map<String, Set<AliasMetaData>> aliases;, +, +    GetAliasesResponse(RestStatus status, String error, Map<String, Set<AliasMetaData>> aliases) {, +        this.status = status;, +        this.error = error;, +        this.aliases = aliases;, +        this.exception = null;, +    }, +, +    private GetAliasesResponse(RestStatus status, ElasticsearchException exception) {, +        this.status = status;, +        this.error = null;, +        this.aliases = Collections.emptyMap();, +        this.exception = exception;, +    }, +, +    @Override, +    public RestStatus status() {, +        return status;, +    }, +, +    /**, +     * Return the possibly returned error, null otherwise]