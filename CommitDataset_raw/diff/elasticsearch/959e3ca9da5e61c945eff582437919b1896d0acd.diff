[+++ b/src/main/java/org/elasticsearch/index/IndexService.java, +            modules.add(new IndexShardModule(shardId, indexSettings));, +++ b/src/main/java/org/elasticsearch/index/IndexService.java, +            modules.add(new IndexShardModule(shardId, indexSettings));, +++ b/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +import org.elasticsearch.indices.IndicesWarmer;, +import org.elasticsearch.indices.IndicesWarmer.TerminationHandle;, +        public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, IndexMetaData indexMetaData, IndicesWarmer.WarmerContext context, ThreadPool threadPool) {, +++ b/src/main/java/org/elasticsearch/index/IndexService.java, +            modules.add(new IndexShardModule(shardId, indexSettings));, +++ b/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +import org.elasticsearch.indices.IndicesWarmer;, +import org.elasticsearch.indices.IndicesWarmer.TerminationHandle;, +        public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, IndexMetaData indexMetaData, IndicesWarmer.WarmerContext context, ThreadPool threadPool) {, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.common.logging.ESLogger;, +    /**, +     * Triggers a forced merge on this engine, +     */, +    ByteSizeValue indexingBufferSize();, +, +++ b/src/main/java/org/elasticsearch/index/IndexService.java, +            modules.add(new IndexShardModule(shardId, indexSettings));, +++ b/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +import org.elasticsearch.indices.IndicesWarmer;, +import org.elasticsearch.indices.IndicesWarmer.TerminationHandle;, +        public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, IndexMetaData indexMetaData, IndicesWarmer.WarmerContext context, ThreadPool threadPool) {, +++ b/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.common.logging.ESLogger;, +    /**, +     * Triggers a forced merge on this engine, +     */, +    ByteSizeValue indexingBufferSize();, +, +++ b/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.engine;, +, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.codecs.Codec;, +import org.apache.lucene.index.IndexWriterConfig;, +import org.apache.lucene.search.similarities.Similarity;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.ByteSizeUnit;, +import org.elasticsearch.common.unit.ByteSizeValue;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import org.elasticsearch.index.codec.CodecService;, +import org.elasticsearch.index.deletionpolicy.SnapshotDeletionPolicy;, +import org.elasticsearch.index.indexing.ShardIndexingService;, +import org.elasticsearch.index.merge.policy.MergePolicyProvider;, +import org.elasticsearch.index.merge.scheduler.MergeSchedulerProvider;, +import org.elasticsearch.index.settings.IndexSettingsService;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.index.store.Store;, +import org.elasticsearch.index.translog.Translog;, +import org.elasticsearch.indices.IndicesWarmer;, +import org.elasticsearch.threadpool.ThreadPool;, +, +import java.util.concurrent.TimeUnit;, +, +/*, + * Holds all the configuration that is used to create an {@link Engine}., + * Once {@link Engine} has been created with this object, changes to this, + * object will affect the {@link Engine} instance., + */, +public final class EngineConfig {, +    private final ShardId shardId;, +    private volatile boolean failOnMergeFailure = true;, +    private volatile boolean failEngineOnCorruption = true;, +    private volatile ByteSizeValue indexingBufferSize;, +    private volatile int indexConcurrency = IndexWriterConfig.DEFAULT_MAX_THREAD_STATES;, +    private volatile boolean compoundOnFlush = true;, +    private long gcDeletesInMillis = DEFAULT_GC_DELETES.millis();, +    private volatile boolean enableGcDeletes = true;, +    private volatile String codecName = DEFAULT_CODEC_NAME;, +    private final boolean optimizeAutoGenerateId;, +    private final ThreadPool threadPool;, +    private final ShardIndexingService indexingService;, +    private final IndexSettingsService indexSettingsService;, +    @Nullable]