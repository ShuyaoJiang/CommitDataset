[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        final long startTime = System.currentTimeMillis();, +        if (autoCreateIndex.needToCheck()) {, +                if (autoCreateIndex.shouldAutoCreate(index, state)) {, +        final long startTime = System.currentTimeMillis();, +        executeBulk(bulkRequest, startTime, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTime) {, +        // protect ourselves against time going backwards, +        return Math.max(1, System.currentTimeMillis() - startTime);, +    private void executeBulk(final BulkRequest bulkRequest, final long startTime, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        final long startTime = System.currentTimeMillis();, +        if (autoCreateIndex.needToCheck()) {, +                if (autoCreateIndex.shouldAutoCreate(index, state)) {, +        final long startTime = System.currentTimeMillis();, +        executeBulk(bulkRequest, startTime, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTime) {, +        // protect ourselves against time going backwards, +        return Math.max(1, System.currentTimeMillis() - startTime);, +    private void executeBulk(final BulkRequest bulkRequest, final long startTime, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        final long startTime = System.currentTimeMillis();, +        if (autoCreateIndex.needToCheck()) {, +                if (autoCreateIndex.shouldAutoCreate(index, state)) {, +        final long startTime = System.currentTimeMillis();, +        executeBulk(bulkRequest, startTime, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTime) {, +        // protect ourselves against time going backwards, +        return Math.max(1, System.currentTimeMillis() - startTime);, +    private void executeBulk(final BulkRequest bulkRequest, final long startTime, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        final long startTime = System.currentTimeMillis();, +        if (autoCreateIndex.needToCheck()) {, +                if (autoCreateIndex.shouldAutoCreate(index, state)) {, +        final long startTime = System.currentTimeMillis();, +        executeBulk(bulkRequest, startTime, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTime) {, +        // protect ourselves against time going backwards, +        return Math.max(1, System.currentTimeMillis() - startTime);, +    private void executeBulk(final BulkRequest bulkRequest, final long startTime, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * @param name the name for the suggestion that will also be used in the response, +     * @param suggestion the suggestion configuration, +    public SuggestRequestBuilder addSuggestion(String name, SuggestionBuilder<?> suggestion) {, +        suggest.addSuggestion(name, suggestion);, +        this.suggest.setGlobalText(globalText);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +        final long startTime = System.currentTimeMillis();, +        if (autoCreateIndex.needToCheck()) {, +                if (autoCreateIndex.shouldAutoCreate(index, state)) {, +        final long startTime = System.currentTimeMillis();, +        executeBulk(bulkRequest, startTime, listener, new AtomicArray<>(bulkRequest.requests.size()));, +    private long buildTookInMillis(long startTime) {, +        // protect ourselves against time going backwards, +        return Math.max(1, System.currentTimeMillis() - startTime);, +    private void executeBulk(final BulkRequest bulkRequest, final long startTime, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses ) {, +            listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +                    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]), buildTookInMillis(startTime)));, +, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +     * Delegates to {@link SearchSourceBuilder#suggest(SuggestBuilder)}, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;, +     * set a new source using a {@link org.elasticsearch.search.suggest.SuggestionBuilder}, +    public SuggestRequest suggest(SuggestionBuilder suggestionBuilder) {, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequestBuilder.java, +import org.elasticsearch.search.suggest.SuggestionBuilder;]