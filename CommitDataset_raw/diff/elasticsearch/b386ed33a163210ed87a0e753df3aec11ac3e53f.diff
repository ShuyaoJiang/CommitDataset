[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetListAction.java, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.search.TransportSearchAction;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.xpack.prelert.job.results.PageParams;, +import java.util.ArrayList;, +import java.util.List;, +        private PageParams pageParams;, +        public Request() {, +        public void setListId(String listId) {, +            if (pageParams != null) {, +                throw new IllegalArgumentException("Param [" + ListDocument.ID.getPreferredName() + "] is incompatible with [", +                        + PageParams.FROM.getPreferredName()+ ", " + PageParams.SIZE.getPreferredName() + "].");, +            }, +        public PageParams getPageParams() {, +            return pageParams;, +        }, +, +        public void setPageParams(PageParams pageParams) {, +            if (listId != null) {, +                throw new IllegalArgumentException("Param [" + PageParams.FROM.getPreferredName(), +                        + ", " + PageParams.SIZE.getPreferredName() + "] is incompatible with [", +                        + ListDocument.ID.getPreferredName() + "].");, +            }, +            this.pageParams = pageParams;, +        }, +, +            if (pageParams == null && listId == null) {, +                validationException = addValidationError("Both [" + ListDocument.ID.getPreferredName() + "] and [", +                        + PageParams.FROM.getPreferredName() + ", " + PageParams.SIZE.getPreferredName() + "] ", +                        + "cannot be null" , validationException);, +        private final TransportSearchAction transportSearchAction;, +                               TransportGetAction transportGetAction, TransportSearchAction transportSearchAction) {, +            this.transportSearchAction = transportSearchAction;, +            if (!Strings.isNullOrEmpty(listId)) {, +                getList(listId, listener);, +            } else if (request.getPageParams() != null) {, +                getLists(request.getPageParams(), listener);, +            } else {, +                throw new IllegalStateException("Both listId and pageParams are null");, +            }, +        }, +, +        @Override, +        protected ClusterBlockException checkBlock(Request request, ClusterState state) {, +            return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_READ);, +        }, +, +        private void getList(String listId, ActionListener<Response> listener) {, +        private void getLists(PageParams pageParams, ActionListener<Response> listener) {, +            SearchSourceBuilder sourceBuilder = new SearchSourceBuilder(), +                    .from(pageParams.getFrom()), +                    .size(pageParams.getSize());, +, +            SearchRequest searchRequest = new SearchRequest(new String[]{PRELERT_INFO_INDEX}, sourceBuilder), +                    .types(ListDocument.TYPE.getPreferredName());, +, +            transportSearchAction.execute(searchRequest, new ActionListener<SearchResponse>() {, +                public void onResponse(SearchResponse response) {, +, +                    try {, +                        QueryPage<ListDocument> responseBody;, +                        if (response.getHits().hits().length > 0) {, +                            List<ListDocument> docs = new ArrayList<>(response.getHits().hits().length);, +                            for (SearchHit hit : response.getHits().getHits()) {, +                                BytesReference docSource = hit.sourceRef();, +                                XContentParser parser = XContentFactory.xContent(docSource).createParser(docSource);, +                                docs.add(ListDocument.PARSER.apply(parser, () -> parseFieldMatcher));, +                            }, +, +                            responseBody = new QueryPage<>(docs, docs.size(), ListDocument.RESULTS_FIELD);, +, +                            Response listResponse = new Response(responseBody);, +                            listener.onResponse(listResponse);, +                        } else {, +                            this.onFailure(QueryPage.emptyQueryPage(ListDocument.RESULTS_FIELD));, +                        }, +, +                    } catch (Exception e) {, +                        this.onFailure(e);, +                    }, +                }, +, +, +                @Override, +                public void onFailure(Exception e) {, +                    listener.onFailure(e);, +                }, +            });, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetListAction.java, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.search.TransportSearchAction;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import org.elasticsearch.xpack.prelert.job.results.PageParams;]