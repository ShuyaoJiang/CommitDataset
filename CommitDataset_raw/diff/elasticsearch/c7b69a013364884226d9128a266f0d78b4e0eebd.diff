[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import java.util.Collections;, + *, +    private static final ToXContent.Params FORMAT_PARAMS = new ToXContent.MapParams(Collections.singletonMap("pretty", "false"));, +, +        // generating description in a lazy way since source can be quite big, +        return new SearchTask(id, type, action, null, parentTaskId) {, +            @Override, +            public String getDescription() {, +                StringBuilder sb = new StringBuilder();, +                sb.append("indices[");, +                Strings.arrayToDelimitedString(indices, ",", sb);, +                sb.append("], ");, +                sb.append("types[");, +                Strings.arrayToDelimitedString(types, ",", sb);, +                sb.append("], ");, +                sb.append("search_type[").append(searchType).append("], ");, +                if (source != null) {, +                    sb.append("source[").append(source.toString(FORMAT_PARAMS)).append("]");, +                } else {, +                    sb.append("source[]");, +                }, +                return sb.toString();, +            }, +        };, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import java.util.Collections;, + *, +    private static final ToXContent.Params FORMAT_PARAMS = new ToXContent.MapParams(Collections.singletonMap("pretty", "false"));, +, +        // generating description in a lazy way since source can be quite big, +        return new SearchTask(id, type, action, null, parentTaskId) {, +            @Override, +            public String getDescription() {, +                StringBuilder sb = new StringBuilder();, +                sb.append("indices[");, +                Strings.arrayToDelimitedString(indices, ",", sb);, +                sb.append("], ");, +                sb.append("types[");, +                Strings.arrayToDelimitedString(types, ",", sb);, +                sb.append("], ");, +                sb.append("search_type[").append(searchType).append("], ");, +                if (source != null) {, +                    sb.append("source[").append(source.toString(FORMAT_PARAMS)).append("]");, +                } else {, +                    sb.append("source[]");, +                }, +                return sb.toString();, +            }, +        };, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchScrollRequest.java, +, +    @Override, +    public String getDescription() {, +        return "scrollId[" + scrollId + "], scroll[" + scroll + "]";, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import java.util.Collections;, + *, +    private static final ToXContent.Params FORMAT_PARAMS = new ToXContent.MapParams(Collections.singletonMap("pretty", "false"));, +, +        // generating description in a lazy way since source can be quite big, +        return new SearchTask(id, type, action, null, parentTaskId) {, +            @Override, +            public String getDescription() {, +                StringBuilder sb = new StringBuilder();, +                sb.append("indices[");, +                Strings.arrayToDelimitedString(indices, ",", sb);, +                sb.append("], ");, +                sb.append("types[");, +                Strings.arrayToDelimitedString(types, ",", sb);, +                sb.append("], ");, +                sb.append("search_type[").append(searchType).append("], ");, +                if (source != null) {, +                    sb.append("source[").append(source.toString(FORMAT_PARAMS)).append("]");, +                } else {, +                    sb.append("source[]");, +                }, +                return sb.toString();, +            }, +        };, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchScrollRequest.java, +, +    @Override, +    public String getDescription() {, +        return "scrollId[" + scrollId + "], scroll[" + scroll + "]";, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/support/ToXContentToBytes.java, +        return toString(EMPTY_PARAMS);, +    }, +, +    public final String toString(Params params) {, +            if (params.paramAsBoolean("pretty", true)) {, +            }, +            toXContent(builder, params);]