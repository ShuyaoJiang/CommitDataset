[+++ b/docs/reference/modules/scripting/painless.asciidoc, +[[modules-scripting-painless-regex]], +a pattern in painless. The pattern inside the `/`s are just, +http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html[Java regular expressions]., +See <<modules-scripting-painless-regex-flags>> for more., +[float], +[[modules-scripting-painless-regex-flags]], +==== Regular expression flags, +, +You can define flags on patterns in Painless by adding characters after the, +trailing `/` like `/foo/i` or `/foo \w #comment/iUx`. Painless exposes all the, +flags from, +https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html[Java's Pattern class], +using these characters:, +, +[cols="<,<,<",options="header",], +|=======================================================================, +| Character | Java Constant | Example, +|`c` | CANON_EQ                  | `'å' ==~ /å/c` (open in hex editor to see), +|`i` | CASE_INSENSITIVE          | `'A' ==~ /a/i`, +|`l` | LITERAL                   | `'[a]' ==~ /[a]/l`, +|`m` | MULTILINE                 | `'a\nb\nc' =~ /^b$/m`, +|`s` | DOTALL (aka single line)  | `'a\nb\nc' =~ /.b./s`, +|`U` | UNICODE_CHARACTER_CLASS   | `'Ɛ' ==~ /\\w/U`, +|`u` | UNICODE_CASE              | `'Ɛ' ==~ /ɛ/iu`, +|`x` | COMMENTS (aka extended)   | `'a' ==~ /a #comment/x`, +|=======================================================================, +, +++ b/docs/reference/modules/scripting/painless.asciidoc, +[[modules-scripting-painless-regex]], +a pattern in painless. The pattern inside the `/`s are just, +http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html[Java regular expressions]., +See <<modules-scripting-painless-regex-flags>> for more., +[float], +[[modules-scripting-painless-regex-flags]], +==== Regular expression flags, +, +You can define flags on patterns in Painless by adding characters after the, +trailing `/` like `/foo/i` or `/foo \w #comment/iUx`. Painless exposes all the, +flags from, +https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html[Java's Pattern class], +using these characters:, +, +[cols="<,<,<",options="header",], +|=======================================================================, +| Character | Java Constant | Example, +|`c` | CANON_EQ                  | `'å' ==~ /å/c` (open in hex editor to see), +|`i` | CASE_INSENSITIVE          | `'A' ==~ /a/i`, +|`l` | LITERAL                   | `'[a]' ==~ /[a]/l`, +|`m` | MULTILINE                 | `'a\nb\nc' =~ /^b$/m`, +|`s` | DOTALL (aka single line)  | `'a\nb\nc' =~ /.b./s`, +|`U` | UNICODE_CHARACTER_CLASS   | `'Ɛ' ==~ /\\w/U`, +|`u` | UNICODE_CASE              | `'Ɛ' ==~ /ɛ/iu`, +|`x` | COMMENTS (aka extended)   | `'a' ==~ /a #comment/x`, +|=======================================================================, +, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +REGEX: '/' ( ~('/' | '\n') | '\\' ~'\n' )+ '/' [cilmsUux]* { SlashStrategy.slashIsRegex(_factory) }?;, +++ b/docs/reference/modules/scripting/painless.asciidoc, +[[modules-scripting-painless-regex]], +a pattern in painless. The pattern inside the `/`s are just, +http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html[Java regular expressions]., +See <<modules-scripting-painless-regex-flags>> for more., +[float], +[[modules-scripting-painless-regex-flags]], +==== Regular expression flags, +, +You can define flags on patterns in Painless by adding characters after the, +trailing `/` like `/foo/i` or `/foo \w #comment/iUx`. Painless exposes all the, +flags from, +https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html[Java's Pattern class], +using these characters:, +, +[cols="<,<,<",options="header",], +|=======================================================================, +| Character | Java Constant | Example, +|`c` | CANON_EQ                  | `'å' ==~ /å/c` (open in hex editor to see), +|`i` | CASE_INSENSITIVE          | `'A' ==~ /a/i`, +|`l` | LITERAL                   | `'[a]' ==~ /[a]/l`, +|`m` | MULTILINE                 | `'a\nb\nc' =~ /^b$/m`, +|`s` | DOTALL (aka single line)  | `'a\nb\nc' =~ /.b./s`, +|`U` | UNICODE_CHARACTER_CLASS   | `'Ɛ' ==~ /\\w/U`, +|`u` | UNICODE_CASE              | `'Ɛ' ==~ /ɛ/iu`, +|`x` | COMMENTS (aka extended)   | `'a' ==~ /a #comment/x`, +|=======================================================================, +, +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +REGEX: '/' ( ~('/' | '\n') | '\\' ~'\n' )+ '/' [cilmsUux]* { SlashStrategy.slashIsRegex(_factory) }?;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +    public final static Method PATTERN_COMPILE = getAsmMethod(Pattern.class, "compile", String.class, int.class);, +++ b/docs/reference/modules/scripting/painless.asciidoc, +[[modules-scripting-painless-regex]], +a pattern in painless. The pattern inside the `/`s are just, +http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html[Java regular expressions]., +See <<modules-scripting-painless-regex-flags>> for more., +[float], +[[modules-scripting-painless-regex-flags]], +==== Regular expression flags, +, +You can define flags on patterns in Painless by adding characters after the]