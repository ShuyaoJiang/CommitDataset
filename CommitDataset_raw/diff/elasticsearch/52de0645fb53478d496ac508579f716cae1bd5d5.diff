[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.queryparser.analyzing.AnalyzingQueryParser;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.index.mapper.StringFieldType;, +public class MapperQueryParser extends AnalyzingQueryParser {, +        setLowercaseExpandedTerms(false);, +                BytesRef part1Binary = part1 == null ? null : getAnalyzer().normalize(field, part1);, +                BytesRef part2Binary = part2 == null ? null : getAnalyzer().normalize(field, part2);, +                    rangeQuery = dateFieldType.rangeQuery(part1Binary, part2Binary,, +                            startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1Binary, part2Binary,, +                            startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1Binary, part2Binary, startInclusive, endInclusive, context);, +                BytesRef term = termStr == null ? null : getAnalyzer().normalize(field, termStr);, +                return currentFieldType.fuzzyQuery(term, Fuzziness.build(minSimilarity),, +                    getFuzzyPrefixLength(), settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +                if (currentFieldType instanceof StringFieldType == false) {, +                    query = currentFieldType.prefixQuery(termStr, getMultiTermRewriteMethod(), context);, +            return super.getWildcardQuery(indexedNameField, termStr);, +                        getMaxDeterminizedStates(), getMultiTermRewriteMethod(), context);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.queryparser.analyzing.AnalyzingQueryParser;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.index.mapper.StringFieldType;, +public class MapperQueryParser extends AnalyzingQueryParser {, +        setLowercaseExpandedTerms(false);, +                BytesRef part1Binary = part1 == null ? null : getAnalyzer().normalize(field, part1);, +                BytesRef part2Binary = part2 == null ? null : getAnalyzer().normalize(field, part2);, +                    rangeQuery = dateFieldType.rangeQuery(part1Binary, part2Binary,, +                            startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1Binary, part2Binary,, +                            startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1Binary, part2Binary, startInclusive, endInclusive, context);, +                BytesRef term = termStr == null ? null : getAnalyzer().normalize(field, termStr);, +                return currentFieldType.fuzzyQuery(term, Fuzziness.build(minSimilarity),, +                    getFuzzyPrefixLength(), settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +                if (currentFieldType instanceof StringFieldType == false) {, +                    query = currentFieldType.prefixQuery(termStr, getMultiTermRewriteMethod(), context);, +            return super.getWildcardQuery(indexedNameField, termStr);, +                        getMaxDeterminizedStates(), getMultiTermRewriteMethod(), context);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/QueryParserSettings.java, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.queryparser.analyzing.AnalyzingQueryParser;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.index.mapper.StringFieldType;, +public class MapperQueryParser extends AnalyzingQueryParser {, +        setLowercaseExpandedTerms(false);, +                BytesRef part1Binary = part1 == null ? null : getAnalyzer().normalize(field, part1);, +                BytesRef part2Binary = part2 == null ? null : getAnalyzer().normalize(field, part2);, +                    rangeQuery = dateFieldType.rangeQuery(part1Binary, part2Binary,, +                            startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1Binary, part2Binary,, +                            startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1Binary, part2Binary, startInclusive, endInclusive, context);, +                BytesRef term = termStr == null ? null : getAnalyzer().normalize(field, termStr);, +                return currentFieldType.fuzzyQuery(term, Fuzziness.build(minSimilarity),, +                    getFuzzyPrefixLength(), settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +                if (currentFieldType instanceof StringFieldType == false) {, +                    query = currentFieldType.prefixQuery(termStr, getMultiTermRewriteMethod(), context);, +            return super.getWildcardQuery(indexedNameField, termStr);, +                        getMaxDeterminizedStates(), getMultiTermRewriteMethod(), context);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/QueryParserSettings.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.queryparser.analyzing.AnalyzingQueryParser;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.index.mapper.StringFieldType;, +public class MapperQueryParser extends AnalyzingQueryParser {, +        setLowercaseExpandedTerms(false);, +                BytesRef part1Binary = part1 == null ? null : getAnalyzer().normalize(field, part1);, +                BytesRef part2Binary = part2 == null ? null : getAnalyzer().normalize(field, part2);, +                    rangeQuery = dateFieldType.rangeQuery(part1Binary, part2Binary,, +                            startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1Binary, part2Binary,, +                            startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1Binary, part2Binary, startInclusive, endInclusive, context);, +                BytesRef term = termStr == null ? null : getAnalyzer().normalize(field, termStr);, +                return currentFieldType.fuzzyQuery(term, Fuzziness.build(minSimilarity),, +                    getFuzzyPrefixLength(), settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +                if (currentFieldType instanceof StringFieldType == false) {, +                    query = currentFieldType.prefixQuery(termStr, getMultiTermRewriteMethod(), context);, +            return super.getWildcardQuery(indexedNameField, termStr);, +                        getMaxDeterminizedStates(), getMultiTermRewriteMethod(), context);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/QueryParserSettings.java, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryStringQueryBuilder.java, +    private static final ParseField LOWERCASE_EXPANDED_TERMS_FIELD = new ParseField("lowercase_expanded_terms"), +            .withAllDeprecated("Decision is now made by the analyzer");, +    private static final ParseField LOCALE_FIELD = new ParseField("locale"), +            .withAllDeprecated("Decision is now made by the analyzer");, +        if (in.getVersion().before(V_5_1_0_UNRELEASED)) {, +            in.readBoolean(); // lowercase_expanded_terms, +        }, +        if (in.getVersion().before(V_5_1_0_UNRELEASED)) {, +            in.readString(); // locale, +        }, +        if (out.getVersion().before(V_5_1_0_UNRELEASED)) {, +            out.writeBoolean(true); // lowercase_expanded_terms, +        }, +        if (out.getVersion().before(V_5_1_0_UNRELEASED)) {]