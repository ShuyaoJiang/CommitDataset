[+++ b/src/main/java/org/elasticsearch/common/lucene/search/XFilteredQuery.java, +     * Extends {@link org.apache.lucene.search.FilteredQuery.RandomAccessFilterStrategy}., +     * <p/>, +     * Adds a threshold value, which defaults to -1. When set to -1, it will check if the filter docSet is, +     * *not*  a fast docSet, and if not, it will use {@link FilteredQuery#QUERY_FIRST_FILTER_STRATEGY} (since, +     * the assumption is that its a "slow" filter and better computed only on whatever matched the query)., +     * <p/>, +     * If the threshold value is 0, it always tries to pass "down" the filter as acceptDocs, and it the filter, +     * can't be represented as Bits (never really), then it uses {@link FilteredQuery#LEAP_FROG_QUERY_FIRST_STRATEGY}., +     * <p/>, +     * If the above conditions are not met, then it reverts to the {@link FilteredQuery.RandomAccessFilterStrategy} logic,, +     * with the threshold used to control {@link #useRandomAccess(org.apache.lucene.util.Bits, int)}., +        /**, +         * Expert: decides if a filter should be executed as "random-access" or not., +         * random-access means the filter "filters" in a similar way as deleted docs are filtered, +         * in Lucene. This is faster when the filter accepts many documents., +         * However, when the filter is very sparse, it can be faster to execute the query+filter, +         * as a conjunction in some cases., +         * <p/>, +         * The default implementation returns <code>true</code> if the first document accepted by the, +         * filter is < threshold, if threshold is -1 (the default), then it checks for < 100., +         */]