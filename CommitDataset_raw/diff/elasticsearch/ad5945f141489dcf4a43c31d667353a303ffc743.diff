[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentArrayValueMapperParser.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper.xcontent;, +, +/**, + * A marker interface indicating that this mapper can handle array value, and the array, + * itself should be passed to it., + *, + * @author kimchy (shay.banon), + */, +public interface XContentArrayValueMapperParser {, +}, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentArrayValueMapperParser.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper.xcontent;, +, +/**, + * A marker interface indicating that this mapper can handle array value, and the array, + * itself should be passed to it., + *, + * @author kimchy (shay.banon), + */, +public interface XContentArrayValueMapperParser {, +}, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentGeoPointFieldMapper.java, +public class XContentGeoPointFieldMapper implements XContentMapper, XContentArrayValueMapperParser {, +        if (token == XContentParser.Token.START_ARRAY) {, +            token = context.parser().nextToken();, +            if (token == XContentParser.Token.START_ARRAY) {, +                // its an array of array of lat/lon [ [1.2, 1.3], [1.4, 1.5] ], +                while (token != XContentParser.Token.END_ARRAY) {, +                    token = context.parser().nextToken();, +                    Double lat = context.parser().doubleValue();, +                    token = context.parser().nextToken();, +                    Double lon = context.parser().doubleValue();, +                    while ((token = context.parser().nextToken()) != XContentParser.Token.END_ARRAY) {, +, +                    }, +                    parseLatLon(context, lat, lon);, +                    token = context.parser().nextToken();, +                }, +            } else {, +                // its an array of other possible values, +                if (token == XContentParser.Token.VALUE_NUMBER) {, +                    Double lat = context.parser().doubleValue();, +                    token = context.parser().nextToken();, +                    Double lon = context.parser().doubleValue();, +                    while ((token = context.parser().nextToken()) != XContentParser.Token.END_ARRAY) {, +, +                    }, +                    parseLatLon(context, lat, lon);, +                } else {, +                    while (token != XContentParser.Token.END_ARRAY) {, +                        if (token == XContentParser.Token.START_OBJECT) {, +                            parseObjectLatLon(context);, +                        } else if (token == XContentParser.Token.VALUE_STRING) {, +                            parseStringLatLon(context);, +                        }, +                        token = context.parser().nextToken();, +                    }, +                }, +            }, +        } else if (token == XContentParser.Token.START_OBJECT) {, +            parseObjectLatLon(context);]