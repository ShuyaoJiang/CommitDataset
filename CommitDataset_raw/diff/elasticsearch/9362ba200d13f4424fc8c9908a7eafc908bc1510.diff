[+++ b/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +import org.elasticsearch.action.FailedNodeException;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.Set;, +        logListActionFailures(shard, "state", response.failures());, +    private void logListActionFailures(MutableShardRouting shard, String actionType, FailedNodeException[] failures) {, +        for (final FailedNodeException failure : failures) {, +            Throwable cause = ExceptionsHelper.unwrapCause(failure);, +            if (cause instanceof ConnectTransportException) {, +                continue;, +            }, +            // we log warn here. debug logs with full stack traces will be logged if debug logging is turned on for TransportNodeListGatewayStartedShards, +            logger.warn("{}: failed to list shard {} on node [{}]", failure, shard.shardId(), actionType, failure.nodeId());, +        }, +    }, +, +            logListActionFailures(shard, "stores", nodesStoreFilesMetaData.failures());, +++ b/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +import org.elasticsearch.action.FailedNodeException;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.Set;, +        logListActionFailures(shard, "state", response.failures());, +    private void logListActionFailures(MutableShardRouting shard, String actionType, FailedNodeException[] failures) {, +        for (final FailedNodeException failure : failures) {, +            Throwable cause = ExceptionsHelper.unwrapCause(failure);, +            if (cause instanceof ConnectTransportException) {, +                continue;, +            }, +            // we log warn here. debug logs with full stack traces will be logged if debug logging is turned on for TransportNodeListGatewayStartedShards, +            logger.warn("{}: failed to list shard {} on node [{}]", failure, shard.shardId(), actionType, failure.nodeId());, +        }, +    }, +, +            logListActionFailures(shard, "stores", nodesStoreFilesMetaData.failures());, +++ b/src/main/java/org/elasticsearch/gateway/ShardStateInfo.java, +        return "version [" + version + "], primary [" + primary + "]";, +++ b/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +import org.elasticsearch.action.FailedNodeException;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.Set;, +        logListActionFailures(shard, "state", response.failures());, +    private void logListActionFailures(MutableShardRouting shard, String actionType, FailedNodeException[] failures) {, +        for (final FailedNodeException failure : failures) {, +            Throwable cause = ExceptionsHelper.unwrapCause(failure);, +            if (cause instanceof ConnectTransportException) {, +                continue;, +            }, +            // we log warn here. debug logs with full stack traces will be logged if debug logging is turned on for TransportNodeListGatewayStartedShards, +            logger.warn("{}: failed to list shard {} on node [{}]", failure, shard.shardId(), actionType, failure.nodeId());, +        }, +    }, +, +            logListActionFailures(shard, "stores", nodesStoreFilesMetaData.failures());, +++ b/src/main/java/org/elasticsearch/gateway/ShardStateInfo.java, +        return "version [" + version + "], primary [" + primary + "]";, +++ b/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayStartedShards.java, +            logger.trace("loading shard state info for {}", request.shardId);, +                logger.debug("{} shard state info found: [{}]", request.shardId, shardStateInfo);, +            logger.trace("no shard info found for {}", request.shardId);, +++ b/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +import org.elasticsearch.action.FailedNodeException;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.Set;, +        logListActionFailures(shard, "state", response.failures());, +    private void logListActionFailures(MutableShardRouting shard, String actionType, FailedNodeException[] failures) {, +        for (final FailedNodeException failure : failures) {, +            Throwable cause = ExceptionsHelper.unwrapCause(failure);, +            if (cause instanceof ConnectTransportException) {, +                continue;, +            }, +            // we log warn here. debug logs with full stack traces will be logged if debug logging is turned on for TransportNodeListGatewayStartedShards, +            logger.warn("{}: failed to list shard {} on node [{}]", failure, shard.shardId(), actionType, failure.nodeId());, +        }, +    }, +, +            logListActionFailures(shard, "stores", nodesStoreFilesMetaData.failures());, +++ b/src/main/java/org/elasticsearch/gateway/ShardStateInfo.java, +        return "version [" + version + "], primary [" + primary + "]";, +++ b/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayStartedShards.java, +            logger.trace("loading shard state info for {}", request.shardId);, +                logger.debug("{} shard state info found: [{}]", request.shardId, shardStateInfo);, +            logger.trace("no shard info found for {}", request.shardId);, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +            } catch (CorruptIndexException | IndexNotFoundException | IndexFormatTooOldException | IndexFormatTooNewException ex) {, +                // we either know the index is corrupted or it's just not there, +                    logger.warn("failed to build store metadata. checking segment info integrity (with commit [{}])",, +                            ex, commit == null ? "no" : "yes");, +++ b/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +import org.elasticsearch.action.FailedNodeException;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.Set;, +        logListActionFailures(shard, "state", response.failures());, +    private void logListActionFailures(MutableShardRouting shard, String actionType, FailedNodeException[] failures) {, +        for (final FailedNodeException failure : failures) {, +            Throwable cause = ExceptionsHelper.unwrapCause(failure);]