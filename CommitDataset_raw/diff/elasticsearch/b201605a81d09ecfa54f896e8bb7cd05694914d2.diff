[+++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    public static final String PARENT = "parent";, +    public static final String FIELDDATA = "fielddata";, +    public static final String REQUEST = "request";, +    public static enum Type {, +    public void circuitBreak(String fieldName, long bytesNeeded);, +    public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;, +    public long addWithoutBreaking(long bytes);, +    public long getUsed();, +    public long getLimit();, +    public double getOverhead();, +    public long getTrippedCount();, +    public String getName();, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    public static final String PARENT = "parent";, +    public static final String FIELDDATA = "fielddata";, +    public static final String REQUEST = "request";, +    public static enum Type {, +    public void circuitBreak(String fieldName, long bytesNeeded);, +    public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;, +    public long addWithoutBreaking(long bytes);, +    public long getUsed();, +    public long getLimit();, +    public double getOverhead();, +    public long getTrippedCount();, +    public String getName();, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        throw new CircuitBreakingException(message);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    public static final String PARENT = "parent";, +    public static final String FIELDDATA = "fielddata";, +    public static final String REQUEST = "request";, +    public static enum Type {, +    public void circuitBreak(String fieldName, long bytesNeeded);, +    public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;, +    public long addWithoutBreaking(long bytes);, +    public long getUsed();, +    public long getLimit();, +    public double getOverhead();, +    public long getTrippedCount();, +    public String getName();, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        throw new CircuitBreakingException(message);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/NoopCircuitBreaker.java, +        return 0;, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    public static final String PARENT = "parent";, +    public static final String FIELDDATA = "fielddata";, +    public static final String REQUEST = "request";, +    public static enum Type {, +    public void circuitBreak(String fieldName, long bytesNeeded);, +    public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;, +    public long addWithoutBreaking(long bytes);, +    public long getUsed();, +    public long getLimit();, +    public double getOverhead();, +    public long getTrippedCount();, +    public String getName();, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        throw new CircuitBreakingException(message);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/NoopCircuitBreaker.java, +        return 0;, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    public static final String PARENT = "parent";, +    public static final String FIELDDATA = "fielddata";, +    public static final String REQUEST = "request";, +    public static enum Type {, +    public void circuitBreak(String fieldName, long bytesNeeded);, +    public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;, +    public long addWithoutBreaking(long bytes);, +    public long getUsed();, +    public long getLimit();, +    public double getOverhead();, +    public long getTrippedCount();, +    public String getName();, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        throw new CircuitBreakingException(message);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/NoopCircuitBreaker.java, +        return 0;, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +++ b/core/src/main/java/org/elasticsearch/indices/breaker/HierarchyCircuitBreakerService.java, +    private final ConcurrentMap<String, CircuitBreaker> breakers = new ConcurrentHashMap();, +, +++ b/core/src/main/java/org/elasticsearch/common/breaker/CircuitBreaker.java, +    public static final String PARENT = "parent";, +    public static final String FIELDDATA = "fielddata";, +    public static final String REQUEST = "request";, +    public static enum Type {, +    public void circuitBreak(String fieldName, long bytesNeeded);, +    public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException;, +    public long addWithoutBreaking(long bytes);, +    public long getUsed();, +    public long getLimit();, +    public double getOverhead();, +    public long getTrippedCount();, +    public String getName();, +++ b/core/src/main/java/org/elasticsearch/common/breaker/MemoryCircuitBreaker.java, +        throw new CircuitBreakingException(message);, +++ b/core/src/main/java/org/elasticsearch/common/breaker/NoopCircuitBreaker.java]