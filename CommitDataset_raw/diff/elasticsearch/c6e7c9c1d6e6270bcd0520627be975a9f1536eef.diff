[+++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditTrail.java, +, +import java.util.ArrayList;, +import java.util.EnumSet;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.ACCESS_DENIED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.ACCESS_GRANTED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.ANONYMOUS_ACCESS_DENIED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.AUTHENTICATION_FAILED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.CONNECTION_DENIED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.CONNECTION_GRANTED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.RUN_AS_DENIED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.RUN_AS_GRANTED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.SYSTEM_ACCESS_GRANTED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.TAMPERED_REQUEST;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.parse;, +    private static final String FORBIDDEN_INDEX_SETTING = "index.mapper.dynamic";, +            if (FORBIDDEN_INDEX_SETTING.equals(name)) {, +++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditTrail.java, +, +import java.util.ArrayList;, +import java.util.EnumSet;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.ACCESS_DENIED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.ACCESS_GRANTED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.ANONYMOUS_ACCESS_DENIED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.AUTHENTICATION_FAILED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.CONNECTION_DENIED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.CONNECTION_GRANTED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.RUN_AS_DENIED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.RUN_AS_GRANTED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.SYSTEM_ACCESS_GRANTED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.TAMPERED_REQUEST;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.parse;, +    private static final String FORBIDDEN_INDEX_SETTING = "index.mapper.dynamic";, +            if (FORBIDDEN_INDEX_SETTING.equals(name)) {, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/esusers/tool/ESUsersTool.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Set;, +            Set<String> knownRoles = loadRoleNames(terminal, settings, env);, +    private static Set<String> loadRoleNames(Terminal terminal, Settings settings, Environment env) {, +        Set<String> knownRoles = loadRoleNames(terminal, settings, env);, +++ b/shield/src/main/java/org/elasticsearch/shield/audit/index/IndexAuditTrail.java, +, +import java.util.ArrayList;, +import java.util.EnumSet;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.ACCESS_DENIED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.ACCESS_GRANTED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.ANONYMOUS_ACCESS_DENIED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.AUTHENTICATION_FAILED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.CONNECTION_DENIED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.CONNECTION_GRANTED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.RUN_AS_DENIED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.RUN_AS_GRANTED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.SYSTEM_ACCESS_GRANTED;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.TAMPERED_REQUEST;, +import static org.elasticsearch.shield.audit.index.IndexAuditLevel.parse;, +    private static final String FORBIDDEN_INDEX_SETTING = "index.mapper.dynamic";, +            if (FORBIDDEN_INDEX_SETTING.equals(name)) {, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/esusers/tool/ESUsersTool.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Set;, +            Set<String> knownRoles = loadRoleNames(terminal, settings, env);, +    private static Set<String> loadRoleNames(Terminal terminal, Settings settings, Environment env) {, +        Set<String> knownRoles = loadRoleNames(terminal, settings, env);, +++ b/shield/src/main/java/org/elasticsearch/shield/authz/Permission.java, +, +import static java.util.Collections.unmodifiableSet;, +, +            @Override, +                Map<String, Set<String>> rolesFieldsByIndex = new HashMap<>();, +                Map<String, Set<BytesReference>> roleQueriesByIndex = new HashMap<>();, +                                    Set<String> roleFields = rolesFieldsByIndex.get(index);, +                                    if (roleFields == null) {, +                                        roleFields = new HashSet<>();, +                                        rolesFieldsByIndex.put(index, roleFields);, +                                    roleFields.addAll(group.getFields());, +                                    Set<BytesReference> roleQueries = roleQueriesByIndex.get(index);, +                                    if (roleQueries == null) {, +                                        roleQueries = new HashSet<>();, +                                        roleQueriesByIndex.put(index, roleQueries);]