[+++ b/core/src/main/java/org/elasticsearch/action/ingest/IngestActionFilter.java, +, +            // TransportIndexAction uses IndexRequest and same action name on the node that receives the request and the node that, +            // processes the primary action. This could lead to a pipeline being executed twice for the same, +            // index request, hence we set the pipeline to null once its execution completed., +            indexRequest.pipeline(null);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/IngestActionFilter.java, +, +            // TransportIndexAction uses IndexRequest and same action name on the node that receives the request and the node that, +            // processes the primary action. This could lead to a pipeline being executed twice for the same, +            // index request, hence we set the pipeline to null once its execution completed., +            indexRequest.pipeline(null);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineExecutionService.java, +                            //this shouldn't be needed here but we do it for consistency with index api which requires it to prevent double execution, +                            indexRequest.pipeline(null);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/IngestActionFilter.java, +, +            // TransportIndexAction uses IndexRequest and same action name on the node that receives the request and the node that, +            // processes the primary action. This could lead to a pipeline being executed twice for the same, +            // index request, hence we set the pipeline to null once its execution completed., +            indexRequest.pipeline(null);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineExecutionService.java, +                            //this shouldn't be needed here but we do it for consistency with index api which requires it to prevent double execution, +                            indexRequest.pipeline(null);, +++ b/core/src/test/java/org/elasticsearch/action/ingest/IngestActionFilterTests.java, +import static org.hamcrest.Matchers.nullValue;, +import static org.mockito.Mockito.times;, +, +    @SuppressWarnings("unchecked"), +    public void testIndexApiSinglePipelineExecution() {, +        Answer answer = invocationOnMock -> {, +            @SuppressWarnings("unchecked"), +            Consumer<Boolean> listener = (Consumer) invocationOnMock.getArguments()[2];, +            listener.accept(true);, +            return null;, +        };, +        doAnswer(answer).when(executionService).execute(any(IndexRequest.class), any(Consumer.class), any(Consumer.class));, +, +        Task task = mock(Task.class);, +        ActionListener actionListener = mock(ActionListener.class);, +        ActionFilterChain actionFilterChain = mock(ActionFilterChain.class);, +, +        IndexRequest indexRequest = new IndexRequest("_index", "_type", "_id").pipeline("_id").source("field", "value");, +        filter.apply(task, IndexAction.NAME, indexRequest, actionListener, actionFilterChain);, +        assertThat(indexRequest.pipeline(), nullValue());, +        filter.apply(task, IndexAction.NAME, indexRequest, actionListener, actionFilterChain);, +        verify(executionService, times(1)).execute(same(indexRequest), any(Consumer.class), any(Consumer.class));, +        verify(actionFilterChain, times(2)).proceed(task, IndexAction.NAME, indexRequest, actionListener);, +    }]