[+++ b/buildSrc/version.properties, +lucene            = 6.1.0, +++ b/buildSrc/version.properties, +lucene            = 6.1.0, +++ b/client/benchmark/README.md, +Steps to execute the benchmark:, +1. Start Elasticsearch on the target host (ideally *not* on the same machine), +2. Create an empty index with the mapping you want to benchmark, +3. Build an uberjar with `gradle :client:benchmark:shadowJar` and execute it., +4. Delete the index, +5. Repeat steps 2. - 4. for multiple iterations. The first iterations are intended as warmup for Elasticsearch itself. Always start the same benchmark in step 3!, +4. After the benchmark: Shutdown Elasticsearch and delete the data directory, +Example benchmark:, +* Download benchmark data from http://benchmarks.elastic.co/corpora/geonames/documents.json.bz2 and decompress, +* Use the mapping file https://github.com/elastic/rally-tracks/blob/master/geonames/mappings.json to create the index, +Example command line parameter list:, +rest 192.168.2.2 /home/your_user_name/.rally/benchmarks/data/geonames/documents.json geonames type 8647880 5000 "{ \"query\": { \"match_phrase\": { \"name\": \"Sankt Georgen\" } } }\"", +You should also define a few GC-related settings `-Xms4096M -Xmx4096M  -XX:+UseConcMarkSweepGC -verbose:gc -XX:+PrintGCDetails` and keep an eye on GC activity. You can also define `-XX:+PrintCompilation` to see JIT activity., +++ b/buildSrc/version.properties, +lucene            = 6.1.0, +++ b/client/benchmark/README.md, +Steps to execute the benchmark:, +1. Start Elasticsearch on the target host (ideally *not* on the same machine), +2. Create an empty index with the mapping you want to benchmark, +3. Build an uberjar with `gradle :client:benchmark:shadowJar` and execute it., +4. Delete the index, +5. Repeat steps 2. - 4. for multiple iterations. The first iterations are intended as warmup for Elasticsearch itself. Always start the same benchmark in step 3!, +4. After the benchmark: Shutdown Elasticsearch and delete the data directory, +Example benchmark:, +* Download benchmark data from http://benchmarks.elastic.co/corpora/geonames/documents.json.bz2 and decompress, +* Use the mapping file https://github.com/elastic/rally-tracks/blob/master/geonames/mappings.json to create the index, +Example command line parameter list:, +rest 192.168.2.2 /home/your_user_name/.rally/benchmarks/data/geonames/documents.json geonames type 8647880 5000 "{ \"query\": { \"match_phrase\": { \"name\": \"Sankt Georgen\" } } }\"", +You should also define a few GC-related settings `-Xms4096M -Xmx4096M  -XX:+UseConcMarkSweepGC -verbose:gc -XX:+PrintGCDetails` and keep an eye on GC activity. You can also define `-XX:+PrintCompilation` to see JIT activity., +++ b/client/benchmark/build.gradle, +++ b/buildSrc/version.properties, +lucene            = 6.1.0, +++ b/client/benchmark/README.md, +Steps to execute the benchmark:, +1. Start Elasticsearch on the target host (ideally *not* on the same machine), +2. Create an empty index with the mapping you want to benchmark, +3. Build an uberjar with `gradle :client:benchmark:shadowJar` and execute it., +4. Delete the index, +5. Repeat steps 2. - 4. for multiple iterations. The first iterations are intended as warmup for Elasticsearch itself. Always start the same benchmark in step 3!, +4. After the benchmark: Shutdown Elasticsearch and delete the data directory, +Example benchmark:, +* Download benchmark data from http://benchmarks.elastic.co/corpora/geonames/documents.json.bz2 and decompress, +* Use the mapping file https://github.com/elastic/rally-tracks/blob/master/geonames/mappings.json to create the index, +Example command line parameter list:, +rest 192.168.2.2 /home/your_user_name/.rally/benchmarks/data/geonames/documents.json geonames type 8647880 5000 "{ \"query\": { \"match_phrase\": { \"name\": \"Sankt Georgen\" } } }\"", +You should also define a few GC-related settings `-Xms4096M -Xmx4096M  -XX:+UseConcMarkSweepGC -verbose:gc -XX:+PrintGCDetails` and keep an eye on GC activity. You can also define `-XX:+PrintCompilation` to see JIT activity., +++ b/client/benchmark/build.gradle, +++ b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/AbstractBenchmark.java, +        if (args.length < 6) {, +                "usage: benchmarkTargetHostIp indexFilePath indexName typeName numberOfDocuments bulkSize [search request body]");, +        String benchmarkTargetHost = args[0];, +        String indexFilePath = args[1];, +        String indexName = args[2];, +        String typeName = args[3];, +        int totalDocs = Integer.valueOf(args[4]);, +        int bulkSize = Integer.valueOf(args[5]);, +        String searchBody = (args.length == 7) ? args[6] : null;, +                bulkRequestExecutor(client, indexName, typeName), indexFilePath, warmupIterations + iterations, bulkSize));, +            if (searchBody != null) {, +                for (int run = 1; run <= 5; run++) {, +                    System.out.println("=============");, +                    System.out.println(" Trial run " + run);, +                    System.out.println("=============");, +                    for (int throughput = 100; throughput <= 100_000; throughput *= 10) {, +                        BenchmarkRunner searchBenchmark = new BenchmarkRunner(SEARCH_BENCHMARK_ITERATIONS, SEARCH_BENCHMARK_ITERATIONS,, +                                searchRequestExecutor(client, indexName), searchBody, 2 * SEARCH_BENCHMARK_ITERATIONS, throughput));, +                        searchBenchmark.run();, +                }, +            }, +++ b/buildSrc/version.properties, +lucene            = 6.1.0, +++ b/client/benchmark/README.md, +Steps to execute the benchmark:, +1. Start Elasticsearch on the target host (ideally *not* on the same machine), +2. Create an empty index with the mapping you want to benchmark, +3. Build an uberjar with `gradle :client:benchmark:shadowJar` and execute it., +4. Delete the index, +5. Repeat steps 2. - 4. for multiple iterations. The first iterations are intended as warmup for Elasticsearch itself. Always start the same benchmark in step 3!, +4. After the benchmark: Shutdown Elasticsearch and delete the data directory, +Example benchmark:, +* Download benchmark data from http://benchmarks.elastic.co/corpora/geonames/documents.json.bz2 and decompress, +* Use the mapping file https://github.com/elastic/rally-tracks/blob/master/geonames/mappings.json to create the index, +Example command line parameter list:, +rest 192.168.2.2 /home/your_user_name/.rally/benchmarks/data/geonames/documents.json geonames type 8647880 5000 "{ \"query\": { \"match_phrase\": { \"name\": \"Sankt Georgen\" } } }\"", +You should also define a few GC-related settings `-Xms4096M -Xmx4096M  -XX:+UseConcMarkSweepGC -verbose:gc -XX:+PrintGCDetails` and keep an eye on GC activity. You can also define `-XX:+PrintCompilation` to see JIT activity., +++ b/client/benchmark/build.gradle, +++ b/client/benchmark/src/main/java/org/elasticsearch/client/benchmark/AbstractBenchmark.java, +        if (args.length < 6) {, +                "usage: benchmarkTargetHostIp indexFilePath indexName typeName numberOfDocuments bulkSize [search request body]");, +        String benchmarkTargetHost = args[0];, +        String indexFilePath = args[1];, +        String indexName = args[2];, +        String typeName = args[3];, +        int totalDocs = Integer.valueOf(args[4]);, +        int bulkSize = Integer.valueOf(args[5]);]