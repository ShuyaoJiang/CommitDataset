[+++ b/src/main/java/org/elasticsearch/index/mapper/internal/AllFieldMapper.java, +                indexAnalyzer == null && searchAnalyzer == null && customFieldDataSettings == null, +                && fieldType.omitNorms() == Defaults.FIELD_TYPE.omitNorms()) {, +        if (includeDefaults || fieldType.omitNorms() != Defaults.FIELD_TYPE.omitNorms()) {, +            builder.field("omit_norms", fieldType.omitNorms());, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/AllFieldMapper.java, +                indexAnalyzer == null && searchAnalyzer == null && customFieldDataSettings == null, +                && fieldType.omitNorms() == Defaults.FIELD_TYPE.omitNorms()) {, +        if (includeDefaults || fieldType.omitNorms() != Defaults.FIELD_TYPE.omitNorms()) {, +            builder.field("omit_norms", fieldType.omitNorms());, +        }, +++ b/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java, +        assertThat(field.fieldType().omitNorms(), equalTo(true));, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +        assertThat(field.fieldType().omitNorms(), equalTo(true));, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/AllFieldMapper.java, +                indexAnalyzer == null && searchAnalyzer == null && customFieldDataSettings == null, +                && fieldType.omitNorms() == Defaults.FIELD_TYPE.omitNorms()) {, +        if (includeDefaults || fieldType.omitNorms() != Defaults.FIELD_TYPE.omitNorms()) {, +            builder.field("omit_norms", fieldType.omitNorms());, +        }, +++ b/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java, +        assertThat(field.fieldType().omitNorms(), equalTo(true));, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +        assertThat(field.fieldType().omitNorms(), equalTo(true));, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +++ b/src/test/java/org/elasticsearch/index/mapper/all/mapping.json, +            "enabled":true,, +            "omit_norms":true, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/AllFieldMapper.java, +                indexAnalyzer == null && searchAnalyzer == null && customFieldDataSettings == null, +                && fieldType.omitNorms() == Defaults.FIELD_TYPE.omitNorms()) {, +        if (includeDefaults || fieldType.omitNorms() != Defaults.FIELD_TYPE.omitNorms()) {, +            builder.field("omit_norms", fieldType.omitNorms());, +        }, +++ b/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java, +        assertThat(field.fieldType().omitNorms(), equalTo(true));, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +        assertThat(field.fieldType().omitNorms(), equalTo(true));, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +        assertThat(field.fieldType().omitNorms(), equalTo(false));, +++ b/src/test/java/org/elasticsearch/index/mapper/all/mapping.json, +            "enabled":true,, +            "omit_norms":true, +++ b/src/test/java/org/elasticsearch/search/query/SimpleQueryTests.java, +    @Test, +    public void testOmitNormsOnAll() throws ExecutionException, InterruptedException, IOException {, +        assertAcked(client().admin().indices().prepareCreate("test"), +                .addMapping("type1", jsonBuilder().startObject().startObject("type1"), +                        .startObject("_all").field("omit_norms", true).endObject(), +                        .endObject().endObject()));, +        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "the quick brown fox jumps"),, +                client().prepareIndex("test", "type1", "2").setSource("field1", "quick brown"),, +                client().prepareIndex("test", "type1", "3").setSource("field1", "quick"));, +, +        assertHitCount(client().prepareSearch().setQuery(matchQuery("_all", "quick")).get(), 3l);, +        SearchResponse searchResponse = client().prepareSearch().setQuery(matchQuery("_all", "quick")).get();, +        SearchHit[] hits = searchResponse.getHits().hits();, +        assertThat(hits.length, equalTo(3));, +        assertThat(hits[0].score(), allOf(equalTo(hits[1].getScore()), equalTo(hits[2].getScore())));, +        wipeIndices("test");, +, +        assertAcked(client().admin().indices().prepareCreate("test"));, +        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "the quick brown fox jumps"),, +                client().prepareIndex("test", "type1", "2").setSource("field1", "quick brown"),, +                client().prepareIndex("test", "type1", "3").setSource("field1", "quick"));, +, +        assertHitCount(client().prepareSearch().setQuery(matchQuery("_all", "quick")).get(), 3l);, +        searchResponse = client().prepareSearch().setQuery(matchQuery("_all", "quick")).get();, +        hits = searchResponse.getHits().hits();, +        assertThat(hits.length, equalTo(3));, +        assertThat(hits[0].score(), allOf(greaterThan(hits[1].getScore()), greaterThan(hits[2].getScore())));, +, +    }, +, +]