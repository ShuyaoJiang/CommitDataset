[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/AllocationId.java, +import org.elasticsearch.gateway.CorruptStateException;, +        XContentParser.Token token = parser.currentToken();, +        if (token == null) { // fresh parser? move to the first real token under object, +            token = parser.nextToken();, +        }, +        assert token == XContentParser.Token.START_OBJECT;, +, +        String id = null;, +        String relocationId = null;, +, +        String currentFieldName = null;, +, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if (ID_KEY.equals(currentFieldName)) {, +                    id = parser.text();, +                } else if (RELOCATION_ID_KEY.equals(currentFieldName)) {, +                    relocationId = parser.text();, +                } else {, +                    throw new CorruptStateException("unexpected field in allocation id [" + currentFieldName + "]");, +                }, +            } else {, +                throw new CorruptStateException("unexpected token in allocation id [" + token.name() + "]");, +            }, +        }, +        if (id == null) {, +            throw new CorruptStateException("missing value for [id] in allocation id");, +        }, +        return new AllocationId(id, relocationId);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/AllocationId.java, +import org.elasticsearch.gateway.CorruptStateException;, +        XContentParser.Token token = parser.currentToken();, +        if (token == null) { // fresh parser? move to the first real token under object, +            token = parser.nextToken();, +        }, +        assert token == XContentParser.Token.START_OBJECT;, +, +        String id = null;, +        String relocationId = null;, +, +        String currentFieldName = null;, +, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if (ID_KEY.equals(currentFieldName)) {, +                    id = parser.text();, +                } else if (RELOCATION_ID_KEY.equals(currentFieldName)) {, +                    relocationId = parser.text();, +                } else {, +                    throw new CorruptStateException("unexpected field in allocation id [" + currentFieldName + "]");, +                }, +            } else {, +                throw new CorruptStateException("unexpected token in allocation id [" + token.name() + "]");, +            }, +        }, +        if (id == null) {, +            throw new CorruptStateException("missing value for [id] in allocation id");, +        }, +        return new AllocationId(id, relocationId);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +                List<Bucket> existingBuckets = buckets.get(bucket.getKey());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/AllocationId.java, +import org.elasticsearch.gateway.CorruptStateException;, +        XContentParser.Token token = parser.currentToken();, +        if (token == null) { // fresh parser? move to the first real token under object, +            token = parser.nextToken();, +        }, +        assert token == XContentParser.Token.START_OBJECT;, +, +        String id = null;, +        String relocationId = null;, +, +        String currentFieldName = null;, +, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token.isValue()) {, +                if (ID_KEY.equals(currentFieldName)) {, +                    id = parser.text();, +                } else if (RELOCATION_ID_KEY.equals(currentFieldName)) {, +                    relocationId = parser.text();, +                } else {, +                    throw new CorruptStateException("unexpected field in allocation id [" + currentFieldName + "]");, +                }, +            } else {, +                throw new CorruptStateException("unexpected token in allocation id [" + token.name() + "]");, +            }, +        }, +        if (id == null) {, +            throw new CorruptStateException("missing value for [id] in allocation id");, +        }, +        return new AllocationId(id, relocationId);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +                List<Bucket> existingBuckets = buckets.get(bucket.getKey());]