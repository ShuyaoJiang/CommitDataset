[+++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapper.java, +import org.apache.lucene.search.Query;, +import org.elasticsearch.index.query.QueryShardContext;, +, +        @Override, +        public Query termQuery(Object value, QueryShardContext context) {, +            if (isEnabled() == false) {, +                throw new IllegalStateException("Cannot run [exists] queries if the [_field_names] field is disabled");, +            }, +            return super.termQuery(value, context);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapper.java, +import org.apache.lucene.search.Query;, +import org.elasticsearch.index.query.QueryShardContext;, +, +        @Override, +        public Query termQuery(Object value, QueryShardContext context) {, +            if (isEnabled() == false) {, +                throw new IllegalStateException("Cannot run [exists] queries if the [_field_names] field is disabled");, +            }, +            return super.termQuery(value, context);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +import java.util.Collections;, +        final Collection<String> fields;, +        if (context.getObjectMapper(fieldPattern) != null) {, +            // the _field_names field also indexes objects, so we don't have to, +            // do any more work to support exists queries on whole objects, +            fields = Collections.singleton(fieldPattern);, +        } else {, +            fields = context.simpleMatchToIndexNames(fieldPattern);, +            Query filter = fieldNamesFieldType.termQuery(field, context);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapper.java, +import org.apache.lucene.search.Query;, +import org.elasticsearch.index.query.QueryShardContext;, +, +        @Override, +        public Query termQuery(Object value, QueryShardContext context) {, +            if (isEnabled() == false) {, +                throw new IllegalStateException("Cannot run [exists] queries if the [_field_names] field is disabled");, +            }, +            return super.termQuery(value, context);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +import java.util.Collections;, +        final Collection<String> fields;, +        if (context.getObjectMapper(fieldPattern) != null) {, +            // the _field_names field also indexes objects, so we don't have to, +            // do any more work to support exists queries on whole objects, +            fields = Collections.singleton(fieldPattern);, +        } else {, +            fields = context.simpleMatchToIndexNames(fieldPattern);, +            Query filter = fieldNamesFieldType.termQuery(field, context);, +++ b/core/src/test/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldTypeTests.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.TermQuery;, +, +    public void testTermQuery() {, +        FieldNamesFieldMapper.FieldNamesFieldType type = new FieldNamesFieldMapper.FieldNamesFieldType();, +        type.setName(FieldNamesFieldMapper.CONTENT_TYPE);, +        type.setEnabled(true);, +        Query termQuery = type.termQuery("field_name", null);, +        assertEquals(new TermQuery(new Term(FieldNamesFieldMapper.CONTENT_TYPE, "field_name")), termQuery);, +        type.setEnabled(false);, +        IllegalStateException e = expectThrows(IllegalStateException.class, () -> type.termQuery("field_name", null));, +        assertEquals("Cannot run [exists] queries if the [_field_names] field is disabled", e.getMessage());, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldMapper.java, +import org.apache.lucene.search.Query;, +import org.elasticsearch.index.query.QueryShardContext;, +, +        @Override, +        public Query termQuery(Object value, QueryShardContext context) {, +            if (isEnabled() == false) {, +                throw new IllegalStateException("Cannot run [exists] queries if the [_field_names] field is disabled");, +            }, +            return super.termQuery(value, context);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/ExistsQueryBuilder.java, +import java.util.Collections;, +        final Collection<String> fields;, +        if (context.getObjectMapper(fieldPattern) != null) {, +            // the _field_names field also indexes objects, so we don't have to, +            // do any more work to support exists queries on whole objects, +            fields = Collections.singleton(fieldPattern);, +        } else {, +            fields = context.simpleMatchToIndexNames(fieldPattern);, +            Query filter = fieldNamesFieldType.termQuery(field, context);, +++ b/core/src/test/java/org/elasticsearch/index/mapper/internal/FieldNamesFieldTypeTests.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.TermQuery;, +, +    public void testTermQuery() {, +        FieldNamesFieldMapper.FieldNamesFieldType type = new FieldNamesFieldMapper.FieldNamesFieldType();, +        type.setName(FieldNamesFieldMapper.CONTENT_TYPE);, +        type.setEnabled(true);, +        Query termQuery = type.termQuery("field_name", null);, +        assertEquals(new TermQuery(new Term(FieldNamesFieldMapper.CONTENT_TYPE, "field_name")), termQuery);]