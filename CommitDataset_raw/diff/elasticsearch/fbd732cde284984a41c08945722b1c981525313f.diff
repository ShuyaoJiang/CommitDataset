[+++ b/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +import java.util.Collection;, +, +    public static TermsQueryBuilder termsQuery(String name, Collection values) {, +        return new TermsQueryBuilder(name, values);, +    }, +, +    /**, +     * A filer for a field based on several terms matching on any of them., +     *, +     * @param name   The field name, +     * @param values The terms, +     */, +     * A filer for a field based on several terms matching on any of them., +     *, +     * @param name   The field name, +     * @param values The terms, +     */, +    public static TermsQueryBuilder inQuery(String name, Collection values) {, +        return new TermsQueryBuilder(name, values);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +import java.util.Collection;, +, +    public static TermsQueryBuilder termsQuery(String name, Collection values) {, +        return new TermsQueryBuilder(name, values);, +    }, +, +    /**, +     * A filer for a field based on several terms matching on any of them., +     *, +     * @param name   The field name, +     * @param values The terms, +     */, +     * A filer for a field based on several terms matching on any of them., +     *, +     * @param name   The field name, +     * @param values The terms, +     */, +    public static TermsQueryBuilder inQuery(String name, Collection values) {, +        return new TermsQueryBuilder(name, values);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java, +import java.util.Collection;, +   * A query for a field based on several terms matching on any of them., +   *, +   * @param name    The field name, +   * @param values  The terms, +   */, +    public TermsQueryBuilder(String name, Collection values) {, +        this(name, values.toArray());, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +import java.util.Collection;, +, +    public static TermsQueryBuilder termsQuery(String name, Collection values) {, +        return new TermsQueryBuilder(name, values);, +    }, +, +    /**, +     * A filer for a field based on several terms matching on any of them., +     *, +     * @param name   The field name, +     * @param values The terms, +     */, +     * A filer for a field based on several terms matching on any of them., +     *, +     * @param name   The field name, +     * @param values The terms, +     */, +    public static TermsQueryBuilder inQuery(String name, Collection values) {, +        return new TermsQueryBuilder(name, values);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java, +import java.util.Collection;, +   * A query for a field based on several terms matching on any of them., +   *, +   * @param name    The field name, +   * @param values  The terms, +   */, +    public TermsQueryBuilder(String name, Collection values) {, +        this(name, values.toArray());, +    }, +, +    /**, +++ b/src/test/java/org/elasticsearch/test/unit/index/query/SimpleIndexQueryParserTests.java, +import com.google.common.collect.Lists;, +    public void testTermsQueryBuilder() throws IOException {, +      IndexQueryParserService queryParser = queryParser();, +      Query parsedQuery = queryParser.parse(termsQuery("name.first", Lists.newArrayList("shay", "test"))).query();, +      assertThat(parsedQuery, instanceOf(BooleanQuery.class));, +      BooleanQuery booleanQuery = (BooleanQuery) parsedQuery;]