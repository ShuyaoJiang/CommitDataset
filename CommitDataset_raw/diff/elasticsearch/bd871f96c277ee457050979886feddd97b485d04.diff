[+++ b/docs/reference/modules/plugins.asciidoc, +==== Lucene version dependent plugins, +, +coming[1.2.0], +, +For some plugins, such as analysis plugins, a specific major Lucene version is, +required to run. In that case, the plugin provides in its `es-plugin.properties`, +file the Lucene version for which the plugin was built for., +, +If present at startup the node will check the Lucene version before loading the plugin., +, +You can disable that check using `plugins.check_lucene: false`., +, +[float], +++ b/docs/reference/modules/plugins.asciidoc, +==== Lucene version dependent plugins, +, +coming[1.2.0], +, +For some plugins, such as analysis plugins, a specific major Lucene version is, +required to run. In that case, the plugin provides in its `es-plugin.properties`, +file the Lucene version for which the plugin was built for., +, +If present at startup the node will check the Lucene version before loading the plugin., +, +You can disable that check using `plugins.check_lucene: false`., +, +[float], +++ b/pom.xml, +                    <include>**/*.properties</include>, +                <filtering>true</filtering>, +++ b/docs/reference/modules/plugins.asciidoc, +==== Lucene version dependent plugins, +, +coming[1.2.0], +, +For some plugins, such as analysis plugins, a specific major Lucene version is, +required to run. In that case, the plugin provides in its `es-plugin.properties`, +file the Lucene version for which the plugin was built for., +, +If present at startup the node will check the Lucene version before loading the plugin., +, +You can disable that check using `plugins.check_lucene: false`., +, +[float], +++ b/pom.xml, +                    <include>**/*.properties</include>, +                <filtering>true</filtering>, +++ b/src/main/java/org/elasticsearch/plugins/PluginsService.java, +import org.apache.lucene.util.Constants;, +import org.elasticsearch.Version;, +import org.elasticsearch.common.logging.ESLogger;, +    public static final String ES_PLUGIN_PROPERTIES = "es-plugin.properties";, +    private final boolean checkLucene;, +        this.checkLucene = componentSettings.getAsBoolean("check_lucene", true);, +, +            if (!checkLucene || checkLuceneCompatibility(pluginClass, settings, logger)) {, +            } else {, +                throw new ElasticsearchException("Plugin is incompatible with the current node");, +            }, +, +, +    /**, +     * <p>Check that a plugin is Lucene compatible with the current running node using `lucene` property, +     * in `es-plugin.properties` file.</p>, +     * <p>If plugin does not provide `lucene` property, we consider that the plugin is compatible.</p>, +     * <p>If plugin provides `lucene` property, we try to load related Enum org.apache.lucene.util.Version. If this, +     * fails, it means that the node is too "old" comparing to the Lucene version the plugin was built for.</p>, +     * <p>We compare then two first digits of current node lucene version against two first digits of plugin Lucene, +     * version. If not equal, it means that the plugin is too "old" for the current node.</p>, +     *, +     * @param pluginClass Plugin class we are checking, +     * @return true if the plugin is Lucene compatible, +     */, +    public static boolean checkLuceneCompatibility(Class<? extends Plugin> pluginClass, Settings settings, ESLogger logger) {, +        String luceneVersion = null;, +        try {, +            // We try to read the es-plugin.properties file, +            // But as we can have several plugins in the same classloader,, +            // we have to find the right es-plugin.properties file, +            Enumeration<URL> pluginUrls = settings.getClassLoader().getResources(PluginsService.ES_PLUGIN_PROPERTIES);, +, +            while (pluginUrls.hasMoreElements()) {, +                URL pluginUrl = pluginUrls.nextElement();, +                try (InputStream is = pluginUrl.openStream()) {, +                    Properties pluginProps = new Properties();, +                    pluginProps.load(is);, +                    String plugin = pluginProps.getProperty("plugin");, +                    // If we don't have the expected plugin, let's continue to the next one, +                    if (pluginClass.getName().equals(plugin)) {, +                        luceneVersion = pluginProps.getProperty("lucene");, +                        break;, +                    }, +                    logger.debug("skipping [{}]", pluginUrl);, +                }, +            }, +, +            if (luceneVersion != null) {, +                // We only keep the first two parts, +                String parts[] = luceneVersion.split("\\.");]