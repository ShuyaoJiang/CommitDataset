[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +        boolean legacyTableType = false;, +                }, +                // special case for legacy apps (like msquery) that always asks for 'TABLE', +                // which we manually map to all concrete tables supported, +                else if (value.toUpperCase(Locale.ROOT).equals("TABLE")) {, +                    legacyTableType = true;, +                    types.add(IndexType.INDEX);, +        return new SysTables(source(ctx), visitPattern(ctx.clusterPattern), visitPattern(ctx.tablePattern), set, legacyTableType);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +        boolean legacyTableType = false;, +                }, +                // special case for legacy apps (like msquery) that always asks for 'TABLE', +                // which we manually map to all concrete tables supported, +                else if (value.toUpperCase(Locale.ROOT).equals("TABLE")) {, +                    legacyTableType = true;, +                    types.add(IndexType.INDEX);, +        return new SysTables(source(ctx), visitPattern(ctx.clusterPattern), visitPattern(ctx.tablePattern), set, legacyTableType);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTables.java, +    // flag indicating whether tables are reported as `TABLE` or `BASE TABLE`, +    private final boolean legacyTableTypes;, +    public SysTables(Location location, LikePattern clusterPattern, LikePattern pattern, EnumSet<IndexType> types,, +            boolean legacyTableTypes) {, +        this.legacyTableTypes = legacyTableTypes;, +        return NodeInfo.create(this, SysTables::new, clusterPattern, pattern, types, legacyTableTypes);, +                         legacyName(t.type()),, +    private String legacyName(IndexType indexType) {, +        return legacyTableTypes && indexType == IndexType.INDEX ? "TABLE" : indexType.toSql();, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +        boolean legacyTableType = false;, +                }, +                // special case for legacy apps (like msquery) that always asks for 'TABLE', +                // which we manually map to all concrete tables supported, +                else if (value.toUpperCase(Locale.ROOT).equals("TABLE")) {, +                    legacyTableType = true;, +                    types.add(IndexType.INDEX);, +        return new SysTables(source(ctx), visitPattern(ctx.clusterPattern), visitPattern(ctx.tablePattern), set, legacyTableType);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTables.java, +    // flag indicating whether tables are reported as `TABLE` or `BASE TABLE`, +    private final boolean legacyTableTypes;, +    public SysTables(Location location, LikePattern clusterPattern, LikePattern pattern, EnumSet<IndexType> types,, +            boolean legacyTableTypes) {, +        this.legacyTableTypes = legacyTableTypes;, +        return NodeInfo.create(this, SysTables::new, clusterPattern, pattern, types, legacyTableTypes);, +                         legacyName(t.type()),, +    private String legacyName(IndexType indexType) {, +        return legacyTableTypes && indexType == IndexType.INDEX ? "TABLE" : indexType.toSql();, +    }, +, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTablesTests.java, +    public void testSysTablesOnlyIndicesInLegacyMode() throws Exception {, +        executeCommand("SYS TABLES LIKE 'test' TYPE 'TABLE'", r -> {, +            assertEquals(1, r.size());, +            assertEquals("test", r.column(2));, +            assertEquals("TABLE", r.column(3));, +        }, index);, +, +    }, +, +    public void testSysTablesOnlyIndicesLegacyModeParameterized() throws Exception {, +        executeCommand("SYS TABLES LIKE 'test' TYPE ?", asList(param("TABLE")), r -> {, +            assertEquals(1, r.size());, +            assertEquals("test", r.column(2));, +            assertEquals("TABLE", r.column(3));, +        }, index);, +    }, +, +    public void testSysTablesOnlyIndicesLegacyAndAliasesParameterized() throws Exception {, +        List<SqlTypedParamValue> params = asList(param("ALIAS"), param("TABLE"));, +        executeCommand("SYS TABLES LIKE 'test' TYPE ?, ?", params, r -> {, +            assertEquals(2, r.size());, +            assertEquals("test", r.column(2));, +            assertEquals("TABLE", r.column(3));, +            assertTrue(r.advanceRow());, +            assertEquals("alias", r.column(2));, +            assertEquals("ALIAS", r.column(3));, +        }, index, alias);, +    }, +]