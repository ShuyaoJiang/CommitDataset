[+++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `gradle eclipse` then `File: Import: Existing Projects into Workspace`. Select the option `Search for nested projects`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `gradle eclipse` then `File: Import: Existing Projects into Workspace`. Select the option `Search for nested projects`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/README.textile, +curl -XPUT 'http://localhost:9200/twitter/user/kimchy' -d '{ "name" : "Shay Banon" }', +curl -XPUT 'http://localhost:9200/twitter/tweet/1' -d ', +    "postDate": "2009-11-15T13:12:00",, +curl -XPUT 'http://localhost:9200/twitter/tweet/2' -d ', +    "postDate": "2009-11-15T14:12:12",, +        "matchAll" : {}, +            "postDate" : { "from" : "2009-11-15T13:00:00", "to" : "2009-11-15T14:00:00" }, +curl -XPUT 'http://localhost:9200/kimchy/info/1' -d '{ "name" : "Shay Banon" }', +curl -XPUT 'http://localhost:9200/kimchy/tweet/1' -d ', +    "postDate": "2009-11-15T13:12:00",, +curl -XPUT 'http://localhost:9200/kimchy/tweet/2' -d ', +    "postDate": "2009-11-15T14:12:12",, +curl -XPUT http://localhost:9200/another_user/ -d ', +        "numberOfShards" : 1,, +        "numberOfReplicas" : 1, +        "matchAll" : {}, +        "matchAll" : {}, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `gradle eclipse` then `File: Import: Existing Projects into Workspace`. Select the option `Search for nested projects`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/README.textile, +curl -XPUT 'http://localhost:9200/twitter/user/kimchy' -d '{ "name" : "Shay Banon" }', +curl -XPUT 'http://localhost:9200/twitter/tweet/1' -d ', +    "postDate": "2009-11-15T13:12:00",, +curl -XPUT 'http://localhost:9200/twitter/tweet/2' -d ', +    "postDate": "2009-11-15T14:12:12",, +        "matchAll" : {}, +            "postDate" : { "from" : "2009-11-15T13:00:00", "to" : "2009-11-15T14:00:00" }, +curl -XPUT 'http://localhost:9200/kimchy/info/1' -d '{ "name" : "Shay Banon" }', +curl -XPUT 'http://localhost:9200/kimchy/tweet/1' -d ', +    "postDate": "2009-11-15T13:12:00",, +curl -XPUT 'http://localhost:9200/kimchy/tweet/2' -d ', +    "postDate": "2009-11-15T14:12:12",, +curl -XPUT http://localhost:9200/another_user/ -d ', +        "numberOfShards" : 1,, +        "numberOfReplicas" : 1, +        "matchAll" : {}, +        "matchAll" : {}, +++ b/build.gradle, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `gradle eclipse` then `File: Import: Existing Projects into Workspace`. Select the option `Search for nested projects`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/README.textile, +curl -XPUT 'http://localhost:9200/twitter/user/kimchy' -d '{ "name" : "Shay Banon" }', +curl -XPUT 'http://localhost:9200/twitter/tweet/1' -d ', +    "postDate": "2009-11-15T13:12:00",, +curl -XPUT 'http://localhost:9200/twitter/tweet/2' -d ', +    "postDate": "2009-11-15T14:12:12",, +        "matchAll" : {}, +            "postDate" : { "from" : "2009-11-15T13:00:00", "to" : "2009-11-15T14:00:00" }, +curl -XPUT 'http://localhost:9200/kimchy/info/1' -d '{ "name" : "Shay Banon" }', +curl -XPUT 'http://localhost:9200/kimchy/tweet/1' -d ', +    "postDate": "2009-11-15T13:12:00",, +curl -XPUT 'http://localhost:9200/kimchy/tweet/2' -d ', +    "postDate": "2009-11-15T14:12:12",, +curl -XPUT http://localhost:9200/another_user/ -d ', +        "numberOfShards" : 1,, +        "numberOfReplicas" : 1, +        "matchAll" : {}, +        "matchAll" : {}, +++ b/build.gradle, +++ /dev/null, +++ /dev/null, +++ b/CONTRIBUTING.md, +Make sure you have [Gradle](http://gradle.org) installed, as Elasticsearch uses it as its build system. Integration with IntelliJ and Eclipse should work out of the box. Eclipse users can automatically configure their IDE: `gradle eclipse` then `File: Import: Existing Projects into Workspace`. Select the option `Search for nested projects`. Additionally you will want to ensure that Eclipse is using 2048m of heap by modifying `eclipse.ini` accordingly to avoid GC overhead errors., +++ b/README.textile, +curl -XPUT 'http://localhost:9200/twitter/user/kimchy' -d '{ "name" : "Shay Banon" }', +curl -XPUT 'http://localhost:9200/twitter/tweet/1' -d ', +    "postDate": "2009-11-15T13:12:00",, +curl -XPUT 'http://localhost:9200/twitter/tweet/2' -d ', +    "postDate": "2009-11-15T14:12:12",, +        "matchAll" : {}, +            "postDate" : { "from" : "2009-11-15T13:00:00", "to" : "2009-11-15T14:00:00" }, +curl -XPUT 'http://localhost:9200/kimchy/info/1' -d '{ "name" : "Shay Banon" }', +curl -XPUT 'http://localhost:9200/kimchy/tweet/1' -d ', +    "postDate": "2009-11-15T13:12:00",, +curl -XPUT 'http://localhost:9200/kimchy/tweet/2' -d ', +    "postDate": "2009-11-15T14:12:12",, +curl -XPUT http://localhost:9200/another_user/ -d ', +        "numberOfShards" : 1,, +        "numberOfReplicas" : 1, +        "matchAll" : {}, +        "matchAll" : {}, +++ b/build.gradle, +++ /dev/null, +++ b/buildSrc/build.gradle, +import java.nio.file.Files, +, +// we must use buildscript + apply so that an external plugin, +// can apply this file, since the plugins directive is not, +// supported through file includes, +buildscript {]