[+++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorRegistry());, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorRegistry());, +++ b/core/src/main/java/org/elasticsearch/ingest/AbstractProcessorFactory.java, +public abstract class AbstractProcessorFactory<P extends Processor> implements Processor.Factory<P> {, +    public P create(Map<String, Object> config) throws Exception {, +        return doCreate(tag, config);, +    protected abstract P doCreate(String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorRegistry());, +++ b/core/src/main/java/org/elasticsearch/ingest/AbstractProcessorFactory.java, +public abstract class AbstractProcessorFactory<P extends Processor> implements Processor.Factory<P> {, +    public P create(Map<String, Object> config) throws Exception {, +        return doCreate(tag, config);, +    protected abstract P doCreate(String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +                                                       ProcessorsRegistry processorRegistry) throws Exception {, +                    processors.add(readProcessor(processorRegistry, entry.getKey(), entry.getValue()));, +    private static Processor readProcessor(ProcessorsRegistry processorRegistry, String type, Map<String, Object> config) throws Exception {, +        Processor.Factory factory = processorRegistry.getProcessorFactory(type);, +            List<Processor> onFailureProcessors = readProcessorConfigs(onFailureProcessorConfigs, processorRegistry);, +            Processor processor;, +            processor = factory.create(config);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorRegistry());, +++ b/core/src/main/java/org/elasticsearch/ingest/AbstractProcessorFactory.java, +public abstract class AbstractProcessorFactory<P extends Processor> implements Processor.Factory<P> {, +    public P create(Map<String, Object> config) throws Exception {, +        return doCreate(tag, config);, +    protected abstract P doCreate(String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +                                                       ProcessorsRegistry processorRegistry) throws Exception {, +                    processors.add(readProcessor(processorRegistry, entry.getKey(), entry.getValue()));, +    private static Processor readProcessor(ProcessorsRegistry processorRegistry, String type, Map<String, Object> config) throws Exception {, +        Processor.Factory factory = processorRegistry.getProcessorFactory(type);, +            List<Processor> onFailureProcessors = readProcessorConfigs(onFailureProcessorConfigs, processorRegistry);, +            Processor processor;, +            processor = factory.create(config);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +import org.elasticsearch.cluster.service.ClusterService;, +import java.io.Closeable;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +, +    private final ProcessorsRegistry.Builder processorsRegistryBuilder;, +    public IngestService(Settings settings, ThreadPool threadPool, ProcessorsRegistry.Builder processorsRegistryBuilder) {, +        this.processorsRegistryBuilder = processorsRegistryBuilder;, +        this.pipelineStore = new PipelineStore(settings);, +    public void buildProcessorsFactoryRegistry(ScriptService scriptService, ClusterService clusterService) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistryBuilder, scriptService, clusterService);, +    }, +, +        Map<String, Processor.Factory> processorFactories = pipelineStore.getProcessorRegistry().getProcessorFactories();, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorRegistry());, +++ b/core/src/main/java/org/elasticsearch/ingest/AbstractProcessorFactory.java, +public abstract class AbstractProcessorFactory<P extends Processor> implements Processor.Factory<P> {, +    public P create(Map<String, Object> config) throws Exception {, +        return doCreate(tag, config);, +    protected abstract P doCreate(String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java, +                                                       ProcessorsRegistry processorRegistry) throws Exception {, +                    processors.add(readProcessor(processorRegistry, entry.getKey(), entry.getValue()));, +    private static Processor readProcessor(ProcessorsRegistry processorRegistry, String type, Map<String, Object> config) throws Exception {, +        Processor.Factory factory = processorRegistry.getProcessorFactory(type);, +            List<Processor> onFailureProcessors = readProcessorConfigs(onFailureProcessorConfigs, processorRegistry);, +            Processor processor;, +            processor = factory.create(config);, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +import org.elasticsearch.cluster.service.ClusterService;, +import java.io.Closeable;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +, +    private final ProcessorsRegistry.Builder processorsRegistryBuilder;, +    public IngestService(Settings settings, ThreadPool threadPool, ProcessorsRegistry.Builder processorsRegistryBuilder) {, +        this.processorsRegistryBuilder = processorsRegistryBuilder;, +        this.pipelineStore = new PipelineStore(settings);, +    public void buildProcessorsFactoryRegistry(ScriptService scriptService, ClusterService clusterService) {, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistryBuilder, scriptService, clusterService);, +    }, +, +        Map<String, Processor.Factory> processorFactories = pipelineStore.getProcessorRegistry().getProcessorFactories();, +++ b/core/src/main/java/org/elasticsearch/ingest/Pipeline.java, +        public Pipeline create(String id, Map<String, Object> config, ProcessorsRegistry processorRegistry) throws Exception {, +            List<Processor> processors = ConfigurationUtils.readProcessorConfigs(processorConfigs, processorRegistry);, +            List<Processor> onFailureProcessors = ConfigurationUtils.readProcessorConfigs(onFailureProcessorConfigs, processorRegistry);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorRegistry());, +++ b/core/src/main/java/org/elasticsearch/ingest/AbstractProcessorFactory.java, +public abstract class AbstractProcessorFactory<P extends Processor> implements Processor.Factory<P> {, +    public P create(Map<String, Object> config) throws Exception {, +        return doCreate(tag, config);, +    protected abstract P doCreate(String tag, Map<String, Object> config) throws Exception;, +++ b/core/src/main/java/org/elasticsearch/ingest/ConfigurationUtils.java]