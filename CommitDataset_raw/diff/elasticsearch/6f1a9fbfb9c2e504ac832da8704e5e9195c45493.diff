[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsIndexStore.java, +import org.elasticsearch.common.io.Streams;, +            // ignore md5 files, +            if (file.getName().endsWith(".md5")) {, +                continue;, +            }, +                // first, see if there is an md5 file associated with it, +                File md5File = new File(shardIndexLocation, file.getName() + ".md5");, +                if (md5File.exists()) {, +                    try {, +                        byte[] md5Bytes = Streams.copyToByteArray(md5File);, +                        md5 = Digest.md5HexFromByteArray(md5Bytes);, +                    } catch (Exception e) {, +                        // ignore, compute..., +                    }, +                }, +                // not created as a file, compute it, +                if (md5 == null) {, +                    FileInputStream is = new FileInputStream(file);, +                }, +, +                if (md5 != null) {, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/fs/FsIndexStore.java, +import org.elasticsearch.common.io.Streams;, +            // ignore md5 files, +            if (file.getName().endsWith(".md5")) {, +                continue;, +            }, +                // first, see if there is an md5 file associated with it, +                File md5File = new File(shardIndexLocation, file.getName() + ".md5");, +                if (md5File.exists()) {, +                    try {, +                        byte[] md5Bytes = Streams.copyToByteArray(md5File);, +                        md5 = Digest.md5HexFromByteArray(md5Bytes);, +                    } catch (Exception e) {, +                        // ignore, compute..., +                    }, +                }, +                // not created as a file, compute it, +                if (md5 == null) {, +                    FileInputStream is = new FileInputStream(file);, +                }, +, +                if (md5 != null) {, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/support/AbstractStore.java, +                    byte[] md5Bytes = Digest.md5HexToByteArray(md5);, +, +                    if (shouldWriteMd5(name)) {, +                        IndexOutput output = directory().createOutput(name + ".md5");, +                        output.writeBytes(md5Bytes, md5Bytes.length);, +                        output.close();, +                    }, +, +    private boolean shouldWriteMd5(String name) {, +        return !name.startsWith("segments");, +    }, +, +                        String md5 = preComputedMd5(file);, +, +                        if (md5 != null) {, +                            if (shouldWriteMd5(file)) {, +                                byte[] md5Bytes = Digest.md5HexToByteArray(md5);, +                                IndexOutput output = delegate.createOutput(file + ".md5");, +                                output.writeBytes(md5Bytes, md5Bytes.length);, +                                output.close();, +                            }, +                        }, +, +                        builder.put(file, new StoreFileMetaData(file, delegate.fileLength(file), delegate.fileModified(file), md5));, +            try {, +                delegate.deleteFile(name + ".md5");, +            } catch (Exception e) {, +                // ignore, +            }]