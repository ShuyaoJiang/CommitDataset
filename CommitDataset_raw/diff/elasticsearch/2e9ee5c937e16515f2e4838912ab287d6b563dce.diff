[+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java, +            Filter parentFilterNotCached = findClosestNestedPath(parentAggregator);, +            if (parentFilterNotCached == null) {, +                parentFilterNotCached = NonNestedDocsFilter.INSTANCE;, +    private static Filter findClosestNestedPath(Aggregator parent) {, +                return ((NestedAggregator) parent).childFilter;, +            } else if (parent instanceof ReverseNestedAggregator) {, +                return ((ReverseNestedAggregator) parent).getParentFilter();, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java, +            Filter parentFilterNotCached = findClosestNestedPath(parentAggregator);, +            if (parentFilterNotCached == null) {, +                parentFilterNotCached = NonNestedDocsFilter.INSTANCE;, +    private static Filter findClosestNestedPath(Aggregator parent) {, +                return ((NestedAggregator) parent).childFilter;, +            } else if (parent instanceof ReverseNestedAggregator) {, +                return ((ReverseNestedAggregator) parent).getParentFilter();, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregator.java, +    private static NestedAggregator findClosestNestedAggregator(Aggregator parent) {, +        for (; parent != null; parent = parent.parent()) {, +            if (parent instanceof NestedAggregator) {, +                return (NestedAggregator) parent;, +            }, +        }, +        return null;, +    }, +    Filter getParentFilter() {, +        return parentFilter;, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java, +            Filter parentFilterNotCached = findClosestNestedPath(parentAggregator);, +            if (parentFilterNotCached == null) {, +                parentFilterNotCached = NonNestedDocsFilter.INSTANCE;, +    private static Filter findClosestNestedPath(Aggregator parent) {, +                return ((NestedAggregator) parent).childFilter;, +            } else if (parent instanceof ReverseNestedAggregator) {, +                return ((ReverseNestedAggregator) parent).getParentFilter();, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregator.java, +    private static NestedAggregator findClosestNestedAggregator(Aggregator parent) {, +        for (; parent != null; parent = parent.parent()) {, +            if (parent instanceof NestedAggregator) {, +                return (NestedAggregator) parent;, +            }, +        }, +        return null;, +    }, +    Filter getParentFilter() {, +        return parentFilter;, +    }, +, +++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/ReverseNestedTests.java, +    public void simple_nested1ToRootToNested2() throws Exception {, +        SearchResponse response = client().prepareSearch("idx").setTypes("type2"), +                .addAggregation(nested("nested1").path("nested1"), +                                .subAggregation(, +                                        reverseNested("nested1_to_root"), +                                                .subAggregation(nested("root_to_nested2").path("nested1.nested2")), +                                        ), +                                ), +                .get();, +, +        assertSearchResponse(response);, +        Nested nested = response.getAggregations().get("nested1");, +        assertThat(nested.getName(), equalTo("nested1"));, +        assertThat(nested.getDocCount(), equalTo(9l));, +        ReverseNested reverseNested = nested.getAggregations().get("nested1_to_root");, +        assertThat(reverseNested.getName(), equalTo("nested1_to_root"));, +        assertThat(reverseNested.getDocCount(), equalTo(9l));, +        nested = reverseNested.getAggregations().get("root_to_nested2");, +        assertThat(nested.getName(), equalTo("root_to_nested2"));, +        assertThat(nested.getDocCount(), equalTo(25l));, +    }, +, +    @Test]