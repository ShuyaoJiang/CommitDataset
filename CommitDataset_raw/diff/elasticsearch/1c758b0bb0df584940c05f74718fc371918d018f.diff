[+++ b/src/main/java/org/elasticsearch/common/recycler/NoneRecycler.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +, +        T value;, +            if (value == null) {, +                throw new ElasticSearchIllegalStateException("recycler entry already released...");, +            }, +            value = null;, +++ b/src/main/java/org/elasticsearch/common/recycler/NoneRecycler.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +, +        T value;, +            if (value == null) {, +                throw new ElasticSearchIllegalStateException("recycler entry already released...");, +            }, +            value = null;, +++ b/src/main/java/org/elasticsearch/common/recycler/QueueRecycler.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +        T value;, +            if (value == null) {, +                throw new ElasticSearchIllegalStateException("recycler entry already released...");, +            }, +            value = null;, +++ b/src/main/java/org/elasticsearch/common/recycler/NoneRecycler.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +, +        T value;, +            if (value == null) {, +                throw new ElasticSearchIllegalStateException("recycler entry already released...");, +            }, +            value = null;, +++ b/src/main/java/org/elasticsearch/common/recycler/QueueRecycler.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +        T value;, +            if (value == null) {, +                throw new ElasticSearchIllegalStateException("recycler entry already released...");, +            }, +            value = null;, +++ b/src/main/java/org/elasticsearch/common/recycler/ThreadLocalRecycler.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +        T value;, +            if (value == null) {, +                throw new ElasticSearchIllegalStateException("recycler entry already released...");, +            }, +            value = null;, +++ b/src/main/java/org/elasticsearch/common/recycler/NoneRecycler.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +, +        T value;, +            if (value == null) {, +                throw new ElasticSearchIllegalStateException("recycler entry already released...");, +            }, +            value = null;, +++ b/src/main/java/org/elasticsearch/common/recycler/QueueRecycler.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +        T value;, +            if (value == null) {, +                throw new ElasticSearchIllegalStateException("recycler entry already released...");, +            }, +            value = null;, +++ b/src/main/java/org/elasticsearch/common/recycler/ThreadLocalRecycler.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +        T value;, +            if (value == null) {, +                throw new ElasticSearchIllegalStateException("recycler entry already released...");, +            }, +            value = null;, +++ b/src/main/java/org/elasticsearch/search/internal/DefaultSearchContext.java, +            clearables.clear();]