[+++ b/.idea/dictionaries/kimchy.xml, +      <w>deque</w>, +      <w>ints</w>, +      <w>noop</w>, +      <w>proc</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>deque</w>, +      <w>ints</w>, +      <w>noop</w>, +      <w>proc</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder addQueryFacet(String name, XContentQueryBuilder query) {, +        facetsBuilder().queryFacet(name, query);, +        return this;, +    }, +, +    /**, +     * Adds a query facet (which results in a count facet returned) with an option to, +     * be global on the index or bounded by the search query., +     *, +     * @param name   The logical name of the facet, it will be returned under the name, +     * @param query  The query facet, +     * @param global Should the facet be executed globally or not, +     */, +    public SearchRequestBuilder addQueryFacet(String name, XContentQueryBuilder query, boolean global) {, +        facetsBuilder().queryFacet(name, query, global);, +        return this;, +    }, +, +    public SearchRequestBuilder addFieldFacet(String name, String fieldName, int size) {, +        facetsBuilder().fieldFacet(name, fieldName, size);, +        return this;, +    }, +, +    public SearchRequestBuilder addFieldFacet(String name, String fieldName, int size, boolean global) {, +        facetsBuilder().fieldFacet(name, fieldName, size, global);, +++ b/.idea/dictionaries/kimchy.xml, +      <w>deque</w>, +      <w>ints</w>, +      <w>noop</w>, +      <w>proc</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder addQueryFacet(String name, XContentQueryBuilder query) {, +        facetsBuilder().queryFacet(name, query);, +        return this;, +    }, +, +    /**, +     * Adds a query facet (which results in a count facet returned) with an option to, +     * be global on the index or bounded by the search query., +     *, +     * @param name   The logical name of the facet, it will be returned under the name, +     * @param query  The query facet, +     * @param global Should the facet be executed globally or not, +     */, +    public SearchRequestBuilder addQueryFacet(String name, XContentQueryBuilder query, boolean global) {, +        facetsBuilder().queryFacet(name, query, global);, +        return this;, +    }, +, +    public SearchRequestBuilder addFieldFacet(String name, String fieldName, int size) {, +        facetsBuilder().fieldFacet(name, fieldName, size);, +        return this;, +    }, +, +    public SearchRequestBuilder addFieldFacet(String name, String fieldName, int size, boolean global) {, +        facetsBuilder().fieldFacet(name, fieldName, size, global);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +import org.apache.lucene.index.IndexReader;, +import org.elasticsearch.index.cache.field.FieldDataCache;, +import org.elasticsearch.index.cache.field.none.NoneFieldDataCache;, +    private final FieldDataCache fieldDataCache;, +, +        this(index, EMPTY_SETTINGS, new NoneFilterCache(index, EMPTY_SETTINGS), new NoneFieldDataCache(index, EMPTY_SETTINGS));, +    @Inject public IndexCache(Index index, @IndexSettings Settings indexSettings, FilterCache filterCache, FieldDataCache fieldDataCache) {, +        this.fieldDataCache = fieldDataCache;, +    public FieldDataCache fieldData() {, +        return fieldDataCache;, +    }, +, +    public void clear(IndexReader reader) {, +        filterCache.clear(reader);, +        fieldDataCache.clear(reader);, +    }, +, +        fieldDataCache.clear();, +        fieldDataCache.clearUnreferenced();, +++ b/.idea/dictionaries/kimchy.xml, +      <w>deque</w>, +      <w>ints</w>, +      <w>noop</w>, +      <w>proc</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder addQueryFacet(String name, XContentQueryBuilder query) {, +        facetsBuilder().queryFacet(name, query);, +        return this;, +    }, +, +    /**, +     * Adds a query facet (which results in a count facet returned) with an option to]