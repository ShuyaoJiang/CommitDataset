[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBoolean() ? new IndexWarmersMetaData.SearchSource(in) : null), +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBoolean() ? new IndexWarmersMetaData.SearchSource(in) : null), +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +                IndexWarmersMetaData.SearchSource source = new IndexWarmersMetaData.SearchSource(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBoolean() ? new IndexWarmersMetaData.SearchSource(in) : null), +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +                IndexWarmersMetaData.SearchSource source = new IndexWarmersMetaData.SearchSource(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/put/TransportPutWarmerAction.java, +                        IndexWarmersMetaData.SearchSource source = null;, +                            source = new IndexWarmersMetaData.SearchSource(request.searchRequest().source());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBoolean() ? new IndexWarmersMetaData.SearchSource(in) : null), +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +                IndexWarmersMetaData.SearchSource source = new IndexWarmersMetaData.SearchSource(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/put/TransportPutWarmerAction.java, +                        IndexWarmersMetaData.SearchSource source = null;, +                            source = new IndexWarmersMetaData.SearchSource(request.searchRequest().source());, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +import java.io.Closeable;, +public interface XContentGenerator extends Closeable {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBoolean() ? new IndexWarmersMetaData.SearchSource(in) : null), +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +                IndexWarmersMetaData.SearchSource source = new IndexWarmersMetaData.SearchSource(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/put/TransportPutWarmerAction.java, +                        IndexWarmersMetaData.SearchSource source = null;, +                            source = new IndexWarmersMetaData.SearchSource(request.searchRequest().source());, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +import java.io.Closeable;, +public interface XContentGenerator extends Closeable {, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.indices.query.IndicesQueriesRegistry;, +                            final IndexService indexService = indicesService.indexServiceSafe(indexShard.shardId().index().name());, +                                    SearchType.QUERY_THEN_FETCH, entry.source().build(new QueryParseContext(indexService.queryParserService().indicesQueriesRegistry())), entry.types(), entry.requestCache());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java, +                        in.readBoolean() ? new IndexWarmersMetaData.SearchSource(in) : null), +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersResponse.java, +                IndexWarmersMetaData.SearchSource source = new IndexWarmersMetaData.SearchSource(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/put/TransportPutWarmerAction.java, +                        IndexWarmersMetaData.SearchSource source = null;, +                            source = new IndexWarmersMetaData.SearchSource(request.searchRequest().source());, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentGenerator.java, +import java.io.Closeable;, +public interface XContentGenerator extends Closeable {, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.indices.query.IndicesQueriesRegistry;, +                            final IndexService indexService = indicesService.indexServiceSafe(indexShard.shardId().index().name());, +                                    SearchType.QUERY_THEN_FETCH, entry.source().build(new QueryParseContext(indexService.queryParserService().indicesQueriesRegistry())), entry.types(), entry.requestCache());, +++ b/core/src/main/java/org/elasticsearch/search/warmer/IndexWarmersMetaData.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.util.ByteArray;, +import org.elasticsearch.common.xcontent.*;, +import org.elasticsearch.index.query.QueryParseContext;, +import java.io.ByteArrayOutputStream;, +        private final SearchSource source;, +        public Entry(String name, String[] types, Boolean requestCache, SearchSource source) {, +        public SearchSource source() {, +            SearchSource source = null;, +                source = new SearchSource(in);, +                SearchSource source = null;, +                            ByteArrayOutputStream out = new ByteArrayOutputStream();, +                            try (XContentGenerator generator = parser.contentType().xContent().createGenerator(out)) {, +                                generator.copyCurrentStructure(parser);, +                            source = new SearchSource(new BytesArray(out.toByteArray()));, +                        }, +                    } else if (token == XContentParser.Token.VALUE_EMBEDDED_OBJECT) {, +                        if ("source".equals(currentFieldName)) {, +                            source = new SearchSource(new BytesArray(parser.binaryValue()));, +                        }, +, +    public static class SearchSource implements ToXContent, Writeable<SearchSource> {, +        private final BytesReference binary;, +        private SearchSourceBuilder cached;, +, +        public SearchSource(BytesReference bytesArray) {, +            this.binary = bytesArray;, +        }, +, +        public SearchSource(StreamInput input) throws IOException {, +            this(input.readBytesReference());, +        }, +, +        public SearchSource(SearchSourceBuilder source) {, +            try (XContentBuilder builder = XContentBuilder.builder(XContentType.JSON.xContent())) {, +                source.toXContent(builder, ToXContent.EMPTY_PARAMS);, +                binary = builder.bytes();, +            } catch (IOException ex) {, +                throw new ElasticsearchException("failed to generate XContent", ex);, +            }, +        }, +, +        public SearchSourceBuilder build(QueryParseContext ctx) throws IOException {, +            if (cached == null) {, +                try (XContentParser parser = XContentFactory.xContent(binary).createParser(binary)) {]