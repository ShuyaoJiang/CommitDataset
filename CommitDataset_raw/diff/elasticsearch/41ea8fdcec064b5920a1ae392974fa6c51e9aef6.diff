[+++ b/core/src/main/java/org/apache/lucene/search/uhighlight/CustomUnifiedHighlighter.java, +import org.apache.lucene.index.FieldInfo;, +import org.apache.lucene.index.IndexOptions;, +    private final OffsetSource offsetSource;, +     * @param analyzer the analyzer used for the field at index time, used for multi term queries internally., +     *                    which generates snippets in forms of {@link Snippet} objects., +     * @param offsetSource the {@link OffsetSource} to used for offsets retrieval., +     *                    If null {@link Locale#ROOT} is used., +     * @param fieldValue the original field values delimited by MULTIVAL_SEP_CHAR., +     * @param noMatchSize The size of the text that should be returned when no highlighting can be performed., +                                    OffsetSource offsetSource,, +        this.offsetSource = offsetSource;, +, +    /**, +     * Forces the offset source for this highlighter, +     */, +    @Override, +    protected OffsetSource getOffsetSource(String field) {, +        if (offsetSource == null) {, +            return super.getOffsetSource(field);, +        }, +        return offsetSource;, +    }, +, +++ b/core/src/main/java/org/apache/lucene/search/uhighlight/CustomUnifiedHighlighter.java, +import org.apache.lucene.index.FieldInfo;, +import org.apache.lucene.index.IndexOptions;, +    private final OffsetSource offsetSource;, +     * @param analyzer the analyzer used for the field at index time, used for multi term queries internally., +     *                    which generates snippets in forms of {@link Snippet} objects., +     * @param offsetSource the {@link OffsetSource} to used for offsets retrieval., +     *                    If null {@link Locale#ROOT} is used., +     * @param fieldValue the original field values delimited by MULTIVAL_SEP_CHAR., +     * @param noMatchSize The size of the text that should be returned when no highlighting can be performed., +                                    OffsetSource offsetSource,, +        this.offsetSource = offsetSource;, +, +    /**, +     * Forces the offset source for this highlighter, +     */, +    @Override, +    protected OffsetSource getOffsetSource(String field) {, +        if (offsetSource == null) {, +            return super.getOffsetSource(field);, +        }, +        return offsetSource;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/UnifiedHighlighter.java, +import org.apache.lucene.index.IndexOptions;, +import org.apache.lucene.search.uhighlight.UnifiedHighlighter.OffsetSource;, +import org.elasticsearch.index.mapper.MappedFieldType;, +            final IndexSearcher searcher = new IndexSearcher(hitContext.reader());, +            final CustomUnifiedHighlighter highlighter;, +            final String fieldValue = mergeFieldValues(fieldValues, MULTIVAL_SEP_CHAR);, +            final OffsetSource offsetSource = getOffsetSource(fieldMapper.fieldType());, +                highlighter = new CustomUnifiedHighlighter(searcher, analyzer, offsetSource,, +                        mapperHighlighterEntry.passageFormatter, field.fieldOptions().boundaryScannerLocale(),, +                        breakIterator, fieldValue, field.fieldOptions().noMatchSize());, +                highlighter = new CustomUnifiedHighlighter(searcher, analyzer, offsetSource,, +, +, +    private OffsetSource getOffsetSource(MappedFieldType fieldType) {, +        if (fieldType.indexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {, +            return fieldType.storeTermVectorOffsets() ? OffsetSource.POSTINGS_WITH_TERM_VECTORS : OffsetSource.POSTINGS;, +        }, +        if (fieldType.storeTermVectors()) {, +            return OffsetSource.TERM_VECTORS;, +        }, +        return OffsetSource.ANALYSIS;, +    }, +, +++ b/core/src/main/java/org/apache/lucene/search/uhighlight/CustomUnifiedHighlighter.java, +import org.apache.lucene.index.FieldInfo;, +import org.apache.lucene.index.IndexOptions;, +    private final OffsetSource offsetSource;, +     * @param analyzer the analyzer used for the field at index time, used for multi term queries internally., +     *                    which generates snippets in forms of {@link Snippet} objects., +     * @param offsetSource the {@link OffsetSource} to used for offsets retrieval., +     *                    If null {@link Locale#ROOT} is used., +     * @param fieldValue the original field values delimited by MULTIVAL_SEP_CHAR., +     * @param noMatchSize The size of the text that should be returned when no highlighting can be performed., +                                    OffsetSource offsetSource,, +        this.offsetSource = offsetSource;, +, +    /**, +     * Forces the offset source for this highlighter, +     */, +    @Override, +    protected OffsetSource getOffsetSource(String field) {, +        if (offsetSource == null) {, +            return super.getOffsetSource(field);, +        }, +        return offsetSource;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/fetch/subphase/highlight/UnifiedHighlighter.java, +import org.apache.lucene.index.IndexOptions;, +import org.apache.lucene.search.uhighlight.UnifiedHighlighter.OffsetSource;, +import org.elasticsearch.index.mapper.MappedFieldType;]