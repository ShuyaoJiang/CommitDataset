[+++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.DiscoveryPlugin;, +            modules.add(new NetworkModule(networkService, settings, true, namedWriteableRegistry, pluginsService.filterPlugins(DiscoveryPlugin.class)));, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.DiscoveryPlugin;, +            modules.add(new NetworkModule(networkService, settings, true, namedWriteableRegistry, pluginsService.filterPlugins(DiscoveryPlugin.class)));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.plugins.DiscoveryPlugin;, +import java.util.Map;, +     * @param discoveryPlugins Discovery plugins, +    public NetworkModule(NetworkService networkService, Settings settings, boolean transportClient,, +                         NamedWriteableRegistry namedWriteableRegistry, List<DiscoveryPlugin> discoveryPlugins) {, +        registerCustomNameResolvers(discoveryPlugins);, +     * Register custom name resolver a DiscoveryPlugin might provide, +     * @param discoveryPlugins Discovery plugins, +     */, +    private void registerCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {, +        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {, +            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings);, +            if (customNameResolver != null) {, +                this.networkService.addCustomNameResolver(customNameResolver);, +            }, +        }, +    }, +    /**, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.DiscoveryPlugin;, +            modules.add(new NetworkModule(networkService, settings, true, namedWriteableRegistry, pluginsService.filterPlugins(DiscoveryPlugin.class)));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.plugins.DiscoveryPlugin;, +import java.util.Map;, +     * @param discoveryPlugins Discovery plugins, +    public NetworkModule(NetworkService networkService, Settings settings, boolean transportClient,, +                         NamedWriteableRegistry namedWriteableRegistry, List<DiscoveryPlugin> discoveryPlugins) {, +        registerCustomNameResolvers(discoveryPlugins);, +     * Register custom name resolver a DiscoveryPlugin might provide, +     * @param discoveryPlugins Discovery plugins, +     */, +    private void registerCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {, +        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {, +            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings);, +            if (customNameResolver != null) {, +                this.networkService.addCustomNameResolver(customNameResolver);, +            }, +        }, +    }, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkService.java, +    private final List<CustomNameResolver> customNameResolvers = new CopyOnWriteArrayList<>();;, +    public void addCustomNameResolver(CustomNameResolver customNameResolver) {, +        this.customNameResolvers.add(customNameResolver);, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.DiscoveryPlugin;, +            modules.add(new NetworkModule(networkService, settings, true, namedWriteableRegistry, pluginsService.filterPlugins(DiscoveryPlugin.class)));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.plugins.DiscoveryPlugin;, +import java.util.Map;, +     * @param discoveryPlugins Discovery plugins, +    public NetworkModule(NetworkService networkService, Settings settings, boolean transportClient,, +                         NamedWriteableRegistry namedWriteableRegistry, List<DiscoveryPlugin> discoveryPlugins) {, +        registerCustomNameResolvers(discoveryPlugins);, +     * Register custom name resolver a DiscoveryPlugin might provide, +     * @param discoveryPlugins Discovery plugins, +     */, +    private void registerCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {, +        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {, +            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings);, +            if (customNameResolver != null) {, +                this.networkService.addCustomNameResolver(customNameResolver);, +            }, +        }, +    }, +    /**, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkService.java, +    private final List<CustomNameResolver> customNameResolvers = new CopyOnWriteArrayList<>();;, +    public void addCustomNameResolver(CustomNameResolver customNameResolver) {, +        this.customNameResolvers.add(customNameResolver);, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.plugins.DiscoveryPlugin;, +            modules.add(new NetworkModule(networkService, settings, false, namedWriteableRegistry,, +                pluginsService.filterPlugins(DiscoveryPlugin.class)));, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.DiscoveryPlugin;, +            modules.add(new NetworkModule(networkService, settings, true, namedWriteableRegistry, pluginsService.filterPlugins(DiscoveryPlugin.class)));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.plugins.DiscoveryPlugin;, +import java.util.Map;, +     * @param discoveryPlugins Discovery plugins, +    public NetworkModule(NetworkService networkService, Settings settings, boolean transportClient,, +                         NamedWriteableRegistry namedWriteableRegistry, List<DiscoveryPlugin> discoveryPlugins) {, +        registerCustomNameResolvers(discoveryPlugins);, +     * Register custom name resolver a DiscoveryPlugin might provide, +     * @param discoveryPlugins Discovery plugins, +     */, +    private void registerCustomNameResolvers(List<DiscoveryPlugin> discoveryPlugins) {, +        for (DiscoveryPlugin discoveryPlugin : discoveryPlugins) {, +            NetworkService.CustomNameResolver customNameResolver = discoveryPlugin.getCustomNameResolver(settings);, +            if (customNameResolver != null) {, +                this.networkService.addCustomNameResolver(customNameResolver);, +            }]