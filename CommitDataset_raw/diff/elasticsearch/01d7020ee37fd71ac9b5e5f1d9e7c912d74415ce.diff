[+++ b/core/src/main/java/org/elasticsearch/ingest/PipelineExecutionService.java, +        if (pipeline.getProcessors().isEmpty()) {, +            return;, +        }, +, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineExecutionService.java, +        if (pipeline.getProcessors().isEmpty()) {, +            return;, +        }, +, +++ b/core/src/test/java/org/elasticsearch/ingest/PipelineExecutionServiceTests.java, +    public void testExecuteEmptyPipeline() throws Exception {, +        CompoundProcessor processor = mock(CompoundProcessor.class);, +        when(store.get("_id")).thenReturn(new Pipeline("_id", "_description", processor));, +        when(processor.getProcessors()).thenReturn(Collections.emptyList());, +, +        IndexRequest indexRequest = new IndexRequest("_index", "_type", "_id").source(Collections.emptyMap()).setPipeline("_id");, +        @SuppressWarnings("unchecked"), +        Consumer<Throwable> failureHandler = mock(Consumer.class);, +        @SuppressWarnings("unchecked"), +        Consumer<Boolean> completionHandler = mock(Consumer.class);, +        executionService.executeIndexRequest(indexRequest, failureHandler, completionHandler);, +        verify(processor, never()).execute(any());, +        verify(failureHandler, never()).accept(any());, +        verify(completionHandler, times(1)).accept(true);, +    }, +, +        when(processor.getProcessors()).thenReturn(Collections.singletonList(mock(Processor.class)));, +        when(processor.getProcessors()).thenReturn(Collections.singletonList(mock(Processor.class)));, +        when(processor.getProcessors()).thenReturn(Collections.singletonList(mock(Processor.class)));, +        when(store.get("_id1")).thenReturn(new Pipeline("_id1", null, new CompoundProcessor(mock(Processor.class))));, +        when(store.get("_id2")).thenReturn(new Pipeline("_id2", null, new CompoundProcessor(mock(Processor.class))));, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineExecutionService.java, +        if (pipeline.getProcessors().isEmpty()) {, +            return;, +        }, +, +++ b/core/src/test/java/org/elasticsearch/ingest/PipelineExecutionServiceTests.java, +    public void testExecuteEmptyPipeline() throws Exception {, +        CompoundProcessor processor = mock(CompoundProcessor.class);, +        when(store.get("_id")).thenReturn(new Pipeline("_id", "_description", processor));, +        when(processor.getProcessors()).thenReturn(Collections.emptyList());, +, +        IndexRequest indexRequest = new IndexRequest("_index", "_type", "_id").source(Collections.emptyMap()).setPipeline("_id");, +        @SuppressWarnings("unchecked"), +        Consumer<Throwable> failureHandler = mock(Consumer.class);, +        @SuppressWarnings("unchecked"), +        Consumer<Boolean> completionHandler = mock(Consumer.class);, +        executionService.executeIndexRequest(indexRequest, failureHandler, completionHandler);, +        verify(processor, never()).execute(any());, +        verify(failureHandler, never()).accept(any());, +        verify(completionHandler, times(1)).accept(true);, +    }, +, +        when(processor.getProcessors()).thenReturn(Collections.singletonList(mock(Processor.class)));, +        when(processor.getProcessors()).thenReturn(Collections.singletonList(mock(Processor.class)));, +        when(processor.getProcessors()).thenReturn(Collections.singletonList(mock(Processor.class)));, +        when(store.get("_id1")).thenReturn(new Pipeline("_id1", null, new CompoundProcessor(mock(Processor.class))));, +        when(store.get("_id2")).thenReturn(new Pipeline("_id2", null, new CompoundProcessor(mock(Processor.class))));, +++ b/core/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java, +import static org.hamcrest.Matchers.empty;, +    public void testCreateWithEmptyProcessorsField() throws Exception {, +        Map<String, Object> pipelineConfig = new HashMap<>();, +        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, "_description");, +        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.emptyList());, +        Pipeline.Factory factory = new Pipeline.Factory();, +        Pipeline pipeline = factory.create("_id", pipelineConfig, null);, +        assertThat(pipeline.getId(), equalTo("_id"));, +        assertThat(pipeline.getDescription(), equalTo("_description"));, +        assertThat(pipeline.getProcessors(), is(empty()));, +    }, +]