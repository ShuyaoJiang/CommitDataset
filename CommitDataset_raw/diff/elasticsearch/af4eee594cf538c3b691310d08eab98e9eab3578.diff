[+++ b/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +    private int minTermFrequency = XMoreLikeThis.DEFAULT_MIN_TERM_FREQ;, +    private int maxQueryTerms = XMoreLikeThis.DEFAULT_MAX_QUERY_TERMS;, +    private Set<?> stopWords = XMoreLikeThis.DEFAULT_STOP_WORDS;, +    private int minDocFreq = XMoreLikeThis.DEFAULT_MIN_DOC_FREQ;, +    private int maxDocFreq = XMoreLikeThis.DEFAULT_MAX_DOC_FREQ;, +    private int minWordLen = XMoreLikeThis.DEFAULT_MIN_WORD_LENGTH;, +    private int maxWordLen = XMoreLikeThis.DEFAULT_MAX_WORD_LENGTH;, +    private boolean boostTerms = XMoreLikeThis.DEFAULT_BOOST;, +        XMoreLikeThis mlt = new XMoreLikeThis(reader, similarity == null ? new DefaultSimilarity() : similarity);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/MoreLikeThisQuery.java, +    private int minTermFrequency = XMoreLikeThis.DEFAULT_MIN_TERM_FREQ;, +    private int maxQueryTerms = XMoreLikeThis.DEFAULT_MAX_QUERY_TERMS;, +    private Set<?> stopWords = XMoreLikeThis.DEFAULT_STOP_WORDS;, +    private int minDocFreq = XMoreLikeThis.DEFAULT_MIN_DOC_FREQ;, +    private int maxDocFreq = XMoreLikeThis.DEFAULT_MAX_DOC_FREQ;, +    private int minWordLen = XMoreLikeThis.DEFAULT_MIN_WORD_LENGTH;, +    private int maxWordLen = XMoreLikeThis.DEFAULT_MAX_WORD_LENGTH;, +    private boolean boostTerms = XMoreLikeThis.DEFAULT_BOOST;, +        XMoreLikeThis mlt = new XMoreLikeThis(reader, similarity == null ? new DefaultSimilarity() : similarity);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/XMoreLikeThis.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +/**, + * Copyright 2004-2005 The Apache Software Foundation., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.elasticsearch.common.lucene.search;, +, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;, +import org.apache.lucene.document.Document;, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.TermQuery;, +import org.apache.lucene.search.similarities.DefaultSimilarity;, +import org.apache.lucene.search.similarities.TFIDFSimilarity;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.CharsRef;, +import org.apache.lucene.util.PriorityQueue;, +import org.apache.lucene.util.UnicodeUtil;, +import org.elasticsearch.common.io.FastStringReader;, +, +import java.io.IOException;, +import java.io.Reader;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Set;, +, +, +/**, + * Generate "more like this" similarity queries., + * Based on this mail:, + * <code><pre>, + * Lucene does let you access the document frequency of terms, with IndexReader.docFreq()., + * Term frequencies can be computed by re-tokenizing the text, which, for a single document,, + * is usually fast enough.  But looking up the docFreq() of every term in the document is, + * probably too slow., + * <p/>, + * You can use some heuristics to prune the set of terms, to avoid calling docFreq() too much,, + * or at all.  Since you're trying to maximize a tf*idf score, you're probably most interested, + * in terms with a high tf. Choosing a tf threshold even as low as two or three will radically, + * reduce the number of terms under consideration.  Another heuristic is that terms with a, + * high idf (i.e., a low df) tend to be longer.  So you could threshold the terms by the, + * number of characters, not selecting anything less than, e.g., six or seven characters., + * With these sorts of heuristics you can usually find small set of, e.g., ten or fewer terms, + * that do a pretty good job of characterizing a document.]