[+++ b/core/bin/elasticsearch.in.bat, +set CORE_CLASSPATH=%ES_HOME%/lib/${project.build.finalName}.jar;%ES_HOME%/lib/*;%ES_HOME%/lib/sigar/*, +if "%ES_CLASSPATH%" == "" (, +set ES_CLASSPATH=%CORE_CLASSPATH%, +) else (, +set ES_CLASSPATH=%ES_CLASSPATH%;%CORE_CLASSPATH%, +), +, +++ b/core/bin/elasticsearch.in.bat, +set CORE_CLASSPATH=%ES_HOME%/lib/${project.build.finalName}.jar;%ES_HOME%/lib/*;%ES_HOME%/lib/sigar/*, +if "%ES_CLASSPATH%" == "" (, +set ES_CLASSPATH=%CORE_CLASSPATH%, +) else (, +set ES_CLASSPATH=%ES_CLASSPATH%;%CORE_CLASSPATH%, +), +, +++ b/core/bin/elasticsearch.in.sh, +CORE_CLASSPATH="$ES_HOME/lib/${project.build.finalName}.jar:$ES_HOME/lib/*:$ES_HOME/lib/sigar/*", +, +if [ "x$ES_CLASSPATH" = "x" ]; then, +    ES_CLASSPATH="$CORE_CLASSPATH", +else, +    ES_CLASSPATH="$ES_CLASSPATH:$CORE_CLASSPATH", +fi, +++ b/core/bin/elasticsearch.in.bat, +set CORE_CLASSPATH=%ES_HOME%/lib/${project.build.finalName}.jar;%ES_HOME%/lib/*;%ES_HOME%/lib/sigar/*, +if "%ES_CLASSPATH%" == "" (, +set ES_CLASSPATH=%CORE_CLASSPATH%, +) else (, +set ES_CLASSPATH=%ES_CLASSPATH%;%CORE_CLASSPATH%, +), +, +++ b/core/bin/elasticsearch.in.sh, +CORE_CLASSPATH="$ES_HOME/lib/${project.build.finalName}.jar:$ES_HOME/lib/*:$ES_HOME/lib/sigar/*", +, +if [ "x$ES_CLASSPATH" = "x" ]; then, +    ES_CLASSPATH="$CORE_CLASSPATH", +else, +    ES_CLASSPATH="$ES_CLASSPATH:$CORE_CLASSPATH", +fi, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/bin/elasticsearch.in.bat, +set CORE_CLASSPATH=%ES_HOME%/lib/${project.build.finalName}.jar;%ES_HOME%/lib/*;%ES_HOME%/lib/sigar/*, +if "%ES_CLASSPATH%" == "" (, +set ES_CLASSPATH=%CORE_CLASSPATH%, +) else (, +set ES_CLASSPATH=%ES_CLASSPATH%;%CORE_CLASSPATH%, +), +, +++ b/core/bin/elasticsearch.in.sh, +CORE_CLASSPATH="$ES_HOME/lib/${project.build.finalName}.jar:$ES_HOME/lib/*:$ES_HOME/lib/sigar/*", +, +if [ "x$ES_CLASSPATH" = "x" ]; then, +    ES_CLASSPATH="$CORE_CLASSPATH", +else, +    ES_CLASSPATH="$ES_CLASSPATH:$CORE_CLASSPATH", +fi, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/bin/elasticsearch.in.bat, +set CORE_CLASSPATH=%ES_HOME%/lib/${project.build.finalName}.jar;%ES_HOME%/lib/*;%ES_HOME%/lib/sigar/*, +if "%ES_CLASSPATH%" == "" (, +set ES_CLASSPATH=%CORE_CLASSPATH%, +) else (, +set ES_CLASSPATH=%ES_CLASSPATH%;%CORE_CLASSPATH%, +), +, +++ b/core/bin/elasticsearch.in.sh, +CORE_CLASSPATH="$ES_HOME/lib/${project.build.finalName}.jar:$ES_HOME/lib/*:$ES_HOME/lib/sigar/*", +, +if [ "x$ES_CLASSPATH" = "x" ]; then, +    ES_CLASSPATH="$CORE_CLASSPATH", +else, +    ES_CLASSPATH="$ES_CLASSPATH:$CORE_CLASSPATH", +fi, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/ExistsFieldQueryExtension.java, +import org.elasticsearch.index.query.ExistsQueryParser;, +        return new ConstantScoreQuery(ExistsQueryParser.newFilter(parseContext, queryText, null));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MissingFieldQueryExtension.java, +        return new ConstantScoreQuery(MissingQueryParser.newFilter(parseContext, queryText,, +                MissingQueryParser.DEFAULT_EXISTENCE_VALUE, MissingQueryParser.DEFAULT_NULL_VALUE, null));, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    private final Map<String, List<String>> headers = new HashMap<>();, +        int numKeys = in.readVInt();, +        for (int i = 0; i < numKeys; i++) {, +            final String key = in.readString();, +            final int numValues = in.readVInt();, +            final ArrayList<String> values = new ArrayList<>(numValues);, +            for (int j = 0; j < numValues; j++) {, +                values.add(in.readString());, +            }, +            headers.put(key, values);, +        }, +    }]