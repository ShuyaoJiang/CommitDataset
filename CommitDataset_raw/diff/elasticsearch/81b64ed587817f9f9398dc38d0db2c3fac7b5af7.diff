[+++ b/core/src/main/java/org/elasticsearch/indices/IndicesQueryCache.java, +import org.apache.lucene.search.ScorerSupplier;, +        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {, +            shardKeyMap.add(context.reader());, +            return in.scorerSupplier(context);, +        }, +, +        @Override, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesQueryCache.java, +import org.apache.lucene.search.ScorerSupplier;, +        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {, +            shardKeyMap.add(context.reader());, +            return in.scorerSupplier(context);, +        }, +, +        @Override, +++ b/core/src/test/java/org/elasticsearch/indices/IndicesQueryCacheTests.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.Explanation;, +import org.apache.lucene.search.MatchAllDocsQuery;, +import org.apache.lucene.search.ScorerSupplier;, +import java.util.Set;, +    private static class DummyWeight extends Weight {, +, +        private final Weight weight;, +        private boolean scorerCalled;, +        private boolean scorerSupplierCalled;, +, +        DummyWeight(Weight weight) {, +            super(weight.getQuery());, +            this.weight = weight;, +        }, +, +        @Override, +        public void extractTerms(Set<Term> terms) {, +            weight.extractTerms(terms);, +        }, +, +        @Override, +        public Explanation explain(LeafReaderContext context, int doc) throws IOException {, +            return weight.explain(context, doc);, +        }, +, +        @Override, +        public Scorer scorer(LeafReaderContext context) throws IOException {, +            scorerCalled = true;, +            return weight.scorer(context);, +        }, +, +        @Override, +        public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {, +            scorerSupplierCalled = true;, +            return weight.scorerSupplier(context);, +        }, +, +    }, +, +    public void testDelegatesScorerSupplier() throws Exception {, +        Directory dir = newDirectory();, +        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());, +        w.addDocument(new Document());, +        DirectoryReader r = DirectoryReader.open(w);, +        w.close();, +        ShardId shard = new ShardId("index", "_na_", 0);, +        r = ElasticsearchDirectoryReader.wrap(r, shard);, +        IndexSearcher s = new IndexSearcher(r);, +        s.setQueryCachingPolicy(new QueryCachingPolicy() {, +            @Override, +            public boolean shouldCache(Query query) throws IOException {, +                return false; // never cache, +            }, +            @Override, +            public void onUse(Query query) {}, +        });, +, +        Settings settings = Settings.builder(), +                .put(IndicesQueryCache.INDICES_CACHE_QUERY_COUNT_SETTING.getKey(), 10), +                .put(IndicesQueryCache.INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING.getKey(), true), +                .build();, +        IndicesQueryCache cache = new IndicesQueryCache(settings);, +        s.setQueryCache(cache);, +        Query query = new MatchAllDocsQuery();, +        final DummyWeight weight = new DummyWeight(s.createNormalizedWeight(query, false));, +        final Weight cached = cache.doCache(weight, s.getQueryCachingPolicy());, +        assertNotSame(weight, cached);, +        assertFalse(weight.scorerCalled);, +        assertFalse(weight.scorerSupplierCalled);, +        cached.scorerSupplier(s.getIndexReader().leaves().get(0));, +        assertFalse(weight.scorerCalled);, +        assertTrue(weight.scorerSupplierCalled);, +        IOUtils.close(r, dir);, +        cache.onClose(shard);, +        cache.close();, +    }]