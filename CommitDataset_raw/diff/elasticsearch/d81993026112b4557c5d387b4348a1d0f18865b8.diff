[+++ b/.gitignore, +generated-resources/, +++ b/.gitignore, +generated-resources/, +++ b/build.gradle, +if (projectsPrefix.isEmpty()) {, +++ b/.gitignore, +generated-resources/, +++ b/build.gradle, +if (projectsPrefix.isEmpty()) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        project.sourceSets.test {, +            output.dir(buildProperties.generatedResourcesDir, builtBy: 'pluginProperties'), +            resources {, +                srcDir pluginMetadata, +            }, +++ b/.gitignore, +generated-resources/, +++ b/build.gradle, +if (projectsPrefix.isEmpty()) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        project.sourceSets.test {, +            output.dir(buildProperties.generatedResourcesDir, builtBy: 'pluginProperties'), +            resources {, +                srcDir pluginMetadata, +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +import org.gradle.api.Task, +import org.gradle.api.tasks.Copy, +class PluginPropertiesTask extends Copy {, +    File generatedResourcesDir = new File(project.projectDir, 'generated-resources'), +        File templateFile = new File(project.buildDir, 'templates/plugin-descriptor.properties'), +        Task copyPluginPropertiesTemplate = project.tasks.create('copyPluginPropertiesTemplate') {, +            doLast {, +                InputStream resourceTemplate = PluginPropertiesTask.getResourceAsStream('/plugin-descriptor.properties'), +                templateFile.parentFile.mkdirs(), +                templateFile.setText(resourceTemplate.getText('UTF-8'), 'UTF-8'), +            }, +        }, +        dependsOn(copyPluginPropertiesTemplate), +        project.clean {, +            delete generatedResourcesDir, +        }, +            // check require properties are set, +                doFirst {, +                    if (extension.jvm && extension.isolated == false) {, +                        String warning = "WARNING: Disabling plugin isolation in ${project.name} is deprecated and will be removed in the future", +                        logger.warn("${'=' * warning.length()}\n${warning}\n${'=' * warning.length()}"), +                    }, +                }, +                // configure property substitution, +                from templateFile, +                into generatedResourcesDir, +                expand(generateSubstitutions()), +    Map generateSubstitutions() {, +        return [, +            'elasticsearchVersion': ElasticsearchProperties.version,, +            'javaVersion': project.targetCompatibility as String,, +            'site': extension.site as String,, +            'isolated': extension.isolated as String,, +            'classname': extension.jvm ? extension.classname : 'NA', +++ b/.gitignore, +generated-resources/, +++ b/build.gradle, +if (projectsPrefix.isEmpty()) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        project.sourceSets.test {, +            output.dir(buildProperties.generatedResourcesDir, builtBy: 'pluginProperties'), +            resources {, +                srcDir pluginMetadata, +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +import org.gradle.api.Task, +import org.gradle.api.tasks.Copy, +class PluginPropertiesTask extends Copy {, +    File generatedResourcesDir = new File(project.projectDir, 'generated-resources'), +        File templateFile = new File(project.buildDir, 'templates/plugin-descriptor.properties'), +        Task copyPluginPropertiesTemplate = project.tasks.create('copyPluginPropertiesTemplate') {, +            doLast {, +                InputStream resourceTemplate = PluginPropertiesTask.getResourceAsStream('/plugin-descriptor.properties'), +                templateFile.parentFile.mkdirs(), +                templateFile.setText(resourceTemplate.getText('UTF-8'), 'UTF-8'), +            }, +        }, +        dependsOn(copyPluginPropertiesTemplate), +        project.clean {, +            delete generatedResourcesDir, +        }, +            // check require properties are set, +                doFirst {, +                    if (extension.jvm && extension.isolated == false) {, +                        String warning = "WARNING: Disabling plugin isolation in ${project.name} is deprecated and will be removed in the future", +                        logger.warn("${'=' * warning.length()}\n${warning}\n${'=' * warning.length()}"), +                    }, +                }, +                // configure property substitution, +                from templateFile, +                into generatedResourcesDir, +                expand(generateSubstitutions()), +    Map generateSubstitutions() {]