[+++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +                                 final BiConsumer<IndexShard, ActionListener<ResyncTask>> primaryReplicaSyncer,, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +                                 final BiConsumer<IndexShard, ActionListener<ResyncTask>> primaryReplicaSyncer,, +++ b/core/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +    public void resync(IndexShard indexShard, ActionListener<ResyncTask> listener) {, +        final Translog.View view = indexShard.acquireTranslogView();, +        ActionListener<ResyncTask> wrappedListener = new ActionListener<ResyncTask>() {, +            @Override, +            public void onResponse(ResyncTask resyncTask) {, +                try {, +                    view.close();, +                } catch (IOException e) {, +                    onFailure(e);, +                }, +                listener.onResponse(resyncTask);, +            }, +, +            @Override, +            public void onFailure(Exception e) {, +                try {, +                    view.close();, +                } catch (IOException inner) {, +                    e.addSuppressed(inner);, +                }, +                listener.onFailure(e);, +            }, +        };, +        try {, +                    IndexShardState state = indexShard.state();, +                    if (state == IndexShardState.CLOSED) {, +                        throw new IndexShardClosedException(shardId);, +                    } else {, +                        assert state == IndexShardState.STARTED : "resync should only happen on a started shard, but state was: " + state;, +                startingSeqNo, wrappedListener);, +        } catch (Exception e) {, +            wrappedListener.onFailure(e);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +                                 final BiConsumer<IndexShard, ActionListener<ResyncTask>> primaryReplicaSyncer,, +++ b/core/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +    public void resync(IndexShard indexShard, ActionListener<ResyncTask> listener) {, +        final Translog.View view = indexShard.acquireTranslogView();, +        ActionListener<ResyncTask> wrappedListener = new ActionListener<ResyncTask>() {, +            @Override, +            public void onResponse(ResyncTask resyncTask) {, +                try {, +                    view.close();, +                } catch (IOException e) {, +                    onFailure(e);, +                }, +                listener.onResponse(resyncTask);, +            }, +, +            @Override, +            public void onFailure(Exception e) {, +                try {, +                    view.close();, +                } catch (IOException inner) {, +                    e.addSuppressed(inner);, +                }, +                listener.onFailure(e);, +            }, +        };, +        try {, +                    IndexShardState state = indexShard.state();, +                    if (state == IndexShardState.CLOSED) {, +                        throw new IndexShardClosedException(shardId);, +                    } else {, +                        assert state == IndexShardState.STARTED : "resync should only happen on a started shard, but state was: " + state;, +                startingSeqNo, wrappedListener);, +        } catch (Exception e) {, +            wrappedListener.onFailure(e);, +++ b/core/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +import java.util.function.BiConsumer;, +                              BiConsumer<IndexShard, ActionListener<ResyncTask>> primaryReplicaSyncer,, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +                                 final BiConsumer<IndexShard, ActionListener<ResyncTask>> primaryReplicaSyncer,, +++ b/core/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java, +    public void resync(IndexShard indexShard, ActionListener<ResyncTask> listener) {, +        final Translog.View view = indexShard.acquireTranslogView();, +        ActionListener<ResyncTask> wrappedListener = new ActionListener<ResyncTask>() {, +            @Override, +            public void onResponse(ResyncTask resyncTask) {, +                try {, +                    view.close();, +                } catch (IOException e) {, +                    onFailure(e);, +                }, +                listener.onResponse(resyncTask);, +            }, +, +            @Override, +            public void onFailure(Exception e) {, +                try {, +                    view.close();, +                } catch (IOException inner) {, +                    e.addSuppressed(inner);, +                }, +                listener.onFailure(e);, +            }]