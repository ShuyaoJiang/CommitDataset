[+++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +                        closeChannels(entry.getValue(), true, false);, +                        logger.warn(new ParameterizedMessage("Error closing serverChannel for profile [{}]", entry.getKey()), e);, +     * @param doNotLinger whether we abort the connection on RST instead of FIN, +    protected abstract void closeChannels(List<Channel> channels, boolean blocking, boolean doNotLinger) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +                        closeChannels(entry.getValue(), true, false);, +                        logger.warn(new ParameterizedMessage("Error closing serverChannel for profile [{}]", entry.getKey()), e);, +     * @param doNotLinger whether we abort the connection on RST instead of FIN, +    protected abstract void closeChannels(List<Channel> channels, boolean blocking, boolean doNotLinger) throws IOException;, +++ b/core/src/test/java/org/elasticsearch/transport/TcpTransportTests.java, +                protected void closeChannels(List channel, boolean blocking, boolean doNotLinger) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +                        closeChannels(entry.getValue(), true, false);, +                        logger.warn(new ParameterizedMessage("Error closing serverChannel for profile [{}]", entry.getKey()), e);, +     * @param doNotLinger whether we abort the connection on RST instead of FIN, +    protected abstract void closeChannels(List<Channel> channels, boolean blocking, boolean doNotLinger) throws IOException;, +++ b/core/src/test/java/org/elasticsearch/transport/TcpTransportTests.java, +                protected void closeChannels(List channel, boolean blocking, boolean doNotLinger) throws IOException {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    protected void closeChannels(final List<Channel> channels, boolean blocking, boolean doNotLinger) throws IOException {, +        if (doNotLinger) {, +++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +                        closeChannels(entry.getValue(), true, false);, +                        logger.warn(new ParameterizedMessage("Error closing serverChannel for profile [{}]", entry.getKey()), e);, +     * @param doNotLinger whether we abort the connection on RST instead of FIN, +    protected abstract void closeChannels(List<Channel> channels, boolean blocking, boolean doNotLinger) throws IOException;, +++ b/core/src/test/java/org/elasticsearch/transport/TcpTransportTests.java, +                protected void closeChannels(List channel, boolean blocking, boolean doNotLinger) throws IOException {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    protected void closeChannels(final List<Channel> channels, boolean blocking, boolean doNotLinger) throws IOException {, +        if (doNotLinger) {, +++ b/test/framework/src/main/java/org/elasticsearch/transport/MockTcpTransport.java, +    protected void closeChannels(List<MockChannel> channels, boolean blocking, boolean doNotLinger) throws IOException {, +        if (doNotLinger) {, +++ b/core/src/main/java/org/elasticsearch/transport/TcpTransport.java, +                        closeChannels(entry.getValue(), true, false);, +                        logger.warn(new ParameterizedMessage("Error closing serverChannel for profile [{}]", entry.getKey()), e);, +     * @param doNotLinger whether we abort the connection on RST instead of FIN, +    protected abstract void closeChannels(List<Channel> channels, boolean blocking, boolean doNotLinger) throws IOException;, +++ b/core/src/test/java/org/elasticsearch/transport/TcpTransportTests.java, +                protected void closeChannels(List channel, boolean blocking, boolean doNotLinger) throws IOException {, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +    protected void closeChannels(final List<Channel> channels, boolean blocking, boolean doNotLinger) throws IOException {, +        if (doNotLinger) {, +++ b/test/framework/src/main/java/org/elasticsearch/transport/MockTcpTransport.java, +    protected void closeChannels(List<MockChannel> channels, boolean blocking, boolean doNotLinger) throws IOException {, +        if (doNotLinger) {, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/NioTransport.java, +    protected void closeChannels(List<NioChannel> channels, boolean blocking, boolean doNotLinger) throws IOException {, +        if (doNotLinger) {, +                if (channel.isOpen() && channel.getRawChannel().supportedOptions().contains(StandardSocketOptions.SO_LINGER)) {]