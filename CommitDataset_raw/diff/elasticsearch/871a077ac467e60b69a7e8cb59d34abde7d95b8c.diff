[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/TransportGetSnapshotsAction.java, +import java.util.HashSet;, +            final List<SnapshotId> currentSnapshotIds = new ArrayList<>();, +                currentSnapshotIds.add(snapshotId);, +            if (isCurrentSnapshotsOnly(request.snapshots()) == false) {, +            }, +            final Set<SnapshotId> toResolve = new HashSet<>();, +            if (isAllSnapshots(request.snapshots())) {, +                toResolve.addAll(allSnapshotIds.values());, +            } else {, +                    if (GetSnapshotsRequest.CURRENT_SNAPSHOT.equalsIgnoreCase(snapshotOrPattern)) {, +                        toResolve.addAll(currentSnapshotIds);, +                    } else if (Regex.isSimpleMatchPattern(snapshotOrPattern) == false) {, +                if (toResolve.isEmpty() && request.ignoreUnavailable() == false && isCurrentSnapshotsOnly(request.snapshots()) == false) {, +            }, +    private boolean isCurrentSnapshotsOnly(String[] snapshots) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/TransportGetSnapshotsAction.java, +import java.util.HashSet;, +            final List<SnapshotId> currentSnapshotIds = new ArrayList<>();, +                currentSnapshotIds.add(snapshotId);, +            if (isCurrentSnapshotsOnly(request.snapshots()) == false) {, +            }, +            final Set<SnapshotId> toResolve = new HashSet<>();, +            if (isAllSnapshots(request.snapshots())) {, +                toResolve.addAll(allSnapshotIds.values());, +            } else {, +                    if (GetSnapshotsRequest.CURRENT_SNAPSHOT.equalsIgnoreCase(snapshotOrPattern)) {, +                        toResolve.addAll(currentSnapshotIds);, +                    } else if (Regex.isSimpleMatchPattern(snapshotOrPattern) == false) {, +                if (toResolve.isEmpty() && request.ignoreUnavailable() == false && isCurrentSnapshotsOnly(request.snapshots()) == false) {, +            }, +    private boolean isCurrentSnapshotsOnly(String[] snapshots) {, +++ b/core/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java, +import org.elasticsearch.common.Strings;, +        // make sure we return only the in-progress snapshot when taking the first snapshot on a clean repository, +        // take initial snapshot with a block, making sure we only get 1 in-progress snapshot returned, +        // block a node so the create snapshot operation can remain in progress, +        final String initialBlockedNode = blockNodeWithIndex(repositoryName, indexName);, +        ListenableActionFuture<CreateSnapshotResponse> responseListener =, +            client.admin().cluster().prepareCreateSnapshot(repositoryName, "snap-on-empty-repo"), +                .setWaitForCompletion(false), +                .setIndices(indexName), +                .execute();, +        waitForBlock(initialBlockedNode, repositoryName, TimeValue.timeValueSeconds(60)); // wait for block to kick in, +        getSnapshotsResponse = client.admin().cluster(), +                                   .prepareGetSnapshots("test-repo"), +                                   .setSnapshots(randomFrom("_all", "_current", "snap-on-*", "*-on-empty-repo", "snap-on-empty-repo")), +                                   .get();, +        assertEquals(1, getSnapshotsResponse.getSnapshots().size());, +        assertEquals("snap-on-empty-repo", getSnapshotsResponse.getSnapshots().get(0).snapshotId().getName());, +        unblockNode(repositoryName, initialBlockedNode); // unblock node, +        responseListener.actionGet(TimeValue.timeValueMillis(10000L)); // timeout after 10 seconds, +        client.admin().cluster().prepareDeleteSnapshot(repositoryName, "snap-on-empty-repo").get();, +, +        logger.info("--> take {} snapshot(s)", numSnapshots - 1);, +        final List<String> snapshotsToGet = new ArrayList<>();, +        if (randomBoolean()) {, +            // use _current plus the individual names of the finished snapshots, +            snapshotsToGet.add("_current");, +            for (int i = 0; i < numSnapshots - 1; i++) {, +                snapshotsToGet.add(snapshotNames[i]);, +            }, +        } else {, +            snapshotsToGet.add("_all");, +        }, +                                             .setSnapshots(snapshotsToGet.toArray(Strings.EMPTY_ARRAY))]