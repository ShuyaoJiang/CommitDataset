[+++ b/server/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +    private final CombineFunction combineFunction;, +    public CombineFunction getCombineFunction() {, +        return combineFunction;, +    }, +, +++ b/server/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +    private final CombineFunction combineFunction;, +    public CombineFunction getCombineFunction() {, +        return combineFunction;, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java, +        CombineFunction boostMode = this.boostMode == null ? DEFAULT_BOOST_MODE : this.boostMode;, +            return new FunctionScoreQuery(query, filterFunctions[0], boostMode, minScore, maxBoost);, +++ b/server/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +    private final CombineFunction combineFunction;, +    public CombineFunction getCombineFunction() {, +        return combineFunction;, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java, +        CombineFunction boostMode = this.boostMode == null ? DEFAULT_BOOST_MODE : this.boostMode;, +            return new FunctionScoreQuery(query, filterFunctions[0], boostMode, minScore, maxBoost);, +++ b/server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java, +    /**, +     * Please see https://github.com/elastic/elasticsearch/issues/35123 for context., +     */, +    public void testSingleScriptFunction() throws IOException {, +        QueryBuilder queryBuilder = RandomQueryBuilder.createQuery(random());, +        ScoreFunctionBuilder functionBuilder = new ScriptScoreFunctionBuilder(, +            new Script(ScriptType.INLINE, MockScriptEngine.NAME, "1", Collections.emptyMap()));, +, +        FunctionScoreQueryBuilder builder = functionScoreQuery(queryBuilder, functionBuilder);, +        if (randomBoolean()) {, +            builder.boostMode(randomFrom(CombineFunction.values()));, +        }, +, +        Query query = builder.toQuery(createShardContext());, +        assertThat(query, instanceOf(FunctionScoreQuery.class));, +, +        CombineFunction expectedBoostMode = builder.boostMode() != null, +            ? builder.boostMode(), +            : FunctionScoreQueryBuilder.DEFAULT_BOOST_MODE;, +        CombineFunction actualBoostMode = ((FunctionScoreQuery) query).getCombineFunction();, +        assertEquals(expectedBoostMode, actualBoostMode);, +    }, +]