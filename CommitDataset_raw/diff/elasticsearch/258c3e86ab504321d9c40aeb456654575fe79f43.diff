[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]unit[/\\]TimeValue.java" checks="LineLength" />, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]common[/\\]unit[/\\]TimeValue.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.cluster.storedscripts.DeleteStoredScriptAction;, +import org.elasticsearch.action.admin.cluster.storedscripts.TransportDeleteStoredScriptAction;, +import org.elasticsearch.action.admin.cluster.storedscripts.GetStoredScriptAction;, +import org.elasticsearch.action.admin.cluster.storedscripts.TransportGetStoredScriptAction;, +import org.elasticsearch.action.admin.cluster.storedscripts.PutStoredScriptAction;, +import org.elasticsearch.action.admin.cluster.storedscripts.TransportPutStoredScriptAction;, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestProxyActionFilter;, +import java.util.HashMap;, + *, +    private final Map<String, ActionEntry> actions = new HashMap<>();, +    private final List<Class<? extends ActionFilter>> actionFilters = new ArrayList<>();, +    static class ActionEntry<Request extends ActionRequest<Request>, Response extends ActionResponse> {, +        public final GenericAction<Request, Response> action;, +        public final Class<? extends TransportAction<Request, Response>> transportAction;, +        public final Class[] supportTransportActions;, +        ActionEntry(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +            this.action = action;, +            this.transportAction = transportAction;, +            this.supportTransportActions = supportTransportActions;, +    private final boolean ingestEnabled;, +    private final boolean proxy;, +, +    public ActionModule(boolean ingestEnabled, boolean proxy) {, +        this.ingestEnabled = ingestEnabled;, +        this.proxy = proxy;, +, +    /**, +     * Registers an action., +     *, +     * @param action                  The action type., +     * @param transportAction         The transport action implementing the actual action., +     * @param supportTransportActions Any support actions that are needed by the transport action., +     * @param <Request>               The request type., +     * @param <Response>              The response type., +     */, +    public <Request extends ActionRequest<Request>, Response extends ActionResponse> void registerAction(GenericAction<Request, Response> action, Class<? extends TransportAction<Request, Response>> transportAction, Class... supportTransportActions) {, +        actions.put(action.name(), new ActionEntry<>(action, transportAction, supportTransportActions));, +    }, +, +    public ActionModule registerFilter(Class<? extends ActionFilter> actionFilter) {, +        actionFilters.add(actionFilter);, +        return this;, +        if (proxy == false) {, +            if (ingestEnabled) {, +                registerFilter(IngestActionFilter.class);, +            } else {, +                registerFilter(IngestProxyActionFilter.class);, +            }, +        }, +, +        bind(AutoCreateIndex.class).asEagerSingleton();, +        bind(DestructiveOperations.class).asEagerSingleton();, +        registerAction(MainAction.INSTANCE, TransportMainAction.class);, +        registerAction(NodesInfoAction.INSTANCE, TransportNodesInfoAction.class);, +        registerAction(NodesStatsAction.INSTANCE, TransportNodesStatsAction.class);, +        registerAction(NodesHotThreadsAction.INSTANCE, TransportNodesHotThreadsAction.class);, +        registerAction(ListTasksAction.INSTANCE, TransportListTasksAction.class);, +        registerAction(GetTaskAction.INSTANCE, TransportGetTaskAction.class);, +        registerAction(CancelTasksAction.INSTANCE, TransportCancelTasksAction.class);, +, +        registerAction(ClusterAllocationExplainAction.INSTANCE, TransportClusterAllocationExplainAction.class);, +        registerAction(ClusterStatsAction.INSTANCE, TransportClusterStatsAction.class);, +        registerAction(ClusterStateAction.INSTANCE, TransportClusterStateAction.class);, +        registerAction(ClusterHealthAction.INSTANCE, TransportClusterHealthAction.class);, +        registerAction(ClusterUpdateSettingsAction.INSTANCE, TransportClusterUpdateSettingsAction.class);, +        registerAction(ClusterRerouteAction.INSTANCE, TransportClusterRerouteAction.class);, +        registerAction(ClusterSearchShardsAction.INSTANCE, TransportClusterSearchShardsAction.class);, +        registerAction(PendingClusterTasksAction.INSTANCE, TransportPendingClusterTasksAction.class);, +        registerAction(PutRepositoryAction.INSTANCE, TransportPutRepositoryAction.class);, +        registerAction(GetRepositoriesAction.INSTANCE, TransportGetRepositoriesAction.class);, +        registerAction(DeleteRepositoryAction.INSTANCE, TransportDeleteRepositoryAction.class);, +        registerAction(VerifyRepositoryAction.INSTANCE, TransportVerifyRepositoryAction.class);, +        registerAction(GetSnapshotsAction.INSTANCE, TransportGetSnapshotsAction.class);, +        registerAction(DeleteSnapshotAction.INSTANCE, TransportDeleteSnapshotAction.class);, +        registerAction(CreateSnapshotAction.INSTANCE, TransportCreateSnapshotAction.class);, +        registerAction(RestoreSnapshotAction.INSTANCE, TransportRestoreSnapshotAction.class);, +        registerAction(SnapshotsStatusAction.INSTANCE, TransportSnapshotsStatusAction.class);, +, +        registerAction(IndicesStatsAction.INSTANCE, TransportIndicesStatsAction.class);, +        registerAction(IndicesSegmentsAction.INSTANCE, TransportIndicesSegmentsAction.class);, +        registerAction(IndicesShardStoresAction.INSTANCE, TransportIndicesShardStoresAction.class);, +        registerAction(CreateIndexAction.INSTANCE, TransportCreateIndexAction.class);, +        registerAction(ShrinkAction.INSTANCE, TransportShrinkAction.class);, +        registerAction(RolloverAction.INSTANCE, TransportRolloverAction.class);, +        registerAction(DeleteIndexAction.INSTANCE, TransportDeleteIndexAction.class);, +        registerAction(GetIndexAction.INSTANCE, TransportGetIndexAction.class);, +        registerAction(OpenIndexAction.INSTANCE, TransportOpenIndexAction.class);, +        registerAction(CloseIndexAction.INSTANCE, TransportCloseIndexAction.class);, +        registerAction(IndicesExistsAction.INSTANCE, TransportIndicesExistsAction.class);, +        registerAction(TypesExistsAction.INSTANCE, TransportTypesExistsAction.class);, +        registerAction(GetMappingsAction.INSTANCE, TransportGetMappingsAction.class);]