[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +, +        AggregatorFactory[] getAggregatorFactories() {, +            return this.factories.toArray(new AggregatorFactory[this.factories.size()]);, +        }, +, +        List<PipelineAggregatorFactory> getPipelineAggregatorFactories() {, +            return this.pipelineAggregatorFactories;, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +, +        AggregatorFactory[] getAggregatorFactories() {, +            return this.factories.toArray(new AggregatorFactory[this.factories.size()]);, +        }, +, +        List<PipelineAggregatorFactory> getPipelineAggregatorFactories() {, +            return this.pipelineAggregatorFactories;, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorParsers.java, +                }, +                if (level == 0) {, +                    pipelineAggregatorFactory, +                            .validate(null, factories.getAggregatorFactories(), factories.getPipelineAggregatorFactories());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +, +        AggregatorFactory[] getAggregatorFactories() {, +            return this.factories.toArray(new AggregatorFactory[this.factories.size()]);, +        }, +, +        List<PipelineAggregatorFactory> getPipelineAggregatorFactories() {, +            return this.pipelineAggregatorFactories;, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorParsers.java, +                }, +                if (level == 0) {, +                    pipelineAggregatorFactory, +                            .validate(null, factories.getAggregatorFactories(), factories.getPipelineAggregatorFactories());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/PercentilesBucketIT.java, +import org.elasticsearch.ElasticsearchException;, +import static org.hamcrest.Matchers.containsString;, +            client().prepareSearch("idx"), +            ElasticsearchException[] rootCauses = exception.guessRootCauses();, +            assertThat(rootCauses.length, equalTo(1));, +            ElasticsearchException rootCause = rootCauses[0];, +            assertThat(rootCause.getMessage(), containsString("must only contain non-null doubles from 0.0-100.0 inclusive"));, +            client(), +            ElasticsearchException[] rootCauses = exception.guessRootCauses();, +            assertThat(rootCauses.length, equalTo(1));, +            ElasticsearchException rootCause = rootCauses[0];, +            assertThat(rootCause.getMessage(), containsString("must only contain non-null doubles from 0.0-100.0 inclusive"));]