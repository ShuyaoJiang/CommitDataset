[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                String parentType = newMapper.parentFieldMapper().type();, +                                if (parentType.equals(mapping.value.type()) &&, +                                        indexService.mapperService().getParentTypes().contains(parentType) == false) {, +                                    throw new IllegalArgumentException("can't add a _parent field that points to an " +, +                                            "already existing type, that isn't already a parent");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                String parentType = newMapper.parentFieldMapper().type();, +                                if (parentType.equals(mapping.value.type()) &&, +                                        indexService.mapperService().getParentTypes().contains(parentType) == false) {, +                                    throw new IllegalArgumentException("can't add a _parent field that points to an " +, +                                            "already existing type, that isn't already a parent");, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.search.SearchModule;, +                    ResourceWatcherService.RELOAD_INTERVAL_LOW,, +                    SearchModule.INDICES_MAX_CLAUSE_COUNT_SETTING, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                String parentType = newMapper.parentFieldMapper().type();, +                                if (parentType.equals(mapping.value.type()) &&, +                                        indexService.mapperService().getParentTypes().contains(parentType) == false) {, +                                    throw new IllegalArgumentException("can't add a _parent field that points to an " +, +                                            "already existing type, that isn't already a parent");, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.search.SearchModule;, +                    ResourceWatcherService.RELOAD_INTERVAL_LOW,, +                    SearchModule.INDICES_MAX_CLAUSE_COUNT_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +        Settings indexSettings = settings.filter((s) -> (s.startsWith("index.") &&, +            // special case - we want to get Did you mean indices.query.bool.max_clause_count, +            // which means we need to by-pass this check for this setting, +            // TODO remove in 6.0!!, +            "index.query.bool.max_clause_count".equals(s) == false), +            && clusterSettings.get(s) == null);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                String parentType = newMapper.parentFieldMapper().type();, +                                if (parentType.equals(mapping.value.type()) &&, +                                        indexService.mapperService().getParentTypes().contains(parentType) == false) {, +                                    throw new IllegalArgumentException("can't add a _parent field that points to an " +, +                                            "already existing type, that isn't already a parent");, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.search.SearchModule;, +                    ResourceWatcherService.RELOAD_INTERVAL_LOW,, +                    SearchModule.INDICES_MAX_CLAUSE_COUNT_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +        Settings indexSettings = settings.filter((s) -> (s.startsWith("index.") &&, +            // special case - we want to get Did you mean indices.query.bool.max_clause_count, +            // which means we need to by-pass this check for this setting, +            // TODO remove in 6.0!!, +            "index.query.bool.max_clause_count".equals(s) == false), +            && clusterSettings.get(s) == null);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<Integer> INDICES_MAX_CLAUSE_COUNT_SETTING = Setting.intSetting("indices.query.bool.max_clause_count",, +        1024, 1, Integer.MAX_VALUE, Setting.Property.NodeScope);, +        BooleanQuery.setMaxClauseCount(INDICES_MAX_CLAUSE_COUNT_SETTING.get(settings));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                String parentType = newMapper.parentFieldMapper().type();, +                                if (parentType.equals(mapping.value.type()) &&, +                                        indexService.mapperService().getParentTypes().contains(parentType) == false) {, +                                    throw new IllegalArgumentException("can't add a _parent field that points to an " +, +                                            "already existing type, that isn't already a parent");, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.search.SearchModule;, +                    ResourceWatcherService.RELOAD_INTERVAL_LOW,, +                    SearchModule.INDICES_MAX_CLAUSE_COUNT_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +        Settings indexSettings = settings.filter((s) -> (s.startsWith("index.") &&, +            // special case - we want to get Did you mean indices.query.bool.max_clause_count, +            // which means we need to by-pass this check for this setting, +            // TODO remove in 6.0!!, +            "index.query.bool.max_clause_count".equals(s) == false), +            && clusterSettings.get(s) == null);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.common.settings.Setting;, +    public static final Setting<Integer> INDICES_MAX_CLAUSE_COUNT_SETTING = Setting.intSetting("indices.query.bool.max_clause_count",, +        1024, 1, Integer.MAX_VALUE, Setting.Property.NodeScope);, +        BooleanQuery.setMaxClauseCount(INDICES_MAX_CLAUSE_COUNT_SETTING.get(settings));, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/MetaDataMappingServiceTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.cluster.metadata;, +, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.IndexService;]