[+++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_beta2_ID = 2000002;, +    public static final Version V_2_0_0_beta2 = new Version(V_2_0_0_beta2_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +            case V_2_0_0_beta2_ID:, +                return V_2_0_0_beta2;, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_beta2_ID = 2000002;, +    public static final Version V_2_0_0_beta2 = new Version(V_2_0_0_beta2_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +            case V_2_0_0_beta2_ID:, +                return V_2_0_0_beta2;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +        return Collections.unmodifiableSet(Security.SPECIAL_PLUGINS.keySet());, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_beta2_ID = 2000002;, +    public static final Version V_2_0_0_beta2 = new Version(V_2_0_0_beta2_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +            case V_2_0_0_beta2_ID:, +                return V_2_0_0_beta2;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +        return Collections.unmodifiableSet(Security.SPECIAL_PLUGINS.keySet());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI policyUri = getClass().getResource(POLICY_RESOURCE).toURI();, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(policyUri));, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));, +                // run groovy scripts with no permissions (except logging property), +                    return groovy.implies(domain, permission);, +++ b/core/pom.xml, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +                                <include>org/elasticsearch/bootstrap/MockPluginPolicy.class</include>, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final Version V_2_0_0_beta1 = new Version(V_2_0_0_beta1_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +    public static final int V_2_0_0_beta2_ID = 2000002;, +    public static final Version V_2_0_0_beta2 = new Version(V_2_0_0_beta2_ID, false, org.apache.lucene.util.Version.LUCENE_5_2_1);, +            case V_2_0_0_beta2_ID:, +                return V_2_0_0_beta2;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +        return Collections.unmodifiableSet(Security.SPECIAL_PLUGINS.keySet());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI policyUri = getClass().getResource(POLICY_RESOURCE).toURI();, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.template = Policy.getInstance("JavaPolicy", new URIParameter(policyUri));, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));, +                // run groovy scripts with no permissions (except logging property), +                    return groovy.implies(domain, permission);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +    // mapping of plugins to plugin class name. see getPluginClass why we need this., +    // plugin codebase property is always implicit (es.security.plugin.foobar), +    static final Map<String,String> SPECIAL_PLUGINS;, +        m.put("repository-s3", "org.elasticsearch.plugin.repository.s3.S3RepositoryPlugin");, +        m.put("discovery-ec2", "org.elasticsearch.plugin.discovery.ec2.Ec2DiscoveryPlugin");, +        m.put("cloud-gce",     "org.elasticsearch.plugin.cloud.gce.CloudGcePlugin");, +        SPECIAL_PLUGINS = Collections.unmodifiableMap(m);, +    }, +, +    /**, +     * Returns policy property for plugin, if it has special permissions., +     * otherwise returns null., +     */, +    static String getPluginProperty(String pluginName) {, +        if (SPECIAL_PLUGINS.containsKey(pluginName)) {, +            return "es.security.plugin." + pluginName;, +        } else {, +            return null;, +        }, +    }, +, +    /**, +     * Returns plugin class name, if it has special permissions., +     * otherwise returns null., +     */, +    // this is only here to support the intellij IDE, +    // it sucks to duplicate information, but its worth the tradeoff: sanity, +    // if it gets out of sync, tests will fail., +    static String getPluginClass(String pluginName) {, +        return SPECIAL_PLUGINS.get(pluginName);]