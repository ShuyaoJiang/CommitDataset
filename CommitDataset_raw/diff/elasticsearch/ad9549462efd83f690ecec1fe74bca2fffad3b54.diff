[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +     * Sets a string representation of the {@link #opType(org.elasticsearch.action.index.IndexRequest.OpType)}. Can, +     * be either "index" or "create"., +     */, +    public IndexRequest opType(String opType) throws ElasticSearchIllegalArgumentException {, +        if ("create".equals(opType)) {, +            return opType(OpType.CREATE);, +        } else if ("index".equals(opType)) {, +            return opType(OpType.INDEX);, +        } else {, +            throw new ElasticSearchIllegalArgumentException("No index opType matching [" + opType + "]");, +        }, +    }, +, +    /**, +     * Set to <tt>true</tt> to force this index to use {@link OpType#CREATE}., +     */, +    public IndexRequest create(boolean create) {, +        if (create) {, +            return opType(OpType.CREATE);, +        } else {, +            return opType(OpType.INDEX);, +        }, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +     * Sets a string representation of the {@link #opType(org.elasticsearch.action.index.IndexRequest.OpType)}. Can, +     * be either "index" or "create"., +     */, +    public IndexRequest opType(String opType) throws ElasticSearchIllegalArgumentException {, +        if ("create".equals(opType)) {, +            return opType(OpType.CREATE);, +        } else if ("index".equals(opType)) {, +            return opType(OpType.INDEX);, +        } else {, +            throw new ElasticSearchIllegalArgumentException("No index opType matching [" + opType + "]");, +        }, +    }, +, +    /**, +     * Set to <tt>true</tt> to force this index to use {@link OpType#CREATE}., +     */, +    public IndexRequest create(boolean create) {, +        if (create) {, +            return opType(OpType.CREATE);, +        } else {, +            return opType(OpType.INDEX);, +        }, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/mlt/MoreLikeThisRequest.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +    public MoreLikeThisRequest searchType(String searchType) throws ElasticSearchIllegalArgumentException {, +        return searchType(SearchType.fromString(searchType));, +    }, +, +    /**, +     * The search type of the mlt search query., +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +     * Sets a string representation of the {@link #opType(org.elasticsearch.action.index.IndexRequest.OpType)}. Can, +     * be either "index" or "create"., +     */, +    public IndexRequest opType(String opType) throws ElasticSearchIllegalArgumentException {, +        if ("create".equals(opType)) {, +            return opType(OpType.CREATE);, +        } else if ("index".equals(opType)) {, +            return opType(OpType.INDEX);, +        } else {, +            throw new ElasticSearchIllegalArgumentException("No index opType matching [" + opType + "]");, +        }, +    }, +, +    /**, +     * Set to <tt>true</tt> to force this index to use {@link OpType#CREATE}., +     */, +    public IndexRequest create(boolean create) {, +        if (create) {, +            return opType(OpType.CREATE);, +        } else {, +            return opType(OpType.INDEX);, +        }, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/mlt/MoreLikeThisRequest.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +    public MoreLikeThisRequest searchType(String searchType) throws ElasticSearchIllegalArgumentException {, +        return searchType(SearchType.fromString(searchType));, +    }, +, +    /**, +     * The search type of the mlt search query., +     */, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchOperationThreading.java, +        if ("no_threads".equals(value) || "noThreads".equals(value)) {, +            return NO_THREADS;, +        } else if ("single_thread".equals(value) || "singleThread".equals(value)) {]