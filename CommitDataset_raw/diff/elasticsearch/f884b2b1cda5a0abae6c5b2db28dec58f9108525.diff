[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/BulkProcessorIT.java, +                    processor.add(new IndexRequest("test").id(Integer.toString(testDocs)), +                    processor.add(new IndexRequest("test-ro").id(Integer.toString(testReadOnlyDocs)), +            processor.add(new IndexRequest("blogs").id("1") // <2>, +                processor.add(new IndexRequest(localIndex).id(Integer.toString(i)), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/BulkProcessorIT.java, +                    processor.add(new IndexRequest("test").id(Integer.toString(testDocs)), +                    processor.add(new IndexRequest("test-ro").id(Integer.toString(testReadOnlyDocs)), +            processor.add(new IndexRequest("blogs").id("1") // <2>, +                processor.add(new IndexRequest(localIndex).id(Integer.toString(i)), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/BulkRequestWithGlobalParametersIT.java, +        request.add(new IndexRequest("test").id("1"), +        request.add(new IndexRequest("test").id("2"), +        request.add(new IndexRequest("test").id("1"), +        request.add(new IndexRequest("test").id("2"), +        request.add(new IndexRequest("test").id("1"), +        request.add(new IndexRequest("test").id("2"), +        request.add(new IndexRequest().id("1"), +        request.add(new IndexRequest().id("2"), +        request.add(new IndexRequest("local_index").id("1"), +        request.add(new IndexRequest().id("2") // will take global index, +        BulkRequest request = new BulkRequest(null, "_doc");, +        assertThat(hits, everyItem(hasType("_doc")));, +    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/pull/36549"), +        request.add(new IndexRequest("index").id("1"), +        request.add(new IndexRequest("index").id("2"), +        request.add(new IndexRequest("index").id("1"), +        request.add(new IndexRequest("index").id( "2"), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/BulkProcessorIT.java, +                    processor.add(new IndexRequest("test").id(Integer.toString(testDocs)), +                    processor.add(new IndexRequest("test-ro").id(Integer.toString(testReadOnlyDocs)), +            processor.add(new IndexRequest("blogs").id("1") // <2>, +                processor.add(new IndexRequest(localIndex).id(Integer.toString(i)), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/BulkRequestWithGlobalParametersIT.java, +        request.add(new IndexRequest("test").id("1"), +        request.add(new IndexRequest("test").id("2"), +        request.add(new IndexRequest("test").id("1"), +        request.add(new IndexRequest("test").id("2"), +        request.add(new IndexRequest("test").id("1"), +        request.add(new IndexRequest("test").id("2"), +        request.add(new IndexRequest().id("1"), +        request.add(new IndexRequest().id("2"), +        request.add(new IndexRequest("local_index").id("1"), +        request.add(new IndexRequest().id("2") // will take global index, +        BulkRequest request = new BulkRequest(null, "_doc");, +        assertThat(hits, everyItem(hasType("_doc")));, +    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/pull/36549"), +        request.add(new IndexRequest("index").id("1"), +        request.add(new IndexRequest("index").id("2"), +        request.add(new IndexRequest("index").id("1"), +        request.add(new IndexRequest("index").id( "2"), +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +import org.elasticsearch.rest.action.document.RestIndexAction;, +                    new IndexRequest("index").id(docId).source(Collections.singletonMap("foo", "bar")), RequestOptions.DEFAULT);, +                    new IndexRequest("index").id( docId).source(Collections.singletonMap("foo", "bar")), RequestOptions.DEFAULT);, +                    new IndexRequest("index").id(docId).source(Collections.singletonMap("foo", "bar")), +                    new IndexRequest("index").id(docId).source(Collections.singletonMap("foo", "bar")), +            highLevelClient().index(new IndexRequest("index").id(docId).source(Collections.singletonMap("foo", "bar")).routing("foo"),, +        IndexRequest indexRequest = new IndexRequest("index", "type", docId);, +        indexRequest.source(Collections.singletonMap("foo", "bar"));, +        execute(indexRequest,, +            highLevelClient()::index,, +            highLevelClient()::indexAsync,, +            expectWarnings(RestIndexAction.TYPES_DEPRECATION_MESSAGE), +        );, +        IndexRequest index = new IndexRequest("index").id("id");, +        IndexRequest index = new IndexRequest("index").id("id");, +                        .add(new IndexRequest(noSourceIndex).id("1"), +                        .add(new IndexRequest(noSourceIndex).id("2"), +        IndexRequest index = new IndexRequest("index").id("id");, +        IndexRequest indexRequest = new IndexRequest("index", "type", "id");, +        indexRequest.source(document, XContentType.JSON);, +        indexRequest.setRefreshPolicy(RefreshPolicy.IMMEDIATE);, +        execute(indexRequest,, +            highLevelClient()::index,, +            highLevelClient()::indexAsync,, +            expectWarnings(RestIndexAction.TYPES_DEPRECATION_MESSAGE), +        );, +        IndexRequest index = new IndexRequest("index").id("id1");, +        index = new IndexRequest("index").id("id2");, +            IndexRequest indexRequest = new IndexRequest("index");, +            IndexRequest indexRequest = new IndexRequest("index").id("id");, +            indexRequest = new IndexRequest("index").id("id");, +                IndexRequest wrongRequest = new IndexRequest("index").id("id");, +                IndexRequest indexRequest = new IndexRequest("index").id("missing_pipeline");, +            IndexRequest indexRequest = new IndexRequest("index").id("external_version_type");, +            final IndexRequest indexRequest = new IndexRequest("index").id("with_create_op_type");, +    public void testIndexWithTypes() throws IOException {, +        final XContentType xContentType = randomFrom(XContentType.values());, +        IndexRequest indexRequest = new IndexRequest("index", "some_type", "some_id");, +        indexRequest.source(XContentBuilder.builder(xContentType.xContent()).startObject().field("test", "test").endObject());, +        IndexResponse indexResponse = execute(, +            indexRequest,, +            highLevelClient()::index,, +            highLevelClient()::indexAsync,, +            expectWarnings(RestIndexAction.TYPES_DEPRECATION_MESSAGE), +        );, +        assertEquals(RestStatus.CREATED, indexResponse.status());, +        assertEquals("index", indexResponse.getIndex());, +        assertEquals("some_type", indexResponse.getType());]