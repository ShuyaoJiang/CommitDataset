[+++ b/test/framework/src/main/java/org/elasticsearch/test/rest/RestTestExecutionContext.java, +                entry.setValue(stash.getValue(entry.getValue()).toString());, +            return bodyAsString(stash.replaceStashedValues(bodies.get(0)));, +            bodyBuilder.append(bodyAsString(stash.replaceStashedValues(body))).append("\n");, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/RestTestExecutionContext.java, +                entry.setValue(stash.getValue(entry.getValue()).toString());, +            return bodyAsString(stash.replaceStashedValues(bodies.get(0)));, +            bodyBuilder.append(bodyAsString(stash.replaceStashedValues(body))).append("\n");, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/Stash.java, +     * Tells whether a particular key needs to be looked up in the stash based on its name., +     * Returns true if the string representation of the key starts with "$", false otherwise, +     * Retrieves a value from the current stash., +    public Object getValue(String key) throws IOException {, +        if (key.startsWith("$body.")) {, +            return response.evaluate(key.substring("$body".length()), this);, +        Object stashedValue = stash.get(key.substring(1));, +            throw new IllegalArgumentException("stashed value not found for key [" + key + "]");, +     * Goes recursively against each map entry and replaces any string value starting with "$" with its, +     * corresponding value retrieved from the stash, +    public Map<String, Object> replaceStashedValues(Map<String, Object> map) throws IOException {, +                    list.set(i, getValue(o.toString()));, +                    entry.setValue(getValue(entry.getValue().toString()));, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/RestTestExecutionContext.java, +                entry.setValue(stash.getValue(entry.getValue()).toString());, +            return bodyAsString(stash.replaceStashedValues(bodies.get(0)));, +            bodyBuilder.append(bodyAsString(stash.replaceStashedValues(body))).append("\n");, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/Stash.java, +     * Tells whether a particular key needs to be looked up in the stash based on its name., +     * Returns true if the string representation of the key starts with "$", false otherwise, +     * Retrieves a value from the current stash., +    public Object getValue(String key) throws IOException {, +        if (key.startsWith("$body.")) {, +            return response.evaluate(key.substring("$body".length()), this);, +        Object stashedValue = stash.get(key.substring(1));, +            throw new IllegalArgumentException("stashed value not found for key [" + key + "]");, +     * Goes recursively against each map entry and replaces any string value starting with "$" with its, +     * corresponding value retrieved from the stash, +    public Map<String, Object> replaceStashedValues(Map<String, Object> map) throws IOException {, +                    list.set(i, getValue(o.toString()));, +                    entry.setValue(getValue(entry.getValue().toString()));, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/json/JsonPath.java, +            key = stash.getValue(key).toString();, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/RestTestExecutionContext.java, +                entry.setValue(stash.getValue(entry.getValue()).toString());, +            return bodyAsString(stash.replaceStashedValues(bodies.get(0)));, +            bodyBuilder.append(bodyAsString(stash.replaceStashedValues(body))).append("\n");, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/Stash.java, +     * Tells whether a particular key needs to be looked up in the stash based on its name., +     * Returns true if the string representation of the key starts with "$", false otherwise, +     * Retrieves a value from the current stash., +    public Object getValue(String key) throws IOException {, +        if (key.startsWith("$body.")) {, +            return response.evaluate(key.substring("$body".length()), this);, +        Object stashedValue = stash.get(key.substring(1));, +            throw new IllegalArgumentException("stashed value not found for key [" + key + "]");, +     * Goes recursively against each map entry and replaces any string value starting with "$" with its, +     * corresponding value retrieved from the stash, +    public Map<String, Object> replaceStashedValues(Map<String, Object> map) throws IOException {, +                    list.set(i, getValue(o.toString()));, +                    entry.setValue(getValue(entry.getValue().toString()));, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/json/JsonPath.java, +            key = stash.getValue(key).toString();, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/section/Assertion.java, +            return executionContext.stash().replaceStashedValues(map);, +            return executionContext.stash().getValue(expectedValue.toString());, +            return executionContext.stash().getValue(field);]