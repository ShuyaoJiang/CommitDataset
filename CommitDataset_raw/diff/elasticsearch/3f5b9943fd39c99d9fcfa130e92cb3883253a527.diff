[+++ b/qa/vagrant/build.gradle, +String vagrantBoxes = getProperties().get('vagrant.boxes', 'sample'), +for (String box : vagrantBoxes.split(',')) {, +long seed, +String formattedSeed, +String[] upgradeFromVersions, +String upgradeFromVersion, +, +String maybeTestsSeed = System.getProperty("tests.seed", null);, +if (maybeTestsSeed != null) {, +  seed = new BigInteger(maybeTestsSeed, 16).longValue(), +  formattedSeed = maybeTestsSeed, +} else {, +  seed = new Random().nextLong(), +  formattedSeed = String.format("%016X", seed), +}, +, +String maybeUpdradeFromVersions = System.getProperty("tests.packaging.upgrade.from.versions", null), +if (maybeUpdradeFromVersions != null) {, +  upgradeFromVersions = maybeUpdradeFromVersions.split(","), +} else {, +  upgradeFromVersions = new File(project.projectDir, 'versions'), +}, +, +upgradeFromVersion = upgradeFromVersions[new Random(seed).nextInt(upgradeFromVersions.length)], +Set<String> getVersions() {, +  Node xml, +  new URL('http://repo1.maven.org/maven2/org/elasticsearch/elasticsearch/maven-metadata.xml').openStream().withStream { s ->, +    xml = new XmlParser().parse(s), +  }, +  return new TreeSet<>(xml.versioning.versions.version.collect { it.text() }.findAll { it ==~ /2\.\d\.\d/ }), +}, +, +task updatePackagingTestUpgradeFromVersions {, +  doLast {, +    Set<String> versions = getVersions(), +    new File(project.projectDir, 'versions').text = versions.join('\n') + '\n', +  }, +}, +, +task verifyPackagingTestUpgradeFromVersions {, +  doLast {, +    String maybeUpdateFromVersions = System.getProperty("tests.packaging.upgrade.from.versions", null), +    if (maybeUpdateFromVersions == null) {, +      Set<String> versions = getVersions(), +      Set<String> actualVersions = new HashSet<>(Arrays.asList(upgradeFromVersions)), +      if (!versions.equals(actualVersions)) {, +        throw new GradleException("out-of-date versions [" + actualVersions + "], expected [" + versions + "]; run gradle updatePackagingTestUpgradeFromVersions"), +      }, +    }, +  }, +}, +, +  dependsOn verifyPackagingTestUpgradeFromVersions, +  gradle.addBuildListener new BuildAdapter() {, +    @Override, +    void buildFinished(BuildResult result) {, +      if (result.failure) {, +        println "Reproduce with: gradle packagingTest -Pvagrant.boxes=${vagrantBoxes} -Dtests.seed=${formattedSeed} -Dtests.packaging.upgrade.from.versions=${upgradeFromVersions.join(",")}", +      }, +    }, +  }, +++ b/qa/vagrant/build.gradle, +String vagrantBoxes = getProperties().get('vagrant.boxes', 'sample'), +for (String box : vagrantBoxes.split(',')) {, +long seed, +String formattedSeed, +String[] upgradeFromVersions, +String upgradeFromVersion, +, +String maybeTestsSeed = System.getProperty("tests.seed", null);, +if (maybeTestsSeed != null) {, +  seed = new BigInteger(maybeTestsSeed, 16).longValue(), +  formattedSeed = maybeTestsSeed, +} else {, +  seed = new Random().nextLong(), +  formattedSeed = String.format("%016X", seed), +}, +, +String maybeUpdradeFromVersions = System.getProperty("tests.packaging.upgrade.from.versions", null), +if (maybeUpdradeFromVersions != null) {, +  upgradeFromVersions = maybeUpdradeFromVersions.split(","), +} else {, +  upgradeFromVersions = new File(project.projectDir, 'versions'), +}, +, +upgradeFromVersion = upgradeFromVersions[new Random(seed).nextInt(upgradeFromVersions.length)], +Set<String> getVersions() {, +  Node xml, +  new URL('http://repo1.maven.org/maven2/org/elasticsearch/elasticsearch/maven-metadata.xml').openStream().withStream { s ->, +    xml = new XmlParser().parse(s), +  }, +  return new TreeSet<>(xml.versioning.versions.version.collect { it.text() }.findAll { it ==~ /2\.\d\.\d/ }), +}, +, +task updatePackagingTestUpgradeFromVersions {, +  doLast {, +    Set<String> versions = getVersions(), +    new File(project.projectDir, 'versions').text = versions.join('\n') + '\n', +  }]