[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +public class MapperQueryParser extends QueryParser {, +        setLowercaseExpandedTerms(settings.lowercaseExpandedTerms());, +        setLocale(settings.locale());, +            if (lowercaseExpandedTerms && currentFieldType.tokenized()) {, +                part1 = part1 == null ? null : part1.toLowerCase(locale);, +                part2 = part2 == null ? null : part2.toLowerCase(locale);, +            }, +, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, context);, +        if (lowercaseExpandedTerms) {, +            termStr = termStr.toLowerCase(locale);, +        }, +                return currentFieldType.fuzzyQuery(termStr, Fuzziness.build(minSimilarity),, +                    fuzzyPrefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +        if (lowercaseExpandedTerms) {, +            termStr = termStr.toLowerCase(locale);, +        }, +                if (currentFieldType.tokenized() == false) {, +                    query = currentFieldType.prefixQuery(termStr, multiTermRewriteMethod, context);, +        if (lowercaseExpandedTerms) {, +            termStr = termStr.toLowerCase(locale);, +        }, +                return getPossiblyAnalyzedWildcardQuery(indexedNameField, termStr);, +            return getPossiblyAnalyzedWildcardQuery(indexedNameField, termStr);, +    private Query getPossiblyAnalyzedWildcardQuery(String field, String termStr) throws ParseException {, +        if (!settings.analyzeWildcard()) {, +            return super.getWildcardQuery(field, termStr);, +        }, +        boolean isWithinToken = (!termStr.startsWith("?") && !termStr.startsWith("*"));, +        StringBuilder aggStr = new StringBuilder();, +        StringBuilder tmp = new StringBuilder();, +        for (int i = 0; i < termStr.length(); i++) {, +            char c = termStr.charAt(i);, +            if (c == '?' || c == '*') {, +                if (isWithinToken) {, +                    try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                        source.reset();, +                        CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);, +                        if (source.incrementToken()) {, +                            String term = termAtt.toString();, +                            if (term.length() == 0) {, +                                // no tokens, just use what we have now, +                                aggStr.append(tmp);, +                            } else {, +                                aggStr.append(term);, +                            }, +                        } else {, +                            // no tokens, just use what we have now, +                            aggStr.append(tmp);, +                        }, +                    } catch (IOException e) {, +                        aggStr.append(tmp);, +                    }, +                    tmp.setLength(0);, +                }, +                isWithinToken = false;, +                aggStr.append(c);, +            } else {, +                tmp.append(c);, +                isWithinToken = true;, +            }, +        }, +        if (isWithinToken) {, +            try {, +                try (TokenStream source = getAnalyzer().tokenStream(field, tmp.toString())) {, +                    source.reset();, +                    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);, +                    if (source.incrementToken()) {, +                        String term = termAtt.toString();, +                        if (term.length() == 0) {, +                            // no tokens, just use what we have now, +                            aggStr.append(tmp);, +                        } else {, +                            aggStr.append(term);, +                        }, +                    } else {, +                        // no tokens, just use what we have now, +                        aggStr.append(tmp);, +                    }, +                }, +            } catch (IOException e) {, +                aggStr.append(tmp);, +            }, +        }, +, +        return super.getWildcardQuery(field, aggStr.toString());, +    }, +, +        if (lowercaseExpandedTerms) {, +            termStr = termStr.toLowerCase(locale);, +        }, +                        maxDeterminizedStates, multiTermRewriteMethod, context);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +public class MapperQueryParser extends QueryParser {, +        setLowercaseExpandedTerms(settings.lowercaseExpandedTerms());, +        setLocale(settings.locale());, +            if (lowercaseExpandedTerms && currentFieldType.tokenized()) {]