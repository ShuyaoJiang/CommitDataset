[+++ b/securesm/src/main/java/org/elasticsearch/SecureSM.java, + * This class throws exception on {@code exitVM} calls, and provides a whitelist where calls, + * from exit are allowed., +, +  private final String[] packagesThatCanExit;, +   * Creates a new security manager where no packages can exit nor halt the virtual machine., +    this(new String[0]);, +   * Creates a new security manager with the specified list of packages being the only packages, +   * that can exit or halt the virtual machine., +   *, +   * @param packagesThatCanExit the list of packages that can exit or halt the virtual machine, +  public SecureSM(final String[] packagesThatCanExit) {, +    this.packagesThatCanExit = packagesThatCanExit;, +  /**, +   * Creates a new security manager with a standard set of test packages being the only packages, +   * that can exit or halt the virtual machine. The packages that can exit are, +   *  <li><code>org.apache.maven.surefire.booter.</code></li>, +   *  <li><code>com.carrotsearch.ant.tasks.junit4.</code></li>, +   *  <li><code>org.eclipse.internal.junit.runner.</code></li>, +   *  <li><code>com.intellij.rt.execution.junit.</code></li>, +   *, +   * @return an instance of SecureSM where test packages can halt or exit the virtual machine, +     */, +  public static SecureSM createTestSecureSM() {, +    return new SecureSM(TEST_RUNNER_PACKAGES);, +  }, +, +  private static final String[] TEST_RUNNER_PACKAGES = new String[] {, +    // surefire test runner, +    "org.apache.maven.surefire.booter.",, +    // junit4 test runner, +    "com.carrotsearch.ant.tasks.junit4.",, +    // eclipse test runner, +    "org.eclipse.jdt.internal.junit.runner.",, +    // intellij test runner, +    "com.intellij.rt.execution.junit.", +  };, +, +    innerCheckExit(status);, +  protected void innerCheckExit(final int status) {, +            if (packagesThatCanExit == null) {, +              break;, +            }, +            for (String packageThatCanExit : packagesThatCanExit) {, +              if (className.startsWith(packageThatCanExit)) {, +        throw new SecurityException(exitMethodHit + " calls are not allowed");, +, +++ b/securesm/src/main/java/org/elasticsearch/SecureSM.java, + * This class throws exception on {@code exitVM} calls, and provides a whitelist where calls, + * from exit are allowed., +, +  private final String[] packagesThatCanExit;, +   * Creates a new security manager where no packages can exit nor halt the virtual machine., +    this(new String[0]);, +   * Creates a new security manager with the specified list of packages being the only packages, +   * that can exit or halt the virtual machine., +   *, +   * @param packagesThatCanExit the list of packages that can exit or halt the virtual machine, +  public SecureSM(final String[] packagesThatCanExit) {, +    this.packagesThatCanExit = packagesThatCanExit;, +  /**, +   * Creates a new security manager with a standard set of test packages being the only packages, +   * that can exit or halt the virtual machine. The packages that can exit are, +   *  <li><code>org.apache.maven.surefire.booter.</code></li>, +   *  <li><code>com.carrotsearch.ant.tasks.junit4.</code></li>, +   *  <li><code>org.eclipse.internal.junit.runner.</code></li>, +   *  <li><code>com.intellij.rt.execution.junit.</code></li>, +   *, +   * @return an instance of SecureSM where test packages can halt or exit the virtual machine, +     */, +  public static SecureSM createTestSecureSM() {, +    return new SecureSM(TEST_RUNNER_PACKAGES);, +  }, +, +  private static final String[] TEST_RUNNER_PACKAGES = new String[] {, +    // surefire test runner, +    "org.apache.maven.surefire.booter.",, +    // junit4 test runner, +    "com.carrotsearch.ant.tasks.junit4.",, +    // eclipse test runner, +    "org.eclipse.jdt.internal.junit.runner.",, +    // intellij test runner, +    "com.intellij.rt.execution.junit.", +  };, +, +    innerCheckExit(status);, +  protected void innerCheckExit(final int status) {, +            if (packagesThatCanExit == null) {, +              break;, +            }, +            for (String packageThatCanExit : packagesThatCanExit) {, +              if (className.startsWith(packageThatCanExit)) {, +        throw new SecurityException(exitMethodHit + " calls are not allowed");, +, +++ b/securesm/src/test/java/org/elasticsearch/TestSecureSM.java, +import junit.framework.TestCase;, +import org.junit.Test;, +, +    System.setSecurityManager(SecureSM.createTestSecureSM());]