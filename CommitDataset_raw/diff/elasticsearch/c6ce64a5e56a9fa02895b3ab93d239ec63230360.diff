[+++ b/src/main/java/org/elasticsearch/action/get/MultiGetShardRequest.java, +++ b/src/main/java/org/elasticsearch/action/get/MultiGetShardRequest.java, +++ b/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.Term;, +import java.io.IOException;, +import java.util.concurrent.ConcurrentMap;, +, +            ctl = new CloseableThreadLocal<>();, +++ b/src/main/java/org/elasticsearch/action/get/MultiGetShardRequest.java, +++ b/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.Term;, +import java.io.IOException;, +import java.util.concurrent.ConcurrentMap;, +, +            ctl = new CloseableThreadLocal<>();, +++ b/src/main/java/org/elasticsearch/index/VersionType.java, +            if (expectedVersion == Versions.MATCH_ANY) {, +            return version > 0L || version == Versions.MATCH_ANY;, +            return version > 0L || version == Versions.MATCH_ANY;, +++ b/src/main/java/org/elasticsearch/action/get/MultiGetShardRequest.java, +++ b/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.Term;, +import java.io.IOException;, +import java.util.concurrent.ConcurrentMap;, +, +            ctl = new CloseableThreadLocal<>();, +++ b/src/main/java/org/elasticsearch/index/VersionType.java, +            if (expectedVersion == Versions.MATCH_ANY) {, +            return version > 0L || version == Versions.MATCH_ANY;, +            return version > 0L || version == Versions.MATCH_ANY;, +++ b/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsTests.java, +import org.elasticsearch.common.lucene.uid.Versions;, +        response = client().prepareTermVectors(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).get();, +        response = client().prepareTermVectors(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).setRealtime(false).get();, +        response = client().prepareTermVectors(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).get();, +        response = client().prepareTermVectors(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).setRealtime(false).get();, +++ b/src/main/java/org/elasticsearch/action/get/MultiGetShardRequest.java, +++ b/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.Term;, +import java.io.IOException;, +import java.util.concurrent.ConcurrentMap;, +, +            ctl = new CloseableThreadLocal<>();, +++ b/src/main/java/org/elasticsearch/index/VersionType.java, +            if (expectedVersion == Versions.MATCH_ANY) {, +            return version > 0L || version == Versions.MATCH_ANY;, +            return version > 0L || version == Versions.MATCH_ANY;, +++ b/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsTests.java, +import org.elasticsearch.common.lucene.uid.Versions;, +        response = client().prepareTermVectors(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).get();, +        response = client().prepareTermVectors(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).setRealtime(false).get();, +        response = client().prepareTermVectors(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).get();, +        response = client().prepareTermVectors(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).setRealtime(false).get();, +++ b/src/test/java/org/elasticsearch/action/termvectors/MultiTermVectorsTests.java, +import org.elasticsearch.common.lucene.uid.Versions;, +                .add(new TermVectorsRequest(indexOrAlias(), "type1", "1").selectedFields("field").version(Versions.MATCH_ANY)), +                .add(new TermVectorsRequest(indexOrAlias(), "type1", "1").selectedFields("field").version(Versions.MATCH_ANY).realtime(false)), +                .add(new TermVectorsRequest(indexOrAlias(), "type1", "2").selectedFields("field").version(Versions.MATCH_ANY)), +                .add(new TermVectorsRequest(indexOrAlias(), "type1", "2").selectedFields("field").version(Versions.MATCH_ANY)), +++ b/src/main/java/org/elasticsearch/action/get/MultiGetShardRequest.java, +++ b/src/main/java/org/elasticsearch/common/lucene/uid/Versions.java, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.Term;, +import java.io.IOException;, +import java.util.concurrent.ConcurrentMap;, +, +            ctl = new CloseableThreadLocal<>();, +++ b/src/main/java/org/elasticsearch/index/VersionType.java, +            if (expectedVersion == Versions.MATCH_ANY) {, +            return version > 0L || version == Versions.MATCH_ANY;, +            return version > 0L || version == Versions.MATCH_ANY;, +++ b/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsTests.java, +import org.elasticsearch.common.lucene.uid.Versions;, +        response = client().prepareTermVectors(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).get();, +        response = client().prepareTermVectors(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).setRealtime(false).get();, +        response = client().prepareTermVectors(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).get();, +        response = client().prepareTermVectors(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).setRealtime(false).get();, +++ b/src/test/java/org/elasticsearch/action/termvectors/MultiTermVectorsTests.java, +import org.elasticsearch.common.lucene.uid.Versions;, +                .add(new TermVectorsRequest(indexOrAlias(), "type1", "1").selectedFields("field").version(Versions.MATCH_ANY)), +                .add(new TermVectorsRequest(indexOrAlias(), "type1", "1").selectedFields("field").version(Versions.MATCH_ANY).realtime(false)), +                .add(new TermVectorsRequest(indexOrAlias(), "type1", "2").selectedFields("field").version(Versions.MATCH_ANY)), +                .add(new TermVectorsRequest(indexOrAlias(), "type1", "2").selectedFields("field").version(Versions.MATCH_ANY)), +++ b/src/test/java/org/elasticsearch/get/GetActionTests.java, +import org.elasticsearch.common.lucene.uid.Versions;, +        response = client().prepareGet(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).get();, +        response = client().prepareGet(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).setRealtime(false).get();, +        response = client().prepareGet(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).get();, +        response = client().prepareGet(indexOrAlias(), "type1", "1").setVersion(Versions.MATCH_ANY).setRealtime(false).get();, +                .add(new MultiGetRequest.Item(indexOrAlias(), "type1", "1").version(Versions.MATCH_ANY)), +                .add(new MultiGetRequest.Item(indexOrAlias(), "type1", "1").version(Versions.MATCH_ANY))]