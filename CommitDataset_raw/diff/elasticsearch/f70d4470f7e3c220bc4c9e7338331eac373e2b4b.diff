[+++ b/docs/reference/ilm/getting-started-ilm.asciidoc, +[testenv="basic"], +Let's jump into {ILM} by working through a hands-on scenario., +This section will leverage many new concepts unique to {ILM} that, +you may not be familiar with. The following sections will explore, +these in more details., +The goal of this example is to set up a set of indices that will encapsulate, +the data from a time series data source. We can imagine there is a system, +like {filebeat-ref}[Filebeat] that continuously indexes documents into, +our writing index. We wish to roll over the index after it reaches a size, +of 50 gigabytes, or has been created 30 days ago, and then delete the index, +after 90 days., +=== Setting up a new policy, +There are many new features introduced by {ILM}, but we will only focus on, +a few that are needed for our example. For starters, we will use the, +<<ilm-put-lifecycle,Put Policy>> API to define our first policy. Lifecycle, +policies are defined in JSON and include specific, +<<ilm-policy-definition,phases and actions>>., +[source,js], +------------------------, +PUT _ilm/policy/datastream_policy   <1>, +{, +  "policy": {                       <2>, +    "phases": {, +      "hot": {                      <3>, +        "actions": {, +          "rollover": {             <4>, +            "max_size": "50GB",, +            "max_age": "30d", +          }, +        }, +      },, +      "delete": {, +        "min_age": "90d",           <5>, +        "actions": {, +          "delete": {}              <6>, +        }, +      }, +    }, +  }, +}, +------------------------, +// CONSOLE, +// TEST, +<1> call to the <<ilm-put-lifecycle,put lifecycle API>> endpoint to create, +    a new policy named "datastream_policy", +<2> policy definition sub-object, +<3> the hot phase defined in the "phases" section. Optional `min_age` field, +    not defined -- defaults to `0ms`, +<4> rollover action definition, +<5> delete phase begins after 90 days, +<6> delete action definition, +, +, +Here we created the policy called `datastream_policy` which rolls over, +the index being written to after it reaches 50 gigabytes, or it is 30, +days old. The rollover will occur when either of these conditions is true., +The index will be deleted 90 days after it is rolled over., +, +=== Applying a policy to our index, +, +There are <<set-up-lifecycle-policy,a few ways>> to associate a, +policy to an index. Since we wish specific settings to be applied to, +the new index created from Rollover, we will set the policy via, +index templates., +, +, +[source,js], +-----------------------, +PUT _template/datastream_template, +{, +  "index_patterns": ["datastream-*"],                 <1>, +  "settings": {, +    "number_of_shards": 1,, +    "number_of_replicas": 1,, +    "index.lifecycle.name": "datastream_policy",      <2>, +    "index.lifecycle.rollover_alias": "datastream"    <3>, +  }, +}, +-----------------------, +// CONSOLE, +// TEST[continued], +<1> match all indices starting with "datastream-". These will include all, +    newly created indices from actions like rollover, +<2> the name of the lifecycle policy managing the index, +<3> alias to use for the rollover action, required since a rollover action is, +    defined in the policy., +, +The above index template introduces a few new settings specific to {ILM}., +The first being `index.lifecycle.name`. This setting will configure, +the "datastream_policy" to the index applying this template. This means, +that all newly created indices prefixed "datastream-" will be managed by, +our policy. The other setting used here is `index.lifecycle.rollover_alias`., +This setting is required when using a policy containing the rollover, +action and specifies which alias to rollover on behalf of this index., +The intention here is that the rollover alias is also defined on the index., +, +To begin, we will want to bootstrap our first index to write to., +, +]