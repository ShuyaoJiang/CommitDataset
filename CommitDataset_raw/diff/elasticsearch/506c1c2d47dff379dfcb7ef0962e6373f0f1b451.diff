[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +    static boolean shouldRetry(Exception e) {, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +    static boolean shouldRetry(Exception e) {, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowTasksExecutor.java, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.elasticsearch.index.IndexNotFoundException;, +import org.elasticsearch.index.shard.ShardNotFoundException;, +        logger.info("{} Starting to track leader shard {}", params.getFollowShardId(), params.getLeaderShardId());, +, +        BiLongConsumer handler = (followerGCP, maxSeqNo) -> shardFollowNodeTask.start(followerGCP, maxSeqNo, followerGCP, maxSeqNo);, +        Consumer<Exception> errorHandler = e -> {, +            if (shardFollowNodeTask.isStopped()) {, +                return;, +            }, +, +            if (ShardFollowNodeTask.shouldRetry(e)) {, +                logger.debug(new ParameterizedMessage("failed to fetch follow shard global {} checkpoint and max sequence number",, +                    shardFollowNodeTask), e);, +                threadPool.schedule(params.getMaxRetryDelay(), Ccr.CCR_THREAD_POOL_NAME, () -> nodeOperation(task, params, state));, +            } else {, +                shardFollowNodeTask.markAsFailed(e);, +            }, +        };, +, +        fetchGlobalCheckpoint(followerClient, params.getFollowShardId(), handler, errorHandler);, +            if (indexStats == null) {, +                errorHandler.accept(new IndexNotFoundException(shardId.getIndex()));, +                return;, +            }, +, +                errorHandler.accept(new ShardNotFoundException(shardId));]