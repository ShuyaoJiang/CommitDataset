[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathFunction.java, +        return super.processScript(format(, +            Locale.ROOT, "{sql}.%s(%s)", getClass().getSimpleName().toLowerCase(Locale.ROOT), template));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathFunction.java, +        return super.processScript(format(, +            Locale.ROOT, "{sql}.%s(%s)", getClass().getSimpleName().toLowerCase(Locale.ROOT), template));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/Radians.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathFunction.java, +        return super.processScript(format(, +            Locale.ROOT, "{sql}.%s(%s)", getClass().getSimpleName().toLowerCase(Locale.ROOT), template));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/Radians.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/Sign.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/MathFunction.java, +        return super.processScript(format(, +            Locale.ROOT, "{sql}.%s(%s)", getClass().getSimpleName().toLowerCase(Locale.ROOT), template));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/Radians.java, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/math/Sign.java, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.math.MathProcessor.MathOperation;, +import java.util.Locale;, +import java.util.stream.Stream;, +import static org.elasticsearch.xpack.sql.expression.function.scalar.math.MathProcessor.MathOperation.E;, +import static org.elasticsearch.xpack.sql.expression.function.scalar.math.MathProcessor.MathOperation.PI;, +, +    public void testTranslateMathFunction_HavingClause_Painless() {, +        MathOperation operation =, +            (MathOperation) randomFrom(Stream.of(MathOperation.values()).filter(o -> o != PI && o != E).toArray());, +, +        LogicalPlan p = plan("SELECT keyword, max(int) FROM test GROUP BY keyword HAVING " +, +            operation.name() + "(max(int)) > 10");, +        assertTrue(p instanceof Project);, +        assertTrue(p.children().get(0) instanceof Filter);, +        Expression condition = ((Filter) p.children().get(0)).condition();, +        assertFalse(condition.foldable());, +        QueryTranslation translation = QueryTranslator.toQuery(condition, true);, +        assertNull(translation.query);, +        AggFilter aggFilter = translation.aggFilter;, +        assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.gt(InternalSqlScriptUtils." +, +            operation.name().toLowerCase(Locale.ROOT) + "(params.a0),params.v0))",, +            aggFilter.scriptTemplate().toString());, +        assertThat(aggFilter.scriptTemplate().params().toString(), startsWith("[{a=MAX(int){a->"));, +        assertThat(aggFilter.scriptTemplate().params().toString(), endsWith(", {v=10}]"));, +    }]