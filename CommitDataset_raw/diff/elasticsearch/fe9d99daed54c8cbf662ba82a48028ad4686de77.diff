[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                new SecurityLifecycleService(settings, clusterService, threadPool, client, indexAuditTrail);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                new SecurityLifecycleService(settings, clusterService, threadPool, client, indexAuditTrail);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +        this.securityIndex = new IndexLifecycleManager(settings, client, SECURITY_INDEX_NAME, SECURITY_TEMPLATE_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                new SecurityLifecycleService(settings, clusterService, threadPool, client, indexAuditTrail);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +        this.securityIndex = new IndexLifecycleManager(settings, client, SECURITY_INDEX_NAME, SECURITY_TEMPLATE_NAME);, +++ /dev/null, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                new SecurityLifecycleService(settings, clusterService, threadPool, client, indexAuditTrail);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +        this.securityIndex = new IndexLifecycleManager(settings, client, SECURITY_INDEX_NAME, SECURITY_TEMPLATE_NAME);, +++ /dev/null, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/support/IndexLifecycleManager.java, +    public IndexLifecycleManager(Settings settings, InternalClient client, String indexName, String templateName) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                new SecurityLifecycleService(settings, clusterService, threadPool, client, indexAuditTrail);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +        this.securityIndex = new IndexLifecycleManager(settings, client, SECURITY_INDEX_NAME, SECURITY_TEMPLATE_NAME);, +++ /dev/null, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/support/IndexLifecycleManager.java, +    public IndexLifecycleManager(Settings settings, InternalClient client, String indexName, String templateName) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/upgrade/Upgrade.java, +import org.elasticsearch.common.settings.SecureString;, +import org.elasticsearch.xpack.security.authc.esnative.ReservedRealm;, +import org.elasticsearch.xpack.security.authc.support.Hasher;, +                      if (hasOldStyleDefaultPassword(sourceMap)) {, +    /**, +     * Determines whether the supplied source as a {@link Map} has its password explicitly set to be the default password, +     */, +    private static boolean hasOldStyleDefaultPassword(Map<String, Object> userSource) {, +        // TODO we should store the hash as something other than a string... bytes?, +        final String passwordHash = (String) userSource.get(User.Fields.PASSWORD.getPreferredName());, +        if (passwordHash == null) {, +            throw new IllegalStateException("passwordHash should never be null");, +        } else if (passwordHash.isEmpty()) {, +            // we know empty is the new style, +            return false;, +        }, +, +        try (SecureString secureString = new SecureString(passwordHash.toCharArray())) {, +            return Hasher.BCRYPT.verify(ReservedRealm.EMPTY_PASSWORD_TEXT, secureString.getChars());, +        }, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                new SecurityLifecycleService(settings, clusterService, threadPool, client, indexAuditTrail);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +        this.securityIndex = new IndexLifecycleManager(settings, client, SECURITY_INDEX_NAME, SECURITY_TEMPLATE_NAME);, +++ /dev/null, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/support/IndexLifecycleManager.java, +    public IndexLifecycleManager(Settings settings, InternalClient client, String indexName, String templateName) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/upgrade/Upgrade.java, +import org.elasticsearch.common.settings.SecureString;, +import org.elasticsearch.xpack.security.authc.esnative.ReservedRealm;, +import org.elasticsearch.xpack.security.authc.support.Hasher;, +                      if (hasOldStyleDefaultPassword(sourceMap)) {, +    /**, +     * Determines whether the supplied source as a {@link Map} has its password explicitly set to be the default password, +     */, +    private static boolean hasOldStyleDefaultPassword(Map<String, Object> userSource) {, +        // TODO we should store the hash as something other than a string... bytes?, +        final String passwordHash = (String) userSource.get(User.Fields.PASSWORD.getPreferredName());, +        if (passwordHash == null) {, +            throw new IllegalStateException("passwordHash should never be null");, +        } else if (passwordHash.isEmpty()) {, +            // we know empty is the new style, +            return false;, +        }, +, +        try (SecureString secureString = new SecureString(passwordHash.toCharArray())) {, +            return Hasher.BCRYPT.verify(ReservedRealm.EMPTY_PASSWORD_TEXT, secureString.getChars());, +        }, +    }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/SecurityLifecycleServiceTests.java, +                threadPool, client, mock(IndexAuditTrail.class));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                new SecurityLifecycleService(settings, clusterService, threadPool, client, indexAuditTrail);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +        this.securityIndex = new IndexLifecycleManager(settings, client, SECURITY_INDEX_NAME, SECURITY_TEMPLATE_NAME);, +++ /dev/null, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/support/IndexLifecycleManager.java, +    public IndexLifecycleManager(Settings settings, InternalClient client, String indexName, String templateName) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/upgrade/Upgrade.java, +import org.elasticsearch.common.settings.SecureString;, +import org.elasticsearch.xpack.security.authc.esnative.ReservedRealm;, +import org.elasticsearch.xpack.security.authc.support.Hasher;, +                      if (hasOldStyleDefaultPassword(sourceMap)) {, +    /**, +     * Determines whether the supplied source as a {@link Map} has its password explicitly set to be the default password, +     */, +    private static boolean hasOldStyleDefaultPassword(Map<String, Object> userSource) {, +        // TODO we should store the hash as something other than a string... bytes?, +        final String passwordHash = (String) userSource.get(User.Fields.PASSWORD.getPreferredName());, +        if (passwordHash == null) {, +            throw new IllegalStateException("passwordHash should never be null");]