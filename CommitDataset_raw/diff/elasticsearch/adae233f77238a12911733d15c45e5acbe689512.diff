[+++ b/server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java, +    private static final String WARNING_PREFIX =, +                    Build.CURRENT.shortHash());, +    private static final String STARTUP_TIME = RFC_7231_DATE_TIME.format(ZonedDateTime.now(ZoneId.of("GMT")));, +        return WARNING_PREFIX + " ", +                + "\"" + escapeAndEncode(s) + "\"" + " ", +                + "\"" + STARTUP_TIME + "\"";, +        /*, +         * We want a fast path check to avoid creating the string builder and copying characters if needed. So we walk the string looking, +         * for either of the characters that we need to escape. If we find a character that needs escaping, we start over and, +         */, +        boolean escapingNeeded = false;, +        for (int i = 0; i < s.length(); i++) {, +            final char c = s.charAt(i);, +            if (c == '\\' || c == '"') {, +                escapingNeeded = true;, +                break;, +            }, +        }, +, +        if (escapingNeeded) {, +            final StringBuilder sb = new StringBuilder();, +            for (final char c : s.toCharArray()) {, +                if (c == '\\' || c == '"') {, +                    sb.append("\\");, +                }, +                sb.append(c);, +            }, +            return sb.toString();, +        } else {, +            return s;, +        }, +        assert doesNotNeedEncoding.get('%') == false : doesNotNeedEncoding;, +        // first check if the string needs any encoding; this is the fast path and we want to avoid creating a string builder and copying, +        for (int i = 0; i < s.length(); i++) {, +            int current = s.charAt(i);, +            if (doesNotNeedEncoding.get(current) == false) {, +                encodingNeeded = true;, +                break;, +            }, +        }, +, +        if (encodingNeeded == false) {, +            return s;, +        }, +, +        final StringBuilder sb = new StringBuilder(s.length());, +        return sb.toString();]