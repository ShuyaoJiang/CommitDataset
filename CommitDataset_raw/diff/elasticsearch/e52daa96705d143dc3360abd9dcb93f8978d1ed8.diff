[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;, +import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;, +import org.elasticsearch.action.admin.indices.create.TransportCreateIndexAction;, +import org.elasticsearch.common.collect.Sets;, +import org.elasticsearch.indices.IndexAlreadyExistsException;, +import java.util.Set;, +import java.util.concurrent.atomic.AtomicBoolean;, +    private final boolean autoCreateIndex;, +, +    private final TransportCreateIndexAction createIndexAction;, +, +                                       TransportShardBulkAction shardBulkAction, TransportCreateIndexAction createIndexAction) {, +        this.createIndexAction = createIndexAction;, +        this.autoCreateIndex = settings.getAsBoolean("action.auto_create_index", true);, +        this.allowIdGeneration = componentSettings.getAsBoolean("action.allow_id_generation", true);, +        Set<String> indices = Sets.newHashSet();, +        for (ActionRequest request : bulkRequest.requests) {, +            if (request instanceof IndexRequest) {, +                IndexRequest indexRequest = (IndexRequest) request;, +                if (!indices.contains(indexRequest.index())) {, +                    indices.add(indexRequest.index());, +                }, +            } else if (request instanceof DeleteRequest) {, +                DeleteRequest deleteRequest = (DeleteRequest) request;, +                if (!indices.contains(deleteRequest.index())) {, +                    indices.add(deleteRequest.index());, +                }, +            }, +        }, +, +        if (autoCreateIndex) {, +            final AtomicInteger counter = new AtomicInteger(indices.size());, +            final AtomicBoolean failed = new AtomicBoolean();, +            for (String index : indices) {, +                if (!clusterService.state().metaData().hasConcreteIndex(index)) {, +                    createIndexAction.execute(new CreateIndexRequest(index).cause("auto(bulk api)"), new ActionListener<CreateIndexResponse>() {, +                        @Override public void onResponse(CreateIndexResponse result) {, +                            if (counter.decrementAndGet() == 0) {, +                                executeBulk(bulkRequest, listener);, +                            }, +                        }, +, +                        @Override public void onFailure(Throwable e) {, +                            if (ExceptionsHelper.unwrapCause(e) instanceof IndexAlreadyExistsException) {, +                                // we have the index, do it, +                                if (counter.decrementAndGet() == 0) {, +                                    executeBulk(bulkRequest, listener);, +                                }, +                            } else if (failed.compareAndSet(false, true)) {, +                                listener.onFailure(e);, +                            }, +                        }, +                    });, +                } else {, +                    if (counter.decrementAndGet() == 0) {, +                        executeBulk(bulkRequest, listener);, +                    }, +                }, +            }, +        } else {, +            executeBulk(bulkRequest, listener);, +        }, +    }, +, +    private void executeBulk(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;, +import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;, +import org.elasticsearch.action.admin.indices.create.TransportCreateIndexAction;, +import org.elasticsearch.common.collect.Sets;, +import org.elasticsearch.indices.IndexAlreadyExistsException;, +import java.util.Set;, +import java.util.concurrent.atomic.AtomicBoolean;, +    private final boolean autoCreateIndex;, +, +    private final TransportCreateIndexAction createIndexAction;, +, +                                       TransportShardBulkAction shardBulkAction, TransportCreateIndexAction createIndexAction) {, +        this.createIndexAction = createIndexAction;, +        this.autoCreateIndex = settings.getAsBoolean("action.auto_create_index", true);, +        this.allowIdGeneration = componentSettings.getAsBoolean("action.allow_id_generation", true);, +        Set<String> indices = Sets.newHashSet();, +        for (ActionRequest request : bulkRequest.requests) {, +            if (request instanceof IndexRequest) {, +                IndexRequest indexRequest = (IndexRequest) request;, +                if (!indices.contains(indexRequest.index())) {, +                    indices.add(indexRequest.index());, +                }, +            } else if (request instanceof DeleteRequest) {, +                DeleteRequest deleteRequest = (DeleteRequest) request;, +                if (!indices.contains(deleteRequest.index())) {, +                    indices.add(deleteRequest.index());, +                }, +            }, +        }, +, +        if (autoCreateIndex) {, +            final AtomicInteger counter = new AtomicInteger(indices.size());, +            final AtomicBoolean failed = new AtomicBoolean();]