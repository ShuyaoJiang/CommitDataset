[+++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +import org.elasticsearch.common.util.concurrent.ReleasableLock;, +        return newEmptySnapshot();, +    public Engine recoverFromTranslog(final TranslogRecoveryRunner translogRecoveryRunner, final long recoverUpToSeqNo) {, +        try (ReleasableLock lock = readLock.acquire()) {, +            ensureOpen();, +            try (Translog.Snapshot snapshot = newEmptySnapshot()) {, +                translogRecoveryRunner.run(this, snapshot);, +            } catch (final Exception e) {, +                throw new EngineException(shardId, "failed to recover from empty translog snapshot", e);, +            }, +        }, +, +    private Translog.Snapshot newEmptySnapshot() {, +        return new Translog.Snapshot() {, +            @Override, +            public void close() {, +            }, +, +            @Override, +            public int totalOperations() {, +                return 0;, +            }, +, +            @Override, +            public Translog.Operation next() {, +                return null;, +            }, +        };, +    }, +++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +import org.elasticsearch.common.util.concurrent.ReleasableLock;, +        return newEmptySnapshot();, +    public Engine recoverFromTranslog(final TranslogRecoveryRunner translogRecoveryRunner, final long recoverUpToSeqNo) {, +        try (ReleasableLock lock = readLock.acquire()) {, +            ensureOpen();, +            try (Translog.Snapshot snapshot = newEmptySnapshot()) {, +                translogRecoveryRunner.run(this, snapshot);, +            } catch (final Exception e) {, +                throw new EngineException(shardId, "failed to recover from empty translog snapshot", e);, +            }, +        }, +, +    private Translog.Snapshot newEmptySnapshot() {, +        return new Translog.Snapshot() {, +            @Override, +            public void close() {, +            }, +, +            @Override, +            public int totalOperations() {, +                return 0;, +            }, +, +            @Override, +            public Translog.Operation next() {, +                return null;, +            }, +        };, +    }, +++ b/server/src/test/java/org/elasticsearch/index/engine/ReadOnlyEngineTests.java, +, +    public void testRecoverFromTranslogAppliesNoOperations() throws IOException {, +        IOUtils.close(engine, store);, +        final AtomicLong globalCheckpoint = new AtomicLong(SequenceNumbers.NO_OPS_PERFORMED);, +        try (Store store = createStore()) {, +            EngineConfig config = config(defaultSettings, store, createTempDir(), newMergePolicy(), null, null, globalCheckpoint::get);, +            int numDocs = scaledRandomIntBetween(10, 1000);, +            try (InternalEngine engine = createEngine(config)) {, +                for (int i = 0; i < numDocs; i++) {, +                    if (rarely()) {, +                        continue; // gap in sequence number, +                    }, +                    ParsedDocument doc = testParsedDocument(Integer.toString(i), null, testDocument(), new BytesArray("{}"), null);, +                    engine.index(new Engine.Index(newUid(doc), doc, i, primaryTerm.get(), 1, null, Engine.Operation.Origin.REPLICA,, +                        System.nanoTime(), -1, false, SequenceNumbers.UNASSIGNED_SEQ_NO, 0));, +                    if (rarely()) {, +                        engine.flush();, +                    }, +                    globalCheckpoint.set(i);, +                }, +                engine.syncTranslog();, +                engine.flushAndClose();, +            }, +            try (ReadOnlyEngine readOnlyEngine = new ReadOnlyEngine(config, null , null, true, Function.identity())) {, +                final TranslogHandler translogHandler = new TranslogHandler(xContentRegistry(), config.getIndexSettings());, +                readOnlyEngine.initializeMaxSeqNoOfUpdatesOrDeletes();, +                readOnlyEngine.recoverFromTranslog(translogHandler, randomNonNegativeLong());, +, +                assertThat(translogHandler.appliedOperations(), equalTo(0L));, +            }, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/index/engine/ReadOnlyEngine.java, +import org.elasticsearch.common.util.concurrent.ReleasableLock;, +        return newEmptySnapshot();, +    public Engine recoverFromTranslog(final TranslogRecoveryRunner translogRecoveryRunner, final long recoverUpToSeqNo) {, +        try (ReleasableLock lock = readLock.acquire()) {, +            ensureOpen();, +            try (Translog.Snapshot snapshot = newEmptySnapshot()) {]