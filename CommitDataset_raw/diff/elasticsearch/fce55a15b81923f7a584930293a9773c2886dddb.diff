[+++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64 only), +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64 only), +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));, +        if (codeSource != null) {, +                // run groovy scripts with no permissions (except logging property), +                if ("/groovy/script".equals(location.getFile())) {, +                    return groovy.implies(domain, permission);, +                }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64 only), +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));, +        if (codeSource != null) {, +                // run groovy scripts with no permissions (except logging property), +                if ("/groovy/script".equals(location.getFile())) {, +                    return groovy.implies(domain, permission);, +                }, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.aliases.IndexAliasesService;, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.mapper.MapperService;, +        bind(MapperService.class).asEagerSingleton();, +        bind(IndexAliasesService.class).asEagerSingleton();, +        bind(IndexFieldDataService.class).asEagerSingleton();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64 only), +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));, +        if (codeSource != null) {, +                // run groovy scripts with no permissions (except logging property), +                if ("/groovy/script".equals(location.getFile())) {, +                    return groovy.implies(domain, permission);, +                }, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.aliases.IndexAliasesService;, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.mapper.MapperService;, +        bind(MapperService.class).asEagerSingleton();, +        bind(IndexAliasesService.class).asEagerSingleton();, +        bind(IndexFieldDataService.class).asEagerSingleton();, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64 only), +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));, +        if (codeSource != null) {, +                // run groovy scripts with no permissions (except logging property), +                if ("/groovy/script".equals(location.getFile())) {, +                    return groovy.implies(domain, permission);, +                }, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.aliases.IndexAliasesService;, +import org.elasticsearch.index.fielddata.IndexFieldDataService;, +import org.elasticsearch.index.mapper.MapperService;, +        bind(MapperService.class).asEagerSingleton();, +        bind(IndexAliasesService.class).asEagerSingleton();, +        bind(IndexFieldDataService.class).asEagerSingleton();, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +     * Returns true if secure computing mode is enabled (linux/amd64 only), +++ b/core/src/main/java/org/elasticsearch/bootstrap/ESPolicy.java, +import java.security.Permissions;, +import java.util.PropertyPermission;, +    /** limited policy for groovy scripts */, +    static final String GROOVY_RESOURCE = "groovy.policy";, +    final Policy groovy;, +        URI groovyUri = getClass().getResource(GROOVY_RESOURCE).toURI();, +        this.groovy = Policy.getInstance("JavaPolicy", new URIParameter(groovyUri));, +        if (codeSource != null) {, +                // run groovy scripts with no permissions (except logging property), +                if ("/groovy/script".equals(location.getFile())) {, +                    return groovy.implies(domain, permission);]