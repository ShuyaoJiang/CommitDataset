[+++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +import org.elasticsearch.index.similarity.SimilarityService;, +import java.util.Map;, +        // validate that built-in similarities don't get redefined, +        Setting.groupSetting("index.similarity.", false, Setting.Scope.INDEX, (s) -> {, +            Map<String, Settings> groups = s.getAsGroups();, +            for (String key : SimilarityService.BUILT_IN.keySet()) {, +                if (groups.containsKey(key)) {, +                    throw new IllegalArgumentException("illegal value for [index.similarity."+ key + "] cannot redefine built-in similarity");, +                }, +            }, +        }), // this allows similarity settings to be passed, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +import org.elasticsearch.index.similarity.SimilarityService;, +import java.util.Map;, +        // validate that built-in similarities don't get redefined, +        Setting.groupSetting("index.similarity.", false, Setting.Scope.INDEX, (s) -> {, +            Map<String, Settings> groups = s.getAsGroups();, +            for (String key : SimilarityService.BUILT_IN.keySet()) {, +                if (groups.containsKey(key)) {, +                    throw new IllegalArgumentException("illegal value for [index.similarity."+ key + "] cannot redefine built-in similarity");, +                }, +            }, +        }), // this allows similarity settings to be passed, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import java.util.Map;, +import java.util.function.Predicate;, +    public boolean exists(Settings settings) {, +        return groupSetting(key, dynamic, scope, (s) -> {});, +    }, +    public static Setting<Settings> groupSetting(String key, boolean dynamic, Scope scope, Consumer<Settings> validator) {, +            public String getRaw(Settings settings) {, +                Settings subSettings = get(settings);, +                try {, +                    XContentBuilder builder = XContentFactory.jsonBuilder();, +                    builder.startObject();, +                    subSettings.toXContent(builder, EMPTY_PARAMS);, +                    builder.endObject();, +                    return builder.string();, +                } catch (IOException e) {, +                    throw new RuntimeException(e);, +                }, +            }, +, +            @Override, +                Settings byPrefix = settings.getByPrefix(getKey());, +                validator.accept(byPrefix);, +                return byPrefix;, +            }, +, +            @Override, +            public boolean exists(Settings settings) {, +                for (Map.Entry<String, String> entry : settings.getAsMap().entrySet()) {, +                    if (entry.getKey().startsWith(key)) {, +                        return true;, +                    }, +                }, +                return false;, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +import org.elasticsearch.index.similarity.SimilarityService;, +import java.util.Map;, +        // validate that built-in similarities don't get redefined, +        Setting.groupSetting("index.similarity.", false, Setting.Scope.INDEX, (s) -> {, +            Map<String, Settings> groups = s.getAsGroups();, +            for (String key : SimilarityService.BUILT_IN.keySet()) {, +                if (groups.containsKey(key)) {, +                    throw new IllegalArgumentException("illegal value for [index.similarity."+ key + "] cannot redefine built-in similarity");, +                }, +            }, +        }), // this allows similarity settings to be passed, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import java.util.Map;, +import java.util.function.Predicate;, +    public boolean exists(Settings settings) {, +        return groupSetting(key, dynamic, scope, (s) -> {});, +    }, +    public static Setting<Settings> groupSetting(String key, boolean dynamic, Scope scope, Consumer<Settings> validator) {, +            public String getRaw(Settings settings) {, +                Settings subSettings = get(settings);, +                try {, +                    XContentBuilder builder = XContentFactory.jsonBuilder();, +                    builder.startObject();, +                    subSettings.toXContent(builder, EMPTY_PARAMS);, +                    builder.endObject();, +                    return builder.string();, +                } catch (IOException e) {, +                    throw new RuntimeException(e);, +                }, +            }, +, +            @Override, +                Settings byPrefix = settings.getByPrefix(getKey());, +                validator.accept(byPrefix);, +                return byPrefix;, +            }, +]