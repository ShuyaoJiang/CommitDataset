[+++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                    if (currentMapper.useTermQueryWithQueryString()) {, +                                    query = currentMapper.termQuery(queryText, parseContext);, +                                query = currentMapper.termQuery(queryText, parseContext);, +                    if (currentMapper.useTermQueryWithQueryString()) {, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                    if (currentMapper.useTermQueryWithQueryString()) {, +                                    query = currentMapper.termQuery(queryText, parseContext);, +                                query = currentMapper.termQuery(queryText, parseContext);, +                    if (currentMapper.useTermQueryWithQueryString()) {, +++ b/src/main/java/org/elasticsearch/common/Numbers.java, + * A set of utilities for numbers., +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                    if (currentMapper.useTermQueryWithQueryString()) {, +                                    query = currentMapper.termQuery(queryText, parseContext);, +                                query = currentMapper.termQuery(queryText, parseContext);, +                    if (currentMapper.useTermQueryWithQueryString()) {, +++ b/src/main/java/org/elasticsearch/common/Numbers.java, + * A set of utilities for numbers., +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        this.typeFilter = typeMapper().termFilter(type, null);, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                    if (currentMapper.useTermQueryWithQueryString()) {, +                                    query = currentMapper.termQuery(queryText, parseContext);, +                                query = currentMapper.termQuery(queryText, parseContext);, +                    if (currentMapper.useTermQueryWithQueryString()) {, +++ b/src/main/java/org/elasticsearch/common/Numbers.java, + * A set of utilities for numbers., +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        this.typeFilter = typeMapper().termFilter(type, null);, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Returns the value that will be used as a result for search. Can be only of specific types... ., +     */, +    Object valueForSearch(Object value);, +, +    /**, +     * Should the field query {@link #termQuery(String, org.elasticsearch.index.query.QueryParseContext)}  be used when detecting this, +    boolean useTermQueryWithQueryString();, +    Query termQuery(String value, @Nullable QueryParseContext context);, +    Filter termFilter(String value, @Nullable QueryParseContext context);, +, +    Query rangeQuery(String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context);, +, +    Filter rangeFilter(String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context);, +    @Nullable, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                    if (currentMapper.useTermQueryWithQueryString()) {, +                                    query = currentMapper.termQuery(queryText, parseContext);, +                                query = currentMapper.termQuery(queryText, parseContext);, +                    if (currentMapper.useTermQueryWithQueryString()) {, +++ b/src/main/java/org/elasticsearch/common/Numbers.java, + * A set of utilities for numbers., +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        this.typeFilter = typeMapper().termFilter(type, null);, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Returns the value that will be used as a result for search. Can be only of specific types... ., +     */, +    Object valueForSearch(Object value);, +, +    /**, +     * Should the field query {@link #termQuery(String, org.elasticsearch.index.query.QueryParseContext)}  be used when detecting this, +    boolean useTermQueryWithQueryString();, +    Query termQuery(String value, @Nullable QueryParseContext context);, +    Filter termFilter(String value, @Nullable QueryParseContext context);, +, +    Query rangeQuery(String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context);, +, +    Filter rangeFilter(String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context);, +    @Nullable, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    public boolean useTermQueryWithQueryString() {, +    public Query termQuery(String value, @Nullable QueryParseContext context) {, +    public Filter termFilter(String value, @Nullable QueryParseContext context) {, +++ b/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                    if (currentMapper.useTermQueryWithQueryString()) {, +                                    query = currentMapper.termQuery(queryText, parseContext);, +                                query = currentMapper.termQuery(queryText, parseContext);, +                    if (currentMapper.useTermQueryWithQueryString()) {, +++ b/src/main/java/org/elasticsearch/common/Numbers.java, + * A set of utilities for numbers., +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        this.typeFilter = typeMapper().termFilter(type, null);, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +     * Returns the value that will be used as a result for search. Can be only of specific types... ., +     */, +    Object valueForSearch(Object value);, +, +    /**, +     * Should the field query {@link #termQuery(String, org.elasticsearch.index.query.QueryParseContext)}  be used when detecting this, +    boolean useTermQueryWithQueryString();, +    Query termQuery(String value, @Nullable QueryParseContext context);, +    Filter termFilter(String value, @Nullable QueryParseContext context);, +, +    Query rangeQuery(String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context);, +, +    Filter rangeFilter(String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper, @Nullable QueryParseContext context);, +    @Nullable, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    public boolean useTermQueryWithQueryString() {, +    public Query termQuery(String value, @Nullable QueryParseContext context) {]