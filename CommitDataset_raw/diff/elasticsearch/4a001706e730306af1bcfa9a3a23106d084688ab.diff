[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +        SecurityLifecycleService securityLifecycleService =, +            new SecurityLifecycleService(settings, clusterService, threadPool, client, licenseState, indexAuditTrail);, +, +        // realms construction, +        final NativeUsersStore nativeUsersStore = new NativeUsersStore(settings, client, securityLifecycleService);, +        final AnonymousUser anonymousUser = new AnonymousUser(settings);, +        final ReservedRealm reservedRealm = new ReservedRealm(env, settings, nativeUsersStore, anonymousUser, securityLifecycleService);, +        Map<String, Realm.Factory> realmFactories = new HashMap<>();, +        realmFactories.putAll(InternalRealms.getFactories(threadPool, resourceWatcherService, sslService, nativeUsersStore));, +        for (XPackExtension extension : extensions) {, +            Map<String, Realm.Factory> newRealms = extension.getRealms(resourceWatcherService);, +            for (Map.Entry<String, Realm.Factory> entry : newRealms.entrySet()) {, +                if (realmFactories.put(entry.getKey(), entry.getValue()) != null) {, +                    throw new IllegalArgumentException("Realm type [" + entry.getKey() + "] is already registered");, +                }, +            }, +        }, +        final Realms realms = new Realms(settings, env, realmFactories, licenseState, reservedRealm);, +        components.add(nativeUsersStore);, +        components.add(realms);, +        components.add(reservedRealm);, +, +        final NativeRolesStore nativeRolesStore = new NativeRolesStore(settings, client, licenseState, securityLifecycleService);, +        components.add(securityLifecycleService);, +                "[{}{}]", (Object) value, SecurityLifecycleService.SECURITY_INDEX_NAME, auditIndex);, +        indices.add(SecurityLifecycleService.SECURITY_INDEX_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +        SecurityLifecycleService securityLifecycleService =, +            new SecurityLifecycleService(settings, clusterService, threadPool, client, licenseState, indexAuditTrail);, +, +        // realms construction, +        final NativeUsersStore nativeUsersStore = new NativeUsersStore(settings, client, securityLifecycleService);, +        final AnonymousUser anonymousUser = new AnonymousUser(settings);, +        final ReservedRealm reservedRealm = new ReservedRealm(env, settings, nativeUsersStore, anonymousUser, securityLifecycleService);, +        Map<String, Realm.Factory> realmFactories = new HashMap<>();, +        realmFactories.putAll(InternalRealms.getFactories(threadPool, resourceWatcherService, sslService, nativeUsersStore));, +        for (XPackExtension extension : extensions) {, +            Map<String, Realm.Factory> newRealms = extension.getRealms(resourceWatcherService);, +            for (Map.Entry<String, Realm.Factory> entry : newRealms.entrySet()) {, +                if (realmFactories.put(entry.getKey(), entry.getValue()) != null) {, +                    throw new IllegalArgumentException("Realm type [" + entry.getKey() + "] is already registered");, +                }, +            }, +        }, +        final Realms realms = new Realms(settings, env, realmFactories, licenseState, reservedRealm);, +        components.add(nativeUsersStore);, +        components.add(realms);, +        components.add(reservedRealm);, +, +        final NativeRolesStore nativeRolesStore = new NativeRolesStore(settings, client, licenseState, securityLifecycleService);, +        components.add(securityLifecycleService);, +                "[{}{}]", (Object) value, SecurityLifecycleService.SECURITY_INDEX_NAME, auditIndex);, +        indices.add(SecurityLifecycleService.SECURITY_INDEX_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.message.ParameterizedMessage;, +import org.apache.logging.log4j.util.Supplier;, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.Version;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;, +import org.elasticsearch.action.admin.indices.mapping.put.PutMappingResponse;, +import org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;, +import org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateResponse;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.cluster.metadata.IndexTemplateMetaData;, +import org.elasticsearch.cluster.metadata.MappingMetaData;, +import org.elasticsearch.cluster.routing.IndexRoutingTable;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +import org.elasticsearch.common.compress.CompressedXContent;, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.common.xcontent.XContentType;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +import org.elasticsearch.gateway.GatewayService;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.xpack.template.TemplateUtils;, +, +import java.io.IOException;, +import java.nio.charset.StandardCharsets;, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicReference;, +import java.util.function.Predicate;, +import java.util.regex.Pattern;, +    public static final String SECURITY_INDEX_NAME = ".security";, +    public static final String SECURITY_TEMPLATE_NAME = "security-index-template";, +    private static final String SECURITY_VERSION_STRING = "security-version";, +    private static final Version MIN_READ_VERSION = Version.V_5_0_0;, +    static final String SECURITY_INDEX_TEMPLATE_VERSION_PATTERN = Pattern.quote("${security.template.version}");, +, +    private final InternalClient client;, +    private final NativeRealmMigrator nativeRealmMigrator;, +    final AtomicBoolean templateCreationPending = new AtomicBoolean(false);]