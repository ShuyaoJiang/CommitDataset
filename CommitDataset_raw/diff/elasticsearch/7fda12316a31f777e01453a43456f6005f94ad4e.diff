[+++ b/src/main/java/org/elasticsearch/action/percolate/TransportMultiPercolateAction.java, +        final Map<ShardId, TIntArrayList> shardToSlots = new HashMap<ShardId, TIntArrayList>();, +, +                    TIntArrayList items = shardToSlots.get(shardId);, +                    if (items == null) {, +                        shardToSlots.put(shardId, items = new TIntArrayList());, +                    }, +                    items.add(i);, +                        logger.error("{} Percolate original reduce error", e, shardId);, +                        TIntArrayList slots = shardToSlots.get(shardId);, +                        for (int i = 0; i < slots.size(); i++) {, +                            int slot = slots.get(i);, +                            AtomicReferenceArray shardResults = responsesByItemAndShard.get(slot);, +                            assert expectedOperationsPerItem[slot].get() >= 1;, +                            if (expectedOperationsPerItem[slot].decrementAndGet() == 0) {, +                                reduce(slot, percolateRequests, expectedOperations, reducedResponses, listener, responsesByItemAndShard);, +++ b/src/main/java/org/elasticsearch/action/percolate/TransportMultiPercolateAction.java, +        final Map<ShardId, TIntArrayList> shardToSlots = new HashMap<ShardId, TIntArrayList>();, +, +                    TIntArrayList items = shardToSlots.get(shardId);, +                    if (items == null) {, +                        shardToSlots.put(shardId, items = new TIntArrayList());, +                    }, +                    items.add(i);, +                        logger.error("{} Percolate original reduce error", e, shardId);, +                        TIntArrayList slots = shardToSlots.get(shardId);, +                        for (int i = 0; i < slots.size(); i++) {, +                            int slot = slots.get(i);, +                            AtomicReferenceArray shardResults = responsesByItemAndShard.get(slot);, +                            assert expectedOperationsPerItem[slot].get() >= 1;, +                            if (expectedOperationsPerItem[slot].decrementAndGet() == 0) {, +                                reduce(slot, percolateRequests, expectedOperations, reducedResponses, listener, responsesByItemAndShard);, +++ b/src/test/java/org/elasticsearch/test/integration/percolator/RecoveryPercolatorTests.java, +import org.elasticsearch.action.admin.cluster.node.info.NodeInfo;, +import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;, +        percolatorRecovery(false);, +        percolatorRecovery(true);, +    private void percolatorRecovery(final boolean multiPercolate) throws Exception {, +                        NodesInfoResponse nodesInfoResponse = client().admin().cluster().prepareNodesInfo(), +                        String preference = "_prefer_node:" + (randomBoolean() ? node2Id : node3Id);, +                                                .setPreference(preference), +                                                .setPreference(preference), +                                        .setPreference(preference), +                                        .setPreference(preference)]