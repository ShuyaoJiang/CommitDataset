[+++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolver.java, +        ALIAS("ALIAS"),, +        // value for user types unrecognized, +        UNKNOWN("UKNOWN");, +, +        public static final EnumSet<IndexType> VALID = EnumSet.of(INDEX, ALIAS);, +                for (IndexType type : IndexType.VALID) {, +            return IndexType.UNKNOWN;, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolver.java, +        ALIAS("ALIAS"),, +        // value for user types unrecognized, +        UNKNOWN("UKNOWN");, +, +        public static final EnumSet<IndexType> VALID = EnumSet.of(INDEX, ALIAS);, +                for (IndexType type : IndexType.VALID) {, +            return IndexType.UNKNOWN;, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +import org.elasticsearch.xpack.sql.util.StringUtils;, +                // check special ODBC wildcard case, +                if (value.equals(StringUtils.SQL_WILDCARD) && ctx.string().size() == 1) {, +                    // since % is the same as not specifying a value, choose, +                    // https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/value-list-arguments?view=ssdt-18vs2017, +                    // that is skip the value, +                } else {, +        }, +, +        // if the ODBC enumeration is specified, skip validation, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolver.java, +        ALIAS("ALIAS"),, +        // value for user types unrecognized, +        UNKNOWN("UKNOWN");, +, +        public static final EnumSet<IndexType> VALID = EnumSet.of(INDEX, ALIAS);, +                for (IndexType type : IndexType.VALID) {, +            return IndexType.UNKNOWN;, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +import org.elasticsearch.xpack.sql.util.StringUtils;, +                // check special ODBC wildcard case, +                if (value.equals(StringUtils.SQL_WILDCARD) && ctx.string().size() == 1) {, +                    // since % is the same as not specifying a value, choose, +                    // https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/value-list-arguments?view=ssdt-18vs2017, +                    // that is skip the value, +                } else {, +        }, +, +        // if the ODBC enumeration is specified, skip validation, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTableTypes.java, +        listener.onResponse(Rows.of(output(), IndexType.VALID.stream(), +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolver.java, +        ALIAS("ALIAS"),, +        // value for user types unrecognized, +        UNKNOWN("UKNOWN");, +, +        public static final EnumSet<IndexType> VALID = EnumSet.of(INDEX, ALIAS);, +                for (IndexType type : IndexType.VALID) {, +            return IndexType.UNKNOWN;, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/CommandBuilder.java, +import org.elasticsearch.xpack.sql.util.StringUtils;, +                // check special ODBC wildcard case, +                if (value.equals(StringUtils.SQL_WILDCARD) && ctx.string().size() == 1) {, +                    // since % is the same as not specifying a value, choose, +                    // https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/value-list-arguments?view=ssdt-18vs2017, +                    // that is skip the value, +                } else {, +        }, +, +        // if the ODBC enumeration is specified, skip validation, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTableTypes.java, +        listener.onResponse(Rows.of(output(), IndexType.VALID.stream(), +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysTables.java, +import org.elasticsearch.xpack.sql.util.CollectionUtils;, +import java.util.ArrayList;, +import static org.elasticsearch.xpack.sql.util.StringUtils.SQL_WILDCARD;, +        // first check if where dealing with ODBC enumeration, +        // namely one param specified with '%', everything else empty string, +        // https://docs.microsoft.com/en-us/sql/odbc/reference/syntax/sqltables-function?view=ssdt-18vs2017#comments, +, +        if (clusterPattern != null && clusterPattern.pattern().equals(SQL_WILDCARD)) {, +            if (pattern != null && pattern.pattern().isEmpty() && CollectionUtils.isEmpty(types)) {, +                Object[] enumeration = new Object[10];, +                // send only the cluster, everything else null, +                enumeration[0] = cluster;, +                listener.onResponse(Rows.singleton(output(), enumeration));, +                return;, +            }, +        }, +        , +        // if no types were specified (the parser takes care of the % case), +        if (CollectionUtils.isEmpty(types)) {, +            if (clusterPattern != null && clusterPattern.pattern().isEmpty()) {, +                List<List<?>> values = new ArrayList<>();, +                // send only the types, everything else null, +                for (IndexType type : IndexType.VALID) {, +                    Object[] enumeration = new Object[10];, +                    enumeration[3] = type.toSql();, +                    values.add(asList(enumeration));, +                }, +                listener.onResponse(Rows.of(output(), values));, +                return;, +            }]