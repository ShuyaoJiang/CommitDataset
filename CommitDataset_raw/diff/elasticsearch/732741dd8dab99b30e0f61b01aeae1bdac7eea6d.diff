[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/QueryDSLDocumentationTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.client.documentation;, +, +import org.apache.lucene.search.join.ScoreMode;, +import org.elasticsearch.common.geo.GeoPoint;, +import org.elasticsearch.common.geo.ShapeRelation;, +import org.elasticsearch.common.geo.builders.CoordinatesBuilder;, +import org.elasticsearch.common.geo.builders.ShapeBuilders;, +import org.elasticsearch.common.unit.DistanceUnit;, +import org.elasticsearch.index.query.GeoShapeQueryBuilder;, +import org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder;, +import org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder.FilterFunctionBuilder;, +import org.elasticsearch.script.Script;, +import org.elasticsearch.script.ScriptType;, +import org.elasticsearch.test.ESTestCase;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import static java.util.Collections.singletonMap;, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +import static org.elasticsearch.index.query.QueryBuilders.boostingQuery;, +import static org.elasticsearch.index.query.QueryBuilders.commonTermsQuery;, +import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;, +import static org.elasticsearch.index.query.QueryBuilders.disMaxQuery;, +import static org.elasticsearch.index.query.QueryBuilders.existsQuery;, +import static org.elasticsearch.index.query.QueryBuilders.functionScoreQuery;, +import static org.elasticsearch.index.query.QueryBuilders.fuzzyQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoBoundingBoxQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoDistanceQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoPolygonQuery;, +import static org.elasticsearch.index.query.QueryBuilders.geoShapeQuery;, +import static org.elasticsearch.index.query.QueryBuilders.hasChildQuery;, +import static org.elasticsearch.index.query.QueryBuilders.hasParentQuery;, +import static org.elasticsearch.index.query.QueryBuilders.idsQuery;, +import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;, +import static org.elasticsearch.index.query.QueryBuilders.matchQuery;, +import static org.elasticsearch.index.query.QueryBuilders.moreLikeThisQuery;, +import static org.elasticsearch.index.query.QueryBuilders.multiMatchQuery;, +import static org.elasticsearch.index.query.QueryBuilders.nestedQuery;, +import static org.elasticsearch.index.query.QueryBuilders.prefixQuery;, +import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;, +import static org.elasticsearch.index.query.QueryBuilders.rangeQuery;, +import static org.elasticsearch.index.query.QueryBuilders.regexpQuery;, +import static org.elasticsearch.index.query.QueryBuilders.scriptQuery;, +import static org.elasticsearch.index.query.QueryBuilders.simpleQueryStringQuery;, +import static org.elasticsearch.index.query.QueryBuilders.spanContainingQuery;, +import static org.elasticsearch.index.query.QueryBuilders.spanFirstQuery;, +import static org.elasticsearch.index.query.QueryBuilders.spanMultiTermQueryBuilder;, +import static org.elasticsearch.index.query.QueryBuilders.spanNearQuery;, +import static org.elasticsearch.index.query.QueryBuilders.spanNotQuery;, +import static org.elasticsearch.index.query.QueryBuilders.spanOrQuery;, +import static org.elasticsearch.index.query.QueryBuilders.spanTermQuery;, +import static org.elasticsearch.index.query.QueryBuilders.spanWithinQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termQuery;, +import static org.elasticsearch.index.query.QueryBuilders.termsQuery;, +import static org.elasticsearch.index.query.QueryBuilders.typeQuery;, +import static org.elasticsearch.index.query.QueryBuilders.wildcardQuery;, +import static org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders.exponentialDecayFunction;, +import static org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders.randomFunction;, +, +/**, + * Examples of using the transport client that are imported into the transport client documentation., + * There are no assertions here because we're mostly concerned with making sure that the examples, + * compile and don't throw weird runtime exceptions. Assertions and example data would be nice, but, + * that is secondary., + */, +public class QueryDSLDocumentationTests extends ESTestCase {, +    public void testBool() {, +        // tag::bool, +        boolQuery(), +                .must(termQuery("content", "test1"))                 // <1>, +                .must(termQuery("content", "test4"))                 // <1>, +                .mustNot(termQuery("content", "test2"))              // <2>, +                .should(termQuery("content", "test3"))               // <3>, +                .filter(termQuery("content", "test5"));              // <4>, +        // end::bool, +    }]