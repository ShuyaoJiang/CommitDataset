[+++ b/docs/CHANGELOG.asciidoc, +== Elasticsearch version 6.3.1, +, +=== New Features, +, +=== Enhancements, +, +=== Bug Fixes, +, +Reduce the number of object allocations made by {security} when resolving the indices and aliases for a request ({pull}30180[#30180]), +, +=== Regressions, +, +=== Known Issues, +++ b/docs/CHANGELOG.asciidoc, +== Elasticsearch version 6.3.1, +, +=== New Features, +, +=== Enhancements, +, +=== Bug Fixes, +, +Reduce the number of object allocations made by {security} when resolving the indices and aliases for a request ({pull}30180[#30180]), +, +=== Regressions, +, +=== Known Issues, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/IndicesAndAliasesResolver.java, +import static org.elasticsearch.xpack.core.security.authz.IndicesAndAliasesResolverField.NO_INDEX_PLACEHOLDER;, +, +            ResolvedIndices.Builder resolvedIndicesBuilder = new ResolvedIndices.Builder();, +                final ResolvedIndices resolved = resolveIndicesAndAliases(indicesRequest, metaData, authorizedIndices);, +                resolvedIndicesBuilder.addLocal(resolved.getLocal());, +                resolvedIndicesBuilder.addRemote(resolved.getRemote());, +            return resolvedIndicesBuilder.build();, +, +    ResolvedIndices resolveIndicesAndAliases(IndicesRequest indicesRequest, MetaData metaData, AuthorizedIndices authorizedIndices) {, +        final ResolvedIndices.Builder resolvedIndicesBuilder = new ResolvedIndices.Builder();, +            resolvedIndicesBuilder.addLocal(((PutMappingRequest) indicesRequest).getConcreteIndex().getName());, +                            resolvedIndicesBuilder.addLocal(authorizedIndex);, +                    split = new ResolvedIndices(Arrays.asList(indicesRequest.indices()), Collections.emptyList());, +                resolvedIndicesBuilder.addLocal(replaced);, +                resolvedIndicesBuilder.addRemote(split.getRemote());, +, +            if (resolvedIndicesBuilder.isEmpty()) {, +                    resolvedIndicesBuilder.addLocal(NO_INDEX_PLACEHOLDER);, +                replaceable.indices(resolvedIndicesBuilder.build().toArray());, +                resolvedIndicesBuilder.addLocal(nameExpressionResolver.resolveDateMathExpression(name));, +                resolvedIndicesBuilder.addLocal(aliasesRequest.aliases());, +        return resolvedIndicesBuilder.build();, +            this.local = Collections.unmodifiableList(local);, +            this.remote = Collections.unmodifiableList(remote);, +            return local;, +            return remote;, +            return remote.isEmpty() && local.size() == 1 && local.contains(NO_INDEX_PLACEHOLDER);, +         * Builder class for ResolvedIndices that allows for the building of a list of indices, +         * without the need to construct new objects and merging them together, +        private static class Builder {, +            private final List<String> local = new ArrayList<>();, +            private final List<String> remote = new ArrayList<>();, +, +            /** add a local index name */, +            private void addLocal(String index) {, +                local.add(index);, +            /** adds the array of local index names */, +            private void addLocal(String[] indices) {, +                local.addAll(Arrays.asList(indices));, +            }, +, +            /** adds the list of local index names */, +            private void addLocal(List<String> indices) {, +                local.addAll(indices);, +            }, +, +            /** adds the list of remote index names */, +            private void addRemote(List<String> indices) {, +                remote.addAll(indices);, +            }, +, +            /** @return <code>true</code> if both the local and remote index lists are empty. */, +            private boolean isEmpty() {, +                return local.isEmpty() && remote.isEmpty();, +            }, +, +            /** @return a immutable ResolvedIndices instance with the local and remote index lists */, +            private ResolvedIndices build() {, +                return new ResolvedIndices(local, remote);, +            }, +        }]