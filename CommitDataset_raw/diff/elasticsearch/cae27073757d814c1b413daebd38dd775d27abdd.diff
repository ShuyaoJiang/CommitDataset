[+++ b/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +            final String indexUUID = allocation.metaData().index(shard.index()).getUUID();, +            ObjectLongOpenHashMap<DiscoveryNode> nodesState = buildShardStates(nodes, shard, indexUUID);, +    private ObjectLongOpenHashMap<DiscoveryNode> buildShardStates(final DiscoveryNodes nodes, MutableShardRouting shard, String indexUUID) {, +        TransportNodesListGatewayStartedShards.NodesGatewayStartedShards response = listGatewayStartedShards.list(shard.shardId(), indexUUID, nodesIdsArray, listTimeout).actionGet();, +++ b/src/main/java/org/elasticsearch/gateway/GatewayAllocator.java, +            final String indexUUID = allocation.metaData().index(shard.index()).getUUID();, +            ObjectLongOpenHashMap<DiscoveryNode> nodesState = buildShardStates(nodes, shard, indexUUID);, +    private ObjectLongOpenHashMap<DiscoveryNode> buildShardStates(final DiscoveryNodes nodes, MutableShardRouting shard, String indexUUID) {, +        TransportNodesListGatewayStartedShards.NodesGatewayStartedShards response = listGatewayStartedShards.list(shard.shardId(), indexUUID, nodesIdsArray, listTimeout).actionGet();, +++ b/src/main/java/org/elasticsearch/gateway/TransportNodesListGatewayStartedShards.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import java.util.Arrays;, +import java.util.Collection;, +    public ActionFuture<NodesGatewayStartedShards> list(ShardId shardId, String indexUUID, String[] nodesIds, @Nullable TimeValue timeout) {, +        return execute(new Request(shardId, indexUUID, nodesIds).timeout(timeout));, +            final ShardId shardId = request.getShardId();, +            final String indexUUID = request.getIndexUUID();, +            logger.trace("{} loading local shard state info", shardId);, +                // old shard metadata doesn't have the actual index UUID so we need to check if the actual uuid in the metadata, +                // is equal to IndexMetaData.INDEX_UUID_NA_VALUE otherwise this shard doesn't belong to the requested index., +                if (indexUUID.equals(shardStateMetaData.indexUUID) == false, +                        && IndexMetaData.INDEX_UUID_NA_VALUE.equals(shardStateMetaData.indexUUID) == false) {, +                    logger.warn("{} shard state info found but indexUUID didn't match expected [{}] actual [{}]", shardId, indexUUID, shardStateMetaData.indexUUID);, +                } else {, +                    logger.debug("{} shard state info found: [{}]", shardId, shardStateMetaData);, +            }, +            logger.trace("{} no local shard info found", shardId);, +        private String indexUUID;, +        public Request(ShardId shardId, String indexUUID, String[] nodesIds) {, +            this.indexUUID = indexUUID;, +            indexUUID = in.readString();, +            out.writeString(indexUUID);, +        }, +, +        public String getIndexUUID() {, +            return indexUUID;, +        private ShardId shardId;, +        private String indexUUID;, +            this.indexUUID = request.getIndexUUID();, +            indexUUID = in.readString();, +            out.writeString(indexUUID);, +        }, +, +        public ShardId getShardId() {, +            return shardId;, +        }, +, +        public String getIndexUUID() {, +            return indexUUID;]