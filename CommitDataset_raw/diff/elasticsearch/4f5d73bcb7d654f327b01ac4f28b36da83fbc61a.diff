[+++ b/CONTRIBUTING.md, +You will find the newly built packages under: `./distribution/build/distributions/`., +++ b/CONTRIBUTING.md, +You will find the newly built packages under: `./distribution/build/distributions/`., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +++ b/CONTRIBUTING.md, +You will find the newly built packages under: `./distribution/build/distributions/`., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +++ b/CONTRIBUTING.md, +You will find the newly built packages under: `./distribution/build/distributions/`., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]apache[/\\]lucene[/\\]queryparser[/\\]classic[/\\]MapperQueryParser.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]query[/\\]QueryStringQueryBuilderTests.java" checks="LineLength" />, +++ b/CONTRIBUTING.md, +You will find the newly built packages under: `./distribution/build/distributions/`., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]apache[/\\]lucene[/\\]queryparser[/\\]classic[/\\]MapperQueryParser.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]query[/\\]QueryStringQueryBuilderTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +     * We override this one so we can get the fuzzy part to be treated as string, so people can do: "age:10~5" or "timestamp:2012-10-10~5d", +    protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {, +    private Query getRangeQuerySingle(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {, +                    DateFieldMapper.DateFieldType dateFieldType = (DateFieldMapper.DateFieldType) this.currentFieldType;, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null);, +                return currentFieldType.fuzzyQuery(termStr, Fuzziness.build(minSimilarity), fuzzyPrefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +        FuzzyQuery query = new FuzzyQuery(term, numEdits, prefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +        List<String> tlist;, +                tlist.add(termAtt.toString());, +        if (tlist.size() == 1) {, +            return super.getPrefixQuery(field, tlist.get(0));, +            // build a boolean query with prefix on each one..., +            for (String token : tlist) {, +                clauses.add(new BooleanClause(super.getPrefixQuery(field, token), BooleanClause.Occur.SHOULD));, +            return getBooleanQueryCoordDisabled(clauses);, +                    query = currentFieldType.regexpQuery(termStr, RegExp.ALL, maxDeterminizedStates, multiTermRewriteMethod, context);, +++ b/CONTRIBUTING.md, +You will find the newly built packages under: `./distribution/build/distributions/`., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +                node.env['JAVA_OPTS'] = '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]apache[/\\]lucene[/\\]queryparser[/\\]classic[/\\]MapperQueryParser.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]index[/\\]query[/\\]QueryStringQueryBuilderTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +     * We override this one so we can get the fuzzy part to be treated as string, so people can do: "age:10~5" or "timestamp:2012-10-10~5d", +    protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {, +    private Query getRangeQuerySingle(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {, +                    DateFieldMapper.DateFieldType dateFieldType = (DateFieldMapper.DateFieldType) this.currentFieldType;, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null);, +                return currentFieldType.fuzzyQuery(termStr, Fuzziness.build(minSimilarity), fuzzyPrefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +        FuzzyQuery query = new FuzzyQuery(term, numEdits, prefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +        List<String> tlist;, +                tlist.add(termAtt.toString());, +        if (tlist.size() == 1) {, +            return super.getPrefixQuery(field, tlist.get(0));, +            // build a boolean query with prefix on each one..., +            for (String token : tlist) {, +                clauses.add(new BooleanClause(super.getPrefixQuery(field, token), BooleanClause.Occur.SHOULD));, +            return getBooleanQueryCoordDisabled(clauses);, +                    query = currentFieldType.regexpQuery(termStr, RegExp.ALL, maxDeterminizedStates, multiTermRewriteMethod, context);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +import org.elasticsearch.monitor.jvm.JvmInfo;, +        checks.add(new HeapSizeCheck());, +    static class HeapSizeCheck implements BootstrapCheck.Check {, +, +        @Override, +        public boolean check() {, +            final long initialHeapSize = getInitialHeapSize();, +            final long maxHeapSize = getMaxHeapSize();, +            return initialHeapSize != 0 && maxHeapSize != 0 && initialHeapSize != maxHeapSize;, +        }, +, +        @Override, +        public String errorMessage() {, +            return String.format(, +                    Locale.ROOT,, +                    "initial heap size [%d] not equal to maximum heap size [%d]; " +, +                            "this can cause resize pauses and prevents mlockall from locking the entire heap",, +                    getInitialHeapSize(),, +                    getMaxHeapSize(), +            );, +        }, +, +        // visible for testing, +        long getInitialHeapSize() {, +            return JvmInfo.jvmInfo().getConfiguredInitialHeapSize();, +        }, +, +        // visible for testing, +        long getMaxHeapSize() {, +            return JvmInfo.jvmInfo().getConfiguredMaxHeapSize();]