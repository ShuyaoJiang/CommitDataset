[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            IdFieldMapper idFieldMapper = new IdFieldMapper();, +            this.rootMappers.put(IdFieldMapper.class, idFieldMapper);, +            this.rootMappers.put(UidFieldMapper.class, new UidFieldMapper());, +            return new DocumentMapper(index, docMapperParser, rootObjectMapper, meta,, +        return rootMapper(UidFieldMapper.class);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            IdFieldMapper idFieldMapper = new IdFieldMapper();, +            this.rootMappers.put(IdFieldMapper.class, idFieldMapper);, +            this.rootMappers.put(UidFieldMapper.class, new UidFieldMapper());, +            return new DocumentMapper(index, docMapperParser, rootObjectMapper, meta,, +        return rootMapper(UidFieldMapper.class);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(UidFieldMapper.NAME, new UidFieldMapper.TypeParser()), +                .put(IdFieldMapper.NAME, new IdFieldMapper.TypeParser()), +            if ("index_analyzer".equals(fieldName)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            IdFieldMapper idFieldMapper = new IdFieldMapper();, +            this.rootMappers.put(IdFieldMapper.class, idFieldMapper);, +            this.rootMappers.put(UidFieldMapper.class, new UidFieldMapper());, +            return new DocumentMapper(index, docMapperParser, rootObjectMapper, meta,, +        return rootMapper(UidFieldMapper.class);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(UidFieldMapper.NAME, new UidFieldMapper.TypeParser()), +                .put(IdFieldMapper.NAME, new IdFieldMapper.TypeParser()), +            if ("index_analyzer".equals(fieldName)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            IdFieldMapper idFieldMapper = new IdFieldMapper();, +            this.rootMappers.put(IdFieldMapper.class, idFieldMapper);, +            this.rootMappers.put(UidFieldMapper.class, new UidFieldMapper());, +            return new DocumentMapper(index, docMapperParser, rootObjectMapper, meta,, +        return rootMapper(UidFieldMapper.class);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(UidFieldMapper.NAME, new UidFieldMapper.TypeParser()), +                .put(IdFieldMapper.NAME, new IdFieldMapper.TypeParser()), +            if ("index_analyzer".equals(fieldName)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.mapper.RootMapper;, +import java.util.Map;, +, +import static org.elasticsearch.index.mapper.MapperBuilders.*;, +import static org.elasticsearch.index.mapper.core.TypeParsers.*;, +public class IdFieldMapper extends AbstractFieldMapper<String> implements InternalMapper, RootMapper {, +    public static class TypeParser implements Mapper.TypeParser {, +        @Override public Mapper.Builder parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {, +            IdFieldMapper.Builder builder = id();, +            parseField(builder, builder.name, node, parserContext);, +            return builder;, +        }, +    }, +, +    @Override public void preParse(ParseContext context) throws IOException {, +        if (context.sourceToParse().id() != null) {, +            context.id(context.sourceToParse().id());, +            super.parse(context);, +        }, +    }, +, +    @Override public void postParse(ParseContext context) throws IOException {, +        if (context.id() == null && !context.sourceToParse().flyweight()) {, +            throw new MapperParsingException("No id found while parsing the content source");, +        }, +        // it either get built in the preParse phase, or get parsed..., +    }, +, +    @Override public void parse(ParseContext context) throws IOException {, +        super.parse(context);, +    }, +, +    @Override public void validate(ParseContext context) throws MapperParsingException {, +    }, +, +    @Override public boolean includeInObject() {, +        return true;, +    }, +, +        XContentParser parser = context.parser();, +        if (parser.currentName() != null && parser.currentName().equals(Defaults.NAME) && parser.currentToken().isValue()) {, +            // we are in the parse Phase, +            String id = parser.text();, +            // we are in the pre/post parse phase, +            if (index == Field.Index.NO && store == Field.Store.NO) {, +                return null;, +            }, +            return new Field(names.indexName(), false, context.id(), store, index, termVector);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +            IdFieldMapper idFieldMapper = new IdFieldMapper();, +            this.rootMappers.put(IdFieldMapper.class, idFieldMapper);, +            this.rootMappers.put(UidFieldMapper.class, new UidFieldMapper());, +            return new DocumentMapper(index, docMapperParser, rootObjectMapper, meta,, +        return rootMapper(UidFieldMapper.class);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java, +                .put(UidFieldMapper.NAME, new UidFieldMapper.TypeParser()), +                .put(IdFieldMapper.NAME, new IdFieldMapper.TypeParser()), +            if ("index_analyzer".equals(fieldName)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/ParseContext.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java]