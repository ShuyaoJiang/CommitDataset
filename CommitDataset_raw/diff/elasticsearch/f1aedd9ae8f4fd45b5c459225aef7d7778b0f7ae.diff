[+++ b/distribution/archives/build.gradle, +import org.elasticsearch.gradle.VersionProperties, +import java.nio.file.Files, +import java.nio.file.Path, +, +Closure tarExists = { it -> new File('/bin/tar').exists() || new File('/usr/bin/tar').exists() || new File('/usr/local/bin/tar').exists() }, +Closure unzipExists = { it -> new File('/bin/unzip').exists() || new File('/usr/bin/unzip').exists() || new File('/usr/local/bin/unzip').exists() }, +, +  // sanity checks if archives can be extracted, +  final File archiveExtractionDir, +  if (project.name.contains('tar')) {, +    archiveExtractionDir = new File(buildDir, 'tar-extracted'), +  } else {, +    assert project.name.contains('zip'), +    archiveExtractionDir = new File(buildDir, 'zip-extracted'), +  }, +  task checkExtraction(type: LoggedExec) {, +      project.delete(archiveExtractionDir), +      archiveExtractionDir.mkdirs(), +  check.dependsOn checkExtraction, +  if (project.name.contains('tar')) {, +    checkExtraction {, +      onlyIf tarExists, +      commandLine 'tar', '-xvzf', "${-> buildDist.outputs.files.singleFile}", '-C', archiveExtractionDir, +  } else {, +    assert project.name.contains('zip'), +    checkExtraction {, +      onlyIf unzipExists, +      commandLine 'unzip', "${-> buildDist.outputs.files.singleFile}", '-d', archiveExtractionDir, +, +  final Closure toolExists, +  if (project.name.contains('tar')) {, +    toolExists = tarExists, +  } else {, +    assert project.name.contains('zip'), +    toolExists = unzipExists, +  }, +, +, +  task checkLicense {, +    dependsOn buildDist, checkExtraction, +    onlyIf toolExists, +    doLast {, +      final String licenseFilename, +      if (project.name.contains('oss-')) {, +        licenseFilename = "APACHE-LICENSE-2.0.txt", +      } else {, +        licenseFilename = "ELASTIC-LICENSE.txt", +      }, +      final List<String> licenseLines = Files.readAllLines(rootDir.toPath().resolve("licenses/" + licenseFilename)), +      final Path licensePath = archiveExtractionDir.toPath().resolve("elasticsearch-${VersionProperties.elasticsearch}/LICENSE.txt"), +      final List<String> actualLines = Files.readAllLines(licensePath), +      assertLinesInFile(licensePath, actualLines, licenseLines), +    }, +  }, +  check.dependsOn checkLicense, +, +  task checkNotice {, +    dependsOn buildDist, checkExtraction, +    onlyIf toolExists, +    doLast {, +      final List<String> noticeLines = Arrays.asList("Elasticsearch", "Copyright 2009-2018 Elasticsearch"), +      final Path noticePath = archiveExtractionDir.toPath().resolve("elasticsearch-${VersionProperties.elasticsearch}/NOTICE.txt"), +      final List<String> actualLines = Files.readAllLines(noticePath), +      assertLinesInFile(noticePath, actualLines, noticeLines), +    }, +  }, +  check.dependsOn checkNotice, +, +++ b/distribution/archives/build.gradle, +import org.elasticsearch.gradle.VersionProperties, +import java.nio.file.Files, +import java.nio.file.Path, +, +Closure tarExists = { it -> new File('/bin/tar').exists() || new File('/usr/bin/tar').exists() || new File('/usr/local/bin/tar').exists() }, +Closure unzipExists = { it -> new File('/bin/unzip').exists() || new File('/usr/bin/unzip').exists() || new File('/usr/local/bin/unzip').exists() }, +, +  // sanity checks if archives can be extracted, +  final File archiveExtractionDir, +  if (project.name.contains('tar')) {, +    archiveExtractionDir = new File(buildDir, 'tar-extracted'), +  } else {, +    assert project.name.contains('zip'), +    archiveExtractionDir = new File(buildDir, 'zip-extracted'), +  }, +  task checkExtraction(type: LoggedExec) {, +      project.delete(archiveExtractionDir), +      archiveExtractionDir.mkdirs(), +  check.dependsOn checkExtraction, +  if (project.name.contains('tar')) {, +    checkExtraction {, +      onlyIf tarExists, +      commandLine 'tar', '-xvzf', "${-> buildDist.outputs.files.singleFile}", '-C', archiveExtractionDir, +  } else {, +    assert project.name.contains('zip'), +    checkExtraction {, +      onlyIf unzipExists, +      commandLine 'unzip', "${-> buildDist.outputs.files.singleFile}", '-d', archiveExtractionDir, +, +  final Closure toolExists]