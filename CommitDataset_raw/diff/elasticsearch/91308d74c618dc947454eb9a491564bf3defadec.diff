[+++ b/core/src/main/java/org/elasticsearch/tribe/TribeService.java, +import org.elasticsearch.common.network.NetworkModule;, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.transport.TransportService;, +import org.elasticsearch.transport.TransportSettings;, +import java.util.Arrays;, +    // these settings should be passed through to each tribe client, if they are not set explicitly, +    private static final List<Setting<?>> PASS_THROUGH_SETTINGS = Arrays.asList(, +        NetworkService.GLOBAL_NETWORK_HOST_SETTING,, +        NetworkService.GLOBAL_NETWORK_BINDHOST_SETTING,, +        NetworkService.GLOBAL_NETWORK_PUBLISHHOST_SETTING,, +        TransportSettings.HOST,, +        TransportSettings.BIND_HOST,, +        TransportSettings.PUBLISH_HOST, +    );, +            Settings clientSettings = buildClientSettings(entry.getKey(), settings, entry.getValue());, +            nodes.add(new TribeClientNode(clientSettings));, +    // pkg private for testing, +    /**, +     * Builds node settings for a tribe client node from the tribe node's global settings,, +     * combined with tribe specific settings., +     */, +    static Settings buildClientSettings(String tribeName, Settings globalSettings, Settings tribeSettings) {, +        for (String tribeKey : tribeSettings.getAsMap().keySet()) {, +            if (tribeKey.startsWith("path.")) {, +                throw new IllegalArgumentException("Setting [" + tribeKey + "] not allowed in tribe client [" + tribeName + "]");, +            }, +        }, +        Settings.Builder sb = Settings.builder().put(tribeSettings);, +        sb.put("node.name", globalSettings.get("node.name") + "/" + tribeName);, +        sb.put(Environment.PATH_HOME_SETTING.getKey(), Environment.PATH_HOME_SETTING.get(globalSettings)); // pass through ES home dir, +        if (Environment.PATH_CONF_SETTING.exists(globalSettings)) {, +            sb.put(Environment.PATH_CONF_SETTING.getKey(), Environment.PATH_CONF_SETTING.get(globalSettings));, +        }, +        if (Environment.PATH_PLUGINS_SETTING.exists(globalSettings)) {, +            sb.put(Environment.PATH_PLUGINS_SETTING.getKey(), Environment.PATH_PLUGINS_SETTING.get(globalSettings));, +        }, +        if (Environment.PATH_LOGS_SETTING.exists(globalSettings)) {, +            sb.put(Environment.PATH_LOGS_SETTING.getKey(), Environment.PATH_LOGS_SETTING.get(globalSettings));, +        }, +        if (Environment.PATH_SCRIPTS_SETTING.exists(globalSettings)) {, +            sb.put(Environment.PATH_SCRIPTS_SETTING.getKey(), Environment.PATH_SCRIPTS_SETTING.get(globalSettings));, +        }, +        for (Setting<?> passthrough : PASS_THROUGH_SETTINGS) {, +            if (passthrough.exists(tribeSettings) == false && passthrough.exists(globalSettings)) {, +                sb.put(passthrough.getKey(), globalSettings.get(passthrough.getKey()));, +            }, +        }, +        sb.put(TRIBE_NAME_SETTING.getKey(), tribeName);, +        if (sb.get(NetworkModule.HTTP_ENABLED.getKey()) == null) {, +            sb.put(NetworkModule.HTTP_ENABLED.getKey(), false);, +        }, +        sb.put(Node.NODE_CLIENT_SETTING.getKey(), true);, +        return sb.build();, +    }, +, +, +++ b/core/src/main/java/org/elasticsearch/tribe/TribeService.java, +import org.elasticsearch.common.network.NetworkModule;, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.transport.TransportService;, +import org.elasticsearch.transport.TransportSettings;, +import java.util.Arrays;, +    // these settings should be passed through to each tribe client, if they are not set explicitly, +    private static final List<Setting<?>> PASS_THROUGH_SETTINGS = Arrays.asList(, +        NetworkService.GLOBAL_NETWORK_HOST_SETTING,, +        NetworkService.GLOBAL_NETWORK_BINDHOST_SETTING,, +        NetworkService.GLOBAL_NETWORK_PUBLISHHOST_SETTING,, +        TransportSettings.HOST,, +        TransportSettings.BIND_HOST,, +        TransportSettings.PUBLISH_HOST, +    );, +            Settings clientSettings = buildClientSettings(entry.getKey(), settings, entry.getValue());, +            nodes.add(new TribeClientNode(clientSettings));, +    // pkg private for testing, +    /**, +     * Builds node settings for a tribe client node from the tribe node's global settings,, +     * combined with tribe specific settings., +     */, +    static Settings buildClientSettings(String tribeName, Settings globalSettings, Settings tribeSettings) {, +        for (String tribeKey : tribeSettings.getAsMap().keySet()) {, +            if (tribeKey.startsWith("path.")) {, +                throw new IllegalArgumentException("Setting [" + tribeKey + "] not allowed in tribe client [" + tribeName + "]");, +            }, +        }, +        Settings.Builder sb = Settings.builder().put(tribeSettings);, +        sb.put("node.name", globalSettings.get("node.name") + "/" + tribeName);, +        sb.put(Environment.PATH_HOME_SETTING.getKey(), Environment.PATH_HOME_SETTING.get(globalSettings)); // pass through ES home dir, +        if (Environment.PATH_CONF_SETTING.exists(globalSettings)) {, +            sb.put(Environment.PATH_CONF_SETTING.getKey(), Environment.PATH_CONF_SETTING.get(globalSettings));, +        }, +        if (Environment.PATH_PLUGINS_SETTING.exists(globalSettings)) {, +            sb.put(Environment.PATH_PLUGINS_SETTING.getKey(), Environment.PATH_PLUGINS_SETTING.get(globalSettings));, +        }, +        if (Environment.PATH_LOGS_SETTING.exists(globalSettings)) {, +            sb.put(Environment.PATH_LOGS_SETTING.getKey(), Environment.PATH_LOGS_SETTING.get(globalSettings));, +        }, +        if (Environment.PATH_SCRIPTS_SETTING.exists(globalSettings)) {, +            sb.put(Environment.PATH_SCRIPTS_SETTING.getKey(), Environment.PATH_SCRIPTS_SETTING.get(globalSettings));, +        }]