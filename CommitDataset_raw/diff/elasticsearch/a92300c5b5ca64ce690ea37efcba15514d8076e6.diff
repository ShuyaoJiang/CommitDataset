[+++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +        Explanation explanation;, +        if (in.getVersion().onOrAfter(org.elasticsearch.Version.V_1_4_0) && in.readBoolean()) {, +            Boolean match = in.readOptionalBoolean();, +            explanation = new ComplexExplanation();, +            ((ComplexExplanation) explanation).setMatch(match);, +, +        } else {, +            explanation = new Explanation();, +        }, +        explanation.setValue(in.readFloat());, +        explanation.setDescription(in.readString());, +, +        if (out.getVersion().onOrAfter(org.elasticsearch.Version.V_1_4_0)) {, +            if (explanation instanceof ComplexExplanation) {, +                out.writeBoolean(true);, +                out.writeOptionalBoolean(((ComplexExplanation) explanation).getMatch());, +            } else {, +                out.writeBoolean(false);, +            }, +        }, +++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +        Explanation explanation;, +        if (in.getVersion().onOrAfter(org.elasticsearch.Version.V_1_4_0) && in.readBoolean()) {, +            Boolean match = in.readOptionalBoolean();, +            explanation = new ComplexExplanation();, +            ((ComplexExplanation) explanation).setMatch(match);, +, +        } else {, +            explanation = new Explanation();, +        }, +        explanation.setValue(in.readFloat());, +        explanation.setDescription(in.readString());, +, +        if (out.getVersion().onOrAfter(org.elasticsearch.Version.V_1_4_0)) {, +            if (explanation instanceof ComplexExplanation) {, +                out.writeBoolean(true);, +                out.writeOptionalBoolean(((ComplexExplanation) explanation).getMatch());, +            } else {, +                out.writeBoolean(false);, +            }, +        }, +++ b/src/test/java/org/elasticsearch/explain/ExplainActionTests.java, +import org.apache.lucene.search.ComplexExplanation;, +import org.apache.lucene.search.Explanation;, +import org.elasticsearch.common.io.stream.InputStreamStreamInput;, +import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;, +import org.elasticsearch.common.lucene.Lucene;, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +, +, +    @Test, +    public void streamExplainTest() throws Exception {, +, +        Explanation exp = new Explanation((float) 2.0, "some explanation");, +, +        // write, +        ByteArrayOutputStream outBuffer = new ByteArrayOutputStream();, +        OutputStreamStreamOutput out = new OutputStreamStreamOutput(outBuffer);, +        Lucene.writeExplanation(out, exp);, +, +        // read, +        ByteArrayInputStream esInBuffer = new ByteArrayInputStream(outBuffer.toByteArray());, +        InputStreamStreamInput esBuffer = new InputStreamStreamInput(esInBuffer);, +, +        Explanation result = Lucene.readExplanation(esBuffer);, +        assertThat(exp.toString(),equalTo(result.toString()));, +, +        exp = new ComplexExplanation(true, 2.0f, "some explanation");, +        exp.addDetail(new Explanation(2.0f,"another explanation"));, +, +        // write complex, +        outBuffer = new ByteArrayOutputStream();, +        out = new OutputStreamStreamOutput(outBuffer);, +        Lucene.writeExplanation(out, exp);, +, +        // read complex, +        esInBuffer = new ByteArrayInputStream(outBuffer.toByteArray());, +        esBuffer = new InputStreamStreamInput(esInBuffer);, +, +        result = Lucene.readExplanation(esBuffer);, +        assertThat(exp.toString(),equalTo(result.toString()));, +, +    }]