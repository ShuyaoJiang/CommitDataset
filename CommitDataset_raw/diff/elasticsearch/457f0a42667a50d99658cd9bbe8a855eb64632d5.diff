[+++ b/pom.xml, +++ b/pom.xml, +++ b/src/deb/control/postrm, +        # Remove logs and data, +        rm -rf /var/log/elasticsearch /var/lib/elasticsearch, +++ b/pom.xml, +++ b/src/deb/control/postrm, +        # Remove logs and data, +        rm -rf /var/log/elasticsearch /var/lib/elasticsearch, +++ b/src/deb/init.d/elasticsearch, +JDK_DIRS="/usr/lib/jvm/java-7-openjdk /usr/lib/jvm/java-7-oracle /usr/lib/jvm/java-6-openjdk /usr/lib/jvm/java-6-sun", +++ b/pom.xml, +++ b/src/deb/control/postrm, +        # Remove logs and data, +        rm -rf /var/log/elasticsearch /var/lib/elasticsearch, +++ b/src/deb/init.d/elasticsearch, +JDK_DIRS="/usr/lib/jvm/java-7-openjdk /usr/lib/jvm/java-7-oracle /usr/lib/jvm/java-6-openjdk /usr/lib/jvm/java-6-sun", +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/SameShardAllocationDecider.java, +    public static final String SAME_HOST_SETTING = "cluster.routing.allocation.same_shard.host";, +, +    private final boolean sameHost;, +, +, +        this.sameHost = settings.getAsBoolean(SAME_HOST_SETTING, false);, +        if (sameHost) {, +            if (node.node() != null) {, +                for (RoutingNode checkNode : allocation.routingNodes()) {, +                    if (checkNode.node() == null) {, +                        continue;, +                    }, +                    // check if its on the same host as the one we want to allocate to, +                    if (!checkNode.node().address().sameHost(node.node().address())) {, +                        continue;, +                    }, +                    shards = checkNode.shards();, +                    for (int i = 0; i < shards.size(); i++) {, +                        if (shards.get(i).shardId().equals(shardRouting.shardId())) {, +                            return Decision.NO;, +                        }, +                    }, +                }, +            }, +        }, +++ b/pom.xml, +++ b/src/deb/control/postrm, +        # Remove logs and data, +        rm -rf /var/log/elasticsearch /var/lib/elasticsearch, +++ b/src/deb/init.d/elasticsearch, +JDK_DIRS="/usr/lib/jvm/java-7-openjdk /usr/lib/jvm/java-7-oracle /usr/lib/jvm/java-6-openjdk /usr/lib/jvm/java-6-sun", +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/SameShardAllocationDecider.java, +    public static final String SAME_HOST_SETTING = "cluster.routing.allocation.same_shard.host";, +, +    private final boolean sameHost;, +, +, +        this.sameHost = settings.getAsBoolean(SAME_HOST_SETTING, false);, +        if (sameHost) {, +            if (node.node() != null) {, +                for (RoutingNode checkNode : allocation.routingNodes()) {, +                    if (checkNode.node() == null) {, +                        continue;, +                    }, +                    // check if its on the same host as the one we want to allocate to, +                    if (!checkNode.node().address().sameHost(node.node().address())) {, +                        continue;, +                    }, +                    shards = checkNode.shards();, +                    for (int i = 0; i < shards.size(); i++) {, +                        if (shards.get(i).shardId().equals(shardRouting.shardId())) {, +                            return Decision.NO;, +                        }, +                    }, +                }, +            }, +        }, +++ b/src/main/java/org/elasticsearch/common/transport/DummyTransportAddress.java, +    public boolean sameHost(TransportAddress otherAddress) {, +        return false;, +    }, +, +    @Override, +++ b/pom.xml, +++ b/src/deb/control/postrm, +        # Remove logs and data, +        rm -rf /var/log/elasticsearch /var/lib/elasticsearch, +++ b/src/deb/init.d/elasticsearch, +JDK_DIRS="/usr/lib/jvm/java-7-openjdk /usr/lib/jvm/java-7-oracle /usr/lib/jvm/java-6-openjdk /usr/lib/jvm/java-6-sun", +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/SameShardAllocationDecider.java, +    public static final String SAME_HOST_SETTING = "cluster.routing.allocation.same_shard.host";, +, +    private final boolean sameHost;, +, +, +        this.sameHost = settings.getAsBoolean(SAME_HOST_SETTING, false);, +        if (sameHost) {, +            if (node.node() != null) {, +                for (RoutingNode checkNode : allocation.routingNodes()) {, +                    if (checkNode.node() == null) {, +                        continue;, +                    }]