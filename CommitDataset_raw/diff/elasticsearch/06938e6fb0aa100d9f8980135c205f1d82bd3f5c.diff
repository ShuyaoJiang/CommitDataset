[+++ b/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +        FetchSubPhase.HitContext hitContext = new FetchSubPhase.HitContext();, +            for (FetchSubPhase fetchSubPhase : fetchSubPhases) {, +                if (fetchSubPhase.hitExecutionNeeded(context)) {, +++ b/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +        FetchSubPhase.HitContext hitContext = new FetchSubPhase.HitContext();, +            for (FetchSubPhase fetchSubPhase : fetchSubPhases) {, +                if (fetchSubPhase.hitExecutionNeeded(context)) {, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +            FieldQuery fieldQuery;, +            if (field.requireFieldMatch()) {, +                if (cache.fieldMatchFieldQuery == null) {, +                    // we use top level reader to rewrite the query against all readers, with use caching it across hits (and across readers...), +                    cache.fieldMatchFieldQuery = new CustomFieldQuery(highlighterContext.highlightQuery, hitContext.topLevelReader(), true, field.requireFieldMatch());, +                }, +                fieldQuery = cache.fieldMatchFieldQuery;, +            } else {, +                if (cache.noFieldMatchFieldQuery == null) {, +                    // we use top level reader to rewrite the query against all readers, with use caching it across hits (and across readers...), +                    cache.noFieldMatchFieldQuery = new CustomFieldQuery(highlighterContext.highlightQuery, hitContext.topLevelReader(), true, field.requireFieldMatch());, +                }, +                fieldQuery = cache.noFieldMatchFieldQuery;, +            }, +, +++ b/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +        FetchSubPhase.HitContext hitContext = new FetchSubPhase.HitContext();, +            for (FetchSubPhase fetchSubPhase : fetchSubPhases) {, +                if (fetchSubPhase.hitExecutionNeeded(context)) {, +++ b/src/main/java/org/elasticsearch/search/highlight/FastVectorHighlighter.java, +            FieldQuery fieldQuery;, +            if (field.requireFieldMatch()) {, +                if (cache.fieldMatchFieldQuery == null) {, +                    // we use top level reader to rewrite the query against all readers, with use caching it across hits (and across readers...), +                    cache.fieldMatchFieldQuery = new CustomFieldQuery(highlighterContext.highlightQuery, hitContext.topLevelReader(), true, field.requireFieldMatch());, +                }, +                fieldQuery = cache.fieldMatchFieldQuery;, +            } else {, +                if (cache.noFieldMatchFieldQuery == null) {, +                    // we use top level reader to rewrite the query against all readers, with use caching it across hits (and across readers...), +                    cache.noFieldMatchFieldQuery = new CustomFieldQuery(highlighterContext.highlightQuery, hitContext.topLevelReader(), true, field.requireFieldMatch());, +                }, +                fieldQuery = cache.noFieldMatchFieldQuery;, +            }, +, +++ b/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchTests.java, +    public void testPlainHighlighterMultipleFields() {, +        createIndex("test");, +        ensureGreen();, +, +        index("test", "type1", "1", "field1", "The <b>quick<b> brown fox", "field2", "The <b>slow<b> brown fox");, +        refresh();, +, +        SearchResponse response = client().prepareSearch("test"), +                .setQuery(QueryBuilders.matchQuery("field1", "fox")), +                .addHighlightedField(new HighlightBuilder.Field("field1").preTags("<1>").postTags("</1>").requireFieldMatch(true)), +                .addHighlightedField(new HighlightBuilder.Field("field2").preTags("<2>").postTags("</2>").requireFieldMatch(false)), +                .get();, +        assertHitCount(response, 1l);, +        assertThat(response.getHits().hits()[0].highlightFields().get("field1").fragments().length, equalTo(1));, +        assertThat(response.getHits().hits()[0].highlightFields().get("field1").fragments()[0].string(), equalTo("The <b>quick<b> brown <1>fox</1>"));, +        assertThat(response.getHits().hits()[0].highlightFields().get("field2").fragments().length, equalTo(1));, +        assertThat(response.getHits().hits()[0].highlightFields().get("field2").fragments()[0].string(), equalTo("The <b>slow<b> brown <2>fox</2>"));, +    }, +, +    @Test, +    public void testFastVectorHighlighterMultipleFields() {, +        assertAcked(client().admin().indices().prepareCreate("test"), +                .addMapping("type1", "field1", "type=string,term_vectors=with_positions_offsets", "field2", "type=string,term_vectors=with_positions_offsets"));, +        ensureGreen();, +, +        index("test", "type1", "1", "field1", "The <b>quick<b> brown fox", "field2", "The <b>slow<b> brown fox");, +        refresh();, +, +        SearchResponse response = client().prepareSearch("test"), +                .setQuery(QueryBuilders.matchQuery("field1", "fox")), +                .addHighlightedField(new HighlightBuilder.Field("field1").preTags("<1>").postTags("</1>").requireFieldMatch(true)), +                .addHighlightedField(new HighlightBuilder.Field("field2").preTags("<2>").postTags("</2>").requireFieldMatch(false)), +                .get();, +        assertHitCount(response, 1l);, +        assertThat(response.getHits().hits()[0].highlightFields().get("field1").fragments().length, equalTo(1));, +        assertThat(response.getHits().hits()[0].highlightFields().get("field1").fragments()[0].string(), equalTo("The <b>quick<b> brown <1>fox</1>"));, +        assertThat(response.getHits().hits()[0].highlightFields().get("field2").fragments().length, equalTo(1));, +        assertThat(response.getHits().hits()[0].highlightFields().get("field2").fragments()[0].string(), equalTo("The <b>slow<b> brown <2>fox</2>"));, +    }, +, +    @Test, +        assertAcked(client().admin().indices().prepareCreate("test").addMapping("type1", type1PostingsffsetsMapping()).get());, +        index("test", "type1", "1", "field1", "The <b>quick<b> brown fox. Second sentence.", "field2", "The <b>slow<b> brown fox. Second sentence.");, +        refresh();, +        SearchResponse response = client().prepareSearch("test"), +                .setQuery(QueryBuilders.matchQuery("field1", "fox")), +                .addHighlightedField(new HighlightBuilder.Field("field1").preTags("<1>").postTags("</1>").requireFieldMatch(true)), +                .addHighlightedField(new HighlightBuilder.Field("field2").preTags("<2>").postTags("</2>").requireFieldMatch(false)), +                .get();, +        assertHitCount(response, 1l);, +        assertThat(response.getHits().hits()[0].highlightFields().get("field1").fragments().length, equalTo(1));, +        assertThat(response.getHits().hits()[0].highlightFields().get("field1").fragments()[0].string(), equalTo("The <b>quick<b> brown <1>fox</1>."));, +        assertThat(response.getHits().hits()[0].highlightFields().get("field2").fragments().length, equalTo(1));, +        assertThat(response.getHits().hits()[0].highlightFields().get("field2").fragments()[0].string(), equalTo("The <b>slow<b> brown <2>fox</2>."));]