[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +        assertEquals(7, namedXContents.size());, +        assertEquals(Integer.valueOf(2), categories.get(MetricDetail.class));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +        assertEquals(7, namedXContents.size());, +        assertEquals(Integer.valueOf(2), categories.get(MetricDetail.class));, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +        assertEquals(7, namedXContents.size());, +        assertEquals(Integer.valueOf(2), categories.get(MetricDetail.class));, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +        parseContext = new ParseContext.InternalParseContext(settings, mapperService.documentMapperParser(),, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +        parseContext = new ParseContext.InternalParseContext(settings,, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +        assertEquals(7, namedXContents.size());, +        assertEquals(Integer.valueOf(2), categories.get(MetricDetail.class));, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +        parseContext = new ParseContext.InternalParseContext(settings, mapperService.documentMapperParser(),, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +        parseContext = new ParseContext.InternalParseContext(settings,, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +            // unknownDocRating might be null, which means it will be unrated docs are, +            // ignored in the dcg calculation, +            // we still need to add them as a placeholder so the rank of the subsequent, +            // ratings is correct, +        double dcg = computeDCG(ratingsInSearchHits);, +            double idcg = computeDCG(allRatings.subList(0, Math.min(ratingsInSearchHits.size(), allRatings.size())));, +            if (idcg > 0) {, +                dcg = dcg / idcg;, +                dcg = 0;, +        EvalQueryQuality evalQueryQuality = new EvalQueryQuality(taskId, dcg);, +    private static final ConstructingObjectParser<DiscountedCumulativeGain, Void> PARSER = new ConstructingObjectParser<>("dcg_at", false,, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +        assertEquals(7, namedXContents.size());]