[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterStateTaskExecutor.java, +import java.util.Map;, +import java.util.function.Consumer;, +import java.util.stream.Collectors;, +    Result<T> execute(ClusterState currentState, List<T> tasks) throws Exception;, +    /**, +     * Represents the result of a batched execution of cluster state update tasks, +     * @param <T> the type of the cluster state update task, +     */, +    class Result<T> {, +        final public Map<T, ClusterStateTaskExecutionResult> executionResults;, +        /**, +         * Construct an execution result instance for which every cluster state update task succeeded, +         * @param resultingState the resulting cluster state, +         * @param tasks the cluster state update tasks, +         */, +        public Result(ClusterState resultingState, List<T> tasks) {, +            this(resultingState, tasks.stream().collect(Collectors.toMap(task -> task, task -> ClusterStateTaskExecutionResult.success())));, +        }, +, +        /**, +         * Construct an execution result instance with a correspondence between the tasks and their execution result, +         * @param resultingState the resulting cluster state, +         * @param executionResults the correspondence between tasks and their outcome, +         */, +        public Result(ClusterState resultingState, Map<T, ClusterStateTaskExecutionResult> executionResults) {, +            this.executionResults = executionResults;, +    final class ClusterStateTaskExecutionResult {, +        private final Throwable failure;, +, +        private static final ClusterStateTaskExecutionResult SUCCESS = new ClusterStateTaskExecutionResult(null);, +, +        public static ClusterStateTaskExecutionResult success() {, +            return SUCCESS;, +        }, +, +        public static ClusterStateTaskExecutionResult failure(Throwable failure) {, +            return new ClusterStateTaskExecutionResult(failure);, +        }, +, +        private ClusterStateTaskExecutionResult(Throwable failure) {, +            this.failure = failure;, +        }, +, +        public boolean isSuccess() {, +            return failure != null;, +        }, +, +        /**, +         * Handle the execution result with the provided consumers, +         * @param onSuccess handler to invoke on success, +         * @param onFailure handler to invoke on failure; the throwable passed through will not be null, +         */, +        public void handle(Runnable onSuccess, Consumer<Throwable> onFailure) {, +            if (failure == null) {, +                onSuccess.run();, +            } else {, +                onFailure.accept(failure);, +            }, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterStateTaskExecutor.java, +import java.util.Map;, +import java.util.function.Consumer;, +import java.util.stream.Collectors;, +    Result<T> execute(ClusterState currentState, List<T> tasks) throws Exception;, +    /**, +     * Represents the result of a batched execution of cluster state update tasks, +     * @param <T> the type of the cluster state update task, +     */, +    class Result<T> {, +        final public Map<T, ClusterStateTaskExecutionResult> executionResults;, +        /**, +         * Construct an execution result instance for which every cluster state update task succeeded, +         * @param resultingState the resulting cluster state, +         * @param tasks the cluster state update tasks, +         */, +        public Result(ClusterState resultingState, List<T> tasks) {, +            this(resultingState, tasks.stream().collect(Collectors.toMap(task -> task, task -> ClusterStateTaskExecutionResult.success())));, +        }, +, +        /**, +         * Construct an execution result instance with a correspondence between the tasks and their execution result, +         * @param resultingState the resulting cluster state, +         * @param executionResults the correspondence between tasks and their outcome, +         */, +        public Result(ClusterState resultingState, Map<T, ClusterStateTaskExecutionResult> executionResults) {, +            this.executionResults = executionResults;, +    final class ClusterStateTaskExecutionResult {, +        private final Throwable failure;, +, +        private static final ClusterStateTaskExecutionResult SUCCESS = new ClusterStateTaskExecutionResult(null);, +, +        public static ClusterStateTaskExecutionResult success() {, +            return SUCCESS;, +        }, +, +        public static ClusterStateTaskExecutionResult failure(Throwable failure) {, +            return new ClusterStateTaskExecutionResult(failure);, +        }]