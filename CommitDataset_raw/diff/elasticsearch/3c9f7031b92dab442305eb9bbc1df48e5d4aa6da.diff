[+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationState.java, +        persistedState.markLastAcceptedStateAsCommitted();, +         * with the last committed configuration now corresponding to the last accepted configuration, and the cluster uuid, if set,, +         * marked as committed., +        default void markLastAcceptedStateAsCommitted() {, +            MetaData.Builder metaDataBuilder = null;, +                metaDataBuilder = MetaData.builder(lastAcceptedState.metaData());, +                metaDataBuilder.coordinationMetaData(coordinationMetaData);, +            }, +            // if we receive a commit from a Zen1 master that has not recovered its state yet, the cluster uuid might not been known yet., +            assert lastAcceptedState.metaData().clusterUUID().equals(MetaData.UNKNOWN_CLUSTER_UUID) == false ||, +                lastAcceptedState.term() == ZEN1_BWC_TERM :, +                "received cluster state with empty cluster uuid but not Zen1 BWC term: " + lastAcceptedState;, +            if (lastAcceptedState.metaData().clusterUUID().equals(MetaData.UNKNOWN_CLUSTER_UUID) == false &&, +                lastAcceptedState.metaData().clusterUUIDCommitted() == false) {, +                if (metaDataBuilder == null) {, +                    metaDataBuilder = MetaData.builder(lastAcceptedState.metaData());, +                }, +                metaDataBuilder.clusterUUIDCommitted(true);, +            }, +            if (metaDataBuilder != null) {, +                setLastAcceptedState(ClusterState.builder(lastAcceptedState).metaData(metaDataBuilder).build());, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationState.java, +        persistedState.markLastAcceptedStateAsCommitted();, +         * with the last committed configuration now corresponding to the last accepted configuration, and the cluster uuid, if set,, +         * marked as committed., +        default void markLastAcceptedStateAsCommitted() {, +            MetaData.Builder metaDataBuilder = null;, +                metaDataBuilder = MetaData.builder(lastAcceptedState.metaData());, +                metaDataBuilder.coordinationMetaData(coordinationMetaData);, +            }, +            // if we receive a commit from a Zen1 master that has not recovered its state yet, the cluster uuid might not been known yet., +            assert lastAcceptedState.metaData().clusterUUID().equals(MetaData.UNKNOWN_CLUSTER_UUID) == false ||, +                lastAcceptedState.term() == ZEN1_BWC_TERM :, +                "received cluster state with empty cluster uuid but not Zen1 BWC term: " + lastAcceptedState;, +            if (lastAcceptedState.metaData().clusterUUID().equals(MetaData.UNKNOWN_CLUSTER_UUID) == false &&, +                lastAcceptedState.metaData().clusterUUIDCommitted() == false) {, +                if (metaDataBuilder == null) {, +                    metaDataBuilder = MetaData.builder(lastAcceptedState.metaData());, +                }, +                metaDataBuilder.clusterUUIDCommitted(true);, +            }, +            if (metaDataBuilder != null) {, +                setLastAcceptedState(ClusterState.builder(lastAcceptedState).metaData(metaDataBuilder).build());, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +            this::getCurrentTerm, this::getStateForMasterService, this::handleJoinRequest, this::joinLeaderInTerm, this.onJoinValidators);, +            final ClusterState localState = coordinationState.get().getLastAcceptedState();, +, +            if (localState.metaData().clusterUUIDCommitted() &&, +                localState.metaData().clusterUUID().equals(publishRequest.getAcceptedState().metaData().clusterUUID()) == false) {, +                logger.warn("received cluster state from {} with a different cluster uuid {} than local cluster uuid {}, rejecting",, +                    sourceNode, publishRequest.getAcceptedState().metaData().clusterUUID(), localState.metaData().clusterUUID());, +                throw new CoordinationStateRejectedException("received cluster state from " + sourceNode +, +                    " with a different cluster uuid " + publishRequest.getAcceptedState().metaData().clusterUUID() +, +                    " than local cluster uuid " + localState.metaData().clusterUUID() + ", rejecting");, +            }, +, +            if (publishRequest.getAcceptedState().term() > localState.term()) {, +            assert applierState.nodes().getMasterNodeId() == null || applierState.metaData().clusterUUIDCommitted();, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/CoordinationState.java, +        persistedState.markLastAcceptedStateAsCommitted();, +         * with the last committed configuration now corresponding to the last accepted configuration, and the cluster uuid, if set,, +         * marked as committed., +        default void markLastAcceptedStateAsCommitted() {, +            MetaData.Builder metaDataBuilder = null;, +                metaDataBuilder = MetaData.builder(lastAcceptedState.metaData());, +                metaDataBuilder.coordinationMetaData(coordinationMetaData);, +            }, +            // if we receive a commit from a Zen1 master that has not recovered its state yet, the cluster uuid might not been known yet., +            assert lastAcceptedState.metaData().clusterUUID().equals(MetaData.UNKNOWN_CLUSTER_UUID) == false ||, +                lastAcceptedState.term() == ZEN1_BWC_TERM :, +                "received cluster state with empty cluster uuid but not Zen1 BWC term: " + lastAcceptedState;, +            if (lastAcceptedState.metaData().clusterUUID().equals(MetaData.UNKNOWN_CLUSTER_UUID) == false &&, +                lastAcceptedState.metaData().clusterUUIDCommitted() == false) {, +                if (metaDataBuilder == null) {, +                    metaDataBuilder = MetaData.builder(lastAcceptedState.metaData());, +                }, +                metaDataBuilder.clusterUUIDCommitted(true);, +            }, +            if (metaDataBuilder != null) {, +                setLastAcceptedState(ClusterState.builder(lastAcceptedState).metaData(metaDataBuilder).build());, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java, +            this::getCurrentTerm, this::getStateForMasterService, this::handleJoinRequest, this::joinLeaderInTerm, this.onJoinValidators);, +            final ClusterState localState = coordinationState.get().getLastAcceptedState();, +, +            if (localState.metaData().clusterUUIDCommitted() &&, +                localState.metaData().clusterUUID().equals(publishRequest.getAcceptedState().metaData().clusterUUID()) == false) {, +                logger.warn("received cluster state from {} with a different cluster uuid {} than local cluster uuid {}, rejecting",, +                    sourceNode, publishRequest.getAcceptedState().metaData().clusterUUID(), localState.metaData().clusterUUID());, +                throw new CoordinationStateRejectedException("received cluster state from " + sourceNode +, +                    " with a different cluster uuid " + publishRequest.getAcceptedState().metaData().clusterUUID() +, +                    " than local cluster uuid " + localState.metaData().clusterUUID() + ", rejecting");, +            }, +, +            if (publishRequest.getAcceptedState().term() > localState.term()) {, +            assert applierState.nodes().getMasterNodeId() == null || applierState.metaData().clusterUUIDCommitted();, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/JoinHelper.java, +import java.util.function.Supplier;, +                      TransportService transportService, LongSupplier currentTermSupplier, Supplier<ClusterState> currentStateSupplier,, +                final ClusterState localState = currentStateSupplier.get();]