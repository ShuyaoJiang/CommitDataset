[+++ b/qa/vagrant/build.gradle, +, +  // List all N-1 releases from maven central, +  int major = Integer.parseInt(project.version.substring(0, project.version.indexOf('.'))) - 1, +  Set<String> versions = new TreeSet<>(xml.versioning.versions.version.collect { it.text() }.findAll { it ==~ /$major\.\d\.\d/ }), +  if (versions.isEmpty() == false) {, +    return versions;, +  }, +, +  // If no version is found, we run the tests with the current version, +  return Collections.singleton(project.version);, +++ b/qa/vagrant/build.gradle, +, +  // List all N-1 releases from maven central, +  int major = Integer.parseInt(project.version.substring(0, project.version.indexOf('.'))) - 1, +  Set<String> versions = new TreeSet<>(xml.versioning.versions.version.collect { it.text() }.findAll { it ==~ /$major\.\d\.\d/ }), +  if (versions.isEmpty() == false) {, +    return versions;, +  }, +, +  // If no version is found, we run the tests with the current version, +  return Collections.singleton(project.version);, +++ b/qa/vagrant/src/test/resources/packaging/scripts/80_upgrade.bats, +, +    sameVersion="false", +    if [ "$(cat upgrade_from_version)" == "$(cat version)" ]; then, +        sameVersion="true", +    fi, +    check_elasticsearch_version "$(cat upgrade_from_version)", +    if [ "$sameVersion" == "true" ]; then, +        install_package -f, +    else, +    fi, +    check_elasticsearch_version "$(cat version)", +++ b/qa/vagrant/build.gradle, +, +  // List all N-1 releases from maven central, +  int major = Integer.parseInt(project.version.substring(0, project.version.indexOf('.'))) - 1, +  Set<String> versions = new TreeSet<>(xml.versioning.versions.version.collect { it.text() }.findAll { it ==~ /$major\.\d\.\d/ }), +  if (versions.isEmpty() == false) {, +    return versions;, +  }, +, +  // If no version is found, we run the tests with the current version, +  return Collections.singleton(project.version);, +++ b/qa/vagrant/src/test/resources/packaging/scripts/80_upgrade.bats, +, +    sameVersion="false", +    if [ "$(cat upgrade_from_version)" == "$(cat version)" ]; then, +        sameVersion="true", +    fi, +    check_elasticsearch_version "$(cat upgrade_from_version)", +    if [ "$sameVersion" == "true" ]; then, +        install_package -f, +    else, +    fi, +    check_elasticsearch_version "$(cat version)", +++ b/qa/vagrant/src/test/resources/packaging/scripts/os_package.bash, +    while getopts ":fuv:" opt; do, +            f), +                rpmCommand='-U --force', +                dpkgCommand='--force-conflicts', +                ;;, +++ b/qa/vagrant/build.gradle, +, +  // List all N-1 releases from maven central, +  int major = Integer.parseInt(project.version.substring(0, project.version.indexOf('.'))) - 1, +  Set<String> versions = new TreeSet<>(xml.versioning.versions.version.collect { it.text() }.findAll { it ==~ /$major\.\d\.\d/ }), +  if (versions.isEmpty() == false) {, +    return versions;, +  }, +, +  // If no version is found, we run the tests with the current version, +  return Collections.singleton(project.version);, +++ b/qa/vagrant/src/test/resources/packaging/scripts/80_upgrade.bats, +, +    sameVersion="false", +    if [ "$(cat upgrade_from_version)" == "$(cat version)" ]; then, +        sameVersion="true", +    fi, +    check_elasticsearch_version "$(cat upgrade_from_version)", +    if [ "$sameVersion" == "true" ]; then, +        install_package -f, +    else, +    fi, +    check_elasticsearch_version "$(cat version)", +++ b/qa/vagrant/src/test/resources/packaging/scripts/os_package.bash, +    while getopts ":fuv:" opt; do, +            f), +                rpmCommand='-U --force', +                dpkgCommand='--force-conflicts', +                ;;, +++ b/qa/vagrant/src/test/resources/packaging/scripts/packaging_test_utils.bash, +# Checks the current elasticsearch version using the Info REST endpoint, +# $1 - expected version, +check_elasticsearch_version() {, +    local version=$1, +    local versionToCheck=$(echo $version | sed -e 's/-SNAPSHOT//'), +, +    run curl -s localhost:9200]