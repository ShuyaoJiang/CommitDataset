[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    /** Starts a new string concat., +     * @return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder), +     */, +    public int writeNewStrings() {, +            return 0; // nothing added to stack, +            return 1; // StringBuilder on stack, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    /** Starts a new string concat., +     * @return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder), +     */, +    public int writeNewStrings() {, +            return 0; // nothing added to stack, +            return 1; // StringBuilder on stack, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +        INDY_STRING_CONCAT_BOOTSTRAP_HANDLE = bs;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    /** Starts a new string concat., +     * @return the size of arguments pushed to stack (the object that does string concats, e.g. a StringBuilder), +     */, +    public int writeNewStrings() {, +            return 0; // nothing added to stack, +            return 1; // StringBuilder on stack, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +        INDY_STRING_CONCAT_BOOTSTRAP_HANDLE = bs;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EChain.java, +        int catElementStackSize = 0;, +            catElementStackSize = writer.writeNewStrings();, +                    writer.writeDup(link.size, catElementStackSize);  // dup the top element and insert it before concat helper on stack, +                    writer.writeToStrings(); // put the value for string concat onto the stack]