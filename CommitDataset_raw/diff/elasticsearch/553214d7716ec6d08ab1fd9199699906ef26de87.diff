[+++ b/buildSrc/build.gradle, +// TODO: remove this when upgrading to a version that supports ProgressLogger, +// gradle 2.14 made internal apis unavailable to plugins, and gradle considered, +// ProgressLogger to be an internal api. Until this is made available again,, +// we can't upgrade without losing our nice progress logging, +// NOTE that this check duplicates that in BuildPlugin, but we need to check, +// early here before trying to compile the broken classes in buildSrc, +if (GradleVersion.current() != GradleVersion.version('2.13')) {, +  throw new GradleException('Gradle 2.13 is required to build elasticsearch'), +}, +, +++ b/buildSrc/build.gradle, +// TODO: remove this when upgrading to a version that supports ProgressLogger, +// gradle 2.14 made internal apis unavailable to plugins, and gradle considered, +// ProgressLogger to be an internal api. Until this is made available again,, +// we can't upgrade without losing our nice progress logging, +// NOTE that this check duplicates that in BuildPlugin, but we need to check, +// early here before trying to compile the broken classes in buildSrc, +if (GradleVersion.current() != GradleVersion.version('2.13')) {, +  throw new GradleException('Gradle 2.13 is required to build elasticsearch'), +}, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.TaskInfo;, +            // Task isn't running, go look in the task index, +                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode(), true), listener);, +                TaskInfo info = runningTask.taskInfo(clusterService.localNode(), true);, +                listener.onResponse(new GetTaskResponse(new PersistedTaskInfo(false, info)));, +     * Called after waiting for the task to complete. Attempts to load the results of the task from the tasks index. If it isn't in the, +     * index then returns a snapshot of the task taken shortly after completion., +     */, +    void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,, +            ActionListener<GetTaskResponse> listener) {, +        getFinishedTaskFromIndex(thisTask, request, new ActionListener<GetTaskResponse>() {, +            @Override, +            public void onResponse(GetTaskResponse response) {, +                // We were able to load the task from the task index. Let's send that back., +                listener.onResponse(response);, +            }, +, +            @Override, +            public void onFailure(Throwable e) {, +                /*, +                 * We couldn't load the task from the task index. Instead of 404 we should use the snapshot we took after it finished. If, +                 * the error isn't a 404 then we'll just throw it back to the user., +                 */, +                if (ExceptionsHelper.unwrap(e, ResourceNotFoundException.class) != null) {, +                    listener.onResponse(new GetTaskResponse(new PersistedTaskInfo(true, snapshotOfRunningTask)));, +                } else {, +                    listener.onFailure(e);, +                }, +            }, +        });, +    }, +, +    /**, +     * Send a {@link GetRequest} to the tasks index looking for a persisted copy of the task completed task. It'll only be found only if the, +     * task's result was persisted. Called on the node that once had the task if that node is still part of the cluster or on the, +     * coordinating node if the node is no longer part of the cluster., +            return;, +++ b/buildSrc/build.gradle, +// TODO: remove this when upgrading to a version that supports ProgressLogger, +// gradle 2.14 made internal apis unavailable to plugins, and gradle considered, +// ProgressLogger to be an internal api. Until this is made available again,, +// we can't upgrade without losing our nice progress logging, +// NOTE that this check duplicates that in BuildPlugin, but we need to check, +// early here before trying to compile the broken classes in buildSrc, +if (GradleVersion.current() != GradleVersion.version('2.13')) {, +  throw new GradleException('Gradle 2.13 is required to build elasticsearch'), +}, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/get/TransportGetTaskAction.java, +import org.elasticsearch.tasks.TaskInfo;, +            // Task isn't running, go look in the task index, +                        waitedForCompletion(thisTask, request, runningTask.taskInfo(clusterService.localNode(), true), listener);, +                TaskInfo info = runningTask.taskInfo(clusterService.localNode(), true);, +                listener.onResponse(new GetTaskResponse(new PersistedTaskInfo(false, info)));, +     * Called after waiting for the task to complete. Attempts to load the results of the task from the tasks index. If it isn't in the, +     * index then returns a snapshot of the task taken shortly after completion., +     */, +    void waitedForCompletion(Task thisTask, GetTaskRequest request, TaskInfo snapshotOfRunningTask,, +            ActionListener<GetTaskResponse> listener) {, +        getFinishedTaskFromIndex(thisTask, request, new ActionListener<GetTaskResponse>() {, +            @Override, +            public void onResponse(GetTaskResponse response) {, +                // We were able to load the task from the task index. Let's send that back., +                listener.onResponse(response);, +            }, +, +            @Override, +            public void onFailure(Throwable e) {, +                /*, +                 * We couldn't load the task from the task index. Instead of 404 we should use the snapshot we took after it finished. If, +                 * the error isn't a 404 then we'll just throw it back to the user., +                 */, +                if (ExceptionsHelper.unwrap(e, ResourceNotFoundException.class) != null) {, +                    listener.onResponse(new GetTaskResponse(new PersistedTaskInfo(true, snapshotOfRunningTask)));, +                } else {, +                    listener.onFailure(e);, +                }]