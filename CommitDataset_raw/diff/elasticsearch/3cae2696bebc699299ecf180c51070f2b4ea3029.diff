[+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ssl/SSLConfigurationReloaderTests.java, +import org.apache.http.HttpConnectionMetrics;, +import org.apache.http.HttpEntityEnclosingRequest;, +import org.apache.http.HttpException;, +import org.apache.http.HttpRequest;, +import org.apache.http.HttpResponse;, +import org.apache.http.config.RegistryBuilder;, +import org.apache.http.conn.HttpConnectionFactory;, +import org.apache.http.conn.ManagedHttpClientConnection;, +import org.apache.http.conn.routing.HttpRoute;, +import org.apache.http.conn.socket.ConnectionSocketFactory;, +import org.apache.http.conn.socket.PlainConnectionSocketFactory;, +import org.apache.http.conn.ssl.DefaultHostnameVerifier;, +import org.apache.http.conn.ssl.SSLConnectionSocketFactory;, +import org.apache.http.impl.conn.ManagedHttpClientConnectionFactory;, +import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;, +import javax.net.ssl.SSLSession;, +import javax.net.ssl.SSLSocket;, +import java.net.InetAddress;, +import java.net.Socket;, +import java.util.concurrent.TimeUnit;, +                try (CloseableHttpClient client = createHttpClient(context)) {, +                try (CloseableHttpClient client = createHttpClient(updatedContext)) {, +                try (CloseableHttpClient client = createHttpClient(context)) {, +                try (CloseableHttpClient client = createHttpClient(updatedContext)) {, +        return createHttpClient(sslContext);, +        return createHttpClient(sslContext);, +    }, +, +    private static CloseableHttpClient createHttpClient(SSLContext sslContext) {, +        return HttpClients.custom(), +            .setConnectionManager(new PoolingHttpClientConnectionManager(, +                RegistryBuilder.<ConnectionSocketFactory>create(), +                    .register("http", PlainConnectionSocketFactory.getSocketFactory()), +                    .register("https", new SSLConnectionSocketFactory(sslContext, null, null, new DefaultHostnameVerifier())), +                    .build(), getHttpClientConnectionFactory(), null, null, -1, TimeUnit.MILLISECONDS)), +            .build();, +    }, +, +    /**, +     * Creates our own HttpConnectionFactory that changes how the connection is closed to prevent issues with, +     * the MockWebServer going into an endless loop based on the way that HttpClient closes its connection., +     */, +    private static HttpConnectionFactory<HttpRoute, ManagedHttpClientConnection> getHttpClientConnectionFactory() {, +        return (route, config) -> {, +            ManagedHttpClientConnection delegate = ManagedHttpClientConnectionFactory.INSTANCE.create(route, config);, +            return new ManagedHttpClientConnection() {, +                @Override, +                public String getId() {, +                    return delegate.getId();, +                }, +, +                @Override, +                public void bind(Socket socket) throws IOException {, +                    delegate.bind(socket);, +                }, +, +                @Override, +                public Socket getSocket() {, +                    return delegate.getSocket();, +                }, +, +                @Override, +                public SSLSession getSSLSession() {, +                    return delegate.getSSLSession();, +                }, +, +                @Override, +                public boolean isResponseAvailable(int timeout) throws IOException {, +                    return delegate.isResponseAvailable(timeout);, +                }, +, +                @Override, +                public void sendRequestHeader(HttpRequest request) throws HttpException, IOException {, +                    delegate.sendRequestHeader(request);, +                }, +, +                @Override, +                public void sendRequestEntity(HttpEntityEnclosingRequest request) throws HttpException, IOException {, +                    delegate.sendRequestEntity(request);, +                }, +, +                @Override, +                public HttpResponse receiveResponseHeader() throws HttpException, IOException {, +                    return delegate.receiveResponseHeader();, +                }, +, +                @Override, +                public void receiveResponseEntity(HttpResponse response) throws HttpException, IOException {, +                    delegate.receiveResponseEntity(response);, +                }, +, +                @Override, +                public void flush() throws IOException {, +                    delegate.flush();, +                }, +, +                @Override, +                public InetAddress getLocalAddress() {, +                    return delegate.getLocalAddress();]