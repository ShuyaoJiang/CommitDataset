[+++ b/docs/community/clients.asciidoc, +++ b/docs/community/clients.asciidoc, +++ b/docs/reference/analysis/analyzers/pattern-analyzer.asciidoc, +[cols="<,<",options="header",], +|===================================================================, +|Setting |Description, +|`lowercase` |Should terms be lowercased or not. Defaults to `true`., +|`pattern` |The regular expression pattern, defaults to `\W+`., +|`flags` |The regular expression flags., +|`stopwords` |A list of stopwords to initialize the stop filter with., +|===================================================================, +before running each example:, +, +[source,js], +--------------------------------------------------, +    curl -XDELETE localhost:9200/test, +--------------------------------------------------, +    curl -XPUT 'localhost:9200/test' -d ', +                        "pattern":"\\\\s+", +    }', +    curl 'localhost:9200/test/_analyze?pretty=1&analyzer=whitespace' -d 'foo,bar baz', +    curl -XPUT 'localhost:9200/test' -d ', +                        "pattern":"[^\\\\w]+", +    }', +    curl 'localhost:9200/test/_analyze?pretty=1&analyzer=nonword' -d 'foo,bar baz', +    curl 'localhost:9200/test/_analyze?pretty=1&analyzer=nonword' -d 'type_1-type_4', +    curl -XPUT 'localhost:9200/test?pretty=1' -d ', +                        "pattern":"([^\\\\p{L}\\\\d]+)|(?<=\\\\D)(?=\\\\d)|(?<=\\\\d)(?=\\\\D)|(?<=[\\\\p{L}&&[^\\\\p{Lu}]])(?=\\\\p{Lu})|(?<=\\\\p{Lu})(?=\\\\p{Lu}[\\\\p{L}&&[^\\\\p{Lu}]])", +    }', +    curl 'localhost:9200/test/_analyze?pretty=1&analyzer=camel' -d ', +        MooseX::FTPClass2_beta, +    ', +      ([^\\p{L}\\d]+)                 # swallow non letters and numbers,, +    | (?<=\\D)(?=\\d)                 # or non-number followed by number,, +    | (?<=\\d)(?=\\D)                 # or number followed by non-number,, +    | (?<=[ \\p{L} && [^\\p{Lu}]])    # or lower case, +      (?=\\p{Lu})                    #   followed by upper case,, +    | (?<=\\p{Lu})                   # or upper case, +      (?=\\p{Lu}                     #   followed by upper case, +        [\\p{L}&&[^\\p{Lu}]]          #   then lower case, +++ b/docs/community/clients.asciidoc, +++ b/docs/reference/analysis/analyzers/pattern-analyzer.asciidoc, +[cols="<,<",options="header",], +|===================================================================, +|Setting |Description, +|`lowercase` |Should terms be lowercased or not. Defaults to `true`., +|`pattern` |The regular expression pattern, defaults to `\W+`., +|`flags` |The regular expression flags., +|`stopwords` |A list of stopwords to initialize the stop filter with., +|===================================================================, +before running each example:, +, +[source,js], +--------------------------------------------------, +    curl -XDELETE localhost:9200/test, +--------------------------------------------------, +    curl -XPUT 'localhost:9200/test' -d ', +                        "pattern":"\\\\s+", +    }', +    curl 'localhost:9200/test/_analyze?pretty=1&analyzer=whitespace' -d 'foo,bar baz', +    curl -XPUT 'localhost:9200/test' -d ', +                        "pattern":"[^\\\\w]+", +    }', +    curl 'localhost:9200/test/_analyze?pretty=1&analyzer=nonword' -d 'foo,bar baz', +    curl 'localhost:9200/test/_analyze?pretty=1&analyzer=nonword' -d 'type_1-type_4', +    curl -XPUT 'localhost:9200/test?pretty=1' -d ', +                        "pattern":"([^\\\\p{L}\\\\d]+)|(?<=\\\\D)(?=\\\\d)|(?<=\\\\d)(?=\\\\D)|(?<=[\\\\p{L}&&[^\\\\p{Lu}]])(?=\\\\p{Lu})|(?<=\\\\p{Lu})(?=\\\\p{Lu}[\\\\p{L}&&[^\\\\p{Lu}]])", +    }', +    curl 'localhost:9200/test/_analyze?pretty=1&analyzer=camel' -d ', +        MooseX::FTPClass2_beta, +    ', +      ([^\\p{L}\\d]+)                 # swallow non letters and numbers,, +    | (?<=\\D)(?=\\d)                 # or non-number followed by number,, +    | (?<=\\d)(?=\\D)                 # or number followed by non-number,, +    | (?<=[ \\p{L} && [^\\p{Lu}]])    # or lower case, +      (?=\\p{Lu})                    #   followed by upper case,, +    | (?<=\\p{Lu})                   # or upper case, +      (?=\\p{Lu}                     #   followed by upper case, +        [\\p{L}&&[^\\p{Lu}]]          #   then lower case, +++ b/docs/reference/api-conventions.asciidoc, +`0..1`:: must match exactly, +`1..5`:: one edit allowed, +++ b/docs/community/clients.asciidoc, +++ b/docs/reference/analysis/analyzers/pattern-analyzer.asciidoc, +[cols="<,<",options="header",], +|===================================================================, +|Setting |Description, +|`lowercase` |Should terms be lowercased or not. Defaults to `true`., +|`pattern` |The regular expression pattern, defaults to `\W+`., +|`flags` |The regular expression flags., +|`stopwords` |A list of stopwords to initialize the stop filter with., +|===================================================================, +before running each example:, +, +[source,js], +--------------------------------------------------, +    curl -XDELETE localhost:9200/test, +--------------------------------------------------, +    curl -XPUT 'localhost:9200/test' -d ', +                        "pattern":"\\\\s+"]