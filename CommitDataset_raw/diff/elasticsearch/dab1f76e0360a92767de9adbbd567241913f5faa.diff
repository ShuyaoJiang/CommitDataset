[+++ b/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +                                IndexMetaData.Builder indexMdBuilder = IndexMetaData.builder(snapshotIndexMetaData).state(IndexMetaData.State.OPEN);, +                                indexMdBuilder.version(Math.max(snapshotIndexMetaData.version(), currentIndexMetaData.version() + 1));, +++ b/src/main/java/org/elasticsearch/snapshots/RestoreService.java, +                                IndexMetaData.Builder indexMdBuilder = IndexMetaData.builder(snapshotIndexMetaData).state(IndexMetaData.State.OPEN);, +                                indexMdBuilder.version(Math.max(snapshotIndexMetaData.version(), currentIndexMetaData.version() + 1));, +++ b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java, +import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;, +import org.elasticsearch.cluster.metadata.MappingMetaData;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +    public void restoreWithDifferentMappingsAndSettingsTest() throws Exception {, +        Client client = client();, +, +        logger.info("-->  creating repository");, +        PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo"), +                .setType("fs").setSettings(ImmutableSettings.settingsBuilder(), +                        .put("location", newTempDir(LifecycleScope.SUITE)), +                        .put("compress", randomBoolean()), +                        .put("chunk_size", randomIntBetween(100, 1000)), +                ).get();, +        assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));, +, +        logger.info("--> create index with foo type");, +        assertAcked(prepareCreate("test-idx", 2, ImmutableSettings.builder().put("refresh_interval", 10)));, +, +        assertAcked(client().admin().indices().preparePutMapping("test-idx").setType("foo").setSource("baz", "type=string"));, +        ensureGreen();, +, +        logger.info("--> snapshot it");, +        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx").get();, +        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));, +        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));, +, +        logger.info("--> delete the index and recreate it with bar type");, +        wipeIndices("test-idx");, +        assertAcked(prepareCreate("test-idx", 2, ImmutableSettings.builder().put("refresh_interval", 5)));, +        assertAcked(client().admin().indices().preparePutMapping("test-idx").setType("bar").setSource("baz", "type=string"));, +        ensureGreen();, +, +        logger.info("--> close index");, +        client.admin().indices().prepareClose("test-idx").get();, +, +        logger.info("--> restore all indices from the snapshot");, +        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).execute().actionGet();, +        assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));, +        ensureGreen();, +, +        logger.info("--> assert that old mapping is restored");, +        ImmutableOpenMap<String, MappingMetaData> mappings = client().admin().cluster().prepareState().get().getState().getMetaData().getIndices().get("test-idx").getMappings();, +        assertThat(mappings.get("foo"), notNullValue());, +        assertThat(mappings.get("bar"), nullValue());, +, +        logger.info("--> assert that old settings are restored");, +        GetSettingsResponse getSettingsResponse = client.admin().indices().prepareGetSettings("test-idx").execute().actionGet();, +        assertThat(getSettingsResponse.getSetting("test-idx", "index.refresh_interval"), equalTo("10"));, +    }, +, +    @Test]