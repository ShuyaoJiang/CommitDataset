[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/logging/CppLogMessage.java, +import java.time.Instant;, +        PARSER.declareField(CppLogMessage::setTimestamp, p -> Instant.ofEpochMilli(p.longValue()), TIMESTAMP_FIELD, ValueType.LONG);, +    private Instant timestamp;, +        timestamp = Instant.now();, +        timestamp = Instant.ofEpochMilli(in.readVLong());, +        out.writeVLong(timestamp.toEpochMilli());, +        builder.field(TIMESTAMP_FIELD.getPreferredName(), timestamp.toEpochMilli());, +    public Instant getTimestamp() {, +    public void setTimestamp(Instant d) {, +    /**, +     * Definition of similar message in order to summarize them., +     *, +     * Note: Assuming line and file are already unique, paranoia: check that, +     * line logging is enabled., +     *, +     * @param other, +     *            message to compare with, +     * @return true if messages are similar, +     */, +    public boolean isSimilarTo(CppLogMessage other) {, +        return other != null && line > 0 && line == other.line && file.equals(other.file) && level.equals(other.level);, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/logging/CppLogMessage.java, +import java.time.Instant;, +        PARSER.declareField(CppLogMessage::setTimestamp, p -> Instant.ofEpochMilli(p.longValue()), TIMESTAMP_FIELD, ValueType.LONG);, +    private Instant timestamp;, +        timestamp = Instant.now();, +        timestamp = Instant.ofEpochMilli(in.readVLong());, +        out.writeVLong(timestamp.toEpochMilli());, +        builder.field(TIMESTAMP_FIELD.getPreferredName(), timestamp.toEpochMilli());, +    public Instant getTimestamp() {, +    public void setTimestamp(Instant d) {, +    /**, +     * Definition of similar message in order to summarize them., +     *, +     * Note: Assuming line and file are already unique, paranoia: check that, +     * line logging is enabled., +     *, +     * @param other, +     *            message to compare with, +     * @return true if messages are similar, +     */, +    public boolean isSimilarTo(CppLogMessage other) {, +        return other != null && line > 0 && line == other.line && file.equals(other.file) && level.equals(other.level);, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/logging/CppLogMessageHandler.java, +import java.time.Instant;, +import java.time.temporal.ChronoUnit;, +    private static final long MAX_MESSAGE_INTERVAL_SECONDS = 10;, +    private MessageSummary lastMessageSummary = new MessageSummary();, +, +            // check if there is some leftover from log summarization, +            if (lastMessageSummary.count > 0) {, +                logSummarizedMessage();, +            }, +, +            // get out of here quickly if level isn't of interest, +            if (!LOGGER.isEnabled(level)) {, +                return;, +            }, +, +            // log message summarization is disabled for debug, +            if (!LOGGER.isDebugEnabled()) {, +                // log summarization: log 1st message, count all consecutive messages arriving, +                // in a certain time window and summarize them as 1 message, +                if (msg.isSimilarTo(lastMessageSummary.message), +                        && (lastMessageSummary.timestamp.until(msg.getTimestamp(), ChronoUnit.SECONDS) < MAX_MESSAGE_INTERVAL_SECONDS)) {, +, +                    // this is a repeated message, so do not log it, but count, +                    lastMessageSummary.count++;, +                    lastMessageSummary.message = msg;, +                    return;, +                    // not similar, flush last summary if necessary, +                } else if (lastMessageSummary.count > 0) {, +                    // log last message with summary, +                    logSummarizedMessage();, +                }, +, +                lastMessageSummary.reset(msg.getTimestamp(), msg, level);, +            }, +    private void logSummarizedMessage() {, +        // edge case: for 1 repeat, only log the message as is, +        if (lastMessageSummary.count > 1) {, +            if (jobId != null) {, +                LOGGER.log(lastMessageSummary.level, "[{}] [{}/{}] [{}@{}] {} | repeated [{}]", jobId,, +                        lastMessageSummary.message.getLogger(), lastMessageSummary.message.getPid(), lastMessageSummary.message.getFile(),, +                        lastMessageSummary.message.getLine(), lastMessageSummary.message.getMessage(), lastMessageSummary.count);, +            } else {, +                LOGGER.log(lastMessageSummary.level, "[{}/{}] [{}@{}] {} | repeated [{}]", lastMessageSummary.message.getLogger(),, +                        lastMessageSummary.message.getPid(), lastMessageSummary.message.getFile(), lastMessageSummary.message.getLine(),, +                        lastMessageSummary.message.getMessage(), lastMessageSummary.count);, +            }, +        } else {, +            if (jobId != null) {, +                LOGGER.log(lastMessageSummary.level, "[{}] [{}/{}] [{}@{}] {}", jobId, lastMessageSummary.message.getLogger(),, +                        lastMessageSummary.message.getPid(), lastMessageSummary.message.getFile(), lastMessageSummary.message.getLine(),, +                        lastMessageSummary.message.getMessage());]