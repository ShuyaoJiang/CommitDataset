[+++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                final SeqNoStats seqNoStats;, +                switch (openMode) {, +                    case OPEN_INDEX_AND_TRANSLOG:, +                        writer = createWriter(false);, +                        seqNoStats = loadSeqNoStatsFromLuceneAndTranslog(engineConfig.getTranslogConfig(), writer);, +                        break;, +                    case OPEN_INDEX_CREATE_TRANSLOG:, +                        writer = createWriter(false);, +                        seqNoStats = loadSeqNoStatsLucene(SequenceNumbersService.UNASSIGNED_SEQ_NO, writer);, +                        break;, +                    case CREATE_INDEX_AND_TRANSLOG:, +                        writer = createWriter(true);, +                        seqNoStats = new SeqNoStats(, +                            SequenceNumbersService.NO_OPS_PERFORMED,, +                            SequenceNumbersService.NO_OPS_PERFORMED,, +                            SequenceNumbersService.UNASSIGNED_SEQ_NO);, +                        break;, +                    default:, +                        throw new IllegalArgumentException(openMode.toString());, +                logger.trace("recovered [{}]", seqNoStats);, +                seqNoService = sequenceNumberService(shardId, engineConfig.getIndexSettings(), seqNoStats);, +    private static SequenceNumbersService sequenceNumberService(, +        final ShardId shardId,, +        final IndexSettings indexSettings,, +        final SeqNoStats seqNoStats) {, +        return new SequenceNumbersService(, +            shardId,, +            indexSettings,, +            seqNoStats.getMaxSeqNo(),, +            seqNoStats.getLocalCheckpoint(),, +            seqNoStats.getGlobalCheckpoint());, +    }, +, +     * Reads the sequence number stats from the Lucene commit point (maximum sequence number and local checkpoint) and the translog, +     * @param translogConfig the translog config (for the global checkpoint), +     * @param indexWriter    the index writer (for the Lucene commit point), +    private static SeqNoStats loadSeqNoStatsFromLuceneAndTranslog(, +        final TranslogConfig translogConfig,, +        final IndexWriter indexWriter) throws IOException {, +        long globalCheckpoint = Translog.readGlobalCheckpoint(translogConfig.getTranslogPath());, +        return loadSeqNoStatsLucene(globalCheckpoint, indexWriter);, +    }, +, +    /**, +     * Reads the sequence number stats from the Lucene commit point (maximum sequence number and local checkpoint) and uses the, +     * specified global checkpoint., +     *, +     * @param globalCheckpoint the global checkpoint to use, +     * @param indexWriter the index writer (for the Lucene commit point), +     * @return the sequence number stats, +     */, +    private static SeqNoStats loadSeqNoStatsLucene(final long globalCheckpoint, final IndexWriter indexWriter) {, +        for (Map.Entry<String, String> entry : indexWriter.getLiveCommitData()) {]