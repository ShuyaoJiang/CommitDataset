[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameField.java, +    public static final String TRANSFORM_ID = "transform_id";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameField.java, +    public static final String TRANSFORM_ID = "transform_id";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameMessages.java, +    public static final String DATA_FRAME_FAILED_TO_PERSIST_STATS = "Failed to persist data frame statistics for transform [{0}]";, +    public static final String DATA_FRAME_UNKNOWN_TRANSFORM_STATS = "Statistics for transform [{0}] could not be found";, +    public static final String FAILED_TO_PARSE_TRANSFORM_STATISTICS_CONFIGURATION =, +        "Failed to parse transform statistics for data frame transform [{0}]";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameField.java, +    public static final String TRANSFORM_ID = "transform_id";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameMessages.java, +    public static final String DATA_FRAME_FAILED_TO_PERSIST_STATS = "Failed to persist data frame statistics for transform [{0}]";, +    public static final String DATA_FRAME_UNKNOWN_TRANSFORM_STATS = "Statistics for transform [{0}] could not be found";, +    public static final String FAILED_TO_PARSE_TRANSFORM_STATISTICS_CONFIGURATION =, +        "Failed to parse transform statistics for data frame transform [{0}]";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/action/GetDataFrameTransformsStatsAction.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.xpack.core.action.util.PageParams;, +import java.util.ArrayList;, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +        private PageParams pageParams = PageParams.defaultParams();, +, +        public static final int MAX_SIZE_RETURN = 1000;, +        // used internally to expand the queried id expression, +        private List<String> expandedIds = Collections.emptyList();, +            expandedIds = in.readList(StreamInput::readString);, +            pageParams = in.readOptionalWriteable(PageParams::new);, +            // Only get tasks that we have expanded to, +            return expandedIds.stream(), +                .anyMatch(transformId -> task.getDescription().equals(DataFrameField.PERSISTENT_TASK_DESCRIPTION_PREFIX + transformId));, +        public List<String> getExpandedIds() {, +            return expandedIds;, +        }, +, +        public void setExpandedIds(List<String> expandedIds) {, +            this.expandedIds = Collections.unmodifiableList(new ArrayList<>(expandedIds));, +        }, +, +        public final void setPageParams(PageParams pageParams) {, +            this.pageParams = pageParams;, +        }, +, +        public final PageParams getPageParams() {, +            return pageParams;, +        }, +, +            out.writeStringCollection(expandedIds);, +            out.writeOptionalWriteable(pageParams);, +            ActionRequestValidationException exception = null;, +            if (getPageParams() != null && getPageParams().getSize() > MAX_SIZE_RETURN) {, +                exception = addValidationError("Param [" + PageParams.SIZE.getPreferredName() +, +                    "] has a max acceptable value of [" + MAX_SIZE_RETURN + "]", exception);, +            }, +            return exception;, +            return Objects.hash(id, pageParams);, +            return Objects.equals(id, other.id) && Objects.equals(pageParams, other.pageParams);, +                List<? extends ElasticsearchException> nodeFailures) {, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameField.java, +    public static final String TRANSFORM_ID = "transform_id";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/DataFrameMessages.java, +    public static final String DATA_FRAME_FAILED_TO_PERSIST_STATS = "Failed to persist data frame statistics for transform [{0}]";, +    public static final String DATA_FRAME_UNKNOWN_TRANSFORM_STATS = "Statistics for transform [{0}] could not be found";, +    public static final String FAILED_TO_PARSE_TRANSFORM_STATISTICS_CONFIGURATION =, +        "Failed to parse transform statistics for data frame transform [{0}]";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/action/GetDataFrameTransformsStatsAction.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.xpack.core.action.util.PageParams;, +import java.util.ArrayList;, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +        private PageParams pageParams = PageParams.defaultParams();, +, +        public static final int MAX_SIZE_RETURN = 1000;, +        // used internally to expand the queried id expression, +        private List<String> expandedIds = Collections.emptyList();, +            expandedIds = in.readList(StreamInput::readString);, +            pageParams = in.readOptionalWriteable(PageParams::new);, +            // Only get tasks that we have expanded to, +            return expandedIds.stream(), +                .anyMatch(transformId -> task.getDescription().equals(DataFrameField.PERSISTENT_TASK_DESCRIPTION_PREFIX + transformId));, +        public List<String> getExpandedIds() {, +            return expandedIds;, +        }, +, +        public void setExpandedIds(List<String> expandedIds) {, +            this.expandedIds = Collections.unmodifiableList(new ArrayList<>(expandedIds));, +        }, +, +        public final void setPageParams(PageParams pageParams) {, +            this.pageParams = pageParams;, +        }, +, +        public final PageParams getPageParams() {, +            return pageParams;, +        }, +, +            out.writeStringCollection(expandedIds);, +            out.writeOptionalWriteable(pageParams);]