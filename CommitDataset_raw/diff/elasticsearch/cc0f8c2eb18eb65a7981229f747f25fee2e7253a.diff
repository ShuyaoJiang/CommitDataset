[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryParsingException;, +        } catch (QueryParsingException e) {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryParsingException;, +        } catch (QueryParsingException e) {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryParsingException;, +        } catch (QueryParsingException e) {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.common.geo.GeoPoint;, +            case 22:, +                return readGeoPoint();, +    public GeoPoint readGeoPoint() throws IOException {, +        return new GeoPoint(readDouble(), readDouble());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryParsingException;, +        } catch (QueryParsingException e) {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.common.geo.GeoPoint;, +            case 22:, +                return readGeoPoint();, +    public GeoPoint readGeoPoint() throws IOException {, +        return new GeoPoint(readDouble(), readDouble());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.common.geo.GeoPoint;, +        } else if (type == GeoPoint.class) {, +            writeByte((byte) 22);, +            writeDouble(((GeoPoint) value).lat());, +            writeDouble(((GeoPoint) value).lon());, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryParsingException;, +        } catch (QueryParsingException e) {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.common.geo.GeoPoint;, +            case 22:, +                return readGeoPoint();, +    public GeoPoint readGeoPoint() throws IOException {, +        return new GeoPoint(readDouble(), readDouble());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.common.geo.GeoPoint;, +        } else if (type == GeoPoint.class) {, +            writeByte((byte) 22);, +            writeDouble(((GeoPoint) value).lat());, +            writeDouble(((GeoPoint) value).lon());, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +import org.elasticsearch.index.cache.bitset.BitsetFilterCache;, +import org.elasticsearch.index.query.QueryParsingException;, +            throw new QueryParsingException(context, "Failed to parse", e);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        exceptions.put(org.elasticsearch.index.query.QueryParsingException.class, 40);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.index.query.QueryParsingException;, +        } catch (QueryParsingException e) {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.common.geo.GeoPoint;, +            case 22:, +                return readGeoPoint();, +    public GeoPoint readGeoPoint() throws IOException {, +        return new GeoPoint(readDouble(), readDouble());, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import org.elasticsearch.common.geo.GeoPoint;, +        } else if (type == GeoPoint.class) {, +            writeByte((byte) 22);, +            writeDouble(((GeoPoint) value).lat());, +            writeDouble(((GeoPoint) value).lon());, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueriesRegistry.java, +import org.elasticsearch.index.cache.bitset.BitsetFilterCache;, +import org.elasticsearch.index.query.QueryParsingException;, +            throw new QueryParsingException(context, "Failed to parse", e);, +++ b/core/src/main/java/org/elasticsearch/index/query/BoolQueryParser.java, +    public Query parse(QueryParseContext parseContext) throws IOException, QueryParsingException {, +                    throw new QueryParsingException(parseContext, "[bool] query does not support [" + currentFieldName + "]");, +                        throw new QueryParsingException(parseContext, "bool query does not support [" + currentFieldName + "]");, +                    throw new QueryParsingException(parseContext, "[bool] query does not support [" + currentFieldName + "]");]