[+++ b/docs/reference/query-dsl/match-phrase-query.asciidoc, +, +This query also accepts `zero_terms_query`, as explained in <<query-dsl-match-query, `match` query>>., +++ b/docs/reference/query-dsl/match-phrase-query.asciidoc, +, +This query also accepts `zero_terms_query`, as explained in <<query-dsl-match-query, `match` query>>., +++ b/server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java, +import org.elasticsearch.Version;, +import org.elasticsearch.index.search.MatchQuery.ZeroTermsQuery;, +    public static final ParseField ZERO_TERMS_QUERY_FIELD = new ParseField("zero_terms_query");, +    private ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            zeroTermsQuery = ZeroTermsQuery.readFromStream(in);, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            zeroTermsQuery.writeTo(out);, +        }, +    /**, +     * Sets query to use in case no query terms are available, e.g. after analysis removed them., +     * Defaults to {@link ZeroTermsQuery#NONE}, but can be set to, +     * {@link ZeroTermsQuery#ALL} instead., +     */, +    public MatchPhraseQueryBuilder zeroTermsQuery(ZeroTermsQuery zeroTermsQuery) {, +        if (zeroTermsQuery == null) {, +            throw new IllegalArgumentException("[" + NAME + "] requires zeroTermsQuery to be non-null");, +        }, +        this.zeroTermsQuery = zeroTermsQuery;, +        return this;, +    }, +, +    public ZeroTermsQuery zeroTermsQuery() {, +        return this.zeroTermsQuery;, +    }, +, +        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());, +        matchQuery.setZeroTermsQuery(zeroTermsQuery);, +        return Objects.equals(fieldName, other.fieldName), +            && Objects.equals(value, other.value), +            && Objects.equals(analyzer, other.analyzer), +            && Objects.equals(slop, other.slop), +            && Objects.equals(zeroTermsQuery, other.zeroTermsQuery);, +        ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;, +                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {, +                            String zeroTermsDocs = parser.text();, +                            if ("none".equalsIgnoreCase(zeroTermsDocs)) {, +                                zeroTermsQuery = ZeroTermsQuery.NONE;, +                            } else if ("all".equalsIgnoreCase(zeroTermsDocs)) {, +                                zeroTermsQuery = ZeroTermsQuery.ALL;, +                            } else {, +                                throw new ParsingException(parser.getTokenLocation(),, +                                    "Unsupported zero_terms_docs value [" + zeroTermsDocs + "]");, +                            }, +        matchQuery.zeroTermsQuery(zeroTermsQuery);, +++ b/docs/reference/query-dsl/match-phrase-query.asciidoc, +, +This query also accepts `zero_terms_query`, as explained in <<query-dsl-match-query, `match` query>>., +++ b/server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java, +import org.elasticsearch.Version;, +import org.elasticsearch.index.search.MatchQuery.ZeroTermsQuery;, +    public static final ParseField ZERO_TERMS_QUERY_FIELD = new ParseField("zero_terms_query");, +    private ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            zeroTermsQuery = ZeroTermsQuery.readFromStream(in);, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {, +            zeroTermsQuery.writeTo(out);, +        }, +    /**, +     * Sets query to use in case no query terms are available, e.g. after analysis removed them., +     * Defaults to {@link ZeroTermsQuery#NONE}, but can be set to, +     * {@link ZeroTermsQuery#ALL} instead., +     */, +    public MatchPhraseQueryBuilder zeroTermsQuery(ZeroTermsQuery zeroTermsQuery) {, +        if (zeroTermsQuery == null) {, +            throw new IllegalArgumentException("[" + NAME + "] requires zeroTermsQuery to be non-null");, +        }, +        this.zeroTermsQuery = zeroTermsQuery;, +        return this;, +    }, +, +    public ZeroTermsQuery zeroTermsQuery() {, +        return this.zeroTermsQuery;, +    }, +, +        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());, +        matchQuery.setZeroTermsQuery(zeroTermsQuery);, +        return Objects.equals(fieldName, other.fieldName), +            && Objects.equals(value, other.value), +            && Objects.equals(analyzer, other.analyzer), +            && Objects.equals(slop, other.slop), +            && Objects.equals(zeroTermsQuery, other.zeroTermsQuery);, +        ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;, +                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {, +                            String zeroTermsDocs = parser.text();, +                            if ("none".equalsIgnoreCase(zeroTermsDocs)) {, +                                zeroTermsQuery = ZeroTermsQuery.NONE;, +                            } else if ("all".equalsIgnoreCase(zeroTermsDocs)) {, +                                zeroTermsQuery = ZeroTermsQuery.ALL;]