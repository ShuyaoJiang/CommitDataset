[+++ b/core/src/main/java/org/elasticsearch/ingest/processor/DateFormat.java, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +    },, +    Joda {, +        @Override, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +            return DateTimeFormat.forPattern(format), +    };, +    abstract Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale);, +, +    static DateFormat fromString(String format) {, +        switch (format) {, +            case "ISO8601":, +                return Iso8601;, +            case "UNIX":, +                return Unix;, +            case "UNIX_MS":, +                return UnixMs;, +            case "TAI64N":, +                return Tai64n;, +            default:, +                return Joda;, +        }, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/DateFormat.java, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +    },, +    Joda {, +        @Override, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +            return DateTimeFormat.forPattern(format), +    };, +    abstract Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale);, +, +    static DateFormat fromString(String format) {, +        switch (format) {, +            case "ISO8601":, +                return Iso8601;, +            case "UNIX":, +                return Unix;, +            case "UNIX_MS":, +                return UnixMs;, +            case "TAI64N":, +                return Tai64n;, +            default:, +                return Joda;, +        }, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/DateProcessor.java, +import org.elasticsearch.ingest.core.IngestDocument;, +            DateFormat dateFormat = DateFormat.fromString(matchFormat);, +            dateParsers.add(dateFormat.getFunction(matchFormat, timezone, locale));, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/DateFormat.java, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +    },, +    Joda {, +        @Override, +        Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale) {, +            return DateTimeFormat.forPattern(format), +    };, +    abstract Function<String, DateTime> getFunction(String format, DateTimeZone timezone, Locale locale);, +, +    static DateFormat fromString(String format) {, +        switch (format) {, +            case "ISO8601":, +                return Iso8601;, +            case "UNIX":, +                return Unix;, +            case "UNIX_MS":, +                return UnixMs;, +            case "TAI64N":, +                return Tai64n;, +            default:, +                return Joda;, +        }, +++ b/core/src/main/java/org/elasticsearch/ingest/processor/DateProcessor.java, +import org.elasticsearch.ingest.core.IngestDocument;, +            DateFormat dateFormat = DateFormat.fromString(matchFormat);, +            dateParsers.add(dateFormat.getFunction(matchFormat, timezone, locale));, +++ b/core/src/test/java/org/elasticsearch/ingest/processor/DateFormatTests.java, +        Function<String, DateTime> jodaFunction = DateFormat.Joda.getFunction("MMM dd HH:mm:ss Z", DateTimeZone.forOffsetHours(-8), Locale.ENGLISH);, +        assertThat(DateFormat.UnixMs.getFunction(null, DateTimeZone.UTC, null).apply("1000500").getMillis(), equalTo(1000500L));, +        assertThat(DateFormat.Unix.getFunction(null, DateTimeZone.UTC, null).apply("1000.5").getMillis(), equalTo(1000500L));, +        assertThat(DateFormat.Iso8601.getFunction(null, DateTimeZone.UTC, null).apply("2001-01-01T00:00:00-0800").getMillis(), equalTo(978336000000L));, +        Function<String, DateTime> function = DateFormat.Iso8601.getFunction(null, DateTimeZone.UTC, null);, +        assertThat(DateFormat.Tai64n.getFunction(null, DateTimeZone.forOffsetHours(2), null).apply((randomBoolean() ? "@" : "") + input).toString(), equalTo(expected));, +        assertThat(DateFormat.fromString("UNIX_MS"), equalTo(DateFormat.UnixMs));, +        assertThat(DateFormat.fromString("unix_ms"), equalTo(DateFormat.Joda));, +        assertThat(DateFormat.fromString("UNIX"), equalTo(DateFormat.Unix));, +        assertThat(DateFormat.fromString("unix"), equalTo(DateFormat.Joda));, +        assertThat(DateFormat.fromString("ISO8601"), equalTo(DateFormat.Iso8601));, +        assertThat(DateFormat.fromString("iso8601"), equalTo(DateFormat.Joda));, +        assertThat(DateFormat.fromString("TAI64N"), equalTo(DateFormat.Tai64n));]