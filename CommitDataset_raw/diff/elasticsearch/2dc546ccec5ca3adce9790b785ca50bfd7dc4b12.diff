[+++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +            final IndexMetaData sourceIndexMeta = allocation.metaData().index(mergeSourceIndex);, +            if (sourceIndexMeta != null) {, +                final Set<ShardId> shardIds = IndexMetaData.selectRecoverFromShards(shard.id(),, +                    sourceIndexMeta, metaData.getNumberOfShards());, +            }, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +            final IndexMetaData sourceIndexMeta = allocation.metaData().index(mergeSourceIndex);, +            if (sourceIndexMeta != null) {, +                final Set<ShardId> shardIds = IndexMetaData.selectRecoverFromShards(shard.id(),, +                    sourceIndexMeta, metaData.getNumberOfShards());, +            }, +++ b/server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java, +, +        // check that the DiskThresholdDecider still works even if the source index has been deleted, +        ClusterState clusterStateWithMissingSourceIndex = ClusterState.builder(clusterState), +            .metaData(MetaData.builder(metaData).remove("test")), +            .routingTable(RoutingTable.builder(clusterState.routingTable()).remove("test").build()), +            .build();, +, +        allocationService.reroute(clusterState, "foo");, +, +        RoutingAllocation allocationWithMissingSourceIndex = new RoutingAllocation(null,, +            clusterStateWithMissingSourceIndex.getRoutingNodes(), clusterStateWithMissingSourceIndex, info, 0);, +, +        assertEquals(42L, DiskThresholdDecider.getExpectedShardSize(target, allocationWithMissingSourceIndex, 42L));, +        assertEquals(42L, DiskThresholdDecider.getExpectedShardSize(target2, allocationWithMissingSourceIndex, 42L));]