[+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search_shards/10_basic.yml, +  - length: { indices.test_index.filter.bool.should: 2 }, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search_shards/10_basic.yml, +  - length: { indices.test_index.filter.bool.should: 2 }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/shards/TransportClusterSearchShardsAction.java, +        Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(clusterState, request.indices());, +            final AliasFilter aliasFilter = indicesService.buildAliasFilter(clusterState, index, indicesAndAliases);, +                indicesAndAliases);, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search_shards/10_basic.yml, +  - length: { indices.test_index.filter.bool.should: 2 }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/shards/TransportClusterSearchShardsAction.java, +        Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(clusterState, request.indices());, +            final AliasFilter aliasFilter = indicesService.buildAliasFilter(clusterState, index, indicesAndAliases);, +                indicesAndAliases);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final ClusterState clusterState = clusterService.state();, +        final Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(clusterState, request.indices());, +        final AliasFilter aliasFilter = searchService.buildAliasFilter(clusterState, shard.getIndexName(), indicesAndAliases);, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search_shards/10_basic.yml, +  - length: { indices.test_index.filter.bool.should: 2 }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/shards/TransportClusterSearchShardsAction.java, +        Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(clusterState, request.indices());, +            final AliasFilter aliasFilter = indicesService.buildAliasFilter(clusterState, index, indicesAndAliases);, +                indicesAndAliases);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final ClusterState clusterState = clusterService.state();, +        final Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(clusterState, request.indices());, +        final AliasFilter aliasFilter = searchService.buildAliasFilter(clusterState, shard.getIndexName(), indicesAndAliases);, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +import java.util.Set;, +        final Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(state, request.request().index());, +        final AliasFilter aliasFilter = searchService.buildAliasFilter(state, request.concreteIndex(), indicesAndAliases);, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search_shards/10_basic.yml, +  - length: { indices.test_index.filter.bool.should: 2 }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/shards/TransportClusterSearchShardsAction.java, +        Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(clusterState, request.indices());, +            final AliasFilter aliasFilter = indicesService.buildAliasFilter(clusterState, index, indicesAndAliases);, +                indicesAndAliases);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final ClusterState clusterState = clusterService.state();, +        final Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(clusterState, request.indices());, +        final AliasFilter aliasFilter = searchService.buildAliasFilter(clusterState, shard.getIndexName(), indicesAndAliases);, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +import java.util.Set;, +        final Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(state, request.request().index());, +        final AliasFilter aliasFilter = searchService.buildAliasFilter(state, request.concreteIndex(), indicesAndAliases);, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +        final Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(clusterState, request.indices());, +            AliasFilter aliasFilter = searchService.buildAliasFilter(clusterState, index.getName(), indicesAndAliases);, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search_shards/10_basic.yml, +  - length: { indices.test_index.filter.bool.should: 2 }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/shards/TransportClusterSearchShardsAction.java, +        Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(clusterState, request.indices());, +            final AliasFilter aliasFilter = indicesService.buildAliasFilter(clusterState, index, indicesAndAliases);, +                indicesAndAliases);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final ClusterState clusterState = clusterService.state();, +        final Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(clusterState, request.indices());, +        final AliasFilter aliasFilter = searchService.buildAliasFilter(clusterState, shard.getIndexName(), indicesAndAliases);, +++ b/server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +import java.util.Set;, +        final Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(state, request.request().index());, +        final AliasFilter aliasFilter = searchService.buildAliasFilter(state, request.concreteIndex(), indicesAndAliases);, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +        final Set<String> indicesAndAliases = indexNameExpressionResolver.resolveExpressions(clusterState, request.indices());, +            AliasFilter aliasFilter = searchService.buildAliasFilter(clusterState, index.getName(), indicesAndAliases);, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +import java.util.Collection;, +import java.util.Objects;, +import java.util.Spliterators;, +import java.util.stream.StreamSupport;, +     * Resolve an array of expressions to the set of indices and aliases that these expressions match., +     */, +    public Set<String> resolveExpressions(ClusterState state, String... expressions) {, +        Context context = new Context(state, IndicesOptions.lenientExpandOpen(), true, false);, +        List<String> resolvedExpressions = Arrays.asList(expressions);, +        for (ExpressionResolver expressionResolver : expressionResolvers) {, +            resolvedExpressions = expressionResolver.resolve(context, resolvedExpressions);, +        }, +        return Collections.unmodifiableSet(new HashSet<>(resolvedExpressions));, +    }, +, +    /**, +     * <b>NOTE</b>: The provided expressions must have been resolved already via {@link #resolveExpressions}., +    public String[] filteringAliases(ClusterState state, String index, Set<String> resolvedExpressions) {, +        return indexAliases(state, index, AliasMetaData::filteringRequired, false, resolvedExpressions);, +    }, +, +    /**, +     * Whether to generate the candidate set from index aliases, or from the set of resolved expressions., +     * @param indexAliasesSize        the number of aliases of the index, +     * @param resolvedExpressionsSize the number of resolved expressions, +     */, +    // pkg-private for testing, +    boolean iterateIndexAliases(int indexAliasesSize, int resolvedExpressionsSize) {, +        return indexAliasesSize <= resolvedExpressionsSize;, +     * <p><b>NOTE</b>: the provided expressions must have been resolved already via {@link #resolveExpressions}., +            Set<String> resolvedExpressions) {, +]