[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    /**, +     * if <code>true</code> each node will be configured with <tt>discovery.zen.minimum_master_nodes</tt> set, +     * to the total number of nodes in the cluster. This will also cause that each node has `0s` state recovery, +     * timeout which can lead to issues if for instance an existing clusterstate is expected to be recovered, +     * before any tests start, +     */, +    @Input, +    boolean useMinimumMasterNodes = true, +, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    /**, +     * if <code>true</code> each node will be configured with <tt>discovery.zen.minimum_master_nodes</tt> set, +     * to the total number of nodes in the cluster. This will also cause that each node has `0s` state recovery, +     * timeout which can lead to issues if for instance an existing clusterstate is expected to be recovered, +     * before any tests start, +     */, +    @Input, +    boolean useMinimumMasterNodes = true, +, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +        if (node.config.useMinimumMasterNodes && node.config.numNodes > 1) {]