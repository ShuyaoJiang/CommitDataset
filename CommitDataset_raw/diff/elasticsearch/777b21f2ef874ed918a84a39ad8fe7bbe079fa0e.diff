[+++ b/docs/reference/search/request/inner-hits.asciidoc, +In both cases, the actual matches in the different scopes that caused a document to be returned is hidden. In many cases,, +++ b/docs/reference/search/request/inner-hits.asciidoc, +In both cases, the actual matches in the different scopes that caused a document to be returned is hidden. In many cases,, +++ b/server/src/main/java/org/elasticsearch/persistent/CompletionPersistentTaskAction.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.persistent;, +, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.master.AcknowledgedResponse;, +import org.elasticsearch.action.support.master.MasterNodeOperationRequestBuilder;, +import org.elasticsearch.action.support.master.MasterNodeRequest;, +import org.elasticsearch.action.support.master.TransportMasterNodeAction;, +import org.elasticsearch.client.ElasticsearchClient;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.block.ClusterBlockException;, +import org.elasticsearch.cluster.block.ClusterBlockLevel;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.TransportResponse.Empty;, +import org.elasticsearch.transport.TransportService;, +, +import java.io.IOException;, +import java.util.Objects;, +, +/**, + * Action that is used by executor node to indicate that the persistent action finished or failed on the node and needs to be, + * removed from the cluster state in case of successful completion or restarted on some other node in case of failure., + */, +public class CompletionPersistentTaskAction extends Action<CompletionPersistentTaskAction.Request,, +        CompletionPersistentTaskAction.Response,, +        CompletionPersistentTaskAction.RequestBuilder> {, +, +    public static final CompletionPersistentTaskAction INSTANCE = new CompletionPersistentTaskAction();, +    public static final String NAME = "cluster:admin/persistent/completion";, +, +    private CompletionPersistentTaskAction() {, +        super(NAME);, +    }, +, +    @Override, +    public RequestBuilder newRequestBuilder(ElasticsearchClient client) {, +        return new RequestBuilder(client, this);, +    }, +, +    @Override, +    public Response newResponse() {, +        return new Response();, +    }, +, +    public static class Request extends MasterNodeRequest<Request> {, +, +        private long taskId;, +, +        private Exception exception;, +, +        public Request() {, +, +        }, +, +        public Request(long taskId, Exception exception) {, +            this.taskId = taskId;, +            this.exception = exception;, +        }, +, +        @Override, +        public void readFrom(StreamInput in) throws IOException {, +            super.readFrom(in);, +            taskId = in.readLong();, +            exception = in.readException();, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            super.writeTo(out);]