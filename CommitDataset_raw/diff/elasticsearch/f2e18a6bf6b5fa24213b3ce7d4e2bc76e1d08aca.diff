[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import java.util.regex.Matcher, +                        final String message = String.format(, +                        throwDockerRequiredException(message), +                    }, +, +                    // we use a multi-stage Docker build, check the Docker version since 17.05, +                    final ByteArrayOutputStream dockerVersionOutput = new ByteArrayOutputStream(), +                    LoggedExec.exec(, +                            rootProject,, +                            { ExecSpec it ->, +                                it.commandLine = [dockerBinary, '--version'], +                                it.standardOutput = dockerVersionOutput, +                            }), +                    final String dockerVersion = dockerVersionOutput.toString().trim(), +                    final Matcher matcher = dockerVersion =~ /Docker version (\d+\.\d+)\.\d+(?:-ce)?, build [0-9a-f]{7}/, +                    assert matcher.matches() : dockerVersion, +                    final dockerMajorMinorVersion = matcher.group(1), +                    final String[] majorMinor = dockerMajorMinorVersion.split("\\."), +                    if (Integer.parseInt(majorMinor[0]) < 17, +                            || (Integer.parseInt(majorMinor[0]) == 17 && Integer.parseInt(majorMinor[1]) < 5)) {, +                        final String message = String.format(, +                                Locale.ROOT,, +                                "building Docker images requires Docker version 17.05+ due to use of multi-stage builds yet was [%s]",, +                                dockerVersion), +                        throwDockerRequiredException(message), +                    }, +, +                    final ByteArrayOutputStream dockerImagesErrorOutput = new ByteArrayOutputStream(), +                    // the Docker binary executes, check that we can execute a privileged command, +                    final ExecResult dockerImagesResult = LoggedExec.exec(, +                            rootProject,, +                            { ExecSpec it ->, +                                it.commandLine = [dockerBinary, "images"], +                                it.errorOutput = dockerImagesErrorOutput, +                                it.ignoreExitValue = true, +                            }), +, +                    if (dockerImagesResult.exitValue != 0) {, +                        final String message = String.format(, +                                dockerImagesResult.exitValue,, +                                dockerImagesErrorOutput.toString().trim()), +                        throwDockerRequiredException(message), +, +    private static void throwDockerRequiredException(final String message) {, +        throw new GradleException(, +                message + "\nyou can address this by attending to the reported issue, ", +                        + "removing the offending tasks from being executed, ", +                        + "or by passing -Dbuild.docker=false"), +    }, +]