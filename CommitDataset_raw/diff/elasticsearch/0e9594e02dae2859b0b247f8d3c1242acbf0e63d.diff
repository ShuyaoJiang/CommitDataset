[+++ b/src/main/java/org/elasticsearch/action/support/TransportAction.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +        private final AtomicInteger index = new AtomicInteger();, +            int i = index.getAndIncrement();, +++ b/src/main/java/org/elasticsearch/action/support/TransportAction.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +        private final AtomicInteger index = new AtomicInteger();, +            int i = index.getAndIncrement();, +++ b/src/main/java/org/elasticsearch/rest/RestController.java, +import java.util.concurrent.atomic.AtomicInteger;, +import static org.elasticsearch.rest.RestStatus.*;, +        private final AtomicInteger index = new AtomicInteger();, +                int loc = index.getAndIncrement();, +++ b/src/main/java/org/elasticsearch/action/support/TransportAction.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +        private final AtomicInteger index = new AtomicInteger();, +            int i = index.getAndIncrement();, +++ b/src/main/java/org/elasticsearch/rest/RestController.java, +import java.util.concurrent.atomic.AtomicInteger;, +import static org.elasticsearch.rest.RestStatus.*;, +        private final AtomicInteger index = new AtomicInteger();, +                int loc = index.getAndIncrement();, +++ b/src/test/java/org/elasticsearch/action/support/TransportActionFilterChainTests.java, +                return Integer.compare(o1.executionToken, o2.executionToken);, +    private final AtomicInteger counter = new AtomicInteger();, +, +    private class TestFilter implements ActionFilter {, +        volatile int executionToken = Integer.MAX_VALUE; //the filters that don't run will go last in the sorted list, +            this.executionToken = counter.incrementAndGet();, +++ b/src/main/java/org/elasticsearch/action/support/TransportAction.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +        private final AtomicInteger index = new AtomicInteger();, +            int i = index.getAndIncrement();, +++ b/src/main/java/org/elasticsearch/rest/RestController.java, +import java.util.concurrent.atomic.AtomicInteger;, +import static org.elasticsearch.rest.RestStatus.*;, +        private final AtomicInteger index = new AtomicInteger();, +                int loc = index.getAndIncrement();, +++ b/src/test/java/org/elasticsearch/action/support/TransportActionFilterChainTests.java, +                return Integer.compare(o1.executionToken, o2.executionToken);, +    private final AtomicInteger counter = new AtomicInteger();, +, +    private class TestFilter implements ActionFilter {, +        volatile int executionToken = Integer.MAX_VALUE; //the filters that don't run will go last in the sorted list, +            this.executionToken = counter.incrementAndGet();, +++ b/src/test/java/org/elasticsearch/rest/FakeRestRequest.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.rest;, +, +import org.elasticsearch.common.bytes.BytesReference;, +, +import java.util.HashMap;, +import java.util.Map;, +, +class FakeRestRequest extends RestRequest {, +, +    private final Map<String, String> headers;, +, +    FakeRestRequest() {, +        this(new HashMap<String, String>());, +    }, +, +    FakeRestRequest(Map<String, String> headers) {, +        this.headers = headers;, +    }, +, +    @Override, +    public Method method() {, +        return Method.GET;, +    }, +, +    @Override, +    public String uri() {, +        return "/";, +    }, +, +    @Override, +    public String rawPath() {]