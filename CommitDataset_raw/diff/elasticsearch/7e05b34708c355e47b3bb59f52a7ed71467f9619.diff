[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('wildcard imports', /^\s*import.*\.\*/), +        // We don't use Java serialization so we fail if it looks like we're trying to., +        patterns.put('declares serialVersionUID', /serialVersionUID/), +        patterns.put('references Serializable', /java\.io\.Serializable/), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('wildcard imports', /^\s*import.*\.\*/), +        // We don't use Java serialization so we fail if it looks like we're trying to., +        patterns.put('declares serialVersionUID', /serialVersionUID/), +        patterns.put('references Serializable', /java\.io\.Serializable/), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('wildcard imports', /^\s*import.*\.\*/), +        // We don't use Java serialization so we fail if it looks like we're trying to., +        patterns.put('declares serialVersionUID', /serialVersionUID/), +        patterns.put('references Serializable', /java\.io\.Serializable/), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +, +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('wildcard imports', /^\s*import.*\.\*/), +        // We don't use Java serialization so we fail if it looks like we're trying to., +        patterns.put('declares serialVersionUID', /serialVersionUID/), +        patterns.put('references Serializable', /java\.io\.Serializable/), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Map<String, Object> pipelineConfig = ConfigurationUtils.readMap(config, Fields.PIPELINE);, +        List<Map<String, Object>> docs = ConfigurationUtils.readList(config, Fields.DOCS);, +            Map<String, Object> document = ConfigurationUtils.readMap(dataMap, Fields.SOURCE);, +            IngestDocument ingestDocument = new IngestDocument(ConfigurationUtils.readStringProperty(dataMap, MetaData.INDEX.getFieldName(), "_index"),, +                    ConfigurationUtils.readStringProperty(dataMap, MetaData.TYPE.getFieldName(), "_type"),, +                    ConfigurationUtils.readStringProperty(dataMap, MetaData.ID.getFieldName(), "_id"),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.ROUTING.getFieldName()),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.PARENT.getFieldName()),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.TIMESTAMP.getFieldName()),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.TTL.getFieldName()),, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('wildcard imports', /^\s*import.*\.\*/), +        // We don't use Java serialization so we fail if it looks like we're trying to., +        patterns.put('declares serialVersionUID', /serialVersionUID/), +        patterns.put('references Serializable', /java\.io\.Serializable/), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Map<String, Object> pipelineConfig = ConfigurationUtils.readMap(config, Fields.PIPELINE);, +        List<Map<String, Object>> docs = ConfigurationUtils.readList(config, Fields.DOCS);, +            Map<String, Object> document = ConfigurationUtils.readMap(dataMap, Fields.SOURCE);, +            IngestDocument ingestDocument = new IngestDocument(ConfigurationUtils.readStringProperty(dataMap, MetaData.INDEX.getFieldName(), "_index"),, +                    ConfigurationUtils.readStringProperty(dataMap, MetaData.TYPE.getFieldName(), "_type"),, +                    ConfigurationUtils.readStringProperty(dataMap, MetaData.ID.getFieldName(), "_id"),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.ROUTING.getFieldName()),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.PARENT.getFieldName()),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.TIMESTAMP.getFieldName()),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.TTL.getFieldName()),, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineResponse.java, +import org.elasticsearch.common.xcontent.ToXContent;, +public class SimulatePipelineResponse extends ActionResponse implements ToXContent {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('wildcard imports', /^\s*import.*\.\*/), +        // We don't use Java serialization so we fail if it looks like we're trying to., +        patterns.put('declares serialVersionUID', /serialVersionUID/), +        patterns.put('references Serializable', /java\.io\.Serializable/), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Map<String, Object> pipelineConfig = ConfigurationUtils.readMap(config, Fields.PIPELINE);, +        List<Map<String, Object>> docs = ConfigurationUtils.readList(config, Fields.DOCS);, +            Map<String, Object> document = ConfigurationUtils.readMap(dataMap, Fields.SOURCE);, +            IngestDocument ingestDocument = new IngestDocument(ConfigurationUtils.readStringProperty(dataMap, MetaData.INDEX.getFieldName(), "_index"),, +                    ConfigurationUtils.readStringProperty(dataMap, MetaData.TYPE.getFieldName(), "_type"),, +                    ConfigurationUtils.readStringProperty(dataMap, MetaData.ID.getFieldName(), "_id"),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.ROUTING.getFieldName()),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.PARENT.getFieldName()),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.TIMESTAMP.getFieldName()),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.TTL.getFieldName()),, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineResponse.java, +import org.elasticsearch.common.xcontent.ToXContent;, +public class SimulatePipelineResponse extends ActionResponse implements ToXContent {, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineTransportAction.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +        patterns.put('wildcard imports', /^\s*import.*\.\*/), +        // We don't use Java serialization so we fail if it looks like we're trying to., +        patterns.put('declares serialVersionUID', /serialVersionUID/), +        patterns.put('references Serializable', /java\.io\.Serializable/), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Map<String, Object> pipelineConfig = ConfigurationUtils.readMap(config, Fields.PIPELINE);, +        List<Map<String, Object>> docs = ConfigurationUtils.readList(config, Fields.DOCS);, +            Map<String, Object> document = ConfigurationUtils.readMap(dataMap, Fields.SOURCE);, +            IngestDocument ingestDocument = new IngestDocument(ConfigurationUtils.readStringProperty(dataMap, MetaData.INDEX.getFieldName(), "_index"),, +                    ConfigurationUtils.readStringProperty(dataMap, MetaData.TYPE.getFieldName(), "_type"),, +                    ConfigurationUtils.readStringProperty(dataMap, MetaData.ID.getFieldName(), "_id"),, +                    ConfigurationUtils.readOptionalStringProperty(dataMap, MetaData.ROUTING.getFieldName()),]