[+++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +    public double factor(int docId) {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +    public double factor(int docId) {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +            double factor = 1.0f;, +                double maxFactor = Double.NEGATIVE_INFINITY;, +                double minFactor = Double.POSITIVE_INFINITY;, +                double totalFactor = 0.0f;, +            return (float)(subQueryBoost * score * factor);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +    public double factor(int docId) {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +            double factor = 1.0f;, +                double maxFactor = Double.NEGATIVE_INFINITY;, +                double minFactor = Double.POSITIVE_INFINITY;, +                double totalFactor = 0.0f;, +            return (float)(subQueryBoost * score * factor);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +    float maxBoost = Float.MAX_VALUE;, +    public void setMaxBoost(float maxBoost) {, +        this.maxBoost = maxBoost;, +    }, +, +    public float getMaxBoost() {, +        return this.maxBoost;, +    }, +, +        if (newQ == subQuery){, +            return this;, +        }, +            return new CustomBoostFactorScorer(this, subQueryScorer, function, maxBoost);, +        private final float maxBoost;, +        private CustomBoostFactorScorer(CustomBoostFactorWeight w, Scorer scorer, ScoreFunction function, float maxBoost), +                throws IOException {, +            this.maxBoost = maxBoost;, +            float factor = (float)function.score(scorer.docID(), scorer.score());, +            return subQueryBoost * Math.min(maxBoost, factor);, +        if (getClass() != o.getClass()), +            return false;, +        return this.getBoost() == other.getBoost() && this.subQuery.equals(other.subQuery) && this.function.equals(other.function), +                && this.maxBoost == other.maxBoost;, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +    public double factor(int docId) {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +            double factor = 1.0f;, +                double maxFactor = Double.NEGATIVE_INFINITY;, +                double minFactor = Double.POSITIVE_INFINITY;, +                double totalFactor = 0.0f;, +            return (float)(subQueryBoost * score * factor);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +    float maxBoost = Float.MAX_VALUE;, +    public void setMaxBoost(float maxBoost) {, +        this.maxBoost = maxBoost;, +    }, +, +    public float getMaxBoost() {, +        return this.maxBoost;, +    }, +, +        if (newQ == subQuery){, +            return this;, +        }, +            return new CustomBoostFactorScorer(this, subQueryScorer, function, maxBoost);, +        private final float maxBoost;, +        private CustomBoostFactorScorer(CustomBoostFactorWeight w, Scorer scorer, ScoreFunction function, float maxBoost), +                throws IOException {, +            this.maxBoost = maxBoost;, +            float factor = (float)function.score(scorer.docID(), scorer.score());, +            return subQueryBoost * Math.min(maxBoost, factor);, +        if (getClass() != o.getClass()), +            return false;, +        return this.getBoost() == other.getBoost() && this.subQuery.equals(other.subQuery) && this.function.equals(other.function), +                && this.maxBoost == other.maxBoost;, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/ScoreFunction.java, +    double factor(int docId);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +    public double factor(int docId) {, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +            double factor = 1.0f;, +                double maxFactor = Double.NEGATIVE_INFINITY;, +                double minFactor = Double.POSITIVE_INFINITY;, +                double totalFactor = 0.0f;, +            return (float)(subQueryBoost * score * factor);, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +    float maxBoost = Float.MAX_VALUE;, +    public void setMaxBoost(float maxBoost) {, +        this.maxBoost = maxBoost;, +    }, +, +    public float getMaxBoost() {, +        return this.maxBoost;, +    }, +, +        if (newQ == subQuery){, +            return this;, +        }, +            return new CustomBoostFactorScorer(this, subQueryScorer, function, maxBoost);, +        private final float maxBoost;, +        private CustomBoostFactorScorer(CustomBoostFactorWeight w, Scorer scorer, ScoreFunction function, float maxBoost)]