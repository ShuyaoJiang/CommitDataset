[+++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, ElectMasterService electMasterService, Version version,, +        this.electMaster = electMasterService;, +, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, ElectMasterService electMasterService, Version version,, +        this.electMaster = electMasterService;, +, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscoveryModule.java, +import org.elasticsearch.discovery.zen.elect.ElectMasterService;, +        bind(ElectMasterService.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, ElectMasterService electMasterService, Version version,, +        this.electMaster = electMasterService;, +, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscoveryModule.java, +import org.elasticsearch.discovery.zen.elect.ElectMasterService;, +        bind(ElectMasterService.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/discovery/zen/elect/ElectMasterService.java, +import org.elasticsearch.common.inject.Inject;, +import java.util.*;, +    @Inject, +     * Returns the given nodes sorted by likelyhood of being elected as master, most likely first., +     * Non-master nodes are not removed but are rather put in the end, +     * @param nodes, +     * @return, +     */, +    public List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes) {, +        ArrayList<DiscoveryNode> sortedNodes = Lists.newArrayList(nodes);, +        CollectionUtil.introSort(sortedNodes, nodeComparator);, +        return sortedNodes;, +    }, +, +    /**, +            if (o1.masterNode() && !o2.masterNode()) {, +                return -1;, +            }, +            if (!o1.masterNode() && o2.masterNode()) {, +                return 1;, +            }, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, ElectMasterService electMasterService, Version version,, +        this.electMaster = electMasterService;, +, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscoveryModule.java, +import org.elasticsearch.discovery.zen.elect.ElectMasterService;, +        bind(ElectMasterService.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/discovery/zen/elect/ElectMasterService.java, +import org.elasticsearch.common.inject.Inject;, +import java.util.*;, +    @Inject, +     * Returns the given nodes sorted by likelyhood of being elected as master, most likely first., +     * Non-master nodes are not removed but are rather put in the end, +     * @param nodes, +     * @return, +     */, +    public List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes) {, +        ArrayList<DiscoveryNode> sortedNodes = Lists.newArrayList(nodes);, +        CollectionUtil.introSort(sortedNodes, nodeComparator);, +        return sortedNodes;, +    }, +, +    /**, +            if (o1.masterNode() && !o2.masterNode()) {, +                return -1;, +            }, +            if (!o1.masterNode() && o2.masterNode()) {, +                return 1;, +            }, +++ b/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPingService.java, +import org.elasticsearch.discovery.zen.elect.ElectMasterService;, +                          ElectMasterService electMasterService, @Nullable Set<UnicastHostsProvider> unicastHostsProviders) {, +        this(settings, threadPool, transportService, clusterName, networkService, Version.CURRENT, electMasterService, unicastHostsProviders);, +                          Version version, ElectMasterService electMasterService, @Nullable Set<UnicastHostsProvider> unicastHostsProviders) {, +        zenPingsBuilder.add(new UnicastZenPing(settings, threadPool, transportService, clusterName, version, electMasterService, unicastHostsProviders));, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, ElectMasterService electMasterService, Version version,, +        this.electMaster = electMasterService;, +, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscoveryModule.java, +import org.elasticsearch.discovery.zen.elect.ElectMasterService;, +        bind(ElectMasterService.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/discovery/zen/elect/ElectMasterService.java, +import org.elasticsearch.common.inject.Inject;, +import java.util.*;, +    @Inject, +     * Returns the given nodes sorted by likelyhood of being elected as master, most likely first., +     * Non-master nodes are not removed but are rather put in the end, +     * @param nodes, +     * @return, +     */, +    public List<DiscoveryNode> sortByMasterLikelihood(Iterable<DiscoveryNode> nodes) {, +        ArrayList<DiscoveryNode> sortedNodes = Lists.newArrayList(nodes);, +        CollectionUtil.introSort(sortedNodes, nodeComparator);, +        return sortedNodes;, +    }, +, +    /**, +            if (o1.masterNode() && !o2.masterNode()) {, +                return -1;]