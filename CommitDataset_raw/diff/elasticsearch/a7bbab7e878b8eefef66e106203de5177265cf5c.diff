[+++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +import org.elasticsearch.search.rescore.RescorePhase;, +import org.elasticsearch.search.rescore.RescoreSearchContext;, +import org.elasticsearch.search.rescore.Rescorer;, +            Explanation explanation;, +            if (context.rescore() != null) {, +                RescoreSearchContext ctx = context.rescore();, +                Rescorer rescorer = ctx.rescorer();, +                explanation = rescorer.explain(topLevelDocId, context, ctx);, +            } else {, +                explanation = context.searcher().explain(context.query(), topLevelDocId);, +            }, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +import org.elasticsearch.search.rescore.RescorePhase;, +import org.elasticsearch.search.rescore.RescoreSearchContext;, +import org.elasticsearch.search.rescore.Rescorer;, +            Explanation explanation;, +            if (context.rescore() != null) {, +                RescoreSearchContext ctx = context.rescore();, +                Rescorer rescorer = ctx.rescorer();, +                explanation = rescorer.explain(topLevelDocId, context, ctx);, +            } else {, +                explanation = context.searcher().explain(context.query(), topLevelDocId);, +            }, +++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.rescore.RescoreBuilder;, +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer) {, +        rescoreBuilder().setRescorer(rescorer);, +        return this;, +    }, +    , +    public SearchRequestBuilder setRescoreWindow(int window) {, +        rescoreBuilder().setWindowSize(window);, +        return this;, +    }, +    , +    private RescoreBuilder rescoreBuilder() {, +        return sourceBuilder().rescore();, +    }, +, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +import org.elasticsearch.search.rescore.RescorePhase;, +import org.elasticsearch.search.rescore.RescoreSearchContext;, +import org.elasticsearch.search.rescore.Rescorer;, +            Explanation explanation;, +            if (context.rescore() != null) {, +                RescoreSearchContext ctx = context.rescore();, +                Rescorer rescorer = ctx.rescorer();, +                explanation = rescorer.explain(topLevelDocId, context, ctx);, +            } else {, +                explanation = context.searcher().explain(context.query(), topLevelDocId);, +            }, +++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.rescore.RescoreBuilder;, +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer) {, +        rescoreBuilder().setRescorer(rescorer);, +        return this;, +    }, +    , +    public SearchRequestBuilder setRescoreWindow(int window) {, +        rescoreBuilder().setWindowSize(window);, +        return this;, +    }, +    , +    private RescoreBuilder rescoreBuilder() {, +        return sourceBuilder().rescore();, +    }, +, +++ b/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +import org.elasticsearch.search.rescore.RescoreBuilder;, +    private RescoreBuilder rescoreBuilder;, +, +    public RescoreBuilder rescore() {, +        if (rescoreBuilder == null) {, +            rescoreBuilder = new RescoreBuilder();, +        }, +        return rescoreBuilder;, +    }, +, +        if (rescoreBuilder != null) {, +            rescoreBuilder.toXContent(builder, params); , +        }, +, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +import org.elasticsearch.search.rescore.RescorePhase;, +import org.elasticsearch.search.rescore.RescoreSearchContext;, +import org.elasticsearch.search.rescore.Rescorer;, +            Explanation explanation;, +            if (context.rescore() != null) {, +                RescoreSearchContext ctx = context.rescore();, +                Rescorer rescorer = ctx.rescorer();, +                explanation = rescorer.explain(topLevelDocId, context, ctx);, +            } else {, +                explanation = context.searcher().explain(context.query(), topLevelDocId);, +            }, +++ b/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.rescore.RescoreBuilder;, +    public SearchRequestBuilder setRescorer(RescoreBuilder.Rescorer rescorer) {, +        rescoreBuilder().setRescorer(rescorer);, +        return this;]