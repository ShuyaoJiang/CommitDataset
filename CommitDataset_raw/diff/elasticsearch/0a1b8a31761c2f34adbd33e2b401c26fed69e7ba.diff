[+++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +import org.elasticsearch.common.settings.Setting;, +import java.nio.file.AccessDeniedException;, +                } catch (NoSuchFileException | FileNotFoundException | AccessDeniedException e) {, +                    // ignore, the file is not there no more; on Windows, if one thread concurrently deletes a file while, +                    // calling Files.size, you can also sometimes hit AccessDeniedException, +++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +import org.elasticsearch.common.settings.Setting;, +import java.nio.file.AccessDeniedException;, +                } catch (NoSuchFileException | FileNotFoundException | AccessDeniedException e) {, +                    // ignore, the file is not there no more; on Windows, if one thread concurrently deletes a file while, +                    // calling Files.size, you can also sometimes hit AccessDeniedException, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeAction.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.XContentType;, +        String[] texts = request.paramAsStringArrayOrEmptyIfAll("text");, +        AnalyzeRequest analyzeRequest = new AnalyzeRequest(request.param("index"));, +        analyzeRequest.text(texts);, +        analyzeRequest.analyzer(request.param("analyzer"));, +        analyzeRequest.field(request.param("field"));, +        final String tokenizer = request.param("tokenizer");, +        if (tokenizer != null) {, +            analyzeRequest.tokenizer(tokenizer);, +        }, +        for (String filter : request.paramAsStringArray("filter", Strings.EMPTY_ARRAY)) {, +            analyzeRequest.addTokenFilter(filter);, +        }, +        for (String charFilter : request.paramAsStringArray("char_filter", Strings.EMPTY_ARRAY)) {, +            analyzeRequest.addTokenFilter(charFilter);, +        }, +        analyzeRequest.explain(request.paramAsBoolean("explain", false));, +        analyzeRequest.attributes(request.paramAsStringArray("attributes", analyzeRequest.attributes()));, +, +        if (RestActions.hasBodyContent(request)) {, +            XContentType type = RestActions.guessBodyContentType(request);, +            if (type == null) {, +                if (texts == null || texts.length == 0) {, +                    texts = new String[]{ RestActions.getRestContent(request).utf8ToString() };, +                    analyzeRequest.text(texts);, +                }, +            } else {, +                // NOTE: if rest request with xcontent body has request parameters, the parameters does not override xcontent values, +            }, +        }, +    public static void buildFromContent(BytesReference content, AnalyzeRequest analyzeRequest, ParseFieldMatcher parseFieldMatcher) {, +++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +import org.elasticsearch.common.settings.Setting;, +import java.nio.file.AccessDeniedException;, +                } catch (NoSuchFileException | FileNotFoundException | AccessDeniedException e) {, +                    // ignore, the file is not there no more; on Windows, if one thread concurrently deletes a file while, +                    // calling Files.size, you can also sometimes hit AccessDeniedException, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeAction.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.XContentType;, +        String[] texts = request.paramAsStringArrayOrEmptyIfAll("text");, +        AnalyzeRequest analyzeRequest = new AnalyzeRequest(request.param("index"));, +        analyzeRequest.text(texts);, +        analyzeRequest.analyzer(request.param("analyzer"));, +        analyzeRequest.field(request.param("field"));, +        final String tokenizer = request.param("tokenizer");, +        if (tokenizer != null) {, +            analyzeRequest.tokenizer(tokenizer);, +        }, +        for (String filter : request.paramAsStringArray("filter", Strings.EMPTY_ARRAY)) {, +            analyzeRequest.addTokenFilter(filter);, +        }, +        for (String charFilter : request.paramAsStringArray("char_filter", Strings.EMPTY_ARRAY)) {, +            analyzeRequest.addTokenFilter(charFilter);, +        }, +        analyzeRequest.explain(request.paramAsBoolean("explain", false));, +        analyzeRequest.attributes(request.paramAsStringArray("attributes", analyzeRequest.attributes()));, +, +        if (RestActions.hasBodyContent(request)) {, +            XContentType type = RestActions.guessBodyContentType(request);, +            if (type == null) {, +                if (texts == null || texts.length == 0) {, +                    texts = new String[]{ RestActions.getRestContent(request).utf8ToString() };, +                    analyzeRequest.text(texts);, +                }, +            } else {, +                // NOTE: if rest request with xcontent body has request parameters, the parameters does not override xcontent values, +            }, +        }, +    public static void buildFromContent(BytesReference content, AnalyzeRequest analyzeRequest, ParseFieldMatcher parseFieldMatcher) {, +++ b/core/src/test/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeActionTests.java, +    public void testDeprecatedParamException() throws Exception {, +, +++ b/core/src/main/java/org/elasticsearch/index/store/Store.java, +import org.elasticsearch.common.settings.Setting;, +import java.nio.file.AccessDeniedException;, +                } catch (NoSuchFileException | FileNotFoundException | AccessDeniedException e) {, +                    // ignore, the file is not there no more; on Windows, if one thread concurrently deletes a file while, +                    // calling Files.size, you can also sometimes hit AccessDeniedException, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeAction.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.xcontent.XContentType;, +        String[] texts = request.paramAsStringArrayOrEmptyIfAll("text");, +        AnalyzeRequest analyzeRequest = new AnalyzeRequest(request.param("index"));, +        analyzeRequest.text(texts);, +        analyzeRequest.analyzer(request.param("analyzer"));]