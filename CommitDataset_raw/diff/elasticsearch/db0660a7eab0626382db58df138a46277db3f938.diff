[+++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +        final long resolvedVersion = resolveVersionDefaults();, +            if (versionType != VersionType.INTERNAL) {, +                validationException = addValidationError("create operations only support internal versioning. use index instead", validationException);, +                return validationException;, +            }, +, +            if (resolvedVersion != Versions.MATCH_DELETED) {, +                validationException = addValidationError("create operations do not support explicit versions. use index instead", validationException);, +        if (!versionType.validateVersionForWrites(resolvedVersion)) {, +            validationException = addValidationError("illegal version value [" + resolvedVersion + "] for version type [" + versionType.name() + "]", validationException);, +        if (id == null && (versionType == VersionType.INTERNAL && resolvedVersion == Versions.MATCH_ANY) == false) {, +    /**, +     * Returns stored version. If currently stored version is {@link Versions#MATCH_ANY} and, +     * opType is {@link OpType#CREATE}, returns {@link Versions#MATCH_DELETED}., +     */, +        return resolveVersionDefaults();, +    }, +, +    /**, +     * Resolves the version based on operation type {@link #opType()}., +     */, +    private long resolveVersionDefaults() {, +        if (opType == OpType.CREATE && version == Versions.MATCH_ANY) {, +            return Versions.MATCH_DELETED;, +        } else {, +            return version;, +        }, +        // ES versions below 5.1.2 don't know about resolveVersionDefaults but resolve the version eagerly (which messes with validation)., +        if (out.getVersion().before(Version.V_5_1_2_UNRELEASED)) {, +            out.writeLong(resolveVersionDefaults());, +        } else {, +        }, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +        final long resolvedVersion = resolveVersionDefaults();, +            if (versionType != VersionType.INTERNAL) {, +                validationException = addValidationError("create operations only support internal versioning. use index instead", validationException);, +                return validationException;, +            }, +, +            if (resolvedVersion != Versions.MATCH_DELETED) {, +                validationException = addValidationError("create operations do not support explicit versions. use index instead", validationException);, +        if (!versionType.validateVersionForWrites(resolvedVersion)) {, +            validationException = addValidationError("illegal version value [" + resolvedVersion + "] for version type [" + versionType.name() + "]", validationException);, +        if (id == null && (versionType == VersionType.INTERNAL && resolvedVersion == Versions.MATCH_ANY) == false) {, +    /**, +     * Returns stored version. If currently stored version is {@link Versions#MATCH_ANY} and, +     * opType is {@link OpType#CREATE}, returns {@link Versions#MATCH_DELETED}., +     */, +        return resolveVersionDefaults();, +    }, +, +    /**, +     * Resolves the version based on operation type {@link #opType()}., +     */, +    private long resolveVersionDefaults() {, +        if (opType == OpType.CREATE && version == Versions.MATCH_ANY) {, +            return Versions.MATCH_DELETED;, +        } else {, +            return version;, +        }, +        // ES versions below 5.1.2 don't know about resolveVersionDefaults but resolve the version eagerly (which messes with validation)., +        if (out.getVersion().before(Version.V_5_1_2_UNRELEASED)) {, +            out.writeLong(resolveVersionDefaults());, +        } else {, +        }, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/create/30_internal_version.yaml, +---, +"Internal versioning with explicit version":, +, + - do:, +      create:, +          index:          test, +          type:           test, +          id:             3, +          body:           { foo: bar }, +          version:        5, +          ignore:         400, +, + - match: { status: 400 }, + - match: { error.type: action_request_validation_exception }, + - match: { error.reason: "Validation Failed: 1: create operations do not support explicit versions. use index instead;" }, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +        final long resolvedVersion = resolveVersionDefaults();, +            if (versionType != VersionType.INTERNAL) {, +                validationException = addValidationError("create operations only support internal versioning. use index instead", validationException);, +                return validationException;, +            }, +, +            if (resolvedVersion != Versions.MATCH_DELETED) {, +                validationException = addValidationError("create operations do not support explicit versions. use index instead", validationException);, +        if (!versionType.validateVersionForWrites(resolvedVersion)) {, +            validationException = addValidationError("illegal version value [" + resolvedVersion + "] for version type [" + versionType.name() + "]", validationException);, +        if (id == null && (versionType == VersionType.INTERNAL && resolvedVersion == Versions.MATCH_ANY) == false) {, +    /**, +     * Returns stored version. If currently stored version is {@link Versions#MATCH_ANY} and, +     * opType is {@link OpType#CREATE}, returns {@link Versions#MATCH_DELETED}., +     */, +        return resolveVersionDefaults();, +    }]