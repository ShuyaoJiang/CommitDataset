[+++ /dev/null, +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +public final class Locals {, +    /** , +     * Creates a new lambda scope inside the current scope, +     * <p>, +     * This is just like {@link #newFunctionScope}, except the captured parameters are made read-only., +     */, +    public static Locals newLambdaScope(Locals programScope, List<Parameter> parameters, int captureCount, int maxLoopCounter) {, +        Locals locals = new Locals(programScope, Definition.DEF_TYPE);, +        for (int i = 0; i < parameters.size(); i++) {, +            Parameter parameter = parameters.get(i);, +            boolean isCapture = i < captureCount;, +            locals.defineVariable(parameter.location, parameter.type, parameter.name, isCapture);, +        }, +        // Loop counter to catch infinite loops.  Internal use only., +        if (maxLoopCounter > 0) {, +            locals.defineVariable(null, Definition.INT_TYPE, LOOP, true);, +        }, +        return locals;, +    public boolean hasVariable(String name) {, +    public Method getMethod(MethodKey key) {, +    public Variable addVariable(Location location, Type type, String name, boolean readonly) {, +    private int nextSlotNumber;, +    private Map<String,Variable> variables;, +    private Map<MethodKey,Method> methods;, +    private Locals(Locals parent) {, +    private Locals(Locals parent, Type returnType) {, +    private Locals getParent() {, +    private Variable lookupVariable(Location location, String name) {, +    private Method lookupMethod(MethodKey key) {, +    private Variable defineVariable(Location location, Type type, String name, boolean readonly) {, +        Variable variable = new Variable(location, name, type, getNextSlot(), readonly);, +    private void addMethod(Method method) {, +    private int getNextSlot() {, +        private final int slot;, +        public Variable(Location location, String name, Type type, int slot, boolean readonly) {, +            this.slot = slot;, +    public static final class Parameter {, +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +public final class Locals {, +    /** , +     * Creates a new lambda scope inside the current scope, +     * <p>, +     * This is just like {@link #newFunctionScope}, except the captured parameters are made read-only., +     */, +    public static Locals newLambdaScope(Locals programScope, List<Parameter> parameters, int captureCount, int maxLoopCounter) {, +        Locals locals = new Locals(programScope, Definition.DEF_TYPE);, +        for (int i = 0; i < parameters.size(); i++) {, +            Parameter parameter = parameters.get(i);, +            boolean isCapture = i < captureCount;, +            locals.defineVariable(parameter.location, parameter.type, parameter.name, isCapture);, +        }, +        // Loop counter to catch infinite loops.  Internal use only., +        if (maxLoopCounter > 0) {, +            locals.defineVariable(null, Definition.INT_TYPE, LOOP, true);, +        }, +        return locals;, +    public boolean hasVariable(String name) {, +    public Method getMethod(MethodKey key) {, +    public Variable addVariable(Location location, Type type, String name, boolean readonly) {, +    private int nextSlotNumber;, +    private Map<String,Variable> variables;, +    private Map<MethodKey,Method> methods;, +    private Locals(Locals parent) {, +    private Locals(Locals parent, Type returnType) {, +    private Locals getParent() {, +    private Variable lookupVariable(Location location, String name) {, +    private Method lookupMethod(MethodKey key) {, +    private Variable defineVariable(Location location, Type type, String name, boolean readonly) {, +        Variable variable = new Variable(location, name, type, getNextSlot(), readonly);, +    private void addMethod(Method method) {, +    private int getNextSlot() {, +        private final int slot;, +        public Variable(Location location, String name, Type type, int slot, boolean readonly) {, +            this.slot = slot;, +    public static final class Parameter {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/ANode.java, +import java.util.Objects;, +import java.util.Set;, +, +        this.location = Objects.requireNonNull(location);, +    /**, +     * Adds all variable names referenced to the variable set., +     * <p>, +     * This can be called at any time, e.g. to support lambda capture., +     * @param variables set of variables referenced (any scope), +     */, +    abstract void extractVariables(Set<String> variables);, +    , +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Locals.java, +public final class Locals {, +    /** , +     * Creates a new lambda scope inside the current scope, +     * <p>, +     * This is just like {@link #newFunctionScope}, except the captured parameters are made read-only., +     */]