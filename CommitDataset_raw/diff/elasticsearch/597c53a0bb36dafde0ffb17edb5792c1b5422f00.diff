[+++ b/docs/reference/migration/migrate_2_0.asciidoc, +* The Analyze API return 0 as first Token's position instead of 1., +* The `text()` method on `AnalyzeRequest` now returns `String[]` instead of `String`., +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* The Analyze API return 0 as first Token's position instead of 1., +* The `text()` method on `AnalyzeRequest` now returns `String[]` instead of `String`., +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +        BytesStreamInput header = new BytesStreamInput(headerRef);, +, +        private final BytesStreamInput perFieldTermVectorInput;, +            this.perFieldTermVectorInput = new BytesStreamInput(termVectors);, +                private void writeInfos(final BytesStreamInput input) throws IOException {, +    int readPotentiallyNegativeVInt(BytesStreamInput stream) throws IOException {, +    long readPotentiallyNegativeVLong(BytesStreamInput stream) throws IOException {, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* The Analyze API return 0 as first Token's position instead of 1., +* The `text()` method on `AnalyzeRequest` now returns `String[]` instead of `String`., +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +        BytesStreamInput header = new BytesStreamInput(headerRef);, +, +        private final BytesStreamInput perFieldTermVectorInput;, +            this.perFieldTermVectorInput = new BytesStreamInput(termVectors);, +                private void writeInfos(final BytesStreamInput input) throws IOException {, +    int readPotentiallyNegativeVInt(BytesStreamInput stream) throws IOException {, +    long readPotentiallyNegativeVLong(BytesStreamInput stream) throws IOException {, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +            return readFrom(new BytesStreamInput(data), localNode);, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* The Analyze API return 0 as first Token's position instead of 1., +* The `text()` method on `AnalyzeRequest` now returns `String[]` instead of `String`., +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +        BytesStreamInput header = new BytesStreamInput(headerRef);, +, +        private final BytesStreamInput perFieldTermVectorInput;, +            this.perFieldTermVectorInput = new BytesStreamInput(termVectors);, +                private void writeInfos(final BytesStreamInput input) throws IOException {, +    int readPotentiallyNegativeVInt(BytesStreamInput stream) throws IOException {, +    long readPotentiallyNegativeVLong(BytesStreamInput stream) throws IOException {, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +            return readFrom(new BytesStreamInput(data), localNode);, +++ b/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +        return new BytesStreamInput(bytes, offset, length);, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* The Analyze API return 0 as first Token's position instead of 1., +* The `text()` method on `AnalyzeRequest` now returns `String[]` instead of `String`., +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +        BytesStreamInput header = new BytesStreamInput(headerRef);, +, +        private final BytesStreamInput perFieldTermVectorInput;, +            this.perFieldTermVectorInput = new BytesStreamInput(termVectors);, +                private void writeInfos(final BytesStreamInput input) throws IOException {, +    int readPotentiallyNegativeVInt(BytesStreamInput stream) throws IOException {, +    long readPotentiallyNegativeVLong(BytesStreamInput stream) throws IOException {, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +            return readFrom(new BytesStreamInput(data), localNode);, +++ b/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +        return new BytesStreamInput(bytes, offset, length);, +++ b/src/main/java/org/elasticsearch/common/io/stream/ByteBufferStreamInput.java, +        if (buffer.remaining() > len) {, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +* The Analyze API return 0 as first Token's position instead of 1., +* The `text()` method on `AnalyzeRequest` now returns `String[]` instead of `String`., +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsFields.java, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +        BytesStreamInput header = new BytesStreamInput(headerRef);, +, +        private final BytesStreamInput perFieldTermVectorInput;, +            this.perFieldTermVectorInput = new BytesStreamInput(termVectors);, +                private void writeInfos(final BytesStreamInput input) throws IOException {, +    int readPotentiallyNegativeVInt(BytesStreamInput stream) throws IOException {, +    long readPotentiallyNegativeVLong(BytesStreamInput stream) throws IOException {, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +            return readFrom(new BytesStreamInput(data), localNode);, +++ b/src/main/java/org/elasticsearch/common/bytes/BytesArray.java, +import org.elasticsearch.common.io.stream.BytesStreamInput;, +        return new BytesStreamInput(bytes, offset, length);, +++ b/src/main/java/org/elasticsearch/common/io/stream/ByteBufferStreamInput.java, +        if (buffer.remaining() > len) {, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamInput.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *]