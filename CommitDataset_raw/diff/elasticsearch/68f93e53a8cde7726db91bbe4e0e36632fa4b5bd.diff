[+++ b/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.apache.lucene.util.Constants;, +import org.elasticsearch.monitor.fs.FsStats;, +import org.elasticsearch.monitor.fs.JmxFsProbe;, +    public static class NodePath {, +        public final Path path;, +        public final Path indicesPath;, +        /** Cached FileStore from path */, +        public final FileStore fileStore;, +        /** Cached result of Lucene's {@code IOUtils.spins} on path.  This is a trilean value: null means we could not determine it (we are, +         *  not running on Linux, or we hit an exception trying), True means the device possibly spins and False means it does not. */, +        public final Boolean spins;, +, +        public NodePath(Path path) throws IOException {, +            this.path = path;, +            this.indicesPath = path.resolve(INDICES_FOLDER);, +            this.fileStore = getFileStore(path);, +            Boolean spins;, +, +            // Lucene's IOUtils.spins only works on Linux today:, +            if (Constants.LINUX) {, +                try {, +                    spins = IOUtils.spins(path);, +                } catch (Exception e) {, +                    spins = null;, +                }, +            } else {, +                spins = null;, +            }, +            this.spins = spins;, +        }, +    }, +, +    private final NodePath[] nodePaths;, +, +        final NodePath[] nodePaths = new NodePath[environment.dataWithClusterFiles().length];, +        final Lock[] locks = new Lock[nodePaths.length];, +, +                        nodePaths[dirIndex] = new NodePath(dir);, +                        releaseAndNullLocks(locks);, +                    releaseAndNullLocks(locks);, +, +        maybeLogPathDetails();, +    private static void releaseAndNullLocks(Lock[] locks) {, +        for (int i = 0; i < locks.length; i++) {, +            if (locks[i] != null) {, +                IOUtils.closeWhileHandlingException(locks[i]);, +            }, +            locks[i] = null;, +    private void maybeLogPathDetails() throws IOException {, +, +        // We do some I/O in here, so skip this if DEBUG/INFO are not enabled:, +        if (logger.isDebugEnabled()) {, +            // Log one line per path.data:, +            StringBuilder sb = new StringBuilder("node data locations details:");, +            for (NodePath nodePath : nodePaths) {, +                sb.append('\n').append(" -> ").append(nodePath.path.toAbsolutePath());, +, +                String spinsDesc;, +                if (nodePath.spins == null) {, +                    spinsDesc = "unknown";, +                } else if (nodePath.spins) {, +                    spinsDesc = "possibly";, +                } else {, +                    spinsDesc = "no";, +                }, +, +                sb.append(", free_space ["), +                    .append(new ByteSizeValue(nodePath.fileStore.getUnallocatedSpace())), +                    .append("], usable_space ["), +                    .append(new ByteSizeValue(nodePath.fileStore.getUsableSpace())), +                    .append("], total_space ["), +                    .append(new ByteSizeValue(nodePath.fileStore.getTotalSpace())), +                    .append("], spins? ["), +                    .append(spinsDesc), +                    .append("], mount ["), +                    .append(nodePath.fileStore), +                    .append("], type ["), +                    .append(nodePath.fileStore.type()), +                    .append(']');, +            }, +            logger.debug(sb.toString());, +        } else if (logger.isInfoEnabled()) {, +            FsStats.Info totFSInfo = new FsStats.Info();, +            Set<String> allTypes = new HashSet<>();, +            Set<String> allSpins = new HashSet<>();, +            Set<String> allMounts = new HashSet<>();, +            for (NodePath nodePath : nodePaths) {, +                // TODO: can/should I use the chosen FsProbe instead (i.e. sigar if it's available)?, +                FsStats.Info fsInfo = JmxFsProbe.getFSInfo(nodePath);, +                String mount = fsInfo.getMount();, +                if (allMounts.contains(mount) == false) {, +                    allMounts.add(mount);, +                    String type = fsInfo.getType();, +                    if (type != null) {, +                        allTypes.add(type);, +                    }, +                    Boolean spins = fsInfo.getSpins();, +                    if (spins == null) {, +                        allSpins.add("unknown");]