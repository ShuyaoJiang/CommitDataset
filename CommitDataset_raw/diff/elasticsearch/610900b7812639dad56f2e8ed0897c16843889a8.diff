[+++ b/src/main/java/org/elasticsearch/common/logging/log4j/Log4jESLogger.java, +    public Logger logger() {, +        return logger;, +    }, +, +++ b/src/main/java/org/elasticsearch/common/logging/log4j/Log4jESLogger.java, +    public Logger logger() {, +        return logger;, +    }, +, +++ b/src/main/java/org/elasticsearch/common/logging/log4j/LogConfigurator.java, +import org.elasticsearch.ElasticsearchException;, +import java.io.IOException;, +import java.net.MalformedURLException;, +import java.nio.file.*;, +import java.nio.file.attribute.BasicFileAttributes;, +import java.util.EnumSet;, +        resolveConfig(environment, settingsBuilder);, +, +    public static void resolveConfig(Environment env, final ImmutableSettings.Builder settingsBuilder) {, +, +        try {, +            Files.walkFileTree(env.configFile().toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new SimpleFileVisitor<Path>() {, +                @Override, +                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {, +                    if (file.getFileName().toString().startsWith("logging.")) {, +                        loadConfig(file, settingsBuilder);, +                    }, +                    return FileVisitResult.CONTINUE;, +                }, +            });, +        } catch (IOException ioe) {, +            throw new ElasticsearchException("Failed to load logging configuration", ioe);, +        }, +    }, +, +    public static void loadConfig(Path file, ImmutableSettings.Builder settingsBuilder) {, +        try {, +            settingsBuilder.loadFromUrl(file.toUri().toURL());, +        } catch (FailedToResolveConfigException | NoClassDefFoundError | MalformedURLException e) {, +            // ignore, +        }, +    }, +++ b/src/main/java/org/elasticsearch/common/logging/log4j/Log4jESLogger.java, +    public Logger logger() {, +        return logger;, +    }, +, +++ b/src/main/java/org/elasticsearch/common/logging/log4j/LogConfigurator.java, +import org.elasticsearch.ElasticsearchException;, +import java.io.IOException;, +import java.net.MalformedURLException;, +import java.nio.file.*;, +import java.nio.file.attribute.BasicFileAttributes;, +import java.util.EnumSet;, +        resolveConfig(environment, settingsBuilder);, +, +    public static void resolveConfig(Environment env, final ImmutableSettings.Builder settingsBuilder) {, +, +        try {, +            Files.walkFileTree(env.configFile().toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new SimpleFileVisitor<Path>() {, +                @Override, +                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {, +                    if (file.getFileName().toString().startsWith("logging.")) {, +                        loadConfig(file, settingsBuilder);, +                    }, +                    return FileVisitResult.CONTINUE;, +                }, +            });, +        } catch (IOException ioe) {, +            throw new ElasticsearchException("Failed to load logging configuration", ioe);, +        }, +    }, +, +    public static void loadConfig(Path file, ImmutableSettings.Builder settingsBuilder) {, +        try {, +            settingsBuilder.loadFromUrl(file.toUri().toURL());, +        } catch (FailedToResolveConfigException | NoClassDefFoundError | MalformedURLException e) {, +            // ignore, +        }, +    }, +++ b/src/main/java/org/elasticsearch/plugins/PluginManager.java, +        File configFile = new File(extractLocation, "config");, +        if (configFile.exists() && configFile.isDirectory()) {, +            File toLocation = pluginHandle.configDir(environment);, +            debug("Found config, moving to " + toLocation.getAbsolutePath());, +            FileSystemUtils.deleteRecursively(toLocation);, +            configFile.renameTo(toLocation);, +            debug("Installed " + name + " into " + toLocation.getAbsolutePath());, +        }, +, +        File configLocation = pluginHandle.configDir(environment);, +        if (configLocation.exists()) {, +            debug("Removing: " + configLocation.getPath());, +            if (!FileSystemUtils.deleteRecursively(configLocation)) {, +                throw new IOException("Unable to remove " + pluginHandle.name + ". Check file permissions on " +, +                        configLocation.toString());, +            }, +            removed = true;, +        }]