[+++ b/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +import org.apache.lucene.search.*;, +import org.elasticsearch.common.regex.Regex;, +import java.util.Collection;, +    private QueryParserSettings settings;, +, +        this.settings = settings;, +, +        if (settings.fields() != null) {, +            if (settings.fields.size() == 1) {, +                // just mark it as the default field, +                this.field = settings.fields().get(0);, +            } else {, +                // otherwise, we need to have the default field being null..., +                this.field = null;, +            }, +        }, +, +        Collection<String> fields = extractMultiFields(field);, +        if (fields != null) {, +            if (fields.size() == 1) {, +                return getFieldQuerySingle(fields.iterator().next(), queryText, quoted);, +            }, +            if (settings.useDisMax()) {, +                DisjunctionMaxQuery disMaxQuery = new DisjunctionMaxQuery(settings.tieBreaker());, +                boolean added = false;, +                for (String mField : fields) {, +                    Query q = getFieldQuerySingle(mField, queryText, quoted);, +                    if (q != null) {, +                        added = true;, +                        applyBoost(mField, q);, +                        disMaxQuery.add(q);, +                    }, +                }, +                if (!added) {, +                    return null;, +                }, +                return disMaxQuery;, +            } else {, +                List<BooleanClause> clauses = new ArrayList<BooleanClause>();, +                for (String mField : fields) {, +                    Query q = getFieldQuerySingle(mField, queryText, true);, +                    if (q != null) {, +                        applyBoost(mField, q);, +                        clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));, +                    }, +                }, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                return getBooleanQuery(clauses, true);, +            }, +        } else {, +            return getFieldQuerySingle(field, queryText, quoted);, +        }, +    }, +, +    private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException {, +                            if (settings.lenient()) {, +    protected Query getFieldQuery(String field, String queryText, int slop) throws ParseException {, +        Collection<String> fields = extractMultiFields(field);, +        if (fields != null) {, +            if (settings.useDisMax()) {, +                DisjunctionMaxQuery disMaxQuery = new DisjunctionMaxQuery(settings.tieBreaker());, +                boolean added = false;, +                for (String mField : fields) {, +                    Query q = super.getFieldQuery(mField, queryText, slop);, +                    if (q != null) {, +                        added = true;, +                        applyBoost(field, q);, +                        applySlop(q, slop);, +                        disMaxQuery.add(q);, +                    }, +                }, +                if (!added) {, +                    return null;, +                }, +                return disMaxQuery;, +            } else {, +                List<BooleanClause> clauses = new ArrayList<BooleanClause>();, +                for (String mField : fields) {, +                    Query q = super.getFieldQuery(mField, queryText, slop);, +                    if (q != null) {, +                        applyBoost(field, q);, +                        applySlop(q, slop);, +                        clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));, +                    }, +                }, +                if (clauses.size() == 0)  // happens for stopwords, +                    return null;, +                return getBooleanQuery(clauses, true);, +            }, +        } else {, +            return super.getFieldQuery(field, queryText, slop);, +        }, +    }, +, +    @Override, +        Collection<String> fields = extractMultiFields(field);, +        if (fields != null) {, +            if (fields.size() == 1) {]