[+++ b/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.index.*;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +        this(spellchecker, field, suggestMode, reader,  nonErrorLikelihood, numCandidates, null, null, MultiFields.getTerms(reader, field));, +    public DirectCandidateGenerator(DirectSpellChecker spellchecker, String field, SuggestMode suggestMode, IndexReader reader, double nonErrorLikelihood,  int numCandidates, Analyzer preFilter, Analyzer postFilter, Terms terms) throws IOException {, +        if (terms == null) {, +            throw new ElasticSearchIllegalArgumentException("generator field [" + field + "] doesn't exist");, +        }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.index.*;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +        this(spellchecker, field, suggestMode, reader,  nonErrorLikelihood, numCandidates, null, null, MultiFields.getTerms(reader, field));, +    public DirectCandidateGenerator(DirectSpellChecker spellchecker, String field, SuggestMode suggestMode, IndexReader reader, double nonErrorLikelihood,  int numCandidates, Analyzer preFilter, Analyzer postFilter, Terms terms) throws IOException {, +        if (terms == null) {, +            throw new ElasticSearchIllegalArgumentException("generator field [" + field + "] doesn't exist");, +        }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/LaplaceScorer.java, +import org.apache.lucene.index.Terms;, +, +import java.io.IOException;, +        public WordScorer newScorer(IndexReader reader, Terms terms, String field, double realWordLikelyhood, BytesRef separator) throws IOException {, +            return new LaplaceScorer(reader, terms, field, realWordLikelyhood, separator, 0.5);, +    public LaplaceScorer(IndexReader reader, Terms terms, String field,, +        super(reader, terms, field, realWordLikelyhood, separator);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.index.*;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +        this(spellchecker, field, suggestMode, reader,  nonErrorLikelihood, numCandidates, null, null, MultiFields.getTerms(reader, field));, +    public DirectCandidateGenerator(DirectSpellChecker spellchecker, String field, SuggestMode suggestMode, IndexReader reader, double nonErrorLikelihood,  int numCandidates, Analyzer preFilter, Analyzer postFilter, Terms terms) throws IOException {, +        if (terms == null) {, +            throw new ElasticSearchIllegalArgumentException("generator field [" + field + "] doesn't exist");, +        }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/LaplaceScorer.java, +import org.apache.lucene.index.Terms;, +, +import java.io.IOException;, +        public WordScorer newScorer(IndexReader reader, Terms terms, String field, double realWordLikelyhood, BytesRef separator) throws IOException {, +            return new LaplaceScorer(reader, terms, field, realWordLikelyhood, separator, 0.5);, +    public LaplaceScorer(IndexReader reader, Terms terms, String field,, +        super(reader, terms, field, realWordLikelyhood, separator);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/LinearInterpoatingScorer.java, +import org.apache.lucene.index.Terms;, +import java.io.IOException;, +, +    public LinearInterpoatingScorer(IndexReader reader, Terms terms, String field,  double realWordLikelyhood, BytesRef separator, double trigramLambda, double bigramLambda, double unigramLambda), +        super(reader, terms, field, realWordLikelyhood, separator);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.index.*;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +        this(spellchecker, field, suggestMode, reader,  nonErrorLikelihood, numCandidates, null, null, MultiFields.getTerms(reader, field));, +    public DirectCandidateGenerator(DirectSpellChecker spellchecker, String field, SuggestMode suggestMode, IndexReader reader, double nonErrorLikelihood,  int numCandidates, Analyzer preFilter, Analyzer postFilter, Terms terms) throws IOException {, +        if (terms == null) {, +            throw new ElasticSearchIllegalArgumentException("generator field [" + field + "] doesn't exist");, +        }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/LaplaceScorer.java, +import org.apache.lucene.index.Terms;, +, +import java.io.IOException;, +        public WordScorer newScorer(IndexReader reader, Terms terms, String field, double realWordLikelyhood, BytesRef separator) throws IOException {, +            return new LaplaceScorer(reader, terms, field, realWordLikelyhood, separator, 0.5);, +    public LaplaceScorer(IndexReader reader, Terms terms, String field,, +        super(reader, terms, field, realWordLikelyhood, separator);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/LinearInterpoatingScorer.java, +import org.apache.lucene.index.Terms;, +import java.io.IOException;, +, +    public LinearInterpoatingScorer(IndexReader reader, Terms terms, String field,  double realWordLikelyhood, BytesRef separator, double trigramLambda, double bigramLambda, double unigramLambda), +        super(reader, terms, field, realWordLikelyhood, separator);, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestParser.java, +import org.apache.lucene.index.Terms;, +import java.io.IOException;, +, +        if (mapperService.smartNameFieldMapper(suggestion.getField()) == null) {, +            throw new ElasticSearchIllegalArgumentException("No mapping found for field [" + suggestion.getField() + "]");, +        }, +        , +                        public WordScorer newScorer(IndexReader reader, Terms terms, String field, double realWordLikelyhood, BytesRef separator), +                            return new LinearInterpoatingScorer(reader, terms, field, realWordLikelyhood, separator, lambdas[0], lambdas[1],, +                        public WordScorer newScorer(IndexReader reader, Terms terms, String field, double realWordLikelyhood, BytesRef separator), +                            return new LaplaceScorer(reader, terms,  field, realWordLikelyhood, separator, alpha);]