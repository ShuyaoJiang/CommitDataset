[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.index.analysis.*;, +import org.elasticsearch.indices.analysis.AnalysisModule;, +    private final Environment environment;, +                                  IndicesService indicesService, ActionFilters actionFilters,, +                                  IndexNameExpressionResolver indexNameExpressionResolver, Environment environment) {, +        this.environment = environment;, +        try {, +            final IndexService indexService;, +            } else {, +                indexService = null;, +            Analyzer analyzer = null;, +            final AnalysisRegistry analysisRegistry = indicesService.getAnalysis();, +            return analyze(request, field, analyzer, indexService != null ? indexService.analysisService() : null, analysisRegistry, environment);, +        } catch (IOException e) {, +            throw new ElasticsearchException("analysis failed", e);, +, +    }, +, +    public static AnalyzeResponse analyze(AnalyzeRequest request, String field,  Analyzer analyzer, AnalysisService analysisService, AnalysisRegistry analysisRegistry, Environment environment) throws IOException {, +, +        boolean closeAnalyzer = false;, +        if (analyzer == null && request.analyzer() != null) {, +            if (analysisService == null) {, +                analyzer = analysisRegistry.getAnalyzer(request.analyzer());, +                if (analyzer == null) {, +                    throw new IllegalArgumentException("failed to find global analyzer [" + request.analyzer() + "]");, +                }, +            } else {, +                analyzer = analysisService.analyzer(request.analyzer());, +            }, +, +            if (analysisService == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(request.tokenizer());, +                tokenizerFactory = tokenizerFactoryFactory.get(environment, request.tokenizer());, +                tokenizerFactory = analysisService.tokenizer(request.tokenizer());, +                    if (analysisService == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilterName);, +                        tokenFilterFactories[i] = tokenFilterFactoryFactory.get(environment, tokenFilterName);, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilterName);, +                    if (analysisService == null) {, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilterName);, +                        charFilterFactories[i] = charFilterFactoryFactory.get(environment, charFilterName);, +                        charFilterFactories[i] = analysisService.charFilter(charFilterName);, +                            throw new IllegalArgumentException("failed to find char filter under [" + charFilterName + "]");, +                        throw new IllegalArgumentException("failed to find char filter under [" + charFilterName + "]");, +            if (analysisService == null) {, +                analyzer = analysisRegistry.getAnalyzer("standard");, +                analyzer = analysisService.defaultIndexAnalyzer();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.index.analysis.*;, +import org.elasticsearch.indices.analysis.AnalysisModule;, +    private final Environment environment;, +                                  IndicesService indicesService, ActionFilters actionFilters,, +                                  IndexNameExpressionResolver indexNameExpressionResolver, Environment environment) {, +        this.environment = environment;, +        try {, +            final IndexService indexService;, +            } else {, +                indexService = null;, +            Analyzer analyzer = null;, +            final AnalysisRegistry analysisRegistry = indicesService.getAnalysis();, +            return analyze(request, field, analyzer, indexService != null ? indexService.analysisService() : null, analysisRegistry, environment);, +        } catch (IOException e) {, +            throw new ElasticsearchException("analysis failed", e);, +, +    }, +, +    public static AnalyzeResponse analyze(AnalyzeRequest request, String field,  Analyzer analyzer, AnalysisService analysisService, AnalysisRegistry analysisRegistry, Environment environment) throws IOException {, +, +        boolean closeAnalyzer = false;, +        if (analyzer == null && request.analyzer() != null) {, +            if (analysisService == null) {, +                analyzer = analysisRegistry.getAnalyzer(request.analyzer());, +                if (analyzer == null) {, +                    throw new IllegalArgumentException("failed to find global analyzer [" + request.analyzer() + "]");, +                }, +            } else {, +                analyzer = analysisService.analyzer(request.analyzer());, +            }, +, +            if (analysisService == null) {, +                AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory = analysisRegistry.getTokenizerProvider(request.tokenizer());, +                tokenizerFactory = tokenizerFactoryFactory.get(environment, request.tokenizer());, +                tokenizerFactory = analysisService.tokenizer(request.tokenizer());, +                    if (analysisService == null) {, +                        AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory = analysisRegistry.getTokenFilterProvider(tokenFilterName);, +                        tokenFilterFactories[i] = tokenFilterFactoryFactory.get(environment, tokenFilterName);, +                        tokenFilterFactories[i] = analysisService.tokenFilter(tokenFilterName);, +                    if (analysisService == null) {, +                        AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory = analysisRegistry.getCharFilterProvider(charFilterName);, +                        charFilterFactories[i] = charFilterFactoryFactory.get(environment, charFilterName);, +                        charFilterFactories[i] = analysisService.charFilter(charFilterName);, +                            throw new IllegalArgumentException("failed to find char filter under [" + charFilterName + "]");, +                        throw new IllegalArgumentException("failed to find char filter under [" + charFilterName + "]");, +            if (analysisService == null) {, +                analyzer = analysisRegistry.getAnalyzer("standard");, +                analyzer = analysisService.defaultIndexAnalyzer();]