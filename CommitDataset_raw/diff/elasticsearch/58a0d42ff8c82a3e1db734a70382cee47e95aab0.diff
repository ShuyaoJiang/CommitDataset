[+++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authz/permission/KibanaUserRole.java, +            RoleDescriptor.IndicesPrivileges.builder().indices(".kibana*").privileges("manage", "read", "index", "delete").build() };, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authz/permission/KibanaUserRole.java, +            RoleDescriptor.IndicesPrivileges.builder().indices(".kibana*").privileges("manage", "read", "index", "delete").build() };, +++ /dev/null, +++ b/elasticsearch/x-pack/shield/src/main/java/org/elasticsearch/shield/authz/permission/KibanaUserRole.java, +            RoleDescriptor.IndicesPrivileges.builder().indices(".kibana*").privileges("manage", "read", "index", "delete").build() };, +++ /dev/null, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/integration/KibanaUserRoleIntegTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.integration;, +, +import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;, +import org.elasticsearch.action.admin.indices.get.GetIndexResponse;, +import org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsResponse;, +import org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsResponse.FieldMappingMetaData;, +import org.elasticsearch.action.admin.indices.validate.query.ValidateQueryResponse;, +import org.elasticsearch.action.delete.DeleteResponse;, +import org.elasticsearch.action.fieldstats.FieldStats;, +import org.elasticsearch.action.fieldstats.FieldStatsResponse;, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.action.search.MultiSearchResponse;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.shield.authc.support.Hasher;, +import org.elasticsearch.shield.authc.support.SecuredString;, +import org.elasticsearch.shield.authc.support.UsernamePasswordToken;, +import org.elasticsearch.test.ShieldIntegTestCase;, +, +import java.util.Locale;, +, +import static java.util.Collections.singletonMap;, +import static org.hamcrest.Matchers.arrayContaining;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.notNullValue;, +, +/**, + *, + */, +public class KibanaUserRoleIntegTests extends ShieldIntegTestCase {, +, +    protected static final SecuredString USERS_PASSWD = new SecuredString("change_me".toCharArray());, +    protected static final String USERS_PASSWD_HASHED = new String(Hasher.BCRYPT.hash(new SecuredString("change_me".toCharArray())));, +, +    @Override, +    public String configRoles() {, +        return super.configRoles() + "\n" +, +                "my_kibana_user:\n" +, +                "  indices:\n" +, +                "    - names: 'logstash-*'\n" +, +                "      privileges:\n" +, +                "        - view_index_metadata\n" +, +                "        - read\n";, +    }, +, +    @Override, +    public String configUsers() {, +        return super.configUsers() +, +                "kibana_user:" + USERS_PASSWD_HASHED;, +    }, +, +    @Override, +    public String configUsersRoles() {, +        return super.configUsersRoles() +, +                "my_kibana_user:kibana_user\n" +, +                "kibana_user:kibana_user";, +    }, +, +    public void testFieldMappings() throws Exception {, +        final String index = "logstash-20-12-2015";, +        final String type = "event";, +        final String field = "foo";, +        indexRandom(true, client().prepareIndex().setIndex(index).setType(type).setSource(field, "bar"));, +, +        GetFieldMappingsResponse response = client().admin().indices().prepareGetFieldMappings().addIndices("logstash-*").setFields("*"), +                .includeDefaults(true).get();, +        FieldMappingMetaData fieldMappingMetaData = response.fieldMappings(index, type, field);, +        assertThat(fieldMappingMetaData, notNullValue());, +        assertThat(fieldMappingMetaData.isNull(), is(false));, +, +        response = client(), +                .filterWithHeader(singletonMap("Authorization", UsernamePasswordToken.basicAuthHeaderValue("kibana_user", USERS_PASSWD))), +                .admin().indices().prepareGetFieldMappings().addIndices("logstash-*"), +                .setFields("*"), +                .includeDefaults(true).get();, +        FieldMappingMetaData fieldMappingMetaData1 = response.fieldMappings(index, type, field);, +        assertThat(fieldMappingMetaData1, notNullValue());, +        assertThat(fieldMappingMetaData1.isNull(), is(false));, +        assertThat(fieldMappingMetaData1.fullName(), equalTo(fieldMappingMetaData.fullName()));, +    }, +, +    public void testValidateQuery() throws Exception {, +        final String index = "logstash-20-12-2015";, +        final String type = "event";]