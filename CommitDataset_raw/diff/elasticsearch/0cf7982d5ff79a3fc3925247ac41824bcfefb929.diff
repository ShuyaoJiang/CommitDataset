[+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/InterimResultsIT.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.integration;, +, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.xpack.core.ml.action.FlushJobAction;, +import org.elasticsearch.xpack.core.ml.action.GetBucketsAction;, +import org.elasticsearch.xpack.core.ml.action.util.PageParams;, +import org.elasticsearch.xpack.core.ml.job.config.AnalysisConfig;, +import org.elasticsearch.xpack.core.ml.job.config.DataDescription;, +import org.elasticsearch.xpack.core.ml.job.config.Detector;, +import org.elasticsearch.xpack.core.ml.job.config.Job;, +import org.elasticsearch.xpack.core.ml.job.results.AnomalyRecord;, +import org.elasticsearch.xpack.core.ml.job.results.Bucket;, +import org.junit.After;, +, +import java.util.Collections;, +import java.util.List;, +import java.util.stream.Collectors;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.lessThan;, +, +public class InterimResultsIT extends MlNativeAutodetectIntegTestCase {, +, +    private static final long BUCKET_SPAN_SECONDS = 1000;, +, +    private long time;, +, +    @After, +    public void cleanUpTest() {, +        cleanUp();, +    }, +, +    public void testInterimResultsUpdates() throws Exception {, +        String jobId = "test-interim-results-updates";, +        AnalysisConfig.Builder analysisConfig = new AnalysisConfig.Builder(, +                Collections.singletonList(new Detector.Builder("max", "value").build()));, +        analysisConfig.setBucketSpan(TimeValue.timeValueSeconds(BUCKET_SPAN_SECONDS));, +        DataDescription.Builder dataDescription = new DataDescription.Builder();, +        dataDescription.setTimeFormat("epoch");, +        Job.Builder job = new Job.Builder(jobId);, +        job.setAnalysisConfig(analysisConfig);, +        job.setDataDescription(dataDescription);, +, +        registerJob(job);, +        putJob(job);, +        openJob(job.getId());, +, +        time = 1400000000;, +, +        // push some data, flush job, verify no interim results, +        assertThat(postData(job.getId(), createData(50)).getProcessedRecordCount(), equalTo(50L));, +        flushJob(job.getId(), false);, +        assertThat(getInterimResults(job.getId()).isEmpty(), is(true));, +, +        // push some more data, flush job, verify no interim results, +        assertThat(postData(job.getId(), createData(30)).getProcessedRecordCount(), equalTo(30L));, +        flushJob(job.getId(), false);, +        assertThat(getInterimResults(job.getId()).isEmpty(), is(true));, +        assertThat(time, equalTo(1400040000L));, +, +        // push some data up to a 1/4 bucket boundary, flush (with interim), check interim results, +        String data = "{\"time\":1400040000,\"value\":14}\n", +                + "{\"time\":1400040500,\"value\":12}\n", +                + "{\"time\":1400040510,\"value\":16}\n";, +        assertThat(postData(job.getId(), data).getProcessedRecordCount(), equalTo(3L));, +        flushJob(job.getId(), true);, +, +        // We might need to retry this while waiting for a refresh, +        assertBusy(() -> {, +            List<Bucket> firstInterimBuckets = getInterimResults(job.getId());, +            assertThat("interim buckets were: " + firstInterimBuckets, firstInterimBuckets.size(), equalTo(1));, +            assertThat(firstInterimBuckets.get(0).getTimestamp().getTime(), equalTo(1400040000000L));, +            assertThat(firstInterimBuckets.get(0).getRecords().get(0).getActual().get(0), equalTo(16.0));, +        });, +, +        // push 1 more record, flush (with interim), check same interim result, +        data = "{\"time\":1400040520,\"value\":15}\n";, +        assertThat(postData(job.getId(), data).getProcessedRecordCount(), equalTo(1L));, +        flushJob(job.getId(), true);, +, +        assertBusy(() -> {, +            List<Bucket> secondInterimBuckets = getInterimResults(job.getId());, +            assertThat(secondInterimBuckets.get(0).getTimestamp().getTime(), equalTo(1400040000000L));, +        });, +, +        // push rest of data, close, verify no interim results, +        time += BUCKET_SPAN_SECONDS;, +        assertThat(postData(job.getId(), createData(30)).getProcessedRecordCount(), equalTo(30L));, +        closeJob(job.getId());, +        assertThat(getInterimResults(job.getId()).isEmpty(), is(true));, +]