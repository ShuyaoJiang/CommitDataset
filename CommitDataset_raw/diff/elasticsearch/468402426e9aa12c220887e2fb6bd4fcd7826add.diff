[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetCategoriesDefinitionAction.java, +            Integer from = request.pageParams != null ? request.pageParams.getFrom() : null;, +            Integer size = request.pageParams != null ? request.pageParams.getSize() : null;, +            jobProvider.categoryDefinitions(request.jobId, request.categoryId, from, size,, +                    r -> listener.onResponse(new Response(r)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetCategoriesDefinitionAction.java, +            Integer from = request.pageParams != null ? request.pageParams.getFrom() : null;, +            Integer size = request.pageParams != null ? request.pageParams.getSize() : null;, +            jobProvider.categoryDefinitions(request.jobId, request.categoryId, from, size,, +                    r -> listener.onResponse(new Response(r)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/JobProvider.java, +import org.elasticsearch.index.mapper.Uid;, +import org.elasticsearch.index.mapper.UidFieldMapper;, +    public void categoryDefinitions(String jobId, String categoryId, Integer from, Integer size,, +                                    Consumer<QueryPage<CategoryDefinition>> handler,, +                                    Consumer<Exception> errorHandler) {, +        if (categoryId != null && (from != null || size != null)) {, +            throw new IllegalStateException("Both categoryId and pageParams are specified");, +        }, +, +        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();, +        if (categoryId != null) {, +            String uid = Uid.createUid(CategoryDefinition.TYPE.getPreferredName(), categoryId);, +            sourceBuilder.query(QueryBuilders.termQuery(UidFieldMapper.NAME, uid));, +            searchRequest.routing(categoryId);, +        } else if (from != null && size != null) {, +            sourceBuilder.from(from).size(size), +                    .sort(new FieldSortBuilder(CategoryDefinition.CATEGORY_ID.getPreferredName()).order(SortOrder.ASC));, +        } else {, +            throw new IllegalStateException("Both categoryId and pageParams are not specified");, +        searchRequest.source(sourceBuilder);, +        client.search(searchRequest, ActionListener.wrap(searchResponse -> {, +            QueryPage<CategoryDefinition> result =, +                    new QueryPage<>(results, searchResponse.getHits().getTotalHits(), CategoryDefinition.RESULTS_FIELD);, +            handler.accept(result);, +        }, e -> {, +            if (e instanceof IndexNotFoundException) {, +                errorHandler.accept(ExceptionsHelper.missingJobException(jobId));, +            } else {, +                errorHandler.accept(e);, +        }));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetCategoriesDefinitionAction.java, +            Integer from = request.pageParams != null ? request.pageParams.getFrom() : null;, +            Integer size = request.pageParams != null ? request.pageParams.getSize() : null;, +            jobProvider.categoryDefinitions(request.jobId, request.categoryId, from, size,, +                    r -> listener.onResponse(new Response(r)), listener::onFailure);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/JobProvider.java, +import org.elasticsearch.index.mapper.Uid;, +import org.elasticsearch.index.mapper.UidFieldMapper;, +    public void categoryDefinitions(String jobId, String categoryId, Integer from, Integer size,, +                                    Consumer<QueryPage<CategoryDefinition>> handler,, +                                    Consumer<Exception> errorHandler) {, +        if (categoryId != null && (from != null || size != null)) {, +            throw new IllegalStateException("Both categoryId and pageParams are specified");, +        }, +, +        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();, +        if (categoryId != null) {, +            String uid = Uid.createUid(CategoryDefinition.TYPE.getPreferredName(), categoryId);, +            sourceBuilder.query(QueryBuilders.termQuery(UidFieldMapper.NAME, uid));, +            searchRequest.routing(categoryId);, +        } else if (from != null && size != null) {, +            sourceBuilder.from(from).size(size), +                    .sort(new FieldSortBuilder(CategoryDefinition.CATEGORY_ID.getPreferredName()).order(SortOrder.ASC));, +        } else {, +            throw new IllegalStateException("Both categoryId and pageParams are not specified");, +        searchRequest.source(sourceBuilder);, +        client.search(searchRequest, ActionListener.wrap(searchResponse -> {, +            QueryPage<CategoryDefinition> result =, +                    new QueryPage<>(results, searchResponse.getHits().getTotalHits(), CategoryDefinition.RESULTS_FIELD);, +            handler.accept(result);, +        }, e -> {, +            if (e instanceof IndexNotFoundException) {, +                errorHandler.accept(ExceptionsHelper.missingJobException(jobId));, +            } else {, +                errorHandler.accept(e);, +        }));, +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/prelert/integration/AutodetectResultProcessorIT.java, +        QueryPage<CategoryDefinition> persistedDefinition = getCategoryDefinition(Long.toString(categoryDefinition.getCategoryId()));, +, +    private QueryPage<CategoryDefinition> getCategoryDefinition(String categoryId) throws Exception {, +        AtomicReference<Exception> errorHolder = new AtomicReference<>();, +        AtomicReference<QueryPage<CategoryDefinition>> resultHolder = new AtomicReference<>();, +        CountDownLatch latch = new CountDownLatch(1);, +        jobProvider.categoryDefinitions(JOB_ID, categoryId, null, null, r -> {, +            resultHolder.set(r);, +            latch.countDown();, +        }, e -> {, +            errorHolder.set(e);, +            latch.countDown();, +        });, +        latch.await();, +        if (errorHolder.get() != null) {, +            throw errorHolder.get();, +        }, +        return resultHolder.get();, +    }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/action/GetCategoriesDefinitionAction.java, +            Integer from = request.pageParams != null ? request.pageParams.getFrom() : null;, +            Integer size = request.pageParams != null ? request.pageParams.getSize() : null;]