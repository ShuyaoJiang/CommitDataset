[+++ b/docs/reference/search/facets/terms-facet.asciidoc, +==== Accuracy Control, +, +added[0.90.6], +, +The `size` parameter defines how many top terms should be returned out, +of the overall terms list. By default, the node coordinating the, +search process will ask each shard to provide its own top `size` terms, +and once all shards respond, it will reduces the results to the final list, +that will then be sent back to the client. This means that if the number, +of unique terms is greater than `size`, the returned list is slightly off, +and not accurate (it could be that the term counts are slightly off and it, +could even be that a term that should have been in the top `size` entries, +was not returned)., +, +The higher the requested `size` is, the more accurate the results will be,, +but also, the more expensive it will be to compute the final results (both, +due to bigger priority queues that are managed on a shard level and due to, +bigger data transfers between the nodes and the client). In an attempt to, +minimize the extra work that comes with bigger requested `size` we a, +`shard_size` parameter was introduced. The once defined, it will determine, +how many terms the coordinating node is requesting from each shard. Once, +all the shards responded, the coordinating node will then reduce them, +to a final result which will be based on the `size` parameter - this way,, +once can increase the accuracy of the returned terms and avoid the overhead, +of streaming a big list of terms back to the client., +, +Note that `shard_size` cannot be smaller than `size`... if that's the case, +elasticsearch will override it and reset it to be equal to `size`., +, +, +++ b/docs/reference/search/facets/terms-facet.asciidoc, +==== Accuracy Control, +, +added[0.90.6], +, +The `size` parameter defines how many top terms should be returned out, +of the overall terms list. By default, the node coordinating the, +search process will ask each shard to provide its own top `size` terms, +and once all shards respond, it will reduces the results to the final list, +that will then be sent back to the client. This means that if the number, +of unique terms is greater than `size`, the returned list is slightly off, +and not accurate (it could be that the term counts are slightly off and it, +could even be that a term that should have been in the top `size` entries, +was not returned)., +, +The higher the requested `size` is, the more accurate the results will be,, +but also, the more expensive it will be to compute the final results (both, +due to bigger priority queues that are managed on a shard level and due to, +bigger data transfers between the nodes and the client). In an attempt to, +minimize the extra work that comes with bigger requested `size` we a, +`shard_size` parameter was introduced. The once defined, it will determine, +how many terms the coordinating node is requesting from each shard. Once, +all the shards responded, the coordinating node will then reduce them, +to a final result which will be based on the `size` parameter - this way,, +once can increase the accuracy of the returned terms and avoid the overhead, +of streaming a big list of terms back to the client., +, +Note that `shard_size` cannot be smaller than `size`... if that's the case, +elasticsearch will override it and reset it to be equal to `size`., +, +, +++ b/docs/reference/search/facets/terms-stats-facet.asciidoc, +One can also set `shard_size` (in addition to `size`) which will determine, +how many term entries will be requested from each shard. When dealing, +with field with high cardinality (at least higher than the requested `size`), +The greater `shard_size` is - the more accurate the result will be (and the, +more expensive the overall facet computation will be). `shard_size` is there, +to enable you to increase accuracy yet still avoid returning too many, +terms_stats entries back to the client., +, +++ b/docs/reference/search/facets/terms-facet.asciidoc, +==== Accuracy Control, +, +added[0.90.6], +, +The `size` parameter defines how many top terms should be returned out, +of the overall terms list. By default, the node coordinating the, +search process will ask each shard to provide its own top `size` terms, +and once all shards respond, it will reduces the results to the final list, +that will then be sent back to the client. This means that if the number, +of unique terms is greater than `size`, the returned list is slightly off, +and not accurate (it could be that the term counts are slightly off and it, +could even be that a term that should have been in the top `size` entries, +was not returned)., +, +The higher the requested `size` is, the more accurate the results will be,, +but also, the more expensive it will be to compute the final results (both, +due to bigger priority queues that are managed on a shard level and due to, +bigger data transfers between the nodes and the client). In an attempt to, +minimize the extra work that comes with bigger requested `size` we a, +`shard_size` parameter was introduced. The once defined, it will determine, +how many terms the coordinating node is requesting from each shard. Once, +all the shards responded, the coordinating node will then reduce them, +to a final result which will be based on the `size` parameter - this way,, +once can increase the accuracy of the returned terms and avoid the overhead, +of streaming a big list of terms back to the client., +, +Note that `shard_size` cannot be smaller than `size`... if that's the case, +elasticsearch will override it and reset it to be equal to `size`.]