[+++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +import com.google.common.collect.Sets;, +import java.util.Set;, +        private static final Set<String> VALID_FIELDS = Sets.newHashSet("template", "order", "mappings", "settings");, +        static {, +            VALID_FIELDS.addAll(IndexMetaData.customFactories.keySet());, +        }, +, +            String currentFieldName = skipTemplateName(parser);, +            XContentParser.Token token;, +        private static String skipTemplateName(XContentParser parser) throws IOException {, +            XContentParser.Token token = parser.nextToken();, +            if (token != null && token == XContentParser.Token.START_OBJECT) {, +                token = parser.nextToken();, +                if (token == XContentParser.Token.FIELD_NAME) {, +                    String currentFieldName = parser.currentName();, +                    if (VALID_FIELDS.contains(currentFieldName)) {, +                        return currentFieldName;, +                    } else {, +                        // we just hit the template name, which should be ignored and we move on, +                        parser.nextToken();, +                    }, +                }, +            }, +, +            return null;, +        }, +, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +import com.google.common.collect.Sets;, +import java.util.Set;, +        private static final Set<String> VALID_FIELDS = Sets.newHashSet("template", "order", "mappings", "settings");, +        static {, +            VALID_FIELDS.addAll(IndexMetaData.customFactories.keySet());, +        }, +, +            String currentFieldName = skipTemplateName(parser);, +            XContentParser.Token token;, +        private static String skipTemplateName(XContentParser parser) throws IOException {, +            XContentParser.Token token = parser.nextToken();, +            if (token != null && token == XContentParser.Token.START_OBJECT) {, +                token = parser.nextToken();, +                if (token == XContentParser.Token.FIELD_NAME) {, +                    String currentFieldName = parser.currentName();, +                    if (VALID_FIELDS.contains(currentFieldName)) {, +                        return currentFieldName;, +                    } else {, +                        // we just hit the template name, which should be ignored and we move on, +                        parser.nextToken();, +                    }, +                }, +            }, +, +            return null;, +        }, +, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                        IndexTemplateMetaData template = IndexTemplateMetaData.Builder.fromXContent(parser);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java, +import com.google.common.collect.Sets;, +import java.util.Set;, +        private static final Set<String> VALID_FIELDS = Sets.newHashSet("template", "order", "mappings", "settings");, +        static {, +            VALID_FIELDS.addAll(IndexMetaData.customFactories.keySet());, +        }, +, +            String currentFieldName = skipTemplateName(parser);, +            XContentParser.Token token;, +        private static String skipTemplateName(XContentParser parser) throws IOException {, +            XContentParser.Token token = parser.nextToken();, +            if (token != null && token == XContentParser.Token.START_OBJECT) {, +                token = parser.nextToken();, +                if (token == XContentParser.Token.FIELD_NAME) {, +                    String currentFieldName = parser.currentName();, +                    if (VALID_FIELDS.contains(currentFieldName)) {, +                        return currentFieldName;, +                    } else {, +                        // we just hit the template name, which should be ignored and we move on, +                        parser.nextToken();, +                    }, +                }, +            }, +, +            return null;, +        }, +, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                        IndexTemplateMetaData template = IndexTemplateMetaData.Builder.fromXContent(parser);, +++ b/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java, +import static org.hamcrest.Matchers.is;, +                        .put(IndexTemplateMetaData.builder("foo"), +                                .template("bar"), +                                .order(1).settings(settingsBuilder(), +                                        .put("setting1", "value1"), +                                        .put("setting2", "value2"))), +, +        // templates, +        assertThat(parsedMetaData.templates().get("foo").name(), is("foo"));, +        assertThat(parsedMetaData.templates().get("foo").template(), is("bar"));, +        assertThat(parsedMetaData.templates().get("foo").settings().get("index.setting1"), is("value1"));]