[+++ b/x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec, +SELECT gender, PERCENTILE(emp_no, 90 + 7) p1 FROM test_emp GROUP BY gender;, +SELECT gender, PERCENTILE_RANK(emp_no, 10000 + 25) rank FROM test_emp GROUP BY gender;, +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec, +SELECT gender, PERCENTILE(emp_no, 90 + 7) p1 FROM test_emp GROUP BY gender;, +SELECT gender, PERCENTILE_RANK(emp_no, 10000 + 25) rank FROM test_emp GROUP BY gender;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +        return Arrays.asList(operators, aggregate, local, label);, +++ b/x-pack/plugin/sql/qa/src/main/resources/agg.csv-spec, +SELECT gender, PERCENTILE(emp_no, 90 + 7) p1 FROM test_emp GROUP BY gender;, +SELECT gender, PERCENTILE_RANK(emp_no, 10000 + 25) rank FROM test_emp GROUP BY gender;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +        return Arrays.asList(operators, aggregate, local, label);, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryFolderTests.java, +import org.elasticsearch.xpack.sql.expression.function.aggregate.AggregateFunctionAttribute;, +, +    public void testFoldingOfPercentileSecondArgument() {, +        PhysicalPlan p = plan("SELECT PERCENTILE(int, 1 + 2) FROM test");, +        assertEquals(EsQueryExec.class, p.getClass());, +        EsQueryExec ee = (EsQueryExec) p;, +        assertEquals(1, ee.output().size());, +        assertEquals(AggregateFunctionAttribute.class, ee.output().get(0).getClass());, +        AggregateFunctionAttribute afa = (AggregateFunctionAttribute) ee.output().get(0);, +        assertThat(afa.propertyPath(), endsWith("[3.0]"));, +    }, +, +    public void testFoldingOfPercentileRankSecondArgument() {, +        PhysicalPlan p = plan("SELECT PERCENTILE_RANK(int, 1 + 2) FROM test");, +        assertEquals(EsQueryExec.class, p.getClass());, +        EsQueryExec ee = (EsQueryExec) p;, +        assertEquals(1, ee.output().size());, +        assertEquals(AggregateFunctionAttribute.class, ee.output().get(0).getClass());, +        AggregateFunctionAttribute afa = (AggregateFunctionAttribute) ee.output().get(0);, +        assertThat(afa.propertyPath(), endsWith("[3.0]"));, +    }]