[+++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ESClientYamlSuiteTestCase.java, +        assumeFalse(testCandidate.getSetupSection().getSkipSection().getSkipMessage(testCandidate.getSuitePath()),, +        assumeFalse(testCandidate.getTeardownSection().getSkipSection().getSkipMessage(testCandidate.getSuitePath()),, +        assumeFalse(testCandidate.getTestSection().getSkipSection().getSkipMessage(testCandidate.getTestPath()),, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ESClientYamlSuiteTestCase.java, +        assumeFalse(testCandidate.getSetupSection().getSkipSection().getSkipMessage(testCandidate.getSuitePath()),, +        assumeFalse(testCandidate.getTeardownSection().getSkipSection().getSkipMessage(testCandidate.getSuitePath()),, +        assumeFalse(testCandidate.getTestSection().getSkipSection().getSkipMessage(testCandidate.getTestPath()),, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/parser/SkipSectionParser.java, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ESClientYamlSuiteTestCase.java, +        assumeFalse(testCandidate.getSetupSection().getSkipSection().getSkipMessage(testCandidate.getSuitePath()),, +        assumeFalse(testCandidate.getTeardownSection().getSkipSection().getSkipMessage(testCandidate.getSuitePath()),, +        assumeFalse(testCandidate.getTestSection().getSkipSection().getSkipMessage(testCandidate.getTestPath()),, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/parser/SkipSectionParser.java, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/section/SkipSection.java, +        boolean skip = lowerVersion != null && upperVersion != null && currentVersion.onOrAfter(lowerVersion), +            && currentVersion.onOrBefore(upperVersion);, +        skip |= Features.areAllSupported(features) == false;, +        return skip;, +, +    public String getSkipMessage(String description) {, +        StringBuilder messageBuilder = new StringBuilder();, +        messageBuilder.append("[").append(description).append("] skipped,");, +        if (reason != null) {, +             messageBuilder.append(" reason: [").append(getReason()).append("]");, +        }, +        if (features.isEmpty() == false) {, +            messageBuilder.append(" unsupported features ").append(getFeatures());, +        }, +        return messageBuilder.toString();, +    }, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ESClientYamlSuiteTestCase.java, +        assumeFalse(testCandidate.getSetupSection().getSkipSection().getSkipMessage(testCandidate.getSuitePath()),, +        assumeFalse(testCandidate.getTeardownSection().getSkipSection().getSkipMessage(testCandidate.getSuitePath()),, +        assumeFalse(testCandidate.getTestSection().getSkipSection().getSkipMessage(testCandidate.getTestPath()),, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/parser/SkipSectionParser.java, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/section/SkipSection.java, +        boolean skip = lowerVersion != null && upperVersion != null && currentVersion.onOrAfter(lowerVersion), +            && currentVersion.onOrBefore(upperVersion);, +        skip |= Features.areAllSupported(features) == false;, +        return skip;, +, +    public String getSkipMessage(String description) {, +        StringBuilder messageBuilder = new StringBuilder();, +        messageBuilder.append("[").append(description).append("] skipped,");, +        if (reason != null) {, +             messageBuilder.append(" reason: [").append(getReason()).append("]");, +        }, +        if (features.isEmpty() == false) {, +            messageBuilder.append(" unsupported features ").append(getFeatures());, +        }, +        return messageBuilder.toString();, +    }, +++ b/test/framework/src/test/java/org/elasticsearch/test/rest/yaml/parser/SkipSectionParserTests.java, +import java.util.Arrays;, +, +        SkipSection parse = skipSectionParser.parse(new ClientYamlTestSuiteParseContext("api", "suite", parser));, +        assertEquals(VersionUtils.getFirstVersion(), parse.getLowerVersion());, +        assertEquals(Version.fromString("0.90.2"), parse.getUpperVersion());, +        assertEquals(Arrays.asList("regex"), parse.getFeatures());, +        assertEquals("Delete ignores the parent param", parse.getReason());, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ESClientYamlSuiteTestCase.java, +        assumeFalse(testCandidate.getSetupSection().getSkipSection().getSkipMessage(testCandidate.getSuitePath()),, +        assumeFalse(testCandidate.getTeardownSection().getSkipSection().getSkipMessage(testCandidate.getSuitePath()),, +        assumeFalse(testCandidate.getTestSection().getSkipSection().getSkipMessage(testCandidate.getTestPath()),, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/parser/SkipSectionParser.java, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/section/SkipSection.java, +        boolean skip = lowerVersion != null && upperVersion != null && currentVersion.onOrAfter(lowerVersion), +            && currentVersion.onOrBefore(upperVersion);, +        skip |= Features.areAllSupported(features) == false;, +        return skip;, +, +    public String getSkipMessage(String description) {, +        StringBuilder messageBuilder = new StringBuilder();, +        messageBuilder.append("[").append(description).append("] skipped,");, +        if (reason != null) {, +             messageBuilder.append(" reason: [").append(getReason()).append("]");, +        }, +        if (features.isEmpty() == false) {, +            messageBuilder.append(" unsupported features ").append(getFeatures());, +        }, +        return messageBuilder.toString();, +    }, +++ b/test/framework/src/test/java/org/elasticsearch/test/rest/yaml/parser/SkipSectionParserTests.java, +import java.util.Arrays;, +, +        SkipSection parse = skipSectionParser.parse(new ClientYamlTestSuiteParseContext("api", "suite", parser));, +        assertEquals(VersionUtils.getFirstVersion(), parse.getLowerVersion());, +        assertEquals(Version.fromString("0.90.2"), parse.getUpperVersion());, +        assertEquals(Arrays.asList("regex"), parse.getFeatures());, +        assertEquals("Delete ignores the parent param", parse.getReason());, +++ b/test/framework/src/test/java/org/elasticsearch/test/rest/yaml/section/SkipSectionTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at]