[+++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        assert mappingLock.isWriteLockedByCurrentThread();, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        assert mappingLock.isWriteLockedByCurrentThread();, +++ b/src/test/java/org/elasticsearch/index/mapper/merge/TestMergeMapperTests.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.index.mapper.DocumentFieldMappers;, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.mapper.DocumentMapperParser;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.mapper.Mapping;, +import org.elasticsearch.index.mapper.MergeResult;, +import org.elasticsearch.index.mapper.ParsedDocument;, +import java.util.concurrent.atomic.AtomicReference;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.hamcrest.Matchers.nullValue;, +    public void testConcurrentMergeTest() throws Throwable {, +        mapperService.merge("test", new CompressedString("{\"test\":{}}"), true);, +        final DocumentMapper documentMapper = mapperService.documentMapper("test");, +, +        DocumentFieldMappers dfm = documentMapper.mappers();, +            ((FieldNameAnalyzer) dfm.indexAnalyzer()).getWrappedAnalyzer("non_existing_field");, +            fail();, +        } catch (IllegalArgumentException e) {, +            // ok that's expected, +, +        final AtomicReference<String> lastIntroducedFieldName = new AtomicReference<>();, +        final AtomicReference<Throwable> error = new AtomicReference<>();, +                    for (int i = 0; i < 200 && stopped.get() == false; i++) {, +                        final String fieldName = Integer.toString(i);, +                        ParsedDocument doc = documentMapper.parse("test", fieldName, new BytesArray("{ \"" + fieldName + "\" : \"test\" }"));, +                        Mapping update = doc.dynamicMappingsUpdate();, +                        assert update != null;, +                        lastIntroducedFieldName.set(fieldName);, +                        mapperService.merge("test", new CompressedString(update.toString()), false);, +                } catch (Throwable t) {, +                    error.set(t);, +        try {, +                final String fieldName = lastIntroducedFieldName.get();, +                final BytesReference source = new BytesArray("{ \"" + fieldName + "\" : \"test\" }");, +                ParsedDocument parsedDoc = documentMapper.parse("test", "random", source);, +                if (parsedDoc.dynamicMappingsUpdate() != null) {, +                    // not in the mapping yet, try again, +                    continue;, +                dfm = documentMapper.mappers();, +                ((FieldNameAnalyzer) dfm.indexAnalyzer()).getWrappedAnalyzer(fieldName);, +            }, +        } finally {, +            stopped.set(true);, +            updater.join();, +        }, +        if (error.get() != null) {, +            throw error.get();]