[+++ b/plugins/lang-groovy/src/test/java/org/elasticsearch/script/groovy/GroovySecurityTests.java, +import org.elasticsearch.script.CompiledScript;, +import org.elasticsearch.script.ScriptService;, +import org.elasticsearch.test.ESTestCase;, +import java.util.AbstractMap;, +import java.util.HashMap;, +import java.util.Map;, +public class GroovySecurityTests extends ESTestCase {, +, +    private GroovyScriptEngineService se;, +, +        se = new GroovyScriptEngineService(Settings.Builder.EMPTY_SETTINGS);, +        // otherwise will exit your VM and other bad stuff, +    public void tearDown() throws Exception {, +        se.close();, +        super.tearDown();, +        // field access, +    /** runs a script */, +    private void doTest(String script) {, +        Map<String, Object> vars = new HashMap<String, Object>();, +        // we add a "mock document" containing a single field "foo" that returns 4 (abusing a jdk class with a getValue() method), +        vars.put("doc", Collections.singletonMap("foo", new AbstractMap.SimpleEntry<Object,Integer>(null, 4)));, +        se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "test", "js", se.compile(script)), vars).run();, +    /** asserts that a script runs without exception */, +    private void assertSuccess(String script) {, +        doTest(script);, +    }, +, +    /** asserts that a script triggers securityexception */, +        try {, +            doTest(script);, +            fail("did not get expected exception");, +        } catch (ScriptException expected) {, +            Throwable cause = expected.getCause();, +            assertNotNull(cause);, +            assertTrue("unexpected exception: " + cause, cause instanceof SecurityException);]