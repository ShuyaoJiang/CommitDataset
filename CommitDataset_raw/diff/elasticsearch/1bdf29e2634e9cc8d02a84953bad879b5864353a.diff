[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String javaHome = System.getenv('JAVA_HOME'), +            println "  JDK Version    : ${System.getProperty('java.runtime.version')} (${System.getProperty('java.vendor')})", +            println "  JAVA_HOME      : ${javaHome == null ? 'not set' : javaHome}", +            if (JavaVersion.current() < minimumJava) {, +            // find java home so eg tests can use it to set java to run with, +            project.rootProject.ext.javaHome = javaHome, +            project.rootProject.ext.buildChecksDone = true, +        }, +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava, +        // set java home for each project, so they dont have to find it in the root project, +        project.ext.javaHome = project.rootProject.ext.javaHome, +    /** Return the name, +     */, +    static String transitiveDepConfigName(String groupId, String artifactId, String version) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                        'Build-Date': ZonedDateTime.now(ZoneOffset.UTC)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String javaHome = System.getenv('JAVA_HOME'), +            println "  JDK Version    : ${System.getProperty('java.runtime.version')} (${System.getProperty('java.vendor')})", +            println "  JAVA_HOME      : ${javaHome == null ? 'not set' : javaHome}", +            if (JavaVersion.current() < minimumJava) {, +            // find java home so eg tests can use it to set java to run with, +            project.rootProject.ext.javaHome = javaHome, +            project.rootProject.ext.buildChecksDone = true, +        }, +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava, +        // set java home for each project, so they dont have to find it in the root project, +        project.ext.javaHome = project.rootProject.ext.javaHome, +    /** Return the name, +     */, +    static String transitiveDepConfigName(String groupId, String artifactId, String version) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                        'Build-Date': ZonedDateTime.now(ZoneOffset.UTC)), +++ b/core/src/main/java/org/elasticsearch/index/translog/Checkpoint.java, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        Checkpoint that = (Checkpoint) o;, +, +        if (offset != that.offset) return false;, +        if (numOps != that.numOps) return false;, +        return generation == that.generation;, +, +    }, +, +    @Override, +    public int hashCode() {, +        int result = Long.hashCode(offset);, +        result = 31 * result + numOps;, +        result = 31 * result + Long.hashCode(generation);, +        return result;, +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            String javaHome = System.getenv('JAVA_HOME'), +            println "  JDK Version    : ${System.getProperty('java.runtime.version')} (${System.getProperty('java.vendor')})", +            println "  JAVA_HOME      : ${javaHome == null ? 'not set' : javaHome}", +            if (JavaVersion.current() < minimumJava) {, +            // find java home so eg tests can use it to set java to run with, +            project.rootProject.ext.javaHome = javaHome, +            project.rootProject.ext.buildChecksDone = true, +        }, +        project.targetCompatibility = minimumJava, +        project.sourceCompatibility = minimumJava, +        // set java home for each project, so they dont have to find it in the root project, +        project.ext.javaHome = project.rootProject.ext.javaHome, +    /** Return the name, +     */, +    static String transitiveDepConfigName(String groupId, String artifactId, String version) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                        'Build-Date': ZonedDateTime.now(ZoneOffset.UTC)), +++ b/core/src/main/java/org/elasticsearch/index/translog/Checkpoint.java, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +, +        Checkpoint that = (Checkpoint) o;, +, +        if (offset != that.offset) return false;, +        if (numOps != that.numOps) return false;, +        return generation == that.generation;, +, +    }, +, +    @Override, +    public int hashCode() {, +        int result = Long.hashCode(offset);, +        result = 31 * result + numOps;, +        result = 31 * result + Long.hashCode(generation);, +        return result;, +    }, +++ b/core/src/main/java/org/elasticsearch/index/translog/Translog.java, +    private final ArrayList<ImmutableTranslogReader> recoverFromFiles(TranslogGeneration translogGeneration, Checkpoint checkpoint) throws IOException {, +        final Path tempFile = Files.createTempFile(location, TRANSLOG_FILE_PREFIX, TRANSLOG_FILE_SUFFIX); // a temp file to copy checkpoint to - note it must be in on the same FS otherwise atomic move won't work, +            if (Files.exists(commitCheckpoint)) {]