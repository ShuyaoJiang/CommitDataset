[+++ b/docs/reference/rollup/apis/delete-job.asciidoc, +This API deletes an existing rollup job.  A job must be *stopped* first before it can be deleted.  Attempting to delete, +a started job will result in an error. Similarly, attempting to delete a nonexistent job will throw an exception., +                "reason" : "the task with id [does_not_exist] doesn't exist",, +        "reason" : "the task with id [does_not_exist] doesn't exist",, +++ b/docs/reference/rollup/apis/delete-job.asciidoc, +This API deletes an existing rollup job.  A job must be *stopped* first before it can be deleted.  Attempting to delete, +a started job will result in an error. Similarly, attempting to delete a nonexistent job will throw an exception., +                "reason" : "the task with id [does_not_exist] doesn't exist",, +        "reason" : "the task with id [does_not_exist] doesn't exist",, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +++ b/docs/reference/rollup/apis/delete-job.asciidoc, +This API deletes an existing rollup job.  A job must be *stopped* first before it can be deleted.  Attempting to delete, +a started job will result in an error. Similarly, attempting to delete a nonexistent job will throw an exception., +                "reason" : "the task with id [does_not_exist] doesn't exist",, +        "reason" : "the task with id [does_not_exist] doesn't exist",, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +++ b/server/src/main/java/org/elasticsearch/action/support/tasks/BaseTasksResponse.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import java.util.Objects;, +    protected static final String TASK_FAILURES = "task_failures";, +    protected static final String NODE_FAILURES = "node_failures";, +, +, +    protected void toXContentCommon(XContentBuilder builder, ToXContent.Params params) throws IOException {, +        if (getTaskFailures() != null && getTaskFailures().size() > 0) {, +            builder.startArray(TASK_FAILURES);, +            for (TaskOperationFailure ex : getTaskFailures()){, +                builder.startObject();, +                builder.value(ex);, +                builder.endObject();, +            }, +            builder.endArray();, +        }, +, +        if (getNodeFailures() != null && getNodeFailures().size() > 0) {, +            builder.startArray(NODE_FAILURES);, +            for (ElasticsearchException ex : getNodeFailures()) {, +                builder.startObject();, +                ex.toXContent(builder, params);, +                builder.endObject();, +            }, +            builder.endArray();, +        }, +    }, +, +    @Override, +    public boolean equals(Object o) {, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +        BaseTasksResponse response = (BaseTasksResponse) o;, +        return taskFailures.equals(response.taskFailures), +            && nodeFailures.equals(response.nodeFailures);, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(taskFailures, nodeFailures);, +    }, +++ b/docs/reference/rollup/apis/delete-job.asciidoc, +This API deletes an existing rollup job.  A job must be *stopped* first before it can be deleted.  Attempting to delete, +a started job will result in an error. Similarly, attempting to delete a nonexistent job will throw an exception., +                "reason" : "the task with id [does_not_exist] doesn't exist",, +        "reason" : "the task with id [does_not_exist] doesn't exist",, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +++ b/server/src/main/java/org/elasticsearch/action/support/tasks/BaseTasksResponse.java, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import java.util.Objects;, +    protected static final String TASK_FAILURES = "task_failures";, +    protected static final String NODE_FAILURES = "node_failures";, +, +, +    protected void toXContentCommon(XContentBuilder builder, ToXContent.Params params) throws IOException {, +        if (getTaskFailures() != null && getTaskFailures().size() > 0) {, +            builder.startArray(TASK_FAILURES);, +            for (TaskOperationFailure ex : getTaskFailures()){, +                builder.startObject();, +                builder.value(ex);, +                builder.endObject();, +            }, +            builder.endArray();, +        }, +, +        if (getNodeFailures() != null && getNodeFailures().size() > 0) {, +            builder.startArray(NODE_FAILURES);, +            for (ElasticsearchException ex : getNodeFailures()) {, +                builder.startObject();, +                ex.toXContent(builder, params);, +                builder.endObject();, +            }, +            builder.endArray();, +        }, +    }, +]