[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.index.IndexSettings;, +import java.util.Collections;, +            IndexSettings indexSettings = new IndexSettings(indexMetaData, this.settings, Collections.EMPTY_LIST);, +            SimilarityService similarityService = new SimilarityService(indexSettings, Collections.EMPTY_MAP);, +, +, +            try (AnalysisService analysisService = new FakeAnalysisService(indexSettings)) {, +                try (MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(IndexSettings indexSettings) {, +            super(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.index.IndexSettings;, +import java.util.Collections;, +            IndexSettings indexSettings = new IndexSettings(indexMetaData, this.settings, Collections.EMPTY_LIST);, +            SimilarityService similarityService = new SimilarityService(indexSettings, Collections.EMPTY_MAP);, +, +, +            try (AnalysisService analysisService = new FakeAnalysisService(indexSettings)) {, +                try (MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(IndexSettings indexSettings) {, +            super(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +                    Decision allocationDecision = allocation.deciders().canAllocate(shard, target, allocation);, +                    Decision rebalanceDecision = allocation.deciders().canRebalance(shard, allocation);, +                    Decision decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.index.IndexSettings;, +import java.util.Collections;, +            IndexSettings indexSettings = new IndexSettings(indexMetaData, this.settings, Collections.EMPTY_LIST);, +            SimilarityService similarityService = new SimilarityService(indexSettings, Collections.EMPTY_MAP);, +, +, +            try (AnalysisService analysisService = new FakeAnalysisService(indexSettings)) {, +                try (MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(IndexSettings indexSettings) {, +            super(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +                    Decision allocationDecision = allocation.deciders().canAllocate(shard, target, allocation);, +                    Decision rebalanceDecision = allocation.deciders().canRebalance(shard, allocation);, +                    Decision decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision);, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +    public void deleteShardDirectorySafe(ShardId shardId, Settings indexSettings) throws IOException {, +    public static void acquireFSLockForPaths(Settings indexSettings, Path... shardPaths) throws IOException {, +    public void deleteShardDirectoryUnderLock(ShardLock lock, Settings indexSettings) throws IOException {, +    public void deleteIndexDirectorySafe(Index index, long lockTimeoutMS, Settings indexSettings) throws IOException {, +    public void deleteIndexDirectoryUnderLock(Index index, Settings indexSettings) throws IOException {, +    public List<ShardLock> lockAllForIndex(Index index, Settings settings, long lockTimeoutMS) throws IOException {, +    public static boolean hasCustomDataPath(Settings indexSettings) {, +    private Path resolveCustomLocation(Settings indexSettings) {, +    private Path resolveCustomLocation(Settings indexSettings, final String indexName) {, +    public Path resolveCustomLocation(Settings indexSettings, final ShardId shardId) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.index.IndexSettings;, +import java.util.Collections;, +            IndexSettings indexSettings = new IndexSettings(indexMetaData, this.settings, Collections.EMPTY_LIST);, +            SimilarityService similarityService = new SimilarityService(indexSettings, Collections.EMPTY_MAP);, +, +, +            try (AnalysisService analysisService = new FakeAnalysisService(indexSettings)) {, +                try (MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(IndexSettings indexSettings) {, +            super(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +                    Decision allocationDecision = allocation.deciders().canAllocate(shard, target, allocation);, +                    Decision rebalanceDecision = allocation.deciders().canRebalance(shard, allocation);, +                    Decision decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision);, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +    public void deleteShardDirectorySafe(ShardId shardId, Settings indexSettings) throws IOException {, +    public static void acquireFSLockForPaths(Settings indexSettings, Path... shardPaths) throws IOException {, +    public void deleteShardDirectoryUnderLock(ShardLock lock, Settings indexSettings) throws IOException {, +    public void deleteIndexDirectorySafe(Index index, long lockTimeoutMS, Settings indexSettings) throws IOException {, +    public void deleteIndexDirectoryUnderLock(Index index, Settings indexSettings) throws IOException {, +    public List<ShardLock> lockAllForIndex(Index index, Settings settings, long lockTimeoutMS) throws IOException {, +    public static boolean hasCustomDataPath(Settings indexSettings) {, +    private Path resolveCustomLocation(Settings indexSettings) {, +    private Path resolveCustomLocation(Settings indexSettings, final String indexName) {, +    public Path resolveCustomLocation(Settings indexSettings, final ShardId shardId) {, +++ b/core/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java, +import java.util.*;, +            Settings indexSettings = Settings.builder().put(settings).put(indexMetaData.getSettings()).build();, +            NodesAndVersions nodesAndVersions = buildNodesAndVersions(shard, recoverOnAnyNode(indexSettings), allocation.getIgnoreNodes(shard.shardId()), shardState);, +    private boolean recoverOnAnyNode(Settings idxSettings) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import org.elasticsearch.index.IndexSettings;, +import java.util.Collections;, +            IndexSettings indexSettings = new IndexSettings(indexMetaData, this.settings, Collections.EMPTY_LIST);, +            SimilarityService similarityService = new SimilarityService(indexSettings, Collections.EMPTY_MAP);, +, +, +            try (AnalysisService analysisService = new FakeAnalysisService(indexSettings)) {, +                try (MapperService mapperService = new MapperService(indexSettings, analysisService, similarityService, scriptService)) {, +        public FakeAnalysisService(IndexSettings indexSettings) {, +            super(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +                    Decision allocationDecision = allocation.deciders().canAllocate(shard, target, allocation);, +                    Decision rebalanceDecision = allocation.deciders().canRebalance(shard, allocation);, +                    Decision decision = new Decision.Multi().add(allocationDecision).add(rebalanceDecision);, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +    public void deleteShardDirectorySafe(ShardId shardId, Settings indexSettings) throws IOException {]