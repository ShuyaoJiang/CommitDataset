[+++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/ScriptedMetricAggregationBuilder.java, +import java.util.Collections;, +, +        // Extract params from scripts and pass them along to ScriptedMetricAggregatorFactory, since it won't have, +        // access to them for the scripts it's given precompiled., +, +        Map<String, Object> initScriptParams;, +            initScriptParams = initScript.getParams();, +            initScriptParams = Collections.emptyMap();, +, +        Map<String, Object> mapScriptParams = mapScript.getParams();, +, +        Map<String, Object> combineScriptParams;, +            combineScriptParams = combineScript.getParams();, +            combineScriptParams = Collections.emptyMap();, +        return new ScriptedMetricAggregatorFactory(name, searchMapScript, mapScriptParams, executableInitScript, initScriptParams,, +                executableCombineScript, combineScriptParams, reduceScript,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/ScriptedMetricAggregationBuilder.java, +import java.util.Collections;, +, +        // Extract params from scripts and pass them along to ScriptedMetricAggregatorFactory, since it won't have, +        // access to them for the scripts it's given precompiled., +, +        Map<String, Object> initScriptParams;, +            initScriptParams = initScript.getParams();, +            initScriptParams = Collections.emptyMap();, +, +        Map<String, Object> mapScriptParams = mapScript.getParams();, +, +        Map<String, Object> combineScriptParams;, +            combineScriptParams = combineScript.getParams();, +            combineScriptParams = Collections.emptyMap();, +        return new ScriptedMetricAggregatorFactory(name, searchMapScript, mapScriptParams, executableInitScript, initScriptParams,, +                executableCombineScript, combineScriptParams, reduceScript,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/ScriptedMetricAggregatorFactory.java, +    private final Map<String, Object> mapScriptParams;, +    private final Map<String, Object> combineScriptParams;, +    private final Map<String, Object> aggParams;, +    private final Map<String, Object> initScriptParams;, +    public ScriptedMetricAggregatorFactory(String name, SearchScript.Factory mapScript, Map<String, Object> mapScriptParams,, +                                           ExecutableScript.Factory initScript, Map<String, Object> initScriptParams,, +                                           ExecutableScript.Factory combineScript, Map<String, Object> combineScriptParams,, +                                           Script reduceScript, Map<String, Object> aggParams,, +        this.mapScriptParams = mapScriptParams;, +        this.initScriptParams = initScriptParams;, +        this.combineScriptParams = combineScriptParams;, +        this.aggParams = aggParams;, +        Map<String, Object> aggParams = this.aggParams;, +        if (aggParams != null) {, +            aggParams = deepCopyParams(aggParams, context);, +            aggParams = new HashMap<>();, +        if (aggParams.containsKey("_agg") == false) {, +            aggParams.put("_agg", new HashMap<String, Object>());, +        final ExecutableScript initScript = this.initScript.newInstance(mergeParams(aggParams, initScriptParams));, +        final SearchScript.LeafFactory mapScript = this.mapScript.newFactory(mergeParams(aggParams, mapScriptParams), lookup);, +        final ExecutableScript combineScript = this.combineScript.newInstance(mergeParams(aggParams, combineScriptParams));, +                combineScript, reduceScript, aggParams, context, parent,, +    private static Map<String, Object> mergeParams(Map<String, Object> agg, Map<String, Object> script) {, +        // Start with script params, +        Map<String, Object> combined = new HashMap<>(script);, +        // Add in agg params, throwing an exception if any conflicts are detected, +        for (Map.Entry<String, Object> aggEntry : agg.entrySet()) {, +            if (combined.putIfAbsent(aggEntry.getKey(), aggEntry.getValue()) != null) {, +                throw new IllegalArgumentException("Parameter name \"" + aggEntry.getKey() +, +                    "\" used in both aggregation and script parameters");, +            }, +        }, +, +        return combined;, +    }, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/ScriptedMetricAggregationBuilder.java, +import java.util.Collections;, +, +        // Extract params from scripts and pass them along to ScriptedMetricAggregatorFactory, since it won't have, +        // access to them for the scripts it's given precompiled., +, +        Map<String, Object> initScriptParams;, +            initScriptParams = initScript.getParams();, +            initScriptParams = Collections.emptyMap();, +, +        Map<String, Object> mapScriptParams = mapScript.getParams();, +, +        Map<String, Object> combineScriptParams;, +            combineScriptParams = combineScript.getParams();, +            combineScriptParams = Collections.emptyMap();, +        return new ScriptedMetricAggregatorFactory(name, searchMapScript, mapScriptParams, executableInitScript, initScriptParams,, +                executableCombineScript, combineScriptParams, reduceScript,, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/metrics/scripted/ScriptedMetricAggregatorFactory.java, +    private final Map<String, Object> mapScriptParams;, +    private final Map<String, Object> combineScriptParams;, +    private final Map<String, Object> aggParams;, +    private final Map<String, Object> initScriptParams;, +    public ScriptedMetricAggregatorFactory(String name, SearchScript.Factory mapScript, Map<String, Object> mapScriptParams,, +                                           ExecutableScript.Factory initScript, Map<String, Object> initScriptParams,, +                                           ExecutableScript.Factory combineScript, Map<String, Object> combineScriptParams,, +                                           Script reduceScript, Map<String, Object> aggParams,, +        this.mapScriptParams = mapScriptParams;, +        this.initScriptParams = initScriptParams;, +        this.combineScriptParams = combineScriptParams;, +        this.aggParams = aggParams;]