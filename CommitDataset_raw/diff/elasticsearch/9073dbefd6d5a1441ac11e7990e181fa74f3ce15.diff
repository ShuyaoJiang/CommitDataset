[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.storedscripts.PutStoredScriptRequest;, +    static Request putScript(PutStoredScriptRequest putStoredScriptRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_scripts").addPathPart(putStoredScriptRequest.id()).build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        Params params = new Params(request);, +        params.withTimeout(putStoredScriptRequest.timeout());, +        params.withMasterTimeout(putStoredScriptRequest.masterNodeTimeout());, +        if (Strings.hasText(putStoredScriptRequest.context())) {, +            params.putParam("context", putStoredScriptRequest.context());, +        }, +        request.setEntity(createEntity(putStoredScriptRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.storedscripts.PutStoredScriptRequest;, +    static Request putScript(PutStoredScriptRequest putStoredScriptRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_scripts").addPathPart(putStoredScriptRequest.id()).build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        Params params = new Params(request);, +        params.withTimeout(putStoredScriptRequest.timeout());, +        params.withMasterTimeout(putStoredScriptRequest.masterNodeTimeout());, +        if (Strings.hasText(putStoredScriptRequest.context())) {, +            params.putParam("context", putStoredScriptRequest.context());, +        }, +        request.setEntity(createEntity(putStoredScriptRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.admin.cluster.storedscripts.PutStoredScriptRequest;, +import org.elasticsearch.search.aggregations.metrics.ExtendedStatsAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.MaxAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.MinAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.ParsedAvg;, +import org.elasticsearch.search.aggregations.metrics.ParsedCardinality;, +import org.elasticsearch.search.aggregations.metrics.ParsedExtendedStats;, +import org.elasticsearch.search.aggregations.metrics.ParsedGeoBounds;, +import org.elasticsearch.search.aggregations.metrics.ParsedGeoCentroid;, +import org.elasticsearch.search.aggregations.metrics.ParsedHDRPercentileRanks;, +import org.elasticsearch.search.aggregations.metrics.ParsedHDRPercentiles;, +import org.elasticsearch.search.aggregations.metrics.ParsedMax;, +import org.elasticsearch.search.aggregations.metrics.ParsedMin;, +import org.elasticsearch.search.aggregations.metrics.ParsedScriptedMetric;, +import org.elasticsearch.search.aggregations.metrics.ParsedStats;, +import org.elasticsearch.search.aggregations.metrics.ParsedSum;, +import org.elasticsearch.search.aggregations.metrics.ScriptedMetricAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.StatsAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.SumAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.TopHitsAggregationBuilder;, +     * Puts an stored script using the Scripting API., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html"> Scripting API, +     * on elastic.co</a>, +     * @param putStoredScriptRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public AcknowledgedResponse putScript(PutStoredScriptRequest putStoredScriptRequest,, +                                             RequestOptions options) throws IOException {, +        return performRequestAndParseEntity(putStoredScriptRequest, RequestConverters::putScript, options,, +            AcknowledgedResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously puts an stored script using the Scripting API., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html"> Scripting API, +     * on elastic.co</a>, +     * @param putStoredScriptRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void putScriptAsync(PutStoredScriptRequest putStoredScriptRequest, RequestOptions options,, +                               ActionListener<AcknowledgedResponse> listener) {, +        performRequestAsyncAndParseEntity(putStoredScriptRequest, RequestConverters::putScript, options,, +            AcknowledgedResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.storedscripts.PutStoredScriptRequest;, +    static Request putScript(PutStoredScriptRequest putStoredScriptRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_scripts").addPathPart(putStoredScriptRequest.id()).build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        Params params = new Params(request);, +        params.withTimeout(putStoredScriptRequest.timeout());, +        params.withMasterTimeout(putStoredScriptRequest.masterNodeTimeout());, +        if (Strings.hasText(putStoredScriptRequest.context())) {, +            params.putParam("context", putStoredScriptRequest.context());, +        }, +        request.setEntity(createEntity(putStoredScriptRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.admin.cluster.storedscripts.PutStoredScriptRequest;, +import org.elasticsearch.search.aggregations.metrics.ExtendedStatsAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.MaxAggregationBuilder;, +import org.elasticsearch.search.aggregations.metrics.MinAggregationBuilder;]