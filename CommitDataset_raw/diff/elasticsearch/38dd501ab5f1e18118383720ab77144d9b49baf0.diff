[+++ b/pom.xml, +                                <tests.cluster>${tests.cluster}</tests.cluster>, +++ b/pom.xml, +                                <tests.cluster>${tests.cluster}</tests.cluster>, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.transport.InetSocketTransportAddress;, +import org.elasticsearch.common.transport.TransportAddress;, +    private static ImmutableTestCluster GLOBAL_CLUSTER;, +            String cluster = System.getProperty("tests.cluster");, +            if (Strings.hasLength(cluster)) {, +                String[] stringAddresses = cluster.split(",");, +                TransportAddress[] transportAddresses = new TransportAddress[stringAddresses.length];, +                int i = 0;, +                for (String stringAddress : stringAddresses) {, +                    String[] split = stringAddress.split(":");, +                    if (split.length < 2) {, +                        throw new IllegalArgumentException("address [" + cluster + "] not valid");, +                    }, +                    try {, +                        transportAddresses[i++] = new InetSocketTransportAddress(split[0], Integer.valueOf(split[1]));, +                    } catch(NumberFormatException e) {, +                        throw new IllegalArgumentException("port is not valid, expected number but was [" + split[1] + "]");, +                    }, +                }, +                GLOBAL_CLUSTER = new ExternalTestCluster(transportAddresses);, +            } else {, +    }, +++ b/pom.xml, +                                <tests.cluster>${tests.cluster}</tests.cluster>, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.transport.InetSocketTransportAddress;, +import org.elasticsearch.common.transport.TransportAddress;, +    private static ImmutableTestCluster GLOBAL_CLUSTER;, +            String cluster = System.getProperty("tests.cluster");, +            if (Strings.hasLength(cluster)) {, +                String[] stringAddresses = cluster.split(",");, +                TransportAddress[] transportAddresses = new TransportAddress[stringAddresses.length];, +                int i = 0;, +                for (String stringAddress : stringAddresses) {, +                    String[] split = stringAddress.split(":");, +                    if (split.length < 2) {, +                        throw new IllegalArgumentException("address [" + cluster + "] not valid");, +                    }, +                    try {, +                        transportAddresses[i++] = new InetSocketTransportAddress(split[0], Integer.valueOf(split[1]));, +                    } catch(NumberFormatException e) {, +                        throw new IllegalArgumentException("port is not valid, expected number but was [" + split[1] + "]");, +                    }, +                }, +                GLOBAL_CLUSTER = new ExternalTestCluster(transportAddresses);, +            } else {, +    }, +++ b/src/test/java/org/elasticsearch/test/ExternalTestCluster.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test;, +, +import com.google.common.collect.Lists;, +import org.elasticsearch.action.admin.cluster.node.info.NodeInfo;, +import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.transport.TransportClient;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.transport.InetSocketTransportAddress;, +import org.elasticsearch.common.transport.TransportAddress;, +, +import java.net.InetSocketAddress;, +import java.util.Iterator;, +, +/**, + * External cluster to run the tests against., + * It is a pure immutable test cluster that allows to send requests to a pre-existing cluster, + * and supports by nature all the needed test operations like wipeIndices etc., + */, +public final class ExternalTestCluster extends ImmutableTestCluster {, +, +    private final Client client;, +, +    private final InetSocketAddress[] httpAddresses;, +, +    private final int dataNodes;]