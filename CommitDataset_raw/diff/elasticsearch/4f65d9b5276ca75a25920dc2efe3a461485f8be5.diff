[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                logger.error("Error loading template [{}] as part of metadata upgrading", SECURITY_TEMPLATE_NAME);, +            }, +, +            final byte[] auditTemplate = TemplateUtils.loadTemplate("/" + IndexAuditTrail.INDEX_TEMPLATE_NAME + ".json",, +                    Version.CURRENT.toString(), IndexLifecycleManager.TEMPLATE_VERSION_PATTERN).getBytes(StandardCharsets.UTF_8);, +, +            try (XContentParser parser = xContent.createParser(NamedXContentRegistry.EMPTY, auditTemplate)) {, +                IndexTemplateMetaData auditMetadata = new IndexTemplateMetaData.Builder(, +                        IndexTemplateMetaData.Builder.fromXContent(parser, IndexAuditTrail.INDEX_TEMPLATE_NAME)), +                        .settings(IndexAuditTrail.customAuditIndexSettings(settings, logger)), +                        .build();, +                templates.put(IndexAuditTrail.INDEX_TEMPLATE_NAME, auditMetadata);, +            } catch (IOException e) {, +                // TODO: should we handle this with a thrown exception?, +                logger.error("Error loading template [{}] as part of metadata upgrading", IndexAuditTrail.INDEX_TEMPLATE_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                logger.error("Error loading template [{}] as part of metadata upgrading", SECURITY_TEMPLATE_NAME);, +            }, +, +            final byte[] auditTemplate = TemplateUtils.loadTemplate("/" + IndexAuditTrail.INDEX_TEMPLATE_NAME + ".json",, +                    Version.CURRENT.toString(), IndexLifecycleManager.TEMPLATE_VERSION_PATTERN).getBytes(StandardCharsets.UTF_8);, +, +            try (XContentParser parser = xContent.createParser(NamedXContentRegistry.EMPTY, auditTemplate)) {, +                IndexTemplateMetaData auditMetadata = new IndexTemplateMetaData.Builder(, +                        IndexTemplateMetaData.Builder.fromXContent(parser, IndexAuditTrail.INDEX_TEMPLATE_NAME)), +                        .settings(IndexAuditTrail.customAuditIndexSettings(settings, logger)), +                        .build();, +                templates.put(IndexAuditTrail.INDEX_TEMPLATE_NAME, auditMetadata);, +            } catch (IOException e) {, +                // TODO: should we handle this with a thrown exception?, +                logger.error("Error loading template [{}] as part of metadata upgrading", IndexAuditTrail.INDEX_TEMPLATE_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +                if (indexAuditTrail.canStart(event)) {, +                            indexAuditTrail.start();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/Security.java, +                logger.error("Error loading template [{}] as part of metadata upgrading", SECURITY_TEMPLATE_NAME);, +            }, +, +            final byte[] auditTemplate = TemplateUtils.loadTemplate("/" + IndexAuditTrail.INDEX_TEMPLATE_NAME + ".json",, +                    Version.CURRENT.toString(), IndexLifecycleManager.TEMPLATE_VERSION_PATTERN).getBytes(StandardCharsets.UTF_8);, +, +            try (XContentParser parser = xContent.createParser(NamedXContentRegistry.EMPTY, auditTemplate)) {, +                IndexTemplateMetaData auditMetadata = new IndexTemplateMetaData.Builder(, +                        IndexTemplateMetaData.Builder.fromXContent(parser, IndexAuditTrail.INDEX_TEMPLATE_NAME)), +                        .settings(IndexAuditTrail.customAuditIndexSettings(settings, logger)), +                        .build();, +                templates.put(IndexAuditTrail.INDEX_TEMPLATE_NAME, auditMetadata);, +            } catch (IOException e) {, +                // TODO: should we handle this with a thrown exception?, +                logger.error("Error loading template [{}] as part of metadata upgrading", IndexAuditTrail.INDEX_TEMPLATE_NAME);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +                if (indexAuditTrail.canStart(event)) {, +                            indexAuditTrail.start();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/audit/index/IndexAuditTrail.java, +import org.elasticsearch.Version;, +import org.elasticsearch.xpack.security.support.IndexLifecycleManager;, +import org.elasticsearch.xpack.template.TemplateUtils;, +import java.nio.charset.StandardCharsets;, +public class IndexAuditTrail extends AbstractComponent implements AuditTrail {, +    private static final int DEFAULT_MAX_QUEUE_SIZE = 10000;, +    public boolean canStart(ClusterChangedEvent event) {, +            return canStart(event.state());, +    private boolean canStart(ClusterState clusterState) {, +        if (TemplateUtils.checkTemplateExistsAndVersionMatches(INDEX_TEMPLATE_NAME, IndexLifecycleManager.SECURITY_VERSION_STRING,, +                clusterState, logger, Version.CURRENT::onOrAfter) == false) {, +            logger.debug("security audit index template [{}] is not up to date", INDEX_TEMPLATE_NAME);, +    public void start() {, +                        if (canStart(clusterStateResponse.getState())) {, +                        } else if (TemplateUtils.checkTemplateExistsAndVersionMatches(INDEX_TEMPLATE_NAME,, +                                IndexLifecycleManager.SECURITY_VERSION_STRING, clusterStateResponse.getState(), logger,, +                                Version.CURRENT::onOrAfter) == false) {, +                            putTemplate(customAuditIndexSettings(settings, logger), ActionListener.wrap((v) -> innerStart(),, +                                    (e) -> {, +                                        logger.error("failed to put audit trail template", e);, +                                        transitionStartingToInitialized();, +                                    }));, +                                    (x) -> start(),, +                                    (e) -> {, +                                        logger.error("failed to get wait for yellow status on index [" + indexName + "]", e);, +                                        transitionStartingToInitialized();, +                                    }));, +                        transitionStartingToInitialized();, +    private void transitionStartingToInitialized() {, +        if (state.compareAndSet(State.STARTING, State.INITIALIZED) == false) {, +            final String message = "state transition from starting to initialized failed, current value: " + state.get();, +            assert false : message;, +            logger.error(message);, +    }, +, +    private void innerStart() {, +        if (state.compareAndSet(State.STARTING, State.STARTED) == false) {, +            final String message = "state transition from starting to start ed failed, current value: " + state.get();, +            assert false : message;, +            logger.error(message);, +        }, +    public static Settings customAuditIndexSettings(Settings nodeSettings, Logger logger) {, +        try {, +            final byte[] template = TemplateUtils.loadTemplate("/" + INDEX_TEMPLATE_NAME + ".json",, +                    Version.CURRENT.toString(), IndexLifecycleManager.TEMPLATE_VERSION_PATTERN).getBytes(StandardCharsets.UTF_8);]