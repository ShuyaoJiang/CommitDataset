[+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java, +import java.net.URI;, +import java.net.URISyntaxException;, +        URI uri;, +        try {, +            uri = new URI(hostInRequest);, +            // URI has less stringent URL parsing than our code. We want to fail if all values are not provided., +            if (uri.getPort() == -1) {, +                throw new URISyntaxException(hostInRequest, "The port was not defined in the [host]");, +        } catch (URISyntaxException ex) {, +            throw new IllegalArgumentException("[host] must be of the form [scheme]://[host]:[port](/[pathPrefix])? but was [", +                + hostInRequest + "]", ex);, +        }, +, +        String scheme = uri.getScheme();, +        String host = uri.getHost();, +        int port = uri.getPort();, +, +        String pathPrefix = null;, +        if (uri.getPath().isEmpty() == false) {, +            pathPrefix = uri.getPath();, +        }, +, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java, +import java.net.URI;, +import java.net.URISyntaxException;, +        URI uri;, +        try {, +            uri = new URI(hostInRequest);, +            // URI has less stringent URL parsing than our code. We want to fail if all values are not provided., +            if (uri.getPort() == -1) {, +                throw new URISyntaxException(hostInRequest, "The port was not defined in the [host]");, +        } catch (URISyntaxException ex) {, +            throw new IllegalArgumentException("[host] must be of the form [scheme]://[host]:[port](/[pathPrefix])? but was [", +                + hostInRequest + "]", ex);, +        }, +, +        String scheme = uri.getScheme();, +        String host = uri.getHost();, +        int port = uri.getPort();, +, +        String pathPrefix = null;, +        if (uri.getPath().isEmpty() == false) {, +            pathPrefix = uri.getPath();, +        }, +, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/ReindexFromRemoteWhitelistTests.java, +    public void testIPv6Address() {, +        List<String> whitelist = randomWhitelist();, +        whitelist.add("[::1]:*");, +        checkRemoteWhitelist(buildRemoteWhitelist(whitelist), newRemoteInfo("[::1]", 9200));, +    }, +, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/RestReindexAction.java, +import java.net.URI;, +import java.net.URISyntaxException;, +        URI uri;, +        try {, +            uri = new URI(hostInRequest);, +            // URI has less stringent URL parsing than our code. We want to fail if all values are not provided., +            if (uri.getPort() == -1) {, +                throw new URISyntaxException(hostInRequest, "The port was not defined in the [host]");, +        } catch (URISyntaxException ex) {, +            throw new IllegalArgumentException("[host] must be of the form [scheme]://[host]:[port](/[pathPrefix])? but was [", +                + hostInRequest + "]", ex);, +        }, +, +        String scheme = uri.getScheme();, +        String host = uri.getHost();, +        int port = uri.getPort();, +, +        String pathPrefix = null;, +        if (uri.getPath().isEmpty() == false) {, +            pathPrefix = uri.getPath();, +        }, +, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/ReindexFromRemoteWhitelistTests.java, +    public void testIPv6Address() {, +        List<String> whitelist = randomWhitelist();, +        whitelist.add("[::1]:*");, +        checkRemoteWhitelist(buildRemoteWhitelist(whitelist), newRemoteInfo("[::1]", 9200));, +    }, +, +++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/RestReindexActionTests.java, +        expectThrows(IllegalArgumentException.class, () -> buildRemoteInfoHostTestCase(":9200"));, +        expectThrows(IllegalArgumentException.class, () -> buildRemoteInfoHostTestCase("http://:9200"));, +        info = buildRemoteInfoHostTestCase("https://[::1]:9201");, +        assertEquals("https", info.getScheme());, +        assertEquals("[::1]", info.getHost());, +        assertEquals(9201, info.getPort());, +        assertNull(info.getPathPrefix());, +        assertEquals(RemoteInfo.DEFAULT_SOCKET_TIMEOUT, info.getSocketTimeout());, +        assertEquals(RemoteInfo.DEFAULT_CONNECT_TIMEOUT, info.getConnectTimeout());, +]