[+++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +        private ClusterState clusterState;, +            this.clusterState = clusterService.state();, +                if (!shard.active() || !clusterState.nodes().nodeExists(shard.currentNodeId())) {, +                if (shard.currentNodeId().equals(clusterState.nodes().localNodeId())) {, +                    DiscoveryNode node = clusterState.nodes().get(shard.currentNodeId());, +                        listener.onFailure(new NodeClosedException(clusterState.nodes().localNode()));, +            // we double check on the state, if it got changed we need to make sure we take the latest one cause, +            // maybe a replica shard started its recovery process and we need to apply it there..., +            ClusterState newState = clusterService.state();, +            if (clusterState != newState) {, +                clusterState = newState;, +                shardIt = shards(newState, request);, +            }, +, +            if (!clusterState.nodes().nodeExists(nodeId)) {, +            if (!nodeId.equals(clusterState.nodes().localNodeId())) {, +                DiscoveryNode node = clusterState.nodes().get(nodeId);, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +        private ClusterState clusterState;, +            this.clusterState = clusterService.state();, +                if (!shard.active() || !clusterState.nodes().nodeExists(shard.currentNodeId())) {, +                if (shard.currentNodeId().equals(clusterState.nodes().localNodeId())) {, +                    DiscoveryNode node = clusterState.nodes().get(shard.currentNodeId());, +                        listener.onFailure(new NodeClosedException(clusterState.nodes().localNode()));, +            // we double check on the state, if it got changed we need to make sure we take the latest one cause, +            // maybe a replica shard started its recovery process and we need to apply it there..., +            ClusterState newState = clusterService.state();, +            if (clusterState != newState) {, +                clusterState = newState;, +                shardIt = shards(newState, request);, +            }, +, +            if (!clusterState.nodes().nodeExists(nodeId)) {, +            if (!nodeId.equals(clusterState.nodes().localNodeId())) {, +                DiscoveryNode node = clusterState.nodes().get(nodeId);, +++ b/src/main/java/org/elasticsearch/indices/recovery/DelayRecoveryException.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.indices.recovery;, +, +import org.elasticsearch.ElasticSearchException;, +, +/**, + * An exception marking that this recovery attempt should be ignored (since probably, we already recovered)., + *, + *, + */, +public class DelayRecoveryException extends ElasticSearchException {, +, +    public DelayRecoveryException(String msg) {, +        super(msg);, +    }, +, +    public DelayRecoveryException(String msg, Throwable cause) {, +        super(msg, cause);, +    }, +}, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +        private ClusterState clusterState;, +            this.clusterState = clusterService.state();, +                if (!shard.active() || !clusterState.nodes().nodeExists(shard.currentNodeId())) {, +                if (shard.currentNodeId().equals(clusterState.nodes().localNodeId())) {, +                    DiscoveryNode node = clusterState.nodes().get(shard.currentNodeId());, +                        listener.onFailure(new NodeClosedException(clusterState.nodes().localNode()));, +            // we double check on the state, if it got changed we need to make sure we take the latest one cause, +            // maybe a replica shard started its recovery process and we need to apply it there..., +            ClusterState newState = clusterService.state();, +            if (clusterState != newState) {, +                clusterState = newState;, +                shardIt = shards(newState, request);, +            }, +, +            if (!clusterState.nodes().nodeExists(nodeId)) {, +            if (!nodeId.equals(clusterState.nodes().localNodeId())) {, +                DiscoveryNode node = clusterState.nodes().get(nodeId);, +++ b/src/main/java/org/elasticsearch/indices/recovery/DelayRecoveryException.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the]