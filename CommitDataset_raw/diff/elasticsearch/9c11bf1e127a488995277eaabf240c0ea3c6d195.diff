[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/UpdateJobProcessNotifier.java, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.common.logging.Loggers;, +/**, + * This class serves as a queue for updates to the job process., + * Queueing is important for 2 reasons: first, it throttles the updates, + * to the process, and second and most important, it preserves the order of the updates, + * for actions that run on the master node. For preserving the order of the updates, + * to the job config, it's necessary to handle the whole update chain on the master, + * node. However, for updates to resources the job uses (e.g. calendars, filters),, + * they can be handled on non-master nodes as long as the update process action, + * is fetching the latest version of those resources from the index instead of, + * using the version that existed while the handling action was at work. This makes, + * sure that even if the order of updates gets reversed, the final process update, + * will fetch the valid state of those external resources ensuring the process is, + * in sync., + */, +public class UpdateJobProcessNotifier extends AbstractComponent {, +, +    private static final Logger LOGGER = Loggers.getLogger(UpdateJobProcessNotifier.class);, +    private final ClusterService clusterService;, +        this.clusterService = clusterService;, +, +            @Override, +            public void beforeStart() {, +                start();, +            }, +, +, +        if (update.isJobUpdate() && clusterService.localNode().isMasterNode() == false) {, +            assert clusterService.localNode().isMasterNode();, +            LOGGER.error("Job update was submitted to non-master node [" + clusterService.nodeName() + "]; update for job [", +                    + update.getJobId() + "] will be ignored");, +            executeProcessUpdates(updatesIterator);, +            return;, +        }, +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/UpdateJobProcessNotifier.java, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.common.logging.Loggers;, +/**, + * This class serves as a queue for updates to the job process., + * Queueing is important for 2 reasons: first, it throttles the updates, + * to the process, and second and most important, it preserves the order of the updates, + * for actions that run on the master node. For preserving the order of the updates, + * to the job config, it's necessary to handle the whole update chain on the master, + * node. However, for updates to resources the job uses (e.g. calendars, filters),, + * they can be handled on non-master nodes as long as the update process action, + * is fetching the latest version of those resources from the index instead of, + * using the version that existed while the handling action was at work. This makes, + * sure that even if the order of updates gets reversed, the final process update, + * will fetch the valid state of those external resources ensuring the process is, + * in sync., + */, +public class UpdateJobProcessNotifier extends AbstractComponent {, +, +    private static final Logger LOGGER = Loggers.getLogger(UpdateJobProcessNotifier.class);, +    private final ClusterService clusterService;, +        this.clusterService = clusterService;, +, +            @Override, +            public void beforeStart() {, +                start();, +            }, +, +, +        if (update.isJobUpdate() && clusterService.localNode().isMasterNode() == false) {, +            assert clusterService.localNode().isMasterNode();, +            LOGGER.error("Job update was submitted to non-master node [" + clusterService.nodeName() + "]; update for job [", +                    + update.getJobId() + "] will be ignored");, +            executeProcessUpdates(updatesIterator);, +            return;, +        }, +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectCommunicator.java, +import org.elasticsearch.xpack.core.ml.job.process.autodetect.output.FlushAcknowledgement;, +import org.elasticsearch.xpack.core.ml.job.process.autodetect.state.DataCounts;, +import org.elasticsearch.xpack.core.ml.job.process.autodetect.state.ModelSizeStats;, +import org.elasticsearch.xpack.core.ml.job.process.autodetect.state.ModelSnapshot;, +import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;, +import org.elasticsearch.xpack.ml.MachineLearning;, +import org.elasticsearch.xpack.ml.job.categorization.CategorizationAnalyzer;, +    public void writeUpdateProcessMessage(UpdateProcessMessage update, BiConsumer<Void, Exception> handler) {, +            if (update.getModelPlotConfig() != null) {, +                autodetectProcess.writeUpdateModelPlotMessage(update.getModelPlotConfig());, +            if (update.getFilter() != null) {, +                autodetectProcess.writeUpdateFiltersMessage(Collections.singletonList(update.getFilter()));, +            if (update.getDetectorUpdates() != null) {, +                for (JobUpdate.DetectorUpdate detectorUpdate : update.getDetectorUpdates()) {, +                    if (detectorUpdate.getRules() != null) {, +                        autodetectProcess.writeUpdateDetectorRulesMessage(detectorUpdate.getDetectorIndex(), detectorUpdate.getRules());, +            if (update.getScheduledEvents() != null) {, +                autodetectProcess.writeUpdateScheduledEventsMessage(update.getScheduledEvents(), job.getAnalysisConfig().getBucketSpan());, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/UpdateJobProcessNotifier.java, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.common.logging.Loggers;, +/**, + * This class serves as a queue for updates to the job process., + * Queueing is important for 2 reasons: first, it throttles the updates, + * to the process, and second and most important, it preserves the order of the updates]