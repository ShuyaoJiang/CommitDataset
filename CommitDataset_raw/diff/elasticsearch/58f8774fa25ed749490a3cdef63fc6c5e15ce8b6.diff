[+++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +++ b/src/main/java/org/elasticsearch/discovery/DiscoverySettings.java, +        this.publishTimeout = settings.getAsTime(PUBLISH_TIMEOUT, publishTimeout);, +++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +++ b/src/main/java/org/elasticsearch/discovery/DiscoverySettings.java, +        this.publishTimeout = settings.getAsTime(PUBLISH_TIMEOUT, publishTimeout);, +++ b/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +    private final DiscoveryService discoveryService;, +                          DiscoveryNodeService discoveryNodeService, Version version, DiscoverySettings discoverySettings, DiscoveryService discoveryService) {, +        this.discoveryService = discoveryService;, +                    assert nodeSpecificClusterState.nodes().masterNode() != null : "received a cluster state without a master";, +                    assert !nodeSpecificClusterState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock()) : "received a cluster state with a master block";, +, +                            if (currentState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock())) {, +                                // its a fresh update from the master as we transition from a start of not having a master to having one, +                                logger.debug("got first state from fresh master [{}]", nodeSpecificClusterState.nodes().masterNodeId());, +                                return nodeSpecificClusterState;, +                            }, +, +++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +++ b/src/main/java/org/elasticsearch/discovery/DiscoverySettings.java, +        this.publishTimeout = settings.getAsTime(PUBLISH_TIMEOUT, publishTimeout);, +++ b/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +    private final DiscoveryService discoveryService;, +                          DiscoveryNodeService discoveryNodeService, Version version, DiscoverySettings discoverySettings, DiscoveryService discoveryService) {, +        this.discoveryService = discoveryService;, +                    assert nodeSpecificClusterState.nodes().masterNode() != null : "received a cluster state without a master";, +                    assert !nodeSpecificClusterState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock()) : "received a cluster state with a master block";, +, +                            if (currentState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock())) {, +                                // its a fresh update from the master as we transition from a start of not having a master to having one, +                                logger.debug("got first state from fresh master [{}]", nodeSpecificClusterState.nodes().masterNodeId());, +                                return nodeSpecificClusterState;, +                            }, +, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    private final DiscoveryService discoveryService;, +                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, Version version, DiscoverySettings discoverySettings,, +                        DiscoveryService discoveryService) {, +        this.discoveryService = discoveryService;, +, +                assert newClusterState.nodes().masterNode() != null : "received a cluster state without a master";, +                assert !newClusterState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock()) : "received a cluster state with a master block";, +, +                        if (currentState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock())) {, +                            // its a fresh update from the master as we transition from a start of not having a master to having one, +                            logger.debug("got first state from fresh master [{}]", updatedState.nodes().masterNodeId());, +                            return updatedState;, +                        }, +, +, +                        // some optimizations to make sure we keep old objects where possible, +, +++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +++ b/src/main/java/org/elasticsearch/discovery/DiscoverySettings.java, +        this.publishTimeout = settings.getAsTime(PUBLISH_TIMEOUT, publishTimeout);, +++ b/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java, +    private final DiscoveryService discoveryService;, +                          DiscoveryNodeService discoveryNodeService, Version version, DiscoverySettings discoverySettings, DiscoveryService discoveryService) {, +        this.discoveryService = discoveryService;, +                    assert nodeSpecificClusterState.nodes().masterNode() != null : "received a cluster state without a master";, +                    assert !nodeSpecificClusterState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock()) : "received a cluster state with a master block";, +, +                            if (currentState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock())) {, +                                // its a fresh update from the master as we transition from a start of not having a master to having one, +                                logger.debug("got first state from fresh master [{}]", nodeSpecificClusterState.nodes().masterNodeId());, +                                return nodeSpecificClusterState;, +                            }, +, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    private final DiscoveryService discoveryService;, +                        DiscoveryNodeService discoveryNodeService, ZenPingService pingService, Version version, DiscoverySettings discoverySettings,, +                        DiscoveryService discoveryService) {, +        this.discoveryService = discoveryService;, +, +                assert newClusterState.nodes().masterNode() != null : "received a cluster state without a master";, +                assert !newClusterState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock()) : "received a cluster state with a master block";, +, +                        if (currentState.blocks().hasGlobalBlock(discoveryService.getNoMasterBlock())) {, +                            // its a fresh update from the master as we transition from a start of not having a master to having one, +                            logger.debug("got first state from fresh master [{}]", updatedState.nodes().masterNodeId());, +                            return updatedState;, +                        }, +, +, +                        // some optimizations to make sure we keep old objects where possible, +, +++ b/src/test/java/org/elasticsearch/discovery/DiscoveryWithNetworkFailuresTests.java, +import org.elasticsearch.common.Nullable;, +import java.util.ArrayList;, +import java.util.Collections;, +            .put(DiscoverySettings.PUBLISH_TIMEOUT, "1s") // <-- for hitting simulated network failures quickly, +        // Wait until 3 nodes are part of the cluster, +        ensureStableCluster(3);, +        ensureStableCluster(3);, +        // Wait until a 3 nodes are part of the cluster, +        ensureStableCluster(3);, +        final String isolatedNode = nodes.get(0);, +        final String nonIsolatedNode = nodes.get(1);]