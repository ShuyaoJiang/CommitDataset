[+++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            if (parser.currentToken() != XContentParser.Token.FIELD_NAME) {, +                throw new IllegalArgumentException("expected field name but got a " + parser.currentToken());, +            }, +            if (token != XContentParser.Token.START_OBJECT) {, +                throw new IllegalArgumentException("expected object but got a " + token);, +            }, +                            } else {, +                                throw new IllegalArgumentException("Unexpected token: " + token);, +                            } else {, +                                throw new IllegalArgumentException("Unexpected token: " + token);, +                        parser.skipChildren();, +                    } else {, +                        throw new IllegalArgumentException("Unexpected field for an array " + currentFieldName);, +                    } else {, +                        throw new IllegalArgumentException("Unexpected field [" + currentFieldName + "]");, +                } else {, +                    throw new IllegalArgumentException("Unexpected token " + token);, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            if (parser.currentToken() != XContentParser.Token.FIELD_NAME) {, +                throw new IllegalArgumentException("expected field name but got a " + parser.currentToken());, +            }, +            if (token != XContentParser.Token.START_OBJECT) {, +                throw new IllegalArgumentException("expected object but got a " + token);, +            }, +                            } else {, +                                throw new IllegalArgumentException("Unexpected token: " + token);, +                            } else {, +                                throw new IllegalArgumentException("Unexpected token: " + token);, +                        parser.skipChildren();, +                    } else {, +                        throw new IllegalArgumentException("Unexpected field for an array " + currentFieldName);, +                    } else {, +                        throw new IllegalArgumentException("Unexpected field [" + currentFieldName + "]");, +                } else {, +                    throw new IllegalArgumentException("Unexpected token " + token);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +                    if (token != XContentParser.Token.FIELD_NAME) {, +                        throw new IllegalArgumentException("Expected a field name but got " + token);, +                    }, +, +            if (!"meta-data".equals(parser.currentName())) {, +                throw new IllegalArgumentException("Expected [meta-data] as a field name but got " + currentFieldName);, +            }, +            if (token != XContentParser.Token.START_OBJECT) {, +                throw new IllegalArgumentException("Expected a START_OBJECT but got " + token);, +                    } else {, +                        throw new IllegalArgumentException("Unexpected field [" + currentFieldName + "]");, +                } else {, +                    throw new IllegalArgumentException("Unexpected token " + token);, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            if (parser.currentToken() != XContentParser.Token.FIELD_NAME) {, +                throw new IllegalArgumentException("expected field name but got a " + parser.currentToken());, +            }, +            if (token != XContentParser.Token.START_OBJECT) {, +                throw new IllegalArgumentException("expected object but got a " + token);, +            }, +                            } else {, +                                throw new IllegalArgumentException("Unexpected token: " + token);, +                            } else {, +                                throw new IllegalArgumentException("Unexpected token: " + token);, +                        parser.skipChildren();, +                    } else {, +                        throw new IllegalArgumentException("Unexpected field for an array " + currentFieldName);, +                    } else {, +                        throw new IllegalArgumentException("Unexpected field [" + currentFieldName + "]");, +                } else {, +                    throw new IllegalArgumentException("Unexpected token " + token);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +                    if (token != XContentParser.Token.FIELD_NAME) {, +                        throw new IllegalArgumentException("Expected a field name but got " + token);, +                    }, +, +            if (!"meta-data".equals(parser.currentName())) {, +                throw new IllegalArgumentException("Expected [meta-data] as a field name but got " + currentFieldName);, +            }, +            if (token != XContentParser.Token.START_OBJECT) {, +                throw new IllegalArgumentException("Expected a START_OBJECT but got " + token);, +                    } else {, +                        throw new IllegalArgumentException("Unexpected field [" + currentFieldName + "]");, +                } else {, +                    throw new IllegalArgumentException("Unexpected token " + token);, +++ b/core/src/main/java/org/elasticsearch/common/hash/MurmurHash3.java, +    @SuppressWarnings("fallthrough") // Intentionally uses fallthrough to implement a well known hashing algorithm, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java]