[+++ b/elasticsearch/src/test/java/org/elasticsearch/integration/PermissionPrecedenceTests.java, +import org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesAction;, +import org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateAction;, +import org.elasticsearch.test.SecurityIntegTestCase;, +import static org.elasticsearch.test.SecurityTestsUtils.assertThrowsAuthorizationException;, +import static org.elasticsearch.xpack.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;, +        assertThrowsAuthorizationException(client.filterWithHeader(auth).admin().indices().preparePutTemplate("template1"), +                .setTemplate("test_*")::get, PutIndexTemplateAction.NAME, "user");, +        assertThrowsAuthorizationException(client.filterWithHeader(headers).admin().indices().prepareGetTemplates("template1")::get,, +                GetIndexTemplatesAction.NAME, "user");, +++ b/elasticsearch/src/test/java/org/elasticsearch/integration/PermissionPrecedenceTests.java, +import org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesAction;, +import org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateAction;, +import org.elasticsearch.test.SecurityIntegTestCase;, +import static org.elasticsearch.test.SecurityTestsUtils.assertThrowsAuthorizationException;, +import static org.elasticsearch.xpack.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;, +        assertThrowsAuthorizationException(client.filterWithHeader(auth).admin().indices().preparePutTemplate("template1"), +                .setTemplate("test_*")::get, PutIndexTemplateAction.NAME, "user");, +        assertThrowsAuthorizationException(client.filterWithHeader(headers).admin().indices().prepareGetTemplates("template1")::get,, +                GetIndexTemplatesAction.NAME, "user");, +++ b/elasticsearch/src/test/java/org/elasticsearch/integration/ScrollIdSigningTests.java, +import org.elasticsearch.xpack.security.crypto.CryptoService;, +import static org.elasticsearch.test.SecurityTestsUtils.assertThrowsAuthorizationException;, +, +            assertThrowsAuthorizationException(client().prepareSearchScroll(tamperedScrollId).setScroll(TimeValue.timeValueMinutes(2))::get,, +                    equalTo("invalid request. tampered signed text"));, +, +            assertThrowsAuthorizationException(client().prepareClearScroll().addScrollId(tamperedScrollId)::get,, +                    equalTo("invalid request. tampered signed text"));, +++ b/elasticsearch/src/test/java/org/elasticsearch/integration/PermissionPrecedenceTests.java, +import org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesAction;, +import org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateAction;, +import org.elasticsearch.test.SecurityIntegTestCase;, +import static org.elasticsearch.test.SecurityTestsUtils.assertThrowsAuthorizationException;, +import static org.elasticsearch.xpack.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;, +        assertThrowsAuthorizationException(client.filterWithHeader(auth).admin().indices().preparePutTemplate("template1"), +                .setTemplate("test_*")::get, PutIndexTemplateAction.NAME, "user");, +        assertThrowsAuthorizationException(client.filterWithHeader(headers).admin().indices().prepareGetTemplates("template1")::get,, +                GetIndexTemplatesAction.NAME, "user");, +++ b/elasticsearch/src/test/java/org/elasticsearch/integration/ScrollIdSigningTests.java, +import org.elasticsearch.xpack.security.crypto.CryptoService;, +import static org.elasticsearch.test.SecurityTestsUtils.assertThrowsAuthorizationException;, +, +            assertThrowsAuthorizationException(client().prepareSearchScroll(tamperedScrollId).setScroll(TimeValue.timeValueMinutes(2))::get,, +                    equalTo("invalid request. tampered signed text"));, +, +            assertThrowsAuthorizationException(client().prepareClearScroll().addScrollId(tamperedScrollId)::get,, +                    equalTo("invalid request. tampered signed text"));, +++ b/elasticsearch/src/test/java/org/elasticsearch/test/SecurityIntegTestCase.java, +    /**, +     * Creates the indices provided as argument, randomly associating them with aliases, indexes one dummy document per index, +     * and refreshes the new indices, +     */, +        refresh(indices);, +++ b/elasticsearch/src/test/java/org/elasticsearch/integration/PermissionPrecedenceTests.java, +import org.elasticsearch.action.admin.indices.template.get.GetIndexTemplatesAction;, +import org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateAction;, +import org.elasticsearch.test.SecurityIntegTestCase;, +import static org.elasticsearch.test.SecurityTestsUtils.assertThrowsAuthorizationException;, +import static org.elasticsearch.xpack.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;, +        assertThrowsAuthorizationException(client.filterWithHeader(auth).admin().indices().preparePutTemplate("template1"), +                .setTemplate("test_*")::get, PutIndexTemplateAction.NAME, "user");, +        assertThrowsAuthorizationException(client.filterWithHeader(headers).admin().indices().prepareGetTemplates("template1")::get,, +                GetIndexTemplatesAction.NAME, "user");, +++ b/elasticsearch/src/test/java/org/elasticsearch/integration/ScrollIdSigningTests.java, +import org.elasticsearch.xpack.security.crypto.CryptoService;, +import static org.elasticsearch.test.SecurityTestsUtils.assertThrowsAuthorizationException;, +, +            assertThrowsAuthorizationException(client().prepareSearchScroll(tamperedScrollId).setScroll(TimeValue.timeValueMinutes(2))::get,, +                    equalTo("invalid request. tampered signed text"));, +, +            assertThrowsAuthorizationException(client().prepareClearScroll().addScrollId(tamperedScrollId)::get,, +                    equalTo("invalid request. tampered signed text"));, +++ b/elasticsearch/src/test/java/org/elasticsearch/test/SecurityIntegTestCase.java, +    /**, +     * Creates the indices provided as argument, randomly associating them with aliases, indexes one dummy document per index, +     * and refreshes the new indices, +     */, +        refresh(indices);, +++ b/elasticsearch/src/test/java/org/elasticsearch/test/SecurityTestsUtils.java, +import org.apache.lucene.util.LuceneTestCase;, +import static org.apache.lucene.util.LuceneTestCase.expectThrows;, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.hamcrest.CoreMatchers.either;, +import static org.hamcrest.CoreMatchers.instanceOf;, +    public static void assertThrowsAuthorizationException(LuceneTestCase.ThrowingRunnable throwingRunnable, String action, String user) {, +        assertThrowsAuthorizationException(throwingRunnable,, +                containsString("[" + action + "] is unauthorized for user [" + user + "]"));, +    public static void assertThrowsAuthorizationExceptionRunAs(LuceneTestCase.ThrowingRunnable throwingRunnable,, +                                                               String action, String user, String runAs) {, +        assertThrowsAuthorizationException(throwingRunnable,, +                containsString("[" + action + "] is unauthorized for user [" + user + "] run as [" + runAs + "]"));, +    public static void assertThrowsAuthorizationExceptionDefaultUsers(LuceneTestCase.ThrowingRunnable throwingRunnable, String action) {, +        ElasticsearchSecurityException exception = expectThrows(ElasticsearchSecurityException.class, throwingRunnable);, +        assertAuthorizationExceptionDefaultUsers(exception, action);, +    }, +, +    public static void assertAuthorizationExceptionDefaultUsers(Throwable throwable, String action) {, +        assertAuthorizationException(throwable, either(containsString("[" + action + "] is unauthorized for user [", +                + SecuritySettingsSource.DEFAULT_USER_NAME + "]")).or(containsString("[" + action + "] is unauthorized for user ["]