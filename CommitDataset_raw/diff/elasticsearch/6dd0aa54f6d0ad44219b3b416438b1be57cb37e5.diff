[+++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +        parseContext = new ParseContext.InternalParseContext(settings, mapperService.documentMapperParser(),, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +        parseContext = new ParseContext.InternalParseContext(settings,, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.index.IndexSettings;, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +        parseContext = new ParseContext.InternalParseContext(settings, mapperService.documentMapperParser(),, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +        parseContext = new ParseContext.InternalParseContext(settings,, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +        IndexMetaData build = IndexMetaData.builder(""), +            .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)), +            .numberOfShards(1).numberOfReplicas(0).build();, +        IndexSettings settings = new IndexSettings(build, Settings.EMPTY);, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(settings,, +++ b/server/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import org.apache.lucene.document.NumericDocValuesField;, +import org.apache.lucene.index.FilterDirectoryReader;, +    public static final String SOFT_DELETES_FIELD = "__soft_deletes";, +, +            numDocs += si.info.maxDoc() - si.getDelCount() - si.getSoftDelCount();, +                .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD), +                .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD), +, +    /**, +     * Wraps a directory reader to make all documents live except those were rolled back, +     * or hard-deleted due to non-aborting exceptions during indexing., +     * The wrapped reader can be used to query all documents., +     *, +     * @param in the input directory reader, +     * @return the wrapped reader, +     */, +    public static DirectoryReader wrapAllDocsLive(DirectoryReader in) throws IOException {, +        return new DirectoryReaderWithAllLiveDocs(in);, +    }, +, +    private static final class DirectoryReaderWithAllLiveDocs extends FilterDirectoryReader {, +        static final class LeafReaderWithLiveDocs extends FilterLeafReader {, +            final Bits liveDocs;, +            final int numDocs;, +            LeafReaderWithLiveDocs(LeafReader in, Bits liveDocs, int  numDocs) {]