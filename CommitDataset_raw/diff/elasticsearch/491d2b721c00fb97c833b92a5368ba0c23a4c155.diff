[+++ b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +            boolean exactIncludeMatch;, +            if (includes.length == 0) {, +                // implied match anything, +                exactIncludeMatch = true;, +            } else {, +                exactIncludeMatch = false;, +                boolean pathIsPrefixOfAnInclude = false;, +                    // check for prefix matches as well to see if we need to zero in, something like: obj1.arr1.* or *.field, +                    if (include.charAt(0) == '*') {, +                        if (Regex.simpleMatch(include, path)) {, +                            exactIncludeMatch = true;, +                            break;, +                        }, +                        pathIsPrefixOfAnInclude = true;, +                        break;, +                    }, +                            pathIsPrefixOfAnInclude = true;, +                        exactIncludeMatch = true;, +                if (!pathIsPrefixOfAnInclude && !exactIncludeMatch) {, +                    // skip subkeys, not interesting., +            } else if (exactIncludeMatch) {, +++ b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +            boolean exactIncludeMatch;, +            if (includes.length == 0) {, +                // implied match anything, +                exactIncludeMatch = true;, +            } else {, +                exactIncludeMatch = false;, +                boolean pathIsPrefixOfAnInclude = false;, +                    // check for prefix matches as well to see if we need to zero in, something like: obj1.arr1.* or *.field, +                    if (include.charAt(0) == '*') {, +                        if (Regex.simpleMatch(include, path)) {, +                            exactIncludeMatch = true;, +                            break;, +                        }, +                        pathIsPrefixOfAnInclude = true;, +                        break;, +                    }, +                            pathIsPrefixOfAnInclude = true;, +                        exactIncludeMatch = true;, +                if (!pathIsPrefixOfAnInclude && !exactIncludeMatch) {, +                    // skip subkeys, not interesting., +            } else if (exactIncludeMatch) {, +++ b/src/test/java/org/elasticsearch/test/unit/common/xcontent/support/XContentMapValuesTests.java, +    public void filterIncludesUsingStarPrefix() {, +        Map<String, Object> map = new HashMap<String, Object>();, +        map.put("field", "value");, +        map.put("obj",, +                new HashMap<String, Object>() {{, +                    put("field", "value");, +                    put("field2", "value2");, +                }});, +        map.put("n_obj",, +                new HashMap<String, Object>() {{, +                    put("n_field", "value");, +                    put("n_field2", "value2");, +                }});, +, +        Map<String, Object> filteredMap = XContentMapValues.filter(map, new String[]{"*.field2"}, Strings.EMPTY_ARRAY);, +        assertThat(filteredMap.size(), equalTo(1));, +        assertThat(filteredMap, hasKey("obj"));, +        assertThat(((Map) filteredMap.get("obj")).size(), equalTo(1));, +        assertThat(((Map) filteredMap.get("obj")), hasKey("field2"));, +, +        // only objects, +        filteredMap = XContentMapValues.filter(map, new String[]{"*.*"}, Strings.EMPTY_ARRAY);, +        assertThat(filteredMap.size(), equalTo(2));, +        assertThat(filteredMap, hasKey("obj"));, +        assertThat(((Map) filteredMap.get("obj")).size(), equalTo(2));, +        assertThat(filteredMap, hasKey("n_obj"));, +        assertThat(((Map) filteredMap.get("n_obj")).size(), equalTo(2));, +, +, +        filteredMap = XContentMapValues.filter(map, new String[]{"*"}, new String[]{"*.*2"});, +        assertThat(filteredMap.size(), equalTo(3));, +        assertThat(filteredMap, hasKey("field"));, +        assertThat(filteredMap, hasKey("obj"));, +        assertThat(((Map) filteredMap.get("obj")).size(), equalTo(1));, +        assertThat(((Map) filteredMap.get("obj")), hasKey("field"));, +        assertThat(filteredMap, hasKey("n_obj"));, +        assertThat(((Map) filteredMap.get("n_obj")).size(), equalTo(1));, +        assertThat(((Map) filteredMap.get("n_obj")), hasKey("n_field"));, +, +    }, +, +    @Test]