[+++ b/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +            if (item.routing() == null && clusterState.getMetaData().routingRequired(item.index(), item.type())) {, +                responses.set(i, new MultiGetItemResponse(null, new MultiGetResponse.Failure(item.index(), item.type(), item.id(),, +                        "routing is required for [" + item.index() + "]/[" + item.type() + "]/[" + item.id() + "]")));, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +            if (item.routing() == null && clusterState.getMetaData().routingRequired(item.index(), item.type())) {, +                responses.set(i, new MultiGetItemResponse(null, new MultiGetResponse.Failure(item.index(), item.type(), item.id(),, +                        "routing is required for [" + item.index() + "]/[" + item.type() + "]/[" + item.id() + "]")));, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/action/termvector/TransportMultiTermVectorsAction.java, +            termVectorRequest.index(clusterState.metaData().concreteSingleIndex(termVectorRequest.index(), termVectorRequest.indicesOptions()));, +                responses.set(i, new MultiTermVectorsItemResponse(null, new MultiTermVectorsResponse.Failure(termVectorRequest.index(), termVectorRequest.type(), termVectorRequest.id(),, +                        "routing is required for [" + termVectorRequest.index() + "]/[" + termVectorRequest.type() + "]/[" + termVectorRequest.id() + "]")));, +++ b/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +            if (item.routing() == null && clusterState.getMetaData().routingRequired(item.index(), item.type())) {, +                responses.set(i, new MultiGetItemResponse(null, new MultiGetResponse.Failure(item.index(), item.type(), item.id(),, +                        "routing is required for [" + item.index() + "]/[" + item.type() + "]/[" + item.id() + "]")));, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/action/termvector/TransportMultiTermVectorsAction.java, +            termVectorRequest.index(clusterState.metaData().concreteSingleIndex(termVectorRequest.index(), termVectorRequest.indicesOptions()));, +                responses.set(i, new MultiTermVectorsItemResponse(null, new MultiTermVectorsResponse.Failure(termVectorRequest.index(), termVectorRequest.type(), termVectorRequest.id(),, +                        "routing is required for [" + termVectorRequest.index() + "]/[" + termVectorRequest.type() + "]/[" + termVectorRequest.id() + "]")));, +++ b/src/test/java/org/elasticsearch/mget/SimpleMgetTests.java, +        assertThat(mgetResponse.getResponses()[1].getFailure().getMessage(), equalTo("routing is required for [test]/[test]/[1]"));, +++ b/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +            if (item.routing() == null && clusterState.getMetaData().routingRequired(item.index(), item.type())) {, +                responses.set(i, new MultiGetItemResponse(null, new MultiGetResponse.Failure(item.index(), item.type(), item.id(),, +                        "routing is required for [" + item.index() + "]/[" + item.type() + "]/[" + item.id() + "]")));, +                continue;, +            }, +++ b/src/main/java/org/elasticsearch/action/termvector/TransportMultiTermVectorsAction.java, +            termVectorRequest.index(clusterState.metaData().concreteSingleIndex(termVectorRequest.index(), termVectorRequest.indicesOptions()));, +                responses.set(i, new MultiTermVectorsItemResponse(null, new MultiTermVectorsResponse.Failure(termVectorRequest.index(), termVectorRequest.type(), termVectorRequest.id(),, +                        "routing is required for [" + termVectorRequest.index() + "]/[" + termVectorRequest.type() + "]/[" + termVectorRequest.id() + "]")));, +++ b/src/test/java/org/elasticsearch/mget/SimpleMgetTests.java, +        assertThat(mgetResponse.getResponses()[1].getFailure().getMessage(), equalTo("routing is required for [test]/[test]/[1]"));, +++ b/src/test/java/org/elasticsearch/routing/SimpleRoutingTests.java, +import org.elasticsearch.action.admin.indices.alias.Alias;, +        client().admin().indices().prepareCreate("test").addAlias(new Alias("alias")), +        client().prepareIndex(indexOrAlias(), "type1", "1").setRouting("0").setSource("field", "value1").setRefresh(true).execute().actionGet();, +            client().prepareIndex(indexOrAlias(), "type1", "1").setSource("field", "value1").setRefresh(true).execute().actionGet();, +            assertThat(client().prepareGet(indexOrAlias(), "type1", "1").setRouting("0").execute().actionGet().isExists(), equalTo(true));, +        client().prepareDelete(indexOrAlias(), "type1", "1").setRefresh(true).execute().actionGet();, +                client().prepareGet(indexOrAlias(), "type1", "1").execute().actionGet().isExists();, +            assertThat(client().prepareGet(indexOrAlias(), "type1", "1").setRouting("0").execute().actionGet().isExists(), equalTo(false));, +        client().prepareIndex(indexOrAlias(), "type1", "1").setRouting("0").setSource("field", "value1").setRefresh(true).execute().actionGet();, +        client().prepareBulk().add(Requests.deleteRequest(indexOrAlias()).type("type1").id("1")).execute().actionGet();, +                client().prepareGet(indexOrAlias(), "type1", "1").execute().actionGet().isExists();, +            assertThat(client().prepareGet(indexOrAlias(), "type1", "1").setRouting("0").execute().actionGet().isExists(), equalTo(false));, +                .addAlias(new Alias("alias")), +        client().prepareIndex(indexOrAlias(), "type1", "1").setSource("field", "value1", "routing_field", "0").setRefresh(true).execute().actionGet();, +            client().prepareIndex(indexOrAlias(), "type1", "1").setRouting("1").setSource("field", "value1", "routing_field", "0").setRefresh(true).execute().actionGet();, +                client().prepareGet(indexOrAlias(), "type1", "1").execute().actionGet().isExists();, +            assertThat(client().prepareGet(indexOrAlias(), "type1", "1").setRouting("0").execute().actionGet().isExists(), equalTo(true));, +                .addAlias(new Alias("alias")), +                client().prepareIndex(indexOrAlias(), "type1", "1").setSource("field", "value1", "routing_field", "0")).execute().actionGet();, +                client().prepareGet(indexOrAlias(), "type1", "1").execute().actionGet().isExists();, +            assertThat(client().prepareGet(indexOrAlias(), "type1", "1").setRouting("0").execute().actionGet().isExists(), equalTo(true));, +                .addAlias(new Alias("alias")), +        client().prepareIndex(indexOrAlias(), "type1", "1").setSource("field", "value1", "routing_field", 0).execute().actionGet();, +                client().prepareGet(indexOrAlias(), "type1", "1").execute().actionGet().isExists();, +            assertThat(client().prepareGet(indexOrAlias(), "type1", "1").setRouting("0").execute().actionGet().isExists(), equalTo(true));, +        client().admin().indices().prepareCreate("test").addAlias(new Alias("alias")), +        client().prepareIndex(indexOrAlias(), "type1", "1").setRouting("0").setSource("field", "value1").get();, +        client().prepareIndex(indexOrAlias(), "type1", "2").setRouting("0").setSource("field", "value2").setRefresh(true).get();, +        assertThat(client().prepareGet(indexOrAlias(), "type1", "1").setRouting("0").execute().actionGet().isExists(), equalTo(true));, +            client().prepareGet(indexOrAlias(), "type1", "1").get();, +        ExplainResponse explainResponse = client().prepareExplain(indexOrAlias(), "type1", "2"), +            client().prepareExplain(indexOrAlias(), "type1", "2"), +        TermVectorResponse termVectorResponse = client().prepareTermVector(indexOrAlias(), "type1", "1").setRouting("0").get();, +            client().prepareTermVector(indexOrAlias(), "type1", "1").get();, +        UpdateResponse updateResponse = client().prepareUpdate(indexOrAlias(), "type1", "1").setRouting("0"), +            client().prepareUpdate(indexOrAlias(), "type1", "1").setDoc("field1", "value1").get();, +                .add(new MultiGetRequest.Item(indexOrAlias(), "type1", "1").routing("0")), +                .add(new MultiGetRequest.Item(indexOrAlias(), "type1", "2").routing("0")).get();, +                .add(new MultiGetRequest.Item(indexOrAlias(), "type1", "1")), +                .add(new MultiGetRequest.Item(indexOrAlias(), "type1", "2")).get();, +        assertThat(multiGetResponse.getResponses()[0].getFailure().getMessage(), equalTo("routing is required for [test]/[type1]/[1]"));, +        assertThat(multiGetResponse.getResponses()[1].getFailure().getMessage(), equalTo("routing is required for [test]/[type1]/[2]"));, +                .add(new TermVectorRequest(indexOrAlias(), "type1", "1").routing("0")), +                .add(new TermVectorRequest(indexOrAlias(), "type1", "2").routing("0")).get();, +                .add(new TermVectorRequest(indexOrAlias(), "type1", "1")), +                .add(new TermVectorRequest(indexOrAlias(), "type1", "2")).get();, +        assertThat(multiTermVectorsResponse.getResponses()[0].getFailure().getMessage(), equalTo("routing is required for [test]/[type1]/[1]"));, +        assertThat(multiTermVectorsResponse.getResponses()[1].getFailure().getMessage(), equalTo("routing is required for [test]/[type1]/[2]"));, +    }, +, +    private static String indexOrAlias() {, +        return randomBoolean() ? "test" : "alias";]