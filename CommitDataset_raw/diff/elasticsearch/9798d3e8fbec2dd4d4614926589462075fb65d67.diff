[+++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            // validate the join request, will throw a failure if it fails, which will get back to the, +            // node calling the join request, +            membership.sendValidateJoinRequestBlocking(node, state, pingTimeout);, +, +++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            // validate the join request, will throw a failure if it fails, which will get back to the, +            // node calling the join request, +            membership.sendValidateJoinRequestBlocking(node, state, pingTimeout);, +, +++ b/src/main/java/org/elasticsearch/discovery/zen/membership/MembershipAction.java, +        transportService.registerHandler(ValidateJoinRequestRequestHandler.ACTION, new ValidateJoinRequestRequestHandler());, +        transportService.removeHandler(ValidateJoinRequestRequestHandler.ACTION);, +    /**, +     * Validates the join request, throwing a failure if it failed., +     */, +    public void sendValidateJoinRequestBlocking(DiscoveryNode node, ClusterState clusterState, TimeValue timeout) throws ElasticSearchException {, +        transportService.submitRequest(node, ValidateJoinRequestRequestHandler.ACTION, new ValidateJoinRequest(clusterState), VoidTransportResponseHandler.INSTANCE_SAME), +                .txGet(timeout.millis(), TimeUnit.MILLISECONDS);, +    }, +, +    class ValidateJoinRequest implements Streamable {, +, +        ClusterState clusterState;, +, +        ValidateJoinRequest() {, +        }, +, +        ValidateJoinRequest(ClusterState clusterState) {, +            this.clusterState = clusterState;, +        }, +, +        @Override, +        public void readFrom(StreamInput in) throws IOException {, +            clusterState = ClusterState.Builder.readFrom(in, nodesProvider.nodes().localNode());, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            ClusterState.Builder.writeTo(clusterState, out);, +        }, +    }, +, +    private class ValidateJoinRequestRequestHandler extends BaseTransportRequestHandler<ValidateJoinRequest> {, +, +        static final String ACTION = "discovery/zen/join/validate";, +, +        @Override, +        public ValidateJoinRequest newInstance() {, +            return new ValidateJoinRequest();, +        }, +, +        @Override, +        public void messageReceived(ValidateJoinRequest request, TransportChannel channel) throws Exception {, +            // for now, the mere fact that we can serialize the cluster state acts as validation...., +            channel.sendResponse(VoidStreamable.INSTANCE);, +        }, +, +        @Override, +        public String executor() {, +            return ThreadPool.Names.GENERIC;, +        }, +    }, +, +            return ThreadPool.Names.GENERIC;]