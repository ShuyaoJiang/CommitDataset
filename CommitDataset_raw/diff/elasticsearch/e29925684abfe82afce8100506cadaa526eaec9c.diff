[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacet.java, +         * Order by the (higher) count of each term., +         * Order by the (lower) count of each term., +        REVERSE_COUNT((byte) 1, new Comparator<Entry>() {, +, +            @Override public int compare(Entry o1, Entry o2) {, +                return -COUNT.comparator().compare(o1, o2);, +            }, +        }),, +        /**, +         * Order by the terms., +         */, +        TERM((byte) 2, new Comparator<Entry>() {, +        }),, +        /**, +         * Order by the terms., +         */, +        REVERSE_TERM((byte) 3, new Comparator<Entry>() {, +, +            @Override public int compare(Entry o1, Entry o2) {, +                return -TERM.comparator().compare(o1, o2);, +            }, +            if (id == COUNT.id()) {, +            } else if (id == REVERSE_COUNT.id()) {, +                return REVERSE_COUNT;, +            } else if (id == TERM.id()) {, +            } else if (id == REVERSE_TERM.id()) {, +                return REVERSE_TERM;, +            } else if ("reverse_count".equals(type) || "reverseCount".equals(type)) {, +                return REVERSE_COUNT;, +            } else if ("reverse_term".equals(type) || "reverseTerm".equals(type)) {, +                return REVERSE_TERM;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facets/terms/TermsFacet.java, +         * Order by the (higher) count of each term., +         * Order by the (lower) count of each term., +        REVERSE_COUNT((byte) 1, new Comparator<Entry>() {, +, +            @Override public int compare(Entry o1, Entry o2) {, +                return -COUNT.comparator().compare(o1, o2);, +            }, +        }),, +        /**, +         * Order by the terms., +         */, +        TERM((byte) 2, new Comparator<Entry>() {, +        }),, +        /**, +         * Order by the terms., +         */, +        REVERSE_TERM((byte) 3, new Comparator<Entry>() {, +, +            @Override public int compare(Entry o1, Entry o2) {, +                return -TERM.comparator().compare(o1, o2);, +            }, +            if (id == COUNT.id()) {, +            } else if (id == REVERSE_COUNT.id()) {, +                return REVERSE_COUNT;, +            } else if (id == TERM.id()) {, +            } else if (id == REVERSE_TERM.id()) {, +                return REVERSE_TERM;, +            } else if ("reverse_count".equals(type) || "reverseCount".equals(type)) {, +                return REVERSE_COUNT;, +            } else if ("reverse_term".equals(type) || "reverseTerm".equals(type)) {, +                return REVERSE_TERM;, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/search/facets/SimpleFacetsTests.java, +        // Bounded Size, +, +        searchResponse = client.prepareSearch(), +                .setQuery(matchAllQuery()), +                .addFacet(termsFacet("facet1").field("tag").size(10).order(TermsFacet.ComparatorType.REVERSE_TERM)), +                .execute().actionGet();, +, +        facet = searchResponse.facets().facet("facet1");, +        assertThat(facet.name(), equalTo("facet1"));, +        assertThat(facet.entries().size(), equalTo(3));, +        assertThat(facet.entries().get(2).term(), equalTo("xxx"));, +        assertThat(facet.entries().get(2).count(), equalTo(1));, +        assertThat(facet.entries().get(1).term(), equalTo("yyy"));, +        assertThat(facet.entries().get(1).count(), equalTo(2));, +        assertThat(facet.entries().get(0).term(), equalTo("zzz"));, +        assertThat(facet.entries().get(0).count(), equalTo(1));, +]